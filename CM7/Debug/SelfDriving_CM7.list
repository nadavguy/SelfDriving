
SelfDriving_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014bd8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009340  08014e78  08014e78  00024e78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e1b8  0801e1b8  0003a384  2**0
                  CONTENTS
  4 .ARM          00000008  0801e1b8  0801e1b8  0002e1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e1c0  0801e1c0  0003a384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e1c0  0801e1c0  0002e1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e1c4  0801e1c4  0002e1c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000a2c4  24000000  0801e1c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  2400a2c4  0802848c  0003a2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  2400a324  080284ec  0003a324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000532c  2400a384  0802854c  0003a384  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2400f6b0  0802854c  0003f6b0  2**0
                  ALLOC
 13 .openamp_section 0000008c  38000000  0802854c  00040000  2**2
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  0003a384  2**0
                  CONTENTS, READONLY
 15 .debug_info   0006f1b3  00000000  00000000  0003a3b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a0cb  00000000  00000000  000a9565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002610  00000000  00000000  000b3630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002288  00000000  00000000  000b5c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0004a14e  00000000  00000000  000b7ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00043508  00000000  00000000  00102016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00199ba2  00000000  00000000  0014551e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000053  00000000  00000000  002df0c0  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000b294  00000000  00000000  002df114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400a384 	.word	0x2400a384
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014e60 	.word	0x08014e60

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400a388 	.word	0x2400a388
 80002dc:	08014e60 	.word	0x08014e60

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b9a6 	b.w	8000a8c <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9d08      	ldr	r5, [sp, #32]
 80007ce:	4604      	mov	r4, r0
 80007d0:	468c      	mov	ip, r1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	f040 8083 	bne.w	80008de <__udivmoddi4+0x116>
 80007d8:	428a      	cmp	r2, r1
 80007da:	4617      	mov	r7, r2
 80007dc:	d947      	bls.n	800086e <__udivmoddi4+0xa6>
 80007de:	fab2 f282 	clz	r2, r2
 80007e2:	b142      	cbz	r2, 80007f6 <__udivmoddi4+0x2e>
 80007e4:	f1c2 0020 	rsb	r0, r2, #32
 80007e8:	fa24 f000 	lsr.w	r0, r4, r0
 80007ec:	4091      	lsls	r1, r2
 80007ee:	4097      	lsls	r7, r2
 80007f0:	ea40 0c01 	orr.w	ip, r0, r1
 80007f4:	4094      	lsls	r4, r2
 80007f6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007fa:	0c23      	lsrs	r3, r4, #16
 80007fc:	fbbc f6f8 	udiv	r6, ip, r8
 8000800:	fa1f fe87 	uxth.w	lr, r7
 8000804:	fb08 c116 	mls	r1, r8, r6, ip
 8000808:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800080c:	fb06 f10e 	mul.w	r1, r6, lr
 8000810:	4299      	cmp	r1, r3
 8000812:	d909      	bls.n	8000828 <__udivmoddi4+0x60>
 8000814:	18fb      	adds	r3, r7, r3
 8000816:	f106 30ff 	add.w	r0, r6, #4294967295
 800081a:	f080 8119 	bcs.w	8000a50 <__udivmoddi4+0x288>
 800081e:	4299      	cmp	r1, r3
 8000820:	f240 8116 	bls.w	8000a50 <__udivmoddi4+0x288>
 8000824:	3e02      	subs	r6, #2
 8000826:	443b      	add	r3, r7
 8000828:	1a5b      	subs	r3, r3, r1
 800082a:	b2a4      	uxth	r4, r4
 800082c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000830:	fb08 3310 	mls	r3, r8, r0, r3
 8000834:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000838:	fb00 fe0e 	mul.w	lr, r0, lr
 800083c:	45a6      	cmp	lr, r4
 800083e:	d909      	bls.n	8000854 <__udivmoddi4+0x8c>
 8000840:	193c      	adds	r4, r7, r4
 8000842:	f100 33ff 	add.w	r3, r0, #4294967295
 8000846:	f080 8105 	bcs.w	8000a54 <__udivmoddi4+0x28c>
 800084a:	45a6      	cmp	lr, r4
 800084c:	f240 8102 	bls.w	8000a54 <__udivmoddi4+0x28c>
 8000850:	3802      	subs	r0, #2
 8000852:	443c      	add	r4, r7
 8000854:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000858:	eba4 040e 	sub.w	r4, r4, lr
 800085c:	2600      	movs	r6, #0
 800085e:	b11d      	cbz	r5, 8000868 <__udivmoddi4+0xa0>
 8000860:	40d4      	lsrs	r4, r2
 8000862:	2300      	movs	r3, #0
 8000864:	e9c5 4300 	strd	r4, r3, [r5]
 8000868:	4631      	mov	r1, r6
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	b902      	cbnz	r2, 8000872 <__udivmoddi4+0xaa>
 8000870:	deff      	udf	#255	; 0xff
 8000872:	fab2 f282 	clz	r2, r2
 8000876:	2a00      	cmp	r2, #0
 8000878:	d150      	bne.n	800091c <__udivmoddi4+0x154>
 800087a:	1bcb      	subs	r3, r1, r7
 800087c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000880:	fa1f f887 	uxth.w	r8, r7
 8000884:	2601      	movs	r6, #1
 8000886:	fbb3 fcfe 	udiv	ip, r3, lr
 800088a:	0c21      	lsrs	r1, r4, #16
 800088c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000890:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000894:	fb08 f30c 	mul.w	r3, r8, ip
 8000898:	428b      	cmp	r3, r1
 800089a:	d907      	bls.n	80008ac <__udivmoddi4+0xe4>
 800089c:	1879      	adds	r1, r7, r1
 800089e:	f10c 30ff 	add.w	r0, ip, #4294967295
 80008a2:	d202      	bcs.n	80008aa <__udivmoddi4+0xe2>
 80008a4:	428b      	cmp	r3, r1
 80008a6:	f200 80e9 	bhi.w	8000a7c <__udivmoddi4+0x2b4>
 80008aa:	4684      	mov	ip, r0
 80008ac:	1ac9      	subs	r1, r1, r3
 80008ae:	b2a3      	uxth	r3, r4
 80008b0:	fbb1 f0fe 	udiv	r0, r1, lr
 80008b4:	fb0e 1110 	mls	r1, lr, r0, r1
 80008b8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80008bc:	fb08 f800 	mul.w	r8, r8, r0
 80008c0:	45a0      	cmp	r8, r4
 80008c2:	d907      	bls.n	80008d4 <__udivmoddi4+0x10c>
 80008c4:	193c      	adds	r4, r7, r4
 80008c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x10a>
 80008cc:	45a0      	cmp	r8, r4
 80008ce:	f200 80d9 	bhi.w	8000a84 <__udivmoddi4+0x2bc>
 80008d2:	4618      	mov	r0, r3
 80008d4:	eba4 0408 	sub.w	r4, r4, r8
 80008d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008dc:	e7bf      	b.n	800085e <__udivmoddi4+0x96>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d909      	bls.n	80008f6 <__udivmoddi4+0x12e>
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	f000 80b1 	beq.w	8000a4a <__udivmoddi4+0x282>
 80008e8:	2600      	movs	r6, #0
 80008ea:	e9c5 0100 	strd	r0, r1, [r5]
 80008ee:	4630      	mov	r0, r6
 80008f0:	4631      	mov	r1, r6
 80008f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f6:	fab3 f683 	clz	r6, r3
 80008fa:	2e00      	cmp	r6, #0
 80008fc:	d14a      	bne.n	8000994 <__udivmoddi4+0x1cc>
 80008fe:	428b      	cmp	r3, r1
 8000900:	d302      	bcc.n	8000908 <__udivmoddi4+0x140>
 8000902:	4282      	cmp	r2, r0
 8000904:	f200 80b8 	bhi.w	8000a78 <__udivmoddi4+0x2b0>
 8000908:	1a84      	subs	r4, r0, r2
 800090a:	eb61 0103 	sbc.w	r1, r1, r3
 800090e:	2001      	movs	r0, #1
 8000910:	468c      	mov	ip, r1
 8000912:	2d00      	cmp	r5, #0
 8000914:	d0a8      	beq.n	8000868 <__udivmoddi4+0xa0>
 8000916:	e9c5 4c00 	strd	r4, ip, [r5]
 800091a:	e7a5      	b.n	8000868 <__udivmoddi4+0xa0>
 800091c:	f1c2 0320 	rsb	r3, r2, #32
 8000920:	fa20 f603 	lsr.w	r6, r0, r3
 8000924:	4097      	lsls	r7, r2
 8000926:	fa01 f002 	lsl.w	r0, r1, r2
 800092a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800092e:	40d9      	lsrs	r1, r3
 8000930:	4330      	orrs	r0, r6
 8000932:	0c03      	lsrs	r3, r0, #16
 8000934:	fbb1 f6fe 	udiv	r6, r1, lr
 8000938:	fa1f f887 	uxth.w	r8, r7
 800093c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000940:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000944:	fb06 f108 	mul.w	r1, r6, r8
 8000948:	4299      	cmp	r1, r3
 800094a:	fa04 f402 	lsl.w	r4, r4, r2
 800094e:	d909      	bls.n	8000964 <__udivmoddi4+0x19c>
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	f106 3cff 	add.w	ip, r6, #4294967295
 8000956:	f080 808d 	bcs.w	8000a74 <__udivmoddi4+0x2ac>
 800095a:	4299      	cmp	r1, r3
 800095c:	f240 808a 	bls.w	8000a74 <__udivmoddi4+0x2ac>
 8000960:	3e02      	subs	r6, #2
 8000962:	443b      	add	r3, r7
 8000964:	1a5b      	subs	r3, r3, r1
 8000966:	b281      	uxth	r1, r0
 8000968:	fbb3 f0fe 	udiv	r0, r3, lr
 800096c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000970:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000974:	fb00 f308 	mul.w	r3, r0, r8
 8000978:	428b      	cmp	r3, r1
 800097a:	d907      	bls.n	800098c <__udivmoddi4+0x1c4>
 800097c:	1879      	adds	r1, r7, r1
 800097e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000982:	d273      	bcs.n	8000a6c <__udivmoddi4+0x2a4>
 8000984:	428b      	cmp	r3, r1
 8000986:	d971      	bls.n	8000a6c <__udivmoddi4+0x2a4>
 8000988:	3802      	subs	r0, #2
 800098a:	4439      	add	r1, r7
 800098c:	1acb      	subs	r3, r1, r3
 800098e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000992:	e778      	b.n	8000886 <__udivmoddi4+0xbe>
 8000994:	f1c6 0c20 	rsb	ip, r6, #32
 8000998:	fa03 f406 	lsl.w	r4, r3, r6
 800099c:	fa22 f30c 	lsr.w	r3, r2, ip
 80009a0:	431c      	orrs	r4, r3
 80009a2:	fa20 f70c 	lsr.w	r7, r0, ip
 80009a6:	fa01 f306 	lsl.w	r3, r1, r6
 80009aa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80009ae:	fa21 f10c 	lsr.w	r1, r1, ip
 80009b2:	431f      	orrs	r7, r3
 80009b4:	0c3b      	lsrs	r3, r7, #16
 80009b6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009ba:	fa1f f884 	uxth.w	r8, r4
 80009be:	fb0e 1119 	mls	r1, lr, r9, r1
 80009c2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009c6:	fb09 fa08 	mul.w	sl, r9, r8
 80009ca:	458a      	cmp	sl, r1
 80009cc:	fa02 f206 	lsl.w	r2, r2, r6
 80009d0:	fa00 f306 	lsl.w	r3, r0, r6
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x220>
 80009d6:	1861      	adds	r1, r4, r1
 80009d8:	f109 30ff 	add.w	r0, r9, #4294967295
 80009dc:	d248      	bcs.n	8000a70 <__udivmoddi4+0x2a8>
 80009de:	458a      	cmp	sl, r1
 80009e0:	d946      	bls.n	8000a70 <__udivmoddi4+0x2a8>
 80009e2:	f1a9 0902 	sub.w	r9, r9, #2
 80009e6:	4421      	add	r1, r4
 80009e8:	eba1 010a 	sub.w	r1, r1, sl
 80009ec:	b2bf      	uxth	r7, r7
 80009ee:	fbb1 f0fe 	udiv	r0, r1, lr
 80009f2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009f6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009fa:	fb00 f808 	mul.w	r8, r0, r8
 80009fe:	45b8      	cmp	r8, r7
 8000a00:	d907      	bls.n	8000a12 <__udivmoddi4+0x24a>
 8000a02:	19e7      	adds	r7, r4, r7
 8000a04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a08:	d22e      	bcs.n	8000a68 <__udivmoddi4+0x2a0>
 8000a0a:	45b8      	cmp	r8, r7
 8000a0c:	d92c      	bls.n	8000a68 <__udivmoddi4+0x2a0>
 8000a0e:	3802      	subs	r0, #2
 8000a10:	4427      	add	r7, r4
 8000a12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a16:	eba7 0708 	sub.w	r7, r7, r8
 8000a1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000a1e:	454f      	cmp	r7, r9
 8000a20:	46c6      	mov	lr, r8
 8000a22:	4649      	mov	r1, r9
 8000a24:	d31a      	bcc.n	8000a5c <__udivmoddi4+0x294>
 8000a26:	d017      	beq.n	8000a58 <__udivmoddi4+0x290>
 8000a28:	b15d      	cbz	r5, 8000a42 <__udivmoddi4+0x27a>
 8000a2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a36:	40f2      	lsrs	r2, r6
 8000a38:	ea4c 0202 	orr.w	r2, ip, r2
 8000a3c:	40f7      	lsrs	r7, r6
 8000a3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a42:	2600      	movs	r6, #0
 8000a44:	4631      	mov	r1, r6
 8000a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4a:	462e      	mov	r6, r5
 8000a4c:	4628      	mov	r0, r5
 8000a4e:	e70b      	b.n	8000868 <__udivmoddi4+0xa0>
 8000a50:	4606      	mov	r6, r0
 8000a52:	e6e9      	b.n	8000828 <__udivmoddi4+0x60>
 8000a54:	4618      	mov	r0, r3
 8000a56:	e6fd      	b.n	8000854 <__udivmoddi4+0x8c>
 8000a58:	4543      	cmp	r3, r8
 8000a5a:	d2e5      	bcs.n	8000a28 <__udivmoddi4+0x260>
 8000a5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a60:	eb69 0104 	sbc.w	r1, r9, r4
 8000a64:	3801      	subs	r0, #1
 8000a66:	e7df      	b.n	8000a28 <__udivmoddi4+0x260>
 8000a68:	4608      	mov	r0, r1
 8000a6a:	e7d2      	b.n	8000a12 <__udivmoddi4+0x24a>
 8000a6c:	4660      	mov	r0, ip
 8000a6e:	e78d      	b.n	800098c <__udivmoddi4+0x1c4>
 8000a70:	4681      	mov	r9, r0
 8000a72:	e7b9      	b.n	80009e8 <__udivmoddi4+0x220>
 8000a74:	4666      	mov	r6, ip
 8000a76:	e775      	b.n	8000964 <__udivmoddi4+0x19c>
 8000a78:	4630      	mov	r0, r6
 8000a7a:	e74a      	b.n	8000912 <__udivmoddi4+0x14a>
 8000a7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a80:	4439      	add	r1, r7
 8000a82:	e713      	b.n	80008ac <__udivmoddi4+0xe4>
 8000a84:	3802      	subs	r0, #2
 8000a86:	443c      	add	r4, r7
 8000a88:	e724      	b.n	80008d4 <__udivmoddi4+0x10c>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_idiv0>:
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <rpmsg_recv_callback>:

uint32_t receivedDataPointer = 0;

int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data,
		size_t len, uint32_t src, void *priv)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
 8000a9c:	603b      	str	r3, [r7, #0]
	received_data = *((unsigned int *) data);
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <rpmsg_recv_callback+0x38>)
 8000aa4:	6013      	str	r3, [r2, #0]
	receivedDataPointer = (uint32_t)((unsigned int *) data);
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	4a08      	ldr	r2, [pc, #32]	; (8000acc <rpmsg_recv_callback+0x3c>)
 8000aaa:	6013      	str	r3, [r2, #0]
	message_received=1;
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <rpmsg_recv_callback+0x40>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	601a      	str	r2, [r3, #0]
	parseRecievedMessages((uint8_t)received_data);
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <rpmsg_recv_callback+0x38>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 f853 	bl	8000b64 <parseRecievedMessages>
	return 0;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2400a570 	.word	0x2400a570
 8000acc:	2400a3a0 	.word	0x2400a3a0
 8000ad0:	2400a5b8 	.word	0x2400a5b8

08000ad4 <receive_message>:
}
#endif

#ifdef CORE_CM7
unsigned int receive_message(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	while (message_received == 0 && service_created == 1)
 8000ad8:	e001      	b.n	8000ade <receive_message+0xa>
	{
		OPENAMP_check_for_message();
 8000ada:	f00c fd03 	bl	800d4e4 <OPENAMP_check_for_message>
	while (message_received == 0 && service_created == 1)
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <receive_message+0x28>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d103      	bne.n	8000aee <receive_message+0x1a>
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <receive_message+0x2c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d0f5      	beq.n	8000ada <receive_message+0x6>
	}
	message_received = 0;
 8000aee:	4b03      	ldr	r3, [pc, #12]	; (8000afc <receive_message+0x28>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]

	return received_data;
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <receive_message+0x30>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2400a5b8 	.word	0x2400a5b8
 8000b00:	2400a574 	.word	0x2400a574
 8000b04:	2400a570 	.word	0x2400a570

08000b08 <service_destroy_cb>:
void service_destroy_cb(struct rpmsg_endpoint *ept)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	/* this function is called while remote endpoint as been destroyed, the
	 * service is no more available
	 */
	service_created = 0;
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <service_destroy_cb+0x1c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	2400a574 	.word	0x2400a574

08000b28 <new_service_cb>:

void new_service_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
	/* create a endpoint for rmpsg communication */
	OPENAMP_create_endpoint(&rp_endpoint, name, dest, rpmsg_recv_callback,
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <new_service_cb+0x2c>)
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <new_service_cb+0x30>)
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	4807      	ldr	r0, [pc, #28]	; (8000b5c <new_service_cb+0x34>)
 8000b40:	f00c fcb2 	bl	800d4a8 <OPENAMP_create_endpoint>
			service_destroy_cb);
	service_created = 1;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <new_service_cb+0x38>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	601a      	str	r2, [r3, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	08000b09 	.word	0x08000b09
 8000b58:	08000a91 	.word	0x08000a91
 8000b5c:	2400a578 	.word	0x2400a578
 8000b60:	2400a574 	.word	0x2400a574

08000b64 <parseRecievedMessages>:
#ifdef CORE_CM7
#include "GUI_Paint.h"
#endif

void parseRecievedMessages(uint8_t opCode)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
	switch (opCode)
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d108      	bne.n	8000b86 <parseRecievedMessages+0x22>
	{
#ifdef CORE_CM7
		case (1):
		{
			memcpy(receivedAnglesData, (uint32_t *)receivedDataPointer, sizeof(tANGLESMESSAGES));
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <parseRecievedMessages+0x2c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <parseRecievedMessages+0x30>)
 8000b7a:	6812      	ldr	r2, [r2, #0]
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	221c      	movs	r2, #28
 8000b80:	4618      	mov	r0, r3
 8000b82:	f00f fb73 	bl	801026c <memcpy>
		default:
		{

		}
	}
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2400a56c 	.word	0x2400a56c
 8000b94:	2400a3a0 	.word	0x2400a3a0

08000b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b3f      	ldr	r3, [pc, #252]	; (8000c9c <SystemInit+0x104>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a3e      	ldr	r2, [pc, #248]	; (8000c9c <SystemInit+0x104>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000bac:	4b3b      	ldr	r3, [pc, #236]	; (8000c9c <SystemInit+0x104>)
 8000bae:	691b      	ldr	r3, [r3, #16]
 8000bb0:	4a3a      	ldr	r2, [pc, #232]	; (8000c9c <SystemInit+0x104>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bb8:	4b39      	ldr	r3, [pc, #228]	; (8000ca0 <SystemInit+0x108>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f003 030f 	and.w	r3, r3, #15
 8000bc0:	2b06      	cmp	r3, #6
 8000bc2:	d807      	bhi.n	8000bd4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bc4:	4b36      	ldr	r3, [pc, #216]	; (8000ca0 <SystemInit+0x108>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f023 030f 	bic.w	r3, r3, #15
 8000bcc:	4a34      	ldr	r2, [pc, #208]	; (8000ca0 <SystemInit+0x108>)
 8000bce:	f043 0307 	orr.w	r3, r3, #7
 8000bd2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bd4:	4b33      	ldr	r3, [pc, #204]	; (8000ca4 <SystemInit+0x10c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a32      	ldr	r2, [pc, #200]	; (8000ca4 <SystemInit+0x10c>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000be0:	4b30      	ldr	r3, [pc, #192]	; (8000ca4 <SystemInit+0x10c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000be6:	4b2f      	ldr	r3, [pc, #188]	; (8000ca4 <SystemInit+0x10c>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	492e      	ldr	r1, [pc, #184]	; (8000ca4 <SystemInit+0x10c>)
 8000bec:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <SystemInit+0x110>)
 8000bee:	4013      	ands	r3, r2
 8000bf0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bf2:	4b2b      	ldr	r3, [pc, #172]	; (8000ca0 <SystemInit+0x108>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d007      	beq.n	8000c0e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bfe:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <SystemInit+0x108>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f023 030f 	bic.w	r3, r3, #15
 8000c06:	4a26      	ldr	r2, [pc, #152]	; (8000ca0 <SystemInit+0x108>)
 8000c08:	f043 0307 	orr.w	r3, r3, #7
 8000c0c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c0e:	4b25      	ldr	r3, [pc, #148]	; (8000ca4 <SystemInit+0x10c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c14:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <SystemInit+0x10c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c1a:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <SystemInit+0x10c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c20:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <SystemInit+0x10c>)
 8000c22:	4a22      	ldr	r2, [pc, #136]	; (8000cac <SystemInit+0x114>)
 8000c24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <SystemInit+0x10c>)
 8000c28:	4a21      	ldr	r2, [pc, #132]	; (8000cb0 <SystemInit+0x118>)
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <SystemInit+0x10c>)
 8000c2e:	4a21      	ldr	r2, [pc, #132]	; (8000cb4 <SystemInit+0x11c>)
 8000c30:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <SystemInit+0x10c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <SystemInit+0x10c>)
 8000c3a:	4a1e      	ldr	r2, [pc, #120]	; (8000cb4 <SystemInit+0x11c>)
 8000c3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <SystemInit+0x10c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <SystemInit+0x10c>)
 8000c46:	4a1b      	ldr	r2, [pc, #108]	; (8000cb4 <SystemInit+0x11c>)
 8000c48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <SystemInit+0x10c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <SystemInit+0x10c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a13      	ldr	r2, [pc, #76]	; (8000ca4 <SystemInit+0x10c>)
 8000c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <SystemInit+0x10c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <SystemInit+0x120>)
 8000c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c66:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <SystemInit+0x120>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <SystemInit+0x124>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <SystemInit+0x128>)
 8000c74:	4013      	ands	r3, r2
 8000c76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c7a:	d202      	bcs.n	8000c82 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <SystemInit+0x12c>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <SystemInit+0x130>)
 8000c84:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c88:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000c8a:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <SystemInit+0x104>)
 8000c8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c90:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00
 8000ca0:	52002000 	.word	0x52002000
 8000ca4:	58024400 	.word	0x58024400
 8000ca8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cac:	02020200 	.word	0x02020200
 8000cb0:	01ff0000 	.word	0x01ff0000
 8000cb4:	01010280 	.word	0x01010280
 8000cb8:	580000c0 	.word	0x580000c0
 8000cbc:	5c001000 	.word	0x5c001000
 8000cc0:	ffff0000 	.word	0xffff0000
 8000cc4:	51008108 	.word	0x51008108
 8000cc8:	52004000 	.word	0x52004000

08000ccc <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000cd0:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <MX_ETH_Init+0x90>)
 8000cd2:	4a23      	ldr	r2, [pc, #140]	; (8000d60 <MX_ETH_Init+0x94>)
 8000cd4:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000cd6:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <MX_ETH_Init+0x90>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000cde:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <MX_ETH_Init+0x90>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	2280      	movs	r2, #128	; 0x80
 8000ce6:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <MX_ETH_Init+0x90>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	3302      	adds	r3, #2
 8000cee:	22e1      	movs	r2, #225	; 0xe1
 8000cf0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <MX_ETH_Init+0x90>)
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	3303      	adds	r3, #3
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000cfc:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <MX_ETH_Init+0x90>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	3304      	adds	r3, #4
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <MX_ETH_Init+0x90>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	3305      	adds	r3, #5
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <MX_ETH_Init+0x90>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d16:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <MX_ETH_Init+0x90>)
 8000d18:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <MX_ETH_Init+0x98>)
 8000d1a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <MX_ETH_Init+0x90>)
 8000d1e:	4a12      	ldr	r2, [pc, #72]	; (8000d68 <MX_ETH_Init+0x9c>)
 8000d20:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <MX_ETH_Init+0x90>)
 8000d24:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d28:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d2a:	480c      	ldr	r0, [pc, #48]	; (8000d5c <MX_ETH_Init+0x90>)
 8000d2c:	f001 fb4c 	bl	80023c8 <HAL_ETH_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000d36:	f000 fc3a 	bl	80015ae <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d3a:	2234      	movs	r2, #52	; 0x34
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	480b      	ldr	r0, [pc, #44]	; (8000d6c <MX_ETH_Init+0xa0>)
 8000d40:	f00f fabc 	bl	80102bc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_ETH_Init+0xa0>)
 8000d46:	2221      	movs	r2, #33	; 0x21
 8000d48:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <MX_ETH_Init+0xa0>)
 8000d4c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d50:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <MX_ETH_Init+0xa0>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	2400a464 	.word	0x2400a464
 8000d60:	40028000 	.word	0x40028000
 8000d64:	2400a324 	.word	0x2400a324
 8000d68:	2400a2c4 	.word	0x2400a2c4
 8000d6c:	2400a4ec 	.word	0x2400a4ec

08000d70 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08e      	sub	sp, #56	; 0x38
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a59      	ldr	r2, [pc, #356]	; (8000ef4 <HAL_ETH_MspInit+0x184>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	f040 80ab 	bne.w	8000eea <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d94:	4b58      	ldr	r3, [pc, #352]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000d96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d9a:	4a57      	ldr	r2, [pc, #348]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000da0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000da4:	4b54      	ldr	r3, [pc, #336]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000da6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000daa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dae:	623b      	str	r3, [r7, #32]
 8000db0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000db2:	4b51      	ldr	r3, [pc, #324]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000db4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000db8:	4a4f      	ldr	r2, [pc, #316]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dbe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dc2:	4b4d      	ldr	r3, [pc, #308]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000dc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dcc:	61fb      	str	r3, [r7, #28]
 8000dce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000dd0:	4b49      	ldr	r3, [pc, #292]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000dd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dd6:	4a48      	ldr	r2, [pc, #288]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ddc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000de0:	4b45      	ldr	r3, [pc, #276]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000de2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dea:	61bb      	str	r3, [r7, #24]
 8000dec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dee:	4b42      	ldr	r3, [pc, #264]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df4:	4a40      	ldr	r2, [pc, #256]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000df6:	f043 0304 	orr.w	r3, r3, #4
 8000dfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dfe:	4b3e      	ldr	r3, [pc, #248]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e04:	f003 0304 	and.w	r3, r3, #4
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b3a      	ldr	r3, [pc, #232]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e12:	4a39      	ldr	r2, [pc, #228]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e1c:	4b36      	ldr	r3, [pc, #216]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	4b33      	ldr	r3, [pc, #204]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e30:	4a31      	ldr	r2, [pc, #196]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e32:	f043 0302 	orr.w	r3, r3, #2
 8000e36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e3a:	4b2f      	ldr	r3, [pc, #188]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e48:	4b2b      	ldr	r3, [pc, #172]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4e:	4a2a      	ldr	r2, [pc, #168]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e58:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e66:	2332      	movs	r3, #50	; 0x32
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e76:	230b      	movs	r3, #11
 8000e78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7e:	4619      	mov	r1, r3
 8000e80:	481e      	ldr	r0, [pc, #120]	; (8000efc <HAL_ETH_MspInit+0x18c>)
 8000e82:	f001 feb7 	bl	8002bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e86:	2386      	movs	r3, #134	; 0x86
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e96:	230b      	movs	r3, #11
 8000e98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4817      	ldr	r0, [pc, #92]	; (8000f00 <HAL_ETH_MspInit+0x190>)
 8000ea2:	f001 fea7 	bl	8002bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ea6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eb8:	230b      	movs	r3, #11
 8000eba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4810      	ldr	r0, [pc, #64]	; (8000f04 <HAL_ETH_MspInit+0x194>)
 8000ec4:	f001 fe96 	bl	8002bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ec8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eda:	230b      	movs	r3, #11
 8000edc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4808      	ldr	r0, [pc, #32]	; (8000f08 <HAL_ETH_MspInit+0x198>)
 8000ee6:	f001 fe85 	bl	8002bf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000eea:	bf00      	nop
 8000eec:	3738      	adds	r7, #56	; 0x38
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40028000 	.word	0x40028000
 8000ef8:	58024400 	.word	0x58024400
 8000efc:	58020800 	.word	0x58020800
 8000f00:	58020000 	.word	0x58020000
 8000f04:	58020400 	.word	0x58020400
 8000f08:	58021800 	.word	0x58021800

08000f0c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08e      	sub	sp, #56	; 0x38
 8000f10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f22:	4b53      	ldr	r3, [pc, #332]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f28:	4a51      	ldr	r2, [pc, #324]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f2a:	f043 0304 	orr.w	r3, r3, #4
 8000f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f32:	4b4f      	ldr	r3, [pc, #316]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f38:	f003 0304 	and.w	r3, r3, #4
 8000f3c:	623b      	str	r3, [r7, #32]
 8000f3e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f40:	4b4b      	ldr	r3, [pc, #300]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f46:	4a4a      	ldr	r2, [pc, #296]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f50:	4b47      	ldr	r3, [pc, #284]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f5a:	61fb      	str	r3, [r7, #28]
 8000f5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	4b44      	ldr	r3, [pc, #272]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f64:	4a42      	ldr	r2, [pc, #264]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f6e:	4b40      	ldr	r3, [pc, #256]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	61bb      	str	r3, [r7, #24]
 8000f7a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7c:	4b3c      	ldr	r3, [pc, #240]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f82:	4a3b      	ldr	r2, [pc, #236]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f8c:	4b38      	ldr	r3, [pc, #224]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f9a:	4b35      	ldr	r3, [pc, #212]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa0:	4a33      	ldr	r2, [pc, #204]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fa2:	f043 0320 	orr.w	r3, r3, #32
 8000fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000faa:	4b31      	ldr	r3, [pc, #196]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb0:	f003 0320 	and.w	r3, r3, #32
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb8:	4b2d      	ldr	r3, [pc, #180]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fbe:	4a2c      	ldr	r2, [pc, #176]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fc0:	f043 0310 	orr.w	r3, r3, #16
 8000fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc8:	4b29      	ldr	r3, [pc, #164]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fce:	f003 0310 	and.w	r3, r3, #16
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd6:	4b26      	ldr	r3, [pc, #152]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fdc:	4a24      	ldr	r2, [pc, #144]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fde:	f043 0308 	orr.w	r3, r3, #8
 8000fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe6:	4b22      	ldr	r3, [pc, #136]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fec:	f003 0308 	and.w	r3, r3, #8
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <MX_GPIO_Init+0x164>)
 8000ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffa:	4a1d      	ldr	r2, [pc, #116]	; (8001070 <MX_GPIO_Init+0x164>)
 8000ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001000:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <MX_GPIO_Init+0x164>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001018:	4816      	ldr	r0, [pc, #88]	; (8001074 <MX_GPIO_Init+0x168>)
 800101a:	f001 ff9b 	bl	8002f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001024:	4814      	ldr	r0, [pc, #80]	; (8001078 <MX_GPIO_Init+0x16c>)
 8001026:	f001 ff95 	bl	8002f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800102a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800103c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001040:	4619      	mov	r1, r3
 8001042:	480c      	ldr	r0, [pc, #48]	; (8001074 <MX_GPIO_Init+0x168>)
 8001044:	f001 fdd6 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8001048:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104e:	2301      	movs	r3, #1
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800105a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <MX_GPIO_Init+0x16c>)
 8001062:	f001 fdc7 	bl	8002bf4 <HAL_GPIO_Init>

}
 8001066:	bf00      	nop
 8001068:	3738      	adds	r7, #56	; 0x38
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	58024400 	.word	0x58024400
 8001074:	58021400 	.word	0x58021400
 8001078:	58021800 	.word	0x58021800

0800107c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001080:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <MX_I2C1_Init+0x74>)
 8001082:	4a1c      	ldr	r2, [pc, #112]	; (80010f4 <MX_I2C1_Init+0x78>)
 8001084:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301242;
 8001086:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <MX_I2C1_Init+0x74>)
 8001088:	4a1b      	ldr	r2, [pc, #108]	; (80010f8 <MX_I2C1_Init+0x7c>)
 800108a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800108c:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <MX_I2C1_Init+0x74>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <MX_I2C1_Init+0x74>)
 8001094:	2201      	movs	r2, #1
 8001096:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <MX_I2C1_Init+0x74>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <MX_I2C1_Init+0x74>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <MX_I2C1_Init+0x74>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <MX_I2C1_Init+0x74>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <MX_I2C1_Init+0x74>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010b6:	480e      	ldr	r0, [pc, #56]	; (80010f0 <MX_I2C1_Init+0x74>)
 80010b8:	f001 ffc0 	bl	800303c <HAL_I2C_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010c2:	f000 fa74 	bl	80015ae <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010c6:	2100      	movs	r1, #0
 80010c8:	4809      	ldr	r0, [pc, #36]	; (80010f0 <MX_I2C1_Init+0x74>)
 80010ca:	f002 f861 	bl	8003190 <HAL_I2CEx_ConfigAnalogFilter>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010d4:	f000 fa6b 	bl	80015ae <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010d8:	2100      	movs	r1, #0
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_I2C1_Init+0x74>)
 80010dc:	f002 f8a3 	bl	8003226 <HAL_I2CEx_ConfigDigitalFilter>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010e6:	f000 fa62 	bl	80015ae <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	2400a520 	.word	0x2400a520
 80010f4:	40005400 	.word	0x40005400
 80010f8:	00301242 	.word	0x00301242

080010fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b0b8      	sub	sp, #224	; 0xe0
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	22bc      	movs	r2, #188	; 0xbc
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f00f f8cd 	bl	80102bc <memset>
  if(i2cHandle->Instance==I2C1)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a28      	ldr	r2, [pc, #160]	; (80011c8 <HAL_I2C_MspInit+0xcc>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d149      	bne.n	80011c0 <HAL_I2C_MspInit+0xc4>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800112c:	2308      	movs	r3, #8
 800112e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001130:	2300      	movs	r3, #0
 8001132:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001136:	f107 0310 	add.w	r3, r7, #16
 800113a:	4618      	mov	r0, r3
 800113c:	f003 fa0e 	bl	800455c <HAL_RCCEx_PeriphCLKConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001146:	f000 fa32 	bl	80015ae <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	4b20      	ldr	r3, [pc, #128]	; (80011cc <HAL_I2C_MspInit+0xd0>)
 800114c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001150:	4a1e      	ldr	r2, [pc, #120]	; (80011cc <HAL_I2C_MspInit+0xd0>)
 8001152:	f043 0302 	orr.w	r3, r3, #2
 8001156:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800115a:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <HAL_I2C_MspInit+0xd0>)
 800115c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL___ChassisMPU_Pin|I2C1_SDA___ChassisMPU_Pin;
 8001168:	23c0      	movs	r3, #192	; 0xc0
 800116a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800116e:	2312      	movs	r3, #18
 8001170:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001180:	2304      	movs	r3, #4
 8001182:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001186:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800118a:	4619      	mov	r1, r3
 800118c:	4810      	ldr	r0, [pc, #64]	; (80011d0 <HAL_I2C_MspInit+0xd4>)
 800118e:	f001 fd31 	bl	8002bf4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <HAL_I2C_MspInit+0xd0>)
 8001194:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001198:	4a0c      	ldr	r2, [pc, #48]	; (80011cc <HAL_I2C_MspInit+0xd0>)
 800119a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800119e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <HAL_I2C_MspInit+0xd0>)
 80011a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 4, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2104      	movs	r1, #4
 80011b4:	201f      	movs	r0, #31
 80011b6:	f001 f856 	bl	8002266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80011ba:	201f      	movs	r0, #31
 80011bc:	f001 f86d 	bl	800229a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011c0:	bf00      	nop
 80011c2:	37e0      	adds	r7, #224	; 0xe0
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40005400 	.word	0x40005400
 80011cc:	58024400 	.word	0x58024400
 80011d0:	58020400 	.word	0x58020400

080011d4 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af02      	add	r7, sp, #8
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e8:	d101      	bne.n	80011ee <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <rpmsg_send+0x3c>)
 80011ec:	e00c      	b.n	8001208 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011f6:	2301      	movs	r3, #1
 80011f8:	9301      	str	r3, [sp, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f009 fe3b 	bl	800ae7c <rpmsg_send_offchannel_raw>
 8001206:	4603      	mov	r3, r0
					 len, true);
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	fffff829 	.word	0xfffff829

08001214 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
 8001220:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2220      	movs	r2, #32
 8001226:	68b9      	ldr	r1, [r7, #8]
 8001228:	4618      	mov	r0, r3
 800122a:	f010 f9a5 	bl	8011578 <strncpy>
	ept->addr = src;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af02      	add	r7, sp, #8
/* USER CODE BEGIN Boot_Mode_Sequence_0 */

/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	MPU_Config();
 8001256:	f000 f983 	bl	8001560 <MPU_Config>
	CPU_CACHE_Enable();
 800125a:	f000 f913 	bl	8001484 <CPU_CACHE_Enable>
//	timeout = 0xFFFF;
	while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 800125e:	e000      	b.n	8001262 <main+0x12>
	{
		asm("nop");
 8001260:	bf00      	nop
	while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 8001262:	4b3f      	ldr	r3, [pc, #252]	; (8001360 <main+0x110>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f8      	bne.n	8001260 <main+0x10>
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126e:	f000 fe49 	bl	8001f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001272:	f000 f881 	bl	8001378 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8001276:	4b3a      	ldr	r3, [pc, #232]	; (8001360 <main+0x110>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127c:	4a38      	ldr	r2, [pc, #224]	; (8001360 <main+0x110>)
 800127e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001282:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001286:	4b36      	ldr	r3, [pc, #216]	; (8001360 <main+0x110>)
 8001288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8001294:	2000      	movs	r0, #0
 8001296:	f001 fe77 	bl	8002f88 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 800129a:	2100      	movs	r1, #0
 800129c:	2000      	movs	r0, #0
 800129e:	f001 fe8d 	bl	8002fbc <HAL_HSEM_Release>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a2:	f7ff fe33 	bl	8000f0c <MX_GPIO_Init>
  MX_ETH_Init();
 80012a6:	f7ff fd11 	bl	8000ccc <MX_ETH_Init>
  MX_USART3_UART_Init();
 80012aa:	f000 fc93 	bl	8001bd4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80012ae:	f000 fd43 	bl	8001d38 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80012b2:	f7ff fee3 	bl	800107c <MX_I2C1_Init>
  MX_SPI3_Init();
 80012b6:	f000 f97f 	bl	80015b8 <MX_SPI3_Init>
  MX_TIM1_Init();
 80012ba:	f000 fb9d 	bl	80019f8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	MAILBOX_Init();
 80012be:	f00b ff3b 	bl	800d138 <MAILBOX_Init>

	/* Initialize the rpmsg endpoint to set default addresses to RPMSG_ADDR_ANY */
	rpmsg_init_ept(&rp_endpoint, RPMSG_CHAN_NAME, RPMSG_ADDR_ANY, RPMSG_ADDR_ANY,
 80012c2:	2300      	movs	r3, #0
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	2300      	movs	r3, #0
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	f04f 32ff 	mov.w	r2, #4294967295
 80012d2:	4924      	ldr	r1, [pc, #144]	; (8001364 <main+0x114>)
 80012d4:	4824      	ldr	r0, [pc, #144]	; (8001368 <main+0x118>)
 80012d6:	f7ff ff9d 	bl	8001214 <rpmsg_init_ept>
			NULL, NULL);
	/* Initialize OpenAmp and libmetal libraries */
	if (MX_OPENAMP_Init(RPMSG_MASTER, new_service_cb)!= HAL_OK)
 80012da:	4924      	ldr	r1, [pc, #144]	; (800136c <main+0x11c>)
 80012dc:	2000      	movs	r0, #0
 80012de:	f00c f84d 	bl	800d37c <MX_OPENAMP_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <main+0x9c>
	{
		Error_Handler();
 80012e8:	f000 f961 	bl	80015ae <Error_Handler>
	/*
	 * The rpmsg service is initiate by the remote processor, on A7 new_service_cb
	 * callback is received on service creation. Wait for the callback
	 */
//	HAL_Delay(2000);
	OPENAMP_Wait_EndPointready(&rp_endpoint);
 80012ec:	481e      	ldr	r0, [pc, #120]	; (8001368 <main+0x118>)
 80012ee:	f00c f905 	bl	800d4fc <OPENAMP_Wait_EndPointready>

	/* Send the massage to the remote CPU */
	int32_t status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 80012f2:	2204      	movs	r2, #4
 80012f4:	491e      	ldr	r1, [pc, #120]	; (8001370 <main+0x120>)
 80012f6:	481c      	ldr	r0, [pc, #112]	; (8001368 <main+0x118>)
 80012f8:	f7ff ff6c 	bl	80011d4 <rpmsg_send>
 80012fc:	60f8      	str	r0, [r7, #12]

	if (status < 0)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2b00      	cmp	r3, #0
 8001302:	da01      	bge.n	8001308 <main+0xb8>
	{
		Error_Handler();
 8001304:	f000 f953 	bl	80015ae <Error_Handler>

	//	ssd1306_TestAll();
//	ssd1306_Init();
//	ssd1306_TestBorder();

	uint8_t message = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	72fb      	strb	r3, [r7, #11]
	while (message < 100)
 800130c:	e011      	b.n	8001332 <main+0xe2>
	{
		/* Receive the massage from the remote CPU */
		message = receive_message();
 800130e:	f7ff fbe1 	bl	8000ad4 <receive_message>
 8001312:	4603      	mov	r3, r0
 8001314:	b2db      	uxtb	r3, r3
 8001316:	72fb      	strb	r3, [r7, #11]
//		char localT[32] = "";
//		snprintf(localT,sizeof(localT),"%d",message);
//		ssd1306_SetCursor(0, 0);
//		ssd1306_WriteString(localT, Font_7x10, White);
		status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 8001318:	f107 030b 	add.w	r3, r7, #11
 800131c:	2201      	movs	r2, #1
 800131e:	4619      	mov	r1, r3
 8001320:	4811      	ldr	r0, [pc, #68]	; (8001368 <main+0x118>)
 8001322:	f7ff ff57 	bl	80011d4 <rpmsg_send>
 8001326:	60f8      	str	r0, [r7, #12]
		if (status < 0)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	da01      	bge.n	8001332 <main+0xe2>
		{
			Error_Handler();
 800132e:	f000 f93e 	bl	80015ae <Error_Handler>
	while (message < 100)
 8001332:	7afb      	ldrb	r3, [r7, #11]
 8001334:	2b63      	cmp	r3, #99	; 0x63
 8001336:	d9ea      	bls.n	800130e <main+0xbe>
		}
	}

	//	isPortrait = true;
	screenInit();
 8001338:	f00a ffa8 	bl	800c28c <screenInit>
	screenClear();
 800133c:	f00b f882 	bl	800c444 <screenClear>
	renderCompleteFrame = true;
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <main+0x124>)
 8001342:	2201      	movs	r2, #1
 8001344:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		message = receive_message();
 8001346:	f7ff fbc5 	bl	8000ad4 <receive_message>
 800134a:	4603      	mov	r3, r0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	72fb      	strb	r3, [r7, #11]
		screenUpdate(true);
 8001350:	2001      	movs	r0, #1
 8001352:	f00b fa97 	bl	800c884 <screenUpdate>
		displayNextFrame();
 8001356:	f00c f975 	bl	800d644 <displayNextFrame>
		message = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	72fb      	strb	r3, [r7, #11]
		message = receive_message();
 800135e:	e7f2      	b.n	8001346 <main+0xf6>
 8001360:	58024400 	.word	0x58024400
 8001364:	08014e78 	.word	0x08014e78
 8001368:	2400a578 	.word	0x2400a578
 800136c:	08000b29 	.word	0x08000b29
 8001370:	2400a3a4 	.word	0x2400a3a4
 8001374:	2400a3b3 	.word	0x2400a3b3

08001378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b09c      	sub	sp, #112	; 0x70
 800137c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800137e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001382:	224c      	movs	r2, #76	; 0x4c
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f00e ff98 	bl	80102bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	2220      	movs	r2, #32
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f00e ff92 	bl	80102bc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001398:	2004      	movs	r0, #4
 800139a:	f002 f8d9 	bl	8003550 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800139e:	2300      	movs	r3, #0
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	4b35      	ldr	r3, [pc, #212]	; (8001478 <SystemClock_Config+0x100>)
 80013a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a6:	4a34      	ldr	r2, [pc, #208]	; (8001478 <SystemClock_Config+0x100>)
 80013a8:	f023 0301 	bic.w	r3, r3, #1
 80013ac:	62d3      	str	r3, [r2, #44]	; 0x2c
 80013ae:	4b32      	ldr	r3, [pc, #200]	; (8001478 <SystemClock_Config+0x100>)
 80013b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	4b30      	ldr	r3, [pc, #192]	; (800147c <SystemClock_Config+0x104>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013c0:	4a2e      	ldr	r2, [pc, #184]	; (800147c <SystemClock_Config+0x104>)
 80013c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c6:	6193      	str	r3, [r2, #24]
 80013c8:	4b2c      	ldr	r3, [pc, #176]	; (800147c <SystemClock_Config+0x104>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013d0:	603b      	str	r3, [r7, #0]
 80013d2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013d4:	bf00      	nop
 80013d6:	4b29      	ldr	r3, [pc, #164]	; (800147c <SystemClock_Config+0x104>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013e2:	d1f8      	bne.n	80013d6 <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80013e4:	4b26      	ldr	r3, [pc, #152]	; (8001480 <SystemClock_Config+0x108>)
 80013e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e8:	f023 0303 	bic.w	r3, r3, #3
 80013ec:	4a24      	ldr	r2, [pc, #144]	; (8001480 <SystemClock_Config+0x108>)
 80013ee:	f043 0302 	orr.w	r3, r3, #2
 80013f2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013f4:	2301      	movs	r3, #1
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013fe:	2302      	movs	r3, #2
 8001400:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001402:	2302      	movs	r3, #2
 8001404:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001406:	2301      	movs	r3, #1
 8001408:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 800140a:	2312      	movs	r3, #18
 800140c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800140e:	2302      	movs	r3, #2
 8001410:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001412:	2302      	movs	r3, #2
 8001414:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001416:	2302      	movs	r3, #2
 8001418:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800141a:	230c      	movs	r3, #12
 800141c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800141e:	2302      	movs	r3, #2
 8001420:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8001422:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001426:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142c:	4618      	mov	r0, r3
 800142e:	f002 f8f9 	bl	8003624 <HAL_RCC_OscConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001438:	f000 f8b9 	bl	80015ae <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800143c:	233f      	movs	r3, #63	; 0x3f
 800143e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001440:	2303      	movs	r3, #3
 8001442:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001450:	2340      	movs	r3, #64	; 0x40
 8001452:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001458:	2300      	movs	r3, #0
 800145a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	2101      	movs	r1, #1
 8001460:	4618      	mov	r0, r3
 8001462:	f002 fcef 	bl	8003e44 <HAL_RCC_ClockConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800146c:	f000 f89f 	bl	80015ae <Error_Handler>
  }
}
 8001470:	bf00      	nop
 8001472:	3770      	adds	r7, #112	; 0x70
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	58000400 	.word	0x58000400
 800147c:	58024800 	.word	0x58024800
 8001480:	58024400 	.word	0x58024400

08001484 <CPU_CACHE_Enable>:
 * @brief  CPU L1-Cache enable.
 * @param  None
 * @retval None
 */
static void CPU_CACHE_Enable(void)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800148a:	4b34      	ldr	r3, [pc, #208]	; (800155c <CPU_CACHE_Enable+0xd8>)
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d11b      	bne.n	80014ce <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001496:	f3bf 8f4f 	dsb	sy
}
 800149a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800149c:	f3bf 8f6f 	isb	sy
}
 80014a0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80014a2:	4b2e      	ldr	r3, [pc, #184]	; (800155c <CPU_CACHE_Enable+0xd8>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80014aa:	f3bf 8f4f 	dsb	sy
}
 80014ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014b0:	f3bf 8f6f 	isb	sy
}
 80014b4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80014b6:	4b29      	ldr	r3, [pc, #164]	; (800155c <CPU_CACHE_Enable+0xd8>)
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	4a28      	ldr	r2, [pc, #160]	; (800155c <CPU_CACHE_Enable+0xd8>)
 80014bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80014c2:	f3bf 8f4f 	dsb	sy
}
 80014c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014c8:	f3bf 8f6f 	isb	sy
}
 80014cc:	e000      	b.n	80014d0 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80014ce:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80014d0:	4b22      	ldr	r3, [pc, #136]	; (800155c <CPU_CACHE_Enable+0xd8>)
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d138      	bne.n	800154e <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80014dc:	4b1f      	ldr	r3, [pc, #124]	; (800155c <CPU_CACHE_Enable+0xd8>)
 80014de:	2200      	movs	r2, #0
 80014e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80014e4:	f3bf 8f4f 	dsb	sy
}
 80014e8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80014ea:	4b1c      	ldr	r3, [pc, #112]	; (800155c <CPU_CACHE_Enable+0xd8>)
 80014ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014f0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	0b5b      	lsrs	r3, r3, #13
 80014f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80014fa:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	08db      	lsrs	r3, r3, #3
 8001500:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001504:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	015a      	lsls	r2, r3, #5
 800150a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800150e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001514:	4911      	ldr	r1, [pc, #68]	; (800155c <CPU_CACHE_Enable+0xd8>)
 8001516:	4313      	orrs	r3, r2
 8001518:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	1e5a      	subs	r2, r3, #1
 8001520:	607a      	str	r2, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1ef      	bne.n	8001506 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	1e5a      	subs	r2, r3, #1
 800152a:	60ba      	str	r2, [r7, #8]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1e5      	bne.n	80014fc <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8001530:	f3bf 8f4f 	dsb	sy
}
 8001534:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <CPU_CACHE_Enable+0xd8>)
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	4a08      	ldr	r2, [pc, #32]	; (800155c <CPU_CACHE_Enable+0xd8>)
 800153c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001540:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001542:	f3bf 8f4f 	dsb	sy
}
 8001546:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001548:	f3bf 8f6f 	isb	sy
}
 800154c:	e000      	b.n	8001550 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800154e:	bf00      	nop
	/* Enable I-Cache */
	SCB_EnableICache();

	/* Enable D-Cache */
	SCB_EnableDCache();
}
 8001550:	bf00      	nop
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <MPU_Config>:
 *         The Region Size is 64KB.
 * @param  None
 * @retval None
 */
static void MPU_Config(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct;

	/* Disable the MPU */
	HAL_MPU_Disable();
 8001566:	f000 feb3 	bl	80022d0 <HAL_MPU_Disable>

	/* Configure the MPU attributes as WT for SDRAM */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800156a:	2301      	movs	r3, #1
 800156c:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = D3_SRAM_BASE;
 800156e:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001572:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8001574:	230f      	movs	r3, #15
 8001576:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001578:	2303      	movs	r3, #3
 800157a:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001584:	2301      	movs	r3, #1
 8001586:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001588:	2300      	movs	r3, #0
 800158a:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800158c:	2300      	movs	r3, #0
 800158e:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8001590:	2300      	movs	r3, #0
 8001592:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	733b      	strb	r3, [r7, #12]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001598:	463b      	mov	r3, r7
 800159a:	4618      	mov	r0, r3
 800159c:	f000 fed0 	bl	8002340 <HAL_MPU_ConfigRegion>

	/* Enable the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80015a0:	2004      	movs	r0, #4
 80015a2:	f000 fead 	bl	8002300 <HAL_MPU_Enable>
}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80015b2:	b672      	cpsid	i
}
 80015b4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80015b6:	e7fe      	b.n	80015b6 <Error_Handler+0x8>

080015b8 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80015bc:	4b27      	ldr	r3, [pc, #156]	; (800165c <MX_SPI3_Init+0xa4>)
 80015be:	4a28      	ldr	r2, [pc, #160]	; (8001660 <MX_SPI3_Init+0xa8>)
 80015c0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80015c2:	4b26      	ldr	r3, [pc, #152]	; (800165c <MX_SPI3_Init+0xa4>)
 80015c4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80015c8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80015ca:	4b24      	ldr	r3, [pc, #144]	; (800165c <MX_SPI3_Init+0xa4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80015d0:	4b22      	ldr	r3, [pc, #136]	; (800165c <MX_SPI3_Init+0xa4>)
 80015d2:	2207      	movs	r2, #7
 80015d4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015d6:	4b21      	ldr	r3, [pc, #132]	; (800165c <MX_SPI3_Init+0xa4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <MX_SPI3_Init+0xa4>)
 80015de:	2200      	movs	r2, #0
 80015e0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80015e2:	4b1e      	ldr	r3, [pc, #120]	; (800165c <MX_SPI3_Init+0xa4>)
 80015e4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015e8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80015ea:	4b1c      	ldr	r3, [pc, #112]	; (800165c <MX_SPI3_Init+0xa4>)
 80015ec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80015f0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <MX_SPI3_Init+0xa4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80015f8:	4b18      	ldr	r3, [pc, #96]	; (800165c <MX_SPI3_Init+0xa4>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015fe:	4b17      	ldr	r3, [pc, #92]	; (800165c <MX_SPI3_Init+0xa4>)
 8001600:	2200      	movs	r2, #0
 8001602:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <MX_SPI3_Init+0xa4>)
 8001606:	2200      	movs	r2, #0
 8001608:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800160a:	4b14      	ldr	r3, [pc, #80]	; (800165c <MX_SPI3_Init+0xa4>)
 800160c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001610:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <MX_SPI3_Init+0xa4>)
 8001614:	2200      	movs	r2, #0
 8001616:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001618:	4b10      	ldr	r3, [pc, #64]	; (800165c <MX_SPI3_Init+0xa4>)
 800161a:	2200      	movs	r2, #0
 800161c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800161e:	4b0f      	ldr	r3, [pc, #60]	; (800165c <MX_SPI3_Init+0xa4>)
 8001620:	2200      	movs	r2, #0
 8001622:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <MX_SPI3_Init+0xa4>)
 8001626:	2200      	movs	r2, #0
 8001628:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <MX_SPI3_Init+0xa4>)
 800162c:	2200      	movs	r2, #0
 800162e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001630:	4b0a      	ldr	r3, [pc, #40]	; (800165c <MX_SPI3_Init+0xa4>)
 8001632:	2200      	movs	r2, #0
 8001634:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <MX_SPI3_Init+0xa4>)
 8001638:	2200      	movs	r2, #0
 800163a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <MX_SPI3_Init+0xa4>)
 800163e:	2200      	movs	r2, #0
 8001640:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <MX_SPI3_Init+0xa4>)
 8001644:	2200      	movs	r2, #0
 8001646:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001648:	4804      	ldr	r0, [pc, #16]	; (800165c <MX_SPI3_Init+0xa4>)
 800164a:	f004 fae9 	bl	8005c20 <HAL_SPI_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8001654:	f7ff ffab 	bl	80015ae <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	2400a5cc 	.word	0x2400a5cc
 8001660:	40003c00 	.word	0x40003c00

08001664 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b0ba      	sub	sp, #232	; 0xe8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800167c:	f107 0318 	add.w	r3, r7, #24
 8001680:	22bc      	movs	r2, #188	; 0xbc
 8001682:	2100      	movs	r1, #0
 8001684:	4618      	mov	r0, r3
 8001686:	f00e fe19 	bl	80102bc <memset>
  if(spiHandle->Instance==SPI3)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a37      	ldr	r2, [pc, #220]	; (800176c <HAL_SPI_MspInit+0x108>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d166      	bne.n	8001762 <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001698:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800169a:	2300      	movs	r3, #0
 800169c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800169e:	f107 0318 	add.w	r3, r7, #24
 80016a2:	4618      	mov	r0, r3
 80016a4:	f002 ff5a 	bl	800455c <HAL_RCCEx_PeriphCLKConfig>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80016ae:	f7ff ff7e 	bl	80015ae <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016b2:	4b2f      	ldr	r3, [pc, #188]	; (8001770 <HAL_SPI_MspInit+0x10c>)
 80016b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016b8:	4a2d      	ldr	r2, [pc, #180]	; (8001770 <HAL_SPI_MspInit+0x10c>)
 80016ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016c2:	4b2b      	ldr	r3, [pc, #172]	; (8001770 <HAL_SPI_MspInit+0x10c>)
 80016c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d0:	4b27      	ldr	r3, [pc, #156]	; (8001770 <HAL_SPI_MspInit+0x10c>)
 80016d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d6:	4a26      	ldr	r2, [pc, #152]	; (8001770 <HAL_SPI_MspInit+0x10c>)
 80016d8:	f043 0302 	orr.w	r3, r3, #2
 80016dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016e0:	4b23      	ldr	r3, [pc, #140]	; (8001770 <HAL_SPI_MspInit+0x10c>)
 80016e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ee:	4b20      	ldr	r3, [pc, #128]	; (8001770 <HAL_SPI_MspInit+0x10c>)
 80016f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f4:	4a1e      	ldr	r2, [pc, #120]	; (8001770 <HAL_SPI_MspInit+0x10c>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016fe:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <HAL_SPI_MspInit+0x10c>)
 8001700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800170c:	2304      	movs	r3, #4
 800170e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001724:	2307      	movs	r3, #7
 8001726:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800172e:	4619      	mov	r1, r3
 8001730:	4810      	ldr	r0, [pc, #64]	; (8001774 <HAL_SPI_MspInit+0x110>)
 8001732:	f001 fa5f 	bl	8002bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001736:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800173a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001750:	2306      	movs	r3, #6
 8001752:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001756:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800175a:	4619      	mov	r1, r3
 800175c:	4806      	ldr	r0, [pc, #24]	; (8001778 <HAL_SPI_MspInit+0x114>)
 800175e:	f001 fa49 	bl	8002bf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001762:	bf00      	nop
 8001764:	37e8      	adds	r7, #232	; 0xe8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40003c00 	.word	0x40003c00
 8001770:	58024400 	.word	0x58024400
 8001774:	58020400 	.word	0x58020400
 8001778:	58020800 	.word	0x58020800

0800177c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <HAL_MspInit+0x5c>)
 8001784:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001788:	4a13      	ldr	r2, [pc, #76]	; (80017d8 <HAL_MspInit+0x5c>)
 800178a:	f043 0302 	orr.w	r3, r3, #2
 800178e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <HAL_MspInit+0x5c>)
 8001794:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* CM4_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM4_SEV_IRQn, 4, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2104      	movs	r1, #4
 80017a4:	2041      	movs	r0, #65	; 0x41
 80017a6:	f000 fd5e 	bl	8002266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM4_SEV_IRQn);
 80017aa:	2041      	movs	r0, #65	; 0x41
 80017ac:	f000 fd75 	bl	800229a <HAL_NVIC_EnableIRQ>
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 4, 0);
 80017b0:	2200      	movs	r2, #0
 80017b2:	2104      	movs	r1, #4
 80017b4:	207d      	movs	r0, #125	; 0x7d
 80017b6:	f000 fd56 	bl	8002266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 80017ba:	207d      	movs	r0, #125	; 0x7d
 80017bc:	f000 fd6d 	bl	800229a <HAL_NVIC_EnableIRQ>
  /* HOLD_CORE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HOLD_CORE_IRQn, 4, 0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2104      	movs	r1, #4
 80017c4:	2094      	movs	r0, #148	; 0x94
 80017c6:	f000 fd4e 	bl	8002266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HOLD_CORE_IRQn);
 80017ca:	2094      	movs	r0, #148	; 0x94
 80017cc:	f000 fd65 	bl	800229a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	58024400 	.word	0x58024400

080017dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <NMI_Handler+0x4>

080017e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <HardFault_Handler+0x4>

080017e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <MemManage_Handler+0x4>

080017ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f2:	e7fe      	b.n	80017f2 <BusFault_Handler+0x4>

080017f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <UsageFault_Handler+0x4>

080017fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001828:	f000 fbde 	bl	8001fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}

08001830 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <I2C1_EV_IRQHandler+0x10>)
 8001836:	f001 fc91 	bl	800315c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	2400a520 	.word	0x2400a520

08001844 <CM4_SEV_IRQHandler>:

/**
  * @brief This function handles CM4 send event interrupt for CM7.
  */
void CM4_SEV_IRQHandler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0

  /* USER CODE END CM4_SEV_IRQn 0 */
  /* USER CODE BEGIN CM4_SEV_IRQn 1 */

  /* USER CODE END CM4_SEV_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001856:	f001 fbd7 	bl	8003008 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}

0800185e <HOLD_CORE_IRQHandler>:

/**
  * @brief This function handles Hold core interrupt.
  */
void HOLD_CORE_IRQHandler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END HOLD_CORE_IRQn 0 */
  /* USER CODE BEGIN HOLD_CORE_IRQn 1 */

  /* USER CODE END HOLD_CORE_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
	return 1;
 8001870:	2301      	movs	r3, #1
}
 8001872:	4618      	mov	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <_kill>:

int _kill(int pid, int sig)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001886:	f00e fca5 	bl	80101d4 <__errno>
 800188a:	4603      	mov	r3, r0
 800188c:	2216      	movs	r2, #22
 800188e:	601a      	str	r2, [r3, #0]
	return -1;
 8001890:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <_exit>:

void _exit (int status)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018a4:	f04f 31ff 	mov.w	r1, #4294967295
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff ffe7 	bl	800187c <_kill>
	while (1) {}		/* Make sure we hang here */
 80018ae:	e7fe      	b.n	80018ae <_exit+0x12>

080018b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	e00a      	b.n	80018d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018c2:	f3af 8000 	nop.w
 80018c6:	4601      	mov	r1, r0
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	60ba      	str	r2, [r7, #8]
 80018ce:	b2ca      	uxtb	r2, r1
 80018d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	3301      	adds	r3, #1
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	429a      	cmp	r2, r3
 80018de:	dbf0      	blt.n	80018c2 <_read+0x12>
	}

return len;
 80018e0:	687b      	ldr	r3, [r7, #4]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b086      	sub	sp, #24
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	60f8      	str	r0, [r7, #12]
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	e009      	b.n	8001910 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	1c5a      	adds	r2, r3, #1
 8001900:	60ba      	str	r2, [r7, #8]
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	3301      	adds	r3, #1
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	429a      	cmp	r2, r3
 8001916:	dbf1      	blt.n	80018fc <_write+0x12>
	}
	return len;
 8001918:	687b      	ldr	r3, [r7, #4]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <_close>:

int _close(int file)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
	return -1;
 800192a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800192e:	4618      	mov	r0, r3
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800194a:	605a      	str	r2, [r3, #4]
	return 0;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <_isatty>:

int _isatty(int file)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
	return 1;
 8001962:	2301      	movs	r3, #1
}
 8001964:	4618      	mov	r0, r3
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
	return 0;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001994:	4a14      	ldr	r2, [pc, #80]	; (80019e8 <_sbrk+0x5c>)
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <_sbrk+0x60>)
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a0:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <_sbrk+0x64>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <_sbrk+0x64>)
 80019aa:	4a12      	ldr	r2, [pc, #72]	; (80019f4 <_sbrk+0x68>)
 80019ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <_sbrk+0x64>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d207      	bcs.n	80019cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019bc:	f00e fc0a 	bl	80101d4 <__errno>
 80019c0:	4603      	mov	r3, r0
 80019c2:	220c      	movs	r2, #12
 80019c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ca:	e009      	b.n	80019e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <_sbrk+0x64>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019d2:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	4a05      	ldr	r2, [pc, #20]	; (80019f0 <_sbrk+0x64>)
 80019dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019de:	68fb      	ldr	r3, [r7, #12]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	24040000 	.word	0x24040000
 80019ec:	00000400 	.word	0x00000400
 80019f0:	2400a3a8 	.word	0x2400a3a8
 80019f4:	2400f6b0 	.word	0x2400f6b0

080019f8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b096      	sub	sp, #88	; 0x58
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	60da      	str	r2, [r3, #12]
 8001a18:	611a      	str	r2, [r3, #16]
 8001a1a:	615a      	str	r2, [r3, #20]
 8001a1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	222c      	movs	r2, #44	; 0x2c
 8001a22:	2100      	movs	r1, #0
 8001a24:	4618      	mov	r0, r3
 8001a26:	f00e fc49 	bl	80102bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a2a:	4b39      	ldr	r3, [pc, #228]	; (8001b10 <MX_TIM1_Init+0x118>)
 8001a2c:	4a39      	ldr	r2, [pc, #228]	; (8001b14 <MX_TIM1_Init+0x11c>)
 8001a2e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75;
 8001a30:	4b37      	ldr	r3, [pc, #220]	; (8001b10 <MX_TIM1_Init+0x118>)
 8001a32:	224b      	movs	r2, #75	; 0x4b
 8001a34:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a36:	4b36      	ldr	r3, [pc, #216]	; (8001b10 <MX_TIM1_Init+0x118>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001a3c:	4b34      	ldr	r3, [pc, #208]	; (8001b10 <MX_TIM1_Init+0x118>)
 8001a3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a42:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a44:	4b32      	ldr	r3, [pc, #200]	; (8001b10 <MX_TIM1_Init+0x118>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a4a:	4b31      	ldr	r3, [pc, #196]	; (8001b10 <MX_TIM1_Init+0x118>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a50:	4b2f      	ldr	r3, [pc, #188]	; (8001b10 <MX_TIM1_Init+0x118>)
 8001a52:	2280      	movs	r2, #128	; 0x80
 8001a54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a56:	482e      	ldr	r0, [pc, #184]	; (8001b10 <MX_TIM1_Init+0x118>)
 8001a58:	f004 fcbf 	bl	80063da <HAL_TIM_PWM_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001a62:	f7ff fda4 	bl	80015ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a66:	2300      	movs	r3, #0
 8001a68:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a72:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a76:	4619      	mov	r1, r3
 8001a78:	4825      	ldr	r0, [pc, #148]	; (8001b10 <MX_TIM1_Init+0x118>)
 8001a7a:	f005 faab 	bl	8006fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a84:	f7ff fd93 	bl	80015ae <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a88:	2360      	movs	r3, #96	; 0x60
 8001a8a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 8001a8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a90:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a92:	2300      	movs	r3, #0
 8001a94:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a96:	2300      	movs	r3, #0
 8001a98:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aa6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001aaa:	2200      	movs	r2, #0
 8001aac:	4619      	mov	r1, r3
 8001aae:	4818      	ldr	r0, [pc, #96]	; (8001b10 <MX_TIM1_Init+0x118>)
 8001ab0:	f004 fdf2 	bl	8006698 <HAL_TIM_PWM_ConfigChannel>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001aba:	f7ff fd78 	bl	80015ae <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ad2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ad6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ae0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	4619      	mov	r1, r3
 8001af2:	4807      	ldr	r0, [pc, #28]	; (8001b10 <MX_TIM1_Init+0x118>)
 8001af4:	f005 faf6 	bl	80070e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001afe:	f7ff fd56 	bl	80015ae <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b02:	4803      	ldr	r0, [pc, #12]	; (8001b10 <MX_TIM1_Init+0x118>)
 8001b04:	f000 f82a 	bl	8001b5c <HAL_TIM_MspPostInit>

}
 8001b08:	bf00      	nop
 8001b0a:	3758      	adds	r7, #88	; 0x58
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	2400a654 	.word	0x2400a654
 8001b14:	40010000 	.word	0x40010000

08001b18 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d10e      	bne.n	8001b48 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <HAL_TIM_PWM_MspInit+0x40>)
 8001b2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b30:	4a09      	ldr	r2, [pc, #36]	; (8001b58 <HAL_TIM_PWM_MspInit+0x40>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b3a:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <HAL_TIM_PWM_MspInit+0x40>)
 8001b3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	40010000 	.word	0x40010000
 8001b58:	58024400 	.word	0x58024400

08001b5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 030c 	add.w	r3, r7, #12
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a13      	ldr	r2, [pc, #76]	; (8001bc8 <HAL_TIM_MspPostInit+0x6c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d11f      	bne.n	8001bbe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b7e:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <HAL_TIM_MspPostInit+0x70>)
 8001b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b84:	4a11      	ldr	r2, [pc, #68]	; (8001bcc <HAL_TIM_MspPostInit+0x70>)
 8001b86:	f043 0310 	orr.w	r3, r3, #16
 8001b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <HAL_TIM_MspPostInit+0x70>)
 8001b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b94:	f003 0310 	and.w	r3, r3, #16
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1___LCD_Brightness_Pin;
 8001b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ba0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM1_CH1___LCD_Brightness_GPIO_Port, &GPIO_InitStruct);
 8001bb2:	f107 030c 	add.w	r3, r7, #12
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <HAL_TIM_MspPostInit+0x74>)
 8001bba:	f001 f81b 	bl	8002bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001bbe:	bf00      	nop
 8001bc0:	3720      	adds	r7, #32
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40010000 	.word	0x40010000
 8001bcc:	58024400 	.word	0x58024400
 8001bd0:	58021000 	.word	0x58021000

08001bd4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001bd8:	4b22      	ldr	r3, [pc, #136]	; (8001c64 <MX_USART3_UART_Init+0x90>)
 8001bda:	4a23      	ldr	r2, [pc, #140]	; (8001c68 <MX_USART3_UART_Init+0x94>)
 8001bdc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001bde:	4b21      	ldr	r3, [pc, #132]	; (8001c64 <MX_USART3_UART_Init+0x90>)
 8001be0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001be4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001be6:	4b1f      	ldr	r3, [pc, #124]	; (8001c64 <MX_USART3_UART_Init+0x90>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bec:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <MX_USART3_UART_Init+0x90>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001bf2:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <MX_USART3_UART_Init+0x90>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001bf8:	4b1a      	ldr	r3, [pc, #104]	; (8001c64 <MX_USART3_UART_Init+0x90>)
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfe:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <MX_USART3_UART_Init+0x90>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c04:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <MX_USART3_UART_Init+0x90>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c0a:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <MX_USART3_UART_Init+0x90>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c10:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <MX_USART3_UART_Init+0x90>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c16:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <MX_USART3_UART_Init+0x90>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c1c:	4811      	ldr	r0, [pc, #68]	; (8001c64 <MX_USART3_UART_Init+0x90>)
 8001c1e:	f005 fadf 	bl	80071e0 <HAL_UART_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001c28:	f7ff fcc1 	bl	80015ae <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	480d      	ldr	r0, [pc, #52]	; (8001c64 <MX_USART3_UART_Init+0x90>)
 8001c30:	f006 fa2c 	bl	800808c <HAL_UARTEx_SetTxFifoThreshold>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001c3a:	f7ff fcb8 	bl	80015ae <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4808      	ldr	r0, [pc, #32]	; (8001c64 <MX_USART3_UART_Init+0x90>)
 8001c42:	f006 fa61 	bl	8008108 <HAL_UARTEx_SetRxFifoThreshold>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001c4c:	f7ff fcaf 	bl	80015ae <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001c50:	4804      	ldr	r0, [pc, #16]	; (8001c64 <MX_USART3_UART_Init+0x90>)
 8001c52:	f006 f9e2 	bl	800801a <HAL_UARTEx_DisableFifoMode>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001c5c:	f7ff fca7 	bl	80015ae <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	2400a6a0 	.word	0x2400a6a0
 8001c68:	40004800 	.word	0x40004800

08001c6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b0b8      	sub	sp, #224	; 0xe0
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c84:	f107 0310 	add.w	r3, r7, #16
 8001c88:	22bc      	movs	r2, #188	; 0xbc
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f00e fb15 	bl	80102bc <memset>
  if(uartHandle->Instance==USART3)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a25      	ldr	r2, [pc, #148]	; (8001d2c <HAL_UART_MspInit+0xc0>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d142      	bne.n	8001d22 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ca6:	f107 0310 	add.w	r3, r7, #16
 8001caa:	4618      	mov	r0, r3
 8001cac:	f002 fc56 	bl	800455c <HAL_RCCEx_PeriphCLKConfig>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001cb6:	f7ff fc7a 	bl	80015ae <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cba:	4b1d      	ldr	r3, [pc, #116]	; (8001d30 <HAL_UART_MspInit+0xc4>)
 8001cbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cc0:	4a1b      	ldr	r2, [pc, #108]	; (8001d30 <HAL_UART_MspInit+0xc4>)
 8001cc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001cca:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <HAL_UART_MspInit+0xc4>)
 8001ccc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cd8:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <HAL_UART_MspInit+0xc4>)
 8001cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cde:	4a14      	ldr	r2, [pc, #80]	; (8001d30 <HAL_UART_MspInit+0xc4>)
 8001ce0:	f043 0308 	orr.w	r3, r3, #8
 8001ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ce8:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <HAL_UART_MspInit+0xc4>)
 8001cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001cf6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cfa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d10:	2307      	movs	r3, #7
 8001d12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d16:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4805      	ldr	r0, [pc, #20]	; (8001d34 <HAL_UART_MspInit+0xc8>)
 8001d1e:	f000 ff69 	bl	8002bf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d22:	bf00      	nop
 8001d24:	37e0      	adds	r7, #224	; 0xe0
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40004800 	.word	0x40004800
 8001d30:	58024400 	.word	0x58024400
 8001d34:	58020c00 	.word	0x58020c00

08001d38 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001d3c:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d3e:	4a16      	ldr	r2, [pc, #88]	; (8001d98 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001d40:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001d42:	4b14      	ldr	r3, [pc, #80]	; (8001d94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d44:	2209      	movs	r2, #9
 8001d46:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001d48:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001d4e:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d54:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d56:	2202      	movs	r2, #2
 8001d58:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001d66:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001d72:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001d7e:	4805      	ldr	r0, [pc, #20]	; (8001d94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d80:	f001 fa9d 	bl	80032be <HAL_PCD_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001d8a:	f7ff fc10 	bl	80015ae <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	2400a730 	.word	0x2400a730
 8001d98:	40080000 	.word	0x40080000

08001d9c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b0b8      	sub	sp, #224	; 0xe0
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001db4:	f107 0310 	add.w	r3, r7, #16
 8001db8:	22bc      	movs	r2, #188	; 0xbc
 8001dba:	2100      	movs	r1, #0
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f00e fa7d 	bl	80102bc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a37      	ldr	r2, [pc, #220]	; (8001ea4 <HAL_PCD_MspInit+0x108>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d166      	bne.n	8001e9a <HAL_PCD_MspInit+0xfe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001dcc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001dd0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001dd6:	2312      	movs	r3, #18
 8001dd8:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001dde:	2303      	movs	r3, #3
 8001de0:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001de2:	2302      	movs	r3, #2
 8001de4:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001de6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001dea:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8001dec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001df0:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001df2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001df6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dfa:	f107 0310 	add.w	r3, r7, #16
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f002 fbac 	bl	800455c <HAL_RCCEx_PeriphCLKConfig>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8001e0a:	f7ff fbd0 	bl	80015ae <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001e0e:	f001 fbf9 	bl	8003604 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e12:	4b25      	ldr	r3, [pc, #148]	; (8001ea8 <HAL_PCD_MspInit+0x10c>)
 8001e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e18:	4a23      	ldr	r2, [pc, #140]	; (8001ea8 <HAL_PCD_MspInit+0x10c>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e22:	4b21      	ldr	r3, [pc, #132]	; (8001ea8 <HAL_PCD_MspInit+0x10c>)
 8001e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001e30:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001e34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e44:	2300      	movs	r3, #0
 8001e46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001e4a:	230a      	movs	r3, #10
 8001e4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e50:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e54:	4619      	mov	r1, r3
 8001e56:	4815      	ldr	r0, [pc, #84]	; (8001eac <HAL_PCD_MspInit+0x110>)
 8001e58:	f000 fecc 	bl	8002bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e74:	4619      	mov	r1, r3
 8001e76:	480d      	ldr	r0, [pc, #52]	; (8001eac <HAL_PCD_MspInit+0x110>)
 8001e78:	f000 febc 	bl	8002bf4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <HAL_PCD_MspInit+0x10c>)
 8001e7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e82:	4a09      	ldr	r2, [pc, #36]	; (8001ea8 <HAL_PCD_MspInit+0x10c>)
 8001e84:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e88:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_PCD_MspInit+0x10c>)
 8001e8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	37e0      	adds	r7, #224	; 0xe0
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40080000 	.word	0x40080000
 8001ea8:	58024400 	.word	0x58024400
 8001eac:	58020000 	.word	0x58020000

08001eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ee8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001eb4:	f7fe fe70 	bl	8000b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eb8:	480c      	ldr	r0, [pc, #48]	; (8001eec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eba:	490d      	ldr	r1, [pc, #52]	; (8001ef0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ebc:	4a0d      	ldr	r2, [pc, #52]	; (8001ef4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec0:	e002      	b.n	8001ec8 <LoopCopyDataInit>

08001ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ec6:	3304      	adds	r3, #4

08001ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ecc:	d3f9      	bcc.n	8001ec2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ece:	4a0a      	ldr	r2, [pc, #40]	; (8001ef8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ed0:	4c0a      	ldr	r4, [pc, #40]	; (8001efc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed4:	e001      	b.n	8001eda <LoopFillZerobss>

08001ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed8:	3204      	adds	r2, #4

08001eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001edc:	d3fb      	bcc.n	8001ed6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ede:	f00e f991 	bl	8010204 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ee2:	f7ff f9b5 	bl	8001250 <main>
  bx  lr
 8001ee6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ee8:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8001eec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ef0:	2400a2c4 	.word	0x2400a2c4
  ldr r2, =_sidata
 8001ef4:	0801e1c8 	.word	0x0801e1c8
  ldr r2, =_sbss
 8001ef8:	2400a384 	.word	0x2400a384
  ldr r4, =_ebss
 8001efc:	2400f6b0 	.word	0x2400f6b0

08001f00 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f00:	e7fe      	b.n	8001f00 <ADC3_IRQHandler>
	...

08001f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f0a:	2003      	movs	r0, #3
 8001f0c:	f000 f9a0 	bl	8002250 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f10:	f002 f94e 	bl	80041b0 <HAL_RCC_GetSysClockFreq>
 8001f14:	4602      	mov	r2, r0
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <HAL_Init+0x68>)
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	0a1b      	lsrs	r3, r3, #8
 8001f1c:	f003 030f 	and.w	r3, r3, #15
 8001f20:	4913      	ldr	r1, [pc, #76]	; (8001f70 <HAL_Init+0x6c>)
 8001f22:	5ccb      	ldrb	r3, [r1, r3]
 8001f24:	f003 031f 	and.w	r3, r3, #31
 8001f28:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f2e:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <HAL_Init+0x68>)
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	4a0e      	ldr	r2, [pc, #56]	; (8001f70 <HAL_Init+0x6c>)
 8001f38:	5cd3      	ldrb	r3, [r2, r3]
 8001f3a:	f003 031f 	and.w	r3, r3, #31
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	fa22 f303 	lsr.w	r3, r2, r3
 8001f44:	4a0b      	ldr	r2, [pc, #44]	; (8001f74 <HAL_Init+0x70>)
 8001f46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f48:	4a0b      	ldr	r2, [pc, #44]	; (8001f78 <HAL_Init+0x74>)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f000 f814 	bl	8001f7c <HAL_InitTick>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e002      	b.n	8001f64 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f5e:	f7ff fc0d 	bl	800177c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	58024400 	.word	0x58024400
 8001f70:	080153b8 	.word	0x080153b8
 8001f74:	24000004 	.word	0x24000004
 8001f78:	24000000 	.word	0x24000000

08001f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001f84:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <HAL_InitTick+0x60>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e021      	b.n	8001fd4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <HAL_InitTick+0x64>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <HAL_InitTick+0x60>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 f985 	bl	80022b6 <HAL_SYSTICK_Config>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e00e      	b.n	8001fd4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b0f      	cmp	r3, #15
 8001fba:	d80a      	bhi.n	8001fd2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc4:	f000 f94f 	bl	8002266 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fc8:	4a06      	ldr	r2, [pc, #24]	; (8001fe4 <HAL_InitTick+0x68>)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	e000      	b.n	8001fd4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	24000014 	.word	0x24000014
 8001fe0:	24000000 	.word	0x24000000
 8001fe4:	24000010 	.word	0x24000010

08001fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_IncTick+0x20>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <HAL_IncTick+0x24>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	4a04      	ldr	r2, [pc, #16]	; (800200c <HAL_IncTick+0x24>)
 8001ffa:	6013      	str	r3, [r2, #0]
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	24000014 	.word	0x24000014
 800200c:	2400ab38 	.word	0x2400ab38

08002010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return uwTick;
 8002014:	4b03      	ldr	r3, [pc, #12]	; (8002024 <HAL_GetTick+0x14>)
 8002016:	681b      	ldr	r3, [r3, #0]
}
 8002018:	4618      	mov	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	2400ab38 	.word	0x2400ab38

08002028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002030:	f7ff ffee 	bl	8002010 <HAL_GetTick>
 8002034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002040:	d005      	beq.n	800204e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <HAL_Delay+0x44>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4413      	add	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800204e:	bf00      	nop
 8002050:	f7ff ffde 	bl	8002010 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	429a      	cmp	r2, r3
 800205e:	d8f7      	bhi.n	8002050 <HAL_Delay+0x28>
  {
  }
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	24000014 	.word	0x24000014

08002070 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002074:	4b03      	ldr	r3, [pc, #12]	; (8002084 <HAL_GetREVID+0x14>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	0c1b      	lsrs	r3, r3, #16
}
 800207a:	4618      	mov	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	5c001000 	.word	0x5c001000

08002088 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002090:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002098:	4904      	ldr	r1, [pc, #16]	; (80020ac <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4313      	orrs	r3, r2
 800209e:	604b      	str	r3, [r1, #4]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	58000400 	.word	0x58000400

080020b0 <__NVIC_SetPriorityGrouping>:
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c0:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <__NVIC_SetPriorityGrouping+0x40>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020cc:	4013      	ands	r3, r2
 80020ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <__NVIC_SetPriorityGrouping+0x44>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020de:	4a04      	ldr	r2, [pc, #16]	; (80020f0 <__NVIC_SetPriorityGrouping+0x40>)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	60d3      	str	r3, [r2, #12]
}
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000ed00 	.word	0xe000ed00
 80020f4:	05fa0000 	.word	0x05fa0000

080020f8 <__NVIC_GetPriorityGrouping>:
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <__NVIC_GetPriorityGrouping+0x18>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	0a1b      	lsrs	r3, r3, #8
 8002102:	f003 0307 	and.w	r3, r3, #7
}
 8002106:	4618      	mov	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <__NVIC_EnableIRQ>:
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800211e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002122:	2b00      	cmp	r3, #0
 8002124:	db0b      	blt.n	800213e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002126:	88fb      	ldrh	r3, [r7, #6]
 8002128:	f003 021f 	and.w	r2, r3, #31
 800212c:	4907      	ldr	r1, [pc, #28]	; (800214c <__NVIC_EnableIRQ+0x38>)
 800212e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002132:	095b      	lsrs	r3, r3, #5
 8002134:	2001      	movs	r0, #1
 8002136:	fa00 f202 	lsl.w	r2, r0, r2
 800213a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000e100 	.word	0xe000e100

08002150 <__NVIC_SetPriority>:
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	6039      	str	r1, [r7, #0]
 800215a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800215c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002160:	2b00      	cmp	r3, #0
 8002162:	db0a      	blt.n	800217a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	b2da      	uxtb	r2, r3
 8002168:	490c      	ldr	r1, [pc, #48]	; (800219c <__NVIC_SetPriority+0x4c>)
 800216a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800216e:	0112      	lsls	r2, r2, #4
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	440b      	add	r3, r1
 8002174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002178:	e00a      	b.n	8002190 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4908      	ldr	r1, [pc, #32]	; (80021a0 <__NVIC_SetPriority+0x50>)
 8002180:	88fb      	ldrh	r3, [r7, #6]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	3b04      	subs	r3, #4
 8002188:	0112      	lsls	r2, r2, #4
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	440b      	add	r3, r1
 800218e:	761a      	strb	r2, [r3, #24]
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000e100 	.word	0xe000e100
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <NVIC_EncodePriority>:
{
 80021a4:	b480      	push	{r7}
 80021a6:	b089      	sub	sp, #36	; 0x24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f1c3 0307 	rsb	r3, r3, #7
 80021be:	2b04      	cmp	r3, #4
 80021c0:	bf28      	it	cs
 80021c2:	2304      	movcs	r3, #4
 80021c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3304      	adds	r3, #4
 80021ca:	2b06      	cmp	r3, #6
 80021cc:	d902      	bls.n	80021d4 <NVIC_EncodePriority+0x30>
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3b03      	subs	r3, #3
 80021d2:	e000      	b.n	80021d6 <NVIC_EncodePriority+0x32>
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d8:	f04f 32ff 	mov.w	r2, #4294967295
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43da      	mvns	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	401a      	ands	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ec:	f04f 31ff 	mov.w	r1, #4294967295
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	43d9      	mvns	r1, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	4313      	orrs	r3, r2
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3724      	adds	r7, #36	; 0x24
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3b01      	subs	r3, #1
 8002218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800221c:	d301      	bcc.n	8002222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800221e:	2301      	movs	r3, #1
 8002220:	e00f      	b.n	8002242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002222:	4a0a      	ldr	r2, [pc, #40]	; (800224c <SysTick_Config+0x40>)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3b01      	subs	r3, #1
 8002228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800222a:	210f      	movs	r1, #15
 800222c:	f04f 30ff 	mov.w	r0, #4294967295
 8002230:	f7ff ff8e 	bl	8002150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002234:	4b05      	ldr	r3, [pc, #20]	; (800224c <SysTick_Config+0x40>)
 8002236:	2200      	movs	r2, #0
 8002238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800223a:	4b04      	ldr	r3, [pc, #16]	; (800224c <SysTick_Config+0x40>)
 800223c:	2207      	movs	r2, #7
 800223e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	e000e010 	.word	0xe000e010

08002250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff ff29 	bl	80020b0 <__NVIC_SetPriorityGrouping>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b086      	sub	sp, #24
 800226a:	af00      	add	r7, sp, #0
 800226c:	4603      	mov	r3, r0
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	607a      	str	r2, [r7, #4]
 8002272:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002274:	f7ff ff40 	bl	80020f8 <__NVIC_GetPriorityGrouping>
 8002278:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68b9      	ldr	r1, [r7, #8]
 800227e:	6978      	ldr	r0, [r7, #20]
 8002280:	f7ff ff90 	bl	80021a4 <NVIC_EncodePriority>
 8002284:	4602      	mov	r2, r0
 8002286:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff5f 	bl	8002150 <__NVIC_SetPriority>
}
 8002292:	bf00      	nop
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	4603      	mov	r3, r0
 80022a2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ff33 	bl	8002114 <__NVIC_EnableIRQ>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff ffa4 	bl	800220c <SysTick_Config>
 80022c4:	4603      	mov	r3, r0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80022d4:	f3bf 8f5f 	dmb	sy
}
 80022d8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80022da:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <HAL_MPU_Disable+0x28>)
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	4a06      	ldr	r2, [pc, #24]	; (80022f8 <HAL_MPU_Disable+0x28>)
 80022e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80022e6:	4b05      	ldr	r3, [pc, #20]	; (80022fc <HAL_MPU_Disable+0x2c>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	605a      	str	r2, [r3, #4]
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000ed00 	.word	0xe000ed00
 80022fc:	e000ed90 	.word	0xe000ed90

08002300 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002308:	4a0b      	ldr	r2, [pc, #44]	; (8002338 <HAL_MPU_Enable+0x38>)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002312:	4b0a      	ldr	r3, [pc, #40]	; (800233c <HAL_MPU_Enable+0x3c>)
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	4a09      	ldr	r2, [pc, #36]	; (800233c <HAL_MPU_Enable+0x3c>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800231e:	f3bf 8f4f 	dsb	sy
}
 8002322:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002324:	f3bf 8f6f 	isb	sy
}
 8002328:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	e000ed90 	.word	0xe000ed90
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	785a      	ldrb	r2, [r3, #1]
 800234c:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <HAL_MPU_ConfigRegion+0x84>)
 800234e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d029      	beq.n	80023ac <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002358:	4a1a      	ldr	r2, [pc, #104]	; (80023c4 <HAL_MPU_ConfigRegion+0x84>)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	7b1b      	ldrb	r3, [r3, #12]
 8002364:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	7adb      	ldrb	r3, [r3, #11]
 800236a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800236c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	7a9b      	ldrb	r3, [r3, #10]
 8002372:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002374:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	7b5b      	ldrb	r3, [r3, #13]
 800237a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800237c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	7b9b      	ldrb	r3, [r3, #14]
 8002382:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002384:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	7bdb      	ldrb	r3, [r3, #15]
 800238a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800238c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	7a5b      	ldrb	r3, [r3, #9]
 8002392:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002394:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	7a1b      	ldrb	r3, [r3, #8]
 800239a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800239c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	7812      	ldrb	r2, [r2, #0]
 80023a2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80023a4:	4a07      	ldr	r2, [pc, #28]	; (80023c4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80023a6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80023a8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80023aa:	e005      	b.n	80023b8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80023ac:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <HAL_MPU_ConfigRegion+0x84>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80023b2:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <HAL_MPU_ConfigRegion+0x84>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	611a      	str	r2, [r3, #16]
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000ed90 	.word	0xe000ed90

080023c8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e0c6      	b.n	8002568 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d102      	bne.n	80023e8 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7fe fcc4 	bl	8000d70 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2223      	movs	r2, #35	; 0x23
 80023ec:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ee:	4b60      	ldr	r3, [pc, #384]	; (8002570 <HAL_ETH_Init+0x1a8>)
 80023f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023f4:	4a5e      	ldr	r2, [pc, #376]	; (8002570 <HAL_ETH_Init+0x1a8>)
 80023f6:	f043 0302 	orr.w	r3, r3, #2
 80023fa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80023fe:	4b5c      	ldr	r3, [pc, #368]	; (8002570 <HAL_ETH_Init+0x1a8>)
 8002400:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	7a1b      	ldrb	r3, [r3, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d103      	bne.n	800241c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002414:	2000      	movs	r0, #0
 8002416:	f7ff fe37 	bl	8002088 <HAL_SYSCFG_ETHInterfaceSelect>
 800241a:	e003      	b.n	8002424 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800241c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002420:	f7ff fe32 	bl	8002088 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0201 	orr.w	r2, r2, #1
 8002436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800243a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800243c:	f7ff fde8 	bl	8002010 <HAL_GetTick>
 8002440:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002442:	e00f      	b.n	8002464 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8002444:	f7ff fde4 	bl	8002010 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002452:	d907      	bls.n	8002464 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2204      	movs	r2, #4
 8002458:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	22e0      	movs	r2, #224	; 0xe0
 800245e:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e081      	b.n	8002568 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1e6      	bne.n	8002444 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 fac0 	bl	80029fc <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800247c:	f002 f812 	bl	80044a4 <HAL_RCC_GetHCLKFreq>
 8002480:	4603      	mov	r3, r0
 8002482:	4a3c      	ldr	r2, [pc, #240]	; (8002574 <HAL_ETH_Init+0x1ac>)
 8002484:	fba2 2303 	umull	r2, r3, r2, r3
 8002488:	0c9a      	lsrs	r2, r3, #18
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	3a01      	subs	r2, #1
 8002490:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 fa13 	bl	80028c0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80024b0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80024b4:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d007      	beq.n	80024d2 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	22e0      	movs	r2, #224	; 0xe0
 80024cc:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e04a      	b.n	8002568 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	f241 1308 	movw	r3, #4360	; 0x1108
 80024da:	4413      	add	r3, r2
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	4b26      	ldr	r3, [pc, #152]	; (8002578 <HAL_ETH_Init+0x1b0>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6952      	ldr	r2, [r2, #20]
 80024e6:	0052      	lsls	r2, r2, #1
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	6809      	ldr	r1, [r1, #0]
 80024ec:	431a      	orrs	r2, r3
 80024ee:	f241 1308 	movw	r3, #4360	; 0x1108
 80024f2:	440b      	add	r3, r1
 80024f4:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 fad8 	bl	8002aac <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 fb1c 	bl	8002b3a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	3305      	adds	r3, #5
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	021a      	lsls	r2, r3, #8
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	3304      	adds	r3, #4
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	4619      	mov	r1, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	3303      	adds	r3, #3
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	061a      	lsls	r2, r3, #24
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	3302      	adds	r3, #2
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	041b      	lsls	r3, r3, #16
 8002534:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	3301      	adds	r3, #1
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002540:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800254e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002550:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2210      	movs	r2, #16
 800255e:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2210      	movs	r2, #16
 8002564:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	58024400 	.word	0x58024400
 8002574:	431bde83 	.word	0x431bde83
 8002578:	ffff8001 	.word	0xffff8001

0800257c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800258e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	791b      	ldrb	r3, [r3, #4]
 8002594:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002596:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	7b1b      	ldrb	r3, [r3, #12]
 800259c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800259e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	7b5b      	ldrb	r3, [r3, #13]
 80025a4:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80025a6:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	7b9b      	ldrb	r3, [r3, #14]
 80025ac:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80025ae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	7bdb      	ldrb	r3, [r3, #15]
 80025b4:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80025b6:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	7c12      	ldrb	r2, [r2, #16]
 80025bc:	2a00      	cmp	r2, #0
 80025be:	d102      	bne.n	80025c6 <ETH_SetMACConfig+0x4a>
 80025c0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80025c4:	e000      	b.n	80025c8 <ETH_SetMACConfig+0x4c>
 80025c6:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80025c8:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	7c52      	ldrb	r2, [r2, #17]
 80025ce:	2a00      	cmp	r2, #0
 80025d0:	d102      	bne.n	80025d8 <ETH_SetMACConfig+0x5c>
 80025d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025d6:	e000      	b.n	80025da <ETH_SetMACConfig+0x5e>
 80025d8:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80025da:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	7c9b      	ldrb	r3, [r3, #18]
 80025e0:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80025e2:	431a      	orrs	r2, r3
                                macconf->Speed |
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80025e8:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80025ee:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	7f1b      	ldrb	r3, [r3, #28]
 80025f4:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80025f6:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	7f5b      	ldrb	r3, [r3, #29]
 80025fc:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80025fe:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	7f92      	ldrb	r2, [r2, #30]
 8002604:	2a00      	cmp	r2, #0
 8002606:	d102      	bne.n	800260e <ETH_SetMACConfig+0x92>
 8002608:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800260c:	e000      	b.n	8002610 <ETH_SetMACConfig+0x94>
 800260e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002610:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	7fdb      	ldrb	r3, [r3, #31]
 8002616:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002618:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002620:	2a00      	cmp	r2, #0
 8002622:	d102      	bne.n	800262a <ETH_SetMACConfig+0xae>
 8002624:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002628:	e000      	b.n	800262c <ETH_SetMACConfig+0xb0>
 800262a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800262c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002632:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800263a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 800263c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002642:	4313      	orrs	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	4b56      	ldr	r3, [pc, #344]	; (80027a8 <ETH_SetMACConfig+0x22c>)
 800264e:	4013      	ands	r3, r2
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	68f9      	ldr	r1, [r7, #12]
 8002656:	430b      	orrs	r3, r1
 8002658:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002666:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002668:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002670:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002672:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800267a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800267c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002684:	2a00      	cmp	r2, #0
 8002686:	d102      	bne.n	800268e <ETH_SetMACConfig+0x112>
 8002688:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800268c:	e000      	b.n	8002690 <ETH_SetMACConfig+0x114>
 800268e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002690:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002696:	4313      	orrs	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	4b42      	ldr	r3, [pc, #264]	; (80027ac <ETH_SetMACConfig+0x230>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	68f9      	ldr	r1, [r7, #12]
 80026aa:	430b      	orrs	r3, r1
 80026ac:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026b4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80026ba:	4313      	orrs	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68da      	ldr	r2, [r3, #12]
 80026c4:	4b3a      	ldr	r3, [pc, #232]	; (80027b0 <ETH_SetMACConfig+0x234>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	68f9      	ldr	r1, [r7, #12]
 80026ce:	430b      	orrs	r3, r1
 80026d0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80026d8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80026de:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80026e6:	2a00      	cmp	r2, #0
 80026e8:	d101      	bne.n	80026ee <ETH_SetMACConfig+0x172>
 80026ea:	2280      	movs	r2, #128	; 0x80
 80026ec:	e000      	b.n	80026f0 <ETH_SetMACConfig+0x174>
 80026ee:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80026f0:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002702:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002706:	4013      	ands	r3, r2
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6812      	ldr	r2, [r2, #0]
 800270c:	68f9      	ldr	r1, [r7, #12]
 800270e:	430b      	orrs	r3, r1
 8002710:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002718:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002720:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002722:	4313      	orrs	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272e:	f023 0103 	bic.w	r1, r3, #3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	430a      	orrs	r2, r1
 800273a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002746:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002762:	2a00      	cmp	r2, #0
 8002764:	d101      	bne.n	800276a <ETH_SetMACConfig+0x1ee>
 8002766:	2240      	movs	r2, #64	; 0x40
 8002768:	e000      	b.n	800276c <ETH_SetMACConfig+0x1f0>
 800276a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800276c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002774:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002776:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800277e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002780:	4313      	orrs	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800278c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	430a      	orrs	r2, r1
 8002798:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800279c:	bf00      	nop
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	00048083 	.word	0x00048083
 80027ac:	c0f88000 	.word	0xc0f88000
 80027b0:	fffffef0 	.word	0xfffffef0

080027b4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4b38      	ldr	r3, [pc, #224]	; (80028ac <ETH_SetDMAConfig+0xf8>)
 80027ca:	4013      	ands	r3, r2
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	6809      	ldr	r1, [r1, #0]
 80027d4:	431a      	orrs	r2, r3
 80027d6:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80027da:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	791b      	ldrb	r3, [r3, #4]
 80027e0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80027e6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	7b1b      	ldrb	r3, [r3, #12]
 80027ec:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80027ee:	4313      	orrs	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	f241 0304 	movw	r3, #4100	; 0x1004
 80027fa:	4413      	add	r3, r2
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	4b2c      	ldr	r3, [pc, #176]	; (80028b0 <ETH_SetDMAConfig+0xfc>)
 8002800:	4013      	ands	r3, r2
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6811      	ldr	r1, [r2, #0]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	431a      	orrs	r2, r3
 800280a:	f241 0304 	movw	r3, #4100	; 0x1004
 800280e:	440b      	add	r3, r1
 8002810:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	7b5b      	ldrb	r3, [r3, #13]
 8002816:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800281c:	4313      	orrs	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	4b22      	ldr	r3, [pc, #136]	; (80028b4 <ETH_SetDMAConfig+0x100>)
 800282c:	4013      	ands	r3, r2
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6811      	ldr	r1, [r2, #0]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	431a      	orrs	r2, r3
 8002836:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800283a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	7d1b      	ldrb	r3, [r3, #20]
 8002844:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002846:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	7f5b      	ldrb	r3, [r3, #29]
 800284c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800284e:	4313      	orrs	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	f241 1304 	movw	r3, #4356	; 0x1104
 800285a:	4413      	add	r3, r2
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	4b16      	ldr	r3, [pc, #88]	; (80028b8 <ETH_SetDMAConfig+0x104>)
 8002860:	4013      	ands	r3, r2
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6811      	ldr	r1, [r2, #0]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	431a      	orrs	r2, r3
 800286a:	f241 1304 	movw	r3, #4356	; 0x1104
 800286e:	440b      	add	r3, r1
 8002870:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	7f1b      	ldrb	r3, [r3, #28]
 8002876:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800287c:	4313      	orrs	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	f241 1308 	movw	r3, #4360	; 0x1108
 8002888:	4413      	add	r3, r2
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <ETH_SetDMAConfig+0x108>)
 800288e:	4013      	ands	r3, r2
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6811      	ldr	r1, [r2, #0]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	431a      	orrs	r2, r3
 8002898:	f241 1308 	movw	r3, #4360	; 0x1108
 800289c:	440b      	add	r3, r1
 800289e:	601a      	str	r2, [r3, #0]
}
 80028a0:	bf00      	nop
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	ffff87fd 	.word	0xffff87fd
 80028b0:	ffff2ffe 	.word	0xffff2ffe
 80028b4:	fffec000 	.word	0xfffec000
 80028b8:	ffc0efef 	.word	0xffc0efef
 80028bc:	7fc0ffff 	.word	0x7fc0ffff

080028c0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b0a4      	sub	sp, #144	; 0x90
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80028c8:	2301      	movs	r3, #1
 80028ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80028ce:	2300      	movs	r3, #0
 80028d0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80028d2:	2300      	movs	r3, #0
 80028d4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80028d8:	2300      	movs	r3, #0
 80028da:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80028de:	2301      	movs	r3, #1
 80028e0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80028e4:	2301      	movs	r3, #1
 80028e6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80028ea:	2301      	movs	r3, #1
 80028ec:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80028f0:	2300      	movs	r3, #0
 80028f2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80028f6:	2301      	movs	r3, #1
 80028f8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80028fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002900:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002902:	2300      	movs	r3, #0
 8002904:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002908:	2300      	movs	r3, #0
 800290a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800290c:	2300      	movs	r3, #0
 800290e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002912:	2300      	movs	r3, #0
 8002914:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002918:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800291c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800291e:	2300      	movs	r3, #0
 8002920:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002924:	2300      	movs	r3, #0
 8002926:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002928:	2301      	movs	r3, #1
 800292a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800292e:	2300      	movs	r3, #0
 8002930:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002934:	2300      	movs	r3, #0
 8002936:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800293a:	2300      	movs	r3, #0
 800293c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800293e:	2300      	movs	r3, #0
 8002940:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002942:	2300      	movs	r3, #0
 8002944:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002946:	2300      	movs	r3, #0
 8002948:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800294c:	2300      	movs	r3, #0
 800294e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002952:	2301      	movs	r3, #1
 8002954:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002958:	2320      	movs	r3, #32
 800295a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800295e:	2301      	movs	r3, #1
 8002960:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002964:	2300      	movs	r3, #0
 8002966:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800296a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800296e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002970:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002974:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002976:	2300      	movs	r3, #0
 8002978:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800297c:	2302      	movs	r3, #2
 800297e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002982:	2300      	movs	r3, #0
 8002984:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002988:	2300      	movs	r3, #0
 800298a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800298e:	2300      	movs	r3, #0
 8002990:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002994:	2301      	movs	r3, #1
 8002996:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800299a:	2300      	movs	r3, #0
 800299c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800299e:	2301      	movs	r3, #1
 80029a0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80029a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029a8:	4619      	mov	r1, r3
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff fde6 	bl	800257c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80029b0:	2301      	movs	r3, #1
 80029b2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80029b4:	2301      	movs	r3, #1
 80029b6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80029b8:	2300      	movs	r3, #0
 80029ba:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80029bc:	2300      	movs	r3, #0
 80029be:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80029c2:	2300      	movs	r3, #0
 80029c4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80029c6:	2300      	movs	r3, #0
 80029c8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80029ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029ce:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80029d0:	2300      	movs	r3, #0
 80029d2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80029d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029d8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80029da:	2300      	movs	r3, #0
 80029dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80029e0:	f44f 7306 	mov.w	r3, #536	; 0x218
 80029e4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80029e6:	f107 0308 	add.w	r3, r7, #8
 80029ea:	4619      	mov	r1, r3
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff fee1 	bl	80027b4 <ETH_SetDMAConfig>
}
 80029f2:	bf00      	nop
 80029f4:	3790      	adds	r7, #144	; 0x90
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a0c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a14:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002a16:	f001 fd45 	bl	80044a4 <HAL_RCC_GetHCLKFreq>
 8002a1a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	4a1e      	ldr	r2, [pc, #120]	; (8002a98 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d908      	bls.n	8002a36 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	4a1d      	ldr	r2, [pc, #116]	; (8002a9c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d804      	bhi.n	8002a36 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	e027      	b.n	8002a86 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	4a18      	ldr	r2, [pc, #96]	; (8002a9c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d908      	bls.n	8002a50 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	4a17      	ldr	r2, [pc, #92]	; (8002aa0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d204      	bcs.n	8002a50 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	e01a      	b.n	8002a86 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4a13      	ldr	r2, [pc, #76]	; (8002aa0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d303      	bcc.n	8002a60 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4a12      	ldr	r2, [pc, #72]	; (8002aa4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d911      	bls.n	8002a84 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4a10      	ldr	r2, [pc, #64]	; (8002aa4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d908      	bls.n	8002a7a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	4a0f      	ldr	r2, [pc, #60]	; (8002aa8 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d804      	bhi.n	8002a7a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	e005      	b.n	8002a86 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	e000      	b.n	8002a86 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002a84:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002a90:	bf00      	nop
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	01312cff 	.word	0x01312cff
 8002a9c:	02160ebf 	.word	0x02160ebf
 8002aa0:	03938700 	.word	0x03938700
 8002aa4:	05f5e0ff 	.word	0x05f5e0ff
 8002aa8:	08f0d17f 	.word	0x08f0d17f

08002aac <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	e01d      	b.n	8002af6 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68d9      	ldr	r1, [r3, #12]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4413      	add	r3, r2
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	440b      	add	r3, r1
 8002aca:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2200      	movs	r2, #0
 8002adc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002ae4:	68b9      	ldr	r1, [r7, #8]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	3206      	adds	r2, #6
 8002aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	3301      	adds	r3, #1
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d9de      	bls.n	8002aba <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	f241 132c 	movw	r3, #4396	; 0x112c
 8002b0a:	4413      	add	r3, r2
 8002b0c:	2203      	movs	r2, #3
 8002b0e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68d9      	ldr	r1, [r3, #12]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	f241 1314 	movw	r3, #4372	; 0x1114
 8002b1c:	4413      	add	r3, r2
 8002b1e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002b2c:	601a      	str	r2, [r3, #0]
}
 8002b2e:	bf00      	nop
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b085      	sub	sp, #20
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	e024      	b.n	8002b92 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6919      	ldr	r1, [r3, #16]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	4413      	add	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	440b      	add	r3, r1
 8002b58:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2200      	movs	r2, #0
 8002b64:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2200      	movs	r2, #0
 8002b76:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	3310      	adds	r3, #16
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d9d7      	bls.n	8002b48 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	f241 1330 	movw	r3, #4400	; 0x1130
 8002bbe:	4413      	add	r3, r2
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6919      	ldr	r1, [r3, #16]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	f241 131c 	movw	r3, #4380	; 0x111c
 8002bd0:	4413      	add	r3, r2
 8002bd2:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	f241 1328 	movw	r3, #4392	; 0x1128
 8002be4:	4413      	add	r3, r2
 8002be6:	6019      	str	r1, [r3, #0]
}
 8002be8:	bf00      	nop
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b089      	sub	sp, #36	; 0x24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002c02:	4b89      	ldr	r3, [pc, #548]	; (8002e28 <HAL_GPIO_Init+0x234>)
 8002c04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c06:	e194      	b.n	8002f32 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	fa01 f303 	lsl.w	r3, r1, r3
 8002c14:	4013      	ands	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 8186 	beq.w	8002f2c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d00b      	beq.n	8002c40 <HAL_GPIO_Init+0x4c>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d007      	beq.n	8002c40 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c34:	2b11      	cmp	r3, #17
 8002c36:	d003      	beq.n	8002c40 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b12      	cmp	r3, #18
 8002c3e:	d130      	bne.n	8002ca2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c76:	2201      	movs	r2, #1
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4013      	ands	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	091b      	lsrs	r3, r3, #4
 8002c8c:	f003 0201 	and.w	r2, r3, #1
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	2203      	movs	r2, #3
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d003      	beq.n	8002ce2 <HAL_GPIO_Init+0xee>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b12      	cmp	r3, #18
 8002ce0:	d123      	bne.n	8002d2a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	08da      	lsrs	r2, r3, #3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3208      	adds	r2, #8
 8002cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	220f      	movs	r2, #15
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4013      	ands	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	691a      	ldr	r2, [r3, #16]
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	08da      	lsrs	r2, r3, #3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3208      	adds	r2, #8
 8002d24:	69b9      	ldr	r1, [r7, #24]
 8002d26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	2203      	movs	r2, #3
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 0203 	and.w	r2, r3, #3
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 80e0 	beq.w	8002f2c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d6c:	4b2f      	ldr	r3, [pc, #188]	; (8002e2c <HAL_GPIO_Init+0x238>)
 8002d6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d72:	4a2e      	ldr	r2, [pc, #184]	; (8002e2c <HAL_GPIO_Init+0x238>)
 8002d74:	f043 0302 	orr.w	r3, r3, #2
 8002d78:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002d7c:	4b2b      	ldr	r3, [pc, #172]	; (8002e2c <HAL_GPIO_Init+0x238>)
 8002d7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d8a:	4a29      	ldr	r2, [pc, #164]	; (8002e30 <HAL_GPIO_Init+0x23c>)
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	089b      	lsrs	r3, r3, #2
 8002d90:	3302      	adds	r3, #2
 8002d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	220f      	movs	r2, #15
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43db      	mvns	r3, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4013      	ands	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a20      	ldr	r2, [pc, #128]	; (8002e34 <HAL_GPIO_Init+0x240>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d052      	beq.n	8002e5c <HAL_GPIO_Init+0x268>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a1f      	ldr	r2, [pc, #124]	; (8002e38 <HAL_GPIO_Init+0x244>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d031      	beq.n	8002e22 <HAL_GPIO_Init+0x22e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a1e      	ldr	r2, [pc, #120]	; (8002e3c <HAL_GPIO_Init+0x248>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d02b      	beq.n	8002e1e <HAL_GPIO_Init+0x22a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a1d      	ldr	r2, [pc, #116]	; (8002e40 <HAL_GPIO_Init+0x24c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d025      	beq.n	8002e1a <HAL_GPIO_Init+0x226>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a1c      	ldr	r2, [pc, #112]	; (8002e44 <HAL_GPIO_Init+0x250>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d01f      	beq.n	8002e16 <HAL_GPIO_Init+0x222>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a1b      	ldr	r2, [pc, #108]	; (8002e48 <HAL_GPIO_Init+0x254>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d019      	beq.n	8002e12 <HAL_GPIO_Init+0x21e>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a1a      	ldr	r2, [pc, #104]	; (8002e4c <HAL_GPIO_Init+0x258>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d013      	beq.n	8002e0e <HAL_GPIO_Init+0x21a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a19      	ldr	r2, [pc, #100]	; (8002e50 <HAL_GPIO_Init+0x25c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d00d      	beq.n	8002e0a <HAL_GPIO_Init+0x216>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a18      	ldr	r2, [pc, #96]	; (8002e54 <HAL_GPIO_Init+0x260>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d007      	beq.n	8002e06 <HAL_GPIO_Init+0x212>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a17      	ldr	r2, [pc, #92]	; (8002e58 <HAL_GPIO_Init+0x264>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d101      	bne.n	8002e02 <HAL_GPIO_Init+0x20e>
 8002dfe:	2309      	movs	r3, #9
 8002e00:	e02d      	b.n	8002e5e <HAL_GPIO_Init+0x26a>
 8002e02:	230a      	movs	r3, #10
 8002e04:	e02b      	b.n	8002e5e <HAL_GPIO_Init+0x26a>
 8002e06:	2308      	movs	r3, #8
 8002e08:	e029      	b.n	8002e5e <HAL_GPIO_Init+0x26a>
 8002e0a:	2307      	movs	r3, #7
 8002e0c:	e027      	b.n	8002e5e <HAL_GPIO_Init+0x26a>
 8002e0e:	2306      	movs	r3, #6
 8002e10:	e025      	b.n	8002e5e <HAL_GPIO_Init+0x26a>
 8002e12:	2305      	movs	r3, #5
 8002e14:	e023      	b.n	8002e5e <HAL_GPIO_Init+0x26a>
 8002e16:	2304      	movs	r3, #4
 8002e18:	e021      	b.n	8002e5e <HAL_GPIO_Init+0x26a>
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e01f      	b.n	8002e5e <HAL_GPIO_Init+0x26a>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e01d      	b.n	8002e5e <HAL_GPIO_Init+0x26a>
 8002e22:	2301      	movs	r3, #1
 8002e24:	e01b      	b.n	8002e5e <HAL_GPIO_Init+0x26a>
 8002e26:	bf00      	nop
 8002e28:	58000080 	.word	0x58000080
 8002e2c:	58024400 	.word	0x58024400
 8002e30:	58000400 	.word	0x58000400
 8002e34:	58020000 	.word	0x58020000
 8002e38:	58020400 	.word	0x58020400
 8002e3c:	58020800 	.word	0x58020800
 8002e40:	58020c00 	.word	0x58020c00
 8002e44:	58021000 	.word	0x58021000
 8002e48:	58021400 	.word	0x58021400
 8002e4c:	58021800 	.word	0x58021800
 8002e50:	58021c00 	.word	0x58021c00
 8002e54:	58022000 	.word	0x58022000
 8002e58:	58022400 	.word	0x58022400
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	69fa      	ldr	r2, [r7, #28]
 8002e60:	f002 0203 	and.w	r2, r2, #3
 8002e64:	0092      	lsls	r2, r2, #2
 8002e66:	4093      	lsls	r3, r2
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e6e:	4938      	ldr	r1, [pc, #224]	; (8002f50 <HAL_GPIO_Init+0x35c>)
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	089b      	lsrs	r3, r3, #2
 8002e74:	3302      	adds	r3, #2
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	43db      	mvns	r3, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002ef6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002f24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f47f ae63 	bne.w	8002c08 <HAL_GPIO_Init+0x14>
  }
}
 8002f42:	bf00      	nop
 8002f44:	bf00      	nop
 8002f46:	3724      	adds	r7, #36	; 0x24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	58000400 	.word	0x58000400

08002f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	807b      	strh	r3, [r7, #2]
 8002f60:	4613      	mov	r3, r2
 8002f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f64:	787b      	ldrb	r3, [r7, #1]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f6a:	887a      	ldrh	r2, [r7, #2]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002f70:	e003      	b.n	8002f7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f72:	887b      	ldrh	r3, [r7, #2]
 8002f74:	041a      	lsls	r2, r3, #16
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	619a      	str	r2, [r3, #24]
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
	...

08002f88 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002f90:	4a08      	ldr	r2, [pc, #32]	; (8002fb4 <HAL_HSEM_FastTake+0x2c>)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3320      	adds	r3, #32
 8002f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f9a:	4a07      	ldr	r2, [pc, #28]	; (8002fb8 <HAL_HSEM_FastTake+0x30>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d101      	bne.n	8002fa4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	e000      	b.n	8002fa6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	58026400 	.word	0x58026400
 8002fb8:	80000300 	.word	0x80000300

08002fbc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002fc6:	4906      	ldr	r1, [pc, #24]	; (8002fe0 <HAL_HSEM_Release+0x24>)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	58026400 	.word	0x58026400

08002fe4 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8002fec:	4b05      	ldr	r3, [pc, #20]	; (8003004 <HAL_HSEM_ActivateNotification+0x20>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	4904      	ldr	r1, [pc, #16]	; (8003004 <HAL_HSEM_ActivateNotification+0x20>)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	600b      	str	r3, [r1, #0]
#endif
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	58026500 	.word	0x58026500

08003008 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800300e:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <HAL_HSEM_IRQHandler+0x30>)
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003014:	4b08      	ldr	r3, [pc, #32]	; (8003038 <HAL_HSEM_IRQHandler+0x30>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	43db      	mvns	r3, r3
 800301c:	4906      	ldr	r1, [pc, #24]	; (8003038 <HAL_HSEM_IRQHandler+0x30>)
 800301e:	4013      	ands	r3, r2
 8003020:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003022:	4a05      	ldr	r2, [pc, #20]	; (8003038 <HAL_HSEM_IRQHandler+0x30>)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f00a f875 	bl	800d118 <HAL_HSEM_FreeCallback>
}
 800302e:	bf00      	nop
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	58026500 	.word	0x58026500

0800303c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e07f      	b.n	800314e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d106      	bne.n	8003068 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7fe f84a 	bl	80010fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2224      	movs	r2, #36	; 0x24
 800306c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0201 	bic.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800308c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800309c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d107      	bne.n	80030b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	e006      	b.n	80030c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80030c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d104      	bne.n	80030d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6859      	ldr	r1, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4b1d      	ldr	r3, [pc, #116]	; (8003158 <HAL_I2C_Init+0x11c>)
 80030e2:	430b      	orrs	r3, r1
 80030e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691a      	ldr	r2, [r3, #16]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	ea42 0103 	orr.w	r1, r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	021a      	lsls	r2, r3, #8
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69d9      	ldr	r1, [r3, #28]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a1a      	ldr	r2, [r3, #32]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0201 	orr.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	02008000 	.word	0x02008000

0800315c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	68f9      	ldr	r1, [r7, #12]
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	4798      	blx	r3
  }
}
 8003188:	bf00      	nop
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b20      	cmp	r3, #32
 80031a4:	d138      	bne.n	8003218 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d101      	bne.n	80031b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031b0:	2302      	movs	r3, #2
 80031b2:	e032      	b.n	800321a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2224      	movs	r2, #36	; 0x24
 80031c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0201 	bic.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6819      	ldr	r1, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0201 	orr.w	r2, r2, #1
 8003202:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003214:	2300      	movs	r3, #0
 8003216:	e000      	b.n	800321a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003218:	2302      	movs	r3, #2
  }
}
 800321a:	4618      	mov	r0, r3
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003226:	b480      	push	{r7}
 8003228:	b085      	sub	sp, #20
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b20      	cmp	r3, #32
 800323a:	d139      	bne.n	80032b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003242:	2b01      	cmp	r3, #1
 8003244:	d101      	bne.n	800324a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003246:	2302      	movs	r3, #2
 8003248:	e033      	b.n	80032b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2224      	movs	r2, #36	; 0x24
 8003256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0201 	bic.w	r2, r2, #1
 8003268:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003278:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	021b      	lsls	r3, r3, #8
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4313      	orrs	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	e000      	b.n	80032b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032b0:	2302      	movs	r3, #2
  }
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032c0:	b08f      	sub	sp, #60	; 0x3c
 80032c2:	af0a      	add	r7, sp, #40	; 0x28
 80032c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e116      	b.n	80034fe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d106      	bne.n	80032f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7fe fd56 	bl	8001d9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2203      	movs	r2, #3
 80032f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003300:	2b00      	cmp	r3, #0
 8003302:	d102      	bne.n	800330a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f004 fff4 	bl	80082fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	603b      	str	r3, [r7, #0]
 800331a:	687e      	ldr	r6, [r7, #4]
 800331c:	466d      	mov	r5, sp
 800331e:	f106 0410 	add.w	r4, r6, #16
 8003322:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003324:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003326:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003328:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800332a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800332e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003332:	1d33      	adds	r3, r6, #4
 8003334:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003336:	6838      	ldr	r0, [r7, #0]
 8003338:	f004 ff72 	bl	8008220 <USB_CoreInit>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d005      	beq.n	800334e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2202      	movs	r2, #2
 8003346:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e0d7      	b.n	80034fe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2100      	movs	r1, #0
 8003354:	4618      	mov	r0, r3
 8003356:	f004 ffe2 	bl	800831e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800335a:	2300      	movs	r3, #0
 800335c:	73fb      	strb	r3, [r7, #15]
 800335e:	e04a      	b.n	80033f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003360:	7bfa      	ldrb	r2, [r7, #15]
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	333d      	adds	r3, #61	; 0x3d
 8003370:	2201      	movs	r2, #1
 8003372:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003374:	7bfa      	ldrb	r2, [r7, #15]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	333c      	adds	r3, #60	; 0x3c
 8003384:	7bfa      	ldrb	r2, [r7, #15]
 8003386:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003388:	7bfa      	ldrb	r2, [r7, #15]
 800338a:	7bfb      	ldrb	r3, [r7, #15]
 800338c:	b298      	uxth	r0, r3
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	4613      	mov	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	1a9b      	subs	r3, r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	3342      	adds	r3, #66	; 0x42
 800339c:	4602      	mov	r2, r0
 800339e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033a0:	7bfa      	ldrb	r2, [r7, #15]
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	1a9b      	subs	r3, r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	333f      	adds	r3, #63	; 0x3f
 80033b0:	2200      	movs	r2, #0
 80033b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033b4:	7bfa      	ldrb	r2, [r7, #15]
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	3344      	adds	r3, #68	; 0x44
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033c8:	7bfa      	ldrb	r2, [r7, #15]
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	1a9b      	subs	r3, r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	3348      	adds	r3, #72	; 0x48
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033dc:	7bfa      	ldrb	r2, [r7, #15]
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	4613      	mov	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	1a9b      	subs	r3, r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	3350      	adds	r3, #80	; 0x50
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
 80033f2:	3301      	adds	r3, #1
 80033f4:	73fb      	strb	r3, [r7, #15]
 80033f6:	7bfa      	ldrb	r2, [r7, #15]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d3af      	bcc.n	8003360 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003400:	2300      	movs	r3, #0
 8003402:	73fb      	strb	r3, [r7, #15]
 8003404:	e044      	b.n	8003490 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003406:	7bfa      	ldrb	r2, [r7, #15]
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	4613      	mov	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	1a9b      	subs	r3, r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003418:	2200      	movs	r2, #0
 800341a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800341c:	7bfa      	ldrb	r2, [r7, #15]
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	4613      	mov	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	1a9b      	subs	r3, r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800342e:	7bfa      	ldrb	r2, [r7, #15]
 8003430:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003432:	7bfa      	ldrb	r2, [r7, #15]
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	1a9b      	subs	r3, r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	440b      	add	r3, r1
 8003440:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003444:	2200      	movs	r2, #0
 8003446:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003448:	7bfa      	ldrb	r2, [r7, #15]
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800345e:	7bfa      	ldrb	r2, [r7, #15]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	1a9b      	subs	r3, r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003474:	7bfa      	ldrb	r2, [r7, #15]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800348a:	7bfb      	ldrb	r3, [r7, #15]
 800348c:	3301      	adds	r3, #1
 800348e:	73fb      	strb	r3, [r7, #15]
 8003490:	7bfa      	ldrb	r2, [r7, #15]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	429a      	cmp	r2, r3
 8003498:	d3b5      	bcc.n	8003406 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	687e      	ldr	r6, [r7, #4]
 80034a2:	466d      	mov	r5, sp
 80034a4:	f106 0410 	add.w	r4, r6, #16
 80034a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80034b8:	1d33      	adds	r3, r6, #4
 80034ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034bc:	6838      	ldr	r0, [r7, #0]
 80034be:	f004 ff59 	bl	8008374 <USB_DevInit>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e014      	b.n	80034fe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d102      	bne.n	80034f2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f80b 	bl	8003508 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f005 f8fb 	bl	80086f2 <USB_DevDisconnect>

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003508 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003536:	4b05      	ldr	r3, [pc, #20]	; (800354c <HAL_PCDEx_ActivateLPM+0x44>)
 8003538:	4313      	orrs	r3, r2
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	10000003 	.word	0x10000003

08003550 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003558:	4b29      	ldr	r3, [pc, #164]	; (8003600 <HAL_PWREx_ConfigSupply+0xb0>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	2b06      	cmp	r3, #6
 8003562:	d00a      	beq.n	800357a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003564:	4b26      	ldr	r3, [pc, #152]	; (8003600 <HAL_PWREx_ConfigSupply+0xb0>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	429a      	cmp	r2, r3
 8003570:	d001      	beq.n	8003576 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e040      	b.n	80035f8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	e03e      	b.n	80035f8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800357a:	4b21      	ldr	r3, [pc, #132]	; (8003600 <HAL_PWREx_ConfigSupply+0xb0>)
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003582:	491f      	ldr	r1, [pc, #124]	; (8003600 <HAL_PWREx_ConfigSupply+0xb0>)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4313      	orrs	r3, r2
 8003588:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800358a:	f7fe fd41 	bl	8002010 <HAL_GetTick>
 800358e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003590:	e009      	b.n	80035a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003592:	f7fe fd3d 	bl	8002010 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035a0:	d901      	bls.n	80035a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e028      	b.n	80035f8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035a6:	4b16      	ldr	r3, [pc, #88]	; (8003600 <HAL_PWREx_ConfigSupply+0xb0>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035b2:	d1ee      	bne.n	8003592 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b1e      	cmp	r3, #30
 80035b8:	d008      	beq.n	80035cc <HAL_PWREx_ConfigSupply+0x7c>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b2e      	cmp	r3, #46	; 0x2e
 80035be:	d005      	beq.n	80035cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b1d      	cmp	r3, #29
 80035c4:	d002      	beq.n	80035cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b2d      	cmp	r3, #45	; 0x2d
 80035ca:	d114      	bne.n	80035f6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80035cc:	f7fe fd20 	bl	8002010 <HAL_GetTick>
 80035d0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80035d2:	e009      	b.n	80035e8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80035d4:	f7fe fd1c 	bl	8002010 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035e2:	d901      	bls.n	80035e8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e007      	b.n	80035f8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80035e8:	4b05      	ldr	r3, [pc, #20]	; (8003600 <HAL_PWREx_ConfigSupply+0xb0>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f4:	d1ee      	bne.n	80035d4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	58024800 	.word	0x58024800

08003604 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003608:	4b05      	ldr	r3, [pc, #20]	; (8003620 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	4a04      	ldr	r2, [pc, #16]	; (8003620 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800360e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003612:	60d3      	str	r3, [r2, #12]
}
 8003614:	bf00      	nop
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	58024800 	.word	0x58024800

08003624 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08c      	sub	sp, #48	; 0x30
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e3ff      	b.n	8003e36 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 8087 	beq.w	8003752 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003644:	4b99      	ldr	r3, [pc, #612]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800364c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800364e:	4b97      	ldr	r3, [pc, #604]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 8003650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003652:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003656:	2b10      	cmp	r3, #16
 8003658:	d007      	beq.n	800366a <HAL_RCC_OscConfig+0x46>
 800365a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365c:	2b18      	cmp	r3, #24
 800365e:	d110      	bne.n	8003682 <HAL_RCC_OscConfig+0x5e>
 8003660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d10b      	bne.n	8003682 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800366a:	4b90      	ldr	r3, [pc, #576]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d06c      	beq.n	8003750 <HAL_RCC_OscConfig+0x12c>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d168      	bne.n	8003750 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e3d9      	b.n	8003e36 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800368a:	d106      	bne.n	800369a <HAL_RCC_OscConfig+0x76>
 800368c:	4b87      	ldr	r3, [pc, #540]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a86      	ldr	r2, [pc, #536]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 8003692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003696:	6013      	str	r3, [r2, #0]
 8003698:	e02e      	b.n	80036f8 <HAL_RCC_OscConfig+0xd4>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10c      	bne.n	80036bc <HAL_RCC_OscConfig+0x98>
 80036a2:	4b82      	ldr	r3, [pc, #520]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a81      	ldr	r2, [pc, #516]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 80036a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	4b7f      	ldr	r3, [pc, #508]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a7e      	ldr	r2, [pc, #504]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 80036b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	e01d      	b.n	80036f8 <HAL_RCC_OscConfig+0xd4>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036c4:	d10c      	bne.n	80036e0 <HAL_RCC_OscConfig+0xbc>
 80036c6:	4b79      	ldr	r3, [pc, #484]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a78      	ldr	r2, [pc, #480]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 80036cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	4b76      	ldr	r3, [pc, #472]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a75      	ldr	r2, [pc, #468]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 80036d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	e00b      	b.n	80036f8 <HAL_RCC_OscConfig+0xd4>
 80036e0:	4b72      	ldr	r3, [pc, #456]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a71      	ldr	r2, [pc, #452]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 80036e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	4b6f      	ldr	r3, [pc, #444]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a6e      	ldr	r2, [pc, #440]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 80036f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d013      	beq.n	8003728 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003700:	f7fe fc86 	bl	8002010 <HAL_GetTick>
 8003704:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003708:	f7fe fc82 	bl	8002010 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b64      	cmp	r3, #100	; 0x64
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e38d      	b.n	8003e36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800371a:	4b64      	ldr	r3, [pc, #400]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCC_OscConfig+0xe4>
 8003726:	e014      	b.n	8003752 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003728:	f7fe fc72 	bl	8002010 <HAL_GetTick>
 800372c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003730:	f7fe fc6e 	bl	8002010 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b64      	cmp	r3, #100	; 0x64
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e379      	b.n	8003e36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003742:	4b5a      	ldr	r3, [pc, #360]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f0      	bne.n	8003730 <HAL_RCC_OscConfig+0x10c>
 800374e:	e000      	b.n	8003752 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 80ae 	beq.w	80038bc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003760:	4b52      	ldr	r3, [pc, #328]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003768:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800376a:	4b50      	ldr	r3, [pc, #320]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 800376c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d007      	beq.n	8003786 <HAL_RCC_OscConfig+0x162>
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	2b18      	cmp	r3, #24
 800377a:	d13a      	bne.n	80037f2 <HAL_RCC_OscConfig+0x1ce>
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d135      	bne.n	80037f2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003786:	4b49      	ldr	r3, [pc, #292]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	2b00      	cmp	r3, #0
 8003790:	d005      	beq.n	800379e <HAL_RCC_OscConfig+0x17a>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e34b      	b.n	8003e36 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379e:	f7fe fc67 	bl	8002070 <HAL_GetREVID>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d817      	bhi.n	80037dc <HAL_RCC_OscConfig+0x1b8>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	2b40      	cmp	r3, #64	; 0x40
 80037b2:	d108      	bne.n	80037c6 <HAL_RCC_OscConfig+0x1a2>
 80037b4:	4b3d      	ldr	r3, [pc, #244]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80037bc:	4a3b      	ldr	r2, [pc, #236]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 80037be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037c2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037c4:	e07a      	b.n	80038bc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c6:	4b39      	ldr	r3, [pc, #228]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	031b      	lsls	r3, r3, #12
 80037d4:	4935      	ldr	r1, [pc, #212]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037da:	e06f      	b.n	80038bc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037dc:	4b33      	ldr	r3, [pc, #204]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	061b      	lsls	r3, r3, #24
 80037ea:	4930      	ldr	r1, [pc, #192]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037f0:	e064      	b.n	80038bc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d045      	beq.n	8003886 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80037fa:	4b2c      	ldr	r3, [pc, #176]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f023 0219 	bic.w	r2, r3, #25
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	4929      	ldr	r1, [pc, #164]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 8003808:	4313      	orrs	r3, r2
 800380a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380c:	f7fe fc00 	bl	8002010 <HAL_GetTick>
 8003810:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003814:	f7fe fbfc 	bl	8002010 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e307      	b.n	8003e36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003826:	4b21      	ldr	r3, [pc, #132]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0f0      	beq.n	8003814 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003832:	f7fe fc1d 	bl	8002070 <HAL_GetREVID>
 8003836:	4603      	mov	r3, r0
 8003838:	f241 0203 	movw	r2, #4099	; 0x1003
 800383c:	4293      	cmp	r3, r2
 800383e:	d817      	bhi.n	8003870 <HAL_RCC_OscConfig+0x24c>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	2b40      	cmp	r3, #64	; 0x40
 8003846:	d108      	bne.n	800385a <HAL_RCC_OscConfig+0x236>
 8003848:	4b18      	ldr	r3, [pc, #96]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003850:	4a16      	ldr	r2, [pc, #88]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 8003852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003856:	6053      	str	r3, [r2, #4]
 8003858:	e030      	b.n	80038bc <HAL_RCC_OscConfig+0x298>
 800385a:	4b14      	ldr	r3, [pc, #80]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	031b      	lsls	r3, r3, #12
 8003868:	4910      	ldr	r1, [pc, #64]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 800386a:	4313      	orrs	r3, r2
 800386c:	604b      	str	r3, [r1, #4]
 800386e:	e025      	b.n	80038bc <HAL_RCC_OscConfig+0x298>
 8003870:	4b0e      	ldr	r3, [pc, #56]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	061b      	lsls	r3, r3, #24
 800387e:	490b      	ldr	r1, [pc, #44]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 8003880:	4313      	orrs	r3, r2
 8003882:	604b      	str	r3, [r1, #4]
 8003884:	e01a      	b.n	80038bc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003886:	4b09      	ldr	r3, [pc, #36]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a08      	ldr	r2, [pc, #32]	; (80038ac <HAL_RCC_OscConfig+0x288>)
 800388c:	f023 0301 	bic.w	r3, r3, #1
 8003890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003892:	f7fe fbbd 	bl	8002010 <HAL_GetTick>
 8003896:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003898:	e00a      	b.n	80038b0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800389a:	f7fe fbb9 	bl	8002010 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d903      	bls.n	80038b0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e2c4      	b.n	8003e36 <HAL_RCC_OscConfig+0x812>
 80038ac:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038b0:	4ba4      	ldr	r3, [pc, #656]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1ee      	bne.n	800389a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0310 	and.w	r3, r3, #16
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 80a9 	beq.w	8003a1c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ca:	4b9e      	ldr	r3, [pc, #632]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038d2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038d4:	4b9b      	ldr	r3, [pc, #620]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 80038d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d007      	beq.n	80038f0 <HAL_RCC_OscConfig+0x2cc>
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	2b18      	cmp	r3, #24
 80038e4:	d13a      	bne.n	800395c <HAL_RCC_OscConfig+0x338>
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d135      	bne.n	800395c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038f0:	4b94      	ldr	r3, [pc, #592]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <HAL_RCC_OscConfig+0x2e4>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	2b80      	cmp	r3, #128	; 0x80
 8003902:	d001      	beq.n	8003908 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e296      	b.n	8003e36 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003908:	f7fe fbb2 	bl	8002070 <HAL_GetREVID>
 800390c:	4603      	mov	r3, r0
 800390e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003912:	4293      	cmp	r3, r2
 8003914:	d817      	bhi.n	8003946 <HAL_RCC_OscConfig+0x322>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	2b20      	cmp	r3, #32
 800391c:	d108      	bne.n	8003930 <HAL_RCC_OscConfig+0x30c>
 800391e:	4b89      	ldr	r3, [pc, #548]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003926:	4a87      	ldr	r2, [pc, #540]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 8003928:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800392c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800392e:	e075      	b.n	8003a1c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003930:	4b84      	ldr	r3, [pc, #528]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	069b      	lsls	r3, r3, #26
 800393e:	4981      	ldr	r1, [pc, #516]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 8003940:	4313      	orrs	r3, r2
 8003942:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003944:	e06a      	b.n	8003a1c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003946:	4b7f      	ldr	r3, [pc, #508]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	061b      	lsls	r3, r3, #24
 8003954:	497b      	ldr	r1, [pc, #492]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 8003956:	4313      	orrs	r3, r2
 8003958:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800395a:	e05f      	b.n	8003a1c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d042      	beq.n	80039ea <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003964:	4b77      	ldr	r3, [pc, #476]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a76      	ldr	r2, [pc, #472]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 800396a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800396e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003970:	f7fe fb4e 	bl	8002010 <HAL_GetTick>
 8003974:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003978:	f7fe fb4a 	bl	8002010 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e255      	b.n	8003e36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800398a:	4b6e      	ldr	r3, [pc, #440]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0f0      	beq.n	8003978 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003996:	f7fe fb6b 	bl	8002070 <HAL_GetREVID>
 800399a:	4603      	mov	r3, r0
 800399c:	f241 0203 	movw	r2, #4099	; 0x1003
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d817      	bhi.n	80039d4 <HAL_RCC_OscConfig+0x3b0>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	2b20      	cmp	r3, #32
 80039aa:	d108      	bne.n	80039be <HAL_RCC_OscConfig+0x39a>
 80039ac:	4b65      	ldr	r3, [pc, #404]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80039b4:	4a63      	ldr	r2, [pc, #396]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 80039b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039ba:	6053      	str	r3, [r2, #4]
 80039bc:	e02e      	b.n	8003a1c <HAL_RCC_OscConfig+0x3f8>
 80039be:	4b61      	ldr	r3, [pc, #388]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	069b      	lsls	r3, r3, #26
 80039cc:	495d      	ldr	r1, [pc, #372]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	604b      	str	r3, [r1, #4]
 80039d2:	e023      	b.n	8003a1c <HAL_RCC_OscConfig+0x3f8>
 80039d4:	4b5b      	ldr	r3, [pc, #364]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	061b      	lsls	r3, r3, #24
 80039e2:	4958      	ldr	r1, [pc, #352]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60cb      	str	r3, [r1, #12]
 80039e8:	e018      	b.n	8003a1c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80039ea:	4b56      	ldr	r3, [pc, #344]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a55      	ldr	r2, [pc, #340]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 80039f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f6:	f7fe fb0b 	bl	8002010 <HAL_GetTick>
 80039fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80039fe:	f7fe fb07 	bl	8002010 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e212      	b.n	8003e36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a10:	4b4c      	ldr	r3, [pc, #304]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1f0      	bne.n	80039fe <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d036      	beq.n	8003a96 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d019      	beq.n	8003a64 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a30:	4b44      	ldr	r3, [pc, #272]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 8003a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a34:	4a43      	ldr	r2, [pc, #268]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 8003a36:	f043 0301 	orr.w	r3, r3, #1
 8003a3a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3c:	f7fe fae8 	bl	8002010 <HAL_GetTick>
 8003a40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a44:	f7fe fae4 	bl	8002010 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e1ef      	b.n	8003e36 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a56:	4b3b      	ldr	r3, [pc, #236]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 8003a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0f0      	beq.n	8003a44 <HAL_RCC_OscConfig+0x420>
 8003a62:	e018      	b.n	8003a96 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a64:	4b37      	ldr	r3, [pc, #220]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 8003a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a68:	4a36      	ldr	r2, [pc, #216]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 8003a6a:	f023 0301 	bic.w	r3, r3, #1
 8003a6e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a70:	f7fe face 	bl	8002010 <HAL_GetTick>
 8003a74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a78:	f7fe faca 	bl	8002010 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e1d5      	b.n	8003e36 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a8a:	4b2e      	ldr	r3, [pc, #184]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 8003a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1f0      	bne.n	8003a78 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0320 	and.w	r3, r3, #32
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d036      	beq.n	8003b10 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d019      	beq.n	8003ade <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003aaa:	4b26      	ldr	r3, [pc, #152]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a25      	ldr	r2, [pc, #148]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 8003ab0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ab4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ab6:	f7fe faab 	bl	8002010 <HAL_GetTick>
 8003aba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003abe:	f7fe faa7 	bl	8002010 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e1b2      	b.n	8003e36 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ad0:	4b1c      	ldr	r3, [pc, #112]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0f0      	beq.n	8003abe <HAL_RCC_OscConfig+0x49a>
 8003adc:	e018      	b.n	8003b10 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ade:	4b19      	ldr	r3, [pc, #100]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a18      	ldr	r2, [pc, #96]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 8003ae4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ae8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003aea:	f7fe fa91 	bl	8002010 <HAL_GetTick>
 8003aee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003af2:	f7fe fa8d 	bl	8002010 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e198      	b.n	8003e36 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b04:	4b0f      	ldr	r3, [pc, #60]	; (8003b44 <HAL_RCC_OscConfig+0x520>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1f0      	bne.n	8003af2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 8085 	beq.w	8003c28 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <HAL_RCC_OscConfig+0x524>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a09      	ldr	r2, [pc, #36]	; (8003b48 <HAL_RCC_OscConfig+0x524>)
 8003b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b2a:	f7fe fa71 	bl	8002010 <HAL_GetTick>
 8003b2e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b30:	e00c      	b.n	8003b4c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b32:	f7fe fa6d 	bl	8002010 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b64      	cmp	r3, #100	; 0x64
 8003b3e:	d905      	bls.n	8003b4c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e178      	b.n	8003e36 <HAL_RCC_OscConfig+0x812>
 8003b44:	58024400 	.word	0x58024400
 8003b48:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b4c:	4b96      	ldr	r3, [pc, #600]	; (8003da8 <HAL_RCC_OscConfig+0x784>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0ec      	beq.n	8003b32 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d106      	bne.n	8003b6e <HAL_RCC_OscConfig+0x54a>
 8003b60:	4b92      	ldr	r3, [pc, #584]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b64:	4a91      	ldr	r2, [pc, #580]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003b66:	f043 0301 	orr.w	r3, r3, #1
 8003b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b6c:	e02d      	b.n	8003bca <HAL_RCC_OscConfig+0x5a6>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10c      	bne.n	8003b90 <HAL_RCC_OscConfig+0x56c>
 8003b76:	4b8d      	ldr	r3, [pc, #564]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7a:	4a8c      	ldr	r2, [pc, #560]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003b7c:	f023 0301 	bic.w	r3, r3, #1
 8003b80:	6713      	str	r3, [r2, #112]	; 0x70
 8003b82:	4b8a      	ldr	r3, [pc, #552]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b86:	4a89      	ldr	r2, [pc, #548]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003b88:	f023 0304 	bic.w	r3, r3, #4
 8003b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b8e:	e01c      	b.n	8003bca <HAL_RCC_OscConfig+0x5a6>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	2b05      	cmp	r3, #5
 8003b96:	d10c      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x58e>
 8003b98:	4b84      	ldr	r3, [pc, #528]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9c:	4a83      	ldr	r2, [pc, #524]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003b9e:	f043 0304 	orr.w	r3, r3, #4
 8003ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba4:	4b81      	ldr	r3, [pc, #516]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba8:	4a80      	ldr	r2, [pc, #512]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb0:	e00b      	b.n	8003bca <HAL_RCC_OscConfig+0x5a6>
 8003bb2:	4b7e      	ldr	r3, [pc, #504]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb6:	4a7d      	ldr	r2, [pc, #500]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003bb8:	f023 0301 	bic.w	r3, r3, #1
 8003bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8003bbe:	4b7b      	ldr	r3, [pc, #492]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc2:	4a7a      	ldr	r2, [pc, #488]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003bc4:	f023 0304 	bic.w	r3, r3, #4
 8003bc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d015      	beq.n	8003bfe <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd2:	f7fe fa1d 	bl	8002010 <HAL_GetTick>
 8003bd6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bd8:	e00a      	b.n	8003bf0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bda:	f7fe fa19 	bl	8002010 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e122      	b.n	8003e36 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bf0:	4b6e      	ldr	r3, [pc, #440]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0ee      	beq.n	8003bda <HAL_RCC_OscConfig+0x5b6>
 8003bfc:	e014      	b.n	8003c28 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfe:	f7fe fa07 	bl	8002010 <HAL_GetTick>
 8003c02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c04:	e00a      	b.n	8003c1c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c06:	f7fe fa03 	bl	8002010 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e10c      	b.n	8003e36 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c1c:	4b63      	ldr	r3, [pc, #396]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1ee      	bne.n	8003c06 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 8101 	beq.w	8003e34 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c32:	4b5e      	ldr	r3, [pc, #376]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c3a:	2b18      	cmp	r3, #24
 8003c3c:	f000 80bc 	beq.w	8003db8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	f040 8095 	bne.w	8003d74 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c4a:	4b58      	ldr	r3, [pc, #352]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a57      	ldr	r2, [pc, #348]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003c50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c56:	f7fe f9db 	bl	8002010 <HAL_GetTick>
 8003c5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c5e:	f7fe f9d7 	bl	8002010 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e0e2      	b.n	8003e36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c70:	4b4e      	ldr	r3, [pc, #312]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1f0      	bne.n	8003c5e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c7c:	4b4b      	ldr	r3, [pc, #300]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003c7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c80:	4b4b      	ldr	r3, [pc, #300]	; (8003db0 <HAL_RCC_OscConfig+0x78c>)
 8003c82:	4013      	ands	r3, r2
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c8c:	0112      	lsls	r2, r2, #4
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	4946      	ldr	r1, [pc, #280]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	628b      	str	r3, [r1, #40]	; 0x28
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	025b      	lsls	r3, r3, #9
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	041b      	lsls	r3, r3, #16
 8003cb4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	061b      	lsls	r3, r3, #24
 8003cc2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003cc6:	4939      	ldr	r1, [pc, #228]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003ccc:	4b37      	ldr	r3, [pc, #220]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd0:	4a36      	ldr	r2, [pc, #216]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003cd2:	f023 0301 	bic.w	r3, r3, #1
 8003cd6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003cd8:	4b34      	ldr	r3, [pc, #208]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cdc:	4b35      	ldr	r3, [pc, #212]	; (8003db4 <HAL_RCC_OscConfig+0x790>)
 8003cde:	4013      	ands	r3, r2
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ce4:	00d2      	lsls	r2, r2, #3
 8003ce6:	4931      	ldr	r1, [pc, #196]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003cec:	4b2f      	ldr	r3, [pc, #188]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	f023 020c 	bic.w	r2, r3, #12
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	492c      	ldr	r1, [pc, #176]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003cfe:	4b2b      	ldr	r3, [pc, #172]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d02:	f023 0202 	bic.w	r2, r3, #2
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0a:	4928      	ldr	r1, [pc, #160]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d10:	4b26      	ldr	r3, [pc, #152]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	4a25      	ldr	r2, [pc, #148]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d1c:	4b23      	ldr	r3, [pc, #140]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	4a22      	ldr	r2, [pc, #136]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d28:	4b20      	ldr	r3, [pc, #128]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2c:	4a1f      	ldr	r2, [pc, #124]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003d2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003d34:	4b1d      	ldr	r3, [pc, #116]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	4a1c      	ldr	r2, [pc, #112]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003d3a:	f043 0301 	orr.w	r3, r3, #1
 8003d3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d40:	4b1a      	ldr	r3, [pc, #104]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a19      	ldr	r2, [pc, #100]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003d46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4c:	f7fe f960 	bl	8002010 <HAL_GetTick>
 8003d50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d54:	f7fe f95c 	bl	8002010 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e067      	b.n	8003e36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d66:	4b11      	ldr	r3, [pc, #68]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0f0      	beq.n	8003d54 <HAL_RCC_OscConfig+0x730>
 8003d72:	e05f      	b.n	8003e34 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d74:	4b0d      	ldr	r3, [pc, #52]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a0c      	ldr	r2, [pc, #48]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003d7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d80:	f7fe f946 	bl	8002010 <HAL_GetTick>
 8003d84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d88:	f7fe f942 	bl	8002010 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e04d      	b.n	8003e36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d9a:	4b04      	ldr	r3, [pc, #16]	; (8003dac <HAL_RCC_OscConfig+0x788>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f0      	bne.n	8003d88 <HAL_RCC_OscConfig+0x764>
 8003da6:	e045      	b.n	8003e34 <HAL_RCC_OscConfig+0x810>
 8003da8:	58024800 	.word	0x58024800
 8003dac:	58024400 	.word	0x58024400
 8003db0:	fffffc0c 	.word	0xfffffc0c
 8003db4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003db8:	4b21      	ldr	r3, [pc, #132]	; (8003e40 <HAL_RCC_OscConfig+0x81c>)
 8003dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003dbe:	4b20      	ldr	r3, [pc, #128]	; (8003e40 <HAL_RCC_OscConfig+0x81c>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d031      	beq.n	8003e30 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f003 0203 	and.w	r2, r3, #3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d12a      	bne.n	8003e30 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	091b      	lsrs	r3, r3, #4
 8003dde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d122      	bne.n	8003e30 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d11a      	bne.n	8003e30 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	0a5b      	lsrs	r3, r3, #9
 8003dfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e06:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d111      	bne.n	8003e30 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	0c1b      	lsrs	r3, r3, #16
 8003e10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e18:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d108      	bne.n	8003e30 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	0e1b      	lsrs	r3, r3, #24
 8003e22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d001      	beq.n	8003e34 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e000      	b.n	8003e36 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3730      	adds	r7, #48	; 0x30
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	58024400 	.word	0x58024400

08003e44 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e19c      	b.n	8004192 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e58:	4b8a      	ldr	r3, [pc, #552]	; (8004084 <HAL_RCC_ClockConfig+0x240>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 030f 	and.w	r3, r3, #15
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d910      	bls.n	8003e88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e66:	4b87      	ldr	r3, [pc, #540]	; (8004084 <HAL_RCC_ClockConfig+0x240>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f023 020f 	bic.w	r2, r3, #15
 8003e6e:	4985      	ldr	r1, [pc, #532]	; (8004084 <HAL_RCC_ClockConfig+0x240>)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e76:	4b83      	ldr	r3, [pc, #524]	; (8004084 <HAL_RCC_ClockConfig+0x240>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d001      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e184      	b.n	8004192 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d010      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691a      	ldr	r2, [r3, #16]
 8003e98:	4b7b      	ldr	r3, [pc, #492]	; (8004088 <HAL_RCC_ClockConfig+0x244>)
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d908      	bls.n	8003eb6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ea4:	4b78      	ldr	r3, [pc, #480]	; (8004088 <HAL_RCC_ClockConfig+0x244>)
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	4975      	ldr	r1, [pc, #468]	; (8004088 <HAL_RCC_ClockConfig+0x244>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0308 	and.w	r3, r3, #8
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d010      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695a      	ldr	r2, [r3, #20]
 8003ec6:	4b70      	ldr	r3, [pc, #448]	; (8004088 <HAL_RCC_ClockConfig+0x244>)
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d908      	bls.n	8003ee4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ed2:	4b6d      	ldr	r3, [pc, #436]	; (8004088 <HAL_RCC_ClockConfig+0x244>)
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	496a      	ldr	r1, [pc, #424]	; (8004088 <HAL_RCC_ClockConfig+0x244>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0310 	and.w	r3, r3, #16
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d010      	beq.n	8003f12 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	699a      	ldr	r2, [r3, #24]
 8003ef4:	4b64      	ldr	r3, [pc, #400]	; (8004088 <HAL_RCC_ClockConfig+0x244>)
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d908      	bls.n	8003f12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f00:	4b61      	ldr	r3, [pc, #388]	; (8004088 <HAL_RCC_ClockConfig+0x244>)
 8003f02:	69db      	ldr	r3, [r3, #28]
 8003f04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	495e      	ldr	r1, [pc, #376]	; (8004088 <HAL_RCC_ClockConfig+0x244>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d010      	beq.n	8003f40 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69da      	ldr	r2, [r3, #28]
 8003f22:	4b59      	ldr	r3, [pc, #356]	; (8004088 <HAL_RCC_ClockConfig+0x244>)
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d908      	bls.n	8003f40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003f2e:	4b56      	ldr	r3, [pc, #344]	; (8004088 <HAL_RCC_ClockConfig+0x244>)
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	4953      	ldr	r1, [pc, #332]	; (8004088 <HAL_RCC_ClockConfig+0x244>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d010      	beq.n	8003f6e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68da      	ldr	r2, [r3, #12]
 8003f50:	4b4d      	ldr	r3, [pc, #308]	; (8004088 <HAL_RCC_ClockConfig+0x244>)
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	f003 030f 	and.w	r3, r3, #15
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d908      	bls.n	8003f6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f5c:	4b4a      	ldr	r3, [pc, #296]	; (8004088 <HAL_RCC_ClockConfig+0x244>)
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	f023 020f 	bic.w	r2, r3, #15
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	4947      	ldr	r1, [pc, #284]	; (8004088 <HAL_RCC_ClockConfig+0x244>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d055      	beq.n	8004026 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003f7a:	4b43      	ldr	r3, [pc, #268]	; (8004088 <HAL_RCC_ClockConfig+0x244>)
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	4940      	ldr	r1, [pc, #256]	; (8004088 <HAL_RCC_ClockConfig+0x244>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d107      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f94:	4b3c      	ldr	r3, [pc, #240]	; (8004088 <HAL_RCC_ClockConfig+0x244>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d121      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e0f6      	b.n	8004192 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b03      	cmp	r3, #3
 8003faa:	d107      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fac:	4b36      	ldr	r3, [pc, #216]	; (8004088 <HAL_RCC_ClockConfig+0x244>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d115      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e0ea      	b.n	8004192 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d107      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003fc4:	4b30      	ldr	r3, [pc, #192]	; (8004088 <HAL_RCC_ClockConfig+0x244>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d109      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e0de      	b.n	8004192 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fd4:	4b2c      	ldr	r3, [pc, #176]	; (8004088 <HAL_RCC_ClockConfig+0x244>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e0d6      	b.n	8004192 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fe4:	4b28      	ldr	r3, [pc, #160]	; (8004088 <HAL_RCC_ClockConfig+0x244>)
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	f023 0207 	bic.w	r2, r3, #7
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	4925      	ldr	r1, [pc, #148]	; (8004088 <HAL_RCC_ClockConfig+0x244>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff6:	f7fe f80b 	bl	8002010 <HAL_GetTick>
 8003ffa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ffc:	e00a      	b.n	8004014 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ffe:	f7fe f807 	bl	8002010 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	f241 3288 	movw	r2, #5000	; 0x1388
 800400c:	4293      	cmp	r3, r2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e0be      	b.n	8004192 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004014:	4b1c      	ldr	r3, [pc, #112]	; (8004088 <HAL_RCC_ClockConfig+0x244>)
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	429a      	cmp	r2, r3
 8004024:	d1eb      	bne.n	8003ffe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d010      	beq.n	8004054 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	4b14      	ldr	r3, [pc, #80]	; (8004088 <HAL_RCC_ClockConfig+0x244>)
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	429a      	cmp	r2, r3
 8004040:	d208      	bcs.n	8004054 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004042:	4b11      	ldr	r3, [pc, #68]	; (8004088 <HAL_RCC_ClockConfig+0x244>)
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	f023 020f 	bic.w	r2, r3, #15
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	490e      	ldr	r1, [pc, #56]	; (8004088 <HAL_RCC_ClockConfig+0x244>)
 8004050:	4313      	orrs	r3, r2
 8004052:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004054:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <HAL_RCC_ClockConfig+0x240>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 030f 	and.w	r3, r3, #15
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d214      	bcs.n	800408c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004062:	4b08      	ldr	r3, [pc, #32]	; (8004084 <HAL_RCC_ClockConfig+0x240>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f023 020f 	bic.w	r2, r3, #15
 800406a:	4906      	ldr	r1, [pc, #24]	; (8004084 <HAL_RCC_ClockConfig+0x240>)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	4313      	orrs	r3, r2
 8004070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004072:	4b04      	ldr	r3, [pc, #16]	; (8004084 <HAL_RCC_ClockConfig+0x240>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	429a      	cmp	r2, r3
 800407e:	d005      	beq.n	800408c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e086      	b.n	8004192 <HAL_RCC_ClockConfig+0x34e>
 8004084:	52002000 	.word	0x52002000
 8004088:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	d010      	beq.n	80040ba <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	4b3f      	ldr	r3, [pc, #252]	; (800419c <HAL_RCC_ClockConfig+0x358>)
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d208      	bcs.n	80040ba <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040a8:	4b3c      	ldr	r3, [pc, #240]	; (800419c <HAL_RCC_ClockConfig+0x358>)
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	4939      	ldr	r1, [pc, #228]	; (800419c <HAL_RCC_ClockConfig+0x358>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d010      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695a      	ldr	r2, [r3, #20]
 80040ca:	4b34      	ldr	r3, [pc, #208]	; (800419c <HAL_RCC_ClockConfig+0x358>)
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d208      	bcs.n	80040e8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80040d6:	4b31      	ldr	r3, [pc, #196]	; (800419c <HAL_RCC_ClockConfig+0x358>)
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	492e      	ldr	r1, [pc, #184]	; (800419c <HAL_RCC_ClockConfig+0x358>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0310 	and.w	r3, r3, #16
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d010      	beq.n	8004116 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	699a      	ldr	r2, [r3, #24]
 80040f8:	4b28      	ldr	r3, [pc, #160]	; (800419c <HAL_RCC_ClockConfig+0x358>)
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004100:	429a      	cmp	r2, r3
 8004102:	d208      	bcs.n	8004116 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004104:	4b25      	ldr	r3, [pc, #148]	; (800419c <HAL_RCC_ClockConfig+0x358>)
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	4922      	ldr	r1, [pc, #136]	; (800419c <HAL_RCC_ClockConfig+0x358>)
 8004112:	4313      	orrs	r3, r2
 8004114:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0320 	and.w	r3, r3, #32
 800411e:	2b00      	cmp	r3, #0
 8004120:	d010      	beq.n	8004144 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69da      	ldr	r2, [r3, #28]
 8004126:	4b1d      	ldr	r3, [pc, #116]	; (800419c <HAL_RCC_ClockConfig+0x358>)
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800412e:	429a      	cmp	r2, r3
 8004130:	d208      	bcs.n	8004144 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004132:	4b1a      	ldr	r3, [pc, #104]	; (800419c <HAL_RCC_ClockConfig+0x358>)
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	4917      	ldr	r1, [pc, #92]	; (800419c <HAL_RCC_ClockConfig+0x358>)
 8004140:	4313      	orrs	r3, r2
 8004142:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004144:	f000 f834 	bl	80041b0 <HAL_RCC_GetSysClockFreq>
 8004148:	4602      	mov	r2, r0
 800414a:	4b14      	ldr	r3, [pc, #80]	; (800419c <HAL_RCC_ClockConfig+0x358>)
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	0a1b      	lsrs	r3, r3, #8
 8004150:	f003 030f 	and.w	r3, r3, #15
 8004154:	4912      	ldr	r1, [pc, #72]	; (80041a0 <HAL_RCC_ClockConfig+0x35c>)
 8004156:	5ccb      	ldrb	r3, [r1, r3]
 8004158:	f003 031f 	and.w	r3, r3, #31
 800415c:	fa22 f303 	lsr.w	r3, r2, r3
 8004160:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004162:	4b0e      	ldr	r3, [pc, #56]	; (800419c <HAL_RCC_ClockConfig+0x358>)
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	f003 030f 	and.w	r3, r3, #15
 800416a:	4a0d      	ldr	r2, [pc, #52]	; (80041a0 <HAL_RCC_ClockConfig+0x35c>)
 800416c:	5cd3      	ldrb	r3, [r2, r3]
 800416e:	f003 031f 	and.w	r3, r3, #31
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	fa22 f303 	lsr.w	r3, r2, r3
 8004178:	4a0a      	ldr	r2, [pc, #40]	; (80041a4 <HAL_RCC_ClockConfig+0x360>)
 800417a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800417c:	4a0a      	ldr	r2, [pc, #40]	; (80041a8 <HAL_RCC_ClockConfig+0x364>)
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004182:	4b0a      	ldr	r3, [pc, #40]	; (80041ac <HAL_RCC_ClockConfig+0x368>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f7fd fef8 	bl	8001f7c <HAL_InitTick>
 800418c:	4603      	mov	r3, r0
 800418e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004190:	7bfb      	ldrb	r3, [r7, #15]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3718      	adds	r7, #24
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	58024400 	.word	0x58024400
 80041a0:	080153b8 	.word	0x080153b8
 80041a4:	24000004 	.word	0x24000004
 80041a8:	24000000 	.word	0x24000000
 80041ac:	24000010 	.word	0x24000010

080041b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b089      	sub	sp, #36	; 0x24
 80041b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041b6:	4bb3      	ldr	r3, [pc, #716]	; (8004484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041be:	2b18      	cmp	r3, #24
 80041c0:	f200 8155 	bhi.w	800446e <HAL_RCC_GetSysClockFreq+0x2be>
 80041c4:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80041c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ca:	bf00      	nop
 80041cc:	08004231 	.word	0x08004231
 80041d0:	0800446f 	.word	0x0800446f
 80041d4:	0800446f 	.word	0x0800446f
 80041d8:	0800446f 	.word	0x0800446f
 80041dc:	0800446f 	.word	0x0800446f
 80041e0:	0800446f 	.word	0x0800446f
 80041e4:	0800446f 	.word	0x0800446f
 80041e8:	0800446f 	.word	0x0800446f
 80041ec:	08004257 	.word	0x08004257
 80041f0:	0800446f 	.word	0x0800446f
 80041f4:	0800446f 	.word	0x0800446f
 80041f8:	0800446f 	.word	0x0800446f
 80041fc:	0800446f 	.word	0x0800446f
 8004200:	0800446f 	.word	0x0800446f
 8004204:	0800446f 	.word	0x0800446f
 8004208:	0800446f 	.word	0x0800446f
 800420c:	0800425d 	.word	0x0800425d
 8004210:	0800446f 	.word	0x0800446f
 8004214:	0800446f 	.word	0x0800446f
 8004218:	0800446f 	.word	0x0800446f
 800421c:	0800446f 	.word	0x0800446f
 8004220:	0800446f 	.word	0x0800446f
 8004224:	0800446f 	.word	0x0800446f
 8004228:	0800446f 	.word	0x0800446f
 800422c:	08004263 	.word	0x08004263
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004230:	4b94      	ldr	r3, [pc, #592]	; (8004484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0320 	and.w	r3, r3, #32
 8004238:	2b00      	cmp	r3, #0
 800423a:	d009      	beq.n	8004250 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800423c:	4b91      	ldr	r3, [pc, #580]	; (8004484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	08db      	lsrs	r3, r3, #3
 8004242:	f003 0303 	and.w	r3, r3, #3
 8004246:	4a90      	ldr	r2, [pc, #576]	; (8004488 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004248:	fa22 f303 	lsr.w	r3, r2, r3
 800424c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800424e:	e111      	b.n	8004474 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004250:	4b8d      	ldr	r3, [pc, #564]	; (8004488 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004252:	61bb      	str	r3, [r7, #24]
    break;
 8004254:	e10e      	b.n	8004474 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004256:	4b8d      	ldr	r3, [pc, #564]	; (800448c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004258:	61bb      	str	r3, [r7, #24]
    break;
 800425a:	e10b      	b.n	8004474 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800425c:	4b8c      	ldr	r3, [pc, #560]	; (8004490 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800425e:	61bb      	str	r3, [r7, #24]
    break;
 8004260:	e108      	b.n	8004474 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004262:	4b88      	ldr	r3, [pc, #544]	; (8004484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	f003 0303 	and.w	r3, r3, #3
 800426a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800426c:	4b85      	ldr	r3, [pc, #532]	; (8004484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800426e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004270:	091b      	lsrs	r3, r3, #4
 8004272:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004276:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004278:	4b82      	ldr	r3, [pc, #520]	; (8004484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004282:	4b80      	ldr	r3, [pc, #512]	; (8004484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004286:	08db      	lsrs	r3, r3, #3
 8004288:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	fb02 f303 	mul.w	r3, r2, r3
 8004292:	ee07 3a90 	vmov	s15, r3
 8004296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800429a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 80e1 	beq.w	8004468 <HAL_RCC_GetSysClockFreq+0x2b8>
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	f000 8083 	beq.w	80043b4 <HAL_RCC_GetSysClockFreq+0x204>
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	f200 80a1 	bhi.w	80043f8 <HAL_RCC_GetSysClockFreq+0x248>
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <HAL_RCC_GetSysClockFreq+0x114>
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d056      	beq.n	8004370 <HAL_RCC_GetSysClockFreq+0x1c0>
 80042c2:	e099      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042c4:	4b6f      	ldr	r3, [pc, #444]	; (8004484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0320 	and.w	r3, r3, #32
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d02d      	beq.n	800432c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80042d0:	4b6c      	ldr	r3, [pc, #432]	; (8004484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	08db      	lsrs	r3, r3, #3
 80042d6:	f003 0303 	and.w	r3, r3, #3
 80042da:	4a6b      	ldr	r2, [pc, #428]	; (8004488 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042dc:	fa22 f303 	lsr.w	r3, r2, r3
 80042e0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	ee07 3a90 	vmov	s15, r3
 80042e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	ee07 3a90 	vmov	s15, r3
 80042f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042fa:	4b62      	ldr	r3, [pc, #392]	; (8004484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004302:	ee07 3a90 	vmov	s15, r3
 8004306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800430a:	ed97 6a02 	vldr	s12, [r7, #8]
 800430e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004494 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800431a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800431e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004326:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800432a:	e087      	b.n	800443c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	ee07 3a90 	vmov	s15, r3
 8004332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004336:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004498 <HAL_RCC_GetSysClockFreq+0x2e8>
 800433a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800433e:	4b51      	ldr	r3, [pc, #324]	; (8004484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004346:	ee07 3a90 	vmov	s15, r3
 800434a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800434e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004352:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004494 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800435a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800435e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800436a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800436e:	e065      	b.n	800443c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	ee07 3a90 	vmov	s15, r3
 8004376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800437a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800449c <HAL_RCC_GetSysClockFreq+0x2ec>
 800437e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004382:	4b40      	ldr	r3, [pc, #256]	; (8004484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800438a:	ee07 3a90 	vmov	s15, r3
 800438e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004392:	ed97 6a02 	vldr	s12, [r7, #8]
 8004396:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004494 <HAL_RCC_GetSysClockFreq+0x2e4>
 800439a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800439e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043b2:	e043      	b.n	800443c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	ee07 3a90 	vmov	s15, r3
 80043ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043be:	eddf 6a38 	vldr	s13, [pc, #224]	; 80044a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80043c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043c6:	4b2f      	ldr	r3, [pc, #188]	; (8004484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ce:	ee07 3a90 	vmov	s15, r3
 80043d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80043da:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004494 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043f6:	e021      	b.n	800443c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	ee07 3a90 	vmov	s15, r3
 80043fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004402:	eddf 6a26 	vldr	s13, [pc, #152]	; 800449c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800440a:	4b1e      	ldr	r3, [pc, #120]	; (8004484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004412:	ee07 3a90 	vmov	s15, r3
 8004416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800441a:	ed97 6a02 	vldr	s12, [r7, #8]
 800441e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004494 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800442a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800442e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004436:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800443a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800443c:	4b11      	ldr	r3, [pc, #68]	; (8004484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800443e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004440:	0a5b      	lsrs	r3, r3, #9
 8004442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004446:	3301      	adds	r3, #1
 8004448:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	ee07 3a90 	vmov	s15, r3
 8004450:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004454:	edd7 6a07 	vldr	s13, [r7, #28]
 8004458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800445c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004460:	ee17 3a90 	vmov	r3, s15
 8004464:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004466:	e005      	b.n	8004474 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004468:	2300      	movs	r3, #0
 800446a:	61bb      	str	r3, [r7, #24]
    break;
 800446c:	e002      	b.n	8004474 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800446e:	4b07      	ldr	r3, [pc, #28]	; (800448c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004470:	61bb      	str	r3, [r7, #24]
    break;
 8004472:	bf00      	nop
  }

  return sysclockfreq;
 8004474:	69bb      	ldr	r3, [r7, #24]
}
 8004476:	4618      	mov	r0, r3
 8004478:	3724      	adds	r7, #36	; 0x24
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	58024400 	.word	0x58024400
 8004488:	03d09000 	.word	0x03d09000
 800448c:	003d0900 	.word	0x003d0900
 8004490:	007a1200 	.word	0x007a1200
 8004494:	46000000 	.word	0x46000000
 8004498:	4c742400 	.word	0x4c742400
 800449c:	4a742400 	.word	0x4a742400
 80044a0:	4af42400 	.word	0x4af42400

080044a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80044aa:	f7ff fe81 	bl	80041b0 <HAL_RCC_GetSysClockFreq>
 80044ae:	4602      	mov	r2, r0
 80044b0:	4b10      	ldr	r3, [pc, #64]	; (80044f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	0a1b      	lsrs	r3, r3, #8
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	490f      	ldr	r1, [pc, #60]	; (80044f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80044bc:	5ccb      	ldrb	r3, [r1, r3]
 80044be:	f003 031f 	and.w	r3, r3, #31
 80044c2:	fa22 f303 	lsr.w	r3, r2, r3
 80044c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044c8:	4b0a      	ldr	r3, [pc, #40]	; (80044f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	f003 030f 	and.w	r3, r3, #15
 80044d0:	4a09      	ldr	r2, [pc, #36]	; (80044f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80044d2:	5cd3      	ldrb	r3, [r2, r3]
 80044d4:	f003 031f 	and.w	r3, r3, #31
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	fa22 f303 	lsr.w	r3, r2, r3
 80044de:	4a07      	ldr	r2, [pc, #28]	; (80044fc <HAL_RCC_GetHCLKFreq+0x58>)
 80044e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80044e2:	4a07      	ldr	r2, [pc, #28]	; (8004500 <HAL_RCC_GetHCLKFreq+0x5c>)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80044e8:	4b04      	ldr	r3, [pc, #16]	; (80044fc <HAL_RCC_GetHCLKFreq+0x58>)
 80044ea:	681b      	ldr	r3, [r3, #0]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	58024400 	.word	0x58024400
 80044f8:	080153b8 	.word	0x080153b8
 80044fc:	24000004 	.word	0x24000004
 8004500:	24000000 	.word	0x24000000

08004504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004508:	f7ff ffcc 	bl	80044a4 <HAL_RCC_GetHCLKFreq>
 800450c:	4602      	mov	r2, r0
 800450e:	4b06      	ldr	r3, [pc, #24]	; (8004528 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	091b      	lsrs	r3, r3, #4
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	4904      	ldr	r1, [pc, #16]	; (800452c <HAL_RCC_GetPCLK1Freq+0x28>)
 800451a:	5ccb      	ldrb	r3, [r1, r3]
 800451c:	f003 031f 	and.w	r3, r3, #31
 8004520:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004524:	4618      	mov	r0, r3
 8004526:	bd80      	pop	{r7, pc}
 8004528:	58024400 	.word	0x58024400
 800452c:	080153b8 	.word	0x080153b8

08004530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004534:	f7ff ffb6 	bl	80044a4 <HAL_RCC_GetHCLKFreq>
 8004538:	4602      	mov	r2, r0
 800453a:	4b06      	ldr	r3, [pc, #24]	; (8004554 <HAL_RCC_GetPCLK2Freq+0x24>)
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	0a1b      	lsrs	r3, r3, #8
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	4904      	ldr	r1, [pc, #16]	; (8004558 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004546:	5ccb      	ldrb	r3, [r1, r3]
 8004548:	f003 031f 	and.w	r3, r3, #31
 800454c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004550:	4618      	mov	r0, r3
 8004552:	bd80      	pop	{r7, pc}
 8004554:	58024400 	.word	0x58024400
 8004558:	080153b8 	.word	0x080153b8

0800455c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004564:	2300      	movs	r3, #0
 8004566:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004568:	2300      	movs	r3, #0
 800456a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d03f      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800457c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004580:	d02a      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004582:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004586:	d824      	bhi.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004588:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800458c:	d018      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800458e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004592:	d81e      	bhi.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004598:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800459c:	d007      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 800459e:	e018      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045a0:	4bab      	ldr	r3, [pc, #684]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	4aaa      	ldr	r2, [pc, #680]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80045ac:	e015      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	3304      	adds	r3, #4
 80045b2:	2102      	movs	r1, #2
 80045b4:	4618      	mov	r0, r3
 80045b6:	f001 f9cf 	bl	8005958 <RCCEx_PLL2_Config>
 80045ba:	4603      	mov	r3, r0
 80045bc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80045be:	e00c      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3324      	adds	r3, #36	; 0x24
 80045c4:	2102      	movs	r1, #2
 80045c6:	4618      	mov	r0, r3
 80045c8:	f001 fa78 	bl	8005abc <RCCEx_PLL3_Config>
 80045cc:	4603      	mov	r3, r0
 80045ce:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80045d0:	e003      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	75fb      	strb	r3, [r7, #23]
      break;
 80045d6:	e000      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80045d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045da:	7dfb      	ldrb	r3, [r7, #23]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d109      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80045e0:	4b9b      	ldr	r3, [pc, #620]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045ec:	4998      	ldr	r1, [pc, #608]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	650b      	str	r3, [r1, #80]	; 0x50
 80045f2:	e001      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f4:	7dfb      	ldrb	r3, [r7, #23]
 80045f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004600:	2b00      	cmp	r3, #0
 8004602:	d03d      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004608:	2b04      	cmp	r3, #4
 800460a:	d826      	bhi.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800460c:	a201      	add	r2, pc, #4	; (adr r2, 8004614 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800460e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004612:	bf00      	nop
 8004614:	08004629 	.word	0x08004629
 8004618:	08004637 	.word	0x08004637
 800461c:	08004649 	.word	0x08004649
 8004620:	08004661 	.word	0x08004661
 8004624:	08004661 	.word	0x08004661
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004628:	4b89      	ldr	r3, [pc, #548]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	4a88      	ldr	r2, [pc, #544]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800462e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004632:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004634:	e015      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	3304      	adds	r3, #4
 800463a:	2100      	movs	r1, #0
 800463c:	4618      	mov	r0, r3
 800463e:	f001 f98b 	bl	8005958 <RCCEx_PLL2_Config>
 8004642:	4603      	mov	r3, r0
 8004644:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004646:	e00c      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3324      	adds	r3, #36	; 0x24
 800464c:	2100      	movs	r1, #0
 800464e:	4618      	mov	r0, r3
 8004650:	f001 fa34 	bl	8005abc <RCCEx_PLL3_Config>
 8004654:	4603      	mov	r3, r0
 8004656:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004658:	e003      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	75fb      	strb	r3, [r7, #23]
      break;
 800465e:	e000      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004660:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004662:	7dfb      	ldrb	r3, [r7, #23]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d109      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004668:	4b79      	ldr	r3, [pc, #484]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800466a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800466c:	f023 0207 	bic.w	r2, r3, #7
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004674:	4976      	ldr	r1, [pc, #472]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004676:	4313      	orrs	r3, r2
 8004678:	650b      	str	r3, [r1, #80]	; 0x50
 800467a:	e001      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800467c:	7dfb      	ldrb	r3, [r7, #23]
 800467e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004688:	2b00      	cmp	r3, #0
 800468a:	d042      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004694:	d02b      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800469a:	d825      	bhi.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800469c:	2bc0      	cmp	r3, #192	; 0xc0
 800469e:	d028      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80046a0:	2bc0      	cmp	r3, #192	; 0xc0
 80046a2:	d821      	bhi.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80046a4:	2b80      	cmp	r3, #128	; 0x80
 80046a6:	d016      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80046a8:	2b80      	cmp	r3, #128	; 0x80
 80046aa:	d81d      	bhi.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d002      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80046b0:	2b40      	cmp	r3, #64	; 0x40
 80046b2:	d007      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80046b4:	e018      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046b6:	4b66      	ldr	r3, [pc, #408]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ba:	4a65      	ldr	r2, [pc, #404]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80046c2:	e017      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	3304      	adds	r3, #4
 80046c8:	2100      	movs	r1, #0
 80046ca:	4618      	mov	r0, r3
 80046cc:	f001 f944 	bl	8005958 <RCCEx_PLL2_Config>
 80046d0:	4603      	mov	r3, r0
 80046d2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80046d4:	e00e      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	3324      	adds	r3, #36	; 0x24
 80046da:	2100      	movs	r1, #0
 80046dc:	4618      	mov	r0, r3
 80046de:	f001 f9ed 	bl	8005abc <RCCEx_PLL3_Config>
 80046e2:	4603      	mov	r3, r0
 80046e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80046e6:	e005      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	75fb      	strb	r3, [r7, #23]
      break;
 80046ec:	e002      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80046ee:	bf00      	nop
 80046f0:	e000      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80046f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046f4:	7dfb      	ldrb	r3, [r7, #23]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d109      	bne.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80046fa:	4b55      	ldr	r3, [pc, #340]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046fe:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004706:	4952      	ldr	r1, [pc, #328]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004708:	4313      	orrs	r3, r2
 800470a:	650b      	str	r3, [r1, #80]	; 0x50
 800470c:	e001      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470e:	7dfb      	ldrb	r3, [r7, #23]
 8004710:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800471a:	2b00      	cmp	r3, #0
 800471c:	d049      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004724:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004728:	d030      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800472a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800472e:	d82a      	bhi.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004730:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004734:	d02c      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004736:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800473a:	d824      	bhi.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800473c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004740:	d018      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004742:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004746:	d81e      	bhi.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800474c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004750:	d007      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004752:	e018      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004754:	4b3e      	ldr	r3, [pc, #248]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004758:	4a3d      	ldr	r2, [pc, #244]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800475a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800475e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004760:	e017      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3304      	adds	r3, #4
 8004766:	2100      	movs	r1, #0
 8004768:	4618      	mov	r0, r3
 800476a:	f001 f8f5 	bl	8005958 <RCCEx_PLL2_Config>
 800476e:	4603      	mov	r3, r0
 8004770:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004772:	e00e      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3324      	adds	r3, #36	; 0x24
 8004778:	2100      	movs	r1, #0
 800477a:	4618      	mov	r0, r3
 800477c:	f001 f99e 	bl	8005abc <RCCEx_PLL3_Config>
 8004780:	4603      	mov	r3, r0
 8004782:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004784:	e005      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	75fb      	strb	r3, [r7, #23]
      break;
 800478a:	e002      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800478c:	bf00      	nop
 800478e:	e000      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004790:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004792:	7dfb      	ldrb	r3, [r7, #23]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10a      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004798:	4b2d      	ldr	r3, [pc, #180]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800479a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80047a6:	492a      	ldr	r1, [pc, #168]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	658b      	str	r3, [r1, #88]	; 0x58
 80047ac:	e001      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ae:	7dfb      	ldrb	r3, [r7, #23]
 80047b0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d04c      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80047c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047c8:	d030      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80047ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047ce:	d82a      	bhi.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80047d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047d4:	d02c      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80047d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047da:	d824      	bhi.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80047dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047e0:	d018      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80047e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047e6:	d81e      	bhi.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80047ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047f0:	d007      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80047f2:	e018      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047f4:	4b16      	ldr	r3, [pc, #88]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	4a15      	ldr	r2, [pc, #84]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004800:	e017      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3304      	adds	r3, #4
 8004806:	2100      	movs	r1, #0
 8004808:	4618      	mov	r0, r3
 800480a:	f001 f8a5 	bl	8005958 <RCCEx_PLL2_Config>
 800480e:	4603      	mov	r3, r0
 8004810:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004812:	e00e      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3324      	adds	r3, #36	; 0x24
 8004818:	2100      	movs	r1, #0
 800481a:	4618      	mov	r0, r3
 800481c:	f001 f94e 	bl	8005abc <RCCEx_PLL3_Config>
 8004820:	4603      	mov	r3, r0
 8004822:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004824:	e005      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	75fb      	strb	r3, [r7, #23]
      break;
 800482a:	e002      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800482c:	bf00      	nop
 800482e:	e000      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004830:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004832:	7dfb      	ldrb	r3, [r7, #23]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10d      	bne.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004838:	4b05      	ldr	r3, [pc, #20]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800483a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004846:	4902      	ldr	r1, [pc, #8]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004848:	4313      	orrs	r3, r2
 800484a:	658b      	str	r3, [r1, #88]	; 0x58
 800484c:	e004      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800484e:	bf00      	nop
 8004850:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004854:	7dfb      	ldrb	r3, [r7, #23]
 8004856:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d032      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004868:	2b30      	cmp	r3, #48	; 0x30
 800486a:	d01c      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800486c:	2b30      	cmp	r3, #48	; 0x30
 800486e:	d817      	bhi.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004870:	2b20      	cmp	r3, #32
 8004872:	d00c      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004874:	2b20      	cmp	r3, #32
 8004876:	d813      	bhi.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004878:	2b00      	cmp	r3, #0
 800487a:	d016      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800487c:	2b10      	cmp	r3, #16
 800487e:	d10f      	bne.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004880:	4baf      	ldr	r3, [pc, #700]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004884:	4aae      	ldr	r2, [pc, #696]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800488a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800488c:	e00e      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	3304      	adds	r3, #4
 8004892:	2102      	movs	r1, #2
 8004894:	4618      	mov	r0, r3
 8004896:	f001 f85f 	bl	8005958 <RCCEx_PLL2_Config>
 800489a:	4603      	mov	r3, r0
 800489c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800489e:	e005      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	75fb      	strb	r3, [r7, #23]
      break;
 80048a4:	e002      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80048a6:	bf00      	nop
 80048a8:	e000      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80048aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048ac:	7dfb      	ldrb	r3, [r7, #23]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d109      	bne.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80048b2:	4ba3      	ldr	r3, [pc, #652]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80048b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048be:	49a0      	ldr	r1, [pc, #640]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80048c4:	e001      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c6:	7dfb      	ldrb	r3, [r7, #23]
 80048c8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d047      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048de:	d030      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80048e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048e4:	d82a      	bhi.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80048e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048ea:	d02c      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80048ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048f0:	d824      	bhi.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80048f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048f6:	d018      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80048f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048fc:	d81e      	bhi.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004906:	d007      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004908:	e018      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800490a:	4b8d      	ldr	r3, [pc, #564]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800490c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490e:	4a8c      	ldr	r2, [pc, #560]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004914:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004916:	e017      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3304      	adds	r3, #4
 800491c:	2100      	movs	r1, #0
 800491e:	4618      	mov	r0, r3
 8004920:	f001 f81a 	bl	8005958 <RCCEx_PLL2_Config>
 8004924:	4603      	mov	r3, r0
 8004926:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004928:	e00e      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	3324      	adds	r3, #36	; 0x24
 800492e:	2100      	movs	r1, #0
 8004930:	4618      	mov	r0, r3
 8004932:	f001 f8c3 	bl	8005abc <RCCEx_PLL3_Config>
 8004936:	4603      	mov	r3, r0
 8004938:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800493a:	e005      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	75fb      	strb	r3, [r7, #23]
      break;
 8004940:	e002      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004942:	bf00      	nop
 8004944:	e000      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004946:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004948:	7dfb      	ldrb	r3, [r7, #23]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d109      	bne.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800494e:	4b7c      	ldr	r3, [pc, #496]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004952:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800495a:	4979      	ldr	r1, [pc, #484]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800495c:	4313      	orrs	r3, r2
 800495e:	650b      	str	r3, [r1, #80]	; 0x50
 8004960:	e001      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004962:	7dfb      	ldrb	r3, [r7, #23]
 8004964:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d049      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004976:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800497a:	d02e      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800497c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004980:	d828      	bhi.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004982:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004986:	d02a      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004988:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800498c:	d822      	bhi.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800498e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004992:	d026      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004994:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004998:	d81c      	bhi.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800499a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800499e:	d010      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80049a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049a4:	d816      	bhi.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d01d      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80049aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ae:	d111      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	3304      	adds	r3, #4
 80049b4:	2101      	movs	r1, #1
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 ffce 	bl	8005958 <RCCEx_PLL2_Config>
 80049bc:	4603      	mov	r3, r0
 80049be:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80049c0:	e012      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	3324      	adds	r3, #36	; 0x24
 80049c6:	2101      	movs	r1, #1
 80049c8:	4618      	mov	r0, r3
 80049ca:	f001 f877 	bl	8005abc <RCCEx_PLL3_Config>
 80049ce:	4603      	mov	r3, r0
 80049d0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80049d2:	e009      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	75fb      	strb	r3, [r7, #23]
      break;
 80049d8:	e006      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80049da:	bf00      	nop
 80049dc:	e004      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80049de:	bf00      	nop
 80049e0:	e002      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80049e2:	bf00      	nop
 80049e4:	e000      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80049e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049e8:	7dfb      	ldrb	r3, [r7, #23]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d109      	bne.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80049ee:	4b54      	ldr	r3, [pc, #336]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80049f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049fa:	4951      	ldr	r1, [pc, #324]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	650b      	str	r3, [r1, #80]	; 0x50
 8004a00:	e001      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a02:	7dfb      	ldrb	r3, [r7, #23]
 8004a04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d04b      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a1c:	d02e      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004a1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a22:	d828      	bhi.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a28:	d02a      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a2e:	d822      	bhi.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004a30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a34:	d026      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004a36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a3a:	d81c      	bhi.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004a3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a40:	d010      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004a42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a46:	d816      	bhi.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d01d      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004a4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a50:	d111      	bne.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	3304      	adds	r3, #4
 8004a56:	2101      	movs	r1, #1
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 ff7d 	bl	8005958 <RCCEx_PLL2_Config>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004a62:	e012      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3324      	adds	r3, #36	; 0x24
 8004a68:	2101      	movs	r1, #1
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f001 f826 	bl	8005abc <RCCEx_PLL3_Config>
 8004a70:	4603      	mov	r3, r0
 8004a72:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004a74:	e009      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	75fb      	strb	r3, [r7, #23]
      break;
 8004a7a:	e006      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004a7c:	bf00      	nop
 8004a7e:	e004      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004a80:	bf00      	nop
 8004a82:	e002      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004a84:	bf00      	nop
 8004a86:	e000      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004a88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a8a:	7dfb      	ldrb	r3, [r7, #23]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10a      	bne.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004a90:	4b2b      	ldr	r3, [pc, #172]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a94:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a9e:	4928      	ldr	r1, [pc, #160]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	658b      	str	r3, [r1, #88]	; 0x58
 8004aa4:	e001      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa6:	7dfb      	ldrb	r3, [r7, #23]
 8004aa8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d02f      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004abe:	d00e      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004ac0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ac4:	d814      	bhi.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d015      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004aca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ace:	d10f      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ad0:	4b1b      	ldr	r3, [pc, #108]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad4:	4a1a      	ldr	r2, [pc, #104]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ada:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004adc:	e00c      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 ff37 	bl	8005958 <RCCEx_PLL2_Config>
 8004aea:	4603      	mov	r3, r0
 8004aec:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004aee:	e003      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	75fb      	strb	r3, [r7, #23]
      break;
 8004af4:	e000      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004af6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004af8:	7dfb      	ldrb	r3, [r7, #23]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d109      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004afe:	4b10      	ldr	r3, [pc, #64]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b0a:	490d      	ldr	r1, [pc, #52]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	650b      	str	r3, [r1, #80]	; 0x50
 8004b10:	e001      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b12:	7dfb      	ldrb	r3, [r7, #23]
 8004b14:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d033      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d81c      	bhi.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004b2a:	a201      	add	r2, pc, #4	; (adr r2, 8004b30 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8004b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b30:	08004b6b 	.word	0x08004b6b
 8004b34:	08004b45 	.word	0x08004b45
 8004b38:	08004b53 	.word	0x08004b53
 8004b3c:	08004b6b 	.word	0x08004b6b
 8004b40:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b44:	4bb8      	ldr	r3, [pc, #736]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b48:	4ab7      	ldr	r2, [pc, #732]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004b50:	e00c      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	3304      	adds	r3, #4
 8004b56:	2102      	movs	r1, #2
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 fefd 	bl	8005958 <RCCEx_PLL2_Config>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004b62:	e003      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	75fb      	strb	r3, [r7, #23]
      break;
 8004b68:	e000      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004b6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b6c:	7dfb      	ldrb	r3, [r7, #23]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d109      	bne.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004b72:	4bad      	ldr	r3, [pc, #692]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b76:	f023 0203 	bic.w	r2, r3, #3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7e:	49aa      	ldr	r1, [pc, #680]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004b84:	e001      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b86:	7dfb      	ldrb	r3, [r7, #23]
 8004b88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f000 8086 	beq.w	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b98:	4ba4      	ldr	r3, [pc, #656]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4aa3      	ldr	r2, [pc, #652]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ba2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ba4:	f7fd fa34 	bl	8002010 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004baa:	e009      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bac:	f7fd fa30 	bl	8002010 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b64      	cmp	r3, #100	; 0x64
 8004bb8:	d902      	bls.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	75fb      	strb	r3, [r7, #23]
        break;
 8004bbe:	e005      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bc0:	4b9a      	ldr	r3, [pc, #616]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0ef      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004bcc:	7dfb      	ldrb	r3, [r7, #23]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d166      	bne.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004bd2:	4b95      	ldr	r3, [pc, #596]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004bd4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004bdc:	4053      	eors	r3, r2
 8004bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d013      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004be6:	4b90      	ldr	r3, [pc, #576]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bee:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bf0:	4b8d      	ldr	r3, [pc, #564]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf4:	4a8c      	ldr	r2, [pc, #560]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bfa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bfc:	4b8a      	ldr	r3, [pc, #552]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c00:	4a89      	ldr	r2, [pc, #548]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c06:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004c08:	4a87      	ldr	r2, [pc, #540]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c18:	d115      	bne.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c1a:	f7fd f9f9 	bl	8002010 <HAL_GetTick>
 8004c1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c20:	e00b      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c22:	f7fd f9f5 	bl	8002010 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d902      	bls.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	75fb      	strb	r3, [r7, #23]
            break;
 8004c38:	e005      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c3a:	4b7b      	ldr	r3, [pc, #492]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0ed      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004c46:	7dfb      	ldrb	r3, [r7, #23]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d126      	bne.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c5a:	d10d      	bne.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004c5c:	4b72      	ldr	r3, [pc, #456]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c6a:	0919      	lsrs	r1, r3, #4
 8004c6c:	4b70      	ldr	r3, [pc, #448]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8004c6e:	400b      	ands	r3, r1
 8004c70:	496d      	ldr	r1, [pc, #436]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	610b      	str	r3, [r1, #16]
 8004c76:	e005      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004c78:	4b6b      	ldr	r3, [pc, #428]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	4a6a      	ldr	r2, [pc, #424]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c7e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004c82:	6113      	str	r3, [r2, #16]
 8004c84:	4b68      	ldr	r3, [pc, #416]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c92:	4965      	ldr	r1, [pc, #404]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	670b      	str	r3, [r1, #112]	; 0x70
 8004c98:	e004      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c9a:	7dfb      	ldrb	r3, [r7, #23]
 8004c9c:	75bb      	strb	r3, [r7, #22]
 8004c9e:	e001      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca0:	7dfb      	ldrb	r3, [r7, #23]
 8004ca2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d07e      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cb4:	2b28      	cmp	r3, #40	; 0x28
 8004cb6:	d867      	bhi.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004cb8:	a201      	add	r2, pc, #4	; (adr r2, 8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbe:	bf00      	nop
 8004cc0:	08004d8f 	.word	0x08004d8f
 8004cc4:	08004d89 	.word	0x08004d89
 8004cc8:	08004d89 	.word	0x08004d89
 8004ccc:	08004d89 	.word	0x08004d89
 8004cd0:	08004d89 	.word	0x08004d89
 8004cd4:	08004d89 	.word	0x08004d89
 8004cd8:	08004d89 	.word	0x08004d89
 8004cdc:	08004d89 	.word	0x08004d89
 8004ce0:	08004d65 	.word	0x08004d65
 8004ce4:	08004d89 	.word	0x08004d89
 8004ce8:	08004d89 	.word	0x08004d89
 8004cec:	08004d89 	.word	0x08004d89
 8004cf0:	08004d89 	.word	0x08004d89
 8004cf4:	08004d89 	.word	0x08004d89
 8004cf8:	08004d89 	.word	0x08004d89
 8004cfc:	08004d89 	.word	0x08004d89
 8004d00:	08004d77 	.word	0x08004d77
 8004d04:	08004d89 	.word	0x08004d89
 8004d08:	08004d89 	.word	0x08004d89
 8004d0c:	08004d89 	.word	0x08004d89
 8004d10:	08004d89 	.word	0x08004d89
 8004d14:	08004d89 	.word	0x08004d89
 8004d18:	08004d89 	.word	0x08004d89
 8004d1c:	08004d89 	.word	0x08004d89
 8004d20:	08004d8f 	.word	0x08004d8f
 8004d24:	08004d89 	.word	0x08004d89
 8004d28:	08004d89 	.word	0x08004d89
 8004d2c:	08004d89 	.word	0x08004d89
 8004d30:	08004d89 	.word	0x08004d89
 8004d34:	08004d89 	.word	0x08004d89
 8004d38:	08004d89 	.word	0x08004d89
 8004d3c:	08004d89 	.word	0x08004d89
 8004d40:	08004d8f 	.word	0x08004d8f
 8004d44:	08004d89 	.word	0x08004d89
 8004d48:	08004d89 	.word	0x08004d89
 8004d4c:	08004d89 	.word	0x08004d89
 8004d50:	08004d89 	.word	0x08004d89
 8004d54:	08004d89 	.word	0x08004d89
 8004d58:	08004d89 	.word	0x08004d89
 8004d5c:	08004d89 	.word	0x08004d89
 8004d60:	08004d8f 	.word	0x08004d8f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	3304      	adds	r3, #4
 8004d68:	2101      	movs	r1, #1
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 fdf4 	bl	8005958 <RCCEx_PLL2_Config>
 8004d70:	4603      	mov	r3, r0
 8004d72:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004d74:	e00c      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	3324      	adds	r3, #36	; 0x24
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 fe9d 	bl	8005abc <RCCEx_PLL3_Config>
 8004d82:	4603      	mov	r3, r0
 8004d84:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004d86:	e003      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d8c:	e000      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8004d8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d90:	7dfb      	ldrb	r3, [r7, #23]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d109      	bne.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004d96:	4b24      	ldr	r3, [pc, #144]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004da2:	4921      	ldr	r1, [pc, #132]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	654b      	str	r3, [r1, #84]	; 0x54
 8004da8:	e001      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004daa:	7dfb      	ldrb	r3, [r7, #23]
 8004dac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d03e      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dbe:	2b05      	cmp	r3, #5
 8004dc0:	d820      	bhi.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8004dc2:	a201      	add	r2, pc, #4	; (adr r2, 8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8004dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc8:	08004e0b 	.word	0x08004e0b
 8004dcc:	08004de1 	.word	0x08004de1
 8004dd0:	08004df3 	.word	0x08004df3
 8004dd4:	08004e0b 	.word	0x08004e0b
 8004dd8:	08004e0b 	.word	0x08004e0b
 8004ddc:	08004e0b 	.word	0x08004e0b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3304      	adds	r3, #4
 8004de4:	2101      	movs	r1, #1
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 fdb6 	bl	8005958 <RCCEx_PLL2_Config>
 8004dec:	4603      	mov	r3, r0
 8004dee:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004df0:	e00c      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	3324      	adds	r3, #36	; 0x24
 8004df6:	2101      	movs	r1, #1
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 fe5f 	bl	8005abc <RCCEx_PLL3_Config>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004e02:	e003      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	75fb      	strb	r3, [r7, #23]
      break;
 8004e08:	e000      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8004e0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e0c:	7dfb      	ldrb	r3, [r7, #23]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d110      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004e12:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e16:	f023 0207 	bic.w	r2, r3, #7
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e1e:	4902      	ldr	r1, [pc, #8]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	654b      	str	r3, [r1, #84]	; 0x54
 8004e24:	e008      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8004e26:	bf00      	nop
 8004e28:	58024400 	.word	0x58024400
 8004e2c:	58024800 	.word	0x58024800
 8004e30:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e34:	7dfb      	ldrb	r3, [r7, #23]
 8004e36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d039      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4a:	2b05      	cmp	r3, #5
 8004e4c:	d820      	bhi.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004e4e:	a201      	add	r2, pc, #4	; (adr r2, 8004e54 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8004e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e54:	08004e97 	.word	0x08004e97
 8004e58:	08004e6d 	.word	0x08004e6d
 8004e5c:	08004e7f 	.word	0x08004e7f
 8004e60:	08004e97 	.word	0x08004e97
 8004e64:	08004e97 	.word	0x08004e97
 8004e68:	08004e97 	.word	0x08004e97
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	3304      	adds	r3, #4
 8004e70:	2101      	movs	r1, #1
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 fd70 	bl	8005958 <RCCEx_PLL2_Config>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004e7c:	e00c      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	3324      	adds	r3, #36	; 0x24
 8004e82:	2101      	movs	r1, #1
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 fe19 	bl	8005abc <RCCEx_PLL3_Config>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004e8e:	e003      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	75fb      	strb	r3, [r7, #23]
      break;
 8004e94:	e000      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8004e96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e98:	7dfb      	ldrb	r3, [r7, #23]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10a      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e9e:	4bb7      	ldr	r3, [pc, #732]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea2:	f023 0207 	bic.w	r2, r3, #7
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eac:	49b3      	ldr	r1, [pc, #716]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	658b      	str	r3, [r1, #88]	; 0x58
 8004eb2:	e001      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb4:	7dfb      	ldrb	r3, [r7, #23]
 8004eb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0320 	and.w	r3, r3, #32
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d04b      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ece:	d02e      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ed4:	d828      	bhi.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eda:	d02a      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee0:	d822      	bhi.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004ee2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ee6:	d026      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004ee8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004eec:	d81c      	bhi.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004eee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ef2:	d010      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ef8:	d816      	bhi.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d01d      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004efe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f02:	d111      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	3304      	adds	r3, #4
 8004f08:	2100      	movs	r1, #0
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 fd24 	bl	8005958 <RCCEx_PLL2_Config>
 8004f10:	4603      	mov	r3, r0
 8004f12:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004f14:	e012      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	3324      	adds	r3, #36	; 0x24
 8004f1a:	2102      	movs	r1, #2
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 fdcd 	bl	8005abc <RCCEx_PLL3_Config>
 8004f22:	4603      	mov	r3, r0
 8004f24:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004f26:	e009      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f2c:	e006      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004f2e:	bf00      	nop
 8004f30:	e004      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004f32:	bf00      	nop
 8004f34:	e002      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004f36:	bf00      	nop
 8004f38:	e000      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004f3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f3c:	7dfb      	ldrb	r3, [r7, #23]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10a      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f42:	4b8e      	ldr	r3, [pc, #568]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f46:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f50:	498a      	ldr	r1, [pc, #552]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	654b      	str	r3, [r1, #84]	; 0x54
 8004f56:	e001      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f58:	7dfb      	ldrb	r3, [r7, #23]
 8004f5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d04b      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f6e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004f72:	d02e      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8004f74:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004f78:	d828      	bhi.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f7e:	d02a      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f84:	d822      	bhi.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004f86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f8a:	d026      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004f8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f90:	d81c      	bhi.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f96:	d010      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f9c:	d816      	bhi.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d01d      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa6:	d111      	bne.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3304      	adds	r3, #4
 8004fac:	2100      	movs	r1, #0
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 fcd2 	bl	8005958 <RCCEx_PLL2_Config>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004fb8:	e012      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	3324      	adds	r3, #36	; 0x24
 8004fbe:	2102      	movs	r1, #2
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 fd7b 	bl	8005abc <RCCEx_PLL3_Config>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004fca:	e009      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	75fb      	strb	r3, [r7, #23]
      break;
 8004fd0:	e006      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004fd2:	bf00      	nop
 8004fd4:	e004      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004fd6:	bf00      	nop
 8004fd8:	e002      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004fda:	bf00      	nop
 8004fdc:	e000      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004fde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fe0:	7dfb      	ldrb	r3, [r7, #23]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10a      	bne.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004fe6:	4b65      	ldr	r3, [pc, #404]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fea:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ff4:	4961      	ldr	r1, [pc, #388]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	658b      	str	r3, [r1, #88]	; 0x58
 8004ffa:	e001      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ffc:	7dfb      	ldrb	r3, [r7, #23]
 8004ffe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005008:	2b00      	cmp	r3, #0
 800500a:	d04b      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005012:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005016:	d02e      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8005018:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800501c:	d828      	bhi.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800501e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005022:	d02a      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8005024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005028:	d822      	bhi.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800502a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800502e:	d026      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005030:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005034:	d81c      	bhi.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005036:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800503a:	d010      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800503c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005040:	d816      	bhi.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005042:	2b00      	cmp	r3, #0
 8005044:	d01d      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800504a:	d111      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	3304      	adds	r3, #4
 8005050:	2100      	movs	r1, #0
 8005052:	4618      	mov	r0, r3
 8005054:	f000 fc80 	bl	8005958 <RCCEx_PLL2_Config>
 8005058:	4603      	mov	r3, r0
 800505a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800505c:	e012      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3324      	adds	r3, #36	; 0x24
 8005062:	2102      	movs	r1, #2
 8005064:	4618      	mov	r0, r3
 8005066:	f000 fd29 	bl	8005abc <RCCEx_PLL3_Config>
 800506a:	4603      	mov	r3, r0
 800506c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800506e:	e009      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	75fb      	strb	r3, [r7, #23]
      break;
 8005074:	e006      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005076:	bf00      	nop
 8005078:	e004      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800507a:	bf00      	nop
 800507c:	e002      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800507e:	bf00      	nop
 8005080:	e000      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005082:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005084:	7dfb      	ldrb	r3, [r7, #23]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10a      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800508a:	4b3c      	ldr	r3, [pc, #240]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800508c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800508e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005098:	4938      	ldr	r1, [pc, #224]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800509a:	4313      	orrs	r3, r2
 800509c:	658b      	str	r3, [r1, #88]	; 0x58
 800509e:	e001      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a0:	7dfb      	ldrb	r3, [r7, #23]
 80050a2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0308 	and.w	r3, r3, #8
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d01a      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ba:	d10a      	bne.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3324      	adds	r3, #36	; 0x24
 80050c0:	2102      	movs	r1, #2
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fcfa 	bl	8005abc <RCCEx_PLL3_Config>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80050d2:	4b2a      	ldr	r3, [pc, #168]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80050d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050e0:	4926      	ldr	r1, [pc, #152]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0310 	and.w	r3, r3, #16
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d01a      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050fc:	d10a      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	3324      	adds	r3, #36	; 0x24
 8005102:	2102      	movs	r1, #2
 8005104:	4618      	mov	r0, r3
 8005106:	f000 fcd9 	bl	8005abc <RCCEx_PLL3_Config>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005114:	4b19      	ldr	r3, [pc, #100]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005118:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005122:	4916      	ldr	r1, [pc, #88]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005124:	4313      	orrs	r3, r2
 8005126:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d036      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800513a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800513e:	d01f      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005140:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005144:	d817      	bhi.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800514a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800514e:	d009      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005150:	e011      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3304      	adds	r3, #4
 8005156:	2100      	movs	r1, #0
 8005158:	4618      	mov	r0, r3
 800515a:	f000 fbfd 	bl	8005958 <RCCEx_PLL2_Config>
 800515e:	4603      	mov	r3, r0
 8005160:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005162:	e00e      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	3324      	adds	r3, #36	; 0x24
 8005168:	2102      	movs	r1, #2
 800516a:	4618      	mov	r0, r3
 800516c:	f000 fca6 	bl	8005abc <RCCEx_PLL3_Config>
 8005170:	4603      	mov	r3, r0
 8005172:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005174:	e005      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	75fb      	strb	r3, [r7, #23]
      break;
 800517a:	e002      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800517c:	58024400 	.word	0x58024400
      break;
 8005180:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005182:	7dfb      	ldrb	r3, [r7, #23]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10a      	bne.n	800519e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005188:	4b93      	ldr	r3, [pc, #588]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800518a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800518c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005196:	4990      	ldr	r1, [pc, #576]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005198:	4313      	orrs	r3, r2
 800519a:	658b      	str	r3, [r1, #88]	; 0x58
 800519c:	e001      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800519e:	7dfb      	ldrb	r3, [r7, #23]
 80051a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d033      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80051b8:	d01c      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80051ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80051be:	d816      	bhi.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80051c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051c4:	d003      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80051c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051ca:	d007      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80051cc:	e00f      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051ce:	4b82      	ldr	r3, [pc, #520]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80051d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d2:	4a81      	ldr	r2, [pc, #516]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80051d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80051da:	e00c      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	3324      	adds	r3, #36	; 0x24
 80051e0:	2101      	movs	r1, #1
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 fc6a 	bl	8005abc <RCCEx_PLL3_Config>
 80051e8:	4603      	mov	r3, r0
 80051ea:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80051ec:	e003      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	75fb      	strb	r3, [r7, #23]
      break;
 80051f2:	e000      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80051f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051f6:	7dfb      	ldrb	r3, [r7, #23]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10a      	bne.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051fc:	4b76      	ldr	r3, [pc, #472]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80051fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005200:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800520a:	4973      	ldr	r1, [pc, #460]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800520c:	4313      	orrs	r3, r2
 800520e:	654b      	str	r3, [r1, #84]	; 0x54
 8005210:	e001      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005212:	7dfb      	ldrb	r3, [r7, #23]
 8005214:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d029      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800522a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800522e:	d007      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005230:	e00f      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005232:	4b69      	ldr	r3, [pc, #420]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005236:	4a68      	ldr	r2, [pc, #416]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800523c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800523e:	e00b      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	3304      	adds	r3, #4
 8005244:	2102      	movs	r1, #2
 8005246:	4618      	mov	r0, r3
 8005248:	f000 fb86 	bl	8005958 <RCCEx_PLL2_Config>
 800524c:	4603      	mov	r3, r0
 800524e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005250:	e002      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	75fb      	strb	r3, [r7, #23]
      break;
 8005256:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005258:	7dfb      	ldrb	r3, [r7, #23]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d109      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800525e:	4b5e      	ldr	r3, [pc, #376]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005262:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800526a:	495b      	ldr	r1, [pc, #364]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800526c:	4313      	orrs	r3, r2
 800526e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005270:	e001      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005272:	7dfb      	ldrb	r3, [r7, #23]
 8005274:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00a      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	3324      	adds	r3, #36	; 0x24
 8005286:	2102      	movs	r1, #2
 8005288:	4618      	mov	r0, r3
 800528a:	f000 fc17 	bl	8005abc <RCCEx_PLL3_Config>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d030      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052ac:	d017      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80052ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052b2:	d811      	bhi.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80052b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052b8:	d013      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80052ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052be:	d80b      	bhi.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d010      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80052c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c8:	d106      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052ca:	4b43      	ldr	r3, [pc, #268]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80052cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ce:	4a42      	ldr	r2, [pc, #264]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80052d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80052d6:	e007      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	75fb      	strb	r3, [r7, #23]
      break;
 80052dc:	e004      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80052de:	bf00      	nop
 80052e0:	e002      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80052e2:	bf00      	nop
 80052e4:	e000      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80052e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052e8:	7dfb      	ldrb	r3, [r7, #23]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d109      	bne.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052ee:	4b3a      	ldr	r3, [pc, #232]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80052f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052fa:	4937      	ldr	r1, [pc, #220]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	654b      	str	r3, [r1, #84]	; 0x54
 8005300:	e001      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005302:	7dfb      	ldrb	r3, [r7, #23]
 8005304:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d008      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005312:	4b31      	ldr	r3, [pc, #196]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005316:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531e:	492e      	ldr	r1, [pc, #184]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005320:	4313      	orrs	r3, r2
 8005322:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d009      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005330:	4b29      	ldr	r3, [pc, #164]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800533e:	4926      	ldr	r1, [pc, #152]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005340:	4313      	orrs	r3, r2
 8005342:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d008      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005350:	4b21      	ldr	r3, [pc, #132]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005354:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800535c:	491e      	ldr	r1, [pc, #120]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800535e:	4313      	orrs	r3, r2
 8005360:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00d      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800536e:	4b1a      	ldr	r3, [pc, #104]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	4a19      	ldr	r2, [pc, #100]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005374:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005378:	6113      	str	r3, [r2, #16]
 800537a:	4b17      	ldr	r3, [pc, #92]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800537c:	691a      	ldr	r2, [r3, #16]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005384:	4914      	ldr	r1, [pc, #80]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005386:	4313      	orrs	r3, r2
 8005388:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	da08      	bge.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005392:	4b11      	ldr	r3, [pc, #68]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005396:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800539e:	490e      	ldr	r1, [pc, #56]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d009      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80053b0:	4b09      	ldr	r3, [pc, #36]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053be:	4906      	ldr	r1, [pc, #24]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80053c4:	7dbb      	ldrb	r3, [r7, #22]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80053ca:	2300      	movs	r3, #0
 80053cc:	e000      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3718      	adds	r7, #24
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	58024400 	.word	0x58024400

080053dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80053e0:	f7ff f860 	bl	80044a4 <HAL_RCC_GetHCLKFreq>
 80053e4:	4602      	mov	r2, r0
 80053e6:	4b06      	ldr	r3, [pc, #24]	; (8005400 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	091b      	lsrs	r3, r3, #4
 80053ec:	f003 0307 	and.w	r3, r3, #7
 80053f0:	4904      	ldr	r1, [pc, #16]	; (8005404 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80053f2:	5ccb      	ldrb	r3, [r1, r3]
 80053f4:	f003 031f 	and.w	r3, r3, #31
 80053f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	58024400 	.word	0x58024400
 8005404:	080153b8 	.word	0x080153b8

08005408 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005408:	b480      	push	{r7}
 800540a:	b089      	sub	sp, #36	; 0x24
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005410:	4ba1      	ldr	r3, [pc, #644]	; (8005698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005414:	f003 0303 	and.w	r3, r3, #3
 8005418:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800541a:	4b9f      	ldr	r3, [pc, #636]	; (8005698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800541c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541e:	0b1b      	lsrs	r3, r3, #12
 8005420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005424:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005426:	4b9c      	ldr	r3, [pc, #624]	; (8005698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542a:	091b      	lsrs	r3, r3, #4
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005432:	4b99      	ldr	r3, [pc, #612]	; (8005698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005436:	08db      	lsrs	r3, r3, #3
 8005438:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	fb02 f303 	mul.w	r3, r2, r3
 8005442:	ee07 3a90 	vmov	s15, r3
 8005446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800544a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 8111 	beq.w	8005678 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	2b02      	cmp	r3, #2
 800545a:	f000 8083 	beq.w	8005564 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	2b02      	cmp	r3, #2
 8005462:	f200 80a1 	bhi.w	80055a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d003      	beq.n	8005474 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d056      	beq.n	8005520 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005472:	e099      	b.n	80055a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005474:	4b88      	ldr	r3, [pc, #544]	; (8005698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0320 	and.w	r3, r3, #32
 800547c:	2b00      	cmp	r3, #0
 800547e:	d02d      	beq.n	80054dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005480:	4b85      	ldr	r3, [pc, #532]	; (8005698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	08db      	lsrs	r3, r3, #3
 8005486:	f003 0303 	and.w	r3, r3, #3
 800548a:	4a84      	ldr	r2, [pc, #528]	; (800569c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800548c:	fa22 f303 	lsr.w	r3, r2, r3
 8005490:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	ee07 3a90 	vmov	s15, r3
 8005498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	ee07 3a90 	vmov	s15, r3
 80054a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054aa:	4b7b      	ldr	r3, [pc, #492]	; (8005698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054b2:	ee07 3a90 	vmov	s15, r3
 80054b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80054be:	eddf 5a78 	vldr	s11, [pc, #480]	; 80056a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80054da:	e087      	b.n	80055ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	ee07 3a90 	vmov	s15, r3
 80054e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80056a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80054ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ee:	4b6a      	ldr	r3, [pc, #424]	; (8005698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f6:	ee07 3a90 	vmov	s15, r3
 80054fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005502:	eddf 5a67 	vldr	s11, [pc, #412]	; 80056a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800550a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800550e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800551a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800551e:	e065      	b.n	80055ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	ee07 3a90 	vmov	s15, r3
 8005526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800552a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80056a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800552e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005532:	4b59      	ldr	r3, [pc, #356]	; (8005698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800553a:	ee07 3a90 	vmov	s15, r3
 800553e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005542:	ed97 6a03 	vldr	s12, [r7, #12]
 8005546:	eddf 5a56 	vldr	s11, [pc, #344]	; 80056a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800554a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800554e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005552:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800555a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800555e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005562:	e043      	b.n	80055ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	ee07 3a90 	vmov	s15, r3
 800556a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800556e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80056ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005576:	4b48      	ldr	r3, [pc, #288]	; (8005698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800557e:	ee07 3a90 	vmov	s15, r3
 8005582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005586:	ed97 6a03 	vldr	s12, [r7, #12]
 800558a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80056a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800558e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800559a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800559e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055a6:	e021      	b.n	80055ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	ee07 3a90 	vmov	s15, r3
 80055ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80056a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80055b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ba:	4b37      	ldr	r3, [pc, #220]	; (8005698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055c2:	ee07 3a90 	vmov	s15, r3
 80055c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80055ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80056a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80055ec:	4b2a      	ldr	r3, [pc, #168]	; (8005698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f0:	0a5b      	lsrs	r3, r3, #9
 80055f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055f6:	ee07 3a90 	vmov	s15, r3
 80055fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005602:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005606:	edd7 6a07 	vldr	s13, [r7, #28]
 800560a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800560e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005612:	ee17 2a90 	vmov	r2, s15
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800561a:	4b1f      	ldr	r3, [pc, #124]	; (8005698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800561c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561e:	0c1b      	lsrs	r3, r3, #16
 8005620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005624:	ee07 3a90 	vmov	s15, r3
 8005628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800562c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005630:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005634:	edd7 6a07 	vldr	s13, [r7, #28]
 8005638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800563c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005640:	ee17 2a90 	vmov	r2, s15
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005648:	4b13      	ldr	r3, [pc, #76]	; (8005698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800564a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564c:	0e1b      	lsrs	r3, r3, #24
 800564e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005652:	ee07 3a90 	vmov	s15, r3
 8005656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800565a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800565e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005662:	edd7 6a07 	vldr	s13, [r7, #28]
 8005666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800566a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800566e:	ee17 2a90 	vmov	r2, s15
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005676:	e008      	b.n	800568a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	609a      	str	r2, [r3, #8]
}
 800568a:	bf00      	nop
 800568c:	3724      	adds	r7, #36	; 0x24
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	58024400 	.word	0x58024400
 800569c:	03d09000 	.word	0x03d09000
 80056a0:	46000000 	.word	0x46000000
 80056a4:	4c742400 	.word	0x4c742400
 80056a8:	4a742400 	.word	0x4a742400
 80056ac:	4af42400 	.word	0x4af42400

080056b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b089      	sub	sp, #36	; 0x24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056b8:	4ba1      	ldr	r3, [pc, #644]	; (8005940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056bc:	f003 0303 	and.w	r3, r3, #3
 80056c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80056c2:	4b9f      	ldr	r3, [pc, #636]	; (8005940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c6:	0d1b      	lsrs	r3, r3, #20
 80056c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80056ce:	4b9c      	ldr	r3, [pc, #624]	; (8005940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d2:	0a1b      	lsrs	r3, r3, #8
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80056da:	4b99      	ldr	r3, [pc, #612]	; (8005940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056de:	08db      	lsrs	r3, r3, #3
 80056e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	fb02 f303 	mul.w	r3, r2, r3
 80056ea:	ee07 3a90 	vmov	s15, r3
 80056ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 8111 	beq.w	8005920 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	2b02      	cmp	r3, #2
 8005702:	f000 8083 	beq.w	800580c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	2b02      	cmp	r3, #2
 800570a:	f200 80a1 	bhi.w	8005850 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d003      	beq.n	800571c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d056      	beq.n	80057c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800571a:	e099      	b.n	8005850 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800571c:	4b88      	ldr	r3, [pc, #544]	; (8005940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0320 	and.w	r3, r3, #32
 8005724:	2b00      	cmp	r3, #0
 8005726:	d02d      	beq.n	8005784 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005728:	4b85      	ldr	r3, [pc, #532]	; (8005940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	08db      	lsrs	r3, r3, #3
 800572e:	f003 0303 	and.w	r3, r3, #3
 8005732:	4a84      	ldr	r2, [pc, #528]	; (8005944 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005734:	fa22 f303 	lsr.w	r3, r2, r3
 8005738:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	ee07 3a90 	vmov	s15, r3
 8005740:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	ee07 3a90 	vmov	s15, r3
 800574a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800574e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005752:	4b7b      	ldr	r3, [pc, #492]	; (8005940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800575a:	ee07 3a90 	vmov	s15, r3
 800575e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005762:	ed97 6a03 	vldr	s12, [r7, #12]
 8005766:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005948 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800576a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800576e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800577a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800577e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005782:	e087      	b.n	8005894 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	ee07 3a90 	vmov	s15, r3
 800578a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800594c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005796:	4b6a      	ldr	r3, [pc, #424]	; (8005940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800579e:	ee07 3a90 	vmov	s15, r3
 80057a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80057aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005948 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057c6:	e065      	b.n	8005894 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	ee07 3a90 	vmov	s15, r3
 80057ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80057d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057da:	4b59      	ldr	r3, [pc, #356]	; (8005940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057e2:	ee07 3a90 	vmov	s15, r3
 80057e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80057ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005948 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005806:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800580a:	e043      	b.n	8005894 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	ee07 3a90 	vmov	s15, r3
 8005812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005816:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005954 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800581a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800581e:	4b48      	ldr	r3, [pc, #288]	; (8005940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005826:	ee07 3a90 	vmov	s15, r3
 800582a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800582e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005832:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005948 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800583a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800583e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800584a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800584e:	e021      	b.n	8005894 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	ee07 3a90 	vmov	s15, r3
 8005856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800585a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800585e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005862:	4b37      	ldr	r3, [pc, #220]	; (8005940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800586a:	ee07 3a90 	vmov	s15, r3
 800586e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005872:	ed97 6a03 	vldr	s12, [r7, #12]
 8005876:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005948 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800587a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800587e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800588a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800588e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005892:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005894:	4b2a      	ldr	r3, [pc, #168]	; (8005940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005898:	0a5b      	lsrs	r3, r3, #9
 800589a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800589e:	ee07 3a90 	vmov	s15, r3
 80058a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80058b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058ba:	ee17 2a90 	vmov	r2, s15
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80058c2:	4b1f      	ldr	r3, [pc, #124]	; (8005940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c6:	0c1b      	lsrs	r3, r3, #16
 80058c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058cc:	ee07 3a90 	vmov	s15, r3
 80058d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80058e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058e8:	ee17 2a90 	vmov	r2, s15
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80058f0:	4b13      	ldr	r3, [pc, #76]	; (8005940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f4:	0e1b      	lsrs	r3, r3, #24
 80058f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058fa:	ee07 3a90 	vmov	s15, r3
 80058fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005902:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005906:	ee37 7a87 	vadd.f32	s14, s15, s14
 800590a:	edd7 6a07 	vldr	s13, [r7, #28]
 800590e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005916:	ee17 2a90 	vmov	r2, s15
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800591e:	e008      	b.n	8005932 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	609a      	str	r2, [r3, #8]
}
 8005932:	bf00      	nop
 8005934:	3724      	adds	r7, #36	; 0x24
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	58024400 	.word	0x58024400
 8005944:	03d09000 	.word	0x03d09000
 8005948:	46000000 	.word	0x46000000
 800594c:	4c742400 	.word	0x4c742400
 8005950:	4a742400 	.word	0x4a742400
 8005954:	4af42400 	.word	0x4af42400

08005958 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005966:	4b53      	ldr	r3, [pc, #332]	; (8005ab4 <RCCEx_PLL2_Config+0x15c>)
 8005968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596a:	f003 0303 	and.w	r3, r3, #3
 800596e:	2b03      	cmp	r3, #3
 8005970:	d101      	bne.n	8005976 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e099      	b.n	8005aaa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005976:	4b4f      	ldr	r3, [pc, #316]	; (8005ab4 <RCCEx_PLL2_Config+0x15c>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a4e      	ldr	r2, [pc, #312]	; (8005ab4 <RCCEx_PLL2_Config+0x15c>)
 800597c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005980:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005982:	f7fc fb45 	bl	8002010 <HAL_GetTick>
 8005986:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005988:	e008      	b.n	800599c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800598a:	f7fc fb41 	bl	8002010 <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	2b02      	cmp	r3, #2
 8005996:	d901      	bls.n	800599c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e086      	b.n	8005aaa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800599c:	4b45      	ldr	r3, [pc, #276]	; (8005ab4 <RCCEx_PLL2_Config+0x15c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1f0      	bne.n	800598a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80059a8:	4b42      	ldr	r3, [pc, #264]	; (8005ab4 <RCCEx_PLL2_Config+0x15c>)
 80059aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	031b      	lsls	r3, r3, #12
 80059b6:	493f      	ldr	r1, [pc, #252]	; (8005ab4 <RCCEx_PLL2_Config+0x15c>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	628b      	str	r3, [r1, #40]	; 0x28
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	3b01      	subs	r3, #1
 80059c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	3b01      	subs	r3, #1
 80059cc:	025b      	lsls	r3, r3, #9
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	431a      	orrs	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	041b      	lsls	r3, r3, #16
 80059da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80059de:	431a      	orrs	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	3b01      	subs	r3, #1
 80059e6:	061b      	lsls	r3, r3, #24
 80059e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80059ec:	4931      	ldr	r1, [pc, #196]	; (8005ab4 <RCCEx_PLL2_Config+0x15c>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80059f2:	4b30      	ldr	r3, [pc, #192]	; (8005ab4 <RCCEx_PLL2_Config+0x15c>)
 80059f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	492d      	ldr	r1, [pc, #180]	; (8005ab4 <RCCEx_PLL2_Config+0x15c>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005a04:	4b2b      	ldr	r3, [pc, #172]	; (8005ab4 <RCCEx_PLL2_Config+0x15c>)
 8005a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a08:	f023 0220 	bic.w	r2, r3, #32
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	4928      	ldr	r1, [pc, #160]	; (8005ab4 <RCCEx_PLL2_Config+0x15c>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005a16:	4b27      	ldr	r3, [pc, #156]	; (8005ab4 <RCCEx_PLL2_Config+0x15c>)
 8005a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1a:	4a26      	ldr	r2, [pc, #152]	; (8005ab4 <RCCEx_PLL2_Config+0x15c>)
 8005a1c:	f023 0310 	bic.w	r3, r3, #16
 8005a20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005a22:	4b24      	ldr	r3, [pc, #144]	; (8005ab4 <RCCEx_PLL2_Config+0x15c>)
 8005a24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a26:	4b24      	ldr	r3, [pc, #144]	; (8005ab8 <RCCEx_PLL2_Config+0x160>)
 8005a28:	4013      	ands	r3, r2
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	69d2      	ldr	r2, [r2, #28]
 8005a2e:	00d2      	lsls	r2, r2, #3
 8005a30:	4920      	ldr	r1, [pc, #128]	; (8005ab4 <RCCEx_PLL2_Config+0x15c>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005a36:	4b1f      	ldr	r3, [pc, #124]	; (8005ab4 <RCCEx_PLL2_Config+0x15c>)
 8005a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3a:	4a1e      	ldr	r2, [pc, #120]	; (8005ab4 <RCCEx_PLL2_Config+0x15c>)
 8005a3c:	f043 0310 	orr.w	r3, r3, #16
 8005a40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d106      	bne.n	8005a56 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005a48:	4b1a      	ldr	r3, [pc, #104]	; (8005ab4 <RCCEx_PLL2_Config+0x15c>)
 8005a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4c:	4a19      	ldr	r2, [pc, #100]	; (8005ab4 <RCCEx_PLL2_Config+0x15c>)
 8005a4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a54:	e00f      	b.n	8005a76 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d106      	bne.n	8005a6a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005a5c:	4b15      	ldr	r3, [pc, #84]	; (8005ab4 <RCCEx_PLL2_Config+0x15c>)
 8005a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a60:	4a14      	ldr	r2, [pc, #80]	; (8005ab4 <RCCEx_PLL2_Config+0x15c>)
 8005a62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a68:	e005      	b.n	8005a76 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005a6a:	4b12      	ldr	r3, [pc, #72]	; (8005ab4 <RCCEx_PLL2_Config+0x15c>)
 8005a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6e:	4a11      	ldr	r2, [pc, #68]	; (8005ab4 <RCCEx_PLL2_Config+0x15c>)
 8005a70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005a76:	4b0f      	ldr	r3, [pc, #60]	; (8005ab4 <RCCEx_PLL2_Config+0x15c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a0e      	ldr	r2, [pc, #56]	; (8005ab4 <RCCEx_PLL2_Config+0x15c>)
 8005a7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a82:	f7fc fac5 	bl	8002010 <HAL_GetTick>
 8005a86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a88:	e008      	b.n	8005a9c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005a8a:	f7fc fac1 	bl	8002010 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d901      	bls.n	8005a9c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e006      	b.n	8005aaa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a9c:	4b05      	ldr	r3, [pc, #20]	; (8005ab4 <RCCEx_PLL2_Config+0x15c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d0f0      	beq.n	8005a8a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	58024400 	.word	0x58024400
 8005ab8:	ffff0007 	.word	0xffff0007

08005abc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005aca:	4b53      	ldr	r3, [pc, #332]	; (8005c18 <RCCEx_PLL3_Config+0x15c>)
 8005acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ace:	f003 0303 	and.w	r3, r3, #3
 8005ad2:	2b03      	cmp	r3, #3
 8005ad4:	d101      	bne.n	8005ada <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e099      	b.n	8005c0e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005ada:	4b4f      	ldr	r3, [pc, #316]	; (8005c18 <RCCEx_PLL3_Config+0x15c>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a4e      	ldr	r2, [pc, #312]	; (8005c18 <RCCEx_PLL3_Config+0x15c>)
 8005ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ae4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ae6:	f7fc fa93 	bl	8002010 <HAL_GetTick>
 8005aea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005aec:	e008      	b.n	8005b00 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005aee:	f7fc fa8f 	bl	8002010 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d901      	bls.n	8005b00 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e086      	b.n	8005c0e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b00:	4b45      	ldr	r3, [pc, #276]	; (8005c18 <RCCEx_PLL3_Config+0x15c>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1f0      	bne.n	8005aee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005b0c:	4b42      	ldr	r3, [pc, #264]	; (8005c18 <RCCEx_PLL3_Config+0x15c>)
 8005b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b10:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	051b      	lsls	r3, r3, #20
 8005b1a:	493f      	ldr	r1, [pc, #252]	; (8005c18 <RCCEx_PLL3_Config+0x15c>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	628b      	str	r3, [r1, #40]	; 0x28
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	3b01      	subs	r3, #1
 8005b26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	025b      	lsls	r3, r3, #9
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	431a      	orrs	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	041b      	lsls	r3, r3, #16
 8005b3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b42:	431a      	orrs	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	061b      	lsls	r3, r3, #24
 8005b4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b50:	4931      	ldr	r1, [pc, #196]	; (8005c18 <RCCEx_PLL3_Config+0x15c>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005b56:	4b30      	ldr	r3, [pc, #192]	; (8005c18 <RCCEx_PLL3_Config+0x15c>)
 8005b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	492d      	ldr	r1, [pc, #180]	; (8005c18 <RCCEx_PLL3_Config+0x15c>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005b68:	4b2b      	ldr	r3, [pc, #172]	; (8005c18 <RCCEx_PLL3_Config+0x15c>)
 8005b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	4928      	ldr	r1, [pc, #160]	; (8005c18 <RCCEx_PLL3_Config+0x15c>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005b7a:	4b27      	ldr	r3, [pc, #156]	; (8005c18 <RCCEx_PLL3_Config+0x15c>)
 8005b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7e:	4a26      	ldr	r2, [pc, #152]	; (8005c18 <RCCEx_PLL3_Config+0x15c>)
 8005b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005b86:	4b24      	ldr	r3, [pc, #144]	; (8005c18 <RCCEx_PLL3_Config+0x15c>)
 8005b88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b8a:	4b24      	ldr	r3, [pc, #144]	; (8005c1c <RCCEx_PLL3_Config+0x160>)
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	69d2      	ldr	r2, [r2, #28]
 8005b92:	00d2      	lsls	r2, r2, #3
 8005b94:	4920      	ldr	r1, [pc, #128]	; (8005c18 <RCCEx_PLL3_Config+0x15c>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005b9a:	4b1f      	ldr	r3, [pc, #124]	; (8005c18 <RCCEx_PLL3_Config+0x15c>)
 8005b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9e:	4a1e      	ldr	r2, [pc, #120]	; (8005c18 <RCCEx_PLL3_Config+0x15c>)
 8005ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ba4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d106      	bne.n	8005bba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005bac:	4b1a      	ldr	r3, [pc, #104]	; (8005c18 <RCCEx_PLL3_Config+0x15c>)
 8005bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb0:	4a19      	ldr	r2, [pc, #100]	; (8005c18 <RCCEx_PLL3_Config+0x15c>)
 8005bb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005bb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005bb8:	e00f      	b.n	8005bda <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d106      	bne.n	8005bce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005bc0:	4b15      	ldr	r3, [pc, #84]	; (8005c18 <RCCEx_PLL3_Config+0x15c>)
 8005bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc4:	4a14      	ldr	r2, [pc, #80]	; (8005c18 <RCCEx_PLL3_Config+0x15c>)
 8005bc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005bca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005bcc:	e005      	b.n	8005bda <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005bce:	4b12      	ldr	r3, [pc, #72]	; (8005c18 <RCCEx_PLL3_Config+0x15c>)
 8005bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd2:	4a11      	ldr	r2, [pc, #68]	; (8005c18 <RCCEx_PLL3_Config+0x15c>)
 8005bd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bd8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005bda:	4b0f      	ldr	r3, [pc, #60]	; (8005c18 <RCCEx_PLL3_Config+0x15c>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a0e      	ldr	r2, [pc, #56]	; (8005c18 <RCCEx_PLL3_Config+0x15c>)
 8005be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005be4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005be6:	f7fc fa13 	bl	8002010 <HAL_GetTick>
 8005bea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005bec:	e008      	b.n	8005c00 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005bee:	f7fc fa0f 	bl	8002010 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d901      	bls.n	8005c00 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e006      	b.n	8005c0e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c00:	4b05      	ldr	r3, [pc, #20]	; (8005c18 <RCCEx_PLL3_Config+0x15c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0f0      	beq.n	8005bee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	58024400 	.word	0x58024400
 8005c1c:	ffff0007 	.word	0xffff0007

08005c20 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e0eb      	b.n	8005e0e <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a75      	ldr	r2, [pc, #468]	; (8005e18 <HAL_SPI_Init+0x1f8>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d00f      	beq.n	8005c66 <HAL_SPI_Init+0x46>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a74      	ldr	r2, [pc, #464]	; (8005e1c <HAL_SPI_Init+0x1fc>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d00a      	beq.n	8005c66 <HAL_SPI_Init+0x46>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a72      	ldr	r2, [pc, #456]	; (8005e20 <HAL_SPI_Init+0x200>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d005      	beq.n	8005c66 <HAL_SPI_Init+0x46>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	2b0f      	cmp	r3, #15
 8005c60:	d901      	bls.n	8005c66 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e0d3      	b.n	8005e0e <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fb9c 	bl	80063a4 <SPI_GetPacketSize>
 8005c6c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a69      	ldr	r2, [pc, #420]	; (8005e18 <HAL_SPI_Init+0x1f8>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d00c      	beq.n	8005c92 <HAL_SPI_Init+0x72>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a67      	ldr	r2, [pc, #412]	; (8005e1c <HAL_SPI_Init+0x1fc>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d007      	beq.n	8005c92 <HAL_SPI_Init+0x72>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a66      	ldr	r2, [pc, #408]	; (8005e20 <HAL_SPI_Init+0x200>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d002      	beq.n	8005c92 <HAL_SPI_Init+0x72>
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2b08      	cmp	r3, #8
 8005c90:	d811      	bhi.n	8005cb6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005c96:	4a60      	ldr	r2, [pc, #384]	; (8005e18 <HAL_SPI_Init+0x1f8>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d009      	beq.n	8005cb0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a5e      	ldr	r2, [pc, #376]	; (8005e1c <HAL_SPI_Init+0x1fc>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d004      	beq.n	8005cb0 <HAL_SPI_Init+0x90>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a5d      	ldr	r2, [pc, #372]	; (8005e20 <HAL_SPI_Init+0x200>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d104      	bne.n	8005cba <HAL_SPI_Init+0x9a>
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	2b10      	cmp	r3, #16
 8005cb4:	d901      	bls.n	8005cba <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e0a9      	b.n	8005e0e <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d106      	bne.n	8005cd4 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7fb fcc8 	bl	8001664 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 0201 	bic.w	r2, r2, #1
 8005cea:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cf4:	d119      	bne.n	8005d2a <HAL_SPI_Init+0x10a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cfe:	d103      	bne.n	8005d08 <HAL_SPI_Init+0xe8>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d008      	beq.n	8005d1a <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10c      	bne.n	8005d2a <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d18:	d107      	bne.n	8005d2a <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d28:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	69da      	ldr	r2, [r3, #28]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d32:	431a      	orrs	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	431a      	orrs	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d3c:	ea42 0103 	orr.w	r1, r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68da      	ldr	r2, [r3, #12]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d54:	431a      	orrs	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	431a      	orrs	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	431a      	orrs	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	431a      	orrs	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	431a      	orrs	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	431a      	orrs	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d8a:	ea42 0103 	orr.w	r1, r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d113      	bne.n	8005dca <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005db4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005dc8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0201 	bic.w	r2, r2, #1
 8005dd8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00a      	beq.n	8005dfc <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	40013000 	.word	0x40013000
 8005e1c:	40003800 	.word	0x40003800
 8005e20:	40003c00 	.word	0x40003c00

08005e24 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08a      	sub	sp, #40	; 0x28
 8005e28:	af02      	add	r7, sp, #8
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	603b      	str	r3, [r7, #0]
 8005e30:	4613      	mov	r3, r2
 8005e32:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	3320      	adds	r3, #32
 8005e3a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d101      	bne.n	8005e4e <HAL_SPI_Transmit+0x2a>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	e1d7      	b.n	80061fe <HAL_SPI_Transmit+0x3da>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e56:	f7fc f8db 	bl	8002010 <HAL_GetTick>
 8005e5a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d007      	beq.n	8005e78 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005e68:	2302      	movs	r3, #2
 8005e6a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005e74:	7efb      	ldrb	r3, [r7, #27]
 8005e76:	e1c2      	b.n	80061fe <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d002      	beq.n	8005e84 <HAL_SPI_Transmit+0x60>
 8005e7e:	88fb      	ldrh	r3, [r7, #6]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d107      	bne.n	8005e94 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005e90:	7efb      	ldrb	r3, [r7, #27]
 8005e92:	e1b4      	b.n	80061fe <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2203      	movs	r2, #3
 8005e98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	88fa      	ldrh	r2, [r7, #6]
 8005eae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	88fa      	ldrh	r2, [r7, #6]
 8005eb6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005ee4:	d107      	bne.n	8005ef6 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ef4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	4b96      	ldr	r3, [pc, #600]	; (8006158 <HAL_SPI_Transmit+0x334>)
 8005efe:	4013      	ands	r3, r2
 8005f00:	88f9      	ldrh	r1, [r7, #6]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	6812      	ldr	r2, [r2, #0]
 8005f06:	430b      	orrs	r3, r1
 8005f08:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f042 0201 	orr.w	r2, r2, #1
 8005f18:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f22:	d107      	bne.n	8005f34 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	2b0f      	cmp	r3, #15
 8005f3a:	d947      	bls.n	8005fcc <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005f3c:	e03f      	b.n	8005fbe <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	f003 0302 	and.w	r3, r3, #2
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d114      	bne.n	8005f76 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6812      	ldr	r2, [r2, #0]
 8005f56:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f5c:	1d1a      	adds	r2, r3, #4
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005f74:	e023      	b.n	8005fbe <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f76:	f7fc f84b 	bl	8002010 <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d803      	bhi.n	8005f8e <HAL_SPI_Transmit+0x16a>
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f8c:	d102      	bne.n	8005f94 <HAL_SPI_Transmit+0x170>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d114      	bne.n	8005fbe <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f000 f937 	bl	8006208 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fa8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e11f      	b.n	80061fe <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1b9      	bne.n	8005f3e <HAL_SPI_Transmit+0x11a>
 8005fca:	e0f2      	b.n	80061b2 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	2b07      	cmp	r3, #7
 8005fd2:	f240 80e7 	bls.w	80061a4 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005fd6:	e05d      	b.n	8006094 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d132      	bne.n	800604c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d918      	bls.n	8006024 <HAL_SPI_Transmit+0x200>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d014      	beq.n	8006024 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6812      	ldr	r2, [r2, #0]
 8006004:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800600a:	1d1a      	adds	r2, r3, #4
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006016:	b29b      	uxth	r3, r3
 8006018:	3b02      	subs	r3, #2
 800601a:	b29a      	uxth	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006022:	e037      	b.n	8006094 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006028:	881a      	ldrh	r2, [r3, #0]
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006032:	1c9a      	adds	r2, r3, #2
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800603e:	b29b      	uxth	r3, r3
 8006040:	3b01      	subs	r3, #1
 8006042:	b29a      	uxth	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800604a:	e023      	b.n	8006094 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800604c:	f7fb ffe0 	bl	8002010 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	429a      	cmp	r2, r3
 800605a:	d803      	bhi.n	8006064 <HAL_SPI_Transmit+0x240>
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006062:	d102      	bne.n	800606a <HAL_SPI_Transmit+0x246>
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d114      	bne.n	8006094 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f000 f8cc 	bl	8006208 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800607e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e0b4      	b.n	80061fe <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800609a:	b29b      	uxth	r3, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	d19b      	bne.n	8005fd8 <HAL_SPI_Transmit+0x1b4>
 80060a0:	e087      	b.n	80061b2 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	695b      	ldr	r3, [r3, #20]
 80060a8:	f003 0302 	and.w	r3, r3, #2
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d155      	bne.n	800615c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	2b03      	cmp	r3, #3
 80060ba:	d918      	bls.n	80060ee <HAL_SPI_Transmit+0x2ca>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c0:	2b40      	cmp	r3, #64	; 0x40
 80060c2:	d914      	bls.n	80060ee <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6812      	ldr	r2, [r2, #0]
 80060ce:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d4:	1d1a      	adds	r2, r3, #4
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	3b04      	subs	r3, #4
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80060ec:	e05a      	b.n	80061a4 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d917      	bls.n	800612a <HAL_SPI_Transmit+0x306>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d013      	beq.n	800612a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006106:	881a      	ldrh	r2, [r3, #0]
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006110:	1c9a      	adds	r2, r3, #2
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800611c:	b29b      	uxth	r3, r3
 800611e:	3b02      	subs	r3, #2
 8006120:	b29a      	uxth	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006128:	e03c      	b.n	80061a4 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3320      	adds	r3, #32
 8006134:	7812      	ldrb	r2, [r2, #0]
 8006136:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800613c:	1c5a      	adds	r2, r3, #1
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006148:	b29b      	uxth	r3, r3
 800614a:	3b01      	subs	r3, #1
 800614c:	b29a      	uxth	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006154:	e026      	b.n	80061a4 <HAL_SPI_Transmit+0x380>
 8006156:	bf00      	nop
 8006158:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800615c:	f7fb ff58 	bl	8002010 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	683a      	ldr	r2, [r7, #0]
 8006168:	429a      	cmp	r2, r3
 800616a:	d803      	bhi.n	8006174 <HAL_SPI_Transmit+0x350>
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006172:	d102      	bne.n	800617a <HAL_SPI_Transmit+0x356>
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d114      	bne.n	80061a4 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 f844 	bl	8006208 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800618e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e02c      	b.n	80061fe <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f47f af78 	bne.w	80060a2 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	2200      	movs	r2, #0
 80061ba:	2108      	movs	r1, #8
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 f8c3 	bl	8006348 <SPI_WaitOnFlagUntilTimeout>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d007      	beq.n	80061d8 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061ce:	f043 0220 	orr.w	r2, r3, #32
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f000 f815 	bl	8006208 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e000      	b.n	80061fe <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80061fc:	7efb      	ldrb	r3, [r7, #27]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3720      	adds	r7, #32
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop

08006208 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	699a      	ldr	r2, [r3, #24]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f042 0208 	orr.w	r2, r2, #8
 8006226:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699a      	ldr	r2, [r3, #24]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f042 0210 	orr.w	r2, r2, #16
 8006236:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f022 0201 	bic.w	r2, r2, #1
 8006246:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6919      	ldr	r1, [r3, #16]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	4b3c      	ldr	r3, [pc, #240]	; (8006344 <SPI_CloseTransfer+0x13c>)
 8006254:	400b      	ands	r3, r1
 8006256:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689a      	ldr	r2, [r3, #8]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006266:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b04      	cmp	r3, #4
 8006272:	d014      	beq.n	800629e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f003 0320 	and.w	r3, r3, #32
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00f      	beq.n	800629e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006284:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	699a      	ldr	r2, [r3, #24]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f042 0220 	orr.w	r2, r2, #32
 800629c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	d014      	beq.n	80062d4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00f      	beq.n	80062d4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062ba:	f043 0204 	orr.w	r2, r3, #4
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	699a      	ldr	r2, [r3, #24]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062d2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00f      	beq.n	80062fe <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062e4:	f043 0201 	orr.w	r2, r3, #1
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	699a      	ldr	r2, [r3, #24]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062fc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00f      	beq.n	8006328 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800630e:	f043 0208 	orr.w	r2, r3, #8
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	699a      	ldr	r2, [r3, #24]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006326:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006338:	bf00      	nop
 800633a:	3714      	adds	r7, #20
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr
 8006344:	fffffc90 	.word	0xfffffc90

08006348 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	603b      	str	r3, [r7, #0]
 8006354:	4613      	mov	r3, r2
 8006356:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006358:	e010      	b.n	800637c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800635a:	f7fb fe59 	bl	8002010 <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	429a      	cmp	r2, r3
 8006368:	d803      	bhi.n	8006372 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006370:	d102      	bne.n	8006378 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d101      	bne.n	800637c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e00f      	b.n	800639c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	695a      	ldr	r2, [r3, #20]
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	4013      	ands	r3, r2
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	429a      	cmp	r2, r3
 800638a:	bf0c      	ite	eq
 800638c:	2301      	moveq	r3, #1
 800638e:	2300      	movne	r3, #0
 8006390:	b2db      	uxtb	r3, r3
 8006392:	461a      	mov	r2, r3
 8006394:	79fb      	ldrb	r3, [r7, #7]
 8006396:	429a      	cmp	r2, r3
 8006398:	d0df      	beq.n	800635a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b0:	095b      	lsrs	r3, r3, #5
 80063b2:	3301      	adds	r3, #1
 80063b4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	3301      	adds	r3, #1
 80063bc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	3307      	adds	r3, #7
 80063c2:	08db      	lsrs	r3, r3, #3
 80063c4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	fb02 f303 	mul.w	r3, r2, r3
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3714      	adds	r7, #20
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b082      	sub	sp, #8
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e049      	b.n	8006480 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d106      	bne.n	8006406 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f7fb fb89 	bl	8001b18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2202      	movs	r2, #2
 800640a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	3304      	adds	r3, #4
 8006416:	4619      	mov	r1, r3
 8006418:	4610      	mov	r0, r2
 800641a:	f000 fa4d 	bl	80068b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d109      	bne.n	80064ac <HAL_TIM_PWM_Start+0x24>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	bf14      	ite	ne
 80064a4:	2301      	movne	r3, #1
 80064a6:	2300      	moveq	r3, #0
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	e03c      	b.n	8006526 <HAL_TIM_PWM_Start+0x9e>
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	2b04      	cmp	r3, #4
 80064b0:	d109      	bne.n	80064c6 <HAL_TIM_PWM_Start+0x3e>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	bf14      	ite	ne
 80064be:	2301      	movne	r3, #1
 80064c0:	2300      	moveq	r3, #0
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	e02f      	b.n	8006526 <HAL_TIM_PWM_Start+0x9e>
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2b08      	cmp	r3, #8
 80064ca:	d109      	bne.n	80064e0 <HAL_TIM_PWM_Start+0x58>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	bf14      	ite	ne
 80064d8:	2301      	movne	r3, #1
 80064da:	2300      	moveq	r3, #0
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	e022      	b.n	8006526 <HAL_TIM_PWM_Start+0x9e>
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	2b0c      	cmp	r3, #12
 80064e4:	d109      	bne.n	80064fa <HAL_TIM_PWM_Start+0x72>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	bf14      	ite	ne
 80064f2:	2301      	movne	r3, #1
 80064f4:	2300      	moveq	r3, #0
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	e015      	b.n	8006526 <HAL_TIM_PWM_Start+0x9e>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b10      	cmp	r3, #16
 80064fe:	d109      	bne.n	8006514 <HAL_TIM_PWM_Start+0x8c>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006506:	b2db      	uxtb	r3, r3
 8006508:	2b01      	cmp	r3, #1
 800650a:	bf14      	ite	ne
 800650c:	2301      	movne	r3, #1
 800650e:	2300      	moveq	r3, #0
 8006510:	b2db      	uxtb	r3, r3
 8006512:	e008      	b.n	8006526 <HAL_TIM_PWM_Start+0x9e>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b01      	cmp	r3, #1
 800651e:	bf14      	ite	ne
 8006520:	2301      	movne	r3, #1
 8006522:	2300      	moveq	r3, #0
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e09c      	b.n	8006668 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d104      	bne.n	800653e <HAL_TIM_PWM_Start+0xb6>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2202      	movs	r2, #2
 8006538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800653c:	e023      	b.n	8006586 <HAL_TIM_PWM_Start+0xfe>
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	2b04      	cmp	r3, #4
 8006542:	d104      	bne.n	800654e <HAL_TIM_PWM_Start+0xc6>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2202      	movs	r2, #2
 8006548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800654c:	e01b      	b.n	8006586 <HAL_TIM_PWM_Start+0xfe>
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2b08      	cmp	r3, #8
 8006552:	d104      	bne.n	800655e <HAL_TIM_PWM_Start+0xd6>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2202      	movs	r2, #2
 8006558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800655c:	e013      	b.n	8006586 <HAL_TIM_PWM_Start+0xfe>
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	2b0c      	cmp	r3, #12
 8006562:	d104      	bne.n	800656e <HAL_TIM_PWM_Start+0xe6>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2202      	movs	r2, #2
 8006568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800656c:	e00b      	b.n	8006586 <HAL_TIM_PWM_Start+0xfe>
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2b10      	cmp	r3, #16
 8006572:	d104      	bne.n	800657e <HAL_TIM_PWM_Start+0xf6>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800657c:	e003      	b.n	8006586 <HAL_TIM_PWM_Start+0xfe>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2202      	movs	r2, #2
 8006582:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2201      	movs	r2, #1
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	4618      	mov	r0, r3
 8006590:	f000 fcfa 	bl	8006f88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a35      	ldr	r2, [pc, #212]	; (8006670 <HAL_TIM_PWM_Start+0x1e8>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d013      	beq.n	80065c6 <HAL_TIM_PWM_Start+0x13e>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a34      	ldr	r2, [pc, #208]	; (8006674 <HAL_TIM_PWM_Start+0x1ec>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d00e      	beq.n	80065c6 <HAL_TIM_PWM_Start+0x13e>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a32      	ldr	r2, [pc, #200]	; (8006678 <HAL_TIM_PWM_Start+0x1f0>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d009      	beq.n	80065c6 <HAL_TIM_PWM_Start+0x13e>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a31      	ldr	r2, [pc, #196]	; (800667c <HAL_TIM_PWM_Start+0x1f4>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d004      	beq.n	80065c6 <HAL_TIM_PWM_Start+0x13e>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a2f      	ldr	r2, [pc, #188]	; (8006680 <HAL_TIM_PWM_Start+0x1f8>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d101      	bne.n	80065ca <HAL_TIM_PWM_Start+0x142>
 80065c6:	2301      	movs	r3, #1
 80065c8:	e000      	b.n	80065cc <HAL_TIM_PWM_Start+0x144>
 80065ca:	2300      	movs	r3, #0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d007      	beq.n	80065e0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a22      	ldr	r2, [pc, #136]	; (8006670 <HAL_TIM_PWM_Start+0x1e8>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d01d      	beq.n	8006626 <HAL_TIM_PWM_Start+0x19e>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065f2:	d018      	beq.n	8006626 <HAL_TIM_PWM_Start+0x19e>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a22      	ldr	r2, [pc, #136]	; (8006684 <HAL_TIM_PWM_Start+0x1fc>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d013      	beq.n	8006626 <HAL_TIM_PWM_Start+0x19e>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a21      	ldr	r2, [pc, #132]	; (8006688 <HAL_TIM_PWM_Start+0x200>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d00e      	beq.n	8006626 <HAL_TIM_PWM_Start+0x19e>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a1f      	ldr	r2, [pc, #124]	; (800668c <HAL_TIM_PWM_Start+0x204>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d009      	beq.n	8006626 <HAL_TIM_PWM_Start+0x19e>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a17      	ldr	r2, [pc, #92]	; (8006674 <HAL_TIM_PWM_Start+0x1ec>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d004      	beq.n	8006626 <HAL_TIM_PWM_Start+0x19e>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a1b      	ldr	r2, [pc, #108]	; (8006690 <HAL_TIM_PWM_Start+0x208>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d115      	bne.n	8006652 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	689a      	ldr	r2, [r3, #8]
 800662c:	4b19      	ldr	r3, [pc, #100]	; (8006694 <HAL_TIM_PWM_Start+0x20c>)
 800662e:	4013      	ands	r3, r2
 8006630:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2b06      	cmp	r3, #6
 8006636:	d015      	beq.n	8006664 <HAL_TIM_PWM_Start+0x1dc>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800663e:	d011      	beq.n	8006664 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f042 0201 	orr.w	r2, r2, #1
 800664e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006650:	e008      	b.n	8006664 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f042 0201 	orr.w	r2, r2, #1
 8006660:	601a      	str	r2, [r3, #0]
 8006662:	e000      	b.n	8006666 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006664:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	40010000 	.word	0x40010000
 8006674:	40010400 	.word	0x40010400
 8006678:	40014000 	.word	0x40014000
 800667c:	40014400 	.word	0x40014400
 8006680:	40014800 	.word	0x40014800
 8006684:	40000400 	.word	0x40000400
 8006688:	40000800 	.word	0x40000800
 800668c:	40000c00 	.word	0x40000c00
 8006690:	40001800 	.word	0x40001800
 8006694:	00010007 	.word	0x00010007

08006698 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d101      	bne.n	80066b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80066ae:	2302      	movs	r3, #2
 80066b0:	e0fd      	b.n	80068ae <HAL_TIM_PWM_ConfigChannel+0x216>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b14      	cmp	r3, #20
 80066be:	f200 80f0 	bhi.w	80068a2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80066c2:	a201      	add	r2, pc, #4	; (adr r2, 80066c8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80066c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c8:	0800671d 	.word	0x0800671d
 80066cc:	080068a3 	.word	0x080068a3
 80066d0:	080068a3 	.word	0x080068a3
 80066d4:	080068a3 	.word	0x080068a3
 80066d8:	0800675d 	.word	0x0800675d
 80066dc:	080068a3 	.word	0x080068a3
 80066e0:	080068a3 	.word	0x080068a3
 80066e4:	080068a3 	.word	0x080068a3
 80066e8:	0800679f 	.word	0x0800679f
 80066ec:	080068a3 	.word	0x080068a3
 80066f0:	080068a3 	.word	0x080068a3
 80066f4:	080068a3 	.word	0x080068a3
 80066f8:	080067df 	.word	0x080067df
 80066fc:	080068a3 	.word	0x080068a3
 8006700:	080068a3 	.word	0x080068a3
 8006704:	080068a3 	.word	0x080068a3
 8006708:	08006821 	.word	0x08006821
 800670c:	080068a3 	.word	0x080068a3
 8006710:	080068a3 	.word	0x080068a3
 8006714:	080068a3 	.word	0x080068a3
 8006718:	08006861 	.word	0x08006861
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68b9      	ldr	r1, [r7, #8]
 8006722:	4618      	mov	r0, r3
 8006724:	f000 f962 	bl	80069ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	699a      	ldr	r2, [r3, #24]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f042 0208 	orr.w	r2, r2, #8
 8006736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	699a      	ldr	r2, [r3, #24]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f022 0204 	bic.w	r2, r2, #4
 8006746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6999      	ldr	r1, [r3, #24]
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	691a      	ldr	r2, [r3, #16]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	619a      	str	r2, [r3, #24]
      break;
 800675a:	e0a3      	b.n	80068a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68b9      	ldr	r1, [r7, #8]
 8006762:	4618      	mov	r0, r3
 8006764:	f000 f9d2 	bl	8006b0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	699a      	ldr	r2, [r3, #24]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006776:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	699a      	ldr	r2, [r3, #24]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6999      	ldr	r1, [r3, #24]
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	021a      	lsls	r2, r3, #8
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	430a      	orrs	r2, r1
 800679a:	619a      	str	r2, [r3, #24]
      break;
 800679c:	e082      	b.n	80068a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68b9      	ldr	r1, [r7, #8]
 80067a4:	4618      	mov	r0, r3
 80067a6:	f000 fa3b 	bl	8006c20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	69da      	ldr	r2, [r3, #28]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f042 0208 	orr.w	r2, r2, #8
 80067b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	69da      	ldr	r2, [r3, #28]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f022 0204 	bic.w	r2, r2, #4
 80067c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	69d9      	ldr	r1, [r3, #28]
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	691a      	ldr	r2, [r3, #16]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	430a      	orrs	r2, r1
 80067da:	61da      	str	r2, [r3, #28]
      break;
 80067dc:	e062      	b.n	80068a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68b9      	ldr	r1, [r7, #8]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f000 faa1 	bl	8006d2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	69da      	ldr	r2, [r3, #28]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	69da      	ldr	r2, [r3, #28]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006808:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	69d9      	ldr	r1, [r3, #28]
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	021a      	lsls	r2, r3, #8
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	430a      	orrs	r2, r1
 800681c:	61da      	str	r2, [r3, #28]
      break;
 800681e:	e041      	b.n	80068a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68b9      	ldr	r1, [r7, #8]
 8006826:	4618      	mov	r0, r3
 8006828:	f000 fae8 	bl	8006dfc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f042 0208 	orr.w	r2, r2, #8
 800683a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f022 0204 	bic.w	r2, r2, #4
 800684a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	691a      	ldr	r2, [r3, #16]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	430a      	orrs	r2, r1
 800685c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800685e:	e021      	b.n	80068a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68b9      	ldr	r1, [r7, #8]
 8006866:	4618      	mov	r0, r3
 8006868:	f000 fb2a 	bl	8006ec0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800687a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800688a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	021a      	lsls	r2, r3, #8
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	430a      	orrs	r2, r1
 800689e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068a0:	e000      	b.n	80068a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80068a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop

080068b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a40      	ldr	r2, [pc, #256]	; (80069cc <TIM_Base_SetConfig+0x114>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d013      	beq.n	80068f8 <TIM_Base_SetConfig+0x40>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d6:	d00f      	beq.n	80068f8 <TIM_Base_SetConfig+0x40>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a3d      	ldr	r2, [pc, #244]	; (80069d0 <TIM_Base_SetConfig+0x118>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d00b      	beq.n	80068f8 <TIM_Base_SetConfig+0x40>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a3c      	ldr	r2, [pc, #240]	; (80069d4 <TIM_Base_SetConfig+0x11c>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d007      	beq.n	80068f8 <TIM_Base_SetConfig+0x40>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a3b      	ldr	r2, [pc, #236]	; (80069d8 <TIM_Base_SetConfig+0x120>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d003      	beq.n	80068f8 <TIM_Base_SetConfig+0x40>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a3a      	ldr	r2, [pc, #232]	; (80069dc <TIM_Base_SetConfig+0x124>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d108      	bne.n	800690a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	4313      	orrs	r3, r2
 8006908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a2f      	ldr	r2, [pc, #188]	; (80069cc <TIM_Base_SetConfig+0x114>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d01f      	beq.n	8006952 <TIM_Base_SetConfig+0x9a>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006918:	d01b      	beq.n	8006952 <TIM_Base_SetConfig+0x9a>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a2c      	ldr	r2, [pc, #176]	; (80069d0 <TIM_Base_SetConfig+0x118>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d017      	beq.n	8006952 <TIM_Base_SetConfig+0x9a>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a2b      	ldr	r2, [pc, #172]	; (80069d4 <TIM_Base_SetConfig+0x11c>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d013      	beq.n	8006952 <TIM_Base_SetConfig+0x9a>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a2a      	ldr	r2, [pc, #168]	; (80069d8 <TIM_Base_SetConfig+0x120>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d00f      	beq.n	8006952 <TIM_Base_SetConfig+0x9a>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a29      	ldr	r2, [pc, #164]	; (80069dc <TIM_Base_SetConfig+0x124>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d00b      	beq.n	8006952 <TIM_Base_SetConfig+0x9a>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a28      	ldr	r2, [pc, #160]	; (80069e0 <TIM_Base_SetConfig+0x128>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d007      	beq.n	8006952 <TIM_Base_SetConfig+0x9a>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a27      	ldr	r2, [pc, #156]	; (80069e4 <TIM_Base_SetConfig+0x12c>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d003      	beq.n	8006952 <TIM_Base_SetConfig+0x9a>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a26      	ldr	r2, [pc, #152]	; (80069e8 <TIM_Base_SetConfig+0x130>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d108      	bne.n	8006964 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	4313      	orrs	r3, r2
 8006962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	4313      	orrs	r3, r2
 8006970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	689a      	ldr	r2, [r3, #8]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a10      	ldr	r2, [pc, #64]	; (80069cc <TIM_Base_SetConfig+0x114>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d00f      	beq.n	80069b0 <TIM_Base_SetConfig+0xf8>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a12      	ldr	r2, [pc, #72]	; (80069dc <TIM_Base_SetConfig+0x124>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d00b      	beq.n	80069b0 <TIM_Base_SetConfig+0xf8>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a11      	ldr	r2, [pc, #68]	; (80069e0 <TIM_Base_SetConfig+0x128>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d007      	beq.n	80069b0 <TIM_Base_SetConfig+0xf8>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a10      	ldr	r2, [pc, #64]	; (80069e4 <TIM_Base_SetConfig+0x12c>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d003      	beq.n	80069b0 <TIM_Base_SetConfig+0xf8>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a0f      	ldr	r2, [pc, #60]	; (80069e8 <TIM_Base_SetConfig+0x130>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d103      	bne.n	80069b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	691a      	ldr	r2, [r3, #16]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	615a      	str	r2, [r3, #20]
}
 80069be:	bf00      	nop
 80069c0:	3714      	adds	r7, #20
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	40010000 	.word	0x40010000
 80069d0:	40000400 	.word	0x40000400
 80069d4:	40000800 	.word	0x40000800
 80069d8:	40000c00 	.word	0x40000c00
 80069dc:	40010400 	.word	0x40010400
 80069e0:	40014000 	.word	0x40014000
 80069e4:	40014400 	.word	0x40014400
 80069e8:	40014800 	.word	0x40014800

080069ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b087      	sub	sp, #28
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	f023 0201 	bic.w	r2, r3, #1
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	4b37      	ldr	r3, [pc, #220]	; (8006af4 <TIM_OC1_SetConfig+0x108>)
 8006a18:	4013      	ands	r3, r2
 8006a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f023 0303 	bic.w	r3, r3, #3
 8006a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f023 0302 	bic.w	r3, r3, #2
 8006a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a2d      	ldr	r2, [pc, #180]	; (8006af8 <TIM_OC1_SetConfig+0x10c>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d00f      	beq.n	8006a68 <TIM_OC1_SetConfig+0x7c>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a2c      	ldr	r2, [pc, #176]	; (8006afc <TIM_OC1_SetConfig+0x110>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d00b      	beq.n	8006a68 <TIM_OC1_SetConfig+0x7c>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a2b      	ldr	r2, [pc, #172]	; (8006b00 <TIM_OC1_SetConfig+0x114>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d007      	beq.n	8006a68 <TIM_OC1_SetConfig+0x7c>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a2a      	ldr	r2, [pc, #168]	; (8006b04 <TIM_OC1_SetConfig+0x118>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d003      	beq.n	8006a68 <TIM_OC1_SetConfig+0x7c>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a29      	ldr	r2, [pc, #164]	; (8006b08 <TIM_OC1_SetConfig+0x11c>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d10c      	bne.n	8006a82 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f023 0308 	bic.w	r3, r3, #8
 8006a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f023 0304 	bic.w	r3, r3, #4
 8006a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a1c      	ldr	r2, [pc, #112]	; (8006af8 <TIM_OC1_SetConfig+0x10c>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d00f      	beq.n	8006aaa <TIM_OC1_SetConfig+0xbe>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a1b      	ldr	r2, [pc, #108]	; (8006afc <TIM_OC1_SetConfig+0x110>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d00b      	beq.n	8006aaa <TIM_OC1_SetConfig+0xbe>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a1a      	ldr	r2, [pc, #104]	; (8006b00 <TIM_OC1_SetConfig+0x114>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d007      	beq.n	8006aaa <TIM_OC1_SetConfig+0xbe>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a19      	ldr	r2, [pc, #100]	; (8006b04 <TIM_OC1_SetConfig+0x118>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d003      	beq.n	8006aaa <TIM_OC1_SetConfig+0xbe>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a18      	ldr	r2, [pc, #96]	; (8006b08 <TIM_OC1_SetConfig+0x11c>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d111      	bne.n	8006ace <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	699b      	ldr	r3, [r3, #24]
 8006ac8:	693a      	ldr	r2, [r7, #16]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	685a      	ldr	r2, [r3, #4]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	621a      	str	r2, [r3, #32]
}
 8006ae8:	bf00      	nop
 8006aea:	371c      	adds	r7, #28
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr
 8006af4:	fffeff8f 	.word	0xfffeff8f
 8006af8:	40010000 	.word	0x40010000
 8006afc:	40010400 	.word	0x40010400
 8006b00:	40014000 	.word	0x40014000
 8006b04:	40014400 	.word	0x40014400
 8006b08:	40014800 	.word	0x40014800

08006b0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	f023 0210 	bic.w	r2, r3, #16
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	4b34      	ldr	r3, [pc, #208]	; (8006c08 <TIM_OC2_SetConfig+0xfc>)
 8006b38:	4013      	ands	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	021b      	lsls	r3, r3, #8
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	f023 0320 	bic.w	r3, r3, #32
 8006b56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	011b      	lsls	r3, r3, #4
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a29      	ldr	r2, [pc, #164]	; (8006c0c <TIM_OC2_SetConfig+0x100>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d003      	beq.n	8006b74 <TIM_OC2_SetConfig+0x68>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a28      	ldr	r2, [pc, #160]	; (8006c10 <TIM_OC2_SetConfig+0x104>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d10d      	bne.n	8006b90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	011b      	lsls	r3, r3, #4
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a1e      	ldr	r2, [pc, #120]	; (8006c0c <TIM_OC2_SetConfig+0x100>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d00f      	beq.n	8006bb8 <TIM_OC2_SetConfig+0xac>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a1d      	ldr	r2, [pc, #116]	; (8006c10 <TIM_OC2_SetConfig+0x104>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d00b      	beq.n	8006bb8 <TIM_OC2_SetConfig+0xac>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a1c      	ldr	r2, [pc, #112]	; (8006c14 <TIM_OC2_SetConfig+0x108>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d007      	beq.n	8006bb8 <TIM_OC2_SetConfig+0xac>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a1b      	ldr	r2, [pc, #108]	; (8006c18 <TIM_OC2_SetConfig+0x10c>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d003      	beq.n	8006bb8 <TIM_OC2_SetConfig+0xac>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a1a      	ldr	r2, [pc, #104]	; (8006c1c <TIM_OC2_SetConfig+0x110>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d113      	bne.n	8006be0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685a      	ldr	r2, [r3, #4]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	621a      	str	r2, [r3, #32]
}
 8006bfa:	bf00      	nop
 8006bfc:	371c      	adds	r7, #28
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	feff8fff 	.word	0xfeff8fff
 8006c0c:	40010000 	.word	0x40010000
 8006c10:	40010400 	.word	0x40010400
 8006c14:	40014000 	.word	0x40014000
 8006c18:	40014400 	.word	0x40014400
 8006c1c:	40014800 	.word	0x40014800

08006c20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b087      	sub	sp, #28
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f023 0303 	bic.w	r3, r3, #3
 8006c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	021b      	lsls	r3, r3, #8
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a27      	ldr	r2, [pc, #156]	; (8006d18 <TIM_OC3_SetConfig+0xf8>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d003      	beq.n	8006c86 <TIM_OC3_SetConfig+0x66>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a26      	ldr	r2, [pc, #152]	; (8006d1c <TIM_OC3_SetConfig+0xfc>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d10d      	bne.n	8006ca2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	021b      	lsls	r3, r3, #8
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ca0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a1c      	ldr	r2, [pc, #112]	; (8006d18 <TIM_OC3_SetConfig+0xf8>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d00f      	beq.n	8006cca <TIM_OC3_SetConfig+0xaa>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a1b      	ldr	r2, [pc, #108]	; (8006d1c <TIM_OC3_SetConfig+0xfc>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d00b      	beq.n	8006cca <TIM_OC3_SetConfig+0xaa>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a1a      	ldr	r2, [pc, #104]	; (8006d20 <TIM_OC3_SetConfig+0x100>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d007      	beq.n	8006cca <TIM_OC3_SetConfig+0xaa>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a19      	ldr	r2, [pc, #100]	; (8006d24 <TIM_OC3_SetConfig+0x104>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d003      	beq.n	8006cca <TIM_OC3_SetConfig+0xaa>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a18      	ldr	r2, [pc, #96]	; (8006d28 <TIM_OC3_SetConfig+0x108>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d113      	bne.n	8006cf2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	011b      	lsls	r3, r3, #4
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	011b      	lsls	r3, r3, #4
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	685a      	ldr	r2, [r3, #4]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	621a      	str	r2, [r3, #32]
}
 8006d0c:	bf00      	nop
 8006d0e:	371c      	adds	r7, #28
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr
 8006d18:	40010000 	.word	0x40010000
 8006d1c:	40010400 	.word	0x40010400
 8006d20:	40014000 	.word	0x40014000
 8006d24:	40014400 	.word	0x40014400
 8006d28:	40014800 	.word	0x40014800

08006d2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b087      	sub	sp, #28
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	69db      	ldr	r3, [r3, #28]
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	021b      	lsls	r3, r3, #8
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	031b      	lsls	r3, r3, #12
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a18      	ldr	r2, [pc, #96]	; (8006de8 <TIM_OC4_SetConfig+0xbc>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d00f      	beq.n	8006dac <TIM_OC4_SetConfig+0x80>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a17      	ldr	r2, [pc, #92]	; (8006dec <TIM_OC4_SetConfig+0xc0>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d00b      	beq.n	8006dac <TIM_OC4_SetConfig+0x80>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a16      	ldr	r2, [pc, #88]	; (8006df0 <TIM_OC4_SetConfig+0xc4>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d007      	beq.n	8006dac <TIM_OC4_SetConfig+0x80>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a15      	ldr	r2, [pc, #84]	; (8006df4 <TIM_OC4_SetConfig+0xc8>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d003      	beq.n	8006dac <TIM_OC4_SetConfig+0x80>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a14      	ldr	r2, [pc, #80]	; (8006df8 <TIM_OC4_SetConfig+0xcc>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d109      	bne.n	8006dc0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006db2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	695b      	ldr	r3, [r3, #20]
 8006db8:	019b      	lsls	r3, r3, #6
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	621a      	str	r2, [r3, #32]
}
 8006dda:	bf00      	nop
 8006ddc:	371c      	adds	r7, #28
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	40010000 	.word	0x40010000
 8006dec:	40010400 	.word	0x40010400
 8006df0:	40014000 	.word	0x40014000
 8006df4:	40014400 	.word	0x40014400
 8006df8:	40014800 	.word	0x40014800

08006dfc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b087      	sub	sp, #28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006e3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	041b      	lsls	r3, r3, #16
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a17      	ldr	r2, [pc, #92]	; (8006eac <TIM_OC5_SetConfig+0xb0>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d00f      	beq.n	8006e72 <TIM_OC5_SetConfig+0x76>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a16      	ldr	r2, [pc, #88]	; (8006eb0 <TIM_OC5_SetConfig+0xb4>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d00b      	beq.n	8006e72 <TIM_OC5_SetConfig+0x76>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a15      	ldr	r2, [pc, #84]	; (8006eb4 <TIM_OC5_SetConfig+0xb8>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d007      	beq.n	8006e72 <TIM_OC5_SetConfig+0x76>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a14      	ldr	r2, [pc, #80]	; (8006eb8 <TIM_OC5_SetConfig+0xbc>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d003      	beq.n	8006e72 <TIM_OC5_SetConfig+0x76>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a13      	ldr	r2, [pc, #76]	; (8006ebc <TIM_OC5_SetConfig+0xc0>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d109      	bne.n	8006e86 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	021b      	lsls	r3, r3, #8
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	685a      	ldr	r2, [r3, #4]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	621a      	str	r2, [r3, #32]
}
 8006ea0:	bf00      	nop
 8006ea2:	371c      	adds	r7, #28
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr
 8006eac:	40010000 	.word	0x40010000
 8006eb0:	40010400 	.word	0x40010400
 8006eb4:	40014000 	.word	0x40014000
 8006eb8:	40014400 	.word	0x40014400
 8006ebc:	40014800 	.word	0x40014800

08006ec0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b087      	sub	sp, #28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	021b      	lsls	r3, r3, #8
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	051b      	lsls	r3, r3, #20
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a18      	ldr	r2, [pc, #96]	; (8006f74 <TIM_OC6_SetConfig+0xb4>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d00f      	beq.n	8006f38 <TIM_OC6_SetConfig+0x78>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a17      	ldr	r2, [pc, #92]	; (8006f78 <TIM_OC6_SetConfig+0xb8>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d00b      	beq.n	8006f38 <TIM_OC6_SetConfig+0x78>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a16      	ldr	r2, [pc, #88]	; (8006f7c <TIM_OC6_SetConfig+0xbc>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d007      	beq.n	8006f38 <TIM_OC6_SetConfig+0x78>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a15      	ldr	r2, [pc, #84]	; (8006f80 <TIM_OC6_SetConfig+0xc0>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d003      	beq.n	8006f38 <TIM_OC6_SetConfig+0x78>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a14      	ldr	r2, [pc, #80]	; (8006f84 <TIM_OC6_SetConfig+0xc4>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d109      	bne.n	8006f4c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	695b      	ldr	r3, [r3, #20]
 8006f44:	029b      	lsls	r3, r3, #10
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	685a      	ldr	r2, [r3, #4]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	621a      	str	r2, [r3, #32]
}
 8006f66:	bf00      	nop
 8006f68:	371c      	adds	r7, #28
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	40010000 	.word	0x40010000
 8006f78:	40010400 	.word	0x40010400
 8006f7c:	40014000 	.word	0x40014000
 8006f80:	40014400 	.word	0x40014400
 8006f84:	40014800 	.word	0x40014800

08006f88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b087      	sub	sp, #28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	f003 031f 	and.w	r3, r3, #31
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6a1a      	ldr	r2, [r3, #32]
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	43db      	mvns	r3, r3
 8006faa:	401a      	ands	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6a1a      	ldr	r2, [r3, #32]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f003 031f 	and.w	r3, r3, #31
 8006fba:	6879      	ldr	r1, [r7, #4]
 8006fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8006fc0:	431a      	orrs	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	621a      	str	r2, [r3, #32]
}
 8006fc6:	bf00      	nop
 8006fc8:	371c      	adds	r7, #28
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
	...

08006fd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d101      	bne.n	8006fec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fe8:	2302      	movs	r3, #2
 8006fea:	e068      	b.n	80070be <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2202      	movs	r2, #2
 8006ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a2e      	ldr	r2, [pc, #184]	; (80070cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d004      	beq.n	8007020 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a2d      	ldr	r2, [pc, #180]	; (80070d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d108      	bne.n	8007032 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007026:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	4313      	orrs	r3, r2
 8007030:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007038:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	4313      	orrs	r3, r2
 8007042:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a1e      	ldr	r2, [pc, #120]	; (80070cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d01d      	beq.n	8007092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800705e:	d018      	beq.n	8007092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a1b      	ldr	r2, [pc, #108]	; (80070d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d013      	beq.n	8007092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a1a      	ldr	r2, [pc, #104]	; (80070d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d00e      	beq.n	8007092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a18      	ldr	r2, [pc, #96]	; (80070dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d009      	beq.n	8007092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a13      	ldr	r2, [pc, #76]	; (80070d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d004      	beq.n	8007092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a14      	ldr	r2, [pc, #80]	; (80070e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d10c      	bne.n	80070ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007098:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68ba      	ldr	r2, [r7, #8]
 80070aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	40010000 	.word	0x40010000
 80070d0:	40010400 	.word	0x40010400
 80070d4:	40000400 	.word	0x40000400
 80070d8:	40000800 	.word	0x40000800
 80070dc:	40000c00 	.word	0x40000c00
 80070e0:	40001800 	.word	0x40001800

080070e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80070ee:	2300      	movs	r3, #0
 80070f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d101      	bne.n	8007100 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80070fc:	2302      	movs	r3, #2
 80070fe:	e065      	b.n	80071cc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	4313      	orrs	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	4313      	orrs	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	4313      	orrs	r3, r2
 8007130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4313      	orrs	r3, r2
 800713e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	4313      	orrs	r3, r2
 800714c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	695b      	ldr	r3, [r3, #20]
 8007158:	4313      	orrs	r3, r2
 800715a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007166:	4313      	orrs	r3, r2
 8007168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	041b      	lsls	r3, r3, #16
 8007176:	4313      	orrs	r3, r2
 8007178:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a16      	ldr	r2, [pc, #88]	; (80071d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d004      	beq.n	800718e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a14      	ldr	r2, [pc, #80]	; (80071dc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d115      	bne.n	80071ba <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007198:	051b      	lsls	r3, r3, #20
 800719a:	4313      	orrs	r3, r2
 800719c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	69db      	ldr	r3, [r3, #28]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3714      	adds	r7, #20
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr
 80071d8:	40010000 	.word	0x40010000
 80071dc:	40010400 	.word	0x40010400

080071e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d101      	bne.n	80071f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e042      	b.n	8007278 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d106      	bne.n	800720a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f7fa fd31 	bl	8001c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2224      	movs	r2, #36	; 0x24
 800720e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f022 0201 	bic.w	r2, r2, #1
 8007220:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f82c 	bl	8007280 <UART_SetConfig>
 8007228:	4603      	mov	r3, r0
 800722a:	2b01      	cmp	r3, #1
 800722c:	d101      	bne.n	8007232 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e022      	b.n	8007278 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007236:	2b00      	cmp	r3, #0
 8007238:	d002      	beq.n	8007240 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fd80 	bl	8007d40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685a      	ldr	r2, [r3, #4]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800724e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689a      	ldr	r2, [r3, #8]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800725e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f042 0201 	orr.w	r2, r2, #1
 800726e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fe07 	bl	8007e84 <UART_CheckIdleState>
 8007276:	4603      	mov	r3, r0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007280:	b5b0      	push	{r4, r5, r7, lr}
 8007282:	b08e      	sub	sp, #56	; 0x38
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007288:	2300      	movs	r3, #0
 800728a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	689a      	ldr	r2, [r3, #8]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	431a      	orrs	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	431a      	orrs	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	69db      	ldr	r3, [r3, #28]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	4bbf      	ldr	r3, [pc, #764]	; (80075ac <UART_SetConfig+0x32c>)
 80072ae:	4013      	ands	r3, r2
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	6812      	ldr	r2, [r2, #0]
 80072b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80072b6:	430b      	orrs	r3, r1
 80072b8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	68da      	ldr	r2, [r3, #12]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4ab5      	ldr	r2, [pc, #724]	; (80075b0 <UART_SetConfig+0x330>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d004      	beq.n	80072ea <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a1b      	ldr	r3, [r3, #32]
 80072e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072e6:	4313      	orrs	r3, r2
 80072e8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	689a      	ldr	r2, [r3, #8]
 80072f0:	4bb0      	ldr	r3, [pc, #704]	; (80075b4 <UART_SetConfig+0x334>)
 80072f2:	4013      	ands	r3, r2
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	6812      	ldr	r2, [r2, #0]
 80072f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80072fa:	430b      	orrs	r3, r1
 80072fc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007304:	f023 010f 	bic.w	r1, r3, #15
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	430a      	orrs	r2, r1
 8007312:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4aa7      	ldr	r2, [pc, #668]	; (80075b8 <UART_SetConfig+0x338>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d176      	bne.n	800740c <UART_SetConfig+0x18c>
 800731e:	4ba7      	ldr	r3, [pc, #668]	; (80075bc <UART_SetConfig+0x33c>)
 8007320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007322:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007326:	2b28      	cmp	r3, #40	; 0x28
 8007328:	d86c      	bhi.n	8007404 <UART_SetConfig+0x184>
 800732a:	a201      	add	r2, pc, #4	; (adr r2, 8007330 <UART_SetConfig+0xb0>)
 800732c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007330:	080073d5 	.word	0x080073d5
 8007334:	08007405 	.word	0x08007405
 8007338:	08007405 	.word	0x08007405
 800733c:	08007405 	.word	0x08007405
 8007340:	08007405 	.word	0x08007405
 8007344:	08007405 	.word	0x08007405
 8007348:	08007405 	.word	0x08007405
 800734c:	08007405 	.word	0x08007405
 8007350:	080073dd 	.word	0x080073dd
 8007354:	08007405 	.word	0x08007405
 8007358:	08007405 	.word	0x08007405
 800735c:	08007405 	.word	0x08007405
 8007360:	08007405 	.word	0x08007405
 8007364:	08007405 	.word	0x08007405
 8007368:	08007405 	.word	0x08007405
 800736c:	08007405 	.word	0x08007405
 8007370:	080073e5 	.word	0x080073e5
 8007374:	08007405 	.word	0x08007405
 8007378:	08007405 	.word	0x08007405
 800737c:	08007405 	.word	0x08007405
 8007380:	08007405 	.word	0x08007405
 8007384:	08007405 	.word	0x08007405
 8007388:	08007405 	.word	0x08007405
 800738c:	08007405 	.word	0x08007405
 8007390:	080073ed 	.word	0x080073ed
 8007394:	08007405 	.word	0x08007405
 8007398:	08007405 	.word	0x08007405
 800739c:	08007405 	.word	0x08007405
 80073a0:	08007405 	.word	0x08007405
 80073a4:	08007405 	.word	0x08007405
 80073a8:	08007405 	.word	0x08007405
 80073ac:	08007405 	.word	0x08007405
 80073b0:	080073f5 	.word	0x080073f5
 80073b4:	08007405 	.word	0x08007405
 80073b8:	08007405 	.word	0x08007405
 80073bc:	08007405 	.word	0x08007405
 80073c0:	08007405 	.word	0x08007405
 80073c4:	08007405 	.word	0x08007405
 80073c8:	08007405 	.word	0x08007405
 80073cc:	08007405 	.word	0x08007405
 80073d0:	080073fd 	.word	0x080073fd
 80073d4:	2301      	movs	r3, #1
 80073d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073da:	e222      	b.n	8007822 <UART_SetConfig+0x5a2>
 80073dc:	2304      	movs	r3, #4
 80073de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073e2:	e21e      	b.n	8007822 <UART_SetConfig+0x5a2>
 80073e4:	2308      	movs	r3, #8
 80073e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073ea:	e21a      	b.n	8007822 <UART_SetConfig+0x5a2>
 80073ec:	2310      	movs	r3, #16
 80073ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073f2:	e216      	b.n	8007822 <UART_SetConfig+0x5a2>
 80073f4:	2320      	movs	r3, #32
 80073f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073fa:	e212      	b.n	8007822 <UART_SetConfig+0x5a2>
 80073fc:	2340      	movs	r3, #64	; 0x40
 80073fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007402:	e20e      	b.n	8007822 <UART_SetConfig+0x5a2>
 8007404:	2380      	movs	r3, #128	; 0x80
 8007406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800740a:	e20a      	b.n	8007822 <UART_SetConfig+0x5a2>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a6b      	ldr	r2, [pc, #428]	; (80075c0 <UART_SetConfig+0x340>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d130      	bne.n	8007478 <UART_SetConfig+0x1f8>
 8007416:	4b69      	ldr	r3, [pc, #420]	; (80075bc <UART_SetConfig+0x33c>)
 8007418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800741a:	f003 0307 	and.w	r3, r3, #7
 800741e:	2b05      	cmp	r3, #5
 8007420:	d826      	bhi.n	8007470 <UART_SetConfig+0x1f0>
 8007422:	a201      	add	r2, pc, #4	; (adr r2, 8007428 <UART_SetConfig+0x1a8>)
 8007424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007428:	08007441 	.word	0x08007441
 800742c:	08007449 	.word	0x08007449
 8007430:	08007451 	.word	0x08007451
 8007434:	08007459 	.word	0x08007459
 8007438:	08007461 	.word	0x08007461
 800743c:	08007469 	.word	0x08007469
 8007440:	2300      	movs	r3, #0
 8007442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007446:	e1ec      	b.n	8007822 <UART_SetConfig+0x5a2>
 8007448:	2304      	movs	r3, #4
 800744a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800744e:	e1e8      	b.n	8007822 <UART_SetConfig+0x5a2>
 8007450:	2308      	movs	r3, #8
 8007452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007456:	e1e4      	b.n	8007822 <UART_SetConfig+0x5a2>
 8007458:	2310      	movs	r3, #16
 800745a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800745e:	e1e0      	b.n	8007822 <UART_SetConfig+0x5a2>
 8007460:	2320      	movs	r3, #32
 8007462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007466:	e1dc      	b.n	8007822 <UART_SetConfig+0x5a2>
 8007468:	2340      	movs	r3, #64	; 0x40
 800746a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800746e:	e1d8      	b.n	8007822 <UART_SetConfig+0x5a2>
 8007470:	2380      	movs	r3, #128	; 0x80
 8007472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007476:	e1d4      	b.n	8007822 <UART_SetConfig+0x5a2>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a51      	ldr	r2, [pc, #324]	; (80075c4 <UART_SetConfig+0x344>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d130      	bne.n	80074e4 <UART_SetConfig+0x264>
 8007482:	4b4e      	ldr	r3, [pc, #312]	; (80075bc <UART_SetConfig+0x33c>)
 8007484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007486:	f003 0307 	and.w	r3, r3, #7
 800748a:	2b05      	cmp	r3, #5
 800748c:	d826      	bhi.n	80074dc <UART_SetConfig+0x25c>
 800748e:	a201      	add	r2, pc, #4	; (adr r2, 8007494 <UART_SetConfig+0x214>)
 8007490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007494:	080074ad 	.word	0x080074ad
 8007498:	080074b5 	.word	0x080074b5
 800749c:	080074bd 	.word	0x080074bd
 80074a0:	080074c5 	.word	0x080074c5
 80074a4:	080074cd 	.word	0x080074cd
 80074a8:	080074d5 	.word	0x080074d5
 80074ac:	2300      	movs	r3, #0
 80074ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074b2:	e1b6      	b.n	8007822 <UART_SetConfig+0x5a2>
 80074b4:	2304      	movs	r3, #4
 80074b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ba:	e1b2      	b.n	8007822 <UART_SetConfig+0x5a2>
 80074bc:	2308      	movs	r3, #8
 80074be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074c2:	e1ae      	b.n	8007822 <UART_SetConfig+0x5a2>
 80074c4:	2310      	movs	r3, #16
 80074c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ca:	e1aa      	b.n	8007822 <UART_SetConfig+0x5a2>
 80074cc:	2320      	movs	r3, #32
 80074ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074d2:	e1a6      	b.n	8007822 <UART_SetConfig+0x5a2>
 80074d4:	2340      	movs	r3, #64	; 0x40
 80074d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074da:	e1a2      	b.n	8007822 <UART_SetConfig+0x5a2>
 80074dc:	2380      	movs	r3, #128	; 0x80
 80074de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074e2:	e19e      	b.n	8007822 <UART_SetConfig+0x5a2>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a37      	ldr	r2, [pc, #220]	; (80075c8 <UART_SetConfig+0x348>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d130      	bne.n	8007550 <UART_SetConfig+0x2d0>
 80074ee:	4b33      	ldr	r3, [pc, #204]	; (80075bc <UART_SetConfig+0x33c>)
 80074f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074f2:	f003 0307 	and.w	r3, r3, #7
 80074f6:	2b05      	cmp	r3, #5
 80074f8:	d826      	bhi.n	8007548 <UART_SetConfig+0x2c8>
 80074fa:	a201      	add	r2, pc, #4	; (adr r2, 8007500 <UART_SetConfig+0x280>)
 80074fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007500:	08007519 	.word	0x08007519
 8007504:	08007521 	.word	0x08007521
 8007508:	08007529 	.word	0x08007529
 800750c:	08007531 	.word	0x08007531
 8007510:	08007539 	.word	0x08007539
 8007514:	08007541 	.word	0x08007541
 8007518:	2300      	movs	r3, #0
 800751a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800751e:	e180      	b.n	8007822 <UART_SetConfig+0x5a2>
 8007520:	2304      	movs	r3, #4
 8007522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007526:	e17c      	b.n	8007822 <UART_SetConfig+0x5a2>
 8007528:	2308      	movs	r3, #8
 800752a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800752e:	e178      	b.n	8007822 <UART_SetConfig+0x5a2>
 8007530:	2310      	movs	r3, #16
 8007532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007536:	e174      	b.n	8007822 <UART_SetConfig+0x5a2>
 8007538:	2320      	movs	r3, #32
 800753a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800753e:	e170      	b.n	8007822 <UART_SetConfig+0x5a2>
 8007540:	2340      	movs	r3, #64	; 0x40
 8007542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007546:	e16c      	b.n	8007822 <UART_SetConfig+0x5a2>
 8007548:	2380      	movs	r3, #128	; 0x80
 800754a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800754e:	e168      	b.n	8007822 <UART_SetConfig+0x5a2>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a1d      	ldr	r2, [pc, #116]	; (80075cc <UART_SetConfig+0x34c>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d142      	bne.n	80075e0 <UART_SetConfig+0x360>
 800755a:	4b18      	ldr	r3, [pc, #96]	; (80075bc <UART_SetConfig+0x33c>)
 800755c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800755e:	f003 0307 	and.w	r3, r3, #7
 8007562:	2b05      	cmp	r3, #5
 8007564:	d838      	bhi.n	80075d8 <UART_SetConfig+0x358>
 8007566:	a201      	add	r2, pc, #4	; (adr r2, 800756c <UART_SetConfig+0x2ec>)
 8007568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756c:	08007585 	.word	0x08007585
 8007570:	0800758d 	.word	0x0800758d
 8007574:	08007595 	.word	0x08007595
 8007578:	0800759d 	.word	0x0800759d
 800757c:	080075a5 	.word	0x080075a5
 8007580:	080075d1 	.word	0x080075d1
 8007584:	2300      	movs	r3, #0
 8007586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800758a:	e14a      	b.n	8007822 <UART_SetConfig+0x5a2>
 800758c:	2304      	movs	r3, #4
 800758e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007592:	e146      	b.n	8007822 <UART_SetConfig+0x5a2>
 8007594:	2308      	movs	r3, #8
 8007596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800759a:	e142      	b.n	8007822 <UART_SetConfig+0x5a2>
 800759c:	2310      	movs	r3, #16
 800759e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075a2:	e13e      	b.n	8007822 <UART_SetConfig+0x5a2>
 80075a4:	2320      	movs	r3, #32
 80075a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075aa:	e13a      	b.n	8007822 <UART_SetConfig+0x5a2>
 80075ac:	cfff69f3 	.word	0xcfff69f3
 80075b0:	58000c00 	.word	0x58000c00
 80075b4:	11fff4ff 	.word	0x11fff4ff
 80075b8:	40011000 	.word	0x40011000
 80075bc:	58024400 	.word	0x58024400
 80075c0:	40004400 	.word	0x40004400
 80075c4:	40004800 	.word	0x40004800
 80075c8:	40004c00 	.word	0x40004c00
 80075cc:	40005000 	.word	0x40005000
 80075d0:	2340      	movs	r3, #64	; 0x40
 80075d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075d6:	e124      	b.n	8007822 <UART_SetConfig+0x5a2>
 80075d8:	2380      	movs	r3, #128	; 0x80
 80075da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075de:	e120      	b.n	8007822 <UART_SetConfig+0x5a2>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4acc      	ldr	r2, [pc, #816]	; (8007918 <UART_SetConfig+0x698>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d176      	bne.n	80076d8 <UART_SetConfig+0x458>
 80075ea:	4bcc      	ldr	r3, [pc, #816]	; (800791c <UART_SetConfig+0x69c>)
 80075ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075f2:	2b28      	cmp	r3, #40	; 0x28
 80075f4:	d86c      	bhi.n	80076d0 <UART_SetConfig+0x450>
 80075f6:	a201      	add	r2, pc, #4	; (adr r2, 80075fc <UART_SetConfig+0x37c>)
 80075f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fc:	080076a1 	.word	0x080076a1
 8007600:	080076d1 	.word	0x080076d1
 8007604:	080076d1 	.word	0x080076d1
 8007608:	080076d1 	.word	0x080076d1
 800760c:	080076d1 	.word	0x080076d1
 8007610:	080076d1 	.word	0x080076d1
 8007614:	080076d1 	.word	0x080076d1
 8007618:	080076d1 	.word	0x080076d1
 800761c:	080076a9 	.word	0x080076a9
 8007620:	080076d1 	.word	0x080076d1
 8007624:	080076d1 	.word	0x080076d1
 8007628:	080076d1 	.word	0x080076d1
 800762c:	080076d1 	.word	0x080076d1
 8007630:	080076d1 	.word	0x080076d1
 8007634:	080076d1 	.word	0x080076d1
 8007638:	080076d1 	.word	0x080076d1
 800763c:	080076b1 	.word	0x080076b1
 8007640:	080076d1 	.word	0x080076d1
 8007644:	080076d1 	.word	0x080076d1
 8007648:	080076d1 	.word	0x080076d1
 800764c:	080076d1 	.word	0x080076d1
 8007650:	080076d1 	.word	0x080076d1
 8007654:	080076d1 	.word	0x080076d1
 8007658:	080076d1 	.word	0x080076d1
 800765c:	080076b9 	.word	0x080076b9
 8007660:	080076d1 	.word	0x080076d1
 8007664:	080076d1 	.word	0x080076d1
 8007668:	080076d1 	.word	0x080076d1
 800766c:	080076d1 	.word	0x080076d1
 8007670:	080076d1 	.word	0x080076d1
 8007674:	080076d1 	.word	0x080076d1
 8007678:	080076d1 	.word	0x080076d1
 800767c:	080076c1 	.word	0x080076c1
 8007680:	080076d1 	.word	0x080076d1
 8007684:	080076d1 	.word	0x080076d1
 8007688:	080076d1 	.word	0x080076d1
 800768c:	080076d1 	.word	0x080076d1
 8007690:	080076d1 	.word	0x080076d1
 8007694:	080076d1 	.word	0x080076d1
 8007698:	080076d1 	.word	0x080076d1
 800769c:	080076c9 	.word	0x080076c9
 80076a0:	2301      	movs	r3, #1
 80076a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076a6:	e0bc      	b.n	8007822 <UART_SetConfig+0x5a2>
 80076a8:	2304      	movs	r3, #4
 80076aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076ae:	e0b8      	b.n	8007822 <UART_SetConfig+0x5a2>
 80076b0:	2308      	movs	r3, #8
 80076b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076b6:	e0b4      	b.n	8007822 <UART_SetConfig+0x5a2>
 80076b8:	2310      	movs	r3, #16
 80076ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076be:	e0b0      	b.n	8007822 <UART_SetConfig+0x5a2>
 80076c0:	2320      	movs	r3, #32
 80076c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076c6:	e0ac      	b.n	8007822 <UART_SetConfig+0x5a2>
 80076c8:	2340      	movs	r3, #64	; 0x40
 80076ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076ce:	e0a8      	b.n	8007822 <UART_SetConfig+0x5a2>
 80076d0:	2380      	movs	r3, #128	; 0x80
 80076d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076d6:	e0a4      	b.n	8007822 <UART_SetConfig+0x5a2>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a90      	ldr	r2, [pc, #576]	; (8007920 <UART_SetConfig+0x6a0>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d130      	bne.n	8007744 <UART_SetConfig+0x4c4>
 80076e2:	4b8e      	ldr	r3, [pc, #568]	; (800791c <UART_SetConfig+0x69c>)
 80076e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e6:	f003 0307 	and.w	r3, r3, #7
 80076ea:	2b05      	cmp	r3, #5
 80076ec:	d826      	bhi.n	800773c <UART_SetConfig+0x4bc>
 80076ee:	a201      	add	r2, pc, #4	; (adr r2, 80076f4 <UART_SetConfig+0x474>)
 80076f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f4:	0800770d 	.word	0x0800770d
 80076f8:	08007715 	.word	0x08007715
 80076fc:	0800771d 	.word	0x0800771d
 8007700:	08007725 	.word	0x08007725
 8007704:	0800772d 	.word	0x0800772d
 8007708:	08007735 	.word	0x08007735
 800770c:	2300      	movs	r3, #0
 800770e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007712:	e086      	b.n	8007822 <UART_SetConfig+0x5a2>
 8007714:	2304      	movs	r3, #4
 8007716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800771a:	e082      	b.n	8007822 <UART_SetConfig+0x5a2>
 800771c:	2308      	movs	r3, #8
 800771e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007722:	e07e      	b.n	8007822 <UART_SetConfig+0x5a2>
 8007724:	2310      	movs	r3, #16
 8007726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800772a:	e07a      	b.n	8007822 <UART_SetConfig+0x5a2>
 800772c:	2320      	movs	r3, #32
 800772e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007732:	e076      	b.n	8007822 <UART_SetConfig+0x5a2>
 8007734:	2340      	movs	r3, #64	; 0x40
 8007736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800773a:	e072      	b.n	8007822 <UART_SetConfig+0x5a2>
 800773c:	2380      	movs	r3, #128	; 0x80
 800773e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007742:	e06e      	b.n	8007822 <UART_SetConfig+0x5a2>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a76      	ldr	r2, [pc, #472]	; (8007924 <UART_SetConfig+0x6a4>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d130      	bne.n	80077b0 <UART_SetConfig+0x530>
 800774e:	4b73      	ldr	r3, [pc, #460]	; (800791c <UART_SetConfig+0x69c>)
 8007750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007752:	f003 0307 	and.w	r3, r3, #7
 8007756:	2b05      	cmp	r3, #5
 8007758:	d826      	bhi.n	80077a8 <UART_SetConfig+0x528>
 800775a:	a201      	add	r2, pc, #4	; (adr r2, 8007760 <UART_SetConfig+0x4e0>)
 800775c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007760:	08007779 	.word	0x08007779
 8007764:	08007781 	.word	0x08007781
 8007768:	08007789 	.word	0x08007789
 800776c:	08007791 	.word	0x08007791
 8007770:	08007799 	.word	0x08007799
 8007774:	080077a1 	.word	0x080077a1
 8007778:	2300      	movs	r3, #0
 800777a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800777e:	e050      	b.n	8007822 <UART_SetConfig+0x5a2>
 8007780:	2304      	movs	r3, #4
 8007782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007786:	e04c      	b.n	8007822 <UART_SetConfig+0x5a2>
 8007788:	2308      	movs	r3, #8
 800778a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800778e:	e048      	b.n	8007822 <UART_SetConfig+0x5a2>
 8007790:	2310      	movs	r3, #16
 8007792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007796:	e044      	b.n	8007822 <UART_SetConfig+0x5a2>
 8007798:	2320      	movs	r3, #32
 800779a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800779e:	e040      	b.n	8007822 <UART_SetConfig+0x5a2>
 80077a0:	2340      	movs	r3, #64	; 0x40
 80077a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077a6:	e03c      	b.n	8007822 <UART_SetConfig+0x5a2>
 80077a8:	2380      	movs	r3, #128	; 0x80
 80077aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ae:	e038      	b.n	8007822 <UART_SetConfig+0x5a2>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a5c      	ldr	r2, [pc, #368]	; (8007928 <UART_SetConfig+0x6a8>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d130      	bne.n	800781c <UART_SetConfig+0x59c>
 80077ba:	4b58      	ldr	r3, [pc, #352]	; (800791c <UART_SetConfig+0x69c>)
 80077bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077be:	f003 0307 	and.w	r3, r3, #7
 80077c2:	2b05      	cmp	r3, #5
 80077c4:	d826      	bhi.n	8007814 <UART_SetConfig+0x594>
 80077c6:	a201      	add	r2, pc, #4	; (adr r2, 80077cc <UART_SetConfig+0x54c>)
 80077c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077cc:	080077e5 	.word	0x080077e5
 80077d0:	080077ed 	.word	0x080077ed
 80077d4:	080077f5 	.word	0x080077f5
 80077d8:	080077fd 	.word	0x080077fd
 80077dc:	08007805 	.word	0x08007805
 80077e0:	0800780d 	.word	0x0800780d
 80077e4:	2302      	movs	r3, #2
 80077e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ea:	e01a      	b.n	8007822 <UART_SetConfig+0x5a2>
 80077ec:	2304      	movs	r3, #4
 80077ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077f2:	e016      	b.n	8007822 <UART_SetConfig+0x5a2>
 80077f4:	2308      	movs	r3, #8
 80077f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077fa:	e012      	b.n	8007822 <UART_SetConfig+0x5a2>
 80077fc:	2310      	movs	r3, #16
 80077fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007802:	e00e      	b.n	8007822 <UART_SetConfig+0x5a2>
 8007804:	2320      	movs	r3, #32
 8007806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800780a:	e00a      	b.n	8007822 <UART_SetConfig+0x5a2>
 800780c:	2340      	movs	r3, #64	; 0x40
 800780e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007812:	e006      	b.n	8007822 <UART_SetConfig+0x5a2>
 8007814:	2380      	movs	r3, #128	; 0x80
 8007816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800781a:	e002      	b.n	8007822 <UART_SetConfig+0x5a2>
 800781c:	2380      	movs	r3, #128	; 0x80
 800781e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a40      	ldr	r2, [pc, #256]	; (8007928 <UART_SetConfig+0x6a8>)
 8007828:	4293      	cmp	r3, r2
 800782a:	f040 80ef 	bne.w	8007a0c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800782e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007832:	2b20      	cmp	r3, #32
 8007834:	dc46      	bgt.n	80078c4 <UART_SetConfig+0x644>
 8007836:	2b02      	cmp	r3, #2
 8007838:	f2c0 8081 	blt.w	800793e <UART_SetConfig+0x6be>
 800783c:	3b02      	subs	r3, #2
 800783e:	2b1e      	cmp	r3, #30
 8007840:	d87d      	bhi.n	800793e <UART_SetConfig+0x6be>
 8007842:	a201      	add	r2, pc, #4	; (adr r2, 8007848 <UART_SetConfig+0x5c8>)
 8007844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007848:	080078cb 	.word	0x080078cb
 800784c:	0800793f 	.word	0x0800793f
 8007850:	080078d3 	.word	0x080078d3
 8007854:	0800793f 	.word	0x0800793f
 8007858:	0800793f 	.word	0x0800793f
 800785c:	0800793f 	.word	0x0800793f
 8007860:	080078e3 	.word	0x080078e3
 8007864:	0800793f 	.word	0x0800793f
 8007868:	0800793f 	.word	0x0800793f
 800786c:	0800793f 	.word	0x0800793f
 8007870:	0800793f 	.word	0x0800793f
 8007874:	0800793f 	.word	0x0800793f
 8007878:	0800793f 	.word	0x0800793f
 800787c:	0800793f 	.word	0x0800793f
 8007880:	080078f3 	.word	0x080078f3
 8007884:	0800793f 	.word	0x0800793f
 8007888:	0800793f 	.word	0x0800793f
 800788c:	0800793f 	.word	0x0800793f
 8007890:	0800793f 	.word	0x0800793f
 8007894:	0800793f 	.word	0x0800793f
 8007898:	0800793f 	.word	0x0800793f
 800789c:	0800793f 	.word	0x0800793f
 80078a0:	0800793f 	.word	0x0800793f
 80078a4:	0800793f 	.word	0x0800793f
 80078a8:	0800793f 	.word	0x0800793f
 80078ac:	0800793f 	.word	0x0800793f
 80078b0:	0800793f 	.word	0x0800793f
 80078b4:	0800793f 	.word	0x0800793f
 80078b8:	0800793f 	.word	0x0800793f
 80078bc:	0800793f 	.word	0x0800793f
 80078c0:	08007931 	.word	0x08007931
 80078c4:	2b40      	cmp	r3, #64	; 0x40
 80078c6:	d036      	beq.n	8007936 <UART_SetConfig+0x6b6>
 80078c8:	e039      	b.n	800793e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80078ca:	f7fd fd87 	bl	80053dc <HAL_RCCEx_GetD3PCLK1Freq>
 80078ce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80078d0:	e03b      	b.n	800794a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078d2:	f107 0314 	add.w	r3, r7, #20
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7fd fd96 	bl	8005408 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078e0:	e033      	b.n	800794a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078e2:	f107 0308 	add.w	r3, r7, #8
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fd fee2 	bl	80056b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078f0:	e02b      	b.n	800794a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078f2:	4b0a      	ldr	r3, [pc, #40]	; (800791c <UART_SetConfig+0x69c>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0320 	and.w	r3, r3, #32
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d009      	beq.n	8007912 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80078fe:	4b07      	ldr	r3, [pc, #28]	; (800791c <UART_SetConfig+0x69c>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	08db      	lsrs	r3, r3, #3
 8007904:	f003 0303 	and.w	r3, r3, #3
 8007908:	4a08      	ldr	r2, [pc, #32]	; (800792c <UART_SetConfig+0x6ac>)
 800790a:	fa22 f303 	lsr.w	r3, r2, r3
 800790e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007910:	e01b      	b.n	800794a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8007912:	4b06      	ldr	r3, [pc, #24]	; (800792c <UART_SetConfig+0x6ac>)
 8007914:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007916:	e018      	b.n	800794a <UART_SetConfig+0x6ca>
 8007918:	40011400 	.word	0x40011400
 800791c:	58024400 	.word	0x58024400
 8007920:	40007800 	.word	0x40007800
 8007924:	40007c00 	.word	0x40007c00
 8007928:	58000c00 	.word	0x58000c00
 800792c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007930:	4bc4      	ldr	r3, [pc, #784]	; (8007c44 <UART_SetConfig+0x9c4>)
 8007932:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007934:	e009      	b.n	800794a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800793a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800793c:	e005      	b.n	800794a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800793e:	2300      	movs	r3, #0
 8007940:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007948:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800794a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794c:	2b00      	cmp	r3, #0
 800794e:	f000 81da 	beq.w	8007d06 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007956:	4abc      	ldr	r2, [pc, #752]	; (8007c48 <UART_SetConfig+0x9c8>)
 8007958:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800795c:	461a      	mov	r2, r3
 800795e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007960:	fbb3 f3f2 	udiv	r3, r3, r2
 8007964:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685a      	ldr	r2, [r3, #4]
 800796a:	4613      	mov	r3, r2
 800796c:	005b      	lsls	r3, r3, #1
 800796e:	4413      	add	r3, r2
 8007970:	6a3a      	ldr	r2, [r7, #32]
 8007972:	429a      	cmp	r2, r3
 8007974:	d305      	bcc.n	8007982 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800797c:	6a3a      	ldr	r2, [r7, #32]
 800797e:	429a      	cmp	r2, r3
 8007980:	d903      	bls.n	800798a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007988:	e1bd      	b.n	8007d06 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800798a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798c:	4618      	mov	r0, r3
 800798e:	f04f 0100 	mov.w	r1, #0
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007996:	4aac      	ldr	r2, [pc, #688]	; (8007c48 <UART_SetConfig+0x9c8>)
 8007998:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800799c:	b29a      	uxth	r2, r3
 800799e:	f04f 0300 	mov.w	r3, #0
 80079a2:	f7f8 fec1 	bl	8000728 <__aeabi_uldivmod>
 80079a6:	4602      	mov	r2, r0
 80079a8:	460b      	mov	r3, r1
 80079aa:	4610      	mov	r0, r2
 80079ac:	4619      	mov	r1, r3
 80079ae:	f04f 0200 	mov.w	r2, #0
 80079b2:	f04f 0300 	mov.w	r3, #0
 80079b6:	020b      	lsls	r3, r1, #8
 80079b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80079bc:	0202      	lsls	r2, r0, #8
 80079be:	6879      	ldr	r1, [r7, #4]
 80079c0:	6849      	ldr	r1, [r1, #4]
 80079c2:	0849      	lsrs	r1, r1, #1
 80079c4:	4608      	mov	r0, r1
 80079c6:	f04f 0100 	mov.w	r1, #0
 80079ca:	1814      	adds	r4, r2, r0
 80079cc:	eb43 0501 	adc.w	r5, r3, r1
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	461a      	mov	r2, r3
 80079d6:	f04f 0300 	mov.w	r3, #0
 80079da:	4620      	mov	r0, r4
 80079dc:	4629      	mov	r1, r5
 80079de:	f7f8 fea3 	bl	8000728 <__aeabi_uldivmod>
 80079e2:	4602      	mov	r2, r0
 80079e4:	460b      	mov	r3, r1
 80079e6:	4613      	mov	r3, r2
 80079e8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079f0:	d308      	bcc.n	8007a04 <UART_SetConfig+0x784>
 80079f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079f8:	d204      	bcs.n	8007a04 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a00:	60da      	str	r2, [r3, #12]
 8007a02:	e180      	b.n	8007d06 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007a0a:	e17c      	b.n	8007d06 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	69db      	ldr	r3, [r3, #28]
 8007a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a14:	f040 80bf 	bne.w	8007b96 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8007a18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007a1c:	2b20      	cmp	r3, #32
 8007a1e:	dc49      	bgt.n	8007ab4 <UART_SetConfig+0x834>
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	db7c      	blt.n	8007b1e <UART_SetConfig+0x89e>
 8007a24:	2b20      	cmp	r3, #32
 8007a26:	d87a      	bhi.n	8007b1e <UART_SetConfig+0x89e>
 8007a28:	a201      	add	r2, pc, #4	; (adr r2, 8007a30 <UART_SetConfig+0x7b0>)
 8007a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a2e:	bf00      	nop
 8007a30:	08007abb 	.word	0x08007abb
 8007a34:	08007ac3 	.word	0x08007ac3
 8007a38:	08007b1f 	.word	0x08007b1f
 8007a3c:	08007b1f 	.word	0x08007b1f
 8007a40:	08007acb 	.word	0x08007acb
 8007a44:	08007b1f 	.word	0x08007b1f
 8007a48:	08007b1f 	.word	0x08007b1f
 8007a4c:	08007b1f 	.word	0x08007b1f
 8007a50:	08007adb 	.word	0x08007adb
 8007a54:	08007b1f 	.word	0x08007b1f
 8007a58:	08007b1f 	.word	0x08007b1f
 8007a5c:	08007b1f 	.word	0x08007b1f
 8007a60:	08007b1f 	.word	0x08007b1f
 8007a64:	08007b1f 	.word	0x08007b1f
 8007a68:	08007b1f 	.word	0x08007b1f
 8007a6c:	08007b1f 	.word	0x08007b1f
 8007a70:	08007aeb 	.word	0x08007aeb
 8007a74:	08007b1f 	.word	0x08007b1f
 8007a78:	08007b1f 	.word	0x08007b1f
 8007a7c:	08007b1f 	.word	0x08007b1f
 8007a80:	08007b1f 	.word	0x08007b1f
 8007a84:	08007b1f 	.word	0x08007b1f
 8007a88:	08007b1f 	.word	0x08007b1f
 8007a8c:	08007b1f 	.word	0x08007b1f
 8007a90:	08007b1f 	.word	0x08007b1f
 8007a94:	08007b1f 	.word	0x08007b1f
 8007a98:	08007b1f 	.word	0x08007b1f
 8007a9c:	08007b1f 	.word	0x08007b1f
 8007aa0:	08007b1f 	.word	0x08007b1f
 8007aa4:	08007b1f 	.word	0x08007b1f
 8007aa8:	08007b1f 	.word	0x08007b1f
 8007aac:	08007b1f 	.word	0x08007b1f
 8007ab0:	08007b11 	.word	0x08007b11
 8007ab4:	2b40      	cmp	r3, #64	; 0x40
 8007ab6:	d02e      	beq.n	8007b16 <UART_SetConfig+0x896>
 8007ab8:	e031      	b.n	8007b1e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007aba:	f7fc fd23 	bl	8004504 <HAL_RCC_GetPCLK1Freq>
 8007abe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007ac0:	e033      	b.n	8007b2a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ac2:	f7fc fd35 	bl	8004530 <HAL_RCC_GetPCLK2Freq>
 8007ac6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007ac8:	e02f      	b.n	8007b2a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aca:	f107 0314 	add.w	r3, r7, #20
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fd fc9a 	bl	8005408 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ad8:	e027      	b.n	8007b2a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ada:	f107 0308 	add.w	r3, r7, #8
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7fd fde6 	bl	80056b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ae8:	e01f      	b.n	8007b2a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007aea:	4b58      	ldr	r3, [pc, #352]	; (8007c4c <UART_SetConfig+0x9cc>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0320 	and.w	r3, r3, #32
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d009      	beq.n	8007b0a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007af6:	4b55      	ldr	r3, [pc, #340]	; (8007c4c <UART_SetConfig+0x9cc>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	08db      	lsrs	r3, r3, #3
 8007afc:	f003 0303 	and.w	r3, r3, #3
 8007b00:	4a53      	ldr	r2, [pc, #332]	; (8007c50 <UART_SetConfig+0x9d0>)
 8007b02:	fa22 f303 	lsr.w	r3, r2, r3
 8007b06:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b08:	e00f      	b.n	8007b2a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8007b0a:	4b51      	ldr	r3, [pc, #324]	; (8007c50 <UART_SetConfig+0x9d0>)
 8007b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b0e:	e00c      	b.n	8007b2a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b10:	4b4c      	ldr	r3, [pc, #304]	; (8007c44 <UART_SetConfig+0x9c4>)
 8007b12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b14:	e009      	b.n	8007b2a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b1c:	e005      	b.n	8007b2a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007b28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f000 80ea 	beq.w	8007d06 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b36:	4a44      	ldr	r2, [pc, #272]	; (8007c48 <UART_SetConfig+0x9c8>)
 8007b38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b40:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b44:	005a      	lsls	r2, r3, #1
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	085b      	lsrs	r3, r3, #1
 8007b4c:	441a      	add	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5c:	2b0f      	cmp	r3, #15
 8007b5e:	d916      	bls.n	8007b8e <UART_SetConfig+0x90e>
 8007b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b66:	d212      	bcs.n	8007b8e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	f023 030f 	bic.w	r3, r3, #15
 8007b70:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b74:	085b      	lsrs	r3, r3, #1
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	f003 0307 	and.w	r3, r3, #7
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b80:	4313      	orrs	r3, r2
 8007b82:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007b8a:	60da      	str	r2, [r3, #12]
 8007b8c:	e0bb      	b.n	8007d06 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007b94:	e0b7      	b.n	8007d06 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007b9a:	2b20      	cmp	r3, #32
 8007b9c:	dc4a      	bgt.n	8007c34 <UART_SetConfig+0x9b4>
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f2c0 8086 	blt.w	8007cb0 <UART_SetConfig+0xa30>
 8007ba4:	2b20      	cmp	r3, #32
 8007ba6:	f200 8083 	bhi.w	8007cb0 <UART_SetConfig+0xa30>
 8007baa:	a201      	add	r2, pc, #4	; (adr r2, 8007bb0 <UART_SetConfig+0x930>)
 8007bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb0:	08007c3b 	.word	0x08007c3b
 8007bb4:	08007c55 	.word	0x08007c55
 8007bb8:	08007cb1 	.word	0x08007cb1
 8007bbc:	08007cb1 	.word	0x08007cb1
 8007bc0:	08007c5d 	.word	0x08007c5d
 8007bc4:	08007cb1 	.word	0x08007cb1
 8007bc8:	08007cb1 	.word	0x08007cb1
 8007bcc:	08007cb1 	.word	0x08007cb1
 8007bd0:	08007c6d 	.word	0x08007c6d
 8007bd4:	08007cb1 	.word	0x08007cb1
 8007bd8:	08007cb1 	.word	0x08007cb1
 8007bdc:	08007cb1 	.word	0x08007cb1
 8007be0:	08007cb1 	.word	0x08007cb1
 8007be4:	08007cb1 	.word	0x08007cb1
 8007be8:	08007cb1 	.word	0x08007cb1
 8007bec:	08007cb1 	.word	0x08007cb1
 8007bf0:	08007c7d 	.word	0x08007c7d
 8007bf4:	08007cb1 	.word	0x08007cb1
 8007bf8:	08007cb1 	.word	0x08007cb1
 8007bfc:	08007cb1 	.word	0x08007cb1
 8007c00:	08007cb1 	.word	0x08007cb1
 8007c04:	08007cb1 	.word	0x08007cb1
 8007c08:	08007cb1 	.word	0x08007cb1
 8007c0c:	08007cb1 	.word	0x08007cb1
 8007c10:	08007cb1 	.word	0x08007cb1
 8007c14:	08007cb1 	.word	0x08007cb1
 8007c18:	08007cb1 	.word	0x08007cb1
 8007c1c:	08007cb1 	.word	0x08007cb1
 8007c20:	08007cb1 	.word	0x08007cb1
 8007c24:	08007cb1 	.word	0x08007cb1
 8007c28:	08007cb1 	.word	0x08007cb1
 8007c2c:	08007cb1 	.word	0x08007cb1
 8007c30:	08007ca3 	.word	0x08007ca3
 8007c34:	2b40      	cmp	r3, #64	; 0x40
 8007c36:	d037      	beq.n	8007ca8 <UART_SetConfig+0xa28>
 8007c38:	e03a      	b.n	8007cb0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c3a:	f7fc fc63 	bl	8004504 <HAL_RCC_GetPCLK1Freq>
 8007c3e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007c40:	e03c      	b.n	8007cbc <UART_SetConfig+0xa3c>
 8007c42:	bf00      	nop
 8007c44:	003d0900 	.word	0x003d0900
 8007c48:	080153c8 	.word	0x080153c8
 8007c4c:	58024400 	.word	0x58024400
 8007c50:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c54:	f7fc fc6c 	bl	8004530 <HAL_RCC_GetPCLK2Freq>
 8007c58:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007c5a:	e02f      	b.n	8007cbc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c5c:	f107 0314 	add.w	r3, r7, #20
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7fd fbd1 	bl	8005408 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c6a:	e027      	b.n	8007cbc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c6c:	f107 0308 	add.w	r3, r7, #8
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7fd fd1d 	bl	80056b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c7a:	e01f      	b.n	8007cbc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c7c:	4b2c      	ldr	r3, [pc, #176]	; (8007d30 <UART_SetConfig+0xab0>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 0320 	and.w	r3, r3, #32
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d009      	beq.n	8007c9c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c88:	4b29      	ldr	r3, [pc, #164]	; (8007d30 <UART_SetConfig+0xab0>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	08db      	lsrs	r3, r3, #3
 8007c8e:	f003 0303 	and.w	r3, r3, #3
 8007c92:	4a28      	ldr	r2, [pc, #160]	; (8007d34 <UART_SetConfig+0xab4>)
 8007c94:	fa22 f303 	lsr.w	r3, r2, r3
 8007c98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c9a:	e00f      	b.n	8007cbc <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8007c9c:	4b25      	ldr	r3, [pc, #148]	; (8007d34 <UART_SetConfig+0xab4>)
 8007c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ca0:	e00c      	b.n	8007cbc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ca2:	4b25      	ldr	r3, [pc, #148]	; (8007d38 <UART_SetConfig+0xab8>)
 8007ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ca6:	e009      	b.n	8007cbc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ca8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cae:	e005      	b.n	8007cbc <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007cba:	bf00      	nop
    }

    if (pclk != 0U)
 8007cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d021      	beq.n	8007d06 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc6:	4a1d      	ldr	r2, [pc, #116]	; (8007d3c <UART_SetConfig+0xabc>)
 8007cc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ccc:	461a      	mov	r2, r3
 8007cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd0:	fbb3 f2f2 	udiv	r2, r3, r2
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	085b      	lsrs	r3, r3, #1
 8007cda:	441a      	add	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cea:	2b0f      	cmp	r3, #15
 8007cec:	d908      	bls.n	8007d00 <UART_SetConfig+0xa80>
 8007cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cf4:	d204      	bcs.n	8007d00 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cfc:	60da      	str	r2, [r3, #12]
 8007cfe:	e002      	b.n	8007d06 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007d22:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3738      	adds	r7, #56	; 0x38
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bdb0      	pop	{r4, r5, r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	58024400 	.word	0x58024400
 8007d34:	03d09000 	.word	0x03d09000
 8007d38:	003d0900 	.word	0x003d0900
 8007d3c:	080153c8 	.word	0x080153c8

08007d40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d4c:	f003 0301 	and.w	r3, r3, #1
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00a      	beq.n	8007d6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	430a      	orrs	r2, r1
 8007d68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6e:	f003 0302 	and.w	r3, r3, #2
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00a      	beq.n	8007d8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	430a      	orrs	r2, r1
 8007d8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d90:	f003 0304 	and.w	r3, r3, #4
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00a      	beq.n	8007dae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	430a      	orrs	r2, r1
 8007dac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db2:	f003 0308 	and.w	r3, r3, #8
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00a      	beq.n	8007dd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	430a      	orrs	r2, r1
 8007dce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd4:	f003 0310 	and.w	r3, r3, #16
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00a      	beq.n	8007df2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	430a      	orrs	r2, r1
 8007df0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df6:	f003 0320 	and.w	r3, r3, #32
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00a      	beq.n	8007e14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	430a      	orrs	r2, r1
 8007e12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d01a      	beq.n	8007e56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	430a      	orrs	r2, r1
 8007e34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e3e:	d10a      	bne.n	8007e56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	430a      	orrs	r2, r1
 8007e54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00a      	beq.n	8007e78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	430a      	orrs	r2, r1
 8007e76:	605a      	str	r2, [r3, #4]
  }
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b086      	sub	sp, #24
 8007e88:	af02      	add	r7, sp, #8
 8007e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e94:	f7fa f8bc 	bl	8002010 <HAL_GetTick>
 8007e98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 0308 	and.w	r3, r3, #8
 8007ea4:	2b08      	cmp	r3, #8
 8007ea6:	d10e      	bne.n	8007ec6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ea8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f82f 	bl	8007f1a <UART_WaitOnFlagUntilTimeout>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d001      	beq.n	8007ec6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e025      	b.n	8007f12 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0304 	and.w	r3, r3, #4
 8007ed0:	2b04      	cmp	r3, #4
 8007ed2:	d10e      	bne.n	8007ef2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ed4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f819 	bl	8007f1a <UART_WaitOnFlagUntilTimeout>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d001      	beq.n	8007ef2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e00f      	b.n	8007f12 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2220      	movs	r2, #32
 8007ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2220      	movs	r2, #32
 8007efe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b084      	sub	sp, #16
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	60f8      	str	r0, [r7, #12]
 8007f22:	60b9      	str	r1, [r7, #8]
 8007f24:	603b      	str	r3, [r7, #0]
 8007f26:	4613      	mov	r3, r2
 8007f28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f2a:	e062      	b.n	8007ff2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f32:	d05e      	beq.n	8007ff2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f34:	f7fa f86c 	bl	8002010 <HAL_GetTick>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	69ba      	ldr	r2, [r7, #24]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d302      	bcc.n	8007f4a <UART_WaitOnFlagUntilTimeout+0x30>
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d11d      	bne.n	8007f86 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f58:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	689a      	ldr	r2, [r3, #8]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f022 0201 	bic.w	r2, r2, #1
 8007f68:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2220      	movs	r2, #32
 8007f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2220      	movs	r2, #32
 8007f76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e045      	b.n	8008012 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 0304 	and.w	r3, r3, #4
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d02e      	beq.n	8007ff2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	69db      	ldr	r3, [r3, #28]
 8007f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fa2:	d126      	bne.n	8007ff2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007fbc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	689a      	ldr	r2, [r3, #8]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f022 0201 	bic.w	r2, r2, #1
 8007fcc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2220      	movs	r2, #32
 8007fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2220      	movs	r2, #32
 8007fda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2220      	movs	r2, #32
 8007fe2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	e00f      	b.n	8008012 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	69da      	ldr	r2, [r3, #28]
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	68ba      	ldr	r2, [r7, #8]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	bf0c      	ite	eq
 8008002:	2301      	moveq	r3, #1
 8008004:	2300      	movne	r3, #0
 8008006:	b2db      	uxtb	r3, r3
 8008008:	461a      	mov	r2, r3
 800800a:	79fb      	ldrb	r3, [r7, #7]
 800800c:	429a      	cmp	r2, r3
 800800e:	d08d      	beq.n	8007f2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800801a:	b480      	push	{r7}
 800801c:	b085      	sub	sp, #20
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008028:	2b01      	cmp	r3, #1
 800802a:	d101      	bne.n	8008030 <HAL_UARTEx_DisableFifoMode+0x16>
 800802c:	2302      	movs	r3, #2
 800802e:	e027      	b.n	8008080 <HAL_UARTEx_DisableFifoMode+0x66>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2224      	movs	r2, #36	; 0x24
 800803c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f022 0201 	bic.w	r2, r2, #1
 8008056:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800805e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2220      	movs	r2, #32
 8008072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3714      	adds	r7, #20
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800809c:	2b01      	cmp	r3, #1
 800809e:	d101      	bne.n	80080a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80080a0:	2302      	movs	r3, #2
 80080a2:	e02d      	b.n	8008100 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2224      	movs	r2, #36	; 0x24
 80080b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f022 0201 	bic.w	r2, r2, #1
 80080ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	683a      	ldr	r2, [r7, #0]
 80080dc:	430a      	orrs	r2, r1
 80080de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 f84f 	bl	8008184 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2220      	movs	r2, #32
 80080f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008118:	2b01      	cmp	r3, #1
 800811a:	d101      	bne.n	8008120 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800811c:	2302      	movs	r3, #2
 800811e:	e02d      	b.n	800817c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2224      	movs	r2, #36	; 0x24
 800812c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f022 0201 	bic.w	r2, r2, #1
 8008146:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	430a      	orrs	r2, r1
 800815a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f811 	bl	8008184 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2220      	movs	r2, #32
 800816e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008190:	2b00      	cmp	r3, #0
 8008192:	d108      	bne.n	80081a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80081a4:	e031      	b.n	800820a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80081a6:	2310      	movs	r3, #16
 80081a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80081aa:	2310      	movs	r3, #16
 80081ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	0e5b      	lsrs	r3, r3, #25
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	f003 0307 	and.w	r3, r3, #7
 80081bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	0f5b      	lsrs	r3, r3, #29
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	f003 0307 	and.w	r3, r3, #7
 80081cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081ce:	7bbb      	ldrb	r3, [r7, #14]
 80081d0:	7b3a      	ldrb	r2, [r7, #12]
 80081d2:	4911      	ldr	r1, [pc, #68]	; (8008218 <UARTEx_SetNbDataToProcess+0x94>)
 80081d4:	5c8a      	ldrb	r2, [r1, r2]
 80081d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80081da:	7b3a      	ldrb	r2, [r7, #12]
 80081dc:	490f      	ldr	r1, [pc, #60]	; (800821c <UARTEx_SetNbDataToProcess+0x98>)
 80081de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081ec:	7bfb      	ldrb	r3, [r7, #15]
 80081ee:	7b7a      	ldrb	r2, [r7, #13]
 80081f0:	4909      	ldr	r1, [pc, #36]	; (8008218 <UARTEx_SetNbDataToProcess+0x94>)
 80081f2:	5c8a      	ldrb	r2, [r1, r2]
 80081f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80081f8:	7b7a      	ldrb	r2, [r7, #13]
 80081fa:	4908      	ldr	r1, [pc, #32]	; (800821c <UARTEx_SetNbDataToProcess+0x98>)
 80081fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8008202:	b29a      	uxth	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800820a:	bf00      	nop
 800820c:	3714      	adds	r7, #20
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	080153e0 	.word	0x080153e0
 800821c:	080153e8 	.word	0x080153e8

08008220 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008220:	b084      	sub	sp, #16
 8008222:	b580      	push	{r7, lr}
 8008224:	b084      	sub	sp, #16
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	f107 001c 	add.w	r0, r7, #28
 800822e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008234:	2b01      	cmp	r3, #1
 8008236:	d120      	bne.n	800827a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	68da      	ldr	r2, [r3, #12]
 8008248:	4b2a      	ldr	r3, [pc, #168]	; (80082f4 <USB_CoreInit+0xd4>)
 800824a:	4013      	ands	r3, r2
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800825c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800825e:	2b01      	cmp	r3, #1
 8008260:	d105      	bne.n	800826e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fa60 	bl	8008734 <USB_CoreReset>
 8008274:	4603      	mov	r3, r0
 8008276:	73fb      	strb	r3, [r7, #15]
 8008278:	e01a      	b.n	80082b0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fa54 	bl	8008734 <USB_CoreReset>
 800828c:	4603      	mov	r3, r0
 800828e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008292:	2b00      	cmp	r3, #0
 8008294:	d106      	bne.n	80082a4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	639a      	str	r2, [r3, #56]	; 0x38
 80082a2:	e005      	b.n	80082b0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80082b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d116      	bne.n	80082e4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80082c4:	4b0c      	ldr	r3, [pc, #48]	; (80082f8 <USB_CoreInit+0xd8>)
 80082c6:	4313      	orrs	r3, r2
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	f043 0206 	orr.w	r2, r3, #6
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	f043 0220 	orr.w	r2, r3, #32
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80082e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082f0:	b004      	add	sp, #16
 80082f2:	4770      	bx	lr
 80082f4:	ffbdffbf 	.word	0xffbdffbf
 80082f8:	03ee0000 	.word	0x03ee0000

080082fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	f023 0201 	bic.w	r2, r3, #1
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	370c      	adds	r7, #12
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr

0800831e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b082      	sub	sp, #8
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
 8008326:	460b      	mov	r3, r1
 8008328:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008336:	78fb      	ldrb	r3, [r7, #3]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d106      	bne.n	800834a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	60da      	str	r2, [r3, #12]
 8008348:	e00b      	b.n	8008362 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800834a:	78fb      	ldrb	r3, [r7, #3]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d106      	bne.n	800835e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	60da      	str	r2, [r3, #12]
 800835c:	e001      	b.n	8008362 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e003      	b.n	800836a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008362:	2032      	movs	r0, #50	; 0x32
 8008364:	f7f9 fe60 	bl	8002028 <HAL_Delay>

  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
	...

08008374 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008374:	b084      	sub	sp, #16
 8008376:	b580      	push	{r7, lr}
 8008378:	b086      	sub	sp, #24
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
 800837e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008382:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800838e:	2300      	movs	r3, #0
 8008390:	613b      	str	r3, [r7, #16]
 8008392:	e009      	b.n	80083a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	3340      	adds	r3, #64	; 0x40
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	2200      	movs	r2, #0
 80083a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	3301      	adds	r3, #1
 80083a6:	613b      	str	r3, [r7, #16]
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	2b0e      	cmp	r3, #14
 80083ac:	d9f2      	bls.n	8008394 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80083ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d11c      	bne.n	80083ee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083c2:	f043 0302 	orr.w	r3, r3, #2
 80083c6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083cc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	601a      	str	r2, [r3, #0]
 80083ec:	e005      	b.n	80083fa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008400:	461a      	mov	r2, r3
 8008402:	2300      	movs	r3, #0
 8008404:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800840c:	4619      	mov	r1, r3
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008414:	461a      	mov	r2, r3
 8008416:	680b      	ldr	r3, [r1, #0]
 8008418:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800841a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841c:	2b01      	cmp	r3, #1
 800841e:	d10c      	bne.n	800843a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008422:	2b00      	cmp	r3, #0
 8008424:	d104      	bne.n	8008430 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008426:	2100      	movs	r1, #0
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 f949 	bl	80086c0 <USB_SetDevSpeed>
 800842e:	e008      	b.n	8008442 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008430:	2101      	movs	r1, #1
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 f944 	bl	80086c0 <USB_SetDevSpeed>
 8008438:	e003      	b.n	8008442 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800843a:	2103      	movs	r1, #3
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f93f 	bl	80086c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008442:	2110      	movs	r1, #16
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f8f3 	bl	8008630 <USB_FlushTxFifo>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d001      	beq.n	8008454 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 f911 	bl	800867c <USB_FlushRxFifo>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d001      	beq.n	8008464 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800846a:	461a      	mov	r2, r3
 800846c:	2300      	movs	r3, #0
 800846e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008476:	461a      	mov	r2, r3
 8008478:	2300      	movs	r3, #0
 800847a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008482:	461a      	mov	r2, r3
 8008484:	2300      	movs	r3, #0
 8008486:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008488:	2300      	movs	r3, #0
 800848a:	613b      	str	r3, [r7, #16]
 800848c:	e043      	b.n	8008516 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	015a      	lsls	r2, r3, #5
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	4413      	add	r3, r2
 8008496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084a4:	d118      	bne.n	80084d8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d10a      	bne.n	80084c2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	015a      	lsls	r2, r3, #5
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	4413      	add	r3, r2
 80084b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b8:	461a      	mov	r2, r3
 80084ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80084be:	6013      	str	r3, [r2, #0]
 80084c0:	e013      	b.n	80084ea <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	015a      	lsls	r2, r3, #5
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	4413      	add	r3, r2
 80084ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ce:	461a      	mov	r2, r3
 80084d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80084d4:	6013      	str	r3, [r2, #0]
 80084d6:	e008      	b.n	80084ea <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084e4:	461a      	mov	r2, r3
 80084e6:	2300      	movs	r3, #0
 80084e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	015a      	lsls	r2, r3, #5
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	4413      	add	r3, r2
 80084f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f6:	461a      	mov	r2, r3
 80084f8:	2300      	movs	r3, #0
 80084fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	015a      	lsls	r2, r3, #5
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	4413      	add	r3, r2
 8008504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008508:	461a      	mov	r2, r3
 800850a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800850e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	3301      	adds	r3, #1
 8008514:	613b      	str	r3, [r7, #16]
 8008516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008518:	693a      	ldr	r2, [r7, #16]
 800851a:	429a      	cmp	r2, r3
 800851c:	d3b7      	bcc.n	800848e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800851e:	2300      	movs	r3, #0
 8008520:	613b      	str	r3, [r7, #16]
 8008522:	e043      	b.n	80085ac <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	4413      	add	r3, r2
 800852c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008536:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800853a:	d118      	bne.n	800856e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d10a      	bne.n	8008558 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	4413      	add	r3, r2
 800854a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854e:	461a      	mov	r2, r3
 8008550:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008554:	6013      	str	r3, [r2, #0]
 8008556:	e013      	b.n	8008580 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	015a      	lsls	r2, r3, #5
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	4413      	add	r3, r2
 8008560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008564:	461a      	mov	r2, r3
 8008566:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800856a:	6013      	str	r3, [r2, #0]
 800856c:	e008      	b.n	8008580 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	015a      	lsls	r2, r3, #5
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	4413      	add	r3, r2
 8008576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800857a:	461a      	mov	r2, r3
 800857c:	2300      	movs	r3, #0
 800857e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	4413      	add	r3, r2
 8008588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800858c:	461a      	mov	r2, r3
 800858e:	2300      	movs	r3, #0
 8008590:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	015a      	lsls	r2, r3, #5
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	4413      	add	r3, r2
 800859a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800859e:	461a      	mov	r2, r3
 80085a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80085a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	3301      	adds	r3, #1
 80085aa:	613b      	str	r3, [r7, #16]
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	693a      	ldr	r2, [r7, #16]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d3b7      	bcc.n	8008524 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80085d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80085d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d105      	bne.n	80085e8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	f043 0210 	orr.w	r2, r3, #16
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	699a      	ldr	r2, [r3, #24]
 80085ec:	4b0e      	ldr	r3, [pc, #56]	; (8008628 <USB_DevInit+0x2b4>)
 80085ee:	4313      	orrs	r3, r2
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80085f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d005      	beq.n	8008606 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	699b      	ldr	r3, [r3, #24]
 80085fe:	f043 0208 	orr.w	r2, r3, #8
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008608:	2b01      	cmp	r3, #1
 800860a:	d105      	bne.n	8008618 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	699a      	ldr	r2, [r3, #24]
 8008610:	4b06      	ldr	r3, [pc, #24]	; (800862c <USB_DevInit+0x2b8>)
 8008612:	4313      	orrs	r3, r2
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008618:	7dfb      	ldrb	r3, [r7, #23]
}
 800861a:	4618      	mov	r0, r3
 800861c:	3718      	adds	r7, #24
 800861e:	46bd      	mov	sp, r7
 8008620:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008624:	b004      	add	sp, #16
 8008626:	4770      	bx	lr
 8008628:	803c3800 	.word	0x803c3800
 800862c:	40000004 	.word	0x40000004

08008630 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800863a:	2300      	movs	r3, #0
 800863c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	019b      	lsls	r3, r3, #6
 8008642:	f043 0220 	orr.w	r2, r3, #32
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	3301      	adds	r3, #1
 800864e:	60fb      	str	r3, [r7, #12]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	4a09      	ldr	r2, [pc, #36]	; (8008678 <USB_FlushTxFifo+0x48>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d901      	bls.n	800865c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008658:	2303      	movs	r3, #3
 800865a:	e006      	b.n	800866a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	f003 0320 	and.w	r3, r3, #32
 8008664:	2b20      	cmp	r3, #32
 8008666:	d0f0      	beq.n	800864a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3714      	adds	r7, #20
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	00030d40 	.word	0x00030d40

0800867c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008684:	2300      	movs	r3, #0
 8008686:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2210      	movs	r2, #16
 800868c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	3301      	adds	r3, #1
 8008692:	60fb      	str	r3, [r7, #12]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	4a09      	ldr	r2, [pc, #36]	; (80086bc <USB_FlushRxFifo+0x40>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d901      	bls.n	80086a0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800869c:	2303      	movs	r3, #3
 800869e:	e006      	b.n	80086ae <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	f003 0310 	and.w	r3, r3, #16
 80086a8:	2b10      	cmp	r3, #16
 80086aa:	d0f0      	beq.n	800868e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3714      	adds	r7, #20
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	00030d40 	.word	0x00030d40

080086c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	460b      	mov	r3, r1
 80086ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	78fb      	ldrb	r3, [r7, #3]
 80086da:	68f9      	ldr	r1, [r7, #12]
 80086dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086e0:	4313      	orrs	r3, r2
 80086e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3714      	adds	r7, #20
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80086f2:	b480      	push	{r7}
 80086f4:	b085      	sub	sp, #20
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800870c:	f023 0303 	bic.w	r3, r3, #3
 8008710:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	68fa      	ldr	r2, [r7, #12]
 800871c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008720:	f043 0302 	orr.w	r3, r3, #2
 8008724:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	3714      	adds	r7, #20
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800873c:	2300      	movs	r3, #0
 800873e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	3301      	adds	r3, #1
 8008744:	60fb      	str	r3, [r7, #12]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	4a13      	ldr	r2, [pc, #76]	; (8008798 <USB_CoreReset+0x64>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d901      	bls.n	8008752 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800874e:	2303      	movs	r3, #3
 8008750:	e01b      	b.n	800878a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	2b00      	cmp	r3, #0
 8008758:	daf2      	bge.n	8008740 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800875a:	2300      	movs	r3, #0
 800875c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	f043 0201 	orr.w	r2, r3, #1
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	3301      	adds	r3, #1
 800876e:	60fb      	str	r3, [r7, #12]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	4a09      	ldr	r2, [pc, #36]	; (8008798 <USB_CoreReset+0x64>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d901      	bls.n	800877c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008778:	2303      	movs	r3, #3
 800877a:	e006      	b.n	800878a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	f003 0301 	and.w	r3, r3, #1
 8008784:	2b01      	cmp	r3, #1
 8008786:	d0f0      	beq.n	800876a <USB_CoreReset+0x36>

  return HAL_OK;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3714      	adds	r7, #20
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	00030d40 	.word	0x00030d40

0800879c <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	4603      	mov	r3, r0
 80087a4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&DEV_SPI, (uint8_t *)&_dat, 1, 500);
 80087a6:	1df9      	adds	r1, r7, #7
 80087a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80087ac:	2201      	movs	r2, #1
 80087ae:	4803      	ldr	r0, [pc, #12]	; (80087bc <DEV_SPI_WRite+0x20>)
 80087b0:	f7fd fb38 	bl	8005e24 <HAL_SPI_Transmit>
}
 80087b4:	bf00      	nop
 80087b6:	3708      	adds	r7, #8
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	2400a5cc 	.word	0x2400a5cc

080087c0 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 80087c4:	2201      	movs	r2, #1
 80087c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80087ca:	480a      	ldr	r0, [pc, #40]	; (80087f4 <DEV_Module_Init+0x34>)
 80087cc:	f7fa fbc2 	bl	8002f54 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 80087d0:	2201      	movs	r2, #1
 80087d2:	2140      	movs	r1, #64	; 0x40
 80087d4:	4807      	ldr	r0, [pc, #28]	; (80087f4 <DEV_Module_Init+0x34>)
 80087d6:	f7fa fbbd 	bl	8002f54 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 80087da:	2201      	movs	r2, #1
 80087dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80087e0:	4805      	ldr	r0, [pc, #20]	; (80087f8 <DEV_Module_Init+0x38>)
 80087e2:	f7fa fbb7 	bl	8002f54 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&DEV_BL_TIM, DEV_BL_CH);
 80087e6:	2100      	movs	r1, #0
 80087e8:	4804      	ldr	r0, [pc, #16]	; (80087fc <DEV_Module_Init+0x3c>)
 80087ea:	f7fd fe4d 	bl	8006488 <HAL_TIM_PWM_Start>
		return 0;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	58021800 	.word	0x58021800
 80087f8:	58021400 	.word	0x58021400
 80087fc:	2400a654 	.word	0x2400a654

08008800 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8008800:	b590      	push	{r4, r7, lr}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	4604      	mov	r4, r0
 8008808:	4608      	mov	r0, r1
 800880a:	4611      	mov	r1, r2
 800880c:	461a      	mov	r2, r3
 800880e:	4623      	mov	r3, r4
 8008810:	80fb      	strh	r3, [r7, #6]
 8008812:	4603      	mov	r3, r0
 8008814:	80bb      	strh	r3, [r7, #4]
 8008816:	460b      	mov	r3, r1
 8008818:	807b      	strh	r3, [r7, #2]
 800881a:	4613      	mov	r3, r2
 800881c:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 800881e:	4a1c      	ldr	r2, [pc, #112]	; (8008890 <Paint_NewImage+0x90>)
 8008820:	88fb      	ldrh	r3, [r7, #6]
 8008822:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8008824:	4a1a      	ldr	r2, [pc, #104]	; (8008890 <Paint_NewImage+0x90>)
 8008826:	88bb      	ldrh	r3, [r7, #4]
 8008828:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 800882a:	4a19      	ldr	r2, [pc, #100]	; (8008890 <Paint_NewImage+0x90>)
 800882c:	883b      	ldrh	r3, [r7, #0]
 800882e:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 8008830:	4a17      	ldr	r2, [pc, #92]	; (8008890 <Paint_NewImage+0x90>)
 8008832:	88fb      	ldrh	r3, [r7, #6]
 8008834:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8008836:	4a16      	ldr	r2, [pc, #88]	; (8008890 <Paint_NewImage+0x90>)
 8008838:	88bb      	ldrh	r3, [r7, #4]
 800883a:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 800883c:	4b14      	ldr	r3, [pc, #80]	; (8008890 <Paint_NewImage+0x90>)
 800883e:	8a5b      	ldrh	r3, [r3, #18]
 8008840:	b29b      	uxth	r3, r3
 8008842:	4619      	mov	r1, r3
 8008844:	4b12      	ldr	r3, [pc, #72]	; (8008890 <Paint_NewImage+0x90>)
 8008846:	8a9b      	ldrh	r3, [r3, #20]
 8008848:	b29b      	uxth	r3, r3
 800884a:	461a      	mov	r2, r3
 800884c:	4811      	ldr	r0, [pc, #68]	; (8008894 <Paint_NewImage+0x94>)
 800884e:	f008 fd89 	bl	8011364 <iprintf>
   
    Paint.Rotate = Rotate;
 8008852:	4a0f      	ldr	r2, [pc, #60]	; (8008890 <Paint_NewImage+0x90>)
 8008854:	887b      	ldrh	r3, [r7, #2]
 8008856:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8008858:	4b0d      	ldr	r3, [pc, #52]	; (8008890 <Paint_NewImage+0x90>)
 800885a:	2200      	movs	r2, #0
 800885c:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800885e:	887b      	ldrh	r3, [r7, #2]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d002      	beq.n	800886a <Paint_NewImage+0x6a>
 8008864:	887b      	ldrh	r3, [r7, #2]
 8008866:	2bb4      	cmp	r3, #180	; 0xb4
 8008868:	d106      	bne.n	8008878 <Paint_NewImage+0x78>
        Paint.Width = Width;
 800886a:	4a09      	ldr	r2, [pc, #36]	; (8008890 <Paint_NewImage+0x90>)
 800886c:	88fb      	ldrh	r3, [r7, #6]
 800886e:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8008870:	4a07      	ldr	r2, [pc, #28]	; (8008890 <Paint_NewImage+0x90>)
 8008872:	88bb      	ldrh	r3, [r7, #4]
 8008874:	80d3      	strh	r3, [r2, #6]
 8008876:	e006      	b.n	8008886 <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 8008878:	4a05      	ldr	r2, [pc, #20]	; (8008890 <Paint_NewImage+0x90>)
 800887a:	88bb      	ldrh	r3, [r7, #4]
 800887c:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800887e:	4a04      	ldr	r2, [pc, #16]	; (8008890 <Paint_NewImage+0x90>)
 8008880:	88fb      	ldrh	r3, [r7, #6]
 8008882:	80d3      	strh	r3, [r2, #6]
    }
}
 8008884:	bf00      	nop
 8008886:	bf00      	nop
 8008888:	370c      	adds	r7, #12
 800888a:	46bd      	mov	sp, r7
 800888c:	bd90      	pop	{r4, r7, pc}
 800888e:	bf00      	nop
 8008890:	2400ab40 	.word	0x2400ab40
 8008894:	08014e90 	.word	0x08014e90

08008898 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 80088a0:	4a04      	ldr	r2, [pc, #16]	; (80088b4 <Paint_SetClearFuntion+0x1c>)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6013      	str	r3, [r2, #0]
}
 80088a6:	bf00      	nop
 80088a8:	370c      	adds	r7, #12
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	2400ab58 	.word	0x2400ab58

080088b8 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 80088c0:	4a04      	ldr	r2, [pc, #16]	; (80088d4 <Paint_SetDisplayFuntion+0x1c>)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6013      	str	r3, [r2, #0]
}
 80088c6:	bf00      	nop
 80088c8:	370c      	adds	r7, #12
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	2400ab3c 	.word	0x2400ab3c

080088d8 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	4603      	mov	r3, r0
 80088e0:	80fb      	strh	r3, [r7, #6]
 80088e2:	460b      	mov	r3, r1
 80088e4:	80bb      	strh	r3, [r7, #4]
 80088e6:	4613      	mov	r3, r2
 80088e8:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 80088ea:	4b50      	ldr	r3, [pc, #320]	; (8008a2c <Paint_SetPixel+0x154>)
 80088ec:	889b      	ldrh	r3, [r3, #4]
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	88fa      	ldrh	r2, [r7, #6]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d805      	bhi.n	8008902 <Paint_SetPixel+0x2a>
 80088f6:	4b4d      	ldr	r3, [pc, #308]	; (8008a2c <Paint_SetPixel+0x154>)
 80088f8:	88db      	ldrh	r3, [r3, #6]
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	88ba      	ldrh	r2, [r7, #4]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d903      	bls.n	800890a <Paint_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 8008902:	484b      	ldr	r0, [pc, #300]	; (8008a30 <Paint_SetPixel+0x158>)
 8008904:	f008 fdb4 	bl	8011470 <puts>
        return;
 8008908:	e08c      	b.n	8008a24 <Paint_SetPixel+0x14c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 800890a:	4b48      	ldr	r3, [pc, #288]	; (8008a2c <Paint_SetPixel+0x154>)
 800890c:	89db      	ldrh	r3, [r3, #14]
 800890e:	b29b      	uxth	r3, r3
 8008910:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8008914:	d02d      	beq.n	8008972 <Paint_SetPixel+0x9a>
 8008916:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800891a:	f300 8080 	bgt.w	8008a1e <Paint_SetPixel+0x146>
 800891e:	2bb4      	cmp	r3, #180	; 0xb4
 8008920:	d016      	beq.n	8008950 <Paint_SetPixel+0x78>
 8008922:	2bb4      	cmp	r3, #180	; 0xb4
 8008924:	dc7b      	bgt.n	8008a1e <Paint_SetPixel+0x146>
 8008926:	2b00      	cmp	r3, #0
 8008928:	d002      	beq.n	8008930 <Paint_SetPixel+0x58>
 800892a:	2b5a      	cmp	r3, #90	; 0x5a
 800892c:	d005      	beq.n	800893a <Paint_SetPixel+0x62>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 800892e:	e076      	b.n	8008a1e <Paint_SetPixel+0x146>
        X = Xpoint;
 8008930:	88fb      	ldrh	r3, [r7, #6]
 8008932:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 8008934:	88bb      	ldrh	r3, [r7, #4]
 8008936:	81bb      	strh	r3, [r7, #12]
        break;
 8008938:	e026      	b.n	8008988 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Ypoint - 1;
 800893a:	4b3c      	ldr	r3, [pc, #240]	; (8008a2c <Paint_SetPixel+0x154>)
 800893c:	891b      	ldrh	r3, [r3, #8]
 800893e:	b29a      	uxth	r2, r3
 8008940:	88bb      	ldrh	r3, [r7, #4]
 8008942:	1ad3      	subs	r3, r2, r3
 8008944:	b29b      	uxth	r3, r3
 8008946:	3b01      	subs	r3, #1
 8008948:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 800894a:	88fb      	ldrh	r3, [r7, #6]
 800894c:	81bb      	strh	r3, [r7, #12]
        break;
 800894e:	e01b      	b.n	8008988 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Xpoint - 1;
 8008950:	4b36      	ldr	r3, [pc, #216]	; (8008a2c <Paint_SetPixel+0x154>)
 8008952:	891b      	ldrh	r3, [r3, #8]
 8008954:	b29a      	uxth	r2, r3
 8008956:	88fb      	ldrh	r3, [r7, #6]
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	b29b      	uxth	r3, r3
 800895c:	3b01      	subs	r3, #1
 800895e:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 8008960:	4b32      	ldr	r3, [pc, #200]	; (8008a2c <Paint_SetPixel+0x154>)
 8008962:	895b      	ldrh	r3, [r3, #10]
 8008964:	b29a      	uxth	r2, r3
 8008966:	88bb      	ldrh	r3, [r7, #4]
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	b29b      	uxth	r3, r3
 800896c:	3b01      	subs	r3, #1
 800896e:	81bb      	strh	r3, [r7, #12]
        break;
 8008970:	e00a      	b.n	8008988 <Paint_SetPixel+0xb0>
        X = Ypoint;
 8008972:	88bb      	ldrh	r3, [r7, #4]
 8008974:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 8008976:	4b2d      	ldr	r3, [pc, #180]	; (8008a2c <Paint_SetPixel+0x154>)
 8008978:	895b      	ldrh	r3, [r3, #10]
 800897a:	b29a      	uxth	r2, r3
 800897c:	88fb      	ldrh	r3, [r7, #6]
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	b29b      	uxth	r3, r3
 8008982:	3b01      	subs	r3, #1
 8008984:	81bb      	strh	r3, [r7, #12]
        break;
 8008986:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8008988:	4b28      	ldr	r3, [pc, #160]	; (8008a2c <Paint_SetPixel+0x154>)
 800898a:	8a1b      	ldrh	r3, [r3, #16]
 800898c:	b29b      	uxth	r3, r3
 800898e:	2b03      	cmp	r3, #3
 8008990:	d847      	bhi.n	8008a22 <Paint_SetPixel+0x14a>
 8008992:	a201      	add	r2, pc, #4	; (adr r2, 8008998 <Paint_SetPixel+0xc0>)
 8008994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008998:	080089ef 	.word	0x080089ef
 800899c:	080089a9 	.word	0x080089a9
 80089a0:	080089bb 	.word	0x080089bb
 80089a4:	080089cd 	.word	0x080089cd
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 80089a8:	4b20      	ldr	r3, [pc, #128]	; (8008a2c <Paint_SetPixel+0x154>)
 80089aa:	891b      	ldrh	r3, [r3, #8]
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	89fb      	ldrh	r3, [r7, #14]
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	3b01      	subs	r3, #1
 80089b6:	81fb      	strh	r3, [r7, #14]
        break;
 80089b8:	e01a      	b.n	80089f0 <Paint_SetPixel+0x118>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 80089ba:	4b1c      	ldr	r3, [pc, #112]	; (8008a2c <Paint_SetPixel+0x154>)
 80089bc:	895b      	ldrh	r3, [r3, #10]
 80089be:	b29a      	uxth	r2, r3
 80089c0:	89bb      	ldrh	r3, [r7, #12]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	3b01      	subs	r3, #1
 80089c8:	81bb      	strh	r3, [r7, #12]
        break;
 80089ca:	e011      	b.n	80089f0 <Paint_SetPixel+0x118>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 80089cc:	4b17      	ldr	r3, [pc, #92]	; (8008a2c <Paint_SetPixel+0x154>)
 80089ce:	891b      	ldrh	r3, [r3, #8]
 80089d0:	b29a      	uxth	r2, r3
 80089d2:	89fb      	ldrh	r3, [r7, #14]
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	3b01      	subs	r3, #1
 80089da:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 80089dc:	4b13      	ldr	r3, [pc, #76]	; (8008a2c <Paint_SetPixel+0x154>)
 80089de:	895b      	ldrh	r3, [r3, #10]
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	89bb      	ldrh	r3, [r7, #12]
 80089e4:	1ad3      	subs	r3, r2, r3
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	3b01      	subs	r3, #1
 80089ea:	81bb      	strh	r3, [r7, #12]
        break;
 80089ec:	e000      	b.n	80089f0 <Paint_SetPixel+0x118>
        break;
 80089ee:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 80089f0:	4b0e      	ldr	r3, [pc, #56]	; (8008a2c <Paint_SetPixel+0x154>)
 80089f2:	891b      	ldrh	r3, [r3, #8]
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	89fa      	ldrh	r2, [r7, #14]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d805      	bhi.n	8008a08 <Paint_SetPixel+0x130>
 80089fc:	4b0b      	ldr	r3, [pc, #44]	; (8008a2c <Paint_SetPixel+0x154>)
 80089fe:	895b      	ldrh	r3, [r3, #10]
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	89ba      	ldrh	r2, [r7, #12]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d903      	bls.n	8008a10 <Paint_SetPixel+0x138>
        Debug("Exceeding display boundaries\r\n");
 8008a08:	4809      	ldr	r0, [pc, #36]	; (8008a30 <Paint_SetPixel+0x158>)
 8008a0a:	f008 fd31 	bl	8011470 <puts>
        return;
 8008a0e:	e009      	b.n	8008a24 <Paint_SetPixel+0x14c>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 8008a10:	4b08      	ldr	r3, [pc, #32]	; (8008a34 <Paint_SetPixel+0x15c>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	887a      	ldrh	r2, [r7, #2]
 8008a16:	89b9      	ldrh	r1, [r7, #12]
 8008a18:	89f8      	ldrh	r0, [r7, #14]
 8008a1a:	4798      	blx	r3
 8008a1c:	e002      	b.n	8008a24 <Paint_SetPixel+0x14c>
        return;
 8008a1e:	bf00      	nop
 8008a20:	e000      	b.n	8008a24 <Paint_SetPixel+0x14c>
        return;
 8008a22:	bf00      	nop
}
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	2400ab40 	.word	0x2400ab40
 8008a30:	08014f90 	.word	0x08014f90
 8008a34:	2400ab3c 	.word	0x2400ab3c

08008a38 <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	4603      	mov	r3, r0
 8008a40:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 8008a42:	4b04      	ldr	r3, [pc, #16]	; (8008a54 <Paint_Clear+0x1c>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	88fa      	ldrh	r2, [r7, #6]
 8008a48:	4610      	mov	r0, r2
 8008a4a:	4798      	blx	r3
}
 8008a4c:	bf00      	nop
 8008a4e:	3708      	adds	r7, #8
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	2400ab58 	.word	0x2400ab58

08008a58 <Paint_ClearWindows>:
    Ystart :   Y starting point
    Xend   :   x end point
    Yend   :   y end point
******************************************************************************/
void Paint_ClearWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, UWORD Color)
{
 8008a58:	b590      	push	{r4, r7, lr}
 8008a5a:	b085      	sub	sp, #20
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	4604      	mov	r4, r0
 8008a60:	4608      	mov	r0, r1
 8008a62:	4611      	mov	r1, r2
 8008a64:	461a      	mov	r2, r3
 8008a66:	4623      	mov	r3, r4
 8008a68:	80fb      	strh	r3, [r7, #6]
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	80bb      	strh	r3, [r7, #4]
 8008a6e:	460b      	mov	r3, r1
 8008a70:	807b      	strh	r3, [r7, #2]
 8008a72:	4613      	mov	r3, r2
 8008a74:	803b      	strh	r3, [r7, #0]
    UWORD X, Y;
    for (Y = Ystart; Y < Yend; Y++)
 8008a76:	88bb      	ldrh	r3, [r7, #4]
 8008a78:	81bb      	strh	r3, [r7, #12]
 8008a7a:	e012      	b.n	8008aa2 <Paint_ClearWindows+0x4a>
    {
        for (X = Xstart; X < Xend; X++)
 8008a7c:	88fb      	ldrh	r3, [r7, #6]
 8008a7e:	81fb      	strh	r3, [r7, #14]
 8008a80:	e008      	b.n	8008a94 <Paint_ClearWindows+0x3c>
        {//8 pixel =  1 byte
            Paint_SetPixel(X, Y, Color);
 8008a82:	8c3a      	ldrh	r2, [r7, #32]
 8008a84:	89b9      	ldrh	r1, [r7, #12]
 8008a86:	89fb      	ldrh	r3, [r7, #14]
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7ff ff25 	bl	80088d8 <Paint_SetPixel>
        for (X = Xstart; X < Xend; X++)
 8008a8e:	89fb      	ldrh	r3, [r7, #14]
 8008a90:	3301      	adds	r3, #1
 8008a92:	81fb      	strh	r3, [r7, #14]
 8008a94:	89fa      	ldrh	r2, [r7, #14]
 8008a96:	887b      	ldrh	r3, [r7, #2]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d3f2      	bcc.n	8008a82 <Paint_ClearWindows+0x2a>
    for (Y = Ystart; Y < Yend; Y++)
 8008a9c:	89bb      	ldrh	r3, [r7, #12]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	81bb      	strh	r3, [r7, #12]
 8008aa2:	89ba      	ldrh	r2, [r7, #12]
 8008aa4:	883b      	ldrh	r3, [r7, #0]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d3e8      	bcc.n	8008a7c <Paint_ClearWindows+0x24>
        }
    }
}
 8008aaa:	bf00      	nop
 8008aac:	bf00      	nop
 8008aae:	3714      	adds	r7, #20
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd90      	pop	{r4, r7, pc}

08008ab4 <Paint_DrawPoint>:
    Color		:   Set color
    Dot_Pixel	:	point size
******************************************************************************/
void Paint_DrawPoint( UWORD Xpoint,       UWORD Ypoint, UWORD Color,
                      DOT_PIXEL Dot_Pixel,DOT_STYLE Dot_FillWay)
{
 8008ab4:	b590      	push	{r4, r7, lr}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	4604      	mov	r4, r0
 8008abc:	4608      	mov	r0, r1
 8008abe:	4611      	mov	r1, r2
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	4623      	mov	r3, r4
 8008ac4:	80fb      	strh	r3, [r7, #6]
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	80bb      	strh	r3, [r7, #4]
 8008aca:	460b      	mov	r3, r1
 8008acc:	807b      	strh	r3, [r7, #2]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 8008ad2:	4b44      	ldr	r3, [pc, #272]	; (8008be4 <Paint_DrawPoint+0x130>)
 8008ad4:	889b      	ldrh	r3, [r3, #4]
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	88fa      	ldrh	r2, [r7, #6]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d805      	bhi.n	8008aea <Paint_DrawPoint+0x36>
 8008ade:	4b41      	ldr	r3, [pc, #260]	; (8008be4 <Paint_DrawPoint+0x130>)
 8008ae0:	88db      	ldrh	r3, [r3, #6]
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	88ba      	ldrh	r2, [r7, #4]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d903      	bls.n	8008af2 <Paint_DrawPoint+0x3e>
    {
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 8008aea:	483f      	ldr	r0, [pc, #252]	; (8008be8 <Paint_DrawPoint+0x134>)
 8008aec:	f008 fcc0 	bl	8011470 <puts>
        return;
 8008af0:	e074      	b.n	8008bdc <Paint_DrawPoint+0x128>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_FillWay == DOT_FILL_AROUND)
 8008af2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d144      	bne.n	8008b84 <Paint_DrawPoint+0xd0>
    {
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++)
 8008afa:	2300      	movs	r3, #0
 8008afc:	81fb      	strh	r3, [r7, #14]
 8008afe:	e039      	b.n	8008b74 <Paint_DrawPoint+0xc0>
        {
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++)
 8008b00:	2300      	movs	r3, #0
 8008b02:	81bb      	strh	r3, [r7, #12]
 8008b04:	e029      	b.n	8008b5a <Paint_DrawPoint+0xa6>
            {
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 8008b06:	88fa      	ldrh	r2, [r7, #6]
 8008b08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008b0c:	441a      	add	r2, r3
 8008b0e:	787b      	ldrb	r3, [r7, #1]
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	db28      	blt.n	8008b68 <Paint_DrawPoint+0xb4>
 8008b16:	88ba      	ldrh	r2, [r7, #4]
 8008b18:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008b1c:	441a      	add	r2, r3
 8008b1e:	787b      	ldrb	r3, [r7, #1]
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	db20      	blt.n	8008b68 <Paint_DrawPoint+0xb4>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 8008b26:	89fa      	ldrh	r2, [r7, #14]
 8008b28:	88fb      	ldrh	r3, [r7, #6]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	b29a      	uxth	r2, r3
 8008b2e:	787b      	ldrb	r3, [r7, #1]
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	b298      	uxth	r0, r3
 8008b36:	89ba      	ldrh	r2, [r7, #12]
 8008b38:	88bb      	ldrh	r3, [r7, #4]
 8008b3a:	4413      	add	r3, r2
 8008b3c:	b29a      	uxth	r2, r3
 8008b3e:	787b      	ldrb	r3, [r7, #1]
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	1ad3      	subs	r3, r2, r3
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	887a      	ldrh	r2, [r7, #2]
 8008b48:	4619      	mov	r1, r3
 8008b4a:	f7ff fec5 	bl	80088d8 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++)
 8008b4e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	3301      	adds	r3, #1
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	81bb      	strh	r3, [r7, #12]
 8008b5a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008b5e:	787b      	ldrb	r3, [r7, #1]
 8008b60:	005b      	lsls	r3, r3, #1
 8008b62:	3b01      	subs	r3, #1
 8008b64:	429a      	cmp	r2, r3
 8008b66:	dbce      	blt.n	8008b06 <Paint_DrawPoint+0x52>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++)
 8008b68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	3301      	adds	r3, #1
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	81fb      	strh	r3, [r7, #14]
 8008b74:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8008b78:	787b      	ldrb	r3, [r7, #1]
 8008b7a:	005b      	lsls	r3, r3, #1
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	dbbe      	blt.n	8008b00 <Paint_DrawPoint+0x4c>
 8008b82:	e02b      	b.n	8008bdc <Paint_DrawPoint+0x128>
            }
        }
    }
    else
    {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++)
 8008b84:	2300      	movs	r3, #0
 8008b86:	81fb      	strh	r3, [r7, #14]
 8008b88:	e023      	b.n	8008bd2 <Paint_DrawPoint+0x11e>
        {
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++)
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	81bb      	strh	r3, [r7, #12]
 8008b8e:	e015      	b.n	8008bbc <Paint_DrawPoint+0x108>
            {
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 8008b90:	89fa      	ldrh	r2, [r7, #14]
 8008b92:	88fb      	ldrh	r3, [r7, #6]
 8008b94:	4413      	add	r3, r2
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	b298      	uxth	r0, r3
 8008b9c:	89ba      	ldrh	r2, [r7, #12]
 8008b9e:	88bb      	ldrh	r3, [r7, #4]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	887a      	ldrh	r2, [r7, #2]
 8008baa:	4619      	mov	r1, r3
 8008bac:	f7ff fe94 	bl	80088d8 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++)
 8008bb0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	81bb      	strh	r3, [r7, #12]
 8008bbc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008bc0:	787b      	ldrb	r3, [r7, #1]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	dbe4      	blt.n	8008b90 <Paint_DrawPoint+0xdc>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++)
 8008bc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	3301      	adds	r3, #1
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	81fb      	strh	r3, [r7, #14]
 8008bd2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8008bd6:	787b      	ldrb	r3, [r7, #1]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	dbd6      	blt.n	8008b8a <Paint_DrawPoint+0xd6>
            }
        }
    }
}
 8008bdc:	3714      	adds	r7, #20
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd90      	pop	{r4, r7, pc}
 8008be2:	bf00      	nop
 8008be4:	2400ab40 	.word	0x2400ab40
 8008be8:	08014fb8 	.word	0x08014fb8

08008bec <Paint_DrawLine>:
    Yend   ：End point Ypoint coordinate
    Color  ：The color of the line segment
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 8008bec:	b590      	push	{r4, r7, lr}
 8008bee:	b08d      	sub	sp, #52	; 0x34
 8008bf0:	af02      	add	r7, sp, #8
 8008bf2:	4604      	mov	r4, r0
 8008bf4:	4608      	mov	r0, r1
 8008bf6:	4611      	mov	r1, r2
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	4623      	mov	r3, r4
 8008bfc:	80fb      	strh	r3, [r7, #6]
 8008bfe:	4603      	mov	r3, r0
 8008c00:	80bb      	strh	r3, [r7, #4]
 8008c02:	460b      	mov	r3, r1
 8008c04:	807b      	strh	r3, [r7, #2]
 8008c06:	4613      	mov	r3, r2
 8008c08:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8008c0a:	4b4d      	ldr	r3, [pc, #308]	; (8008d40 <Paint_DrawLine+0x154>)
 8008c0c:	889b      	ldrh	r3, [r3, #4]
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	88fa      	ldrh	r2, [r7, #6]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d811      	bhi.n	8008c3a <Paint_DrawLine+0x4e>
 8008c16:	4b4a      	ldr	r3, [pc, #296]	; (8008d40 <Paint_DrawLine+0x154>)
 8008c18:	88db      	ldrh	r3, [r3, #6]
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	88ba      	ldrh	r2, [r7, #4]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d80b      	bhi.n	8008c3a <Paint_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 8008c22:	4b47      	ldr	r3, [pc, #284]	; (8008d40 <Paint_DrawLine+0x154>)
 8008c24:	889b      	ldrh	r3, [r3, #4]
 8008c26:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8008c28:	887a      	ldrh	r2, [r7, #2]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d805      	bhi.n	8008c3a <Paint_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 8008c2e:	4b44      	ldr	r3, [pc, #272]	; (8008d40 <Paint_DrawLine+0x154>)
 8008c30:	88db      	ldrh	r3, [r3, #6]
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	883a      	ldrh	r2, [r7, #0]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d903      	bls.n	8008c42 <Paint_DrawLine+0x56>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 8008c3a:	4842      	ldr	r0, [pc, #264]	; (8008d44 <Paint_DrawLine+0x158>)
 8008c3c:	f008 fc18 	bl	8011470 <puts>
        return;
 8008c40:	e07b      	b.n	8008d3a <Paint_DrawLine+0x14e>
    }

    UWORD Xpoint = Xstart;
 8008c42:	88fb      	ldrh	r3, [r7, #6]
 8008c44:	84fb      	strh	r3, [r7, #38]	; 0x26
    UWORD Ypoint = Ystart;
 8008c46:	88bb      	ldrh	r3, [r7, #4]
 8008c48:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8008c4a:	887a      	ldrh	r2, [r7, #2]
 8008c4c:	88fb      	ldrh	r3, [r7, #6]
 8008c4e:	1ad3      	subs	r3, r2, r3
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	bfb8      	it	lt
 8008c54:	425b      	neglt	r3, r3
 8008c56:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8008c58:	883a      	ldrh	r2, [r7, #0]
 8008c5a:	88bb      	ldrh	r3, [r7, #4]
 8008c5c:	1ad3      	subs	r3, r2, r3
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	bfb8      	it	lt
 8008c62:	425b      	neglt	r3, r3
 8008c64:	425b      	negs	r3, r3
 8008c66:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 8008c68:	88fa      	ldrh	r2, [r7, #6]
 8008c6a:	887b      	ldrh	r3, [r7, #2]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d201      	bcs.n	8008c74 <Paint_DrawLine+0x88>
 8008c70:	2301      	movs	r3, #1
 8008c72:	e001      	b.n	8008c78 <Paint_DrawLine+0x8c>
 8008c74:	f04f 33ff 	mov.w	r3, #4294967295
 8008c78:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 8008c7a:	88ba      	ldrh	r2, [r7, #4]
 8008c7c:	883b      	ldrh	r3, [r7, #0]
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d201      	bcs.n	8008c86 <Paint_DrawLine+0x9a>
 8008c82:	2301      	movs	r3, #1
 8008c84:	e001      	b.n	8008c8a <Paint_DrawLine+0x9e>
 8008c86:	f04f 33ff 	mov.w	r3, #4294967295
 8008c8a:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 8008c8c:	69ba      	ldr	r2, [r7, #24]
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	4413      	add	r3, r2
 8008c92:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 8008c94:	2300      	movs	r3, #0
 8008c96:	77fb      	strb	r3, [r7, #31]

    for (;;)
    {
        Dotted_Len++;
 8008c98:	7ffb      	ldrb	r3, [r7, #31]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0)
 8008c9e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d118      	bne.n	8008cd8 <Paint_DrawLine+0xec>
 8008ca6:	7ffa      	ldrb	r2, [r7, #31]
 8008ca8:	4b27      	ldr	r3, [pc, #156]	; (8008d48 <Paint_DrawLine+0x15c>)
 8008caa:	fba3 1302 	umull	r1, r3, r3, r2
 8008cae:	0859      	lsrs	r1, r3, #1
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	005b      	lsls	r3, r3, #1
 8008cb4:	440b      	add	r3, r1
 8008cb6:	1ad3      	subs	r3, r2, r3
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10c      	bne.n	8008cd8 <Paint_DrawLine+0xec>
        {
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 8008cbe:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008cc2:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8008cc4:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	9200      	str	r2, [sp, #0]
 8008cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cce:	f7ff fef1 	bl	8008ab4 <Paint_DrawPoint>
            Dotted_Len = 0;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	77fb      	strb	r3, [r7, #31]
 8008cd6:	e008      	b.n	8008cea <Paint_DrawLine+0xfe>
        }
        else
        {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 8008cd8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008cdc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8008cde:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8008ce0:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8008ce2:	2401      	movs	r4, #1
 8008ce4:	9400      	str	r4, [sp, #0]
 8008ce6:	f7ff fee5 	bl	8008ab4 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy)
 8008cea:	6a3b      	ldr	r3, [r7, #32]
 8008cec:	005b      	lsls	r3, r3, #1
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	dc0c      	bgt.n	8008d0e <Paint_DrawLine+0x122>
        {
            if (Xpoint == Xend)
 8008cf4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008cf6:	887b      	ldrh	r3, [r7, #2]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d01b      	beq.n	8008d34 <Paint_DrawLine+0x148>
                break;
            Esp += dy;
 8008cfc:	6a3a      	ldr	r2, [r7, #32]
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	4413      	add	r3, r2
 8008d02:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	b29a      	uxth	r2, r3
 8008d08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d0a:	4413      	add	r3, r2
 8008d0c:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx)
 8008d0e:	6a3b      	ldr	r3, [r7, #32]
 8008d10:	005b      	lsls	r3, r3, #1
 8008d12:	69ba      	ldr	r2, [r7, #24]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	dbbf      	blt.n	8008c98 <Paint_DrawLine+0xac>
        {
            if (Ypoint == Yend)
 8008d18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008d1a:	883b      	ldrh	r3, [r7, #0]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d00b      	beq.n	8008d38 <Paint_DrawLine+0x14c>
                break;
            Esp += dx;
 8008d20:	6a3a      	ldr	r2, [r7, #32]
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	4413      	add	r3, r2
 8008d26:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	b29a      	uxth	r2, r3
 8008d2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d2e:	4413      	add	r3, r2
 8008d30:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 8008d32:	e7b1      	b.n	8008c98 <Paint_DrawLine+0xac>
                break;
 8008d34:	bf00      	nop
 8008d36:	e000      	b.n	8008d3a <Paint_DrawLine+0x14e>
                break;
 8008d38:	bf00      	nop
        }
    }
}
 8008d3a:	372c      	adds	r7, #44	; 0x2c
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd90      	pop	{r4, r7, pc}
 8008d40:	2400ab40 	.word	0x2400ab40
 8008d44:	08014ff8 	.word	0x08014ff8
 8008d48:	aaaaaaab 	.word	0xaaaaaaab

08008d4c <Paint_DrawRectangle>:
    Color  ：The color of the Rectangular segment
    Filled : Whether it is filled--- 1 solid 0：empty
******************************************************************************/
void Paint_DrawRectangle( UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                          UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Filled )
{
 8008d4c:	b590      	push	{r4, r7, lr}
 8008d4e:	b089      	sub	sp, #36	; 0x24
 8008d50:	af04      	add	r7, sp, #16
 8008d52:	4604      	mov	r4, r0
 8008d54:	4608      	mov	r0, r1
 8008d56:	4611      	mov	r1, r2
 8008d58:	461a      	mov	r2, r3
 8008d5a:	4623      	mov	r3, r4
 8008d5c:	80fb      	strh	r3, [r7, #6]
 8008d5e:	4603      	mov	r3, r0
 8008d60:	80bb      	strh	r3, [r7, #4]
 8008d62:	460b      	mov	r3, r1
 8008d64:	807b      	strh	r3, [r7, #2]
 8008d66:	4613      	mov	r3, r2
 8008d68:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8008d6a:	4b3a      	ldr	r3, [pc, #232]	; (8008e54 <Paint_DrawRectangle+0x108>)
 8008d6c:	889b      	ldrh	r3, [r3, #4]
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	88fa      	ldrh	r2, [r7, #6]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d811      	bhi.n	8008d9a <Paint_DrawRectangle+0x4e>
 8008d76:	4b37      	ldr	r3, [pc, #220]	; (8008e54 <Paint_DrawRectangle+0x108>)
 8008d78:	88db      	ldrh	r3, [r3, #6]
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	88ba      	ldrh	r2, [r7, #4]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d80b      	bhi.n	8008d9a <Paint_DrawRectangle+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 8008d82:	4b34      	ldr	r3, [pc, #208]	; (8008e54 <Paint_DrawRectangle+0x108>)
 8008d84:	889b      	ldrh	r3, [r3, #4]
 8008d86:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8008d88:	887a      	ldrh	r2, [r7, #2]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d805      	bhi.n	8008d9a <Paint_DrawRectangle+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 8008d8e:	4b31      	ldr	r3, [pc, #196]	; (8008e54 <Paint_DrawRectangle+0x108>)
 8008d90:	88db      	ldrh	r3, [r3, #6]
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	883a      	ldrh	r2, [r7, #0]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d903      	bls.n	8008da2 <Paint_DrawRectangle+0x56>
        Debug("Input exceeds the normal display range\r\n");
 8008d9a:	482f      	ldr	r0, [pc, #188]	; (8008e58 <Paint_DrawRectangle+0x10c>)
 8008d9c:	f008 fb68 	bl	8011470 <puts>
        return;
 8008da0:	e054      	b.n	8008e4c <Paint_DrawRectangle+0x100>
    }

    if (Filled )
 8008da2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d018      	beq.n	8008ddc <Paint_DrawRectangle+0x90>
    {
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++)
 8008daa:	88bb      	ldrh	r3, [r7, #4]
 8008dac:	81fb      	strh	r3, [r7, #14]
 8008dae:	e010      	b.n	8008dd2 <Paint_DrawRectangle+0x86>
        {
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color ,Line_width, LINE_STYLE_SOLID);
 8008db0:	89fc      	ldrh	r4, [r7, #14]
 8008db2:	887a      	ldrh	r2, [r7, #2]
 8008db4:	89f9      	ldrh	r1, [r7, #14]
 8008db6:	88f8      	ldrh	r0, [r7, #6]
 8008db8:	2300      	movs	r3, #0
 8008dba:	9302      	str	r3, [sp, #8]
 8008dbc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008dc0:	9301      	str	r3, [sp, #4]
 8008dc2:	8c3b      	ldrh	r3, [r7, #32]
 8008dc4:	9300      	str	r3, [sp, #0]
 8008dc6:	4623      	mov	r3, r4
 8008dc8:	f7ff ff10 	bl	8008bec <Paint_DrawLine>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++)
 8008dcc:	89fb      	ldrh	r3, [r7, #14]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	81fb      	strh	r3, [r7, #14]
 8008dd2:	89fa      	ldrh	r2, [r7, #14]
 8008dd4:	883b      	ldrh	r3, [r7, #0]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d3ea      	bcc.n	8008db0 <Paint_DrawRectangle+0x64>
 8008dda:	e037      	b.n	8008e4c <Paint_DrawRectangle+0x100>
        }
    }
    else
    {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color ,Line_width, LINE_STYLE_SOLID);
 8008ddc:	88bc      	ldrh	r4, [r7, #4]
 8008dde:	887a      	ldrh	r2, [r7, #2]
 8008de0:	88b9      	ldrh	r1, [r7, #4]
 8008de2:	88f8      	ldrh	r0, [r7, #6]
 8008de4:	2300      	movs	r3, #0
 8008de6:	9302      	str	r3, [sp, #8]
 8008de8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008dec:	9301      	str	r3, [sp, #4]
 8008dee:	8c3b      	ldrh	r3, [r7, #32]
 8008df0:	9300      	str	r3, [sp, #0]
 8008df2:	4623      	mov	r3, r4
 8008df4:	f7ff fefa 	bl	8008bec <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color ,Line_width, LINE_STYLE_SOLID);
 8008df8:	883c      	ldrh	r4, [r7, #0]
 8008dfa:	88fa      	ldrh	r2, [r7, #6]
 8008dfc:	88b9      	ldrh	r1, [r7, #4]
 8008dfe:	88f8      	ldrh	r0, [r7, #6]
 8008e00:	2300      	movs	r3, #0
 8008e02:	9302      	str	r3, [sp, #8]
 8008e04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e08:	9301      	str	r3, [sp, #4]
 8008e0a:	8c3b      	ldrh	r3, [r7, #32]
 8008e0c:	9300      	str	r3, [sp, #0]
 8008e0e:	4623      	mov	r3, r4
 8008e10:	f7ff feec 	bl	8008bec <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color ,Line_width, LINE_STYLE_SOLID);
 8008e14:	88bc      	ldrh	r4, [r7, #4]
 8008e16:	887a      	ldrh	r2, [r7, #2]
 8008e18:	8839      	ldrh	r1, [r7, #0]
 8008e1a:	8878      	ldrh	r0, [r7, #2]
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	9302      	str	r3, [sp, #8]
 8008e20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e24:	9301      	str	r3, [sp, #4]
 8008e26:	8c3b      	ldrh	r3, [r7, #32]
 8008e28:	9300      	str	r3, [sp, #0]
 8008e2a:	4623      	mov	r3, r4
 8008e2c:	f7ff fede 	bl	8008bec <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color ,Line_width, LINE_STYLE_SOLID);
 8008e30:	883c      	ldrh	r4, [r7, #0]
 8008e32:	88fa      	ldrh	r2, [r7, #6]
 8008e34:	8839      	ldrh	r1, [r7, #0]
 8008e36:	8878      	ldrh	r0, [r7, #2]
 8008e38:	2300      	movs	r3, #0
 8008e3a:	9302      	str	r3, [sp, #8]
 8008e3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e40:	9301      	str	r3, [sp, #4]
 8008e42:	8c3b      	ldrh	r3, [r7, #32]
 8008e44:	9300      	str	r3, [sp, #0]
 8008e46:	4623      	mov	r3, r4
 8008e48:	f7ff fed0 	bl	8008bec <Paint_DrawLine>
    }
}
 8008e4c:	3714      	adds	r7, #20
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd90      	pop	{r4, r7, pc}
 8008e52:	bf00      	nop
 8008e54:	2400ab40 	.word	0x2400ab40
 8008e58:	08015038 	.word	0x08015038

08008e5c <Paint_DrawCircle>:
    Color     ：The color of the ：circle segment
    Filled    : Whether it is filled: 1 filling 0：Do not
******************************************************************************/
void Paint_DrawCircle(  UWORD X_Center, UWORD Y_Center, UWORD Radius, 
                        UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill )
{
 8008e5c:	b590      	push	{r4, r7, lr}
 8008e5e:	b087      	sub	sp, #28
 8008e60:	af02      	add	r7, sp, #8
 8008e62:	4604      	mov	r4, r0
 8008e64:	4608      	mov	r0, r1
 8008e66:	4611      	mov	r1, r2
 8008e68:	461a      	mov	r2, r3
 8008e6a:	4623      	mov	r3, r4
 8008e6c:	80fb      	strh	r3, [r7, #6]
 8008e6e:	4603      	mov	r3, r0
 8008e70:	80bb      	strh	r3, [r7, #4]
 8008e72:	460b      	mov	r3, r1
 8008e74:	807b      	strh	r3, [r7, #2]
 8008e76:	4613      	mov	r3, r2
 8008e78:	803b      	strh	r3, [r7, #0]
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 8008e7a:	4b68      	ldr	r3, [pc, #416]	; (800901c <Paint_DrawCircle+0x1c0>)
 8008e7c:	889b      	ldrh	r3, [r3, #4]
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	88fa      	ldrh	r2, [r7, #6]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d805      	bhi.n	8008e92 <Paint_DrawCircle+0x36>
 8008e86:	4b65      	ldr	r3, [pc, #404]	; (800901c <Paint_DrawCircle+0x1c0>)
 8008e88:	88db      	ldrh	r3, [r3, #6]
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	88ba      	ldrh	r2, [r7, #4]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d303      	bcc.n	8008e9a <Paint_DrawCircle+0x3e>
        Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 8008e92:	4863      	ldr	r0, [pc, #396]	; (8009020 <Paint_DrawCircle+0x1c4>)
 8008e94:	f008 faec 	bl	8011470 <puts>
        return;
 8008e98:	e16b      	b.n	8009172 <Paint_DrawCircle+0x316>
    }

    //Draw a circle from(0, R) as a starting point
    int16_t XCurrent, YCurrent;
    XCurrent = 0;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	81fb      	strh	r3, [r7, #14]
    YCurrent = Radius;
 8008e9e:	887b      	ldrh	r3, [r7, #2]
 8008ea0:	81bb      	strh	r3, [r7, #12]

    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );
 8008ea2:	887b      	ldrh	r3, [r7, #2]
 8008ea4:	005b      	lsls	r3, r3, #1
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	f1c3 0303 	rsb	r3, r3, #3
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	817b      	strh	r3, [r7, #10]

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
 8008eb0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	f040 8155 	bne.w	8009164 <Paint_DrawCircle+0x308>
        while (XCurrent <= YCurrent ) { //Realistic circles
 8008eba:	e0a6      	b.n	800900a <Paint_DrawCircle+0x1ae>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 8008ebc:	89fb      	ldrh	r3, [r7, #14]
 8008ebe:	813b      	strh	r3, [r7, #8]
 8008ec0:	e075      	b.n	8008fae <Paint_DrawCircle+0x152>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//1
 8008ec2:	89fa      	ldrh	r2, [r7, #14]
 8008ec4:	88fb      	ldrh	r3, [r7, #6]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	b298      	uxth	r0, r3
 8008eca:	893a      	ldrh	r2, [r7, #8]
 8008ecc:	88bb      	ldrh	r3, [r7, #4]
 8008ece:	4413      	add	r3, r2
 8008ed0:	b299      	uxth	r1, r3
 8008ed2:	883a      	ldrh	r2, [r7, #0]
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	2301      	movs	r3, #1
 8008eda:	f7ff fdeb 	bl	8008ab4 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//2
 8008ede:	89fb      	ldrh	r3, [r7, #14]
 8008ee0:	88fa      	ldrh	r2, [r7, #6]
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	b298      	uxth	r0, r3
 8008ee6:	893a      	ldrh	r2, [r7, #8]
 8008ee8:	88bb      	ldrh	r3, [r7, #4]
 8008eea:	4413      	add	r3, r2
 8008eec:	b299      	uxth	r1, r3
 8008eee:	883a      	ldrh	r2, [r7, #0]
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	9300      	str	r3, [sp, #0]
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	f7ff fddd 	bl	8008ab4 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//3
 8008efa:	893b      	ldrh	r3, [r7, #8]
 8008efc:	88fa      	ldrh	r2, [r7, #6]
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	b298      	uxth	r0, r3
 8008f02:	89fa      	ldrh	r2, [r7, #14]
 8008f04:	88bb      	ldrh	r3, [r7, #4]
 8008f06:	4413      	add	r3, r2
 8008f08:	b299      	uxth	r1, r3
 8008f0a:	883a      	ldrh	r2, [r7, #0]
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	9300      	str	r3, [sp, #0]
 8008f10:	2301      	movs	r3, #1
 8008f12:	f7ff fdcf 	bl	8008ab4 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//4
 8008f16:	893b      	ldrh	r3, [r7, #8]
 8008f18:	88fa      	ldrh	r2, [r7, #6]
 8008f1a:	1ad3      	subs	r3, r2, r3
 8008f1c:	b298      	uxth	r0, r3
 8008f1e:	89fb      	ldrh	r3, [r7, #14]
 8008f20:	88ba      	ldrh	r2, [r7, #4]
 8008f22:	1ad3      	subs	r3, r2, r3
 8008f24:	b299      	uxth	r1, r3
 8008f26:	883a      	ldrh	r2, [r7, #0]
 8008f28:	2301      	movs	r3, #1
 8008f2a:	9300      	str	r3, [sp, #0]
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	f7ff fdc1 	bl	8008ab4 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
 8008f32:	89fb      	ldrh	r3, [r7, #14]
 8008f34:	88fa      	ldrh	r2, [r7, #6]
 8008f36:	1ad3      	subs	r3, r2, r3
 8008f38:	b298      	uxth	r0, r3
 8008f3a:	893b      	ldrh	r3, [r7, #8]
 8008f3c:	88ba      	ldrh	r2, [r7, #4]
 8008f3e:	1ad3      	subs	r3, r2, r3
 8008f40:	b299      	uxth	r1, r3
 8008f42:	883a      	ldrh	r2, [r7, #0]
 8008f44:	2301      	movs	r3, #1
 8008f46:	9300      	str	r3, [sp, #0]
 8008f48:	2301      	movs	r3, #1
 8008f4a:	f7ff fdb3 	bl	8008ab4 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
 8008f4e:	89fa      	ldrh	r2, [r7, #14]
 8008f50:	88fb      	ldrh	r3, [r7, #6]
 8008f52:	4413      	add	r3, r2
 8008f54:	b298      	uxth	r0, r3
 8008f56:	893b      	ldrh	r3, [r7, #8]
 8008f58:	88ba      	ldrh	r2, [r7, #4]
 8008f5a:	1ad3      	subs	r3, r2, r3
 8008f5c:	b299      	uxth	r1, r3
 8008f5e:	883a      	ldrh	r2, [r7, #0]
 8008f60:	2301      	movs	r3, #1
 8008f62:	9300      	str	r3, [sp, #0]
 8008f64:	2301      	movs	r3, #1
 8008f66:	f7ff fda5 	bl	8008ab4 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
 8008f6a:	893a      	ldrh	r2, [r7, #8]
 8008f6c:	88fb      	ldrh	r3, [r7, #6]
 8008f6e:	4413      	add	r3, r2
 8008f70:	b298      	uxth	r0, r3
 8008f72:	89fb      	ldrh	r3, [r7, #14]
 8008f74:	88ba      	ldrh	r2, [r7, #4]
 8008f76:	1ad3      	subs	r3, r2, r3
 8008f78:	b299      	uxth	r1, r3
 8008f7a:	883a      	ldrh	r2, [r7, #0]
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	9300      	str	r3, [sp, #0]
 8008f80:	2301      	movs	r3, #1
 8008f82:	f7ff fd97 	bl	8008ab4 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 8008f86:	893a      	ldrh	r2, [r7, #8]
 8008f88:	88fb      	ldrh	r3, [r7, #6]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	b298      	uxth	r0, r3
 8008f8e:	89fa      	ldrh	r2, [r7, #14]
 8008f90:	88bb      	ldrh	r3, [r7, #4]
 8008f92:	4413      	add	r3, r2
 8008f94:	b299      	uxth	r1, r3
 8008f96:	883a      	ldrh	r2, [r7, #0]
 8008f98:	2301      	movs	r3, #1
 8008f9a:	9300      	str	r3, [sp, #0]
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	f7ff fd89 	bl	8008ab4 <Paint_DrawPoint>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 8008fa2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	3301      	adds	r3, #1
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	813b      	strh	r3, [r7, #8]
 8008fae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8008fb2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	dd83      	ble.n	8008ec2 <Paint_DrawCircle+0x66>
            }
            if (Esp < 0 )
 8008fba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	da09      	bge.n	8008fd6 <Paint_DrawCircle+0x17a>
                Esp += 4 * XCurrent + 6;
 8008fc2:	89fb      	ldrh	r3, [r7, #14]
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	b29a      	uxth	r2, r3
 8008fc8:	897b      	ldrh	r3, [r7, #10]
 8008fca:	4413      	add	r3, r2
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	3306      	adds	r3, #6
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	817b      	strh	r3, [r7, #10]
 8008fd4:	e013      	b.n	8008ffe <Paint_DrawCircle+0x1a2>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 8008fd6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8008fda:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008fde:	1ad3      	subs	r3, r2, r3
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	b29a      	uxth	r2, r3
 8008fe6:	897b      	ldrh	r3, [r7, #10]
 8008fe8:	4413      	add	r3, r2
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	330a      	adds	r3, #10
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 8008ff2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 8008ffe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009002:	b29b      	uxth	r3, r3
 8009004:	3301      	adds	r3, #1
 8009006:	b29b      	uxth	r3, r3
 8009008:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) { //Realistic circles
 800900a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800900e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009012:	429a      	cmp	r2, r3
 8009014:	f77f af52 	ble.w	8008ebc <Paint_DrawCircle+0x60>
 8009018:	e0ab      	b.n	8009172 <Paint_DrawCircle+0x316>
 800901a:	bf00      	nop
 800901c:	2400ab40 	.word	0x2400ab40
 8009020:	08015068 	.word	0x08015068
        }
    } else { //Draw a hollow circle
        while (XCurrent <= YCurrent ) {
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
 8009024:	89fa      	ldrh	r2, [r7, #14]
 8009026:	88fb      	ldrh	r3, [r7, #6]
 8009028:	4413      	add	r3, r2
 800902a:	b298      	uxth	r0, r3
 800902c:	89ba      	ldrh	r2, [r7, #12]
 800902e:	88bb      	ldrh	r3, [r7, #4]
 8009030:	4413      	add	r3, r2
 8009032:	b299      	uxth	r1, r3
 8009034:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009038:	883a      	ldrh	r2, [r7, #0]
 800903a:	2401      	movs	r4, #1
 800903c:	9400      	str	r4, [sp, #0]
 800903e:	f7ff fd39 	bl	8008ab4 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//2
 8009042:	89fb      	ldrh	r3, [r7, #14]
 8009044:	88fa      	ldrh	r2, [r7, #6]
 8009046:	1ad3      	subs	r3, r2, r3
 8009048:	b298      	uxth	r0, r3
 800904a:	89ba      	ldrh	r2, [r7, #12]
 800904c:	88bb      	ldrh	r3, [r7, #4]
 800904e:	4413      	add	r3, r2
 8009050:	b299      	uxth	r1, r3
 8009052:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009056:	883a      	ldrh	r2, [r7, #0]
 8009058:	2401      	movs	r4, #1
 800905a:	9400      	str	r4, [sp, #0]
 800905c:	f7ff fd2a 	bl	8008ab4 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//3
 8009060:	89bb      	ldrh	r3, [r7, #12]
 8009062:	88fa      	ldrh	r2, [r7, #6]
 8009064:	1ad3      	subs	r3, r2, r3
 8009066:	b298      	uxth	r0, r3
 8009068:	89fa      	ldrh	r2, [r7, #14]
 800906a:	88bb      	ldrh	r3, [r7, #4]
 800906c:	4413      	add	r3, r2
 800906e:	b299      	uxth	r1, r3
 8009070:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009074:	883a      	ldrh	r2, [r7, #0]
 8009076:	2401      	movs	r4, #1
 8009078:	9400      	str	r4, [sp, #0]
 800907a:	f7ff fd1b 	bl	8008ab4 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//4
 800907e:	89bb      	ldrh	r3, [r7, #12]
 8009080:	88fa      	ldrh	r2, [r7, #6]
 8009082:	1ad3      	subs	r3, r2, r3
 8009084:	b298      	uxth	r0, r3
 8009086:	89fb      	ldrh	r3, [r7, #14]
 8009088:	88ba      	ldrh	r2, [r7, #4]
 800908a:	1ad3      	subs	r3, r2, r3
 800908c:	b299      	uxth	r1, r3
 800908e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009092:	883a      	ldrh	r2, [r7, #0]
 8009094:	2401      	movs	r4, #1
 8009096:	9400      	str	r4, [sp, #0]
 8009098:	f7ff fd0c 	bl	8008ab4 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//5
 800909c:	89fb      	ldrh	r3, [r7, #14]
 800909e:	88fa      	ldrh	r2, [r7, #6]
 80090a0:	1ad3      	subs	r3, r2, r3
 80090a2:	b298      	uxth	r0, r3
 80090a4:	89bb      	ldrh	r3, [r7, #12]
 80090a6:	88ba      	ldrh	r2, [r7, #4]
 80090a8:	1ad3      	subs	r3, r2, r3
 80090aa:	b299      	uxth	r1, r3
 80090ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80090b0:	883a      	ldrh	r2, [r7, #0]
 80090b2:	2401      	movs	r4, #1
 80090b4:	9400      	str	r4, [sp, #0]
 80090b6:	f7ff fcfd 	bl	8008ab4 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//6
 80090ba:	89fa      	ldrh	r2, [r7, #14]
 80090bc:	88fb      	ldrh	r3, [r7, #6]
 80090be:	4413      	add	r3, r2
 80090c0:	b298      	uxth	r0, r3
 80090c2:	89bb      	ldrh	r3, [r7, #12]
 80090c4:	88ba      	ldrh	r2, [r7, #4]
 80090c6:	1ad3      	subs	r3, r2, r3
 80090c8:	b299      	uxth	r1, r3
 80090ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80090ce:	883a      	ldrh	r2, [r7, #0]
 80090d0:	2401      	movs	r4, #1
 80090d2:	9400      	str	r4, [sp, #0]
 80090d4:	f7ff fcee 	bl	8008ab4 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//7
 80090d8:	89ba      	ldrh	r2, [r7, #12]
 80090da:	88fb      	ldrh	r3, [r7, #6]
 80090dc:	4413      	add	r3, r2
 80090de:	b298      	uxth	r0, r3
 80090e0:	89fb      	ldrh	r3, [r7, #14]
 80090e2:	88ba      	ldrh	r2, [r7, #4]
 80090e4:	1ad3      	subs	r3, r2, r3
 80090e6:	b299      	uxth	r1, r3
 80090e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80090ec:	883a      	ldrh	r2, [r7, #0]
 80090ee:	2401      	movs	r4, #1
 80090f0:	9400      	str	r4, [sp, #0]
 80090f2:	f7ff fcdf 	bl	8008ab4 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//0
 80090f6:	89ba      	ldrh	r2, [r7, #12]
 80090f8:	88fb      	ldrh	r3, [r7, #6]
 80090fa:	4413      	add	r3, r2
 80090fc:	b298      	uxth	r0, r3
 80090fe:	89fa      	ldrh	r2, [r7, #14]
 8009100:	88bb      	ldrh	r3, [r7, #4]
 8009102:	4413      	add	r3, r2
 8009104:	b299      	uxth	r1, r3
 8009106:	f897 3020 	ldrb.w	r3, [r7, #32]
 800910a:	883a      	ldrh	r2, [r7, #0]
 800910c:	2401      	movs	r4, #1
 800910e:	9400      	str	r4, [sp, #0]
 8009110:	f7ff fcd0 	bl	8008ab4 <Paint_DrawPoint>

            if (Esp < 0 )
 8009114:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009118:	2b00      	cmp	r3, #0
 800911a:	da09      	bge.n	8009130 <Paint_DrawCircle+0x2d4>
                Esp += 4 * XCurrent + 6;
 800911c:	89fb      	ldrh	r3, [r7, #14]
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	b29a      	uxth	r2, r3
 8009122:	897b      	ldrh	r3, [r7, #10]
 8009124:	4413      	add	r3, r2
 8009126:	b29b      	uxth	r3, r3
 8009128:	3306      	adds	r3, #6
 800912a:	b29b      	uxth	r3, r3
 800912c:	817b      	strh	r3, [r7, #10]
 800912e:	e013      	b.n	8009158 <Paint_DrawCircle+0x2fc>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 8009130:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8009134:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	b29b      	uxth	r3, r3
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	b29a      	uxth	r2, r3
 8009140:	897b      	ldrh	r3, [r7, #10]
 8009142:	4413      	add	r3, r2
 8009144:	b29b      	uxth	r3, r3
 8009146:	330a      	adds	r3, #10
 8009148:	b29b      	uxth	r3, r3
 800914a:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 800914c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009150:	b29b      	uxth	r3, r3
 8009152:	3b01      	subs	r3, #1
 8009154:	b29b      	uxth	r3, r3
 8009156:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 8009158:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800915c:	b29b      	uxth	r3, r3
 800915e:	3301      	adds	r3, #1
 8009160:	b29b      	uxth	r3, r3
 8009162:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) {
 8009164:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8009168:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800916c:	429a      	cmp	r2, r3
 800916e:	f77f af59 	ble.w	8009024 <Paint_DrawCircle+0x1c8>
        }
    }
}
 8009172:	3714      	adds	r7, #20
 8009174:	46bd      	mov	sp, r7
 8009176:	bd90      	pop	{r4, r7, pc}

08009178 <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b088      	sub	sp, #32
 800917c:	af00      	add	r7, sp, #0
 800917e:	607b      	str	r3, [r7, #4]
 8009180:	4603      	mov	r3, r0
 8009182:	81fb      	strh	r3, [r7, #14]
 8009184:	460b      	mov	r3, r1
 8009186:	81bb      	strh	r3, [r7, #12]
 8009188:	4613      	mov	r3, r2
 800918a:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800918c:	4b3f      	ldr	r3, [pc, #252]	; (800928c <Paint_DrawChar+0x114>)
 800918e:	889b      	ldrh	r3, [r3, #4]
 8009190:	b29b      	uxth	r3, r3
 8009192:	89fa      	ldrh	r2, [r7, #14]
 8009194:	429a      	cmp	r2, r3
 8009196:	d805      	bhi.n	80091a4 <Paint_DrawChar+0x2c>
 8009198:	4b3c      	ldr	r3, [pc, #240]	; (800928c <Paint_DrawChar+0x114>)
 800919a:	88db      	ldrh	r3, [r3, #6]
 800919c:	b29b      	uxth	r3, r3
 800919e:	89ba      	ldrh	r2, [r7, #12]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d903      	bls.n	80091ac <Paint_DrawChar+0x34>
    {
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 80091a4:	483a      	ldr	r0, [pc, #232]	; (8009290 <Paint_DrawChar+0x118>)
 80091a6:	f008 f963 	bl	8011470 <puts>
        return;
 80091aa:	e06b      	b.n	8009284 <Paint_DrawChar+0x10c>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 80091ac:	7afb      	ldrb	r3, [r7, #11]
 80091ae:	3b20      	subs	r3, #32
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	88d2      	ldrh	r2, [r2, #6]
 80091b4:	fb02 f303 	mul.w	r3, r2, r3
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	8892      	ldrh	r2, [r2, #4]
 80091bc:	08d2      	lsrs	r2, r2, #3
 80091be:	b292      	uxth	r2, r2
 80091c0:	4611      	mov	r1, r2
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	8892      	ldrh	r2, [r2, #4]
 80091c6:	f002 0207 	and.w	r2, r2, #7
 80091ca:	b292      	uxth	r2, r2
 80091cc:	2a00      	cmp	r2, #0
 80091ce:	bf14      	ite	ne
 80091d0:	2201      	movne	r2, #1
 80091d2:	2200      	moveq	r2, #0
 80091d4:	b2d2      	uxtb	r2, r2
 80091d6:	440a      	add	r2, r1
 80091d8:	fb02 f303 	mul.w	r3, r2, r3
 80091dc:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	4413      	add	r3, r2
 80091e6:	61fb      	str	r3, [r7, #28]

    for (Page = 0; Page < Font->Height; Page ++ )
 80091e8:	2300      	movs	r3, #0
 80091ea:	837b      	strh	r3, [r7, #26]
 80091ec:	e045      	b.n	800927a <Paint_DrawChar+0x102>
    {
        for (Column = 0; Column < Font->Width; Column ++ )
 80091ee:	2300      	movs	r3, #0
 80091f0:	833b      	strh	r3, [r7, #24]
 80091f2:	e030      	b.n	8009256 <Paint_DrawChar+0xde>
                }
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            }
            else
            {
                if (*ptr & (0x80 >> (Column % 8)))
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	4619      	mov	r1, r3
 80091fa:	8b3b      	ldrh	r3, [r7, #24]
 80091fc:	f003 0307 	and.w	r3, r3, #7
 8009200:	2280      	movs	r2, #128	; 0x80
 8009202:	fa42 f303 	asr.w	r3, r2, r3
 8009206:	400b      	ands	r3, r1
 8009208:	2b00      	cmp	r3, #0
 800920a:	d00c      	beq.n	8009226 <Paint_DrawChar+0xae>
                {

//                    if (!renderCompleteFrame)
//                    {
                    	Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800920c:	89fa      	ldrh	r2, [r7, #14]
 800920e:	8b3b      	ldrh	r3, [r7, #24]
 8009210:	4413      	add	r3, r2
 8009212:	b298      	uxth	r0, r3
 8009214:	89ba      	ldrh	r2, [r7, #12]
 8009216:	8b7b      	ldrh	r3, [r7, #26]
 8009218:	4413      	add	r3, r2
 800921a:	b29b      	uxth	r3, r3
 800921c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800921e:	4619      	mov	r1, r3
 8009220:	f7ff fb5a 	bl	80088d8 <Paint_SetPixel>
 8009224:	e00b      	b.n	800923e <Paint_DrawChar+0xc6>
                }
                else
                {
//                	if (!renderCompleteFrame)
//                	{
                		Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8009226:	89fa      	ldrh	r2, [r7, #14]
 8009228:	8b3b      	ldrh	r3, [r7, #24]
 800922a:	4413      	add	r3, r2
 800922c:	b298      	uxth	r0, r3
 800922e:	89ba      	ldrh	r2, [r7, #12]
 8009230:	8b7b      	ldrh	r3, [r7, #26]
 8009232:	4413      	add	r3, r2
 8009234:	b29b      	uxth	r3, r3
 8009236:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009238:	4619      	mov	r1, r3
 800923a:	f7ff fb4d 	bl	80088d8 <Paint_SetPixel>
//                	}
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 800923e:	8b3b      	ldrh	r3, [r7, #24]
 8009240:	f003 0307 	and.w	r3, r3, #7
 8009244:	b29b      	uxth	r3, r3
 8009246:	2b07      	cmp	r3, #7
 8009248:	d102      	bne.n	8009250 <Paint_DrawChar+0xd8>
            {
                ptr++;
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	3301      	adds	r3, #1
 800924e:	61fb      	str	r3, [r7, #28]
        for (Column = 0; Column < Font->Width; Column ++ )
 8009250:	8b3b      	ldrh	r3, [r7, #24]
 8009252:	3301      	adds	r3, #1
 8009254:	833b      	strh	r3, [r7, #24]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	889b      	ldrh	r3, [r3, #4]
 800925a:	8b3a      	ldrh	r2, [r7, #24]
 800925c:	429a      	cmp	r2, r3
 800925e:	d3c9      	bcc.n	80091f4 <Paint_DrawChar+0x7c>
            }
        }// Write a line
        if (Font->Width % 8 != 0)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	889b      	ldrh	r3, [r3, #4]
 8009264:	f003 0307 	and.w	r3, r3, #7
 8009268:	b29b      	uxth	r3, r3
 800926a:	2b00      	cmp	r3, #0
 800926c:	d002      	beq.n	8009274 <Paint_DrawChar+0xfc>
        {
            ptr++;
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	3301      	adds	r3, #1
 8009272:	61fb      	str	r3, [r7, #28]
    for (Page = 0; Page < Font->Height; Page ++ )
 8009274:	8b7b      	ldrh	r3, [r7, #26]
 8009276:	3301      	adds	r3, #1
 8009278:	837b      	strh	r3, [r7, #26]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	88db      	ldrh	r3, [r3, #6]
 800927e:	8b7a      	ldrh	r2, [r7, #26]
 8009280:	429a      	cmp	r2, r3
 8009282:	d3b4      	bcc.n	80091ee <Paint_DrawChar+0x76>
        }
    }// Write all
}
 8009284:	3720      	adds	r7, #32
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	2400ab40 	.word	0x2400ab40
 8009290:	080150ac 	.word	0x080150ac

08009294 <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b088      	sub	sp, #32
 8009298:	af02      	add	r7, sp, #8
 800929a:	60ba      	str	r2, [r7, #8]
 800929c:	607b      	str	r3, [r7, #4]
 800929e:	4603      	mov	r3, r0
 80092a0:	81fb      	strh	r3, [r7, #14]
 80092a2:	460b      	mov	r3, r1
 80092a4:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 80092a6:	89fb      	ldrh	r3, [r7, #14]
 80092a8:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 80092aa:	89bb      	ldrh	r3, [r7, #12]
 80092ac:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 80092ae:	4b23      	ldr	r3, [pc, #140]	; (800933c <Paint_DrawString_EN+0xa8>)
 80092b0:	889b      	ldrh	r3, [r3, #4]
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	89fa      	ldrh	r2, [r7, #14]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d805      	bhi.n	80092c6 <Paint_DrawString_EN+0x32>
 80092ba:	4b20      	ldr	r3, [pc, #128]	; (800933c <Paint_DrawString_EN+0xa8>)
 80092bc:	88db      	ldrh	r3, [r3, #6]
 80092be:	b29b      	uxth	r3, r3
 80092c0:	89ba      	ldrh	r2, [r7, #12]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d933      	bls.n	800932e <Paint_DrawString_EN+0x9a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 80092c6:	481e      	ldr	r0, [pc, #120]	; (8009340 <Paint_DrawString_EN+0xac>)
 80092c8:	f008 f8d2 	bl	8011470 <puts>
        return;
 80092cc:	e033      	b.n	8009336 <Paint_DrawString_EN+0xa2>
    }

    while (* pString != '\0')
    {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width )
 80092ce:	8afb      	ldrh	r3, [r7, #22]
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	8892      	ldrh	r2, [r2, #4]
 80092d4:	4413      	add	r3, r2
 80092d6:	4a19      	ldr	r2, [pc, #100]	; (800933c <Paint_DrawString_EN+0xa8>)
 80092d8:	8892      	ldrh	r2, [r2, #4]
 80092da:	b292      	uxth	r2, r2
 80092dc:	4293      	cmp	r3, r2
 80092de:	dd06      	ble.n	80092ee <Paint_DrawString_EN+0x5a>
        {
            Xpoint = Xstart;
 80092e0:	89fb      	ldrh	r3, [r7, #14]
 80092e2:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	88da      	ldrh	r2, [r3, #6]
 80092e8:	8abb      	ldrh	r3, [r7, #20]
 80092ea:	4413      	add	r3, r2
 80092ec:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height )
 80092ee:	8abb      	ldrh	r3, [r7, #20]
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	88d2      	ldrh	r2, [r2, #6]
 80092f4:	4413      	add	r3, r2
 80092f6:	4a11      	ldr	r2, [pc, #68]	; (800933c <Paint_DrawString_EN+0xa8>)
 80092f8:	88d2      	ldrh	r2, [r2, #6]
 80092fa:	b292      	uxth	r2, r2
 80092fc:	4293      	cmp	r3, r2
 80092fe:	dd03      	ble.n	8009308 <Paint_DrawString_EN+0x74>
        {
            Xpoint = Xstart;
 8009300:	89fb      	ldrh	r3, [r7, #14]
 8009302:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8009304:	89bb      	ldrh	r3, [r7, #12]
 8009306:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	781a      	ldrb	r2, [r3, #0]
 800930c:	8ab9      	ldrh	r1, [r7, #20]
 800930e:	8af8      	ldrh	r0, [r7, #22]
 8009310:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009312:	9301      	str	r3, [sp, #4]
 8009314:	8c3b      	ldrh	r3, [r7, #32]
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f7ff ff2d 	bl	8009178 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	3301      	adds	r3, #1
 8009322:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	889a      	ldrh	r2, [r3, #4]
 8009328:	8afb      	ldrh	r3, [r7, #22]
 800932a:	4413      	add	r3, r2
 800932c:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0')
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1cb      	bne.n	80092ce <Paint_DrawString_EN+0x3a>
    }
}
 8009336:	3718      	adds	r7, #24
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	2400ab40 	.word	0x2400ab40
 8009340:	080150ec 	.word	0x080150ec

08009344 <Paint_DrawFloatNum>:
    Font             ：A structure pointer that displays a character size
    Color            : Select the background color of the English character
******************************************************************************/
void Paint_DrawFloatNum(UWORD Xpoint, UWORD Ypoint, double Nummber,  UBYTE Decimal_Point, 
                        sFONT* Font,  UWORD Color_Background, UWORD Color_Foreground)
{
 8009344:	b590      	push	{r4, r7, lr}
 8009346:	b0cb      	sub	sp, #300	; 0x12c
 8009348:	af02      	add	r7, sp, #8
 800934a:	4604      	mov	r4, r0
 800934c:	4608      	mov	r0, r1
 800934e:	f107 0108 	add.w	r1, r7, #8
 8009352:	ed81 0b00 	vstr	d0, [r1]
 8009356:	4611      	mov	r1, r2
 8009358:	1d3a      	adds	r2, r7, #4
 800935a:	6013      	str	r3, [r2, #0]
 800935c:	f107 0316 	add.w	r3, r7, #22
 8009360:	4622      	mov	r2, r4
 8009362:	801a      	strh	r2, [r3, #0]
 8009364:	f107 0314 	add.w	r3, r7, #20
 8009368:	4602      	mov	r2, r0
 800936a:	801a      	strh	r2, [r3, #0]
 800936c:	f107 0313 	add.w	r3, r7, #19
 8009370:	460a      	mov	r2, r1
 8009372:	701a      	strb	r2, [r3, #0]
    char Str[ARRAY_LEN] = "";
 8009374:	f107 031c 	add.w	r3, r7, #28
 8009378:	2200      	movs	r2, #0
 800937a:	601a      	str	r2, [r3, #0]
 800937c:	3304      	adds	r3, #4
 800937e:	22fb      	movs	r2, #251	; 0xfb
 8009380:	2100      	movs	r1, #0
 8009382:	4618      	mov	r0, r3
 8009384:	f006 ff9a 	bl	80102bc <memset>
    sprintf(Str,"%.*lf",Decimal_Point+2,Nummber);
 8009388:	f107 0313 	add.w	r3, r7, #19
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	1c99      	adds	r1, r3, #2
 8009390:	f107 001c 	add.w	r0, r7, #28
 8009394:	f107 0308 	add.w	r3, r7, #8
 8009398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939c:	e9cd 2300 	strd	r2, r3, [sp]
 80093a0:	460a      	mov	r2, r1
 80093a2:	4930      	ldr	r1, [pc, #192]	; (8009464 <Paint_DrawFloatNum+0x120>)
 80093a4:	f008 f8b6 	bl	8011514 <siprintf>
    char * pStr= (char *)malloc((strlen(Str))*sizeof(char));
 80093a8:	f107 031c 	add.w	r3, r7, #28
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7f6 ffa1 	bl	80002f4 <strlen>
 80093b2:	4603      	mov	r3, r0
 80093b4:	4618      	mov	r0, r3
 80093b6:	f006 ff49 	bl	801024c <malloc>
 80093ba:	4603      	mov	r3, r0
 80093bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    memcpy(pStr,Str,(strlen(Str)-2));
 80093c0:	f107 031c 	add.w	r3, r7, #28
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7f6 ff95 	bl	80002f4 <strlen>
 80093ca:	4603      	mov	r3, r0
 80093cc:	1e9a      	subs	r2, r3, #2
 80093ce:	f107 031c 	add.w	r3, r7, #28
 80093d2:	4619      	mov	r1, r3
 80093d4:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80093d8:	f006 ff48 	bl	801026c <memcpy>
    * (pStr+strlen(Str)-2)='\0';
 80093dc:	f107 031c 	add.w	r3, r7, #28
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7f6 ff87 	bl	80002f4 <strlen>
 80093e6:	4603      	mov	r3, r0
 80093e8:	3b02      	subs	r3, #2
 80093ea:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80093ee:	4413      	add	r3, r2
 80093f0:	2200      	movs	r2, #0
 80093f2:	701a      	strb	r2, [r3, #0]
    if((*(pStr+strlen(Str)-3))=='.')
 80093f4:	f107 031c 	add.w	r3, r7, #28
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7f6 ff7b 	bl	80002f4 <strlen>
 80093fe:	4603      	mov	r3, r0
 8009400:	3b03      	subs	r3, #3
 8009402:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009406:	4413      	add	r3, r2
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	2b2e      	cmp	r3, #46	; 0x2e
 800940c:	d10b      	bne.n	8009426 <Paint_DrawFloatNum+0xe2>
    {
      *(pStr+strlen(Str)-3)='\0';
 800940e:	f107 031c 	add.w	r3, r7, #28
 8009412:	4618      	mov	r0, r3
 8009414:	f7f6 ff6e 	bl	80002f4 <strlen>
 8009418:	4603      	mov	r3, r0
 800941a:	3b03      	subs	r3, #3
 800941c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009420:	4413      	add	r3, r2
 8009422:	2200      	movs	r2, #0
 8009424:	701a      	strb	r2, [r3, #0]
    }
    //show
    Paint_DrawString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Foreground, Color_Background);
 8009426:	1d3b      	adds	r3, r7, #4
 8009428:	f107 0214 	add.w	r2, r7, #20
 800942c:	8811      	ldrh	r1, [r2, #0]
 800942e:	f107 0216 	add.w	r2, r7, #22
 8009432:	8810      	ldrh	r0, [r2, #0]
 8009434:	f8b7 2130 	ldrh.w	r2, [r7, #304]	; 0x130
 8009438:	9201      	str	r2, [sp, #4]
 800943a:	f8b7 2134 	ldrh.w	r2, [r7, #308]	; 0x134
 800943e:	9200      	str	r2, [sp, #0]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009446:	f7ff ff25 	bl	8009294 <Paint_DrawString_EN>
    free(pStr);
 800944a:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800944e:	f006 ff05 	bl	801025c <free>
    pStr=NULL;
 8009452:	2300      	movs	r3, #0
 8009454:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
}
 8009458:	bf00      	nop
 800945a:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800945e:	46bd      	mov	sp, r7
 8009460:	bd90      	pop	{r4, r7, pc}
 8009462:	bf00      	nop
 8009464:	08015170 	.word	0x08015170

08009468 <Paint_DrawImage>:
    yStart           : Y starting coordinates
    xEnd             ：Image width
    yEnd             : Image height
******************************************************************************/
void Paint_DrawImage(const unsigned char *image, UWORD xStart, UWORD yStart, UWORD W_Image, UWORD H_Image) 
{
 8009468:	b590      	push	{r4, r7, lr}
 800946a:	b087      	sub	sp, #28
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	4608      	mov	r0, r1
 8009472:	4611      	mov	r1, r2
 8009474:	461a      	mov	r2, r3
 8009476:	4603      	mov	r3, r0
 8009478:	817b      	strh	r3, [r7, #10]
 800947a:	460b      	mov	r3, r1
 800947c:	813b      	strh	r3, [r7, #8]
 800947e:	4613      	mov	r3, r2
 8009480:	80fb      	strh	r3, [r7, #6]
	int i,j;
	for(j = 0; j < H_Image; j++)
 8009482:	2300      	movs	r3, #0
 8009484:	613b      	str	r3, [r7, #16]
 8009486:	e049      	b.n	800951c <Paint_DrawImage+0xb4>
	{
		for(i = 0; i < W_Image; i++)
 8009488:	2300      	movs	r3, #0
 800948a:	617b      	str	r3, [r7, #20]
 800948c:	e03f      	b.n	800950e <Paint_DrawImage+0xa6>
		{
			if(xStart+i < Paint.WidthMemory  &&  yStart+j < Paint.HeightMemory)//Exceeded part does not display
 800948e:	897a      	ldrh	r2, [r7, #10]
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	4413      	add	r3, r2
 8009494:	4a26      	ldr	r2, [pc, #152]	; (8009530 <Paint_DrawImage+0xc8>)
 8009496:	8912      	ldrh	r2, [r2, #8]
 8009498:	b292      	uxth	r2, r2
 800949a:	4293      	cmp	r3, r2
 800949c:	da34      	bge.n	8009508 <Paint_DrawImage+0xa0>
 800949e:	893a      	ldrh	r2, [r7, #8]
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	4413      	add	r3, r2
 80094a4:	4a22      	ldr	r2, [pc, #136]	; (8009530 <Paint_DrawImage+0xc8>)
 80094a6:	8952      	ldrh	r2, [r2, #10]
 80094a8:	b292      	uxth	r2, r2
 80094aa:	4293      	cmp	r3, r2
 80094ac:	da2c      	bge.n	8009508 <Paint_DrawImage+0xa0>
			{
				Paint_SetPixel(xStart + i, yStart + j, (*(image + j*W_Image*2 + i*2+1))<<8 | (*(image + j*W_Image*2 + i*2)));
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	b29a      	uxth	r2, r3
 80094b2:	897b      	ldrh	r3, [r7, #10]
 80094b4:	4413      	add	r3, r2
 80094b6:	b298      	uxth	r0, r3
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	b29a      	uxth	r2, r3
 80094bc:	893b      	ldrh	r3, [r7, #8]
 80094be:	4413      	add	r3, r2
 80094c0:	b29c      	uxth	r4, r3
 80094c2:	88fb      	ldrh	r3, [r7, #6]
 80094c4:	693a      	ldr	r2, [r7, #16]
 80094c6:	fb02 f303 	mul.w	r3, r2, r3
 80094ca:	005b      	lsls	r3, r3, #1
 80094cc:	461a      	mov	r2, r3
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	005b      	lsls	r3, r3, #1
 80094d2:	4413      	add	r3, r2
 80094d4:	3301      	adds	r3, #1
 80094d6:	68fa      	ldr	r2, [r7, #12]
 80094d8:	4413      	add	r3, r2
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	021b      	lsls	r3, r3, #8
 80094de:	b21a      	sxth	r2, r3
 80094e0:	88fb      	ldrh	r3, [r7, #6]
 80094e2:	6939      	ldr	r1, [r7, #16]
 80094e4:	fb01 f303 	mul.w	r3, r1, r3
 80094e8:	005b      	lsls	r3, r3, #1
 80094ea:	4619      	mov	r1, r3
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	005b      	lsls	r3, r3, #1
 80094f0:	440b      	add	r3, r1
 80094f2:	68f9      	ldr	r1, [r7, #12]
 80094f4:	440b      	add	r3, r1
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	b21b      	sxth	r3, r3
 80094fa:	4313      	orrs	r3, r2
 80094fc:	b21b      	sxth	r3, r3
 80094fe:	b29b      	uxth	r3, r3
 8009500:	461a      	mov	r2, r3
 8009502:	4621      	mov	r1, r4
 8009504:	f7ff f9e8 	bl	80088d8 <Paint_SetPixel>
		for(i = 0; i < W_Image; i++)
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	3301      	adds	r3, #1
 800950c:	617b      	str	r3, [r7, #20]
 800950e:	88fb      	ldrh	r3, [r7, #6]
 8009510:	697a      	ldr	r2, [r7, #20]
 8009512:	429a      	cmp	r2, r3
 8009514:	dbbb      	blt.n	800948e <Paint_DrawImage+0x26>
	for(j = 0; j < H_Image; j++)
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	3301      	adds	r3, #1
 800951a:	613b      	str	r3, [r7, #16]
 800951c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800951e:	693a      	ldr	r2, [r7, #16]
 8009520:	429a      	cmp	r2, r3
 8009522:	dbb1      	blt.n	8009488 <Paint_DrawImage+0x20>
			//Using arrays is a property of sequential storage, accessing the original array by algorithm
			//j*W_Image*2 			   Y offset
			//i*2              	   X offset
		}
	}
}
 8009524:	bf00      	nop
 8009526:	bf00      	nop
 8009528:	371c      	adds	r7, #28
 800952a:	46bd      	mov	sp, r7
 800952c:	bd90      	pop	{r4, r7, pc}
 800952e:	bf00      	nop
 8009530:	2400ab40 	.word	0x2400ab40

08009534 <LCD_1IN8_Reset>:
/*******************************************************************************
function:
			Hardware reset
*******************************************************************************/
static void LCD_1IN8_Reset(void)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	af00      	add	r7, sp, #0
    LCD_1IN8_RST_1;
 8009538:	2201      	movs	r2, #1
 800953a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800953e:	480d      	ldr	r0, [pc, #52]	; (8009574 <LCD_1IN8_Reset+0x40>)
 8009540:	f7f9 fd08 	bl	8002f54 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8009544:	2064      	movs	r0, #100	; 0x64
 8009546:	f7f8 fd6f 	bl	8002028 <HAL_Delay>
    LCD_1IN8_RST_0;
 800954a:	2200      	movs	r2, #0
 800954c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009550:	4808      	ldr	r0, [pc, #32]	; (8009574 <LCD_1IN8_Reset+0x40>)
 8009552:	f7f9 fcff 	bl	8002f54 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8009556:	2064      	movs	r0, #100	; 0x64
 8009558:	f7f8 fd66 	bl	8002028 <HAL_Delay>
    LCD_1IN8_RST_1;
 800955c:	2201      	movs	r2, #1
 800955e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009562:	4804      	ldr	r0, [pc, #16]	; (8009574 <LCD_1IN8_Reset+0x40>)
 8009564:	f7f9 fcf6 	bl	8002f54 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8009568:	2064      	movs	r0, #100	; 0x64
 800956a:	f7f8 fd5d 	bl	8002028 <HAL_Delay>
}
 800956e:	bf00      	nop
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	58021400 	.word	0x58021400

08009578 <LCD_1IN8_WriteReg>:
/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
static void LCD_1IN8_WriteReg(uint8_t Reg)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
 800957e:	4603      	mov	r3, r0
 8009580:	71fb      	strb	r3, [r7, #7]
    LCD_1IN8_DC_0;
 8009582:	2200      	movs	r2, #0
 8009584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009588:	4807      	ldr	r0, [pc, #28]	; (80095a8 <LCD_1IN8_WriteReg+0x30>)
 800958a:	f7f9 fce3 	bl	8002f54 <HAL_GPIO_WritePin>
    LCD_1IN8_CS_0;
 800958e:	2200      	movs	r2, #0
 8009590:	2140      	movs	r1, #64	; 0x40
 8009592:	4805      	ldr	r0, [pc, #20]	; (80095a8 <LCD_1IN8_WriteReg+0x30>)
 8009594:	f7f9 fcde 	bl	8002f54 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Reg);
 8009598:	79fb      	ldrb	r3, [r7, #7]
 800959a:	4618      	mov	r0, r3
 800959c:	f7ff f8fe 	bl	800879c <DEV_SPI_WRite>
    //LCD_1IN8_CS_1;
}
 80095a0:	bf00      	nop
 80095a2:	3708      	adds	r7, #8
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	58021800 	.word	0x58021800

080095ac <LCD_1IN8_WriteData_8Bit>:

static void LCD_1IN8_WriteData_8Bit(uint8_t Data)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	4603      	mov	r3, r0
 80095b4:	71fb      	strb	r3, [r7, #7]
    LCD_1IN8_DC_1;
 80095b6:	2201      	movs	r2, #1
 80095b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80095bc:	480a      	ldr	r0, [pc, #40]	; (80095e8 <LCD_1IN8_WriteData_8Bit+0x3c>)
 80095be:	f7f9 fcc9 	bl	8002f54 <HAL_GPIO_WritePin>
    LCD_1IN8_CS_0;
 80095c2:	2200      	movs	r2, #0
 80095c4:	2140      	movs	r1, #64	; 0x40
 80095c6:	4808      	ldr	r0, [pc, #32]	; (80095e8 <LCD_1IN8_WriteData_8Bit+0x3c>)
 80095c8:	f7f9 fcc4 	bl	8002f54 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data);
 80095cc:	79fb      	ldrb	r3, [r7, #7]
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7ff f8e4 	bl	800879c <DEV_SPI_WRite>
    LCD_1IN8_CS_1;
 80095d4:	2201      	movs	r2, #1
 80095d6:	2140      	movs	r1, #64	; 0x40
 80095d8:	4803      	ldr	r0, [pc, #12]	; (80095e8 <LCD_1IN8_WriteData_8Bit+0x3c>)
 80095da:	f7f9 fcbb 	bl	8002f54 <HAL_GPIO_WritePin>
}
 80095de:	bf00      	nop
 80095e0:	3708      	adds	r7, #8
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	58021800 	.word	0x58021800

080095ec <LCD_1IN8_WriteData_NLen16Bit>:
    DEV_SPI_WRITE(Data & 0XFF);
    //LCD_1IN8_CS_1;
}*/

void LCD_1IN8_WriteData_NLen16Bit(uint16_t Data,uint32_t DataLen)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	4603      	mov	r3, r0
 80095f4:	6039      	str	r1, [r7, #0]
 80095f6:	80fb      	strh	r3, [r7, #6]
    uint32_t i;
    LCD_1IN8_DC_1;
 80095f8:	2201      	movs	r2, #1
 80095fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80095fe:	480f      	ldr	r0, [pc, #60]	; (800963c <LCD_1IN8_WriteData_NLen16Bit+0x50>)
 8009600:	f7f9 fca8 	bl	8002f54 <HAL_GPIO_WritePin>
    //LCD_1IN8_CS_0;
    for(i = 0; i < DataLen; i++) {
 8009604:	2300      	movs	r3, #0
 8009606:	60fb      	str	r3, [r7, #12]
 8009608:	e00e      	b.n	8009628 <LCD_1IN8_WriteData_NLen16Bit+0x3c>
        DEV_SPI_WRITE( (uint8_t)(Data >> 8) );
 800960a:	88fb      	ldrh	r3, [r7, #6]
 800960c:	0a1b      	lsrs	r3, r3, #8
 800960e:	b29b      	uxth	r3, r3
 8009610:	b2db      	uxtb	r3, r3
 8009612:	4618      	mov	r0, r3
 8009614:	f7ff f8c2 	bl	800879c <DEV_SPI_WRite>
        DEV_SPI_WRITE( (uint8_t)(Data & 0XFF) );
 8009618:	88fb      	ldrh	r3, [r7, #6]
 800961a:	b2db      	uxtb	r3, r3
 800961c:	4618      	mov	r0, r3
 800961e:	f7ff f8bd 	bl	800879c <DEV_SPI_WRite>
    for(i = 0; i < DataLen; i++) {
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	3301      	adds	r3, #1
 8009626:	60fb      	str	r3, [r7, #12]
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	429a      	cmp	r2, r3
 800962e:	d3ec      	bcc.n	800960a <LCD_1IN8_WriteData_NLen16Bit+0x1e>
    }
    //LCD_1IN8_CS_1;
}
 8009630:	bf00      	nop
 8009632:	bf00      	nop
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	58021800 	.word	0x58021800

08009640 <LCD_1IN8_InitReg>:
/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_1IN8_InitReg(void)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	af00      	add	r7, sp, #0
    //ST7735R Frame Rate
    LCD_1IN8_WriteReg(0xB1);
 8009644:	20b1      	movs	r0, #177	; 0xb1
 8009646:	f7ff ff97 	bl	8009578 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 800964a:	2001      	movs	r0, #1
 800964c:	f7ff ffae 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 8009650:	202c      	movs	r0, #44	; 0x2c
 8009652:	f7ff ffab 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 8009656:	202d      	movs	r0, #45	; 0x2d
 8009658:	f7ff ffa8 	bl	80095ac <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB2);
 800965c:	20b2      	movs	r0, #178	; 0xb2
 800965e:	f7ff ff8b 	bl	8009578 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 8009662:	2001      	movs	r0, #1
 8009664:	f7ff ffa2 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 8009668:	202c      	movs	r0, #44	; 0x2c
 800966a:	f7ff ff9f 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 800966e:	202d      	movs	r0, #45	; 0x2d
 8009670:	f7ff ff9c 	bl	80095ac <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB3);
 8009674:	20b3      	movs	r0, #179	; 0xb3
 8009676:	f7ff ff7f 	bl	8009578 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 800967a:	2001      	movs	r0, #1
 800967c:	f7ff ff96 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 8009680:	202c      	movs	r0, #44	; 0x2c
 8009682:	f7ff ff93 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 8009686:	202d      	movs	r0, #45	; 0x2d
 8009688:	f7ff ff90 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x01);
 800968c:	2001      	movs	r0, #1
 800968e:	f7ff ff8d 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 8009692:	202c      	movs	r0, #44	; 0x2c
 8009694:	f7ff ff8a 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 8009698:	202d      	movs	r0, #45	; 0x2d
 800969a:	f7ff ff87 	bl	80095ac <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB4); //Column inversion
 800969e:	20b4      	movs	r0, #180	; 0xb4
 80096a0:	f7ff ff6a 	bl	8009578 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x07);
 80096a4:	2007      	movs	r0, #7
 80096a6:	f7ff ff81 	bl	80095ac <LCD_1IN8_WriteData_8Bit>

    //ST7735R Power Sequence
    LCD_1IN8_WriteReg(0xC0);
 80096aa:	20c0      	movs	r0, #192	; 0xc0
 80096ac:	f7ff ff64 	bl	8009578 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0xA2);
 80096b0:	20a2      	movs	r0, #162	; 0xa2
 80096b2:	f7ff ff7b 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x02);
 80096b6:	2002      	movs	r0, #2
 80096b8:	f7ff ff78 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x84);
 80096bc:	2084      	movs	r0, #132	; 0x84
 80096be:	f7ff ff75 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteReg(0xC1);
 80096c2:	20c1      	movs	r0, #193	; 0xc1
 80096c4:	f7ff ff58 	bl	8009578 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0xC5);
 80096c8:	20c5      	movs	r0, #197	; 0xc5
 80096ca:	f7ff ff6f 	bl	80095ac <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC2);
 80096ce:	20c2      	movs	r0, #194	; 0xc2
 80096d0:	f7ff ff52 	bl	8009578 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0A);
 80096d4:	200a      	movs	r0, #10
 80096d6:	f7ff ff69 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 80096da:	2000      	movs	r0, #0
 80096dc:	f7ff ff66 	bl	80095ac <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC3);
 80096e0:	20c3      	movs	r0, #195	; 0xc3
 80096e2:	f7ff ff49 	bl	8009578 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x8A);
 80096e6:	208a      	movs	r0, #138	; 0x8a
 80096e8:	f7ff ff60 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2A);
 80096ec:	202a      	movs	r0, #42	; 0x2a
 80096ee:	f7ff ff5d 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteReg(0xC4);
 80096f2:	20c4      	movs	r0, #196	; 0xc4
 80096f4:	f7ff ff40 	bl	8009578 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x8A);
 80096f8:	208a      	movs	r0, #138	; 0x8a
 80096fa:	f7ff ff57 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0xEE);
 80096fe:	20ee      	movs	r0, #238	; 0xee
 8009700:	f7ff ff54 	bl	80095ac <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC5); //VCOM
 8009704:	20c5      	movs	r0, #197	; 0xc5
 8009706:	f7ff ff37 	bl	8009578 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0E);
 800970a:	200e      	movs	r0, #14
 800970c:	f7ff ff4e 	bl	80095ac <LCD_1IN8_WriteData_8Bit>

    //ST7735R Gamma Sequence
    LCD_1IN8_WriteReg(0xe0);
 8009710:	20e0      	movs	r0, #224	; 0xe0
 8009712:	f7ff ff31 	bl	8009578 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0f);
 8009716:	200f      	movs	r0, #15
 8009718:	f7ff ff48 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1a);
 800971c:	201a      	movs	r0, #26
 800971e:	f7ff ff45 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x0f);
 8009722:	200f      	movs	r0, #15
 8009724:	f7ff ff42 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x18);
 8009728:	2018      	movs	r0, #24
 800972a:	f7ff ff3f 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2f);
 800972e:	202f      	movs	r0, #47	; 0x2f
 8009730:	f7ff ff3c 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x28);
 8009734:	2028      	movs	r0, #40	; 0x28
 8009736:	f7ff ff39 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x20);
 800973a:	2020      	movs	r0, #32
 800973c:	f7ff ff36 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x22);
 8009740:	2022      	movs	r0, #34	; 0x22
 8009742:	f7ff ff33 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1f);
 8009746:	201f      	movs	r0, #31
 8009748:	f7ff ff30 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1b);
 800974c:	201b      	movs	r0, #27
 800974e:	f7ff ff2d 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x23);
 8009752:	2023      	movs	r0, #35	; 0x23
 8009754:	f7ff ff2a 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x37);
 8009758:	2037      	movs	r0, #55	; 0x37
 800975a:	f7ff ff27 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 800975e:	2000      	movs	r0, #0
 8009760:	f7ff ff24 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x07);
 8009764:	2007      	movs	r0, #7
 8009766:	f7ff ff21 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x02);
 800976a:	2002      	movs	r0, #2
 800976c:	f7ff ff1e 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x10);
 8009770:	2010      	movs	r0, #16
 8009772:	f7ff ff1b 	bl	80095ac <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xe1);
 8009776:	20e1      	movs	r0, #225	; 0xe1
 8009778:	f7ff fefe 	bl	8009578 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0f);
 800977c:	200f      	movs	r0, #15
 800977e:	f7ff ff15 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1b);
 8009782:	201b      	movs	r0, #27
 8009784:	f7ff ff12 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x0f);
 8009788:	200f      	movs	r0, #15
 800978a:	f7ff ff0f 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x17);
 800978e:	2017      	movs	r0, #23
 8009790:	f7ff ff0c 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x33);
 8009794:	2033      	movs	r0, #51	; 0x33
 8009796:	f7ff ff09 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2c);
 800979a:	202c      	movs	r0, #44	; 0x2c
 800979c:	f7ff ff06 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x29);
 80097a0:	2029      	movs	r0, #41	; 0x29
 80097a2:	f7ff ff03 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2e);
 80097a6:	202e      	movs	r0, #46	; 0x2e
 80097a8:	f7ff ff00 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x30);
 80097ac:	2030      	movs	r0, #48	; 0x30
 80097ae:	f7ff fefd 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x30);
 80097b2:	2030      	movs	r0, #48	; 0x30
 80097b4:	f7ff fefa 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x39);
 80097b8:	2039      	movs	r0, #57	; 0x39
 80097ba:	f7ff fef7 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x3f);
 80097be:	203f      	movs	r0, #63	; 0x3f
 80097c0:	f7ff fef4 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 80097c4:	2000      	movs	r0, #0
 80097c6:	f7ff fef1 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x07);
 80097ca:	2007      	movs	r0, #7
 80097cc:	f7ff feee 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x03);
 80097d0:	2003      	movs	r0, #3
 80097d2:	f7ff feeb 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x10);
 80097d6:	2010      	movs	r0, #16
 80097d8:	f7ff fee8 	bl	80095ac <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xF0); //Enable test command
 80097dc:	20f0      	movs	r0, #240	; 0xf0
 80097de:	f7ff fecb 	bl	8009578 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 80097e2:	2001      	movs	r0, #1
 80097e4:	f7ff fee2 	bl	80095ac <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xF6); //Disable ram power save mode
 80097e8:	20f6      	movs	r0, #246	; 0xf6
 80097ea:	f7ff fec5 	bl	8009578 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x00);
 80097ee:	2000      	movs	r0, #0
 80097f0:	f7ff fedc 	bl	80095ac <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0x3A); //65k mode
 80097f4:	203a      	movs	r0, #58	; 0x3a
 80097f6:	f7ff febf 	bl	8009578 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x05);
 80097fa:	2005      	movs	r0, #5
 80097fc:	f7ff fed6 	bl	80095ac <LCD_1IN8_WriteData_8Bit>

}
 8009800:	bf00      	nop
 8009802:	bd80      	pop	{r7, pc}

08009804 <LCD_1IN8_SetGramScanWay>:
parameter:
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_1IN8_SetGramScanWay(LCD_1IN8_SCAN_DIR Scan_dir)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	4603      	mov	r3, r0
 800980c:	71fb      	strb	r3, [r7, #7]
    //Get the screen scan direction
    sLCD_1IN8_DIS.LCD_1IN8_Scan_Dir = Scan_dir;
 800980e:	4a34      	ldr	r2, [pc, #208]	; (80098e0 <LCD_1IN8_SetGramScanWay+0xdc>)
 8009810:	79fb      	ldrb	r3, [r7, #7]
 8009812:	7113      	strb	r3, [r2, #4]

	//Get GRAM and LCD width and height
	if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U)
 8009814:	79fb      	ldrb	r3, [r7, #7]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d008      	beq.n	800982c <LCD_1IN8_SetGramScanWay+0x28>
 800981a:	79fb      	ldrb	r3, [r7, #7]
 800981c:	2b01      	cmp	r3, #1
 800981e:	d005      	beq.n	800982c <LCD_1IN8_SetGramScanWay+0x28>
 8009820:	79fb      	ldrb	r3, [r7, #7]
 8009822:	2b02      	cmp	r3, #2
 8009824:	d002      	beq.n	800982c <LCD_1IN8_SetGramScanWay+0x28>
 8009826:	79fb      	ldrb	r3, [r7, #7]
 8009828:	2b03      	cmp	r3, #3
 800982a:	d10c      	bne.n	8009846 <LCD_1IN8_SetGramScanWay+0x42>
	{
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Column	= LCD_1IN8_HEIGHT ;
 800982c:	4b2c      	ldr	r3, [pc, #176]	; (80098e0 <LCD_1IN8_SetGramScanWay+0xdc>)
 800982e:	2280      	movs	r2, #128	; 0x80
 8009830:	801a      	strh	r2, [r3, #0]
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Page = LCD_1IN8_WIDTH ;
 8009832:	4b2b      	ldr	r3, [pc, #172]	; (80098e0 <LCD_1IN8_SetGramScanWay+0xdc>)
 8009834:	22a0      	movs	r2, #160	; 0xa0
 8009836:	805a      	strh	r2, [r3, #2]
		sLCD_1IN8_DIS.LCD_1IN8_X_Adjust = LCD_1IN8_X;
 8009838:	4b29      	ldr	r3, [pc, #164]	; (80098e0 <LCD_1IN8_SetGramScanWay+0xdc>)
 800983a:	2202      	movs	r2, #2
 800983c:	80da      	strh	r2, [r3, #6]
		sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust = LCD_1IN8_Y;
 800983e:	4b28      	ldr	r3, [pc, #160]	; (80098e0 <LCD_1IN8_SetGramScanWay+0xdc>)
 8009840:	2201      	movs	r2, #1
 8009842:	811a      	strh	r2, [r3, #8]
 8009844:	e00b      	b.n	800985e <LCD_1IN8_SetGramScanWay+0x5a>
	}
	else
	{
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Column	= LCD_1IN8_WIDTH ;
 8009846:	4b26      	ldr	r3, [pc, #152]	; (80098e0 <LCD_1IN8_SetGramScanWay+0xdc>)
 8009848:	22a0      	movs	r2, #160	; 0xa0
 800984a:	801a      	strh	r2, [r3, #0]
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Page = LCD_1IN8_HEIGHT ;	
 800984c:	4b24      	ldr	r3, [pc, #144]	; (80098e0 <LCD_1IN8_SetGramScanWay+0xdc>)
 800984e:	2280      	movs	r2, #128	; 0x80
 8009850:	805a      	strh	r2, [r3, #2]
		sLCD_1IN8_DIS.LCD_1IN8_X_Adjust = LCD_1IN8_Y;
 8009852:	4b23      	ldr	r3, [pc, #140]	; (80098e0 <LCD_1IN8_SetGramScanWay+0xdc>)
 8009854:	2201      	movs	r2, #1
 8009856:	80da      	strh	r2, [r3, #6]
		sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust = LCD_1IN8_X;
 8009858:	4b21      	ldr	r3, [pc, #132]	; (80098e0 <LCD_1IN8_SetGramScanWay+0xdc>)
 800985a:	2202      	movs	r2, #2
 800985c:	811a      	strh	r2, [r3, #8]
	}

    // Gets the scan direction of GRAM
    uint16_t MemoryAccessReg_Data=0;  //0x36
 800985e:	2300      	movs	r3, #0
 8009860:	81fb      	strh	r3, [r7, #14]
    switch (Scan_dir) {
 8009862:	79fb      	ldrb	r3, [r7, #7]
 8009864:	2b07      	cmp	r3, #7
 8009866:	d82b      	bhi.n	80098c0 <LCD_1IN8_SetGramScanWay+0xbc>
 8009868:	a201      	add	r2, pc, #4	; (adr r2, 8009870 <LCD_1IN8_SetGramScanWay+0x6c>)
 800986a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800986e:	bf00      	nop
 8009870:	08009891 	.word	0x08009891
 8009874:	08009897 	.word	0x08009897
 8009878:	0800989d 	.word	0x0800989d
 800987c:	080098a3 	.word	0x080098a3
 8009880:	080098a9 	.word	0x080098a9
 8009884:	080098af 	.word	0x080098af
 8009888:	080098b5 	.word	0x080098b5
 800988c:	080098bb 	.word	0x080098bb
    case L2R_U2D:
        MemoryAccessReg_Data = 0X00 | 0x00;//x Scan direction | y Scan direction
 8009890:	2300      	movs	r3, #0
 8009892:	81fb      	strh	r3, [r7, #14]
        break;
 8009894:	e014      	b.n	80098c0 <LCD_1IN8_SetGramScanWay+0xbc>
    case L2R_D2U:
        MemoryAccessReg_Data = 0x00 | 0x80;//0xC8 | 0X10
 8009896:	2380      	movs	r3, #128	; 0x80
 8009898:	81fb      	strh	r3, [r7, #14]
        break;
 800989a:	e011      	b.n	80098c0 <LCD_1IN8_SetGramScanWay+0xbc>
    case R2L_U2D:	//0X04
        MemoryAccessReg_Data = 0x40 | 0x00;
 800989c:	2340      	movs	r3, #64	; 0x40
 800989e:	81fb      	strh	r3, [r7, #14]
        break;
 80098a0:	e00e      	b.n	80098c0 <LCD_1IN8_SetGramScanWay+0xbc>
    case R2L_D2U:	//0X0C
        MemoryAccessReg_Data = 0x40 | 0x80;
 80098a2:	23c0      	movs	r3, #192	; 0xc0
 80098a4:	81fb      	strh	r3, [r7, #14]
        break;
 80098a6:	e00b      	b.n	80098c0 <LCD_1IN8_SetGramScanWay+0xbc>
    case U2D_L2R:	//0X02
        MemoryAccessReg_Data = 0X00 | 0X00 | 0x20;
 80098a8:	2320      	movs	r3, #32
 80098aa:	81fb      	strh	r3, [r7, #14]
        break;
 80098ac:	e008      	b.n	80098c0 <LCD_1IN8_SetGramScanWay+0xbc>
    case U2D_R2L:	//0X06
        MemoryAccessReg_Data = 0x00 | 0X40 | 0x20;
 80098ae:	2360      	movs	r3, #96	; 0x60
 80098b0:	81fb      	strh	r3, [r7, #14]
        break;
 80098b2:	e005      	b.n	80098c0 <LCD_1IN8_SetGramScanWay+0xbc>
    case D2U_L2R:	//0X0A
        MemoryAccessReg_Data = 0x80 | 0x00 | 0x20;
 80098b4:	23a0      	movs	r3, #160	; 0xa0
 80098b6:	81fb      	strh	r3, [r7, #14]
        break;
 80098b8:	e002      	b.n	80098c0 <LCD_1IN8_SetGramScanWay+0xbc>
    case D2U_R2L:	//0X0E
        MemoryAccessReg_Data = 0x40 | 0x80 | 0x20;
 80098ba:	23e0      	movs	r3, #224	; 0xe0
 80098bc:	81fb      	strh	r3, [r7, #14]
        break;
 80098be:	bf00      	nop
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN8_WriteReg(0x36); //MX, MY, RGB mode
 80098c0:	2036      	movs	r0, #54	; 0x36
 80098c2:	f7ff fe59 	bl	8009578 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit( MemoryAccessReg_Data & 0xf7);	//RGB color filter panel
 80098c6:	89fb      	ldrh	r3, [r7, #14]
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	f023 0308 	bic.w	r3, r3, #8
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7ff fe6b 	bl	80095ac <LCD_1IN8_WriteData_8Bit>

}
 80098d6:	bf00      	nop
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	2400ab5c 	.word	0x2400ab5c

080098e4 <LCD_1IN8_Init>:
/********************************************************************************
function:
			initialization
********************************************************************************/
void LCD_1IN8_Init( LCD_1IN8_SCAN_DIR LCD_1IN8_ScanDir )
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	4603      	mov	r3, r0
 80098ec:	71fb      	strb	r3, [r7, #7]

    //Hardware reset
    LCD_1IN8_Reset();
 80098ee:	f7ff fe21 	bl	8009534 <LCD_1IN8_Reset>

    //Set the initialization register
    LCD_1IN8_InitReg();
 80098f2:	f7ff fea5 	bl	8009640 <LCD_1IN8_InitReg>

    //Set the display scan and color transfer modes
    LCD_1IN8_SetGramScanWay( LCD_1IN8_ScanDir );
 80098f6:	79fb      	ldrb	r3, [r7, #7]
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7ff ff83 	bl	8009804 <LCD_1IN8_SetGramScanWay>
    DEV_Delay_ms(200);
 80098fe:	20c8      	movs	r0, #200	; 0xc8
 8009900:	f7f8 fb92 	bl	8002028 <HAL_Delay>

    //sleep out
    LCD_1IN8_WriteReg(0x11);
 8009904:	2011      	movs	r0, #17
 8009906:	f7ff fe37 	bl	8009578 <LCD_1IN8_WriteReg>
    DEV_Delay_ms(120);
 800990a:	2078      	movs	r0, #120	; 0x78
 800990c:	f7f8 fb8c 	bl	8002028 <HAL_Delay>

    //Turn on the LCD display
    LCD_1IN8_WriteReg(0x29);
 8009910:	2029      	movs	r0, #41	; 0x29
 8009912:	f7ff fe31 	bl	8009578 <LCD_1IN8_WriteReg>
}
 8009916:	bf00      	nop
 8009918:	3708      	adds	r7, #8
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
	...

08009920 <LCD_1IN8_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN8_SetWindows( POINT Xstart, POINT Ystart, POINT Xend, POINT Yend )
{
 8009920:	b590      	push	{r4, r7, lr}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	4604      	mov	r4, r0
 8009928:	4608      	mov	r0, r1
 800992a:	4611      	mov	r1, r2
 800992c:	461a      	mov	r2, r3
 800992e:	4623      	mov	r3, r4
 8009930:	80fb      	strh	r3, [r7, #6]
 8009932:	4603      	mov	r3, r0
 8009934:	80bb      	strh	r3, [r7, #4]
 8009936:	460b      	mov	r3, r1
 8009938:	807b      	strh	r3, [r7, #2]
 800993a:	4613      	mov	r3, r2
 800993c:	803b      	strh	r3, [r7, #0]

    //set the X coordinates
    LCD_1IN8_WriteReg ( 0x2A );
 800993e:	202a      	movs	r0, #42	; 0x2a
 8009940:	f7ff fe1a 	bl	8009578 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit ( 0x00 );						//Set the horizontal starting point to the high octet
 8009944:	2000      	movs	r0, #0
 8009946:	f7ff fe31 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (Xstart & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_X_Adjust);			//Set the horizontal starting point to the low octet
 800994a:	88fb      	ldrh	r3, [r7, #6]
 800994c:	b2da      	uxtb	r2, r3
 800994e:	4b1e      	ldr	r3, [pc, #120]	; (80099c8 <LCD_1IN8_SetWindows+0xa8>)
 8009950:	88db      	ldrh	r3, [r3, #6]
 8009952:	b2db      	uxtb	r3, r3
 8009954:	4413      	add	r3, r2
 8009956:	b2db      	uxtb	r3, r3
 8009958:	4618      	mov	r0, r3
 800995a:	f7ff fe27 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( 0x00 );				//Set the horizontal end to the high octet
 800995e:	2000      	movs	r0, #0
 8009960:	f7ff fe24 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (( Xend - 1 ) & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_X_Adjust);	//Set the horizontal end to the low octet
 8009964:	887b      	ldrh	r3, [r7, #2]
 8009966:	b2da      	uxtb	r2, r3
 8009968:	4b17      	ldr	r3, [pc, #92]	; (80099c8 <LCD_1IN8_SetWindows+0xa8>)
 800996a:	88db      	ldrh	r3, [r3, #6]
 800996c:	b2db      	uxtb	r3, r3
 800996e:	4413      	add	r3, r2
 8009970:	b2db      	uxtb	r3, r3
 8009972:	3b01      	subs	r3, #1
 8009974:	b2db      	uxtb	r3, r3
 8009976:	4618      	mov	r0, r3
 8009978:	f7ff fe18 	bl	80095ac <LCD_1IN8_WriteData_8Bit>

    //set the Y coordinates
    LCD_1IN8_WriteReg ( 0x2B );
 800997c:	202b      	movs	r0, #43	; 0x2b
 800997e:	f7ff fdfb 	bl	8009578 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit ( 0x00 );
 8009982:	2000      	movs	r0, #0
 8009984:	f7ff fe12 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (Ystart & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust);
 8009988:	88bb      	ldrh	r3, [r7, #4]
 800998a:	b2da      	uxtb	r2, r3
 800998c:	4b0e      	ldr	r3, [pc, #56]	; (80099c8 <LCD_1IN8_SetWindows+0xa8>)
 800998e:	891b      	ldrh	r3, [r3, #8]
 8009990:	b2db      	uxtb	r3, r3
 8009992:	4413      	add	r3, r2
 8009994:	b2db      	uxtb	r3, r3
 8009996:	4618      	mov	r0, r3
 8009998:	f7ff fe08 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( 0x00 );
 800999c:	2000      	movs	r0, #0
 800999e:	f7ff fe05 	bl	80095ac <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( ( (Yend - 1) & 0xff )+ sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust);
 80099a2:	883b      	ldrh	r3, [r7, #0]
 80099a4:	b2da      	uxtb	r2, r3
 80099a6:	4b08      	ldr	r3, [pc, #32]	; (80099c8 <LCD_1IN8_SetWindows+0xa8>)
 80099a8:	891b      	ldrh	r3, [r3, #8]
 80099aa:	b2db      	uxtb	r3, r3
 80099ac:	4413      	add	r3, r2
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	3b01      	subs	r3, #1
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7ff fdf9 	bl	80095ac <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0x2C);
 80099ba:	202c      	movs	r0, #44	; 0x2c
 80099bc:	f7ff fddc 	bl	8009578 <LCD_1IN8_WriteReg>

}
 80099c0:	bf00      	nop
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd90      	pop	{r4, r7, pc}
 80099c8:	2400ab5c 	.word	0x2400ab5c

080099cc <LCD_1IN8_SetCursor>:
parameter:
		xStart :   X direction Start coordinates
		xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_1IN8_SetCursor ( POINT Xpoint, POINT Ypoint )
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	4603      	mov	r3, r0
 80099d4:	460a      	mov	r2, r1
 80099d6:	80fb      	strh	r3, [r7, #6]
 80099d8:	4613      	mov	r3, r2
 80099da:	80bb      	strh	r3, [r7, #4]
    LCD_1IN8_SetWindows ( Xpoint, Ypoint, Xpoint , Ypoint );
 80099dc:	88bb      	ldrh	r3, [r7, #4]
 80099de:	88fa      	ldrh	r2, [r7, #6]
 80099e0:	88b9      	ldrh	r1, [r7, #4]
 80099e2:	88f8      	ldrh	r0, [r7, #6]
 80099e4:	f7ff ff9c 	bl	8009920 <LCD_1IN8_SetWindows>
}
 80099e8:	bf00      	nop
 80099ea:	3708      	adds	r7, #8
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <LCD_1IN8_SetColor>:
parameter:
		Color  :   Set show color
********************************************************************************/
//static void LCD_1IN8_SetColor( LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_1IN8_SetColor( COLOR Color ,POINT Xpoint, POINT Ypoint)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	4603      	mov	r3, r0
 80099f8:	80fb      	strh	r3, [r7, #6]
 80099fa:	460b      	mov	r3, r1
 80099fc:	80bb      	strh	r3, [r7, #4]
 80099fe:	4613      	mov	r3, r2
 8009a00:	807b      	strh	r3, [r7, #2]
    LCD_1IN8_WriteData_NLen16Bit(Color ,(uint32_t)Xpoint * (uint32_t)Ypoint);
 8009a02:	88bb      	ldrh	r3, [r7, #4]
 8009a04:	887a      	ldrh	r2, [r7, #2]
 8009a06:	fb02 f203 	mul.w	r2, r2, r3
 8009a0a:	88fb      	ldrh	r3, [r7, #6]
 8009a0c:	4611      	mov	r1, r2
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7ff fdec 	bl	80095ec <LCD_1IN8_WriteData_NLen16Bit>
}
 8009a14:	bf00      	nop
 8009a16:	3708      	adds	r7, #8
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <LCD_1IN8_DrawPaint>:
		Xpoint :   The x coordinate of the point
		Ypoint :   The y coordinate of the point
		Color  :   Set the color
********************************************************************************/
void LCD_1IN8_DrawPaint ( POINT Xpoint, POINT Ypoint, COLOR Color )
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	4603      	mov	r3, r0
 8009a24:	80fb      	strh	r3, [r7, #6]
 8009a26:	460b      	mov	r3, r1
 8009a28:	80bb      	strh	r3, [r7, #4]
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	807b      	strh	r3, [r7, #2]
    if ( ( Xpoint <= sLCD_1IN8_DIS.LCD_1IN8_Dis_Column ) && ( Ypoint <= sLCD_1IN8_DIS.LCD_1IN8_Dis_Page ) )
 8009a2e:	4b1b      	ldr	r3, [pc, #108]	; (8009a9c <LCD_1IN8_DrawPaint+0x80>)
 8009a30:	881b      	ldrh	r3, [r3, #0]
 8009a32:	88fa      	ldrh	r2, [r7, #6]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d82d      	bhi.n	8009a94 <LCD_1IN8_DrawPaint+0x78>
 8009a38:	4b18      	ldr	r3, [pc, #96]	; (8009a9c <LCD_1IN8_DrawPaint+0x80>)
 8009a3a:	885b      	ldrh	r3, [r3, #2]
 8009a3c:	88ba      	ldrh	r2, [r7, #4]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d828      	bhi.n	8009a94 <LCD_1IN8_DrawPaint+0x78>
    {
    	if (!renderCompleteFrame)
 8009a42:	4b17      	ldr	r3, [pc, #92]	; (8009aa0 <LCD_1IN8_DrawPaint+0x84>)
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	f083 0301 	eor.w	r3, r3, #1
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d00c      	beq.n	8009a6a <LCD_1IN8_DrawPaint+0x4e>
    	{
    		LCD_1IN8_SetCursor (Xpoint, Ypoint);
 8009a50:	88ba      	ldrh	r2, [r7, #4]
 8009a52:	88fb      	ldrh	r3, [r7, #6]
 8009a54:	4611      	mov	r1, r2
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7ff ffb8 	bl	80099cc <LCD_1IN8_SetCursor>
    		LCD_1IN8_SetColor ( Color , 1 , 1);
 8009a5c:	887b      	ldrh	r3, [r7, #2]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	2101      	movs	r1, #1
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7ff ffc4 	bl	80099f0 <LCD_1IN8_SetColor>
    	{
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2] = (uint8_t)((Color & 0xFF00) >> 8 );
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2 + 1] = (uint8_t)((Color & 0x00FF));
    	}
    }
}
 8009a68:	e014      	b.n	8009a94 <LCD_1IN8_DrawPaint+0x78>
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2] = (uint8_t)((Color & 0xFF00) >> 8 );
 8009a6a:	887b      	ldrh	r3, [r7, #2]
 8009a6c:	0a1b      	lsrs	r3, r3, #8
 8009a6e:	b299      	uxth	r1, r3
 8009a70:	88bb      	ldrh	r3, [r7, #4]
 8009a72:	01da      	lsls	r2, r3, #7
 8009a74:	88fb      	ldrh	r3, [r7, #6]
 8009a76:	4413      	add	r3, r2
 8009a78:	005b      	lsls	r3, r3, #1
 8009a7a:	b2c9      	uxtb	r1, r1
 8009a7c:	4a09      	ldr	r2, [pc, #36]	; (8009aa4 <LCD_1IN8_DrawPaint+0x88>)
 8009a7e:	54d1      	strb	r1, [r2, r3]
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2 + 1] = (uint8_t)((Color & 0x00FF));
 8009a80:	88bb      	ldrh	r3, [r7, #4]
 8009a82:	01da      	lsls	r2, r3, #7
 8009a84:	88fb      	ldrh	r3, [r7, #6]
 8009a86:	4413      	add	r3, r2
 8009a88:	005b      	lsls	r3, r3, #1
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	887a      	ldrh	r2, [r7, #2]
 8009a8e:	b2d1      	uxtb	r1, r2
 8009a90:	4a04      	ldr	r2, [pc, #16]	; (8009aa4 <LCD_1IN8_DrawPaint+0x88>)
 8009a92:	54d1      	strb	r1, [r2, r3]
}
 8009a94:	bf00      	nop
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	2400ab5c 	.word	0x2400ab5c
 8009aa0:	2400a3b3 	.word	0x2400a3b3
 8009aa4:	24000058 	.word	0x24000058

08009aa8 <LCD_1IN8_Clear>:
/********************************************************************************
function:
			Clear screen
********************************************************************************/
void LCD_1IN8_Clear(COLOR  Color)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	4603      	mov	r3, r0
 8009ab0:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_1IN8_SetWindows(0, 0, sLCD_1IN8_DIS.LCD_1IN8_Dis_Column, sLCD_1IN8_DIS.LCD_1IN8_Dis_Page);
 8009ab2:	4b1a      	ldr	r3, [pc, #104]	; (8009b1c <LCD_1IN8_Clear+0x74>)
 8009ab4:	881a      	ldrh	r2, [r3, #0]
 8009ab6:	4b19      	ldr	r3, [pc, #100]	; (8009b1c <LCD_1IN8_Clear+0x74>)
 8009ab8:	885b      	ldrh	r3, [r3, #2]
 8009aba:	2100      	movs	r1, #0
 8009abc:	2000      	movs	r0, #0
 8009abe:	f7ff ff2f 	bl	8009920 <LCD_1IN8_SetWindows>
    LCD_1IN8_DC_1;
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009ac8:	4815      	ldr	r0, [pc, #84]	; (8009b20 <LCD_1IN8_Clear+0x78>)
 8009aca:	f7f9 fa43 	bl	8002f54 <HAL_GPIO_WritePin>
    for(i=0;i<sLCD_1IN8_DIS.LCD_1IN8_Dis_Column;i++)
 8009ace:	2300      	movs	r3, #0
 8009ad0:	81fb      	strh	r3, [r7, #14]
 8009ad2:	e019      	b.n	8009b08 <LCD_1IN8_Clear+0x60>
	{
		for(j=0;j<sLCD_1IN8_DIS.LCD_1IN8_Dis_Page;j++)
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	81bb      	strh	r3, [r7, #12]
 8009ad8:	e00e      	b.n	8009af8 <LCD_1IN8_Clear+0x50>
		{
			//LCD_1IN8_WriteData_NLen16Bit(Image[i*LCD_1IN8_WIDTH+j],1);
			DEV_SPI_WRITE( (uint8_t)(Color & 0XFF) );
 8009ada:	88fb      	ldrh	r3, [r7, #6]
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7fe fe5c 	bl	800879c <DEV_SPI_WRite>
			DEV_SPI_WRITE( (uint8_t)(Color >> 8) );
 8009ae4:	88fb      	ldrh	r3, [r7, #6]
 8009ae6:	0a1b      	lsrs	r3, r3, #8
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	4618      	mov	r0, r3
 8009aee:	f7fe fe55 	bl	800879c <DEV_SPI_WRite>
		for(j=0;j<sLCD_1IN8_DIS.LCD_1IN8_Dis_Page;j++)
 8009af2:	89bb      	ldrh	r3, [r7, #12]
 8009af4:	3301      	adds	r3, #1
 8009af6:	81bb      	strh	r3, [r7, #12]
 8009af8:	4b08      	ldr	r3, [pc, #32]	; (8009b1c <LCD_1IN8_Clear+0x74>)
 8009afa:	885b      	ldrh	r3, [r3, #2]
 8009afc:	89ba      	ldrh	r2, [r7, #12]
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d3eb      	bcc.n	8009ada <LCD_1IN8_Clear+0x32>
    for(i=0;i<sLCD_1IN8_DIS.LCD_1IN8_Dis_Column;i++)
 8009b02:	89fb      	ldrh	r3, [r7, #14]
 8009b04:	3301      	adds	r3, #1
 8009b06:	81fb      	strh	r3, [r7, #14]
 8009b08:	4b04      	ldr	r3, [pc, #16]	; (8009b1c <LCD_1IN8_Clear+0x74>)
 8009b0a:	881b      	ldrh	r3, [r3, #0]
 8009b0c:	89fa      	ldrh	r2, [r7, #14]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d3e0      	bcc.n	8009ad4 <LCD_1IN8_Clear+0x2c>
			
		}
	}
}
 8009b12:	bf00      	nop
 8009b14:	bf00      	nop
 8009b16:	3710      	adds	r7, #16
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	2400ab5c 	.word	0x2400ab5c
 8009b20:	58021800 	.word	0x58021800

08009b24 <LCD_1IN8_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_1IN8_SetBackLight(UWORD Value)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	80fb      	strh	r3, [r7, #6]
	 DEV_Set_PWM(Value);
 8009b2e:	4a04      	ldr	r2, [pc, #16]	; (8009b40 <LCD_1IN8_SetBackLight+0x1c>)
 8009b30:	88fb      	ldrh	r3, [r7, #6]
 8009b32:	6353      	str	r3, [r2, #52]	; 0x34
}
 8009b34:	bf00      	nop
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr
 8009b40:	40010000 	.word	0x40010000

08009b44 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	605a      	str	r2, [r3, #4]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	685a      	ldr	r2, [r3, #4]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	601a      	str	r2, [r3, #0]
}
 8009b5a:	bf00      	nop
 8009b5c:	370c      	adds	r7, #12
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr

08009b66 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 8009b66:	b480      	push	{r7}
 8009b68:	b083      	sub	sp, #12
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
 8009b6e:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	685a      	ldr	r2, [r3, #4]
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	683a      	ldr	r2, [r7, #0]
 8009b84:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	683a      	ldr	r2, [r7, #0]
 8009b8c:	601a      	str	r2, [r3, #0]
}
 8009b8e:	bf00      	nop
 8009b90:	370c      	adds	r7, #12
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr

08009b9a <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b082      	sub	sp, #8
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
 8009ba2:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8009ba4:	6839      	ldr	r1, [r7, #0]
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f7ff ffdd 	bl	8009b66 <metal_list_add_before>
}
 8009bac:	bf00      	nop
 8009bae:	3708      	adds	r7, #8
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 8009bbe:	6839      	ldr	r1, [r7, #0]
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f001 ff89 	bl	800bad8 <metal_machine_cache_flush>
}
 8009bc6:	bf00      	nop
 8009bc8:	3708      	adds	r7, #8
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b082      	sub	sp, #8
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
 8009bd6:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8009bd8:	6839      	ldr	r1, [r7, #0]
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f001 ff87 	bl	800baee <metal_machine_cache_invalidate>
}
 8009be0:	bf00      	nop
 8009be2:	3708      	adds	r7, #8
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 8009bf2:	6839      	ldr	r1, [r7, #0]
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f7ff ffdd 	bl	8009bb4 <__metal_cache_flush>
}
 8009bfa:	bf00      	nop
 8009bfc:	3708      	adds	r7, #8
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b082      	sub	sp, #8
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
 8009c0a:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8009c0c:	6839      	ldr	r1, [r7, #0]
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f7ff ffdd 	bl	8009bce <__metal_cache_invalidate>
}
 8009c14:	bf00      	nop
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d008      	beq.n	8009c3c <metal_bus_register+0x20>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d004      	beq.n	8009c3c <metal_bus_register+0x20>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d102      	bne.n	8009c42 <metal_bus_register+0x26>
		return -EINVAL;
 8009c3c:	f06f 0315 	mvn.w	r3, #21
 8009c40:	e026      	b.n	8009c90 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2100      	movs	r1, #0
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f000 f82b 	bl	8009ca4 <metal_bus_find>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d102      	bne.n	8009c5a <metal_bus_register+0x3e>
		return -EEXIST;
 8009c54:	f06f 0310 	mvn.w	r3, #16
 8009c58:	e01a      	b.n	8009c90 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	331c      	adds	r3, #28
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7ff ff70 	bl	8009b44 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	3324      	adds	r3, #36	; 0x24
 8009c68:	4619      	mov	r1, r3
 8009c6a:	480b      	ldr	r0, [pc, #44]	; (8009c98 <metal_bus_register+0x7c>)
 8009c6c:	f7ff ff95 	bl	8009b9a <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 8009c70:	4b0a      	ldr	r3, [pc, #40]	; (8009c9c <metal_bus_register+0x80>)
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	2b06      	cmp	r3, #6
 8009c76:	d90a      	bls.n	8009c8e <metal_bus_register+0x72>
 8009c78:	4b08      	ldr	r3, [pc, #32]	; (8009c9c <metal_bus_register+0x80>)
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d006      	beq.n	8009c8e <metal_bus_register+0x72>
 8009c80:	4b06      	ldr	r3, [pc, #24]	; (8009c9c <metal_bus_register+0x80>)
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	6812      	ldr	r2, [r2, #0]
 8009c88:	4905      	ldr	r1, [pc, #20]	; (8009ca0 <metal_bus_register+0x84>)
 8009c8a:	2007      	movs	r0, #7
 8009c8c:	4798      	blx	r3
	return 0;
 8009c8e:	2300      	movs	r3, #0
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3708      	adds	r7, #8
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	2400ab70 	.word	0x2400ab70
 8009c9c:	2400ab68 	.word	0x2400ab68
 8009ca0:	08015184 	.word	0x08015184

08009ca4 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 8009cae:	4b13      	ldr	r3, [pc, #76]	; (8009cfc <metal_bus_find+0x58>)
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	60fb      	str	r3, [r7, #12]
 8009cb4:	e017      	b.n	8009ce6 <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	3b24      	subs	r3, #36	; 0x24
 8009cba:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	6879      	ldr	r1, [r7, #4]
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7f6 fb0c 	bl	80002e0 <strcmp>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d003      	beq.n	8009cd6 <metal_bus_find+0x32>
	metal_list_for_each(&_metal.common.bus_list, node) {
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	60fb      	str	r3, [r7, #12]
 8009cd4:	e007      	b.n	8009ce6 <metal_bus_find+0x42>
			continue;
		if (result)
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d002      	beq.n	8009ce2 <metal_bus_find+0x3e>
			*result = bus;
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	68ba      	ldr	r2, [r7, #8]
 8009ce0:	601a      	str	r2, [r3, #0]
		return 0;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	e005      	b.n	8009cf2 <metal_bus_find+0x4e>
	metal_list_for_each(&_metal.common.bus_list, node) {
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	4a05      	ldr	r2, [pc, #20]	; (8009d00 <metal_bus_find+0x5c>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d1e3      	bne.n	8009cb6 <metal_bus_find+0x12>
	}
	return -ENOENT;
 8009cee:	f06f 0301 	mvn.w	r3, #1
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	2400ab68 	.word	0x2400ab68
 8009d00:	2400ab70 	.word	0x2400ab70

08009d04 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b086      	sub	sp, #24
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00d      	beq.n	8009d32 <metal_device_open+0x2e>
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d009      	beq.n	8009d32 <metal_device_open+0x2e>
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d006      	beq.n	8009d32 <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d002      	beq.n	8009d32 <metal_device_open+0x2e>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d102      	bne.n	8009d38 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 8009d32:	f06f 0315 	mvn.w	r3, #21
 8009d36:	e01f      	b.n	8009d78 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 8009d38:	f107 0310 	add.w	r3, r7, #16
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	f7ff ffb0 	bl	8009ca4 <metal_bus_find>
 8009d44:	6178      	str	r0, [r7, #20]
	if (error)
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d001      	beq.n	8009d50 <metal_device_open+0x4c>
		return error;
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	e013      	b.n	8009d78 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d102      	bne.n	8009d5e <metal_device_open+0x5a>
		return -ENODEV;
 8009d58:	f06f 0312 	mvn.w	r3, #18
 8009d5c:	e00c      	b.n	8009d78 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	6938      	ldr	r0, [r7, #16]
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	68b9      	ldr	r1, [r7, #8]
 8009d68:	4798      	blx	r3
 8009d6a:	6178      	str	r0, [r7, #20]
	if (error)
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d001      	beq.n	8009d76 <metal_device_open+0x72>
		return error;
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	e000      	b.n	8009d78 <metal_device_open+0x74>

	return 0;
 8009d76:	2300      	movs	r3, #0
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3718      	adds	r7, #24
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d008      	beq.n	8009da2 <metal_register_generic_device+0x22>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d003      	beq.n	8009da2 <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 8009d9e:	2b02      	cmp	r3, #2
 8009da0:	d902      	bls.n	8009da8 <metal_register_generic_device+0x28>
		return -EINVAL;
 8009da2:	f06f 0315 	mvn.w	r3, #21
 8009da6:	e009      	b.n	8009dbc <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4a06      	ldr	r2, [pc, #24]	; (8009dc4 <metal_register_generic_device+0x44>)
 8009dac:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	336c      	adds	r3, #108	; 0x6c
 8009db2:	4619      	mov	r1, r3
 8009db4:	4804      	ldr	r0, [pc, #16]	; (8009dc8 <metal_register_generic_device+0x48>)
 8009db6:	f7ff fef0 	bl	8009b9a <metal_list_add_tail>
			    &device->node);
	return 0;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3708      	adds	r7, #8
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	24000028 	.word	0x24000028
 8009dc8:	2400ab80 	.word	0x2400ab80

08009dcc <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b086      	sub	sp, #24
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8009dd8:	4b12      	ldr	r3, [pc, #72]	; (8009e24 <metal_generic_dev_open+0x58>)
 8009dda:	699b      	ldr	r3, [r3, #24]
 8009ddc:	617b      	str	r3, [r7, #20]
 8009dde:	e017      	b.n	8009e10 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	3b6c      	subs	r3, #108	; 0x6c
 8009de4:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68b9      	ldr	r1, [r7, #8]
 8009dec:	4618      	mov	r0, r3
 8009dee:	f7f6 fa77 	bl	80002e0 <strcmp>
 8009df2:	4603      	mov	r3, r0
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d003      	beq.n	8009e00 <metal_generic_dev_open+0x34>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	617b      	str	r3, [r7, #20]
 8009dfe:	e007      	b.n	8009e10 <metal_generic_dev_open+0x44>
			continue;
		*device = dev;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	693a      	ldr	r2, [r7, #16]
 8009e04:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 8009e06:	6938      	ldr	r0, [r7, #16]
 8009e08:	f000 f88c 	bl	8009f24 <metal_generic_dev_sys_open>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	e005      	b.n	8009e1c <metal_generic_dev_open+0x50>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	4a05      	ldr	r2, [pc, #20]	; (8009e28 <metal_generic_dev_open+0x5c>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d1e3      	bne.n	8009de0 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 8009e18:	f06f 0312 	mvn.w	r3, #18
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3718      	adds	r7, #24
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	2400ab68 	.word	0x2400ab68
 8009e28:	2400ab80 	.word	0x2400ab80

08009e2c <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b086      	sub	sp, #24
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	607a      	str	r2, [r7, #4]
 8009e38:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 8009e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d009      	beq.n	8009e56 <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 8009e42:	6a3a      	ldr	r2, [r7, #32]
 8009e44:	4613      	mov	r3, r2
 8009e46:	005b      	lsls	r3, r3, #1
 8009e48:	4413      	add	r3, r2
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	6839      	ldr	r1, [r7, #0]
 8009e50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e52:	f006 fa0b 	bl	801026c <memcpy>
	for (i = 0; i < nents_in; i++) {
 8009e56:	2300      	movs	r3, #0
 8009e58:	617b      	str	r3, [r7, #20]
 8009e5a:	e02f      	b.n	8009ebc <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2b02      	cmp	r3, #2
 8009e60:	d114      	bne.n	8009e8c <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 8009e62:	697a      	ldr	r2, [r7, #20]
 8009e64:	4613      	mov	r3, r2
 8009e66:	005b      	lsls	r3, r3, #1
 8009e68:	4413      	add	r3, r2
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e70:	4413      	add	r3, r2
 8009e72:	6818      	ldr	r0, [r3, #0]
 8009e74:	697a      	ldr	r2, [r7, #20]
 8009e76:	4613      	mov	r3, r2
 8009e78:	005b      	lsls	r3, r3, #1
 8009e7a:	4413      	add	r3, r2
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	461a      	mov	r2, r3
 8009e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e82:	4413      	add	r3, r2
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	4619      	mov	r1, r3
 8009e88:	f7ff feae 	bl	8009be8 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 8009e8c:	697a      	ldr	r2, [r7, #20]
 8009e8e:	4613      	mov	r3, r2
 8009e90:	005b      	lsls	r3, r3, #1
 8009e92:	4413      	add	r3, r2
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	461a      	mov	r2, r3
 8009e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9a:	4413      	add	r3, r2
 8009e9c:	6818      	ldr	r0, [r3, #0]
 8009e9e:	697a      	ldr	r2, [r7, #20]
 8009ea0:	4613      	mov	r3, r2
 8009ea2:	005b      	lsls	r3, r3, #1
 8009ea4:	4413      	add	r3, r2
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eac:	4413      	add	r3, r2
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	f7ff fea6 	bl	8009c02 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	3301      	adds	r3, #1
 8009eba:	617b      	str	r3, [r7, #20]
 8009ebc:	697a      	ldr	r2, [r7, #20]
 8009ebe:	6a3b      	ldr	r3, [r7, #32]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	dbcb      	blt.n	8009e5c <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 8009ec4:	6a3b      	ldr	r3, [r7, #32]
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3718      	adds	r7, #24
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b086      	sub	sp, #24
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	60f8      	str	r0, [r7, #12]
 8009ed6:	60b9      	str	r1, [r7, #8]
 8009ed8:	607a      	str	r2, [r7, #4]
 8009eda:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 8009edc:	2300      	movs	r3, #0
 8009ede:	617b      	str	r3, [r7, #20]
 8009ee0:	e017      	b.n	8009f12 <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 8009ee2:	697a      	ldr	r2, [r7, #20]
 8009ee4:	4613      	mov	r3, r2
 8009ee6:	005b      	lsls	r3, r3, #1
 8009ee8:	4413      	add	r3, r2
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	461a      	mov	r2, r3
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	6818      	ldr	r0, [r3, #0]
 8009ef4:	697a      	ldr	r2, [r7, #20]
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	005b      	lsls	r3, r3, #1
 8009efa:	4413      	add	r3, r2
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	461a      	mov	r2, r3
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	4413      	add	r3, r2
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	4619      	mov	r1, r3
 8009f08:	f7ff fe7b 	bl	8009c02 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	617b      	str	r3, [r7, #20]
 8009f12:	697a      	ldr	r2, [r7, #20]
 8009f14:	6a3b      	ldr	r3, [r7, #32]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	dbe3      	blt.n	8009ee2 <metal_generic_dev_dma_unmap+0x14>
	}
}
 8009f1a:	bf00      	nop
 8009f1c:	bf00      	nop
 8009f1e:	3718      	adds	r7, #24
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	60fb      	str	r3, [r7, #12]
 8009f30:	e013      	b.n	8009f5a <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 8009f32:	68fa      	ldr	r2, [r7, #12]
 8009f34:	4613      	mov	r3, r2
 8009f36:	005b      	lsls	r3, r3, #1
 8009f38:	4413      	add	r3, r2
 8009f3a:	011b      	lsls	r3, r3, #4
 8009f3c:	3308      	adds	r3, #8
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	4413      	add	r3, r2
 8009f42:	3304      	adds	r3, #4
 8009f44:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00b      	beq.n	8009f66 <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 8009f4e:	68b8      	ldr	r0, [r7, #8]
 8009f50:	f000 f81e 	bl	8009f90 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	3301      	adds	r3, #1
 8009f58:	60fb      	str	r3, [r7, #12]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	689b      	ldr	r3, [r3, #8]
 8009f5e:	68fa      	ldr	r2, [r7, #12]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d3e6      	bcc.n	8009f32 <metal_generic_dev_sys_open+0xe>
 8009f64:	e000      	b.n	8009f68 <metal_generic_dev_sys_open+0x44>
			break;
 8009f66:	bf00      	nop
	}

	return 0;
 8009f68:	2300      	movs	r3, #0
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
	...

08009f74 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 8009f7c:	4803      	ldr	r0, [pc, #12]	; (8009f8c <metal_sys_init+0x18>)
 8009f7e:	f7ff fe4d 	bl	8009c1c <metal_bus_register>
	return 0;
 8009f82:	2300      	movs	r3, #0
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3708      	adds	r7, #8
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	24000028 	.word	0x24000028

08009f90 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b086      	sub	sp, #24
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	613b      	str	r3, [r7, #16]
	if (psize) {
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d02c      	beq.n	800a004 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	68db      	ldr	r3, [r3, #12]
 8009fae:	693a      	ldr	r2, [r7, #16]
 8009fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d005      	beq.n	8009fc4 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	68db      	ldr	r3, [r3, #12]
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8009fc2:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	617b      	str	r3, [r7, #20]
 8009fc8:	e013      	b.n	8009ff2 <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	685a      	ldr	r2, [r3, #4]
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	4413      	add	r3, r2
 8009fd4:	6819      	ldr	r1, [r3, #0]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	695b      	ldr	r3, [r3, #20]
 8009fda:	693a      	ldr	r2, [r7, #16]
 8009fdc:	68f8      	ldr	r0, [r7, #12]
 8009fde:	f001 fd91 	bl	800bb04 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	68fa      	ldr	r2, [r7, #12]
 8009fe8:	4413      	add	r3, r2
 8009fea:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	3301      	adds	r3, #1
 8009ff0:	617b      	str	r3, [r7, #20]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	689a      	ldr	r2, [r3, #8]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8009ffe:	697a      	ldr	r2, [r7, #20]
 800a000:	429a      	cmp	r2, r3
 800a002:	d9e2      	bls.n	8009fca <metal_sys_io_mem_map+0x3a>
		}
	}
}
 800a004:	bf00      	nop
 800a006:	3718      	adds	r7, #24
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <metal_list_init>:
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	605a      	str	r2, [r3, #4]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	685a      	ldr	r2, [r3, #4]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	601a      	str	r2, [r3, #0]
}
 800a022:	bf00      	nop
 800a024:	370c      	adds	r7, #12
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr
	...

0800a030 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
	int error = 0;
 800a038:	2300      	movs	r3, #0
 800a03a:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 800a03c:	2220      	movs	r2, #32
 800a03e:	2100      	movs	r1, #0
 800a040:	4810      	ldr	r0, [pc, #64]	; (800a084 <metal_init+0x54>)
 800a042:	f006 f93b 	bl	80102bc <memset>

	_metal.common.log_handler   = params->log_handler;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a0e      	ldr	r2, [pc, #56]	; (800a084 <metal_init+0x54>)
 800a04c:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	791a      	ldrb	r2, [r3, #4]
 800a052:	4b0c      	ldr	r3, [pc, #48]	; (800a084 <metal_init+0x54>)
 800a054:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 800a056:	480c      	ldr	r0, [pc, #48]	; (800a088 <metal_init+0x58>)
 800a058:	f7ff ffd8 	bl	800a00c <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 800a05c:	480b      	ldr	r0, [pc, #44]	; (800a08c <metal_init+0x5c>)
 800a05e:	f7ff ffd5 	bl	800a00c <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 800a062:	480b      	ldr	r0, [pc, #44]	; (800a090 <metal_init+0x60>)
 800a064:	f7ff ffd2 	bl	800a00c <metal_list_init>

	error = metal_sys_init(params);
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f7ff ff83 	bl	8009f74 <metal_sys_init>
 800a06e:	60f8      	str	r0, [r7, #12]
	if (error)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d001      	beq.n	800a07a <metal_init+0x4a>
		return error;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	e000      	b.n	800a07c <metal_init+0x4c>

	return error;
 800a07a:	68fb      	ldr	r3, [r7, #12]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3710      	adds	r7, #16
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}
 800a084:	2400ab68 	.word	0x2400ab68
 800a088:	2400ab70 	.word	0x2400ab70
 800a08c:	2400ab78 	.word	0x2400ab78
 800a090:	2400ab80 	.word	0x2400ab80

0800a094 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 800a0a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0a6:	d009      	beq.n	800a0bc <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	689b      	ldr	r3, [r3, #8]
 800a0ac:	683a      	ldr	r2, [r7, #0]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d804      	bhi.n	800a0bc <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681a      	ldr	r2, [r3, #0]
		: NULL);
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	4413      	add	r3, r2
 800a0ba:	e000      	b.n	800a0be <metal_io_virt+0x2a>
 800a0bc:	2300      	movs	r3, #0
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	370c      	adds	r7, #12
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr

0800a0ca <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 800a0ca:	b5b0      	push	{r4, r5, r7, lr}
 800a0cc:	b08a      	sub	sp, #40	; 0x28
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	60f8      	str	r0, [r7, #12]
 800a0d2:	60b9      	str	r1, [r7, #8]
 800a0d4:	607a      	str	r2, [r7, #4]
 800a0d6:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 800a0d8:	f107 0310 	add.w	r3, r7, #16
 800a0dc:	2200      	movs	r2, #0
 800a0de:	601a      	str	r2, [r3, #0]
 800a0e0:	605a      	str	r2, [r3, #4]
 800a0e2:	609a      	str	r2, [r3, #8]
 800a0e4:	60da      	str	r2, [r3, #12]
 800a0e6:	611a      	str	r2, [r3, #16]
 800a0e8:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	68ba      	ldr	r2, [r7, #8]
 800a0ee:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	605a      	str	r2, [r3, #4]
	io->size = size;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	683a      	ldr	r2, [r7, #0]
 800a0fa:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a100:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 800a102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a104:	2b1f      	cmp	r3, #31
 800a106:	d904      	bls.n	800a112 <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f04f 32ff 	mov.w	r2, #4294967295
 800a10e:	611a      	str	r2, [r3, #16]
 800a110:	e006      	b.n	800a120 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 800a112:	2201      	movs	r2, #1
 800a114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a116:	fa02 f303 	lsl.w	r3, r2, r3
 800a11a:	1e5a      	subs	r2, r3, #1
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a124:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 800a126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d00b      	beq.n	800a144 <metal_io_init+0x7a>
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a130:	f103 0418 	add.w	r4, r3, #24
 800a134:	4615      	mov	r5, r2
 800a136:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a138:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a13a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a13e:	e884 0003 	stmia.w	r4, {r0, r1}
 800a142:	e00a      	b.n	800a15a <metal_io_init+0x90>
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f103 0418 	add.w	r4, r3, #24
 800a14a:	f107 0510 	add.w	r5, r7, #16
 800a14e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a150:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a152:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a156:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 800a15a:	68f8      	ldr	r0, [r7, #12]
 800a15c:	f7ff ff18 	bl	8009f90 <metal_sys_io_mem_map>
}
 800a160:	bf00      	nop
 800a162:	3728      	adds	r7, #40	; 0x28
 800a164:	46bd      	mov	sp, r7
 800a166:	bdb0      	pop	{r4, r5, r7, pc}

0800a168 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 800a168:	b590      	push	{r4, r7, lr}
 800a16a:	b08b      	sub	sp, #44	; 0x2c
 800a16c:	af02      	add	r7, sp, #8
 800a16e:	60f8      	str	r0, [r7, #12]
 800a170:	60b9      	str	r1, [r7, #8]
 800a172:	607a      	str	r2, [r7, #4]
 800a174:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 800a176:	68b9      	ldr	r1, [r7, #8]
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f7ff ff8b 	bl	800a094 <metal_io_virt>
 800a17e:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	68ba      	ldr	r2, [r7, #8]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d902      	bls.n	800a194 <metal_io_block_read+0x2c>
		return -ERANGE;
 800a18e:	f06f 0321 	mvn.w	r3, #33	; 0x21
 800a192:	e05c      	b.n	800a24e <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 800a194:	683a      	ldr	r2, [r7, #0]
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	441a      	add	r2, r3
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d904      	bls.n	800a1ac <metal_io_block_read+0x44>
		len = io->size - offset;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	689a      	ldr	r2, [r3, #8]
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	1ad3      	subs	r3, r2, r3
 800a1aa:	603b      	str	r3, [r7, #0]
	retlen = len;
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	6a1b      	ldr	r3, [r3, #32]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d00a      	beq.n	800a1ce <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	6a1c      	ldr	r4, [r3, #32]
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	9300      	str	r3, [sp, #0]
 800a1c0:	2305      	movs	r3, #5
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	68b9      	ldr	r1, [r7, #8]
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	47a0      	blx	r4
 800a1ca:	6178      	str	r0, [r7, #20]
 800a1cc:	e03e      	b.n	800a24c <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 800a1ce:	f3bf 8f5b 	dmb	ish
		while ( len && (
 800a1d2:	e00c      	b.n	800a1ee <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 800a1d4:	69fb      	ldr	r3, [r7, #28]
 800a1d6:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 800a1d8:	69bb      	ldr	r3, [r7, #24]
 800a1da:	701a      	strb	r2, [r3, #0]
			dest++;
 800a1dc:	69bb      	ldr	r3, [r7, #24]
 800a1de:	3301      	adds	r3, #1
 800a1e0:	61bb      	str	r3, [r7, #24]
			ptr++;
 800a1e2:	69fb      	ldr	r3, [r7, #28]
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	61fb      	str	r3, [r7, #28]
			len--;
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	3b01      	subs	r3, #1
 800a1ec:	603b      	str	r3, [r7, #0]
		while ( len && (
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d017      	beq.n	800a224 <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 800a1f4:	69bb      	ldr	r3, [r7, #24]
 800a1f6:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d1ea      	bne.n	800a1d4 <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 800a204:	2b00      	cmp	r3, #0
 800a206:	d1e5      	bne.n	800a1d4 <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 800a208:	e00c      	b.n	800a224 <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 800a20a:	69fb      	ldr	r3, [r7, #28]
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 800a212:	69bb      	ldr	r3, [r7, #24]
 800a214:	3304      	adds	r3, #4
 800a216:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 800a218:	69fb      	ldr	r3, [r7, #28]
 800a21a:	3304      	adds	r3, #4
 800a21c:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	3b04      	subs	r3, #4
 800a222:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	2b03      	cmp	r3, #3
 800a228:	dcef      	bgt.n	800a20a <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 800a22a:	e00c      	b.n	800a246 <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 800a22c:	69fb      	ldr	r3, [r7, #28]
 800a22e:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 800a234:	69bb      	ldr	r3, [r7, #24]
 800a236:	3301      	adds	r3, #1
 800a238:	61bb      	str	r3, [r7, #24]
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	3301      	adds	r3, #1
 800a23e:	61fb      	str	r3, [r7, #28]
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	3b01      	subs	r3, #1
 800a244:	603b      	str	r3, [r7, #0]
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d1ef      	bne.n	800a22c <metal_io_block_read+0xc4>
	}
	return retlen;
 800a24c:	697b      	ldr	r3, [r7, #20]
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3724      	adds	r7, #36	; 0x24
 800a252:	46bd      	mov	sp, r7
 800a254:	bd90      	pop	{r4, r7, pc}

0800a256 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 800a256:	b590      	push	{r4, r7, lr}
 800a258:	b08b      	sub	sp, #44	; 0x2c
 800a25a:	af02      	add	r7, sp, #8
 800a25c:	60f8      	str	r0, [r7, #12]
 800a25e:	60b9      	str	r1, [r7, #8]
 800a260:	607a      	str	r2, [r7, #4]
 800a262:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 800a264:	68b9      	ldr	r1, [r7, #8]
 800a266:	68f8      	ldr	r0, [r7, #12]
 800a268:	f7ff ff14 	bl	800a094 <metal_io_virt>
 800a26c:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	68ba      	ldr	r2, [r7, #8]
 800a278:	429a      	cmp	r2, r3
 800a27a:	d902      	bls.n	800a282 <metal_io_block_write+0x2c>
		return -ERANGE;
 800a27c:	f06f 0321 	mvn.w	r3, #33	; 0x21
 800a280:	e05b      	b.n	800a33a <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 800a282:	683a      	ldr	r2, [r7, #0]
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	441a      	add	r2, r3
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d904      	bls.n	800a29a <metal_io_block_write+0x44>
		len = io->size - offset;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	689a      	ldr	r2, [r3, #8]
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	1ad3      	subs	r3, r2, r3
 800a298:	603b      	str	r3, [r7, #0]
	retlen = len;
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d017      	beq.n	800a2d6 <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	9300      	str	r3, [sp, #0]
 800a2ae:	2305      	movs	r3, #5
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	68b9      	ldr	r1, [r7, #8]
 800a2b4:	68f8      	ldr	r0, [r7, #12]
 800a2b6:	47a0      	blx	r4
 800a2b8:	6178      	str	r0, [r7, #20]
 800a2ba:	e03d      	b.n	800a338 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 800a2bc:	69bb      	ldr	r3, [r7, #24]
 800a2be:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	701a      	strb	r2, [r3, #0]
			ptr++;
 800a2c4:	69fb      	ldr	r3, [r7, #28]
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	61fb      	str	r3, [r7, #28]
			source++;
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	3301      	adds	r3, #1
 800a2ce:	61bb      	str	r3, [r7, #24]
			len--;
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	3b01      	subs	r3, #1
 800a2d4:	603b      	str	r3, [r7, #0]
		while ( len && (
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d017      	beq.n	800a30c <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 800a2dc:	69fb      	ldr	r3, [r7, #28]
 800a2de:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d1ea      	bne.n	800a2bc <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d1e5      	bne.n	800a2bc <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800a2f0:	e00c      	b.n	800a30c <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800a2fa:	69fb      	ldr	r3, [r7, #28]
 800a2fc:	3304      	adds	r3, #4
 800a2fe:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	3304      	adds	r3, #4
 800a304:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	3b04      	subs	r3, #4
 800a30a:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	2b03      	cmp	r3, #3
 800a310:	dcef      	bgt.n	800a2f2 <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 800a312:	e00c      	b.n	800a32e <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 800a314:	69bb      	ldr	r3, [r7, #24]
 800a316:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 800a318:	69fb      	ldr	r3, [r7, #28]
 800a31a:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	3301      	adds	r3, #1
 800a320:	61fb      	str	r3, [r7, #28]
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	3301      	adds	r3, #1
 800a326:	61bb      	str	r3, [r7, #24]
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	3b01      	subs	r3, #1
 800a32c:	603b      	str	r3, [r7, #0]
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d1ef      	bne.n	800a314 <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 800a334:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 800a338:	697b      	ldr	r3, [r7, #20]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3724      	adds	r7, #36	; 0x24
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd90      	pop	{r4, r7, pc}

0800a342 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
 800a342:	b590      	push	{r4, r7, lr}
 800a344:	b08b      	sub	sp, #44	; 0x2c
 800a346:	af02      	add	r7, sp, #8
 800a348:	60f8      	str	r0, [r7, #12]
 800a34a:	60b9      	str	r1, [r7, #8]
 800a34c:	603b      	str	r3, [r7, #0]
 800a34e:	4613      	mov	r3, r2
 800a350:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = metal_io_virt(io, offset);
 800a352:	68b9      	ldr	r1, [r7, #8]
 800a354:	68f8      	ldr	r0, [r7, #12]
 800a356:	f7ff fe9d 	bl	800a094 <metal_io_virt>
 800a35a:	61f8      	str	r0, [r7, #28]
	int retlen = len;
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	613b      	str	r3, [r7, #16]

	if (offset > io->size)
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	68ba      	ldr	r2, [r7, #8]
 800a366:	429a      	cmp	r2, r3
 800a368:	d902      	bls.n	800a370 <metal_io_block_set+0x2e>
		return -ERANGE;
 800a36a:	f06f 0321 	mvn.w	r3, #33	; 0x21
 800a36e:	e05d      	b.n	800a42c <metal_io_block_set+0xea>
	if ((offset + len) > io->size)
 800a370:	683a      	ldr	r2, [r7, #0]
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	441a      	add	r2, r3
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d904      	bls.n	800a388 <metal_io_block_set+0x46>
		len = io->size - offset;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	689a      	ldr	r2, [r3, #8]
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	1ad3      	subs	r3, r2, r3
 800a386:	603b      	str	r3, [r7, #0]
	retlen = len;
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	613b      	str	r3, [r7, #16]
	if (io->ops.block_set) {
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a390:	2b00      	cmp	r3, #0
 800a392:	d009      	beq.n	800a3a8 <metal_io_block_set+0x66>
		(*io->ops.block_set)(
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800a398:	79fa      	ldrb	r2, [r7, #7]
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	9300      	str	r3, [sp, #0]
 800a39e:	2305      	movs	r3, #5
 800a3a0:	68b9      	ldr	r1, [r7, #8]
 800a3a2:	68f8      	ldr	r0, [r7, #12]
 800a3a4:	47a0      	blx	r4
 800a3a6:	e040      	b.n	800a42a <metal_io_block_set+0xe8>
			io, offset, value, memory_order_seq_cst, len);
	} else {
		unsigned int cint = value;
 800a3a8:	79fb      	ldrb	r3, [r7, #7]
 800a3aa:	61bb      	str	r3, [r7, #24]
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	617b      	str	r3, [r7, #20]
 800a3b0:	e00a      	b.n	800a3c8 <metal_io_block_set+0x86>
			cint |= ((unsigned int)value << (8 * i));
 800a3b2:	79fa      	ldrb	r2, [r7, #7]
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	00db      	lsls	r3, r3, #3
 800a3b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a3bc:	69ba      	ldr	r2, [r7, #24]
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	61bb      	str	r3, [r7, #24]
		for (i = 1; i < sizeof(int); i++)
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	617b      	str	r3, [r7, #20]
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	2b03      	cmp	r3, #3
 800a3cc:	d9f1      	bls.n	800a3b2 <metal_io_block_set+0x70>

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 800a3ce:	e008      	b.n	800a3e2 <metal_io_block_set+0xa0>
			*(unsigned char *)ptr = (unsigned char) value;
 800a3d0:	69fb      	ldr	r3, [r7, #28]
 800a3d2:	79fa      	ldrb	r2, [r7, #7]
 800a3d4:	701a      	strb	r2, [r3, #0]
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 800a3d6:	69fb      	ldr	r3, [r7, #28]
 800a3d8:	3301      	adds	r3, #1
 800a3da:	61fb      	str	r3, [r7, #28]
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	603b      	str	r3, [r7, #0]
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d00e      	beq.n	800a406 <metal_io_block_set+0xc4>
 800a3e8:	69fb      	ldr	r3, [r7, #28]
 800a3ea:	f003 0303 	and.w	r3, r3, #3
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d1ee      	bne.n	800a3d0 <metal_io_block_set+0x8e>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800a3f2:	e008      	b.n	800a406 <metal_io_block_set+0xc4>
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
 800a3f4:	69fb      	ldr	r3, [r7, #28]
 800a3f6:	69ba      	ldr	r2, [r7, #24]
 800a3f8:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	3304      	adds	r3, #4
 800a3fe:	61fb      	str	r3, [r7, #28]
						len -= sizeof(int))
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	3b04      	subs	r3, #4
 800a404:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	2b03      	cmp	r3, #3
 800a40a:	dcf3      	bgt.n	800a3f4 <metal_io_block_set+0xb2>
		for (; len != 0; ptr++, len--)
 800a40c:	e008      	b.n	800a420 <metal_io_block_set+0xde>
			*(unsigned char *)ptr = (unsigned char) value;
 800a40e:	69fb      	ldr	r3, [r7, #28]
 800a410:	79fa      	ldrb	r2, [r7, #7]
 800a412:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, len--)
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	3301      	adds	r3, #1
 800a418:	61fb      	str	r3, [r7, #28]
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	3b01      	subs	r3, #1
 800a41e:	603b      	str	r3, [r7, #0]
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d1f3      	bne.n	800a40e <metal_io_block_set+0xcc>
		atomic_thread_fence(memory_order_seq_cst);
 800a426:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 800a42a:	693b      	ldr	r3, [r7, #16]
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3724      	adds	r7, #36	; 0x24
 800a430:	46bd      	mov	sp, r7
 800a432:	bd90      	pop	{r4, r7, pc}

0800a434 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 800a434:	b40e      	push	{r1, r2, r3}
 800a436:	b480      	push	{r7}
 800a438:	b082      	sub	sp, #8
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	4603      	mov	r3, r0
 800a43e:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 800a440:	bf00      	nop
 800a442:	3708      	adds	r7, #8
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	b003      	add	sp, #12
 800a44c:	4770      	bx	lr

0800a44e <metal_io_virt>:
{
 800a44e:	b480      	push	{r7}
 800a450:	b083      	sub	sp, #12
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
 800a456:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
		: NULL);
 800a45c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a460:	d009      	beq.n	800a476 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	683a      	ldr	r2, [r7, #0]
 800a468:	429a      	cmp	r2, r3
 800a46a:	d804      	bhi.n	800a476 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681a      	ldr	r2, [r3, #0]
		: NULL);
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	4413      	add	r3, r2
 800a474:	e000      	b.n	800a478 <metal_io_virt+0x2a>
 800a476:	2300      	movs	r3, #0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	370c      	adds	r7, #12
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr

0800a484 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 800a484:	b480      	push	{r7}
 800a486:	b085      	sub	sp, #20
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	683a      	ldr	r2, [r7, #0]
 800a494:	1ad3      	subs	r3, r2, r3
 800a496:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	68fa      	ldr	r2, [r7, #12]
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d201      	bcs.n	800a4a6 <metal_io_virt_to_offset+0x22>
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	e001      	b.n	800a4aa <metal_io_virt_to_offset+0x26>
 800a4a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3714      	adds	r7, #20
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr
	...

0800a4b8 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 800a4b8:	b590      	push	{r4, r7, lr}
 800a4ba:	b08d      	sub	sp, #52	; 0x34
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	60b9      	str	r1, [r7, #8]
 800a4c2:	603b      	str	r3, [r7, #0]
 800a4c4:	4613      	mov	r3, r2
 800a4c6:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 800a4c8:	68b9      	ldr	r1, [r7, #8]
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f7ff ffbf 	bl	800a44e <metal_io_virt>
 800a4d0:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	699b      	ldr	r3, [r3, #24]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d009      	beq.n	800a4ee <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	699c      	ldr	r4, [r3, #24]
 800a4de:	79fa      	ldrb	r2, [r7, #7]
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	68b9      	ldr	r1, [r7, #8]
 800a4e4:	68f8      	ldr	r0, [r7, #12]
 800a4e6:	47a0      	blx	r4
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	e057      	b.n	800a59e <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uchar) == width)
 800a4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d011      	beq.n	800a518 <metal_io_read+0x60>
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d10e      	bne.n	800a518 <metal_io_read+0x60>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 800a4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a500:	f3bf 8f5b 	dmb	ish
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	f3bf 8f5b 	dmb	ish
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	76fb      	strb	r3, [r7, #27]
 800a50e:	7efb      	ldrb	r3, [r7, #27]
 800a510:	b2da      	uxtb	r2, r3
 800a512:	f04f 0300 	mov.w	r3, #0
 800a516:	e042      	b.n	800a59e <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ushort) == width)
 800a518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d011      	beq.n	800a542 <metal_io_read+0x8a>
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	2b02      	cmp	r3, #2
 800a522:	d10e      	bne.n	800a542 <metal_io_read+0x8a>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 800a524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a526:	627b      	str	r3, [r7, #36]	; 0x24
 800a528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52a:	f3bf 8f5b 	dmb	ish
 800a52e:	881b      	ldrh	r3, [r3, #0]
 800a530:	f3bf 8f5b 	dmb	ish
 800a534:	b29b      	uxth	r3, r3
 800a536:	833b      	strh	r3, [r7, #24]
 800a538:	8b3b      	ldrh	r3, [r7, #24]
 800a53a:	b29a      	uxth	r2, r3
 800a53c:	f04f 0300 	mov.w	r3, #0
 800a540:	e02d      	b.n	800a59e <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uint) == width)
 800a542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a544:	2b00      	cmp	r3, #0
 800a546:	d010      	beq.n	800a56a <metal_io_read+0xb2>
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	2b04      	cmp	r3, #4
 800a54c:	d10d      	bne.n	800a56a <metal_io_read+0xb2>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 800a54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a550:	623b      	str	r3, [r7, #32]
 800a552:	6a3b      	ldr	r3, [r7, #32]
 800a554:	f3bf 8f5b 	dmb	ish
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f3bf 8f5b 	dmb	ish
 800a55e:	617b      	str	r3, [r7, #20]
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	461a      	mov	r2, r3
 800a564:	f04f 0300 	mov.w	r3, #0
 800a568:	e019      	b.n	800a59e <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ulong) == width)
 800a56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d010      	beq.n	800a592 <metal_io_read+0xda>
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	2b04      	cmp	r3, #4
 800a574:	d10d      	bne.n	800a592 <metal_io_read+0xda>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 800a576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a578:	61fb      	str	r3, [r7, #28]
 800a57a:	69fb      	ldr	r3, [r7, #28]
 800a57c:	f3bf 8f5b 	dmb	ish
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f3bf 8f5b 	dmb	ish
 800a586:	613b      	str	r3, [r7, #16]
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	461a      	mov	r2, r3
 800a58c:	f04f 0300 	mov.w	r3, #0
 800a590:	e005      	b.n	800a59e <metal_io_read+0xe6>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 800a592:	4b05      	ldr	r3, [pc, #20]	; (800a5a8 <metal_io_read+0xf0>)
 800a594:	4a05      	ldr	r2, [pc, #20]	; (800a5ac <metal_io_read+0xf4>)
 800a596:	21f0      	movs	r1, #240	; 0xf0
 800a598:	4805      	ldr	r0, [pc, #20]	; (800a5b0 <metal_io_read+0xf8>)
 800a59a:	f005 fdfd 	bl	8010198 <__assert_func>
	return 0; /* quiet compiler */
}
 800a59e:	4610      	mov	r0, r2
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	3734      	adds	r7, #52	; 0x34
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd90      	pop	{r4, r7, pc}
 800a5a8:	08015240 	.word	0x08015240
 800a5ac:	0801dba0 	.word	0x0801dba0
 800a5b0:	08015244 	.word	0x08015244

0800a5b4 <metal_io_write>:
 *			to inline cleanly.
 */
static inline void
metal_io_write(struct metal_io_region *io, unsigned long offset,
	       uint64_t value, memory_order order, int width)
{
 800a5b4:	b590      	push	{r4, r7, lr}
 800a5b6:	b08f      	sub	sp, #60	; 0x3c
 800a5b8:	af02      	add	r7, sp, #8
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	60b9      	str	r1, [r7, #8]
 800a5be:	e9c7 2300 	strd	r2, r3, [r7]
	void *ptr = metal_io_virt(io, offset);
 800a5c2:	68b9      	ldr	r1, [r7, #8]
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f7ff ff42 	bl	800a44e <metal_io_virt>
 800a5ca:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (io->ops.write)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	69db      	ldr	r3, [r3, #28]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d00c      	beq.n	800a5ee <metal_io_write+0x3a>
		(*io->ops.write)(io, offset, value, order, width);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	69dc      	ldr	r4, [r3, #28]
 800a5d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5da:	9301      	str	r3, [sp, #4]
 800a5dc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a5e0:	9300      	str	r3, [sp, #0]
 800a5e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5e6:	68b9      	ldr	r1, [r7, #8]
 800a5e8:	68f8      	ldr	r0, [r7, #12]
 800a5ea:	47a0      	blx	r4
	else if (ptr && sizeof(atomic_ullong) == width)
		atomic_store_explicit((atomic_ullong *)ptr, value, order);
#endif
	else
		metal_assert (0);
}
 800a5ec:	e04e      	b.n	800a68c <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uchar) == width)
 800a5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d00e      	beq.n	800a612 <metal_io_write+0x5e>
 800a5f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d10b      	bne.n	800a612 <metal_io_write+0x5e>
		atomic_store_explicit((atomic_uchar *)ptr, value, order);
 800a5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5fe:	783b      	ldrb	r3, [r7, #0]
 800a600:	76fb      	strb	r3, [r7, #27]
 800a602:	7efa      	ldrb	r2, [r7, #27]
 800a604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a606:	f3bf 8f5b 	dmb	ish
 800a60a:	701a      	strb	r2, [r3, #0]
 800a60c:	f3bf 8f5b 	dmb	ish
 800a610:	e03c      	b.n	800a68c <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ushort) == width)
 800a612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00e      	beq.n	800a636 <metal_io_write+0x82>
 800a618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a61a:	2b02      	cmp	r3, #2
 800a61c:	d10b      	bne.n	800a636 <metal_io_write+0x82>
		atomic_store_explicit((atomic_ushort *)ptr, value, order);
 800a61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a620:	627b      	str	r3, [r7, #36]	; 0x24
 800a622:	883b      	ldrh	r3, [r7, #0]
 800a624:	833b      	strh	r3, [r7, #24]
 800a626:	8b3a      	ldrh	r2, [r7, #24]
 800a628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62a:	f3bf 8f5b 	dmb	ish
 800a62e:	801a      	strh	r2, [r3, #0]
 800a630:	f3bf 8f5b 	dmb	ish
 800a634:	e02a      	b.n	800a68c <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uint) == width)
 800a636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d00e      	beq.n	800a65a <metal_io_write+0xa6>
 800a63c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a63e:	2b04      	cmp	r3, #4
 800a640:	d10b      	bne.n	800a65a <metal_io_write+0xa6>
		atomic_store_explicit((atomic_uint *)ptr, value, order);
 800a642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a644:	623b      	str	r3, [r7, #32]
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	617b      	str	r3, [r7, #20]
 800a64a:	697a      	ldr	r2, [r7, #20]
 800a64c:	6a3b      	ldr	r3, [r7, #32]
 800a64e:	f3bf 8f5b 	dmb	ish
 800a652:	601a      	str	r2, [r3, #0]
 800a654:	f3bf 8f5b 	dmb	ish
 800a658:	e018      	b.n	800a68c <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ulong) == width)
 800a65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d00e      	beq.n	800a67e <metal_io_write+0xca>
 800a660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a662:	2b04      	cmp	r3, #4
 800a664:	d10b      	bne.n	800a67e <metal_io_write+0xca>
		atomic_store_explicit((atomic_ulong *)ptr, value, order);
 800a666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a668:	61fb      	str	r3, [r7, #28]
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	613b      	str	r3, [r7, #16]
 800a66e:	693a      	ldr	r2, [r7, #16]
 800a670:	69fb      	ldr	r3, [r7, #28]
 800a672:	f3bf 8f5b 	dmb	ish
 800a676:	601a      	str	r2, [r3, #0]
 800a678:	f3bf 8f5b 	dmb	ish
 800a67c:	e006      	b.n	800a68c <metal_io_write+0xd8>
		metal_assert (0);
 800a67e:	4b05      	ldr	r3, [pc, #20]	; (800a694 <metal_io_write+0xe0>)
 800a680:	4a05      	ldr	r2, [pc, #20]	; (800a698 <metal_io_write+0xe4>)
 800a682:	f44f 7189 	mov.w	r1, #274	; 0x112
 800a686:	4805      	ldr	r0, [pc, #20]	; (800a69c <metal_io_write+0xe8>)
 800a688:	f005 fd86 	bl	8010198 <__assert_func>
}
 800a68c:	bf00      	nop
 800a68e:	3734      	adds	r7, #52	; 0x34
 800a690:	46bd      	mov	sp, r7
 800a692:	bd90      	pop	{r4, r7, pc}
 800a694:	08015240 	.word	0x08015240
 800a698:	0801dbb0 	.word	0x0801dbb0
 800a69c:	08015244 	.word	0x08015244

0800a6a0 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f005 fdcf 	bl	801024c <malloc>
 800a6ae:	4603      	mov	r3, r0
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3708      	adds	r7, #8
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
	free(ptr);
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f005 fdcb 	bl	801025c <free>
}
 800a6c6:	bf00      	nop
 800a6c8:	3708      	adds	r7, #8
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b084      	sub	sp, #16
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	3307      	adds	r3, #7
 800a6da:	00db      	lsls	r3, r3, #3
 800a6dc:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 800a6de:	68f8      	ldr	r0, [r7, #12]
 800a6e0:	f7ff ffde 	bl	800a6a0 <metal_allocate_memory>
 800a6e4:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d004      	beq.n	800a6f6 <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 800a6ec:	68fa      	ldr	r2, [r7, #12]
 800a6ee:	2100      	movs	r1, #0
 800a6f0:	68b8      	ldr	r0, [r7, #8]
 800a6f2:	f005 fde3 	bl	80102bc <memset>
	}

	return vqs;
 800a6f6:	68bb      	ldr	r3, [r7, #8]
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3710      	adds	r7, #16
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b086      	sub	sp, #24
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	891b      	ldrh	r3, [r3, #8]
 800a70c:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	3b18      	subs	r3, #24
 800a718:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a71e:	697a      	ldr	r2, [r7, #20]
 800a720:	429a      	cmp	r2, r3
 800a722:	d905      	bls.n	800a730 <rproc_virtio_virtqueue_notify+0x30>
 800a724:	4b0d      	ldr	r3, [pc, #52]	; (800a75c <rproc_virtio_virtqueue_notify+0x5c>)
 800a726:	4a0e      	ldr	r2, [pc, #56]	; (800a760 <rproc_virtio_virtqueue_notify+0x60>)
 800a728:	2133      	movs	r1, #51	; 0x33
 800a72a:	480e      	ldr	r0, [pc, #56]	; (800a764 <rproc_virtio_virtqueue_notify+0x64>)
 800a72c:	f005 fd34 	bl	8010198 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a734:	697a      	ldr	r2, [r7, #20]
 800a736:	4613      	mov	r3, r2
 800a738:	005b      	lsls	r3, r3, #1
 800a73a:	4413      	add	r3, r2
 800a73c:	00db      	lsls	r3, r3, #3
 800a73e:	440b      	add	r3, r1
 800a740:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	691b      	ldr	r3, [r3, #16]
 800a746:	68fa      	ldr	r2, [r7, #12]
 800a748:	6810      	ldr	r0, [r2, #0]
 800a74a:	68ba      	ldr	r2, [r7, #8]
 800a74c:	6912      	ldr	r2, [r2, #16]
 800a74e:	4611      	mov	r1, r2
 800a750:	4798      	blx	r3
}
 800a752:	bf00      	nop
 800a754:	3718      	adds	r7, #24
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	0801528c 	.word	0x0801528c
 800a760:	0801db80 	.word	0x0801db80
 800a764:	080152a8 	.word	0x080152a8

0800a768 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b086      	sub	sp, #24
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	3b18      	subs	r3, #24
 800a774:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	68db      	ldr	r3, [r3, #12]
 800a780:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	3318      	adds	r3, #24
 800a786:	4619      	mov	r1, r3
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f7ff fe7b 	bl	800a484 <metal_io_virt_to_offset>
 800a78e:	4601      	mov	r1, r0
 800a790:	2301      	movs	r3, #1
 800a792:	2205      	movs	r2, #5
 800a794:	68f8      	ldr	r0, [r7, #12]
 800a796:	f7ff fe8f 	bl	800a4b8 <metal_io_read>
 800a79a:	4602      	mov	r2, r0
 800a79c:	460b      	mov	r3, r1
 800a79e:	4613      	mov	r3, r2
 800a7a0:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 800a7a2:	7afb      	ldrb	r3, [r7, #11]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3718      	adds	r7, #24
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <rproc_virtio_set_status>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_status(struct virtio_device *vdev,
				    unsigned char status)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b088      	sub	sp, #32
 800a7b0:	af02      	add	r7, sp, #8
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	70fb      	strb	r3, [r7, #3]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	3b18      	subs	r3, #24
 800a7bc:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	689b      	ldr	r3, [r3, #8]
 800a7c2:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	60fb      	str	r3, [r7, #12]
	metal_io_write8(io,
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	3318      	adds	r3, #24
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	68f8      	ldr	r0, [r7, #12]
 800a7d2:	f7ff fe57 	bl	800a484 <metal_io_virt_to_offset>
 800a7d6:	4601      	mov	r1, r0
 800a7d8:	78fa      	ldrb	r2, [r7, #3]
 800a7da:	f04f 0300 	mov.w	r3, #0
 800a7de:	2001      	movs	r0, #1
 800a7e0:	9001      	str	r0, [sp, #4]
 800a7e2:	2005      	movs	r0, #5
 800a7e4:	9000      	str	r0, [sp, #0]
 800a7e6:	68f8      	ldr	r0, [r7, #12]
 800a7e8:	f7ff fee4 	bl	800a5b4 <metal_io_write>
			metal_io_virt_to_offset(io, &vdev_rsc->status),
			status);
	rpvdev->notify(rpvdev->priv, vdev->index);
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	691b      	ldr	r3, [r3, #16]
 800a7f0:	697a      	ldr	r2, [r7, #20]
 800a7f2:	6810      	ldr	r0, [r2, #0]
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	6812      	ldr	r2, [r2, #0]
 800a7f8:	4611      	mov	r1, r2
 800a7fa:	4798      	blx	r3
}
 800a7fc:	bf00      	nop
 800a7fe:	3718      	adds	r7, #24
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <rproc_virtio_get_features>:
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b086      	sub	sp, #24
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	3b18      	subs	r3, #24
 800a810:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	330c      	adds	r3, #12
 800a822:	4619      	mov	r1, r3
 800a824:	68f8      	ldr	r0, [r7, #12]
 800a826:	f7ff fe2d 	bl	800a484 <metal_io_virt_to_offset>
 800a82a:	4601      	mov	r1, r0
 800a82c:	2304      	movs	r3, #4
 800a82e:	2205      	movs	r2, #5
 800a830:	68f8      	ldr	r0, [r7, #12]
 800a832:	f7ff fe41 	bl	800a4b8 <metal_io_read>
 800a836:	4602      	mov	r2, r0
 800a838:	460b      	mov	r3, r1
 800a83a:	4613      	mov	r3, r2
 800a83c:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 800a83e:	68bb      	ldr	r3, [r7, #8]
}
 800a840:	4618      	mov	r0, r3
 800a842:	3718      	adds	r7, #24
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <rproc_virtio_set_features>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_features(struct virtio_device *vdev,
				      uint32_t features)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b088      	sub	sp, #32
 800a84c:	af02      	add	r7, sp, #8
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	3b18      	subs	r3, #24
 800a856:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	68db      	ldr	r3, [r3, #12]
 800a862:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we set features based on the role ? */
	metal_io_write32(io,
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	330c      	adds	r3, #12
 800a868:	4619      	mov	r1, r3
 800a86a:	68f8      	ldr	r0, [r7, #12]
 800a86c:	f7ff fe0a 	bl	800a484 <metal_io_virt_to_offset>
 800a870:	4601      	mov	r1, r0
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	461a      	mov	r2, r3
 800a876:	f04f 0300 	mov.w	r3, #0
 800a87a:	2004      	movs	r0, #4
 800a87c:	9001      	str	r0, [sp, #4]
 800a87e:	2005      	movs	r0, #5
 800a880:	9000      	str	r0, [sp, #0]
 800a882:	68f8      	ldr	r0, [r7, #12]
 800a884:	f7ff fe96 	bl	800a5b4 <metal_io_write>
			 metal_io_virt_to_offset(io, &vdev_rsc->dfeatures),
			 features);
	rpvdev->notify(rpvdev->priv, vdev->index);
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	691b      	ldr	r3, [r3, #16]
 800a88c:	697a      	ldr	r2, [r7, #20]
 800a88e:	6810      	ldr	r0, [r2, #0]
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	6812      	ldr	r2, [r2, #0]
 800a894:	4611      	mov	r1, r2
 800a896:	4798      	blx	r3
}
 800a898:	bf00      	nop
 800a89a:	3718      	adds	r7, #24
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <rproc_virtio_negotiate_features>:
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b083      	sub	sp, #12
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 800a8aa:	2300      	movs	r3, #0
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b085      	sub	sp, #20
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	60f8      	str	r0, [r7, #12]
 800a8c0:	60b9      	str	r1, [r7, #8]
 800a8c2:	607a      	str	r2, [r7, #4]
 800a8c4:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 800a8c6:	bf00      	nop
 800a8c8:	3714      	adds	r7, #20
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr

0800a8d2 <rproc_virtio_write_config>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_write_config(struct virtio_device *vdev,
				      uint32_t offset, void *src, int length)
{
 800a8d2:	b480      	push	{r7}
 800a8d4:	b085      	sub	sp, #20
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	60f8      	str	r0, [r7, #12]
 800a8da:	60b9      	str	r1, [r7, #8]
 800a8dc:	607a      	str	r2, [r7, #4]
 800a8de:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)src;
	(void)length;
}
 800a8e0:	bf00      	nop
 800a8e2:	3714      	adds	r7, #20
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr

0800a8ec <rproc_virtio_reset_device>:

static void rproc_virtio_reset_device(struct virtio_device *vdev)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
	if (vdev->role == VIRTIO_DEV_MASTER)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	699b      	ldr	r3, [r3, #24]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d103      	bne.n	800a904 <rproc_virtio_reset_device+0x18>
		rproc_virtio_set_status(vdev,
 800a8fc:	2140      	movs	r1, #64	; 0x40
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f7ff ff54 	bl	800a7ac <rproc_virtio_set_status>
					VIRTIO_CONFIG_STATUS_NEEDS_RESET);
}
 800a904:	bf00      	nop
 800a906:	3708      	adds	r7, #8
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b08e      	sub	sp, #56	; 0x38
 800a910:	af00      	add	r7, sp, #0
 800a912:	60f8      	str	r0, [r7, #12]
 800a914:	60b9      	str	r1, [r7, #8]
 800a916:	607a      	str	r2, [r7, #4]
 800a918:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 800a91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a920:	7e5b      	ldrb	r3, [r3, #25]
 800a922:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 800a924:	2050      	movs	r0, #80	; 0x50
 800a926:	f7ff febb 	bl	800a6a0 <metal_allocate_memory>
 800a92a:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
 800a92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d101      	bne.n	800a936 <rproc_virtio_create_vdev+0x2a>
		return NULL;
 800a932:	2300      	movs	r3, #0
 800a934:	e092      	b.n	800aa5c <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 800a936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a938:	4613      	mov	r3, r2
 800a93a:	005b      	lsls	r3, r3, #1
 800a93c:	4413      	add	r3, r2
 800a93e:	00db      	lsls	r3, r3, #3
 800a940:	4618      	mov	r0, r3
 800a942:	f7ff fead 	bl	800a6a0 <metal_allocate_memory>
 800a946:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 800a948:	6a3b      	ldr	r3, [r7, #32]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	f000 8081 	beq.w	800aa52 <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 800a950:	2250      	movs	r2, #80	; 0x50
 800a952:	2100      	movs	r1, #0
 800a954:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a956:	f005 fcb1 	bl	80102bc <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 800a95a:	2218      	movs	r2, #24
 800a95c:	2100      	movs	r1, #0
 800a95e:	6a38      	ldr	r0, [r7, #32]
 800a960:	f005 fcac 	bl	80102bc <memset>
	vdev = &rpvdev->vdev;
 800a964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a966:	3318      	adds	r3, #24
 800a968:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 800a96a:	2300      	movs	r3, #0
 800a96c:	637b      	str	r3, [r7, #52]	; 0x34
 800a96e:	e025      	b.n	800a9bc <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 800a970:	2300      	movs	r3, #0
 800a972:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
 800a974:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a976:	4613      	mov	r3, r2
 800a978:	009b      	lsls	r3, r3, #2
 800a97a:	4413      	add	r3, r2
 800a97c:	009b      	lsls	r3, r3, #2
 800a97e:	3318      	adds	r3, #24
 800a980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a982:	4413      	add	r3, r2
 800a984:	3304      	adds	r3, #4
 800a986:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d102      	bne.n	800a994 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 800a98e:	69bb      	ldr	r3, [r7, #24]
 800a990:	689b      	ldr	r3, [r3, #8]
 800a992:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 800a994:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a996:	f7ff fe9a 	bl	800a6ce <virtqueue_allocate>
 800a99a:	6178      	str	r0, [r7, #20]
		if (!vq)
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d031      	beq.n	800aa06 <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 800a9a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9a4:	4613      	mov	r3, r2
 800a9a6:	005b      	lsls	r3, r3, #1
 800a9a8:	4413      	add	r3, r2
 800a9aa:	00db      	lsls	r3, r3, #3
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	6a3b      	ldr	r3, [r7, #32]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	697a      	ldr	r2, [r7, #20]
 800a9b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 800a9b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	637b      	str	r3, [r7, #52]	; 0x34
 800a9bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d3d5      	bcc.n	800a970 <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a9c8:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 800a9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a9ce:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 800a9d0:	69fb      	ldr	r3, [r7, #28]
 800a9d2:	6a3a      	ldr	r2, [r7, #32]
 800a9d4:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 800a9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9da:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 800a9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9de:	683a      	ldr	r2, [r7, #0]
 800a9e0:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 800a9e2:	69fb      	ldr	r3, [r7, #28]
 800a9e4:	68ba      	ldr	r2, [r7, #8]
 800a9e6:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 800a9e8:	69fb      	ldr	r3, [r7, #28]
 800a9ea:	68fa      	ldr	r2, [r7, #12]
 800a9ec:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9f2:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9f8:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 800a9fa:	69fb      	ldr	r3, [r7, #28]
 800a9fc:	4a19      	ldr	r2, [pc, #100]	; (800aa64 <rproc_virtio_create_vdev+0x158>)
 800a9fe:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 800aa00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa02:	3318      	adds	r3, #24
 800aa04:	e02a      	b.n	800aa5c <rproc_virtio_create_vdev+0x150>
			goto err1;
 800aa06:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 800aa08:	2300      	movs	r3, #0
 800aa0a:	637b      	str	r3, [r7, #52]	; 0x34
 800aa0c:	e019      	b.n	800aa42 <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 800aa0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa10:	4613      	mov	r3, r2
 800aa12:	005b      	lsls	r3, r3, #1
 800aa14:	4413      	add	r3, r2
 800aa16:	00db      	lsls	r3, r3, #3
 800aa18:	461a      	mov	r2, r3
 800aa1a:	6a3b      	ldr	r3, [r7, #32]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00b      	beq.n	800aa3c <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 800aa24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa26:	4613      	mov	r3, r2
 800aa28:	005b      	lsls	r3, r3, #1
 800aa2a:	4413      	add	r3, r2
 800aa2c:	00db      	lsls	r3, r3, #3
 800aa2e:	461a      	mov	r2, r3
 800aa30:	6a3b      	ldr	r3, [r7, #32]
 800aa32:	4413      	add	r3, r2
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7ff fe3e 	bl	800a6b8 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 800aa3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa3e:	3301      	adds	r3, #1
 800aa40:	637b      	str	r3, [r7, #52]	; 0x34
 800aa42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d3e1      	bcc.n	800aa0e <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 800aa4a:	6a38      	ldr	r0, [r7, #32]
 800aa4c:	f7ff fe34 	bl	800a6b8 <metal_free_memory>
 800aa50:	e000      	b.n	800aa54 <rproc_virtio_create_vdev+0x148>
		goto err0;
 800aa52:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 800aa54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa56:	f7ff fe2f 	bl	800a6b8 <metal_free_memory>
	return NULL;
 800aa5a:	2300      	movs	r3, #0
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3738      	adds	r7, #56	; 0x38
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	0801db5c 	.word	0x0801db5c

0800aa68 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b087      	sub	sp, #28
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	60b9      	str	r1, [r7, #8]
 800aa72:	607a      	str	r2, [r7, #4]
 800aa74:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa7a:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 800aa7c:	68ba      	ldr	r2, [r7, #8]
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d302      	bcc.n	800aa8a <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 800aa84:	f06f 0301 	mvn.w	r3, #1
 800aa88:	e019      	b.n	800aabe <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800aa8e:	68ba      	ldr	r2, [r7, #8]
 800aa90:	4613      	mov	r3, r2
 800aa92:	005b      	lsls	r3, r3, #1
 800aa94:	4413      	add	r3, r2
 800aa96:	00db      	lsls	r3, r3, #3
 800aa98:	440b      	add	r3, r1
 800aa9a:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	6a3a      	ldr	r2, [r7, #32]
 800aaa0:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	683a      	ldr	r2, [r7, #0]
 800aaac:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 800aaae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab0:	b29a      	uxth	r2, r3
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaba:	609a      	str	r2, [r3, #8]

	return 0;
 800aabc:	2300      	movs	r3, #0
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	371c      	adds	r7, #28
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr

0800aaca <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 800aaca:	b580      	push	{r7, lr}
 800aacc:	b086      	sub	sp, #24
 800aace:	af00      	add	r7, sp, #0
 800aad0:	6078      	str	r0, [r7, #4]
 800aad2:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d102      	bne.n	800aae0 <rproc_virtio_notified+0x16>
		return -EINVAL;
 800aada:	f06f 0315 	mvn.w	r3, #21
 800aade:	e02c      	b.n	800ab3a <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	683a      	ldr	r2, [r7, #0]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d101      	bne.n	800aaee <rproc_virtio_notified+0x24>
		return 0;
 800aaea:	2300      	movs	r3, #0
 800aaec:	e025      	b.n	800ab3a <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaf2:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	617b      	str	r3, [r7, #20]
 800aaf8:	e01a      	b.n	800ab30 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800aafe:	697a      	ldr	r2, [r7, #20]
 800ab00:	4613      	mov	r3, r2
 800ab02:	005b      	lsls	r3, r3, #1
 800ab04:	4413      	add	r3, r2
 800ab06:	00db      	lsls	r3, r3, #3
 800ab08:	440b      	add	r3, r1
 800ab0a:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	691b      	ldr	r3, [r3, #16]
 800ab10:	683a      	ldr	r2, [r7, #0]
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d003      	beq.n	800ab1e <rproc_virtio_notified+0x54>
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab1c:	d105      	bne.n	800ab2a <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 800ab24:	68b8      	ldr	r0, [r7, #8]
 800ab26:	f001 fb58 	bl	800c1da <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	617b      	str	r3, [r7, #20]
 800ab30:	697a      	ldr	r2, [r7, #20]
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d3e0      	bcc.n	800aafa <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3718      	adds	r7, #24
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b084      	sub	sp, #16
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	699b      	ldr	r3, [r3, #24]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d00a      	beq.n	800ab68 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f7ff fe08 	bl	800a768 <rproc_virtio_get_status>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 800ab5c:	7bfb      	ldrb	r3, [r7, #15]
 800ab5e:	f003 0304 	and.w	r3, r3, #4
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d102      	bne.n	800ab6c <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 800ab66:	e7f4      	b.n	800ab52 <rproc_virtio_wait_remote_ready+0x10>
		return;
 800ab68:	bf00      	nop
 800ab6a:	e000      	b.n	800ab6e <rproc_virtio_wait_remote_ready+0x2c>
			return;
 800ab6c:	bf00      	nop
	}
}
 800ab6e:	3710      	adds	r7, #16
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b083      	sub	sp, #12
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 800ab7c:	bf00      	nop
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2201      	movs	r2, #1
 800ab82:	4611      	mov	r1, r2
 800ab84:	f3bf 8f5b 	dmb	ish
 800ab88:	e8d3 2f4f 	ldrexb	r2, [r3]
 800ab8c:	e8c3 1f40 	strexb	r0, r1, [r3]
 800ab90:	2800      	cmp	r0, #0
 800ab92:	d1f9      	bne.n	800ab88 <__metal_mutex_acquire+0x14>
 800ab94:	f3bf 8f5b 	dmb	ish
 800ab98:	b2d3      	uxtb	r3, r2
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d1ef      	bne.n	800ab7e <__metal_mutex_acquire+0xa>
		;
	}
}
 800ab9e:	bf00      	nop
 800aba0:	bf00      	nop
 800aba2:	370c      	adds	r7, #12
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 800abac:	b480      	push	{r7}
 800abae:	b083      	sub	sp, #12
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f3bf 8f5b 	dmb	ish
 800abba:	2200      	movs	r2, #0
 800abbc:	701a      	strb	r2, [r3, #0]
 800abbe:	f3bf 8f5b 	dmb	ish
}
 800abc2:	bf00      	nop
 800abc4:	370c      	adds	r7, #12
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr

0800abce <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 800abce:	b580      	push	{r7, lr}
 800abd0:	b082      	sub	sp, #8
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f7ff ffcc 	bl	800ab74 <__metal_mutex_acquire>
}
 800abdc:	bf00      	nop
 800abde:	3708      	adds	r7, #8
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f7ff ffdd 	bl	800abac <__metal_mutex_release>
}
 800abf2:	bf00      	nop
 800abf4:	3708      	adds	r7, #8
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <metal_list_add_before>:
{
 800abfa:	b480      	push	{r7}
 800abfc:	b083      	sub	sp, #12
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
 800ac02:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	685a      	ldr	r2, [r3, #4]
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	683a      	ldr	r2, [r7, #0]
 800ac18:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	683a      	ldr	r2, [r7, #0]
 800ac20:	601a      	str	r2, [r3, #0]
}
 800ac22:	bf00      	nop
 800ac24:	370c      	adds	r7, #12
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr

0800ac2e <metal_list_add_tail>:
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b082      	sub	sp, #8
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
 800ac36:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 800ac38:	6839      	ldr	r1, [r7, #0]
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f7ff ffdd 	bl	800abfa <metal_list_add_before>
}
 800ac40:	bf00      	nop
 800ac42:	3708      	adds	r7, #8
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b083      	sub	sp, #12
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	6852      	ldr	r2, [r2, #4]
 800ac58:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	6812      	ldr	r2, [r2, #0]
 800ac62:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	605a      	str	r2, [r3, #4]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	685a      	ldr	r2, [r3, #4]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	601a      	str	r2, [r3, #0]
}
 800ac72:	bf00      	nop
 800ac74:	370c      	adds	r7, #12
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr

0800ac7e <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 800ac7e:	b480      	push	{r7}
 800ac80:	b083      	sub	sp, #12
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
 800ac86:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	095b      	lsrs	r3, r3, #5
 800ac8c:	009a      	lsls	r2, r3, #2
 800ac8e:	6879      	ldr	r1, [r7, #4]
 800ac90:	440a      	add	r2, r1
 800ac92:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 800ac94:	683a      	ldr	r2, [r7, #0]
 800ac96:	f002 021f 	and.w	r2, r2, #31
 800ac9a:	2001      	movs	r0, #1
 800ac9c:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 800aca0:	009b      	lsls	r3, r3, #2
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	4403      	add	r3, r0
 800aca6:	430a      	orrs	r2, r1
 800aca8:	601a      	str	r2, [r3, #0]
}
 800acaa:	bf00      	nop
 800acac:	370c      	adds	r7, #12
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr

0800acb6 <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 800acb6:	b480      	push	{r7}
 800acb8:	b083      	sub	sp, #12
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
 800acbe:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	095b      	lsrs	r3, r3, #5
 800acc4:	009b      	lsls	r3, r3, #2
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	4413      	add	r3, r2
 800acca:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	f003 031f 	and.w	r3, r3, #31
 800acd2:	2101      	movs	r1, #1
 800acd4:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 800acd8:	4013      	ands	r3, r2
}
 800acda:	4618      	mov	r0, r3
 800acdc:	370c      	adds	r7, #12
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr

0800ace6 <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 800ace6:	b480      	push	{r7}
 800ace8:	b083      	sub	sp, #12
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
 800acee:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	095b      	lsrs	r3, r3, #5
 800acf4:	009a      	lsls	r2, r3, #2
 800acf6:	6879      	ldr	r1, [r7, #4]
 800acf8:	440a      	add	r2, r1
 800acfa:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 800acfc:	683a      	ldr	r2, [r7, #0]
 800acfe:	f002 021f 	and.w	r2, r2, #31
 800ad02:	2001      	movs	r0, #1
 800ad04:	fa00 f202 	lsl.w	r2, r0, r2
 800ad08:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	4403      	add	r3, r0
 800ad10:	400a      	ands	r2, r1
 800ad12:	601a      	str	r2, [r3, #0]
}
 800ad14:	bf00      	nop
 800ad16:	370c      	adds	r7, #12
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 800ad2a:	6839      	ldr	r1, [r7, #0]
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f7ff ffc2 	bl	800acb6 <metal_bitmap_is_bit_set>
 800ad32:	4603      	mov	r3, r0
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	bf0c      	ite	eq
 800ad38:	2301      	moveq	r3, #1
 800ad3a:	2300      	movne	r3, #0
 800ad3c:	b2db      	uxtb	r3, r3
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}

0800ad46 <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 800ad46:	b580      	push	{r7, lr}
 800ad48:	b086      	sub	sp, #24
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	60f8      	str	r0, [r7, #12]
 800ad4e:	60b9      	str	r1, [r7, #8]
 800ad50:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	617b      	str	r3, [r7, #20]
 800ad56:	e002      	b.n	800ad5e <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	617b      	str	r3, [r7, #20]
	for (bit = start;
 800ad5e:	697a      	ldr	r2, [r7, #20]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d207      	bcs.n	800ad76 <metal_bitmap_next_clear_bit+0x30>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	4619      	mov	r1, r3
 800ad6a:	68f8      	ldr	r0, [r7, #12]
 800ad6c:	f7ff ffd8 	bl	800ad20 <metal_bitmap_is_bit_clear>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d0f0      	beq.n	800ad58 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 800ad76:	697b      	ldr	r3, [r7, #20]
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3718      	adds	r7, #24
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <rpmsg_init_ept>:
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	607a      	str	r2, [r7, #4]
 800ad8c:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2220      	movs	r2, #32
 800ad92:	68b9      	ldr	r1, [r7, #8]
 800ad94:	4618      	mov	r0, r3
 800ad96:	f006 fbef 	bl	8011578 <strncpy>
	ept->addr = src;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	683a      	ldr	r2, [r7, #0]
 800ada4:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	69ba      	ldr	r2, [r7, #24]
 800adaa:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	69fa      	ldr	r2, [r7, #28]
 800adb0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800adb2:	bf00      	nop
 800adb4:	3710      	adds	r7, #16
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 800adba:	b580      	push	{r7, lr}
 800adbc:	b084      	sub	sp, #16
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
 800adc2:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 800adc4:	f04f 33ff 	mov.w	r3, #4294967295
 800adc8:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	461a      	mov	r2, r3
 800adce:	2100      	movs	r1, #0
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f7ff ffb8 	bl	800ad46 <metal_bitmap_next_clear_bit>
 800add6:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	68ba      	ldr	r2, [r7, #8]
 800addc:	429a      	cmp	r2, r3
 800adde:	d206      	bcs.n	800adee <rpmsg_get_address+0x34>
		addr = nextbit;
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	4619      	mov	r1, r3
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f7ff ff48 	bl	800ac7e <metal_bitmap_set_bit>
	}

	return addr;
 800adee:	68fb      	ldr	r3, [r7, #12]
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3710      	adds	r7, #16
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	60f8      	str	r0, [r7, #12]
 800ae00:	60b9      	str	r1, [r7, #8]
 800ae02:	607a      	str	r2, [r7, #4]
	if (addr < size)
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	da03      	bge.n	800ae14 <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 800ae0c:	6879      	ldr	r1, [r7, #4]
 800ae0e:	68f8      	ldr	r0, [r7, #12]
 800ae10:	f7ff ff69 	bl	800ace6 <metal_bitmap_clear_bit>
}
 800ae14:	bf00      	nop
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b084      	sub	sp, #16
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	60b9      	str	r1, [r7, #8]
 800ae26:	607a      	str	r2, [r7, #4]
	if (addr < size)
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	da05      	bge.n	800ae3c <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 800ae30:	6879      	ldr	r1, [r7, #4]
 800ae32:	68f8      	ldr	r0, [r7, #12]
 800ae34:	f7ff ff3f 	bl	800acb6 <metal_bitmap_is_bit_set>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	e000      	b.n	800ae3e <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 800ae3c:	4b02      	ldr	r3, [pc, #8]	; (800ae48 <rpmsg_is_address_set+0x2c>)
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3710      	adds	r7, #16
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	fffff82d 	.word	0xfffff82d

0800ae4c <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 800ae58:	687a      	ldr	r2, [r7, #4]
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	da05      	bge.n	800ae6c <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 800ae60:	6879      	ldr	r1, [r7, #4]
 800ae62:	68f8      	ldr	r0, [r7, #12]
 800ae64:	f7ff ff0b 	bl	800ac7e <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	e000      	b.n	800ae6e <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 800ae6c:	4b02      	ldr	r3, [pc, #8]	; (800ae78 <rpmsg_set_address+0x2c>)
	}
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3710      	adds	r7, #16
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop
 800ae78:	fffff82d 	.word	0xfffff82d

0800ae7c <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 800ae7c:	b590      	push	{r4, r7, lr}
 800ae7e:	b089      	sub	sp, #36	; 0x24
 800ae80:	af02      	add	r7, sp, #8
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	60b9      	str	r1, [r7, #8]
 800ae86:	607a      	str	r2, [r7, #4]
 800ae88:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d00a      	beq.n	800aea6 <rpmsg_send_offchannel_raw+0x2a>
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	6a1b      	ldr	r3, [r3, #32]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d006      	beq.n	800aea6 <rpmsg_send_offchannel_raw+0x2a>
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d003      	beq.n	800aea6 <rpmsg_send_offchannel_raw+0x2a>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aea4:	d101      	bne.n	800aeaa <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 800aea6:	4b0d      	ldr	r3, [pc, #52]	; (800aedc <rpmsg_send_offchannel_raw+0x60>)
 800aea8:	e014      	b.n	800aed4 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	6a1b      	ldr	r3, [r3, #32]
 800aeae:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d00c      	beq.n	800aed2 <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800aebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aebe:	9301      	str	r3, [sp, #4]
 800aec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec2:	9300      	str	r3, [sp, #0]
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	68b9      	ldr	r1, [r7, #8]
 800aeca:	6978      	ldr	r0, [r7, #20]
 800aecc:	47a0      	blx	r4
 800aece:	4603      	mov	r3, r0
 800aed0:	e000      	b.n	800aed4 <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 800aed2:	4b02      	ldr	r3, [pc, #8]	; (800aedc <rpmsg_send_offchannel_raw+0x60>)
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	371c      	adds	r7, #28
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd90      	pop	{r4, r7, pc}
 800aedc:	fffff82d 	.word	0xfffff82d

0800aee0 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b090      	sub	sp, #64	; 0x40
 800aee4:	af02      	add	r7, sp, #8
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	633b      	str	r3, [r7, #48]	; 0x30
	ns_msg.addr = ept->addr;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef2:	62fb      	str	r3, [r7, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 800aef4:	6879      	ldr	r1, [r7, #4]
 800aef6:	f107 030c 	add.w	r3, r7, #12
 800aefa:	2220      	movs	r2, #32
 800aefc:	4618      	mov	r0, r3
 800aefe:	f006 fb3b 	bl	8011578 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800af06:	f107 030c 	add.w	r3, r7, #12
 800af0a:	2201      	movs	r2, #1
 800af0c:	9201      	str	r2, [sp, #4]
 800af0e:	2228      	movs	r2, #40	; 0x28
 800af10:	9200      	str	r2, [sp, #0]
 800af12:	2235      	movs	r2, #53	; 0x35
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f7ff ffb1 	bl	800ae7c <rpmsg_send_offchannel_raw>
 800af1a:	6378      	str	r0, [r7, #52]	; 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 800af1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af1e:	2b00      	cmp	r3, #0
 800af20:	da01      	bge.n	800af26 <rpmsg_send_ns_message+0x46>
		return ret;
 800af22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af24:	e000      	b.n	800af28 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 800af26:	2300      	movs	r3, #0
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3738      	adds	r7, #56	; 0x38
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b088      	sub	sp, #32
 800af34:	af00      	add	r7, sp, #0
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	60b9      	str	r1, [r7, #8]
 800af3a:	607a      	str	r2, [r7, #4]
 800af3c:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	61fb      	str	r3, [r7, #28]
 800af44:	e04b      	b.n	800afde <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 800af46:	2300      	movs	r3, #0
 800af48:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	3b34      	subs	r3, #52	; 0x34
 800af4e:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af56:	d006      	beq.n	800af66 <rpmsg_get_endpoint+0x36>
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d101      	bne.n	800af66 <rpmsg_get_endpoint+0x36>
			return ept;
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	e040      	b.n	800afe8 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af6a:	687a      	ldr	r2, [r7, #4]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d106      	bne.n	800af7e <rpmsg_get_endpoint+0x4e>
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af74:	683a      	ldr	r2, [r7, #0]
 800af76:	429a      	cmp	r2, r3
 800af78:	d101      	bne.n	800af7e <rpmsg_get_endpoint+0x4e>
			return ept;
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	e034      	b.n	800afe8 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d00c      	beq.n	800af9e <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	2220      	movs	r2, #32
 800af88:	68b9      	ldr	r1, [r7, #8]
 800af8a:	4618      	mov	r0, r3
 800af8c:	f006 fae2 	bl	8011554 <strncmp>
 800af90:	4603      	mov	r3, r0
 800af92:	2b00      	cmp	r3, #0
 800af94:	bf0c      	ite	eq
 800af96:	2301      	moveq	r3, #1
 800af98:	2300      	movne	r3, #0
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d018      	beq.n	800afd6 <rpmsg_get_endpoint+0xa6>
 800afa4:	69bb      	ldr	r3, [r7, #24]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d015      	beq.n	800afd6 <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afb0:	d006      	beq.n	800afc0 <rpmsg_get_endpoint+0x90>
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afb6:	683a      	ldr	r2, [r7, #0]
 800afb8:	429a      	cmp	r2, r3
 800afba:	d101      	bne.n	800afc0 <rpmsg_get_endpoint+0x90>
			return ept;
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	e013      	b.n	800afe8 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afc6:	d107      	bne.n	800afd8 <rpmsg_get_endpoint+0xa8>
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afd0:	d102      	bne.n	800afd8 <rpmsg_get_endpoint+0xa8>
			return ept;
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	e008      	b.n	800afe8 <rpmsg_get_endpoint+0xb8>
			continue;
 800afd6:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	61fb      	str	r3, [r7, #28]
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	69fa      	ldr	r2, [r7, #28]
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d1af      	bne.n	800af46 <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 800afe6:	2300      	movs	r3, #0
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3720      	adds	r7, #32
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}

0800aff0 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d016      	beq.n	800b02c <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6a1b      	ldr	r3, [r3, #32]
 800b002:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b00c:	d008      	beq.n	800b020 <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f103 0048 	add.w	r0, r3, #72	; 0x48
				      ept->addr);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 800b018:	461a      	mov	r2, r3
 800b01a:	2180      	movs	r1, #128	; 0x80
 800b01c:	f7ff feec 	bl	800adf8 <rpmsg_release_address>
	metal_list_del(&ept->node);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	3334      	adds	r3, #52	; 0x34
 800b024:	4618      	mov	r0, r3
 800b026:	f7ff fe0f 	bl	800ac48 <metal_list_del>
 800b02a:	e000      	b.n	800b02e <rpmsg_unregister_endpoint+0x3e>
		return;
 800b02c:	bf00      	nop
}
 800b02e:	3710      	adds	r7, #16
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 800b044:	687a      	ldr	r2, [r7, #4]
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	3334      	adds	r3, #52	; 0x34
 800b04a:	4619      	mov	r1, r3
 800b04c:	4610      	mov	r0, r2
 800b04e:	f7ff fdee 	bl	800ac2e <metal_list_add_tail>
	return RPMSG_SUCCESS;
 800b052:	2300      	movs	r3, #0
}
 800b054:	4618      	mov	r0, r3
 800b056:	3708      	adds	r7, #8
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b088      	sub	sp, #32
 800b060:	af02      	add	r7, sp, #8
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	607a      	str	r2, [r7, #4]
 800b068:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	613b      	str	r3, [r7, #16]

	if (!ept)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d101      	bne.n	800b078 <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 800b074:	4b37      	ldr	r3, [pc, #220]	; (800b154 <rpmsg_create_ept+0xf8>)
 800b076:	e068      	b.n	800b14a <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	3358      	adds	r3, #88	; 0x58
 800b07c:	4618      	mov	r0, r3
 800b07e:	f7ff fda6 	bl	800abce <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b088:	d018      	beq.n	800b0bc <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	3348      	adds	r3, #72	; 0x48
 800b08e:	683a      	ldr	r2, [r7, #0]
 800b090:	2180      	movs	r1, #128	; 0x80
 800b092:	4618      	mov	r0, r3
 800b094:	f7ff fec2 	bl	800ae1c <rpmsg_is_address_set>
 800b098:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d107      	bne.n	800b0b0 <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	3348      	adds	r3, #72	; 0x48
 800b0a4:	683a      	ldr	r2, [r7, #0]
 800b0a6:	2180      	movs	r1, #128	; 0x80
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f7ff fecf 	bl	800ae4c <rpmsg_set_address>
 800b0ae:	e00c      	b.n	800b0ca <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	dd40      	ble.n	800b138 <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	617b      	str	r3, [r7, #20]
			goto ret_status;
 800b0ba:	e040      	b.n	800b13e <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	3348      	adds	r3, #72	; 0x48
 800b0c0:	2180      	movs	r1, #128	; 0x80
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f7ff fe79 	bl	800adba <rpmsg_get_address>
 800b0c8:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 800b0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0cc:	9301      	str	r3, [sp, #4]
 800b0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d0:	9300      	str	r3, [sp, #0]
 800b0d2:	6a3b      	ldr	r3, [r7, #32]
 800b0d4:	693a      	ldr	r2, [r7, #16]
 800b0d6:	6879      	ldr	r1, [r7, #4]
 800b0d8:	68f8      	ldr	r0, [r7, #12]
 800b0da:	f7ff fe51 	bl	800ad80 <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 800b0de:	68f9      	ldr	r1, [r7, #12]
 800b0e0:	68b8      	ldr	r0, [r7, #8]
 800b0e2:	f7ff ffa7 	bl	800b034 <rpmsg_register_endpoint>
 800b0e6:	6178      	str	r0, [r7, #20]
	if (status < 0)
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	da06      	bge.n	800b0fc <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	3348      	adds	r3, #72	; 0x48
 800b0f2:	693a      	ldr	r2, [r7, #16]
 800b0f4:	2180      	movs	r1, #128	; 0x80
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7ff fe7e 	bl	800adf8 <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d11c      	bne.n	800b13c <rpmsg_create_ept+0xe0>
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b10a:	d117      	bne.n	800b13c <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	3358      	adds	r3, #88	; 0x58
 800b110:	4618      	mov	r0, r3
 800b112:	f7ff fd67 	bl	800abe4 <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 800b116:	2100      	movs	r1, #0
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	f7ff fee1 	bl	800aee0 <rpmsg_send_ns_message>
 800b11e:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	3358      	adds	r3, #88	; 0x58
 800b124:	4618      	mov	r0, r3
 800b126:	f7ff fd52 	bl	800abce <metal_mutex_acquire>
		if (status)
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d005      	beq.n	800b13c <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 800b130:	68f8      	ldr	r0, [r7, #12]
 800b132:	f7ff ff5d 	bl	800aff0 <rpmsg_unregister_endpoint>
 800b136:	e002      	b.n	800b13e <rpmsg_create_ept+0xe2>
			goto ret_status;
 800b138:	bf00      	nop
 800b13a:	e000      	b.n	800b13e <rpmsg_create_ept+0xe2>
	}

ret_status:
 800b13c:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	3358      	adds	r3, #88	; 0x58
 800b142:	4618      	mov	r0, r3
 800b144:	f7ff fd4e 	bl	800abe4 <metal_mutex_release>
	return status;
 800b148:	697b      	ldr	r3, [r7, #20]
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3718      	adds	r7, #24
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	fffff82d 	.word	0xfffff82d

0800b158 <__metal_cache_invalidate>:
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b082      	sub	sp, #8
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 800b162:	6839      	ldr	r1, [r7, #0]
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 fcc2 	bl	800baee <metal_machine_cache_invalidate>
}
 800b16a:	bf00      	nop
 800b16c:	3708      	adds	r7, #8
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <metal_cache_invalidate>:
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b082      	sub	sp, #8
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
 800b17a:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 800b17c:	6839      	ldr	r1, [r7, #0]
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f7ff ffea 	bl	800b158 <__metal_cache_invalidate>
}
 800b184:	bf00      	nop
 800b186:	3708      	adds	r7, #8
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b083      	sub	sp, #12
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 800b194:	2300      	movs	r3, #0
}
 800b196:	4618      	mov	r0, r3
 800b198:	370c      	adds	r7, #12
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr

0800b1a2 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 800b1a2:	b580      	push	{r7, lr}
 800b1a4:	b082      	sub	sp, #8
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f7ff ffee 	bl	800b18c <__metal_sleep_usec>
 800b1b0:	4603      	mov	r3, r0
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3708      	adds	r7, #8
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <metal_list_init>:
{
 800b1ba:	b480      	push	{r7}
 800b1bc:	b083      	sub	sp, #12
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	605a      	str	r2, [r3, #4]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	685a      	ldr	r2, [r3, #4]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	601a      	str	r2, [r3, #0]
}
 800b1d0:	bf00      	nop
 800b1d2:	370c      	adds	r7, #12
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr

0800b1dc <metal_io_virt_to_offset>:
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b085      	sub	sp, #20
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	683a      	ldr	r2, [r7, #0]
 800b1ec:	1ad3      	subs	r3, r2, r3
 800b1ee:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	689b      	ldr	r3, [r3, #8]
 800b1f4:	68fa      	ldr	r2, [r7, #12]
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d201      	bcs.n	800b1fe <metal_io_virt_to_offset+0x22>
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	e001      	b.n	800b202 <metal_io_virt_to_offset+0x26>
 800b1fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b202:	4618      	mov	r0, r3
 800b204:	3714      	adds	r7, #20
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr

0800b20e <__metal_mutex_init>:
{
 800b20e:	b480      	push	{r7}
 800b210:	b085      	sub	sp, #20
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	60fb      	str	r3, [r7, #12]
 800b21a:	2300      	movs	r3, #0
 800b21c:	60bb      	str	r3, [r7, #8]
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	461a      	mov	r2, r3
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f3bf 8f5b 	dmb	ish
 800b228:	601a      	str	r2, [r3, #0]
 800b22a:	f3bf 8f5b 	dmb	ish
}
 800b22e:	bf00      	nop
 800b230:	3714      	adds	r7, #20
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr

0800b23a <__metal_mutex_acquire>:
{
 800b23a:	b480      	push	{r7}
 800b23c:	b083      	sub	sp, #12
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 800b242:	bf00      	nop
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2201      	movs	r2, #1
 800b248:	4611      	mov	r1, r2
 800b24a:	f3bf 8f5b 	dmb	ish
 800b24e:	e8d3 2f4f 	ldrexb	r2, [r3]
 800b252:	e8c3 1f40 	strexb	r0, r1, [r3]
 800b256:	2800      	cmp	r0, #0
 800b258:	d1f9      	bne.n	800b24e <__metal_mutex_acquire+0x14>
 800b25a:	f3bf 8f5b 	dmb	ish
 800b25e:	b2d3      	uxtb	r3, r2
 800b260:	2b00      	cmp	r3, #0
 800b262:	d1ef      	bne.n	800b244 <__metal_mutex_acquire+0xa>
}
 800b264:	bf00      	nop
 800b266:	bf00      	nop
 800b268:	370c      	adds	r7, #12
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr

0800b272 <__metal_mutex_release>:
{
 800b272:	b480      	push	{r7}
 800b274:	b083      	sub	sp, #12
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f3bf 8f5b 	dmb	ish
 800b280:	2200      	movs	r2, #0
 800b282:	701a      	strb	r2, [r3, #0]
 800b284:	f3bf 8f5b 	dmb	ish
}
 800b288:	bf00      	nop
 800b28a:	370c      	adds	r7, #12
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr

0800b294 <metal_mutex_init>:
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b082      	sub	sp, #8
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f7ff ffb6 	bl	800b20e <__metal_mutex_init>
}
 800b2a2:	bf00      	nop
 800b2a4:	3708      	adds	r7, #8
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}

0800b2aa <metal_mutex_acquire>:
{
 800b2aa:	b580      	push	{r7, lr}
 800b2ac:	b082      	sub	sp, #8
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f7ff ffc1 	bl	800b23a <__metal_mutex_acquire>
}
 800b2b8:	bf00      	nop
 800b2ba:	3708      	adds	r7, #8
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <metal_mutex_release>:
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b082      	sub	sp, #8
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f7ff ffd2 	bl	800b272 <__metal_mutex_release>
}
 800b2ce:	bf00      	nop
 800b2d0:	3708      	adds	r7, #8
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <rpmsg_init_ept>:
{
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b084      	sub	sp, #16
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	60f8      	str	r0, [r7, #12]
 800b2de:	60b9      	str	r1, [r7, #8]
 800b2e0:	607a      	str	r2, [r7, #4]
 800b2e2:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2220      	movs	r2, #32
 800b2e8:	68b9      	ldr	r1, [r7, #8]
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f006 f944 	bl	8011578 <strncpy>
	ept->addr = src;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	683a      	ldr	r2, [r7, #0]
 800b2fa:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	69ba      	ldr	r2, [r7, #24]
 800b300:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	69fa      	ldr	r2, [r7, #28]
 800b306:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b308:	bf00      	nop
 800b30a:	3710      	adds	r7, #16
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b31c:	699b      	ldr	r3, [r3, #24]
}
 800b31e:	4618      	mov	r0, r3
 800b320:	370c      	adds	r7, #12
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr

0800b32a <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 800b32a:	b580      	push	{r7, lr}
 800b32c:	b082      	sub	sp, #8
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
 800b332:	460b      	mov	r3, r1
 800b334:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b33a:	6a1b      	ldr	r3, [r3, #32]
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800b342:	78f9      	ldrb	r1, [r7, #3]
 800b344:	4610      	mov	r0, r2
 800b346:	4798      	blx	r3
}
 800b348:	bf00      	nop
 800b34a:	3708      	adds	r7, #8
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b35c:	6a1b      	ldr	r3, [r3, #32]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800b364:	4610      	mov	r0, r2
 800b366:	4798      	blx	r3
 800b368:	4603      	mov	r3, r0
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3708      	adds	r7, #8
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 800b372:	b580      	push	{r7, lr}
 800b374:	b082      	sub	sp, #8
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b37e:	6a1b      	ldr	r3, [r3, #32]
 800b380:	689b      	ldr	r3, [r3, #8]
 800b382:	687a      	ldr	r2, [r7, #4]
 800b384:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800b386:	4610      	mov	r0, r2
 800b388:	4798      	blx	r3
 800b38a:	4603      	mov	r3, r0
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3708      	adds	r7, #8
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b086      	sub	sp, #24
 800b398:	af02      	add	r7, sp, #8
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	607a      	str	r2, [r7, #4]
 800b3a0:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800b3a6:	68b9      	ldr	r1, [r7, #8]
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	9300      	str	r3, [sp, #0]
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	f000 fbf2 	bl	800bb98 <virtio_create_virtqueues>
 800b3b4:	4603      	mov	r3, r0
					callbacks);
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3710      	adds	r7, #16
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}

0800b3be <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 800b3be:	b580      	push	{r7, lr}
 800b3c0:	b082      	sub	sp, #8
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	6078      	str	r0, [r7, #4]
 800b3c6:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 800b3c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b3cc:	683a      	ldr	r2, [r7, #0]
 800b3ce:	2100      	movs	r1, #0
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f7ff fdad 	bl	800af30 <rpmsg_get_endpoint>
 800b3d6:	4603      	mov	r3, r0
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3708      	adds	r7, #8
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <rpmsg_virtio_shm_pool_get_buffer>:

#ifndef VIRTIO_SLAVE_ONLY
metal_weak void *
rpmsg_virtio_shm_pool_get_buffer(struct rpmsg_virtio_shm_pool *shpool,
				 size_t size)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b085      	sub	sp, #20
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
	void *buffer;

	if (shpool->avail < size)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	683a      	ldr	r2, [r7, #0]
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	d901      	bls.n	800b3f8 <rpmsg_virtio_shm_pool_get_buffer+0x18>
		return NULL;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	e00f      	b.n	800b418 <rpmsg_virtio_shm_pool_get_buffer+0x38>
	buffer =  (void *)((char *)shpool->base + shpool->size - shpool->avail);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681a      	ldr	r2, [r3, #0]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6899      	ldr	r1, [r3, #8]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	1acb      	subs	r3, r1, r3
 800b406:	4413      	add	r3, r2
 800b408:	60fb      	str	r3, [r7, #12]
	shpool->avail -= size;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	685a      	ldr	r2, [r3, #4]
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	1ad2      	subs	r2, r2, r3
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	605a      	str	r2, [r3, #4]

	return buffer;
 800b416:	68fb      	ldr	r3, [r7, #12]
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3714      	adds	r7, #20
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr

0800b424 <rpmsg_virtio_init_shm_pool>:
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	607a      	str	r2, [r7, #4]
	if (!shpool)
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d01d      	beq.n	800b472 <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	68ba      	ldr	r2, [r7, #8]
 800b43a:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f003 0303 	and.w	r3, r3, #3
 800b442:	2b00      	cmp	r3, #0
 800b444:	d004      	beq.n	800b450 <rpmsg_virtio_init_shm_pool+0x2c>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f023 0303 	bic.w	r3, r3, #3
 800b44c:	3304      	adds	r3, #4
 800b44e:	e000      	b.n	800b452 <rpmsg_virtio_init_shm_pool+0x2e>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	68fa      	ldr	r2, [r7, #12]
 800b454:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f003 0303 	and.w	r3, r3, #3
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d004      	beq.n	800b46a <rpmsg_virtio_init_shm_pool+0x46>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f023 0303 	bic.w	r3, r3, #3
 800b466:	3304      	adds	r3, #4
 800b468:	e000      	b.n	800b46c <rpmsg_virtio_init_shm_pool+0x48>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	6053      	str	r3, [r2, #4]
 800b470:	e000      	b.n	800b474 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 800b472:	bf00      	nop
}
 800b474:	3714      	adds	r7, #20
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr

0800b47e <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 800b47e:	b580      	push	{r7, lr}
 800b480:	b08a      	sub	sp, #40	; 0x28
 800b482:	af02      	add	r7, sp, #8
 800b484:	60f8      	str	r0, [r7, #12]
 800b486:	60b9      	str	r1, [r7, #8]
 800b488:	607a      	str	r2, [r7, #4]
 800b48a:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800b48c:	68f8      	ldr	r0, [r7, #12]
 800b48e:	f7ff ff3f 	bl	800b310 <rpmsg_virtio_get_role>
 800b492:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800b494:	69fb      	ldr	r3, [r7, #28]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d10d      	bne.n	800b4b6 <rpmsg_virtio_return_buffer+0x38>
		struct virtqueue_buf vqbuf;

		(void)idx;
		/* Initialize buffer node */
		vqbuf.buf = buffer;
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	61bb      	str	r3, [r7, #24]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800b4a6:	f107 0114 	add.w	r1, r7, #20
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	9300      	str	r3, [sp, #0]
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	f000 fcc0 	bl	800be36 <virtqueue_add_buffer>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 800b4b6:	bf00      	nop
 800b4b8:	3720      	adds	r7, #32
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}

0800b4be <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 800b4be:	b580      	push	{r7, lr}
 800b4c0:	b08a      	sub	sp, #40	; 0x28
 800b4c2:	af02      	add	r7, sp, #8
 800b4c4:	60f8      	str	r0, [r7, #12]
 800b4c6:	60b9      	str	r1, [r7, #8]
 800b4c8:	607a      	str	r2, [r7, #4]
 800b4ca:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800b4cc:	68f8      	ldr	r0, [r7, #12]
 800b4ce:	f7ff ff1f 	bl	800b310 <rpmsg_virtio_get_role>
 800b4d2:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800b4d4:	69fb      	ldr	r3, [r7, #28]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d10f      	bne.n	800b4fa <rpmsg_virtio_enqueue_buffer+0x3c>
		struct virtqueue_buf vqbuf;
		(void)idx;

		/* Initialize buffer node */
		vqbuf.buf = buffer;
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	61bb      	str	r3, [r7, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800b4e6:	f107 0114 	add.w	r1, r7, #20
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	9300      	str	r3, [sp, #0]
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	f000 fca0 	bl	800be36 <virtqueue_add_buffer>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	e000      	b.n	800b4fc <rpmsg_virtio_enqueue_buffer+0x3e>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 800b4fa:	2300      	movs	r3, #0
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3720      	adds	r7, #32
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b086      	sub	sp, #24
 800b508:	af00      	add	r7, sp, #0
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	60b9      	str	r1, [r7, #8]
 800b50e:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800b510:	68f8      	ldr	r0, [r7, #12]
 800b512:	f7ff fefd 	bl	800b310 <rpmsg_virtio_get_role>
 800b516:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 800b518:	2300      	movs	r3, #0
 800b51a:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d116      	bne.n	800b550 <rpmsg_virtio_get_tx_buffer+0x4c>
		data = virtqueue_get_buffer(rvdev->svq, (uint32_t *)len, idx);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b526:	687a      	ldr	r2, [r7, #4]
 800b528:	68b9      	ldr	r1, [r7, #8]
 800b52a:	4618      	mov	r0, r3
 800b52c:	f000 fcc7 	bl	800bebe <virtqueue_get_buffer>
 800b530:	6178      	str	r0, [r7, #20]
		if (data == NULL) {
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d10b      	bne.n	800b550 <rpmsg_virtio_get_tx_buffer+0x4c>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b53c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b540:	4618      	mov	r0, r3
 800b542:	f7ff ff4d 	bl	800b3e0 <rpmsg_virtio_shm_pool_get_buffer>
 800b546:	6178      	str	r0, [r7, #20]
							RPMSG_BUFFER_SIZE);
			*len = RPMSG_BUFFER_SIZE;
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b54e:	601a      	str	r2, [r3, #0]
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 800b550:	697b      	ldr	r3, [r7, #20]
}
 800b552:	4618      	mov	r0, r3
 800b554:	3718      	adds	r7, #24
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}

0800b55a <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 800b55a:	b580      	push	{r7, lr}
 800b55c:	b086      	sub	sp, #24
 800b55e:	af00      	add	r7, sp, #0
 800b560:	60f8      	str	r0, [r7, #12]
 800b562:	60b9      	str	r1, [r7, #8]
 800b564:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800b566:	68f8      	ldr	r0, [r7, #12]
 800b568:	f7ff fed2 	bl	800b310 <rpmsg_virtio_get_role>
 800b56c:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 800b56e:	2300      	movs	r3, #0
 800b570:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d107      	bne.n	800b588 <rpmsg_virtio_get_rx_buffer+0x2e>
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b57c:	687a      	ldr	r2, [r7, #4]
 800b57e:	68b9      	ldr	r1, [r7, #8]
 800b580:	4618      	mov	r0, r3
 800b582:	f000 fc9c 	bl	800bebe <virtqueue_get_buffer>
 800b586:	6178      	str	r0, [r7, #20]
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d005      	beq.n	800b59a <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	4619      	mov	r1, r3
 800b594:	6978      	ldr	r0, [r7, #20]
 800b596:	f7ff fdec 	bl	800b172 <metal_cache_invalidate>
	}

	return data;
 800b59a:	697b      	ldr	r3, [r7, #20]
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3718      	adds	r7, #24
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f7ff feaf 	bl	800b310 <rpmsg_virtio_get_role>
 800b5b2:	60b8      	str	r0, [r7, #8]
	int length = 0;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	60fb      	str	r3, [r7, #12]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d102      	bne.n	800b5c4 <_rpmsg_virtio_get_buffer_size+0x20>
		/*
		 * If device role is Remote then buffers are provided by us
		 * (RPMSG Master), so just provide the macro.
		 */
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
 800b5be:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 800b5c2:	60fb      	str	r3, [r7, #12]
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3710      	adds	r7, #16
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
	...

0800b5d0 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b090      	sub	sp, #64	; 0x40
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	60b9      	str	r1, [r7, #8]
 800b5da:	607a      	str	r2, [r7, #4]
 800b5dc:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	unsigned short idx;
	int tick_count = 0;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	637b      	str	r3, [r7, #52]	; 0x34

	status = rpmsg_virtio_get_status(rvdev);
 800b5ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b5ec:	f7ff feb0 	bl	800b350 <rpmsg_virtio_get_status>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	633b      	str	r3, [r7, #48]	; 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 800b5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f6:	f003 0304 	and.w	r3, r3, #4
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d101      	bne.n	800b602 <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 800b5fe:	4b45      	ldr	r3, [pc, #276]	; (800b714 <rpmsg_virtio_send_offchannel_raw+0x144>)
 800b600:	e083      	b.n	800b70a <rpmsg_virtio_send_offchannel_raw+0x13a>
	}

	if (wait)
 800b602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b604:	2b00      	cmp	r3, #0
 800b606:	d003      	beq.n	800b610 <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 800b608:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800b60c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b60e:	e001      	b.n	800b614 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 800b610:	2300      	movs	r3, #0
 800b612:	63bb      	str	r3, [r7, #56]	; 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	3358      	adds	r3, #88	; 0x58
 800b618:	4618      	mov	r0, r3
 800b61a:	f7ff fe46 	bl	800b2aa <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 800b61e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b620:	f7ff ffc0 	bl	800b5a4 <_rpmsg_virtio_get_buffer_size>
 800b624:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (size <= avail_size)
 800b626:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b62a:	429a      	cmp	r2, r3
 800b62c:	dc08      	bgt.n	800b640 <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 800b62e:	f107 0216 	add.w	r2, r7, #22
 800b632:	f107 0310 	add.w	r3, r7, #16
 800b636:	4619      	mov	r1, r3
 800b638:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b63a:	f7ff ff63 	bl	800b504 <rpmsg_virtio_get_tx_buffer>
 800b63e:	63f8      	str	r0, [r7, #60]	; 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	3358      	adds	r3, #88	; 0x58
 800b644:	4618      	mov	r0, r3
 800b646:	f7ff fe3b 	bl	800b2c0 <metal_mutex_release>
		if (buffer || !tick_count)
 800b64a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d10e      	bne.n	800b66e <rpmsg_virtio_send_offchannel_raw+0x9e>
 800b650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b652:	2b00      	cmp	r3, #0
 800b654:	d00b      	beq.n	800b66e <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 800b656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d001      	beq.n	800b660 <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 800b65c:	4b2e      	ldr	r3, [pc, #184]	; (800b718 <rpmsg_virtio_send_offchannel_raw+0x148>)
 800b65e:	e054      	b.n	800b70a <rpmsg_virtio_send_offchannel_raw+0x13a>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 800b660:	200a      	movs	r0, #10
 800b662:	f7ff fd9e 	bl	800b1a2 <metal_sleep_usec>
		tick_count--;
 800b666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b668:	3b01      	subs	r3, #1
 800b66a:	63bb      	str	r3, [r7, #56]	; 0x38
	while (1) {
 800b66c:	e7d2      	b.n	800b614 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 800b66e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b670:	2b00      	cmp	r3, #0
 800b672:	d101      	bne.n	800b678 <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 800b674:	4b29      	ldr	r3, [pc, #164]	; (800b71c <rpmsg_virtio_send_offchannel_raw+0x14c>)
 800b676:	e048      	b.n	800b70a <rpmsg_virtio_send_offchannel_raw+0x13a>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 800b680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b682:	b29b      	uxth	r3, r3
 800b684:	84bb      	strh	r3, [r7, #36]	; 0x24
	rp_hdr.reserved = 0;
 800b686:	2300      	movs	r3, #0
 800b688:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 800b68a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b68c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b68e:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 800b690:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b692:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b694:	f7ff fda2 	bl	800b1dc <metal_io_virt_to_offset>
 800b698:	4601      	mov	r1, r0
 800b69a:	f107 0218 	add.w	r2, r7, #24
 800b69e:	2310      	movs	r3, #16
 800b6a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6a2:	f7fe fdd8 	bl	800a256 <metal_io_block_write>
 800b6a6:	6338      	str	r0, [r7, #48]	; 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 800b6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6aa:	2b10      	cmp	r3, #16
 800b6ac:	d000      	beq.n	800b6b0 <rpmsg_virtio_send_offchannel_raw+0xe0>
 800b6ae:	e7fe      	b.n	800b6ae <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 800b6b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6b2:	3310      	adds	r3, #16
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6b8:	f7ff fd90 	bl	800b1dc <metal_io_virt_to_offset>
 800b6bc:	4601      	mov	r1, r0
 800b6be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6c0:	683a      	ldr	r2, [r7, #0]
 800b6c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6c4:	f7fe fdc7 	bl	800a256 <metal_io_block_write>
 800b6c8:	6338      	str	r0, [r7, #48]	; 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 800b6ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	d000      	beq.n	800b6d4 <rpmsg_virtio_send_offchannel_raw+0x104>
 800b6d2:	e7fe      	b.n	800b6d2 <rpmsg_virtio_send_offchannel_raw+0x102>
	metal_mutex_acquire(&rdev->lock);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	3358      	adds	r3, #88	; 0x58
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f7ff fde6 	bl	800b2aa <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 800b6de:	693a      	ldr	r2, [r7, #16]
 800b6e0:	8afb      	ldrh	r3, [r7, #22]
 800b6e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b6e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b6e6:	f7ff feea 	bl	800b4be <rpmsg_virtio_enqueue_buffer>
 800b6ea:	6338      	str	r0, [r7, #48]	; 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 800b6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d000      	beq.n	800b6f4 <rpmsg_virtio_send_offchannel_raw+0x124>
 800b6f2:	e7fe      	b.n	800b6f2 <rpmsg_virtio_send_offchannel_raw+0x122>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 800b6f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f000 fc5a 	bl	800bfb2 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	3358      	adds	r3, #88	; 0x58
 800b702:	4618      	mov	r0, r3
 800b704:	f7ff fddc 	bl	800b2c0 <metal_mutex_release>

	return size;
 800b708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3740      	adds	r7, #64	; 0x40
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
 800b712:	bf00      	nop
 800b714:	fffff82c 	.word	0xfffff82c
 800b718:	fffff82b 	.word	0xfffff82b
 800b71c:	fffff82e 	.word	0xfffff82e

0800b720 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 800b728:	bf00      	nop
 800b72a:	370c      	adds	r7, #12
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr

0800b734 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 800b734:	b590      	push	{r4, r7, lr}
 800b736:	b08d      	sub	sp, #52	; 0x34
 800b738:	af02      	add	r7, sp, #8
 800b73a:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 800b742:	6a3b      	ldr	r3, [r7, #32]
 800b744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b746:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 800b748:	69fb      	ldr	r3, [r7, #28]
 800b74a:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 800b74c:	69bb      	ldr	r3, [r7, #24]
 800b74e:	3358      	adds	r3, #88	; 0x58
 800b750:	4618      	mov	r0, r3
 800b752:	f7ff fdaa 	bl	800b2aa <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 800b756:	f107 020a 	add.w	r2, r7, #10
 800b75a:	f107 030c 	add.w	r3, r7, #12
 800b75e:	4619      	mov	r1, r3
 800b760:	69f8      	ldr	r0, [r7, #28]
 800b762:	f7ff fefa 	bl	800b55a <rpmsg_virtio_get_rx_buffer>
 800b766:	6278      	str	r0, [r7, #36]	; 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 800b768:	69bb      	ldr	r3, [r7, #24]
 800b76a:	3358      	adds	r3, #88	; 0x58
 800b76c:	4618      	mov	r0, r3
 800b76e:	f7ff fda7 	bl	800b2c0 <metal_mutex_release>

	while (rp_hdr) {
 800b772:	e04c      	b.n	800b80e <rpmsg_virtio_rx_callback+0xda>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 800b774:	69bb      	ldr	r3, [r7, #24]
 800b776:	3358      	adds	r3, #88	; 0x58
 800b778:	4618      	mov	r0, r3
 800b77a:	f7ff fd96 	bl	800b2aa <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 800b77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	4619      	mov	r1, r3
 800b784:	69b8      	ldr	r0, [r7, #24]
 800b786:	f7ff fe1a 	bl	800b3be <rpmsg_get_ept_from_addr>
 800b78a:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 800b78c:	69bb      	ldr	r3, [r7, #24]
 800b78e:	3358      	adds	r3, #88	; 0x58
 800b790:	4618      	mov	r0, r3
 800b792:	f7ff fd95 	bl	800b2c0 <metal_mutex_release>

		if (!ept)
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d03c      	beq.n	800b816 <rpmsg_virtio_rx_callback+0xe2>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7a4:	d103      	bne.n	800b7ae <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 800b7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	629a      	str	r2, [r3, #40]	; 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800b7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b4:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 800b7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ba:	899b      	ldrh	r3, [r3, #12]
 800b7bc:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 800b7be:	4618      	mov	r0, r3
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7c8:	9300      	str	r3, [sp, #0]
 800b7ca:	4613      	mov	r3, r2
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	6978      	ldr	r0, [r7, #20]
 800b7d0:	47a0      	blx	r4
 800b7d2:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d000      	beq.n	800b7dc <rpmsg_virtio_rx_callback+0xa8>
 800b7da:	e7fe      	b.n	800b7da <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 800b7dc:	69bb      	ldr	r3, [r7, #24]
 800b7de:	3358      	adds	r3, #88	; 0x58
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7ff fd62 	bl	800b2aa <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 800b7e6:	68fa      	ldr	r2, [r7, #12]
 800b7e8:	897b      	ldrh	r3, [r7, #10]
 800b7ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b7ec:	69f8      	ldr	r0, [r7, #28]
 800b7ee:	f7ff fe46 	bl	800b47e <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 800b7f2:	f107 020a 	add.w	r2, r7, #10
 800b7f6:	f107 030c 	add.w	r3, r7, #12
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	69f8      	ldr	r0, [r7, #28]
 800b7fe:	f7ff feac 	bl	800b55a <rpmsg_virtio_get_rx_buffer>
 800b802:	6278      	str	r0, [r7, #36]	; 0x24
		metal_mutex_release(&rdev->lock);
 800b804:	69bb      	ldr	r3, [r7, #24]
 800b806:	3358      	adds	r3, #88	; 0x58
 800b808:	4618      	mov	r0, r3
 800b80a:	f7ff fd59 	bl	800b2c0 <metal_mutex_release>
	while (rp_hdr) {
 800b80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b810:	2b00      	cmp	r3, #0
 800b812:	d1af      	bne.n	800b774 <rpmsg_virtio_rx_callback+0x40>
 800b814:	e000      	b.n	800b818 <rpmsg_virtio_rx_callback+0xe4>
			return;
 800b816:	bf00      	nop
	}
}
 800b818:	372c      	adds	r7, #44	; 0x2c
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd90      	pop	{r4, r7, pc}

0800b81e <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 800b81e:	b580      	push	{r7, lr}
 800b820:	b092      	sub	sp, #72	; 0x48
 800b822:	af00      	add	r7, sp, #0
 800b824:	60f8      	str	r0, [r7, #12]
 800b826:	60b9      	str	r1, [r7, #8]
 800b828:	607a      	str	r2, [r7, #4]
 800b82a:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	6a1b      	ldr	r3, [r3, #32]
 800b830:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 800b832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b834:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 800b836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b83a:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2b28      	cmp	r3, #40	; 0x28
 800b844:	d001      	beq.n	800b84a <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 800b846:	2300      	movs	r3, #0
 800b848:	e057      	b.n	800b8fa <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 800b84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
 800b84c:	4619      	mov	r1, r3
 800b84e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b850:	f7ff fcc4 	bl	800b1dc <metal_io_virt_to_offset>
 800b854:	4601      	mov	r1, r0
 800b856:	f107 0210 	add.w	r2, r7, #16
 800b85a:	2320      	movs	r3, #32
 800b85c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b85e:	f7fe fc83 	bl	800a168 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 800b862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b864:	6a1b      	ldr	r3, [r3, #32]
 800b866:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 800b868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b86a:	3358      	adds	r3, #88	; 0x58
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7ff fd1c 	bl	800b2aa <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 800b872:	f107 0110 	add.w	r1, r7, #16
 800b876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b878:	f04f 32ff 	mov.w	r2, #4294967295
 800b87c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b87e:	f7ff fb57 	bl	800af30 <rpmsg_get_endpoint>
 800b882:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 800b884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b888:	f003 0301 	and.w	r3, r3, #1
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d017      	beq.n	800b8c0 <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 800b890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b892:	2b00      	cmp	r3, #0
 800b894:	d003      	beq.n	800b89e <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 800b896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b898:	f04f 32ff 	mov.w	r2, #4294967295
 800b89c:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
 800b89e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8a0:	3358      	adds	r3, #88	; 0x58
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7ff fd0c 	bl	800b2c0 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 800b8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d024      	beq.n	800b8f8 <rpmsg_virtio_ns_callback+0xda>
 800b8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d020      	beq.n	800b8f8 <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 800b8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ba:	68f8      	ldr	r0, [r7, #12]
 800b8bc:	4798      	blx	r3
 800b8be:	e01b      	b.n	800b8f8 <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 800b8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d110      	bne.n	800b8e8 <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 800b8c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8c8:	3358      	adds	r3, #88	; 0x58
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7ff fcf8 	bl	800b2c0 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 800b8d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d00f      	beq.n	800b8f8 <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 800b8d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8dc:	f107 0110 	add.w	r1, r7, #16
 800b8e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8e2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b8e4:	4798      	blx	r3
 800b8e6:	e007      	b.n	800b8f8 <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 800b8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8ec:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
 800b8ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8f0:	3358      	adds	r3, #88	; 0x58
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7ff fce4 	bl	800b2c0 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 800b8f8:	2300      	movs	r3, #0
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3748      	adds	r7, #72	; 0x48
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
	...

0800b904 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b094      	sub	sp, #80	; 0x50
 800b908:	af02      	add	r7, sp, #8
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	607a      	str	r2, [r7, #4]
 800b910:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	63bb      	str	r3, [r7, #56]	; 0x38
	memset(rdev, 0, sizeof(*rdev));
 800b916:	2264      	movs	r2, #100	; 0x64
 800b918:	2100      	movs	r1, #0
 800b91a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b91c:	f004 fcce 	bl	80102bc <memset>
	metal_mutex_init(&rdev->lock);
 800b920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b922:	3358      	adds	r3, #88	; 0x58
 800b924:	4618      	mov	r0, r3
 800b926:	f7ff fcb5 	bl	800b294 <metal_mutex_init>
	rvdev->vdev = vdev;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	68ba      	ldr	r2, [r7, #8]
 800b92e:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 800b930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	68fa      	ldr	r2, [r7, #12]
 800b93a:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 800b93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b93e:	4a5d      	ldr	r2, [pc, #372]	; (800bab4 <rpmsg_init_vdev+0x1b0>)
 800b940:	661a      	str	r2, [r3, #96]	; 0x60
	role = rpmsg_virtio_get_role(rvdev);
 800b942:	68f8      	ldr	r0, [r7, #12]
 800b944:	f7ff fce4 	bl	800b310 <rpmsg_virtio_get_role>
 800b948:	6378      	str	r0, [r7, #52]	; 0x34

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800b94a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d120      	bne.n	800b992 <rpmsg_init_vdev+0x8e>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
 800b950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b952:	2b00      	cmp	r3, #0
 800b954:	d101      	bne.n	800b95a <rpmsg_init_vdev+0x56>
			return RPMSG_ERR_PARAM;
 800b956:	4b58      	ldr	r3, [pc, #352]	; (800bab8 <rpmsg_init_vdev+0x1b4>)
 800b958:	e0a7      	b.n	800baaa <rpmsg_init_vdev+0x1a6>
		if (!shpool->size)
 800b95a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b95c:	689b      	ldr	r3, [r3, #8]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d101      	bne.n	800b966 <rpmsg_init_vdev+0x62>
			return RPMSG_ERR_NO_BUFF;
 800b962:	4b56      	ldr	r3, [pc, #344]	; (800babc <rpmsg_init_vdev+0x1b8>)
 800b964:	e0a1      	b.n	800baaa <rpmsg_init_vdev+0x1a6>
		rvdev->shpool = shpool;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b96a:	675a      	str	r2, [r3, #116]	; 0x74

		vq_names[0] = "rx_vq";
 800b96c:	4b54      	ldr	r3, [pc, #336]	; (800bac0 <rpmsg_init_vdev+0x1bc>)
 800b96e:	623b      	str	r3, [r7, #32]
		vq_names[1] = "tx_vq";
 800b970:	4b54      	ldr	r3, [pc, #336]	; (800bac4 <rpmsg_init_vdev+0x1c0>)
 800b972:	627b      	str	r3, [r7, #36]	; 0x24
		callback[0] = rpmsg_virtio_rx_callback;
 800b974:	4b54      	ldr	r3, [pc, #336]	; (800bac8 <rpmsg_init_vdev+0x1c4>)
 800b976:	61bb      	str	r3, [r7, #24]
		callback[1] = rpmsg_virtio_tx_callback;
 800b978:	4b54      	ldr	r3, [pc, #336]	; (800bacc <rpmsg_init_vdev+0x1c8>)
 800b97a:	61fb      	str	r3, [r7, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	669a      	str	r2, [r3, #104]	; 0x68
		rvdev->svq  = vdev->vrings_info[1].vq;
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b98a:	3318      	adds	r3, #24
 800b98c:	681a      	ldr	r2, [r3, #0]
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	66da      	str	r2, [r3, #108]	; 0x6c
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	683a      	ldr	r2, [r7, #0]
 800b996:	671a      	str	r2, [r3, #112]	; 0x70
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 800b998:	f107 0220 	add.w	r2, r7, #32
 800b99c:	f107 0318 	add.w	r3, r7, #24
 800b9a0:	9300      	str	r3, [sp, #0]
 800b9a2:	4613      	mov	r3, r2
 800b9a4:	2202      	movs	r2, #2
 800b9a6:	2100      	movs	r1, #0
 800b9a8:	68f8      	ldr	r0, [r7, #12]
 800b9aa:	f7ff fcf3 	bl	800b394 <rpmsg_virtio_create_virtqueues>
 800b9ae:	6478      	str	r0, [r7, #68]	; 0x44
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 800b9b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d001      	beq.n	800b9ba <rpmsg_init_vdev+0xb6>
		return status;
 800b9b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9b8:	e077      	b.n	800baaa <rpmsg_init_vdev+0x1a6>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	643b      	str	r3, [r7, #64]	; 0x40
 800b9be:	e00f      	b.n	800b9e0 <rpmsg_init_vdev+0xdc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b9c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b9c6:	4613      	mov	r3, r2
 800b9c8:	005b      	lsls	r3, r3, #1
 800b9ca:	4413      	add	r3, r2
 800b9cc:	00db      	lsls	r3, r3, #3
 800b9ce:	440b      	add	r3, r1
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	62bb      	str	r3, [r7, #40]	; 0x28
		vq->shm_io = shm_io;
 800b9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d6:	683a      	ldr	r2, [r7, #0]
 800b9d8:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 800b9da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9dc:	3301      	adds	r3, #1
 800b9de:	643b      	str	r3, [r7, #64]	; 0x40
 800b9e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d9ec      	bls.n	800b9c0 <rpmsg_init_vdev+0xbc>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800b9e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d137      	bne.n	800ba5c <rpmsg_init_vdev+0x158>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
 800b9ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9f0:	617b      	str	r3, [r7, #20]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9f6:	e02a      	b.n	800ba4e <rpmsg_init_vdev+0x14a>
			/* Initialize TX virtqueue buffers for remote device */
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
 800b9f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b9fc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b9fe:	f7ff fcef 	bl	800b3e0 <rpmsg_virtio_shm_pool_get_buffer>
 800ba02:	6338      	str	r0, [r7, #48]	; 0x30
							RPMSG_BUFFER_SIZE);

			if (!buffer) {
 800ba04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d101      	bne.n	800ba0e <rpmsg_init_vdev+0x10a>
				return RPMSG_ERR_NO_BUFF;
 800ba0a:	4b2c      	ldr	r3, [pc, #176]	; (800babc <rpmsg_init_vdev+0x1b8>)
 800ba0c:	e04d      	b.n	800baaa <rpmsg_init_vdev+0x1a6>
			}

			vqbuf.buf = buffer;
 800ba0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba10:	613b      	str	r3, [r7, #16]

			metal_io_block_set(shm_io,
 800ba12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba14:	6838      	ldr	r0, [r7, #0]
 800ba16:	f7ff fbe1 	bl	800b1dc <metal_io_virt_to_offset>
 800ba1a:	4601      	mov	r1, r0
 800ba1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba20:	2200      	movs	r2, #0
 800ba22:	6838      	ldr	r0, [r7, #0]
 800ba24:	f7fe fc8d 	bl	800a342 <metal_io_block_set>
					   metal_io_virt_to_offset(shm_io,
								   buffer),
					   0x00, RPMSG_BUFFER_SIZE);
			status =
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800ba2c:	f107 0110 	add.w	r1, r7, #16
 800ba30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba32:	9300      	str	r3, [sp, #0]
 800ba34:	2301      	movs	r3, #1
 800ba36:	2200      	movs	r2, #0
 800ba38:	f000 f9fd 	bl	800be36 <virtqueue_add_buffer>
 800ba3c:	6478      	str	r0, [r7, #68]	; 0x44
						     buffer);

			if (status != RPMSG_SUCCESS) {
 800ba3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d001      	beq.n	800ba48 <rpmsg_init_vdev+0x144>
				return status;
 800ba44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba46:	e030      	b.n	800baaa <rpmsg_init_vdev+0x1a6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 800ba48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba4a:	3301      	adds	r3, #1
 800ba4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba52:	895b      	ldrh	r3, [r3, #10]
 800ba54:	461a      	mov	r2, r3
 800ba56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d3cd      	bcc.n	800b9f8 <rpmsg_init_vdev+0xf4>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 800ba5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7ff fbab 	bl	800b1ba <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 800ba64:	68f8      	ldr	r0, [r7, #12]
 800ba66:	f7ff fc84 	bl	800b372 <rpmsg_virtio_get_features>
 800ba6a:	62f8      	str	r0, [r7, #44]	; 0x2c

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 800ba6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba6e:	f003 0301 	and.w	r3, r3, #1
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d011      	beq.n	800ba9a <rpmsg_init_vdev+0x196>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 800ba76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba78:	f103 0008 	add.w	r0, r3, #8
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	9301      	str	r3, [sp, #4]
 800ba80:	4b13      	ldr	r3, [pc, #76]	; (800bad0 <rpmsg_init_vdev+0x1cc>)
 800ba82:	9300      	str	r3, [sp, #0]
 800ba84:	2335      	movs	r3, #53	; 0x35
 800ba86:	2235      	movs	r2, #53	; 0x35
 800ba88:	4912      	ldr	r1, [pc, #72]	; (800bad4 <rpmsg_init_vdev+0x1d0>)
 800ba8a:	f7ff fc24 	bl	800b2d6 <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 800ba8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba90:	3308      	adds	r3, #8
 800ba92:	4619      	mov	r1, r3
 800ba94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ba96:	f7ff facd 	bl	800b034 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
 800ba9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d103      	bne.n	800baa8 <rpmsg_init_vdev+0x1a4>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
 800baa0:	2104      	movs	r1, #4
 800baa2:	68f8      	ldr	r0, [r7, #12]
 800baa4:	f7ff fc41 	bl	800b32a <rpmsg_virtio_set_status>
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 800baa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3748      	adds	r7, #72	; 0x48
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	0800b5d1 	.word	0x0800b5d1
 800bab8:	fffff82d 	.word	0xfffff82d
 800babc:	fffff82e 	.word	0xfffff82e
 800bac0:	0801532c 	.word	0x0801532c
 800bac4:	08015334 	.word	0x08015334
 800bac8:	0800b735 	.word	0x0800b735
 800bacc:	0800b721 	.word	0x0800b721
 800bad0:	0800b81f 	.word	0x0800b81f
 800bad4:	0801533c 	.word	0x0801533c

0800bad8 <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 800bad8:	b480      	push	{r7}
 800bada:	b083      	sub	sp, #12
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 800bae2:	bf00      	nop
 800bae4:	370c      	adds	r7, #12
 800bae6:	46bd      	mov	sp, r7
 800bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baec:	4770      	bx	lr

0800baee <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 800baee:	b480      	push	{r7}
 800baf0:	b083      	sub	sp, #12
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
 800baf6:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 800baf8:	bf00      	nop
 800bafa:	370c      	adds	r7, #12
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr

0800bb04 <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b085      	sub	sp, #20
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	60b9      	str	r1, [r7, #8]
 800bb0e:	607a      	str	r2, [r7, #4]
 800bb10:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 800bb12:	68fb      	ldr	r3, [r7, #12]
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3714      	adds	r7, #20
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr

0800bb20 <vring_size>:
 */
#define vring_used_event(vr)	((vr)->avail->ring[(vr)->num])
#define vring_avail_event(vr)	((vr)->used->ring[(vr)->num].id & 0xFFFF)

static inline int vring_size(unsigned int num, unsigned long align)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b085      	sub	sp, #20
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	6039      	str	r1, [r7, #0]
	int size;

	size = num * sizeof(struct vring_desc);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	011b      	lsls	r3, r3, #4
 800bb2e:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	3303      	adds	r3, #3
 800bb34:	005a      	lsls	r2, r3, #1
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	4413      	add	r3, r2
 800bb3a:	60fb      	str	r3, [r7, #12]
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
 800bb3c:	68fa      	ldr	r2, [r7, #12]
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	4413      	add	r3, r2
 800bb42:	1e5a      	subs	r2, r3, #1
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	425b      	negs	r3, r3
 800bb48:	4013      	ands	r3, r2
 800bb4a:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	00da      	lsls	r2, r3, #3
	size += sizeof(struct vring_used) +
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	4413      	add	r3, r2
 800bb54:	3306      	adds	r3, #6
 800bb56:	60fb      	str	r3, [r7, #12]

	return size;
 800bb58:	68fb      	ldr	r3, [r7, #12]
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3714      	adds	r7, #20
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr

0800bb66 <metal_io_virt_to_offset>:
{
 800bb66:	b480      	push	{r7}
 800bb68:	b085      	sub	sp, #20
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
 800bb6e:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	683a      	ldr	r2, [r7, #0]
 800bb76:	1ad3      	subs	r3, r2, r3
 800bb78:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	689b      	ldr	r3, [r3, #8]
 800bb7e:	68fa      	ldr	r2, [r7, #12]
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d201      	bcs.n	800bb88 <metal_io_virt_to_offset+0x22>
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	e001      	b.n	800bb8c <metal_io_virt_to_offset+0x26>
 800bb88:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3714      	adds	r7, #20
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 800bb98:	b590      	push	{r4, r7, lr}
 800bb9a:	b091      	sub	sp, #68	; 0x44
 800bb9c:	af04      	add	r7, sp, #16
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	60b9      	str	r1, [r7, #8]
 800bba2:	607a      	str	r2, [r7, #4]
 800bba4:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbaa:	62bb      	str	r3, [r7, #40]	; 0x28
	if (nvqs > num_vrings)
 800bbac:	687a      	ldr	r2, [r7, #4]
 800bbae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d902      	bls.n	800bbba <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 800bbb4:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 800bbb8:	e053      	b.n	800bc62 <virtio_create_virtqueues+0xca>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 800bbba:	2300      	movs	r3, #0
 800bbbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bbbe:	e04b      	b.n	800bc58 <virtio_create_virtqueues+0xc0>
		vring_info = &vdev->vrings_info[i];
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bbc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbc6:	4613      	mov	r3, r2
 800bbc8:	005b      	lsls	r3, r3, #1
 800bbca:	4413      	add	r3, r2
 800bbcc:	00db      	lsls	r3, r3, #3
 800bbce:	440b      	add	r3, r1
 800bbd0:	627b      	str	r3, [r7, #36]	; 0x24

		vring_alloc = &vring_info->info;
 800bbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd4:	3304      	adds	r3, #4
 800bbd6:	623b      	str	r3, [r7, #32]
#ifndef VIRTIO_SLAVE_ONLY
		if (vdev->role == VIRTIO_DEV_MASTER) {
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	699b      	ldr	r3, [r3, #24]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d118      	bne.n	800bc12 <virtio_create_virtqueues+0x7a>
			size_t offset;
			struct metal_io_region *io = vring_info->io;
 800bbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe2:	695b      	ldr	r3, [r3, #20]
 800bbe4:	61fb      	str	r3, [r7, #28]

			offset = metal_io_virt_to_offset(io,
 800bbe6:	6a3b      	ldr	r3, [r7, #32]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4619      	mov	r1, r3
 800bbec:	69f8      	ldr	r0, [r7, #28]
 800bbee:	f7ff ffba 	bl	800bb66 <metal_io_virt_to_offset>
 800bbf2:	61b8      	str	r0, [r7, #24]
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
 800bbf4:	6a3b      	ldr	r3, [r7, #32]
 800bbf6:	891b      	ldrh	r3, [r3, #8]
			metal_io_block_set(io, offset, 0,
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	6a3b      	ldr	r3, [r7, #32]
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	4619      	mov	r1, r3
 800bc00:	4610      	mov	r0, r2
 800bc02:	f7ff ff8d 	bl	800bb20 <vring_size>
 800bc06:	4603      	mov	r3, r0
 800bc08:	2200      	movs	r2, #0
 800bc0a:	69b9      	ldr	r1, [r7, #24]
 800bc0c:	69f8      	ldr	r0, [r7, #28]
 800bc0e:	f7fe fb98 	bl	800a342 <metal_io_block_set>
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 800bc12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc14:	b298      	uxth	r0, r3
 800bc16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	683a      	ldr	r2, [r7, #0]
 800bc1c:	4413      	add	r3, r2
 800bc1e:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 800bc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc26:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 800bc28:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 800bc2a:	68fa      	ldr	r2, [r7, #12]
 800bc2c:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 800bc2e:	6a12      	ldr	r2, [r2, #32]
 800bc30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc32:	6809      	ldr	r1, [r1, #0]
 800bc34:	9102      	str	r1, [sp, #8]
 800bc36:	9201      	str	r2, [sp, #4]
 800bc38:	9300      	str	r3, [sp, #0]
 800bc3a:	6a3b      	ldr	r3, [r7, #32]
 800bc3c:	4622      	mov	r2, r4
 800bc3e:	4601      	mov	r1, r0
 800bc40:	68f8      	ldr	r0, [r7, #12]
 800bc42:	f000 f8c4 	bl	800bdce <virtqueue_create>
 800bc46:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d001      	beq.n	800bc52 <virtio_create_virtqueues+0xba>
			return ret;
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	e007      	b.n	800bc62 <virtio_create_virtqueues+0xca>
	for (i = 0; i < nvqs; i++) {
 800bc52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc54:	3301      	adds	r3, #1
 800bc56:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d3af      	bcc.n	800bbc0 <virtio_create_virtqueues+0x28>
	}
	return 0;
 800bc60:	2300      	movs	r3, #0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3734      	adds	r7, #52	; 0x34
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd90      	pop	{r4, r7, pc}

0800bc6a <vring_init>:

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 800bc6a:	b480      	push	{r7}
 800bc6c:	b085      	sub	sp, #20
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	60f8      	str	r0, [r7, #12]
 800bc72:	60b9      	str	r1, [r7, #8]
 800bc74:	607a      	str	r2, [r7, #4]
 800bc76:	603b      	str	r3, [r7, #0]
	vr->num = num;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	68ba      	ldr	r2, [r7, #8]
 800bc7c:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	011b      	lsls	r3, r3, #4
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	441a      	add	r2, r3
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	689a      	ldr	r2, [r3, #8]
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	005b      	lsls	r3, r3, #1
 800bc98:	4413      	add	r3, r2
 800bc9a:	3304      	adds	r3, #4
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 800bca2:	1c5a      	adds	r2, r3, #1
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	425b      	negs	r3, r3
 800bca8:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 800bcaa:	461a      	mov	r2, r3
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	60da      	str	r2, [r3, #12]
}
 800bcb0:	bf00      	nop
 800bcb2:	3714      	adds	r7, #20
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr

0800bcbc <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b083      	sub	sp, #12
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	80fb      	strh	r3, [r7, #6]
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	80bb      	strh	r3, [r7, #4]
 800bcca:	4613      	mov	r3, r2
 800bccc:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 800bcce:	88ba      	ldrh	r2, [r7, #4]
 800bcd0:	88fb      	ldrh	r3, [r7, #6]
 800bcd2:	1ad3      	subs	r3, r2, r3
 800bcd4:	b29b      	uxth	r3, r3
 800bcd6:	3b01      	subs	r3, #1
 800bcd8:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 800bcda:	88b9      	ldrh	r1, [r7, #4]
 800bcdc:	887b      	ldrh	r3, [r7, #2]
 800bcde:	1acb      	subs	r3, r1, r3
 800bce0:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 800bce2:	429a      	cmp	r2, r3
 800bce4:	bf34      	ite	cc
 800bce6:	2301      	movcc	r3, #1
 800bce8:	2300      	movcs	r3, #0
 800bcea:	b2db      	uxtb	r3, r3
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	370c      	adds	r7, #12
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <metal_io_virt_to_offset>:
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b085      	sub	sp, #20
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	683a      	ldr	r2, [r7, #0]
 800bd08:	1ad3      	subs	r3, r2, r3
 800bd0a:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	68fa      	ldr	r2, [r7, #12]
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d201      	bcs.n	800bd1a <metal_io_virt_to_offset+0x22>
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	e001      	b.n	800bd1e <metal_io_virt_to_offset+0x26>
 800bd1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3714      	adds	r7, #20
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr

0800bd2a <metal_io_phys>:
{
 800bd2a:	b480      	push	{r7}
 800bd2c:	b085      	sub	sp, #20
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	6078      	str	r0, [r7, #4]
 800bd32:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 800bd38:	2b1f      	cmp	r3, #31
 800bd3a:	d805      	bhi.n	800bd48 <metal_io_phys+0x1e>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	68db      	ldr	r3, [r3, #12]
 800bd40:	683a      	ldr	r2, [r7, #0]
 800bd42:	fa22 f303 	lsr.w	r3, r2, r3
 800bd46:	e000      	b.n	800bd4a <metal_io_phys+0x20>
 800bd48:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 800bd4a:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d010      	beq.n	800bd76 <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	689b      	ldr	r3, [r3, #8]
 800bd58:	683a      	ldr	r2, [r7, #0]
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d80b      	bhi.n	800bd76 <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	685a      	ldr	r2, [r3, #4]
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	009b      	lsls	r3, r3, #2
 800bd66:	4413      	add	r3, r2
 800bd68:	681a      	ldr	r2, [r3, #0]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6919      	ldr	r1, [r3, #16]
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 800bd72:	4413      	add	r3, r2
 800bd74:	e001      	b.n	800bd7a <metal_io_phys+0x50>
 800bd76:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3714      	adds	r7, #20
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr

0800bd86 <metal_io_virt_to_phys>:
{
 800bd86:	b580      	push	{r7, lr}
 800bd88:	b082      	sub	sp, #8
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
 800bd8e:	6039      	str	r1, [r7, #0]
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
 800bd90:	6839      	ldr	r1, [r7, #0]
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f7ff ffb0 	bl	800bcf8 <metal_io_virt_to_offset>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f7ff ffc4 	bl	800bd2a <metal_io_phys>
 800bda2:	4603      	mov	r3, r0
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3708      	adds	r7, #8
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <virtqueue_virt_to_phys>:
}

/* Default implementation of V2P based on libmetal */
static inline metal_phys_addr_t virtqueue_virt_to_phys(struct virtqueue *vq,
						       void *buf)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdba:	60fb      	str	r3, [r7, #12]

	return metal_io_virt_to_phys(io, buf);
 800bdbc:	6839      	ldr	r1, [r7, #0]
 800bdbe:	68f8      	ldr	r0, [r7, #12]
 800bdc0:	f7ff ffe1 	bl	800bd86 <metal_io_virt_to_phys>
 800bdc4:	4603      	mov	r3, r0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3710      	adds	r7, #16
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}

0800bdce <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 800bdce:	b580      	push	{r7, lr}
 800bdd0:	b086      	sub	sp, #24
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	60f8      	str	r0, [r7, #12]
 800bdd6:	607a      	str	r2, [r7, #4]
 800bdd8:	603b      	str	r3, [r7, #0]
 800bdda:	460b      	mov	r3, r1
 800bddc:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 800bdde:	2300      	movs	r3, #0
 800bde0:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d121      	bne.n	800be2c <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 800bde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdea:	68fa      	ldr	r2, [r7, #12]
 800bdec:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 800bdee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf0:	687a      	ldr	r2, [r7, #4]
 800bdf2:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 800bdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf6:	897a      	ldrh	r2, [r7, #10]
 800bdf8:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	891a      	ldrh	r2, [r3, #8]
 800bdfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be00:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 800be02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be04:	895a      	ldrh	r2, [r3, #10]
 800be06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be08:	851a      	strh	r2, [r3, #40]	; 0x28
		vq->callback = callback;
 800be0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be0c:	6a3a      	ldr	r2, [r7, #32]
 800be0e:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 800be10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be14:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	6819      	ldr	r1, [r3, #0]
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	461a      	mov	r2, r3
 800be20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be22:	f000 f97a 	bl	800c11a <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 800be26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be28:	f000 f899 	bl	800bf5e <virtqueue_disable_cb>
	}

	return (status);
 800be2c:	697b      	ldr	r3, [r7, #20]
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3718      	adds	r7, #24
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}

0800be36 <virtqueue_add_buffer>:
 *
 * @return                  - Function status
 */
int virtqueue_add_buffer(struct virtqueue *vq, struct virtqueue_buf *buf_list,
			 int readable, int writable, void *cookie)
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b08a      	sub	sp, #40	; 0x28
 800be3a:	af02      	add	r7, sp, #8
 800be3c:	60f8      	str	r0, [r7, #12]
 800be3e:	60b9      	str	r1, [r7, #8]
 800be40:	607a      	str	r2, [r7, #4]
 800be42:	603b      	str	r3, [r7, #0]
	struct vq_desc_extra *dxp = NULL;
 800be44:	2300      	movs	r3, #0
 800be46:	61fb      	str	r3, [r7, #28]
	int status = VQUEUE_SUCCESS;
 800be48:	2300      	movs	r3, #0
 800be4a:	61bb      	str	r3, [r7, #24]
	uint16_t head_idx;
	uint16_t idx;
	int needed;

	needed = readable + writable;
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	4413      	add	r3, r2
 800be52:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(needed < 1, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(vq->vq_free_cnt == 0, status, ERROR_VRING_FULL);

	VQUEUE_BUSY(vq);

	if (status == VQUEUE_SUCCESS) {
 800be54:	69bb      	ldr	r3, [r7, #24]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d12c      	bne.n	800beb4 <virtqueue_add_buffer+0x7e>
		VQASSERT(vq, cookie != NULL, "enqueuing with no cookie");

		head_idx = vq->vq_desc_head_idx;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800be5e:	827b      	strh	r3, [r7, #18]
		VQ_RING_ASSERT_VALID_IDX(vq, head_idx);
		dxp = &vq->vq_descx[head_idx];
 800be60:	8a7b      	ldrh	r3, [r7, #18]
 800be62:	3307      	adds	r3, #7
 800be64:	00db      	lsls	r3, r3, #3
 800be66:	68fa      	ldr	r2, [r7, #12]
 800be68:	4413      	add	r3, r2
 800be6a:	61fb      	str	r3, [r7, #28]

		VQASSERT(vq, dxp->cookie == NULL,
			 "cookie already exists for index");

		dxp->cookie = cookie;
 800be6c:	69fb      	ldr	r3, [r7, #28]
 800be6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be70:	601a      	str	r2, [r3, #0]
		dxp->ndescs = needed;
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	b29a      	uxth	r2, r3
 800be76:	69fb      	ldr	r3, [r7, #28]
 800be78:	809a      	strh	r2, [r3, #4]

		/* Enqueue buffer onto the ring. */
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	69d9      	ldr	r1, [r3, #28]
 800be7e:	8a7a      	ldrh	r2, [r7, #18]
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	9301      	str	r3, [sp, #4]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	9300      	str	r3, [sp, #0]
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	68f8      	ldr	r0, [r7, #12]
 800be8c:	f000 f8a7 	bl	800bfde <vq_ring_add_buffer>
 800be90:	4603      	mov	r3, r0
 800be92:	823b      	strh	r3, [r7, #16]
					 buf_list, readable, writable);

		vq->vq_desc_head_idx = idx;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	8a3a      	ldrh	r2, [r7, #16]
 800be98:	861a      	strh	r2, [r3, #48]	; 0x30
		vq->vq_free_cnt -= needed;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	b29b      	uxth	r3, r3
 800bea2:	1ad3      	subs	r3, r2, r3
 800bea4:	b29a      	uxth	r2, r3
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	851a      	strh	r2, [r3, #40]	; 0x28

		/*
		 * Update vring_avail control block fields so that other
		 * side can get buffer using it.
		 */
		vq_ring_update_avail(vq, head_idx);
 800beaa:	8a7b      	ldrh	r3, [r7, #18]
 800beac:	4619      	mov	r1, r3
 800beae:	68f8      	ldr	r0, [r7, #12]
 800beb0:	f000 f966 	bl	800c180 <vq_ring_update_avail>
	}

	VQUEUE_IDLE(vq);

	return status;
 800beb4:	69bb      	ldr	r3, [r7, #24]
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3720      	adds	r7, #32
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}

0800bebe <virtqueue_get_buffer>:
 * @param idx           - index of the buffer
 *
 * @return              - Pointer to used buffer
 */
void *virtqueue_get_buffer(struct virtqueue *vq, uint32_t *len, uint16_t *idx)
{
 800bebe:	b580      	push	{r7, lr}
 800bec0:	b088      	sub	sp, #32
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	60f8      	str	r0, [r7, #12]
 800bec6:	60b9      	str	r1, [r7, #8]
 800bec8:	607a      	str	r2, [r7, #4]
	struct vring_used_elem *uep;
	void *cookie;
	uint16_t used_idx, desc_idx;

	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d006      	beq.n	800bede <virtqueue_get_buffer+0x20>
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bed8:	885b      	ldrh	r3, [r3, #2]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d101      	bne.n	800bee2 <virtqueue_get_buffer+0x24>
		return (NULL);
 800bede:	2300      	movs	r3, #0
 800bee0:	e039      	b.n	800bf56 <virtqueue_get_buffer+0x98>

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bee6:	1c5a      	adds	r2, r3, #1
 800bee8:	b291      	uxth	r1, r2
 800beea:	68fa      	ldr	r2, [r7, #12]
 800beec:	8651      	strh	r1, [r2, #50]	; 0x32
 800beee:	b21a      	sxth	r2, r3
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	895b      	ldrh	r3, [r3, #10]
 800bef4:	3b01      	subs	r3, #1
 800bef6:	b29b      	uxth	r3, r3
 800bef8:	b21b      	sxth	r3, r3
 800befa:	4013      	ands	r3, r2
 800befc:	b21b      	sxth	r3, r3
 800befe:	83fb      	strh	r3, [r7, #30]
	uep = &vq->vq_ring.used->ring[used_idx];
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf04:	8bfb      	ldrh	r3, [r7, #30]
 800bf06:	00db      	lsls	r3, r3, #3
 800bf08:	4413      	add	r3, r2
 800bf0a:	3304      	adds	r3, #4
 800bf0c:	61bb      	str	r3, [r7, #24]

	atomic_thread_fence(memory_order_seq_cst);
 800bf0e:	f3bf 8f5b 	dmb	ish

	desc_idx = (uint16_t)uep->id;
 800bf12:	69bb      	ldr	r3, [r7, #24]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	82fb      	strh	r3, [r7, #22]
	if (len)
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d003      	beq.n	800bf26 <virtqueue_get_buffer+0x68>
		*len = uep->len;
 800bf1e:	69bb      	ldr	r3, [r7, #24]
 800bf20:	685a      	ldr	r2, [r3, #4]
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	601a      	str	r2, [r3, #0]

	vq_ring_free_chain(vq, desc_idx);
 800bf26:	8afb      	ldrh	r3, [r7, #22]
 800bf28:	4619      	mov	r1, r3
 800bf2a:	68f8      	ldr	r0, [r7, #12]
 800bf2c:	f000 f8ae 	bl	800c08c <vq_ring_free_chain>

	cookie = vq->vq_descx[desc_idx].cookie;
 800bf30:	8afa      	ldrh	r2, [r7, #22]
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	3207      	adds	r2, #7
 800bf36:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800bf3a:	613b      	str	r3, [r7, #16]
	vq->vq_descx[desc_idx].cookie = NULL;
 800bf3c:	8afa      	ldrh	r2, [r7, #22]
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	3207      	adds	r2, #7
 800bf42:	2100      	movs	r1, #0
 800bf44:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

	if (idx)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d002      	beq.n	800bf54 <virtqueue_get_buffer+0x96>
		*idx = used_idx;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	8bfa      	ldrh	r2, [r7, #30]
 800bf52:	801a      	strh	r2, [r3, #0]
	VQUEUE_IDLE(vq);

	return cookie;
 800bf54:	693b      	ldr	r3, [r7, #16]
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3720      	adds	r7, #32
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}

0800bf5e <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 800bf5e:	b480      	push	{r7}
 800bf60:	b083      	sub	sp, #12
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	68db      	ldr	r3, [r3, #12]
 800bf6a:	f003 0302 	and.w	r3, r3, #2
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d010      	beq.n	800bf94 <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	895b      	ldrh	r3, [r3, #10]
 800bf7a:	1ad3      	subs	r3, r2, r3
 800bf7c:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6a1a      	ldr	r2, [r3, #32]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 800bf86:	3901      	subs	r1, #1
 800bf88:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 800bf8a:	005b      	lsls	r3, r3, #1
 800bf8c:	4413      	add	r3, r2
 800bf8e:	460a      	mov	r2, r1
 800bf90:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 800bf92:	e008      	b.n	800bfa6 <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6a1b      	ldr	r3, [r3, #32]
 800bf98:	881a      	ldrh	r2, [r3, #0]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6a1b      	ldr	r3, [r3, #32]
 800bf9e:	f042 0201 	orr.w	r2, r2, #1
 800bfa2:	b292      	uxth	r2, r2
 800bfa4:	801a      	strh	r2, [r3, #0]
}
 800bfa6:	bf00      	nop
 800bfa8:	370c      	adds	r7, #12
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb0:	4770      	bx	lr

0800bfb2 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 800bfb2:	b580      	push	{r7, lr}
 800bfb4:	b082      	sub	sp, #8
 800bfb6:	af00      	add	r7, sp, #0
 800bfb8:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 800bfba:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 f91d 	bl	800c1fe <vq_ring_must_notify_host>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d002      	beq.n	800bfd0 <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 f94d 	bl	800c26a <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	855a      	strh	r2, [r3, #42]	; 0x2a

	VQUEUE_IDLE(vq);
}
 800bfd6:	bf00      	nop
 800bfd8:	3708      	adds	r7, #8
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <vq_ring_add_buffer>:
 */
static uint16_t vq_ring_add_buffer(struct virtqueue *vq,
				   struct vring_desc *desc, uint16_t head_idx,
				   struct virtqueue_buf *buf_list, int readable,
				   int writable)
{
 800bfde:	b580      	push	{r7, lr}
 800bfe0:	b088      	sub	sp, #32
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	60f8      	str	r0, [r7, #12]
 800bfe6:	60b9      	str	r1, [r7, #8]
 800bfe8:	603b      	str	r3, [r7, #0]
 800bfea:	4613      	mov	r3, r2
 800bfec:	80fb      	strh	r3, [r7, #6]
	int i, needed;
	uint16_t idx;

	(void)vq;

	needed = readable + writable;
 800bfee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff2:	4413      	add	r3, r2
 800bff4:	617b      	str	r3, [r7, #20]

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 800bff6:	2300      	movs	r3, #0
 800bff8:	61fb      	str	r3, [r7, #28]
 800bffa:	88fb      	ldrh	r3, [r7, #6]
 800bffc:	837b      	strh	r3, [r7, #26]
 800bffe:	e03c      	b.n	800c07a <vq_ring_add_buffer+0x9c>
		VQASSERT(vq, idx != VQ_RING_DESC_CHAIN_END,
			 "premature end of free desc chain");

		dp = &desc[idx];
 800c000:	8b7b      	ldrh	r3, [r7, #26]
 800c002:	011b      	lsls	r3, r3, #4
 800c004:	68ba      	ldr	r2, [r7, #8]
 800c006:	4413      	add	r3, r2
 800c008:	613b      	str	r3, [r7, #16]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
 800c00a:	69fb      	ldr	r3, [r7, #28]
 800c00c:	00db      	lsls	r3, r3, #3
 800c00e:	683a      	ldr	r2, [r7, #0]
 800c010:	4413      	add	r3, r2
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4619      	mov	r1, r3
 800c016:	68f8      	ldr	r0, [r7, #12]
 800c018:	f7ff fec8 	bl	800bdac <virtqueue_virt_to_phys>
 800c01c:	4603      	mov	r3, r0
 800c01e:	461a      	mov	r2, r3
 800c020:	f04f 0300 	mov.w	r3, #0
 800c024:	6939      	ldr	r1, [r7, #16]
 800c026:	e9c1 2300 	strd	r2, r3, [r1]
		dp->len = buf_list[i].len;
 800c02a:	69fb      	ldr	r3, [r7, #28]
 800c02c:	00db      	lsls	r3, r3, #3
 800c02e:	683a      	ldr	r2, [r7, #0]
 800c030:	4413      	add	r3, r2
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	461a      	mov	r2, r3
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	609a      	str	r2, [r3, #8]
		dp->flags = 0;
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	2200      	movs	r2, #0
 800c03e:	819a      	strh	r2, [r3, #12]

		if (i < needed - 1)
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	3b01      	subs	r3, #1
 800c044:	69fa      	ldr	r2, [r7, #28]
 800c046:	429a      	cmp	r2, r3
 800c048:	da06      	bge.n	800c058 <vq_ring_add_buffer+0x7a>
			dp->flags |= VRING_DESC_F_NEXT;
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	899b      	ldrh	r3, [r3, #12]
 800c04e:	f043 0301 	orr.w	r3, r3, #1
 800c052:	b29a      	uxth	r2, r3
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	819a      	strh	r2, [r3, #12]

		/*
		 * Readable buffers are inserted  into vring before the
		 * writable buffers.
		 */
		if (i >= readable)
 800c058:	69fa      	ldr	r2, [r7, #28]
 800c05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c05c:	429a      	cmp	r2, r3
 800c05e:	db06      	blt.n	800c06e <vq_ring_add_buffer+0x90>
			dp->flags |= VRING_DESC_F_WRITE;
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	899b      	ldrh	r3, [r3, #12]
 800c064:	f043 0302 	orr.w	r3, r3, #2
 800c068:	b29a      	uxth	r2, r3
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	819a      	strh	r2, [r3, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 800c06e:	69fb      	ldr	r3, [r7, #28]
 800c070:	3301      	adds	r3, #1
 800c072:	61fb      	str	r3, [r7, #28]
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	89db      	ldrh	r3, [r3, #14]
 800c078:	837b      	strh	r3, [r7, #26]
 800c07a:	69fa      	ldr	r2, [r7, #28]
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	429a      	cmp	r2, r3
 800c080:	dbbe      	blt.n	800c000 <vq_ring_add_buffer+0x22>
	}

	return (idx);
 800c082:	8b7b      	ldrh	r3, [r7, #26]
}
 800c084:	4618      	mov	r0, r3
 800c086:	3720      	adds	r7, #32
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b085      	sub	sp, #20
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	460b      	mov	r3, r1
 800c096:	807b      	strh	r3, [r7, #2]
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	69da      	ldr	r2, [r3, #28]
 800c09c:	887b      	ldrh	r3, [r7, #2]
 800c09e:	011b      	lsls	r3, r3, #4
 800c0a0:	4413      	add	r3, r2
 800c0a2:	60fb      	str	r3, [r7, #12]
	dxp = &vq->vq_descx[desc_idx];
 800c0a4:	887b      	ldrh	r3, [r7, #2]
 800c0a6:	3307      	adds	r3, #7
 800c0a8:	00db      	lsls	r3, r3, #3
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	4413      	add	r3, r2
 800c0ae:	60bb      	str	r3, [r7, #8]

	if (vq->vq_free_cnt == 0) {
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	889b      	ldrh	r3, [r3, #4]
 800c0b8:	4413      	add	r3, r2
 800c0ba:	b29a      	uxth	r2, r3
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	851a      	strh	r2, [r3, #40]	; 0x28
	dxp->ndescs--;
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	889b      	ldrh	r3, [r3, #4]
 800c0c4:	3b01      	subs	r3, #1
 800c0c6:	b29a      	uxth	r2, r3
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	809a      	strh	r2, [r3, #4]

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	899b      	ldrh	r3, [r3, #12]
 800c0d0:	f003 0304 	and.w	r3, r3, #4
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d113      	bne.n	800c100 <vq_ring_free_chain+0x74>
		while (dp->flags & VRING_DESC_F_NEXT) {
 800c0d8:	e00c      	b.n	800c0f4 <vq_ring_free_chain+0x68>
			VQ_RING_ASSERT_VALID_IDX(vq, dp->next);
			dp = &vq->vq_ring.desc[dp->next];
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	69da      	ldr	r2, [r3, #28]
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	89db      	ldrh	r3, [r3, #14]
 800c0e2:	011b      	lsls	r3, r3, #4
 800c0e4:	4413      	add	r3, r2
 800c0e6:	60fb      	str	r3, [r7, #12]
			dxp->ndescs--;
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	889b      	ldrh	r3, [r3, #4]
 800c0ec:	3b01      	subs	r3, #1
 800c0ee:	b29a      	uxth	r2, r3
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	809a      	strh	r2, [r3, #4]
		while (dp->flags & VRING_DESC_F_NEXT) {
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	899b      	ldrh	r3, [r3, #12]
 800c0f8:	f003 0301 	and.w	r3, r3, #1
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d1ec      	bne.n	800c0da <vq_ring_free_chain+0x4e>
	/*
	 * We must append the existing free chain, if any, to the end of
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 */
	dp->next = vq->vq_desc_head_idx;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	81da      	strh	r2, [r3, #14]
	vq->vq_desc_head_idx = desc_idx;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	887a      	ldrh	r2, [r7, #2]
 800c10c:	861a      	strh	r2, [r3, #48]	; 0x30
}
 800c10e:	bf00      	nop
 800c110:	3714      	adds	r7, #20
 800c112:	46bd      	mov	sp, r7
 800c114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c118:	4770      	bx	lr

0800c11a <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 800c11a:	b580      	push	{r7, lr}
 800c11c:	b088      	sub	sp, #32
 800c11e:	af00      	add	r7, sp, #0
 800c120:	60f8      	str	r0, [r7, #12]
 800c122:	60b9      	str	r1, [r7, #8]
 800c124:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	895b      	ldrh	r3, [r3, #10]
 800c12a:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	3318      	adds	r3, #24
 800c130:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 800c132:	69b9      	ldr	r1, [r7, #24]
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	68ba      	ldr	r2, [r7, #8]
 800c138:	6978      	ldr	r0, [r7, #20]
 800c13a:	f7ff fd96 	bl	800bc6a <vring_init>

	for (i = 0; i < size - 1; i++)
 800c13e:	2300      	movs	r3, #0
 800c140:	61fb      	str	r3, [r7, #28]
 800c142:	e00c      	b.n	800c15e <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 800c144:	69fb      	ldr	r3, [r7, #28]
 800c146:	b29a      	uxth	r2, r3
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	6859      	ldr	r1, [r3, #4]
 800c14c:	69fb      	ldr	r3, [r7, #28]
 800c14e:	011b      	lsls	r3, r3, #4
 800c150:	440b      	add	r3, r1
 800c152:	3201      	adds	r2, #1
 800c154:	b292      	uxth	r2, r2
 800c156:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 800c158:	69fb      	ldr	r3, [r7, #28]
 800c15a:	3301      	adds	r3, #1
 800c15c:	61fb      	str	r3, [r7, #28]
 800c15e:	69bb      	ldr	r3, [r7, #24]
 800c160:	3b01      	subs	r3, #1
 800c162:	69fa      	ldr	r2, [r7, #28]
 800c164:	429a      	cmp	r2, r3
 800c166:	dbed      	blt.n	800c144 <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	685a      	ldr	r2, [r3, #4]
 800c16c:	69fb      	ldr	r3, [r7, #28]
 800c16e:	011b      	lsls	r3, r3, #4
 800c170:	4413      	add	r3, r2
 800c172:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c176:	81da      	strh	r2, [r3, #14]
}
 800c178:	bf00      	nop
 800c17a:	3720      	adds	r7, #32
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <vq_ring_update_avail>:
 *
 * vq_ring_update_avail
 *
 */
static void vq_ring_update_avail(struct virtqueue *vq, uint16_t desc_idx)
{
 800c180:	b480      	push	{r7}
 800c182:	b085      	sub	sp, #20
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	460b      	mov	r3, r1
 800c18a:	807b      	strh	r3, [r7, #2]
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6a1b      	ldr	r3, [r3, #32]
 800c190:	885b      	ldrh	r3, [r3, #2]
 800c192:	b21a      	sxth	r2, r3
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	895b      	ldrh	r3, [r3, #10]
 800c198:	3b01      	subs	r3, #1
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	b21b      	sxth	r3, r3
 800c19e:	4013      	ands	r3, r2
 800c1a0:	b21b      	sxth	r3, r3
 800c1a2:	81fb      	strh	r3, [r7, #14]
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6a1a      	ldr	r2, [r3, #32]
 800c1a8:	89fb      	ldrh	r3, [r7, #14]
 800c1aa:	005b      	lsls	r3, r3, #1
 800c1ac:	4413      	add	r3, r2
 800c1ae:	887a      	ldrh	r2, [r7, #2]
 800c1b0:	809a      	strh	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 800c1b2:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6a1b      	ldr	r3, [r3, #32]
 800c1ba:	885a      	ldrh	r2, [r3, #2]
 800c1bc:	3201      	adds	r2, #1
 800c1be:	b292      	uxth	r2, r2
 800c1c0:	805a      	strh	r2, [r3, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	b29a      	uxth	r2, r3
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c1ce:	bf00      	nop
 800c1d0:	3714      	adds	r7, #20
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d8:	4770      	bx	lr

0800c1da <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b082      	sub	sp, #8
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 800c1e2:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	691b      	ldr	r3, [r3, #16]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d003      	beq.n	800c1f6 <virtqueue_notification+0x1c>
		vq->callback(vq);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	691b      	ldr	r3, [r3, #16]
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	4798      	blx	r3
}
 800c1f6:	bf00      	nop
 800c1f8:	3708      	adds	r7, #8
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}

0800c1fe <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 800c1fe:	b580      	push	{r7, lr}
 800c200:	b084      	sub	sp, #16
 800c202:	af00      	add	r7, sp, #0
 800c204:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	68db      	ldr	r3, [r3, #12]
 800c20a:	f003 0302 	and.w	r3, r3, #2
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d01d      	beq.n	800c24e <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6a1b      	ldr	r3, [r3, #32]
 800c216:	885b      	ldrh	r3, [r3, #2]
 800c218:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c21e:	89fa      	ldrh	r2, [r7, #14]
 800c220:	1ad3      	subs	r3, r2, r3
 800c222:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	699b      	ldr	r3, [r3, #24]
 800c22c:	00db      	lsls	r3, r3, #3
 800c22e:	4413      	add	r3, r2
 800c230:	685b      	ldr	r3, [r3, #4]
 800c232:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 800c234:	89ba      	ldrh	r2, [r7, #12]
 800c236:	89f9      	ldrh	r1, [r7, #14]
 800c238:	897b      	ldrh	r3, [r7, #10]
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7ff fd3e 	bl	800bcbc <vring_need_event>
 800c240:	4603      	mov	r3, r0
 800c242:	2b00      	cmp	r3, #0
 800c244:	bf14      	ite	ne
 800c246:	2301      	movne	r3, #1
 800c248:	2300      	moveq	r3, #0
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	e009      	b.n	800c262 <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c252:	881b      	ldrh	r3, [r3, #0]
 800c254:	f003 0301 	and.w	r3, r3, #1
 800c258:	2b00      	cmp	r3, #0
 800c25a:	bf0c      	ite	eq
 800c25c:	2301      	moveq	r3, #1
 800c25e:	2300      	movne	r3, #0
 800c260:	b2db      	uxtb	r3, r3
}
 800c262:	4618      	mov	r0, r3
 800c264:	3710      	adds	r7, #16
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}

0800c26a <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 800c26a:	b580      	push	{r7, lr}
 800c26c:	b082      	sub	sp, #8
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	695b      	ldr	r3, [r3, #20]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d003      	beq.n	800c282 <vq_ring_notify_host+0x18>
		vq->notify(vq);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	695b      	ldr	r3, [r3, #20]
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	4798      	blx	r3
}
 800c282:	bf00      	nop
 800c284:	3708      	adds	r7, #8
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
	...

0800c28c <screenInit>:
tIMAGE_DATA safeairBarImageArray[5];

uint8_t nextFrameToDraw[40960] = {0xFF};

void screenInit(void)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af02      	add	r7, sp, #8
	isPortrait = true;
 800c292:	4b63      	ldr	r3, [pc, #396]	; (800c420 <screenInit+0x194>)
 800c294:	2201      	movs	r2, #1
 800c296:	701a      	strb	r2, [r3, #0]
	DEV_Module_Init();
 800c298:	f7fc fa92 	bl	80087c0 <DEV_Module_Init>
	LCD_1IN8_SetBackLight(1000);
 800c29c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c2a0:	f7fd fc40 	bl	8009b24 <LCD_1IN8_SetBackLight>

	if (isPortrait)
 800c2a4:	4b5e      	ldr	r3, [pc, #376]	; (800c420 <screenInit+0x194>)
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d00d      	beq.n	800c2c8 <screenInit+0x3c>
	{
		LCD_1IN8_Init(L2R_U2D);
 800c2ac:	2000      	movs	r0, #0
 800c2ae:	f7fd fb19 	bl	80098e4 <LCD_1IN8_Init>
		LCD_1IN8_Clear(BLACK);
 800c2b2:	2000      	movs	r0, #0
 800c2b4:	f7fd fbf8 	bl	8009aa8 <LCD_1IN8_Clear>
		Paint_NewImage(LCD_1IN8_HEIGHT,LCD_1IN8_WIDTH, 0, WHITE);
 800c2b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c2bc:	2200      	movs	r2, #0
 800c2be:	21a0      	movs	r1, #160	; 0xa0
 800c2c0:	2080      	movs	r0, #128	; 0x80
 800c2c2:	f7fc fa9d 	bl	8008800 <Paint_NewImage>
 800c2c6:	e00c      	b.n	800c2e2 <screenInit+0x56>
	}
	else
	{
		LCD_1IN8_Init(U2D_R2L);
 800c2c8:	2005      	movs	r0, #5
 800c2ca:	f7fd fb0b 	bl	80098e4 <LCD_1IN8_Init>
		LCD_1IN8_Clear(BLACK);
 800c2ce:	2000      	movs	r0, #0
 800c2d0:	f7fd fbea 	bl	8009aa8 <LCD_1IN8_Clear>
		Paint_NewImage(LCD_1IN8_WIDTH,LCD_1IN8_HEIGHT, 0, WHITE);
 800c2d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c2d8:	2200      	movs	r2, #0
 800c2da:	2180      	movs	r1, #128	; 0x80
 800c2dc:	20a0      	movs	r0, #160	; 0xa0
 800c2de:	f7fc fa8f 	bl	8008800 <Paint_NewImage>
	}

	Paint_SetClearFuntion(LCD_1IN8_Clear);
 800c2e2:	4850      	ldr	r0, [pc, #320]	; (800c424 <screenInit+0x198>)
 800c2e4:	f7fc fad8 	bl	8008898 <Paint_SetClearFuntion>
	Paint_SetDisplayFuntion(LCD_1IN8_DrawPaint);
 800c2e8:	484f      	ldr	r0, [pc, #316]	; (800c428 <screenInit+0x19c>)
 800c2ea:	f7fc fae5 	bl	80088b8 <Paint_SetDisplayFuntion>

//	printf("Paint_Clear\r\n");
	Paint_Clear(WHITE);
 800c2ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c2f2:	f7fc fba1 	bl	8008a38 <Paint_Clear>
	DEV_Delay_ms(1000);
 800c2f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c2fa:	f7f5 fe95 	bl	8002028 <HAL_Delay>

	if (isPortrait)
 800c2fe:	4b48      	ldr	r3, [pc, #288]	; (800c420 <screenInit+0x194>)
 800c300:	781b      	ldrb	r3, [r3, #0]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d042      	beq.n	800c38c <screenInit+0x100>
	{
		Paint_DrawImage(gImage_Rain, 0, 0, 128, 128);
 800c306:	2380      	movs	r3, #128	; 0x80
 800c308:	9300      	str	r3, [sp, #0]
 800c30a:	2380      	movs	r3, #128	; 0x80
 800c30c:	2200      	movs	r2, #0
 800c30e:	2100      	movs	r1, #0
 800c310:	4846      	ldr	r0, [pc, #280]	; (800c42c <screenInit+0x1a0>)
 800c312:	f7fd f8a9 	bl	8009468 <Paint_DrawImage>
		Paint_DrawString_EN(1, 130, "Version", &Font12, WHITE,  BLACK);
 800c316:	2300      	movs	r3, #0
 800c318:	9301      	str	r3, [sp, #4]
 800c31a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c31e:	9300      	str	r3, [sp, #0]
 800c320:	4b43      	ldr	r3, [pc, #268]	; (800c430 <screenInit+0x1a4>)
 800c322:	4a44      	ldr	r2, [pc, #272]	; (800c434 <screenInit+0x1a8>)
 800c324:	2182      	movs	r1, #130	; 0x82
 800c326:	2001      	movs	r0, #1
 800c328:	f7fc ffb4 	bl	8009294 <Paint_DrawString_EN>
		Paint_DrawFloatNum (1, 142 , versionID, 2,  &Font12, BLACK, WHITE);
 800c32c:	4b42      	ldr	r3, [pc, #264]	; (800c438 <screenInit+0x1ac>)
 800c32e:	edd3 7a00 	vldr	s15, [r3]
 800c332:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c336:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c33a:	9301      	str	r3, [sp, #4]
 800c33c:	2300      	movs	r3, #0
 800c33e:	9300      	str	r3, [sp, #0]
 800c340:	4b3b      	ldr	r3, [pc, #236]	; (800c430 <screenInit+0x1a4>)
 800c342:	2202      	movs	r2, #2
 800c344:	eeb0 0b47 	vmov.f64	d0, d7
 800c348:	218e      	movs	r1, #142	; 0x8e
 800c34a:	2001      	movs	r0, #1
 800c34c:	f7fc fffa 	bl	8009344 <Paint_DrawFloatNum>
		Paint_DrawString_EN(70, 130, "BuildID", &Font12, WHITE,  BLACK);
 800c350:	2300      	movs	r3, #0
 800c352:	9301      	str	r3, [sp, #4]
 800c354:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c358:	9300      	str	r3, [sp, #0]
 800c35a:	4b35      	ldr	r3, [pc, #212]	; (800c430 <screenInit+0x1a4>)
 800c35c:	4a37      	ldr	r2, [pc, #220]	; (800c43c <screenInit+0x1b0>)
 800c35e:	2182      	movs	r1, #130	; 0x82
 800c360:	2046      	movs	r0, #70	; 0x46
 800c362:	f7fc ff97 	bl	8009294 <Paint_DrawString_EN>
		Paint_DrawFloatNum (70, 142 , buildID, 2,  &Font12, BLACK, WHITE);
 800c366:	4b36      	ldr	r3, [pc, #216]	; (800c440 <screenInit+0x1b4>)
 800c368:	edd3 7a00 	vldr	s15, [r3]
 800c36c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c370:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c374:	9301      	str	r3, [sp, #4]
 800c376:	2300      	movs	r3, #0
 800c378:	9300      	str	r3, [sp, #0]
 800c37a:	4b2d      	ldr	r3, [pc, #180]	; (800c430 <screenInit+0x1a4>)
 800c37c:	2202      	movs	r2, #2
 800c37e:	eeb0 0b47 	vmov.f64	d0, d7
 800c382:	218e      	movs	r1, #142	; 0x8e
 800c384:	2046      	movs	r0, #70	; 0x46
 800c386:	f7fc ffdd 	bl	8009344 <Paint_DrawFloatNum>
 800c38a:	e041      	b.n	800c410 <screenInit+0x184>
	}
	else
	{
		Paint_DrawImage(gImage_Rain, 16, 0, 128, 128);
 800c38c:	2380      	movs	r3, #128	; 0x80
 800c38e:	9300      	str	r3, [sp, #0]
 800c390:	2380      	movs	r3, #128	; 0x80
 800c392:	2200      	movs	r2, #0
 800c394:	2110      	movs	r1, #16
 800c396:	4825      	ldr	r0, [pc, #148]	; (800c42c <screenInit+0x1a0>)
 800c398:	f7fd f866 	bl	8009468 <Paint_DrawImage>
		Paint_DrawString_EN(1, 98, "Version", &Font12, WHITE,  BLACK);
 800c39c:	2300      	movs	r3, #0
 800c39e:	9301      	str	r3, [sp, #4]
 800c3a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c3a4:	9300      	str	r3, [sp, #0]
 800c3a6:	4b22      	ldr	r3, [pc, #136]	; (800c430 <screenInit+0x1a4>)
 800c3a8:	4a22      	ldr	r2, [pc, #136]	; (800c434 <screenInit+0x1a8>)
 800c3aa:	2162      	movs	r1, #98	; 0x62
 800c3ac:	2001      	movs	r0, #1
 800c3ae:	f7fc ff71 	bl	8009294 <Paint_DrawString_EN>
		Paint_DrawFloatNum (1, 110 , versionID, 2,  &Font12, BLACK, WHITE);
 800c3b2:	4b21      	ldr	r3, [pc, #132]	; (800c438 <screenInit+0x1ac>)
 800c3b4:	edd3 7a00 	vldr	s15, [r3]
 800c3b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c3bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c3c0:	9301      	str	r3, [sp, #4]
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	9300      	str	r3, [sp, #0]
 800c3c6:	4b1a      	ldr	r3, [pc, #104]	; (800c430 <screenInit+0x1a4>)
 800c3c8:	2202      	movs	r2, #2
 800c3ca:	eeb0 0b47 	vmov.f64	d0, d7
 800c3ce:	216e      	movs	r1, #110	; 0x6e
 800c3d0:	2001      	movs	r0, #1
 800c3d2:	f7fc ffb7 	bl	8009344 <Paint_DrawFloatNum>
		Paint_DrawString_EN(104, 98, "BuildID", &Font12, WHITE,  BLACK);
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	9301      	str	r3, [sp, #4]
 800c3da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c3de:	9300      	str	r3, [sp, #0]
 800c3e0:	4b13      	ldr	r3, [pc, #76]	; (800c430 <screenInit+0x1a4>)
 800c3e2:	4a16      	ldr	r2, [pc, #88]	; (800c43c <screenInit+0x1b0>)
 800c3e4:	2162      	movs	r1, #98	; 0x62
 800c3e6:	2068      	movs	r0, #104	; 0x68
 800c3e8:	f7fc ff54 	bl	8009294 <Paint_DrawString_EN>
		Paint_DrawFloatNum (124, 110 , buildID, 2,  &Font12, BLACK, WHITE);
 800c3ec:	4b14      	ldr	r3, [pc, #80]	; (800c440 <screenInit+0x1b4>)
 800c3ee:	edd3 7a00 	vldr	s15, [r3]
 800c3f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c3f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c3fa:	9301      	str	r3, [sp, #4]
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	9300      	str	r3, [sp, #0]
 800c400:	4b0b      	ldr	r3, [pc, #44]	; (800c430 <screenInit+0x1a4>)
 800c402:	2202      	movs	r2, #2
 800c404:	eeb0 0b47 	vmov.f64	d0, d7
 800c408:	216e      	movs	r1, #110	; 0x6e
 800c40a:	207c      	movs	r0, #124	; 0x7c
 800c40c:	f7fc ff9a 	bl	8009344 <Paint_DrawFloatNum>
	}


	HAL_Delay(1000);
 800c410:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c414:	f7f5 fe08 	bl	8002028 <HAL_Delay>
}
 800c418:	bf00      	nop
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	bf00      	nop
 800c420:	24000054 	.word	0x24000054
 800c424:	08009aa9 	.word	0x08009aa9
 800c428:	08009a1d 	.word	0x08009a1d
 800c42c:	08015b5c 	.word	0x08015b5c
 800c430:	24000018 	.word	0x24000018
 800c434:	08015340 	.word	0x08015340
 800c438:	24000008 	.word	0x24000008
 800c43c:	08015348 	.word	0x08015348
 800c440:	2400000c 	.word	0x2400000c

0800c444 <screenClear>:

void screenClear(void)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	af00      	add	r7, sp, #0
	if (isPortrait)
 800c448:	4b0e      	ldr	r3, [pc, #56]	; (800c484 <screenClear+0x40>)
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d007      	beq.n	800c460 <screenClear+0x1c>
	{
		Paint_NewImage(LCD_1IN8_HEIGHT,LCD_1IN8_WIDTH, 0, WHITE);
 800c450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c454:	2200      	movs	r2, #0
 800c456:	21a0      	movs	r1, #160	; 0xa0
 800c458:	2080      	movs	r0, #128	; 0x80
 800c45a:	f7fc f9d1 	bl	8008800 <Paint_NewImage>
 800c45e:	e006      	b.n	800c46e <screenClear+0x2a>
	}
	else
	{
		Paint_NewImage(LCD_1IN8_WIDTH,LCD_1IN8_HEIGHT, 0, WHITE);
 800c460:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c464:	2200      	movs	r2, #0
 800c466:	2180      	movs	r1, #128	; 0x80
 800c468:	20a0      	movs	r0, #160	; 0xa0
 800c46a:	f7fc f9c9 	bl	8008800 <Paint_NewImage>
	}

	Paint_Clear(WHITE);
 800c46e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c472:	f7fc fae1 	bl	8008a38 <Paint_Clear>
	DEV_Delay_ms(1000);
 800c476:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c47a:	f7f5 fdd5 	bl	8002028 <HAL_Delay>
}
 800c47e:	bf00      	nop
 800c480:	bd80      	pop	{r7, pc}
 800c482:	bf00      	nop
 800c484:	24000054 	.word	0x24000054

0800c488 <centeredString>:

void centeredString(UWORD XCenterstart, UWORD Ystart, const char * pString, uint16_t textColor, uint16_t backgroundColor, uint8_t numberOfCharactersToClear, sFONT localFont)
{
 800c488:	b590      	push	{r4, r7, lr}
 800c48a:	b089      	sub	sp, #36	; 0x24
 800c48c:	af02      	add	r7, sp, #8
 800c48e:	60ba      	str	r2, [r7, #8]
 800c490:	461a      	mov	r2, r3
 800c492:	4603      	mov	r3, r0
 800c494:	81fb      	strh	r3, [r7, #14]
 800c496:	460b      	mov	r3, r1
 800c498:	81bb      	strh	r3, [r7, #12]
 800c49a:	4613      	mov	r3, r2
 800c49c:	80fb      	strh	r3, [r7, #6]
	uint8_t Xstart = 0;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	75fb      	strb	r3, [r7, #23]

	Xstart = fmax( XCenterstart - numberOfCharactersToClear * localFont.Width / 2, 0) ;
 800c4a2:	89fa      	ldrh	r2, [r7, #14]
 800c4a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c4a8:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800c4aa:	fb01 f303 	mul.w	r3, r1, r3
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	da00      	bge.n	800c4b4 <centeredString+0x2c>
 800c4b2:	3301      	adds	r3, #1
 800c4b4:	105b      	asrs	r3, r3, #1
 800c4b6:	425b      	negs	r3, r3
 800c4b8:	4413      	add	r3, r2
 800c4ba:	ee07 3a90 	vmov	s15, r3
 800c4be:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c4c2:	ed9f 1b57 	vldr	d1, [pc, #348]	; 800c620 <centeredString+0x198>
 800c4c6:	eeb0 0b47 	vmov.f64	d0, d7
 800c4ca:	f008 fb9f 	bl	8014c0c <fmax>
 800c4ce:	eeb0 7b40 	vmov.f64	d7, d0
 800c4d2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800c4d6:	edc7 7a00 	vstr	s15, [r7]
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	75fb      	strb	r3, [r7, #23]
//	Paint_DrawString_EN(Xstart, Ystart, "MAINTENANCE", &Font12, WHITE,  WHITE);
	if (!renderCompleteFrame)
 800c4de:	4b52      	ldr	r3, [pc, #328]	; (800c628 <centeredString+0x1a0>)
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	f083 0301 	eor.w	r3, r3, #1
 800c4e6:	b2db      	uxtb	r3, r3
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d018      	beq.n	800c51e <centeredString+0x96>
	{
		Paint_ClearWindows(Xstart, Ystart, Xstart + numberOfCharactersToClear * localFont.Width, Ystart + localFont.Height, WHITE);
 800c4ec:	7dfb      	ldrb	r3, [r7, #23]
 800c4ee:	b298      	uxth	r0, r3
 800c4f0:	7dfb      	ldrb	r3, [r7, #23]
 800c4f2:	b29a      	uxth	r2, r3
 800c4f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c4f8:	b299      	uxth	r1, r3
 800c4fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c4fc:	fb11 f303 	smulbb	r3, r1, r3
 800c500:	b29b      	uxth	r3, r3
 800c502:	4413      	add	r3, r2
 800c504:	b29c      	uxth	r4, r3
 800c506:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c508:	89bb      	ldrh	r3, [r7, #12]
 800c50a:	4413      	add	r3, r2
 800c50c:	b29b      	uxth	r3, r3
 800c50e:	89b9      	ldrh	r1, [r7, #12]
 800c510:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c514:	9200      	str	r2, [sp, #0]
 800c516:	4622      	mov	r2, r4
 800c518:	f7fc fa9e 	bl	8008a58 <Paint_ClearWindows>
 800c51c:	e04e      	b.n	800c5bc <centeredString+0x134>
	}
	else if ( (renderCompleteFrame) && (!isMenuDisplayed) && (!isPopupDisplayed) )
 800c51e:	4b42      	ldr	r3, [pc, #264]	; (800c628 <centeredString+0x1a0>)
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d026      	beq.n	800c574 <centeredString+0xec>
 800c526:	4b41      	ldr	r3, [pc, #260]	; (800c62c <centeredString+0x1a4>)
 800c528:	781b      	ldrb	r3, [r3, #0]
 800c52a:	f083 0301 	eor.w	r3, r3, #1
 800c52e:	b2db      	uxtb	r3, r3
 800c530:	2b00      	cmp	r3, #0
 800c532:	d01f      	beq.n	800c574 <centeredString+0xec>
 800c534:	4b3e      	ldr	r3, [pc, #248]	; (800c630 <centeredString+0x1a8>)
 800c536:	781b      	ldrb	r3, [r3, #0]
 800c538:	f083 0301 	eor.w	r3, r3, #1
 800c53c:	b2db      	uxtb	r3, r3
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d018      	beq.n	800c574 <centeredString+0xec>
	{
		Paint_ClearWindows(Xstart, Ystart, Xstart + numberOfCharactersToClear * localFont.Width, Ystart + localFont.Height, backgroundColor);
 800c542:	7dfb      	ldrb	r3, [r7, #23]
 800c544:	b298      	uxth	r0, r3
 800c546:	7dfb      	ldrb	r3, [r7, #23]
 800c548:	b29a      	uxth	r2, r3
 800c54a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c54e:	b299      	uxth	r1, r3
 800c550:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c552:	fb11 f303 	smulbb	r3, r1, r3
 800c556:	b29b      	uxth	r3, r3
 800c558:	4413      	add	r3, r2
 800c55a:	b29c      	uxth	r4, r3
 800c55c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c55e:	89bb      	ldrh	r3, [r7, #12]
 800c560:	4413      	add	r3, r2
 800c562:	b29a      	uxth	r2, r3
 800c564:	89b9      	ldrh	r1, [r7, #12]
 800c566:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c568:	9300      	str	r3, [sp, #0]
 800c56a:	4613      	mov	r3, r2
 800c56c:	4622      	mov	r2, r4
 800c56e:	f7fc fa73 	bl	8008a58 <Paint_ClearWindows>
 800c572:	e023      	b.n	800c5bc <centeredString+0x134>
	}
	else if ( (renderCompleteFrame) && ( (isMenuDisplayed) || (isPopupDisplayed) ) )
 800c574:	4b2c      	ldr	r3, [pc, #176]	; (800c628 <centeredString+0x1a0>)
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d01f      	beq.n	800c5bc <centeredString+0x134>
 800c57c:	4b2b      	ldr	r3, [pc, #172]	; (800c62c <centeredString+0x1a4>)
 800c57e:	781b      	ldrb	r3, [r3, #0]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d103      	bne.n	800c58c <centeredString+0x104>
 800c584:	4b2a      	ldr	r3, [pc, #168]	; (800c630 <centeredString+0x1a8>)
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d017      	beq.n	800c5bc <centeredString+0x134>
	{
		Paint_ClearWindows(Xstart, Ystart, Xstart + numberOfCharactersToClear * localFont.Width, Ystart + localFont.Height, WHITE);
 800c58c:	7dfb      	ldrb	r3, [r7, #23]
 800c58e:	b298      	uxth	r0, r3
 800c590:	7dfb      	ldrb	r3, [r7, #23]
 800c592:	b29a      	uxth	r2, r3
 800c594:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c598:	b299      	uxth	r1, r3
 800c59a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c59c:	fb11 f303 	smulbb	r3, r1, r3
 800c5a0:	b29b      	uxth	r3, r3
 800c5a2:	4413      	add	r3, r2
 800c5a4:	b29c      	uxth	r4, r3
 800c5a6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c5a8:	89bb      	ldrh	r3, [r7, #12]
 800c5aa:	4413      	add	r3, r2
 800c5ac:	b29b      	uxth	r3, r3
 800c5ae:	89b9      	ldrh	r1, [r7, #12]
 800c5b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c5b4:	9200      	str	r2, [sp, #0]
 800c5b6:	4622      	mov	r2, r4
 800c5b8:	f7fc fa4e 	bl	8008a58 <Paint_ClearWindows>
	}
	Xstart = strlen(pString);
 800c5bc:	68b8      	ldr	r0, [r7, #8]
 800c5be:	f7f3 fe99 	bl	80002f4 <strlen>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	75fb      	strb	r3, [r7, #23]
	Xstart = fmax( XCenterstart - strlen(pString) * localFont.Width / 2, 0) ;
 800c5c6:	89fc      	ldrh	r4, [r7, #14]
 800c5c8:	68b8      	ldr	r0, [r7, #8]
 800c5ca:	f7f3 fe93 	bl	80002f4 <strlen>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800c5d2:	fb02 f303 	mul.w	r3, r2, r3
 800c5d6:	085b      	lsrs	r3, r3, #1
 800c5d8:	1ae3      	subs	r3, r4, r3
 800c5da:	ee07 3a90 	vmov	s15, r3
 800c5de:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c5e2:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 800c620 <centeredString+0x198>
 800c5e6:	eeb0 0b47 	vmov.f64	d0, d7
 800c5ea:	f008 fb0f 	bl	8014c0c <fmax>
 800c5ee:	eeb0 7b40 	vmov.f64	d7, d0
 800c5f2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800c5f6:	edc7 7a00 	vstr	s15, [r7]
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	75fb      	strb	r3, [r7, #23]
	Paint_DrawString_EN(Xstart, Ystart, pString, &localFont, backgroundColor,  textColor);
 800c5fe:	7dfb      	ldrb	r3, [r7, #23]
 800c600:	b298      	uxth	r0, r3
 800c602:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c606:	89b9      	ldrh	r1, [r7, #12]
 800c608:	88fb      	ldrh	r3, [r7, #6]
 800c60a:	9301      	str	r3, [sp, #4]
 800c60c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c60e:	9300      	str	r3, [sp, #0]
 800c610:	4613      	mov	r3, r2
 800c612:	68ba      	ldr	r2, [r7, #8]
 800c614:	f7fc fe3e 	bl	8009294 <Paint_DrawString_EN>
}
 800c618:	bf00      	nop
 800c61a:	371c      	adds	r7, #28
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd90      	pop	{r4, r7, pc}
	...
 800c628:	2400a3b3 	.word	0x2400a3b3
 800c62c:	2400a3ad 	.word	0x2400a3ad
 800c630:	2400a3b2 	.word	0x2400a3b2

0800c634 <showAngles>:

void showAngles(void)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b08a      	sub	sp, #40	; 0x28
 800c638:	af02      	add	r7, sp, #8
	char localT[32] = "";
 800c63a:	2300      	movs	r3, #0
 800c63c:	603b      	str	r3, [r7, #0]
 800c63e:	1d3b      	adds	r3, r7, #4
 800c640:	2200      	movs	r2, #0
 800c642:	601a      	str	r2, [r3, #0]
 800c644:	605a      	str	r2, [r3, #4]
 800c646:	609a      	str	r2, [r3, #8]
 800c648:	60da      	str	r2, [r3, #12]
 800c64a:	611a      	str	r2, [r3, #16]
 800c64c:	615a      	str	r2, [r3, #20]
 800c64e:	619a      	str	r2, [r3, #24]

	snprintf(localT,sizeof(localT),"R: %04.3f", receivedAnglesData->bodyAngles.Roll);
 800c650:	4b2a      	ldr	r3, [pc, #168]	; (800c6fc <showAngles+0xc8>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	edd3 7a01 	vldr	s15, [r3, #4]
 800c658:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c65c:	463b      	mov	r3, r7
 800c65e:	ed8d 7b00 	vstr	d7, [sp]
 800c662:	4a27      	ldr	r2, [pc, #156]	; (800c700 <showAngles+0xcc>)
 800c664:	2120      	movs	r1, #32
 800c666:	4618      	mov	r0, r3
 800c668:	f004 ff20 	bl	80114ac <sniprintf>
	Paint_DrawString_EN(VerticalRollChasisX, VerticalRollChasisY, (char *)localT, &Font8, WHITE, BLACK);
 800c66c:	463a      	mov	r2, r7
 800c66e:	2300      	movs	r3, #0
 800c670:	9301      	str	r3, [sp, #4]
 800c672:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c676:	9300      	str	r3, [sp, #0]
 800c678:	4b22      	ldr	r3, [pc, #136]	; (800c704 <showAngles+0xd0>)
 800c67a:	218c      	movs	r1, #140	; 0x8c
 800c67c:	2002      	movs	r0, #2
 800c67e:	f7fc fe09 	bl	8009294 <Paint_DrawString_EN>

	memset(localT,0,32);
 800c682:	463b      	mov	r3, r7
 800c684:	2220      	movs	r2, #32
 800c686:	2100      	movs	r1, #0
 800c688:	4618      	mov	r0, r3
 800c68a:	f003 fe17 	bl	80102bc <memset>
	snprintf(localT,sizeof(localT),"P: %04.3f", receivedAnglesData->bodyAngles.Pitch);
 800c68e:	4b1b      	ldr	r3, [pc, #108]	; (800c6fc <showAngles+0xc8>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	edd3 7a02 	vldr	s15, [r3, #8]
 800c696:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c69a:	463b      	mov	r3, r7
 800c69c:	ed8d 7b00 	vstr	d7, [sp]
 800c6a0:	4a19      	ldr	r2, [pc, #100]	; (800c708 <showAngles+0xd4>)
 800c6a2:	2120      	movs	r1, #32
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f004 ff01 	bl	80114ac <sniprintf>
	Paint_DrawString_EN(VerticalPitchChasisX, VerticalPitchChasisY, (char *)localT, &Font8, WHITE, BLACK);
 800c6aa:	463a      	mov	r2, r7
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	9301      	str	r3, [sp, #4]
 800c6b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c6b4:	9300      	str	r3, [sp, #0]
 800c6b6:	4b13      	ldr	r3, [pc, #76]	; (800c704 <showAngles+0xd0>)
 800c6b8:	218c      	movs	r1, #140	; 0x8c
 800c6ba:	2044      	movs	r0, #68	; 0x44
 800c6bc:	f7fc fdea 	bl	8009294 <Paint_DrawString_EN>

	memset(localT,0,32);
 800c6c0:	463b      	mov	r3, r7
 800c6c2:	2220      	movs	r2, #32
 800c6c4:	2100      	movs	r1, #0
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f003 fdf8 	bl	80102bc <memset>
	snprintf(localT,sizeof(localT),"Y: %04.3f", receivedAnglesData->bodyAngles.Yaw);
 800c6cc:	4b0b      	ldr	r3, [pc, #44]	; (800c6fc <showAngles+0xc8>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	edd3 7a03 	vldr	s15, [r3, #12]
 800c6d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c6d8:	463b      	mov	r3, r7
 800c6da:	ed8d 7b00 	vstr	d7, [sp]
 800c6de:	4a0b      	ldr	r2, [pc, #44]	; (800c70c <showAngles+0xd8>)
 800c6e0:	2120      	movs	r1, #32
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f004 fee2 	bl	80114ac <sniprintf>
//	Paint_DrawString_EN(VerticalYawChasisX, VerticalYawChasisY, (char *)localT, &Font8, WHITE, BLACK);
	memset(localT,0,32);
 800c6e8:	463b      	mov	r3, r7
 800c6ea:	2220      	movs	r2, #32
 800c6ec:	2100      	movs	r1, #0
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f003 fde4 	bl	80102bc <memset>
}
 800c6f4:	bf00      	nop
 800c6f6:	3720      	adds	r7, #32
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	2400a56c 	.word	0x2400a56c
 800c700:	08015350 	.word	0x08015350
 800c704:	24000020 	.word	0x24000020
 800c708:	0801535c 	.word	0x0801535c
 800c70c:	08015368 	.word	0x08015368

0800c710 <showLIDAR>:

void showLIDAR(void)
{
 800c710:	b590      	push	{r4, r7, lr}
 800c712:	b085      	sub	sp, #20
 800c714:	af04      	add	r7, sp, #16
	Paint_DrawCircle(  lidarCenterX, lidarCenterY, 50, BLUE, DOT_PIXEL_2X2, DRAW_FILL_EMPTY );
 800c716:	2300      	movs	r3, #0
 800c718:	9301      	str	r3, [sp, #4]
 800c71a:	2302      	movs	r3, #2
 800c71c:	9300      	str	r3, [sp, #0]
 800c71e:	231f      	movs	r3, #31
 800c720:	2232      	movs	r2, #50	; 0x32
 800c722:	214c      	movs	r1, #76	; 0x4c
 800c724:	2040      	movs	r0, #64	; 0x40
 800c726:	f7fc fb99 	bl	8008e5c <Paint_DrawCircle>
	Paint_DrawCircle(  lidarCenterX, lidarCenterY, 1, RED, DOT_PIXEL_2X2, DRAW_FILL_FULL );
 800c72a:	2301      	movs	r3, #1
 800c72c:	9301      	str	r3, [sp, #4]
 800c72e:	2302      	movs	r3, #2
 800c730:	9300      	str	r3, [sp, #0]
 800c732:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800c736:	2201      	movs	r2, #1
 800c738:	214c      	movs	r1, #76	; 0x4c
 800c73a:	2040      	movs	r0, #64	; 0x40
 800c73c:	f7fc fb8e 	bl	8008e5c <Paint_DrawCircle>

	if (HAL_GetTick() - lastLidarBoresight >= 40)
 800c740:	f7f5 fc66 	bl	8002010 <HAL_GetTick>
 800c744:	4602      	mov	r2, r0
 800c746:	4b48      	ldr	r3, [pc, #288]	; (800c868 <showLIDAR+0x158>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	1ad3      	subs	r3, r2, r3
 800c74c:	2b27      	cmp	r3, #39	; 0x27
 800c74e:	d927      	bls.n	800c7a0 <showLIDAR+0x90>
	{
		currentLidarAngle = (float)((uint32_t)(1.8 * (HAL_GetTick() - lastLidarBoresight)) % (360));
 800c750:	f7f5 fc5e 	bl	8002010 <HAL_GetTick>
 800c754:	4602      	mov	r2, r0
 800c756:	4b44      	ldr	r3, [pc, #272]	; (800c868 <showLIDAR+0x158>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	1ad3      	subs	r3, r2, r3
 800c75c:	ee07 3a90 	vmov	s15, r3
 800c760:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c764:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 800c850 <showLIDAR+0x140>
 800c768:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c76c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800c770:	ee17 2a90 	vmov	r2, s15
 800c774:	08d3      	lsrs	r3, r2, #3
 800c776:	493d      	ldr	r1, [pc, #244]	; (800c86c <showLIDAR+0x15c>)
 800c778:	fba1 1303 	umull	r1, r3, r1, r3
 800c77c:	089b      	lsrs	r3, r3, #2
 800c77e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800c782:	fb01 f303 	mul.w	r3, r1, r3
 800c786:	1ad3      	subs	r3, r2, r3
 800c788:	ee07 3a90 	vmov	s15, r3
 800c78c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c790:	4b37      	ldr	r3, [pc, #220]	; (800c870 <showLIDAR+0x160>)
 800c792:	edc3 7a00 	vstr	s15, [r3]
		lastLidarBoresight = HAL_GetTick();
 800c796:	f7f5 fc3b 	bl	8002010 <HAL_GetTick>
 800c79a:	4603      	mov	r3, r0
 800c79c:	4a32      	ldr	r2, [pc, #200]	; (800c868 <showLIDAR+0x158>)
 800c79e:	6013      	str	r3, [r2, #0]
	}
	Paint_DrawLine(lidarCenterX, lidarCenterY, lidarCenterX + lidarRadius * cosf(receivedAnglesData->bodyAngles.Yaw * AHRSIMU_DEG2RAD),
 800c7a0:	4b34      	ldr	r3, [pc, #208]	; (800c874 <showLIDAR+0x164>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	edd3 7a03 	vldr	s15, [r3, #12]
 800c7a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c7ac:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 800c858 <showLIDAR+0x148>
 800c7b0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c7b4:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 800c860 <showLIDAR+0x150>
 800c7b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c7bc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c7c0:	eeb0 0a67 	vmov.f32	s0, s15
 800c7c4:	f008 f974 	bl	8014ab0 <cosf>
 800c7c8:	eef0 7a40 	vmov.f32	s15, s0
 800c7cc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800c878 <showLIDAR+0x168>
 800c7d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c7d4:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800c87c <showLIDAR+0x16c>
 800c7d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c7dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7e0:	ee17 3a90 	vmov	r3, s15
 800c7e4:	b29c      	uxth	r4, r3
			lidarCenterY + lidarRadius * sinf(receivedAnglesData->bodyAngles.Yaw * AHRSIMU_DEG2RAD), DARKBLUE, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 800c7e6:	4b23      	ldr	r3, [pc, #140]	; (800c874 <showLIDAR+0x164>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	edd3 7a03 	vldr	s15, [r3, #12]
 800c7ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c7f2:	ed9f 6b19 	vldr	d6, [pc, #100]	; 800c858 <showLIDAR+0x148>
 800c7f6:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c7fa:	ed9f 5b19 	vldr	d5, [pc, #100]	; 800c860 <showLIDAR+0x150>
 800c7fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c802:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c806:	eeb0 0a67 	vmov.f32	s0, s15
 800c80a:	f008 fa89 	bl	8014d20 <sinf>
 800c80e:	eef0 7a40 	vmov.f32	s15, s0
 800c812:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800c878 <showLIDAR+0x168>
 800c816:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c81a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800c880 <showLIDAR+0x170>
 800c81e:	ee77 7a87 	vadd.f32	s15, s15, s14
	Paint_DrawLine(lidarCenterX, lidarCenterY, lidarCenterX + lidarRadius * cosf(receivedAnglesData->bodyAngles.Yaw * AHRSIMU_DEG2RAD),
 800c822:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c826:	ee17 3a90 	vmov	r3, s15
 800c82a:	b29b      	uxth	r3, r3
 800c82c:	2200      	movs	r2, #0
 800c82e:	9202      	str	r2, [sp, #8]
 800c830:	2201      	movs	r2, #1
 800c832:	9201      	str	r2, [sp, #4]
 800c834:	f240 12cf 	movw	r2, #463	; 0x1cf
 800c838:	9200      	str	r2, [sp, #0]
 800c83a:	4622      	mov	r2, r4
 800c83c:	214c      	movs	r1, #76	; 0x4c
 800c83e:	2040      	movs	r0, #64	; 0x40
 800c840:	f7fc f9d4 	bl	8008bec <Paint_DrawLine>

}
 800c844:	bf00      	nop
 800c846:	3704      	adds	r7, #4
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd90      	pop	{r4, r7, pc}
 800c84c:	f3af 8000 	nop.w
 800c850:	cccccccd 	.word	0xcccccccd
 800c854:	3ffccccc 	.word	0x3ffccccc
 800c858:	54442d18 	.word	0x54442d18
 800c85c:	400921fb 	.word	0x400921fb
 800c860:	00000000 	.word	0x00000000
 800c864:	40668000 	.word	0x40668000
 800c868:	2400a3b8 	.word	0x2400a3b8
 800c86c:	16c16c17 	.word	0x16c16c17
 800c870:	2400a3bc 	.word	0x2400a3bc
 800c874:	2400a56c 	.word	0x2400a56c
 800c878:	42480000 	.word	0x42480000
 800c87c:	42800000 	.word	0x42800000
 800c880:	42980000 	.word	0x42980000

0800c884 <screenUpdate>:



void screenUpdate(bool drawDeltaImage)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b082      	sub	sp, #8
 800c888:	af00      	add	r7, sp, #0
 800c88a:	4603      	mov	r3, r0
 800c88c:	71fb      	strb	r3, [r7, #7]
//	numberOfDisplayedSafeAirIcons = 1 * isAutoPilotDisplayed + 1 * isPlatformDisplayed +
//			1 * isTriggerModeDisplayed + 1 * isSafeAirBatteryDisplayed;
//	setIconPositionOnScreen();
	if ( (!isMenuDisplayed) && (!isPopupDisplayed) )
 800c88e:	4b21      	ldr	r3, [pc, #132]	; (800c914 <screenUpdate+0x90>)
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	f083 0301 	eor.w	r3, r3, #1
 800c896:	b2db      	uxtb	r3, r3
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d00e      	beq.n	800c8ba <screenUpdate+0x36>
 800c89c:	4b1e      	ldr	r3, [pc, #120]	; (800c918 <screenUpdate+0x94>)
 800c89e:	781b      	ldrb	r3, [r3, #0]
 800c8a0:	f083 0301 	eor.w	r3, r3, #1
 800c8a4:	b2db      	uxtb	r3, r3
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d007      	beq.n	800c8ba <screenUpdate+0x36>
	{
		createEmptyFrame(false);
 800c8aa:	2000      	movs	r0, #0
 800c8ac:	f000 fe88 	bl	800d5c0 <createEmptyFrame>
		showAngles();
 800c8b0:	f7ff fec0 	bl	800c634 <showAngles>
		showLIDAR();
 800c8b4:	f7ff ff2c 	bl	800c710 <showLIDAR>
 800c8b8:	e01f      	b.n	800c8fa <screenUpdate+0x76>
	}
	else if (isMenuDisplayed)
 800c8ba:	4b16      	ldr	r3, [pc, #88]	; (800c914 <screenUpdate+0x90>)
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d01b      	beq.n	800c8fa <screenUpdate+0x76>
	{
		if (shouldRenderMenu)
 800c8c2:	4b16      	ldr	r3, [pc, #88]	; (800c91c <screenUpdate+0x98>)
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d00a      	beq.n	800c8e0 <screenUpdate+0x5c>
		{
			drawMenu(shouldClearScreen, menuDrawDirection);
 800c8ca:	4b15      	ldr	r3, [pc, #84]	; (800c920 <screenUpdate+0x9c>)
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	4a15      	ldr	r2, [pc, #84]	; (800c924 <screenUpdate+0xa0>)
 800c8d0:	7812      	ldrb	r2, [r2, #0]
 800c8d2:	4611      	mov	r1, r2
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f000 f82d 	bl	800c934 <drawMenu>
			shouldRenderMenu = false;
 800c8da:	4b10      	ldr	r3, [pc, #64]	; (800c91c <screenUpdate+0x98>)
 800c8dc:	2200      	movs	r2, #0
 800c8de:	701a      	strb	r2, [r3, #0]
		}
		if (shouldRenderItem)
 800c8e0:	4b11      	ldr	r3, [pc, #68]	; (800c928 <screenUpdate+0xa4>)
 800c8e2:	781b      	ldrb	r3, [r3, #0]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d008      	beq.n	800c8fa <screenUpdate+0x76>
		{
			drawItem(false, itemDrawDirection);
 800c8e8:	4b10      	ldr	r3, [pc, #64]	; (800c92c <screenUpdate+0xa8>)
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	4619      	mov	r1, r3
 800c8ee:	2000      	movs	r0, #0
 800c8f0:	f000 f9c4 	bl	800cc7c <drawItem>
			shouldRenderItem = false;
 800c8f4:	4b0c      	ldr	r3, [pc, #48]	; (800c928 <screenUpdate+0xa4>)
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	701a      	strb	r2, [r3, #0]
		}

	} // End of is Menu displayed
	if(shouldRenderPopup)
 800c8fa:	4b0d      	ldr	r3, [pc, #52]	; (800c930 <screenUpdate+0xac>)
 800c8fc:	781b      	ldrb	r3, [r3, #0]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d004      	beq.n	800c90c <screenUpdate+0x88>
	{
		drawPopup();
 800c902:	f000 fa7b 	bl	800cdfc <drawPopup>
		shouldRenderPopup = false;
 800c906:	4b0a      	ldr	r3, [pc, #40]	; (800c930 <screenUpdate+0xac>)
 800c908:	2200      	movs	r2, #0
 800c90a:	701a      	strb	r2, [r3, #0]
	}
}
 800c90c:	bf00      	nop
 800c90e:	3708      	adds	r7, #8
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}
 800c914:	2400a3ad 	.word	0x2400a3ad
 800c918:	2400a3b2 	.word	0x2400a3b2
 800c91c:	2400a3ac 	.word	0x2400a3ac
 800c920:	2400a3ae 	.word	0x2400a3ae
 800c924:	24000055 	.word	0x24000055
 800c928:	2400a3af 	.word	0x2400a3af
 800c92c:	24000056 	.word	0x24000056
 800c930:	2400a3b1 	.word	0x2400a3b1

0800c934 <drawMenu>:

void drawMenu(bool clearScreen, MENUDRAWType howToDraw)
{
 800c934:	b5b0      	push	{r4, r5, r7, lr}
 800c936:	b08a      	sub	sp, #40	; 0x28
 800c938:	af04      	add	r7, sp, #16
 800c93a:	4603      	mov	r3, r0
 800c93c:	460a      	mov	r2, r1
 800c93e:	71fb      	strb	r3, [r7, #7]
 800c940:	4613      	mov	r3, r2
 800c942:	71bb      	strb	r3, [r7, #6]
	if (clearScreen)
 800c944:	79fb      	ldrb	r3, [r7, #7]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d006      	beq.n	800c958 <drawMenu+0x24>
	{
		Paint_Clear(WHITE);
 800c94a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c94e:	f7fc f873 	bl	8008a38 <Paint_Clear>
		createEmptyFrame(true);
 800c952:	2001      	movs	r0, #1
 800c954:	f000 fe34 	bl	800d5c0 <createEmptyFrame>
	}

	uint8_t MenuRectangleStartX = 0;
 800c958:	2300      	movs	r3, #0
 800c95a:	75fb      	strb	r3, [r7, #23]
	uint8_t MenuRectangleStartY = 0;
 800c95c:	2300      	movs	r3, #0
 800c95e:	75bb      	strb	r3, [r7, #22]
	uint8_t MenuRectangleHeight = 0;
 800c960:	2300      	movs	r3, #0
 800c962:	757b      	strb	r3, [r7, #21]
	uint8_t MenuRectangleWidth = 0;
 800c964:	2300      	movs	r3, #0
 800c966:	753b      	strb	r3, [r7, #20]
	uint8_t DisplayCenterWidth = 0;
 800c968:	2300      	movs	r3, #0
 800c96a:	74fb      	strb	r3, [r7, #19]

	if (isPortrait)
 800c96c:	4b89      	ldr	r3, [pc, #548]	; (800cb94 <drawMenu+0x260>)
 800c96e:	781b      	ldrb	r3, [r3, #0]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d009      	beq.n	800c988 <drawMenu+0x54>
	{
		MenuRectangleStartX = VerticalMenuRectangleStartX;
 800c974:	2302      	movs	r3, #2
 800c976:	75fb      	strb	r3, [r7, #23]
		MenuRectangleStartY = VerticalMenuRectangleStartY;
 800c978:	230c      	movs	r3, #12
 800c97a:	75bb      	strb	r3, [r7, #22]
		MenuRectangleHeight = VerticalMenuRectangleHeight;
 800c97c:	230e      	movs	r3, #14
 800c97e:	757b      	strb	r3, [r7, #21]
		MenuRectangleWidth = VerticalMenuRectangleWidth;
 800c980:	237c      	movs	r3, #124	; 0x7c
 800c982:	753b      	strb	r3, [r7, #20]
		DisplayCenterWidth = VerticalDisplayCenterWidth;
 800c984:	2340      	movs	r3, #64	; 0x40
 800c986:	74fb      	strb	r3, [r7, #19]
//		MenuRectangleHeight = HorizontalMenuRectangleHeight;
//		MenuRectangleWidth = HorizontalMenuRectangleWidth;
//		DisplayCenterWidth = HorizontalDisplayCenterWidth;
	}

	if (howToDraw == FULL)
 800c988:	79bb      	ldrb	r3, [r7, #6]
 800c98a:	2b02      	cmp	r3, #2
 800c98c:	f040 809f 	bne.w	800cace <drawMenu+0x19a>
	{
		for (int i = 0; i < pagesArray[currentCursorPosition.currentPageID].numberOfItemsInPage; i++)
 800c990:	2300      	movs	r3, #0
 800c992:	60fb      	str	r3, [r7, #12]
 800c994:	e08a      	b.n	800caac <drawMenu+0x178>
		{
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800c996:	7dfb      	ldrb	r3, [r7, #23]
 800c998:	b298      	uxth	r0, r3
 800c99a:	7dbb      	ldrb	r3, [r7, #22]
 800c99c:	b29a      	uxth	r2, r3
 800c99e:	7d7b      	ldrb	r3, [r7, #21]
 800c9a0:	b299      	uxth	r1, r3
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	b29b      	uxth	r3, r3
 800c9a6:	fb11 f303 	smulbb	r3, r1, r3
 800c9aa:	b29b      	uxth	r3, r3
 800c9ac:	4413      	add	r3, r2
 800c9ae:	b29c      	uxth	r4, r3
 800c9b0:	7dfb      	ldrb	r3, [r7, #23]
 800c9b2:	b29a      	uxth	r2, r3
 800c9b4:	7d3b      	ldrb	r3, [r7, #20]
 800c9b6:	b29b      	uxth	r3, r3
 800c9b8:	4413      	add	r3, r2
 800c9ba:	b29d      	uxth	r5, r3
 800c9bc:	7dbb      	ldrb	r3, [r7, #22]
 800c9be:	b29a      	uxth	r2, r3
 800c9c0:	7d7b      	ldrb	r3, [r7, #21]
 800c9c2:	b299      	uxth	r1, r3
					MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * ( i + 1),
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	3301      	adds	r3, #1
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800c9c8:	b29b      	uxth	r3, r3
 800c9ca:	fb11 f303 	smulbb	r3, r1, r3
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	4413      	add	r3, r2
 800c9d2:	b29b      	uxth	r3, r3
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	9202      	str	r2, [sp, #8]
 800c9d8:	2201      	movs	r2, #1
 800c9da:	9201      	str	r2, [sp, #4]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	9200      	str	r2, [sp, #0]
 800c9e0:	462a      	mov	r2, r5
 800c9e2:	4621      	mov	r1, r4
 800c9e4:	f7fc f9b2 	bl	8008d4c <Paint_DrawRectangle>
					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			if (i == currentCursorPosition.cursorPosition)
 800c9e8:	4b6b      	ldr	r3, [pc, #428]	; (800cb98 <drawMenu+0x264>)
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	d12c      	bne.n	800ca4e <drawMenu+0x11a>
			{
				centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * i,
 800c9f4:	7cfb      	ldrb	r3, [r7, #19]
 800c9f6:	b29c      	uxth	r4, r3
 800c9f8:	7dbb      	ldrb	r3, [r7, #22]
 800c9fa:	b29a      	uxth	r2, r3
 800c9fc:	7d7b      	ldrb	r3, [r7, #21]
 800c9fe:	b299      	uxth	r1, r3
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	b29b      	uxth	r3, r3
 800ca04:	fb11 f303 	smulbb	r3, r1, r3
 800ca08:	b29b      	uxth	r3, r3
 800ca0a:	4413      	add	r3, r2
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	3301      	adds	r3, #1
 800ca10:	b29d      	uxth	r5, r3
						pagesArray[currentCursorPosition.currentPageID].itemsArray[i], BLACK, LGRAY, 16, Font12);
 800ca12:	4b61      	ldr	r3, [pc, #388]	; (800cb98 <drawMenu+0x264>)
 800ca14:	785b      	ldrb	r3, [r3, #1]
 800ca16:	4619      	mov	r1, r3
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	330a      	adds	r3, #10
 800ca1c:	011a      	lsls	r2, r3, #4
 800ca1e:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 800ca22:	fb03 f301 	mul.w	r3, r3, r1
 800ca26:	4413      	add	r3, r2
 800ca28:	4a5c      	ldr	r2, [pc, #368]	; (800cb9c <drawMenu+0x268>)
 800ca2a:	4413      	add	r3, r2
 800ca2c:	1c9a      	adds	r2, r3, #2
				centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * i,
 800ca2e:	495c      	ldr	r1, [pc, #368]	; (800cba0 <drawMenu+0x26c>)
 800ca30:	ab02      	add	r3, sp, #8
 800ca32:	c903      	ldmia	r1, {r0, r1}
 800ca34:	e883 0003 	stmia.w	r3, {r0, r1}
 800ca38:	2310      	movs	r3, #16
 800ca3a:	9301      	str	r3, [sp, #4]
 800ca3c:	f24c 6318 	movw	r3, #50712	; 0xc618
 800ca40:	9300      	str	r3, [sp, #0]
 800ca42:	2300      	movs	r3, #0
 800ca44:	4629      	mov	r1, r5
 800ca46:	4620      	mov	r0, r4
 800ca48:	f7ff fd1e 	bl	800c488 <centeredString>
 800ca4c:	e02b      	b.n	800caa6 <drawMenu+0x172>
			}
			else
			{
				centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * i,
 800ca4e:	7cfb      	ldrb	r3, [r7, #19]
 800ca50:	b29c      	uxth	r4, r3
 800ca52:	7dbb      	ldrb	r3, [r7, #22]
 800ca54:	b29a      	uxth	r2, r3
 800ca56:	7d7b      	ldrb	r3, [r7, #21]
 800ca58:	b299      	uxth	r1, r3
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	b29b      	uxth	r3, r3
 800ca5e:	fb11 f303 	smulbb	r3, r1, r3
 800ca62:	b29b      	uxth	r3, r3
 800ca64:	4413      	add	r3, r2
 800ca66:	b29b      	uxth	r3, r3
 800ca68:	3301      	adds	r3, #1
 800ca6a:	b29d      	uxth	r5, r3
						pagesArray[currentCursorPosition.currentPageID].itemsArray[i], BLACK, WHITE, 16, Font12);
 800ca6c:	4b4a      	ldr	r3, [pc, #296]	; (800cb98 <drawMenu+0x264>)
 800ca6e:	785b      	ldrb	r3, [r3, #1]
 800ca70:	4619      	mov	r1, r3
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	330a      	adds	r3, #10
 800ca76:	011a      	lsls	r2, r3, #4
 800ca78:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 800ca7c:	fb03 f301 	mul.w	r3, r3, r1
 800ca80:	4413      	add	r3, r2
 800ca82:	4a46      	ldr	r2, [pc, #280]	; (800cb9c <drawMenu+0x268>)
 800ca84:	4413      	add	r3, r2
 800ca86:	1c9a      	adds	r2, r3, #2
				centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * i,
 800ca88:	4945      	ldr	r1, [pc, #276]	; (800cba0 <drawMenu+0x26c>)
 800ca8a:	ab02      	add	r3, sp, #8
 800ca8c:	c903      	ldmia	r1, {r0, r1}
 800ca8e:	e883 0003 	stmia.w	r3, {r0, r1}
 800ca92:	2310      	movs	r3, #16
 800ca94:	9301      	str	r3, [sp, #4]
 800ca96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ca9a:	9300      	str	r3, [sp, #0]
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	4629      	mov	r1, r5
 800caa0:	4620      	mov	r0, r4
 800caa2:	f7ff fcf1 	bl	800c488 <centeredString>
		for (int i = 0; i < pagesArray[currentCursorPosition.currentPageID].numberOfItemsInPage; i++)
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	3301      	adds	r3, #1
 800caaa:	60fb      	str	r3, [r7, #12]
 800caac:	4b3a      	ldr	r3, [pc, #232]	; (800cb98 <drawMenu+0x264>)
 800caae:	785b      	ldrb	r3, [r3, #1]
 800cab0:	4619      	mov	r1, r3
 800cab2:	4a3a      	ldr	r2, [pc, #232]	; (800cb9c <drawMenu+0x268>)
 800cab4:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 800cab8:	fb03 f301 	mul.w	r3, r3, r1
 800cabc:	4413      	add	r3, r2
 800cabe:	33a1      	adds	r3, #161	; 0xa1
 800cac0:	781b      	ldrb	r3, [r3, #0]
 800cac2:	461a      	mov	r2, r3
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	4293      	cmp	r3, r2
 800cac8:	f6ff af65 	blt.w	800c996 <drawMenu+0x62>
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition - 1),
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition - 1], BLACK, WHITE, 16, Font12);
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition], BLACK, LGRAY, 16, Font12);
	}
}
 800cacc:	e0cb      	b.n	800cc66 <drawMenu+0x332>
	else if (howToDraw == UP)
 800cace:	79bb      	ldrb	r3, [r7, #6]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d167      	bne.n	800cba4 <drawMenu+0x270>
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition + 1),
 800cad4:	7cfb      	ldrb	r3, [r7, #19]
 800cad6:	b29c      	uxth	r4, r3
 800cad8:	7dbb      	ldrb	r3, [r7, #22]
 800cada:	b29a      	uxth	r2, r3
 800cadc:	7d7b      	ldrb	r3, [r7, #21]
 800cade:	b299      	uxth	r1, r3
 800cae0:	4b2d      	ldr	r3, [pc, #180]	; (800cb98 <drawMenu+0x264>)
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	3301      	adds	r3, #1
 800cae6:	b29b      	uxth	r3, r3
 800cae8:	fb11 f303 	smulbb	r3, r1, r3
 800caec:	b29b      	uxth	r3, r3
 800caee:	4413      	add	r3, r2
 800caf0:	b29b      	uxth	r3, r3
 800caf2:	3301      	adds	r3, #1
 800caf4:	b29d      	uxth	r5, r3
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition + 1], BLACK, WHITE, 16, Font12);
 800caf6:	4b28      	ldr	r3, [pc, #160]	; (800cb98 <drawMenu+0x264>)
 800caf8:	785b      	ldrb	r3, [r3, #1]
 800cafa:	4619      	mov	r1, r3
 800cafc:	4b26      	ldr	r3, [pc, #152]	; (800cb98 <drawMenu+0x264>)
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	3301      	adds	r3, #1
 800cb02:	330a      	adds	r3, #10
 800cb04:	011a      	lsls	r2, r3, #4
 800cb06:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 800cb0a:	fb03 f301 	mul.w	r3, r3, r1
 800cb0e:	4413      	add	r3, r2
 800cb10:	4a22      	ldr	r2, [pc, #136]	; (800cb9c <drawMenu+0x268>)
 800cb12:	4413      	add	r3, r2
 800cb14:	1c9a      	adds	r2, r3, #2
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition + 1),
 800cb16:	4922      	ldr	r1, [pc, #136]	; (800cba0 <drawMenu+0x26c>)
 800cb18:	ab02      	add	r3, sp, #8
 800cb1a:	c903      	ldmia	r1, {r0, r1}
 800cb1c:	e883 0003 	stmia.w	r3, {r0, r1}
 800cb20:	2310      	movs	r3, #16
 800cb22:	9301      	str	r3, [sp, #4]
 800cb24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cb28:	9300      	str	r3, [sp, #0]
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	4629      	mov	r1, r5
 800cb2e:	4620      	mov	r0, r4
 800cb30:	f7ff fcaa 	bl	800c488 <centeredString>
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
 800cb34:	7cfb      	ldrb	r3, [r7, #19]
 800cb36:	b29c      	uxth	r4, r3
 800cb38:	7dbb      	ldrb	r3, [r7, #22]
 800cb3a:	b29a      	uxth	r2, r3
 800cb3c:	7d7b      	ldrb	r3, [r7, #21]
 800cb3e:	b299      	uxth	r1, r3
 800cb40:	4b15      	ldr	r3, [pc, #84]	; (800cb98 <drawMenu+0x264>)
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	b29b      	uxth	r3, r3
 800cb46:	fb11 f303 	smulbb	r3, r1, r3
 800cb4a:	b29b      	uxth	r3, r3
 800cb4c:	4413      	add	r3, r2
 800cb4e:	b29b      	uxth	r3, r3
 800cb50:	3301      	adds	r3, #1
 800cb52:	b29d      	uxth	r5, r3
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition], BLACK, LGRAY, 16, Font12);
 800cb54:	4b10      	ldr	r3, [pc, #64]	; (800cb98 <drawMenu+0x264>)
 800cb56:	785b      	ldrb	r3, [r3, #1]
 800cb58:	4619      	mov	r1, r3
 800cb5a:	4b0f      	ldr	r3, [pc, #60]	; (800cb98 <drawMenu+0x264>)
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	330a      	adds	r3, #10
 800cb60:	011a      	lsls	r2, r3, #4
 800cb62:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 800cb66:	fb03 f301 	mul.w	r3, r3, r1
 800cb6a:	4413      	add	r3, r2
 800cb6c:	4a0b      	ldr	r2, [pc, #44]	; (800cb9c <drawMenu+0x268>)
 800cb6e:	4413      	add	r3, r2
 800cb70:	1c9a      	adds	r2, r3, #2
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
 800cb72:	490b      	ldr	r1, [pc, #44]	; (800cba0 <drawMenu+0x26c>)
 800cb74:	ab02      	add	r3, sp, #8
 800cb76:	c903      	ldmia	r1, {r0, r1}
 800cb78:	e883 0003 	stmia.w	r3, {r0, r1}
 800cb7c:	2310      	movs	r3, #16
 800cb7e:	9301      	str	r3, [sp, #4]
 800cb80:	f24c 6318 	movw	r3, #50712	; 0xc618
 800cb84:	9300      	str	r3, [sp, #0]
 800cb86:	2300      	movs	r3, #0
 800cb88:	4629      	mov	r1, r5
 800cb8a:	4620      	mov	r0, r4
 800cb8c:	f7ff fc7c 	bl	800c488 <centeredString>
}
 800cb90:	e069      	b.n	800cc66 <drawMenu+0x332>
 800cb92:	bf00      	nop
 800cb94:	24000054 	.word	0x24000054
 800cb98:	2400a5bc 	.word	0x2400a5bc
 800cb9c:	2400e220 	.word	0x2400e220
 800cba0:	24000018 	.word	0x24000018
	else if (howToDraw == DOWN)
 800cba4:	79bb      	ldrb	r3, [r7, #6]
 800cba6:	2b01      	cmp	r3, #1
 800cba8:	d15d      	bne.n	800cc66 <drawMenu+0x332>
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition - 1),
 800cbaa:	7cfb      	ldrb	r3, [r7, #19]
 800cbac:	b29c      	uxth	r4, r3
 800cbae:	7dbb      	ldrb	r3, [r7, #22]
 800cbb0:	b29a      	uxth	r2, r3
 800cbb2:	7d7b      	ldrb	r3, [r7, #21]
 800cbb4:	b299      	uxth	r1, r3
 800cbb6:	4b2e      	ldr	r3, [pc, #184]	; (800cc70 <drawMenu+0x33c>)
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	3b01      	subs	r3, #1
 800cbbc:	b29b      	uxth	r3, r3
 800cbbe:	fb11 f303 	smulbb	r3, r1, r3
 800cbc2:	b29b      	uxth	r3, r3
 800cbc4:	4413      	add	r3, r2
 800cbc6:	b29b      	uxth	r3, r3
 800cbc8:	3301      	adds	r3, #1
 800cbca:	b29d      	uxth	r5, r3
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition - 1], BLACK, WHITE, 16, Font12);
 800cbcc:	4b28      	ldr	r3, [pc, #160]	; (800cc70 <drawMenu+0x33c>)
 800cbce:	785b      	ldrb	r3, [r3, #1]
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	4b27      	ldr	r3, [pc, #156]	; (800cc70 <drawMenu+0x33c>)
 800cbd4:	781b      	ldrb	r3, [r3, #0]
 800cbd6:	3b01      	subs	r3, #1
 800cbd8:	330a      	adds	r3, #10
 800cbda:	011a      	lsls	r2, r3, #4
 800cbdc:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 800cbe0:	fb03 f301 	mul.w	r3, r3, r1
 800cbe4:	4413      	add	r3, r2
 800cbe6:	4a23      	ldr	r2, [pc, #140]	; (800cc74 <drawMenu+0x340>)
 800cbe8:	4413      	add	r3, r2
 800cbea:	1c9a      	adds	r2, r3, #2
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition - 1),
 800cbec:	4922      	ldr	r1, [pc, #136]	; (800cc78 <drawMenu+0x344>)
 800cbee:	ab02      	add	r3, sp, #8
 800cbf0:	c903      	ldmia	r1, {r0, r1}
 800cbf2:	e883 0003 	stmia.w	r3, {r0, r1}
 800cbf6:	2310      	movs	r3, #16
 800cbf8:	9301      	str	r3, [sp, #4]
 800cbfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cbfe:	9300      	str	r3, [sp, #0]
 800cc00:	2300      	movs	r3, #0
 800cc02:	4629      	mov	r1, r5
 800cc04:	4620      	mov	r0, r4
 800cc06:	f7ff fc3f 	bl	800c488 <centeredString>
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
 800cc0a:	7cfb      	ldrb	r3, [r7, #19]
 800cc0c:	b29c      	uxth	r4, r3
 800cc0e:	7dbb      	ldrb	r3, [r7, #22]
 800cc10:	b29a      	uxth	r2, r3
 800cc12:	7d7b      	ldrb	r3, [r7, #21]
 800cc14:	b299      	uxth	r1, r3
 800cc16:	4b16      	ldr	r3, [pc, #88]	; (800cc70 <drawMenu+0x33c>)
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	fb11 f303 	smulbb	r3, r1, r3
 800cc20:	b29b      	uxth	r3, r3
 800cc22:	4413      	add	r3, r2
 800cc24:	b29b      	uxth	r3, r3
 800cc26:	3301      	adds	r3, #1
 800cc28:	b29d      	uxth	r5, r3
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition], BLACK, LGRAY, 16, Font12);
 800cc2a:	4b11      	ldr	r3, [pc, #68]	; (800cc70 <drawMenu+0x33c>)
 800cc2c:	785b      	ldrb	r3, [r3, #1]
 800cc2e:	4619      	mov	r1, r3
 800cc30:	4b0f      	ldr	r3, [pc, #60]	; (800cc70 <drawMenu+0x33c>)
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	330a      	adds	r3, #10
 800cc36:	011a      	lsls	r2, r3, #4
 800cc38:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 800cc3c:	fb03 f301 	mul.w	r3, r3, r1
 800cc40:	4413      	add	r3, r2
 800cc42:	4a0c      	ldr	r2, [pc, #48]	; (800cc74 <drawMenu+0x340>)
 800cc44:	4413      	add	r3, r2
 800cc46:	1c9a      	adds	r2, r3, #2
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
 800cc48:	490b      	ldr	r1, [pc, #44]	; (800cc78 <drawMenu+0x344>)
 800cc4a:	ab02      	add	r3, sp, #8
 800cc4c:	c903      	ldmia	r1, {r0, r1}
 800cc4e:	e883 0003 	stmia.w	r3, {r0, r1}
 800cc52:	2310      	movs	r3, #16
 800cc54:	9301      	str	r3, [sp, #4]
 800cc56:	f24c 6318 	movw	r3, #50712	; 0xc618
 800cc5a:	9300      	str	r3, [sp, #0]
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	4629      	mov	r1, r5
 800cc60:	4620      	mov	r0, r4
 800cc62:	f7ff fc11 	bl	800c488 <centeredString>
}
 800cc66:	bf00      	nop
 800cc68:	3718      	adds	r7, #24
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bdb0      	pop	{r4, r5, r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	2400a5bc 	.word	0x2400a5bc
 800cc74:	2400e220 	.word	0x2400e220
 800cc78:	24000018 	.word	0x24000018

0800cc7c <drawItem>:

void drawItem(bool clearScreen, MENUDRAWType howToDraw)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b082      	sub	sp, #8
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	4603      	mov	r3, r0
 800cc84:	460a      	mov	r2, r1
 800cc86:	71fb      	strb	r3, [r7, #7]
 800cc88:	4613      	mov	r3, r2
 800cc8a:	71bb      	strb	r3, [r7, #6]
	if ((clearScreen) || (!isItemDisplayed) )
 800cc8c:	79fb      	ldrb	r3, [r7, #7]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d106      	bne.n	800cca0 <drawItem+0x24>
 800cc92:	4b53      	ldr	r3, [pc, #332]	; (800cde0 <drawItem+0x164>)
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	f083 0301 	eor.w	r3, r3, #1
 800cc9a:	b2db      	uxtb	r3, r3
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d006      	beq.n	800ccae <drawItem+0x32>
	{
		Paint_Clear(WHITE);
 800cca0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800cca4:	f7fb fec8 	bl	8008a38 <Paint_Clear>
		createEmptyFrame(true);
 800cca8:	2001      	movs	r0, #1
 800ccaa:	f000 fc89 	bl	800d5c0 <createEmptyFrame>
	}
	if ( pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth - 1]].
 800ccae:	4b4d      	ldr	r3, [pc, #308]	; (800cde4 <drawItem+0x168>)
 800ccb0:	7b1b      	ldrb	r3, [r3, #12]
 800ccb2:	3b01      	subs	r3, #1
 800ccb4:	4a4b      	ldr	r2, [pc, #300]	; (800cde4 <drawItem+0x168>)
 800ccb6:	4413      	add	r3, r2
 800ccb8:	789b      	ldrb	r3, [r3, #2]
 800ccba:	4618      	mov	r0, r3
			cellTypeArray[currentCursorPosition.previousPageCursorPosition[currentCursorPosition.menuDepth - 1]] == UINT16_ITEM )
 800ccbc:	4b49      	ldr	r3, [pc, #292]	; (800cde4 <drawItem+0x168>)
 800ccbe:	7b1b      	ldrb	r3, [r3, #12]
 800ccc0:	3b01      	subs	r3, #1
 800ccc2:	4a48      	ldr	r2, [pc, #288]	; (800cde4 <drawItem+0x168>)
 800ccc4:	4413      	add	r3, r2
 800ccc6:	79db      	ldrb	r3, [r3, #7]
 800ccc8:	4619      	mov	r1, r3
 800ccca:	4a47      	ldr	r2, [pc, #284]	; (800cde8 <drawItem+0x16c>)
 800cccc:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 800ccd0:	fb03 f300 	mul.w	r3, r3, r0
 800ccd4:	4413      	add	r3, r2
 800ccd6:	440b      	add	r3, r1
 800ccd8:	3380      	adds	r3, #128	; 0x80
 800ccda:	781b      	ldrb	r3, [r3, #0]
	if ( pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth - 1]].
 800ccdc:	2b02      	cmp	r3, #2
 800ccde:	d130      	bne.n	800cd42 <drawItem+0xc6>
	{
		if ( !(isItemDisplayed) )
 800cce0:	4b3f      	ldr	r3, [pc, #252]	; (800cde0 <drawItem+0x164>)
 800cce2:	781b      	ldrb	r3, [r3, #0]
 800cce4:	f083 0301 	eor.w	r3, r3, #1
 800cce8:	b2db      	uxtb	r3, r3
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d022      	beq.n	800cd34 <drawItem+0xb8>
		{
			multiplierIndex = 0;
 800ccee:	4b3f      	ldr	r3, [pc, #252]	; (800cdec <drawItem+0x170>)
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	701a      	strb	r2, [r3, #0]
			memcpy(&uint16Item, (uint32_t *)pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth -1]].
 800ccf4:	4b3b      	ldr	r3, [pc, #236]	; (800cde4 <drawItem+0x168>)
 800ccf6:	7b1b      	ldrb	r3, [r3, #12]
 800ccf8:	3b01      	subs	r3, #1
 800ccfa:	4a3a      	ldr	r2, [pc, #232]	; (800cde4 <drawItem+0x168>)
 800ccfc:	4413      	add	r3, r2
 800ccfe:	789b      	ldrb	r3, [r3, #2]
 800cd00:	4618      	mov	r0, r3
					nextCellIDArray[currentCursorPosition.previousPageCursorPosition[currentCursorPosition.menuDepth -1]], sizeof(tUINT16_ITEM));
 800cd02:	4b38      	ldr	r3, [pc, #224]	; (800cde4 <drawItem+0x168>)
 800cd04:	7b1b      	ldrb	r3, [r3, #12]
 800cd06:	3b01      	subs	r3, #1
 800cd08:	4a36      	ldr	r2, [pc, #216]	; (800cde4 <drawItem+0x168>)
 800cd0a:	4413      	add	r3, r2
 800cd0c:	79db      	ldrb	r3, [r3, #7]
 800cd0e:	4619      	mov	r1, r3
 800cd10:	4a35      	ldr	r2, [pc, #212]	; (800cde8 <drawItem+0x16c>)
 800cd12:	23a9      	movs	r3, #169	; 0xa9
 800cd14:	fb03 f300 	mul.w	r3, r3, r0
 800cd18:	440b      	add	r3, r1
 800cd1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			memcpy(&uint16Item, (uint32_t *)pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth -1]].
 800cd1e:	f44f 7204 	mov.w	r2, #528	; 0x210
 800cd22:	4619      	mov	r1, r3
 800cd24:	4832      	ldr	r0, [pc, #200]	; (800cdf0 <drawItem+0x174>)
 800cd26:	f003 faa1 	bl	801026c <memcpy>
			itemIDtoUpdate = uint16Item.itemID;
 800cd2a:	4b31      	ldr	r3, [pc, #196]	; (800cdf0 <drawItem+0x174>)
 800cd2c:	7b9b      	ldrb	r3, [r3, #14]
 800cd2e:	461a      	mov	r2, r3
 800cd30:	4b30      	ldr	r3, [pc, #192]	; (800cdf4 <drawItem+0x178>)
 800cd32:	601a      	str	r2, [r3, #0]
		}
		isItemDisplayed = true;
 800cd34:	4b2a      	ldr	r3, [pc, #168]	; (800cde0 <drawItem+0x164>)
 800cd36:	2201      	movs	r2, #1
 800cd38:	701a      	strb	r2, [r3, #0]
		updateUint16Item(howToDraw);
 800cd3a:	79bb      	ldrb	r3, [r7, #6]
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f000 fca3 	bl	800d688 <updateUint16Item>
	}
	if ( pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth - 1]].
 800cd42:	4b28      	ldr	r3, [pc, #160]	; (800cde4 <drawItem+0x168>)
 800cd44:	7b1b      	ldrb	r3, [r3, #12]
 800cd46:	3b01      	subs	r3, #1
 800cd48:	4a26      	ldr	r2, [pc, #152]	; (800cde4 <drawItem+0x168>)
 800cd4a:	4413      	add	r3, r2
 800cd4c:	789b      	ldrb	r3, [r3, #2]
 800cd4e:	4618      	mov	r0, r3
			cellTypeArray[currentCursorPosition.previousPageCursorPosition[currentCursorPosition.menuDepth - 1]] == STRING_ITEM )
 800cd50:	4b24      	ldr	r3, [pc, #144]	; (800cde4 <drawItem+0x168>)
 800cd52:	7b1b      	ldrb	r3, [r3, #12]
 800cd54:	3b01      	subs	r3, #1
 800cd56:	4a23      	ldr	r2, [pc, #140]	; (800cde4 <drawItem+0x168>)
 800cd58:	4413      	add	r3, r2
 800cd5a:	79db      	ldrb	r3, [r3, #7]
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	4a22      	ldr	r2, [pc, #136]	; (800cde8 <drawItem+0x16c>)
 800cd60:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 800cd64:	fb03 f300 	mul.w	r3, r3, r0
 800cd68:	4413      	add	r3, r2
 800cd6a:	440b      	add	r3, r1
 800cd6c:	3380      	adds	r3, #128	; 0x80
 800cd6e:	781b      	ldrb	r3, [r3, #0]
	if ( pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth - 1]].
 800cd70:	2b08      	cmp	r3, #8
 800cd72:	d131      	bne.n	800cdd8 <drawItem+0x15c>
	{
		if ( !(isItemDisplayed) )
 800cd74:	4b1a      	ldr	r3, [pc, #104]	; (800cde0 <drawItem+0x164>)
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	f083 0301 	eor.w	r3, r3, #1
 800cd7c:	b2db      	uxtb	r3, r3
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d023      	beq.n	800cdca <drawItem+0x14e>
		{
			multiplierIndex = 0;
 800cd82:	4b1a      	ldr	r3, [pc, #104]	; (800cdec <drawItem+0x170>)
 800cd84:	2200      	movs	r2, #0
 800cd86:	701a      	strb	r2, [r3, #0]
			memcpy(&stringItem, (uint32_t *)pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth -1]].
 800cd88:	4b16      	ldr	r3, [pc, #88]	; (800cde4 <drawItem+0x168>)
 800cd8a:	7b1b      	ldrb	r3, [r3, #12]
 800cd8c:	3b01      	subs	r3, #1
 800cd8e:	4a15      	ldr	r2, [pc, #84]	; (800cde4 <drawItem+0x168>)
 800cd90:	4413      	add	r3, r2
 800cd92:	789b      	ldrb	r3, [r3, #2]
 800cd94:	4618      	mov	r0, r3
					nextCellIDArray[currentCursorPosition.previousPageCursorPosition[currentCursorPosition.menuDepth -1]], sizeof(tSTRING_ITEM));
 800cd96:	4b13      	ldr	r3, [pc, #76]	; (800cde4 <drawItem+0x168>)
 800cd98:	7b1b      	ldrb	r3, [r3, #12]
 800cd9a:	3b01      	subs	r3, #1
 800cd9c:	4a11      	ldr	r2, [pc, #68]	; (800cde4 <drawItem+0x168>)
 800cd9e:	4413      	add	r3, r2
 800cda0:	79db      	ldrb	r3, [r3, #7]
 800cda2:	4619      	mov	r1, r3
 800cda4:	4a10      	ldr	r2, [pc, #64]	; (800cde8 <drawItem+0x16c>)
 800cda6:	23a9      	movs	r3, #169	; 0xa9
 800cda8:	fb03 f300 	mul.w	r3, r3, r0
 800cdac:	440b      	add	r3, r1
 800cdae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			memcpy(&stringItem, (uint32_t *)pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth -1]].
 800cdb2:	f240 420c 	movw	r2, #1036	; 0x40c
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	480f      	ldr	r0, [pc, #60]	; (800cdf8 <drawItem+0x17c>)
 800cdba:	f003 fa57 	bl	801026c <memcpy>
			itemIDtoUpdate = stringItem.itemID;
 800cdbe:	4b0e      	ldr	r3, [pc, #56]	; (800cdf8 <drawItem+0x17c>)
 800cdc0:	f893 320a 	ldrb.w	r3, [r3, #522]	; 0x20a
 800cdc4:	461a      	mov	r2, r3
 800cdc6:	4b0b      	ldr	r3, [pc, #44]	; (800cdf4 <drawItem+0x178>)
 800cdc8:	601a      	str	r2, [r3, #0]
		}
		isItemDisplayed = true;
 800cdca:	4b05      	ldr	r3, [pc, #20]	; (800cde0 <drawItem+0x164>)
 800cdcc:	2201      	movs	r2, #1
 800cdce:	701a      	strb	r2, [r3, #0]
		updateStringItem(howToDraw);
 800cdd0:	79bb      	ldrb	r3, [r7, #6]
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f001 ff88 	bl	800ece8 <updateStringItem>
	}
}
 800cdd8:	bf00      	nop
 800cdda:	3708      	adds	r7, #8
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}
 800cde0:	2400a3b0 	.word	0x2400a3b0
 800cde4:	2400a5bc 	.word	0x2400a5bc
 800cde8:	2400e220 	.word	0x2400e220
 800cdec:	2400a0d8 	.word	0x2400a0d8
 800cdf0:	2400ae1c 	.word	0x2400ae1c
 800cdf4:	2400a458 	.word	0x2400a458
 800cdf8:	2400b030 	.word	0x2400b030

0800cdfc <drawPopup>:

void drawPopup(void)
{
 800cdfc:	b5b0      	push	{r4, r5, r7, lr}
 800cdfe:	b088      	sub	sp, #32
 800ce00:	af04      	add	r7, sp, #16
	uint8_t MenuRectangleStartX = 0;
 800ce02:	2300      	movs	r3, #0
 800ce04:	73fb      	strb	r3, [r7, #15]
	uint8_t MenuRectangleStartY = 0;
 800ce06:	2300      	movs	r3, #0
 800ce08:	73bb      	strb	r3, [r7, #14]
	uint8_t MenuRectangleHeight = 0;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	737b      	strb	r3, [r7, #13]
	uint8_t MenuRectangleWidth = 0;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	733b      	strb	r3, [r7, #12]
	uint8_t DisplayCenterWidth = 0;
 800ce12:	2300      	movs	r3, #0
 800ce14:	72fb      	strb	r3, [r7, #11]
	uint8_t PopupRectangleHeight = 0;
 800ce16:	2300      	movs	r3, #0
 800ce18:	72bb      	strb	r3, [r7, #10]
	uint8_t QuestionRectangleHeight = 0;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	727b      	strb	r3, [r7, #9]

	if (isPortrait)
 800ce1e:	4ba3      	ldr	r3, [pc, #652]	; (800d0ac <drawPopup+0x2b0>)
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d00d      	beq.n	800ce42 <drawPopup+0x46>
	{
		MenuRectangleStartX = VerticalMenuRectangleStartX;
 800ce26:	2302      	movs	r3, #2
 800ce28:	73fb      	strb	r3, [r7, #15]
		MenuRectangleStartY = VerticalMenuRectangleStartY;
 800ce2a:	230c      	movs	r3, #12
 800ce2c:	73bb      	strb	r3, [r7, #14]
		MenuRectangleHeight = VerticalMenuRectangleHeight;
 800ce2e:	230e      	movs	r3, #14
 800ce30:	737b      	strb	r3, [r7, #13]
		MenuRectangleWidth = VerticalMenuRectangleWidth;
 800ce32:	237c      	movs	r3, #124	; 0x7c
 800ce34:	733b      	strb	r3, [r7, #12]
		DisplayCenterWidth = VerticalDisplayCenterWidth;
 800ce36:	2340      	movs	r3, #64	; 0x40
 800ce38:	72fb      	strb	r3, [r7, #11]
		PopupRectangleHeight = VerticalPopupRectangleHeight;
 800ce3a:	2364      	movs	r3, #100	; 0x64
 800ce3c:	72bb      	strb	r3, [r7, #10]
		QuestionRectangleHeight = VerticalQuestionRectangleHeight;
 800ce3e:	2356      	movs	r3, #86	; 0x56
 800ce40:	727b      	strb	r3, [r7, #9]
//		DisplayCenterWidth = HorizontalDisplayCenterWidth;
//		PopupRectangleHeight = HorizontalPopupRectangleHeight;
//		QuestionRectangleHeight = HorizontalQuestionRectangleHeight;
	}

	isPopupDisplayed = true;
 800ce42:	4b9b      	ldr	r3, [pc, #620]	; (800d0b0 <drawPopup+0x2b4>)
 800ce44:	2201      	movs	r2, #1
 800ce46:	701a      	strb	r2, [r3, #0]
	isItemDisplayed = false;
 800ce48:	4b9a      	ldr	r3, [pc, #616]	; (800d0b4 <drawPopup+0x2b8>)
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	701a      	strb	r2, [r3, #0]
	isMenuDisplayed = false;
 800ce4e:	4b9a      	ldr	r3, [pc, #616]	; (800d0b8 <drawPopup+0x2bc>)
 800ce50:	2200      	movs	r2, #0
 800ce52:	701a      	strb	r2, [r3, #0]
	if (popupDrawDirection == FULL)
 800ce54:	4b99      	ldr	r3, [pc, #612]	; (800d0bc <drawPopup+0x2c0>)
 800ce56:	781b      	ldrb	r3, [r3, #0]
 800ce58:	2b02      	cmp	r3, #2
 800ce5a:	f040 8097 	bne.w	800cf8c <drawPopup+0x190>
	{
		Paint_Clear(WHITE);
 800ce5e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ce62:	f7fb fde9 	bl	8008a38 <Paint_Clear>
		createEmptyFrame(true);
 800ce66:	2001      	movs	r0, #1
 800ce68:	f000 fbaa 	bl	800d5c0 <createEmptyFrame>
		Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY ,
 800ce6c:	7bfb      	ldrb	r3, [r7, #15]
 800ce6e:	b298      	uxth	r0, r3
 800ce70:	7bbb      	ldrb	r3, [r7, #14]
 800ce72:	b299      	uxth	r1, r3
 800ce74:	7bfb      	ldrb	r3, [r7, #15]
 800ce76:	b29a      	uxth	r2, r3
 800ce78:	7b3b      	ldrb	r3, [r7, #12]
 800ce7a:	b29b      	uxth	r3, r3
 800ce7c:	4413      	add	r3, r2
 800ce7e:	b29c      	uxth	r4, r3
 800ce80:	7bbb      	ldrb	r3, [r7, #14]
 800ce82:	b29a      	uxth	r2, r3
 800ce84:	7abb      	ldrb	r3, [r7, #10]
 800ce86:	b29b      	uxth	r3, r3
 800ce88:	4413      	add	r3, r2
 800ce8a:	b29b      	uxth	r3, r3
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	9202      	str	r2, [sp, #8]
 800ce90:	2201      	movs	r2, #1
 800ce92:	9201      	str	r2, [sp, #4]
 800ce94:	2200      	movs	r2, #0
 800ce96:	9200      	str	r2, [sp, #0]
 800ce98:	4622      	mov	r2, r4
 800ce9a:	f7fb ff57 	bl	8008d4c <Paint_DrawRectangle>
				MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + PopupRectangleHeight,
				BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );

		if (popupToShow.isQuestion)
 800ce9e:	4b88      	ldr	r3, [pc, #544]	; (800d0c0 <drawPopup+0x2c4>)
 800cea0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d020      	beq.n	800ceea <drawPopup+0xee>
		{
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + QuestionRectangleHeight,
 800cea8:	7bfb      	ldrb	r3, [r7, #15]
 800ceaa:	b298      	uxth	r0, r3
 800ceac:	7bbb      	ldrb	r3, [r7, #14]
 800ceae:	b29a      	uxth	r2, r3
 800ceb0:	7a7b      	ldrb	r3, [r7, #9]
 800ceb2:	b29b      	uxth	r3, r3
 800ceb4:	4413      	add	r3, r2
 800ceb6:	b299      	uxth	r1, r3
 800ceb8:	7bfb      	ldrb	r3, [r7, #15]
 800ceba:	b29a      	uxth	r2, r3
 800cebc:	7b3b      	ldrb	r3, [r7, #12]
 800cebe:	b29b      	uxth	r3, r3
 800cec0:	4413      	add	r3, r2
 800cec2:	b29c      	uxth	r4, r3
					MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + QuestionRectangleHeight + MenuRectangleHeight,
 800cec4:	7bbb      	ldrb	r3, [r7, #14]
 800cec6:	b29a      	uxth	r2, r3
 800cec8:	7a7b      	ldrb	r3, [r7, #9]
 800ceca:	b29b      	uxth	r3, r3
 800cecc:	4413      	add	r3, r2
 800cece:	b29a      	uxth	r2, r3
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + QuestionRectangleHeight,
 800ced0:	7b7b      	ldrb	r3, [r7, #13]
 800ced2:	b29b      	uxth	r3, r3
 800ced4:	4413      	add	r3, r2
 800ced6:	b29b      	uxth	r3, r3
 800ced8:	2200      	movs	r2, #0
 800ceda:	9202      	str	r2, [sp, #8]
 800cedc:	2201      	movs	r2, #1
 800cede:	9201      	str	r2, [sp, #4]
 800cee0:	2200      	movs	r2, #0
 800cee2:	9200      	str	r2, [sp, #0]
 800cee4:	4622      	mov	r2, r4
 800cee6:	f7fb ff31 	bl	8008d4c <Paint_DrawRectangle>
					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
		}

		Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + PopupRectangleHeight,
 800ceea:	7bfb      	ldrb	r3, [r7, #15]
 800ceec:	b298      	uxth	r0, r3
 800ceee:	7bbb      	ldrb	r3, [r7, #14]
 800cef0:	b29a      	uxth	r2, r3
 800cef2:	7abb      	ldrb	r3, [r7, #10]
 800cef4:	b29b      	uxth	r3, r3
 800cef6:	4413      	add	r3, r2
 800cef8:	b299      	uxth	r1, r3
 800cefa:	7bfb      	ldrb	r3, [r7, #15]
 800cefc:	b29a      	uxth	r2, r3
 800cefe:	7b3b      	ldrb	r3, [r7, #12]
 800cf00:	b29b      	uxth	r3, r3
 800cf02:	4413      	add	r3, r2
 800cf04:	b29c      	uxth	r4, r3
				MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + PopupRectangleHeight + MenuRectangleHeight,
 800cf06:	7bbb      	ldrb	r3, [r7, #14]
 800cf08:	b29a      	uxth	r2, r3
 800cf0a:	7abb      	ldrb	r3, [r7, #10]
 800cf0c:	b29b      	uxth	r3, r3
 800cf0e:	4413      	add	r3, r2
 800cf10:	b29a      	uxth	r2, r3
		Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + PopupRectangleHeight,
 800cf12:	7b7b      	ldrb	r3, [r7, #13]
 800cf14:	b29b      	uxth	r3, r3
 800cf16:	4413      	add	r3, r2
 800cf18:	b29b      	uxth	r3, r3
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	9202      	str	r2, [sp, #8]
 800cf1e:	2201      	movs	r2, #1
 800cf20:	9201      	str	r2, [sp, #4]
 800cf22:	2200      	movs	r2, #0
 800cf24:	9200      	str	r2, [sp, #0]
 800cf26:	4622      	mov	r2, r4
 800cf28:	f7fb ff10 	bl	8008d4c <Paint_DrawRectangle>
				BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );

		for (int i = 0 ; i < popupToShow.numberOfItemsInPopup - 2; i++)
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	607b      	str	r3, [r7, #4]
 800cf30:	e026      	b.n	800cf80 <drawPopup+0x184>
		{
			centeredString( DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1) + 1,
 800cf32:	7afb      	ldrb	r3, [r7, #11]
 800cf34:	b29c      	uxth	r4, r3
 800cf36:	7bbb      	ldrb	r3, [r7, #14]
 800cf38:	b29a      	uxth	r2, r3
 800cf3a:	7b7b      	ldrb	r3, [r7, #13]
 800cf3c:	b299      	uxth	r1, r3
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	3301      	adds	r3, #1
 800cf42:	b29b      	uxth	r3, r3
 800cf44:	fb11 f303 	smulbb	r3, r1, r3
 800cf48:	b29b      	uxth	r3, r3
 800cf4a:	4413      	add	r3, r2
 800cf4c:	b29b      	uxth	r3, r3
 800cf4e:	3301      	adds	r3, #1
 800cf50:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[i], BLACK, WHITE, 16, Font12);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	011b      	lsls	r3, r3, #4
 800cf56:	4a5a      	ldr	r2, [pc, #360]	; (800d0c0 <drawPopup+0x2c4>)
 800cf58:	4413      	add	r3, r2
 800cf5a:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1) + 1,
 800cf5c:	4959      	ldr	r1, [pc, #356]	; (800d0c4 <drawPopup+0x2c8>)
 800cf5e:	ab02      	add	r3, sp, #8
 800cf60:	c903      	ldmia	r1, {r0, r1}
 800cf62:	e883 0003 	stmia.w	r3, {r0, r1}
 800cf66:	2310      	movs	r3, #16
 800cf68:	9301      	str	r3, [sp, #4]
 800cf6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cf6e:	9300      	str	r3, [sp, #0]
 800cf70:	2300      	movs	r3, #0
 800cf72:	4629      	mov	r1, r5
 800cf74:	4620      	mov	r0, r4
 800cf76:	f7ff fa87 	bl	800c488 <centeredString>
		for (int i = 0 ; i < popupToShow.numberOfItemsInPopup - 2; i++)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	3301      	adds	r3, #1
 800cf7e:	607b      	str	r3, [r7, #4]
 800cf80:	4b4f      	ldr	r3, [pc, #316]	; (800d0c0 <drawPopup+0x2c4>)
 800cf82:	785b      	ldrb	r3, [r3, #1]
 800cf84:	3b02      	subs	r3, #2
 800cf86:	687a      	ldr	r2, [r7, #4]
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	dbd2      	blt.n	800cf32 <drawPopup+0x136>
		}
	}

	if (popupToShow.isQuestion)
 800cf8c:	4b4c      	ldr	r3, [pc, #304]	; (800d0c0 <drawPopup+0x2c4>)
 800cf8e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	f000 8098 	beq.w	800d0c8 <drawPopup+0x2cc>
	{
		if ( (popupDrawDirection == FULL) || (popupDrawDirection == UP))
 800cf98:	4b48      	ldr	r3, [pc, #288]	; (800d0bc <drawPopup+0x2c0>)
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	2b02      	cmp	r3, #2
 800cf9e:	d003      	beq.n	800cfa8 <drawPopup+0x1ac>
 800cfa0:	4b46      	ldr	r3, [pc, #280]	; (800d0bc <drawPopup+0x2c0>)
 800cfa2:	781b      	ldrb	r3, [r3, #0]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d140      	bne.n	800d02a <drawPopup+0x22e>
		{
			centeredString( DisplayCenterWidth, MenuRectangleStartY + QuestionRectangleHeight + 1,
 800cfa8:	7afb      	ldrb	r3, [r7, #11]
 800cfaa:	b29c      	uxth	r4, r3
 800cfac:	7bbb      	ldrb	r3, [r7, #14]
 800cfae:	b29a      	uxth	r2, r3
 800cfb0:	7a7b      	ldrb	r3, [r7, #9]
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	4413      	add	r3, r2
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	3301      	adds	r3, #1
 800cfba:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 2], BLACK, LGRAY, 16, Font12);
 800cfbc:	4b40      	ldr	r3, [pc, #256]	; (800d0c0 <drawPopup+0x2c4>)
 800cfbe:	785b      	ldrb	r3, [r3, #1]
 800cfc0:	3b02      	subs	r3, #2
 800cfc2:	011b      	lsls	r3, r3, #4
 800cfc4:	4a3e      	ldr	r2, [pc, #248]	; (800d0c0 <drawPopup+0x2c4>)
 800cfc6:	4413      	add	r3, r2
 800cfc8:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + QuestionRectangleHeight + 1,
 800cfca:	493e      	ldr	r1, [pc, #248]	; (800d0c4 <drawPopup+0x2c8>)
 800cfcc:	ab02      	add	r3, sp, #8
 800cfce:	c903      	ldmia	r1, {r0, r1}
 800cfd0:	e883 0003 	stmia.w	r3, {r0, r1}
 800cfd4:	2310      	movs	r3, #16
 800cfd6:	9301      	str	r3, [sp, #4]
 800cfd8:	f24c 6318 	movw	r3, #50712	; 0xc618
 800cfdc:	9300      	str	r3, [sp, #0]
 800cfde:	2300      	movs	r3, #0
 800cfe0:	4629      	mov	r1, r5
 800cfe2:	4620      	mov	r0, r4
 800cfe4:	f7ff fa50 	bl	800c488 <centeredString>

			centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 800cfe8:	7afb      	ldrb	r3, [r7, #11]
 800cfea:	b29c      	uxth	r4, r3
 800cfec:	7bbb      	ldrb	r3, [r7, #14]
 800cfee:	b29a      	uxth	r2, r3
 800cff0:	7abb      	ldrb	r3, [r7, #10]
 800cff2:	b29b      	uxth	r3, r3
 800cff4:	4413      	add	r3, r2
 800cff6:	b29b      	uxth	r3, r3
 800cff8:	3301      	adds	r3, #1
 800cffa:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 1], BLACK, WHITE, 16, Font12);
 800cffc:	4b30      	ldr	r3, [pc, #192]	; (800d0c0 <drawPopup+0x2c4>)
 800cffe:	785b      	ldrb	r3, [r3, #1]
 800d000:	3b01      	subs	r3, #1
 800d002:	011b      	lsls	r3, r3, #4
 800d004:	4a2e      	ldr	r2, [pc, #184]	; (800d0c0 <drawPopup+0x2c4>)
 800d006:	4413      	add	r3, r2
 800d008:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 800d00a:	492e      	ldr	r1, [pc, #184]	; (800d0c4 <drawPopup+0x2c8>)
 800d00c:	ab02      	add	r3, sp, #8
 800d00e:	c903      	ldmia	r1, {r0, r1}
 800d010:	e883 0003 	stmia.w	r3, {r0, r1}
 800d014:	2310      	movs	r3, #16
 800d016:	9301      	str	r3, [sp, #4]
 800d018:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d01c:	9300      	str	r3, [sp, #0]
 800d01e:	2300      	movs	r3, #0
 800d020:	4629      	mov	r1, r5
 800d022:	4620      	mov	r0, r4
 800d024:	f7ff fa30 	bl	800c488 <centeredString>
	else
	{
		centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
				popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 1], BLACK, LGRAY, 16, Font12);
	}
}
 800d028:	e06e      	b.n	800d108 <drawPopup+0x30c>
			centeredString( DisplayCenterWidth, MenuRectangleStartY + QuestionRectangleHeight + 1,
 800d02a:	7afb      	ldrb	r3, [r7, #11]
 800d02c:	b29c      	uxth	r4, r3
 800d02e:	7bbb      	ldrb	r3, [r7, #14]
 800d030:	b29a      	uxth	r2, r3
 800d032:	7a7b      	ldrb	r3, [r7, #9]
 800d034:	b29b      	uxth	r3, r3
 800d036:	4413      	add	r3, r2
 800d038:	b29b      	uxth	r3, r3
 800d03a:	3301      	adds	r3, #1
 800d03c:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 2], BLACK, WHITE, 16, Font12);
 800d03e:	4b20      	ldr	r3, [pc, #128]	; (800d0c0 <drawPopup+0x2c4>)
 800d040:	785b      	ldrb	r3, [r3, #1]
 800d042:	3b02      	subs	r3, #2
 800d044:	011b      	lsls	r3, r3, #4
 800d046:	4a1e      	ldr	r2, [pc, #120]	; (800d0c0 <drawPopup+0x2c4>)
 800d048:	4413      	add	r3, r2
 800d04a:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + QuestionRectangleHeight + 1,
 800d04c:	491d      	ldr	r1, [pc, #116]	; (800d0c4 <drawPopup+0x2c8>)
 800d04e:	ab02      	add	r3, sp, #8
 800d050:	c903      	ldmia	r1, {r0, r1}
 800d052:	e883 0003 	stmia.w	r3, {r0, r1}
 800d056:	2310      	movs	r3, #16
 800d058:	9301      	str	r3, [sp, #4]
 800d05a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d05e:	9300      	str	r3, [sp, #0]
 800d060:	2300      	movs	r3, #0
 800d062:	4629      	mov	r1, r5
 800d064:	4620      	mov	r0, r4
 800d066:	f7ff fa0f 	bl	800c488 <centeredString>
			centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 800d06a:	7afb      	ldrb	r3, [r7, #11]
 800d06c:	b29c      	uxth	r4, r3
 800d06e:	7bbb      	ldrb	r3, [r7, #14]
 800d070:	b29a      	uxth	r2, r3
 800d072:	7abb      	ldrb	r3, [r7, #10]
 800d074:	b29b      	uxth	r3, r3
 800d076:	4413      	add	r3, r2
 800d078:	b29b      	uxth	r3, r3
 800d07a:	3301      	adds	r3, #1
 800d07c:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 1], BLACK, LGRAY, 16, Font12);
 800d07e:	4b10      	ldr	r3, [pc, #64]	; (800d0c0 <drawPopup+0x2c4>)
 800d080:	785b      	ldrb	r3, [r3, #1]
 800d082:	3b01      	subs	r3, #1
 800d084:	011b      	lsls	r3, r3, #4
 800d086:	4a0e      	ldr	r2, [pc, #56]	; (800d0c0 <drawPopup+0x2c4>)
 800d088:	4413      	add	r3, r2
 800d08a:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 800d08c:	490d      	ldr	r1, [pc, #52]	; (800d0c4 <drawPopup+0x2c8>)
 800d08e:	ab02      	add	r3, sp, #8
 800d090:	c903      	ldmia	r1, {r0, r1}
 800d092:	e883 0003 	stmia.w	r3, {r0, r1}
 800d096:	2310      	movs	r3, #16
 800d098:	9301      	str	r3, [sp, #4]
 800d09a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800d09e:	9300      	str	r3, [sp, #0]
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	4629      	mov	r1, r5
 800d0a4:	4620      	mov	r0, r4
 800d0a6:	f7ff f9ef 	bl	800c488 <centeredString>
}
 800d0aa:	e02d      	b.n	800d108 <drawPopup+0x30c>
 800d0ac:	24000054 	.word	0x24000054
 800d0b0:	2400a3b2 	.word	0x2400a3b2
 800d0b4:	2400a3b0 	.word	0x2400a3b0
 800d0b8:	2400a3ad 	.word	0x2400a3ad
 800d0bc:	24000057 	.word	0x24000057
 800d0c0:	2400b660 	.word	0x2400b660
 800d0c4:	24000018 	.word	0x24000018
		centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 800d0c8:	7afb      	ldrb	r3, [r7, #11]
 800d0ca:	b29c      	uxth	r4, r3
 800d0cc:	7bbb      	ldrb	r3, [r7, #14]
 800d0ce:	b29a      	uxth	r2, r3
 800d0d0:	7abb      	ldrb	r3, [r7, #10]
 800d0d2:	b29b      	uxth	r3, r3
 800d0d4:	4413      	add	r3, r2
 800d0d6:	b29b      	uxth	r3, r3
 800d0d8:	3301      	adds	r3, #1
 800d0da:	b29d      	uxth	r5, r3
				popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 1], BLACK, LGRAY, 16, Font12);
 800d0dc:	4b0c      	ldr	r3, [pc, #48]	; (800d110 <drawPopup+0x314>)
 800d0de:	785b      	ldrb	r3, [r3, #1]
 800d0e0:	3b01      	subs	r3, #1
 800d0e2:	011b      	lsls	r3, r3, #4
 800d0e4:	4a0a      	ldr	r2, [pc, #40]	; (800d110 <drawPopup+0x314>)
 800d0e6:	4413      	add	r3, r2
 800d0e8:	1c9a      	adds	r2, r3, #2
		centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 800d0ea:	490a      	ldr	r1, [pc, #40]	; (800d114 <drawPopup+0x318>)
 800d0ec:	ab02      	add	r3, sp, #8
 800d0ee:	c903      	ldmia	r1, {r0, r1}
 800d0f0:	e883 0003 	stmia.w	r3, {r0, r1}
 800d0f4:	2310      	movs	r3, #16
 800d0f6:	9301      	str	r3, [sp, #4]
 800d0f8:	f24c 6318 	movw	r3, #50712	; 0xc618
 800d0fc:	9300      	str	r3, [sp, #0]
 800d0fe:	2300      	movs	r3, #0
 800d100:	4629      	mov	r1, r5
 800d102:	4620      	mov	r0, r4
 800d104:	f7ff f9c0 	bl	800c488 <centeredString>
}
 800d108:	bf00      	nop
 800d10a:	3710      	adds	r7, #16
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bdb0      	pop	{r4, r5, r7, pc}
 800d110:	2400b660 	.word	0x2400b660
 800d114:	24000018 	.word	0x24000018

0800d118 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b082      	sub	sp, #8
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 800d120:	4b04      	ldr	r3, [pc, #16]	; (800d134 <HAL_HSEM_FreeCallback+0x1c>)
 800d122:	2201      	movs	r2, #1
 800d124:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM7 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 800d126:	2002      	movs	r0, #2
 800d128:	f7f5 ff5c 	bl	8002fe4 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 800d12c:	bf00      	nop
 800d12e:	3708      	adds	r7, #8
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}
 800d134:	2400a3c0 	.word	0x2400a3c0

0800d138 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 800d13e:	4b0f      	ldr	r3, [pc, #60]	; (800d17c <MAILBOX_Init+0x44>)
 800d140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d144:	4a0d      	ldr	r2, [pc, #52]	; (800d17c <MAILBOX_Init+0x44>)
 800d146:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d14a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d14e:	4b0b      	ldr	r3, [pc, #44]	; (800d17c <MAILBOX_Init+0x44>)
 800d150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d158:	607b      	str	r3, [r7, #4]
 800d15a:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN PRE_MAILBOX_INIT_CM7 */

  /* USER CODE END PRE_MAILBOX_INIT_CM7 */

  /* Enable CM7 receive irq */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 0, 1);
 800d15c:	2201      	movs	r2, #1
 800d15e:	2100      	movs	r1, #0
 800d160:	207d      	movs	r0, #125	; 0x7d
 800d162:	f7f5 f880 	bl	8002266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 800d166:	207d      	movs	r0, #125	; 0x7d
 800d168:	f7f5 f897 	bl	800229a <HAL_NVIC_EnableIRQ>
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 800d16c:	2002      	movs	r0, #2
 800d16e:	f7f5 ff39 	bl	8002fe4 <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 800d172:	2300      	movs	r3, #0
}
 800d174:	4618      	mov	r0, r3
 800d176:	3708      	adds	r7, #8
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}
 800d17c:	58024400 	.word	0x58024400

0800d180 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b082      	sub	sp, #8
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 800d188:	4b09      	ldr	r3, [pc, #36]	; (800d1b0 <MAILBOX_Poll+0x30>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	2b01      	cmp	r3, #1
 800d18e:	d108      	bne.n	800d1a2 <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM7 */

    /* USER CODE END PRE_NEW_MSG_CM7 */

    rproc_virtio_notified(vdev, VRING0_ID);
 800d190:	2100      	movs	r1, #0
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f7fd fc99 	bl	800aaca <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 800d198:	4b05      	ldr	r3, [pc, #20]	; (800d1b0 <MAILBOX_Poll+0x30>)
 800d19a:	2200      	movs	r2, #0
 800d19c:	601a      	str	r2, [r3, #0]
    return 0;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	e001      	b.n	800d1a6 <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 800d1a2:	f06f 030a 	mvn.w	r3, #10
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3708      	adds	r7, #8
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	2400a3c0 	.word	0x2400a3c0

0800d1b4 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b082      	sub	sp, #8
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	6039      	str	r1, [r7, #0]
#ifdef CORE_CM7

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM7 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM7 */
  HAL_HSEM_FastTake(HSEM_ID_0);
 800d1be:	2000      	movs	r0, #0
 800d1c0:	f7f5 fee2 	bl	8002f88 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_0,0);
 800d1c4:	2100      	movs	r1, #0
 800d1c6:	2000      	movs	r0, #0
 800d1c8:	f7f5 fef8 	bl	8002fbc <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 800d1cc:	2300      	movs	r3, #0
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3708      	adds	r7, #8
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}

0800d1d6 <is_rpmsg_ept_ready>:
 *
 * Returns 1 if the rpmsg endpoint has both local addr and destination
 * addr set, 0 otherwise
 */
static inline unsigned int is_rpmsg_ept_ready(struct rpmsg_endpoint *ept)
{
 800d1d6:	b480      	push	{r7}
 800d1d8:	b083      	sub	sp, #12
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	6078      	str	r0, [r7, #4]
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1e6:	d006      	beq.n	800d1f6 <is_rpmsg_ept_ready+0x20>
		ept->addr != RPMSG_ADDR_ANY);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 800d1ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1f0:	d001      	beq.n	800d1f6 <is_rpmsg_ept_ready+0x20>
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	e000      	b.n	800d1f8 <is_rpmsg_ept_ready+0x22>
 800d1f6:	2300      	movs	r3, #0
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	370c      	adds	r7, #12
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr

0800d204 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 800d204:	b480      	push	{r7}
 800d206:	b083      	sub	sp, #12
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 800d212:	683a      	ldr	r2, [r7, #0]
 800d214:	429a      	cmp	r2, r3
 800d216:	d209      	bcs.n	800d22c <metal_device_io_region+0x28>
 800d218:	683a      	ldr	r2, [r7, #0]
 800d21a:	4613      	mov	r3, r2
 800d21c:	005b      	lsls	r3, r3, #1
 800d21e:	4413      	add	r3, r2
 800d220:	011b      	lsls	r3, r3, #4
 800d222:	3308      	adds	r3, #8
 800d224:	687a      	ldr	r2, [r7, #4]
 800d226:	4413      	add	r3, r2
 800d228:	3304      	adds	r3, #4
 800d22a:	e000      	b.n	800d22e <metal_device_io_region+0x2a>
 800d22c:	2300      	movs	r3, #0
}
 800d22e:	4618      	mov	r0, r3
 800d230:	370c      	adds	r7, #12
 800d232:	46bd      	mov	sp, r7
 800d234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d238:	4770      	bx	lr
	...

0800d23c <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 800d23c:	b590      	push	{r4, r7, lr}
 800d23e:	b08d      	sub	sp, #52	; 0x34
 800d240:	af04      	add	r7, sp, #16
 800d242:	6078      	str	r0, [r7, #4]
  int status = 0;
 800d244:	2300      	movs	r3, #0
 800d246:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 800d248:	2300      	movs	r3, #0
 800d24a:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 800d24c:	4a41      	ldr	r2, [pc, #260]	; (800d354 <OPENAMP_shmem_init+0x118>)
 800d24e:	f107 0310 	add.w	r3, r7, #16
 800d252:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d256:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 800d25a:	2300      	movs	r3, #0
 800d25c:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 800d25e:	2300      	movs	r3, #0
 800d260:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 800d262:	f107 0310 	add.w	r3, r7, #16
 800d266:	4618      	mov	r0, r3
 800d268:	f7fc fee2 	bl	800a030 <metal_init>

  status = metal_register_generic_device(&shm_device);
 800d26c:	483a      	ldr	r0, [pc, #232]	; (800d358 <OPENAMP_shmem_init+0x11c>)
 800d26e:	f7fc fd87 	bl	8009d80 <metal_register_generic_device>
 800d272:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 800d274:	69fb      	ldr	r3, [r7, #28]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d001      	beq.n	800d27e <OPENAMP_shmem_init+0x42>
    return status;
 800d27a:	69fb      	ldr	r3, [r7, #28]
 800d27c:	e066      	b.n	800d34c <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 800d27e:	f107 0318 	add.w	r3, r7, #24
 800d282:	461a      	mov	r2, r3
 800d284:	4935      	ldr	r1, [pc, #212]	; (800d35c <OPENAMP_shmem_init+0x120>)
 800d286:	4836      	ldr	r0, [pc, #216]	; (800d360 <OPENAMP_shmem_init+0x124>)
 800d288:	f7fc fd3c 	bl	8009d04 <metal_device_open>
 800d28c:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 800d28e:	69fb      	ldr	r3, [r7, #28]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d001      	beq.n	800d298 <OPENAMP_shmem_init+0x5c>
    return status;
 800d294:	69fb      	ldr	r3, [r7, #28]
 800d296:	e059      	b.n	800d34c <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 800d298:	4a32      	ldr	r2, [pc, #200]	; (800d364 <OPENAMP_shmem_init+0x128>)
 800d29a:	4b33      	ldr	r3, [pc, #204]	; (800d368 <OPENAMP_shmem_init+0x12c>)
 800d29c:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 800d29e:	69bb      	ldr	r3, [r7, #24]
 800d2a0:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 800d2a4:	4a31      	ldr	r2, [pc, #196]	; (800d36c <OPENAMP_shmem_init+0x130>)
 800d2a6:	4b2f      	ldr	r3, [pc, #188]	; (800d364 <OPENAMP_shmem_init+0x128>)
 800d2a8:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	9302      	str	r3, [sp, #8]
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	9301      	str	r3, [sp, #4]
 800d2b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d2b8:	9300      	str	r3, [sp, #0]
 800d2ba:	4613      	mov	r3, r2
 800d2bc:	4a2a      	ldr	r2, [pc, #168]	; (800d368 <OPENAMP_shmem_init+0x12c>)
 800d2be:	4929      	ldr	r1, [pc, #164]	; (800d364 <OPENAMP_shmem_init+0x128>)
 800d2c0:	f7fc ff03 	bl	800a0ca <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 800d2c4:	69bb      	ldr	r3, [r7, #24]
 800d2c6:	2100      	movs	r1, #0
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f7ff ff9b 	bl	800d204 <metal_device_io_region>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	4a27      	ldr	r2, [pc, #156]	; (800d370 <OPENAMP_shmem_init+0x134>)
 800d2d2:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 800d2d4:	4b26      	ldr	r3, [pc, #152]	; (800d370 <OPENAMP_shmem_init+0x134>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d102      	bne.n	800d2e2 <OPENAMP_shmem_init+0xa6>
    return -1;
 800d2dc:	f04f 33ff 	mov.w	r3, #4294967295
 800d2e0:	e034      	b.n	800d34c <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 800d2e2:	f107 0208 	add.w	r2, r7, #8
 800d2e6:	f107 030c 	add.w	r3, r7, #12
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f000 f91d 	bl	800d52c <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	4a1f      	ldr	r2, [pc, #124]	; (800d374 <OPENAMP_shmem_init+0x138>)
 800d2f6:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 800d2f8:	4b1e      	ldr	r3, [pc, #120]	; (800d374 <OPENAMP_shmem_init+0x138>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d102      	bne.n	800d306 <OPENAMP_shmem_init+0xca>
  {
    return -1;
 800d300:	f04f 33ff 	mov.w	r3, #4294967295
 800d304:	e022      	b.n	800d34c <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 800d306:	69bb      	ldr	r3, [r7, #24]
 800d308:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800d30c:	4b19      	ldr	r3, [pc, #100]	; (800d374 <OPENAMP_shmem_init+0x138>)
 800d30e:	6819      	ldr	r1, [r3, #0]
 800d310:	4b18      	ldr	r3, [pc, #96]	; (800d374 <OPENAMP_shmem_init+0x138>)
 800d312:	681a      	ldr	r2, [r3, #0]
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	461c      	mov	r4, r3
 800d318:	2300      	movs	r3, #0
 800d31a:	9302      	str	r3, [sp, #8]
 800d31c:	2300      	movs	r3, #0
 800d31e:	9301      	str	r3, [sp, #4]
 800d320:	f04f 33ff 	mov.w	r3, #4294967295
 800d324:	9300      	str	r3, [sp, #0]
 800d326:	4623      	mov	r3, r4
 800d328:	f7fc fecf 	bl	800a0ca <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 800d32c:	69bb      	ldr	r3, [r7, #24]
 800d32e:	2101      	movs	r1, #1
 800d330:	4618      	mov	r0, r3
 800d332:	f7ff ff67 	bl	800d204 <metal_device_io_region>
 800d336:	4603      	mov	r3, r0
 800d338:	4a0f      	ldr	r2, [pc, #60]	; (800d378 <OPENAMP_shmem_init+0x13c>)
 800d33a:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 800d33c:	4b0e      	ldr	r3, [pc, #56]	; (800d378 <OPENAMP_shmem_init+0x13c>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d102      	bne.n	800d34a <OPENAMP_shmem_init+0x10e>
    return -1;
 800d344:	f04f 33ff 	mov.w	r3, #4294967295
 800d348:	e000      	b.n	800d34c <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 800d34a:	2300      	movs	r3, #0
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3724      	adds	r7, #36	; 0x24
 800d350:	46bd      	mov	sp, r7
 800d352:	bd90      	pop	{r4, r7, pc}
 800d354:	08015388 	.word	0x08015388
 800d358:	2400a058 	.word	0x2400a058
 800d35c:	08015374 	.word	0x08015374
 800d360:	08015380 	.word	0x08015380
 800d364:	38000400 	.word	0x38000400
 800d368:	2400a454 	.word	0x2400a454
 800d36c:	38010000 	.word	0x38010000
 800d370:	2400a3c4 	.word	0x2400a3c4
 800d374:	2400a3cc 	.word	0x2400a3cc
 800d378:	2400a3c8 	.word	0x2400a3c8

0800d37c <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 800d37c:	b590      	push	{r4, r7, lr}
 800d37e:	b08b      	sub	sp, #44	; 0x2c
 800d380:	af04      	add	r7, sp, #16
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 800d386:	2300      	movs	r3, #0
 800d388:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 800d38a:	2300      	movs	r3, #0
 800d38c:	613b      	str	r3, [r7, #16]
  int status = 0;
 800d38e:	2300      	movs	r3, #0
 800d390:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 800d392:	f7ff fed1 	bl	800d138 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f7ff ff50 	bl	800d23c <OPENAMP_shmem_init>
 800d39c:	60f8      	str	r0, [r7, #12]
  if(status)
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d001      	beq.n	800d3a8 <MX_OPENAMP_Init+0x2c>
  {
    return status;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	e06a      	b.n	800d47e <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	4b37      	ldr	r3, [pc, #220]	; (800d488 <MX_OPENAMP_Init+0x10c>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f103 0218 	add.w	r2, r3, #24
 800d3b2:	4b36      	ldr	r3, [pc, #216]	; (800d48c <MX_OPENAMP_Init+0x110>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	2100      	movs	r1, #0
 800d3b8:	9102      	str	r1, [sp, #8]
 800d3ba:	4935      	ldr	r1, [pc, #212]	; (800d490 <MX_OPENAMP_Init+0x114>)
 800d3bc:	9101      	str	r1, [sp, #4]
 800d3be:	2100      	movs	r1, #0
 800d3c0:	9100      	str	r1, [sp, #0]
 800d3c2:	21ff      	movs	r1, #255	; 0xff
 800d3c4:	f7fd faa2 	bl	800a90c <rproc_virtio_create_vdev>
 800d3c8:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d102      	bne.n	800d3d6 <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 800d3d0:	f04f 33ff 	mov.w	r3, #4294967295
 800d3d4:	e053      	b.n	800d47e <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 800d3d6:	6938      	ldr	r0, [r7, #16]
 800d3d8:	f7fd fbb3 	bl	800ab42 <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 800d3dc:	4b2a      	ldr	r3, [pc, #168]	; (800d488 <MX_OPENAMP_Init+0x10c>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	3334      	adds	r3, #52	; 0x34
 800d3e2:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800d3ec:	461c      	mov	r4, r3
 800d3ee:	4b29      	ldr	r3, [pc, #164]	; (800d494 <MX_OPENAMP_Init+0x118>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 800d3f2:	697a      	ldr	r2, [r7, #20]
 800d3f4:	6892      	ldr	r2, [r2, #8]
 800d3f6:	6979      	ldr	r1, [r7, #20]
 800d3f8:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800d3fa:	9102      	str	r1, [sp, #8]
 800d3fc:	9201      	str	r2, [sp, #4]
 800d3fe:	9300      	str	r3, [sp, #0]
 800d400:	4623      	mov	r3, r4
 800d402:	4602      	mov	r2, r0
 800d404:	2100      	movs	r1, #0
 800d406:	6938      	ldr	r0, [r7, #16]
 800d408:	f7fd fb2e 	bl	800aa68 <rproc_virtio_init_vring>
 800d40c:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d001      	beq.n	800d418 <MX_OPENAMP_Init+0x9c>
  {
    return status;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	e032      	b.n	800d47e <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 800d418:	4b1b      	ldr	r3, [pc, #108]	; (800d488 <MX_OPENAMP_Init+0x10c>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	3348      	adds	r3, #72	; 0x48
 800d41e:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800d428:	461c      	mov	r4, r3
 800d42a:	4b1a      	ldr	r3, [pc, #104]	; (800d494 <MX_OPENAMP_Init+0x118>)
 800d42c:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 800d42e:	697a      	ldr	r2, [r7, #20]
 800d430:	6892      	ldr	r2, [r2, #8]
 800d432:	6979      	ldr	r1, [r7, #20]
 800d434:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800d436:	9102      	str	r1, [sp, #8]
 800d438:	9201      	str	r2, [sp, #4]
 800d43a:	9300      	str	r3, [sp, #0]
 800d43c:	4623      	mov	r3, r4
 800d43e:	4602      	mov	r2, r0
 800d440:	2101      	movs	r1, #1
 800d442:	6938      	ldr	r0, [r7, #16]
 800d444:	f7fd fb10 	bl	800aa68 <rproc_virtio_init_vring>
 800d448:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d001      	beq.n	800d454 <MX_OPENAMP_Init+0xd8>
  {
    return status;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	e014      	b.n	800d47e <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 800d454:	4b10      	ldr	r3, [pc, #64]	; (800d498 <MX_OPENAMP_Init+0x11c>)
 800d456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d45a:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 800d45c:	4a0f      	ldr	r2, [pc, #60]	; (800d49c <MX_OPENAMP_Init+0x120>)
 800d45e:	4b0e      	ldr	r3, [pc, #56]	; (800d498 <MX_OPENAMP_Init+0x11c>)
 800d460:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 800d462:	461a      	mov	r2, r3
 800d464:	480e      	ldr	r0, [pc, #56]	; (800d4a0 <MX_OPENAMP_Init+0x124>)
 800d466:	f7fd ffdd 	bl	800b424 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 800d46a:	4b0a      	ldr	r3, [pc, #40]	; (800d494 <MX_OPENAMP_Init+0x118>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	4a0c      	ldr	r2, [pc, #48]	; (800d4a0 <MX_OPENAMP_Init+0x124>)
 800d470:	9200      	str	r2, [sp, #0]
 800d472:	683a      	ldr	r2, [r7, #0]
 800d474:	6939      	ldr	r1, [r7, #16]
 800d476:	480b      	ldr	r0, [pc, #44]	; (800d4a4 <MX_OPENAMP_Init+0x128>)
 800d478:	f7fe fa44 	bl	800b904 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 800d47c:	2300      	movs	r3, #0
}
 800d47e:	4618      	mov	r0, r3
 800d480:	371c      	adds	r7, #28
 800d482:	46bd      	mov	sp, r7
 800d484:	bd90      	pop	{r4, r7, pc}
 800d486:	bf00      	nop
 800d488:	2400a3cc 	.word	0x2400a3cc
 800d48c:	2400a3c8 	.word	0x2400a3c8
 800d490:	0800d1b5 	.word	0x0800d1b5
 800d494:	2400a3c4 	.word	0x2400a3c4
 800d498:	38000400 	.word	0x38000400
 800d49c:	38010000 	.word	0x38010000
 800d4a0:	2400a3d0 	.word	0x2400a3d0
 800d4a4:	2400a3dc 	.word	0x2400a3dc

0800d4a8 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b08a      	sub	sp, #40	; 0x28
 800d4ac:	af04      	add	r7, sp, #16
 800d4ae:	60f8      	str	r0, [r7, #12]
 800d4b0:	60b9      	str	r1, [r7, #8]
 800d4b2:	607a      	str	r2, [r7, #4]
 800d4b4:	603b      	str	r3, [r7, #0]
  int ret = 0;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 800d4ba:	6a3b      	ldr	r3, [r7, #32]
 800d4bc:	9302      	str	r3, [sp, #8]
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	9301      	str	r3, [sp, #4]
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	9300      	str	r3, [sp, #0]
 800d4c6:	f04f 33ff 	mov.w	r3, #4294967295
 800d4ca:	68ba      	ldr	r2, [r7, #8]
 800d4cc:	4904      	ldr	r1, [pc, #16]	; (800d4e0 <OPENAMP_create_endpoint+0x38>)
 800d4ce:	68f8      	ldr	r0, [r7, #12]
 800d4d0:	f7fd fdc4 	bl	800b05c <rpmsg_create_ept>
 800d4d4:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 800d4d6:	697b      	ldr	r3, [r7, #20]
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3718      	adds	r7, #24
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}
 800d4e0:	2400a3dc 	.word	0x2400a3dc

0800d4e4 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 800d4e8:	4b03      	ldr	r3, [pc, #12]	; (800d4f8 <OPENAMP_check_for_message+0x14>)
 800d4ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f7ff fe47 	bl	800d180 <MAILBOX_Poll>
}
 800d4f2:	bf00      	nop
 800d4f4:	bd80      	pop	{r7, pc}
 800d4f6:	bf00      	nop
 800d4f8:	2400a3dc 	.word	0x2400a3dc

0800d4fc <OPENAMP_Wait_EndPointready>:

void OPENAMP_Wait_EndPointready(struct rpmsg_endpoint *rp_ept)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b082      	sub	sp, #8
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EP_READY */

  /* USER CODE END EP_READY */

  while(!is_rpmsg_ept_ready(rp_ept))
 800d504:	e004      	b.n	800d510 <OPENAMP_Wait_EndPointready+0x14>
  {
    /* USER CODE BEGIN 0 */

    /* USER CODE END 0 */
      MAILBOX_Poll(rvdev.vdev);
 800d506:	4b08      	ldr	r3, [pc, #32]	; (800d528 <OPENAMP_Wait_EndPointready+0x2c>)
 800d508:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d50a:	4618      	mov	r0, r3
 800d50c:	f7ff fe38 	bl	800d180 <MAILBOX_Poll>
  while(!is_rpmsg_ept_ready(rp_ept))
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f7ff fe60 	bl	800d1d6 <is_rpmsg_ept_ready>
 800d516:	4603      	mov	r3, r0
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d0f4      	beq.n	800d506 <OPENAMP_Wait_EndPointready+0xa>

    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */
  }
}
 800d51c:	bf00      	nop
 800d51e:	bf00      	nop
 800d520:	3708      	adds	r7, #8
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
 800d526:	bf00      	nop
 800d528:	2400a3dc 	.word	0x2400a3dc

0800d52c <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b084      	sub	sp, #16
 800d530:	af00      	add	r7, sp, #0
 800d532:	60f8      	str	r0, [r7, #12]
 800d534:	60b9      	str	r1, [r7, #8]
 800d536:	607a      	str	r2, [r7, #4]

    /*
     * Currently the GCC linker doesn't initialize the resource_table global variable at startup
     * it is done here by the master application.
     */
	memset(&resource_table, '\0', sizeof(struct shared_resource_table));
 800d538:	228c      	movs	r2, #140	; 0x8c
 800d53a:	2100      	movs	r1, #0
 800d53c:	481e      	ldr	r0, [pc, #120]	; (800d5b8 <resource_table_init+0x8c>)
 800d53e:	f002 febd 	bl	80102bc <memset>
	resource_table.num = 1;
 800d542:	4b1d      	ldr	r3, [pc, #116]	; (800d5b8 <resource_table_init+0x8c>)
 800d544:	2201      	movs	r2, #1
 800d546:	605a      	str	r2, [r3, #4]
	resource_table.version = 1;
 800d548:	4b1b      	ldr	r3, [pc, #108]	; (800d5b8 <resource_table_init+0x8c>)
 800d54a:	2201      	movs	r2, #1
 800d54c:	601a      	str	r2, [r3, #0]
	resource_table.offset[0] = offsetof(struct shared_resource_table, vdev);
 800d54e:	4b1a      	ldr	r3, [pc, #104]	; (800d5b8 <resource_table_init+0x8c>)
 800d550:	2218      	movs	r2, #24
 800d552:	611a      	str	r2, [r3, #16]

	resource_table.vring0.da = VRING_TX_ADDRESS;
 800d554:	4b19      	ldr	r3, [pc, #100]	; (800d5bc <resource_table_init+0x90>)
 800d556:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d55a:	4a17      	ldr	r2, [pc, #92]	; (800d5b8 <resource_table_init+0x8c>)
 800d55c:	6353      	str	r3, [r2, #52]	; 0x34
	resource_table.vring0.align = VRING_ALIGNMENT;
 800d55e:	4b16      	ldr	r3, [pc, #88]	; (800d5b8 <resource_table_init+0x8c>)
 800d560:	2204      	movs	r2, #4
 800d562:	639a      	str	r2, [r3, #56]	; 0x38
	resource_table.vring0.num = VRING_NUM_BUFFS;
 800d564:	4b14      	ldr	r3, [pc, #80]	; (800d5b8 <resource_table_init+0x8c>)
 800d566:	2204      	movs	r2, #4
 800d568:	63da      	str	r2, [r3, #60]	; 0x3c
	resource_table.vring0.notifyid = VRING0_ID;
 800d56a:	4b13      	ldr	r3, [pc, #76]	; (800d5b8 <resource_table_init+0x8c>)
 800d56c:	2200      	movs	r2, #0
 800d56e:	641a      	str	r2, [r3, #64]	; 0x40

	resource_table.vring1.da = VRING_RX_ADDRESS;
 800d570:	4a12      	ldr	r2, [pc, #72]	; (800d5bc <resource_table_init+0x90>)
 800d572:	4b11      	ldr	r3, [pc, #68]	; (800d5b8 <resource_table_init+0x8c>)
 800d574:	649a      	str	r2, [r3, #72]	; 0x48
	resource_table.vring1.align = VRING_ALIGNMENT;
 800d576:	4b10      	ldr	r3, [pc, #64]	; (800d5b8 <resource_table_init+0x8c>)
 800d578:	2204      	movs	r2, #4
 800d57a:	64da      	str	r2, [r3, #76]	; 0x4c
	resource_table.vring1.num = VRING_NUM_BUFFS;
 800d57c:	4b0e      	ldr	r3, [pc, #56]	; (800d5b8 <resource_table_init+0x8c>)
 800d57e:	2204      	movs	r2, #4
 800d580:	651a      	str	r2, [r3, #80]	; 0x50
	resource_table.vring1.notifyid = VRING1_ID;
 800d582:	4b0d      	ldr	r3, [pc, #52]	; (800d5b8 <resource_table_init+0x8c>)
 800d584:	2201      	movs	r2, #1
 800d586:	655a      	str	r2, [r3, #84]	; 0x54

	resource_table.vdev.type = RSC_VDEV;
 800d588:	4b0b      	ldr	r3, [pc, #44]	; (800d5b8 <resource_table_init+0x8c>)
 800d58a:	2203      	movs	r2, #3
 800d58c:	619a      	str	r2, [r3, #24]
	resource_table.vdev.id = VIRTIO_ID_RPMSG_;
 800d58e:	4b0a      	ldr	r3, [pc, #40]	; (800d5b8 <resource_table_init+0x8c>)
 800d590:	2207      	movs	r2, #7
 800d592:	61da      	str	r2, [r3, #28]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
 800d594:	4b08      	ldr	r3, [pc, #32]	; (800d5b8 <resource_table_init+0x8c>)
 800d596:	2202      	movs	r2, #2
 800d598:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
 800d59c:	4b06      	ldr	r3, [pc, #24]	; (800d5b8 <resource_table_init+0x8c>)
 800d59e:	2201      	movs	r2, #1
 800d5a0:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	228c      	movs	r2, #140	; 0x8c
 800d5a6:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	4a03      	ldr	r2, [pc, #12]	; (800d5b8 <resource_table_init+0x8c>)
 800d5ac:	601a      	str	r2, [r3, #0]
}
 800d5ae:	bf00      	nop
 800d5b0:	3710      	adds	r7, #16
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}
 800d5b6:	bf00      	nop
 800d5b8:	38000000 	.word	0x38000000
 800d5bc:	38000400 	.word	0x38000400

0800d5c0 <createEmptyFrame>:
uint8_t numberOfDisplayedSafeAirIcons = 0;

uint32_t LCDArraySize = 40960;

void createEmptyFrame(bool isMenuFrame)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b084      	sub	sp, #16
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	71fb      	strb	r3, [r7, #7]
	if (!isMenuFrame)
 800d5ca:	79fb      	ldrb	r3, [r7, #7]
 800d5cc:	f083 0301 	eor.w	r3, r3, #1
 800d5d0:	b2db      	uxtb	r3, r3
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d024      	beq.n	800d620 <createEmptyFrame+0x60>
	{
		memset(nextFrameToDraw,0x00,LCDArraySize);
 800d5d6:	4b19      	ldr	r3, [pc, #100]	; (800d63c <createEmptyFrame+0x7c>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	461a      	mov	r2, r3
 800d5dc:	2100      	movs	r1, #0
 800d5de:	4818      	ldr	r0, [pc, #96]	; (800d640 <createEmptyFrame+0x80>)
 800d5e0:	f002 fe6c 	bl	80102bc <memset>

		for (int i = 0 ; i < (LCDArraySize - SCREEN_WIDTH * STATUSBAR_HEIGHT * 2) /2 ; i++)
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	60fb      	str	r3, [r7, #12]
 800d5e8:	e011      	b.n	800d60e <createEmptyFrame+0x4e>
		{
			nextFrameToDraw[(i + SCREEN_WIDTH * STATUSBAR_HEIGHT) * 2] = BACKGROUND_HIGH_BYTE;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 800d5f0:	005b      	lsls	r3, r3, #1
 800d5f2:	4a13      	ldr	r2, [pc, #76]	; (800d640 <createEmptyFrame+0x80>)
 800d5f4:	21ff      	movs	r1, #255	; 0xff
 800d5f6:	54d1      	strb	r1, [r2, r3]
			nextFrameToDraw[(i + SCREEN_WIDTH * STATUSBAR_HEIGHT) * 2 + 1] = BACKGROUND_LOW_BYTE;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 800d5fe:	005b      	lsls	r3, r3, #1
 800d600:	3301      	adds	r3, #1
 800d602:	4a0f      	ldr	r2, [pc, #60]	; (800d640 <createEmptyFrame+0x80>)
 800d604:	21ff      	movs	r1, #255	; 0xff
 800d606:	54d1      	strb	r1, [r2, r3]
		for (int i = 0 ; i < (LCDArraySize - SCREEN_WIDTH * STATUSBAR_HEIGHT * 2) /2 ; i++)
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	3301      	adds	r3, #1
 800d60c:	60fb      	str	r3, [r7, #12]
 800d60e:	4b0b      	ldr	r3, [pc, #44]	; (800d63c <createEmptyFrame+0x7c>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	f5a3 53c8 	sub.w	r3, r3, #6400	; 0x1900
 800d616:	085a      	lsrs	r2, r3, #1
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	429a      	cmp	r2, r3
 800d61c:	d8e5      	bhi.n	800d5ea <createEmptyFrame+0x2a>
	}
	else if (isMenuFrame)
	{
		memset(nextFrameToDraw,0xFF,LCDArraySize);
	}
}
 800d61e:	e009      	b.n	800d634 <createEmptyFrame+0x74>
	else if (isMenuFrame)
 800d620:	79fb      	ldrb	r3, [r7, #7]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d006      	beq.n	800d634 <createEmptyFrame+0x74>
		memset(nextFrameToDraw,0xFF,LCDArraySize);
 800d626:	4b05      	ldr	r3, [pc, #20]	; (800d63c <createEmptyFrame+0x7c>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	461a      	mov	r2, r3
 800d62c:	21ff      	movs	r1, #255	; 0xff
 800d62e:	4804      	ldr	r0, [pc, #16]	; (800d640 <createEmptyFrame+0x80>)
 800d630:	f002 fe44 	bl	80102bc <memset>
}
 800d634:	bf00      	nop
 800d636:	3710      	adds	r7, #16
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}
 800d63c:	2400a0d4 	.word	0x2400a0d4
 800d640:	24000058 	.word	0x24000058

0800d644 <displayNextFrame>:

void displayNextFrame(void)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	af00      	add	r7, sp, #0
//	LCD_1IN8_SetCursor(0, 0);
	if (HAL_GetTick() - lastFrameDisplayed > 30)
 800d648:	f7f4 fce2 	bl	8002010 <HAL_GetTick>
 800d64c:	4602      	mov	r2, r0
 800d64e:	4b0a      	ldr	r3, [pc, #40]	; (800d678 <displayNextFrame+0x34>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	1ad3      	subs	r3, r2, r3
 800d654:	2b1e      	cmp	r3, #30
 800d656:	d90d      	bls.n	800d674 <displayNextFrame+0x30>
	{
		HAL_SPI_Transmit(&DEV_SPI, (uint8_t *)nextFrameToDraw, LCDArraySize, 1500);
 800d658:	4b08      	ldr	r3, [pc, #32]	; (800d67c <displayNextFrame+0x38>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	b29a      	uxth	r2, r3
 800d65e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800d662:	4907      	ldr	r1, [pc, #28]	; (800d680 <displayNextFrame+0x3c>)
 800d664:	4807      	ldr	r0, [pc, #28]	; (800d684 <displayNextFrame+0x40>)
 800d666:	f7f8 fbdd 	bl	8005e24 <HAL_SPI_Transmit>
//		createEmptyFrame();
		lastFrameDisplayed = HAL_GetTick();
 800d66a:	f7f4 fcd1 	bl	8002010 <HAL_GetTick>
 800d66e:	4603      	mov	r3, r0
 800d670:	4a01      	ldr	r2, [pc, #4]	; (800d678 <displayNextFrame+0x34>)
 800d672:	6013      	str	r3, [r2, #0]
	}
}
 800d674:	bf00      	nop
 800d676:	bd80      	pop	{r7, pc}
 800d678:	2400a3b4 	.word	0x2400a3b4
 800d67c:	2400a0d4 	.word	0x2400a0d4
 800d680:	24000058 	.word	0x24000058
 800d684:	2400a5cc 	.word	0x2400a5cc

0800d688 <updateUint16Item>:
		}
	}
}

void updateUint16Item(MENUDRAWType howToDraw)
{
 800d688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d68a:	b08f      	sub	sp, #60	; 0x3c
 800d68c:	af04      	add	r7, sp, #16
 800d68e:	4603      	mov	r3, r0
 800d690:	71fb      	strb	r3, [r7, #7]

	uint8_t MenuRectangleStartX = 0;
 800d692:	2300      	movs	r3, #0
 800d694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t MenuRectangleStartY = 0;
 800d698:	2300      	movs	r3, #0
 800d69a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MenuRectangleHeight = 0;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MenuRectangleWidth = 0;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t DisplayCenterWidth = 0;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (isPortrait)
 800d6b0:	4b0b      	ldr	r3, [pc, #44]	; (800d6e0 <updateUint16Item+0x58>)
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d00e      	beq.n	800d6d6 <updateUint16Item+0x4e>
	{
		MenuRectangleStartX = VerticalMenuRectangleStartX;
 800d6b8:	2302      	movs	r3, #2
 800d6ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		MenuRectangleStartY = VerticalMenuRectangleStartY;
 800d6be:	230c      	movs	r3, #12
 800d6c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		MenuRectangleHeight = VerticalMenuRectangleHeight;
 800d6c4:	230e      	movs	r3, #14
 800d6c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		MenuRectangleWidth = VerticalMenuRectangleWidth;
 800d6ca:	237c      	movs	r3, #124	; 0x7c
 800d6cc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		DisplayCenterWidth = VerticalDisplayCenterWidth;
 800d6d0:	2340      	movs	r3, #64	; 0x40
 800d6d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
//		MenuRectangleHeight = HorizontalMenuRectangleHeight;
//		MenuRectangleWidth = HorizontalMenuRectangleWidth;
//		DisplayCenterWidth = HorizontalDisplayCenterWidth;
	}

	for (int i = 0; i < uint16Item.numberOfItemsInPage ; i++)
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	61fb      	str	r3, [r7, #28]
 800d6da:	f001 baf3 	b.w	800ecc4 <updateUint16Item+0x163c>
 800d6de:	bf00      	nop
 800d6e0:	24000054 	.word	0x24000054
	{
		if  ( (i < 2) && (howToDraw == FULL) )
 800d6e4:	69fb      	ldr	r3, [r7, #28]
 800d6e6:	2b01      	cmp	r3, #1
 800d6e8:	dc58      	bgt.n	800d79c <updateUint16Item+0x114>
 800d6ea:	79fb      	ldrb	r3, [r7, #7]
 800d6ec:	2b02      	cmp	r3, #2
 800d6ee:	d155      	bne.n	800d79c <updateUint16Item+0x114>
		{
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800d6f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6f4:	b298      	uxth	r0, r3
 800d6f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d6fa:	b29a      	uxth	r2, r3
 800d6fc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d700:	b299      	uxth	r1, r3
 800d702:	69fb      	ldr	r3, [r7, #28]
 800d704:	b29b      	uxth	r3, r3
 800d706:	fb11 f303 	smulbb	r3, r1, r3
 800d70a:	b29b      	uxth	r3, r3
 800d70c:	4413      	add	r3, r2
 800d70e:	b29c      	uxth	r4, r3
 800d710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d714:	b29a      	uxth	r2, r3
 800d716:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	4413      	add	r3, r2
 800d71e:	b29d      	uxth	r5, r3
 800d720:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d724:	b29a      	uxth	r2, r3
 800d726:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d72a:	b299      	uxth	r1, r3
					MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 800d72c:	69fb      	ldr	r3, [r7, #28]
 800d72e:	3301      	adds	r3, #1
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800d730:	b29b      	uxth	r3, r3
 800d732:	fb11 f303 	smulbb	r3, r1, r3
 800d736:	b29b      	uxth	r3, r3
 800d738:	4413      	add	r3, r2
 800d73a:	b29b      	uxth	r3, r3
 800d73c:	2200      	movs	r2, #0
 800d73e:	9202      	str	r2, [sp, #8]
 800d740:	2201      	movs	r2, #1
 800d742:	9201      	str	r2, [sp, #4]
 800d744:	2200      	movs	r2, #0
 800d746:	9200      	str	r2, [sp, #0]
 800d748:	462a      	mov	r2, r5
 800d74a:	4621      	mov	r1, r4
 800d74c:	f7fb fafe 	bl	8008d4c <Paint_DrawRectangle>
					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800d750:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d754:	b29c      	uxth	r4, r3
 800d756:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d75a:	b29a      	uxth	r2, r3
 800d75c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d760:	b299      	uxth	r1, r3
 800d762:	69fb      	ldr	r3, [r7, #28]
 800d764:	b29b      	uxth	r3, r3
 800d766:	fb11 f303 	smulbb	r3, r1, r3
 800d76a:	b29b      	uxth	r3, r3
 800d76c:	4413      	add	r3, r2
 800d76e:	b29b      	uxth	r3, r3
 800d770:	3301      	adds	r3, #1
 800d772:	b29d      	uxth	r5, r3
					uint16Item.itemsArray[i], BLACK, WHITE, 16, Font12);
 800d774:	69fb      	ldr	r3, [r7, #28]
 800d776:	3301      	adds	r3, #1
 800d778:	011b      	lsls	r3, r3, #4
 800d77a:	4a9f      	ldr	r2, [pc, #636]	; (800d9f8 <updateUint16Item+0x370>)
 800d77c:	441a      	add	r2, r3
			centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800d77e:	499f      	ldr	r1, [pc, #636]	; (800d9fc <updateUint16Item+0x374>)
 800d780:	ab02      	add	r3, sp, #8
 800d782:	c903      	ldmia	r1, {r0, r1}
 800d784:	e883 0003 	stmia.w	r3, {r0, r1}
 800d788:	2310      	movs	r3, #16
 800d78a:	9301      	str	r3, [sp, #4]
 800d78c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d790:	9300      	str	r3, [sp, #0]
 800d792:	2300      	movs	r3, #0
 800d794:	4629      	mov	r1, r5
 800d796:	4620      	mov	r0, r4
 800d798:	f7fe fe76 	bl	800c488 <centeredString>
		}
		if ( (i >= 2) && (i < uint16Item.numberOfItemsInPage - 2) )
 800d79c:	69fb      	ldr	r3, [r7, #28]
 800d79e:	2b01      	cmp	r3, #1
 800d7a0:	f340 87ed 	ble.w	800e77e <updateUint16Item+0x10f6>
 800d7a4:	4b94      	ldr	r3, [pc, #592]	; (800d9f8 <updateUint16Item+0x370>)
 800d7a6:	7bdb      	ldrb	r3, [r3, #15]
 800d7a8:	3b02      	subs	r3, #2
 800d7aa:	69fa      	ldr	r2, [r7, #28]
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	f280 87e6 	bge.w	800e77e <updateUint16Item+0x10f6>
		{
			if (howToDraw == FULL)
 800d7b2:	79fb      	ldrb	r3, [r7, #7]
 800d7b4:	2b02      	cmp	r3, #2
 800d7b6:	d168      	bne.n	800d88a <updateUint16Item+0x202>
			{
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800d7b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7bc:	b298      	uxth	r0, r3
 800d7be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d7c2:	b29a      	uxth	r2, r3
 800d7c4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d7c8:	b299      	uxth	r1, r3
 800d7ca:	69fb      	ldr	r3, [r7, #28]
 800d7cc:	b29b      	uxth	r3, r3
 800d7ce:	fb11 f303 	smulbb	r3, r1, r3
 800d7d2:	b29b      	uxth	r3, r3
 800d7d4:	4413      	add	r3, r2
 800d7d6:	b29c      	uxth	r4, r3
 800d7d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7dc:	b29a      	uxth	r2, r3
 800d7de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d7e2:	085b      	lsrs	r3, r3, #1
 800d7e4:	b2db      	uxtb	r3, r3
 800d7e6:	b29b      	uxth	r3, r3
 800d7e8:	4413      	add	r3, r2
 800d7ea:	b29d      	uxth	r5, r3
 800d7ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d7f0:	b29a      	uxth	r2, r3
 800d7f2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d7f6:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 800d7f8:	69fb      	ldr	r3, [r7, #28]
 800d7fa:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800d7fc:	b29b      	uxth	r3, r3
 800d7fe:	fb11 f303 	smulbb	r3, r1, r3
 800d802:	b29b      	uxth	r3, r3
 800d804:	4413      	add	r3, r2
 800d806:	b29b      	uxth	r3, r3
 800d808:	2200      	movs	r2, #0
 800d80a:	9202      	str	r2, [sp, #8]
 800d80c:	2201      	movs	r2, #1
 800d80e:	9201      	str	r2, [sp, #4]
 800d810:	2200      	movs	r2, #0
 800d812:	9200      	str	r2, [sp, #0]
 800d814:	462a      	mov	r2, r5
 800d816:	4621      	mov	r1, r4
 800d818:	f7fb fa98 	bl	8008d4c <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
				Paint_DrawRectangle( MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * i,
 800d81c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d820:	b29a      	uxth	r2, r3
 800d822:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d826:	085b      	lsrs	r3, r3, #1
 800d828:	b2db      	uxtb	r3, r3
 800d82a:	b29b      	uxth	r3, r3
 800d82c:	4413      	add	r3, r2
 800d82e:	b298      	uxth	r0, r3
 800d830:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d834:	b29a      	uxth	r2, r3
 800d836:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d83a:	b299      	uxth	r1, r3
 800d83c:	69fb      	ldr	r3, [r7, #28]
 800d83e:	b29b      	uxth	r3, r3
 800d840:	fb11 f303 	smulbb	r3, r1, r3
 800d844:	b29b      	uxth	r3, r3
 800d846:	4413      	add	r3, r2
 800d848:	b29c      	uxth	r4, r3
 800d84a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d84e:	b29a      	uxth	r2, r3
 800d850:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d854:	b29b      	uxth	r3, r3
 800d856:	4413      	add	r3, r2
 800d858:	b29d      	uxth	r5, r3
 800d85a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d85e:	b29a      	uxth	r2, r3
 800d860:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d864:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 800d866:	69fb      	ldr	r3, [r7, #28]
 800d868:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * i,
 800d86a:	b29b      	uxth	r3, r3
 800d86c:	fb11 f303 	smulbb	r3, r1, r3
 800d870:	b29b      	uxth	r3, r3
 800d872:	4413      	add	r3, r2
 800d874:	b29b      	uxth	r3, r3
 800d876:	2200      	movs	r2, #0
 800d878:	9202      	str	r2, [sp, #8]
 800d87a:	2201      	movs	r2, #1
 800d87c:	9201      	str	r2, [sp, #4]
 800d87e:	2200      	movs	r2, #0
 800d880:	9200      	str	r2, [sp, #0]
 800d882:	462a      	mov	r2, r5
 800d884:	4621      	mov	r1, r4
 800d886:	f7fb fa61 	bl	8008d4c <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			}

			if ( (i == 2) )
 800d88a:	69fb      	ldr	r3, [r7, #28]
 800d88c:	2b02      	cmp	r3, #2
 800d88e:	f040 83b6 	bne.w	800dffe <updateUint16Item+0x976>
			{
				char localString[8] = "";
 800d892:	2300      	movs	r3, #0
 800d894:	617b      	str	r3, [r7, #20]
 800d896:	2300      	movs	r3, #0
 800d898:	61bb      	str	r3, [r7, #24]
				sprintf(localString,"%04d",uint16Item.startValue);
 800d89a:	4b57      	ldr	r3, [pc, #348]	; (800d9f8 <updateUint16Item+0x370>)
 800d89c:	891b      	ldrh	r3, [r3, #8]
 800d89e:	461a      	mov	r2, r3
 800d8a0:	f107 0314 	add.w	r3, r7, #20
 800d8a4:	4956      	ldr	r1, [pc, #344]	; (800da00 <updateUint16Item+0x378>)
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f003 fe34 	bl	8011514 <siprintf>
				if (currentCursorPosition.cursorPosition == 0x02)
 800d8ac:	4b55      	ldr	r3, [pc, #340]	; (800da04 <updateUint16Item+0x37c>)
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	2b02      	cmp	r3, #2
 800d8b2:	f040 81cd 	bne.w	800dc50 <updateUint16Item+0x5c8>
				{
					if ( (howToDraw == LEFT) || (howToDraw == FULL) )
 800d8b6:	79fb      	ldrb	r3, [r7, #7]
 800d8b8:	2b03      	cmp	r3, #3
 800d8ba:	d003      	beq.n	800d8c4 <updateUint16Item+0x23c>
 800d8bc:	79fb      	ldrb	r3, [r7, #7]
 800d8be:	2b02      	cmp	r3, #2
 800d8c0:	f040 80a2 	bne.w	800da08 <updateUint16Item+0x380>
					{
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800d8c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8c8:	b29b      	uxth	r3, r3
 800d8ca:	3301      	adds	r3, #1
 800d8cc:	b298      	uxth	r0, r3
 800d8ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d8d2:	b29a      	uxth	r2, r3
 800d8d4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d8d8:	b299      	uxth	r1, r3
 800d8da:	69fb      	ldr	r3, [r7, #28]
 800d8dc:	b29b      	uxth	r3, r3
 800d8de:	fb11 f303 	smulbb	r3, r1, r3
 800d8e2:	b29b      	uxth	r3, r3
 800d8e4:	4413      	add	r3, r2
 800d8e6:	b29b      	uxth	r3, r3
 800d8e8:	3301      	adds	r3, #1
 800d8ea:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 800d8ec:	69fb      	ldr	r3, [r7, #28]
 800d8ee:	3301      	adds	r3, #1
 800d8f0:	011b      	lsls	r3, r3, #4
 800d8f2:	4a41      	ldr	r2, [pc, #260]	; (800d9f8 <updateUint16Item+0x370>)
 800d8f4:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	9301      	str	r3, [sp, #4]
 800d8fa:	f24c 6318 	movw	r3, #50712	; 0xc618
 800d8fe:	9300      	str	r3, [sp, #0]
 800d900:	4b3e      	ldr	r3, [pc, #248]	; (800d9fc <updateUint16Item+0x374>)
 800d902:	f7fb fcc7 	bl	8009294 <Paint_DrawString_EN>
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800d906:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d90a:	b29a      	uxth	r2, r3
 800d90c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d910:	085b      	lsrs	r3, r3, #1
 800d912:	b2db      	uxtb	r3, r3
 800d914:	b29b      	uxth	r3, r3
 800d916:	4413      	add	r3, r2
 800d918:	b29b      	uxth	r3, r3
 800d91a:	3301      	adds	r3, #1
 800d91c:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800d91e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d922:	b29a      	uxth	r2, r3
 800d924:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d928:	b299      	uxth	r1, r3
 800d92a:	69fb      	ldr	r3, [r7, #28]
 800d92c:	b29b      	uxth	r3, r3
 800d92e:	fb11 f303 	smulbb	r3, r1, r3
 800d932:	b29b      	uxth	r3, r3
 800d934:	4413      	add	r3, r2
 800d936:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800d938:	3301      	adds	r3, #1
 800d93a:	b29e      	uxth	r6, r3
								MenuRectangleStartX + MenuRectangleWidth / 2 + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 800d93c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d940:	b29a      	uxth	r2, r3
 800d942:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d946:	085b      	lsrs	r3, r3, #1
 800d948:	b2db      	uxtb	r3, r3
 800d94a:	b29b      	uxth	r3, r3
 800d94c:	4413      	add	r3, r2
 800d94e:	b29c      	uxth	r4, r3
 800d950:	69fb      	ldr	r3, [r7, #28]
 800d952:	3301      	adds	r3, #1
 800d954:	011b      	lsls	r3, r3, #4
 800d956:	4a28      	ldr	r2, [pc, #160]	; (800d9f8 <updateUint16Item+0x370>)
 800d958:	4413      	add	r3, r2
 800d95a:	4618      	mov	r0, r3
 800d95c:	f7f2 fcca 	bl	80002f4 <strlen>
 800d960:	4603      	mov	r3, r0
 800d962:	b29a      	uxth	r2, r3
 800d964:	4b25      	ldr	r3, [pc, #148]	; (800d9fc <updateUint16Item+0x374>)
 800d966:	889b      	ldrh	r3, [r3, #4]
 800d968:	fb12 f303 	smulbb	r3, r2, r3
 800d96c:	b29b      	uxth	r3, r3
 800d96e:	4423      	add	r3, r4
 800d970:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800d972:	3301      	adds	r3, #1
 800d974:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800d976:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d97a:	b29a      	uxth	r2, r3
 800d97c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d980:	b299      	uxth	r1, r3
 800d982:	69fb      	ldr	r3, [r7, #28]
 800d984:	b29b      	uxth	r3, r3
 800d986:	fb11 f303 	smulbb	r3, r1, r3
 800d98a:	b29b      	uxth	r3, r3
 800d98c:	4413      	add	r3, r2
 800d98e:	b29a      	uxth	r2, r3
 800d990:	4b1a      	ldr	r3, [pc, #104]	; (800d9fc <updateUint16Item+0x374>)
 800d992:	88db      	ldrh	r3, [r3, #6]
 800d994:	4413      	add	r3, r2
 800d996:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800d998:	3301      	adds	r3, #1
 800d99a:	b29b      	uxth	r3, r3
 800d99c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9a0:	9200      	str	r2, [sp, #0]
 800d9a2:	4602      	mov	r2, r0
 800d9a4:	4631      	mov	r1, r6
 800d9a6:	4628      	mov	r0, r5
 800d9a8:	f7fb f856 	bl	8008a58 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800d9ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9b0:	b29a      	uxth	r2, r3
 800d9b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d9b6:	085b      	lsrs	r3, r3, #1
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	b29b      	uxth	r3, r3
 800d9bc:	4413      	add	r3, r2
 800d9be:	b29b      	uxth	r3, r3
 800d9c0:	3301      	adds	r3, #1
 800d9c2:	b298      	uxth	r0, r3
 800d9c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d9c8:	b29a      	uxth	r2, r3
 800d9ca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d9ce:	b299      	uxth	r1, r3
 800d9d0:	69fb      	ldr	r3, [r7, #28]
 800d9d2:	b29b      	uxth	r3, r3
 800d9d4:	fb11 f303 	smulbb	r3, r1, r3
 800d9d8:	b29b      	uxth	r3, r3
 800d9da:	4413      	add	r3, r2
 800d9dc:	b29b      	uxth	r3, r3
 800d9de:	3301      	adds	r3, #1
 800d9e0:	b299      	uxth	r1, r3
 800d9e2:	f107 0214 	add.w	r2, r7, #20
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	9301      	str	r3, [sp, #4]
 800d9ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d9ee:	9300      	str	r3, [sp, #0]
 800d9f0:	4b02      	ldr	r3, [pc, #8]	; (800d9fc <updateUint16Item+0x374>)
 800d9f2:	f7fb fc4f 	bl	8009294 <Paint_DrawString_EN>
 800d9f6:	e302      	b.n	800dffe <updateUint16Item+0x976>
 800d9f8:	2400ae1c 	.word	0x2400ae1c
 800d9fc:	24000018 	.word	0x24000018
 800da00:	0801539c 	.word	0x0801539c
 800da04:	2400a5bc 	.word	0x2400a5bc
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == DOWN)
 800da08:	79fb      	ldrb	r3, [r7, #7]
 800da0a:	2b01      	cmp	r3, #1
 800da0c:	f040 808c 	bne.w	800db28 <updateUint16Item+0x4a0>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800da10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da14:	b29b      	uxth	r3, r3
 800da16:	3301      	adds	r3, #1
 800da18:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800da1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da1e:	b29a      	uxth	r2, r3
 800da20:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800da24:	b299      	uxth	r1, r3
 800da26:	69fb      	ldr	r3, [r7, #28]
 800da28:	b29b      	uxth	r3, r3
 800da2a:	fb11 f303 	smulbb	r3, r1, r3
 800da2e:	b29b      	uxth	r3, r3
 800da30:	4413      	add	r3, r2
 800da32:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800da34:	3301      	adds	r3, #1
 800da36:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 800da38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da3c:	b29c      	uxth	r4, r3
 800da3e:	69fb      	ldr	r3, [r7, #28]
 800da40:	3301      	adds	r3, #1
 800da42:	011b      	lsls	r3, r3, #4
 800da44:	4a80      	ldr	r2, [pc, #512]	; (800dc48 <updateUint16Item+0x5c0>)
 800da46:	4413      	add	r3, r2
 800da48:	4618      	mov	r0, r3
 800da4a:	f7f2 fc53 	bl	80002f4 <strlen>
 800da4e:	4603      	mov	r3, r0
 800da50:	b29a      	uxth	r2, r3
 800da52:	4b7e      	ldr	r3, [pc, #504]	; (800dc4c <updateUint16Item+0x5c4>)
 800da54:	889b      	ldrh	r3, [r3, #4]
 800da56:	fb12 f303 	smulbb	r3, r2, r3
 800da5a:	b29b      	uxth	r3, r3
 800da5c:	4423      	add	r3, r4
 800da5e:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800da60:	3301      	adds	r3, #1
 800da62:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800da64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da68:	b29a      	uxth	r2, r3
 800da6a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800da6e:	b299      	uxth	r1, r3
 800da70:	69fb      	ldr	r3, [r7, #28]
 800da72:	b29b      	uxth	r3, r3
 800da74:	fb11 f303 	smulbb	r3, r1, r3
 800da78:	b29b      	uxth	r3, r3
 800da7a:	4413      	add	r3, r2
 800da7c:	b29a      	uxth	r2, r3
 800da7e:	4b73      	ldr	r3, [pc, #460]	; (800dc4c <updateUint16Item+0x5c4>)
 800da80:	88db      	ldrh	r3, [r3, #6]
 800da82:	4413      	add	r3, r2
 800da84:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800da86:	3301      	adds	r3, #1
 800da88:	b29b      	uxth	r3, r3
 800da8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da8e:	9200      	str	r2, [sp, #0]
 800da90:	4602      	mov	r2, r0
 800da92:	4631      	mov	r1, r6
 800da94:	4628      	mov	r0, r5
 800da96:	f7fa ffdf 	bl	8008a58 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800da9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da9e:	b29b      	uxth	r3, r3
 800daa0:	3301      	adds	r3, #1
 800daa2:	b298      	uxth	r0, r3
 800daa4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800daa8:	b29a      	uxth	r2, r3
 800daaa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800daae:	b299      	uxth	r1, r3
 800dab0:	69fb      	ldr	r3, [r7, #28]
 800dab2:	b29b      	uxth	r3, r3
 800dab4:	fb11 f303 	smulbb	r3, r1, r3
 800dab8:	b29b      	uxth	r3, r3
 800daba:	4413      	add	r3, r2
 800dabc:	b29b      	uxth	r3, r3
 800dabe:	3301      	adds	r3, #1
 800dac0:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 800dac2:	69fb      	ldr	r3, [r7, #28]
 800dac4:	3301      	adds	r3, #1
 800dac6:	011b      	lsls	r3, r3, #4
 800dac8:	4a5f      	ldr	r2, [pc, #380]	; (800dc48 <updateUint16Item+0x5c0>)
 800daca:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800dacc:	2300      	movs	r3, #0
 800dace:	9301      	str	r3, [sp, #4]
 800dad0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dad4:	9300      	str	r3, [sp, #0]
 800dad6:	4b5d      	ldr	r3, [pc, #372]	; (800dc4c <updateUint16Item+0x5c4>)
 800dad8:	f7fb fbdc 	bl	8009294 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800dadc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dae0:	b29a      	uxth	r2, r3
 800dae2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dae6:	085b      	lsrs	r3, r3, #1
 800dae8:	b2db      	uxtb	r3, r3
 800daea:	b29b      	uxth	r3, r3
 800daec:	4413      	add	r3, r2
 800daee:	b29b      	uxth	r3, r3
 800daf0:	3301      	adds	r3, #1
 800daf2:	b298      	uxth	r0, r3
 800daf4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800daf8:	b29a      	uxth	r2, r3
 800dafa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800dafe:	b299      	uxth	r1, r3
 800db00:	69fb      	ldr	r3, [r7, #28]
 800db02:	b29b      	uxth	r3, r3
 800db04:	fb11 f303 	smulbb	r3, r1, r3
 800db08:	b29b      	uxth	r3, r3
 800db0a:	4413      	add	r3, r2
 800db0c:	b29b      	uxth	r3, r3
 800db0e:	3301      	adds	r3, #1
 800db10:	b299      	uxth	r1, r3
 800db12:	f107 0214 	add.w	r2, r7, #20
 800db16:	2300      	movs	r3, #0
 800db18:	9301      	str	r3, [sp, #4]
 800db1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800db1e:	9300      	str	r3, [sp, #0]
 800db20:	4b4a      	ldr	r3, [pc, #296]	; (800dc4c <updateUint16Item+0x5c4>)
 800db22:	f7fb fbb7 	bl	8009294 <Paint_DrawString_EN>
 800db26:	e26a      	b.n	800dffe <updateUint16Item+0x976>
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == UP)
 800db28:	79fb      	ldrb	r3, [r7, #7]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	f040 8267 	bne.w	800dffe <updateUint16Item+0x976>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800db30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db34:	b29b      	uxth	r3, r3
 800db36:	3301      	adds	r3, #1
 800db38:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800db3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db3e:	b29a      	uxth	r2, r3
 800db40:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800db44:	b299      	uxth	r1, r3
 800db46:	69fb      	ldr	r3, [r7, #28]
 800db48:	b29b      	uxth	r3, r3
 800db4a:	fb11 f303 	smulbb	r3, r1, r3
 800db4e:	b29b      	uxth	r3, r3
 800db50:	4413      	add	r3, r2
 800db52:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800db54:	3301      	adds	r3, #1
 800db56:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 800db58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db5c:	b29c      	uxth	r4, r3
 800db5e:	69fb      	ldr	r3, [r7, #28]
 800db60:	3301      	adds	r3, #1
 800db62:	011b      	lsls	r3, r3, #4
 800db64:	4a38      	ldr	r2, [pc, #224]	; (800dc48 <updateUint16Item+0x5c0>)
 800db66:	4413      	add	r3, r2
 800db68:	4618      	mov	r0, r3
 800db6a:	f7f2 fbc3 	bl	80002f4 <strlen>
 800db6e:	4603      	mov	r3, r0
 800db70:	b29a      	uxth	r2, r3
 800db72:	4b36      	ldr	r3, [pc, #216]	; (800dc4c <updateUint16Item+0x5c4>)
 800db74:	889b      	ldrh	r3, [r3, #4]
 800db76:	fb12 f303 	smulbb	r3, r2, r3
 800db7a:	b29b      	uxth	r3, r3
 800db7c:	4423      	add	r3, r4
 800db7e:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800db80:	3301      	adds	r3, #1
 800db82:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800db84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db88:	b29a      	uxth	r2, r3
 800db8a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800db8e:	b299      	uxth	r1, r3
 800db90:	69fb      	ldr	r3, [r7, #28]
 800db92:	b29b      	uxth	r3, r3
 800db94:	fb11 f303 	smulbb	r3, r1, r3
 800db98:	b29b      	uxth	r3, r3
 800db9a:	4413      	add	r3, r2
 800db9c:	b29a      	uxth	r2, r3
 800db9e:	4b2b      	ldr	r3, [pc, #172]	; (800dc4c <updateUint16Item+0x5c4>)
 800dba0:	88db      	ldrh	r3, [r3, #6]
 800dba2:	4413      	add	r3, r2
 800dba4:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800dba6:	3301      	adds	r3, #1
 800dba8:	b29b      	uxth	r3, r3
 800dbaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dbae:	9200      	str	r2, [sp, #0]
 800dbb0:	4602      	mov	r2, r0
 800dbb2:	4631      	mov	r1, r6
 800dbb4:	4628      	mov	r0, r5
 800dbb6:	f7fa ff4f 	bl	8008a58 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800dbba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbbe:	b29b      	uxth	r3, r3
 800dbc0:	3301      	adds	r3, #1
 800dbc2:	b298      	uxth	r0, r3
 800dbc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dbc8:	b29a      	uxth	r2, r3
 800dbca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800dbce:	b299      	uxth	r1, r3
 800dbd0:	69fb      	ldr	r3, [r7, #28]
 800dbd2:	b29b      	uxth	r3, r3
 800dbd4:	fb11 f303 	smulbb	r3, r1, r3
 800dbd8:	b29b      	uxth	r3, r3
 800dbda:	4413      	add	r3, r2
 800dbdc:	b29b      	uxth	r3, r3
 800dbde:	3301      	adds	r3, #1
 800dbe0:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 800dbe2:	69fb      	ldr	r3, [r7, #28]
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	011b      	lsls	r3, r3, #4
 800dbe8:	4a17      	ldr	r2, [pc, #92]	; (800dc48 <updateUint16Item+0x5c0>)
 800dbea:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800dbec:	2300      	movs	r3, #0
 800dbee:	9301      	str	r3, [sp, #4]
 800dbf0:	f24c 6318 	movw	r3, #50712	; 0xc618
 800dbf4:	9300      	str	r3, [sp, #0]
 800dbf6:	4b15      	ldr	r3, [pc, #84]	; (800dc4c <updateUint16Item+0x5c4>)
 800dbf8:	f7fb fb4c 	bl	8009294 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800dbfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc00:	b29a      	uxth	r2, r3
 800dc02:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dc06:	085b      	lsrs	r3, r3, #1
 800dc08:	b2db      	uxtb	r3, r3
 800dc0a:	b29b      	uxth	r3, r3
 800dc0c:	4413      	add	r3, r2
 800dc0e:	b29b      	uxth	r3, r3
 800dc10:	3301      	adds	r3, #1
 800dc12:	b298      	uxth	r0, r3
 800dc14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dc18:	b29a      	uxth	r2, r3
 800dc1a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800dc1e:	b299      	uxth	r1, r3
 800dc20:	69fb      	ldr	r3, [r7, #28]
 800dc22:	b29b      	uxth	r3, r3
 800dc24:	fb11 f303 	smulbb	r3, r1, r3
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	4413      	add	r3, r2
 800dc2c:	b29b      	uxth	r3, r3
 800dc2e:	3301      	adds	r3, #1
 800dc30:	b299      	uxth	r1, r3
 800dc32:	f107 0214 	add.w	r2, r7, #20
 800dc36:	2300      	movs	r3, #0
 800dc38:	9301      	str	r3, [sp, #4]
 800dc3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dc3e:	9300      	str	r3, [sp, #0]
 800dc40:	4b02      	ldr	r3, [pc, #8]	; (800dc4c <updateUint16Item+0x5c4>)
 800dc42:	f7fb fb27 	bl	8009294 <Paint_DrawString_EN>
 800dc46:	e1da      	b.n	800dffe <updateUint16Item+0x976>
 800dc48:	2400ae1c 	.word	0x2400ae1c
 800dc4c:	24000018 	.word	0x24000018
								localString, &Font12, WHITE,  BLACK);
					}

				}
				else if (currentCursorPosition.cursorPosition == VALUE)
 800dc50:	4ba1      	ldr	r3, [pc, #644]	; (800ded8 <updateUint16Item+0x850>)
 800dc52:	781b      	ldrb	r3, [r3, #0]
 800dc54:	2b0b      	cmp	r3, #11
 800dc56:	f040 8147 	bne.w	800dee8 <updateUint16Item+0x860>
				{
					if (howToDraw == RIGHT)
 800dc5a:	79fb      	ldrb	r3, [r7, #7]
 800dc5c:	2b04      	cmp	r3, #4
 800dc5e:	f040 808c 	bne.w	800dd7a <updateUint16Item+0x6f2>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800dc62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc66:	b29b      	uxth	r3, r3
 800dc68:	3301      	adds	r3, #1
 800dc6a:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800dc6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dc70:	b29a      	uxth	r2, r3
 800dc72:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800dc76:	b299      	uxth	r1, r3
 800dc78:	69fb      	ldr	r3, [r7, #28]
 800dc7a:	b29b      	uxth	r3, r3
 800dc7c:	fb11 f303 	smulbb	r3, r1, r3
 800dc80:	b29b      	uxth	r3, r3
 800dc82:	4413      	add	r3, r2
 800dc84:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800dc86:	3301      	adds	r3, #1
 800dc88:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 800dc8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc8e:	b29c      	uxth	r4, r3
 800dc90:	69fb      	ldr	r3, [r7, #28]
 800dc92:	3301      	adds	r3, #1
 800dc94:	011b      	lsls	r3, r3, #4
 800dc96:	4a91      	ldr	r2, [pc, #580]	; (800dedc <updateUint16Item+0x854>)
 800dc98:	4413      	add	r3, r2
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f7f2 fb2a 	bl	80002f4 <strlen>
 800dca0:	4603      	mov	r3, r0
 800dca2:	b29a      	uxth	r2, r3
 800dca4:	4b8e      	ldr	r3, [pc, #568]	; (800dee0 <updateUint16Item+0x858>)
 800dca6:	889b      	ldrh	r3, [r3, #4]
 800dca8:	fb12 f303 	smulbb	r3, r2, r3
 800dcac:	b29b      	uxth	r3, r3
 800dcae:	4423      	add	r3, r4
 800dcb0:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800dcb2:	3301      	adds	r3, #1
 800dcb4:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800dcb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dcba:	b29a      	uxth	r2, r3
 800dcbc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800dcc0:	b299      	uxth	r1, r3
 800dcc2:	69fb      	ldr	r3, [r7, #28]
 800dcc4:	b29b      	uxth	r3, r3
 800dcc6:	fb11 f303 	smulbb	r3, r1, r3
 800dcca:	b29b      	uxth	r3, r3
 800dccc:	4413      	add	r3, r2
 800dcce:	b29a      	uxth	r2, r3
 800dcd0:	4b83      	ldr	r3, [pc, #524]	; (800dee0 <updateUint16Item+0x858>)
 800dcd2:	88db      	ldrh	r3, [r3, #6]
 800dcd4:	4413      	add	r3, r2
 800dcd6:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800dcd8:	3301      	adds	r3, #1
 800dcda:	b29b      	uxth	r3, r3
 800dcdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dce0:	9200      	str	r2, [sp, #0]
 800dce2:	4602      	mov	r2, r0
 800dce4:	4631      	mov	r1, r6
 800dce6:	4628      	mov	r0, r5
 800dce8:	f7fa feb6 	bl	8008a58 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800dcec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcf0:	b29b      	uxth	r3, r3
 800dcf2:	3301      	adds	r3, #1
 800dcf4:	b298      	uxth	r0, r3
 800dcf6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dcfa:	b29a      	uxth	r2, r3
 800dcfc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800dd00:	b299      	uxth	r1, r3
 800dd02:	69fb      	ldr	r3, [r7, #28]
 800dd04:	b29b      	uxth	r3, r3
 800dd06:	fb11 f303 	smulbb	r3, r1, r3
 800dd0a:	b29b      	uxth	r3, r3
 800dd0c:	4413      	add	r3, r2
 800dd0e:	b29b      	uxth	r3, r3
 800dd10:	3301      	adds	r3, #1
 800dd12:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 800dd14:	69fb      	ldr	r3, [r7, #28]
 800dd16:	3301      	adds	r3, #1
 800dd18:	011b      	lsls	r3, r3, #4
 800dd1a:	4a70      	ldr	r2, [pc, #448]	; (800dedc <updateUint16Item+0x854>)
 800dd1c:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800dd1e:	2300      	movs	r3, #0
 800dd20:	9301      	str	r3, [sp, #4]
 800dd22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dd26:	9300      	str	r3, [sp, #0]
 800dd28:	4b6d      	ldr	r3, [pc, #436]	; (800dee0 <updateUint16Item+0x858>)
 800dd2a:	f7fb fab3 	bl	8009294 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800dd2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd32:	b29a      	uxth	r2, r3
 800dd34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dd38:	085b      	lsrs	r3, r3, #1
 800dd3a:	b2db      	uxtb	r3, r3
 800dd3c:	b29b      	uxth	r3, r3
 800dd3e:	4413      	add	r3, r2
 800dd40:	b29b      	uxth	r3, r3
 800dd42:	3301      	adds	r3, #1
 800dd44:	b298      	uxth	r0, r3
 800dd46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd4a:	b29a      	uxth	r2, r3
 800dd4c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800dd50:	b299      	uxth	r1, r3
 800dd52:	69fb      	ldr	r3, [r7, #28]
 800dd54:	b29b      	uxth	r3, r3
 800dd56:	fb11 f303 	smulbb	r3, r1, r3
 800dd5a:	b29b      	uxth	r3, r3
 800dd5c:	4413      	add	r3, r2
 800dd5e:	b29b      	uxth	r3, r3
 800dd60:	3301      	adds	r3, #1
 800dd62:	b299      	uxth	r1, r3
 800dd64:	f107 0214 	add.w	r2, r7, #20
 800dd68:	2300      	movs	r3, #0
 800dd6a:	9301      	str	r3, [sp, #4]
 800dd6c:	f24c 6318 	movw	r3, #50712	; 0xc618
 800dd70:	9300      	str	r3, [sp, #0]
 800dd72:	4b5b      	ldr	r3, [pc, #364]	; (800dee0 <updateUint16Item+0x858>)
 800dd74:	f7fb fa8e 	bl	8009294 <Paint_DrawString_EN>
 800dd78:	e141      	b.n	800dffe <updateUint16Item+0x976>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == DOWN)
 800dd7a:	79fb      	ldrb	r3, [r7, #7]
 800dd7c:	2b01      	cmp	r3, #1
 800dd7e:	d158      	bne.n	800de32 <updateUint16Item+0x7aa>
					{
						if (uint16Item.deltaMultiplier < uint16Item.startValue)
 800dd80:	4b56      	ldr	r3, [pc, #344]	; (800dedc <updateUint16Item+0x854>)
 800dd82:	899a      	ldrh	r2, [r3, #12]
 800dd84:	4b55      	ldr	r3, [pc, #340]	; (800dedc <updateUint16Item+0x854>)
 800dd86:	891b      	ldrh	r3, [r3, #8]
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	d21f      	bcs.n	800ddcc <updateUint16Item+0x744>
						{
							uint16Item.startValue = fmax(uint16Item.startValue - uint16Item.deltaMultiplier, uint16Item.minValue * 1.0);
 800dd8c:	4b53      	ldr	r3, [pc, #332]	; (800dedc <updateUint16Item+0x854>)
 800dd8e:	891b      	ldrh	r3, [r3, #8]
 800dd90:	461a      	mov	r2, r3
 800dd92:	4b52      	ldr	r3, [pc, #328]	; (800dedc <updateUint16Item+0x854>)
 800dd94:	899b      	ldrh	r3, [r3, #12]
 800dd96:	1ad3      	subs	r3, r2, r3
 800dd98:	ee07 3a90 	vmov	s15, r3
 800dd9c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dda0:	4b4e      	ldr	r3, [pc, #312]	; (800dedc <updateUint16Item+0x854>)
 800dda2:	889b      	ldrh	r3, [r3, #4]
 800dda4:	ee06 3a90 	vmov	s13, r3
 800dda8:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ddac:	eeb0 1b46 	vmov.f64	d1, d6
 800ddb0:	eeb0 0b47 	vmov.f64	d0, d7
 800ddb4:	f006 ff2a 	bl	8014c0c <fmax>
 800ddb8:	eeb0 7b40 	vmov.f64	d7, d0
 800ddbc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800ddc0:	ee17 3a90 	vmov	r3, s15
 800ddc4:	b29a      	uxth	r2, r3
 800ddc6:	4b45      	ldr	r3, [pc, #276]	; (800dedc <updateUint16Item+0x854>)
 800ddc8:	811a      	strh	r2, [r3, #8]
 800ddca:	e003      	b.n	800ddd4 <updateUint16Item+0x74c>
						}
						else
						{
							uint16Item.startValue = uint16Item.minValue;
 800ddcc:	4b43      	ldr	r3, [pc, #268]	; (800dedc <updateUint16Item+0x854>)
 800ddce:	889a      	ldrh	r2, [r3, #4]
 800ddd0:	4b42      	ldr	r3, [pc, #264]	; (800dedc <updateUint16Item+0x854>)
 800ddd2:	811a      	strh	r2, [r3, #8]
						}

						sprintf(localString,"%04d",uint16Item.startValue);
 800ddd4:	4b41      	ldr	r3, [pc, #260]	; (800dedc <updateUint16Item+0x854>)
 800ddd6:	891b      	ldrh	r3, [r3, #8]
 800ddd8:	461a      	mov	r2, r3
 800ddda:	f107 0314 	add.w	r3, r7, #20
 800ddde:	4941      	ldr	r1, [pc, #260]	; (800dee4 <updateUint16Item+0x85c>)
 800dde0:	4618      	mov	r0, r3
 800dde2:	f003 fb97 	bl	8011514 <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800dde6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddea:	b29a      	uxth	r2, r3
 800ddec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ddf0:	085b      	lsrs	r3, r3, #1
 800ddf2:	b2db      	uxtb	r3, r3
 800ddf4:	b29b      	uxth	r3, r3
 800ddf6:	4413      	add	r3, r2
 800ddf8:	b29b      	uxth	r3, r3
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	b298      	uxth	r0, r3
 800ddfe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800de02:	b29a      	uxth	r2, r3
 800de04:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800de08:	b299      	uxth	r1, r3
 800de0a:	69fb      	ldr	r3, [r7, #28]
 800de0c:	b29b      	uxth	r3, r3
 800de0e:	fb11 f303 	smulbb	r3, r1, r3
 800de12:	b29b      	uxth	r3, r3
 800de14:	4413      	add	r3, r2
 800de16:	b29b      	uxth	r3, r3
 800de18:	3301      	adds	r3, #1
 800de1a:	b299      	uxth	r1, r3
 800de1c:	f107 0214 	add.w	r2, r7, #20
 800de20:	2300      	movs	r3, #0
 800de22:	9301      	str	r3, [sp, #4]
 800de24:	f24c 6318 	movw	r3, #50712	; 0xc618
 800de28:	9300      	str	r3, [sp, #0]
 800de2a:	4b2d      	ldr	r3, [pc, #180]	; (800dee0 <updateUint16Item+0x858>)
 800de2c:	f7fb fa32 	bl	8009294 <Paint_DrawString_EN>
 800de30:	e0e5      	b.n	800dffe <updateUint16Item+0x976>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == UP)
 800de32:	79fb      	ldrb	r3, [r7, #7]
 800de34:	2b00      	cmp	r3, #0
 800de36:	f040 80e2 	bne.w	800dffe <updateUint16Item+0x976>
					{
						uint16Item.startValue = fmin(uint16Item.startValue + uint16Item.deltaMultiplier, uint16Item.maxValue * 1.0);
 800de3a:	4b28      	ldr	r3, [pc, #160]	; (800dedc <updateUint16Item+0x854>)
 800de3c:	891b      	ldrh	r3, [r3, #8]
 800de3e:	461a      	mov	r2, r3
 800de40:	4b26      	ldr	r3, [pc, #152]	; (800dedc <updateUint16Item+0x854>)
 800de42:	899b      	ldrh	r3, [r3, #12]
 800de44:	4413      	add	r3, r2
 800de46:	ee07 3a90 	vmov	s15, r3
 800de4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800de4e:	4b23      	ldr	r3, [pc, #140]	; (800dedc <updateUint16Item+0x854>)
 800de50:	88db      	ldrh	r3, [r3, #6]
 800de52:	ee06 3a90 	vmov	s13, r3
 800de56:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800de5a:	eeb0 1b46 	vmov.f64	d1, d6
 800de5e:	eeb0 0b47 	vmov.f64	d0, d7
 800de62:	f006 feee 	bl	8014c42 <fmin>
 800de66:	eeb0 7b40 	vmov.f64	d7, d0
 800de6a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800de6e:	ee17 3a90 	vmov	r3, s15
 800de72:	b29a      	uxth	r2, r3
 800de74:	4b19      	ldr	r3, [pc, #100]	; (800dedc <updateUint16Item+0x854>)
 800de76:	811a      	strh	r2, [r3, #8]
						sprintf(localString,"%04d",uint16Item.startValue);
 800de78:	4b18      	ldr	r3, [pc, #96]	; (800dedc <updateUint16Item+0x854>)
 800de7a:	891b      	ldrh	r3, [r3, #8]
 800de7c:	461a      	mov	r2, r3
 800de7e:	f107 0314 	add.w	r3, r7, #20
 800de82:	4918      	ldr	r1, [pc, #96]	; (800dee4 <updateUint16Item+0x85c>)
 800de84:	4618      	mov	r0, r3
 800de86:	f003 fb45 	bl	8011514 <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800de8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de8e:	b29a      	uxth	r2, r3
 800de90:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800de94:	085b      	lsrs	r3, r3, #1
 800de96:	b2db      	uxtb	r3, r3
 800de98:	b29b      	uxth	r3, r3
 800de9a:	4413      	add	r3, r2
 800de9c:	b29b      	uxth	r3, r3
 800de9e:	3301      	adds	r3, #1
 800dea0:	b298      	uxth	r0, r3
 800dea2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dea6:	b29a      	uxth	r2, r3
 800dea8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800deac:	b299      	uxth	r1, r3
 800deae:	69fb      	ldr	r3, [r7, #28]
 800deb0:	b29b      	uxth	r3, r3
 800deb2:	fb11 f303 	smulbb	r3, r1, r3
 800deb6:	b29b      	uxth	r3, r3
 800deb8:	4413      	add	r3, r2
 800deba:	b29b      	uxth	r3, r3
 800debc:	3301      	adds	r3, #1
 800debe:	b299      	uxth	r1, r3
 800dec0:	f107 0214 	add.w	r2, r7, #20
 800dec4:	2300      	movs	r3, #0
 800dec6:	9301      	str	r3, [sp, #4]
 800dec8:	f24c 6318 	movw	r3, #50712	; 0xc618
 800decc:	9300      	str	r3, [sp, #0]
 800dece:	4b04      	ldr	r3, [pc, #16]	; (800dee0 <updateUint16Item+0x858>)
 800ded0:	f7fb f9e0 	bl	8009294 <Paint_DrawString_EN>
 800ded4:	e093      	b.n	800dffe <updateUint16Item+0x976>
 800ded6:	bf00      	nop
 800ded8:	2400a5bc 	.word	0x2400a5bc
 800dedc:	2400ae1c 	.word	0x2400ae1c
 800dee0:	24000018 	.word	0x24000018
 800dee4:	0801539c 	.word	0x0801539c
								localString, &Font12, LGRAY,  BLACK);
					}
				}
				else
				{
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800dee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800deec:	b29b      	uxth	r3, r3
 800deee:	3301      	adds	r3, #1
 800def0:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800def2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800def6:	b29a      	uxth	r2, r3
 800def8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800defc:	b299      	uxth	r1, r3
 800defe:	69fb      	ldr	r3, [r7, #28]
 800df00:	b29b      	uxth	r3, r3
 800df02:	fb11 f303 	smulbb	r3, r1, r3
 800df06:	b29b      	uxth	r3, r3
 800df08:	4413      	add	r3, r2
 800df0a:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800df0c:	3301      	adds	r3, #1
 800df0e:	b29e      	uxth	r6, r3
							MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 800df10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df14:	b29c      	uxth	r4, r3
 800df16:	69fb      	ldr	r3, [r7, #28]
 800df18:	3301      	adds	r3, #1
 800df1a:	011b      	lsls	r3, r3, #4
 800df1c:	4a93      	ldr	r2, [pc, #588]	; (800e16c <updateUint16Item+0xae4>)
 800df1e:	4413      	add	r3, r2
 800df20:	4618      	mov	r0, r3
 800df22:	f7f2 f9e7 	bl	80002f4 <strlen>
 800df26:	4603      	mov	r3, r0
 800df28:	b29a      	uxth	r2, r3
 800df2a:	4b91      	ldr	r3, [pc, #580]	; (800e170 <updateUint16Item+0xae8>)
 800df2c:	889b      	ldrh	r3, [r3, #4]
 800df2e:	fb12 f303 	smulbb	r3, r2, r3
 800df32:	b29b      	uxth	r3, r3
 800df34:	4423      	add	r3, r4
 800df36:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800df38:	3301      	adds	r3, #1
 800df3a:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800df3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df40:	b29a      	uxth	r2, r3
 800df42:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800df46:	b299      	uxth	r1, r3
 800df48:	69fb      	ldr	r3, [r7, #28]
 800df4a:	b29b      	uxth	r3, r3
 800df4c:	fb11 f303 	smulbb	r3, r1, r3
 800df50:	b29b      	uxth	r3, r3
 800df52:	4413      	add	r3, r2
 800df54:	b29a      	uxth	r2, r3
 800df56:	4b86      	ldr	r3, [pc, #536]	; (800e170 <updateUint16Item+0xae8>)
 800df58:	88db      	ldrh	r3, [r3, #6]
 800df5a:	4413      	add	r3, r2
 800df5c:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800df5e:	3301      	adds	r3, #1
 800df60:	b29b      	uxth	r3, r3
 800df62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df66:	9200      	str	r2, [sp, #0]
 800df68:	4602      	mov	r2, r0
 800df6a:	4631      	mov	r1, r6
 800df6c:	4628      	mov	r0, r5
 800df6e:	f7fa fd73 	bl	8008a58 <Paint_ClearWindows>
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800df72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df76:	b29b      	uxth	r3, r3
 800df78:	3301      	adds	r3, #1
 800df7a:	b298      	uxth	r0, r3
 800df7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df80:	b29a      	uxth	r2, r3
 800df82:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800df86:	b299      	uxth	r1, r3
 800df88:	69fb      	ldr	r3, [r7, #28]
 800df8a:	b29b      	uxth	r3, r3
 800df8c:	fb11 f303 	smulbb	r3, r1, r3
 800df90:	b29b      	uxth	r3, r3
 800df92:	4413      	add	r3, r2
 800df94:	b29b      	uxth	r3, r3
 800df96:	3301      	adds	r3, #1
 800df98:	b299      	uxth	r1, r3
							uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 800df9a:	69fb      	ldr	r3, [r7, #28]
 800df9c:	3301      	adds	r3, #1
 800df9e:	011b      	lsls	r3, r3, #4
 800dfa0:	4a72      	ldr	r2, [pc, #456]	; (800e16c <updateUint16Item+0xae4>)
 800dfa2:	441a      	add	r2, r3
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	9301      	str	r3, [sp, #4]
 800dfa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dfac:	9300      	str	r3, [sp, #0]
 800dfae:	4b70      	ldr	r3, [pc, #448]	; (800e170 <updateUint16Item+0xae8>)
 800dfb0:	f7fb f970 	bl	8009294 <Paint_DrawString_EN>
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800dfb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfb8:	b29a      	uxth	r2, r3
 800dfba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dfbe:	085b      	lsrs	r3, r3, #1
 800dfc0:	b2db      	uxtb	r3, r3
 800dfc2:	b29b      	uxth	r3, r3
 800dfc4:	4413      	add	r3, r2
 800dfc6:	b29b      	uxth	r3, r3
 800dfc8:	3301      	adds	r3, #1
 800dfca:	b298      	uxth	r0, r3
 800dfcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dfd0:	b29a      	uxth	r2, r3
 800dfd2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800dfd6:	b299      	uxth	r1, r3
 800dfd8:	69fb      	ldr	r3, [r7, #28]
 800dfda:	b29b      	uxth	r3, r3
 800dfdc:	fb11 f303 	smulbb	r3, r1, r3
 800dfe0:	b29b      	uxth	r3, r3
 800dfe2:	4413      	add	r3, r2
 800dfe4:	b29b      	uxth	r3, r3
 800dfe6:	3301      	adds	r3, #1
 800dfe8:	b299      	uxth	r1, r3
 800dfea:	f107 0214 	add.w	r2, r7, #20
 800dfee:	2300      	movs	r3, #0
 800dff0:	9301      	str	r3, [sp, #4]
 800dff2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dff6:	9300      	str	r3, [sp, #0]
 800dff8:	4b5d      	ldr	r3, [pc, #372]	; (800e170 <updateUint16Item+0xae8>)
 800dffa:	f7fb f94b 	bl	8009294 <Paint_DrawString_EN>
							localString, &Font12, WHITE,  BLACK);
				}
			}
			// Render value text of "Multiplier" with Grey or White background
			if ( (i == 3) )
 800dffe:	69fb      	ldr	r3, [r7, #28]
 800e000:	2b03      	cmp	r3, #3
 800e002:	f040 83bc 	bne.w	800e77e <updateUint16Item+0x10f6>
			{
				char localString[8] = "";
 800e006:	2300      	movs	r3, #0
 800e008:	60fb      	str	r3, [r7, #12]
 800e00a:	2300      	movs	r3, #0
 800e00c:	613b      	str	r3, [r7, #16]
				sprintf(localString,"%04d",uint16Item.deltaMultiplier);
 800e00e:	4b57      	ldr	r3, [pc, #348]	; (800e16c <updateUint16Item+0xae4>)
 800e010:	899b      	ldrh	r3, [r3, #12]
 800e012:	461a      	mov	r2, r3
 800e014:	f107 030c 	add.w	r3, r7, #12
 800e018:	4956      	ldr	r1, [pc, #344]	; (800e174 <updateUint16Item+0xaec>)
 800e01a:	4618      	mov	r0, r3
 800e01c:	f003 fa7a 	bl	8011514 <siprintf>
				if (currentCursorPosition.cursorPosition == 0x03)
 800e020:	4b55      	ldr	r3, [pc, #340]	; (800e178 <updateUint16Item+0xaf0>)
 800e022:	781b      	ldrb	r3, [r3, #0]
 800e024:	2b03      	cmp	r3, #3
 800e026:	f040 81cd 	bne.w	800e3c4 <updateUint16Item+0xd3c>
				{
					if ( (howToDraw == LEFT) || (howToDraw == FULL) )
 800e02a:	79fb      	ldrb	r3, [r7, #7]
 800e02c:	2b03      	cmp	r3, #3
 800e02e:	d003      	beq.n	800e038 <updateUint16Item+0x9b0>
 800e030:	79fb      	ldrb	r3, [r7, #7]
 800e032:	2b02      	cmp	r3, #2
 800e034:	f040 80a2 	bne.w	800e17c <updateUint16Item+0xaf4>
					{
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e03c:	b29b      	uxth	r3, r3
 800e03e:	3301      	adds	r3, #1
 800e040:	b298      	uxth	r0, r3
 800e042:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e046:	b29a      	uxth	r2, r3
 800e048:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e04c:	b299      	uxth	r1, r3
 800e04e:	69fb      	ldr	r3, [r7, #28]
 800e050:	b29b      	uxth	r3, r3
 800e052:	fb11 f303 	smulbb	r3, r1, r3
 800e056:	b29b      	uxth	r3, r3
 800e058:	4413      	add	r3, r2
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	3301      	adds	r3, #1
 800e05e:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 800e060:	69fb      	ldr	r3, [r7, #28]
 800e062:	3301      	adds	r3, #1
 800e064:	011b      	lsls	r3, r3, #4
 800e066:	4a41      	ldr	r2, [pc, #260]	; (800e16c <updateUint16Item+0xae4>)
 800e068:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e06a:	2300      	movs	r3, #0
 800e06c:	9301      	str	r3, [sp, #4]
 800e06e:	f24c 6318 	movw	r3, #50712	; 0xc618
 800e072:	9300      	str	r3, [sp, #0]
 800e074:	4b3e      	ldr	r3, [pc, #248]	; (800e170 <updateUint16Item+0xae8>)
 800e076:	f7fb f90d 	bl	8009294 <Paint_DrawString_EN>
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800e07a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e07e:	b29a      	uxth	r2, r3
 800e080:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e084:	085b      	lsrs	r3, r3, #1
 800e086:	b2db      	uxtb	r3, r3
 800e088:	b29b      	uxth	r3, r3
 800e08a:	4413      	add	r3, r2
 800e08c:	b29b      	uxth	r3, r3
 800e08e:	3301      	adds	r3, #1
 800e090:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e092:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e096:	b29a      	uxth	r2, r3
 800e098:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e09c:	b299      	uxth	r1, r3
 800e09e:	69fb      	ldr	r3, [r7, #28]
 800e0a0:	b29b      	uxth	r3, r3
 800e0a2:	fb11 f303 	smulbb	r3, r1, r3
 800e0a6:	b29b      	uxth	r3, r3
 800e0a8:	4413      	add	r3, r2
 800e0aa:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800e0ac:	3301      	adds	r3, #1
 800e0ae:	b29e      	uxth	r6, r3
								MenuRectangleStartX + MenuRectangleWidth / 2 + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 800e0b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0b4:	b29a      	uxth	r2, r3
 800e0b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e0ba:	085b      	lsrs	r3, r3, #1
 800e0bc:	b2db      	uxtb	r3, r3
 800e0be:	b29b      	uxth	r3, r3
 800e0c0:	4413      	add	r3, r2
 800e0c2:	b29c      	uxth	r4, r3
 800e0c4:	69fb      	ldr	r3, [r7, #28]
 800e0c6:	3301      	adds	r3, #1
 800e0c8:	011b      	lsls	r3, r3, #4
 800e0ca:	4a28      	ldr	r2, [pc, #160]	; (800e16c <updateUint16Item+0xae4>)
 800e0cc:	4413      	add	r3, r2
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f7f2 f910 	bl	80002f4 <strlen>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	b29a      	uxth	r2, r3
 800e0d8:	4b25      	ldr	r3, [pc, #148]	; (800e170 <updateUint16Item+0xae8>)
 800e0da:	889b      	ldrh	r3, [r3, #4]
 800e0dc:	fb12 f303 	smulbb	r3, r2, r3
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	4423      	add	r3, r4
 800e0e4:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800e0e6:	3301      	adds	r3, #1
 800e0e8:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800e0ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e0ee:	b29a      	uxth	r2, r3
 800e0f0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e0f4:	b299      	uxth	r1, r3
 800e0f6:	69fb      	ldr	r3, [r7, #28]
 800e0f8:	b29b      	uxth	r3, r3
 800e0fa:	fb11 f303 	smulbb	r3, r1, r3
 800e0fe:	b29b      	uxth	r3, r3
 800e100:	4413      	add	r3, r2
 800e102:	b29a      	uxth	r2, r3
 800e104:	4b1a      	ldr	r3, [pc, #104]	; (800e170 <updateUint16Item+0xae8>)
 800e106:	88db      	ldrh	r3, [r3, #6]
 800e108:	4413      	add	r3, r2
 800e10a:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800e10c:	3301      	adds	r3, #1
 800e10e:	b29b      	uxth	r3, r3
 800e110:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e114:	9200      	str	r2, [sp, #0]
 800e116:	4602      	mov	r2, r0
 800e118:	4631      	mov	r1, r6
 800e11a:	4628      	mov	r0, r5
 800e11c:	f7fa fc9c 	bl	8008a58 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e124:	b29a      	uxth	r2, r3
 800e126:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e12a:	085b      	lsrs	r3, r3, #1
 800e12c:	b2db      	uxtb	r3, r3
 800e12e:	b29b      	uxth	r3, r3
 800e130:	4413      	add	r3, r2
 800e132:	b29b      	uxth	r3, r3
 800e134:	3301      	adds	r3, #1
 800e136:	b298      	uxth	r0, r3
 800e138:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e13c:	b29a      	uxth	r2, r3
 800e13e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e142:	b299      	uxth	r1, r3
 800e144:	69fb      	ldr	r3, [r7, #28]
 800e146:	b29b      	uxth	r3, r3
 800e148:	fb11 f303 	smulbb	r3, r1, r3
 800e14c:	b29b      	uxth	r3, r3
 800e14e:	4413      	add	r3, r2
 800e150:	b29b      	uxth	r3, r3
 800e152:	3301      	adds	r3, #1
 800e154:	b299      	uxth	r1, r3
 800e156:	f107 020c 	add.w	r2, r7, #12
 800e15a:	2300      	movs	r3, #0
 800e15c:	9301      	str	r3, [sp, #4]
 800e15e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e162:	9300      	str	r3, [sp, #0]
 800e164:	4b02      	ldr	r3, [pc, #8]	; (800e170 <updateUint16Item+0xae8>)
 800e166:	f7fb f895 	bl	8009294 <Paint_DrawString_EN>
 800e16a:	e308      	b.n	800e77e <updateUint16Item+0x10f6>
 800e16c:	2400ae1c 	.word	0x2400ae1c
 800e170:	24000018 	.word	0x24000018
 800e174:	0801539c 	.word	0x0801539c
 800e178:	2400a5bc 	.word	0x2400a5bc
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == DOWN)
 800e17c:	79fb      	ldrb	r3, [r7, #7]
 800e17e:	2b01      	cmp	r3, #1
 800e180:	f040 808c 	bne.w	800e29c <updateUint16Item+0xc14>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800e184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e188:	b29b      	uxth	r3, r3
 800e18a:	3301      	adds	r3, #1
 800e18c:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e18e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e192:	b29a      	uxth	r2, r3
 800e194:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e198:	b299      	uxth	r1, r3
 800e19a:	69fb      	ldr	r3, [r7, #28]
 800e19c:	b29b      	uxth	r3, r3
 800e19e:	fb11 f303 	smulbb	r3, r1, r3
 800e1a2:	b29b      	uxth	r3, r3
 800e1a4:	4413      	add	r3, r2
 800e1a6:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800e1a8:	3301      	adds	r3, #1
 800e1aa:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 800e1ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1b0:	b29c      	uxth	r4, r3
 800e1b2:	69fb      	ldr	r3, [r7, #28]
 800e1b4:	3301      	adds	r3, #1
 800e1b6:	011b      	lsls	r3, r3, #4
 800e1b8:	4a80      	ldr	r2, [pc, #512]	; (800e3bc <updateUint16Item+0xd34>)
 800e1ba:	4413      	add	r3, r2
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f7f2 f899 	bl	80002f4 <strlen>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	b29a      	uxth	r2, r3
 800e1c6:	4b7e      	ldr	r3, [pc, #504]	; (800e3c0 <updateUint16Item+0xd38>)
 800e1c8:	889b      	ldrh	r3, [r3, #4]
 800e1ca:	fb12 f303 	smulbb	r3, r2, r3
 800e1ce:	b29b      	uxth	r3, r3
 800e1d0:	4423      	add	r3, r4
 800e1d2:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800e1d4:	3301      	adds	r3, #1
 800e1d6:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800e1d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e1dc:	b29a      	uxth	r2, r3
 800e1de:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e1e2:	b299      	uxth	r1, r3
 800e1e4:	69fb      	ldr	r3, [r7, #28]
 800e1e6:	b29b      	uxth	r3, r3
 800e1e8:	fb11 f303 	smulbb	r3, r1, r3
 800e1ec:	b29b      	uxth	r3, r3
 800e1ee:	4413      	add	r3, r2
 800e1f0:	b29a      	uxth	r2, r3
 800e1f2:	4b73      	ldr	r3, [pc, #460]	; (800e3c0 <updateUint16Item+0xd38>)
 800e1f4:	88db      	ldrh	r3, [r3, #6]
 800e1f6:	4413      	add	r3, r2
 800e1f8:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800e1fa:	3301      	adds	r3, #1
 800e1fc:	b29b      	uxth	r3, r3
 800e1fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e202:	9200      	str	r2, [sp, #0]
 800e204:	4602      	mov	r2, r0
 800e206:	4631      	mov	r1, r6
 800e208:	4628      	mov	r0, r5
 800e20a:	f7fa fc25 	bl	8008a58 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e20e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e212:	b29b      	uxth	r3, r3
 800e214:	3301      	adds	r3, #1
 800e216:	b298      	uxth	r0, r3
 800e218:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e21c:	b29a      	uxth	r2, r3
 800e21e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e222:	b299      	uxth	r1, r3
 800e224:	69fb      	ldr	r3, [r7, #28]
 800e226:	b29b      	uxth	r3, r3
 800e228:	fb11 f303 	smulbb	r3, r1, r3
 800e22c:	b29b      	uxth	r3, r3
 800e22e:	4413      	add	r3, r2
 800e230:	b29b      	uxth	r3, r3
 800e232:	3301      	adds	r3, #1
 800e234:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 800e236:	69fb      	ldr	r3, [r7, #28]
 800e238:	3301      	adds	r3, #1
 800e23a:	011b      	lsls	r3, r3, #4
 800e23c:	4a5f      	ldr	r2, [pc, #380]	; (800e3bc <updateUint16Item+0xd34>)
 800e23e:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e240:	2300      	movs	r3, #0
 800e242:	9301      	str	r3, [sp, #4]
 800e244:	f24c 6318 	movw	r3, #50712	; 0xc618
 800e248:	9300      	str	r3, [sp, #0]
 800e24a:	4b5d      	ldr	r3, [pc, #372]	; (800e3c0 <updateUint16Item+0xd38>)
 800e24c:	f7fb f822 	bl	8009294 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e254:	b29a      	uxth	r2, r3
 800e256:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e25a:	085b      	lsrs	r3, r3, #1
 800e25c:	b2db      	uxtb	r3, r3
 800e25e:	b29b      	uxth	r3, r3
 800e260:	4413      	add	r3, r2
 800e262:	b29b      	uxth	r3, r3
 800e264:	3301      	adds	r3, #1
 800e266:	b298      	uxth	r0, r3
 800e268:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e26c:	b29a      	uxth	r2, r3
 800e26e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e272:	b299      	uxth	r1, r3
 800e274:	69fb      	ldr	r3, [r7, #28]
 800e276:	b29b      	uxth	r3, r3
 800e278:	fb11 f303 	smulbb	r3, r1, r3
 800e27c:	b29b      	uxth	r3, r3
 800e27e:	4413      	add	r3, r2
 800e280:	b29b      	uxth	r3, r3
 800e282:	3301      	adds	r3, #1
 800e284:	b299      	uxth	r1, r3
 800e286:	f107 020c 	add.w	r2, r7, #12
 800e28a:	2300      	movs	r3, #0
 800e28c:	9301      	str	r3, [sp, #4]
 800e28e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e292:	9300      	str	r3, [sp, #0]
 800e294:	4b4a      	ldr	r3, [pc, #296]	; (800e3c0 <updateUint16Item+0xd38>)
 800e296:	f7fa fffd 	bl	8009294 <Paint_DrawString_EN>
 800e29a:	e270      	b.n	800e77e <updateUint16Item+0x10f6>
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == UP)
 800e29c:	79fb      	ldrb	r3, [r7, #7]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	f040 826d 	bne.w	800e77e <updateUint16Item+0x10f6>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800e2a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2a8:	b29b      	uxth	r3, r3
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e2ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e2b2:	b29a      	uxth	r2, r3
 800e2b4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e2b8:	b299      	uxth	r1, r3
 800e2ba:	69fb      	ldr	r3, [r7, #28]
 800e2bc:	b29b      	uxth	r3, r3
 800e2be:	fb11 f303 	smulbb	r3, r1, r3
 800e2c2:	b29b      	uxth	r3, r3
 800e2c4:	4413      	add	r3, r2
 800e2c6:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800e2c8:	3301      	adds	r3, #1
 800e2ca:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 800e2cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2d0:	b29c      	uxth	r4, r3
 800e2d2:	69fb      	ldr	r3, [r7, #28]
 800e2d4:	3301      	adds	r3, #1
 800e2d6:	011b      	lsls	r3, r3, #4
 800e2d8:	4a38      	ldr	r2, [pc, #224]	; (800e3bc <updateUint16Item+0xd34>)
 800e2da:	4413      	add	r3, r2
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f7f2 f809 	bl	80002f4 <strlen>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	b29a      	uxth	r2, r3
 800e2e6:	4b36      	ldr	r3, [pc, #216]	; (800e3c0 <updateUint16Item+0xd38>)
 800e2e8:	889b      	ldrh	r3, [r3, #4]
 800e2ea:	fb12 f303 	smulbb	r3, r2, r3
 800e2ee:	b29b      	uxth	r3, r3
 800e2f0:	4423      	add	r3, r4
 800e2f2:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800e2f4:	3301      	adds	r3, #1
 800e2f6:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800e2f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e2fc:	b29a      	uxth	r2, r3
 800e2fe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e302:	b299      	uxth	r1, r3
 800e304:	69fb      	ldr	r3, [r7, #28]
 800e306:	b29b      	uxth	r3, r3
 800e308:	fb11 f303 	smulbb	r3, r1, r3
 800e30c:	b29b      	uxth	r3, r3
 800e30e:	4413      	add	r3, r2
 800e310:	b29a      	uxth	r2, r3
 800e312:	4b2b      	ldr	r3, [pc, #172]	; (800e3c0 <updateUint16Item+0xd38>)
 800e314:	88db      	ldrh	r3, [r3, #6]
 800e316:	4413      	add	r3, r2
 800e318:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800e31a:	3301      	adds	r3, #1
 800e31c:	b29b      	uxth	r3, r3
 800e31e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e322:	9200      	str	r2, [sp, #0]
 800e324:	4602      	mov	r2, r0
 800e326:	4631      	mov	r1, r6
 800e328:	4628      	mov	r0, r5
 800e32a:	f7fa fb95 	bl	8008a58 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e32e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e332:	b29b      	uxth	r3, r3
 800e334:	3301      	adds	r3, #1
 800e336:	b298      	uxth	r0, r3
 800e338:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e33c:	b29a      	uxth	r2, r3
 800e33e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e342:	b299      	uxth	r1, r3
 800e344:	69fb      	ldr	r3, [r7, #28]
 800e346:	b29b      	uxth	r3, r3
 800e348:	fb11 f303 	smulbb	r3, r1, r3
 800e34c:	b29b      	uxth	r3, r3
 800e34e:	4413      	add	r3, r2
 800e350:	b29b      	uxth	r3, r3
 800e352:	3301      	adds	r3, #1
 800e354:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 800e356:	69fb      	ldr	r3, [r7, #28]
 800e358:	3301      	adds	r3, #1
 800e35a:	011b      	lsls	r3, r3, #4
 800e35c:	4a17      	ldr	r2, [pc, #92]	; (800e3bc <updateUint16Item+0xd34>)
 800e35e:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e360:	2300      	movs	r3, #0
 800e362:	9301      	str	r3, [sp, #4]
 800e364:	f24c 6318 	movw	r3, #50712	; 0xc618
 800e368:	9300      	str	r3, [sp, #0]
 800e36a:	4b15      	ldr	r3, [pc, #84]	; (800e3c0 <updateUint16Item+0xd38>)
 800e36c:	f7fa ff92 	bl	8009294 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e374:	b29a      	uxth	r2, r3
 800e376:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e37a:	085b      	lsrs	r3, r3, #1
 800e37c:	b2db      	uxtb	r3, r3
 800e37e:	b29b      	uxth	r3, r3
 800e380:	4413      	add	r3, r2
 800e382:	b29b      	uxth	r3, r3
 800e384:	3301      	adds	r3, #1
 800e386:	b298      	uxth	r0, r3
 800e388:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e38c:	b29a      	uxth	r2, r3
 800e38e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e392:	b299      	uxth	r1, r3
 800e394:	69fb      	ldr	r3, [r7, #28]
 800e396:	b29b      	uxth	r3, r3
 800e398:	fb11 f303 	smulbb	r3, r1, r3
 800e39c:	b29b      	uxth	r3, r3
 800e39e:	4413      	add	r3, r2
 800e3a0:	b29b      	uxth	r3, r3
 800e3a2:	3301      	adds	r3, #1
 800e3a4:	b299      	uxth	r1, r3
 800e3a6:	f107 020c 	add.w	r2, r7, #12
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	9301      	str	r3, [sp, #4]
 800e3ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e3b2:	9300      	str	r3, [sp, #0]
 800e3b4:	4b02      	ldr	r3, [pc, #8]	; (800e3c0 <updateUint16Item+0xd38>)
 800e3b6:	f7fa ff6d 	bl	8009294 <Paint_DrawString_EN>
 800e3ba:	e1e0      	b.n	800e77e <updateUint16Item+0x10f6>
 800e3bc:	2400ae1c 	.word	0x2400ae1c
 800e3c0:	24000018 	.word	0x24000018
								localString, &Font12, WHITE,  BLACK);
					}
				}
				else if (currentCursorPosition.cursorPosition == MULTIPLIER)
 800e3c4:	4ba2      	ldr	r3, [pc, #648]	; (800e650 <updateUint16Item+0xfc8>)
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	2b0c      	cmp	r3, #12
 800e3ca:	f040 814d 	bne.w	800e668 <updateUint16Item+0xfe0>
				{
					if (howToDraw == RIGHT)
 800e3ce:	79fb      	ldrb	r3, [r7, #7]
 800e3d0:	2b04      	cmp	r3, #4
 800e3d2:	f040 808c 	bne.w	800e4ee <updateUint16Item+0xe66>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800e3d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3da:	b29b      	uxth	r3, r3
 800e3dc:	3301      	adds	r3, #1
 800e3de:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e3e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e3e4:	b29a      	uxth	r2, r3
 800e3e6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e3ea:	b299      	uxth	r1, r3
 800e3ec:	69fb      	ldr	r3, [r7, #28]
 800e3ee:	b29b      	uxth	r3, r3
 800e3f0:	fb11 f303 	smulbb	r3, r1, r3
 800e3f4:	b29b      	uxth	r3, r3
 800e3f6:	4413      	add	r3, r2
 800e3f8:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 800e3fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e402:	b29c      	uxth	r4, r3
 800e404:	69fb      	ldr	r3, [r7, #28]
 800e406:	3301      	adds	r3, #1
 800e408:	011b      	lsls	r3, r3, #4
 800e40a:	4a92      	ldr	r2, [pc, #584]	; (800e654 <updateUint16Item+0xfcc>)
 800e40c:	4413      	add	r3, r2
 800e40e:	4618      	mov	r0, r3
 800e410:	f7f1 ff70 	bl	80002f4 <strlen>
 800e414:	4603      	mov	r3, r0
 800e416:	b29a      	uxth	r2, r3
 800e418:	4b8f      	ldr	r3, [pc, #572]	; (800e658 <updateUint16Item+0xfd0>)
 800e41a:	889b      	ldrh	r3, [r3, #4]
 800e41c:	fb12 f303 	smulbb	r3, r2, r3
 800e420:	b29b      	uxth	r3, r3
 800e422:	4423      	add	r3, r4
 800e424:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800e426:	3301      	adds	r3, #1
 800e428:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800e42a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e42e:	b29a      	uxth	r2, r3
 800e430:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e434:	b299      	uxth	r1, r3
 800e436:	69fb      	ldr	r3, [r7, #28]
 800e438:	b29b      	uxth	r3, r3
 800e43a:	fb11 f303 	smulbb	r3, r1, r3
 800e43e:	b29b      	uxth	r3, r3
 800e440:	4413      	add	r3, r2
 800e442:	b29a      	uxth	r2, r3
 800e444:	4b84      	ldr	r3, [pc, #528]	; (800e658 <updateUint16Item+0xfd0>)
 800e446:	88db      	ldrh	r3, [r3, #6]
 800e448:	4413      	add	r3, r2
 800e44a:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800e44c:	3301      	adds	r3, #1
 800e44e:	b29b      	uxth	r3, r3
 800e450:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e454:	9200      	str	r2, [sp, #0]
 800e456:	4602      	mov	r2, r0
 800e458:	4631      	mov	r1, r6
 800e45a:	4628      	mov	r0, r5
 800e45c:	f7fa fafc 	bl	8008a58 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e460:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e464:	b29b      	uxth	r3, r3
 800e466:	3301      	adds	r3, #1
 800e468:	b298      	uxth	r0, r3
 800e46a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e46e:	b29a      	uxth	r2, r3
 800e470:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e474:	b299      	uxth	r1, r3
 800e476:	69fb      	ldr	r3, [r7, #28]
 800e478:	b29b      	uxth	r3, r3
 800e47a:	fb11 f303 	smulbb	r3, r1, r3
 800e47e:	b29b      	uxth	r3, r3
 800e480:	4413      	add	r3, r2
 800e482:	b29b      	uxth	r3, r3
 800e484:	3301      	adds	r3, #1
 800e486:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 800e488:	69fb      	ldr	r3, [r7, #28]
 800e48a:	3301      	adds	r3, #1
 800e48c:	011b      	lsls	r3, r3, #4
 800e48e:	4a71      	ldr	r2, [pc, #452]	; (800e654 <updateUint16Item+0xfcc>)
 800e490:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e492:	2300      	movs	r3, #0
 800e494:	9301      	str	r3, [sp, #4]
 800e496:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e49a:	9300      	str	r3, [sp, #0]
 800e49c:	4b6e      	ldr	r3, [pc, #440]	; (800e658 <updateUint16Item+0xfd0>)
 800e49e:	f7fa fef9 	bl	8009294 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e4a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4a6:	b29a      	uxth	r2, r3
 800e4a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e4ac:	085b      	lsrs	r3, r3, #1
 800e4ae:	b2db      	uxtb	r3, r3
 800e4b0:	b29b      	uxth	r3, r3
 800e4b2:	4413      	add	r3, r2
 800e4b4:	b29b      	uxth	r3, r3
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	b298      	uxth	r0, r3
 800e4ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e4be:	b29a      	uxth	r2, r3
 800e4c0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e4c4:	b299      	uxth	r1, r3
 800e4c6:	69fb      	ldr	r3, [r7, #28]
 800e4c8:	b29b      	uxth	r3, r3
 800e4ca:	fb11 f303 	smulbb	r3, r1, r3
 800e4ce:	b29b      	uxth	r3, r3
 800e4d0:	4413      	add	r3, r2
 800e4d2:	b29b      	uxth	r3, r3
 800e4d4:	3301      	adds	r3, #1
 800e4d6:	b299      	uxth	r1, r3
 800e4d8:	f107 020c 	add.w	r2, r7, #12
 800e4dc:	2300      	movs	r3, #0
 800e4de:	9301      	str	r3, [sp, #4]
 800e4e0:	f24c 6318 	movw	r3, #50712	; 0xc618
 800e4e4:	9300      	str	r3, [sp, #0]
 800e4e6:	4b5c      	ldr	r3, [pc, #368]	; (800e658 <updateUint16Item+0xfd0>)
 800e4e8:	f7fa fed4 	bl	8009294 <Paint_DrawString_EN>
 800e4ec:	e147      	b.n	800e77e <updateUint16Item+0x10f6>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == DOWN)
 800e4ee:	79fb      	ldrb	r3, [r7, #7]
 800e4f0:	2b01      	cmp	r3, #1
 800e4f2:	d155      	bne.n	800e5a0 <updateUint16Item+0xf18>
					{
						if (multiplierIndex >= 1)
 800e4f4:	4b59      	ldr	r3, [pc, #356]	; (800e65c <updateUint16Item+0xfd4>)
 800e4f6:	781b      	ldrb	r3, [r3, #0]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d017      	beq.n	800e52c <updateUint16Item+0xea4>
						{
							multiplierIndex = fmax(multiplierIndex - 1, 0);
 800e4fc:	4b57      	ldr	r3, [pc, #348]	; (800e65c <updateUint16Item+0xfd4>)
 800e4fe:	781b      	ldrb	r3, [r3, #0]
 800e500:	3b01      	subs	r3, #1
 800e502:	ee07 3a90 	vmov	s15, r3
 800e506:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e50a:	ed9f 1b4f 	vldr	d1, [pc, #316]	; 800e648 <updateUint16Item+0xfc0>
 800e50e:	eeb0 0b47 	vmov.f64	d0, d7
 800e512:	f006 fb7b 	bl	8014c0c <fmax>
 800e516:	eeb0 7b40 	vmov.f64	d7, d0
 800e51a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800e51e:	edc7 7a00 	vstr	s15, [r7]
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	b2da      	uxtb	r2, r3
 800e526:	4b4d      	ldr	r3, [pc, #308]	; (800e65c <updateUint16Item+0xfd4>)
 800e528:	701a      	strb	r2, [r3, #0]
 800e52a:	e002      	b.n	800e532 <updateUint16Item+0xeaa>
						}
						else
						{
							multiplierIndex = 0;
 800e52c:	4b4b      	ldr	r3, [pc, #300]	; (800e65c <updateUint16Item+0xfd4>)
 800e52e:	2200      	movs	r2, #0
 800e530:	701a      	strb	r2, [r3, #0]
						}
						uint16Item.deltaMultiplier = uint16MultiplierArray[multiplierIndex];
 800e532:	4b4a      	ldr	r3, [pc, #296]	; (800e65c <updateUint16Item+0xfd4>)
 800e534:	781b      	ldrb	r3, [r3, #0]
 800e536:	461a      	mov	r2, r3
 800e538:	4b49      	ldr	r3, [pc, #292]	; (800e660 <updateUint16Item+0xfd8>)
 800e53a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800e53e:	4b45      	ldr	r3, [pc, #276]	; (800e654 <updateUint16Item+0xfcc>)
 800e540:	819a      	strh	r2, [r3, #12]
						sprintf(localString,"%04d",uint16Item.deltaMultiplier);
 800e542:	4b44      	ldr	r3, [pc, #272]	; (800e654 <updateUint16Item+0xfcc>)
 800e544:	899b      	ldrh	r3, [r3, #12]
 800e546:	461a      	mov	r2, r3
 800e548:	f107 030c 	add.w	r3, r7, #12
 800e54c:	4945      	ldr	r1, [pc, #276]	; (800e664 <updateUint16Item+0xfdc>)
 800e54e:	4618      	mov	r0, r3
 800e550:	f002 ffe0 	bl	8011514 <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e558:	b29a      	uxth	r2, r3
 800e55a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e55e:	085b      	lsrs	r3, r3, #1
 800e560:	b2db      	uxtb	r3, r3
 800e562:	b29b      	uxth	r3, r3
 800e564:	4413      	add	r3, r2
 800e566:	b29b      	uxth	r3, r3
 800e568:	3301      	adds	r3, #1
 800e56a:	b298      	uxth	r0, r3
 800e56c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e570:	b29a      	uxth	r2, r3
 800e572:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e576:	b299      	uxth	r1, r3
 800e578:	69fb      	ldr	r3, [r7, #28]
 800e57a:	b29b      	uxth	r3, r3
 800e57c:	fb11 f303 	smulbb	r3, r1, r3
 800e580:	b29b      	uxth	r3, r3
 800e582:	4413      	add	r3, r2
 800e584:	b29b      	uxth	r3, r3
 800e586:	3301      	adds	r3, #1
 800e588:	b299      	uxth	r1, r3
 800e58a:	f107 020c 	add.w	r2, r7, #12
 800e58e:	2300      	movs	r3, #0
 800e590:	9301      	str	r3, [sp, #4]
 800e592:	f24c 6318 	movw	r3, #50712	; 0xc618
 800e596:	9300      	str	r3, [sp, #0]
 800e598:	4b2f      	ldr	r3, [pc, #188]	; (800e658 <updateUint16Item+0xfd0>)
 800e59a:	f7fa fe7b 	bl	8009294 <Paint_DrawString_EN>
 800e59e:	e0ee      	b.n	800e77e <updateUint16Item+0x10f6>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == UP)
 800e5a0:	79fb      	ldrb	r3, [r7, #7]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	f040 80eb 	bne.w	800e77e <updateUint16Item+0x10f6>
					{
						multiplierIndex = fmin(multiplierIndex + 1, 7);
 800e5a8:	4b2c      	ldr	r3, [pc, #176]	; (800e65c <updateUint16Item+0xfd4>)
 800e5aa:	781b      	ldrb	r3, [r3, #0]
 800e5ac:	3301      	adds	r3, #1
 800e5ae:	ee07 3a90 	vmov	s15, r3
 800e5b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e5b6:	eeb1 1b0c 	vmov.f64	d1, #28	; 0x40e00000  7.0
 800e5ba:	eeb0 0b47 	vmov.f64	d0, d7
 800e5be:	f006 fb40 	bl	8014c42 <fmin>
 800e5c2:	eeb0 7b40 	vmov.f64	d7, d0
 800e5c6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800e5ca:	edc7 7a00 	vstr	s15, [r7]
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	b2da      	uxtb	r2, r3
 800e5d2:	4b22      	ldr	r3, [pc, #136]	; (800e65c <updateUint16Item+0xfd4>)
 800e5d4:	701a      	strb	r2, [r3, #0]
						uint16Item.deltaMultiplier = uint16MultiplierArray[multiplierIndex];
 800e5d6:	4b21      	ldr	r3, [pc, #132]	; (800e65c <updateUint16Item+0xfd4>)
 800e5d8:	781b      	ldrb	r3, [r3, #0]
 800e5da:	461a      	mov	r2, r3
 800e5dc:	4b20      	ldr	r3, [pc, #128]	; (800e660 <updateUint16Item+0xfd8>)
 800e5de:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800e5e2:	4b1c      	ldr	r3, [pc, #112]	; (800e654 <updateUint16Item+0xfcc>)
 800e5e4:	819a      	strh	r2, [r3, #12]
						sprintf(localString,"%04d",uint16Item.deltaMultiplier);
 800e5e6:	4b1b      	ldr	r3, [pc, #108]	; (800e654 <updateUint16Item+0xfcc>)
 800e5e8:	899b      	ldrh	r3, [r3, #12]
 800e5ea:	461a      	mov	r2, r3
 800e5ec:	f107 030c 	add.w	r3, r7, #12
 800e5f0:	491c      	ldr	r1, [pc, #112]	; (800e664 <updateUint16Item+0xfdc>)
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f002 ff8e 	bl	8011514 <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e5f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5fc:	b29a      	uxth	r2, r3
 800e5fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e602:	085b      	lsrs	r3, r3, #1
 800e604:	b2db      	uxtb	r3, r3
 800e606:	b29b      	uxth	r3, r3
 800e608:	4413      	add	r3, r2
 800e60a:	b29b      	uxth	r3, r3
 800e60c:	3301      	adds	r3, #1
 800e60e:	b298      	uxth	r0, r3
 800e610:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e614:	b29a      	uxth	r2, r3
 800e616:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e61a:	b299      	uxth	r1, r3
 800e61c:	69fb      	ldr	r3, [r7, #28]
 800e61e:	b29b      	uxth	r3, r3
 800e620:	fb11 f303 	smulbb	r3, r1, r3
 800e624:	b29b      	uxth	r3, r3
 800e626:	4413      	add	r3, r2
 800e628:	b29b      	uxth	r3, r3
 800e62a:	3301      	adds	r3, #1
 800e62c:	b299      	uxth	r1, r3
 800e62e:	f107 020c 	add.w	r2, r7, #12
 800e632:	2300      	movs	r3, #0
 800e634:	9301      	str	r3, [sp, #4]
 800e636:	f24c 6318 	movw	r3, #50712	; 0xc618
 800e63a:	9300      	str	r3, [sp, #0]
 800e63c:	4b06      	ldr	r3, [pc, #24]	; (800e658 <updateUint16Item+0xfd0>)
 800e63e:	f7fa fe29 	bl	8009294 <Paint_DrawString_EN>
 800e642:	e09c      	b.n	800e77e <updateUint16Item+0x10f6>
 800e644:	f3af 8000 	nop.w
	...
 800e650:	2400a5bc 	.word	0x2400a5bc
 800e654:	2400ae1c 	.word	0x2400ae1c
 800e658:	24000018 	.word	0x24000018
 800e65c:	2400a0d8 	.word	0x2400a0d8
 800e660:	2400a0dc 	.word	0x2400a0dc
 800e664:	0801539c 	.word	0x0801539c
					//									localString, &Font12, WHITE,  BLACK);
					//						}
				}
				else
				{
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800e668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e66c:	b29b      	uxth	r3, r3
 800e66e:	3301      	adds	r3, #1
 800e670:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e672:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e676:	b29a      	uxth	r2, r3
 800e678:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e67c:	b299      	uxth	r1, r3
 800e67e:	69fb      	ldr	r3, [r7, #28]
 800e680:	b29b      	uxth	r3, r3
 800e682:	fb11 f303 	smulbb	r3, r1, r3
 800e686:	b29b      	uxth	r3, r3
 800e688:	4413      	add	r3, r2
 800e68a:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800e68c:	3301      	adds	r3, #1
 800e68e:	b29e      	uxth	r6, r3
							MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 800e690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e694:	b29c      	uxth	r4, r3
 800e696:	69fb      	ldr	r3, [r7, #28]
 800e698:	3301      	adds	r3, #1
 800e69a:	011b      	lsls	r3, r3, #4
 800e69c:	4a9c      	ldr	r2, [pc, #624]	; (800e910 <updateUint16Item+0x1288>)
 800e69e:	4413      	add	r3, r2
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f7f1 fe27 	bl	80002f4 <strlen>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	b29a      	uxth	r2, r3
 800e6aa:	4b9a      	ldr	r3, [pc, #616]	; (800e914 <updateUint16Item+0x128c>)
 800e6ac:	889b      	ldrh	r3, [r3, #4]
 800e6ae:	fb12 f303 	smulbb	r3, r2, r3
 800e6b2:	b29b      	uxth	r3, r3
 800e6b4:	4423      	add	r3, r4
 800e6b6:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800e6b8:	3301      	adds	r3, #1
 800e6ba:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800e6bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e6c0:	b29a      	uxth	r2, r3
 800e6c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e6c6:	b299      	uxth	r1, r3
 800e6c8:	69fb      	ldr	r3, [r7, #28]
 800e6ca:	b29b      	uxth	r3, r3
 800e6cc:	fb11 f303 	smulbb	r3, r1, r3
 800e6d0:	b29b      	uxth	r3, r3
 800e6d2:	4413      	add	r3, r2
 800e6d4:	b29a      	uxth	r2, r3
 800e6d6:	4b8f      	ldr	r3, [pc, #572]	; (800e914 <updateUint16Item+0x128c>)
 800e6d8:	88db      	ldrh	r3, [r3, #6]
 800e6da:	4413      	add	r3, r2
 800e6dc:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800e6de:	3301      	adds	r3, #1
 800e6e0:	b29b      	uxth	r3, r3
 800e6e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6e6:	9200      	str	r2, [sp, #0]
 800e6e8:	4602      	mov	r2, r0
 800e6ea:	4631      	mov	r1, r6
 800e6ec:	4628      	mov	r0, r5
 800e6ee:	f7fa f9b3 	bl	8008a58 <Paint_ClearWindows>
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e6f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6f6:	b29b      	uxth	r3, r3
 800e6f8:	3301      	adds	r3, #1
 800e6fa:	b298      	uxth	r0, r3
 800e6fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e700:	b29a      	uxth	r2, r3
 800e702:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e706:	b299      	uxth	r1, r3
 800e708:	69fb      	ldr	r3, [r7, #28]
 800e70a:	b29b      	uxth	r3, r3
 800e70c:	fb11 f303 	smulbb	r3, r1, r3
 800e710:	b29b      	uxth	r3, r3
 800e712:	4413      	add	r3, r2
 800e714:	b29b      	uxth	r3, r3
 800e716:	3301      	adds	r3, #1
 800e718:	b299      	uxth	r1, r3
							uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 800e71a:	69fb      	ldr	r3, [r7, #28]
 800e71c:	3301      	adds	r3, #1
 800e71e:	011b      	lsls	r3, r3, #4
 800e720:	4a7b      	ldr	r2, [pc, #492]	; (800e910 <updateUint16Item+0x1288>)
 800e722:	441a      	add	r2, r3
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e724:	2300      	movs	r3, #0
 800e726:	9301      	str	r3, [sp, #4]
 800e728:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e72c:	9300      	str	r3, [sp, #0]
 800e72e:	4b79      	ldr	r3, [pc, #484]	; (800e914 <updateUint16Item+0x128c>)
 800e730:	f7fa fdb0 	bl	8009294 <Paint_DrawString_EN>
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e738:	b29a      	uxth	r2, r3
 800e73a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e73e:	085b      	lsrs	r3, r3, #1
 800e740:	b2db      	uxtb	r3, r3
 800e742:	b29b      	uxth	r3, r3
 800e744:	4413      	add	r3, r2
 800e746:	b29b      	uxth	r3, r3
 800e748:	3301      	adds	r3, #1
 800e74a:	b298      	uxth	r0, r3
 800e74c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e750:	b29a      	uxth	r2, r3
 800e752:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e756:	b299      	uxth	r1, r3
 800e758:	69fb      	ldr	r3, [r7, #28]
 800e75a:	b29b      	uxth	r3, r3
 800e75c:	fb11 f303 	smulbb	r3, r1, r3
 800e760:	b29b      	uxth	r3, r3
 800e762:	4413      	add	r3, r2
 800e764:	b29b      	uxth	r3, r3
 800e766:	3301      	adds	r3, #1
 800e768:	b299      	uxth	r1, r3
 800e76a:	f107 020c 	add.w	r2, r7, #12
 800e76e:	2300      	movs	r3, #0
 800e770:	9301      	str	r3, [sp, #4]
 800e772:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e776:	9300      	str	r3, [sp, #0]
 800e778:	4b66      	ldr	r3, [pc, #408]	; (800e914 <updateUint16Item+0x128c>)
 800e77a:	f7fa fd8b 	bl	8009294 <Paint_DrawString_EN>
			}
		}
		//			Paint_DrawRectangle( HorizontalMenuRectangleStartX + HorizontalMenuRectangleWidth / 2, HorizontalMenuRectangleStartY + HorizontalMenuRectangleHeight * (i + 1),
		//					HorizontalMenuRectangleStartX + HorizontalMenuRectangleWidth, HorizontalMenuRectangleStartY + HorizontalMenuRectangleHeight * (i + 2),
		//					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
		if ( (i >= uint16Item.numberOfItemsInPage - 2) && (i < uint16Item.numberOfItemsInPage) )
 800e77e:	4b64      	ldr	r3, [pc, #400]	; (800e910 <updateUint16Item+0x1288>)
 800e780:	7bdb      	ldrb	r3, [r3, #15]
 800e782:	3b02      	subs	r3, #2
 800e784:	69fa      	ldr	r2, [r7, #28]
 800e786:	429a      	cmp	r2, r3
 800e788:	f2c0 8299 	blt.w	800ecbe <updateUint16Item+0x1636>
 800e78c:	4b60      	ldr	r3, [pc, #384]	; (800e910 <updateUint16Item+0x1288>)
 800e78e:	7bdb      	ldrb	r3, [r3, #15]
 800e790:	461a      	mov	r2, r3
 800e792:	69fb      	ldr	r3, [r7, #28]
 800e794:	4293      	cmp	r3, r2
 800e796:	f280 8292 	bge.w	800ecbe <updateUint16Item+0x1636>
		{
			if (howToDraw == FULL)
 800e79a:	79fb      	ldrb	r3, [r7, #7]
 800e79c:	2b02      	cmp	r3, #2
 800e79e:	f040 8084 	bne.w	800e8aa <updateUint16Item+0x1222>
			{
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800e7a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7a6:	b298      	uxth	r0, r3
 800e7a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e7ac:	b29a      	uxth	r2, r3
 800e7ae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e7b2:	b299      	uxth	r1, r3
 800e7b4:	69fb      	ldr	r3, [r7, #28]
 800e7b6:	b29b      	uxth	r3, r3
 800e7b8:	fb11 f303 	smulbb	r3, r1, r3
 800e7bc:	b29b      	uxth	r3, r3
 800e7be:	4413      	add	r3, r2
 800e7c0:	b29c      	uxth	r4, r3
 800e7c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7c6:	b29a      	uxth	r2, r3
 800e7c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e7cc:	b29b      	uxth	r3, r3
 800e7ce:	4413      	add	r3, r2
 800e7d0:	b29d      	uxth	r5, r3
 800e7d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e7d6:	b29a      	uxth	r2, r3
 800e7d8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e7dc:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 800e7de:	69fb      	ldr	r3, [r7, #28]
 800e7e0:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800e7e2:	b29b      	uxth	r3, r3
 800e7e4:	fb11 f303 	smulbb	r3, r1, r3
 800e7e8:	b29b      	uxth	r3, r3
 800e7ea:	4413      	add	r3, r2
 800e7ec:	b29b      	uxth	r3, r3
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	9202      	str	r2, [sp, #8]
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	9201      	str	r2, [sp, #4]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	9200      	str	r2, [sp, #0]
 800e7fa:	462a      	mov	r2, r5
 800e7fc:	4621      	mov	r1, r4
 800e7fe:	f7fa faa5 	bl	8008d4c <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
				if (currentCursorPosition.cursorPosition == i)
 800e802:	4b45      	ldr	r3, [pc, #276]	; (800e918 <updateUint16Item+0x1290>)
 800e804:	781b      	ldrb	r3, [r3, #0]
 800e806:	461a      	mov	r2, r3
 800e808:	69fb      	ldr	r3, [r7, #28]
 800e80a:	4293      	cmp	r3, r2
 800e80c:	d126      	bne.n	800e85c <updateUint16Item+0x11d4>
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800e80e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e812:	b29c      	uxth	r4, r3
 800e814:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e818:	b29a      	uxth	r2, r3
 800e81a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e81e:	b299      	uxth	r1, r3
 800e820:	69fb      	ldr	r3, [r7, #28]
 800e822:	b29b      	uxth	r3, r3
 800e824:	fb11 f303 	smulbb	r3, r1, r3
 800e828:	b29b      	uxth	r3, r3
 800e82a:	4413      	add	r3, r2
 800e82c:	b29b      	uxth	r3, r3
 800e82e:	3301      	adds	r3, #1
 800e830:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i], BLACK, LGRAY, 16, Font12);
 800e832:	69fb      	ldr	r3, [r7, #28]
 800e834:	3301      	adds	r3, #1
 800e836:	011b      	lsls	r3, r3, #4
 800e838:	4a35      	ldr	r2, [pc, #212]	; (800e910 <updateUint16Item+0x1288>)
 800e83a:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800e83c:	4935      	ldr	r1, [pc, #212]	; (800e914 <updateUint16Item+0x128c>)
 800e83e:	ab02      	add	r3, sp, #8
 800e840:	c903      	ldmia	r1, {r0, r1}
 800e842:	e883 0003 	stmia.w	r3, {r0, r1}
 800e846:	2310      	movs	r3, #16
 800e848:	9301      	str	r3, [sp, #4]
 800e84a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800e84e:	9300      	str	r3, [sp, #0]
 800e850:	2300      	movs	r3, #0
 800e852:	4629      	mov	r1, r5
 800e854:	4620      	mov	r0, r4
 800e856:	f7fd fe17 	bl	800c488 <centeredString>
 800e85a:	e230      	b.n	800ecbe <updateUint16Item+0x1636>
				}
				else
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800e85c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e860:	b29c      	uxth	r4, r3
 800e862:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e866:	b29a      	uxth	r2, r3
 800e868:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e86c:	b299      	uxth	r1, r3
 800e86e:	69fb      	ldr	r3, [r7, #28]
 800e870:	b29b      	uxth	r3, r3
 800e872:	fb11 f303 	smulbb	r3, r1, r3
 800e876:	b29b      	uxth	r3, r3
 800e878:	4413      	add	r3, r2
 800e87a:	b29b      	uxth	r3, r3
 800e87c:	3301      	adds	r3, #1
 800e87e:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i], BLACK, WHITE, 16, Font12);
 800e880:	69fb      	ldr	r3, [r7, #28]
 800e882:	3301      	adds	r3, #1
 800e884:	011b      	lsls	r3, r3, #4
 800e886:	4a22      	ldr	r2, [pc, #136]	; (800e910 <updateUint16Item+0x1288>)
 800e888:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800e88a:	4922      	ldr	r1, [pc, #136]	; (800e914 <updateUint16Item+0x128c>)
 800e88c:	ab02      	add	r3, sp, #8
 800e88e:	c903      	ldmia	r1, {r0, r1}
 800e890:	e883 0003 	stmia.w	r3, {r0, r1}
 800e894:	2310      	movs	r3, #16
 800e896:	9301      	str	r3, [sp, #4]
 800e898:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e89c:	9300      	str	r3, [sp, #0]
 800e89e:	2300      	movs	r3, #0
 800e8a0:	4629      	mov	r1, r5
 800e8a2:	4620      	mov	r0, r4
 800e8a4:	f7fd fdf0 	bl	800c488 <centeredString>
 800e8a8:	e209      	b.n	800ecbe <updateUint16Item+0x1636>
				}
			}
			else if (howToDraw == DOWN)
 800e8aa:	79fb      	ldrb	r3, [r7, #7]
 800e8ac:	2b01      	cmp	r3, #1
 800e8ae:	f040 80d1 	bne.w	800ea54 <updateUint16Item+0x13cc>
			{
				if ( (currentCursorPosition.cursorPosition == 4) && (i == 4) )
 800e8b2:	4b19      	ldr	r3, [pc, #100]	; (800e918 <updateUint16Item+0x1290>)
 800e8b4:	781b      	ldrb	r3, [r3, #0]
 800e8b6:	2b04      	cmp	r3, #4
 800e8b8:	d130      	bne.n	800e91c <updateUint16Item+0x1294>
 800e8ba:	69fb      	ldr	r3, [r7, #28]
 800e8bc:	2b04      	cmp	r3, #4
 800e8be:	d12d      	bne.n	800e91c <updateUint16Item+0x1294>
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800e8c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e8c4:	b29c      	uxth	r4, r3
 800e8c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e8ca:	b29a      	uxth	r2, r3
 800e8cc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e8d0:	b299      	uxth	r1, r3
 800e8d2:	69fb      	ldr	r3, [r7, #28]
 800e8d4:	b29b      	uxth	r3, r3
 800e8d6:	fb11 f303 	smulbb	r3, r1, r3
 800e8da:	b29b      	uxth	r3, r3
 800e8dc:	4413      	add	r3, r2
 800e8de:	b29b      	uxth	r3, r3
 800e8e0:	3301      	adds	r3, #1
 800e8e2:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i], BLACK, LGRAY, 16, Font12);
 800e8e4:	69fb      	ldr	r3, [r7, #28]
 800e8e6:	3301      	adds	r3, #1
 800e8e8:	011b      	lsls	r3, r3, #4
 800e8ea:	4a09      	ldr	r2, [pc, #36]	; (800e910 <updateUint16Item+0x1288>)
 800e8ec:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800e8ee:	4909      	ldr	r1, [pc, #36]	; (800e914 <updateUint16Item+0x128c>)
 800e8f0:	ab02      	add	r3, sp, #8
 800e8f2:	c903      	ldmia	r1, {r0, r1}
 800e8f4:	e883 0003 	stmia.w	r3, {r0, r1}
 800e8f8:	2310      	movs	r3, #16
 800e8fa:	9301      	str	r3, [sp, #4]
 800e8fc:	f24c 6318 	movw	r3, #50712	; 0xc618
 800e900:	9300      	str	r3, [sp, #0]
 800e902:	2300      	movs	r3, #0
 800e904:	4629      	mov	r1, r5
 800e906:	4620      	mov	r0, r4
 800e908:	f7fd fdbe 	bl	800c488 <centeredString>
 800e90c:	e1d7      	b.n	800ecbe <updateUint16Item+0x1636>
 800e90e:	bf00      	nop
 800e910:	2400ae1c 	.word	0x2400ae1c
 800e914:	24000018 	.word	0x24000018
 800e918:	2400a5bc 	.word	0x2400a5bc
				}
				else if ( (currentCursorPosition.cursorPosition == 5) && (i == 5) )
 800e91c:	4b90      	ldr	r3, [pc, #576]	; (800eb60 <updateUint16Item+0x14d8>)
 800e91e:	781b      	ldrb	r3, [r3, #0]
 800e920:	2b05      	cmp	r3, #5
 800e922:	f040 81cc 	bne.w	800ecbe <updateUint16Item+0x1636>
 800e926:	69fb      	ldr	r3, [r7, #28]
 800e928:	2b05      	cmp	r3, #5
 800e92a:	f040 81c8 	bne.w	800ecbe <updateUint16Item+0x1636>
				{
					Paint_ClearWindows(DisplayCenterWidth,
 800e92e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e932:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 800e934:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e938:	b29a      	uxth	r2, r3
 800e93a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e93e:	b299      	uxth	r1, r3
 800e940:	69fb      	ldr	r3, [r7, #28]
 800e942:	3b01      	subs	r3, #1
 800e944:	b29b      	uxth	r3, r3
 800e946:	fb11 f303 	smulbb	r3, r1, r3
 800e94a:	b29b      	uxth	r3, r3
 800e94c:	4413      	add	r3, r2
 800e94e:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth,
 800e950:	3301      	adds	r3, #1
 800e952:	b29e      	uxth	r6, r3
 800e954:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e958:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(uint16Item.itemsArray[i - 1]) * Font12.Width,
 800e95a:	69fb      	ldr	r3, [r7, #28]
 800e95c:	3b01      	subs	r3, #1
 800e95e:	3301      	adds	r3, #1
 800e960:	011b      	lsls	r3, r3, #4
 800e962:	4a80      	ldr	r2, [pc, #512]	; (800eb64 <updateUint16Item+0x14dc>)
 800e964:	4413      	add	r3, r2
 800e966:	4618      	mov	r0, r3
 800e968:	f7f1 fcc4 	bl	80002f4 <strlen>
 800e96c:	4603      	mov	r3, r0
					Paint_ClearWindows(DisplayCenterWidth,
 800e96e:	b29a      	uxth	r2, r3
							DisplayCenterWidth + strlen(uint16Item.itemsArray[i - 1]) * Font12.Width,
 800e970:	4b7d      	ldr	r3, [pc, #500]	; (800eb68 <updateUint16Item+0x14e0>)
 800e972:	889b      	ldrh	r3, [r3, #4]
					Paint_ClearWindows(DisplayCenterWidth,
 800e974:	fb12 f303 	smulbb	r3, r2, r3
 800e978:	b29b      	uxth	r3, r3
 800e97a:	4423      	add	r3, r4
 800e97c:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1 + Font12.Height, WHITE);
 800e97e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e982:	b29a      	uxth	r2, r3
 800e984:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e988:	b299      	uxth	r1, r3
 800e98a:	69fb      	ldr	r3, [r7, #28]
 800e98c:	3b01      	subs	r3, #1
 800e98e:	b29b      	uxth	r3, r3
 800e990:	fb11 f303 	smulbb	r3, r1, r3
 800e994:	b29b      	uxth	r3, r3
 800e996:	4413      	add	r3, r2
 800e998:	b29a      	uxth	r2, r3
 800e99a:	4b73      	ldr	r3, [pc, #460]	; (800eb68 <updateUint16Item+0x14e0>)
 800e99c:	88db      	ldrh	r3, [r3, #6]
 800e99e:	4413      	add	r3, r2
 800e9a0:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth,
 800e9a2:	3301      	adds	r3, #1
 800e9a4:	b29b      	uxth	r3, r3
 800e9a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e9aa:	9200      	str	r2, [sp, #0]
 800e9ac:	4602      	mov	r2, r0
 800e9ae:	4631      	mov	r1, r6
 800e9b0:	4628      	mov	r0, r5
 800e9b2:	f7fa f851 	bl	8008a58 <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 800e9b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e9ba:	b29c      	uxth	r4, r3
 800e9bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e9c0:	b29a      	uxth	r2, r3
 800e9c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e9c6:	b299      	uxth	r1, r3
 800e9c8:	69fb      	ldr	r3, [r7, #28]
 800e9ca:	3b01      	subs	r3, #1
 800e9cc:	b29b      	uxth	r3, r3
 800e9ce:	fb11 f303 	smulbb	r3, r1, r3
 800e9d2:	b29b      	uxth	r3, r3
 800e9d4:	4413      	add	r3, r2
 800e9d6:	b29b      	uxth	r3, r3
 800e9d8:	3301      	adds	r3, #1
 800e9da:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[(i - 1)], BLACK, WHITE, 16, Font12);
 800e9dc:	69fb      	ldr	r3, [r7, #28]
 800e9de:	3b01      	subs	r3, #1
 800e9e0:	3301      	adds	r3, #1
 800e9e2:	011b      	lsls	r3, r3, #4
 800e9e4:	4a5f      	ldr	r2, [pc, #380]	; (800eb64 <updateUint16Item+0x14dc>)
 800e9e6:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 800e9e8:	495f      	ldr	r1, [pc, #380]	; (800eb68 <updateUint16Item+0x14e0>)
 800e9ea:	ab02      	add	r3, sp, #8
 800e9ec:	c903      	ldmia	r1, {r0, r1}
 800e9ee:	e883 0003 	stmia.w	r3, {r0, r1}
 800e9f2:	2310      	movs	r3, #16
 800e9f4:	9301      	str	r3, [sp, #4]
 800e9f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e9fa:	9300      	str	r3, [sp, #0]
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	4629      	mov	r1, r5
 800ea00:	4620      	mov	r0, r4
 800ea02:	f7fd fd41 	bl	800c488 <centeredString>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800ea06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ea0a:	b29c      	uxth	r4, r3
 800ea0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea10:	b29a      	uxth	r2, r3
 800ea12:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ea16:	b299      	uxth	r1, r3
 800ea18:	69fb      	ldr	r3, [r7, #28]
 800ea1a:	b29b      	uxth	r3, r3
 800ea1c:	fb11 f303 	smulbb	r3, r1, r3
 800ea20:	b29b      	uxth	r3, r3
 800ea22:	4413      	add	r3, r2
 800ea24:	b29b      	uxth	r3, r3
 800ea26:	3301      	adds	r3, #1
 800ea28:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i], BLACK, LGRAY, 16, Font12);
 800ea2a:	69fb      	ldr	r3, [r7, #28]
 800ea2c:	3301      	adds	r3, #1
 800ea2e:	011b      	lsls	r3, r3, #4
 800ea30:	4a4c      	ldr	r2, [pc, #304]	; (800eb64 <updateUint16Item+0x14dc>)
 800ea32:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800ea34:	494c      	ldr	r1, [pc, #304]	; (800eb68 <updateUint16Item+0x14e0>)
 800ea36:	ab02      	add	r3, sp, #8
 800ea38:	c903      	ldmia	r1, {r0, r1}
 800ea3a:	e883 0003 	stmia.w	r3, {r0, r1}
 800ea3e:	2310      	movs	r3, #16
 800ea40:	9301      	str	r3, [sp, #4]
 800ea42:	f24c 6318 	movw	r3, #50712	; 0xc618
 800ea46:	9300      	str	r3, [sp, #0]
 800ea48:	2300      	movs	r3, #0
 800ea4a:	4629      	mov	r1, r5
 800ea4c:	4620      	mov	r0, r4
 800ea4e:	f7fd fd1b 	bl	800c488 <centeredString>
 800ea52:	e134      	b.n	800ecbe <updateUint16Item+0x1636>
				}
			}
			else if (howToDraw == UP)
 800ea54:	79fb      	ldrb	r3, [r7, #7]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	f040 8131 	bne.w	800ecbe <updateUint16Item+0x1636>
			{
				if ( (currentCursorPosition.cursorPosition == 3) && (i == 4) )
 800ea5c:	4b40      	ldr	r3, [pc, #256]	; (800eb60 <updateUint16Item+0x14d8>)
 800ea5e:	781b      	ldrb	r3, [r3, #0]
 800ea60:	2b03      	cmp	r3, #3
 800ea62:	f040 8083 	bne.w	800eb6c <updateUint16Item+0x14e4>
 800ea66:	69fb      	ldr	r3, [r7, #28]
 800ea68:	2b04      	cmp	r3, #4
 800ea6a:	d17f      	bne.n	800eb6c <updateUint16Item+0x14e4>
				{
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 800ea6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ea70:	b29c      	uxth	r4, r3
 800ea72:	69fb      	ldr	r3, [r7, #28]
 800ea74:	3301      	adds	r3, #1
 800ea76:	011b      	lsls	r3, r3, #4
 800ea78:	4a3a      	ldr	r2, [pc, #232]	; (800eb64 <updateUint16Item+0x14dc>)
 800ea7a:	4413      	add	r3, r2
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f7f1 fc39 	bl	80002f4 <strlen>
 800ea82:	4603      	mov	r3, r0
 800ea84:	4a38      	ldr	r2, [pc, #224]	; (800eb68 <updateUint16Item+0x14e0>)
 800ea86:	8892      	ldrh	r2, [r2, #4]
 800ea88:	fb02 f303 	mul.w	r3, r2, r3
 800ea8c:	085b      	lsrs	r3, r3, #1
 800ea8e:	b29b      	uxth	r3, r3
 800ea90:	1ae3      	subs	r3, r4, r3
 800ea92:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800ea94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea98:	b29a      	uxth	r2, r3
 800ea9a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ea9e:	b299      	uxth	r1, r3
 800eaa0:	69fb      	ldr	r3, [r7, #28]
 800eaa2:	b29b      	uxth	r3, r3
 800eaa4:	fb11 f303 	smulbb	r3, r1, r3
 800eaa8:	b29b      	uxth	r3, r3
 800eaaa:	4413      	add	r3, r2
 800eaac:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 800eaae:	3301      	adds	r3, #1
 800eab0:	b29e      	uxth	r6, r3
 800eab2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eab6:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(uint16Item.itemsArray[i]) * Font12.Width /2,
 800eab8:	69fb      	ldr	r3, [r7, #28]
 800eaba:	3301      	adds	r3, #1
 800eabc:	011b      	lsls	r3, r3, #4
 800eabe:	4a29      	ldr	r2, [pc, #164]	; (800eb64 <updateUint16Item+0x14dc>)
 800eac0:	4413      	add	r3, r2
 800eac2:	4618      	mov	r0, r3
 800eac4:	f7f1 fc16 	bl	80002f4 <strlen>
 800eac8:	4603      	mov	r3, r0
 800eaca:	4a27      	ldr	r2, [pc, #156]	; (800eb68 <updateUint16Item+0x14e0>)
 800eacc:	8892      	ldrh	r2, [r2, #4]
 800eace:	fb02 f303 	mul.w	r3, r2, r3
 800ead2:	085b      	lsrs	r3, r3, #1
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 800ead4:	b29b      	uxth	r3, r3
 800ead6:	4423      	add	r3, r4
 800ead8:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800eada:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eade:	b29a      	uxth	r2, r3
 800eae0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800eae4:	b299      	uxth	r1, r3
 800eae6:	69fb      	ldr	r3, [r7, #28]
 800eae8:	b29b      	uxth	r3, r3
 800eaea:	fb11 f303 	smulbb	r3, r1, r3
 800eaee:	b29b      	uxth	r3, r3
 800eaf0:	4413      	add	r3, r2
 800eaf2:	b29a      	uxth	r2, r3
 800eaf4:	4b1c      	ldr	r3, [pc, #112]	; (800eb68 <updateUint16Item+0x14e0>)
 800eaf6:	88db      	ldrh	r3, [r3, #6]
 800eaf8:	4413      	add	r3, r2
 800eafa:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 800eafc:	3301      	adds	r3, #1
 800eafe:	b29b      	uxth	r3, r3
 800eb00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb04:	9200      	str	r2, [sp, #0]
 800eb06:	4602      	mov	r2, r0
 800eb08:	4631      	mov	r1, r6
 800eb0a:	4628      	mov	r0, r5
 800eb0c:	f7f9 ffa4 	bl	8008a58 <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800eb10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eb14:	b29c      	uxth	r4, r3
 800eb16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eb1a:	b29a      	uxth	r2, r3
 800eb1c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800eb20:	b299      	uxth	r1, r3
 800eb22:	69fb      	ldr	r3, [r7, #28]
 800eb24:	b29b      	uxth	r3, r3
 800eb26:	fb11 f303 	smulbb	r3, r1, r3
 800eb2a:	b29b      	uxth	r3, r3
 800eb2c:	4413      	add	r3, r2
 800eb2e:	b29b      	uxth	r3, r3
 800eb30:	3301      	adds	r3, #1
 800eb32:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[(i)], BLACK, WHITE, 16, Font12);
 800eb34:	69fb      	ldr	r3, [r7, #28]
 800eb36:	3301      	adds	r3, #1
 800eb38:	011b      	lsls	r3, r3, #4
 800eb3a:	4a0a      	ldr	r2, [pc, #40]	; (800eb64 <updateUint16Item+0x14dc>)
 800eb3c:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800eb3e:	490a      	ldr	r1, [pc, #40]	; (800eb68 <updateUint16Item+0x14e0>)
 800eb40:	ab02      	add	r3, sp, #8
 800eb42:	c903      	ldmia	r1, {r0, r1}
 800eb44:	e883 0003 	stmia.w	r3, {r0, r1}
 800eb48:	2310      	movs	r3, #16
 800eb4a:	9301      	str	r3, [sp, #4]
 800eb4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb50:	9300      	str	r3, [sp, #0]
 800eb52:	2300      	movs	r3, #0
 800eb54:	4629      	mov	r1, r5
 800eb56:	4620      	mov	r0, r4
 800eb58:	f7fd fc96 	bl	800c488 <centeredString>
 800eb5c:	e0af      	b.n	800ecbe <updateUint16Item+0x1636>
 800eb5e:	bf00      	nop
 800eb60:	2400a5bc 	.word	0x2400a5bc
 800eb64:	2400ae1c 	.word	0x2400ae1c
 800eb68:	24000018 	.word	0x24000018
					//						centeredString(HorizontalDisplayCenterWidth, HorizontalMenuRectangleStartY + HorizontalMenuRectangleHeight * i + 1,
					//								uint16Item.itemsArray[i], BLACK, LGRAY, 16);
				}
				else if ( (currentCursorPosition.cursorPosition == 4) && (i == 5) )
 800eb6c:	4b5b      	ldr	r3, [pc, #364]	; (800ecdc <updateUint16Item+0x1654>)
 800eb6e:	781b      	ldrb	r3, [r3, #0]
 800eb70:	2b04      	cmp	r3, #4
 800eb72:	f040 80a4 	bne.w	800ecbe <updateUint16Item+0x1636>
 800eb76:	69fb      	ldr	r3, [r7, #28]
 800eb78:	2b05      	cmp	r3, #5
 800eb7a:	f040 80a0 	bne.w	800ecbe <updateUint16Item+0x1636>
				{
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 800eb7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eb82:	b29c      	uxth	r4, r3
 800eb84:	69fb      	ldr	r3, [r7, #28]
 800eb86:	3301      	adds	r3, #1
 800eb88:	011b      	lsls	r3, r3, #4
 800eb8a:	4a55      	ldr	r2, [pc, #340]	; (800ece0 <updateUint16Item+0x1658>)
 800eb8c:	4413      	add	r3, r2
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f7f1 fbb0 	bl	80002f4 <strlen>
 800eb94:	4603      	mov	r3, r0
 800eb96:	4a53      	ldr	r2, [pc, #332]	; (800ece4 <updateUint16Item+0x165c>)
 800eb98:	8892      	ldrh	r2, [r2, #4]
 800eb9a:	fb02 f303 	mul.w	r3, r2, r3
 800eb9e:	085b      	lsrs	r3, r3, #1
 800eba0:	b29b      	uxth	r3, r3
 800eba2:	1ae3      	subs	r3, r4, r3
 800eba4:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800eba6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ebaa:	b29a      	uxth	r2, r3
 800ebac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ebb0:	b299      	uxth	r1, r3
 800ebb2:	69fb      	ldr	r3, [r7, #28]
 800ebb4:	b29b      	uxth	r3, r3
 800ebb6:	fb11 f303 	smulbb	r3, r1, r3
 800ebba:	b29b      	uxth	r3, r3
 800ebbc:	4413      	add	r3, r2
 800ebbe:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 800ebc0:	3301      	adds	r3, #1
 800ebc2:	b29e      	uxth	r6, r3
 800ebc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ebc8:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(uint16Item.itemsArray[i]) * Font12.Width /2,
 800ebca:	69fb      	ldr	r3, [r7, #28]
 800ebcc:	3301      	adds	r3, #1
 800ebce:	011b      	lsls	r3, r3, #4
 800ebd0:	4a43      	ldr	r2, [pc, #268]	; (800ece0 <updateUint16Item+0x1658>)
 800ebd2:	4413      	add	r3, r2
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f7f1 fb8d 	bl	80002f4 <strlen>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	4a41      	ldr	r2, [pc, #260]	; (800ece4 <updateUint16Item+0x165c>)
 800ebde:	8892      	ldrh	r2, [r2, #4]
 800ebe0:	fb02 f303 	mul.w	r3, r2, r3
 800ebe4:	085b      	lsrs	r3, r3, #1
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 800ebe6:	b29b      	uxth	r3, r3
 800ebe8:	4423      	add	r3, r4
 800ebea:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800ebec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ebf0:	b29a      	uxth	r2, r3
 800ebf2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ebf6:	b299      	uxth	r1, r3
 800ebf8:	69fb      	ldr	r3, [r7, #28]
 800ebfa:	b29b      	uxth	r3, r3
 800ebfc:	fb11 f303 	smulbb	r3, r1, r3
 800ec00:	b29b      	uxth	r3, r3
 800ec02:	4413      	add	r3, r2
 800ec04:	b29a      	uxth	r2, r3
 800ec06:	4b37      	ldr	r3, [pc, #220]	; (800ece4 <updateUint16Item+0x165c>)
 800ec08:	88db      	ldrh	r3, [r3, #6]
 800ec0a:	4413      	add	r3, r2
 800ec0c:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 800ec0e:	3301      	adds	r3, #1
 800ec10:	b29b      	uxth	r3, r3
 800ec12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec16:	9200      	str	r2, [sp, #0]
 800ec18:	4602      	mov	r2, r0
 800ec1a:	4631      	mov	r1, r6
 800ec1c:	4628      	mov	r0, r5
 800ec1e:	f7f9 ff1b 	bl	8008a58 <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800ec22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ec26:	b29c      	uxth	r4, r3
 800ec28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ec2c:	b29a      	uxth	r2, r3
 800ec2e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ec32:	b299      	uxth	r1, r3
 800ec34:	69fb      	ldr	r3, [r7, #28]
 800ec36:	b29b      	uxth	r3, r3
 800ec38:	fb11 f303 	smulbb	r3, r1, r3
 800ec3c:	b29b      	uxth	r3, r3
 800ec3e:	4413      	add	r3, r2
 800ec40:	b29b      	uxth	r3, r3
 800ec42:	3301      	adds	r3, #1
 800ec44:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[(i)], BLACK, WHITE, 16, Font12);
 800ec46:	69fb      	ldr	r3, [r7, #28]
 800ec48:	3301      	adds	r3, #1
 800ec4a:	011b      	lsls	r3, r3, #4
 800ec4c:	4a24      	ldr	r2, [pc, #144]	; (800ece0 <updateUint16Item+0x1658>)
 800ec4e:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800ec50:	4924      	ldr	r1, [pc, #144]	; (800ece4 <updateUint16Item+0x165c>)
 800ec52:	ab02      	add	r3, sp, #8
 800ec54:	c903      	ldmia	r1, {r0, r1}
 800ec56:	e883 0003 	stmia.w	r3, {r0, r1}
 800ec5a:	2310      	movs	r3, #16
 800ec5c:	9301      	str	r3, [sp, #4]
 800ec5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ec62:	9300      	str	r3, [sp, #0]
 800ec64:	2300      	movs	r3, #0
 800ec66:	4629      	mov	r1, r5
 800ec68:	4620      	mov	r0, r4
 800ec6a:	f7fd fc0d 	bl	800c488 <centeredString>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 800ec6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ec72:	b29c      	uxth	r4, r3
 800ec74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ec78:	b29a      	uxth	r2, r3
 800ec7a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ec7e:	b299      	uxth	r1, r3
 800ec80:	69fb      	ldr	r3, [r7, #28]
 800ec82:	3b01      	subs	r3, #1
 800ec84:	b29b      	uxth	r3, r3
 800ec86:	fb11 f303 	smulbb	r3, r1, r3
 800ec8a:	b29b      	uxth	r3, r3
 800ec8c:	4413      	add	r3, r2
 800ec8e:	b29b      	uxth	r3, r3
 800ec90:	3301      	adds	r3, #1
 800ec92:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i - 1], BLACK, LGRAY, 16, Font12);
 800ec94:	69fb      	ldr	r3, [r7, #28]
 800ec96:	3b01      	subs	r3, #1
 800ec98:	3301      	adds	r3, #1
 800ec9a:	011b      	lsls	r3, r3, #4
 800ec9c:	4a10      	ldr	r2, [pc, #64]	; (800ece0 <updateUint16Item+0x1658>)
 800ec9e:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 800eca0:	4910      	ldr	r1, [pc, #64]	; (800ece4 <updateUint16Item+0x165c>)
 800eca2:	ab02      	add	r3, sp, #8
 800eca4:	c903      	ldmia	r1, {r0, r1}
 800eca6:	e883 0003 	stmia.w	r3, {r0, r1}
 800ecaa:	2310      	movs	r3, #16
 800ecac:	9301      	str	r3, [sp, #4]
 800ecae:	f24c 6318 	movw	r3, #50712	; 0xc618
 800ecb2:	9300      	str	r3, [sp, #0]
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	4629      	mov	r1, r5
 800ecb8:	4620      	mov	r0, r4
 800ecba:	f7fd fbe5 	bl	800c488 <centeredString>
	for (int i = 0; i < uint16Item.numberOfItemsInPage ; i++)
 800ecbe:	69fb      	ldr	r3, [r7, #28]
 800ecc0:	3301      	adds	r3, #1
 800ecc2:	61fb      	str	r3, [r7, #28]
 800ecc4:	4b06      	ldr	r3, [pc, #24]	; (800ece0 <updateUint16Item+0x1658>)
 800ecc6:	7bdb      	ldrb	r3, [r3, #15]
 800ecc8:	461a      	mov	r2, r3
 800ecca:	69fb      	ldr	r3, [r7, #28]
 800eccc:	4293      	cmp	r3, r2
 800ecce:	f6fe ad09 	blt.w	800d6e4 <updateUint16Item+0x5c>
				}
			}
		}
	}
}
 800ecd2:	bf00      	nop
 800ecd4:	bf00      	nop
 800ecd6:	372c      	adds	r7, #44	; 0x2c
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecdc:	2400a5bc 	.word	0x2400a5bc
 800ece0:	2400ae1c 	.word	0x2400ae1c
 800ece4:	24000018 	.word	0x24000018

0800ece8 <updateStringItem>:
		}
	}
}

void updateStringItem(MENUDRAWType howToDraw)
{
 800ece8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecea:	b08d      	sub	sp, #52	; 0x34
 800ecec:	af04      	add	r7, sp, #16
 800ecee:	4603      	mov	r3, r0
 800ecf0:	71fb      	strb	r3, [r7, #7]
	uint8_t MenuRectangleStartX = 0;
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	77fb      	strb	r3, [r7, #31]
	uint8_t MenuRectangleStartY = 0;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	77bb      	strb	r3, [r7, #30]
	uint8_t MenuRectangleHeight = 0;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	777b      	strb	r3, [r7, #29]
	uint8_t MenuRectangleWidth = 0;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	773b      	strb	r3, [r7, #28]
	uint8_t DisplayCenterWidth = 0;
 800ed02:	2300      	movs	r3, #0
 800ed04:	76fb      	strb	r3, [r7, #27]

	if (isPortrait)
 800ed06:	4b09      	ldr	r3, [pc, #36]	; (800ed2c <updateStringItem+0x44>)
 800ed08:	781b      	ldrb	r3, [r3, #0]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d009      	beq.n	800ed22 <updateStringItem+0x3a>
	{
		MenuRectangleStartX = VerticalMenuRectangleStartX;
 800ed0e:	2302      	movs	r3, #2
 800ed10:	77fb      	strb	r3, [r7, #31]
		MenuRectangleStartY = VerticalMenuRectangleStartY;
 800ed12:	230c      	movs	r3, #12
 800ed14:	77bb      	strb	r3, [r7, #30]
		MenuRectangleHeight = VerticalMenuRectangleHeight;
 800ed16:	230e      	movs	r3, #14
 800ed18:	777b      	strb	r3, [r7, #29]
		MenuRectangleWidth = VerticalMenuRectangleWidth;
 800ed1a:	237c      	movs	r3, #124	; 0x7c
 800ed1c:	773b      	strb	r3, [r7, #28]
		DisplayCenterWidth = VerticalDisplayCenterWidth;
 800ed1e:	2340      	movs	r3, #64	; 0x40
 800ed20:	76fb      	strb	r3, [r7, #27]
//		MenuRectangleHeight = HorizontalMenuRectangleHeight;
//		MenuRectangleWidth = HorizontalMenuRectangleWidth;
//		DisplayCenterWidth = HorizontalDisplayCenterWidth;
	}

	for (int i = 0; i < stringItem.numberOfItemsInPage ; i++)
 800ed22:	2300      	movs	r3, #0
 800ed24:	617b      	str	r3, [r7, #20]
 800ed26:	f001 ba23 	b.w	8010170 <updateStringItem+0x1488>
 800ed2a:	bf00      	nop
 800ed2c:	24000054 	.word	0x24000054
	{
		if  ( (i < 2) && (howToDraw == FULL) )
 800ed30:	697b      	ldr	r3, [r7, #20]
 800ed32:	2b01      	cmp	r3, #1
 800ed34:	dc50      	bgt.n	800edd8 <updateStringItem+0xf0>
 800ed36:	79fb      	ldrb	r3, [r7, #7]
 800ed38:	2b02      	cmp	r3, #2
 800ed3a:	d14d      	bne.n	800edd8 <updateStringItem+0xf0>
		{
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800ed3c:	7ffb      	ldrb	r3, [r7, #31]
 800ed3e:	b298      	uxth	r0, r3
 800ed40:	7fbb      	ldrb	r3, [r7, #30]
 800ed42:	b29a      	uxth	r2, r3
 800ed44:	7f7b      	ldrb	r3, [r7, #29]
 800ed46:	b299      	uxth	r1, r3
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	b29b      	uxth	r3, r3
 800ed4c:	fb11 f303 	smulbb	r3, r1, r3
 800ed50:	b29b      	uxth	r3, r3
 800ed52:	4413      	add	r3, r2
 800ed54:	b29c      	uxth	r4, r3
 800ed56:	7ffb      	ldrb	r3, [r7, #31]
 800ed58:	b29a      	uxth	r2, r3
 800ed5a:	7f3b      	ldrb	r3, [r7, #28]
 800ed5c:	b29b      	uxth	r3, r3
 800ed5e:	4413      	add	r3, r2
 800ed60:	b29d      	uxth	r5, r3
 800ed62:	7fbb      	ldrb	r3, [r7, #30]
 800ed64:	b29a      	uxth	r2, r3
 800ed66:	7f7b      	ldrb	r3, [r7, #29]
 800ed68:	b299      	uxth	r1, r3
					MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 800ed6a:	697b      	ldr	r3, [r7, #20]
 800ed6c:	3301      	adds	r3, #1
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800ed6e:	b29b      	uxth	r3, r3
 800ed70:	fb11 f303 	smulbb	r3, r1, r3
 800ed74:	b29b      	uxth	r3, r3
 800ed76:	4413      	add	r3, r2
 800ed78:	b29b      	uxth	r3, r3
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	9202      	str	r2, [sp, #8]
 800ed7e:	2201      	movs	r2, #1
 800ed80:	9201      	str	r2, [sp, #4]
 800ed82:	2200      	movs	r2, #0
 800ed84:	9200      	str	r2, [sp, #0]
 800ed86:	462a      	mov	r2, r5
 800ed88:	4621      	mov	r1, r4
 800ed8a:	f7f9 ffdf 	bl	8008d4c <Paint_DrawRectangle>
					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800ed8e:	7efb      	ldrb	r3, [r7, #27]
 800ed90:	b29c      	uxth	r4, r3
 800ed92:	7fbb      	ldrb	r3, [r7, #30]
 800ed94:	b29a      	uxth	r2, r3
 800ed96:	7f7b      	ldrb	r3, [r7, #29]
 800ed98:	b299      	uxth	r1, r3
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	b29b      	uxth	r3, r3
 800ed9e:	fb11 f303 	smulbb	r3, r1, r3
 800eda2:	b29b      	uxth	r3, r3
 800eda4:	4413      	add	r3, r2
 800eda6:	b29b      	uxth	r3, r3
 800eda8:	3301      	adds	r3, #1
 800edaa:	b29d      	uxth	r5, r3
					stringItem.itemsArray[i], BLACK, WHITE, 16, Font12);
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	011b      	lsls	r3, r3, #4
 800edb0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800edb4:	4a8e      	ldr	r2, [pc, #568]	; (800eff0 <updateStringItem+0x308>)
 800edb6:	4413      	add	r3, r2
 800edb8:	1d1a      	adds	r2, r3, #4
			centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800edba:	498e      	ldr	r1, [pc, #568]	; (800eff4 <updateStringItem+0x30c>)
 800edbc:	ab02      	add	r3, sp, #8
 800edbe:	c903      	ldmia	r1, {r0, r1}
 800edc0:	e883 0003 	stmia.w	r3, {r0, r1}
 800edc4:	2310      	movs	r3, #16
 800edc6:	9301      	str	r3, [sp, #4]
 800edc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800edcc:	9300      	str	r3, [sp, #0]
 800edce:	2300      	movs	r3, #0
 800edd0:	4629      	mov	r1, r5
 800edd2:	4620      	mov	r0, r4
 800edd4:	f7fd fb58 	bl	800c488 <centeredString>
		}
		if ( (i >= 2) && (i < stringItem.numberOfItemsInPage - 2) )
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	2b01      	cmp	r3, #1
 800eddc:	f340 873c 	ble.w	800fc58 <updateStringItem+0xf70>
 800ede0:	4b83      	ldr	r3, [pc, #524]	; (800eff0 <updateStringItem+0x308>)
 800ede2:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 800ede6:	3b02      	subs	r3, #2
 800ede8:	697a      	ldr	r2, [r7, #20]
 800edea:	429a      	cmp	r2, r3
 800edec:	f280 8734 	bge.w	800fc58 <updateStringItem+0xf70>
		{
			if (howToDraw == FULL)
 800edf0:	79fb      	ldrb	r3, [r7, #7]
 800edf2:	2b02      	cmp	r3, #2
 800edf4:	d159      	bne.n	800eeaa <updateStringItem+0x1c2>
			{
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800edf6:	7ffb      	ldrb	r3, [r7, #31]
 800edf8:	b298      	uxth	r0, r3
 800edfa:	7fbb      	ldrb	r3, [r7, #30]
 800edfc:	b29a      	uxth	r2, r3
 800edfe:	7f7b      	ldrb	r3, [r7, #29]
 800ee00:	b299      	uxth	r1, r3
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	b29b      	uxth	r3, r3
 800ee06:	fb11 f303 	smulbb	r3, r1, r3
 800ee0a:	b29b      	uxth	r3, r3
 800ee0c:	4413      	add	r3, r2
 800ee0e:	b29c      	uxth	r4, r3
 800ee10:	7ffb      	ldrb	r3, [r7, #31]
 800ee12:	b29a      	uxth	r2, r3
 800ee14:	7f3b      	ldrb	r3, [r7, #28]
 800ee16:	085b      	lsrs	r3, r3, #1
 800ee18:	b2db      	uxtb	r3, r3
 800ee1a:	b29b      	uxth	r3, r3
 800ee1c:	4413      	add	r3, r2
 800ee1e:	b29d      	uxth	r5, r3
 800ee20:	7fbb      	ldrb	r3, [r7, #30]
 800ee22:	b29a      	uxth	r2, r3
 800ee24:	7f7b      	ldrb	r3, [r7, #29]
 800ee26:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800ee2c:	b29b      	uxth	r3, r3
 800ee2e:	fb11 f303 	smulbb	r3, r1, r3
 800ee32:	b29b      	uxth	r3, r3
 800ee34:	4413      	add	r3, r2
 800ee36:	b29b      	uxth	r3, r3
 800ee38:	2200      	movs	r2, #0
 800ee3a:	9202      	str	r2, [sp, #8]
 800ee3c:	2201      	movs	r2, #1
 800ee3e:	9201      	str	r2, [sp, #4]
 800ee40:	2200      	movs	r2, #0
 800ee42:	9200      	str	r2, [sp, #0]
 800ee44:	462a      	mov	r2, r5
 800ee46:	4621      	mov	r1, r4
 800ee48:	f7f9 ff80 	bl	8008d4c <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
				Paint_DrawRectangle( MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * i,
 800ee4c:	7ffb      	ldrb	r3, [r7, #31]
 800ee4e:	b29a      	uxth	r2, r3
 800ee50:	7f3b      	ldrb	r3, [r7, #28]
 800ee52:	085b      	lsrs	r3, r3, #1
 800ee54:	b2db      	uxtb	r3, r3
 800ee56:	b29b      	uxth	r3, r3
 800ee58:	4413      	add	r3, r2
 800ee5a:	b298      	uxth	r0, r3
 800ee5c:	7fbb      	ldrb	r3, [r7, #30]
 800ee5e:	b29a      	uxth	r2, r3
 800ee60:	7f7b      	ldrb	r3, [r7, #29]
 800ee62:	b299      	uxth	r1, r3
 800ee64:	697b      	ldr	r3, [r7, #20]
 800ee66:	b29b      	uxth	r3, r3
 800ee68:	fb11 f303 	smulbb	r3, r1, r3
 800ee6c:	b29b      	uxth	r3, r3
 800ee6e:	4413      	add	r3, r2
 800ee70:	b29c      	uxth	r4, r3
 800ee72:	7ffb      	ldrb	r3, [r7, #31]
 800ee74:	b29a      	uxth	r2, r3
 800ee76:	7f3b      	ldrb	r3, [r7, #28]
 800ee78:	b29b      	uxth	r3, r3
 800ee7a:	4413      	add	r3, r2
 800ee7c:	b29d      	uxth	r5, r3
 800ee7e:	7fbb      	ldrb	r3, [r7, #30]
 800ee80:	b29a      	uxth	r2, r3
 800ee82:	7f7b      	ldrb	r3, [r7, #29]
 800ee84:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 800ee86:	697b      	ldr	r3, [r7, #20]
 800ee88:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * i,
 800ee8a:	b29b      	uxth	r3, r3
 800ee8c:	fb11 f303 	smulbb	r3, r1, r3
 800ee90:	b29b      	uxth	r3, r3
 800ee92:	4413      	add	r3, r2
 800ee94:	b29b      	uxth	r3, r3
 800ee96:	2200      	movs	r2, #0
 800ee98:	9202      	str	r2, [sp, #8]
 800ee9a:	2201      	movs	r2, #1
 800ee9c:	9201      	str	r2, [sp, #4]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	9200      	str	r2, [sp, #0]
 800eea2:	462a      	mov	r2, r5
 800eea4:	4621      	mov	r1, r4
 800eea6:	f7f9 ff51 	bl	8008d4c <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			}

			if ( (i == 2) )
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	2b02      	cmp	r3, #2
 800eeae:	f040 8371 	bne.w	800f594 <updateStringItem+0x8ac>
			{
//				char localString[8] = "";
//				sprintf(localString,"%03d",stringItem.startValue);
				if (currentCursorPosition.cursorPosition == 0x02)
 800eeb2:	4b51      	ldr	r3, [pc, #324]	; (800eff8 <updateStringItem+0x310>)
 800eeb4:	781b      	ldrb	r3, [r3, #0]
 800eeb6:	2b02      	cmp	r3, #2
 800eeb8:	f040 81ba 	bne.w	800f230 <updateStringItem+0x548>
				{
					if ( (howToDraw == LEFT) || (howToDraw == FULL) )
 800eebc:	79fb      	ldrb	r3, [r7, #7]
 800eebe:	2b03      	cmp	r3, #3
 800eec0:	d003      	beq.n	800eeca <updateStringItem+0x1e2>
 800eec2:	79fb      	ldrb	r3, [r7, #7]
 800eec4:	2b02      	cmp	r3, #2
 800eec6:	f040 8099 	bne.w	800effc <updateStringItem+0x314>
					{
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800eeca:	7ffb      	ldrb	r3, [r7, #31]
 800eecc:	b29b      	uxth	r3, r3
 800eece:	3301      	adds	r3, #1
 800eed0:	b298      	uxth	r0, r3
 800eed2:	7fbb      	ldrb	r3, [r7, #30]
 800eed4:	b29a      	uxth	r2, r3
 800eed6:	7f7b      	ldrb	r3, [r7, #29]
 800eed8:	b299      	uxth	r1, r3
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	b29b      	uxth	r3, r3
 800eede:	fb11 f303 	smulbb	r3, r1, r3
 800eee2:	b29b      	uxth	r3, r3
 800eee4:	4413      	add	r3, r2
 800eee6:	b29b      	uxth	r3, r3
 800eee8:	3301      	adds	r3, #1
 800eeea:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 800eeec:	697b      	ldr	r3, [r7, #20]
 800eeee:	011b      	lsls	r3, r3, #4
 800eef0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800eef4:	4a3e      	ldr	r2, [pc, #248]	; (800eff0 <updateStringItem+0x308>)
 800eef6:	4413      	add	r3, r2
 800eef8:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800eefa:	2300      	movs	r3, #0
 800eefc:	9301      	str	r3, [sp, #4]
 800eefe:	f24c 6318 	movw	r3, #50712	; 0xc618
 800ef02:	9300      	str	r3, [sp, #0]
 800ef04:	4b3b      	ldr	r3, [pc, #236]	; (800eff4 <updateStringItem+0x30c>)
 800ef06:	f7fa f9c5 	bl	8009294 <Paint_DrawString_EN>
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800ef0a:	7ffb      	ldrb	r3, [r7, #31]
 800ef0c:	b29a      	uxth	r2, r3
 800ef0e:	7f3b      	ldrb	r3, [r7, #28]
 800ef10:	085b      	lsrs	r3, r3, #1
 800ef12:	b2db      	uxtb	r3, r3
 800ef14:	b29b      	uxth	r3, r3
 800ef16:	4413      	add	r3, r2
 800ef18:	b29b      	uxth	r3, r3
 800ef1a:	3301      	adds	r3, #1
 800ef1c:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800ef1e:	7fbb      	ldrb	r3, [r7, #30]
 800ef20:	b29a      	uxth	r2, r3
 800ef22:	7f7b      	ldrb	r3, [r7, #29]
 800ef24:	b299      	uxth	r1, r3
 800ef26:	697b      	ldr	r3, [r7, #20]
 800ef28:	b29b      	uxth	r3, r3
 800ef2a:	fb11 f303 	smulbb	r3, r1, r3
 800ef2e:	b29b      	uxth	r3, r3
 800ef30:	4413      	add	r3, r2
 800ef32:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800ef34:	3301      	adds	r3, #1
 800ef36:	b29e      	uxth	r6, r3
								MenuRectangleStartX + MenuRectangleWidth / 2 + 1 + strlen(stringItem.valuesArray[stringItem.startValue]) * Font12.Width,
 800ef38:	7ffb      	ldrb	r3, [r7, #31]
 800ef3a:	b29a      	uxth	r2, r3
 800ef3c:	7f3b      	ldrb	r3, [r7, #28]
 800ef3e:	085b      	lsrs	r3, r3, #1
 800ef40:	b2db      	uxtb	r3, r3
 800ef42:	b29b      	uxth	r3, r3
 800ef44:	4413      	add	r3, r2
 800ef46:	b29c      	uxth	r4, r3
 800ef48:	4b29      	ldr	r3, [pc, #164]	; (800eff0 <updateStringItem+0x308>)
 800ef4a:	799b      	ldrb	r3, [r3, #6]
 800ef4c:	011b      	lsls	r3, r3, #4
 800ef4e:	3308      	adds	r3, #8
 800ef50:	4a27      	ldr	r2, [pc, #156]	; (800eff0 <updateStringItem+0x308>)
 800ef52:	4413      	add	r3, r2
 800ef54:	4618      	mov	r0, r3
 800ef56:	f7f1 f9cd 	bl	80002f4 <strlen>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	b29a      	uxth	r2, r3
 800ef5e:	4b25      	ldr	r3, [pc, #148]	; (800eff4 <updateStringItem+0x30c>)
 800ef60:	889b      	ldrh	r3, [r3, #4]
 800ef62:	fb12 f303 	smulbb	r3, r2, r3
 800ef66:	b29b      	uxth	r3, r3
 800ef68:	4423      	add	r3, r4
 800ef6a:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800ef6c:	3301      	adds	r3, #1
 800ef6e:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800ef70:	7fbb      	ldrb	r3, [r7, #30]
 800ef72:	b29a      	uxth	r2, r3
 800ef74:	7f7b      	ldrb	r3, [r7, #29]
 800ef76:	b299      	uxth	r1, r3
 800ef78:	697b      	ldr	r3, [r7, #20]
 800ef7a:	b29b      	uxth	r3, r3
 800ef7c:	fb11 f303 	smulbb	r3, r1, r3
 800ef80:	b29b      	uxth	r3, r3
 800ef82:	4413      	add	r3, r2
 800ef84:	b29a      	uxth	r2, r3
 800ef86:	4b1b      	ldr	r3, [pc, #108]	; (800eff4 <updateStringItem+0x30c>)
 800ef88:	88db      	ldrh	r3, [r3, #6]
 800ef8a:	4413      	add	r3, r2
 800ef8c:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800ef8e:	3301      	adds	r3, #1
 800ef90:	b29b      	uxth	r3, r3
 800ef92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef96:	9200      	str	r2, [sp, #0]
 800ef98:	4602      	mov	r2, r0
 800ef9a:	4631      	mov	r1, r6
 800ef9c:	4628      	mov	r0, r5
 800ef9e:	f7f9 fd5b 	bl	8008a58 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800efa2:	7ffb      	ldrb	r3, [r7, #31]
 800efa4:	b29a      	uxth	r2, r3
 800efa6:	7f3b      	ldrb	r3, [r7, #28]
 800efa8:	085b      	lsrs	r3, r3, #1
 800efaa:	b2db      	uxtb	r3, r3
 800efac:	b29b      	uxth	r3, r3
 800efae:	4413      	add	r3, r2
 800efb0:	b29b      	uxth	r3, r3
 800efb2:	3301      	adds	r3, #1
 800efb4:	b298      	uxth	r0, r3
 800efb6:	7fbb      	ldrb	r3, [r7, #30]
 800efb8:	b29a      	uxth	r2, r3
 800efba:	7f7b      	ldrb	r3, [r7, #29]
 800efbc:	b299      	uxth	r1, r3
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	b29b      	uxth	r3, r3
 800efc2:	fb11 f303 	smulbb	r3, r1, r3
 800efc6:	b29b      	uxth	r3, r3
 800efc8:	4413      	add	r3, r2
 800efca:	b29b      	uxth	r3, r3
 800efcc:	3301      	adds	r3, #1
 800efce:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, WHITE,  BLACK);
 800efd0:	4b07      	ldr	r3, [pc, #28]	; (800eff0 <updateStringItem+0x308>)
 800efd2:	799b      	ldrb	r3, [r3, #6]
 800efd4:	011b      	lsls	r3, r3, #4
 800efd6:	3308      	adds	r3, #8
 800efd8:	4a05      	ldr	r2, [pc, #20]	; (800eff0 <updateStringItem+0x308>)
 800efda:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800efdc:	2300      	movs	r3, #0
 800efde:	9301      	str	r3, [sp, #4]
 800efe0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800efe4:	9300      	str	r3, [sp, #0]
 800efe6:	4b03      	ldr	r3, [pc, #12]	; (800eff4 <updateStringItem+0x30c>)
 800efe8:	f7fa f954 	bl	8009294 <Paint_DrawString_EN>
 800efec:	e2d2      	b.n	800f594 <updateStringItem+0x8ac>
 800efee:	bf00      	nop
 800eff0:	2400b030 	.word	0x2400b030
 800eff4:	24000018 	.word	0x24000018
 800eff8:	2400a5bc 	.word	0x2400a5bc
					}
					else if (howToDraw == DOWN)
 800effc:	79fb      	ldrb	r3, [r7, #7]
 800effe:	2b01      	cmp	r3, #1
 800f000:	f040 8087 	bne.w	800f112 <updateStringItem+0x42a>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f004:	7ffb      	ldrb	r3, [r7, #31]
 800f006:	b29b      	uxth	r3, r3
 800f008:	3301      	adds	r3, #1
 800f00a:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f00c:	7fbb      	ldrb	r3, [r7, #30]
 800f00e:	b29a      	uxth	r2, r3
 800f010:	7f7b      	ldrb	r3, [r7, #29]
 800f012:	b299      	uxth	r1, r3
 800f014:	697b      	ldr	r3, [r7, #20]
 800f016:	b29b      	uxth	r3, r3
 800f018:	fb11 f303 	smulbb	r3, r1, r3
 800f01c:	b29b      	uxth	r3, r3
 800f01e:	4413      	add	r3, r2
 800f020:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f022:	3301      	adds	r3, #1
 800f024:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 800f026:	7ffb      	ldrb	r3, [r7, #31]
 800f028:	b29c      	uxth	r4, r3
 800f02a:	697b      	ldr	r3, [r7, #20]
 800f02c:	011b      	lsls	r3, r3, #4
 800f02e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f032:	4a7d      	ldr	r2, [pc, #500]	; (800f228 <updateStringItem+0x540>)
 800f034:	4413      	add	r3, r2
 800f036:	3304      	adds	r3, #4
 800f038:	4618      	mov	r0, r3
 800f03a:	f7f1 f95b 	bl	80002f4 <strlen>
 800f03e:	4603      	mov	r3, r0
 800f040:	b29a      	uxth	r2, r3
 800f042:	4b7a      	ldr	r3, [pc, #488]	; (800f22c <updateStringItem+0x544>)
 800f044:	889b      	ldrh	r3, [r3, #4]
 800f046:	fb12 f303 	smulbb	r3, r2, r3
 800f04a:	b29b      	uxth	r3, r3
 800f04c:	4423      	add	r3, r4
 800f04e:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f050:	3301      	adds	r3, #1
 800f052:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800f054:	7fbb      	ldrb	r3, [r7, #30]
 800f056:	b29a      	uxth	r2, r3
 800f058:	7f7b      	ldrb	r3, [r7, #29]
 800f05a:	b299      	uxth	r1, r3
 800f05c:	697b      	ldr	r3, [r7, #20]
 800f05e:	b29b      	uxth	r3, r3
 800f060:	fb11 f303 	smulbb	r3, r1, r3
 800f064:	b29b      	uxth	r3, r3
 800f066:	4413      	add	r3, r2
 800f068:	b29a      	uxth	r2, r3
 800f06a:	4b70      	ldr	r3, [pc, #448]	; (800f22c <updateStringItem+0x544>)
 800f06c:	88db      	ldrh	r3, [r3, #6]
 800f06e:	4413      	add	r3, r2
 800f070:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f072:	3301      	adds	r3, #1
 800f074:	b29b      	uxth	r3, r3
 800f076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f07a:	9200      	str	r2, [sp, #0]
 800f07c:	4602      	mov	r2, r0
 800f07e:	4631      	mov	r1, r6
 800f080:	4628      	mov	r0, r5
 800f082:	f7f9 fce9 	bl	8008a58 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f086:	7ffb      	ldrb	r3, [r7, #31]
 800f088:	b29b      	uxth	r3, r3
 800f08a:	3301      	adds	r3, #1
 800f08c:	b298      	uxth	r0, r3
 800f08e:	7fbb      	ldrb	r3, [r7, #30]
 800f090:	b29a      	uxth	r2, r3
 800f092:	7f7b      	ldrb	r3, [r7, #29]
 800f094:	b299      	uxth	r1, r3
 800f096:	697b      	ldr	r3, [r7, #20]
 800f098:	b29b      	uxth	r3, r3
 800f09a:	fb11 f303 	smulbb	r3, r1, r3
 800f09e:	b29b      	uxth	r3, r3
 800f0a0:	4413      	add	r3, r2
 800f0a2:	b29b      	uxth	r3, r3
 800f0a4:	3301      	adds	r3, #1
 800f0a6:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 800f0a8:	697b      	ldr	r3, [r7, #20]
 800f0aa:	011b      	lsls	r3, r3, #4
 800f0ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f0b0:	4a5d      	ldr	r2, [pc, #372]	; (800f228 <updateStringItem+0x540>)
 800f0b2:	4413      	add	r3, r2
 800f0b4:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	9301      	str	r3, [sp, #4]
 800f0ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f0be:	9300      	str	r3, [sp, #0]
 800f0c0:	4b5a      	ldr	r3, [pc, #360]	; (800f22c <updateStringItem+0x544>)
 800f0c2:	f7fa f8e7 	bl	8009294 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f0c6:	7ffb      	ldrb	r3, [r7, #31]
 800f0c8:	b29a      	uxth	r2, r3
 800f0ca:	7f3b      	ldrb	r3, [r7, #28]
 800f0cc:	085b      	lsrs	r3, r3, #1
 800f0ce:	b2db      	uxtb	r3, r3
 800f0d0:	b29b      	uxth	r3, r3
 800f0d2:	4413      	add	r3, r2
 800f0d4:	b29b      	uxth	r3, r3
 800f0d6:	3301      	adds	r3, #1
 800f0d8:	b298      	uxth	r0, r3
 800f0da:	7fbb      	ldrb	r3, [r7, #30]
 800f0dc:	b29a      	uxth	r2, r3
 800f0de:	7f7b      	ldrb	r3, [r7, #29]
 800f0e0:	b299      	uxth	r1, r3
 800f0e2:	697b      	ldr	r3, [r7, #20]
 800f0e4:	b29b      	uxth	r3, r3
 800f0e6:	fb11 f303 	smulbb	r3, r1, r3
 800f0ea:	b29b      	uxth	r3, r3
 800f0ec:	4413      	add	r3, r2
 800f0ee:	b29b      	uxth	r3, r3
 800f0f0:	3301      	adds	r3, #1
 800f0f2:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, WHITE,  BLACK);
 800f0f4:	4b4c      	ldr	r3, [pc, #304]	; (800f228 <updateStringItem+0x540>)
 800f0f6:	799b      	ldrb	r3, [r3, #6]
 800f0f8:	011b      	lsls	r3, r3, #4
 800f0fa:	3308      	adds	r3, #8
 800f0fc:	4a4a      	ldr	r2, [pc, #296]	; (800f228 <updateStringItem+0x540>)
 800f0fe:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f100:	2300      	movs	r3, #0
 800f102:	9301      	str	r3, [sp, #4]
 800f104:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f108:	9300      	str	r3, [sp, #0]
 800f10a:	4b48      	ldr	r3, [pc, #288]	; (800f22c <updateStringItem+0x544>)
 800f10c:	f7fa f8c2 	bl	8009294 <Paint_DrawString_EN>
 800f110:	e240      	b.n	800f594 <updateStringItem+0x8ac>
					}
					else if (howToDraw == UP)
 800f112:	79fb      	ldrb	r3, [r7, #7]
 800f114:	2b00      	cmp	r3, #0
 800f116:	f040 823d 	bne.w	800f594 <updateStringItem+0x8ac>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f11a:	7ffb      	ldrb	r3, [r7, #31]
 800f11c:	b29b      	uxth	r3, r3
 800f11e:	3301      	adds	r3, #1
 800f120:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f122:	7fbb      	ldrb	r3, [r7, #30]
 800f124:	b29a      	uxth	r2, r3
 800f126:	7f7b      	ldrb	r3, [r7, #29]
 800f128:	b299      	uxth	r1, r3
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	b29b      	uxth	r3, r3
 800f12e:	fb11 f303 	smulbb	r3, r1, r3
 800f132:	b29b      	uxth	r3, r3
 800f134:	4413      	add	r3, r2
 800f136:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f138:	3301      	adds	r3, #1
 800f13a:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 800f13c:	7ffb      	ldrb	r3, [r7, #31]
 800f13e:	b29c      	uxth	r4, r3
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	011b      	lsls	r3, r3, #4
 800f144:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f148:	4a37      	ldr	r2, [pc, #220]	; (800f228 <updateStringItem+0x540>)
 800f14a:	4413      	add	r3, r2
 800f14c:	3304      	adds	r3, #4
 800f14e:	4618      	mov	r0, r3
 800f150:	f7f1 f8d0 	bl	80002f4 <strlen>
 800f154:	4603      	mov	r3, r0
 800f156:	b29a      	uxth	r2, r3
 800f158:	4b34      	ldr	r3, [pc, #208]	; (800f22c <updateStringItem+0x544>)
 800f15a:	889b      	ldrh	r3, [r3, #4]
 800f15c:	fb12 f303 	smulbb	r3, r2, r3
 800f160:	b29b      	uxth	r3, r3
 800f162:	4423      	add	r3, r4
 800f164:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f166:	3301      	adds	r3, #1
 800f168:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800f16a:	7fbb      	ldrb	r3, [r7, #30]
 800f16c:	b29a      	uxth	r2, r3
 800f16e:	7f7b      	ldrb	r3, [r7, #29]
 800f170:	b299      	uxth	r1, r3
 800f172:	697b      	ldr	r3, [r7, #20]
 800f174:	b29b      	uxth	r3, r3
 800f176:	fb11 f303 	smulbb	r3, r1, r3
 800f17a:	b29b      	uxth	r3, r3
 800f17c:	4413      	add	r3, r2
 800f17e:	b29a      	uxth	r2, r3
 800f180:	4b2a      	ldr	r3, [pc, #168]	; (800f22c <updateStringItem+0x544>)
 800f182:	88db      	ldrh	r3, [r3, #6]
 800f184:	4413      	add	r3, r2
 800f186:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f188:	3301      	adds	r3, #1
 800f18a:	b29b      	uxth	r3, r3
 800f18c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f190:	9200      	str	r2, [sp, #0]
 800f192:	4602      	mov	r2, r0
 800f194:	4631      	mov	r1, r6
 800f196:	4628      	mov	r0, r5
 800f198:	f7f9 fc5e 	bl	8008a58 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f19c:	7ffb      	ldrb	r3, [r7, #31]
 800f19e:	b29b      	uxth	r3, r3
 800f1a0:	3301      	adds	r3, #1
 800f1a2:	b298      	uxth	r0, r3
 800f1a4:	7fbb      	ldrb	r3, [r7, #30]
 800f1a6:	b29a      	uxth	r2, r3
 800f1a8:	7f7b      	ldrb	r3, [r7, #29]
 800f1aa:	b299      	uxth	r1, r3
 800f1ac:	697b      	ldr	r3, [r7, #20]
 800f1ae:	b29b      	uxth	r3, r3
 800f1b0:	fb11 f303 	smulbb	r3, r1, r3
 800f1b4:	b29b      	uxth	r3, r3
 800f1b6:	4413      	add	r3, r2
 800f1b8:	b29b      	uxth	r3, r3
 800f1ba:	3301      	adds	r3, #1
 800f1bc:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 800f1be:	697b      	ldr	r3, [r7, #20]
 800f1c0:	011b      	lsls	r3, r3, #4
 800f1c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f1c6:	4a18      	ldr	r2, [pc, #96]	; (800f228 <updateStringItem+0x540>)
 800f1c8:	4413      	add	r3, r2
 800f1ca:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	9301      	str	r3, [sp, #4]
 800f1d0:	f24c 6318 	movw	r3, #50712	; 0xc618
 800f1d4:	9300      	str	r3, [sp, #0]
 800f1d6:	4b15      	ldr	r3, [pc, #84]	; (800f22c <updateStringItem+0x544>)
 800f1d8:	f7fa f85c 	bl	8009294 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f1dc:	7ffb      	ldrb	r3, [r7, #31]
 800f1de:	b29a      	uxth	r2, r3
 800f1e0:	7f3b      	ldrb	r3, [r7, #28]
 800f1e2:	085b      	lsrs	r3, r3, #1
 800f1e4:	b2db      	uxtb	r3, r3
 800f1e6:	b29b      	uxth	r3, r3
 800f1e8:	4413      	add	r3, r2
 800f1ea:	b29b      	uxth	r3, r3
 800f1ec:	3301      	adds	r3, #1
 800f1ee:	b298      	uxth	r0, r3
 800f1f0:	7fbb      	ldrb	r3, [r7, #30]
 800f1f2:	b29a      	uxth	r2, r3
 800f1f4:	7f7b      	ldrb	r3, [r7, #29]
 800f1f6:	b299      	uxth	r1, r3
 800f1f8:	697b      	ldr	r3, [r7, #20]
 800f1fa:	b29b      	uxth	r3, r3
 800f1fc:	fb11 f303 	smulbb	r3, r1, r3
 800f200:	b29b      	uxth	r3, r3
 800f202:	4413      	add	r3, r2
 800f204:	b29b      	uxth	r3, r3
 800f206:	3301      	adds	r3, #1
 800f208:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, WHITE,  BLACK);
 800f20a:	4b07      	ldr	r3, [pc, #28]	; (800f228 <updateStringItem+0x540>)
 800f20c:	799b      	ldrb	r3, [r3, #6]
 800f20e:	011b      	lsls	r3, r3, #4
 800f210:	3308      	adds	r3, #8
 800f212:	4a05      	ldr	r2, [pc, #20]	; (800f228 <updateStringItem+0x540>)
 800f214:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f216:	2300      	movs	r3, #0
 800f218:	9301      	str	r3, [sp, #4]
 800f21a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f21e:	9300      	str	r3, [sp, #0]
 800f220:	4b02      	ldr	r3, [pc, #8]	; (800f22c <updateStringItem+0x544>)
 800f222:	f7fa f837 	bl	8009294 <Paint_DrawString_EN>
 800f226:	e1b5      	b.n	800f594 <updateStringItem+0x8ac>
 800f228:	2400b030 	.word	0x2400b030
 800f22c:	24000018 	.word	0x24000018
					}

				}
				else if (currentCursorPosition.cursorPosition == VALUE)
 800f230:	4b92      	ldr	r3, [pc, #584]	; (800f47c <updateStringItem+0x794>)
 800f232:	781b      	ldrb	r3, [r3, #0]
 800f234:	2b0b      	cmp	r3, #11
 800f236:	f040 8127 	bne.w	800f488 <updateStringItem+0x7a0>
				{
					if (howToDraw == RIGHT)
 800f23a:	79fb      	ldrb	r3, [r7, #7]
 800f23c:	2b04      	cmp	r3, #4
 800f23e:	f040 8087 	bne.w	800f350 <updateStringItem+0x668>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f242:	7ffb      	ldrb	r3, [r7, #31]
 800f244:	b29b      	uxth	r3, r3
 800f246:	3301      	adds	r3, #1
 800f248:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f24a:	7fbb      	ldrb	r3, [r7, #30]
 800f24c:	b29a      	uxth	r2, r3
 800f24e:	7f7b      	ldrb	r3, [r7, #29]
 800f250:	b299      	uxth	r1, r3
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	b29b      	uxth	r3, r3
 800f256:	fb11 f303 	smulbb	r3, r1, r3
 800f25a:	b29b      	uxth	r3, r3
 800f25c:	4413      	add	r3, r2
 800f25e:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f260:	3301      	adds	r3, #1
 800f262:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 800f264:	7ffb      	ldrb	r3, [r7, #31]
 800f266:	b29c      	uxth	r4, r3
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	011b      	lsls	r3, r3, #4
 800f26c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f270:	4a83      	ldr	r2, [pc, #524]	; (800f480 <updateStringItem+0x798>)
 800f272:	4413      	add	r3, r2
 800f274:	3304      	adds	r3, #4
 800f276:	4618      	mov	r0, r3
 800f278:	f7f1 f83c 	bl	80002f4 <strlen>
 800f27c:	4603      	mov	r3, r0
 800f27e:	b29a      	uxth	r2, r3
 800f280:	4b80      	ldr	r3, [pc, #512]	; (800f484 <updateStringItem+0x79c>)
 800f282:	889b      	ldrh	r3, [r3, #4]
 800f284:	fb12 f303 	smulbb	r3, r2, r3
 800f288:	b29b      	uxth	r3, r3
 800f28a:	4423      	add	r3, r4
 800f28c:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f28e:	3301      	adds	r3, #1
 800f290:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800f292:	7fbb      	ldrb	r3, [r7, #30]
 800f294:	b29a      	uxth	r2, r3
 800f296:	7f7b      	ldrb	r3, [r7, #29]
 800f298:	b299      	uxth	r1, r3
 800f29a:	697b      	ldr	r3, [r7, #20]
 800f29c:	b29b      	uxth	r3, r3
 800f29e:	fb11 f303 	smulbb	r3, r1, r3
 800f2a2:	b29b      	uxth	r3, r3
 800f2a4:	4413      	add	r3, r2
 800f2a6:	b29a      	uxth	r2, r3
 800f2a8:	4b76      	ldr	r3, [pc, #472]	; (800f484 <updateStringItem+0x79c>)
 800f2aa:	88db      	ldrh	r3, [r3, #6]
 800f2ac:	4413      	add	r3, r2
 800f2ae:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f2b0:	3301      	adds	r3, #1
 800f2b2:	b29b      	uxth	r3, r3
 800f2b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2b8:	9200      	str	r2, [sp, #0]
 800f2ba:	4602      	mov	r2, r0
 800f2bc:	4631      	mov	r1, r6
 800f2be:	4628      	mov	r0, r5
 800f2c0:	f7f9 fbca 	bl	8008a58 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f2c4:	7ffb      	ldrb	r3, [r7, #31]
 800f2c6:	b29b      	uxth	r3, r3
 800f2c8:	3301      	adds	r3, #1
 800f2ca:	b298      	uxth	r0, r3
 800f2cc:	7fbb      	ldrb	r3, [r7, #30]
 800f2ce:	b29a      	uxth	r2, r3
 800f2d0:	7f7b      	ldrb	r3, [r7, #29]
 800f2d2:	b299      	uxth	r1, r3
 800f2d4:	697b      	ldr	r3, [r7, #20]
 800f2d6:	b29b      	uxth	r3, r3
 800f2d8:	fb11 f303 	smulbb	r3, r1, r3
 800f2dc:	b29b      	uxth	r3, r3
 800f2de:	4413      	add	r3, r2
 800f2e0:	b29b      	uxth	r3, r3
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 800f2e6:	697b      	ldr	r3, [r7, #20]
 800f2e8:	011b      	lsls	r3, r3, #4
 800f2ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f2ee:	4a64      	ldr	r2, [pc, #400]	; (800f480 <updateStringItem+0x798>)
 800f2f0:	4413      	add	r3, r2
 800f2f2:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	9301      	str	r3, [sp, #4]
 800f2f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f2fc:	9300      	str	r3, [sp, #0]
 800f2fe:	4b61      	ldr	r3, [pc, #388]	; (800f484 <updateStringItem+0x79c>)
 800f300:	f7f9 ffc8 	bl	8009294 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f304:	7ffb      	ldrb	r3, [r7, #31]
 800f306:	b29a      	uxth	r2, r3
 800f308:	7f3b      	ldrb	r3, [r7, #28]
 800f30a:	085b      	lsrs	r3, r3, #1
 800f30c:	b2db      	uxtb	r3, r3
 800f30e:	b29b      	uxth	r3, r3
 800f310:	4413      	add	r3, r2
 800f312:	b29b      	uxth	r3, r3
 800f314:	3301      	adds	r3, #1
 800f316:	b298      	uxth	r0, r3
 800f318:	7fbb      	ldrb	r3, [r7, #30]
 800f31a:	b29a      	uxth	r2, r3
 800f31c:	7f7b      	ldrb	r3, [r7, #29]
 800f31e:	b299      	uxth	r1, r3
 800f320:	697b      	ldr	r3, [r7, #20]
 800f322:	b29b      	uxth	r3, r3
 800f324:	fb11 f303 	smulbb	r3, r1, r3
 800f328:	b29b      	uxth	r3, r3
 800f32a:	4413      	add	r3, r2
 800f32c:	b29b      	uxth	r3, r3
 800f32e:	3301      	adds	r3, #1
 800f330:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, LGRAY,  BLACK);
 800f332:	4b53      	ldr	r3, [pc, #332]	; (800f480 <updateStringItem+0x798>)
 800f334:	799b      	ldrb	r3, [r3, #6]
 800f336:	011b      	lsls	r3, r3, #4
 800f338:	3308      	adds	r3, #8
 800f33a:	4a51      	ldr	r2, [pc, #324]	; (800f480 <updateStringItem+0x798>)
 800f33c:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f33e:	2300      	movs	r3, #0
 800f340:	9301      	str	r3, [sp, #4]
 800f342:	f24c 6318 	movw	r3, #50712	; 0xc618
 800f346:	9300      	str	r3, [sp, #0]
 800f348:	4b4e      	ldr	r3, [pc, #312]	; (800f484 <updateStringItem+0x79c>)
 800f34a:	f7f9 ffa3 	bl	8009294 <Paint_DrawString_EN>
 800f34e:	e121      	b.n	800f594 <updateStringItem+0x8ac>
					}
					else if (howToDraw == DOWN)
 800f350:	79fb      	ldrb	r3, [r7, #7]
 800f352:	2b01      	cmp	r3, #1
 800f354:	d146      	bne.n	800f3e4 <updateStringItem+0x6fc>
					{
						stringItem.startValue = fmax(stringItem.startValue - stringItem.deltaMultiplier, stringItem.minValue * 1.0);
 800f356:	4b4a      	ldr	r3, [pc, #296]	; (800f480 <updateStringItem+0x798>)
 800f358:	799b      	ldrb	r3, [r3, #6]
 800f35a:	461a      	mov	r2, r3
 800f35c:	4b48      	ldr	r3, [pc, #288]	; (800f480 <updateStringItem+0x798>)
 800f35e:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 800f362:	1ad3      	subs	r3, r2, r3
 800f364:	ee07 3a90 	vmov	s15, r3
 800f368:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f36c:	4b44      	ldr	r3, [pc, #272]	; (800f480 <updateStringItem+0x798>)
 800f36e:	791b      	ldrb	r3, [r3, #4]
 800f370:	ee06 3a90 	vmov	s13, r3
 800f374:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f378:	eeb0 1b46 	vmov.f64	d1, d6
 800f37c:	eeb0 0b47 	vmov.f64	d0, d7
 800f380:	f005 fc44 	bl	8014c0c <fmax>
 800f384:	eeb0 7b40 	vmov.f64	d7, d0
 800f388:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800f38c:	edc7 7a00 	vstr	s15, [r7]
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	b2da      	uxtb	r2, r3
 800f394:	4b3a      	ldr	r3, [pc, #232]	; (800f480 <updateStringItem+0x798>)
 800f396:	719a      	strb	r2, [r3, #6]
//						sprintf(localString,"%05d",stringItem.startValue);
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f398:	7ffb      	ldrb	r3, [r7, #31]
 800f39a:	b29a      	uxth	r2, r3
 800f39c:	7f3b      	ldrb	r3, [r7, #28]
 800f39e:	085b      	lsrs	r3, r3, #1
 800f3a0:	b2db      	uxtb	r3, r3
 800f3a2:	b29b      	uxth	r3, r3
 800f3a4:	4413      	add	r3, r2
 800f3a6:	b29b      	uxth	r3, r3
 800f3a8:	3301      	adds	r3, #1
 800f3aa:	b298      	uxth	r0, r3
 800f3ac:	7fbb      	ldrb	r3, [r7, #30]
 800f3ae:	b29a      	uxth	r2, r3
 800f3b0:	7f7b      	ldrb	r3, [r7, #29]
 800f3b2:	b299      	uxth	r1, r3
 800f3b4:	697b      	ldr	r3, [r7, #20]
 800f3b6:	b29b      	uxth	r3, r3
 800f3b8:	fb11 f303 	smulbb	r3, r1, r3
 800f3bc:	b29b      	uxth	r3, r3
 800f3be:	4413      	add	r3, r2
 800f3c0:	b29b      	uxth	r3, r3
 800f3c2:	3301      	adds	r3, #1
 800f3c4:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, LGRAY,  BLACK);
 800f3c6:	4b2e      	ldr	r3, [pc, #184]	; (800f480 <updateStringItem+0x798>)
 800f3c8:	799b      	ldrb	r3, [r3, #6]
 800f3ca:	011b      	lsls	r3, r3, #4
 800f3cc:	3308      	adds	r3, #8
 800f3ce:	4a2c      	ldr	r2, [pc, #176]	; (800f480 <updateStringItem+0x798>)
 800f3d0:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	9301      	str	r3, [sp, #4]
 800f3d6:	f24c 6318 	movw	r3, #50712	; 0xc618
 800f3da:	9300      	str	r3, [sp, #0]
 800f3dc:	4b29      	ldr	r3, [pc, #164]	; (800f484 <updateStringItem+0x79c>)
 800f3de:	f7f9 ff59 	bl	8009294 <Paint_DrawString_EN>
 800f3e2:	e0d7      	b.n	800f594 <updateStringItem+0x8ac>
					}
					else if (howToDraw == UP)
 800f3e4:	79fb      	ldrb	r3, [r7, #7]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	f040 80d4 	bne.w	800f594 <updateStringItem+0x8ac>
					{
						stringItem.startValue = fmin(stringItem.startValue + stringItem.deltaMultiplier, stringItem.maxValue * 1.0);
 800f3ec:	4b24      	ldr	r3, [pc, #144]	; (800f480 <updateStringItem+0x798>)
 800f3ee:	799b      	ldrb	r3, [r3, #6]
 800f3f0:	461a      	mov	r2, r3
 800f3f2:	4b23      	ldr	r3, [pc, #140]	; (800f480 <updateStringItem+0x798>)
 800f3f4:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 800f3f8:	4413      	add	r3, r2
 800f3fa:	ee07 3a90 	vmov	s15, r3
 800f3fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f402:	4b1f      	ldr	r3, [pc, #124]	; (800f480 <updateStringItem+0x798>)
 800f404:	795b      	ldrb	r3, [r3, #5]
 800f406:	ee06 3a90 	vmov	s13, r3
 800f40a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f40e:	eeb0 1b46 	vmov.f64	d1, d6
 800f412:	eeb0 0b47 	vmov.f64	d0, d7
 800f416:	f005 fc14 	bl	8014c42 <fmin>
 800f41a:	eeb0 7b40 	vmov.f64	d7, d0
 800f41e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800f422:	edc7 7a00 	vstr	s15, [r7]
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	b2da      	uxtb	r2, r3
 800f42a:	4b15      	ldr	r3, [pc, #84]	; (800f480 <updateStringItem+0x798>)
 800f42c:	719a      	strb	r2, [r3, #6]
//						sprintf(localString,"%05d",stringItem.startValue);
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f42e:	7ffb      	ldrb	r3, [r7, #31]
 800f430:	b29a      	uxth	r2, r3
 800f432:	7f3b      	ldrb	r3, [r7, #28]
 800f434:	085b      	lsrs	r3, r3, #1
 800f436:	b2db      	uxtb	r3, r3
 800f438:	b29b      	uxth	r3, r3
 800f43a:	4413      	add	r3, r2
 800f43c:	b29b      	uxth	r3, r3
 800f43e:	3301      	adds	r3, #1
 800f440:	b298      	uxth	r0, r3
 800f442:	7fbb      	ldrb	r3, [r7, #30]
 800f444:	b29a      	uxth	r2, r3
 800f446:	7f7b      	ldrb	r3, [r7, #29]
 800f448:	b299      	uxth	r1, r3
 800f44a:	697b      	ldr	r3, [r7, #20]
 800f44c:	b29b      	uxth	r3, r3
 800f44e:	fb11 f303 	smulbb	r3, r1, r3
 800f452:	b29b      	uxth	r3, r3
 800f454:	4413      	add	r3, r2
 800f456:	b29b      	uxth	r3, r3
 800f458:	3301      	adds	r3, #1
 800f45a:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, LGRAY,  BLACK);
 800f45c:	4b08      	ldr	r3, [pc, #32]	; (800f480 <updateStringItem+0x798>)
 800f45e:	799b      	ldrb	r3, [r3, #6]
 800f460:	011b      	lsls	r3, r3, #4
 800f462:	3308      	adds	r3, #8
 800f464:	4a06      	ldr	r2, [pc, #24]	; (800f480 <updateStringItem+0x798>)
 800f466:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f468:	2300      	movs	r3, #0
 800f46a:	9301      	str	r3, [sp, #4]
 800f46c:	f24c 6318 	movw	r3, #50712	; 0xc618
 800f470:	9300      	str	r3, [sp, #0]
 800f472:	4b04      	ldr	r3, [pc, #16]	; (800f484 <updateStringItem+0x79c>)
 800f474:	f7f9 ff0e 	bl	8009294 <Paint_DrawString_EN>
 800f478:	e08c      	b.n	800f594 <updateStringItem+0x8ac>
 800f47a:	bf00      	nop
 800f47c:	2400a5bc 	.word	0x2400a5bc
 800f480:	2400b030 	.word	0x2400b030
 800f484:	24000018 	.word	0x24000018
					}
				}
				else
				{
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800f488:	7ffb      	ldrb	r3, [r7, #31]
 800f48a:	b29b      	uxth	r3, r3
 800f48c:	3301      	adds	r3, #1
 800f48e:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f490:	7fbb      	ldrb	r3, [r7, #30]
 800f492:	b29a      	uxth	r2, r3
 800f494:	7f7b      	ldrb	r3, [r7, #29]
 800f496:	b299      	uxth	r1, r3
 800f498:	697b      	ldr	r3, [r7, #20]
 800f49a:	b29b      	uxth	r3, r3
 800f49c:	fb11 f303 	smulbb	r3, r1, r3
 800f4a0:	b29b      	uxth	r3, r3
 800f4a2:	4413      	add	r3, r2
 800f4a4:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800f4a6:	3301      	adds	r3, #1
 800f4a8:	b29e      	uxth	r6, r3
							MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 800f4aa:	7ffb      	ldrb	r3, [r7, #31]
 800f4ac:	b29c      	uxth	r4, r3
 800f4ae:	697b      	ldr	r3, [r7, #20]
 800f4b0:	011b      	lsls	r3, r3, #4
 800f4b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f4b6:	4a8e      	ldr	r2, [pc, #568]	; (800f6f0 <updateStringItem+0xa08>)
 800f4b8:	4413      	add	r3, r2
 800f4ba:	3304      	adds	r3, #4
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f7f0 ff19 	bl	80002f4 <strlen>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	b29a      	uxth	r2, r3
 800f4c6:	4b8b      	ldr	r3, [pc, #556]	; (800f6f4 <updateStringItem+0xa0c>)
 800f4c8:	889b      	ldrh	r3, [r3, #4]
 800f4ca:	fb12 f303 	smulbb	r3, r2, r3
 800f4ce:	b29b      	uxth	r3, r3
 800f4d0:	4423      	add	r3, r4
 800f4d2:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800f4d4:	3301      	adds	r3, #1
 800f4d6:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800f4d8:	7fbb      	ldrb	r3, [r7, #30]
 800f4da:	b29a      	uxth	r2, r3
 800f4dc:	7f7b      	ldrb	r3, [r7, #29]
 800f4de:	b299      	uxth	r1, r3
 800f4e0:	697b      	ldr	r3, [r7, #20]
 800f4e2:	b29b      	uxth	r3, r3
 800f4e4:	fb11 f303 	smulbb	r3, r1, r3
 800f4e8:	b29b      	uxth	r3, r3
 800f4ea:	4413      	add	r3, r2
 800f4ec:	b29a      	uxth	r2, r3
 800f4ee:	4b81      	ldr	r3, [pc, #516]	; (800f6f4 <updateStringItem+0xa0c>)
 800f4f0:	88db      	ldrh	r3, [r3, #6]
 800f4f2:	4413      	add	r3, r2
 800f4f4:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800f4f6:	3301      	adds	r3, #1
 800f4f8:	b29b      	uxth	r3, r3
 800f4fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f4fe:	9200      	str	r2, [sp, #0]
 800f500:	4602      	mov	r2, r0
 800f502:	4631      	mov	r1, r6
 800f504:	4628      	mov	r0, r5
 800f506:	f7f9 faa7 	bl	8008a58 <Paint_ClearWindows>
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f50a:	7ffb      	ldrb	r3, [r7, #31]
 800f50c:	b29b      	uxth	r3, r3
 800f50e:	3301      	adds	r3, #1
 800f510:	b298      	uxth	r0, r3
 800f512:	7fbb      	ldrb	r3, [r7, #30]
 800f514:	b29a      	uxth	r2, r3
 800f516:	7f7b      	ldrb	r3, [r7, #29]
 800f518:	b299      	uxth	r1, r3
 800f51a:	697b      	ldr	r3, [r7, #20]
 800f51c:	b29b      	uxth	r3, r3
 800f51e:	fb11 f303 	smulbb	r3, r1, r3
 800f522:	b29b      	uxth	r3, r3
 800f524:	4413      	add	r3, r2
 800f526:	b29b      	uxth	r3, r3
 800f528:	3301      	adds	r3, #1
 800f52a:	b299      	uxth	r1, r3
							stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 800f52c:	697b      	ldr	r3, [r7, #20]
 800f52e:	011b      	lsls	r3, r3, #4
 800f530:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f534:	4a6e      	ldr	r2, [pc, #440]	; (800f6f0 <updateStringItem+0xa08>)
 800f536:	4413      	add	r3, r2
 800f538:	1d1a      	adds	r2, r3, #4
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f53a:	2300      	movs	r3, #0
 800f53c:	9301      	str	r3, [sp, #4]
 800f53e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f542:	9300      	str	r3, [sp, #0]
 800f544:	4b6b      	ldr	r3, [pc, #428]	; (800f6f4 <updateStringItem+0xa0c>)
 800f546:	f7f9 fea5 	bl	8009294 <Paint_DrawString_EN>
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f54a:	7ffb      	ldrb	r3, [r7, #31]
 800f54c:	b29a      	uxth	r2, r3
 800f54e:	7f3b      	ldrb	r3, [r7, #28]
 800f550:	085b      	lsrs	r3, r3, #1
 800f552:	b2db      	uxtb	r3, r3
 800f554:	b29b      	uxth	r3, r3
 800f556:	4413      	add	r3, r2
 800f558:	b29b      	uxth	r3, r3
 800f55a:	3301      	adds	r3, #1
 800f55c:	b298      	uxth	r0, r3
 800f55e:	7fbb      	ldrb	r3, [r7, #30]
 800f560:	b29a      	uxth	r2, r3
 800f562:	7f7b      	ldrb	r3, [r7, #29]
 800f564:	b299      	uxth	r1, r3
 800f566:	697b      	ldr	r3, [r7, #20]
 800f568:	b29b      	uxth	r3, r3
 800f56a:	fb11 f303 	smulbb	r3, r1, r3
 800f56e:	b29b      	uxth	r3, r3
 800f570:	4413      	add	r3, r2
 800f572:	b29b      	uxth	r3, r3
 800f574:	3301      	adds	r3, #1
 800f576:	b299      	uxth	r1, r3
							stringItem.valuesArray[stringItem.startValue], &Font12, WHITE,  BLACK);
 800f578:	4b5d      	ldr	r3, [pc, #372]	; (800f6f0 <updateStringItem+0xa08>)
 800f57a:	799b      	ldrb	r3, [r3, #6]
 800f57c:	011b      	lsls	r3, r3, #4
 800f57e:	3308      	adds	r3, #8
 800f580:	4a5b      	ldr	r2, [pc, #364]	; (800f6f0 <updateStringItem+0xa08>)
 800f582:	441a      	add	r2, r3
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f584:	2300      	movs	r3, #0
 800f586:	9301      	str	r3, [sp, #4]
 800f588:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f58c:	9300      	str	r3, [sp, #0]
 800f58e:	4b59      	ldr	r3, [pc, #356]	; (800f6f4 <updateStringItem+0xa0c>)
 800f590:	f7f9 fe80 	bl	8009294 <Paint_DrawString_EN>
				}
			}
			// Render value text of "Multiplier" with Grey or White background
			if ( (i == 3) )
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	2b03      	cmp	r3, #3
 800f598:	f040 835e 	bne.w	800fc58 <updateStringItem+0xf70>
			{
				char localString[8] = "";
 800f59c:	2300      	movs	r3, #0
 800f59e:	60fb      	str	r3, [r7, #12]
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	613b      	str	r3, [r7, #16]
				sprintf(localString,"%d",stringItem.deltaMultiplier);
 800f5a4:	4b52      	ldr	r3, [pc, #328]	; (800f6f0 <updateStringItem+0xa08>)
 800f5a6:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 800f5aa:	461a      	mov	r2, r3
 800f5ac:	f107 030c 	add.w	r3, r7, #12
 800f5b0:	4951      	ldr	r1, [pc, #324]	; (800f6f8 <updateStringItem+0xa10>)
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f001 ffae 	bl	8011514 <siprintf>
				if (currentCursorPosition.cursorPosition == 0x03)
 800f5b8:	4b50      	ldr	r3, [pc, #320]	; (800f6fc <updateStringItem+0xa14>)
 800f5ba:	781b      	ldrb	r3, [r3, #0]
 800f5bc:	2b03      	cmp	r3, #3
 800f5be:	f040 81b1 	bne.w	800f924 <updateStringItem+0xc3c>
				{
					if ( (howToDraw == LEFT) || (howToDraw == FULL) )
 800f5c2:	79fb      	ldrb	r3, [r7, #7]
 800f5c4:	2b03      	cmp	r3, #3
 800f5c6:	d003      	beq.n	800f5d0 <updateStringItem+0x8e8>
 800f5c8:	79fb      	ldrb	r3, [r7, #7]
 800f5ca:	2b02      	cmp	r3, #2
 800f5cc:	f040 8098 	bne.w	800f700 <updateStringItem+0xa18>
					{
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f5d0:	7ffb      	ldrb	r3, [r7, #31]
 800f5d2:	b29b      	uxth	r3, r3
 800f5d4:	3301      	adds	r3, #1
 800f5d6:	b298      	uxth	r0, r3
 800f5d8:	7fbb      	ldrb	r3, [r7, #30]
 800f5da:	b29a      	uxth	r2, r3
 800f5dc:	7f7b      	ldrb	r3, [r7, #29]
 800f5de:	b299      	uxth	r1, r3
 800f5e0:	697b      	ldr	r3, [r7, #20]
 800f5e2:	b29b      	uxth	r3, r3
 800f5e4:	fb11 f303 	smulbb	r3, r1, r3
 800f5e8:	b29b      	uxth	r3, r3
 800f5ea:	4413      	add	r3, r2
 800f5ec:	b29b      	uxth	r3, r3
 800f5ee:	3301      	adds	r3, #1
 800f5f0:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	011b      	lsls	r3, r3, #4
 800f5f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f5fa:	4a3d      	ldr	r2, [pc, #244]	; (800f6f0 <updateStringItem+0xa08>)
 800f5fc:	4413      	add	r3, r2
 800f5fe:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f600:	2300      	movs	r3, #0
 800f602:	9301      	str	r3, [sp, #4]
 800f604:	f24c 6318 	movw	r3, #50712	; 0xc618
 800f608:	9300      	str	r3, [sp, #0]
 800f60a:	4b3a      	ldr	r3, [pc, #232]	; (800f6f4 <updateStringItem+0xa0c>)
 800f60c:	f7f9 fe42 	bl	8009294 <Paint_DrawString_EN>
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800f610:	7ffb      	ldrb	r3, [r7, #31]
 800f612:	b29a      	uxth	r2, r3
 800f614:	7f3b      	ldrb	r3, [r7, #28]
 800f616:	085b      	lsrs	r3, r3, #1
 800f618:	b2db      	uxtb	r3, r3
 800f61a:	b29b      	uxth	r3, r3
 800f61c:	4413      	add	r3, r2
 800f61e:	b29b      	uxth	r3, r3
 800f620:	3301      	adds	r3, #1
 800f622:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f624:	7fbb      	ldrb	r3, [r7, #30]
 800f626:	b29a      	uxth	r2, r3
 800f628:	7f7b      	ldrb	r3, [r7, #29]
 800f62a:	b299      	uxth	r1, r3
 800f62c:	697b      	ldr	r3, [r7, #20]
 800f62e:	b29b      	uxth	r3, r3
 800f630:	fb11 f303 	smulbb	r3, r1, r3
 800f634:	b29b      	uxth	r3, r3
 800f636:	4413      	add	r3, r2
 800f638:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800f63a:	3301      	adds	r3, #1
 800f63c:	b29e      	uxth	r6, r3
								MenuRectangleStartX + MenuRectangleWidth / 2 + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 800f63e:	7ffb      	ldrb	r3, [r7, #31]
 800f640:	b29a      	uxth	r2, r3
 800f642:	7f3b      	ldrb	r3, [r7, #28]
 800f644:	085b      	lsrs	r3, r3, #1
 800f646:	b2db      	uxtb	r3, r3
 800f648:	b29b      	uxth	r3, r3
 800f64a:	4413      	add	r3, r2
 800f64c:	b29c      	uxth	r4, r3
 800f64e:	697b      	ldr	r3, [r7, #20]
 800f650:	011b      	lsls	r3, r3, #4
 800f652:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f656:	4a26      	ldr	r2, [pc, #152]	; (800f6f0 <updateStringItem+0xa08>)
 800f658:	4413      	add	r3, r2
 800f65a:	3304      	adds	r3, #4
 800f65c:	4618      	mov	r0, r3
 800f65e:	f7f0 fe49 	bl	80002f4 <strlen>
 800f662:	4603      	mov	r3, r0
 800f664:	b29a      	uxth	r2, r3
 800f666:	4b23      	ldr	r3, [pc, #140]	; (800f6f4 <updateStringItem+0xa0c>)
 800f668:	889b      	ldrh	r3, [r3, #4]
 800f66a:	fb12 f303 	smulbb	r3, r2, r3
 800f66e:	b29b      	uxth	r3, r3
 800f670:	4423      	add	r3, r4
 800f672:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800f674:	3301      	adds	r3, #1
 800f676:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800f678:	7fbb      	ldrb	r3, [r7, #30]
 800f67a:	b29a      	uxth	r2, r3
 800f67c:	7f7b      	ldrb	r3, [r7, #29]
 800f67e:	b299      	uxth	r1, r3
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	b29b      	uxth	r3, r3
 800f684:	fb11 f303 	smulbb	r3, r1, r3
 800f688:	b29b      	uxth	r3, r3
 800f68a:	4413      	add	r3, r2
 800f68c:	b29a      	uxth	r2, r3
 800f68e:	4b19      	ldr	r3, [pc, #100]	; (800f6f4 <updateStringItem+0xa0c>)
 800f690:	88db      	ldrh	r3, [r3, #6]
 800f692:	4413      	add	r3, r2
 800f694:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800f696:	3301      	adds	r3, #1
 800f698:	b29b      	uxth	r3, r3
 800f69a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f69e:	9200      	str	r2, [sp, #0]
 800f6a0:	4602      	mov	r2, r0
 800f6a2:	4631      	mov	r1, r6
 800f6a4:	4628      	mov	r0, r5
 800f6a6:	f7f9 f9d7 	bl	8008a58 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f6aa:	7ffb      	ldrb	r3, [r7, #31]
 800f6ac:	b29a      	uxth	r2, r3
 800f6ae:	7f3b      	ldrb	r3, [r7, #28]
 800f6b0:	085b      	lsrs	r3, r3, #1
 800f6b2:	b2db      	uxtb	r3, r3
 800f6b4:	b29b      	uxth	r3, r3
 800f6b6:	4413      	add	r3, r2
 800f6b8:	b29b      	uxth	r3, r3
 800f6ba:	3301      	adds	r3, #1
 800f6bc:	b298      	uxth	r0, r3
 800f6be:	7fbb      	ldrb	r3, [r7, #30]
 800f6c0:	b29a      	uxth	r2, r3
 800f6c2:	7f7b      	ldrb	r3, [r7, #29]
 800f6c4:	b299      	uxth	r1, r3
 800f6c6:	697b      	ldr	r3, [r7, #20]
 800f6c8:	b29b      	uxth	r3, r3
 800f6ca:	fb11 f303 	smulbb	r3, r1, r3
 800f6ce:	b29b      	uxth	r3, r3
 800f6d0:	4413      	add	r3, r2
 800f6d2:	b29b      	uxth	r3, r3
 800f6d4:	3301      	adds	r3, #1
 800f6d6:	b299      	uxth	r1, r3
 800f6d8:	f107 020c 	add.w	r2, r7, #12
 800f6dc:	2300      	movs	r3, #0
 800f6de:	9301      	str	r3, [sp, #4]
 800f6e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f6e4:	9300      	str	r3, [sp, #0]
 800f6e6:	4b03      	ldr	r3, [pc, #12]	; (800f6f4 <updateStringItem+0xa0c>)
 800f6e8:	f7f9 fdd4 	bl	8009294 <Paint_DrawString_EN>
 800f6ec:	e2b4      	b.n	800fc58 <updateStringItem+0xf70>
 800f6ee:	bf00      	nop
 800f6f0:	2400b030 	.word	0x2400b030
 800f6f4:	24000018 	.word	0x24000018
 800f6f8:	080153b4 	.word	0x080153b4
 800f6fc:	2400a5bc 	.word	0x2400a5bc
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == DOWN)
 800f700:	79fb      	ldrb	r3, [r7, #7]
 800f702:	2b01      	cmp	r3, #1
 800f704:	f040 8083 	bne.w	800f80e <updateStringItem+0xb26>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f708:	7ffb      	ldrb	r3, [r7, #31]
 800f70a:	b29b      	uxth	r3, r3
 800f70c:	3301      	adds	r3, #1
 800f70e:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f710:	7fbb      	ldrb	r3, [r7, #30]
 800f712:	b29a      	uxth	r2, r3
 800f714:	7f7b      	ldrb	r3, [r7, #29]
 800f716:	b299      	uxth	r1, r3
 800f718:	697b      	ldr	r3, [r7, #20]
 800f71a:	b29b      	uxth	r3, r3
 800f71c:	fb11 f303 	smulbb	r3, r1, r3
 800f720:	b29b      	uxth	r3, r3
 800f722:	4413      	add	r3, r2
 800f724:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f726:	3301      	adds	r3, #1
 800f728:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 800f72a:	7ffb      	ldrb	r3, [r7, #31]
 800f72c:	b29c      	uxth	r4, r3
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	011b      	lsls	r3, r3, #4
 800f732:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f736:	4a79      	ldr	r2, [pc, #484]	; (800f91c <updateStringItem+0xc34>)
 800f738:	4413      	add	r3, r2
 800f73a:	3304      	adds	r3, #4
 800f73c:	4618      	mov	r0, r3
 800f73e:	f7f0 fdd9 	bl	80002f4 <strlen>
 800f742:	4603      	mov	r3, r0
 800f744:	b29a      	uxth	r2, r3
 800f746:	4b76      	ldr	r3, [pc, #472]	; (800f920 <updateStringItem+0xc38>)
 800f748:	889b      	ldrh	r3, [r3, #4]
 800f74a:	fb12 f303 	smulbb	r3, r2, r3
 800f74e:	b29b      	uxth	r3, r3
 800f750:	4423      	add	r3, r4
 800f752:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f754:	3301      	adds	r3, #1
 800f756:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800f758:	7fbb      	ldrb	r3, [r7, #30]
 800f75a:	b29a      	uxth	r2, r3
 800f75c:	7f7b      	ldrb	r3, [r7, #29]
 800f75e:	b299      	uxth	r1, r3
 800f760:	697b      	ldr	r3, [r7, #20]
 800f762:	b29b      	uxth	r3, r3
 800f764:	fb11 f303 	smulbb	r3, r1, r3
 800f768:	b29b      	uxth	r3, r3
 800f76a:	4413      	add	r3, r2
 800f76c:	b29a      	uxth	r2, r3
 800f76e:	4b6c      	ldr	r3, [pc, #432]	; (800f920 <updateStringItem+0xc38>)
 800f770:	88db      	ldrh	r3, [r3, #6]
 800f772:	4413      	add	r3, r2
 800f774:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f776:	3301      	adds	r3, #1
 800f778:	b29b      	uxth	r3, r3
 800f77a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f77e:	9200      	str	r2, [sp, #0]
 800f780:	4602      	mov	r2, r0
 800f782:	4631      	mov	r1, r6
 800f784:	4628      	mov	r0, r5
 800f786:	f7f9 f967 	bl	8008a58 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f78a:	7ffb      	ldrb	r3, [r7, #31]
 800f78c:	b29b      	uxth	r3, r3
 800f78e:	3301      	adds	r3, #1
 800f790:	b298      	uxth	r0, r3
 800f792:	7fbb      	ldrb	r3, [r7, #30]
 800f794:	b29a      	uxth	r2, r3
 800f796:	7f7b      	ldrb	r3, [r7, #29]
 800f798:	b299      	uxth	r1, r3
 800f79a:	697b      	ldr	r3, [r7, #20]
 800f79c:	b29b      	uxth	r3, r3
 800f79e:	fb11 f303 	smulbb	r3, r1, r3
 800f7a2:	b29b      	uxth	r3, r3
 800f7a4:	4413      	add	r3, r2
 800f7a6:	b29b      	uxth	r3, r3
 800f7a8:	3301      	adds	r3, #1
 800f7aa:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 800f7ac:	697b      	ldr	r3, [r7, #20]
 800f7ae:	011b      	lsls	r3, r3, #4
 800f7b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f7b4:	4a59      	ldr	r2, [pc, #356]	; (800f91c <updateStringItem+0xc34>)
 800f7b6:	4413      	add	r3, r2
 800f7b8:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	9301      	str	r3, [sp, #4]
 800f7be:	f24c 6318 	movw	r3, #50712	; 0xc618
 800f7c2:	9300      	str	r3, [sp, #0]
 800f7c4:	4b56      	ldr	r3, [pc, #344]	; (800f920 <updateStringItem+0xc38>)
 800f7c6:	f7f9 fd65 	bl	8009294 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f7ca:	7ffb      	ldrb	r3, [r7, #31]
 800f7cc:	b29a      	uxth	r2, r3
 800f7ce:	7f3b      	ldrb	r3, [r7, #28]
 800f7d0:	085b      	lsrs	r3, r3, #1
 800f7d2:	b2db      	uxtb	r3, r3
 800f7d4:	b29b      	uxth	r3, r3
 800f7d6:	4413      	add	r3, r2
 800f7d8:	b29b      	uxth	r3, r3
 800f7da:	3301      	adds	r3, #1
 800f7dc:	b298      	uxth	r0, r3
 800f7de:	7fbb      	ldrb	r3, [r7, #30]
 800f7e0:	b29a      	uxth	r2, r3
 800f7e2:	7f7b      	ldrb	r3, [r7, #29]
 800f7e4:	b299      	uxth	r1, r3
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	b29b      	uxth	r3, r3
 800f7ea:	fb11 f303 	smulbb	r3, r1, r3
 800f7ee:	b29b      	uxth	r3, r3
 800f7f0:	4413      	add	r3, r2
 800f7f2:	b29b      	uxth	r3, r3
 800f7f4:	3301      	adds	r3, #1
 800f7f6:	b299      	uxth	r1, r3
 800f7f8:	f107 020c 	add.w	r2, r7, #12
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	9301      	str	r3, [sp, #4]
 800f800:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f804:	9300      	str	r3, [sp, #0]
 800f806:	4b46      	ldr	r3, [pc, #280]	; (800f920 <updateStringItem+0xc38>)
 800f808:	f7f9 fd44 	bl	8009294 <Paint_DrawString_EN>
 800f80c:	e224      	b.n	800fc58 <updateStringItem+0xf70>
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == UP)
 800f80e:	79fb      	ldrb	r3, [r7, #7]
 800f810:	2b00      	cmp	r3, #0
 800f812:	f040 8221 	bne.w	800fc58 <updateStringItem+0xf70>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f816:	7ffb      	ldrb	r3, [r7, #31]
 800f818:	b29b      	uxth	r3, r3
 800f81a:	3301      	adds	r3, #1
 800f81c:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f81e:	7fbb      	ldrb	r3, [r7, #30]
 800f820:	b29a      	uxth	r2, r3
 800f822:	7f7b      	ldrb	r3, [r7, #29]
 800f824:	b299      	uxth	r1, r3
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	b29b      	uxth	r3, r3
 800f82a:	fb11 f303 	smulbb	r3, r1, r3
 800f82e:	b29b      	uxth	r3, r3
 800f830:	4413      	add	r3, r2
 800f832:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f834:	3301      	adds	r3, #1
 800f836:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 800f838:	7ffb      	ldrb	r3, [r7, #31]
 800f83a:	b29c      	uxth	r4, r3
 800f83c:	697b      	ldr	r3, [r7, #20]
 800f83e:	011b      	lsls	r3, r3, #4
 800f840:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f844:	4a35      	ldr	r2, [pc, #212]	; (800f91c <updateStringItem+0xc34>)
 800f846:	4413      	add	r3, r2
 800f848:	3304      	adds	r3, #4
 800f84a:	4618      	mov	r0, r3
 800f84c:	f7f0 fd52 	bl	80002f4 <strlen>
 800f850:	4603      	mov	r3, r0
 800f852:	b29a      	uxth	r2, r3
 800f854:	4b32      	ldr	r3, [pc, #200]	; (800f920 <updateStringItem+0xc38>)
 800f856:	889b      	ldrh	r3, [r3, #4]
 800f858:	fb12 f303 	smulbb	r3, r2, r3
 800f85c:	b29b      	uxth	r3, r3
 800f85e:	4423      	add	r3, r4
 800f860:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f862:	3301      	adds	r3, #1
 800f864:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800f866:	7fbb      	ldrb	r3, [r7, #30]
 800f868:	b29a      	uxth	r2, r3
 800f86a:	7f7b      	ldrb	r3, [r7, #29]
 800f86c:	b299      	uxth	r1, r3
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	b29b      	uxth	r3, r3
 800f872:	fb11 f303 	smulbb	r3, r1, r3
 800f876:	b29b      	uxth	r3, r3
 800f878:	4413      	add	r3, r2
 800f87a:	b29a      	uxth	r2, r3
 800f87c:	4b28      	ldr	r3, [pc, #160]	; (800f920 <updateStringItem+0xc38>)
 800f87e:	88db      	ldrh	r3, [r3, #6]
 800f880:	4413      	add	r3, r2
 800f882:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f884:	3301      	adds	r3, #1
 800f886:	b29b      	uxth	r3, r3
 800f888:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f88c:	9200      	str	r2, [sp, #0]
 800f88e:	4602      	mov	r2, r0
 800f890:	4631      	mov	r1, r6
 800f892:	4628      	mov	r0, r5
 800f894:	f7f9 f8e0 	bl	8008a58 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f898:	7ffb      	ldrb	r3, [r7, #31]
 800f89a:	b29b      	uxth	r3, r3
 800f89c:	3301      	adds	r3, #1
 800f89e:	b298      	uxth	r0, r3
 800f8a0:	7fbb      	ldrb	r3, [r7, #30]
 800f8a2:	b29a      	uxth	r2, r3
 800f8a4:	7f7b      	ldrb	r3, [r7, #29]
 800f8a6:	b299      	uxth	r1, r3
 800f8a8:	697b      	ldr	r3, [r7, #20]
 800f8aa:	b29b      	uxth	r3, r3
 800f8ac:	fb11 f303 	smulbb	r3, r1, r3
 800f8b0:	b29b      	uxth	r3, r3
 800f8b2:	4413      	add	r3, r2
 800f8b4:	b29b      	uxth	r3, r3
 800f8b6:	3301      	adds	r3, #1
 800f8b8:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	011b      	lsls	r3, r3, #4
 800f8be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f8c2:	4a16      	ldr	r2, [pc, #88]	; (800f91c <updateStringItem+0xc34>)
 800f8c4:	4413      	add	r3, r2
 800f8c6:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	9301      	str	r3, [sp, #4]
 800f8cc:	f24c 6318 	movw	r3, #50712	; 0xc618
 800f8d0:	9300      	str	r3, [sp, #0]
 800f8d2:	4b13      	ldr	r3, [pc, #76]	; (800f920 <updateStringItem+0xc38>)
 800f8d4:	f7f9 fcde 	bl	8009294 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f8d8:	7ffb      	ldrb	r3, [r7, #31]
 800f8da:	b29a      	uxth	r2, r3
 800f8dc:	7f3b      	ldrb	r3, [r7, #28]
 800f8de:	085b      	lsrs	r3, r3, #1
 800f8e0:	b2db      	uxtb	r3, r3
 800f8e2:	b29b      	uxth	r3, r3
 800f8e4:	4413      	add	r3, r2
 800f8e6:	b29b      	uxth	r3, r3
 800f8e8:	3301      	adds	r3, #1
 800f8ea:	b298      	uxth	r0, r3
 800f8ec:	7fbb      	ldrb	r3, [r7, #30]
 800f8ee:	b29a      	uxth	r2, r3
 800f8f0:	7f7b      	ldrb	r3, [r7, #29]
 800f8f2:	b299      	uxth	r1, r3
 800f8f4:	697b      	ldr	r3, [r7, #20]
 800f8f6:	b29b      	uxth	r3, r3
 800f8f8:	fb11 f303 	smulbb	r3, r1, r3
 800f8fc:	b29b      	uxth	r3, r3
 800f8fe:	4413      	add	r3, r2
 800f900:	b29b      	uxth	r3, r3
 800f902:	3301      	adds	r3, #1
 800f904:	b299      	uxth	r1, r3
 800f906:	f107 020c 	add.w	r2, r7, #12
 800f90a:	2300      	movs	r3, #0
 800f90c:	9301      	str	r3, [sp, #4]
 800f90e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f912:	9300      	str	r3, [sp, #0]
 800f914:	4b02      	ldr	r3, [pc, #8]	; (800f920 <updateStringItem+0xc38>)
 800f916:	f7f9 fcbd 	bl	8009294 <Paint_DrawString_EN>
 800f91a:	e19d      	b.n	800fc58 <updateStringItem+0xf70>
 800f91c:	2400b030 	.word	0x2400b030
 800f920:	24000018 	.word	0x24000018
								localString, &Font12, WHITE,  BLACK);
					}
				}
				else if (currentCursorPosition.cursorPosition == MULTIPLIER)
 800f924:	4b85      	ldr	r3, [pc, #532]	; (800fb3c <updateStringItem+0xe54>)
 800f926:	781b      	ldrb	r3, [r3, #0]
 800f928:	2b0c      	cmp	r3, #12
 800f92a:	f040 8113 	bne.w	800fb54 <updateStringItem+0xe6c>
				{
					if (howToDraw == RIGHT)
 800f92e:	79fb      	ldrb	r3, [r7, #7]
 800f930:	2b04      	cmp	r3, #4
 800f932:	f040 8083 	bne.w	800fa3c <updateStringItem+0xd54>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f936:	7ffb      	ldrb	r3, [r7, #31]
 800f938:	b29b      	uxth	r3, r3
 800f93a:	3301      	adds	r3, #1
 800f93c:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f93e:	7fbb      	ldrb	r3, [r7, #30]
 800f940:	b29a      	uxth	r2, r3
 800f942:	7f7b      	ldrb	r3, [r7, #29]
 800f944:	b299      	uxth	r1, r3
 800f946:	697b      	ldr	r3, [r7, #20]
 800f948:	b29b      	uxth	r3, r3
 800f94a:	fb11 f303 	smulbb	r3, r1, r3
 800f94e:	b29b      	uxth	r3, r3
 800f950:	4413      	add	r3, r2
 800f952:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f954:	3301      	adds	r3, #1
 800f956:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 800f958:	7ffb      	ldrb	r3, [r7, #31]
 800f95a:	b29c      	uxth	r4, r3
 800f95c:	697b      	ldr	r3, [r7, #20]
 800f95e:	011b      	lsls	r3, r3, #4
 800f960:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f964:	4a76      	ldr	r2, [pc, #472]	; (800fb40 <updateStringItem+0xe58>)
 800f966:	4413      	add	r3, r2
 800f968:	3304      	adds	r3, #4
 800f96a:	4618      	mov	r0, r3
 800f96c:	f7f0 fcc2 	bl	80002f4 <strlen>
 800f970:	4603      	mov	r3, r0
 800f972:	b29a      	uxth	r2, r3
 800f974:	4b73      	ldr	r3, [pc, #460]	; (800fb44 <updateStringItem+0xe5c>)
 800f976:	889b      	ldrh	r3, [r3, #4]
 800f978:	fb12 f303 	smulbb	r3, r2, r3
 800f97c:	b29b      	uxth	r3, r3
 800f97e:	4423      	add	r3, r4
 800f980:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f982:	3301      	adds	r3, #1
 800f984:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800f986:	7fbb      	ldrb	r3, [r7, #30]
 800f988:	b29a      	uxth	r2, r3
 800f98a:	7f7b      	ldrb	r3, [r7, #29]
 800f98c:	b299      	uxth	r1, r3
 800f98e:	697b      	ldr	r3, [r7, #20]
 800f990:	b29b      	uxth	r3, r3
 800f992:	fb11 f303 	smulbb	r3, r1, r3
 800f996:	b29b      	uxth	r3, r3
 800f998:	4413      	add	r3, r2
 800f99a:	b29a      	uxth	r2, r3
 800f99c:	4b69      	ldr	r3, [pc, #420]	; (800fb44 <updateStringItem+0xe5c>)
 800f99e:	88db      	ldrh	r3, [r3, #6]
 800f9a0:	4413      	add	r3, r2
 800f9a2:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f9a4:	3301      	adds	r3, #1
 800f9a6:	b29b      	uxth	r3, r3
 800f9a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f9ac:	9200      	str	r2, [sp, #0]
 800f9ae:	4602      	mov	r2, r0
 800f9b0:	4631      	mov	r1, r6
 800f9b2:	4628      	mov	r0, r5
 800f9b4:	f7f9 f850 	bl	8008a58 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f9b8:	7ffb      	ldrb	r3, [r7, #31]
 800f9ba:	b29b      	uxth	r3, r3
 800f9bc:	3301      	adds	r3, #1
 800f9be:	b298      	uxth	r0, r3
 800f9c0:	7fbb      	ldrb	r3, [r7, #30]
 800f9c2:	b29a      	uxth	r2, r3
 800f9c4:	7f7b      	ldrb	r3, [r7, #29]
 800f9c6:	b299      	uxth	r1, r3
 800f9c8:	697b      	ldr	r3, [r7, #20]
 800f9ca:	b29b      	uxth	r3, r3
 800f9cc:	fb11 f303 	smulbb	r3, r1, r3
 800f9d0:	b29b      	uxth	r3, r3
 800f9d2:	4413      	add	r3, r2
 800f9d4:	b29b      	uxth	r3, r3
 800f9d6:	3301      	adds	r3, #1
 800f9d8:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	011b      	lsls	r3, r3, #4
 800f9de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f9e2:	4a57      	ldr	r2, [pc, #348]	; (800fb40 <updateStringItem+0xe58>)
 800f9e4:	4413      	add	r3, r2
 800f9e6:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	9301      	str	r3, [sp, #4]
 800f9ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f9f0:	9300      	str	r3, [sp, #0]
 800f9f2:	4b54      	ldr	r3, [pc, #336]	; (800fb44 <updateStringItem+0xe5c>)
 800f9f4:	f7f9 fc4e 	bl	8009294 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f9f8:	7ffb      	ldrb	r3, [r7, #31]
 800f9fa:	b29a      	uxth	r2, r3
 800f9fc:	7f3b      	ldrb	r3, [r7, #28]
 800f9fe:	085b      	lsrs	r3, r3, #1
 800fa00:	b2db      	uxtb	r3, r3
 800fa02:	b29b      	uxth	r3, r3
 800fa04:	4413      	add	r3, r2
 800fa06:	b29b      	uxth	r3, r3
 800fa08:	3301      	adds	r3, #1
 800fa0a:	b298      	uxth	r0, r3
 800fa0c:	7fbb      	ldrb	r3, [r7, #30]
 800fa0e:	b29a      	uxth	r2, r3
 800fa10:	7f7b      	ldrb	r3, [r7, #29]
 800fa12:	b299      	uxth	r1, r3
 800fa14:	697b      	ldr	r3, [r7, #20]
 800fa16:	b29b      	uxth	r3, r3
 800fa18:	fb11 f303 	smulbb	r3, r1, r3
 800fa1c:	b29b      	uxth	r3, r3
 800fa1e:	4413      	add	r3, r2
 800fa20:	b29b      	uxth	r3, r3
 800fa22:	3301      	adds	r3, #1
 800fa24:	b299      	uxth	r1, r3
 800fa26:	f107 020c 	add.w	r2, r7, #12
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	9301      	str	r3, [sp, #4]
 800fa2e:	f24c 6318 	movw	r3, #50712	; 0xc618
 800fa32:	9300      	str	r3, [sp, #0]
 800fa34:	4b43      	ldr	r3, [pc, #268]	; (800fb44 <updateStringItem+0xe5c>)
 800fa36:	f7f9 fc2d 	bl	8009294 <Paint_DrawString_EN>
 800fa3a:	e10d      	b.n	800fc58 <updateStringItem+0xf70>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == DOWN)
 800fa3c:	79fb      	ldrb	r3, [r7, #7]
 800fa3e:	2b01      	cmp	r3, #1
 800fa40:	d136      	bne.n	800fab0 <updateStringItem+0xdc8>
					{

						multiplierIndex = 0;
 800fa42:	4b41      	ldr	r3, [pc, #260]	; (800fb48 <updateStringItem+0xe60>)
 800fa44:	2200      	movs	r2, #0
 800fa46:	701a      	strb	r2, [r3, #0]
						stringItem.deltaMultiplier = stringMultiplierArray[multiplierIndex];
 800fa48:	4b3f      	ldr	r3, [pc, #252]	; (800fb48 <updateStringItem+0xe60>)
 800fa4a:	781b      	ldrb	r3, [r3, #0]
 800fa4c:	461a      	mov	r2, r3
 800fa4e:	4b3f      	ldr	r3, [pc, #252]	; (800fb4c <updateStringItem+0xe64>)
 800fa50:	5c9a      	ldrb	r2, [r3, r2]
 800fa52:	4b3b      	ldr	r3, [pc, #236]	; (800fb40 <updateStringItem+0xe58>)
 800fa54:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
						sprintf(localString,"%d",stringItem.deltaMultiplier);
 800fa58:	4b39      	ldr	r3, [pc, #228]	; (800fb40 <updateStringItem+0xe58>)
 800fa5a:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 800fa5e:	461a      	mov	r2, r3
 800fa60:	f107 030c 	add.w	r3, r7, #12
 800fa64:	493a      	ldr	r1, [pc, #232]	; (800fb50 <updateStringItem+0xe68>)
 800fa66:	4618      	mov	r0, r3
 800fa68:	f001 fd54 	bl	8011514 <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800fa6c:	7ffb      	ldrb	r3, [r7, #31]
 800fa6e:	b29a      	uxth	r2, r3
 800fa70:	7f3b      	ldrb	r3, [r7, #28]
 800fa72:	085b      	lsrs	r3, r3, #1
 800fa74:	b2db      	uxtb	r3, r3
 800fa76:	b29b      	uxth	r3, r3
 800fa78:	4413      	add	r3, r2
 800fa7a:	b29b      	uxth	r3, r3
 800fa7c:	3301      	adds	r3, #1
 800fa7e:	b298      	uxth	r0, r3
 800fa80:	7fbb      	ldrb	r3, [r7, #30]
 800fa82:	b29a      	uxth	r2, r3
 800fa84:	7f7b      	ldrb	r3, [r7, #29]
 800fa86:	b299      	uxth	r1, r3
 800fa88:	697b      	ldr	r3, [r7, #20]
 800fa8a:	b29b      	uxth	r3, r3
 800fa8c:	fb11 f303 	smulbb	r3, r1, r3
 800fa90:	b29b      	uxth	r3, r3
 800fa92:	4413      	add	r3, r2
 800fa94:	b29b      	uxth	r3, r3
 800fa96:	3301      	adds	r3, #1
 800fa98:	b299      	uxth	r1, r3
 800fa9a:	f107 020c 	add.w	r2, r7, #12
 800fa9e:	2300      	movs	r3, #0
 800faa0:	9301      	str	r3, [sp, #4]
 800faa2:	f24c 6318 	movw	r3, #50712	; 0xc618
 800faa6:	9300      	str	r3, [sp, #0]
 800faa8:	4b26      	ldr	r3, [pc, #152]	; (800fb44 <updateStringItem+0xe5c>)
 800faaa:	f7f9 fbf3 	bl	8009294 <Paint_DrawString_EN>
 800faae:	e0d3      	b.n	800fc58 <updateStringItem+0xf70>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == UP)
 800fab0:	79fb      	ldrb	r3, [r7, #7]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	f040 80d0 	bne.w	800fc58 <updateStringItem+0xf70>
					{
						multiplierIndex = fmin(multiplierIndex + 1, 7);
 800fab8:	4b23      	ldr	r3, [pc, #140]	; (800fb48 <updateStringItem+0xe60>)
 800faba:	781b      	ldrb	r3, [r3, #0]
 800fabc:	3301      	adds	r3, #1
 800fabe:	ee07 3a90 	vmov	s15, r3
 800fac2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800fac6:	eeb1 1b0c 	vmov.f64	d1, #28	; 0x40e00000  7.0
 800faca:	eeb0 0b47 	vmov.f64	d0, d7
 800face:	f005 f8b8 	bl	8014c42 <fmin>
 800fad2:	eeb0 7b40 	vmov.f64	d7, d0
 800fad6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800fada:	edc7 7a00 	vstr	s15, [r7]
 800fade:	683b      	ldr	r3, [r7, #0]
 800fae0:	b2da      	uxtb	r2, r3
 800fae2:	4b19      	ldr	r3, [pc, #100]	; (800fb48 <updateStringItem+0xe60>)
 800fae4:	701a      	strb	r2, [r3, #0]
						stringItem.deltaMultiplier = stringMultiplierArray[multiplierIndex];
 800fae6:	4b18      	ldr	r3, [pc, #96]	; (800fb48 <updateStringItem+0xe60>)
 800fae8:	781b      	ldrb	r3, [r3, #0]
 800faea:	461a      	mov	r2, r3
 800faec:	4b17      	ldr	r3, [pc, #92]	; (800fb4c <updateStringItem+0xe64>)
 800faee:	5c9a      	ldrb	r2, [r3, r2]
 800faf0:	4b13      	ldr	r3, [pc, #76]	; (800fb40 <updateStringItem+0xe58>)
 800faf2:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
//						sprintf(localString,"%04d",stringItem.deltaMultiplier);
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800faf6:	7ffb      	ldrb	r3, [r7, #31]
 800faf8:	b29a      	uxth	r2, r3
 800fafa:	7f3b      	ldrb	r3, [r7, #28]
 800fafc:	085b      	lsrs	r3, r3, #1
 800fafe:	b2db      	uxtb	r3, r3
 800fb00:	b29b      	uxth	r3, r3
 800fb02:	4413      	add	r3, r2
 800fb04:	b29b      	uxth	r3, r3
 800fb06:	3301      	adds	r3, #1
 800fb08:	b298      	uxth	r0, r3
 800fb0a:	7fbb      	ldrb	r3, [r7, #30]
 800fb0c:	b29a      	uxth	r2, r3
 800fb0e:	7f7b      	ldrb	r3, [r7, #29]
 800fb10:	b299      	uxth	r1, r3
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	b29b      	uxth	r3, r3
 800fb16:	fb11 f303 	smulbb	r3, r1, r3
 800fb1a:	b29b      	uxth	r3, r3
 800fb1c:	4413      	add	r3, r2
 800fb1e:	b29b      	uxth	r3, r3
 800fb20:	3301      	adds	r3, #1
 800fb22:	b299      	uxth	r1, r3
 800fb24:	f107 020c 	add.w	r2, r7, #12
 800fb28:	2300      	movs	r3, #0
 800fb2a:	9301      	str	r3, [sp, #4]
 800fb2c:	f24c 6318 	movw	r3, #50712	; 0xc618
 800fb30:	9300      	str	r3, [sp, #0]
 800fb32:	4b04      	ldr	r3, [pc, #16]	; (800fb44 <updateStringItem+0xe5c>)
 800fb34:	f7f9 fbae 	bl	8009294 <Paint_DrawString_EN>
 800fb38:	e08e      	b.n	800fc58 <updateStringItem+0xf70>
 800fb3a:	bf00      	nop
 800fb3c:	2400a5bc 	.word	0x2400a5bc
 800fb40:	2400b030 	.word	0x2400b030
 800fb44:	24000018 	.word	0x24000018
 800fb48:	2400a0d8 	.word	0x2400a0d8
 800fb4c:	2400a0ec 	.word	0x2400a0ec
 800fb50:	080153b4 	.word	0x080153b4
								localString, &Font12, LGRAY,  BLACK);
					}
				}
				else
				{
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800fb54:	7ffb      	ldrb	r3, [r7, #31]
 800fb56:	b29b      	uxth	r3, r3
 800fb58:	3301      	adds	r3, #1
 800fb5a:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800fb5c:	7fbb      	ldrb	r3, [r7, #30]
 800fb5e:	b29a      	uxth	r2, r3
 800fb60:	7f7b      	ldrb	r3, [r7, #29]
 800fb62:	b299      	uxth	r1, r3
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	b29b      	uxth	r3, r3
 800fb68:	fb11 f303 	smulbb	r3, r1, r3
 800fb6c:	b29b      	uxth	r3, r3
 800fb6e:	4413      	add	r3, r2
 800fb70:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800fb72:	3301      	adds	r3, #1
 800fb74:	b29e      	uxth	r6, r3
							MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 800fb76:	7ffb      	ldrb	r3, [r7, #31]
 800fb78:	b29c      	uxth	r4, r3
 800fb7a:	697b      	ldr	r3, [r7, #20]
 800fb7c:	011b      	lsls	r3, r3, #4
 800fb7e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fb82:	4a95      	ldr	r2, [pc, #596]	; (800fdd8 <updateStringItem+0x10f0>)
 800fb84:	4413      	add	r3, r2
 800fb86:	3304      	adds	r3, #4
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f7f0 fbb3 	bl	80002f4 <strlen>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	b29a      	uxth	r2, r3
 800fb92:	4b92      	ldr	r3, [pc, #584]	; (800fddc <updateStringItem+0x10f4>)
 800fb94:	889b      	ldrh	r3, [r3, #4]
 800fb96:	fb12 f303 	smulbb	r3, r2, r3
 800fb9a:	b29b      	uxth	r3, r3
 800fb9c:	4423      	add	r3, r4
 800fb9e:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800fba0:	3301      	adds	r3, #1
 800fba2:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800fba4:	7fbb      	ldrb	r3, [r7, #30]
 800fba6:	b29a      	uxth	r2, r3
 800fba8:	7f7b      	ldrb	r3, [r7, #29]
 800fbaa:	b299      	uxth	r1, r3
 800fbac:	697b      	ldr	r3, [r7, #20]
 800fbae:	b29b      	uxth	r3, r3
 800fbb0:	fb11 f303 	smulbb	r3, r1, r3
 800fbb4:	b29b      	uxth	r3, r3
 800fbb6:	4413      	add	r3, r2
 800fbb8:	b29a      	uxth	r2, r3
 800fbba:	4b88      	ldr	r3, [pc, #544]	; (800fddc <updateStringItem+0x10f4>)
 800fbbc:	88db      	ldrh	r3, [r3, #6]
 800fbbe:	4413      	add	r3, r2
 800fbc0:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800fbc2:	3301      	adds	r3, #1
 800fbc4:	b29b      	uxth	r3, r3
 800fbc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fbca:	9200      	str	r2, [sp, #0]
 800fbcc:	4602      	mov	r2, r0
 800fbce:	4631      	mov	r1, r6
 800fbd0:	4628      	mov	r0, r5
 800fbd2:	f7f8 ff41 	bl	8008a58 <Paint_ClearWindows>
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800fbd6:	7ffb      	ldrb	r3, [r7, #31]
 800fbd8:	b29b      	uxth	r3, r3
 800fbda:	3301      	adds	r3, #1
 800fbdc:	b298      	uxth	r0, r3
 800fbde:	7fbb      	ldrb	r3, [r7, #30]
 800fbe0:	b29a      	uxth	r2, r3
 800fbe2:	7f7b      	ldrb	r3, [r7, #29]
 800fbe4:	b299      	uxth	r1, r3
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	b29b      	uxth	r3, r3
 800fbea:	fb11 f303 	smulbb	r3, r1, r3
 800fbee:	b29b      	uxth	r3, r3
 800fbf0:	4413      	add	r3, r2
 800fbf2:	b29b      	uxth	r3, r3
 800fbf4:	3301      	adds	r3, #1
 800fbf6:	b299      	uxth	r1, r3
							stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	011b      	lsls	r3, r3, #4
 800fbfc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fc00:	4a75      	ldr	r2, [pc, #468]	; (800fdd8 <updateStringItem+0x10f0>)
 800fc02:	4413      	add	r3, r2
 800fc04:	1d1a      	adds	r2, r3, #4
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800fc06:	2300      	movs	r3, #0
 800fc08:	9301      	str	r3, [sp, #4]
 800fc0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fc0e:	9300      	str	r3, [sp, #0]
 800fc10:	4b72      	ldr	r3, [pc, #456]	; (800fddc <updateStringItem+0x10f4>)
 800fc12:	f7f9 fb3f 	bl	8009294 <Paint_DrawString_EN>
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800fc16:	7ffb      	ldrb	r3, [r7, #31]
 800fc18:	b29a      	uxth	r2, r3
 800fc1a:	7f3b      	ldrb	r3, [r7, #28]
 800fc1c:	085b      	lsrs	r3, r3, #1
 800fc1e:	b2db      	uxtb	r3, r3
 800fc20:	b29b      	uxth	r3, r3
 800fc22:	4413      	add	r3, r2
 800fc24:	b29b      	uxth	r3, r3
 800fc26:	3301      	adds	r3, #1
 800fc28:	b298      	uxth	r0, r3
 800fc2a:	7fbb      	ldrb	r3, [r7, #30]
 800fc2c:	b29a      	uxth	r2, r3
 800fc2e:	7f7b      	ldrb	r3, [r7, #29]
 800fc30:	b299      	uxth	r1, r3
 800fc32:	697b      	ldr	r3, [r7, #20]
 800fc34:	b29b      	uxth	r3, r3
 800fc36:	fb11 f303 	smulbb	r3, r1, r3
 800fc3a:	b29b      	uxth	r3, r3
 800fc3c:	4413      	add	r3, r2
 800fc3e:	b29b      	uxth	r3, r3
 800fc40:	3301      	adds	r3, #1
 800fc42:	b299      	uxth	r1, r3
 800fc44:	f107 020c 	add.w	r2, r7, #12
 800fc48:	2300      	movs	r3, #0
 800fc4a:	9301      	str	r3, [sp, #4]
 800fc4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fc50:	9300      	str	r3, [sp, #0]
 800fc52:	4b62      	ldr	r3, [pc, #392]	; (800fddc <updateStringItem+0x10f4>)
 800fc54:	f7f9 fb1e 	bl	8009294 <Paint_DrawString_EN>
							localString, &Font12, WHITE,  BLACK);
				}
			}
		}
		if ( (i >= stringItem.numberOfItemsInPage - 2) && (i < stringItem.numberOfItemsInPage) )
 800fc58:	4b5f      	ldr	r3, [pc, #380]	; (800fdd8 <updateStringItem+0x10f0>)
 800fc5a:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 800fc5e:	3b02      	subs	r3, #2
 800fc60:	697a      	ldr	r2, [r7, #20]
 800fc62:	429a      	cmp	r2, r3
 800fc64:	f2c0 8281 	blt.w	801016a <updateStringItem+0x1482>
 800fc68:	4b5b      	ldr	r3, [pc, #364]	; (800fdd8 <updateStringItem+0x10f0>)
 800fc6a:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 800fc6e:	461a      	mov	r2, r3
 800fc70:	697b      	ldr	r3, [r7, #20]
 800fc72:	4293      	cmp	r3, r2
 800fc74:	f280 8279 	bge.w	801016a <updateStringItem+0x1482>
		{
			if (howToDraw == FULL)
 800fc78:	79fb      	ldrb	r3, [r7, #7]
 800fc7a:	2b02      	cmp	r3, #2
 800fc7c:	d17a      	bne.n	800fd74 <updateStringItem+0x108c>
			{
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800fc7e:	7ffb      	ldrb	r3, [r7, #31]
 800fc80:	b298      	uxth	r0, r3
 800fc82:	7fbb      	ldrb	r3, [r7, #30]
 800fc84:	b29a      	uxth	r2, r3
 800fc86:	7f7b      	ldrb	r3, [r7, #29]
 800fc88:	b299      	uxth	r1, r3
 800fc8a:	697b      	ldr	r3, [r7, #20]
 800fc8c:	b29b      	uxth	r3, r3
 800fc8e:	fb11 f303 	smulbb	r3, r1, r3
 800fc92:	b29b      	uxth	r3, r3
 800fc94:	4413      	add	r3, r2
 800fc96:	b29c      	uxth	r4, r3
 800fc98:	7ffb      	ldrb	r3, [r7, #31]
 800fc9a:	b29a      	uxth	r2, r3
 800fc9c:	7f3b      	ldrb	r3, [r7, #28]
 800fc9e:	b29b      	uxth	r3, r3
 800fca0:	4413      	add	r3, r2
 800fca2:	b29d      	uxth	r5, r3
 800fca4:	7fbb      	ldrb	r3, [r7, #30]
 800fca6:	b29a      	uxth	r2, r3
 800fca8:	7f7b      	ldrb	r3, [r7, #29]
 800fcaa:	b299      	uxth	r1, r3
						MenuRectangleStartX+MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 800fcac:	697b      	ldr	r3, [r7, #20]
 800fcae:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800fcb0:	b29b      	uxth	r3, r3
 800fcb2:	fb11 f303 	smulbb	r3, r1, r3
 800fcb6:	b29b      	uxth	r3, r3
 800fcb8:	4413      	add	r3, r2
 800fcba:	b29b      	uxth	r3, r3
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	9202      	str	r2, [sp, #8]
 800fcc0:	2201      	movs	r2, #1
 800fcc2:	9201      	str	r2, [sp, #4]
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	9200      	str	r2, [sp, #0]
 800fcc8:	462a      	mov	r2, r5
 800fcca:	4621      	mov	r1, r4
 800fccc:	f7f9 f83e 	bl	8008d4c <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
				if (currentCursorPosition.cursorPosition == i)
 800fcd0:	4b43      	ldr	r3, [pc, #268]	; (800fde0 <updateStringItem+0x10f8>)
 800fcd2:	781b      	ldrb	r3, [r3, #0]
 800fcd4:	461a      	mov	r2, r3
 800fcd6:	697b      	ldr	r3, [r7, #20]
 800fcd8:	4293      	cmp	r3, r2
 800fcda:	d125      	bne.n	800fd28 <updateStringItem+0x1040>
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800fcdc:	7efb      	ldrb	r3, [r7, #27]
 800fcde:	b29c      	uxth	r4, r3
 800fce0:	7fbb      	ldrb	r3, [r7, #30]
 800fce2:	b29a      	uxth	r2, r3
 800fce4:	7f7b      	ldrb	r3, [r7, #29]
 800fce6:	b299      	uxth	r1, r3
 800fce8:	697b      	ldr	r3, [r7, #20]
 800fcea:	b29b      	uxth	r3, r3
 800fcec:	fb11 f303 	smulbb	r3, r1, r3
 800fcf0:	b29b      	uxth	r3, r3
 800fcf2:	4413      	add	r3, r2
 800fcf4:	b29b      	uxth	r3, r3
 800fcf6:	3301      	adds	r3, #1
 800fcf8:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i], BLACK, LGRAY, 16, Font12);
 800fcfa:	697b      	ldr	r3, [r7, #20]
 800fcfc:	011b      	lsls	r3, r3, #4
 800fcfe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fd02:	4a35      	ldr	r2, [pc, #212]	; (800fdd8 <updateStringItem+0x10f0>)
 800fd04:	4413      	add	r3, r2
 800fd06:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800fd08:	4934      	ldr	r1, [pc, #208]	; (800fddc <updateStringItem+0x10f4>)
 800fd0a:	ab02      	add	r3, sp, #8
 800fd0c:	c903      	ldmia	r1, {r0, r1}
 800fd0e:	e883 0003 	stmia.w	r3, {r0, r1}
 800fd12:	2310      	movs	r3, #16
 800fd14:	9301      	str	r3, [sp, #4]
 800fd16:	f24c 6318 	movw	r3, #50712	; 0xc618
 800fd1a:	9300      	str	r3, [sp, #0]
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	4629      	mov	r1, r5
 800fd20:	4620      	mov	r0, r4
 800fd22:	f7fc fbb1 	bl	800c488 <centeredString>
 800fd26:	e220      	b.n	801016a <updateStringItem+0x1482>
				}
				else
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800fd28:	7efb      	ldrb	r3, [r7, #27]
 800fd2a:	b29c      	uxth	r4, r3
 800fd2c:	7fbb      	ldrb	r3, [r7, #30]
 800fd2e:	b29a      	uxth	r2, r3
 800fd30:	7f7b      	ldrb	r3, [r7, #29]
 800fd32:	b299      	uxth	r1, r3
 800fd34:	697b      	ldr	r3, [r7, #20]
 800fd36:	b29b      	uxth	r3, r3
 800fd38:	fb11 f303 	smulbb	r3, r1, r3
 800fd3c:	b29b      	uxth	r3, r3
 800fd3e:	4413      	add	r3, r2
 800fd40:	b29b      	uxth	r3, r3
 800fd42:	3301      	adds	r3, #1
 800fd44:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i], BLACK, WHITE, 16, Font12);
 800fd46:	697b      	ldr	r3, [r7, #20]
 800fd48:	011b      	lsls	r3, r3, #4
 800fd4a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fd4e:	4a22      	ldr	r2, [pc, #136]	; (800fdd8 <updateStringItem+0x10f0>)
 800fd50:	4413      	add	r3, r2
 800fd52:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800fd54:	4921      	ldr	r1, [pc, #132]	; (800fddc <updateStringItem+0x10f4>)
 800fd56:	ab02      	add	r3, sp, #8
 800fd58:	c903      	ldmia	r1, {r0, r1}
 800fd5a:	e883 0003 	stmia.w	r3, {r0, r1}
 800fd5e:	2310      	movs	r3, #16
 800fd60:	9301      	str	r3, [sp, #4]
 800fd62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fd66:	9300      	str	r3, [sp, #0]
 800fd68:	2300      	movs	r3, #0
 800fd6a:	4629      	mov	r1, r5
 800fd6c:	4620      	mov	r0, r4
 800fd6e:	f7fc fb8b 	bl	800c488 <centeredString>
 800fd72:	e1fa      	b.n	801016a <updateStringItem+0x1482>
				}
			}
			else if (howToDraw == DOWN)
 800fd74:	79fb      	ldrb	r3, [r7, #7]
 800fd76:	2b01      	cmp	r3, #1
 800fd78:	f040 80ca 	bne.w	800ff10 <updateStringItem+0x1228>
			{
				if ( (currentCursorPosition.cursorPosition == 4) && (i == 4) )
 800fd7c:	4b18      	ldr	r3, [pc, #96]	; (800fde0 <updateStringItem+0x10f8>)
 800fd7e:	781b      	ldrb	r3, [r3, #0]
 800fd80:	2b04      	cmp	r3, #4
 800fd82:	d12f      	bne.n	800fde4 <updateStringItem+0x10fc>
 800fd84:	697b      	ldr	r3, [r7, #20]
 800fd86:	2b04      	cmp	r3, #4
 800fd88:	d12c      	bne.n	800fde4 <updateStringItem+0x10fc>
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800fd8a:	7efb      	ldrb	r3, [r7, #27]
 800fd8c:	b29c      	uxth	r4, r3
 800fd8e:	7fbb      	ldrb	r3, [r7, #30]
 800fd90:	b29a      	uxth	r2, r3
 800fd92:	7f7b      	ldrb	r3, [r7, #29]
 800fd94:	b299      	uxth	r1, r3
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	b29b      	uxth	r3, r3
 800fd9a:	fb11 f303 	smulbb	r3, r1, r3
 800fd9e:	b29b      	uxth	r3, r3
 800fda0:	4413      	add	r3, r2
 800fda2:	b29b      	uxth	r3, r3
 800fda4:	3301      	adds	r3, #1
 800fda6:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i], BLACK, LGRAY, 16, Font12);
 800fda8:	697b      	ldr	r3, [r7, #20]
 800fdaa:	011b      	lsls	r3, r3, #4
 800fdac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fdb0:	4a09      	ldr	r2, [pc, #36]	; (800fdd8 <updateStringItem+0x10f0>)
 800fdb2:	4413      	add	r3, r2
 800fdb4:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800fdb6:	4909      	ldr	r1, [pc, #36]	; (800fddc <updateStringItem+0x10f4>)
 800fdb8:	ab02      	add	r3, sp, #8
 800fdba:	c903      	ldmia	r1, {r0, r1}
 800fdbc:	e883 0003 	stmia.w	r3, {r0, r1}
 800fdc0:	2310      	movs	r3, #16
 800fdc2:	9301      	str	r3, [sp, #4]
 800fdc4:	f24c 6318 	movw	r3, #50712	; 0xc618
 800fdc8:	9300      	str	r3, [sp, #0]
 800fdca:	2300      	movs	r3, #0
 800fdcc:	4629      	mov	r1, r5
 800fdce:	4620      	mov	r0, r4
 800fdd0:	f7fc fb5a 	bl	800c488 <centeredString>
 800fdd4:	e1c9      	b.n	801016a <updateStringItem+0x1482>
 800fdd6:	bf00      	nop
 800fdd8:	2400b030 	.word	0x2400b030
 800fddc:	24000018 	.word	0x24000018
 800fde0:	2400a5bc 	.word	0x2400a5bc
				}
				else if ( (currentCursorPosition.cursorPosition == 5) && (i == 5) )
 800fde4:	4b8b      	ldr	r3, [pc, #556]	; (8010014 <updateStringItem+0x132c>)
 800fde6:	781b      	ldrb	r3, [r3, #0]
 800fde8:	2b05      	cmp	r3, #5
 800fdea:	f040 81be 	bne.w	801016a <updateStringItem+0x1482>
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	2b05      	cmp	r3, #5
 800fdf2:	f040 81ba 	bne.w	801016a <updateStringItem+0x1482>
				{
					Paint_ClearWindows(DisplayCenterWidth,
 800fdf6:	7efb      	ldrb	r3, [r7, #27]
 800fdf8:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 800fdfa:	7fbb      	ldrb	r3, [r7, #30]
 800fdfc:	b29a      	uxth	r2, r3
 800fdfe:	7f7b      	ldrb	r3, [r7, #29]
 800fe00:	b299      	uxth	r1, r3
 800fe02:	697b      	ldr	r3, [r7, #20]
 800fe04:	3b01      	subs	r3, #1
 800fe06:	b29b      	uxth	r3, r3
 800fe08:	fb11 f303 	smulbb	r3, r1, r3
 800fe0c:	b29b      	uxth	r3, r3
 800fe0e:	4413      	add	r3, r2
 800fe10:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth,
 800fe12:	3301      	adds	r3, #1
 800fe14:	b29e      	uxth	r6, r3
 800fe16:	7efb      	ldrb	r3, [r7, #27]
 800fe18:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(stringItem.itemsArray[i - 1]) * Font12.Width,
 800fe1a:	697b      	ldr	r3, [r7, #20]
 800fe1c:	3b01      	subs	r3, #1
 800fe1e:	011b      	lsls	r3, r3, #4
 800fe20:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fe24:	4a7c      	ldr	r2, [pc, #496]	; (8010018 <updateStringItem+0x1330>)
 800fe26:	4413      	add	r3, r2
 800fe28:	3304      	adds	r3, #4
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f7f0 fa62 	bl	80002f4 <strlen>
 800fe30:	4603      	mov	r3, r0
					Paint_ClearWindows(DisplayCenterWidth,
 800fe32:	b29a      	uxth	r2, r3
							DisplayCenterWidth + strlen(stringItem.itemsArray[i - 1]) * Font12.Width,
 800fe34:	4b79      	ldr	r3, [pc, #484]	; (801001c <updateStringItem+0x1334>)
 800fe36:	889b      	ldrh	r3, [r3, #4]
					Paint_ClearWindows(DisplayCenterWidth,
 800fe38:	fb12 f303 	smulbb	r3, r2, r3
 800fe3c:	b29b      	uxth	r3, r3
 800fe3e:	4423      	add	r3, r4
 800fe40:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1 + Font12.Height, WHITE);
 800fe42:	7fbb      	ldrb	r3, [r7, #30]
 800fe44:	b29a      	uxth	r2, r3
 800fe46:	7f7b      	ldrb	r3, [r7, #29]
 800fe48:	b299      	uxth	r1, r3
 800fe4a:	697b      	ldr	r3, [r7, #20]
 800fe4c:	3b01      	subs	r3, #1
 800fe4e:	b29b      	uxth	r3, r3
 800fe50:	fb11 f303 	smulbb	r3, r1, r3
 800fe54:	b29b      	uxth	r3, r3
 800fe56:	4413      	add	r3, r2
 800fe58:	b29a      	uxth	r2, r3
 800fe5a:	4b70      	ldr	r3, [pc, #448]	; (801001c <updateStringItem+0x1334>)
 800fe5c:	88db      	ldrh	r3, [r3, #6]
 800fe5e:	4413      	add	r3, r2
 800fe60:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth,
 800fe62:	3301      	adds	r3, #1
 800fe64:	b29b      	uxth	r3, r3
 800fe66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fe6a:	9200      	str	r2, [sp, #0]
 800fe6c:	4602      	mov	r2, r0
 800fe6e:	4631      	mov	r1, r6
 800fe70:	4628      	mov	r0, r5
 800fe72:	f7f8 fdf1 	bl	8008a58 <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 800fe76:	7efb      	ldrb	r3, [r7, #27]
 800fe78:	b29c      	uxth	r4, r3
 800fe7a:	7fbb      	ldrb	r3, [r7, #30]
 800fe7c:	b29a      	uxth	r2, r3
 800fe7e:	7f7b      	ldrb	r3, [r7, #29]
 800fe80:	b299      	uxth	r1, r3
 800fe82:	697b      	ldr	r3, [r7, #20]
 800fe84:	3b01      	subs	r3, #1
 800fe86:	b29b      	uxth	r3, r3
 800fe88:	fb11 f303 	smulbb	r3, r1, r3
 800fe8c:	b29b      	uxth	r3, r3
 800fe8e:	4413      	add	r3, r2
 800fe90:	b29b      	uxth	r3, r3
 800fe92:	3301      	adds	r3, #1
 800fe94:	b29d      	uxth	r5, r3
							stringItem.itemsArray[(i - 1)], BLACK, WHITE, 16, Font12);
 800fe96:	697b      	ldr	r3, [r7, #20]
 800fe98:	3b01      	subs	r3, #1
 800fe9a:	011b      	lsls	r3, r3, #4
 800fe9c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fea0:	4a5d      	ldr	r2, [pc, #372]	; (8010018 <updateStringItem+0x1330>)
 800fea2:	4413      	add	r3, r2
 800fea4:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 800fea6:	495d      	ldr	r1, [pc, #372]	; (801001c <updateStringItem+0x1334>)
 800fea8:	ab02      	add	r3, sp, #8
 800feaa:	c903      	ldmia	r1, {r0, r1}
 800feac:	e883 0003 	stmia.w	r3, {r0, r1}
 800feb0:	2310      	movs	r3, #16
 800feb2:	9301      	str	r3, [sp, #4]
 800feb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800feb8:	9300      	str	r3, [sp, #0]
 800feba:	2300      	movs	r3, #0
 800febc:	4629      	mov	r1, r5
 800febe:	4620      	mov	r0, r4
 800fec0:	f7fc fae2 	bl	800c488 <centeredString>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800fec4:	7efb      	ldrb	r3, [r7, #27]
 800fec6:	b29c      	uxth	r4, r3
 800fec8:	7fbb      	ldrb	r3, [r7, #30]
 800feca:	b29a      	uxth	r2, r3
 800fecc:	7f7b      	ldrb	r3, [r7, #29]
 800fece:	b299      	uxth	r1, r3
 800fed0:	697b      	ldr	r3, [r7, #20]
 800fed2:	b29b      	uxth	r3, r3
 800fed4:	fb11 f303 	smulbb	r3, r1, r3
 800fed8:	b29b      	uxth	r3, r3
 800feda:	4413      	add	r3, r2
 800fedc:	b29b      	uxth	r3, r3
 800fede:	3301      	adds	r3, #1
 800fee0:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i], BLACK, LGRAY, 16, Font12);
 800fee2:	697b      	ldr	r3, [r7, #20]
 800fee4:	011b      	lsls	r3, r3, #4
 800fee6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800feea:	4a4b      	ldr	r2, [pc, #300]	; (8010018 <updateStringItem+0x1330>)
 800feec:	4413      	add	r3, r2
 800feee:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800fef0:	494a      	ldr	r1, [pc, #296]	; (801001c <updateStringItem+0x1334>)
 800fef2:	ab02      	add	r3, sp, #8
 800fef4:	c903      	ldmia	r1, {r0, r1}
 800fef6:	e883 0003 	stmia.w	r3, {r0, r1}
 800fefa:	2310      	movs	r3, #16
 800fefc:	9301      	str	r3, [sp, #4]
 800fefe:	f24c 6318 	movw	r3, #50712	; 0xc618
 800ff02:	9300      	str	r3, [sp, #0]
 800ff04:	2300      	movs	r3, #0
 800ff06:	4629      	mov	r1, r5
 800ff08:	4620      	mov	r0, r4
 800ff0a:	f7fc fabd 	bl	800c488 <centeredString>
 800ff0e:	e12c      	b.n	801016a <updateStringItem+0x1482>
				}
			}
			else if (howToDraw == UP)
 800ff10:	79fb      	ldrb	r3, [r7, #7]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	f040 8129 	bne.w	801016a <updateStringItem+0x1482>
			{
				if ( (currentCursorPosition.cursorPosition == 3) && (i == 4) )
 800ff18:	4b3e      	ldr	r3, [pc, #248]	; (8010014 <updateStringItem+0x132c>)
 800ff1a:	781b      	ldrb	r3, [r3, #0]
 800ff1c:	2b03      	cmp	r3, #3
 800ff1e:	d17f      	bne.n	8010020 <updateStringItem+0x1338>
 800ff20:	697b      	ldr	r3, [r7, #20]
 800ff22:	2b04      	cmp	r3, #4
 800ff24:	d17c      	bne.n	8010020 <updateStringItem+0x1338>
				{
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 800ff26:	7efb      	ldrb	r3, [r7, #27]
 800ff28:	b29c      	uxth	r4, r3
 800ff2a:	697b      	ldr	r3, [r7, #20]
 800ff2c:	011b      	lsls	r3, r3, #4
 800ff2e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ff32:	4a39      	ldr	r2, [pc, #228]	; (8010018 <updateStringItem+0x1330>)
 800ff34:	4413      	add	r3, r2
 800ff36:	3304      	adds	r3, #4
 800ff38:	4618      	mov	r0, r3
 800ff3a:	f7f0 f9db 	bl	80002f4 <strlen>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	4a36      	ldr	r2, [pc, #216]	; (801001c <updateStringItem+0x1334>)
 800ff42:	8892      	ldrh	r2, [r2, #4]
 800ff44:	fb02 f303 	mul.w	r3, r2, r3
 800ff48:	085b      	lsrs	r3, r3, #1
 800ff4a:	b29b      	uxth	r3, r3
 800ff4c:	1ae3      	subs	r3, r4, r3
 800ff4e:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800ff50:	7fbb      	ldrb	r3, [r7, #30]
 800ff52:	b29a      	uxth	r2, r3
 800ff54:	7f7b      	ldrb	r3, [r7, #29]
 800ff56:	b299      	uxth	r1, r3
 800ff58:	697b      	ldr	r3, [r7, #20]
 800ff5a:	b29b      	uxth	r3, r3
 800ff5c:	fb11 f303 	smulbb	r3, r1, r3
 800ff60:	b29b      	uxth	r3, r3
 800ff62:	4413      	add	r3, r2
 800ff64:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 800ff66:	3301      	adds	r3, #1
 800ff68:	b29e      	uxth	r6, r3
 800ff6a:	7efb      	ldrb	r3, [r7, #27]
 800ff6c:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(stringItem.itemsArray[i]) * Font12.Width /2,
 800ff6e:	697b      	ldr	r3, [r7, #20]
 800ff70:	011b      	lsls	r3, r3, #4
 800ff72:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ff76:	4a28      	ldr	r2, [pc, #160]	; (8010018 <updateStringItem+0x1330>)
 800ff78:	4413      	add	r3, r2
 800ff7a:	3304      	adds	r3, #4
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f7f0 f9b9 	bl	80002f4 <strlen>
 800ff82:	4603      	mov	r3, r0
 800ff84:	4a25      	ldr	r2, [pc, #148]	; (801001c <updateStringItem+0x1334>)
 800ff86:	8892      	ldrh	r2, [r2, #4]
 800ff88:	fb02 f303 	mul.w	r3, r2, r3
 800ff8c:	085b      	lsrs	r3, r3, #1
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 800ff8e:	b29b      	uxth	r3, r3
 800ff90:	4423      	add	r3, r4
 800ff92:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800ff94:	7fbb      	ldrb	r3, [r7, #30]
 800ff96:	b29a      	uxth	r2, r3
 800ff98:	7f7b      	ldrb	r3, [r7, #29]
 800ff9a:	b299      	uxth	r1, r3
 800ff9c:	697b      	ldr	r3, [r7, #20]
 800ff9e:	b29b      	uxth	r3, r3
 800ffa0:	fb11 f303 	smulbb	r3, r1, r3
 800ffa4:	b29b      	uxth	r3, r3
 800ffa6:	4413      	add	r3, r2
 800ffa8:	b29a      	uxth	r2, r3
 800ffaa:	4b1c      	ldr	r3, [pc, #112]	; (801001c <updateStringItem+0x1334>)
 800ffac:	88db      	ldrh	r3, [r3, #6]
 800ffae:	4413      	add	r3, r2
 800ffb0:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 800ffb2:	3301      	adds	r3, #1
 800ffb4:	b29b      	uxth	r3, r3
 800ffb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ffba:	9200      	str	r2, [sp, #0]
 800ffbc:	4602      	mov	r2, r0
 800ffbe:	4631      	mov	r1, r6
 800ffc0:	4628      	mov	r0, r5
 800ffc2:	f7f8 fd49 	bl	8008a58 <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800ffc6:	7efb      	ldrb	r3, [r7, #27]
 800ffc8:	b29c      	uxth	r4, r3
 800ffca:	7fbb      	ldrb	r3, [r7, #30]
 800ffcc:	b29a      	uxth	r2, r3
 800ffce:	7f7b      	ldrb	r3, [r7, #29]
 800ffd0:	b299      	uxth	r1, r3
 800ffd2:	697b      	ldr	r3, [r7, #20]
 800ffd4:	b29b      	uxth	r3, r3
 800ffd6:	fb11 f303 	smulbb	r3, r1, r3
 800ffda:	b29b      	uxth	r3, r3
 800ffdc:	4413      	add	r3, r2
 800ffde:	b29b      	uxth	r3, r3
 800ffe0:	3301      	adds	r3, #1
 800ffe2:	b29d      	uxth	r5, r3
							stringItem.itemsArray[(i)], BLACK, WHITE, 16, Font12);
 800ffe4:	697b      	ldr	r3, [r7, #20]
 800ffe6:	011b      	lsls	r3, r3, #4
 800ffe8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ffec:	4a0a      	ldr	r2, [pc, #40]	; (8010018 <updateStringItem+0x1330>)
 800ffee:	4413      	add	r3, r2
 800fff0:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800fff2:	490a      	ldr	r1, [pc, #40]	; (801001c <updateStringItem+0x1334>)
 800fff4:	ab02      	add	r3, sp, #8
 800fff6:	c903      	ldmia	r1, {r0, r1}
 800fff8:	e883 0003 	stmia.w	r3, {r0, r1}
 800fffc:	2310      	movs	r3, #16
 800fffe:	9301      	str	r3, [sp, #4]
 8010000:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010004:	9300      	str	r3, [sp, #0]
 8010006:	2300      	movs	r3, #0
 8010008:	4629      	mov	r1, r5
 801000a:	4620      	mov	r0, r4
 801000c:	f7fc fa3c 	bl	800c488 <centeredString>
 8010010:	e0ab      	b.n	801016a <updateStringItem+0x1482>
 8010012:	bf00      	nop
 8010014:	2400a5bc 	.word	0x2400a5bc
 8010018:	2400b030 	.word	0x2400b030
 801001c:	24000018 	.word	0x24000018
					//						centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
					//								uint16Item.itemsArray[i], BLACK, LGRAY, 16);
				}
				else if ( (currentCursorPosition.cursorPosition == 4) && (i == 5) )
 8010020:	4b5a      	ldr	r3, [pc, #360]	; (801018c <updateStringItem+0x14a4>)
 8010022:	781b      	ldrb	r3, [r3, #0]
 8010024:	2b04      	cmp	r3, #4
 8010026:	f040 80a0 	bne.w	801016a <updateStringItem+0x1482>
 801002a:	697b      	ldr	r3, [r7, #20]
 801002c:	2b05      	cmp	r3, #5
 801002e:	f040 809c 	bne.w	801016a <updateStringItem+0x1482>
				{
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 8010032:	7efb      	ldrb	r3, [r7, #27]
 8010034:	b29c      	uxth	r4, r3
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	011b      	lsls	r3, r3, #4
 801003a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801003e:	4a54      	ldr	r2, [pc, #336]	; (8010190 <updateStringItem+0x14a8>)
 8010040:	4413      	add	r3, r2
 8010042:	3304      	adds	r3, #4
 8010044:	4618      	mov	r0, r3
 8010046:	f7f0 f955 	bl	80002f4 <strlen>
 801004a:	4603      	mov	r3, r0
 801004c:	4a51      	ldr	r2, [pc, #324]	; (8010194 <updateStringItem+0x14ac>)
 801004e:	8892      	ldrh	r2, [r2, #4]
 8010050:	fb02 f303 	mul.w	r3, r2, r3
 8010054:	085b      	lsrs	r3, r3, #1
 8010056:	b29b      	uxth	r3, r3
 8010058:	1ae3      	subs	r3, r4, r3
 801005a:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801005c:	7fbb      	ldrb	r3, [r7, #30]
 801005e:	b29a      	uxth	r2, r3
 8010060:	7f7b      	ldrb	r3, [r7, #29]
 8010062:	b299      	uxth	r1, r3
 8010064:	697b      	ldr	r3, [r7, #20]
 8010066:	b29b      	uxth	r3, r3
 8010068:	fb11 f303 	smulbb	r3, r1, r3
 801006c:	b29b      	uxth	r3, r3
 801006e:	4413      	add	r3, r2
 8010070:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 8010072:	3301      	adds	r3, #1
 8010074:	b29e      	uxth	r6, r3
 8010076:	7efb      	ldrb	r3, [r7, #27]
 8010078:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(stringItem.itemsArray[i]) * Font12.Width /2,
 801007a:	697b      	ldr	r3, [r7, #20]
 801007c:	011b      	lsls	r3, r3, #4
 801007e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010082:	4a43      	ldr	r2, [pc, #268]	; (8010190 <updateStringItem+0x14a8>)
 8010084:	4413      	add	r3, r2
 8010086:	3304      	adds	r3, #4
 8010088:	4618      	mov	r0, r3
 801008a:	f7f0 f933 	bl	80002f4 <strlen>
 801008e:	4603      	mov	r3, r0
 8010090:	4a40      	ldr	r2, [pc, #256]	; (8010194 <updateStringItem+0x14ac>)
 8010092:	8892      	ldrh	r2, [r2, #4]
 8010094:	fb02 f303 	mul.w	r3, r2, r3
 8010098:	085b      	lsrs	r3, r3, #1
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 801009a:	b29b      	uxth	r3, r3
 801009c:	4423      	add	r3, r4
 801009e:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 80100a0:	7fbb      	ldrb	r3, [r7, #30]
 80100a2:	b29a      	uxth	r2, r3
 80100a4:	7f7b      	ldrb	r3, [r7, #29]
 80100a6:	b299      	uxth	r1, r3
 80100a8:	697b      	ldr	r3, [r7, #20]
 80100aa:	b29b      	uxth	r3, r3
 80100ac:	fb11 f303 	smulbb	r3, r1, r3
 80100b0:	b29b      	uxth	r3, r3
 80100b2:	4413      	add	r3, r2
 80100b4:	b29a      	uxth	r2, r3
 80100b6:	4b37      	ldr	r3, [pc, #220]	; (8010194 <updateStringItem+0x14ac>)
 80100b8:	88db      	ldrh	r3, [r3, #6]
 80100ba:	4413      	add	r3, r2
 80100bc:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 80100be:	3301      	adds	r3, #1
 80100c0:	b29b      	uxth	r3, r3
 80100c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80100c6:	9200      	str	r2, [sp, #0]
 80100c8:	4602      	mov	r2, r0
 80100ca:	4631      	mov	r1, r6
 80100cc:	4628      	mov	r0, r5
 80100ce:	f7f8 fcc3 	bl	8008a58 <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80100d2:	7efb      	ldrb	r3, [r7, #27]
 80100d4:	b29c      	uxth	r4, r3
 80100d6:	7fbb      	ldrb	r3, [r7, #30]
 80100d8:	b29a      	uxth	r2, r3
 80100da:	7f7b      	ldrb	r3, [r7, #29]
 80100dc:	b299      	uxth	r1, r3
 80100de:	697b      	ldr	r3, [r7, #20]
 80100e0:	b29b      	uxth	r3, r3
 80100e2:	fb11 f303 	smulbb	r3, r1, r3
 80100e6:	b29b      	uxth	r3, r3
 80100e8:	4413      	add	r3, r2
 80100ea:	b29b      	uxth	r3, r3
 80100ec:	3301      	adds	r3, #1
 80100ee:	b29d      	uxth	r5, r3
							stringItem.itemsArray[(i)], BLACK, WHITE, 16, Font12);
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	011b      	lsls	r3, r3, #4
 80100f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80100f8:	4a25      	ldr	r2, [pc, #148]	; (8010190 <updateStringItem+0x14a8>)
 80100fa:	4413      	add	r3, r2
 80100fc:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80100fe:	4925      	ldr	r1, [pc, #148]	; (8010194 <updateStringItem+0x14ac>)
 8010100:	ab02      	add	r3, sp, #8
 8010102:	c903      	ldmia	r1, {r0, r1}
 8010104:	e883 0003 	stmia.w	r3, {r0, r1}
 8010108:	2310      	movs	r3, #16
 801010a:	9301      	str	r3, [sp, #4]
 801010c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010110:	9300      	str	r3, [sp, #0]
 8010112:	2300      	movs	r3, #0
 8010114:	4629      	mov	r1, r5
 8010116:	4620      	mov	r0, r4
 8010118:	f7fc f9b6 	bl	800c488 <centeredString>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 801011c:	7efb      	ldrb	r3, [r7, #27]
 801011e:	b29c      	uxth	r4, r3
 8010120:	7fbb      	ldrb	r3, [r7, #30]
 8010122:	b29a      	uxth	r2, r3
 8010124:	7f7b      	ldrb	r3, [r7, #29]
 8010126:	b299      	uxth	r1, r3
 8010128:	697b      	ldr	r3, [r7, #20]
 801012a:	3b01      	subs	r3, #1
 801012c:	b29b      	uxth	r3, r3
 801012e:	fb11 f303 	smulbb	r3, r1, r3
 8010132:	b29b      	uxth	r3, r3
 8010134:	4413      	add	r3, r2
 8010136:	b29b      	uxth	r3, r3
 8010138:	3301      	adds	r3, #1
 801013a:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i - 1], BLACK, LGRAY, 16, Font12);
 801013c:	697b      	ldr	r3, [r7, #20]
 801013e:	3b01      	subs	r3, #1
 8010140:	011b      	lsls	r3, r3, #4
 8010142:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010146:	4a12      	ldr	r2, [pc, #72]	; (8010190 <updateStringItem+0x14a8>)
 8010148:	4413      	add	r3, r2
 801014a:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 801014c:	4911      	ldr	r1, [pc, #68]	; (8010194 <updateStringItem+0x14ac>)
 801014e:	ab02      	add	r3, sp, #8
 8010150:	c903      	ldmia	r1, {r0, r1}
 8010152:	e883 0003 	stmia.w	r3, {r0, r1}
 8010156:	2310      	movs	r3, #16
 8010158:	9301      	str	r3, [sp, #4]
 801015a:	f24c 6318 	movw	r3, #50712	; 0xc618
 801015e:	9300      	str	r3, [sp, #0]
 8010160:	2300      	movs	r3, #0
 8010162:	4629      	mov	r1, r5
 8010164:	4620      	mov	r0, r4
 8010166:	f7fc f98f 	bl	800c488 <centeredString>
	for (int i = 0; i < stringItem.numberOfItemsInPage ; i++)
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	3301      	adds	r3, #1
 801016e:	617b      	str	r3, [r7, #20]
 8010170:	4b07      	ldr	r3, [pc, #28]	; (8010190 <updateStringItem+0x14a8>)
 8010172:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 8010176:	461a      	mov	r2, r3
 8010178:	697b      	ldr	r3, [r7, #20]
 801017a:	4293      	cmp	r3, r2
 801017c:	f6fe add8 	blt.w	800ed30 <updateStringItem+0x48>
				}
			}
		}
	}
}
 8010180:	bf00      	nop
 8010182:	bf00      	nop
 8010184:	3724      	adds	r7, #36	; 0x24
 8010186:	46bd      	mov	sp, r7
 8010188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801018a:	bf00      	nop
 801018c:	2400a5bc 	.word	0x2400a5bc
 8010190:	2400b030 	.word	0x2400b030
 8010194:	24000018 	.word	0x24000018

08010198 <__assert_func>:
 8010198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801019a:	4614      	mov	r4, r2
 801019c:	461a      	mov	r2, r3
 801019e:	4b09      	ldr	r3, [pc, #36]	; (80101c4 <__assert_func+0x2c>)
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	4605      	mov	r5, r0
 80101a4:	68d8      	ldr	r0, [r3, #12]
 80101a6:	b14c      	cbz	r4, 80101bc <__assert_func+0x24>
 80101a8:	4b07      	ldr	r3, [pc, #28]	; (80101c8 <__assert_func+0x30>)
 80101aa:	9100      	str	r1, [sp, #0]
 80101ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80101b0:	4906      	ldr	r1, [pc, #24]	; (80101cc <__assert_func+0x34>)
 80101b2:	462b      	mov	r3, r5
 80101b4:	f000 f814 	bl	80101e0 <fiprintf>
 80101b8:	f002 f930 	bl	801241c <abort>
 80101bc:	4b04      	ldr	r3, [pc, #16]	; (80101d0 <__assert_func+0x38>)
 80101be:	461c      	mov	r4, r3
 80101c0:	e7f3      	b.n	80101aa <__assert_func+0x12>
 80101c2:	bf00      	nop
 80101c4:	2400a0f0 	.word	0x2400a0f0
 80101c8:	0801dbbf 	.word	0x0801dbbf
 80101cc:	0801dbcc 	.word	0x0801dbcc
 80101d0:	0801dbfa 	.word	0x0801dbfa

080101d4 <__errno>:
 80101d4:	4b01      	ldr	r3, [pc, #4]	; (80101dc <__errno+0x8>)
 80101d6:	6818      	ldr	r0, [r3, #0]
 80101d8:	4770      	bx	lr
 80101da:	bf00      	nop
 80101dc:	2400a0f0 	.word	0x2400a0f0

080101e0 <fiprintf>:
 80101e0:	b40e      	push	{r1, r2, r3}
 80101e2:	b503      	push	{r0, r1, lr}
 80101e4:	4601      	mov	r1, r0
 80101e6:	ab03      	add	r3, sp, #12
 80101e8:	4805      	ldr	r0, [pc, #20]	; (8010200 <fiprintf+0x20>)
 80101ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80101ee:	6800      	ldr	r0, [r0, #0]
 80101f0:	9301      	str	r3, [sp, #4]
 80101f2:	f000 f93f 	bl	8010474 <_vfiprintf_r>
 80101f6:	b002      	add	sp, #8
 80101f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80101fc:	b003      	add	sp, #12
 80101fe:	4770      	bx	lr
 8010200:	2400a0f0 	.word	0x2400a0f0

08010204 <__libc_init_array>:
 8010204:	b570      	push	{r4, r5, r6, lr}
 8010206:	4d0d      	ldr	r5, [pc, #52]	; (801023c <__libc_init_array+0x38>)
 8010208:	4c0d      	ldr	r4, [pc, #52]	; (8010240 <__libc_init_array+0x3c>)
 801020a:	1b64      	subs	r4, r4, r5
 801020c:	10a4      	asrs	r4, r4, #2
 801020e:	2600      	movs	r6, #0
 8010210:	42a6      	cmp	r6, r4
 8010212:	d109      	bne.n	8010228 <__libc_init_array+0x24>
 8010214:	4d0b      	ldr	r5, [pc, #44]	; (8010244 <__libc_init_array+0x40>)
 8010216:	4c0c      	ldr	r4, [pc, #48]	; (8010248 <__libc_init_array+0x44>)
 8010218:	f004 fe22 	bl	8014e60 <_init>
 801021c:	1b64      	subs	r4, r4, r5
 801021e:	10a4      	asrs	r4, r4, #2
 8010220:	2600      	movs	r6, #0
 8010222:	42a6      	cmp	r6, r4
 8010224:	d105      	bne.n	8010232 <__libc_init_array+0x2e>
 8010226:	bd70      	pop	{r4, r5, r6, pc}
 8010228:	f855 3b04 	ldr.w	r3, [r5], #4
 801022c:	4798      	blx	r3
 801022e:	3601      	adds	r6, #1
 8010230:	e7ee      	b.n	8010210 <__libc_init_array+0xc>
 8010232:	f855 3b04 	ldr.w	r3, [r5], #4
 8010236:	4798      	blx	r3
 8010238:	3601      	adds	r6, #1
 801023a:	e7f2      	b.n	8010222 <__libc_init_array+0x1e>
 801023c:	0801e1c0 	.word	0x0801e1c0
 8010240:	0801e1c0 	.word	0x0801e1c0
 8010244:	0801e1c0 	.word	0x0801e1c0
 8010248:	0801e1c4 	.word	0x0801e1c4

0801024c <malloc>:
 801024c:	4b02      	ldr	r3, [pc, #8]	; (8010258 <malloc+0xc>)
 801024e:	4601      	mov	r1, r0
 8010250:	6818      	ldr	r0, [r3, #0]
 8010252:	f000 b88b 	b.w	801036c <_malloc_r>
 8010256:	bf00      	nop
 8010258:	2400a0f0 	.word	0x2400a0f0

0801025c <free>:
 801025c:	4b02      	ldr	r3, [pc, #8]	; (8010268 <free+0xc>)
 801025e:	4601      	mov	r1, r0
 8010260:	6818      	ldr	r0, [r3, #0]
 8010262:	f000 b833 	b.w	80102cc <_free_r>
 8010266:	bf00      	nop
 8010268:	2400a0f0 	.word	0x2400a0f0

0801026c <memcpy>:
 801026c:	440a      	add	r2, r1
 801026e:	4291      	cmp	r1, r2
 8010270:	f100 33ff 	add.w	r3, r0, #4294967295
 8010274:	d100      	bne.n	8010278 <memcpy+0xc>
 8010276:	4770      	bx	lr
 8010278:	b510      	push	{r4, lr}
 801027a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801027e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010282:	4291      	cmp	r1, r2
 8010284:	d1f9      	bne.n	801027a <memcpy+0xe>
 8010286:	bd10      	pop	{r4, pc}

08010288 <memmove>:
 8010288:	4288      	cmp	r0, r1
 801028a:	b510      	push	{r4, lr}
 801028c:	eb01 0402 	add.w	r4, r1, r2
 8010290:	d902      	bls.n	8010298 <memmove+0x10>
 8010292:	4284      	cmp	r4, r0
 8010294:	4623      	mov	r3, r4
 8010296:	d807      	bhi.n	80102a8 <memmove+0x20>
 8010298:	1e43      	subs	r3, r0, #1
 801029a:	42a1      	cmp	r1, r4
 801029c:	d008      	beq.n	80102b0 <memmove+0x28>
 801029e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80102a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80102a6:	e7f8      	b.n	801029a <memmove+0x12>
 80102a8:	4402      	add	r2, r0
 80102aa:	4601      	mov	r1, r0
 80102ac:	428a      	cmp	r2, r1
 80102ae:	d100      	bne.n	80102b2 <memmove+0x2a>
 80102b0:	bd10      	pop	{r4, pc}
 80102b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80102b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80102ba:	e7f7      	b.n	80102ac <memmove+0x24>

080102bc <memset>:
 80102bc:	4402      	add	r2, r0
 80102be:	4603      	mov	r3, r0
 80102c0:	4293      	cmp	r3, r2
 80102c2:	d100      	bne.n	80102c6 <memset+0xa>
 80102c4:	4770      	bx	lr
 80102c6:	f803 1b01 	strb.w	r1, [r3], #1
 80102ca:	e7f9      	b.n	80102c0 <memset+0x4>

080102cc <_free_r>:
 80102cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80102ce:	2900      	cmp	r1, #0
 80102d0:	d048      	beq.n	8010364 <_free_r+0x98>
 80102d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80102d6:	9001      	str	r0, [sp, #4]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	f1a1 0404 	sub.w	r4, r1, #4
 80102de:	bfb8      	it	lt
 80102e0:	18e4      	addlt	r4, r4, r3
 80102e2:	f003 fc53 	bl	8013b8c <__malloc_lock>
 80102e6:	4a20      	ldr	r2, [pc, #128]	; (8010368 <_free_r+0x9c>)
 80102e8:	9801      	ldr	r0, [sp, #4]
 80102ea:	6813      	ldr	r3, [r2, #0]
 80102ec:	4615      	mov	r5, r2
 80102ee:	b933      	cbnz	r3, 80102fe <_free_r+0x32>
 80102f0:	6063      	str	r3, [r4, #4]
 80102f2:	6014      	str	r4, [r2, #0]
 80102f4:	b003      	add	sp, #12
 80102f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80102fa:	f003 bc4d 	b.w	8013b98 <__malloc_unlock>
 80102fe:	42a3      	cmp	r3, r4
 8010300:	d90b      	bls.n	801031a <_free_r+0x4e>
 8010302:	6821      	ldr	r1, [r4, #0]
 8010304:	1862      	adds	r2, r4, r1
 8010306:	4293      	cmp	r3, r2
 8010308:	bf04      	itt	eq
 801030a:	681a      	ldreq	r2, [r3, #0]
 801030c:	685b      	ldreq	r3, [r3, #4]
 801030e:	6063      	str	r3, [r4, #4]
 8010310:	bf04      	itt	eq
 8010312:	1852      	addeq	r2, r2, r1
 8010314:	6022      	streq	r2, [r4, #0]
 8010316:	602c      	str	r4, [r5, #0]
 8010318:	e7ec      	b.n	80102f4 <_free_r+0x28>
 801031a:	461a      	mov	r2, r3
 801031c:	685b      	ldr	r3, [r3, #4]
 801031e:	b10b      	cbz	r3, 8010324 <_free_r+0x58>
 8010320:	42a3      	cmp	r3, r4
 8010322:	d9fa      	bls.n	801031a <_free_r+0x4e>
 8010324:	6811      	ldr	r1, [r2, #0]
 8010326:	1855      	adds	r5, r2, r1
 8010328:	42a5      	cmp	r5, r4
 801032a:	d10b      	bne.n	8010344 <_free_r+0x78>
 801032c:	6824      	ldr	r4, [r4, #0]
 801032e:	4421      	add	r1, r4
 8010330:	1854      	adds	r4, r2, r1
 8010332:	42a3      	cmp	r3, r4
 8010334:	6011      	str	r1, [r2, #0]
 8010336:	d1dd      	bne.n	80102f4 <_free_r+0x28>
 8010338:	681c      	ldr	r4, [r3, #0]
 801033a:	685b      	ldr	r3, [r3, #4]
 801033c:	6053      	str	r3, [r2, #4]
 801033e:	4421      	add	r1, r4
 8010340:	6011      	str	r1, [r2, #0]
 8010342:	e7d7      	b.n	80102f4 <_free_r+0x28>
 8010344:	d902      	bls.n	801034c <_free_r+0x80>
 8010346:	230c      	movs	r3, #12
 8010348:	6003      	str	r3, [r0, #0]
 801034a:	e7d3      	b.n	80102f4 <_free_r+0x28>
 801034c:	6825      	ldr	r5, [r4, #0]
 801034e:	1961      	adds	r1, r4, r5
 8010350:	428b      	cmp	r3, r1
 8010352:	bf04      	itt	eq
 8010354:	6819      	ldreq	r1, [r3, #0]
 8010356:	685b      	ldreq	r3, [r3, #4]
 8010358:	6063      	str	r3, [r4, #4]
 801035a:	bf04      	itt	eq
 801035c:	1949      	addeq	r1, r1, r5
 801035e:	6021      	streq	r1, [r4, #0]
 8010360:	6054      	str	r4, [r2, #4]
 8010362:	e7c7      	b.n	80102f4 <_free_r+0x28>
 8010364:	b003      	add	sp, #12
 8010366:	bd30      	pop	{r4, r5, pc}
 8010368:	2400a45c 	.word	0x2400a45c

0801036c <_malloc_r>:
 801036c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801036e:	1ccd      	adds	r5, r1, #3
 8010370:	f025 0503 	bic.w	r5, r5, #3
 8010374:	3508      	adds	r5, #8
 8010376:	2d0c      	cmp	r5, #12
 8010378:	bf38      	it	cc
 801037a:	250c      	movcc	r5, #12
 801037c:	2d00      	cmp	r5, #0
 801037e:	4606      	mov	r6, r0
 8010380:	db01      	blt.n	8010386 <_malloc_r+0x1a>
 8010382:	42a9      	cmp	r1, r5
 8010384:	d903      	bls.n	801038e <_malloc_r+0x22>
 8010386:	230c      	movs	r3, #12
 8010388:	6033      	str	r3, [r6, #0]
 801038a:	2000      	movs	r0, #0
 801038c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801038e:	f003 fbfd 	bl	8013b8c <__malloc_lock>
 8010392:	4921      	ldr	r1, [pc, #132]	; (8010418 <_malloc_r+0xac>)
 8010394:	680a      	ldr	r2, [r1, #0]
 8010396:	4614      	mov	r4, r2
 8010398:	b99c      	cbnz	r4, 80103c2 <_malloc_r+0x56>
 801039a:	4f20      	ldr	r7, [pc, #128]	; (801041c <_malloc_r+0xb0>)
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	b923      	cbnz	r3, 80103aa <_malloc_r+0x3e>
 80103a0:	4621      	mov	r1, r4
 80103a2:	4630      	mov	r0, r6
 80103a4:	f001 f86c 	bl	8011480 <_sbrk_r>
 80103a8:	6038      	str	r0, [r7, #0]
 80103aa:	4629      	mov	r1, r5
 80103ac:	4630      	mov	r0, r6
 80103ae:	f001 f867 	bl	8011480 <_sbrk_r>
 80103b2:	1c43      	adds	r3, r0, #1
 80103b4:	d123      	bne.n	80103fe <_malloc_r+0x92>
 80103b6:	230c      	movs	r3, #12
 80103b8:	6033      	str	r3, [r6, #0]
 80103ba:	4630      	mov	r0, r6
 80103bc:	f003 fbec 	bl	8013b98 <__malloc_unlock>
 80103c0:	e7e3      	b.n	801038a <_malloc_r+0x1e>
 80103c2:	6823      	ldr	r3, [r4, #0]
 80103c4:	1b5b      	subs	r3, r3, r5
 80103c6:	d417      	bmi.n	80103f8 <_malloc_r+0x8c>
 80103c8:	2b0b      	cmp	r3, #11
 80103ca:	d903      	bls.n	80103d4 <_malloc_r+0x68>
 80103cc:	6023      	str	r3, [r4, #0]
 80103ce:	441c      	add	r4, r3
 80103d0:	6025      	str	r5, [r4, #0]
 80103d2:	e004      	b.n	80103de <_malloc_r+0x72>
 80103d4:	6863      	ldr	r3, [r4, #4]
 80103d6:	42a2      	cmp	r2, r4
 80103d8:	bf0c      	ite	eq
 80103da:	600b      	streq	r3, [r1, #0]
 80103dc:	6053      	strne	r3, [r2, #4]
 80103de:	4630      	mov	r0, r6
 80103e0:	f003 fbda 	bl	8013b98 <__malloc_unlock>
 80103e4:	f104 000b 	add.w	r0, r4, #11
 80103e8:	1d23      	adds	r3, r4, #4
 80103ea:	f020 0007 	bic.w	r0, r0, #7
 80103ee:	1ac2      	subs	r2, r0, r3
 80103f0:	d0cc      	beq.n	801038c <_malloc_r+0x20>
 80103f2:	1a1b      	subs	r3, r3, r0
 80103f4:	50a3      	str	r3, [r4, r2]
 80103f6:	e7c9      	b.n	801038c <_malloc_r+0x20>
 80103f8:	4622      	mov	r2, r4
 80103fa:	6864      	ldr	r4, [r4, #4]
 80103fc:	e7cc      	b.n	8010398 <_malloc_r+0x2c>
 80103fe:	1cc4      	adds	r4, r0, #3
 8010400:	f024 0403 	bic.w	r4, r4, #3
 8010404:	42a0      	cmp	r0, r4
 8010406:	d0e3      	beq.n	80103d0 <_malloc_r+0x64>
 8010408:	1a21      	subs	r1, r4, r0
 801040a:	4630      	mov	r0, r6
 801040c:	f001 f838 	bl	8011480 <_sbrk_r>
 8010410:	3001      	adds	r0, #1
 8010412:	d1dd      	bne.n	80103d0 <_malloc_r+0x64>
 8010414:	e7cf      	b.n	80103b6 <_malloc_r+0x4a>
 8010416:	bf00      	nop
 8010418:	2400a45c 	.word	0x2400a45c
 801041c:	2400a460 	.word	0x2400a460

08010420 <__sfputc_r>:
 8010420:	6893      	ldr	r3, [r2, #8]
 8010422:	3b01      	subs	r3, #1
 8010424:	2b00      	cmp	r3, #0
 8010426:	b410      	push	{r4}
 8010428:	6093      	str	r3, [r2, #8]
 801042a:	da08      	bge.n	801043e <__sfputc_r+0x1e>
 801042c:	6994      	ldr	r4, [r2, #24]
 801042e:	42a3      	cmp	r3, r4
 8010430:	db01      	blt.n	8010436 <__sfputc_r+0x16>
 8010432:	290a      	cmp	r1, #10
 8010434:	d103      	bne.n	801043e <__sfputc_r+0x1e>
 8010436:	f85d 4b04 	ldr.w	r4, [sp], #4
 801043a:	f001 bf2f 	b.w	801229c <__swbuf_r>
 801043e:	6813      	ldr	r3, [r2, #0]
 8010440:	1c58      	adds	r0, r3, #1
 8010442:	6010      	str	r0, [r2, #0]
 8010444:	7019      	strb	r1, [r3, #0]
 8010446:	4608      	mov	r0, r1
 8010448:	f85d 4b04 	ldr.w	r4, [sp], #4
 801044c:	4770      	bx	lr

0801044e <__sfputs_r>:
 801044e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010450:	4606      	mov	r6, r0
 8010452:	460f      	mov	r7, r1
 8010454:	4614      	mov	r4, r2
 8010456:	18d5      	adds	r5, r2, r3
 8010458:	42ac      	cmp	r4, r5
 801045a:	d101      	bne.n	8010460 <__sfputs_r+0x12>
 801045c:	2000      	movs	r0, #0
 801045e:	e007      	b.n	8010470 <__sfputs_r+0x22>
 8010460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010464:	463a      	mov	r2, r7
 8010466:	4630      	mov	r0, r6
 8010468:	f7ff ffda 	bl	8010420 <__sfputc_r>
 801046c:	1c43      	adds	r3, r0, #1
 801046e:	d1f3      	bne.n	8010458 <__sfputs_r+0xa>
 8010470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010474 <_vfiprintf_r>:
 8010474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010478:	460d      	mov	r5, r1
 801047a:	b09d      	sub	sp, #116	; 0x74
 801047c:	4614      	mov	r4, r2
 801047e:	4698      	mov	r8, r3
 8010480:	4606      	mov	r6, r0
 8010482:	b118      	cbz	r0, 801048c <_vfiprintf_r+0x18>
 8010484:	6983      	ldr	r3, [r0, #24]
 8010486:	b90b      	cbnz	r3, 801048c <_vfiprintf_r+0x18>
 8010488:	f002 fef6 	bl	8013278 <__sinit>
 801048c:	4b89      	ldr	r3, [pc, #548]	; (80106b4 <_vfiprintf_r+0x240>)
 801048e:	429d      	cmp	r5, r3
 8010490:	d11b      	bne.n	80104ca <_vfiprintf_r+0x56>
 8010492:	6875      	ldr	r5, [r6, #4]
 8010494:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010496:	07d9      	lsls	r1, r3, #31
 8010498:	d405      	bmi.n	80104a6 <_vfiprintf_r+0x32>
 801049a:	89ab      	ldrh	r3, [r5, #12]
 801049c:	059a      	lsls	r2, r3, #22
 801049e:	d402      	bmi.n	80104a6 <_vfiprintf_r+0x32>
 80104a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80104a2:	f003 fafa 	bl	8013a9a <__retarget_lock_acquire_recursive>
 80104a6:	89ab      	ldrh	r3, [r5, #12]
 80104a8:	071b      	lsls	r3, r3, #28
 80104aa:	d501      	bpl.n	80104b0 <_vfiprintf_r+0x3c>
 80104ac:	692b      	ldr	r3, [r5, #16]
 80104ae:	b9eb      	cbnz	r3, 80104ec <_vfiprintf_r+0x78>
 80104b0:	4629      	mov	r1, r5
 80104b2:	4630      	mov	r0, r6
 80104b4:	f001 ff44 	bl	8012340 <__swsetup_r>
 80104b8:	b1c0      	cbz	r0, 80104ec <_vfiprintf_r+0x78>
 80104ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80104bc:	07dc      	lsls	r4, r3, #31
 80104be:	d50e      	bpl.n	80104de <_vfiprintf_r+0x6a>
 80104c0:	f04f 30ff 	mov.w	r0, #4294967295
 80104c4:	b01d      	add	sp, #116	; 0x74
 80104c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104ca:	4b7b      	ldr	r3, [pc, #492]	; (80106b8 <_vfiprintf_r+0x244>)
 80104cc:	429d      	cmp	r5, r3
 80104ce:	d101      	bne.n	80104d4 <_vfiprintf_r+0x60>
 80104d0:	68b5      	ldr	r5, [r6, #8]
 80104d2:	e7df      	b.n	8010494 <_vfiprintf_r+0x20>
 80104d4:	4b79      	ldr	r3, [pc, #484]	; (80106bc <_vfiprintf_r+0x248>)
 80104d6:	429d      	cmp	r5, r3
 80104d8:	bf08      	it	eq
 80104da:	68f5      	ldreq	r5, [r6, #12]
 80104dc:	e7da      	b.n	8010494 <_vfiprintf_r+0x20>
 80104de:	89ab      	ldrh	r3, [r5, #12]
 80104e0:	0598      	lsls	r0, r3, #22
 80104e2:	d4ed      	bmi.n	80104c0 <_vfiprintf_r+0x4c>
 80104e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80104e6:	f003 fad9 	bl	8013a9c <__retarget_lock_release_recursive>
 80104ea:	e7e9      	b.n	80104c0 <_vfiprintf_r+0x4c>
 80104ec:	2300      	movs	r3, #0
 80104ee:	9309      	str	r3, [sp, #36]	; 0x24
 80104f0:	2320      	movs	r3, #32
 80104f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80104f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80104fa:	2330      	movs	r3, #48	; 0x30
 80104fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80106c0 <_vfiprintf_r+0x24c>
 8010500:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010504:	f04f 0901 	mov.w	r9, #1
 8010508:	4623      	mov	r3, r4
 801050a:	469a      	mov	sl, r3
 801050c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010510:	b10a      	cbz	r2, 8010516 <_vfiprintf_r+0xa2>
 8010512:	2a25      	cmp	r2, #37	; 0x25
 8010514:	d1f9      	bne.n	801050a <_vfiprintf_r+0x96>
 8010516:	ebba 0b04 	subs.w	fp, sl, r4
 801051a:	d00b      	beq.n	8010534 <_vfiprintf_r+0xc0>
 801051c:	465b      	mov	r3, fp
 801051e:	4622      	mov	r2, r4
 8010520:	4629      	mov	r1, r5
 8010522:	4630      	mov	r0, r6
 8010524:	f7ff ff93 	bl	801044e <__sfputs_r>
 8010528:	3001      	adds	r0, #1
 801052a:	f000 80aa 	beq.w	8010682 <_vfiprintf_r+0x20e>
 801052e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010530:	445a      	add	r2, fp
 8010532:	9209      	str	r2, [sp, #36]	; 0x24
 8010534:	f89a 3000 	ldrb.w	r3, [sl]
 8010538:	2b00      	cmp	r3, #0
 801053a:	f000 80a2 	beq.w	8010682 <_vfiprintf_r+0x20e>
 801053e:	2300      	movs	r3, #0
 8010540:	f04f 32ff 	mov.w	r2, #4294967295
 8010544:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010548:	f10a 0a01 	add.w	sl, sl, #1
 801054c:	9304      	str	r3, [sp, #16]
 801054e:	9307      	str	r3, [sp, #28]
 8010550:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010554:	931a      	str	r3, [sp, #104]	; 0x68
 8010556:	4654      	mov	r4, sl
 8010558:	2205      	movs	r2, #5
 801055a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801055e:	4858      	ldr	r0, [pc, #352]	; (80106c0 <_vfiprintf_r+0x24c>)
 8010560:	f7ef fed6 	bl	8000310 <memchr>
 8010564:	9a04      	ldr	r2, [sp, #16]
 8010566:	b9d8      	cbnz	r0, 80105a0 <_vfiprintf_r+0x12c>
 8010568:	06d1      	lsls	r1, r2, #27
 801056a:	bf44      	itt	mi
 801056c:	2320      	movmi	r3, #32
 801056e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010572:	0713      	lsls	r3, r2, #28
 8010574:	bf44      	itt	mi
 8010576:	232b      	movmi	r3, #43	; 0x2b
 8010578:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801057c:	f89a 3000 	ldrb.w	r3, [sl]
 8010580:	2b2a      	cmp	r3, #42	; 0x2a
 8010582:	d015      	beq.n	80105b0 <_vfiprintf_r+0x13c>
 8010584:	9a07      	ldr	r2, [sp, #28]
 8010586:	4654      	mov	r4, sl
 8010588:	2000      	movs	r0, #0
 801058a:	f04f 0c0a 	mov.w	ip, #10
 801058e:	4621      	mov	r1, r4
 8010590:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010594:	3b30      	subs	r3, #48	; 0x30
 8010596:	2b09      	cmp	r3, #9
 8010598:	d94e      	bls.n	8010638 <_vfiprintf_r+0x1c4>
 801059a:	b1b0      	cbz	r0, 80105ca <_vfiprintf_r+0x156>
 801059c:	9207      	str	r2, [sp, #28]
 801059e:	e014      	b.n	80105ca <_vfiprintf_r+0x156>
 80105a0:	eba0 0308 	sub.w	r3, r0, r8
 80105a4:	fa09 f303 	lsl.w	r3, r9, r3
 80105a8:	4313      	orrs	r3, r2
 80105aa:	9304      	str	r3, [sp, #16]
 80105ac:	46a2      	mov	sl, r4
 80105ae:	e7d2      	b.n	8010556 <_vfiprintf_r+0xe2>
 80105b0:	9b03      	ldr	r3, [sp, #12]
 80105b2:	1d19      	adds	r1, r3, #4
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	9103      	str	r1, [sp, #12]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	bfbb      	ittet	lt
 80105bc:	425b      	neglt	r3, r3
 80105be:	f042 0202 	orrlt.w	r2, r2, #2
 80105c2:	9307      	strge	r3, [sp, #28]
 80105c4:	9307      	strlt	r3, [sp, #28]
 80105c6:	bfb8      	it	lt
 80105c8:	9204      	strlt	r2, [sp, #16]
 80105ca:	7823      	ldrb	r3, [r4, #0]
 80105cc:	2b2e      	cmp	r3, #46	; 0x2e
 80105ce:	d10c      	bne.n	80105ea <_vfiprintf_r+0x176>
 80105d0:	7863      	ldrb	r3, [r4, #1]
 80105d2:	2b2a      	cmp	r3, #42	; 0x2a
 80105d4:	d135      	bne.n	8010642 <_vfiprintf_r+0x1ce>
 80105d6:	9b03      	ldr	r3, [sp, #12]
 80105d8:	1d1a      	adds	r2, r3, #4
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	9203      	str	r2, [sp, #12]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	bfb8      	it	lt
 80105e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80105e6:	3402      	adds	r4, #2
 80105e8:	9305      	str	r3, [sp, #20]
 80105ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80106d0 <_vfiprintf_r+0x25c>
 80105ee:	7821      	ldrb	r1, [r4, #0]
 80105f0:	2203      	movs	r2, #3
 80105f2:	4650      	mov	r0, sl
 80105f4:	f7ef fe8c 	bl	8000310 <memchr>
 80105f8:	b140      	cbz	r0, 801060c <_vfiprintf_r+0x198>
 80105fa:	2340      	movs	r3, #64	; 0x40
 80105fc:	eba0 000a 	sub.w	r0, r0, sl
 8010600:	fa03 f000 	lsl.w	r0, r3, r0
 8010604:	9b04      	ldr	r3, [sp, #16]
 8010606:	4303      	orrs	r3, r0
 8010608:	3401      	adds	r4, #1
 801060a:	9304      	str	r3, [sp, #16]
 801060c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010610:	482c      	ldr	r0, [pc, #176]	; (80106c4 <_vfiprintf_r+0x250>)
 8010612:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010616:	2206      	movs	r2, #6
 8010618:	f7ef fe7a 	bl	8000310 <memchr>
 801061c:	2800      	cmp	r0, #0
 801061e:	d03f      	beq.n	80106a0 <_vfiprintf_r+0x22c>
 8010620:	4b29      	ldr	r3, [pc, #164]	; (80106c8 <_vfiprintf_r+0x254>)
 8010622:	bb1b      	cbnz	r3, 801066c <_vfiprintf_r+0x1f8>
 8010624:	9b03      	ldr	r3, [sp, #12]
 8010626:	3307      	adds	r3, #7
 8010628:	f023 0307 	bic.w	r3, r3, #7
 801062c:	3308      	adds	r3, #8
 801062e:	9303      	str	r3, [sp, #12]
 8010630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010632:	443b      	add	r3, r7
 8010634:	9309      	str	r3, [sp, #36]	; 0x24
 8010636:	e767      	b.n	8010508 <_vfiprintf_r+0x94>
 8010638:	fb0c 3202 	mla	r2, ip, r2, r3
 801063c:	460c      	mov	r4, r1
 801063e:	2001      	movs	r0, #1
 8010640:	e7a5      	b.n	801058e <_vfiprintf_r+0x11a>
 8010642:	2300      	movs	r3, #0
 8010644:	3401      	adds	r4, #1
 8010646:	9305      	str	r3, [sp, #20]
 8010648:	4619      	mov	r1, r3
 801064a:	f04f 0c0a 	mov.w	ip, #10
 801064e:	4620      	mov	r0, r4
 8010650:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010654:	3a30      	subs	r2, #48	; 0x30
 8010656:	2a09      	cmp	r2, #9
 8010658:	d903      	bls.n	8010662 <_vfiprintf_r+0x1ee>
 801065a:	2b00      	cmp	r3, #0
 801065c:	d0c5      	beq.n	80105ea <_vfiprintf_r+0x176>
 801065e:	9105      	str	r1, [sp, #20]
 8010660:	e7c3      	b.n	80105ea <_vfiprintf_r+0x176>
 8010662:	fb0c 2101 	mla	r1, ip, r1, r2
 8010666:	4604      	mov	r4, r0
 8010668:	2301      	movs	r3, #1
 801066a:	e7f0      	b.n	801064e <_vfiprintf_r+0x1da>
 801066c:	ab03      	add	r3, sp, #12
 801066e:	9300      	str	r3, [sp, #0]
 8010670:	462a      	mov	r2, r5
 8010672:	4b16      	ldr	r3, [pc, #88]	; (80106cc <_vfiprintf_r+0x258>)
 8010674:	a904      	add	r1, sp, #16
 8010676:	4630      	mov	r0, r6
 8010678:	f000 f8be 	bl	80107f8 <_printf_float>
 801067c:	4607      	mov	r7, r0
 801067e:	1c78      	adds	r0, r7, #1
 8010680:	d1d6      	bne.n	8010630 <_vfiprintf_r+0x1bc>
 8010682:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010684:	07d9      	lsls	r1, r3, #31
 8010686:	d405      	bmi.n	8010694 <_vfiprintf_r+0x220>
 8010688:	89ab      	ldrh	r3, [r5, #12]
 801068a:	059a      	lsls	r2, r3, #22
 801068c:	d402      	bmi.n	8010694 <_vfiprintf_r+0x220>
 801068e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010690:	f003 fa04 	bl	8013a9c <__retarget_lock_release_recursive>
 8010694:	89ab      	ldrh	r3, [r5, #12]
 8010696:	065b      	lsls	r3, r3, #25
 8010698:	f53f af12 	bmi.w	80104c0 <_vfiprintf_r+0x4c>
 801069c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801069e:	e711      	b.n	80104c4 <_vfiprintf_r+0x50>
 80106a0:	ab03      	add	r3, sp, #12
 80106a2:	9300      	str	r3, [sp, #0]
 80106a4:	462a      	mov	r2, r5
 80106a6:	4b09      	ldr	r3, [pc, #36]	; (80106cc <_vfiprintf_r+0x258>)
 80106a8:	a904      	add	r1, sp, #16
 80106aa:	4630      	mov	r0, r6
 80106ac:	f000 fb30 	bl	8010d10 <_printf_i>
 80106b0:	e7e4      	b.n	801067c <_vfiprintf_r+0x208>
 80106b2:	bf00      	nop
 80106b4:	0801de58 	.word	0x0801de58
 80106b8:	0801de78 	.word	0x0801de78
 80106bc:	0801de38 	.word	0x0801de38
 80106c0:	0801dc00 	.word	0x0801dc00
 80106c4:	0801dc0a 	.word	0x0801dc0a
 80106c8:	080107f9 	.word	0x080107f9
 80106cc:	0801044f 	.word	0x0801044f
 80106d0:	0801dc06 	.word	0x0801dc06

080106d4 <__cvt>:
 80106d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106d6:	ed2d 8b02 	vpush	{d8}
 80106da:	eeb0 8b40 	vmov.f64	d8, d0
 80106de:	b085      	sub	sp, #20
 80106e0:	4617      	mov	r7, r2
 80106e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80106e4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80106e6:	ee18 2a90 	vmov	r2, s17
 80106ea:	f025 0520 	bic.w	r5, r5, #32
 80106ee:	2a00      	cmp	r2, #0
 80106f0:	bfb6      	itet	lt
 80106f2:	222d      	movlt	r2, #45	; 0x2d
 80106f4:	2200      	movge	r2, #0
 80106f6:	eeb1 8b40 	vneglt.f64	d8, d0
 80106fa:	2d46      	cmp	r5, #70	; 0x46
 80106fc:	460c      	mov	r4, r1
 80106fe:	701a      	strb	r2, [r3, #0]
 8010700:	d004      	beq.n	801070c <__cvt+0x38>
 8010702:	2d45      	cmp	r5, #69	; 0x45
 8010704:	d100      	bne.n	8010708 <__cvt+0x34>
 8010706:	3401      	adds	r4, #1
 8010708:	2102      	movs	r1, #2
 801070a:	e000      	b.n	801070e <__cvt+0x3a>
 801070c:	2103      	movs	r1, #3
 801070e:	ab03      	add	r3, sp, #12
 8010710:	9301      	str	r3, [sp, #4]
 8010712:	ab02      	add	r3, sp, #8
 8010714:	9300      	str	r3, [sp, #0]
 8010716:	4622      	mov	r2, r4
 8010718:	4633      	mov	r3, r6
 801071a:	eeb0 0b48 	vmov.f64	d0, d8
 801071e:	f001 ff0f 	bl	8012540 <_dtoa_r>
 8010722:	2d47      	cmp	r5, #71	; 0x47
 8010724:	d109      	bne.n	801073a <__cvt+0x66>
 8010726:	07fb      	lsls	r3, r7, #31
 8010728:	d407      	bmi.n	801073a <__cvt+0x66>
 801072a:	9b03      	ldr	r3, [sp, #12]
 801072c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801072e:	1a1b      	subs	r3, r3, r0
 8010730:	6013      	str	r3, [r2, #0]
 8010732:	b005      	add	sp, #20
 8010734:	ecbd 8b02 	vpop	{d8}
 8010738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801073a:	2d46      	cmp	r5, #70	; 0x46
 801073c:	eb00 0204 	add.w	r2, r0, r4
 8010740:	d10c      	bne.n	801075c <__cvt+0x88>
 8010742:	7803      	ldrb	r3, [r0, #0]
 8010744:	2b30      	cmp	r3, #48	; 0x30
 8010746:	d107      	bne.n	8010758 <__cvt+0x84>
 8010748:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801074c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010750:	bf1c      	itt	ne
 8010752:	f1c4 0401 	rsbne	r4, r4, #1
 8010756:	6034      	strne	r4, [r6, #0]
 8010758:	6833      	ldr	r3, [r6, #0]
 801075a:	441a      	add	r2, r3
 801075c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010764:	bf08      	it	eq
 8010766:	9203      	streq	r2, [sp, #12]
 8010768:	2130      	movs	r1, #48	; 0x30
 801076a:	9b03      	ldr	r3, [sp, #12]
 801076c:	4293      	cmp	r3, r2
 801076e:	d2dc      	bcs.n	801072a <__cvt+0x56>
 8010770:	1c5c      	adds	r4, r3, #1
 8010772:	9403      	str	r4, [sp, #12]
 8010774:	7019      	strb	r1, [r3, #0]
 8010776:	e7f8      	b.n	801076a <__cvt+0x96>

08010778 <__exponent>:
 8010778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801077a:	4603      	mov	r3, r0
 801077c:	2900      	cmp	r1, #0
 801077e:	bfb8      	it	lt
 8010780:	4249      	neglt	r1, r1
 8010782:	f803 2b02 	strb.w	r2, [r3], #2
 8010786:	bfb4      	ite	lt
 8010788:	222d      	movlt	r2, #45	; 0x2d
 801078a:	222b      	movge	r2, #43	; 0x2b
 801078c:	2909      	cmp	r1, #9
 801078e:	7042      	strb	r2, [r0, #1]
 8010790:	dd2a      	ble.n	80107e8 <__exponent+0x70>
 8010792:	f10d 0407 	add.w	r4, sp, #7
 8010796:	46a4      	mov	ip, r4
 8010798:	270a      	movs	r7, #10
 801079a:	46a6      	mov	lr, r4
 801079c:	460a      	mov	r2, r1
 801079e:	fb91 f6f7 	sdiv	r6, r1, r7
 80107a2:	fb07 1516 	mls	r5, r7, r6, r1
 80107a6:	3530      	adds	r5, #48	; 0x30
 80107a8:	2a63      	cmp	r2, #99	; 0x63
 80107aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80107ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80107b2:	4631      	mov	r1, r6
 80107b4:	dcf1      	bgt.n	801079a <__exponent+0x22>
 80107b6:	3130      	adds	r1, #48	; 0x30
 80107b8:	f1ae 0502 	sub.w	r5, lr, #2
 80107bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80107c0:	1c44      	adds	r4, r0, #1
 80107c2:	4629      	mov	r1, r5
 80107c4:	4561      	cmp	r1, ip
 80107c6:	d30a      	bcc.n	80107de <__exponent+0x66>
 80107c8:	f10d 0209 	add.w	r2, sp, #9
 80107cc:	eba2 020e 	sub.w	r2, r2, lr
 80107d0:	4565      	cmp	r5, ip
 80107d2:	bf88      	it	hi
 80107d4:	2200      	movhi	r2, #0
 80107d6:	4413      	add	r3, r2
 80107d8:	1a18      	subs	r0, r3, r0
 80107da:	b003      	add	sp, #12
 80107dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80107e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80107e6:	e7ed      	b.n	80107c4 <__exponent+0x4c>
 80107e8:	2330      	movs	r3, #48	; 0x30
 80107ea:	3130      	adds	r1, #48	; 0x30
 80107ec:	7083      	strb	r3, [r0, #2]
 80107ee:	70c1      	strb	r1, [r0, #3]
 80107f0:	1d03      	adds	r3, r0, #4
 80107f2:	e7f1      	b.n	80107d8 <__exponent+0x60>
 80107f4:	0000      	movs	r0, r0
	...

080107f8 <_printf_float>:
 80107f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107fc:	b08b      	sub	sp, #44	; 0x2c
 80107fe:	460c      	mov	r4, r1
 8010800:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8010804:	4616      	mov	r6, r2
 8010806:	461f      	mov	r7, r3
 8010808:	4605      	mov	r5, r0
 801080a:	f003 f941 	bl	8013a90 <_localeconv_r>
 801080e:	f8d0 b000 	ldr.w	fp, [r0]
 8010812:	4658      	mov	r0, fp
 8010814:	f7ef fd6e 	bl	80002f4 <strlen>
 8010818:	2300      	movs	r3, #0
 801081a:	9308      	str	r3, [sp, #32]
 801081c:	f8d8 3000 	ldr.w	r3, [r8]
 8010820:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010824:	6822      	ldr	r2, [r4, #0]
 8010826:	3307      	adds	r3, #7
 8010828:	f023 0307 	bic.w	r3, r3, #7
 801082c:	f103 0108 	add.w	r1, r3, #8
 8010830:	f8c8 1000 	str.w	r1, [r8]
 8010834:	4682      	mov	sl, r0
 8010836:	e9d3 0100 	ldrd	r0, r1, [r3]
 801083a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801083e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8010aa0 <_printf_float+0x2a8>
 8010842:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8010846:	eeb0 6bc0 	vabs.f64	d6, d0
 801084a:	eeb4 6b47 	vcmp.f64	d6, d7
 801084e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010852:	dd24      	ble.n	801089e <_printf_float+0xa6>
 8010854:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801085c:	d502      	bpl.n	8010864 <_printf_float+0x6c>
 801085e:	232d      	movs	r3, #45	; 0x2d
 8010860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010864:	4b90      	ldr	r3, [pc, #576]	; (8010aa8 <_printf_float+0x2b0>)
 8010866:	4891      	ldr	r0, [pc, #580]	; (8010aac <_printf_float+0x2b4>)
 8010868:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801086c:	bf94      	ite	ls
 801086e:	4698      	movls	r8, r3
 8010870:	4680      	movhi	r8, r0
 8010872:	2303      	movs	r3, #3
 8010874:	6123      	str	r3, [r4, #16]
 8010876:	f022 0204 	bic.w	r2, r2, #4
 801087a:	2300      	movs	r3, #0
 801087c:	6022      	str	r2, [r4, #0]
 801087e:	9304      	str	r3, [sp, #16]
 8010880:	9700      	str	r7, [sp, #0]
 8010882:	4633      	mov	r3, r6
 8010884:	aa09      	add	r2, sp, #36	; 0x24
 8010886:	4621      	mov	r1, r4
 8010888:	4628      	mov	r0, r5
 801088a:	f000 f9d3 	bl	8010c34 <_printf_common>
 801088e:	3001      	adds	r0, #1
 8010890:	f040 808a 	bne.w	80109a8 <_printf_float+0x1b0>
 8010894:	f04f 30ff 	mov.w	r0, #4294967295
 8010898:	b00b      	add	sp, #44	; 0x2c
 801089a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801089e:	eeb4 0b40 	vcmp.f64	d0, d0
 80108a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108a6:	d709      	bvc.n	80108bc <_printf_float+0xc4>
 80108a8:	ee10 3a90 	vmov	r3, s1
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	bfbc      	itt	lt
 80108b0:	232d      	movlt	r3, #45	; 0x2d
 80108b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80108b6:	487e      	ldr	r0, [pc, #504]	; (8010ab0 <_printf_float+0x2b8>)
 80108b8:	4b7e      	ldr	r3, [pc, #504]	; (8010ab4 <_printf_float+0x2bc>)
 80108ba:	e7d5      	b.n	8010868 <_printf_float+0x70>
 80108bc:	6863      	ldr	r3, [r4, #4]
 80108be:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80108c2:	9104      	str	r1, [sp, #16]
 80108c4:	1c59      	adds	r1, r3, #1
 80108c6:	d13c      	bne.n	8010942 <_printf_float+0x14a>
 80108c8:	2306      	movs	r3, #6
 80108ca:	6063      	str	r3, [r4, #4]
 80108cc:	2300      	movs	r3, #0
 80108ce:	9303      	str	r3, [sp, #12]
 80108d0:	ab08      	add	r3, sp, #32
 80108d2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80108d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80108da:	ab07      	add	r3, sp, #28
 80108dc:	6861      	ldr	r1, [r4, #4]
 80108de:	9300      	str	r3, [sp, #0]
 80108e0:	6022      	str	r2, [r4, #0]
 80108e2:	f10d 031b 	add.w	r3, sp, #27
 80108e6:	4628      	mov	r0, r5
 80108e8:	f7ff fef4 	bl	80106d4 <__cvt>
 80108ec:	9b04      	ldr	r3, [sp, #16]
 80108ee:	9907      	ldr	r1, [sp, #28]
 80108f0:	2b47      	cmp	r3, #71	; 0x47
 80108f2:	4680      	mov	r8, r0
 80108f4:	d108      	bne.n	8010908 <_printf_float+0x110>
 80108f6:	1cc8      	adds	r0, r1, #3
 80108f8:	db02      	blt.n	8010900 <_printf_float+0x108>
 80108fa:	6863      	ldr	r3, [r4, #4]
 80108fc:	4299      	cmp	r1, r3
 80108fe:	dd41      	ble.n	8010984 <_printf_float+0x18c>
 8010900:	f1a9 0902 	sub.w	r9, r9, #2
 8010904:	fa5f f989 	uxtb.w	r9, r9
 8010908:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801090c:	d820      	bhi.n	8010950 <_printf_float+0x158>
 801090e:	3901      	subs	r1, #1
 8010910:	464a      	mov	r2, r9
 8010912:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010916:	9107      	str	r1, [sp, #28]
 8010918:	f7ff ff2e 	bl	8010778 <__exponent>
 801091c:	9a08      	ldr	r2, [sp, #32]
 801091e:	9004      	str	r0, [sp, #16]
 8010920:	1813      	adds	r3, r2, r0
 8010922:	2a01      	cmp	r2, #1
 8010924:	6123      	str	r3, [r4, #16]
 8010926:	dc02      	bgt.n	801092e <_printf_float+0x136>
 8010928:	6822      	ldr	r2, [r4, #0]
 801092a:	07d2      	lsls	r2, r2, #31
 801092c:	d501      	bpl.n	8010932 <_printf_float+0x13a>
 801092e:	3301      	adds	r3, #1
 8010930:	6123      	str	r3, [r4, #16]
 8010932:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d0a2      	beq.n	8010880 <_printf_float+0x88>
 801093a:	232d      	movs	r3, #45	; 0x2d
 801093c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010940:	e79e      	b.n	8010880 <_printf_float+0x88>
 8010942:	9904      	ldr	r1, [sp, #16]
 8010944:	2947      	cmp	r1, #71	; 0x47
 8010946:	d1c1      	bne.n	80108cc <_printf_float+0xd4>
 8010948:	2b00      	cmp	r3, #0
 801094a:	d1bf      	bne.n	80108cc <_printf_float+0xd4>
 801094c:	2301      	movs	r3, #1
 801094e:	e7bc      	b.n	80108ca <_printf_float+0xd2>
 8010950:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8010954:	d118      	bne.n	8010988 <_printf_float+0x190>
 8010956:	2900      	cmp	r1, #0
 8010958:	6863      	ldr	r3, [r4, #4]
 801095a:	dd0b      	ble.n	8010974 <_printf_float+0x17c>
 801095c:	6121      	str	r1, [r4, #16]
 801095e:	b913      	cbnz	r3, 8010966 <_printf_float+0x16e>
 8010960:	6822      	ldr	r2, [r4, #0]
 8010962:	07d0      	lsls	r0, r2, #31
 8010964:	d502      	bpl.n	801096c <_printf_float+0x174>
 8010966:	3301      	adds	r3, #1
 8010968:	440b      	add	r3, r1
 801096a:	6123      	str	r3, [r4, #16]
 801096c:	2300      	movs	r3, #0
 801096e:	65a1      	str	r1, [r4, #88]	; 0x58
 8010970:	9304      	str	r3, [sp, #16]
 8010972:	e7de      	b.n	8010932 <_printf_float+0x13a>
 8010974:	b913      	cbnz	r3, 801097c <_printf_float+0x184>
 8010976:	6822      	ldr	r2, [r4, #0]
 8010978:	07d2      	lsls	r2, r2, #31
 801097a:	d501      	bpl.n	8010980 <_printf_float+0x188>
 801097c:	3302      	adds	r3, #2
 801097e:	e7f4      	b.n	801096a <_printf_float+0x172>
 8010980:	2301      	movs	r3, #1
 8010982:	e7f2      	b.n	801096a <_printf_float+0x172>
 8010984:	f04f 0967 	mov.w	r9, #103	; 0x67
 8010988:	9b08      	ldr	r3, [sp, #32]
 801098a:	4299      	cmp	r1, r3
 801098c:	db05      	blt.n	801099a <_printf_float+0x1a2>
 801098e:	6823      	ldr	r3, [r4, #0]
 8010990:	6121      	str	r1, [r4, #16]
 8010992:	07d8      	lsls	r0, r3, #31
 8010994:	d5ea      	bpl.n	801096c <_printf_float+0x174>
 8010996:	1c4b      	adds	r3, r1, #1
 8010998:	e7e7      	b.n	801096a <_printf_float+0x172>
 801099a:	2900      	cmp	r1, #0
 801099c:	bfd4      	ite	le
 801099e:	f1c1 0202 	rsble	r2, r1, #2
 80109a2:	2201      	movgt	r2, #1
 80109a4:	4413      	add	r3, r2
 80109a6:	e7e0      	b.n	801096a <_printf_float+0x172>
 80109a8:	6823      	ldr	r3, [r4, #0]
 80109aa:	055a      	lsls	r2, r3, #21
 80109ac:	d407      	bmi.n	80109be <_printf_float+0x1c6>
 80109ae:	6923      	ldr	r3, [r4, #16]
 80109b0:	4642      	mov	r2, r8
 80109b2:	4631      	mov	r1, r6
 80109b4:	4628      	mov	r0, r5
 80109b6:	47b8      	blx	r7
 80109b8:	3001      	adds	r0, #1
 80109ba:	d12a      	bne.n	8010a12 <_printf_float+0x21a>
 80109bc:	e76a      	b.n	8010894 <_printf_float+0x9c>
 80109be:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80109c2:	f240 80e2 	bls.w	8010b8a <_printf_float+0x392>
 80109c6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80109ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80109ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109d2:	d133      	bne.n	8010a3c <_printf_float+0x244>
 80109d4:	4a38      	ldr	r2, [pc, #224]	; (8010ab8 <_printf_float+0x2c0>)
 80109d6:	2301      	movs	r3, #1
 80109d8:	4631      	mov	r1, r6
 80109da:	4628      	mov	r0, r5
 80109dc:	47b8      	blx	r7
 80109de:	3001      	adds	r0, #1
 80109e0:	f43f af58 	beq.w	8010894 <_printf_float+0x9c>
 80109e4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80109e8:	429a      	cmp	r2, r3
 80109ea:	db02      	blt.n	80109f2 <_printf_float+0x1fa>
 80109ec:	6823      	ldr	r3, [r4, #0]
 80109ee:	07d8      	lsls	r0, r3, #31
 80109f0:	d50f      	bpl.n	8010a12 <_printf_float+0x21a>
 80109f2:	4653      	mov	r3, sl
 80109f4:	465a      	mov	r2, fp
 80109f6:	4631      	mov	r1, r6
 80109f8:	4628      	mov	r0, r5
 80109fa:	47b8      	blx	r7
 80109fc:	3001      	adds	r0, #1
 80109fe:	f43f af49 	beq.w	8010894 <_printf_float+0x9c>
 8010a02:	f04f 0800 	mov.w	r8, #0
 8010a06:	f104 091a 	add.w	r9, r4, #26
 8010a0a:	9b08      	ldr	r3, [sp, #32]
 8010a0c:	3b01      	subs	r3, #1
 8010a0e:	4543      	cmp	r3, r8
 8010a10:	dc09      	bgt.n	8010a26 <_printf_float+0x22e>
 8010a12:	6823      	ldr	r3, [r4, #0]
 8010a14:	079b      	lsls	r3, r3, #30
 8010a16:	f100 8108 	bmi.w	8010c2a <_printf_float+0x432>
 8010a1a:	68e0      	ldr	r0, [r4, #12]
 8010a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a1e:	4298      	cmp	r0, r3
 8010a20:	bfb8      	it	lt
 8010a22:	4618      	movlt	r0, r3
 8010a24:	e738      	b.n	8010898 <_printf_float+0xa0>
 8010a26:	2301      	movs	r3, #1
 8010a28:	464a      	mov	r2, r9
 8010a2a:	4631      	mov	r1, r6
 8010a2c:	4628      	mov	r0, r5
 8010a2e:	47b8      	blx	r7
 8010a30:	3001      	adds	r0, #1
 8010a32:	f43f af2f 	beq.w	8010894 <_printf_float+0x9c>
 8010a36:	f108 0801 	add.w	r8, r8, #1
 8010a3a:	e7e6      	b.n	8010a0a <_printf_float+0x212>
 8010a3c:	9b07      	ldr	r3, [sp, #28]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	dc3c      	bgt.n	8010abc <_printf_float+0x2c4>
 8010a42:	4a1d      	ldr	r2, [pc, #116]	; (8010ab8 <_printf_float+0x2c0>)
 8010a44:	2301      	movs	r3, #1
 8010a46:	4631      	mov	r1, r6
 8010a48:	4628      	mov	r0, r5
 8010a4a:	47b8      	blx	r7
 8010a4c:	3001      	adds	r0, #1
 8010a4e:	f43f af21 	beq.w	8010894 <_printf_float+0x9c>
 8010a52:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010a56:	4313      	orrs	r3, r2
 8010a58:	d102      	bne.n	8010a60 <_printf_float+0x268>
 8010a5a:	6823      	ldr	r3, [r4, #0]
 8010a5c:	07d9      	lsls	r1, r3, #31
 8010a5e:	d5d8      	bpl.n	8010a12 <_printf_float+0x21a>
 8010a60:	4653      	mov	r3, sl
 8010a62:	465a      	mov	r2, fp
 8010a64:	4631      	mov	r1, r6
 8010a66:	4628      	mov	r0, r5
 8010a68:	47b8      	blx	r7
 8010a6a:	3001      	adds	r0, #1
 8010a6c:	f43f af12 	beq.w	8010894 <_printf_float+0x9c>
 8010a70:	f04f 0900 	mov.w	r9, #0
 8010a74:	f104 0a1a 	add.w	sl, r4, #26
 8010a78:	9b07      	ldr	r3, [sp, #28]
 8010a7a:	425b      	negs	r3, r3
 8010a7c:	454b      	cmp	r3, r9
 8010a7e:	dc01      	bgt.n	8010a84 <_printf_float+0x28c>
 8010a80:	9b08      	ldr	r3, [sp, #32]
 8010a82:	e795      	b.n	80109b0 <_printf_float+0x1b8>
 8010a84:	2301      	movs	r3, #1
 8010a86:	4652      	mov	r2, sl
 8010a88:	4631      	mov	r1, r6
 8010a8a:	4628      	mov	r0, r5
 8010a8c:	47b8      	blx	r7
 8010a8e:	3001      	adds	r0, #1
 8010a90:	f43f af00 	beq.w	8010894 <_printf_float+0x9c>
 8010a94:	f109 0901 	add.w	r9, r9, #1
 8010a98:	e7ee      	b.n	8010a78 <_printf_float+0x280>
 8010a9a:	bf00      	nop
 8010a9c:	f3af 8000 	nop.w
 8010aa0:	ffffffff 	.word	0xffffffff
 8010aa4:	7fefffff 	.word	0x7fefffff
 8010aa8:	0801dc11 	.word	0x0801dc11
 8010aac:	0801dc15 	.word	0x0801dc15
 8010ab0:	0801dc1d 	.word	0x0801dc1d
 8010ab4:	0801dc19 	.word	0x0801dc19
 8010ab8:	0801dc21 	.word	0x0801dc21
 8010abc:	9a08      	ldr	r2, [sp, #32]
 8010abe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	bfa8      	it	ge
 8010ac4:	461a      	movge	r2, r3
 8010ac6:	2a00      	cmp	r2, #0
 8010ac8:	4691      	mov	r9, r2
 8010aca:	dc38      	bgt.n	8010b3e <_printf_float+0x346>
 8010acc:	2300      	movs	r3, #0
 8010ace:	9305      	str	r3, [sp, #20]
 8010ad0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010ad4:	f104 021a 	add.w	r2, r4, #26
 8010ad8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010ada:	9905      	ldr	r1, [sp, #20]
 8010adc:	9304      	str	r3, [sp, #16]
 8010ade:	eba3 0309 	sub.w	r3, r3, r9
 8010ae2:	428b      	cmp	r3, r1
 8010ae4:	dc33      	bgt.n	8010b4e <_printf_float+0x356>
 8010ae6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010aea:	429a      	cmp	r2, r3
 8010aec:	db3c      	blt.n	8010b68 <_printf_float+0x370>
 8010aee:	6823      	ldr	r3, [r4, #0]
 8010af0:	07da      	lsls	r2, r3, #31
 8010af2:	d439      	bmi.n	8010b68 <_printf_float+0x370>
 8010af4:	9a08      	ldr	r2, [sp, #32]
 8010af6:	9b04      	ldr	r3, [sp, #16]
 8010af8:	9907      	ldr	r1, [sp, #28]
 8010afa:	1ad3      	subs	r3, r2, r3
 8010afc:	eba2 0901 	sub.w	r9, r2, r1
 8010b00:	4599      	cmp	r9, r3
 8010b02:	bfa8      	it	ge
 8010b04:	4699      	movge	r9, r3
 8010b06:	f1b9 0f00 	cmp.w	r9, #0
 8010b0a:	dc35      	bgt.n	8010b78 <_printf_float+0x380>
 8010b0c:	f04f 0800 	mov.w	r8, #0
 8010b10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010b14:	f104 0a1a 	add.w	sl, r4, #26
 8010b18:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010b1c:	1a9b      	subs	r3, r3, r2
 8010b1e:	eba3 0309 	sub.w	r3, r3, r9
 8010b22:	4543      	cmp	r3, r8
 8010b24:	f77f af75 	ble.w	8010a12 <_printf_float+0x21a>
 8010b28:	2301      	movs	r3, #1
 8010b2a:	4652      	mov	r2, sl
 8010b2c:	4631      	mov	r1, r6
 8010b2e:	4628      	mov	r0, r5
 8010b30:	47b8      	blx	r7
 8010b32:	3001      	adds	r0, #1
 8010b34:	f43f aeae 	beq.w	8010894 <_printf_float+0x9c>
 8010b38:	f108 0801 	add.w	r8, r8, #1
 8010b3c:	e7ec      	b.n	8010b18 <_printf_float+0x320>
 8010b3e:	4613      	mov	r3, r2
 8010b40:	4631      	mov	r1, r6
 8010b42:	4642      	mov	r2, r8
 8010b44:	4628      	mov	r0, r5
 8010b46:	47b8      	blx	r7
 8010b48:	3001      	adds	r0, #1
 8010b4a:	d1bf      	bne.n	8010acc <_printf_float+0x2d4>
 8010b4c:	e6a2      	b.n	8010894 <_printf_float+0x9c>
 8010b4e:	2301      	movs	r3, #1
 8010b50:	4631      	mov	r1, r6
 8010b52:	4628      	mov	r0, r5
 8010b54:	9204      	str	r2, [sp, #16]
 8010b56:	47b8      	blx	r7
 8010b58:	3001      	adds	r0, #1
 8010b5a:	f43f ae9b 	beq.w	8010894 <_printf_float+0x9c>
 8010b5e:	9b05      	ldr	r3, [sp, #20]
 8010b60:	9a04      	ldr	r2, [sp, #16]
 8010b62:	3301      	adds	r3, #1
 8010b64:	9305      	str	r3, [sp, #20]
 8010b66:	e7b7      	b.n	8010ad8 <_printf_float+0x2e0>
 8010b68:	4653      	mov	r3, sl
 8010b6a:	465a      	mov	r2, fp
 8010b6c:	4631      	mov	r1, r6
 8010b6e:	4628      	mov	r0, r5
 8010b70:	47b8      	blx	r7
 8010b72:	3001      	adds	r0, #1
 8010b74:	d1be      	bne.n	8010af4 <_printf_float+0x2fc>
 8010b76:	e68d      	b.n	8010894 <_printf_float+0x9c>
 8010b78:	9a04      	ldr	r2, [sp, #16]
 8010b7a:	464b      	mov	r3, r9
 8010b7c:	4442      	add	r2, r8
 8010b7e:	4631      	mov	r1, r6
 8010b80:	4628      	mov	r0, r5
 8010b82:	47b8      	blx	r7
 8010b84:	3001      	adds	r0, #1
 8010b86:	d1c1      	bne.n	8010b0c <_printf_float+0x314>
 8010b88:	e684      	b.n	8010894 <_printf_float+0x9c>
 8010b8a:	9a08      	ldr	r2, [sp, #32]
 8010b8c:	2a01      	cmp	r2, #1
 8010b8e:	dc01      	bgt.n	8010b94 <_printf_float+0x39c>
 8010b90:	07db      	lsls	r3, r3, #31
 8010b92:	d537      	bpl.n	8010c04 <_printf_float+0x40c>
 8010b94:	2301      	movs	r3, #1
 8010b96:	4642      	mov	r2, r8
 8010b98:	4631      	mov	r1, r6
 8010b9a:	4628      	mov	r0, r5
 8010b9c:	47b8      	blx	r7
 8010b9e:	3001      	adds	r0, #1
 8010ba0:	f43f ae78 	beq.w	8010894 <_printf_float+0x9c>
 8010ba4:	4653      	mov	r3, sl
 8010ba6:	465a      	mov	r2, fp
 8010ba8:	4631      	mov	r1, r6
 8010baa:	4628      	mov	r0, r5
 8010bac:	47b8      	blx	r7
 8010bae:	3001      	adds	r0, #1
 8010bb0:	f43f ae70 	beq.w	8010894 <_printf_float+0x9c>
 8010bb4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010bb8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bc0:	d01b      	beq.n	8010bfa <_printf_float+0x402>
 8010bc2:	9b08      	ldr	r3, [sp, #32]
 8010bc4:	f108 0201 	add.w	r2, r8, #1
 8010bc8:	3b01      	subs	r3, #1
 8010bca:	4631      	mov	r1, r6
 8010bcc:	4628      	mov	r0, r5
 8010bce:	47b8      	blx	r7
 8010bd0:	3001      	adds	r0, #1
 8010bd2:	d10e      	bne.n	8010bf2 <_printf_float+0x3fa>
 8010bd4:	e65e      	b.n	8010894 <_printf_float+0x9c>
 8010bd6:	2301      	movs	r3, #1
 8010bd8:	464a      	mov	r2, r9
 8010bda:	4631      	mov	r1, r6
 8010bdc:	4628      	mov	r0, r5
 8010bde:	47b8      	blx	r7
 8010be0:	3001      	adds	r0, #1
 8010be2:	f43f ae57 	beq.w	8010894 <_printf_float+0x9c>
 8010be6:	f108 0801 	add.w	r8, r8, #1
 8010bea:	9b08      	ldr	r3, [sp, #32]
 8010bec:	3b01      	subs	r3, #1
 8010bee:	4543      	cmp	r3, r8
 8010bf0:	dcf1      	bgt.n	8010bd6 <_printf_float+0x3de>
 8010bf2:	9b04      	ldr	r3, [sp, #16]
 8010bf4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010bf8:	e6db      	b.n	80109b2 <_printf_float+0x1ba>
 8010bfa:	f04f 0800 	mov.w	r8, #0
 8010bfe:	f104 091a 	add.w	r9, r4, #26
 8010c02:	e7f2      	b.n	8010bea <_printf_float+0x3f2>
 8010c04:	2301      	movs	r3, #1
 8010c06:	4642      	mov	r2, r8
 8010c08:	e7df      	b.n	8010bca <_printf_float+0x3d2>
 8010c0a:	2301      	movs	r3, #1
 8010c0c:	464a      	mov	r2, r9
 8010c0e:	4631      	mov	r1, r6
 8010c10:	4628      	mov	r0, r5
 8010c12:	47b8      	blx	r7
 8010c14:	3001      	adds	r0, #1
 8010c16:	f43f ae3d 	beq.w	8010894 <_printf_float+0x9c>
 8010c1a:	f108 0801 	add.w	r8, r8, #1
 8010c1e:	68e3      	ldr	r3, [r4, #12]
 8010c20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010c22:	1a5b      	subs	r3, r3, r1
 8010c24:	4543      	cmp	r3, r8
 8010c26:	dcf0      	bgt.n	8010c0a <_printf_float+0x412>
 8010c28:	e6f7      	b.n	8010a1a <_printf_float+0x222>
 8010c2a:	f04f 0800 	mov.w	r8, #0
 8010c2e:	f104 0919 	add.w	r9, r4, #25
 8010c32:	e7f4      	b.n	8010c1e <_printf_float+0x426>

08010c34 <_printf_common>:
 8010c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c38:	4616      	mov	r6, r2
 8010c3a:	4699      	mov	r9, r3
 8010c3c:	688a      	ldr	r2, [r1, #8]
 8010c3e:	690b      	ldr	r3, [r1, #16]
 8010c40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010c44:	4293      	cmp	r3, r2
 8010c46:	bfb8      	it	lt
 8010c48:	4613      	movlt	r3, r2
 8010c4a:	6033      	str	r3, [r6, #0]
 8010c4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010c50:	4607      	mov	r7, r0
 8010c52:	460c      	mov	r4, r1
 8010c54:	b10a      	cbz	r2, 8010c5a <_printf_common+0x26>
 8010c56:	3301      	adds	r3, #1
 8010c58:	6033      	str	r3, [r6, #0]
 8010c5a:	6823      	ldr	r3, [r4, #0]
 8010c5c:	0699      	lsls	r1, r3, #26
 8010c5e:	bf42      	ittt	mi
 8010c60:	6833      	ldrmi	r3, [r6, #0]
 8010c62:	3302      	addmi	r3, #2
 8010c64:	6033      	strmi	r3, [r6, #0]
 8010c66:	6825      	ldr	r5, [r4, #0]
 8010c68:	f015 0506 	ands.w	r5, r5, #6
 8010c6c:	d106      	bne.n	8010c7c <_printf_common+0x48>
 8010c6e:	f104 0a19 	add.w	sl, r4, #25
 8010c72:	68e3      	ldr	r3, [r4, #12]
 8010c74:	6832      	ldr	r2, [r6, #0]
 8010c76:	1a9b      	subs	r3, r3, r2
 8010c78:	42ab      	cmp	r3, r5
 8010c7a:	dc26      	bgt.n	8010cca <_printf_common+0x96>
 8010c7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010c80:	1e13      	subs	r3, r2, #0
 8010c82:	6822      	ldr	r2, [r4, #0]
 8010c84:	bf18      	it	ne
 8010c86:	2301      	movne	r3, #1
 8010c88:	0692      	lsls	r2, r2, #26
 8010c8a:	d42b      	bmi.n	8010ce4 <_printf_common+0xb0>
 8010c8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010c90:	4649      	mov	r1, r9
 8010c92:	4638      	mov	r0, r7
 8010c94:	47c0      	blx	r8
 8010c96:	3001      	adds	r0, #1
 8010c98:	d01e      	beq.n	8010cd8 <_printf_common+0xa4>
 8010c9a:	6823      	ldr	r3, [r4, #0]
 8010c9c:	68e5      	ldr	r5, [r4, #12]
 8010c9e:	6832      	ldr	r2, [r6, #0]
 8010ca0:	f003 0306 	and.w	r3, r3, #6
 8010ca4:	2b04      	cmp	r3, #4
 8010ca6:	bf08      	it	eq
 8010ca8:	1aad      	subeq	r5, r5, r2
 8010caa:	68a3      	ldr	r3, [r4, #8]
 8010cac:	6922      	ldr	r2, [r4, #16]
 8010cae:	bf0c      	ite	eq
 8010cb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010cb4:	2500      	movne	r5, #0
 8010cb6:	4293      	cmp	r3, r2
 8010cb8:	bfc4      	itt	gt
 8010cba:	1a9b      	subgt	r3, r3, r2
 8010cbc:	18ed      	addgt	r5, r5, r3
 8010cbe:	2600      	movs	r6, #0
 8010cc0:	341a      	adds	r4, #26
 8010cc2:	42b5      	cmp	r5, r6
 8010cc4:	d11a      	bne.n	8010cfc <_printf_common+0xc8>
 8010cc6:	2000      	movs	r0, #0
 8010cc8:	e008      	b.n	8010cdc <_printf_common+0xa8>
 8010cca:	2301      	movs	r3, #1
 8010ccc:	4652      	mov	r2, sl
 8010cce:	4649      	mov	r1, r9
 8010cd0:	4638      	mov	r0, r7
 8010cd2:	47c0      	blx	r8
 8010cd4:	3001      	adds	r0, #1
 8010cd6:	d103      	bne.n	8010ce0 <_printf_common+0xac>
 8010cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8010cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ce0:	3501      	adds	r5, #1
 8010ce2:	e7c6      	b.n	8010c72 <_printf_common+0x3e>
 8010ce4:	18e1      	adds	r1, r4, r3
 8010ce6:	1c5a      	adds	r2, r3, #1
 8010ce8:	2030      	movs	r0, #48	; 0x30
 8010cea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010cee:	4422      	add	r2, r4
 8010cf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010cf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010cf8:	3302      	adds	r3, #2
 8010cfa:	e7c7      	b.n	8010c8c <_printf_common+0x58>
 8010cfc:	2301      	movs	r3, #1
 8010cfe:	4622      	mov	r2, r4
 8010d00:	4649      	mov	r1, r9
 8010d02:	4638      	mov	r0, r7
 8010d04:	47c0      	blx	r8
 8010d06:	3001      	adds	r0, #1
 8010d08:	d0e6      	beq.n	8010cd8 <_printf_common+0xa4>
 8010d0a:	3601      	adds	r6, #1
 8010d0c:	e7d9      	b.n	8010cc2 <_printf_common+0x8e>
	...

08010d10 <_printf_i>:
 8010d10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010d14:	460c      	mov	r4, r1
 8010d16:	4691      	mov	r9, r2
 8010d18:	7e27      	ldrb	r7, [r4, #24]
 8010d1a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010d1c:	2f78      	cmp	r7, #120	; 0x78
 8010d1e:	4680      	mov	r8, r0
 8010d20:	469a      	mov	sl, r3
 8010d22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010d26:	d807      	bhi.n	8010d38 <_printf_i+0x28>
 8010d28:	2f62      	cmp	r7, #98	; 0x62
 8010d2a:	d80a      	bhi.n	8010d42 <_printf_i+0x32>
 8010d2c:	2f00      	cmp	r7, #0
 8010d2e:	f000 80d8 	beq.w	8010ee2 <_printf_i+0x1d2>
 8010d32:	2f58      	cmp	r7, #88	; 0x58
 8010d34:	f000 80a3 	beq.w	8010e7e <_printf_i+0x16e>
 8010d38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010d3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010d40:	e03a      	b.n	8010db8 <_printf_i+0xa8>
 8010d42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010d46:	2b15      	cmp	r3, #21
 8010d48:	d8f6      	bhi.n	8010d38 <_printf_i+0x28>
 8010d4a:	a001      	add	r0, pc, #4	; (adr r0, 8010d50 <_printf_i+0x40>)
 8010d4c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010d50:	08010da9 	.word	0x08010da9
 8010d54:	08010dbd 	.word	0x08010dbd
 8010d58:	08010d39 	.word	0x08010d39
 8010d5c:	08010d39 	.word	0x08010d39
 8010d60:	08010d39 	.word	0x08010d39
 8010d64:	08010d39 	.word	0x08010d39
 8010d68:	08010dbd 	.word	0x08010dbd
 8010d6c:	08010d39 	.word	0x08010d39
 8010d70:	08010d39 	.word	0x08010d39
 8010d74:	08010d39 	.word	0x08010d39
 8010d78:	08010d39 	.word	0x08010d39
 8010d7c:	08010ec9 	.word	0x08010ec9
 8010d80:	08010ded 	.word	0x08010ded
 8010d84:	08010eab 	.word	0x08010eab
 8010d88:	08010d39 	.word	0x08010d39
 8010d8c:	08010d39 	.word	0x08010d39
 8010d90:	08010eeb 	.word	0x08010eeb
 8010d94:	08010d39 	.word	0x08010d39
 8010d98:	08010ded 	.word	0x08010ded
 8010d9c:	08010d39 	.word	0x08010d39
 8010da0:	08010d39 	.word	0x08010d39
 8010da4:	08010eb3 	.word	0x08010eb3
 8010da8:	680b      	ldr	r3, [r1, #0]
 8010daa:	1d1a      	adds	r2, r3, #4
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	600a      	str	r2, [r1, #0]
 8010db0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010db4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010db8:	2301      	movs	r3, #1
 8010dba:	e0a3      	b.n	8010f04 <_printf_i+0x1f4>
 8010dbc:	6825      	ldr	r5, [r4, #0]
 8010dbe:	6808      	ldr	r0, [r1, #0]
 8010dc0:	062e      	lsls	r6, r5, #24
 8010dc2:	f100 0304 	add.w	r3, r0, #4
 8010dc6:	d50a      	bpl.n	8010dde <_printf_i+0xce>
 8010dc8:	6805      	ldr	r5, [r0, #0]
 8010dca:	600b      	str	r3, [r1, #0]
 8010dcc:	2d00      	cmp	r5, #0
 8010dce:	da03      	bge.n	8010dd8 <_printf_i+0xc8>
 8010dd0:	232d      	movs	r3, #45	; 0x2d
 8010dd2:	426d      	negs	r5, r5
 8010dd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010dd8:	485e      	ldr	r0, [pc, #376]	; (8010f54 <_printf_i+0x244>)
 8010dda:	230a      	movs	r3, #10
 8010ddc:	e019      	b.n	8010e12 <_printf_i+0x102>
 8010dde:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010de2:	6805      	ldr	r5, [r0, #0]
 8010de4:	600b      	str	r3, [r1, #0]
 8010de6:	bf18      	it	ne
 8010de8:	b22d      	sxthne	r5, r5
 8010dea:	e7ef      	b.n	8010dcc <_printf_i+0xbc>
 8010dec:	680b      	ldr	r3, [r1, #0]
 8010dee:	6825      	ldr	r5, [r4, #0]
 8010df0:	1d18      	adds	r0, r3, #4
 8010df2:	6008      	str	r0, [r1, #0]
 8010df4:	0628      	lsls	r0, r5, #24
 8010df6:	d501      	bpl.n	8010dfc <_printf_i+0xec>
 8010df8:	681d      	ldr	r5, [r3, #0]
 8010dfa:	e002      	b.n	8010e02 <_printf_i+0xf2>
 8010dfc:	0669      	lsls	r1, r5, #25
 8010dfe:	d5fb      	bpl.n	8010df8 <_printf_i+0xe8>
 8010e00:	881d      	ldrh	r5, [r3, #0]
 8010e02:	4854      	ldr	r0, [pc, #336]	; (8010f54 <_printf_i+0x244>)
 8010e04:	2f6f      	cmp	r7, #111	; 0x6f
 8010e06:	bf0c      	ite	eq
 8010e08:	2308      	moveq	r3, #8
 8010e0a:	230a      	movne	r3, #10
 8010e0c:	2100      	movs	r1, #0
 8010e0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010e12:	6866      	ldr	r6, [r4, #4]
 8010e14:	60a6      	str	r6, [r4, #8]
 8010e16:	2e00      	cmp	r6, #0
 8010e18:	bfa2      	ittt	ge
 8010e1a:	6821      	ldrge	r1, [r4, #0]
 8010e1c:	f021 0104 	bicge.w	r1, r1, #4
 8010e20:	6021      	strge	r1, [r4, #0]
 8010e22:	b90d      	cbnz	r5, 8010e28 <_printf_i+0x118>
 8010e24:	2e00      	cmp	r6, #0
 8010e26:	d04d      	beq.n	8010ec4 <_printf_i+0x1b4>
 8010e28:	4616      	mov	r6, r2
 8010e2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8010e2e:	fb03 5711 	mls	r7, r3, r1, r5
 8010e32:	5dc7      	ldrb	r7, [r0, r7]
 8010e34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010e38:	462f      	mov	r7, r5
 8010e3a:	42bb      	cmp	r3, r7
 8010e3c:	460d      	mov	r5, r1
 8010e3e:	d9f4      	bls.n	8010e2a <_printf_i+0x11a>
 8010e40:	2b08      	cmp	r3, #8
 8010e42:	d10b      	bne.n	8010e5c <_printf_i+0x14c>
 8010e44:	6823      	ldr	r3, [r4, #0]
 8010e46:	07df      	lsls	r7, r3, #31
 8010e48:	d508      	bpl.n	8010e5c <_printf_i+0x14c>
 8010e4a:	6923      	ldr	r3, [r4, #16]
 8010e4c:	6861      	ldr	r1, [r4, #4]
 8010e4e:	4299      	cmp	r1, r3
 8010e50:	bfde      	ittt	le
 8010e52:	2330      	movle	r3, #48	; 0x30
 8010e54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010e58:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010e5c:	1b92      	subs	r2, r2, r6
 8010e5e:	6122      	str	r2, [r4, #16]
 8010e60:	f8cd a000 	str.w	sl, [sp]
 8010e64:	464b      	mov	r3, r9
 8010e66:	aa03      	add	r2, sp, #12
 8010e68:	4621      	mov	r1, r4
 8010e6a:	4640      	mov	r0, r8
 8010e6c:	f7ff fee2 	bl	8010c34 <_printf_common>
 8010e70:	3001      	adds	r0, #1
 8010e72:	d14c      	bne.n	8010f0e <_printf_i+0x1fe>
 8010e74:	f04f 30ff 	mov.w	r0, #4294967295
 8010e78:	b004      	add	sp, #16
 8010e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e7e:	4835      	ldr	r0, [pc, #212]	; (8010f54 <_printf_i+0x244>)
 8010e80:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010e84:	6823      	ldr	r3, [r4, #0]
 8010e86:	680e      	ldr	r6, [r1, #0]
 8010e88:	061f      	lsls	r7, r3, #24
 8010e8a:	f856 5b04 	ldr.w	r5, [r6], #4
 8010e8e:	600e      	str	r6, [r1, #0]
 8010e90:	d514      	bpl.n	8010ebc <_printf_i+0x1ac>
 8010e92:	07d9      	lsls	r1, r3, #31
 8010e94:	bf44      	itt	mi
 8010e96:	f043 0320 	orrmi.w	r3, r3, #32
 8010e9a:	6023      	strmi	r3, [r4, #0]
 8010e9c:	b91d      	cbnz	r5, 8010ea6 <_printf_i+0x196>
 8010e9e:	6823      	ldr	r3, [r4, #0]
 8010ea0:	f023 0320 	bic.w	r3, r3, #32
 8010ea4:	6023      	str	r3, [r4, #0]
 8010ea6:	2310      	movs	r3, #16
 8010ea8:	e7b0      	b.n	8010e0c <_printf_i+0xfc>
 8010eaa:	6823      	ldr	r3, [r4, #0]
 8010eac:	f043 0320 	orr.w	r3, r3, #32
 8010eb0:	6023      	str	r3, [r4, #0]
 8010eb2:	2378      	movs	r3, #120	; 0x78
 8010eb4:	4828      	ldr	r0, [pc, #160]	; (8010f58 <_printf_i+0x248>)
 8010eb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010eba:	e7e3      	b.n	8010e84 <_printf_i+0x174>
 8010ebc:	065e      	lsls	r6, r3, #25
 8010ebe:	bf48      	it	mi
 8010ec0:	b2ad      	uxthmi	r5, r5
 8010ec2:	e7e6      	b.n	8010e92 <_printf_i+0x182>
 8010ec4:	4616      	mov	r6, r2
 8010ec6:	e7bb      	b.n	8010e40 <_printf_i+0x130>
 8010ec8:	680b      	ldr	r3, [r1, #0]
 8010eca:	6826      	ldr	r6, [r4, #0]
 8010ecc:	6960      	ldr	r0, [r4, #20]
 8010ece:	1d1d      	adds	r5, r3, #4
 8010ed0:	600d      	str	r5, [r1, #0]
 8010ed2:	0635      	lsls	r5, r6, #24
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	d501      	bpl.n	8010edc <_printf_i+0x1cc>
 8010ed8:	6018      	str	r0, [r3, #0]
 8010eda:	e002      	b.n	8010ee2 <_printf_i+0x1d2>
 8010edc:	0671      	lsls	r1, r6, #25
 8010ede:	d5fb      	bpl.n	8010ed8 <_printf_i+0x1c8>
 8010ee0:	8018      	strh	r0, [r3, #0]
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	6123      	str	r3, [r4, #16]
 8010ee6:	4616      	mov	r6, r2
 8010ee8:	e7ba      	b.n	8010e60 <_printf_i+0x150>
 8010eea:	680b      	ldr	r3, [r1, #0]
 8010eec:	1d1a      	adds	r2, r3, #4
 8010eee:	600a      	str	r2, [r1, #0]
 8010ef0:	681e      	ldr	r6, [r3, #0]
 8010ef2:	6862      	ldr	r2, [r4, #4]
 8010ef4:	2100      	movs	r1, #0
 8010ef6:	4630      	mov	r0, r6
 8010ef8:	f7ef fa0a 	bl	8000310 <memchr>
 8010efc:	b108      	cbz	r0, 8010f02 <_printf_i+0x1f2>
 8010efe:	1b80      	subs	r0, r0, r6
 8010f00:	6060      	str	r0, [r4, #4]
 8010f02:	6863      	ldr	r3, [r4, #4]
 8010f04:	6123      	str	r3, [r4, #16]
 8010f06:	2300      	movs	r3, #0
 8010f08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f0c:	e7a8      	b.n	8010e60 <_printf_i+0x150>
 8010f0e:	6923      	ldr	r3, [r4, #16]
 8010f10:	4632      	mov	r2, r6
 8010f12:	4649      	mov	r1, r9
 8010f14:	4640      	mov	r0, r8
 8010f16:	47d0      	blx	sl
 8010f18:	3001      	adds	r0, #1
 8010f1a:	d0ab      	beq.n	8010e74 <_printf_i+0x164>
 8010f1c:	6823      	ldr	r3, [r4, #0]
 8010f1e:	079b      	lsls	r3, r3, #30
 8010f20:	d413      	bmi.n	8010f4a <_printf_i+0x23a>
 8010f22:	68e0      	ldr	r0, [r4, #12]
 8010f24:	9b03      	ldr	r3, [sp, #12]
 8010f26:	4298      	cmp	r0, r3
 8010f28:	bfb8      	it	lt
 8010f2a:	4618      	movlt	r0, r3
 8010f2c:	e7a4      	b.n	8010e78 <_printf_i+0x168>
 8010f2e:	2301      	movs	r3, #1
 8010f30:	4632      	mov	r2, r6
 8010f32:	4649      	mov	r1, r9
 8010f34:	4640      	mov	r0, r8
 8010f36:	47d0      	blx	sl
 8010f38:	3001      	adds	r0, #1
 8010f3a:	d09b      	beq.n	8010e74 <_printf_i+0x164>
 8010f3c:	3501      	adds	r5, #1
 8010f3e:	68e3      	ldr	r3, [r4, #12]
 8010f40:	9903      	ldr	r1, [sp, #12]
 8010f42:	1a5b      	subs	r3, r3, r1
 8010f44:	42ab      	cmp	r3, r5
 8010f46:	dcf2      	bgt.n	8010f2e <_printf_i+0x21e>
 8010f48:	e7eb      	b.n	8010f22 <_printf_i+0x212>
 8010f4a:	2500      	movs	r5, #0
 8010f4c:	f104 0619 	add.w	r6, r4, #25
 8010f50:	e7f5      	b.n	8010f3e <_printf_i+0x22e>
 8010f52:	bf00      	nop
 8010f54:	0801dc23 	.word	0x0801dc23
 8010f58:	0801dc34 	.word	0x0801dc34

08010f5c <_scanf_float>:
 8010f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f60:	b087      	sub	sp, #28
 8010f62:	4617      	mov	r7, r2
 8010f64:	9303      	str	r3, [sp, #12]
 8010f66:	688b      	ldr	r3, [r1, #8]
 8010f68:	1e5a      	subs	r2, r3, #1
 8010f6a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010f6e:	bf83      	ittte	hi
 8010f70:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010f74:	195b      	addhi	r3, r3, r5
 8010f76:	9302      	strhi	r3, [sp, #8]
 8010f78:	2300      	movls	r3, #0
 8010f7a:	bf86      	itte	hi
 8010f7c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010f80:	608b      	strhi	r3, [r1, #8]
 8010f82:	9302      	strls	r3, [sp, #8]
 8010f84:	680b      	ldr	r3, [r1, #0]
 8010f86:	468b      	mov	fp, r1
 8010f88:	2500      	movs	r5, #0
 8010f8a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010f8e:	f84b 3b1c 	str.w	r3, [fp], #28
 8010f92:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010f96:	4680      	mov	r8, r0
 8010f98:	460c      	mov	r4, r1
 8010f9a:	465e      	mov	r6, fp
 8010f9c:	46aa      	mov	sl, r5
 8010f9e:	46a9      	mov	r9, r5
 8010fa0:	9501      	str	r5, [sp, #4]
 8010fa2:	68a2      	ldr	r2, [r4, #8]
 8010fa4:	b152      	cbz	r2, 8010fbc <_scanf_float+0x60>
 8010fa6:	683b      	ldr	r3, [r7, #0]
 8010fa8:	781b      	ldrb	r3, [r3, #0]
 8010faa:	2b4e      	cmp	r3, #78	; 0x4e
 8010fac:	d864      	bhi.n	8011078 <_scanf_float+0x11c>
 8010fae:	2b40      	cmp	r3, #64	; 0x40
 8010fb0:	d83c      	bhi.n	801102c <_scanf_float+0xd0>
 8010fb2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8010fb6:	b2c8      	uxtb	r0, r1
 8010fb8:	280e      	cmp	r0, #14
 8010fba:	d93a      	bls.n	8011032 <_scanf_float+0xd6>
 8010fbc:	f1b9 0f00 	cmp.w	r9, #0
 8010fc0:	d003      	beq.n	8010fca <_scanf_float+0x6e>
 8010fc2:	6823      	ldr	r3, [r4, #0]
 8010fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010fc8:	6023      	str	r3, [r4, #0]
 8010fca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010fce:	f1ba 0f01 	cmp.w	sl, #1
 8010fd2:	f200 8113 	bhi.w	80111fc <_scanf_float+0x2a0>
 8010fd6:	455e      	cmp	r6, fp
 8010fd8:	f200 8105 	bhi.w	80111e6 <_scanf_float+0x28a>
 8010fdc:	2501      	movs	r5, #1
 8010fde:	4628      	mov	r0, r5
 8010fe0:	b007      	add	sp, #28
 8010fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fe6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8010fea:	2a0d      	cmp	r2, #13
 8010fec:	d8e6      	bhi.n	8010fbc <_scanf_float+0x60>
 8010fee:	a101      	add	r1, pc, #4	; (adr r1, 8010ff4 <_scanf_float+0x98>)
 8010ff0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010ff4:	08011133 	.word	0x08011133
 8010ff8:	08010fbd 	.word	0x08010fbd
 8010ffc:	08010fbd 	.word	0x08010fbd
 8011000:	08010fbd 	.word	0x08010fbd
 8011004:	08011193 	.word	0x08011193
 8011008:	0801116b 	.word	0x0801116b
 801100c:	08010fbd 	.word	0x08010fbd
 8011010:	08010fbd 	.word	0x08010fbd
 8011014:	08011141 	.word	0x08011141
 8011018:	08010fbd 	.word	0x08010fbd
 801101c:	08010fbd 	.word	0x08010fbd
 8011020:	08010fbd 	.word	0x08010fbd
 8011024:	08010fbd 	.word	0x08010fbd
 8011028:	080110f9 	.word	0x080110f9
 801102c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011030:	e7db      	b.n	8010fea <_scanf_float+0x8e>
 8011032:	290e      	cmp	r1, #14
 8011034:	d8c2      	bhi.n	8010fbc <_scanf_float+0x60>
 8011036:	a001      	add	r0, pc, #4	; (adr r0, 801103c <_scanf_float+0xe0>)
 8011038:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801103c:	080110eb 	.word	0x080110eb
 8011040:	08010fbd 	.word	0x08010fbd
 8011044:	080110eb 	.word	0x080110eb
 8011048:	0801117f 	.word	0x0801117f
 801104c:	08010fbd 	.word	0x08010fbd
 8011050:	08011099 	.word	0x08011099
 8011054:	080110d5 	.word	0x080110d5
 8011058:	080110d5 	.word	0x080110d5
 801105c:	080110d5 	.word	0x080110d5
 8011060:	080110d5 	.word	0x080110d5
 8011064:	080110d5 	.word	0x080110d5
 8011068:	080110d5 	.word	0x080110d5
 801106c:	080110d5 	.word	0x080110d5
 8011070:	080110d5 	.word	0x080110d5
 8011074:	080110d5 	.word	0x080110d5
 8011078:	2b6e      	cmp	r3, #110	; 0x6e
 801107a:	d809      	bhi.n	8011090 <_scanf_float+0x134>
 801107c:	2b60      	cmp	r3, #96	; 0x60
 801107e:	d8b2      	bhi.n	8010fe6 <_scanf_float+0x8a>
 8011080:	2b54      	cmp	r3, #84	; 0x54
 8011082:	d077      	beq.n	8011174 <_scanf_float+0x218>
 8011084:	2b59      	cmp	r3, #89	; 0x59
 8011086:	d199      	bne.n	8010fbc <_scanf_float+0x60>
 8011088:	2d07      	cmp	r5, #7
 801108a:	d197      	bne.n	8010fbc <_scanf_float+0x60>
 801108c:	2508      	movs	r5, #8
 801108e:	e029      	b.n	80110e4 <_scanf_float+0x188>
 8011090:	2b74      	cmp	r3, #116	; 0x74
 8011092:	d06f      	beq.n	8011174 <_scanf_float+0x218>
 8011094:	2b79      	cmp	r3, #121	; 0x79
 8011096:	e7f6      	b.n	8011086 <_scanf_float+0x12a>
 8011098:	6821      	ldr	r1, [r4, #0]
 801109a:	05c8      	lsls	r0, r1, #23
 801109c:	d51a      	bpl.n	80110d4 <_scanf_float+0x178>
 801109e:	9b02      	ldr	r3, [sp, #8]
 80110a0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80110a4:	6021      	str	r1, [r4, #0]
 80110a6:	f109 0901 	add.w	r9, r9, #1
 80110aa:	b11b      	cbz	r3, 80110b4 <_scanf_float+0x158>
 80110ac:	3b01      	subs	r3, #1
 80110ae:	3201      	adds	r2, #1
 80110b0:	9302      	str	r3, [sp, #8]
 80110b2:	60a2      	str	r2, [r4, #8]
 80110b4:	68a3      	ldr	r3, [r4, #8]
 80110b6:	3b01      	subs	r3, #1
 80110b8:	60a3      	str	r3, [r4, #8]
 80110ba:	6923      	ldr	r3, [r4, #16]
 80110bc:	3301      	adds	r3, #1
 80110be:	6123      	str	r3, [r4, #16]
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	3b01      	subs	r3, #1
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	607b      	str	r3, [r7, #4]
 80110c8:	f340 8084 	ble.w	80111d4 <_scanf_float+0x278>
 80110cc:	683b      	ldr	r3, [r7, #0]
 80110ce:	3301      	adds	r3, #1
 80110d0:	603b      	str	r3, [r7, #0]
 80110d2:	e766      	b.n	8010fa2 <_scanf_float+0x46>
 80110d4:	eb1a 0f05 	cmn.w	sl, r5
 80110d8:	f47f af70 	bne.w	8010fbc <_scanf_float+0x60>
 80110dc:	6822      	ldr	r2, [r4, #0]
 80110de:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80110e2:	6022      	str	r2, [r4, #0]
 80110e4:	f806 3b01 	strb.w	r3, [r6], #1
 80110e8:	e7e4      	b.n	80110b4 <_scanf_float+0x158>
 80110ea:	6822      	ldr	r2, [r4, #0]
 80110ec:	0610      	lsls	r0, r2, #24
 80110ee:	f57f af65 	bpl.w	8010fbc <_scanf_float+0x60>
 80110f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80110f6:	e7f4      	b.n	80110e2 <_scanf_float+0x186>
 80110f8:	f1ba 0f00 	cmp.w	sl, #0
 80110fc:	d10e      	bne.n	801111c <_scanf_float+0x1c0>
 80110fe:	f1b9 0f00 	cmp.w	r9, #0
 8011102:	d10e      	bne.n	8011122 <_scanf_float+0x1c6>
 8011104:	6822      	ldr	r2, [r4, #0]
 8011106:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801110a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801110e:	d108      	bne.n	8011122 <_scanf_float+0x1c6>
 8011110:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011114:	6022      	str	r2, [r4, #0]
 8011116:	f04f 0a01 	mov.w	sl, #1
 801111a:	e7e3      	b.n	80110e4 <_scanf_float+0x188>
 801111c:	f1ba 0f02 	cmp.w	sl, #2
 8011120:	d055      	beq.n	80111ce <_scanf_float+0x272>
 8011122:	2d01      	cmp	r5, #1
 8011124:	d002      	beq.n	801112c <_scanf_float+0x1d0>
 8011126:	2d04      	cmp	r5, #4
 8011128:	f47f af48 	bne.w	8010fbc <_scanf_float+0x60>
 801112c:	3501      	adds	r5, #1
 801112e:	b2ed      	uxtb	r5, r5
 8011130:	e7d8      	b.n	80110e4 <_scanf_float+0x188>
 8011132:	f1ba 0f01 	cmp.w	sl, #1
 8011136:	f47f af41 	bne.w	8010fbc <_scanf_float+0x60>
 801113a:	f04f 0a02 	mov.w	sl, #2
 801113e:	e7d1      	b.n	80110e4 <_scanf_float+0x188>
 8011140:	b97d      	cbnz	r5, 8011162 <_scanf_float+0x206>
 8011142:	f1b9 0f00 	cmp.w	r9, #0
 8011146:	f47f af3c 	bne.w	8010fc2 <_scanf_float+0x66>
 801114a:	6822      	ldr	r2, [r4, #0]
 801114c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011150:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011154:	f47f af39 	bne.w	8010fca <_scanf_float+0x6e>
 8011158:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801115c:	6022      	str	r2, [r4, #0]
 801115e:	2501      	movs	r5, #1
 8011160:	e7c0      	b.n	80110e4 <_scanf_float+0x188>
 8011162:	2d03      	cmp	r5, #3
 8011164:	d0e2      	beq.n	801112c <_scanf_float+0x1d0>
 8011166:	2d05      	cmp	r5, #5
 8011168:	e7de      	b.n	8011128 <_scanf_float+0x1cc>
 801116a:	2d02      	cmp	r5, #2
 801116c:	f47f af26 	bne.w	8010fbc <_scanf_float+0x60>
 8011170:	2503      	movs	r5, #3
 8011172:	e7b7      	b.n	80110e4 <_scanf_float+0x188>
 8011174:	2d06      	cmp	r5, #6
 8011176:	f47f af21 	bne.w	8010fbc <_scanf_float+0x60>
 801117a:	2507      	movs	r5, #7
 801117c:	e7b2      	b.n	80110e4 <_scanf_float+0x188>
 801117e:	6822      	ldr	r2, [r4, #0]
 8011180:	0591      	lsls	r1, r2, #22
 8011182:	f57f af1b 	bpl.w	8010fbc <_scanf_float+0x60>
 8011186:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801118a:	6022      	str	r2, [r4, #0]
 801118c:	f8cd 9004 	str.w	r9, [sp, #4]
 8011190:	e7a8      	b.n	80110e4 <_scanf_float+0x188>
 8011192:	6822      	ldr	r2, [r4, #0]
 8011194:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8011198:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801119c:	d006      	beq.n	80111ac <_scanf_float+0x250>
 801119e:	0550      	lsls	r0, r2, #21
 80111a0:	f57f af0c 	bpl.w	8010fbc <_scanf_float+0x60>
 80111a4:	f1b9 0f00 	cmp.w	r9, #0
 80111a8:	f43f af0f 	beq.w	8010fca <_scanf_float+0x6e>
 80111ac:	0591      	lsls	r1, r2, #22
 80111ae:	bf58      	it	pl
 80111b0:	9901      	ldrpl	r1, [sp, #4]
 80111b2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80111b6:	bf58      	it	pl
 80111b8:	eba9 0101 	subpl.w	r1, r9, r1
 80111bc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80111c0:	bf58      	it	pl
 80111c2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80111c6:	6022      	str	r2, [r4, #0]
 80111c8:	f04f 0900 	mov.w	r9, #0
 80111cc:	e78a      	b.n	80110e4 <_scanf_float+0x188>
 80111ce:	f04f 0a03 	mov.w	sl, #3
 80111d2:	e787      	b.n	80110e4 <_scanf_float+0x188>
 80111d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80111d8:	4639      	mov	r1, r7
 80111da:	4640      	mov	r0, r8
 80111dc:	4798      	blx	r3
 80111de:	2800      	cmp	r0, #0
 80111e0:	f43f aedf 	beq.w	8010fa2 <_scanf_float+0x46>
 80111e4:	e6ea      	b.n	8010fbc <_scanf_float+0x60>
 80111e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80111ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80111ee:	463a      	mov	r2, r7
 80111f0:	4640      	mov	r0, r8
 80111f2:	4798      	blx	r3
 80111f4:	6923      	ldr	r3, [r4, #16]
 80111f6:	3b01      	subs	r3, #1
 80111f8:	6123      	str	r3, [r4, #16]
 80111fa:	e6ec      	b.n	8010fd6 <_scanf_float+0x7a>
 80111fc:	1e6b      	subs	r3, r5, #1
 80111fe:	2b06      	cmp	r3, #6
 8011200:	d825      	bhi.n	801124e <_scanf_float+0x2f2>
 8011202:	2d02      	cmp	r5, #2
 8011204:	d836      	bhi.n	8011274 <_scanf_float+0x318>
 8011206:	455e      	cmp	r6, fp
 8011208:	f67f aee8 	bls.w	8010fdc <_scanf_float+0x80>
 801120c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011210:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011214:	463a      	mov	r2, r7
 8011216:	4640      	mov	r0, r8
 8011218:	4798      	blx	r3
 801121a:	6923      	ldr	r3, [r4, #16]
 801121c:	3b01      	subs	r3, #1
 801121e:	6123      	str	r3, [r4, #16]
 8011220:	e7f1      	b.n	8011206 <_scanf_float+0x2aa>
 8011222:	9802      	ldr	r0, [sp, #8]
 8011224:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011228:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801122c:	9002      	str	r0, [sp, #8]
 801122e:	463a      	mov	r2, r7
 8011230:	4640      	mov	r0, r8
 8011232:	4798      	blx	r3
 8011234:	6923      	ldr	r3, [r4, #16]
 8011236:	3b01      	subs	r3, #1
 8011238:	6123      	str	r3, [r4, #16]
 801123a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801123e:	fa5f fa8a 	uxtb.w	sl, sl
 8011242:	f1ba 0f02 	cmp.w	sl, #2
 8011246:	d1ec      	bne.n	8011222 <_scanf_float+0x2c6>
 8011248:	3d03      	subs	r5, #3
 801124a:	b2ed      	uxtb	r5, r5
 801124c:	1b76      	subs	r6, r6, r5
 801124e:	6823      	ldr	r3, [r4, #0]
 8011250:	05da      	lsls	r2, r3, #23
 8011252:	d52f      	bpl.n	80112b4 <_scanf_float+0x358>
 8011254:	055b      	lsls	r3, r3, #21
 8011256:	d510      	bpl.n	801127a <_scanf_float+0x31e>
 8011258:	455e      	cmp	r6, fp
 801125a:	f67f aebf 	bls.w	8010fdc <_scanf_float+0x80>
 801125e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011262:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011266:	463a      	mov	r2, r7
 8011268:	4640      	mov	r0, r8
 801126a:	4798      	blx	r3
 801126c:	6923      	ldr	r3, [r4, #16]
 801126e:	3b01      	subs	r3, #1
 8011270:	6123      	str	r3, [r4, #16]
 8011272:	e7f1      	b.n	8011258 <_scanf_float+0x2fc>
 8011274:	46aa      	mov	sl, r5
 8011276:	9602      	str	r6, [sp, #8]
 8011278:	e7df      	b.n	801123a <_scanf_float+0x2de>
 801127a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801127e:	6923      	ldr	r3, [r4, #16]
 8011280:	2965      	cmp	r1, #101	; 0x65
 8011282:	f103 33ff 	add.w	r3, r3, #4294967295
 8011286:	f106 35ff 	add.w	r5, r6, #4294967295
 801128a:	6123      	str	r3, [r4, #16]
 801128c:	d00c      	beq.n	80112a8 <_scanf_float+0x34c>
 801128e:	2945      	cmp	r1, #69	; 0x45
 8011290:	d00a      	beq.n	80112a8 <_scanf_float+0x34c>
 8011292:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011296:	463a      	mov	r2, r7
 8011298:	4640      	mov	r0, r8
 801129a:	4798      	blx	r3
 801129c:	6923      	ldr	r3, [r4, #16]
 801129e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80112a2:	3b01      	subs	r3, #1
 80112a4:	1eb5      	subs	r5, r6, #2
 80112a6:	6123      	str	r3, [r4, #16]
 80112a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80112ac:	463a      	mov	r2, r7
 80112ae:	4640      	mov	r0, r8
 80112b0:	4798      	blx	r3
 80112b2:	462e      	mov	r6, r5
 80112b4:	6825      	ldr	r5, [r4, #0]
 80112b6:	f015 0510 	ands.w	r5, r5, #16
 80112ba:	d14d      	bne.n	8011358 <_scanf_float+0x3fc>
 80112bc:	7035      	strb	r5, [r6, #0]
 80112be:	6823      	ldr	r3, [r4, #0]
 80112c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80112c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80112c8:	d11a      	bne.n	8011300 <_scanf_float+0x3a4>
 80112ca:	9b01      	ldr	r3, [sp, #4]
 80112cc:	454b      	cmp	r3, r9
 80112ce:	eba3 0209 	sub.w	r2, r3, r9
 80112d2:	d122      	bne.n	801131a <_scanf_float+0x3be>
 80112d4:	2200      	movs	r2, #0
 80112d6:	4659      	mov	r1, fp
 80112d8:	4640      	mov	r0, r8
 80112da:	f000 ff53 	bl	8012184 <_strtod_r>
 80112de:	9b03      	ldr	r3, [sp, #12]
 80112e0:	6821      	ldr	r1, [r4, #0]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	f011 0f02 	tst.w	r1, #2
 80112e8:	f103 0204 	add.w	r2, r3, #4
 80112ec:	d020      	beq.n	8011330 <_scanf_float+0x3d4>
 80112ee:	9903      	ldr	r1, [sp, #12]
 80112f0:	600a      	str	r2, [r1, #0]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	ed83 0b00 	vstr	d0, [r3]
 80112f8:	68e3      	ldr	r3, [r4, #12]
 80112fa:	3301      	adds	r3, #1
 80112fc:	60e3      	str	r3, [r4, #12]
 80112fe:	e66e      	b.n	8010fde <_scanf_float+0x82>
 8011300:	9b04      	ldr	r3, [sp, #16]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d0e6      	beq.n	80112d4 <_scanf_float+0x378>
 8011306:	9905      	ldr	r1, [sp, #20]
 8011308:	230a      	movs	r3, #10
 801130a:	462a      	mov	r2, r5
 801130c:	3101      	adds	r1, #1
 801130e:	4640      	mov	r0, r8
 8011310:	f000 ffc2 	bl	8012298 <_strtol_r>
 8011314:	9b04      	ldr	r3, [sp, #16]
 8011316:	9e05      	ldr	r6, [sp, #20]
 8011318:	1ac2      	subs	r2, r0, r3
 801131a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801131e:	429e      	cmp	r6, r3
 8011320:	bf28      	it	cs
 8011322:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8011326:	490d      	ldr	r1, [pc, #52]	; (801135c <_scanf_float+0x400>)
 8011328:	4630      	mov	r0, r6
 801132a:	f000 f8f3 	bl	8011514 <siprintf>
 801132e:	e7d1      	b.n	80112d4 <_scanf_float+0x378>
 8011330:	f011 0f04 	tst.w	r1, #4
 8011334:	9903      	ldr	r1, [sp, #12]
 8011336:	600a      	str	r2, [r1, #0]
 8011338:	d1db      	bne.n	80112f2 <_scanf_float+0x396>
 801133a:	eeb4 0b40 	vcmp.f64	d0, d0
 801133e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011342:	681e      	ldr	r6, [r3, #0]
 8011344:	d705      	bvc.n	8011352 <_scanf_float+0x3f6>
 8011346:	4806      	ldr	r0, [pc, #24]	; (8011360 <_scanf_float+0x404>)
 8011348:	f000 f8aa 	bl	80114a0 <nanf>
 801134c:	ed86 0a00 	vstr	s0, [r6]
 8011350:	e7d2      	b.n	80112f8 <_scanf_float+0x39c>
 8011352:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011356:	e7f9      	b.n	801134c <_scanf_float+0x3f0>
 8011358:	2500      	movs	r5, #0
 801135a:	e640      	b.n	8010fde <_scanf_float+0x82>
 801135c:	0801dc45 	.word	0x0801dc45
 8011360:	0801dbfa 	.word	0x0801dbfa

08011364 <iprintf>:
 8011364:	b40f      	push	{r0, r1, r2, r3}
 8011366:	4b0a      	ldr	r3, [pc, #40]	; (8011390 <iprintf+0x2c>)
 8011368:	b513      	push	{r0, r1, r4, lr}
 801136a:	681c      	ldr	r4, [r3, #0]
 801136c:	b124      	cbz	r4, 8011378 <iprintf+0x14>
 801136e:	69a3      	ldr	r3, [r4, #24]
 8011370:	b913      	cbnz	r3, 8011378 <iprintf+0x14>
 8011372:	4620      	mov	r0, r4
 8011374:	f001 ff80 	bl	8013278 <__sinit>
 8011378:	ab05      	add	r3, sp, #20
 801137a:	9a04      	ldr	r2, [sp, #16]
 801137c:	68a1      	ldr	r1, [r4, #8]
 801137e:	9301      	str	r3, [sp, #4]
 8011380:	4620      	mov	r0, r4
 8011382:	f7ff f877 	bl	8010474 <_vfiprintf_r>
 8011386:	b002      	add	sp, #8
 8011388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801138c:	b004      	add	sp, #16
 801138e:	4770      	bx	lr
 8011390:	2400a0f0 	.word	0x2400a0f0

08011394 <_puts_r>:
 8011394:	b570      	push	{r4, r5, r6, lr}
 8011396:	460e      	mov	r6, r1
 8011398:	4605      	mov	r5, r0
 801139a:	b118      	cbz	r0, 80113a4 <_puts_r+0x10>
 801139c:	6983      	ldr	r3, [r0, #24]
 801139e:	b90b      	cbnz	r3, 80113a4 <_puts_r+0x10>
 80113a0:	f001 ff6a 	bl	8013278 <__sinit>
 80113a4:	69ab      	ldr	r3, [r5, #24]
 80113a6:	68ac      	ldr	r4, [r5, #8]
 80113a8:	b913      	cbnz	r3, 80113b0 <_puts_r+0x1c>
 80113aa:	4628      	mov	r0, r5
 80113ac:	f001 ff64 	bl	8013278 <__sinit>
 80113b0:	4b2c      	ldr	r3, [pc, #176]	; (8011464 <_puts_r+0xd0>)
 80113b2:	429c      	cmp	r4, r3
 80113b4:	d120      	bne.n	80113f8 <_puts_r+0x64>
 80113b6:	686c      	ldr	r4, [r5, #4]
 80113b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80113ba:	07db      	lsls	r3, r3, #31
 80113bc:	d405      	bmi.n	80113ca <_puts_r+0x36>
 80113be:	89a3      	ldrh	r3, [r4, #12]
 80113c0:	0598      	lsls	r0, r3, #22
 80113c2:	d402      	bmi.n	80113ca <_puts_r+0x36>
 80113c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80113c6:	f002 fb68 	bl	8013a9a <__retarget_lock_acquire_recursive>
 80113ca:	89a3      	ldrh	r3, [r4, #12]
 80113cc:	0719      	lsls	r1, r3, #28
 80113ce:	d51d      	bpl.n	801140c <_puts_r+0x78>
 80113d0:	6923      	ldr	r3, [r4, #16]
 80113d2:	b1db      	cbz	r3, 801140c <_puts_r+0x78>
 80113d4:	3e01      	subs	r6, #1
 80113d6:	68a3      	ldr	r3, [r4, #8]
 80113d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80113dc:	3b01      	subs	r3, #1
 80113de:	60a3      	str	r3, [r4, #8]
 80113e0:	bb39      	cbnz	r1, 8011432 <_puts_r+0x9e>
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	da38      	bge.n	8011458 <_puts_r+0xc4>
 80113e6:	4622      	mov	r2, r4
 80113e8:	210a      	movs	r1, #10
 80113ea:	4628      	mov	r0, r5
 80113ec:	f000 ff56 	bl	801229c <__swbuf_r>
 80113f0:	3001      	adds	r0, #1
 80113f2:	d011      	beq.n	8011418 <_puts_r+0x84>
 80113f4:	250a      	movs	r5, #10
 80113f6:	e011      	b.n	801141c <_puts_r+0x88>
 80113f8:	4b1b      	ldr	r3, [pc, #108]	; (8011468 <_puts_r+0xd4>)
 80113fa:	429c      	cmp	r4, r3
 80113fc:	d101      	bne.n	8011402 <_puts_r+0x6e>
 80113fe:	68ac      	ldr	r4, [r5, #8]
 8011400:	e7da      	b.n	80113b8 <_puts_r+0x24>
 8011402:	4b1a      	ldr	r3, [pc, #104]	; (801146c <_puts_r+0xd8>)
 8011404:	429c      	cmp	r4, r3
 8011406:	bf08      	it	eq
 8011408:	68ec      	ldreq	r4, [r5, #12]
 801140a:	e7d5      	b.n	80113b8 <_puts_r+0x24>
 801140c:	4621      	mov	r1, r4
 801140e:	4628      	mov	r0, r5
 8011410:	f000 ff96 	bl	8012340 <__swsetup_r>
 8011414:	2800      	cmp	r0, #0
 8011416:	d0dd      	beq.n	80113d4 <_puts_r+0x40>
 8011418:	f04f 35ff 	mov.w	r5, #4294967295
 801141c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801141e:	07da      	lsls	r2, r3, #31
 8011420:	d405      	bmi.n	801142e <_puts_r+0x9a>
 8011422:	89a3      	ldrh	r3, [r4, #12]
 8011424:	059b      	lsls	r3, r3, #22
 8011426:	d402      	bmi.n	801142e <_puts_r+0x9a>
 8011428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801142a:	f002 fb37 	bl	8013a9c <__retarget_lock_release_recursive>
 801142e:	4628      	mov	r0, r5
 8011430:	bd70      	pop	{r4, r5, r6, pc}
 8011432:	2b00      	cmp	r3, #0
 8011434:	da04      	bge.n	8011440 <_puts_r+0xac>
 8011436:	69a2      	ldr	r2, [r4, #24]
 8011438:	429a      	cmp	r2, r3
 801143a:	dc06      	bgt.n	801144a <_puts_r+0xb6>
 801143c:	290a      	cmp	r1, #10
 801143e:	d004      	beq.n	801144a <_puts_r+0xb6>
 8011440:	6823      	ldr	r3, [r4, #0]
 8011442:	1c5a      	adds	r2, r3, #1
 8011444:	6022      	str	r2, [r4, #0]
 8011446:	7019      	strb	r1, [r3, #0]
 8011448:	e7c5      	b.n	80113d6 <_puts_r+0x42>
 801144a:	4622      	mov	r2, r4
 801144c:	4628      	mov	r0, r5
 801144e:	f000 ff25 	bl	801229c <__swbuf_r>
 8011452:	3001      	adds	r0, #1
 8011454:	d1bf      	bne.n	80113d6 <_puts_r+0x42>
 8011456:	e7df      	b.n	8011418 <_puts_r+0x84>
 8011458:	6823      	ldr	r3, [r4, #0]
 801145a:	250a      	movs	r5, #10
 801145c:	1c5a      	adds	r2, r3, #1
 801145e:	6022      	str	r2, [r4, #0]
 8011460:	701d      	strb	r5, [r3, #0]
 8011462:	e7db      	b.n	801141c <_puts_r+0x88>
 8011464:	0801de58 	.word	0x0801de58
 8011468:	0801de78 	.word	0x0801de78
 801146c:	0801de38 	.word	0x0801de38

08011470 <puts>:
 8011470:	4b02      	ldr	r3, [pc, #8]	; (801147c <puts+0xc>)
 8011472:	4601      	mov	r1, r0
 8011474:	6818      	ldr	r0, [r3, #0]
 8011476:	f7ff bf8d 	b.w	8011394 <_puts_r>
 801147a:	bf00      	nop
 801147c:	2400a0f0 	.word	0x2400a0f0

08011480 <_sbrk_r>:
 8011480:	b538      	push	{r3, r4, r5, lr}
 8011482:	4d06      	ldr	r5, [pc, #24]	; (801149c <_sbrk_r+0x1c>)
 8011484:	2300      	movs	r3, #0
 8011486:	4604      	mov	r4, r0
 8011488:	4608      	mov	r0, r1
 801148a:	602b      	str	r3, [r5, #0]
 801148c:	f7f0 fa7e 	bl	800198c <_sbrk>
 8011490:	1c43      	adds	r3, r0, #1
 8011492:	d102      	bne.n	801149a <_sbrk_r+0x1a>
 8011494:	682b      	ldr	r3, [r5, #0]
 8011496:	b103      	cbz	r3, 801149a <_sbrk_r+0x1a>
 8011498:	6023      	str	r3, [r4, #0]
 801149a:	bd38      	pop	{r3, r4, r5, pc}
 801149c:	2400f6ac 	.word	0x2400f6ac

080114a0 <nanf>:
 80114a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80114a8 <nanf+0x8>
 80114a4:	4770      	bx	lr
 80114a6:	bf00      	nop
 80114a8:	7fc00000 	.word	0x7fc00000

080114ac <sniprintf>:
 80114ac:	b40c      	push	{r2, r3}
 80114ae:	b530      	push	{r4, r5, lr}
 80114b0:	4b17      	ldr	r3, [pc, #92]	; (8011510 <sniprintf+0x64>)
 80114b2:	1e0c      	subs	r4, r1, #0
 80114b4:	681d      	ldr	r5, [r3, #0]
 80114b6:	b09d      	sub	sp, #116	; 0x74
 80114b8:	da08      	bge.n	80114cc <sniprintf+0x20>
 80114ba:	238b      	movs	r3, #139	; 0x8b
 80114bc:	602b      	str	r3, [r5, #0]
 80114be:	f04f 30ff 	mov.w	r0, #4294967295
 80114c2:	b01d      	add	sp, #116	; 0x74
 80114c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80114c8:	b002      	add	sp, #8
 80114ca:	4770      	bx	lr
 80114cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80114d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80114d4:	bf14      	ite	ne
 80114d6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80114da:	4623      	moveq	r3, r4
 80114dc:	9304      	str	r3, [sp, #16]
 80114de:	9307      	str	r3, [sp, #28]
 80114e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80114e4:	9002      	str	r0, [sp, #8]
 80114e6:	9006      	str	r0, [sp, #24]
 80114e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80114ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80114ee:	ab21      	add	r3, sp, #132	; 0x84
 80114f0:	a902      	add	r1, sp, #8
 80114f2:	4628      	mov	r0, r5
 80114f4:	9301      	str	r3, [sp, #4]
 80114f6:	f003 f8a1 	bl	801463c <_svfiprintf_r>
 80114fa:	1c43      	adds	r3, r0, #1
 80114fc:	bfbc      	itt	lt
 80114fe:	238b      	movlt	r3, #139	; 0x8b
 8011500:	602b      	strlt	r3, [r5, #0]
 8011502:	2c00      	cmp	r4, #0
 8011504:	d0dd      	beq.n	80114c2 <sniprintf+0x16>
 8011506:	9b02      	ldr	r3, [sp, #8]
 8011508:	2200      	movs	r2, #0
 801150a:	701a      	strb	r2, [r3, #0]
 801150c:	e7d9      	b.n	80114c2 <sniprintf+0x16>
 801150e:	bf00      	nop
 8011510:	2400a0f0 	.word	0x2400a0f0

08011514 <siprintf>:
 8011514:	b40e      	push	{r1, r2, r3}
 8011516:	b500      	push	{lr}
 8011518:	b09c      	sub	sp, #112	; 0x70
 801151a:	ab1d      	add	r3, sp, #116	; 0x74
 801151c:	9002      	str	r0, [sp, #8]
 801151e:	9006      	str	r0, [sp, #24]
 8011520:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011524:	4809      	ldr	r0, [pc, #36]	; (801154c <siprintf+0x38>)
 8011526:	9107      	str	r1, [sp, #28]
 8011528:	9104      	str	r1, [sp, #16]
 801152a:	4909      	ldr	r1, [pc, #36]	; (8011550 <siprintf+0x3c>)
 801152c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011530:	9105      	str	r1, [sp, #20]
 8011532:	6800      	ldr	r0, [r0, #0]
 8011534:	9301      	str	r3, [sp, #4]
 8011536:	a902      	add	r1, sp, #8
 8011538:	f003 f880 	bl	801463c <_svfiprintf_r>
 801153c:	9b02      	ldr	r3, [sp, #8]
 801153e:	2200      	movs	r2, #0
 8011540:	701a      	strb	r2, [r3, #0]
 8011542:	b01c      	add	sp, #112	; 0x70
 8011544:	f85d eb04 	ldr.w	lr, [sp], #4
 8011548:	b003      	add	sp, #12
 801154a:	4770      	bx	lr
 801154c:	2400a0f0 	.word	0x2400a0f0
 8011550:	ffff0208 	.word	0xffff0208

08011554 <strncmp>:
 8011554:	b510      	push	{r4, lr}
 8011556:	b16a      	cbz	r2, 8011574 <strncmp+0x20>
 8011558:	3901      	subs	r1, #1
 801155a:	1884      	adds	r4, r0, r2
 801155c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011560:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011564:	4293      	cmp	r3, r2
 8011566:	d103      	bne.n	8011570 <strncmp+0x1c>
 8011568:	42a0      	cmp	r0, r4
 801156a:	d001      	beq.n	8011570 <strncmp+0x1c>
 801156c:	2b00      	cmp	r3, #0
 801156e:	d1f5      	bne.n	801155c <strncmp+0x8>
 8011570:	1a98      	subs	r0, r3, r2
 8011572:	bd10      	pop	{r4, pc}
 8011574:	4610      	mov	r0, r2
 8011576:	e7fc      	b.n	8011572 <strncmp+0x1e>

08011578 <strncpy>:
 8011578:	b510      	push	{r4, lr}
 801157a:	3901      	subs	r1, #1
 801157c:	4603      	mov	r3, r0
 801157e:	b132      	cbz	r2, 801158e <strncpy+0x16>
 8011580:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011584:	f803 4b01 	strb.w	r4, [r3], #1
 8011588:	3a01      	subs	r2, #1
 801158a:	2c00      	cmp	r4, #0
 801158c:	d1f7      	bne.n	801157e <strncpy+0x6>
 801158e:	441a      	add	r2, r3
 8011590:	2100      	movs	r1, #0
 8011592:	4293      	cmp	r3, r2
 8011594:	d100      	bne.n	8011598 <strncpy+0x20>
 8011596:	bd10      	pop	{r4, pc}
 8011598:	f803 1b01 	strb.w	r1, [r3], #1
 801159c:	e7f9      	b.n	8011592 <strncpy+0x1a>

0801159e <sulp>:
 801159e:	b570      	push	{r4, r5, r6, lr}
 80115a0:	4604      	mov	r4, r0
 80115a2:	460d      	mov	r5, r1
 80115a4:	4616      	mov	r6, r2
 80115a6:	ec45 4b10 	vmov	d0, r4, r5
 80115aa:	f002 fe67 	bl	801427c <__ulp>
 80115ae:	b17e      	cbz	r6, 80115d0 <sulp+0x32>
 80115b0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80115b4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	dd09      	ble.n	80115d0 <sulp+0x32>
 80115bc:	051b      	lsls	r3, r3, #20
 80115be:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80115c2:	2000      	movs	r0, #0
 80115c4:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80115c8:	ec41 0b17 	vmov	d7, r0, r1
 80115cc:	ee20 0b07 	vmul.f64	d0, d0, d7
 80115d0:	bd70      	pop	{r4, r5, r6, pc}
 80115d2:	0000      	movs	r0, r0
 80115d4:	0000      	movs	r0, r0
	...

080115d8 <_strtod_l>:
 80115d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115dc:	ed2d 8b0c 	vpush	{d8-d13}
 80115e0:	b09d      	sub	sp, #116	; 0x74
 80115e2:	461f      	mov	r7, r3
 80115e4:	2300      	movs	r3, #0
 80115e6:	9318      	str	r3, [sp, #96]	; 0x60
 80115e8:	4ba6      	ldr	r3, [pc, #664]	; (8011884 <_strtod_l+0x2ac>)
 80115ea:	9213      	str	r2, [sp, #76]	; 0x4c
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	9308      	str	r3, [sp, #32]
 80115f0:	4604      	mov	r4, r0
 80115f2:	4618      	mov	r0, r3
 80115f4:	468a      	mov	sl, r1
 80115f6:	f7ee fe7d 	bl	80002f4 <strlen>
 80115fa:	f04f 0800 	mov.w	r8, #0
 80115fe:	4605      	mov	r5, r0
 8011600:	f04f 0900 	mov.w	r9, #0
 8011604:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8011608:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801160a:	781a      	ldrb	r2, [r3, #0]
 801160c:	2a2b      	cmp	r2, #43	; 0x2b
 801160e:	d04d      	beq.n	80116ac <_strtod_l+0xd4>
 8011610:	d83a      	bhi.n	8011688 <_strtod_l+0xb0>
 8011612:	2a0d      	cmp	r2, #13
 8011614:	d833      	bhi.n	801167e <_strtod_l+0xa6>
 8011616:	2a08      	cmp	r2, #8
 8011618:	d833      	bhi.n	8011682 <_strtod_l+0xaa>
 801161a:	2a00      	cmp	r2, #0
 801161c:	d03d      	beq.n	801169a <_strtod_l+0xc2>
 801161e:	2300      	movs	r3, #0
 8011620:	930b      	str	r3, [sp, #44]	; 0x2c
 8011622:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8011624:	7833      	ldrb	r3, [r6, #0]
 8011626:	2b30      	cmp	r3, #48	; 0x30
 8011628:	f040 80b6 	bne.w	8011798 <_strtod_l+0x1c0>
 801162c:	7873      	ldrb	r3, [r6, #1]
 801162e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011632:	2b58      	cmp	r3, #88	; 0x58
 8011634:	d16d      	bne.n	8011712 <_strtod_l+0x13a>
 8011636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011638:	9301      	str	r3, [sp, #4]
 801163a:	ab18      	add	r3, sp, #96	; 0x60
 801163c:	9702      	str	r7, [sp, #8]
 801163e:	9300      	str	r3, [sp, #0]
 8011640:	4a91      	ldr	r2, [pc, #580]	; (8011888 <_strtod_l+0x2b0>)
 8011642:	ab19      	add	r3, sp, #100	; 0x64
 8011644:	a917      	add	r1, sp, #92	; 0x5c
 8011646:	4620      	mov	r0, r4
 8011648:	f001 ff1a 	bl	8013480 <__gethex>
 801164c:	f010 0507 	ands.w	r5, r0, #7
 8011650:	4607      	mov	r7, r0
 8011652:	d005      	beq.n	8011660 <_strtod_l+0x88>
 8011654:	2d06      	cmp	r5, #6
 8011656:	d12b      	bne.n	80116b0 <_strtod_l+0xd8>
 8011658:	3601      	adds	r6, #1
 801165a:	2300      	movs	r3, #0
 801165c:	9617      	str	r6, [sp, #92]	; 0x5c
 801165e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011660:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011662:	2b00      	cmp	r3, #0
 8011664:	f040 856e 	bne.w	8012144 <_strtod_l+0xb6c>
 8011668:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801166a:	b1e3      	cbz	r3, 80116a6 <_strtod_l+0xce>
 801166c:	ec49 8b17 	vmov	d7, r8, r9
 8011670:	eeb1 0b47 	vneg.f64	d0, d7
 8011674:	b01d      	add	sp, #116	; 0x74
 8011676:	ecbd 8b0c 	vpop	{d8-d13}
 801167a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801167e:	2a20      	cmp	r2, #32
 8011680:	d1cd      	bne.n	801161e <_strtod_l+0x46>
 8011682:	3301      	adds	r3, #1
 8011684:	9317      	str	r3, [sp, #92]	; 0x5c
 8011686:	e7bf      	b.n	8011608 <_strtod_l+0x30>
 8011688:	2a2d      	cmp	r2, #45	; 0x2d
 801168a:	d1c8      	bne.n	801161e <_strtod_l+0x46>
 801168c:	2201      	movs	r2, #1
 801168e:	920b      	str	r2, [sp, #44]	; 0x2c
 8011690:	1c5a      	adds	r2, r3, #1
 8011692:	9217      	str	r2, [sp, #92]	; 0x5c
 8011694:	785b      	ldrb	r3, [r3, #1]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d1c3      	bne.n	8011622 <_strtod_l+0x4a>
 801169a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801169c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	f040 854d 	bne.w	8012140 <_strtod_l+0xb68>
 80116a6:	ec49 8b10 	vmov	d0, r8, r9
 80116aa:	e7e3      	b.n	8011674 <_strtod_l+0x9c>
 80116ac:	2200      	movs	r2, #0
 80116ae:	e7ee      	b.n	801168e <_strtod_l+0xb6>
 80116b0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80116b2:	b13a      	cbz	r2, 80116c4 <_strtod_l+0xec>
 80116b4:	2135      	movs	r1, #53	; 0x35
 80116b6:	a81a      	add	r0, sp, #104	; 0x68
 80116b8:	f002 feec 	bl	8014494 <__copybits>
 80116bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80116be:	4620      	mov	r0, r4
 80116c0:	f002 fab0 	bl	8013c24 <_Bfree>
 80116c4:	3d01      	subs	r5, #1
 80116c6:	2d05      	cmp	r5, #5
 80116c8:	d807      	bhi.n	80116da <_strtod_l+0x102>
 80116ca:	e8df f005 	tbb	[pc, r5]
 80116ce:	0b0e      	.short	0x0b0e
 80116d0:	030e1d18 	.word	0x030e1d18
 80116d4:	f04f 0900 	mov.w	r9, #0
 80116d8:	46c8      	mov	r8, r9
 80116da:	073b      	lsls	r3, r7, #28
 80116dc:	d5c0      	bpl.n	8011660 <_strtod_l+0x88>
 80116de:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80116e2:	e7bd      	b.n	8011660 <_strtod_l+0x88>
 80116e4:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 80116e8:	e7f7      	b.n	80116da <_strtod_l+0x102>
 80116ea:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 80116ee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80116f0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80116f4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80116f8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80116fc:	e7ed      	b.n	80116da <_strtod_l+0x102>
 80116fe:	f8df 918c 	ldr.w	r9, [pc, #396]	; 801188c <_strtod_l+0x2b4>
 8011702:	f04f 0800 	mov.w	r8, #0
 8011706:	e7e8      	b.n	80116da <_strtod_l+0x102>
 8011708:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801170c:	f04f 38ff 	mov.w	r8, #4294967295
 8011710:	e7e3      	b.n	80116da <_strtod_l+0x102>
 8011712:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011714:	1c5a      	adds	r2, r3, #1
 8011716:	9217      	str	r2, [sp, #92]	; 0x5c
 8011718:	785b      	ldrb	r3, [r3, #1]
 801171a:	2b30      	cmp	r3, #48	; 0x30
 801171c:	d0f9      	beq.n	8011712 <_strtod_l+0x13a>
 801171e:	2b00      	cmp	r3, #0
 8011720:	d09e      	beq.n	8011660 <_strtod_l+0x88>
 8011722:	2301      	movs	r3, #1
 8011724:	9306      	str	r3, [sp, #24]
 8011726:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011728:	930c      	str	r3, [sp, #48]	; 0x30
 801172a:	2300      	movs	r3, #0
 801172c:	9304      	str	r3, [sp, #16]
 801172e:	930a      	str	r3, [sp, #40]	; 0x28
 8011730:	461e      	mov	r6, r3
 8011732:	220a      	movs	r2, #10
 8011734:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8011736:	f890 b000 	ldrb.w	fp, [r0]
 801173a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 801173e:	b2d9      	uxtb	r1, r3
 8011740:	2909      	cmp	r1, #9
 8011742:	d92b      	bls.n	801179c <_strtod_l+0x1c4>
 8011744:	9908      	ldr	r1, [sp, #32]
 8011746:	462a      	mov	r2, r5
 8011748:	f7ff ff04 	bl	8011554 <strncmp>
 801174c:	2800      	cmp	r0, #0
 801174e:	d035      	beq.n	80117bc <_strtod_l+0x1e4>
 8011750:	2000      	movs	r0, #0
 8011752:	465a      	mov	r2, fp
 8011754:	4633      	mov	r3, r6
 8011756:	4683      	mov	fp, r0
 8011758:	4601      	mov	r1, r0
 801175a:	2a65      	cmp	r2, #101	; 0x65
 801175c:	d001      	beq.n	8011762 <_strtod_l+0x18a>
 801175e:	2a45      	cmp	r2, #69	; 0x45
 8011760:	d118      	bne.n	8011794 <_strtod_l+0x1bc>
 8011762:	b91b      	cbnz	r3, 801176c <_strtod_l+0x194>
 8011764:	9b06      	ldr	r3, [sp, #24]
 8011766:	4303      	orrs	r3, r0
 8011768:	d097      	beq.n	801169a <_strtod_l+0xc2>
 801176a:	2300      	movs	r3, #0
 801176c:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8011770:	f10a 0201 	add.w	r2, sl, #1
 8011774:	9217      	str	r2, [sp, #92]	; 0x5c
 8011776:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801177a:	2a2b      	cmp	r2, #43	; 0x2b
 801177c:	d077      	beq.n	801186e <_strtod_l+0x296>
 801177e:	2a2d      	cmp	r2, #45	; 0x2d
 8011780:	d07d      	beq.n	801187e <_strtod_l+0x2a6>
 8011782:	f04f 0e00 	mov.w	lr, #0
 8011786:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801178a:	2d09      	cmp	r5, #9
 801178c:	f240 8084 	bls.w	8011898 <_strtod_l+0x2c0>
 8011790:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8011794:	2500      	movs	r5, #0
 8011796:	e09f      	b.n	80118d8 <_strtod_l+0x300>
 8011798:	2300      	movs	r3, #0
 801179a:	e7c3      	b.n	8011724 <_strtod_l+0x14c>
 801179c:	2e08      	cmp	r6, #8
 801179e:	bfd5      	itete	le
 80117a0:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80117a2:	9904      	ldrgt	r1, [sp, #16]
 80117a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80117a8:	fb02 3301 	mlagt	r3, r2, r1, r3
 80117ac:	f100 0001 	add.w	r0, r0, #1
 80117b0:	bfd4      	ite	le
 80117b2:	930a      	strle	r3, [sp, #40]	; 0x28
 80117b4:	9304      	strgt	r3, [sp, #16]
 80117b6:	3601      	adds	r6, #1
 80117b8:	9017      	str	r0, [sp, #92]	; 0x5c
 80117ba:	e7bb      	b.n	8011734 <_strtod_l+0x15c>
 80117bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80117be:	195a      	adds	r2, r3, r5
 80117c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80117c2:	5d5a      	ldrb	r2, [r3, r5]
 80117c4:	b3ae      	cbz	r6, 8011832 <_strtod_l+0x25a>
 80117c6:	4683      	mov	fp, r0
 80117c8:	4633      	mov	r3, r6
 80117ca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80117ce:	2909      	cmp	r1, #9
 80117d0:	d912      	bls.n	80117f8 <_strtod_l+0x220>
 80117d2:	2101      	movs	r1, #1
 80117d4:	e7c1      	b.n	801175a <_strtod_l+0x182>
 80117d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80117d8:	1c5a      	adds	r2, r3, #1
 80117da:	9217      	str	r2, [sp, #92]	; 0x5c
 80117dc:	785a      	ldrb	r2, [r3, #1]
 80117de:	3001      	adds	r0, #1
 80117e0:	2a30      	cmp	r2, #48	; 0x30
 80117e2:	d0f8      	beq.n	80117d6 <_strtod_l+0x1fe>
 80117e4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80117e8:	2b08      	cmp	r3, #8
 80117ea:	f200 84b0 	bhi.w	801214e <_strtod_l+0xb76>
 80117ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80117f0:	930c      	str	r3, [sp, #48]	; 0x30
 80117f2:	4683      	mov	fp, r0
 80117f4:	2000      	movs	r0, #0
 80117f6:	4603      	mov	r3, r0
 80117f8:	3a30      	subs	r2, #48	; 0x30
 80117fa:	f100 0101 	add.w	r1, r0, #1
 80117fe:	d012      	beq.n	8011826 <_strtod_l+0x24e>
 8011800:	448b      	add	fp, r1
 8011802:	eb00 0c03 	add.w	ip, r0, r3
 8011806:	4619      	mov	r1, r3
 8011808:	250a      	movs	r5, #10
 801180a:	4561      	cmp	r1, ip
 801180c:	d113      	bne.n	8011836 <_strtod_l+0x25e>
 801180e:	1819      	adds	r1, r3, r0
 8011810:	2908      	cmp	r1, #8
 8011812:	f103 0301 	add.w	r3, r3, #1
 8011816:	4403      	add	r3, r0
 8011818:	dc1d      	bgt.n	8011856 <_strtod_l+0x27e>
 801181a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801181c:	210a      	movs	r1, #10
 801181e:	fb01 2200 	mla	r2, r1, r0, r2
 8011822:	920a      	str	r2, [sp, #40]	; 0x28
 8011824:	2100      	movs	r1, #0
 8011826:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011828:	1c50      	adds	r0, r2, #1
 801182a:	9017      	str	r0, [sp, #92]	; 0x5c
 801182c:	7852      	ldrb	r2, [r2, #1]
 801182e:	4608      	mov	r0, r1
 8011830:	e7cb      	b.n	80117ca <_strtod_l+0x1f2>
 8011832:	4630      	mov	r0, r6
 8011834:	e7d4      	b.n	80117e0 <_strtod_l+0x208>
 8011836:	2908      	cmp	r1, #8
 8011838:	dc04      	bgt.n	8011844 <_strtod_l+0x26c>
 801183a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801183c:	436f      	muls	r7, r5
 801183e:	970a      	str	r7, [sp, #40]	; 0x28
 8011840:	3101      	adds	r1, #1
 8011842:	e7e2      	b.n	801180a <_strtod_l+0x232>
 8011844:	f101 0e01 	add.w	lr, r1, #1
 8011848:	f1be 0f10 	cmp.w	lr, #16
 801184c:	bfde      	ittt	le
 801184e:	9f04      	ldrle	r7, [sp, #16]
 8011850:	436f      	mulle	r7, r5
 8011852:	9704      	strle	r7, [sp, #16]
 8011854:	e7f4      	b.n	8011840 <_strtod_l+0x268>
 8011856:	2b10      	cmp	r3, #16
 8011858:	bfdf      	itttt	le
 801185a:	9804      	ldrle	r0, [sp, #16]
 801185c:	210a      	movle	r1, #10
 801185e:	fb01 2200 	mlale	r2, r1, r0, r2
 8011862:	9204      	strle	r2, [sp, #16]
 8011864:	e7de      	b.n	8011824 <_strtod_l+0x24c>
 8011866:	f04f 0b00 	mov.w	fp, #0
 801186a:	2101      	movs	r1, #1
 801186c:	e77a      	b.n	8011764 <_strtod_l+0x18c>
 801186e:	f04f 0e00 	mov.w	lr, #0
 8011872:	f10a 0202 	add.w	r2, sl, #2
 8011876:	9217      	str	r2, [sp, #92]	; 0x5c
 8011878:	f89a 2002 	ldrb.w	r2, [sl, #2]
 801187c:	e783      	b.n	8011786 <_strtod_l+0x1ae>
 801187e:	f04f 0e01 	mov.w	lr, #1
 8011882:	e7f6      	b.n	8011872 <_strtod_l+0x29a>
 8011884:	0801df04 	.word	0x0801df04
 8011888:	0801dc4c 	.word	0x0801dc4c
 801188c:	7ff00000 	.word	0x7ff00000
 8011890:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011892:	1c55      	adds	r5, r2, #1
 8011894:	9517      	str	r5, [sp, #92]	; 0x5c
 8011896:	7852      	ldrb	r2, [r2, #1]
 8011898:	2a30      	cmp	r2, #48	; 0x30
 801189a:	d0f9      	beq.n	8011890 <_strtod_l+0x2b8>
 801189c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80118a0:	2d08      	cmp	r5, #8
 80118a2:	f63f af77 	bhi.w	8011794 <_strtod_l+0x1bc>
 80118a6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80118aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80118ac:	9208      	str	r2, [sp, #32]
 80118ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80118b0:	1c55      	adds	r5, r2, #1
 80118b2:	9517      	str	r5, [sp, #92]	; 0x5c
 80118b4:	7852      	ldrb	r2, [r2, #1]
 80118b6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80118ba:	2f09      	cmp	r7, #9
 80118bc:	d937      	bls.n	801192e <_strtod_l+0x356>
 80118be:	9f08      	ldr	r7, [sp, #32]
 80118c0:	1bed      	subs	r5, r5, r7
 80118c2:	2d08      	cmp	r5, #8
 80118c4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80118c8:	dc02      	bgt.n	80118d0 <_strtod_l+0x2f8>
 80118ca:	4565      	cmp	r5, ip
 80118cc:	bfa8      	it	ge
 80118ce:	4665      	movge	r5, ip
 80118d0:	f1be 0f00 	cmp.w	lr, #0
 80118d4:	d000      	beq.n	80118d8 <_strtod_l+0x300>
 80118d6:	426d      	negs	r5, r5
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d14f      	bne.n	801197c <_strtod_l+0x3a4>
 80118dc:	9b06      	ldr	r3, [sp, #24]
 80118de:	4303      	orrs	r3, r0
 80118e0:	f47f aebe 	bne.w	8011660 <_strtod_l+0x88>
 80118e4:	2900      	cmp	r1, #0
 80118e6:	f47f aed8 	bne.w	801169a <_strtod_l+0xc2>
 80118ea:	2a69      	cmp	r2, #105	; 0x69
 80118ec:	d027      	beq.n	801193e <_strtod_l+0x366>
 80118ee:	dc24      	bgt.n	801193a <_strtod_l+0x362>
 80118f0:	2a49      	cmp	r2, #73	; 0x49
 80118f2:	d024      	beq.n	801193e <_strtod_l+0x366>
 80118f4:	2a4e      	cmp	r2, #78	; 0x4e
 80118f6:	f47f aed0 	bne.w	801169a <_strtod_l+0xc2>
 80118fa:	499b      	ldr	r1, [pc, #620]	; (8011b68 <_strtod_l+0x590>)
 80118fc:	a817      	add	r0, sp, #92	; 0x5c
 80118fe:	f002 f817 	bl	8013930 <__match>
 8011902:	2800      	cmp	r0, #0
 8011904:	f43f aec9 	beq.w	801169a <_strtod_l+0xc2>
 8011908:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801190a:	781b      	ldrb	r3, [r3, #0]
 801190c:	2b28      	cmp	r3, #40	; 0x28
 801190e:	d12d      	bne.n	801196c <_strtod_l+0x394>
 8011910:	4996      	ldr	r1, [pc, #600]	; (8011b6c <_strtod_l+0x594>)
 8011912:	aa1a      	add	r2, sp, #104	; 0x68
 8011914:	a817      	add	r0, sp, #92	; 0x5c
 8011916:	f002 f81f 	bl	8013958 <__hexnan>
 801191a:	2805      	cmp	r0, #5
 801191c:	d126      	bne.n	801196c <_strtod_l+0x394>
 801191e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011920:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8011924:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8011928:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801192c:	e698      	b.n	8011660 <_strtod_l+0x88>
 801192e:	250a      	movs	r5, #10
 8011930:	fb05 250c 	mla	r5, r5, ip, r2
 8011934:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8011938:	e7b9      	b.n	80118ae <_strtod_l+0x2d6>
 801193a:	2a6e      	cmp	r2, #110	; 0x6e
 801193c:	e7db      	b.n	80118f6 <_strtod_l+0x31e>
 801193e:	498c      	ldr	r1, [pc, #560]	; (8011b70 <_strtod_l+0x598>)
 8011940:	a817      	add	r0, sp, #92	; 0x5c
 8011942:	f001 fff5 	bl	8013930 <__match>
 8011946:	2800      	cmp	r0, #0
 8011948:	f43f aea7 	beq.w	801169a <_strtod_l+0xc2>
 801194c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801194e:	4989      	ldr	r1, [pc, #548]	; (8011b74 <_strtod_l+0x59c>)
 8011950:	3b01      	subs	r3, #1
 8011952:	a817      	add	r0, sp, #92	; 0x5c
 8011954:	9317      	str	r3, [sp, #92]	; 0x5c
 8011956:	f001 ffeb 	bl	8013930 <__match>
 801195a:	b910      	cbnz	r0, 8011962 <_strtod_l+0x38a>
 801195c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801195e:	3301      	adds	r3, #1
 8011960:	9317      	str	r3, [sp, #92]	; 0x5c
 8011962:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8011b88 <_strtod_l+0x5b0>
 8011966:	f04f 0800 	mov.w	r8, #0
 801196a:	e679      	b.n	8011660 <_strtod_l+0x88>
 801196c:	4882      	ldr	r0, [pc, #520]	; (8011b78 <_strtod_l+0x5a0>)
 801196e:	f002 ff67 	bl	8014840 <nan>
 8011972:	ed8d 0b04 	vstr	d0, [sp, #16]
 8011976:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801197a:	e671      	b.n	8011660 <_strtod_l+0x88>
 801197c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8011980:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011984:	eba5 020b 	sub.w	r2, r5, fp
 8011988:	2e00      	cmp	r6, #0
 801198a:	bf08      	it	eq
 801198c:	461e      	moveq	r6, r3
 801198e:	2b10      	cmp	r3, #16
 8011990:	ed8d 7b08 	vstr	d7, [sp, #32]
 8011994:	9206      	str	r2, [sp, #24]
 8011996:	461a      	mov	r2, r3
 8011998:	bfa8      	it	ge
 801199a:	2210      	movge	r2, #16
 801199c:	2b09      	cmp	r3, #9
 801199e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80119a2:	dd0e      	ble.n	80119c2 <_strtod_l+0x3ea>
 80119a4:	4975      	ldr	r1, [pc, #468]	; (8011b7c <_strtod_l+0x5a4>)
 80119a6:	eddd 7a04 	vldr	s15, [sp, #16]
 80119aa:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80119ae:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 80119b2:	ed9d 5b08 	vldr	d5, [sp, #32]
 80119b6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80119ba:	eea5 7b06 	vfma.f64	d7, d5, d6
 80119be:	ec59 8b17 	vmov	r8, r9, d7
 80119c2:	2b0f      	cmp	r3, #15
 80119c4:	dc37      	bgt.n	8011a36 <_strtod_l+0x45e>
 80119c6:	9906      	ldr	r1, [sp, #24]
 80119c8:	2900      	cmp	r1, #0
 80119ca:	f43f ae49 	beq.w	8011660 <_strtod_l+0x88>
 80119ce:	dd23      	ble.n	8011a18 <_strtod_l+0x440>
 80119d0:	2916      	cmp	r1, #22
 80119d2:	dc0b      	bgt.n	80119ec <_strtod_l+0x414>
 80119d4:	4b69      	ldr	r3, [pc, #420]	; (8011b7c <_strtod_l+0x5a4>)
 80119d6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80119da:	ed93 7b00 	vldr	d7, [r3]
 80119de:	ec49 8b16 	vmov	d6, r8, r9
 80119e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80119e6:	ec59 8b17 	vmov	r8, r9, d7
 80119ea:	e639      	b.n	8011660 <_strtod_l+0x88>
 80119ec:	9806      	ldr	r0, [sp, #24]
 80119ee:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80119f2:	4281      	cmp	r1, r0
 80119f4:	db1f      	blt.n	8011a36 <_strtod_l+0x45e>
 80119f6:	4a61      	ldr	r2, [pc, #388]	; (8011b7c <_strtod_l+0x5a4>)
 80119f8:	f1c3 030f 	rsb	r3, r3, #15
 80119fc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8011a00:	ed91 7b00 	vldr	d7, [r1]
 8011a04:	ec49 8b16 	vmov	d6, r8, r9
 8011a08:	1ac3      	subs	r3, r0, r3
 8011a0a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011a0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011a12:	ed92 6b00 	vldr	d6, [r2]
 8011a16:	e7e4      	b.n	80119e2 <_strtod_l+0x40a>
 8011a18:	9906      	ldr	r1, [sp, #24]
 8011a1a:	3116      	adds	r1, #22
 8011a1c:	db0b      	blt.n	8011a36 <_strtod_l+0x45e>
 8011a1e:	4b57      	ldr	r3, [pc, #348]	; (8011b7c <_strtod_l+0x5a4>)
 8011a20:	ebab 0505 	sub.w	r5, fp, r5
 8011a24:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011a28:	ed95 7b00 	vldr	d7, [r5]
 8011a2c:	ec49 8b16 	vmov	d6, r8, r9
 8011a30:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011a34:	e7d7      	b.n	80119e6 <_strtod_l+0x40e>
 8011a36:	9906      	ldr	r1, [sp, #24]
 8011a38:	1a9a      	subs	r2, r3, r2
 8011a3a:	440a      	add	r2, r1
 8011a3c:	2a00      	cmp	r2, #0
 8011a3e:	dd74      	ble.n	8011b2a <_strtod_l+0x552>
 8011a40:	f012 000f 	ands.w	r0, r2, #15
 8011a44:	d00a      	beq.n	8011a5c <_strtod_l+0x484>
 8011a46:	494d      	ldr	r1, [pc, #308]	; (8011b7c <_strtod_l+0x5a4>)
 8011a48:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011a4c:	ed91 7b00 	vldr	d7, [r1]
 8011a50:	ec49 8b16 	vmov	d6, r8, r9
 8011a54:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011a58:	ec59 8b17 	vmov	r8, r9, d7
 8011a5c:	f032 020f 	bics.w	r2, r2, #15
 8011a60:	d04f      	beq.n	8011b02 <_strtod_l+0x52a>
 8011a62:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8011a66:	dd22      	ble.n	8011aae <_strtod_l+0x4d6>
 8011a68:	2500      	movs	r5, #0
 8011a6a:	462e      	mov	r6, r5
 8011a6c:	950a      	str	r5, [sp, #40]	; 0x28
 8011a6e:	462f      	mov	r7, r5
 8011a70:	2322      	movs	r3, #34	; 0x22
 8011a72:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8011b88 <_strtod_l+0x5b0>
 8011a76:	6023      	str	r3, [r4, #0]
 8011a78:	f04f 0800 	mov.w	r8, #0
 8011a7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	f43f adee 	beq.w	8011660 <_strtod_l+0x88>
 8011a84:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011a86:	4620      	mov	r0, r4
 8011a88:	f002 f8cc 	bl	8013c24 <_Bfree>
 8011a8c:	4639      	mov	r1, r7
 8011a8e:	4620      	mov	r0, r4
 8011a90:	f002 f8c8 	bl	8013c24 <_Bfree>
 8011a94:	4631      	mov	r1, r6
 8011a96:	4620      	mov	r0, r4
 8011a98:	f002 f8c4 	bl	8013c24 <_Bfree>
 8011a9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011a9e:	4620      	mov	r0, r4
 8011aa0:	f002 f8c0 	bl	8013c24 <_Bfree>
 8011aa4:	4629      	mov	r1, r5
 8011aa6:	4620      	mov	r0, r4
 8011aa8:	f002 f8bc 	bl	8013c24 <_Bfree>
 8011aac:	e5d8      	b.n	8011660 <_strtod_l+0x88>
 8011aae:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8011ab2:	2000      	movs	r0, #0
 8011ab4:	4f32      	ldr	r7, [pc, #200]	; (8011b80 <_strtod_l+0x5a8>)
 8011ab6:	1112      	asrs	r2, r2, #4
 8011ab8:	4601      	mov	r1, r0
 8011aba:	2a01      	cmp	r2, #1
 8011abc:	dc24      	bgt.n	8011b08 <_strtod_l+0x530>
 8011abe:	b108      	cbz	r0, 8011ac4 <_strtod_l+0x4ec>
 8011ac0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8011ac4:	4a2e      	ldr	r2, [pc, #184]	; (8011b80 <_strtod_l+0x5a8>)
 8011ac6:	482f      	ldr	r0, [pc, #188]	; (8011b84 <_strtod_l+0x5ac>)
 8011ac8:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8011acc:	ed91 7b00 	vldr	d7, [r1]
 8011ad0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8011ad4:	ec49 8b16 	vmov	d6, r8, r9
 8011ad8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011adc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011ae0:	9905      	ldr	r1, [sp, #20]
 8011ae2:	4a29      	ldr	r2, [pc, #164]	; (8011b88 <_strtod_l+0x5b0>)
 8011ae4:	400a      	ands	r2, r1
 8011ae6:	4282      	cmp	r2, r0
 8011ae8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8011aec:	d8bc      	bhi.n	8011a68 <_strtod_l+0x490>
 8011aee:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8011af2:	4282      	cmp	r2, r0
 8011af4:	bf86      	itte	hi
 8011af6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8011b8c <_strtod_l+0x5b4>
 8011afa:	f04f 38ff 	movhi.w	r8, #4294967295
 8011afe:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8011b02:	2200      	movs	r2, #0
 8011b04:	9204      	str	r2, [sp, #16]
 8011b06:	e07f      	b.n	8011c08 <_strtod_l+0x630>
 8011b08:	f012 0f01 	tst.w	r2, #1
 8011b0c:	d00a      	beq.n	8011b24 <_strtod_l+0x54c>
 8011b0e:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8011b12:	ed90 7b00 	vldr	d7, [r0]
 8011b16:	ed9d 6b04 	vldr	d6, [sp, #16]
 8011b1a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011b1e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011b22:	2001      	movs	r0, #1
 8011b24:	3101      	adds	r1, #1
 8011b26:	1052      	asrs	r2, r2, #1
 8011b28:	e7c7      	b.n	8011aba <_strtod_l+0x4e2>
 8011b2a:	d0ea      	beq.n	8011b02 <_strtod_l+0x52a>
 8011b2c:	4252      	negs	r2, r2
 8011b2e:	f012 000f 	ands.w	r0, r2, #15
 8011b32:	d00a      	beq.n	8011b4a <_strtod_l+0x572>
 8011b34:	4911      	ldr	r1, [pc, #68]	; (8011b7c <_strtod_l+0x5a4>)
 8011b36:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011b3a:	ed91 7b00 	vldr	d7, [r1]
 8011b3e:	ec49 8b16 	vmov	d6, r8, r9
 8011b42:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011b46:	ec59 8b17 	vmov	r8, r9, d7
 8011b4a:	1112      	asrs	r2, r2, #4
 8011b4c:	d0d9      	beq.n	8011b02 <_strtod_l+0x52a>
 8011b4e:	2a1f      	cmp	r2, #31
 8011b50:	dd1e      	ble.n	8011b90 <_strtod_l+0x5b8>
 8011b52:	2500      	movs	r5, #0
 8011b54:	462e      	mov	r6, r5
 8011b56:	950a      	str	r5, [sp, #40]	; 0x28
 8011b58:	462f      	mov	r7, r5
 8011b5a:	2322      	movs	r3, #34	; 0x22
 8011b5c:	f04f 0800 	mov.w	r8, #0
 8011b60:	f04f 0900 	mov.w	r9, #0
 8011b64:	6023      	str	r3, [r4, #0]
 8011b66:	e789      	b.n	8011a7c <_strtod_l+0x4a4>
 8011b68:	0801dc1e 	.word	0x0801dc1e
 8011b6c:	0801dc60 	.word	0x0801dc60
 8011b70:	0801dc16 	.word	0x0801dc16
 8011b74:	0801dda4 	.word	0x0801dda4
 8011b78:	0801dbfa 	.word	0x0801dbfa
 8011b7c:	0801dfa0 	.word	0x0801dfa0
 8011b80:	0801df78 	.word	0x0801df78
 8011b84:	7ca00000 	.word	0x7ca00000
 8011b88:	7ff00000 	.word	0x7ff00000
 8011b8c:	7fefffff 	.word	0x7fefffff
 8011b90:	f012 0110 	ands.w	r1, r2, #16
 8011b94:	bf18      	it	ne
 8011b96:	216a      	movne	r1, #106	; 0x6a
 8011b98:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8011b9c:	9104      	str	r1, [sp, #16]
 8011b9e:	49c0      	ldr	r1, [pc, #768]	; (8011ea0 <_strtod_l+0x8c8>)
 8011ba0:	2000      	movs	r0, #0
 8011ba2:	07d7      	lsls	r7, r2, #31
 8011ba4:	d508      	bpl.n	8011bb8 <_strtod_l+0x5e0>
 8011ba6:	ed9d 6b08 	vldr	d6, [sp, #32]
 8011baa:	ed91 7b00 	vldr	d7, [r1]
 8011bae:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011bb2:	ed8d 7b08 	vstr	d7, [sp, #32]
 8011bb6:	2001      	movs	r0, #1
 8011bb8:	1052      	asrs	r2, r2, #1
 8011bba:	f101 0108 	add.w	r1, r1, #8
 8011bbe:	d1f0      	bne.n	8011ba2 <_strtod_l+0x5ca>
 8011bc0:	b108      	cbz	r0, 8011bc6 <_strtod_l+0x5ee>
 8011bc2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8011bc6:	9a04      	ldr	r2, [sp, #16]
 8011bc8:	b1ba      	cbz	r2, 8011bfa <_strtod_l+0x622>
 8011bca:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8011bce:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8011bd2:	2a00      	cmp	r2, #0
 8011bd4:	4649      	mov	r1, r9
 8011bd6:	dd10      	ble.n	8011bfa <_strtod_l+0x622>
 8011bd8:	2a1f      	cmp	r2, #31
 8011bda:	f340 8132 	ble.w	8011e42 <_strtod_l+0x86a>
 8011bde:	2a34      	cmp	r2, #52	; 0x34
 8011be0:	bfde      	ittt	le
 8011be2:	3a20      	suble	r2, #32
 8011be4:	f04f 30ff 	movle.w	r0, #4294967295
 8011be8:	fa00 f202 	lslle.w	r2, r0, r2
 8011bec:	f04f 0800 	mov.w	r8, #0
 8011bf0:	bfcc      	ite	gt
 8011bf2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8011bf6:	ea02 0901 	andle.w	r9, r2, r1
 8011bfa:	ec49 8b17 	vmov	d7, r8, r9
 8011bfe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c06:	d0a4      	beq.n	8011b52 <_strtod_l+0x57a>
 8011c08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c0a:	9200      	str	r2, [sp, #0]
 8011c0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011c0e:	4632      	mov	r2, r6
 8011c10:	4620      	mov	r0, r4
 8011c12:	f002 f873 	bl	8013cfc <__s2b>
 8011c16:	900a      	str	r0, [sp, #40]	; 0x28
 8011c18:	2800      	cmp	r0, #0
 8011c1a:	f43f af25 	beq.w	8011a68 <_strtod_l+0x490>
 8011c1e:	9b06      	ldr	r3, [sp, #24]
 8011c20:	ebab 0505 	sub.w	r5, fp, r5
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	bfb4      	ite	lt
 8011c28:	462b      	movlt	r3, r5
 8011c2a:	2300      	movge	r3, #0
 8011c2c:	930c      	str	r3, [sp, #48]	; 0x30
 8011c2e:	9b06      	ldr	r3, [sp, #24]
 8011c30:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8011e88 <_strtod_l+0x8b0>
 8011c34:	ed9f ab96 	vldr	d10, [pc, #600]	; 8011e90 <_strtod_l+0x8b8>
 8011c38:	ed9f bb97 	vldr	d11, [pc, #604]	; 8011e98 <_strtod_l+0x8c0>
 8011c3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011c40:	2500      	movs	r5, #0
 8011c42:	9312      	str	r3, [sp, #72]	; 0x48
 8011c44:	462e      	mov	r6, r5
 8011c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c48:	4620      	mov	r0, r4
 8011c4a:	6859      	ldr	r1, [r3, #4]
 8011c4c:	f001 ffaa 	bl	8013ba4 <_Balloc>
 8011c50:	4607      	mov	r7, r0
 8011c52:	2800      	cmp	r0, #0
 8011c54:	f43f af0c 	beq.w	8011a70 <_strtod_l+0x498>
 8011c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c5a:	691a      	ldr	r2, [r3, #16]
 8011c5c:	3202      	adds	r2, #2
 8011c5e:	f103 010c 	add.w	r1, r3, #12
 8011c62:	0092      	lsls	r2, r2, #2
 8011c64:	300c      	adds	r0, #12
 8011c66:	f7fe fb01 	bl	801026c <memcpy>
 8011c6a:	ec49 8b10 	vmov	d0, r8, r9
 8011c6e:	aa1a      	add	r2, sp, #104	; 0x68
 8011c70:	a919      	add	r1, sp, #100	; 0x64
 8011c72:	4620      	mov	r0, r4
 8011c74:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8011c78:	f002 fb7c 	bl	8014374 <__d2b>
 8011c7c:	9018      	str	r0, [sp, #96]	; 0x60
 8011c7e:	2800      	cmp	r0, #0
 8011c80:	f43f aef6 	beq.w	8011a70 <_strtod_l+0x498>
 8011c84:	2101      	movs	r1, #1
 8011c86:	4620      	mov	r0, r4
 8011c88:	f002 f8d2 	bl	8013e30 <__i2b>
 8011c8c:	4606      	mov	r6, r0
 8011c8e:	2800      	cmp	r0, #0
 8011c90:	f43f aeee 	beq.w	8011a70 <_strtod_l+0x498>
 8011c94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011c96:	991a      	ldr	r1, [sp, #104]	; 0x68
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	bfab      	itete	ge
 8011c9c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8011c9e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8011ca0:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8011ca4:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8011ca8:	bfac      	ite	ge
 8011caa:	eb03 0b02 	addge.w	fp, r3, r2
 8011cae:	eba2 0a03 	sublt.w	sl, r2, r3
 8011cb2:	9a04      	ldr	r2, [sp, #16]
 8011cb4:	1a9b      	subs	r3, r3, r2
 8011cb6:	440b      	add	r3, r1
 8011cb8:	4a7a      	ldr	r2, [pc, #488]	; (8011ea4 <_strtod_l+0x8cc>)
 8011cba:	3b01      	subs	r3, #1
 8011cbc:	4293      	cmp	r3, r2
 8011cbe:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8011cc2:	f280 80d1 	bge.w	8011e68 <_strtod_l+0x890>
 8011cc6:	1ad2      	subs	r2, r2, r3
 8011cc8:	2a1f      	cmp	r2, #31
 8011cca:	eba1 0102 	sub.w	r1, r1, r2
 8011cce:	f04f 0001 	mov.w	r0, #1
 8011cd2:	f300 80bd 	bgt.w	8011e50 <_strtod_l+0x878>
 8011cd6:	fa00 f302 	lsl.w	r3, r0, r2
 8011cda:	930e      	str	r3, [sp, #56]	; 0x38
 8011cdc:	2300      	movs	r3, #0
 8011cde:	930d      	str	r3, [sp, #52]	; 0x34
 8011ce0:	eb0b 0301 	add.w	r3, fp, r1
 8011ce4:	9a04      	ldr	r2, [sp, #16]
 8011ce6:	459b      	cmp	fp, r3
 8011ce8:	448a      	add	sl, r1
 8011cea:	4492      	add	sl, r2
 8011cec:	465a      	mov	r2, fp
 8011cee:	bfa8      	it	ge
 8011cf0:	461a      	movge	r2, r3
 8011cf2:	4552      	cmp	r2, sl
 8011cf4:	bfa8      	it	ge
 8011cf6:	4652      	movge	r2, sl
 8011cf8:	2a00      	cmp	r2, #0
 8011cfa:	bfc2      	ittt	gt
 8011cfc:	1a9b      	subgt	r3, r3, r2
 8011cfe:	ebaa 0a02 	subgt.w	sl, sl, r2
 8011d02:	ebab 0b02 	subgt.w	fp, fp, r2
 8011d06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011d08:	2a00      	cmp	r2, #0
 8011d0a:	dd18      	ble.n	8011d3e <_strtod_l+0x766>
 8011d0c:	4631      	mov	r1, r6
 8011d0e:	4620      	mov	r0, r4
 8011d10:	9315      	str	r3, [sp, #84]	; 0x54
 8011d12:	f002 f949 	bl	8013fa8 <__pow5mult>
 8011d16:	4606      	mov	r6, r0
 8011d18:	2800      	cmp	r0, #0
 8011d1a:	f43f aea9 	beq.w	8011a70 <_strtod_l+0x498>
 8011d1e:	4601      	mov	r1, r0
 8011d20:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011d22:	4620      	mov	r0, r4
 8011d24:	f002 f89a 	bl	8013e5c <__multiply>
 8011d28:	9014      	str	r0, [sp, #80]	; 0x50
 8011d2a:	2800      	cmp	r0, #0
 8011d2c:	f43f aea0 	beq.w	8011a70 <_strtod_l+0x498>
 8011d30:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011d32:	4620      	mov	r0, r4
 8011d34:	f001 ff76 	bl	8013c24 <_Bfree>
 8011d38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011d3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011d3c:	9218      	str	r2, [sp, #96]	; 0x60
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	f300 8097 	bgt.w	8011e72 <_strtod_l+0x89a>
 8011d44:	9b06      	ldr	r3, [sp, #24]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	dd08      	ble.n	8011d5c <_strtod_l+0x784>
 8011d4a:	4639      	mov	r1, r7
 8011d4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011d4e:	4620      	mov	r0, r4
 8011d50:	f002 f92a 	bl	8013fa8 <__pow5mult>
 8011d54:	4607      	mov	r7, r0
 8011d56:	2800      	cmp	r0, #0
 8011d58:	f43f ae8a 	beq.w	8011a70 <_strtod_l+0x498>
 8011d5c:	f1ba 0f00 	cmp.w	sl, #0
 8011d60:	dd08      	ble.n	8011d74 <_strtod_l+0x79c>
 8011d62:	4639      	mov	r1, r7
 8011d64:	4652      	mov	r2, sl
 8011d66:	4620      	mov	r0, r4
 8011d68:	f002 f978 	bl	801405c <__lshift>
 8011d6c:	4607      	mov	r7, r0
 8011d6e:	2800      	cmp	r0, #0
 8011d70:	f43f ae7e 	beq.w	8011a70 <_strtod_l+0x498>
 8011d74:	f1bb 0f00 	cmp.w	fp, #0
 8011d78:	dd08      	ble.n	8011d8c <_strtod_l+0x7b4>
 8011d7a:	4631      	mov	r1, r6
 8011d7c:	465a      	mov	r2, fp
 8011d7e:	4620      	mov	r0, r4
 8011d80:	f002 f96c 	bl	801405c <__lshift>
 8011d84:	4606      	mov	r6, r0
 8011d86:	2800      	cmp	r0, #0
 8011d88:	f43f ae72 	beq.w	8011a70 <_strtod_l+0x498>
 8011d8c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011d8e:	463a      	mov	r2, r7
 8011d90:	4620      	mov	r0, r4
 8011d92:	f002 f9eb 	bl	801416c <__mdiff>
 8011d96:	4605      	mov	r5, r0
 8011d98:	2800      	cmp	r0, #0
 8011d9a:	f43f ae69 	beq.w	8011a70 <_strtod_l+0x498>
 8011d9e:	2300      	movs	r3, #0
 8011da0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8011da4:	60c3      	str	r3, [r0, #12]
 8011da6:	4631      	mov	r1, r6
 8011da8:	f002 f9c4 	bl	8014134 <__mcmp>
 8011dac:	2800      	cmp	r0, #0
 8011dae:	da7f      	bge.n	8011eb0 <_strtod_l+0x8d8>
 8011db0:	ea5a 0308 	orrs.w	r3, sl, r8
 8011db4:	f040 80a5 	bne.w	8011f02 <_strtod_l+0x92a>
 8011db8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	f040 80a0 	bne.w	8011f02 <_strtod_l+0x92a>
 8011dc2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011dc6:	0d1b      	lsrs	r3, r3, #20
 8011dc8:	051b      	lsls	r3, r3, #20
 8011dca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011dce:	f240 8098 	bls.w	8011f02 <_strtod_l+0x92a>
 8011dd2:	696b      	ldr	r3, [r5, #20]
 8011dd4:	b91b      	cbnz	r3, 8011dde <_strtod_l+0x806>
 8011dd6:	692b      	ldr	r3, [r5, #16]
 8011dd8:	2b01      	cmp	r3, #1
 8011dda:	f340 8092 	ble.w	8011f02 <_strtod_l+0x92a>
 8011dde:	4629      	mov	r1, r5
 8011de0:	2201      	movs	r2, #1
 8011de2:	4620      	mov	r0, r4
 8011de4:	f002 f93a 	bl	801405c <__lshift>
 8011de8:	4631      	mov	r1, r6
 8011dea:	4605      	mov	r5, r0
 8011dec:	f002 f9a2 	bl	8014134 <__mcmp>
 8011df0:	2800      	cmp	r0, #0
 8011df2:	f340 8086 	ble.w	8011f02 <_strtod_l+0x92a>
 8011df6:	9904      	ldr	r1, [sp, #16]
 8011df8:	4a2b      	ldr	r2, [pc, #172]	; (8011ea8 <_strtod_l+0x8d0>)
 8011dfa:	464b      	mov	r3, r9
 8011dfc:	2900      	cmp	r1, #0
 8011dfe:	f000 80a1 	beq.w	8011f44 <_strtod_l+0x96c>
 8011e02:	ea02 0109 	and.w	r1, r2, r9
 8011e06:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011e0a:	f300 809b 	bgt.w	8011f44 <_strtod_l+0x96c>
 8011e0e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011e12:	f77f aea2 	ble.w	8011b5a <_strtod_l+0x582>
 8011e16:	4a25      	ldr	r2, [pc, #148]	; (8011eac <_strtod_l+0x8d4>)
 8011e18:	2300      	movs	r3, #0
 8011e1a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8011e1e:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8011e22:	ec49 8b17 	vmov	d7, r8, r9
 8011e26:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011e2a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011e2e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8011e32:	4313      	orrs	r3, r2
 8011e34:	bf08      	it	eq
 8011e36:	2322      	moveq	r3, #34	; 0x22
 8011e38:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8011e3c:	bf08      	it	eq
 8011e3e:	6023      	streq	r3, [r4, #0]
 8011e40:	e620      	b.n	8011a84 <_strtod_l+0x4ac>
 8011e42:	f04f 31ff 	mov.w	r1, #4294967295
 8011e46:	fa01 f202 	lsl.w	r2, r1, r2
 8011e4a:	ea02 0808 	and.w	r8, r2, r8
 8011e4e:	e6d4      	b.n	8011bfa <_strtod_l+0x622>
 8011e50:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8011e54:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8011e58:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8011e5c:	33e2      	adds	r3, #226	; 0xe2
 8011e5e:	fa00 f303 	lsl.w	r3, r0, r3
 8011e62:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8011e66:	e73b      	b.n	8011ce0 <_strtod_l+0x708>
 8011e68:	2000      	movs	r0, #0
 8011e6a:	2301      	movs	r3, #1
 8011e6c:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8011e70:	e736      	b.n	8011ce0 <_strtod_l+0x708>
 8011e72:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011e74:	461a      	mov	r2, r3
 8011e76:	4620      	mov	r0, r4
 8011e78:	f002 f8f0 	bl	801405c <__lshift>
 8011e7c:	9018      	str	r0, [sp, #96]	; 0x60
 8011e7e:	2800      	cmp	r0, #0
 8011e80:	f47f af60 	bne.w	8011d44 <_strtod_l+0x76c>
 8011e84:	e5f4      	b.n	8011a70 <_strtod_l+0x498>
 8011e86:	bf00      	nop
 8011e88:	94a03595 	.word	0x94a03595
 8011e8c:	3fcfffff 	.word	0x3fcfffff
 8011e90:	94a03595 	.word	0x94a03595
 8011e94:	3fdfffff 	.word	0x3fdfffff
 8011e98:	35afe535 	.word	0x35afe535
 8011e9c:	3fe00000 	.word	0x3fe00000
 8011ea0:	0801dc78 	.word	0x0801dc78
 8011ea4:	fffffc02 	.word	0xfffffc02
 8011ea8:	7ff00000 	.word	0x7ff00000
 8011eac:	39500000 	.word	0x39500000
 8011eb0:	46cb      	mov	fp, r9
 8011eb2:	d165      	bne.n	8011f80 <_strtod_l+0x9a8>
 8011eb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011eb8:	f1ba 0f00 	cmp.w	sl, #0
 8011ebc:	d02a      	beq.n	8011f14 <_strtod_l+0x93c>
 8011ebe:	4aaa      	ldr	r2, [pc, #680]	; (8012168 <_strtod_l+0xb90>)
 8011ec0:	4293      	cmp	r3, r2
 8011ec2:	d12b      	bne.n	8011f1c <_strtod_l+0x944>
 8011ec4:	9b04      	ldr	r3, [sp, #16]
 8011ec6:	4641      	mov	r1, r8
 8011ec8:	b1fb      	cbz	r3, 8011f0a <_strtod_l+0x932>
 8011eca:	4aa8      	ldr	r2, [pc, #672]	; (801216c <_strtod_l+0xb94>)
 8011ecc:	ea09 0202 	and.w	r2, r9, r2
 8011ed0:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8011ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ed8:	d81a      	bhi.n	8011f10 <_strtod_l+0x938>
 8011eda:	0d12      	lsrs	r2, r2, #20
 8011edc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011ee0:	fa00 f303 	lsl.w	r3, r0, r3
 8011ee4:	4299      	cmp	r1, r3
 8011ee6:	d119      	bne.n	8011f1c <_strtod_l+0x944>
 8011ee8:	4ba1      	ldr	r3, [pc, #644]	; (8012170 <_strtod_l+0xb98>)
 8011eea:	459b      	cmp	fp, r3
 8011eec:	d102      	bne.n	8011ef4 <_strtod_l+0x91c>
 8011eee:	3101      	adds	r1, #1
 8011ef0:	f43f adbe 	beq.w	8011a70 <_strtod_l+0x498>
 8011ef4:	4b9d      	ldr	r3, [pc, #628]	; (801216c <_strtod_l+0xb94>)
 8011ef6:	ea0b 0303 	and.w	r3, fp, r3
 8011efa:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8011efe:	f04f 0800 	mov.w	r8, #0
 8011f02:	9b04      	ldr	r3, [sp, #16]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d186      	bne.n	8011e16 <_strtod_l+0x83e>
 8011f08:	e5bc      	b.n	8011a84 <_strtod_l+0x4ac>
 8011f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8011f0e:	e7e9      	b.n	8011ee4 <_strtod_l+0x90c>
 8011f10:	4603      	mov	r3, r0
 8011f12:	e7e7      	b.n	8011ee4 <_strtod_l+0x90c>
 8011f14:	ea53 0308 	orrs.w	r3, r3, r8
 8011f18:	f43f af6d 	beq.w	8011df6 <_strtod_l+0x81e>
 8011f1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f1e:	b1db      	cbz	r3, 8011f58 <_strtod_l+0x980>
 8011f20:	ea13 0f0b 	tst.w	r3, fp
 8011f24:	d0ed      	beq.n	8011f02 <_strtod_l+0x92a>
 8011f26:	9a04      	ldr	r2, [sp, #16]
 8011f28:	4640      	mov	r0, r8
 8011f2a:	4649      	mov	r1, r9
 8011f2c:	f1ba 0f00 	cmp.w	sl, #0
 8011f30:	d016      	beq.n	8011f60 <_strtod_l+0x988>
 8011f32:	f7ff fb34 	bl	801159e <sulp>
 8011f36:	ed9d 7b08 	vldr	d7, [sp, #32]
 8011f3a:	ee37 7b00 	vadd.f64	d7, d7, d0
 8011f3e:	ec59 8b17 	vmov	r8, r9, d7
 8011f42:	e7de      	b.n	8011f02 <_strtod_l+0x92a>
 8011f44:	4013      	ands	r3, r2
 8011f46:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011f4a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8011f4e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8011f52:	f04f 38ff 	mov.w	r8, #4294967295
 8011f56:	e7d4      	b.n	8011f02 <_strtod_l+0x92a>
 8011f58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011f5a:	ea13 0f08 	tst.w	r3, r8
 8011f5e:	e7e1      	b.n	8011f24 <_strtod_l+0x94c>
 8011f60:	f7ff fb1d 	bl	801159e <sulp>
 8011f64:	ed9d 7b08 	vldr	d7, [sp, #32]
 8011f68:	ee37 7b40 	vsub.f64	d7, d7, d0
 8011f6c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011f70:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f78:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8011f7c:	d1c1      	bne.n	8011f02 <_strtod_l+0x92a>
 8011f7e:	e5ec      	b.n	8011b5a <_strtod_l+0x582>
 8011f80:	4631      	mov	r1, r6
 8011f82:	4628      	mov	r0, r5
 8011f84:	f002 fa52 	bl	801442c <__ratio>
 8011f88:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8011f8c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f94:	d867      	bhi.n	8012066 <_strtod_l+0xa8e>
 8011f96:	f1ba 0f00 	cmp.w	sl, #0
 8011f9a:	d044      	beq.n	8012026 <_strtod_l+0xa4e>
 8011f9c:	4b75      	ldr	r3, [pc, #468]	; (8012174 <_strtod_l+0xb9c>)
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8011fa4:	4971      	ldr	r1, [pc, #452]	; (801216c <_strtod_l+0xb94>)
 8011fa6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8012180 <_strtod_l+0xba8>
 8011faa:	ea0b 0001 	and.w	r0, fp, r1
 8011fae:	4560      	cmp	r0, ip
 8011fb0:	900d      	str	r0, [sp, #52]	; 0x34
 8011fb2:	f040 808b 	bne.w	80120cc <_strtod_l+0xaf4>
 8011fb6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011fba:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8011fbe:	ec49 8b10 	vmov	d0, r8, r9
 8011fc2:	ec43 2b1c 	vmov	d12, r2, r3
 8011fc6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8011fca:	f002 f957 	bl	801427c <__ulp>
 8011fce:	ec49 8b1d 	vmov	d13, r8, r9
 8011fd2:	eeac db00 	vfma.f64	d13, d12, d0
 8011fd6:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8011fda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011fdc:	4963      	ldr	r1, [pc, #396]	; (801216c <_strtod_l+0xb94>)
 8011fde:	4a66      	ldr	r2, [pc, #408]	; (8012178 <_strtod_l+0xba0>)
 8011fe0:	4019      	ands	r1, r3
 8011fe2:	4291      	cmp	r1, r2
 8011fe4:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8011fe8:	d947      	bls.n	801207a <_strtod_l+0xaa2>
 8011fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fec:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011ff0:	4293      	cmp	r3, r2
 8011ff2:	d103      	bne.n	8011ffc <_strtod_l+0xa24>
 8011ff4:	9b08      	ldr	r3, [sp, #32]
 8011ff6:	3301      	adds	r3, #1
 8011ff8:	f43f ad3a 	beq.w	8011a70 <_strtod_l+0x498>
 8011ffc:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8012170 <_strtod_l+0xb98>
 8012000:	f04f 38ff 	mov.w	r8, #4294967295
 8012004:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012006:	4620      	mov	r0, r4
 8012008:	f001 fe0c 	bl	8013c24 <_Bfree>
 801200c:	4639      	mov	r1, r7
 801200e:	4620      	mov	r0, r4
 8012010:	f001 fe08 	bl	8013c24 <_Bfree>
 8012014:	4631      	mov	r1, r6
 8012016:	4620      	mov	r0, r4
 8012018:	f001 fe04 	bl	8013c24 <_Bfree>
 801201c:	4629      	mov	r1, r5
 801201e:	4620      	mov	r0, r4
 8012020:	f001 fe00 	bl	8013c24 <_Bfree>
 8012024:	e60f      	b.n	8011c46 <_strtod_l+0x66e>
 8012026:	f1b8 0f00 	cmp.w	r8, #0
 801202a:	d112      	bne.n	8012052 <_strtod_l+0xa7a>
 801202c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012030:	b9b3      	cbnz	r3, 8012060 <_strtod_l+0xa88>
 8012032:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8012036:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801203a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801203e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8012042:	d401      	bmi.n	8012048 <_strtod_l+0xa70>
 8012044:	ee20 8b08 	vmul.f64	d8, d0, d8
 8012048:	eeb1 7b48 	vneg.f64	d7, d8
 801204c:	ec53 2b17 	vmov	r2, r3, d7
 8012050:	e7a8      	b.n	8011fa4 <_strtod_l+0x9cc>
 8012052:	f1b8 0f01 	cmp.w	r8, #1
 8012056:	d103      	bne.n	8012060 <_strtod_l+0xa88>
 8012058:	f1b9 0f00 	cmp.w	r9, #0
 801205c:	f43f ad7d 	beq.w	8011b5a <_strtod_l+0x582>
 8012060:	4b46      	ldr	r3, [pc, #280]	; (801217c <_strtod_l+0xba4>)
 8012062:	2200      	movs	r2, #0
 8012064:	e79c      	b.n	8011fa0 <_strtod_l+0x9c8>
 8012066:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801206a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801206e:	f1ba 0f00 	cmp.w	sl, #0
 8012072:	d0e9      	beq.n	8012048 <_strtod_l+0xa70>
 8012074:	ec53 2b18 	vmov	r2, r3, d8
 8012078:	e794      	b.n	8011fa4 <_strtod_l+0x9cc>
 801207a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801207e:	9b04      	ldr	r3, [sp, #16]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d1bf      	bne.n	8012004 <_strtod_l+0xa2c>
 8012084:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012088:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801208a:	0d1b      	lsrs	r3, r3, #20
 801208c:	051b      	lsls	r3, r3, #20
 801208e:	429a      	cmp	r2, r3
 8012090:	d1b8      	bne.n	8012004 <_strtod_l+0xa2c>
 8012092:	ec51 0b18 	vmov	r0, r1, d8
 8012096:	f7ee fb5f 	bl	8000758 <__aeabi_d2lz>
 801209a:	f7ee fb17 	bl	80006cc <__aeabi_l2d>
 801209e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80120a2:	ec41 0b17 	vmov	d7, r0, r1
 80120a6:	ea43 0308 	orr.w	r3, r3, r8
 80120aa:	ea53 030a 	orrs.w	r3, r3, sl
 80120ae:	ee38 8b47 	vsub.f64	d8, d8, d7
 80120b2:	d03e      	beq.n	8012132 <_strtod_l+0xb5a>
 80120b4:	eeb4 8bca 	vcmpe.f64	d8, d10
 80120b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120bc:	f53f ace2 	bmi.w	8011a84 <_strtod_l+0x4ac>
 80120c0:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80120c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120c8:	dd9c      	ble.n	8012004 <_strtod_l+0xa2c>
 80120ca:	e4db      	b.n	8011a84 <_strtod_l+0x4ac>
 80120cc:	9904      	ldr	r1, [sp, #16]
 80120ce:	b301      	cbz	r1, 8012112 <_strtod_l+0xb3a>
 80120d0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80120d2:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80120d6:	d81c      	bhi.n	8012112 <_strtod_l+0xb3a>
 80120d8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8012160 <_strtod_l+0xb88>
 80120dc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80120e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120e4:	d811      	bhi.n	801210a <_strtod_l+0xb32>
 80120e6:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80120ea:	ee18 3a10 	vmov	r3, s16
 80120ee:	2b01      	cmp	r3, #1
 80120f0:	bf38      	it	cc
 80120f2:	2301      	movcc	r3, #1
 80120f4:	ee08 3a10 	vmov	s16, r3
 80120f8:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80120fc:	f1ba 0f00 	cmp.w	sl, #0
 8012100:	d114      	bne.n	801212c <_strtod_l+0xb54>
 8012102:	eeb1 7b48 	vneg.f64	d7, d8
 8012106:	ec53 2b17 	vmov	r2, r3, d7
 801210a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801210c:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8012110:	1a0b      	subs	r3, r1, r0
 8012112:	ed9d 0b08 	vldr	d0, [sp, #32]
 8012116:	ec43 2b1c 	vmov	d12, r2, r3
 801211a:	f002 f8af 	bl	801427c <__ulp>
 801211e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8012122:	eeac 7b00 	vfma.f64	d7, d12, d0
 8012126:	ec59 8b17 	vmov	r8, r9, d7
 801212a:	e7a8      	b.n	801207e <_strtod_l+0xaa6>
 801212c:	ec53 2b18 	vmov	r2, r3, d8
 8012130:	e7eb      	b.n	801210a <_strtod_l+0xb32>
 8012132:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8012136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801213a:	f57f af63 	bpl.w	8012004 <_strtod_l+0xa2c>
 801213e:	e4a1      	b.n	8011a84 <_strtod_l+0x4ac>
 8012140:	2300      	movs	r3, #0
 8012142:	930b      	str	r3, [sp, #44]	; 0x2c
 8012144:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012146:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012148:	6013      	str	r3, [r2, #0]
 801214a:	f7ff ba8d 	b.w	8011668 <_strtod_l+0x90>
 801214e:	2a65      	cmp	r2, #101	; 0x65
 8012150:	f43f ab89 	beq.w	8011866 <_strtod_l+0x28e>
 8012154:	2a45      	cmp	r2, #69	; 0x45
 8012156:	f43f ab86 	beq.w	8011866 <_strtod_l+0x28e>
 801215a:	2101      	movs	r1, #1
 801215c:	f7ff bbbe 	b.w	80118dc <_strtod_l+0x304>
 8012160:	ffc00000 	.word	0xffc00000
 8012164:	41dfffff 	.word	0x41dfffff
 8012168:	000fffff 	.word	0x000fffff
 801216c:	7ff00000 	.word	0x7ff00000
 8012170:	7fefffff 	.word	0x7fefffff
 8012174:	3ff00000 	.word	0x3ff00000
 8012178:	7c9fffff 	.word	0x7c9fffff
 801217c:	bff00000 	.word	0xbff00000
 8012180:	7fe00000 	.word	0x7fe00000

08012184 <_strtod_r>:
 8012184:	4b01      	ldr	r3, [pc, #4]	; (801218c <_strtod_r+0x8>)
 8012186:	f7ff ba27 	b.w	80115d8 <_strtod_l>
 801218a:	bf00      	nop
 801218c:	2400a158 	.word	0x2400a158

08012190 <_strtol_l.isra.0>:
 8012190:	2b01      	cmp	r3, #1
 8012192:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012196:	d001      	beq.n	801219c <_strtol_l.isra.0+0xc>
 8012198:	2b24      	cmp	r3, #36	; 0x24
 801219a:	d906      	bls.n	80121aa <_strtol_l.isra.0+0x1a>
 801219c:	f7fe f81a 	bl	80101d4 <__errno>
 80121a0:	2316      	movs	r3, #22
 80121a2:	6003      	str	r3, [r0, #0]
 80121a4:	2000      	movs	r0, #0
 80121a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121aa:	4f3a      	ldr	r7, [pc, #232]	; (8012294 <_strtol_l.isra.0+0x104>)
 80121ac:	468e      	mov	lr, r1
 80121ae:	4676      	mov	r6, lr
 80121b0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80121b4:	5de5      	ldrb	r5, [r4, r7]
 80121b6:	f015 0508 	ands.w	r5, r5, #8
 80121ba:	d1f8      	bne.n	80121ae <_strtol_l.isra.0+0x1e>
 80121bc:	2c2d      	cmp	r4, #45	; 0x2d
 80121be:	d134      	bne.n	801222a <_strtol_l.isra.0+0x9a>
 80121c0:	f89e 4000 	ldrb.w	r4, [lr]
 80121c4:	f04f 0801 	mov.w	r8, #1
 80121c8:	f106 0e02 	add.w	lr, r6, #2
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d05c      	beq.n	801228a <_strtol_l.isra.0+0xfa>
 80121d0:	2b10      	cmp	r3, #16
 80121d2:	d10c      	bne.n	80121ee <_strtol_l.isra.0+0x5e>
 80121d4:	2c30      	cmp	r4, #48	; 0x30
 80121d6:	d10a      	bne.n	80121ee <_strtol_l.isra.0+0x5e>
 80121d8:	f89e 4000 	ldrb.w	r4, [lr]
 80121dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80121e0:	2c58      	cmp	r4, #88	; 0x58
 80121e2:	d14d      	bne.n	8012280 <_strtol_l.isra.0+0xf0>
 80121e4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80121e8:	2310      	movs	r3, #16
 80121ea:	f10e 0e02 	add.w	lr, lr, #2
 80121ee:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80121f2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80121f6:	2600      	movs	r6, #0
 80121f8:	fbbc f9f3 	udiv	r9, ip, r3
 80121fc:	4635      	mov	r5, r6
 80121fe:	fb03 ca19 	mls	sl, r3, r9, ip
 8012202:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8012206:	2f09      	cmp	r7, #9
 8012208:	d818      	bhi.n	801223c <_strtol_l.isra.0+0xac>
 801220a:	463c      	mov	r4, r7
 801220c:	42a3      	cmp	r3, r4
 801220e:	dd24      	ble.n	801225a <_strtol_l.isra.0+0xca>
 8012210:	2e00      	cmp	r6, #0
 8012212:	db1f      	blt.n	8012254 <_strtol_l.isra.0+0xc4>
 8012214:	45a9      	cmp	r9, r5
 8012216:	d31d      	bcc.n	8012254 <_strtol_l.isra.0+0xc4>
 8012218:	d101      	bne.n	801221e <_strtol_l.isra.0+0x8e>
 801221a:	45a2      	cmp	sl, r4
 801221c:	db1a      	blt.n	8012254 <_strtol_l.isra.0+0xc4>
 801221e:	fb05 4503 	mla	r5, r5, r3, r4
 8012222:	2601      	movs	r6, #1
 8012224:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8012228:	e7eb      	b.n	8012202 <_strtol_l.isra.0+0x72>
 801222a:	2c2b      	cmp	r4, #43	; 0x2b
 801222c:	bf08      	it	eq
 801222e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8012232:	46a8      	mov	r8, r5
 8012234:	bf08      	it	eq
 8012236:	f106 0e02 	addeq.w	lr, r6, #2
 801223a:	e7c7      	b.n	80121cc <_strtol_l.isra.0+0x3c>
 801223c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8012240:	2f19      	cmp	r7, #25
 8012242:	d801      	bhi.n	8012248 <_strtol_l.isra.0+0xb8>
 8012244:	3c37      	subs	r4, #55	; 0x37
 8012246:	e7e1      	b.n	801220c <_strtol_l.isra.0+0x7c>
 8012248:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801224c:	2f19      	cmp	r7, #25
 801224e:	d804      	bhi.n	801225a <_strtol_l.isra.0+0xca>
 8012250:	3c57      	subs	r4, #87	; 0x57
 8012252:	e7db      	b.n	801220c <_strtol_l.isra.0+0x7c>
 8012254:	f04f 36ff 	mov.w	r6, #4294967295
 8012258:	e7e4      	b.n	8012224 <_strtol_l.isra.0+0x94>
 801225a:	2e00      	cmp	r6, #0
 801225c:	da05      	bge.n	801226a <_strtol_l.isra.0+0xda>
 801225e:	2322      	movs	r3, #34	; 0x22
 8012260:	6003      	str	r3, [r0, #0]
 8012262:	4665      	mov	r5, ip
 8012264:	b942      	cbnz	r2, 8012278 <_strtol_l.isra.0+0xe8>
 8012266:	4628      	mov	r0, r5
 8012268:	e79d      	b.n	80121a6 <_strtol_l.isra.0+0x16>
 801226a:	f1b8 0f00 	cmp.w	r8, #0
 801226e:	d000      	beq.n	8012272 <_strtol_l.isra.0+0xe2>
 8012270:	426d      	negs	r5, r5
 8012272:	2a00      	cmp	r2, #0
 8012274:	d0f7      	beq.n	8012266 <_strtol_l.isra.0+0xd6>
 8012276:	b10e      	cbz	r6, 801227c <_strtol_l.isra.0+0xec>
 8012278:	f10e 31ff 	add.w	r1, lr, #4294967295
 801227c:	6011      	str	r1, [r2, #0]
 801227e:	e7f2      	b.n	8012266 <_strtol_l.isra.0+0xd6>
 8012280:	2430      	movs	r4, #48	; 0x30
 8012282:	2b00      	cmp	r3, #0
 8012284:	d1b3      	bne.n	80121ee <_strtol_l.isra.0+0x5e>
 8012286:	2308      	movs	r3, #8
 8012288:	e7b1      	b.n	80121ee <_strtol_l.isra.0+0x5e>
 801228a:	2c30      	cmp	r4, #48	; 0x30
 801228c:	d0a4      	beq.n	80121d8 <_strtol_l.isra.0+0x48>
 801228e:	230a      	movs	r3, #10
 8012290:	e7ad      	b.n	80121ee <_strtol_l.isra.0+0x5e>
 8012292:	bf00      	nop
 8012294:	0801dca1 	.word	0x0801dca1

08012298 <_strtol_r>:
 8012298:	f7ff bf7a 	b.w	8012190 <_strtol_l.isra.0>

0801229c <__swbuf_r>:
 801229c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801229e:	460e      	mov	r6, r1
 80122a0:	4614      	mov	r4, r2
 80122a2:	4605      	mov	r5, r0
 80122a4:	b118      	cbz	r0, 80122ae <__swbuf_r+0x12>
 80122a6:	6983      	ldr	r3, [r0, #24]
 80122a8:	b90b      	cbnz	r3, 80122ae <__swbuf_r+0x12>
 80122aa:	f000 ffe5 	bl	8013278 <__sinit>
 80122ae:	4b21      	ldr	r3, [pc, #132]	; (8012334 <__swbuf_r+0x98>)
 80122b0:	429c      	cmp	r4, r3
 80122b2:	d12b      	bne.n	801230c <__swbuf_r+0x70>
 80122b4:	686c      	ldr	r4, [r5, #4]
 80122b6:	69a3      	ldr	r3, [r4, #24]
 80122b8:	60a3      	str	r3, [r4, #8]
 80122ba:	89a3      	ldrh	r3, [r4, #12]
 80122bc:	071a      	lsls	r2, r3, #28
 80122be:	d52f      	bpl.n	8012320 <__swbuf_r+0x84>
 80122c0:	6923      	ldr	r3, [r4, #16]
 80122c2:	b36b      	cbz	r3, 8012320 <__swbuf_r+0x84>
 80122c4:	6923      	ldr	r3, [r4, #16]
 80122c6:	6820      	ldr	r0, [r4, #0]
 80122c8:	1ac0      	subs	r0, r0, r3
 80122ca:	6963      	ldr	r3, [r4, #20]
 80122cc:	b2f6      	uxtb	r6, r6
 80122ce:	4283      	cmp	r3, r0
 80122d0:	4637      	mov	r7, r6
 80122d2:	dc04      	bgt.n	80122de <__swbuf_r+0x42>
 80122d4:	4621      	mov	r1, r4
 80122d6:	4628      	mov	r0, r5
 80122d8:	f000 ff3a 	bl	8013150 <_fflush_r>
 80122dc:	bb30      	cbnz	r0, 801232c <__swbuf_r+0x90>
 80122de:	68a3      	ldr	r3, [r4, #8]
 80122e0:	3b01      	subs	r3, #1
 80122e2:	60a3      	str	r3, [r4, #8]
 80122e4:	6823      	ldr	r3, [r4, #0]
 80122e6:	1c5a      	adds	r2, r3, #1
 80122e8:	6022      	str	r2, [r4, #0]
 80122ea:	701e      	strb	r6, [r3, #0]
 80122ec:	6963      	ldr	r3, [r4, #20]
 80122ee:	3001      	adds	r0, #1
 80122f0:	4283      	cmp	r3, r0
 80122f2:	d004      	beq.n	80122fe <__swbuf_r+0x62>
 80122f4:	89a3      	ldrh	r3, [r4, #12]
 80122f6:	07db      	lsls	r3, r3, #31
 80122f8:	d506      	bpl.n	8012308 <__swbuf_r+0x6c>
 80122fa:	2e0a      	cmp	r6, #10
 80122fc:	d104      	bne.n	8012308 <__swbuf_r+0x6c>
 80122fe:	4621      	mov	r1, r4
 8012300:	4628      	mov	r0, r5
 8012302:	f000 ff25 	bl	8013150 <_fflush_r>
 8012306:	b988      	cbnz	r0, 801232c <__swbuf_r+0x90>
 8012308:	4638      	mov	r0, r7
 801230a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801230c:	4b0a      	ldr	r3, [pc, #40]	; (8012338 <__swbuf_r+0x9c>)
 801230e:	429c      	cmp	r4, r3
 8012310:	d101      	bne.n	8012316 <__swbuf_r+0x7a>
 8012312:	68ac      	ldr	r4, [r5, #8]
 8012314:	e7cf      	b.n	80122b6 <__swbuf_r+0x1a>
 8012316:	4b09      	ldr	r3, [pc, #36]	; (801233c <__swbuf_r+0xa0>)
 8012318:	429c      	cmp	r4, r3
 801231a:	bf08      	it	eq
 801231c:	68ec      	ldreq	r4, [r5, #12]
 801231e:	e7ca      	b.n	80122b6 <__swbuf_r+0x1a>
 8012320:	4621      	mov	r1, r4
 8012322:	4628      	mov	r0, r5
 8012324:	f000 f80c 	bl	8012340 <__swsetup_r>
 8012328:	2800      	cmp	r0, #0
 801232a:	d0cb      	beq.n	80122c4 <__swbuf_r+0x28>
 801232c:	f04f 37ff 	mov.w	r7, #4294967295
 8012330:	e7ea      	b.n	8012308 <__swbuf_r+0x6c>
 8012332:	bf00      	nop
 8012334:	0801de58 	.word	0x0801de58
 8012338:	0801de78 	.word	0x0801de78
 801233c:	0801de38 	.word	0x0801de38

08012340 <__swsetup_r>:
 8012340:	4b32      	ldr	r3, [pc, #200]	; (801240c <__swsetup_r+0xcc>)
 8012342:	b570      	push	{r4, r5, r6, lr}
 8012344:	681d      	ldr	r5, [r3, #0]
 8012346:	4606      	mov	r6, r0
 8012348:	460c      	mov	r4, r1
 801234a:	b125      	cbz	r5, 8012356 <__swsetup_r+0x16>
 801234c:	69ab      	ldr	r3, [r5, #24]
 801234e:	b913      	cbnz	r3, 8012356 <__swsetup_r+0x16>
 8012350:	4628      	mov	r0, r5
 8012352:	f000 ff91 	bl	8013278 <__sinit>
 8012356:	4b2e      	ldr	r3, [pc, #184]	; (8012410 <__swsetup_r+0xd0>)
 8012358:	429c      	cmp	r4, r3
 801235a:	d10f      	bne.n	801237c <__swsetup_r+0x3c>
 801235c:	686c      	ldr	r4, [r5, #4]
 801235e:	89a3      	ldrh	r3, [r4, #12]
 8012360:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012364:	0719      	lsls	r1, r3, #28
 8012366:	d42c      	bmi.n	80123c2 <__swsetup_r+0x82>
 8012368:	06dd      	lsls	r5, r3, #27
 801236a:	d411      	bmi.n	8012390 <__swsetup_r+0x50>
 801236c:	2309      	movs	r3, #9
 801236e:	6033      	str	r3, [r6, #0]
 8012370:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012374:	81a3      	strh	r3, [r4, #12]
 8012376:	f04f 30ff 	mov.w	r0, #4294967295
 801237a:	e03e      	b.n	80123fa <__swsetup_r+0xba>
 801237c:	4b25      	ldr	r3, [pc, #148]	; (8012414 <__swsetup_r+0xd4>)
 801237e:	429c      	cmp	r4, r3
 8012380:	d101      	bne.n	8012386 <__swsetup_r+0x46>
 8012382:	68ac      	ldr	r4, [r5, #8]
 8012384:	e7eb      	b.n	801235e <__swsetup_r+0x1e>
 8012386:	4b24      	ldr	r3, [pc, #144]	; (8012418 <__swsetup_r+0xd8>)
 8012388:	429c      	cmp	r4, r3
 801238a:	bf08      	it	eq
 801238c:	68ec      	ldreq	r4, [r5, #12]
 801238e:	e7e6      	b.n	801235e <__swsetup_r+0x1e>
 8012390:	0758      	lsls	r0, r3, #29
 8012392:	d512      	bpl.n	80123ba <__swsetup_r+0x7a>
 8012394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012396:	b141      	cbz	r1, 80123aa <__swsetup_r+0x6a>
 8012398:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801239c:	4299      	cmp	r1, r3
 801239e:	d002      	beq.n	80123a6 <__swsetup_r+0x66>
 80123a0:	4630      	mov	r0, r6
 80123a2:	f7fd ff93 	bl	80102cc <_free_r>
 80123a6:	2300      	movs	r3, #0
 80123a8:	6363      	str	r3, [r4, #52]	; 0x34
 80123aa:	89a3      	ldrh	r3, [r4, #12]
 80123ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80123b0:	81a3      	strh	r3, [r4, #12]
 80123b2:	2300      	movs	r3, #0
 80123b4:	6063      	str	r3, [r4, #4]
 80123b6:	6923      	ldr	r3, [r4, #16]
 80123b8:	6023      	str	r3, [r4, #0]
 80123ba:	89a3      	ldrh	r3, [r4, #12]
 80123bc:	f043 0308 	orr.w	r3, r3, #8
 80123c0:	81a3      	strh	r3, [r4, #12]
 80123c2:	6923      	ldr	r3, [r4, #16]
 80123c4:	b94b      	cbnz	r3, 80123da <__swsetup_r+0x9a>
 80123c6:	89a3      	ldrh	r3, [r4, #12]
 80123c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80123cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80123d0:	d003      	beq.n	80123da <__swsetup_r+0x9a>
 80123d2:	4621      	mov	r1, r4
 80123d4:	4630      	mov	r0, r6
 80123d6:	f001 fb87 	bl	8013ae8 <__smakebuf_r>
 80123da:	89a0      	ldrh	r0, [r4, #12]
 80123dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80123e0:	f010 0301 	ands.w	r3, r0, #1
 80123e4:	d00a      	beq.n	80123fc <__swsetup_r+0xbc>
 80123e6:	2300      	movs	r3, #0
 80123e8:	60a3      	str	r3, [r4, #8]
 80123ea:	6963      	ldr	r3, [r4, #20]
 80123ec:	425b      	negs	r3, r3
 80123ee:	61a3      	str	r3, [r4, #24]
 80123f0:	6923      	ldr	r3, [r4, #16]
 80123f2:	b943      	cbnz	r3, 8012406 <__swsetup_r+0xc6>
 80123f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80123f8:	d1ba      	bne.n	8012370 <__swsetup_r+0x30>
 80123fa:	bd70      	pop	{r4, r5, r6, pc}
 80123fc:	0781      	lsls	r1, r0, #30
 80123fe:	bf58      	it	pl
 8012400:	6963      	ldrpl	r3, [r4, #20]
 8012402:	60a3      	str	r3, [r4, #8]
 8012404:	e7f4      	b.n	80123f0 <__swsetup_r+0xb0>
 8012406:	2000      	movs	r0, #0
 8012408:	e7f7      	b.n	80123fa <__swsetup_r+0xba>
 801240a:	bf00      	nop
 801240c:	2400a0f0 	.word	0x2400a0f0
 8012410:	0801de58 	.word	0x0801de58
 8012414:	0801de78 	.word	0x0801de78
 8012418:	0801de38 	.word	0x0801de38

0801241c <abort>:
 801241c:	b508      	push	{r3, lr}
 801241e:	2006      	movs	r0, #6
 8012420:	f002 fa3e 	bl	80148a0 <raise>
 8012424:	2001      	movs	r0, #1
 8012426:	f7ef fa39 	bl	800189c <_exit>

0801242a <quorem>:
 801242a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801242e:	6903      	ldr	r3, [r0, #16]
 8012430:	690c      	ldr	r4, [r1, #16]
 8012432:	42a3      	cmp	r3, r4
 8012434:	4607      	mov	r7, r0
 8012436:	f2c0 8081 	blt.w	801253c <quorem+0x112>
 801243a:	3c01      	subs	r4, #1
 801243c:	f101 0814 	add.w	r8, r1, #20
 8012440:	f100 0514 	add.w	r5, r0, #20
 8012444:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012448:	9301      	str	r3, [sp, #4]
 801244a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801244e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012452:	3301      	adds	r3, #1
 8012454:	429a      	cmp	r2, r3
 8012456:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801245a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801245e:	fbb2 f6f3 	udiv	r6, r2, r3
 8012462:	d331      	bcc.n	80124c8 <quorem+0x9e>
 8012464:	f04f 0e00 	mov.w	lr, #0
 8012468:	4640      	mov	r0, r8
 801246a:	46ac      	mov	ip, r5
 801246c:	46f2      	mov	sl, lr
 801246e:	f850 2b04 	ldr.w	r2, [r0], #4
 8012472:	b293      	uxth	r3, r2
 8012474:	fb06 e303 	mla	r3, r6, r3, lr
 8012478:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801247c:	b29b      	uxth	r3, r3
 801247e:	ebaa 0303 	sub.w	r3, sl, r3
 8012482:	0c12      	lsrs	r2, r2, #16
 8012484:	f8dc a000 	ldr.w	sl, [ip]
 8012488:	fb06 e202 	mla	r2, r6, r2, lr
 801248c:	fa13 f38a 	uxtah	r3, r3, sl
 8012490:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012494:	fa1f fa82 	uxth.w	sl, r2
 8012498:	f8dc 2000 	ldr.w	r2, [ip]
 801249c:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80124a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80124a4:	b29b      	uxth	r3, r3
 80124a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80124aa:	4581      	cmp	r9, r0
 80124ac:	f84c 3b04 	str.w	r3, [ip], #4
 80124b0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80124b4:	d2db      	bcs.n	801246e <quorem+0x44>
 80124b6:	f855 300b 	ldr.w	r3, [r5, fp]
 80124ba:	b92b      	cbnz	r3, 80124c8 <quorem+0x9e>
 80124bc:	9b01      	ldr	r3, [sp, #4]
 80124be:	3b04      	subs	r3, #4
 80124c0:	429d      	cmp	r5, r3
 80124c2:	461a      	mov	r2, r3
 80124c4:	d32e      	bcc.n	8012524 <quorem+0xfa>
 80124c6:	613c      	str	r4, [r7, #16]
 80124c8:	4638      	mov	r0, r7
 80124ca:	f001 fe33 	bl	8014134 <__mcmp>
 80124ce:	2800      	cmp	r0, #0
 80124d0:	db24      	blt.n	801251c <quorem+0xf2>
 80124d2:	3601      	adds	r6, #1
 80124d4:	4628      	mov	r0, r5
 80124d6:	f04f 0c00 	mov.w	ip, #0
 80124da:	f858 2b04 	ldr.w	r2, [r8], #4
 80124de:	f8d0 e000 	ldr.w	lr, [r0]
 80124e2:	b293      	uxth	r3, r2
 80124e4:	ebac 0303 	sub.w	r3, ip, r3
 80124e8:	0c12      	lsrs	r2, r2, #16
 80124ea:	fa13 f38e 	uxtah	r3, r3, lr
 80124ee:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80124f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80124f6:	b29b      	uxth	r3, r3
 80124f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80124fc:	45c1      	cmp	r9, r8
 80124fe:	f840 3b04 	str.w	r3, [r0], #4
 8012502:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012506:	d2e8      	bcs.n	80124da <quorem+0xb0>
 8012508:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801250c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012510:	b922      	cbnz	r2, 801251c <quorem+0xf2>
 8012512:	3b04      	subs	r3, #4
 8012514:	429d      	cmp	r5, r3
 8012516:	461a      	mov	r2, r3
 8012518:	d30a      	bcc.n	8012530 <quorem+0x106>
 801251a:	613c      	str	r4, [r7, #16]
 801251c:	4630      	mov	r0, r6
 801251e:	b003      	add	sp, #12
 8012520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012524:	6812      	ldr	r2, [r2, #0]
 8012526:	3b04      	subs	r3, #4
 8012528:	2a00      	cmp	r2, #0
 801252a:	d1cc      	bne.n	80124c6 <quorem+0x9c>
 801252c:	3c01      	subs	r4, #1
 801252e:	e7c7      	b.n	80124c0 <quorem+0x96>
 8012530:	6812      	ldr	r2, [r2, #0]
 8012532:	3b04      	subs	r3, #4
 8012534:	2a00      	cmp	r2, #0
 8012536:	d1f0      	bne.n	801251a <quorem+0xf0>
 8012538:	3c01      	subs	r4, #1
 801253a:	e7eb      	b.n	8012514 <quorem+0xea>
 801253c:	2000      	movs	r0, #0
 801253e:	e7ee      	b.n	801251e <quorem+0xf4>

08012540 <_dtoa_r>:
 8012540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012544:	ec59 8b10 	vmov	r8, r9, d0
 8012548:	b095      	sub	sp, #84	; 0x54
 801254a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801254c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801254e:	9107      	str	r1, [sp, #28]
 8012550:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8012554:	4606      	mov	r6, r0
 8012556:	9209      	str	r2, [sp, #36]	; 0x24
 8012558:	9310      	str	r3, [sp, #64]	; 0x40
 801255a:	b975      	cbnz	r5, 801257a <_dtoa_r+0x3a>
 801255c:	2010      	movs	r0, #16
 801255e:	f7fd fe75 	bl	801024c <malloc>
 8012562:	4602      	mov	r2, r0
 8012564:	6270      	str	r0, [r6, #36]	; 0x24
 8012566:	b920      	cbnz	r0, 8012572 <_dtoa_r+0x32>
 8012568:	4bab      	ldr	r3, [pc, #684]	; (8012818 <_dtoa_r+0x2d8>)
 801256a:	21ea      	movs	r1, #234	; 0xea
 801256c:	48ab      	ldr	r0, [pc, #684]	; (801281c <_dtoa_r+0x2dc>)
 801256e:	f7fd fe13 	bl	8010198 <__assert_func>
 8012572:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012576:	6005      	str	r5, [r0, #0]
 8012578:	60c5      	str	r5, [r0, #12]
 801257a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801257c:	6819      	ldr	r1, [r3, #0]
 801257e:	b151      	cbz	r1, 8012596 <_dtoa_r+0x56>
 8012580:	685a      	ldr	r2, [r3, #4]
 8012582:	604a      	str	r2, [r1, #4]
 8012584:	2301      	movs	r3, #1
 8012586:	4093      	lsls	r3, r2
 8012588:	608b      	str	r3, [r1, #8]
 801258a:	4630      	mov	r0, r6
 801258c:	f001 fb4a 	bl	8013c24 <_Bfree>
 8012590:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012592:	2200      	movs	r2, #0
 8012594:	601a      	str	r2, [r3, #0]
 8012596:	f1b9 0300 	subs.w	r3, r9, #0
 801259a:	bfbb      	ittet	lt
 801259c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80125a0:	9303      	strlt	r3, [sp, #12]
 80125a2:	2300      	movge	r3, #0
 80125a4:	2201      	movlt	r2, #1
 80125a6:	bfac      	ite	ge
 80125a8:	6023      	strge	r3, [r4, #0]
 80125aa:	6022      	strlt	r2, [r4, #0]
 80125ac:	4b9c      	ldr	r3, [pc, #624]	; (8012820 <_dtoa_r+0x2e0>)
 80125ae:	9c03      	ldr	r4, [sp, #12]
 80125b0:	43a3      	bics	r3, r4
 80125b2:	d11a      	bne.n	80125ea <_dtoa_r+0xaa>
 80125b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80125b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80125ba:	6013      	str	r3, [r2, #0]
 80125bc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80125c0:	ea53 0308 	orrs.w	r3, r3, r8
 80125c4:	f000 8512 	beq.w	8012fec <_dtoa_r+0xaac>
 80125c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80125ca:	b953      	cbnz	r3, 80125e2 <_dtoa_r+0xa2>
 80125cc:	4b95      	ldr	r3, [pc, #596]	; (8012824 <_dtoa_r+0x2e4>)
 80125ce:	e01f      	b.n	8012610 <_dtoa_r+0xd0>
 80125d0:	4b95      	ldr	r3, [pc, #596]	; (8012828 <_dtoa_r+0x2e8>)
 80125d2:	9300      	str	r3, [sp, #0]
 80125d4:	3308      	adds	r3, #8
 80125d6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80125d8:	6013      	str	r3, [r2, #0]
 80125da:	9800      	ldr	r0, [sp, #0]
 80125dc:	b015      	add	sp, #84	; 0x54
 80125de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125e2:	4b90      	ldr	r3, [pc, #576]	; (8012824 <_dtoa_r+0x2e4>)
 80125e4:	9300      	str	r3, [sp, #0]
 80125e6:	3303      	adds	r3, #3
 80125e8:	e7f5      	b.n	80125d6 <_dtoa_r+0x96>
 80125ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80125ee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80125f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125f6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80125fa:	d10b      	bne.n	8012614 <_dtoa_r+0xd4>
 80125fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80125fe:	2301      	movs	r3, #1
 8012600:	6013      	str	r3, [r2, #0]
 8012602:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012604:	2b00      	cmp	r3, #0
 8012606:	f000 84ee 	beq.w	8012fe6 <_dtoa_r+0xaa6>
 801260a:	4888      	ldr	r0, [pc, #544]	; (801282c <_dtoa_r+0x2ec>)
 801260c:	6018      	str	r0, [r3, #0]
 801260e:	1e43      	subs	r3, r0, #1
 8012610:	9300      	str	r3, [sp, #0]
 8012612:	e7e2      	b.n	80125da <_dtoa_r+0x9a>
 8012614:	a913      	add	r1, sp, #76	; 0x4c
 8012616:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801261a:	aa12      	add	r2, sp, #72	; 0x48
 801261c:	4630      	mov	r0, r6
 801261e:	f001 fea9 	bl	8014374 <__d2b>
 8012622:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8012626:	4605      	mov	r5, r0
 8012628:	9812      	ldr	r0, [sp, #72]	; 0x48
 801262a:	2900      	cmp	r1, #0
 801262c:	d047      	beq.n	80126be <_dtoa_r+0x17e>
 801262e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8012630:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012634:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012638:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801263c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012640:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8012644:	2400      	movs	r4, #0
 8012646:	ec43 2b16 	vmov	d6, r2, r3
 801264a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801264e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8012800 <_dtoa_r+0x2c0>
 8012652:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012656:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8012808 <_dtoa_r+0x2c8>
 801265a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801265e:	eeb0 7b46 	vmov.f64	d7, d6
 8012662:	ee06 1a90 	vmov	s13, r1
 8012666:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801266a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8012810 <_dtoa_r+0x2d0>
 801266e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012672:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012676:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801267a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801267e:	ee16 ba90 	vmov	fp, s13
 8012682:	9411      	str	r4, [sp, #68]	; 0x44
 8012684:	d508      	bpl.n	8012698 <_dtoa_r+0x158>
 8012686:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801268a:	eeb4 6b47 	vcmp.f64	d6, d7
 801268e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012692:	bf18      	it	ne
 8012694:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8012698:	f1bb 0f16 	cmp.w	fp, #22
 801269c:	d832      	bhi.n	8012704 <_dtoa_r+0x1c4>
 801269e:	4b64      	ldr	r3, [pc, #400]	; (8012830 <_dtoa_r+0x2f0>)
 80126a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80126a4:	ed93 7b00 	vldr	d7, [r3]
 80126a8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80126ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80126b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126b4:	d501      	bpl.n	80126ba <_dtoa_r+0x17a>
 80126b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80126ba:	2300      	movs	r3, #0
 80126bc:	e023      	b.n	8012706 <_dtoa_r+0x1c6>
 80126be:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80126c0:	4401      	add	r1, r0
 80126c2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80126c6:	2b20      	cmp	r3, #32
 80126c8:	bfc3      	ittte	gt
 80126ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80126ce:	fa04 f303 	lslgt.w	r3, r4, r3
 80126d2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80126d6:	f1c3 0320 	rsble	r3, r3, #32
 80126da:	bfc6      	itte	gt
 80126dc:	fa28 f804 	lsrgt.w	r8, r8, r4
 80126e0:	ea43 0308 	orrgt.w	r3, r3, r8
 80126e4:	fa08 f303 	lslle.w	r3, r8, r3
 80126e8:	ee07 3a90 	vmov	s15, r3
 80126ec:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80126f0:	3901      	subs	r1, #1
 80126f2:	ed8d 7b00 	vstr	d7, [sp]
 80126f6:	9c01      	ldr	r4, [sp, #4]
 80126f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80126fc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8012700:	2401      	movs	r4, #1
 8012702:	e7a0      	b.n	8012646 <_dtoa_r+0x106>
 8012704:	2301      	movs	r3, #1
 8012706:	930f      	str	r3, [sp, #60]	; 0x3c
 8012708:	1a43      	subs	r3, r0, r1
 801270a:	1e5a      	subs	r2, r3, #1
 801270c:	bf45      	ittet	mi
 801270e:	f1c3 0301 	rsbmi	r3, r3, #1
 8012712:	9305      	strmi	r3, [sp, #20]
 8012714:	2300      	movpl	r3, #0
 8012716:	2300      	movmi	r3, #0
 8012718:	9206      	str	r2, [sp, #24]
 801271a:	bf54      	ite	pl
 801271c:	9305      	strpl	r3, [sp, #20]
 801271e:	9306      	strmi	r3, [sp, #24]
 8012720:	f1bb 0f00 	cmp.w	fp, #0
 8012724:	db18      	blt.n	8012758 <_dtoa_r+0x218>
 8012726:	9b06      	ldr	r3, [sp, #24]
 8012728:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801272c:	445b      	add	r3, fp
 801272e:	9306      	str	r3, [sp, #24]
 8012730:	2300      	movs	r3, #0
 8012732:	9a07      	ldr	r2, [sp, #28]
 8012734:	2a09      	cmp	r2, #9
 8012736:	d849      	bhi.n	80127cc <_dtoa_r+0x28c>
 8012738:	2a05      	cmp	r2, #5
 801273a:	bfc4      	itt	gt
 801273c:	3a04      	subgt	r2, #4
 801273e:	9207      	strgt	r2, [sp, #28]
 8012740:	9a07      	ldr	r2, [sp, #28]
 8012742:	f1a2 0202 	sub.w	r2, r2, #2
 8012746:	bfcc      	ite	gt
 8012748:	2400      	movgt	r4, #0
 801274a:	2401      	movle	r4, #1
 801274c:	2a03      	cmp	r2, #3
 801274e:	d848      	bhi.n	80127e2 <_dtoa_r+0x2a2>
 8012750:	e8df f002 	tbb	[pc, r2]
 8012754:	3a2c2e0b 	.word	0x3a2c2e0b
 8012758:	9b05      	ldr	r3, [sp, #20]
 801275a:	2200      	movs	r2, #0
 801275c:	eba3 030b 	sub.w	r3, r3, fp
 8012760:	9305      	str	r3, [sp, #20]
 8012762:	920e      	str	r2, [sp, #56]	; 0x38
 8012764:	f1cb 0300 	rsb	r3, fp, #0
 8012768:	e7e3      	b.n	8012732 <_dtoa_r+0x1f2>
 801276a:	2200      	movs	r2, #0
 801276c:	9208      	str	r2, [sp, #32]
 801276e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012770:	2a00      	cmp	r2, #0
 8012772:	dc39      	bgt.n	80127e8 <_dtoa_r+0x2a8>
 8012774:	f04f 0a01 	mov.w	sl, #1
 8012778:	46d1      	mov	r9, sl
 801277a:	4652      	mov	r2, sl
 801277c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8012780:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8012782:	2100      	movs	r1, #0
 8012784:	6079      	str	r1, [r7, #4]
 8012786:	2004      	movs	r0, #4
 8012788:	f100 0c14 	add.w	ip, r0, #20
 801278c:	4594      	cmp	ip, r2
 801278e:	6879      	ldr	r1, [r7, #4]
 8012790:	d92f      	bls.n	80127f2 <_dtoa_r+0x2b2>
 8012792:	4630      	mov	r0, r6
 8012794:	930c      	str	r3, [sp, #48]	; 0x30
 8012796:	f001 fa05 	bl	8013ba4 <_Balloc>
 801279a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801279c:	9000      	str	r0, [sp, #0]
 801279e:	4602      	mov	r2, r0
 80127a0:	2800      	cmp	r0, #0
 80127a2:	d149      	bne.n	8012838 <_dtoa_r+0x2f8>
 80127a4:	4b23      	ldr	r3, [pc, #140]	; (8012834 <_dtoa_r+0x2f4>)
 80127a6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80127aa:	e6df      	b.n	801256c <_dtoa_r+0x2c>
 80127ac:	2201      	movs	r2, #1
 80127ae:	e7dd      	b.n	801276c <_dtoa_r+0x22c>
 80127b0:	2200      	movs	r2, #0
 80127b2:	9208      	str	r2, [sp, #32]
 80127b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80127b6:	eb0b 0a02 	add.w	sl, fp, r2
 80127ba:	f10a 0901 	add.w	r9, sl, #1
 80127be:	464a      	mov	r2, r9
 80127c0:	2a01      	cmp	r2, #1
 80127c2:	bfb8      	it	lt
 80127c4:	2201      	movlt	r2, #1
 80127c6:	e7db      	b.n	8012780 <_dtoa_r+0x240>
 80127c8:	2201      	movs	r2, #1
 80127ca:	e7f2      	b.n	80127b2 <_dtoa_r+0x272>
 80127cc:	2401      	movs	r4, #1
 80127ce:	2200      	movs	r2, #0
 80127d0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80127d4:	f04f 3aff 	mov.w	sl, #4294967295
 80127d8:	2100      	movs	r1, #0
 80127da:	46d1      	mov	r9, sl
 80127dc:	2212      	movs	r2, #18
 80127de:	9109      	str	r1, [sp, #36]	; 0x24
 80127e0:	e7ce      	b.n	8012780 <_dtoa_r+0x240>
 80127e2:	2201      	movs	r2, #1
 80127e4:	9208      	str	r2, [sp, #32]
 80127e6:	e7f5      	b.n	80127d4 <_dtoa_r+0x294>
 80127e8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80127ec:	46d1      	mov	r9, sl
 80127ee:	4652      	mov	r2, sl
 80127f0:	e7c6      	b.n	8012780 <_dtoa_r+0x240>
 80127f2:	3101      	adds	r1, #1
 80127f4:	6079      	str	r1, [r7, #4]
 80127f6:	0040      	lsls	r0, r0, #1
 80127f8:	e7c6      	b.n	8012788 <_dtoa_r+0x248>
 80127fa:	bf00      	nop
 80127fc:	f3af 8000 	nop.w
 8012800:	636f4361 	.word	0x636f4361
 8012804:	3fd287a7 	.word	0x3fd287a7
 8012808:	8b60c8b3 	.word	0x8b60c8b3
 801280c:	3fc68a28 	.word	0x3fc68a28
 8012810:	509f79fb 	.word	0x509f79fb
 8012814:	3fd34413 	.word	0x3fd34413
 8012818:	0801ddae 	.word	0x0801ddae
 801281c:	0801ddc5 	.word	0x0801ddc5
 8012820:	7ff00000 	.word	0x7ff00000
 8012824:	0801ddaa 	.word	0x0801ddaa
 8012828:	0801dda1 	.word	0x0801dda1
 801282c:	0801dc22 	.word	0x0801dc22
 8012830:	0801dfa0 	.word	0x0801dfa0
 8012834:	0801de24 	.word	0x0801de24
 8012838:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801283a:	9900      	ldr	r1, [sp, #0]
 801283c:	6011      	str	r1, [r2, #0]
 801283e:	f1b9 0f0e 	cmp.w	r9, #14
 8012842:	d872      	bhi.n	801292a <_dtoa_r+0x3ea>
 8012844:	2c00      	cmp	r4, #0
 8012846:	d070      	beq.n	801292a <_dtoa_r+0x3ea>
 8012848:	f1bb 0f00 	cmp.w	fp, #0
 801284c:	f340 80a6 	ble.w	801299c <_dtoa_r+0x45c>
 8012850:	49ca      	ldr	r1, [pc, #808]	; (8012b7c <_dtoa_r+0x63c>)
 8012852:	f00b 020f 	and.w	r2, fp, #15
 8012856:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801285a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801285e:	ed92 7b00 	vldr	d7, [r2]
 8012862:	ea4f 112b 	mov.w	r1, fp, asr #4
 8012866:	f000 808d 	beq.w	8012984 <_dtoa_r+0x444>
 801286a:	4ac5      	ldr	r2, [pc, #788]	; (8012b80 <_dtoa_r+0x640>)
 801286c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8012870:	ed92 6b08 	vldr	d6, [r2, #32]
 8012874:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8012878:	ed8d 6b02 	vstr	d6, [sp, #8]
 801287c:	f001 010f 	and.w	r1, r1, #15
 8012880:	2203      	movs	r2, #3
 8012882:	48bf      	ldr	r0, [pc, #764]	; (8012b80 <_dtoa_r+0x640>)
 8012884:	2900      	cmp	r1, #0
 8012886:	d17f      	bne.n	8012988 <_dtoa_r+0x448>
 8012888:	ed9d 6b02 	vldr	d6, [sp, #8]
 801288c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012890:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012894:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012896:	2900      	cmp	r1, #0
 8012898:	f000 80b2 	beq.w	8012a00 <_dtoa_r+0x4c0>
 801289c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80128a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80128a4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80128a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128ac:	f140 80a8 	bpl.w	8012a00 <_dtoa_r+0x4c0>
 80128b0:	f1b9 0f00 	cmp.w	r9, #0
 80128b4:	f000 80a4 	beq.w	8012a00 <_dtoa_r+0x4c0>
 80128b8:	f1ba 0f00 	cmp.w	sl, #0
 80128bc:	dd31      	ble.n	8012922 <_dtoa_r+0x3e2>
 80128be:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80128c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80128c6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80128ca:	f10b 37ff 	add.w	r7, fp, #4294967295
 80128ce:	3201      	adds	r2, #1
 80128d0:	4650      	mov	r0, sl
 80128d2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80128d6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80128da:	ee07 2a90 	vmov	s15, r2
 80128de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80128e2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80128e6:	ed8d 5b02 	vstr	d5, [sp, #8]
 80128ea:	9c03      	ldr	r4, [sp, #12]
 80128ec:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80128f0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80128f4:	2800      	cmp	r0, #0
 80128f6:	f040 8086 	bne.w	8012a06 <_dtoa_r+0x4c6>
 80128fa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80128fe:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012902:	ec42 1b17 	vmov	d7, r1, r2
 8012906:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801290a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801290e:	f300 8272 	bgt.w	8012df6 <_dtoa_r+0x8b6>
 8012912:	eeb1 7b47 	vneg.f64	d7, d7
 8012916:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801291a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801291e:	f100 8267 	bmi.w	8012df0 <_dtoa_r+0x8b0>
 8012922:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8012926:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801292a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801292c:	2a00      	cmp	r2, #0
 801292e:	f2c0 8129 	blt.w	8012b84 <_dtoa_r+0x644>
 8012932:	f1bb 0f0e 	cmp.w	fp, #14
 8012936:	f300 8125 	bgt.w	8012b84 <_dtoa_r+0x644>
 801293a:	4b90      	ldr	r3, [pc, #576]	; (8012b7c <_dtoa_r+0x63c>)
 801293c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012940:	ed93 6b00 	vldr	d6, [r3]
 8012944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012946:	2b00      	cmp	r3, #0
 8012948:	f280 80c3 	bge.w	8012ad2 <_dtoa_r+0x592>
 801294c:	f1b9 0f00 	cmp.w	r9, #0
 8012950:	f300 80bf 	bgt.w	8012ad2 <_dtoa_r+0x592>
 8012954:	f040 824c 	bne.w	8012df0 <_dtoa_r+0x8b0>
 8012958:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801295c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012960:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012964:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801296c:	464c      	mov	r4, r9
 801296e:	464f      	mov	r7, r9
 8012970:	f280 8222 	bge.w	8012db8 <_dtoa_r+0x878>
 8012974:	f8dd 8000 	ldr.w	r8, [sp]
 8012978:	2331      	movs	r3, #49	; 0x31
 801297a:	f808 3b01 	strb.w	r3, [r8], #1
 801297e:	f10b 0b01 	add.w	fp, fp, #1
 8012982:	e21e      	b.n	8012dc2 <_dtoa_r+0x882>
 8012984:	2202      	movs	r2, #2
 8012986:	e77c      	b.n	8012882 <_dtoa_r+0x342>
 8012988:	07cc      	lsls	r4, r1, #31
 801298a:	d504      	bpl.n	8012996 <_dtoa_r+0x456>
 801298c:	ed90 6b00 	vldr	d6, [r0]
 8012990:	3201      	adds	r2, #1
 8012992:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012996:	1049      	asrs	r1, r1, #1
 8012998:	3008      	adds	r0, #8
 801299a:	e773      	b.n	8012884 <_dtoa_r+0x344>
 801299c:	d02e      	beq.n	80129fc <_dtoa_r+0x4bc>
 801299e:	f1cb 0100 	rsb	r1, fp, #0
 80129a2:	4a76      	ldr	r2, [pc, #472]	; (8012b7c <_dtoa_r+0x63c>)
 80129a4:	f001 000f 	and.w	r0, r1, #15
 80129a8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80129ac:	ed92 7b00 	vldr	d7, [r2]
 80129b0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80129b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80129b8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80129bc:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80129c0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80129c4:	486e      	ldr	r0, [pc, #440]	; (8012b80 <_dtoa_r+0x640>)
 80129c6:	1109      	asrs	r1, r1, #4
 80129c8:	2400      	movs	r4, #0
 80129ca:	2202      	movs	r2, #2
 80129cc:	b939      	cbnz	r1, 80129de <_dtoa_r+0x49e>
 80129ce:	2c00      	cmp	r4, #0
 80129d0:	f43f af60 	beq.w	8012894 <_dtoa_r+0x354>
 80129d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80129d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80129dc:	e75a      	b.n	8012894 <_dtoa_r+0x354>
 80129de:	07cf      	lsls	r7, r1, #31
 80129e0:	d509      	bpl.n	80129f6 <_dtoa_r+0x4b6>
 80129e2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80129e6:	ed90 7b00 	vldr	d7, [r0]
 80129ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 80129ee:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80129f2:	3201      	adds	r2, #1
 80129f4:	2401      	movs	r4, #1
 80129f6:	1049      	asrs	r1, r1, #1
 80129f8:	3008      	adds	r0, #8
 80129fa:	e7e7      	b.n	80129cc <_dtoa_r+0x48c>
 80129fc:	2202      	movs	r2, #2
 80129fe:	e749      	b.n	8012894 <_dtoa_r+0x354>
 8012a00:	465f      	mov	r7, fp
 8012a02:	4648      	mov	r0, r9
 8012a04:	e765      	b.n	80128d2 <_dtoa_r+0x392>
 8012a06:	ec42 1b17 	vmov	d7, r1, r2
 8012a0a:	4a5c      	ldr	r2, [pc, #368]	; (8012b7c <_dtoa_r+0x63c>)
 8012a0c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012a10:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012a14:	9a00      	ldr	r2, [sp, #0]
 8012a16:	1814      	adds	r4, r2, r0
 8012a18:	9a08      	ldr	r2, [sp, #32]
 8012a1a:	b352      	cbz	r2, 8012a72 <_dtoa_r+0x532>
 8012a1c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8012a20:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8012a24:	f8dd 8000 	ldr.w	r8, [sp]
 8012a28:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012a2c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012a30:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012a34:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012a38:	ee14 2a90 	vmov	r2, s9
 8012a3c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012a40:	3230      	adds	r2, #48	; 0x30
 8012a42:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012a46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a4e:	f808 2b01 	strb.w	r2, [r8], #1
 8012a52:	d439      	bmi.n	8012ac8 <_dtoa_r+0x588>
 8012a54:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012a58:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a60:	d472      	bmi.n	8012b48 <_dtoa_r+0x608>
 8012a62:	45a0      	cmp	r8, r4
 8012a64:	f43f af5d 	beq.w	8012922 <_dtoa_r+0x3e2>
 8012a68:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012a6c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012a70:	e7e0      	b.n	8012a34 <_dtoa_r+0x4f4>
 8012a72:	f8dd 8000 	ldr.w	r8, [sp]
 8012a76:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012a7a:	4621      	mov	r1, r4
 8012a7c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012a80:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012a84:	ee14 2a90 	vmov	r2, s9
 8012a88:	3230      	adds	r2, #48	; 0x30
 8012a8a:	f808 2b01 	strb.w	r2, [r8], #1
 8012a8e:	45a0      	cmp	r8, r4
 8012a90:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012a94:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012a98:	d118      	bne.n	8012acc <_dtoa_r+0x58c>
 8012a9a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012a9e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012aa2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aaa:	dc4d      	bgt.n	8012b48 <_dtoa_r+0x608>
 8012aac:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012ab0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ab8:	f57f af33 	bpl.w	8012922 <_dtoa_r+0x3e2>
 8012abc:	4688      	mov	r8, r1
 8012abe:	3901      	subs	r1, #1
 8012ac0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8012ac4:	2b30      	cmp	r3, #48	; 0x30
 8012ac6:	d0f9      	beq.n	8012abc <_dtoa_r+0x57c>
 8012ac8:	46bb      	mov	fp, r7
 8012aca:	e02a      	b.n	8012b22 <_dtoa_r+0x5e2>
 8012acc:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012ad0:	e7d6      	b.n	8012a80 <_dtoa_r+0x540>
 8012ad2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012ad6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8012ada:	f8dd 8000 	ldr.w	r8, [sp]
 8012ade:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012ae2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012ae6:	ee15 3a10 	vmov	r3, s10
 8012aea:	3330      	adds	r3, #48	; 0x30
 8012aec:	f808 3b01 	strb.w	r3, [r8], #1
 8012af0:	9b00      	ldr	r3, [sp, #0]
 8012af2:	eba8 0303 	sub.w	r3, r8, r3
 8012af6:	4599      	cmp	r9, r3
 8012af8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012afc:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012b00:	d133      	bne.n	8012b6a <_dtoa_r+0x62a>
 8012b02:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012b06:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b0e:	dc1a      	bgt.n	8012b46 <_dtoa_r+0x606>
 8012b10:	eeb4 7b46 	vcmp.f64	d7, d6
 8012b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b18:	d103      	bne.n	8012b22 <_dtoa_r+0x5e2>
 8012b1a:	ee15 3a10 	vmov	r3, s10
 8012b1e:	07d9      	lsls	r1, r3, #31
 8012b20:	d411      	bmi.n	8012b46 <_dtoa_r+0x606>
 8012b22:	4629      	mov	r1, r5
 8012b24:	4630      	mov	r0, r6
 8012b26:	f001 f87d 	bl	8013c24 <_Bfree>
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012b2e:	f888 3000 	strb.w	r3, [r8]
 8012b32:	f10b 0301 	add.w	r3, fp, #1
 8012b36:	6013      	str	r3, [r2, #0]
 8012b38:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	f43f ad4d 	beq.w	80125da <_dtoa_r+0x9a>
 8012b40:	f8c3 8000 	str.w	r8, [r3]
 8012b44:	e549      	b.n	80125da <_dtoa_r+0x9a>
 8012b46:	465f      	mov	r7, fp
 8012b48:	4643      	mov	r3, r8
 8012b4a:	4698      	mov	r8, r3
 8012b4c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012b50:	2a39      	cmp	r2, #57	; 0x39
 8012b52:	d106      	bne.n	8012b62 <_dtoa_r+0x622>
 8012b54:	9a00      	ldr	r2, [sp, #0]
 8012b56:	429a      	cmp	r2, r3
 8012b58:	d1f7      	bne.n	8012b4a <_dtoa_r+0x60a>
 8012b5a:	9900      	ldr	r1, [sp, #0]
 8012b5c:	2230      	movs	r2, #48	; 0x30
 8012b5e:	3701      	adds	r7, #1
 8012b60:	700a      	strb	r2, [r1, #0]
 8012b62:	781a      	ldrb	r2, [r3, #0]
 8012b64:	3201      	adds	r2, #1
 8012b66:	701a      	strb	r2, [r3, #0]
 8012b68:	e7ae      	b.n	8012ac8 <_dtoa_r+0x588>
 8012b6a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012b6e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b76:	d1b2      	bne.n	8012ade <_dtoa_r+0x59e>
 8012b78:	e7d3      	b.n	8012b22 <_dtoa_r+0x5e2>
 8012b7a:	bf00      	nop
 8012b7c:	0801dfa0 	.word	0x0801dfa0
 8012b80:	0801df78 	.word	0x0801df78
 8012b84:	9908      	ldr	r1, [sp, #32]
 8012b86:	2900      	cmp	r1, #0
 8012b88:	f000 80d1 	beq.w	8012d2e <_dtoa_r+0x7ee>
 8012b8c:	9907      	ldr	r1, [sp, #28]
 8012b8e:	2901      	cmp	r1, #1
 8012b90:	f300 80b4 	bgt.w	8012cfc <_dtoa_r+0x7bc>
 8012b94:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012b96:	2900      	cmp	r1, #0
 8012b98:	f000 80ac 	beq.w	8012cf4 <_dtoa_r+0x7b4>
 8012b9c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012ba0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012ba4:	461c      	mov	r4, r3
 8012ba6:	930a      	str	r3, [sp, #40]	; 0x28
 8012ba8:	9b05      	ldr	r3, [sp, #20]
 8012baa:	4413      	add	r3, r2
 8012bac:	9305      	str	r3, [sp, #20]
 8012bae:	9b06      	ldr	r3, [sp, #24]
 8012bb0:	2101      	movs	r1, #1
 8012bb2:	4413      	add	r3, r2
 8012bb4:	4630      	mov	r0, r6
 8012bb6:	9306      	str	r3, [sp, #24]
 8012bb8:	f001 f93a 	bl	8013e30 <__i2b>
 8012bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012bbe:	4607      	mov	r7, r0
 8012bc0:	f1b8 0f00 	cmp.w	r8, #0
 8012bc4:	dd0d      	ble.n	8012be2 <_dtoa_r+0x6a2>
 8012bc6:	9a06      	ldr	r2, [sp, #24]
 8012bc8:	2a00      	cmp	r2, #0
 8012bca:	dd0a      	ble.n	8012be2 <_dtoa_r+0x6a2>
 8012bcc:	4542      	cmp	r2, r8
 8012bce:	9905      	ldr	r1, [sp, #20]
 8012bd0:	bfa8      	it	ge
 8012bd2:	4642      	movge	r2, r8
 8012bd4:	1a89      	subs	r1, r1, r2
 8012bd6:	9105      	str	r1, [sp, #20]
 8012bd8:	9906      	ldr	r1, [sp, #24]
 8012bda:	eba8 0802 	sub.w	r8, r8, r2
 8012bde:	1a8a      	subs	r2, r1, r2
 8012be0:	9206      	str	r2, [sp, #24]
 8012be2:	b303      	cbz	r3, 8012c26 <_dtoa_r+0x6e6>
 8012be4:	9a08      	ldr	r2, [sp, #32]
 8012be6:	2a00      	cmp	r2, #0
 8012be8:	f000 80a6 	beq.w	8012d38 <_dtoa_r+0x7f8>
 8012bec:	2c00      	cmp	r4, #0
 8012bee:	dd13      	ble.n	8012c18 <_dtoa_r+0x6d8>
 8012bf0:	4639      	mov	r1, r7
 8012bf2:	4622      	mov	r2, r4
 8012bf4:	4630      	mov	r0, r6
 8012bf6:	930c      	str	r3, [sp, #48]	; 0x30
 8012bf8:	f001 f9d6 	bl	8013fa8 <__pow5mult>
 8012bfc:	462a      	mov	r2, r5
 8012bfe:	4601      	mov	r1, r0
 8012c00:	4607      	mov	r7, r0
 8012c02:	4630      	mov	r0, r6
 8012c04:	f001 f92a 	bl	8013e5c <__multiply>
 8012c08:	4629      	mov	r1, r5
 8012c0a:	900a      	str	r0, [sp, #40]	; 0x28
 8012c0c:	4630      	mov	r0, r6
 8012c0e:	f001 f809 	bl	8013c24 <_Bfree>
 8012c12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012c14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c16:	4615      	mov	r5, r2
 8012c18:	1b1a      	subs	r2, r3, r4
 8012c1a:	d004      	beq.n	8012c26 <_dtoa_r+0x6e6>
 8012c1c:	4629      	mov	r1, r5
 8012c1e:	4630      	mov	r0, r6
 8012c20:	f001 f9c2 	bl	8013fa8 <__pow5mult>
 8012c24:	4605      	mov	r5, r0
 8012c26:	2101      	movs	r1, #1
 8012c28:	4630      	mov	r0, r6
 8012c2a:	f001 f901 	bl	8013e30 <__i2b>
 8012c2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	4604      	mov	r4, r0
 8012c34:	f340 8082 	ble.w	8012d3c <_dtoa_r+0x7fc>
 8012c38:	461a      	mov	r2, r3
 8012c3a:	4601      	mov	r1, r0
 8012c3c:	4630      	mov	r0, r6
 8012c3e:	f001 f9b3 	bl	8013fa8 <__pow5mult>
 8012c42:	9b07      	ldr	r3, [sp, #28]
 8012c44:	2b01      	cmp	r3, #1
 8012c46:	4604      	mov	r4, r0
 8012c48:	dd7b      	ble.n	8012d42 <_dtoa_r+0x802>
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	930a      	str	r3, [sp, #40]	; 0x28
 8012c4e:	6922      	ldr	r2, [r4, #16]
 8012c50:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012c54:	6910      	ldr	r0, [r2, #16]
 8012c56:	f001 f89b 	bl	8013d90 <__hi0bits>
 8012c5a:	f1c0 0020 	rsb	r0, r0, #32
 8012c5e:	9b06      	ldr	r3, [sp, #24]
 8012c60:	4418      	add	r0, r3
 8012c62:	f010 001f 	ands.w	r0, r0, #31
 8012c66:	f000 808d 	beq.w	8012d84 <_dtoa_r+0x844>
 8012c6a:	f1c0 0220 	rsb	r2, r0, #32
 8012c6e:	2a04      	cmp	r2, #4
 8012c70:	f340 8086 	ble.w	8012d80 <_dtoa_r+0x840>
 8012c74:	f1c0 001c 	rsb	r0, r0, #28
 8012c78:	9b05      	ldr	r3, [sp, #20]
 8012c7a:	4403      	add	r3, r0
 8012c7c:	9305      	str	r3, [sp, #20]
 8012c7e:	9b06      	ldr	r3, [sp, #24]
 8012c80:	4403      	add	r3, r0
 8012c82:	4480      	add	r8, r0
 8012c84:	9306      	str	r3, [sp, #24]
 8012c86:	9b05      	ldr	r3, [sp, #20]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	dd05      	ble.n	8012c98 <_dtoa_r+0x758>
 8012c8c:	4629      	mov	r1, r5
 8012c8e:	461a      	mov	r2, r3
 8012c90:	4630      	mov	r0, r6
 8012c92:	f001 f9e3 	bl	801405c <__lshift>
 8012c96:	4605      	mov	r5, r0
 8012c98:	9b06      	ldr	r3, [sp, #24]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	dd05      	ble.n	8012caa <_dtoa_r+0x76a>
 8012c9e:	4621      	mov	r1, r4
 8012ca0:	461a      	mov	r2, r3
 8012ca2:	4630      	mov	r0, r6
 8012ca4:	f001 f9da 	bl	801405c <__lshift>
 8012ca8:	4604      	mov	r4, r0
 8012caa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d06b      	beq.n	8012d88 <_dtoa_r+0x848>
 8012cb0:	4621      	mov	r1, r4
 8012cb2:	4628      	mov	r0, r5
 8012cb4:	f001 fa3e 	bl	8014134 <__mcmp>
 8012cb8:	2800      	cmp	r0, #0
 8012cba:	da65      	bge.n	8012d88 <_dtoa_r+0x848>
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	4629      	mov	r1, r5
 8012cc0:	220a      	movs	r2, #10
 8012cc2:	4630      	mov	r0, r6
 8012cc4:	f000 ffd0 	bl	8013c68 <__multadd>
 8012cc8:	9b08      	ldr	r3, [sp, #32]
 8012cca:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012cce:	4605      	mov	r5, r0
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	f000 8192 	beq.w	8012ffa <_dtoa_r+0xaba>
 8012cd6:	4639      	mov	r1, r7
 8012cd8:	2300      	movs	r3, #0
 8012cda:	220a      	movs	r2, #10
 8012cdc:	4630      	mov	r0, r6
 8012cde:	f000 ffc3 	bl	8013c68 <__multadd>
 8012ce2:	f1ba 0f00 	cmp.w	sl, #0
 8012ce6:	4607      	mov	r7, r0
 8012ce8:	f300 808e 	bgt.w	8012e08 <_dtoa_r+0x8c8>
 8012cec:	9b07      	ldr	r3, [sp, #28]
 8012cee:	2b02      	cmp	r3, #2
 8012cf0:	dc51      	bgt.n	8012d96 <_dtoa_r+0x856>
 8012cf2:	e089      	b.n	8012e08 <_dtoa_r+0x8c8>
 8012cf4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012cf6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012cfa:	e751      	b.n	8012ba0 <_dtoa_r+0x660>
 8012cfc:	f109 34ff 	add.w	r4, r9, #4294967295
 8012d00:	42a3      	cmp	r3, r4
 8012d02:	bfbf      	itttt	lt
 8012d04:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8012d06:	1ae3      	sublt	r3, r4, r3
 8012d08:	18d2      	addlt	r2, r2, r3
 8012d0a:	4613      	movlt	r3, r2
 8012d0c:	bfb7      	itett	lt
 8012d0e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012d10:	1b1c      	subge	r4, r3, r4
 8012d12:	4623      	movlt	r3, r4
 8012d14:	2400      	movlt	r4, #0
 8012d16:	f1b9 0f00 	cmp.w	r9, #0
 8012d1a:	bfb5      	itete	lt
 8012d1c:	9a05      	ldrlt	r2, [sp, #20]
 8012d1e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8012d22:	eba2 0809 	sublt.w	r8, r2, r9
 8012d26:	464a      	movge	r2, r9
 8012d28:	bfb8      	it	lt
 8012d2a:	2200      	movlt	r2, #0
 8012d2c:	e73b      	b.n	8012ba6 <_dtoa_r+0x666>
 8012d2e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012d32:	9f08      	ldr	r7, [sp, #32]
 8012d34:	461c      	mov	r4, r3
 8012d36:	e743      	b.n	8012bc0 <_dtoa_r+0x680>
 8012d38:	461a      	mov	r2, r3
 8012d3a:	e76f      	b.n	8012c1c <_dtoa_r+0x6dc>
 8012d3c:	9b07      	ldr	r3, [sp, #28]
 8012d3e:	2b01      	cmp	r3, #1
 8012d40:	dc18      	bgt.n	8012d74 <_dtoa_r+0x834>
 8012d42:	9b02      	ldr	r3, [sp, #8]
 8012d44:	b9b3      	cbnz	r3, 8012d74 <_dtoa_r+0x834>
 8012d46:	9b03      	ldr	r3, [sp, #12]
 8012d48:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012d4c:	b9a2      	cbnz	r2, 8012d78 <_dtoa_r+0x838>
 8012d4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8012d52:	0d12      	lsrs	r2, r2, #20
 8012d54:	0512      	lsls	r2, r2, #20
 8012d56:	b18a      	cbz	r2, 8012d7c <_dtoa_r+0x83c>
 8012d58:	9b05      	ldr	r3, [sp, #20]
 8012d5a:	3301      	adds	r3, #1
 8012d5c:	9305      	str	r3, [sp, #20]
 8012d5e:	9b06      	ldr	r3, [sp, #24]
 8012d60:	3301      	adds	r3, #1
 8012d62:	9306      	str	r3, [sp, #24]
 8012d64:	2301      	movs	r3, #1
 8012d66:	930a      	str	r3, [sp, #40]	; 0x28
 8012d68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	f47f af6f 	bne.w	8012c4e <_dtoa_r+0x70e>
 8012d70:	2001      	movs	r0, #1
 8012d72:	e774      	b.n	8012c5e <_dtoa_r+0x71e>
 8012d74:	2300      	movs	r3, #0
 8012d76:	e7f6      	b.n	8012d66 <_dtoa_r+0x826>
 8012d78:	9b02      	ldr	r3, [sp, #8]
 8012d7a:	e7f4      	b.n	8012d66 <_dtoa_r+0x826>
 8012d7c:	920a      	str	r2, [sp, #40]	; 0x28
 8012d7e:	e7f3      	b.n	8012d68 <_dtoa_r+0x828>
 8012d80:	d081      	beq.n	8012c86 <_dtoa_r+0x746>
 8012d82:	4610      	mov	r0, r2
 8012d84:	301c      	adds	r0, #28
 8012d86:	e777      	b.n	8012c78 <_dtoa_r+0x738>
 8012d88:	f1b9 0f00 	cmp.w	r9, #0
 8012d8c:	dc37      	bgt.n	8012dfe <_dtoa_r+0x8be>
 8012d8e:	9b07      	ldr	r3, [sp, #28]
 8012d90:	2b02      	cmp	r3, #2
 8012d92:	dd34      	ble.n	8012dfe <_dtoa_r+0x8be>
 8012d94:	46ca      	mov	sl, r9
 8012d96:	f1ba 0f00 	cmp.w	sl, #0
 8012d9a:	d10d      	bne.n	8012db8 <_dtoa_r+0x878>
 8012d9c:	4621      	mov	r1, r4
 8012d9e:	4653      	mov	r3, sl
 8012da0:	2205      	movs	r2, #5
 8012da2:	4630      	mov	r0, r6
 8012da4:	f000 ff60 	bl	8013c68 <__multadd>
 8012da8:	4601      	mov	r1, r0
 8012daa:	4604      	mov	r4, r0
 8012dac:	4628      	mov	r0, r5
 8012dae:	f001 f9c1 	bl	8014134 <__mcmp>
 8012db2:	2800      	cmp	r0, #0
 8012db4:	f73f adde 	bgt.w	8012974 <_dtoa_r+0x434>
 8012db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012dba:	f8dd 8000 	ldr.w	r8, [sp]
 8012dbe:	ea6f 0b03 	mvn.w	fp, r3
 8012dc2:	f04f 0900 	mov.w	r9, #0
 8012dc6:	4621      	mov	r1, r4
 8012dc8:	4630      	mov	r0, r6
 8012dca:	f000 ff2b 	bl	8013c24 <_Bfree>
 8012dce:	2f00      	cmp	r7, #0
 8012dd0:	f43f aea7 	beq.w	8012b22 <_dtoa_r+0x5e2>
 8012dd4:	f1b9 0f00 	cmp.w	r9, #0
 8012dd8:	d005      	beq.n	8012de6 <_dtoa_r+0x8a6>
 8012dda:	45b9      	cmp	r9, r7
 8012ddc:	d003      	beq.n	8012de6 <_dtoa_r+0x8a6>
 8012dde:	4649      	mov	r1, r9
 8012de0:	4630      	mov	r0, r6
 8012de2:	f000 ff1f 	bl	8013c24 <_Bfree>
 8012de6:	4639      	mov	r1, r7
 8012de8:	4630      	mov	r0, r6
 8012dea:	f000 ff1b 	bl	8013c24 <_Bfree>
 8012dee:	e698      	b.n	8012b22 <_dtoa_r+0x5e2>
 8012df0:	2400      	movs	r4, #0
 8012df2:	4627      	mov	r7, r4
 8012df4:	e7e0      	b.n	8012db8 <_dtoa_r+0x878>
 8012df6:	46bb      	mov	fp, r7
 8012df8:	4604      	mov	r4, r0
 8012dfa:	4607      	mov	r7, r0
 8012dfc:	e5ba      	b.n	8012974 <_dtoa_r+0x434>
 8012dfe:	9b08      	ldr	r3, [sp, #32]
 8012e00:	46ca      	mov	sl, r9
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	f000 8100 	beq.w	8013008 <_dtoa_r+0xac8>
 8012e08:	f1b8 0f00 	cmp.w	r8, #0
 8012e0c:	dd05      	ble.n	8012e1a <_dtoa_r+0x8da>
 8012e0e:	4639      	mov	r1, r7
 8012e10:	4642      	mov	r2, r8
 8012e12:	4630      	mov	r0, r6
 8012e14:	f001 f922 	bl	801405c <__lshift>
 8012e18:	4607      	mov	r7, r0
 8012e1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d05d      	beq.n	8012edc <_dtoa_r+0x99c>
 8012e20:	6879      	ldr	r1, [r7, #4]
 8012e22:	4630      	mov	r0, r6
 8012e24:	f000 febe 	bl	8013ba4 <_Balloc>
 8012e28:	4680      	mov	r8, r0
 8012e2a:	b928      	cbnz	r0, 8012e38 <_dtoa_r+0x8f8>
 8012e2c:	4b82      	ldr	r3, [pc, #520]	; (8013038 <_dtoa_r+0xaf8>)
 8012e2e:	4602      	mov	r2, r0
 8012e30:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012e34:	f7ff bb9a 	b.w	801256c <_dtoa_r+0x2c>
 8012e38:	693a      	ldr	r2, [r7, #16]
 8012e3a:	3202      	adds	r2, #2
 8012e3c:	0092      	lsls	r2, r2, #2
 8012e3e:	f107 010c 	add.w	r1, r7, #12
 8012e42:	300c      	adds	r0, #12
 8012e44:	f7fd fa12 	bl	801026c <memcpy>
 8012e48:	2201      	movs	r2, #1
 8012e4a:	4641      	mov	r1, r8
 8012e4c:	4630      	mov	r0, r6
 8012e4e:	f001 f905 	bl	801405c <__lshift>
 8012e52:	9b00      	ldr	r3, [sp, #0]
 8012e54:	3301      	adds	r3, #1
 8012e56:	9305      	str	r3, [sp, #20]
 8012e58:	9b00      	ldr	r3, [sp, #0]
 8012e5a:	4453      	add	r3, sl
 8012e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8012e5e:	9b02      	ldr	r3, [sp, #8]
 8012e60:	f003 0301 	and.w	r3, r3, #1
 8012e64:	46b9      	mov	r9, r7
 8012e66:	9308      	str	r3, [sp, #32]
 8012e68:	4607      	mov	r7, r0
 8012e6a:	9b05      	ldr	r3, [sp, #20]
 8012e6c:	4621      	mov	r1, r4
 8012e6e:	3b01      	subs	r3, #1
 8012e70:	4628      	mov	r0, r5
 8012e72:	9302      	str	r3, [sp, #8]
 8012e74:	f7ff fad9 	bl	801242a <quorem>
 8012e78:	4603      	mov	r3, r0
 8012e7a:	3330      	adds	r3, #48	; 0x30
 8012e7c:	9006      	str	r0, [sp, #24]
 8012e7e:	4649      	mov	r1, r9
 8012e80:	4628      	mov	r0, r5
 8012e82:	930a      	str	r3, [sp, #40]	; 0x28
 8012e84:	f001 f956 	bl	8014134 <__mcmp>
 8012e88:	463a      	mov	r2, r7
 8012e8a:	4682      	mov	sl, r0
 8012e8c:	4621      	mov	r1, r4
 8012e8e:	4630      	mov	r0, r6
 8012e90:	f001 f96c 	bl	801416c <__mdiff>
 8012e94:	68c2      	ldr	r2, [r0, #12]
 8012e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e98:	4680      	mov	r8, r0
 8012e9a:	bb0a      	cbnz	r2, 8012ee0 <_dtoa_r+0x9a0>
 8012e9c:	4601      	mov	r1, r0
 8012e9e:	4628      	mov	r0, r5
 8012ea0:	f001 f948 	bl	8014134 <__mcmp>
 8012ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ea6:	4602      	mov	r2, r0
 8012ea8:	4641      	mov	r1, r8
 8012eaa:	4630      	mov	r0, r6
 8012eac:	920e      	str	r2, [sp, #56]	; 0x38
 8012eae:	930a      	str	r3, [sp, #40]	; 0x28
 8012eb0:	f000 feb8 	bl	8013c24 <_Bfree>
 8012eb4:	9b07      	ldr	r3, [sp, #28]
 8012eb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012eb8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012ebc:	ea43 0102 	orr.w	r1, r3, r2
 8012ec0:	9b08      	ldr	r3, [sp, #32]
 8012ec2:	430b      	orrs	r3, r1
 8012ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ec6:	d10d      	bne.n	8012ee4 <_dtoa_r+0x9a4>
 8012ec8:	2b39      	cmp	r3, #57	; 0x39
 8012eca:	d029      	beq.n	8012f20 <_dtoa_r+0x9e0>
 8012ecc:	f1ba 0f00 	cmp.w	sl, #0
 8012ed0:	dd01      	ble.n	8012ed6 <_dtoa_r+0x996>
 8012ed2:	9b06      	ldr	r3, [sp, #24]
 8012ed4:	3331      	adds	r3, #49	; 0x31
 8012ed6:	9a02      	ldr	r2, [sp, #8]
 8012ed8:	7013      	strb	r3, [r2, #0]
 8012eda:	e774      	b.n	8012dc6 <_dtoa_r+0x886>
 8012edc:	4638      	mov	r0, r7
 8012ede:	e7b8      	b.n	8012e52 <_dtoa_r+0x912>
 8012ee0:	2201      	movs	r2, #1
 8012ee2:	e7e1      	b.n	8012ea8 <_dtoa_r+0x968>
 8012ee4:	f1ba 0f00 	cmp.w	sl, #0
 8012ee8:	db06      	blt.n	8012ef8 <_dtoa_r+0x9b8>
 8012eea:	9907      	ldr	r1, [sp, #28]
 8012eec:	ea41 0a0a 	orr.w	sl, r1, sl
 8012ef0:	9908      	ldr	r1, [sp, #32]
 8012ef2:	ea5a 0101 	orrs.w	r1, sl, r1
 8012ef6:	d120      	bne.n	8012f3a <_dtoa_r+0x9fa>
 8012ef8:	2a00      	cmp	r2, #0
 8012efa:	ddec      	ble.n	8012ed6 <_dtoa_r+0x996>
 8012efc:	4629      	mov	r1, r5
 8012efe:	2201      	movs	r2, #1
 8012f00:	4630      	mov	r0, r6
 8012f02:	9305      	str	r3, [sp, #20]
 8012f04:	f001 f8aa 	bl	801405c <__lshift>
 8012f08:	4621      	mov	r1, r4
 8012f0a:	4605      	mov	r5, r0
 8012f0c:	f001 f912 	bl	8014134 <__mcmp>
 8012f10:	2800      	cmp	r0, #0
 8012f12:	9b05      	ldr	r3, [sp, #20]
 8012f14:	dc02      	bgt.n	8012f1c <_dtoa_r+0x9dc>
 8012f16:	d1de      	bne.n	8012ed6 <_dtoa_r+0x996>
 8012f18:	07da      	lsls	r2, r3, #31
 8012f1a:	d5dc      	bpl.n	8012ed6 <_dtoa_r+0x996>
 8012f1c:	2b39      	cmp	r3, #57	; 0x39
 8012f1e:	d1d8      	bne.n	8012ed2 <_dtoa_r+0x992>
 8012f20:	9a02      	ldr	r2, [sp, #8]
 8012f22:	2339      	movs	r3, #57	; 0x39
 8012f24:	7013      	strb	r3, [r2, #0]
 8012f26:	4643      	mov	r3, r8
 8012f28:	4698      	mov	r8, r3
 8012f2a:	3b01      	subs	r3, #1
 8012f2c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8012f30:	2a39      	cmp	r2, #57	; 0x39
 8012f32:	d051      	beq.n	8012fd8 <_dtoa_r+0xa98>
 8012f34:	3201      	adds	r2, #1
 8012f36:	701a      	strb	r2, [r3, #0]
 8012f38:	e745      	b.n	8012dc6 <_dtoa_r+0x886>
 8012f3a:	2a00      	cmp	r2, #0
 8012f3c:	dd03      	ble.n	8012f46 <_dtoa_r+0xa06>
 8012f3e:	2b39      	cmp	r3, #57	; 0x39
 8012f40:	d0ee      	beq.n	8012f20 <_dtoa_r+0x9e0>
 8012f42:	3301      	adds	r3, #1
 8012f44:	e7c7      	b.n	8012ed6 <_dtoa_r+0x996>
 8012f46:	9a05      	ldr	r2, [sp, #20]
 8012f48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012f4a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012f4e:	428a      	cmp	r2, r1
 8012f50:	d02b      	beq.n	8012faa <_dtoa_r+0xa6a>
 8012f52:	4629      	mov	r1, r5
 8012f54:	2300      	movs	r3, #0
 8012f56:	220a      	movs	r2, #10
 8012f58:	4630      	mov	r0, r6
 8012f5a:	f000 fe85 	bl	8013c68 <__multadd>
 8012f5e:	45b9      	cmp	r9, r7
 8012f60:	4605      	mov	r5, r0
 8012f62:	f04f 0300 	mov.w	r3, #0
 8012f66:	f04f 020a 	mov.w	r2, #10
 8012f6a:	4649      	mov	r1, r9
 8012f6c:	4630      	mov	r0, r6
 8012f6e:	d107      	bne.n	8012f80 <_dtoa_r+0xa40>
 8012f70:	f000 fe7a 	bl	8013c68 <__multadd>
 8012f74:	4681      	mov	r9, r0
 8012f76:	4607      	mov	r7, r0
 8012f78:	9b05      	ldr	r3, [sp, #20]
 8012f7a:	3301      	adds	r3, #1
 8012f7c:	9305      	str	r3, [sp, #20]
 8012f7e:	e774      	b.n	8012e6a <_dtoa_r+0x92a>
 8012f80:	f000 fe72 	bl	8013c68 <__multadd>
 8012f84:	4639      	mov	r1, r7
 8012f86:	4681      	mov	r9, r0
 8012f88:	2300      	movs	r3, #0
 8012f8a:	220a      	movs	r2, #10
 8012f8c:	4630      	mov	r0, r6
 8012f8e:	f000 fe6b 	bl	8013c68 <__multadd>
 8012f92:	4607      	mov	r7, r0
 8012f94:	e7f0      	b.n	8012f78 <_dtoa_r+0xa38>
 8012f96:	f1ba 0f00 	cmp.w	sl, #0
 8012f9a:	9a00      	ldr	r2, [sp, #0]
 8012f9c:	bfcc      	ite	gt
 8012f9e:	46d0      	movgt	r8, sl
 8012fa0:	f04f 0801 	movle.w	r8, #1
 8012fa4:	4490      	add	r8, r2
 8012fa6:	f04f 0900 	mov.w	r9, #0
 8012faa:	4629      	mov	r1, r5
 8012fac:	2201      	movs	r2, #1
 8012fae:	4630      	mov	r0, r6
 8012fb0:	9302      	str	r3, [sp, #8]
 8012fb2:	f001 f853 	bl	801405c <__lshift>
 8012fb6:	4621      	mov	r1, r4
 8012fb8:	4605      	mov	r5, r0
 8012fba:	f001 f8bb 	bl	8014134 <__mcmp>
 8012fbe:	2800      	cmp	r0, #0
 8012fc0:	dcb1      	bgt.n	8012f26 <_dtoa_r+0x9e6>
 8012fc2:	d102      	bne.n	8012fca <_dtoa_r+0xa8a>
 8012fc4:	9b02      	ldr	r3, [sp, #8]
 8012fc6:	07db      	lsls	r3, r3, #31
 8012fc8:	d4ad      	bmi.n	8012f26 <_dtoa_r+0x9e6>
 8012fca:	4643      	mov	r3, r8
 8012fcc:	4698      	mov	r8, r3
 8012fce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012fd2:	2a30      	cmp	r2, #48	; 0x30
 8012fd4:	d0fa      	beq.n	8012fcc <_dtoa_r+0xa8c>
 8012fd6:	e6f6      	b.n	8012dc6 <_dtoa_r+0x886>
 8012fd8:	9a00      	ldr	r2, [sp, #0]
 8012fda:	429a      	cmp	r2, r3
 8012fdc:	d1a4      	bne.n	8012f28 <_dtoa_r+0x9e8>
 8012fde:	f10b 0b01 	add.w	fp, fp, #1
 8012fe2:	2331      	movs	r3, #49	; 0x31
 8012fe4:	e778      	b.n	8012ed8 <_dtoa_r+0x998>
 8012fe6:	4b15      	ldr	r3, [pc, #84]	; (801303c <_dtoa_r+0xafc>)
 8012fe8:	f7ff bb12 	b.w	8012610 <_dtoa_r+0xd0>
 8012fec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	f47f aaee 	bne.w	80125d0 <_dtoa_r+0x90>
 8012ff4:	4b12      	ldr	r3, [pc, #72]	; (8013040 <_dtoa_r+0xb00>)
 8012ff6:	f7ff bb0b 	b.w	8012610 <_dtoa_r+0xd0>
 8012ffa:	f1ba 0f00 	cmp.w	sl, #0
 8012ffe:	dc03      	bgt.n	8013008 <_dtoa_r+0xac8>
 8013000:	9b07      	ldr	r3, [sp, #28]
 8013002:	2b02      	cmp	r3, #2
 8013004:	f73f aec7 	bgt.w	8012d96 <_dtoa_r+0x856>
 8013008:	f8dd 8000 	ldr.w	r8, [sp]
 801300c:	4621      	mov	r1, r4
 801300e:	4628      	mov	r0, r5
 8013010:	f7ff fa0b 	bl	801242a <quorem>
 8013014:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013018:	f808 3b01 	strb.w	r3, [r8], #1
 801301c:	9a00      	ldr	r2, [sp, #0]
 801301e:	eba8 0202 	sub.w	r2, r8, r2
 8013022:	4592      	cmp	sl, r2
 8013024:	ddb7      	ble.n	8012f96 <_dtoa_r+0xa56>
 8013026:	4629      	mov	r1, r5
 8013028:	2300      	movs	r3, #0
 801302a:	220a      	movs	r2, #10
 801302c:	4630      	mov	r0, r6
 801302e:	f000 fe1b 	bl	8013c68 <__multadd>
 8013032:	4605      	mov	r5, r0
 8013034:	e7ea      	b.n	801300c <_dtoa_r+0xacc>
 8013036:	bf00      	nop
 8013038:	0801de24 	.word	0x0801de24
 801303c:	0801dc21 	.word	0x0801dc21
 8013040:	0801dda1 	.word	0x0801dda1

08013044 <__sflush_r>:
 8013044:	898a      	ldrh	r2, [r1, #12]
 8013046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801304a:	4605      	mov	r5, r0
 801304c:	0710      	lsls	r0, r2, #28
 801304e:	460c      	mov	r4, r1
 8013050:	d458      	bmi.n	8013104 <__sflush_r+0xc0>
 8013052:	684b      	ldr	r3, [r1, #4]
 8013054:	2b00      	cmp	r3, #0
 8013056:	dc05      	bgt.n	8013064 <__sflush_r+0x20>
 8013058:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801305a:	2b00      	cmp	r3, #0
 801305c:	dc02      	bgt.n	8013064 <__sflush_r+0x20>
 801305e:	2000      	movs	r0, #0
 8013060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013064:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013066:	2e00      	cmp	r6, #0
 8013068:	d0f9      	beq.n	801305e <__sflush_r+0x1a>
 801306a:	2300      	movs	r3, #0
 801306c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013070:	682f      	ldr	r7, [r5, #0]
 8013072:	602b      	str	r3, [r5, #0]
 8013074:	d032      	beq.n	80130dc <__sflush_r+0x98>
 8013076:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013078:	89a3      	ldrh	r3, [r4, #12]
 801307a:	075a      	lsls	r2, r3, #29
 801307c:	d505      	bpl.n	801308a <__sflush_r+0x46>
 801307e:	6863      	ldr	r3, [r4, #4]
 8013080:	1ac0      	subs	r0, r0, r3
 8013082:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013084:	b10b      	cbz	r3, 801308a <__sflush_r+0x46>
 8013086:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013088:	1ac0      	subs	r0, r0, r3
 801308a:	2300      	movs	r3, #0
 801308c:	4602      	mov	r2, r0
 801308e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013090:	6a21      	ldr	r1, [r4, #32]
 8013092:	4628      	mov	r0, r5
 8013094:	47b0      	blx	r6
 8013096:	1c43      	adds	r3, r0, #1
 8013098:	89a3      	ldrh	r3, [r4, #12]
 801309a:	d106      	bne.n	80130aa <__sflush_r+0x66>
 801309c:	6829      	ldr	r1, [r5, #0]
 801309e:	291d      	cmp	r1, #29
 80130a0:	d82c      	bhi.n	80130fc <__sflush_r+0xb8>
 80130a2:	4a2a      	ldr	r2, [pc, #168]	; (801314c <__sflush_r+0x108>)
 80130a4:	40ca      	lsrs	r2, r1
 80130a6:	07d6      	lsls	r6, r2, #31
 80130a8:	d528      	bpl.n	80130fc <__sflush_r+0xb8>
 80130aa:	2200      	movs	r2, #0
 80130ac:	6062      	str	r2, [r4, #4]
 80130ae:	04d9      	lsls	r1, r3, #19
 80130b0:	6922      	ldr	r2, [r4, #16]
 80130b2:	6022      	str	r2, [r4, #0]
 80130b4:	d504      	bpl.n	80130c0 <__sflush_r+0x7c>
 80130b6:	1c42      	adds	r2, r0, #1
 80130b8:	d101      	bne.n	80130be <__sflush_r+0x7a>
 80130ba:	682b      	ldr	r3, [r5, #0]
 80130bc:	b903      	cbnz	r3, 80130c0 <__sflush_r+0x7c>
 80130be:	6560      	str	r0, [r4, #84]	; 0x54
 80130c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80130c2:	602f      	str	r7, [r5, #0]
 80130c4:	2900      	cmp	r1, #0
 80130c6:	d0ca      	beq.n	801305e <__sflush_r+0x1a>
 80130c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80130cc:	4299      	cmp	r1, r3
 80130ce:	d002      	beq.n	80130d6 <__sflush_r+0x92>
 80130d0:	4628      	mov	r0, r5
 80130d2:	f7fd f8fb 	bl	80102cc <_free_r>
 80130d6:	2000      	movs	r0, #0
 80130d8:	6360      	str	r0, [r4, #52]	; 0x34
 80130da:	e7c1      	b.n	8013060 <__sflush_r+0x1c>
 80130dc:	6a21      	ldr	r1, [r4, #32]
 80130de:	2301      	movs	r3, #1
 80130e0:	4628      	mov	r0, r5
 80130e2:	47b0      	blx	r6
 80130e4:	1c41      	adds	r1, r0, #1
 80130e6:	d1c7      	bne.n	8013078 <__sflush_r+0x34>
 80130e8:	682b      	ldr	r3, [r5, #0]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d0c4      	beq.n	8013078 <__sflush_r+0x34>
 80130ee:	2b1d      	cmp	r3, #29
 80130f0:	d001      	beq.n	80130f6 <__sflush_r+0xb2>
 80130f2:	2b16      	cmp	r3, #22
 80130f4:	d101      	bne.n	80130fa <__sflush_r+0xb6>
 80130f6:	602f      	str	r7, [r5, #0]
 80130f8:	e7b1      	b.n	801305e <__sflush_r+0x1a>
 80130fa:	89a3      	ldrh	r3, [r4, #12]
 80130fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013100:	81a3      	strh	r3, [r4, #12]
 8013102:	e7ad      	b.n	8013060 <__sflush_r+0x1c>
 8013104:	690f      	ldr	r7, [r1, #16]
 8013106:	2f00      	cmp	r7, #0
 8013108:	d0a9      	beq.n	801305e <__sflush_r+0x1a>
 801310a:	0793      	lsls	r3, r2, #30
 801310c:	680e      	ldr	r6, [r1, #0]
 801310e:	bf08      	it	eq
 8013110:	694b      	ldreq	r3, [r1, #20]
 8013112:	600f      	str	r7, [r1, #0]
 8013114:	bf18      	it	ne
 8013116:	2300      	movne	r3, #0
 8013118:	eba6 0807 	sub.w	r8, r6, r7
 801311c:	608b      	str	r3, [r1, #8]
 801311e:	f1b8 0f00 	cmp.w	r8, #0
 8013122:	dd9c      	ble.n	801305e <__sflush_r+0x1a>
 8013124:	6a21      	ldr	r1, [r4, #32]
 8013126:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013128:	4643      	mov	r3, r8
 801312a:	463a      	mov	r2, r7
 801312c:	4628      	mov	r0, r5
 801312e:	47b0      	blx	r6
 8013130:	2800      	cmp	r0, #0
 8013132:	dc06      	bgt.n	8013142 <__sflush_r+0xfe>
 8013134:	89a3      	ldrh	r3, [r4, #12]
 8013136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801313a:	81a3      	strh	r3, [r4, #12]
 801313c:	f04f 30ff 	mov.w	r0, #4294967295
 8013140:	e78e      	b.n	8013060 <__sflush_r+0x1c>
 8013142:	4407      	add	r7, r0
 8013144:	eba8 0800 	sub.w	r8, r8, r0
 8013148:	e7e9      	b.n	801311e <__sflush_r+0xda>
 801314a:	bf00      	nop
 801314c:	20400001 	.word	0x20400001

08013150 <_fflush_r>:
 8013150:	b538      	push	{r3, r4, r5, lr}
 8013152:	690b      	ldr	r3, [r1, #16]
 8013154:	4605      	mov	r5, r0
 8013156:	460c      	mov	r4, r1
 8013158:	b913      	cbnz	r3, 8013160 <_fflush_r+0x10>
 801315a:	2500      	movs	r5, #0
 801315c:	4628      	mov	r0, r5
 801315e:	bd38      	pop	{r3, r4, r5, pc}
 8013160:	b118      	cbz	r0, 801316a <_fflush_r+0x1a>
 8013162:	6983      	ldr	r3, [r0, #24]
 8013164:	b90b      	cbnz	r3, 801316a <_fflush_r+0x1a>
 8013166:	f000 f887 	bl	8013278 <__sinit>
 801316a:	4b14      	ldr	r3, [pc, #80]	; (80131bc <_fflush_r+0x6c>)
 801316c:	429c      	cmp	r4, r3
 801316e:	d11b      	bne.n	80131a8 <_fflush_r+0x58>
 8013170:	686c      	ldr	r4, [r5, #4]
 8013172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d0ef      	beq.n	801315a <_fflush_r+0xa>
 801317a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801317c:	07d0      	lsls	r0, r2, #31
 801317e:	d404      	bmi.n	801318a <_fflush_r+0x3a>
 8013180:	0599      	lsls	r1, r3, #22
 8013182:	d402      	bmi.n	801318a <_fflush_r+0x3a>
 8013184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013186:	f000 fc88 	bl	8013a9a <__retarget_lock_acquire_recursive>
 801318a:	4628      	mov	r0, r5
 801318c:	4621      	mov	r1, r4
 801318e:	f7ff ff59 	bl	8013044 <__sflush_r>
 8013192:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013194:	07da      	lsls	r2, r3, #31
 8013196:	4605      	mov	r5, r0
 8013198:	d4e0      	bmi.n	801315c <_fflush_r+0xc>
 801319a:	89a3      	ldrh	r3, [r4, #12]
 801319c:	059b      	lsls	r3, r3, #22
 801319e:	d4dd      	bmi.n	801315c <_fflush_r+0xc>
 80131a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80131a2:	f000 fc7b 	bl	8013a9c <__retarget_lock_release_recursive>
 80131a6:	e7d9      	b.n	801315c <_fflush_r+0xc>
 80131a8:	4b05      	ldr	r3, [pc, #20]	; (80131c0 <_fflush_r+0x70>)
 80131aa:	429c      	cmp	r4, r3
 80131ac:	d101      	bne.n	80131b2 <_fflush_r+0x62>
 80131ae:	68ac      	ldr	r4, [r5, #8]
 80131b0:	e7df      	b.n	8013172 <_fflush_r+0x22>
 80131b2:	4b04      	ldr	r3, [pc, #16]	; (80131c4 <_fflush_r+0x74>)
 80131b4:	429c      	cmp	r4, r3
 80131b6:	bf08      	it	eq
 80131b8:	68ec      	ldreq	r4, [r5, #12]
 80131ba:	e7da      	b.n	8013172 <_fflush_r+0x22>
 80131bc:	0801de58 	.word	0x0801de58
 80131c0:	0801de78 	.word	0x0801de78
 80131c4:	0801de38 	.word	0x0801de38

080131c8 <std>:
 80131c8:	2300      	movs	r3, #0
 80131ca:	b510      	push	{r4, lr}
 80131cc:	4604      	mov	r4, r0
 80131ce:	e9c0 3300 	strd	r3, r3, [r0]
 80131d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80131d6:	6083      	str	r3, [r0, #8]
 80131d8:	8181      	strh	r1, [r0, #12]
 80131da:	6643      	str	r3, [r0, #100]	; 0x64
 80131dc:	81c2      	strh	r2, [r0, #14]
 80131de:	6183      	str	r3, [r0, #24]
 80131e0:	4619      	mov	r1, r3
 80131e2:	2208      	movs	r2, #8
 80131e4:	305c      	adds	r0, #92	; 0x5c
 80131e6:	f7fd f869 	bl	80102bc <memset>
 80131ea:	4b05      	ldr	r3, [pc, #20]	; (8013200 <std+0x38>)
 80131ec:	6263      	str	r3, [r4, #36]	; 0x24
 80131ee:	4b05      	ldr	r3, [pc, #20]	; (8013204 <std+0x3c>)
 80131f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80131f2:	4b05      	ldr	r3, [pc, #20]	; (8013208 <std+0x40>)
 80131f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80131f6:	4b05      	ldr	r3, [pc, #20]	; (801320c <std+0x44>)
 80131f8:	6224      	str	r4, [r4, #32]
 80131fa:	6323      	str	r3, [r4, #48]	; 0x30
 80131fc:	bd10      	pop	{r4, pc}
 80131fe:	bf00      	nop
 8013200:	080148d9 	.word	0x080148d9
 8013204:	080148fb 	.word	0x080148fb
 8013208:	08014933 	.word	0x08014933
 801320c:	08014957 	.word	0x08014957

08013210 <_cleanup_r>:
 8013210:	4901      	ldr	r1, [pc, #4]	; (8013218 <_cleanup_r+0x8>)
 8013212:	f000 b8af 	b.w	8013374 <_fwalk_reent>
 8013216:	bf00      	nop
 8013218:	08013151 	.word	0x08013151

0801321c <__sfmoreglue>:
 801321c:	b570      	push	{r4, r5, r6, lr}
 801321e:	1e4a      	subs	r2, r1, #1
 8013220:	2568      	movs	r5, #104	; 0x68
 8013222:	4355      	muls	r5, r2
 8013224:	460e      	mov	r6, r1
 8013226:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801322a:	f7fd f89f 	bl	801036c <_malloc_r>
 801322e:	4604      	mov	r4, r0
 8013230:	b140      	cbz	r0, 8013244 <__sfmoreglue+0x28>
 8013232:	2100      	movs	r1, #0
 8013234:	e9c0 1600 	strd	r1, r6, [r0]
 8013238:	300c      	adds	r0, #12
 801323a:	60a0      	str	r0, [r4, #8]
 801323c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013240:	f7fd f83c 	bl	80102bc <memset>
 8013244:	4620      	mov	r0, r4
 8013246:	bd70      	pop	{r4, r5, r6, pc}

08013248 <__sfp_lock_acquire>:
 8013248:	4801      	ldr	r0, [pc, #4]	; (8013250 <__sfp_lock_acquire+0x8>)
 801324a:	f000 bc26 	b.w	8013a9a <__retarget_lock_acquire_recursive>
 801324e:	bf00      	nop
 8013250:	2400f6a8 	.word	0x2400f6a8

08013254 <__sfp_lock_release>:
 8013254:	4801      	ldr	r0, [pc, #4]	; (801325c <__sfp_lock_release+0x8>)
 8013256:	f000 bc21 	b.w	8013a9c <__retarget_lock_release_recursive>
 801325a:	bf00      	nop
 801325c:	2400f6a8 	.word	0x2400f6a8

08013260 <__sinit_lock_acquire>:
 8013260:	4801      	ldr	r0, [pc, #4]	; (8013268 <__sinit_lock_acquire+0x8>)
 8013262:	f000 bc1a 	b.w	8013a9a <__retarget_lock_acquire_recursive>
 8013266:	bf00      	nop
 8013268:	2400f6a3 	.word	0x2400f6a3

0801326c <__sinit_lock_release>:
 801326c:	4801      	ldr	r0, [pc, #4]	; (8013274 <__sinit_lock_release+0x8>)
 801326e:	f000 bc15 	b.w	8013a9c <__retarget_lock_release_recursive>
 8013272:	bf00      	nop
 8013274:	2400f6a3 	.word	0x2400f6a3

08013278 <__sinit>:
 8013278:	b510      	push	{r4, lr}
 801327a:	4604      	mov	r4, r0
 801327c:	f7ff fff0 	bl	8013260 <__sinit_lock_acquire>
 8013280:	69a3      	ldr	r3, [r4, #24]
 8013282:	b11b      	cbz	r3, 801328c <__sinit+0x14>
 8013284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013288:	f7ff bff0 	b.w	801326c <__sinit_lock_release>
 801328c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013290:	6523      	str	r3, [r4, #80]	; 0x50
 8013292:	4b13      	ldr	r3, [pc, #76]	; (80132e0 <__sinit+0x68>)
 8013294:	4a13      	ldr	r2, [pc, #76]	; (80132e4 <__sinit+0x6c>)
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	62a2      	str	r2, [r4, #40]	; 0x28
 801329a:	42a3      	cmp	r3, r4
 801329c:	bf04      	itt	eq
 801329e:	2301      	moveq	r3, #1
 80132a0:	61a3      	streq	r3, [r4, #24]
 80132a2:	4620      	mov	r0, r4
 80132a4:	f000 f820 	bl	80132e8 <__sfp>
 80132a8:	6060      	str	r0, [r4, #4]
 80132aa:	4620      	mov	r0, r4
 80132ac:	f000 f81c 	bl	80132e8 <__sfp>
 80132b0:	60a0      	str	r0, [r4, #8]
 80132b2:	4620      	mov	r0, r4
 80132b4:	f000 f818 	bl	80132e8 <__sfp>
 80132b8:	2200      	movs	r2, #0
 80132ba:	60e0      	str	r0, [r4, #12]
 80132bc:	2104      	movs	r1, #4
 80132be:	6860      	ldr	r0, [r4, #4]
 80132c0:	f7ff ff82 	bl	80131c8 <std>
 80132c4:	68a0      	ldr	r0, [r4, #8]
 80132c6:	2201      	movs	r2, #1
 80132c8:	2109      	movs	r1, #9
 80132ca:	f7ff ff7d 	bl	80131c8 <std>
 80132ce:	68e0      	ldr	r0, [r4, #12]
 80132d0:	2202      	movs	r2, #2
 80132d2:	2112      	movs	r1, #18
 80132d4:	f7ff ff78 	bl	80131c8 <std>
 80132d8:	2301      	movs	r3, #1
 80132da:	61a3      	str	r3, [r4, #24]
 80132dc:	e7d2      	b.n	8013284 <__sinit+0xc>
 80132de:	bf00      	nop
 80132e0:	0801dbfc 	.word	0x0801dbfc
 80132e4:	08013211 	.word	0x08013211

080132e8 <__sfp>:
 80132e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132ea:	4607      	mov	r7, r0
 80132ec:	f7ff ffac 	bl	8013248 <__sfp_lock_acquire>
 80132f0:	4b1e      	ldr	r3, [pc, #120]	; (801336c <__sfp+0x84>)
 80132f2:	681e      	ldr	r6, [r3, #0]
 80132f4:	69b3      	ldr	r3, [r6, #24]
 80132f6:	b913      	cbnz	r3, 80132fe <__sfp+0x16>
 80132f8:	4630      	mov	r0, r6
 80132fa:	f7ff ffbd 	bl	8013278 <__sinit>
 80132fe:	3648      	adds	r6, #72	; 0x48
 8013300:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013304:	3b01      	subs	r3, #1
 8013306:	d503      	bpl.n	8013310 <__sfp+0x28>
 8013308:	6833      	ldr	r3, [r6, #0]
 801330a:	b30b      	cbz	r3, 8013350 <__sfp+0x68>
 801330c:	6836      	ldr	r6, [r6, #0]
 801330e:	e7f7      	b.n	8013300 <__sfp+0x18>
 8013310:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013314:	b9d5      	cbnz	r5, 801334c <__sfp+0x64>
 8013316:	4b16      	ldr	r3, [pc, #88]	; (8013370 <__sfp+0x88>)
 8013318:	60e3      	str	r3, [r4, #12]
 801331a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801331e:	6665      	str	r5, [r4, #100]	; 0x64
 8013320:	f000 fbba 	bl	8013a98 <__retarget_lock_init_recursive>
 8013324:	f7ff ff96 	bl	8013254 <__sfp_lock_release>
 8013328:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801332c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013330:	6025      	str	r5, [r4, #0]
 8013332:	61a5      	str	r5, [r4, #24]
 8013334:	2208      	movs	r2, #8
 8013336:	4629      	mov	r1, r5
 8013338:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801333c:	f7fc ffbe 	bl	80102bc <memset>
 8013340:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013344:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013348:	4620      	mov	r0, r4
 801334a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801334c:	3468      	adds	r4, #104	; 0x68
 801334e:	e7d9      	b.n	8013304 <__sfp+0x1c>
 8013350:	2104      	movs	r1, #4
 8013352:	4638      	mov	r0, r7
 8013354:	f7ff ff62 	bl	801321c <__sfmoreglue>
 8013358:	4604      	mov	r4, r0
 801335a:	6030      	str	r0, [r6, #0]
 801335c:	2800      	cmp	r0, #0
 801335e:	d1d5      	bne.n	801330c <__sfp+0x24>
 8013360:	f7ff ff78 	bl	8013254 <__sfp_lock_release>
 8013364:	230c      	movs	r3, #12
 8013366:	603b      	str	r3, [r7, #0]
 8013368:	e7ee      	b.n	8013348 <__sfp+0x60>
 801336a:	bf00      	nop
 801336c:	0801dbfc 	.word	0x0801dbfc
 8013370:	ffff0001 	.word	0xffff0001

08013374 <_fwalk_reent>:
 8013374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013378:	4606      	mov	r6, r0
 801337a:	4688      	mov	r8, r1
 801337c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013380:	2700      	movs	r7, #0
 8013382:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013386:	f1b9 0901 	subs.w	r9, r9, #1
 801338a:	d505      	bpl.n	8013398 <_fwalk_reent+0x24>
 801338c:	6824      	ldr	r4, [r4, #0]
 801338e:	2c00      	cmp	r4, #0
 8013390:	d1f7      	bne.n	8013382 <_fwalk_reent+0xe>
 8013392:	4638      	mov	r0, r7
 8013394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013398:	89ab      	ldrh	r3, [r5, #12]
 801339a:	2b01      	cmp	r3, #1
 801339c:	d907      	bls.n	80133ae <_fwalk_reent+0x3a>
 801339e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80133a2:	3301      	adds	r3, #1
 80133a4:	d003      	beq.n	80133ae <_fwalk_reent+0x3a>
 80133a6:	4629      	mov	r1, r5
 80133a8:	4630      	mov	r0, r6
 80133aa:	47c0      	blx	r8
 80133ac:	4307      	orrs	r7, r0
 80133ae:	3568      	adds	r5, #104	; 0x68
 80133b0:	e7e9      	b.n	8013386 <_fwalk_reent+0x12>

080133b2 <rshift>:
 80133b2:	6903      	ldr	r3, [r0, #16]
 80133b4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80133b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80133bc:	ea4f 1261 	mov.w	r2, r1, asr #5
 80133c0:	f100 0414 	add.w	r4, r0, #20
 80133c4:	dd45      	ble.n	8013452 <rshift+0xa0>
 80133c6:	f011 011f 	ands.w	r1, r1, #31
 80133ca:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80133ce:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80133d2:	d10c      	bne.n	80133ee <rshift+0x3c>
 80133d4:	f100 0710 	add.w	r7, r0, #16
 80133d8:	4629      	mov	r1, r5
 80133da:	42b1      	cmp	r1, r6
 80133dc:	d334      	bcc.n	8013448 <rshift+0x96>
 80133de:	1a9b      	subs	r3, r3, r2
 80133e0:	009b      	lsls	r3, r3, #2
 80133e2:	1eea      	subs	r2, r5, #3
 80133e4:	4296      	cmp	r6, r2
 80133e6:	bf38      	it	cc
 80133e8:	2300      	movcc	r3, #0
 80133ea:	4423      	add	r3, r4
 80133ec:	e015      	b.n	801341a <rshift+0x68>
 80133ee:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80133f2:	f1c1 0820 	rsb	r8, r1, #32
 80133f6:	40cf      	lsrs	r7, r1
 80133f8:	f105 0e04 	add.w	lr, r5, #4
 80133fc:	46a1      	mov	r9, r4
 80133fe:	4576      	cmp	r6, lr
 8013400:	46f4      	mov	ip, lr
 8013402:	d815      	bhi.n	8013430 <rshift+0x7e>
 8013404:	1a9b      	subs	r3, r3, r2
 8013406:	009a      	lsls	r2, r3, #2
 8013408:	3a04      	subs	r2, #4
 801340a:	3501      	adds	r5, #1
 801340c:	42ae      	cmp	r6, r5
 801340e:	bf38      	it	cc
 8013410:	2200      	movcc	r2, #0
 8013412:	18a3      	adds	r3, r4, r2
 8013414:	50a7      	str	r7, [r4, r2]
 8013416:	b107      	cbz	r7, 801341a <rshift+0x68>
 8013418:	3304      	adds	r3, #4
 801341a:	1b1a      	subs	r2, r3, r4
 801341c:	42a3      	cmp	r3, r4
 801341e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013422:	bf08      	it	eq
 8013424:	2300      	moveq	r3, #0
 8013426:	6102      	str	r2, [r0, #16]
 8013428:	bf08      	it	eq
 801342a:	6143      	streq	r3, [r0, #20]
 801342c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013430:	f8dc c000 	ldr.w	ip, [ip]
 8013434:	fa0c fc08 	lsl.w	ip, ip, r8
 8013438:	ea4c 0707 	orr.w	r7, ip, r7
 801343c:	f849 7b04 	str.w	r7, [r9], #4
 8013440:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013444:	40cf      	lsrs	r7, r1
 8013446:	e7da      	b.n	80133fe <rshift+0x4c>
 8013448:	f851 cb04 	ldr.w	ip, [r1], #4
 801344c:	f847 cf04 	str.w	ip, [r7, #4]!
 8013450:	e7c3      	b.n	80133da <rshift+0x28>
 8013452:	4623      	mov	r3, r4
 8013454:	e7e1      	b.n	801341a <rshift+0x68>

08013456 <__hexdig_fun>:
 8013456:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801345a:	2b09      	cmp	r3, #9
 801345c:	d802      	bhi.n	8013464 <__hexdig_fun+0xe>
 801345e:	3820      	subs	r0, #32
 8013460:	b2c0      	uxtb	r0, r0
 8013462:	4770      	bx	lr
 8013464:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013468:	2b05      	cmp	r3, #5
 801346a:	d801      	bhi.n	8013470 <__hexdig_fun+0x1a>
 801346c:	3847      	subs	r0, #71	; 0x47
 801346e:	e7f7      	b.n	8013460 <__hexdig_fun+0xa>
 8013470:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013474:	2b05      	cmp	r3, #5
 8013476:	d801      	bhi.n	801347c <__hexdig_fun+0x26>
 8013478:	3827      	subs	r0, #39	; 0x27
 801347a:	e7f1      	b.n	8013460 <__hexdig_fun+0xa>
 801347c:	2000      	movs	r0, #0
 801347e:	4770      	bx	lr

08013480 <__gethex>:
 8013480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013484:	ed2d 8b02 	vpush	{d8}
 8013488:	b089      	sub	sp, #36	; 0x24
 801348a:	ee08 0a10 	vmov	s16, r0
 801348e:	9304      	str	r3, [sp, #16]
 8013490:	4bbc      	ldr	r3, [pc, #752]	; (8013784 <__gethex+0x304>)
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	9301      	str	r3, [sp, #4]
 8013496:	4618      	mov	r0, r3
 8013498:	468b      	mov	fp, r1
 801349a:	4690      	mov	r8, r2
 801349c:	f7ec ff2a 	bl	80002f4 <strlen>
 80134a0:	9b01      	ldr	r3, [sp, #4]
 80134a2:	f8db 2000 	ldr.w	r2, [fp]
 80134a6:	4403      	add	r3, r0
 80134a8:	4682      	mov	sl, r0
 80134aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80134ae:	9305      	str	r3, [sp, #20]
 80134b0:	1c93      	adds	r3, r2, #2
 80134b2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80134b6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80134ba:	32fe      	adds	r2, #254	; 0xfe
 80134bc:	18d1      	adds	r1, r2, r3
 80134be:	461f      	mov	r7, r3
 80134c0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80134c4:	9100      	str	r1, [sp, #0]
 80134c6:	2830      	cmp	r0, #48	; 0x30
 80134c8:	d0f8      	beq.n	80134bc <__gethex+0x3c>
 80134ca:	f7ff ffc4 	bl	8013456 <__hexdig_fun>
 80134ce:	4604      	mov	r4, r0
 80134d0:	2800      	cmp	r0, #0
 80134d2:	d13a      	bne.n	801354a <__gethex+0xca>
 80134d4:	9901      	ldr	r1, [sp, #4]
 80134d6:	4652      	mov	r2, sl
 80134d8:	4638      	mov	r0, r7
 80134da:	f7fe f83b 	bl	8011554 <strncmp>
 80134de:	4605      	mov	r5, r0
 80134e0:	2800      	cmp	r0, #0
 80134e2:	d168      	bne.n	80135b6 <__gethex+0x136>
 80134e4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80134e8:	eb07 060a 	add.w	r6, r7, sl
 80134ec:	f7ff ffb3 	bl	8013456 <__hexdig_fun>
 80134f0:	2800      	cmp	r0, #0
 80134f2:	d062      	beq.n	80135ba <__gethex+0x13a>
 80134f4:	4633      	mov	r3, r6
 80134f6:	7818      	ldrb	r0, [r3, #0]
 80134f8:	2830      	cmp	r0, #48	; 0x30
 80134fa:	461f      	mov	r7, r3
 80134fc:	f103 0301 	add.w	r3, r3, #1
 8013500:	d0f9      	beq.n	80134f6 <__gethex+0x76>
 8013502:	f7ff ffa8 	bl	8013456 <__hexdig_fun>
 8013506:	2301      	movs	r3, #1
 8013508:	fab0 f480 	clz	r4, r0
 801350c:	0964      	lsrs	r4, r4, #5
 801350e:	4635      	mov	r5, r6
 8013510:	9300      	str	r3, [sp, #0]
 8013512:	463a      	mov	r2, r7
 8013514:	4616      	mov	r6, r2
 8013516:	3201      	adds	r2, #1
 8013518:	7830      	ldrb	r0, [r6, #0]
 801351a:	f7ff ff9c 	bl	8013456 <__hexdig_fun>
 801351e:	2800      	cmp	r0, #0
 8013520:	d1f8      	bne.n	8013514 <__gethex+0x94>
 8013522:	9901      	ldr	r1, [sp, #4]
 8013524:	4652      	mov	r2, sl
 8013526:	4630      	mov	r0, r6
 8013528:	f7fe f814 	bl	8011554 <strncmp>
 801352c:	b980      	cbnz	r0, 8013550 <__gethex+0xd0>
 801352e:	b94d      	cbnz	r5, 8013544 <__gethex+0xc4>
 8013530:	eb06 050a 	add.w	r5, r6, sl
 8013534:	462a      	mov	r2, r5
 8013536:	4616      	mov	r6, r2
 8013538:	3201      	adds	r2, #1
 801353a:	7830      	ldrb	r0, [r6, #0]
 801353c:	f7ff ff8b 	bl	8013456 <__hexdig_fun>
 8013540:	2800      	cmp	r0, #0
 8013542:	d1f8      	bne.n	8013536 <__gethex+0xb6>
 8013544:	1bad      	subs	r5, r5, r6
 8013546:	00ad      	lsls	r5, r5, #2
 8013548:	e004      	b.n	8013554 <__gethex+0xd4>
 801354a:	2400      	movs	r4, #0
 801354c:	4625      	mov	r5, r4
 801354e:	e7e0      	b.n	8013512 <__gethex+0x92>
 8013550:	2d00      	cmp	r5, #0
 8013552:	d1f7      	bne.n	8013544 <__gethex+0xc4>
 8013554:	7833      	ldrb	r3, [r6, #0]
 8013556:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801355a:	2b50      	cmp	r3, #80	; 0x50
 801355c:	d13b      	bne.n	80135d6 <__gethex+0x156>
 801355e:	7873      	ldrb	r3, [r6, #1]
 8013560:	2b2b      	cmp	r3, #43	; 0x2b
 8013562:	d02c      	beq.n	80135be <__gethex+0x13e>
 8013564:	2b2d      	cmp	r3, #45	; 0x2d
 8013566:	d02e      	beq.n	80135c6 <__gethex+0x146>
 8013568:	1c71      	adds	r1, r6, #1
 801356a:	f04f 0900 	mov.w	r9, #0
 801356e:	7808      	ldrb	r0, [r1, #0]
 8013570:	f7ff ff71 	bl	8013456 <__hexdig_fun>
 8013574:	1e43      	subs	r3, r0, #1
 8013576:	b2db      	uxtb	r3, r3
 8013578:	2b18      	cmp	r3, #24
 801357a:	d82c      	bhi.n	80135d6 <__gethex+0x156>
 801357c:	f1a0 0210 	sub.w	r2, r0, #16
 8013580:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013584:	f7ff ff67 	bl	8013456 <__hexdig_fun>
 8013588:	1e43      	subs	r3, r0, #1
 801358a:	b2db      	uxtb	r3, r3
 801358c:	2b18      	cmp	r3, #24
 801358e:	d91d      	bls.n	80135cc <__gethex+0x14c>
 8013590:	f1b9 0f00 	cmp.w	r9, #0
 8013594:	d000      	beq.n	8013598 <__gethex+0x118>
 8013596:	4252      	negs	r2, r2
 8013598:	4415      	add	r5, r2
 801359a:	f8cb 1000 	str.w	r1, [fp]
 801359e:	b1e4      	cbz	r4, 80135da <__gethex+0x15a>
 80135a0:	9b00      	ldr	r3, [sp, #0]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	bf14      	ite	ne
 80135a6:	2700      	movne	r7, #0
 80135a8:	2706      	moveq	r7, #6
 80135aa:	4638      	mov	r0, r7
 80135ac:	b009      	add	sp, #36	; 0x24
 80135ae:	ecbd 8b02 	vpop	{d8}
 80135b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135b6:	463e      	mov	r6, r7
 80135b8:	4625      	mov	r5, r4
 80135ba:	2401      	movs	r4, #1
 80135bc:	e7ca      	b.n	8013554 <__gethex+0xd4>
 80135be:	f04f 0900 	mov.w	r9, #0
 80135c2:	1cb1      	adds	r1, r6, #2
 80135c4:	e7d3      	b.n	801356e <__gethex+0xee>
 80135c6:	f04f 0901 	mov.w	r9, #1
 80135ca:	e7fa      	b.n	80135c2 <__gethex+0x142>
 80135cc:	230a      	movs	r3, #10
 80135ce:	fb03 0202 	mla	r2, r3, r2, r0
 80135d2:	3a10      	subs	r2, #16
 80135d4:	e7d4      	b.n	8013580 <__gethex+0x100>
 80135d6:	4631      	mov	r1, r6
 80135d8:	e7df      	b.n	801359a <__gethex+0x11a>
 80135da:	1bf3      	subs	r3, r6, r7
 80135dc:	3b01      	subs	r3, #1
 80135de:	4621      	mov	r1, r4
 80135e0:	2b07      	cmp	r3, #7
 80135e2:	dc0b      	bgt.n	80135fc <__gethex+0x17c>
 80135e4:	ee18 0a10 	vmov	r0, s16
 80135e8:	f000 fadc 	bl	8013ba4 <_Balloc>
 80135ec:	4604      	mov	r4, r0
 80135ee:	b940      	cbnz	r0, 8013602 <__gethex+0x182>
 80135f0:	4b65      	ldr	r3, [pc, #404]	; (8013788 <__gethex+0x308>)
 80135f2:	4602      	mov	r2, r0
 80135f4:	21de      	movs	r1, #222	; 0xde
 80135f6:	4865      	ldr	r0, [pc, #404]	; (801378c <__gethex+0x30c>)
 80135f8:	f7fc fdce 	bl	8010198 <__assert_func>
 80135fc:	3101      	adds	r1, #1
 80135fe:	105b      	asrs	r3, r3, #1
 8013600:	e7ee      	b.n	80135e0 <__gethex+0x160>
 8013602:	f100 0914 	add.w	r9, r0, #20
 8013606:	f04f 0b00 	mov.w	fp, #0
 801360a:	f1ca 0301 	rsb	r3, sl, #1
 801360e:	f8cd 9008 	str.w	r9, [sp, #8]
 8013612:	f8cd b000 	str.w	fp, [sp]
 8013616:	9306      	str	r3, [sp, #24]
 8013618:	42b7      	cmp	r7, r6
 801361a:	d340      	bcc.n	801369e <__gethex+0x21e>
 801361c:	9802      	ldr	r0, [sp, #8]
 801361e:	9b00      	ldr	r3, [sp, #0]
 8013620:	f840 3b04 	str.w	r3, [r0], #4
 8013624:	eba0 0009 	sub.w	r0, r0, r9
 8013628:	1080      	asrs	r0, r0, #2
 801362a:	0146      	lsls	r6, r0, #5
 801362c:	6120      	str	r0, [r4, #16]
 801362e:	4618      	mov	r0, r3
 8013630:	f000 fbae 	bl	8013d90 <__hi0bits>
 8013634:	1a30      	subs	r0, r6, r0
 8013636:	f8d8 6000 	ldr.w	r6, [r8]
 801363a:	42b0      	cmp	r0, r6
 801363c:	dd63      	ble.n	8013706 <__gethex+0x286>
 801363e:	1b87      	subs	r7, r0, r6
 8013640:	4639      	mov	r1, r7
 8013642:	4620      	mov	r0, r4
 8013644:	f000 ff49 	bl	80144da <__any_on>
 8013648:	4682      	mov	sl, r0
 801364a:	b1a8      	cbz	r0, 8013678 <__gethex+0x1f8>
 801364c:	1e7b      	subs	r3, r7, #1
 801364e:	1159      	asrs	r1, r3, #5
 8013650:	f003 021f 	and.w	r2, r3, #31
 8013654:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8013658:	f04f 0a01 	mov.w	sl, #1
 801365c:	fa0a f202 	lsl.w	r2, sl, r2
 8013660:	420a      	tst	r2, r1
 8013662:	d009      	beq.n	8013678 <__gethex+0x1f8>
 8013664:	4553      	cmp	r3, sl
 8013666:	dd05      	ble.n	8013674 <__gethex+0x1f4>
 8013668:	1eb9      	subs	r1, r7, #2
 801366a:	4620      	mov	r0, r4
 801366c:	f000 ff35 	bl	80144da <__any_on>
 8013670:	2800      	cmp	r0, #0
 8013672:	d145      	bne.n	8013700 <__gethex+0x280>
 8013674:	f04f 0a02 	mov.w	sl, #2
 8013678:	4639      	mov	r1, r7
 801367a:	4620      	mov	r0, r4
 801367c:	f7ff fe99 	bl	80133b2 <rshift>
 8013680:	443d      	add	r5, r7
 8013682:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013686:	42ab      	cmp	r3, r5
 8013688:	da4c      	bge.n	8013724 <__gethex+0x2a4>
 801368a:	ee18 0a10 	vmov	r0, s16
 801368e:	4621      	mov	r1, r4
 8013690:	f000 fac8 	bl	8013c24 <_Bfree>
 8013694:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013696:	2300      	movs	r3, #0
 8013698:	6013      	str	r3, [r2, #0]
 801369a:	27a3      	movs	r7, #163	; 0xa3
 801369c:	e785      	b.n	80135aa <__gethex+0x12a>
 801369e:	1e73      	subs	r3, r6, #1
 80136a0:	9a05      	ldr	r2, [sp, #20]
 80136a2:	9303      	str	r3, [sp, #12]
 80136a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80136a8:	4293      	cmp	r3, r2
 80136aa:	d019      	beq.n	80136e0 <__gethex+0x260>
 80136ac:	f1bb 0f20 	cmp.w	fp, #32
 80136b0:	d107      	bne.n	80136c2 <__gethex+0x242>
 80136b2:	9b02      	ldr	r3, [sp, #8]
 80136b4:	9a00      	ldr	r2, [sp, #0]
 80136b6:	f843 2b04 	str.w	r2, [r3], #4
 80136ba:	9302      	str	r3, [sp, #8]
 80136bc:	2300      	movs	r3, #0
 80136be:	9300      	str	r3, [sp, #0]
 80136c0:	469b      	mov	fp, r3
 80136c2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80136c6:	f7ff fec6 	bl	8013456 <__hexdig_fun>
 80136ca:	9b00      	ldr	r3, [sp, #0]
 80136cc:	f000 000f 	and.w	r0, r0, #15
 80136d0:	fa00 f00b 	lsl.w	r0, r0, fp
 80136d4:	4303      	orrs	r3, r0
 80136d6:	9300      	str	r3, [sp, #0]
 80136d8:	f10b 0b04 	add.w	fp, fp, #4
 80136dc:	9b03      	ldr	r3, [sp, #12]
 80136de:	e00d      	b.n	80136fc <__gethex+0x27c>
 80136e0:	9b03      	ldr	r3, [sp, #12]
 80136e2:	9a06      	ldr	r2, [sp, #24]
 80136e4:	4413      	add	r3, r2
 80136e6:	42bb      	cmp	r3, r7
 80136e8:	d3e0      	bcc.n	80136ac <__gethex+0x22c>
 80136ea:	4618      	mov	r0, r3
 80136ec:	9901      	ldr	r1, [sp, #4]
 80136ee:	9307      	str	r3, [sp, #28]
 80136f0:	4652      	mov	r2, sl
 80136f2:	f7fd ff2f 	bl	8011554 <strncmp>
 80136f6:	9b07      	ldr	r3, [sp, #28]
 80136f8:	2800      	cmp	r0, #0
 80136fa:	d1d7      	bne.n	80136ac <__gethex+0x22c>
 80136fc:	461e      	mov	r6, r3
 80136fe:	e78b      	b.n	8013618 <__gethex+0x198>
 8013700:	f04f 0a03 	mov.w	sl, #3
 8013704:	e7b8      	b.n	8013678 <__gethex+0x1f8>
 8013706:	da0a      	bge.n	801371e <__gethex+0x29e>
 8013708:	1a37      	subs	r7, r6, r0
 801370a:	4621      	mov	r1, r4
 801370c:	ee18 0a10 	vmov	r0, s16
 8013710:	463a      	mov	r2, r7
 8013712:	f000 fca3 	bl	801405c <__lshift>
 8013716:	1bed      	subs	r5, r5, r7
 8013718:	4604      	mov	r4, r0
 801371a:	f100 0914 	add.w	r9, r0, #20
 801371e:	f04f 0a00 	mov.w	sl, #0
 8013722:	e7ae      	b.n	8013682 <__gethex+0x202>
 8013724:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013728:	42a8      	cmp	r0, r5
 801372a:	dd72      	ble.n	8013812 <__gethex+0x392>
 801372c:	1b45      	subs	r5, r0, r5
 801372e:	42ae      	cmp	r6, r5
 8013730:	dc36      	bgt.n	80137a0 <__gethex+0x320>
 8013732:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013736:	2b02      	cmp	r3, #2
 8013738:	d02a      	beq.n	8013790 <__gethex+0x310>
 801373a:	2b03      	cmp	r3, #3
 801373c:	d02c      	beq.n	8013798 <__gethex+0x318>
 801373e:	2b01      	cmp	r3, #1
 8013740:	d115      	bne.n	801376e <__gethex+0x2ee>
 8013742:	42ae      	cmp	r6, r5
 8013744:	d113      	bne.n	801376e <__gethex+0x2ee>
 8013746:	2e01      	cmp	r6, #1
 8013748:	d10b      	bne.n	8013762 <__gethex+0x2e2>
 801374a:	9a04      	ldr	r2, [sp, #16]
 801374c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013750:	6013      	str	r3, [r2, #0]
 8013752:	2301      	movs	r3, #1
 8013754:	6123      	str	r3, [r4, #16]
 8013756:	f8c9 3000 	str.w	r3, [r9]
 801375a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801375c:	2762      	movs	r7, #98	; 0x62
 801375e:	601c      	str	r4, [r3, #0]
 8013760:	e723      	b.n	80135aa <__gethex+0x12a>
 8013762:	1e71      	subs	r1, r6, #1
 8013764:	4620      	mov	r0, r4
 8013766:	f000 feb8 	bl	80144da <__any_on>
 801376a:	2800      	cmp	r0, #0
 801376c:	d1ed      	bne.n	801374a <__gethex+0x2ca>
 801376e:	ee18 0a10 	vmov	r0, s16
 8013772:	4621      	mov	r1, r4
 8013774:	f000 fa56 	bl	8013c24 <_Bfree>
 8013778:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801377a:	2300      	movs	r3, #0
 801377c:	6013      	str	r3, [r2, #0]
 801377e:	2750      	movs	r7, #80	; 0x50
 8013780:	e713      	b.n	80135aa <__gethex+0x12a>
 8013782:	bf00      	nop
 8013784:	0801df04 	.word	0x0801df04
 8013788:	0801de24 	.word	0x0801de24
 801378c:	0801de98 	.word	0x0801de98
 8013790:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013792:	2b00      	cmp	r3, #0
 8013794:	d1eb      	bne.n	801376e <__gethex+0x2ee>
 8013796:	e7d8      	b.n	801374a <__gethex+0x2ca>
 8013798:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801379a:	2b00      	cmp	r3, #0
 801379c:	d1d5      	bne.n	801374a <__gethex+0x2ca>
 801379e:	e7e6      	b.n	801376e <__gethex+0x2ee>
 80137a0:	1e6f      	subs	r7, r5, #1
 80137a2:	f1ba 0f00 	cmp.w	sl, #0
 80137a6:	d131      	bne.n	801380c <__gethex+0x38c>
 80137a8:	b127      	cbz	r7, 80137b4 <__gethex+0x334>
 80137aa:	4639      	mov	r1, r7
 80137ac:	4620      	mov	r0, r4
 80137ae:	f000 fe94 	bl	80144da <__any_on>
 80137b2:	4682      	mov	sl, r0
 80137b4:	117b      	asrs	r3, r7, #5
 80137b6:	2101      	movs	r1, #1
 80137b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80137bc:	f007 071f 	and.w	r7, r7, #31
 80137c0:	fa01 f707 	lsl.w	r7, r1, r7
 80137c4:	421f      	tst	r7, r3
 80137c6:	4629      	mov	r1, r5
 80137c8:	4620      	mov	r0, r4
 80137ca:	bf18      	it	ne
 80137cc:	f04a 0a02 	orrne.w	sl, sl, #2
 80137d0:	1b76      	subs	r6, r6, r5
 80137d2:	f7ff fdee 	bl	80133b2 <rshift>
 80137d6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80137da:	2702      	movs	r7, #2
 80137dc:	f1ba 0f00 	cmp.w	sl, #0
 80137e0:	d048      	beq.n	8013874 <__gethex+0x3f4>
 80137e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80137e6:	2b02      	cmp	r3, #2
 80137e8:	d015      	beq.n	8013816 <__gethex+0x396>
 80137ea:	2b03      	cmp	r3, #3
 80137ec:	d017      	beq.n	801381e <__gethex+0x39e>
 80137ee:	2b01      	cmp	r3, #1
 80137f0:	d109      	bne.n	8013806 <__gethex+0x386>
 80137f2:	f01a 0f02 	tst.w	sl, #2
 80137f6:	d006      	beq.n	8013806 <__gethex+0x386>
 80137f8:	f8d9 0000 	ldr.w	r0, [r9]
 80137fc:	ea4a 0a00 	orr.w	sl, sl, r0
 8013800:	f01a 0f01 	tst.w	sl, #1
 8013804:	d10e      	bne.n	8013824 <__gethex+0x3a4>
 8013806:	f047 0710 	orr.w	r7, r7, #16
 801380a:	e033      	b.n	8013874 <__gethex+0x3f4>
 801380c:	f04f 0a01 	mov.w	sl, #1
 8013810:	e7d0      	b.n	80137b4 <__gethex+0x334>
 8013812:	2701      	movs	r7, #1
 8013814:	e7e2      	b.n	80137dc <__gethex+0x35c>
 8013816:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013818:	f1c3 0301 	rsb	r3, r3, #1
 801381c:	9315      	str	r3, [sp, #84]	; 0x54
 801381e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013820:	2b00      	cmp	r3, #0
 8013822:	d0f0      	beq.n	8013806 <__gethex+0x386>
 8013824:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013828:	f104 0314 	add.w	r3, r4, #20
 801382c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013830:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013834:	f04f 0c00 	mov.w	ip, #0
 8013838:	4618      	mov	r0, r3
 801383a:	f853 2b04 	ldr.w	r2, [r3], #4
 801383e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013842:	d01c      	beq.n	801387e <__gethex+0x3fe>
 8013844:	3201      	adds	r2, #1
 8013846:	6002      	str	r2, [r0, #0]
 8013848:	2f02      	cmp	r7, #2
 801384a:	f104 0314 	add.w	r3, r4, #20
 801384e:	d13f      	bne.n	80138d0 <__gethex+0x450>
 8013850:	f8d8 2000 	ldr.w	r2, [r8]
 8013854:	3a01      	subs	r2, #1
 8013856:	42b2      	cmp	r2, r6
 8013858:	d10a      	bne.n	8013870 <__gethex+0x3f0>
 801385a:	1171      	asrs	r1, r6, #5
 801385c:	2201      	movs	r2, #1
 801385e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013862:	f006 061f 	and.w	r6, r6, #31
 8013866:	fa02 f606 	lsl.w	r6, r2, r6
 801386a:	421e      	tst	r6, r3
 801386c:	bf18      	it	ne
 801386e:	4617      	movne	r7, r2
 8013870:	f047 0720 	orr.w	r7, r7, #32
 8013874:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013876:	601c      	str	r4, [r3, #0]
 8013878:	9b04      	ldr	r3, [sp, #16]
 801387a:	601d      	str	r5, [r3, #0]
 801387c:	e695      	b.n	80135aa <__gethex+0x12a>
 801387e:	4299      	cmp	r1, r3
 8013880:	f843 cc04 	str.w	ip, [r3, #-4]
 8013884:	d8d8      	bhi.n	8013838 <__gethex+0x3b8>
 8013886:	68a3      	ldr	r3, [r4, #8]
 8013888:	459b      	cmp	fp, r3
 801388a:	db19      	blt.n	80138c0 <__gethex+0x440>
 801388c:	6861      	ldr	r1, [r4, #4]
 801388e:	ee18 0a10 	vmov	r0, s16
 8013892:	3101      	adds	r1, #1
 8013894:	f000 f986 	bl	8013ba4 <_Balloc>
 8013898:	4681      	mov	r9, r0
 801389a:	b918      	cbnz	r0, 80138a4 <__gethex+0x424>
 801389c:	4b1a      	ldr	r3, [pc, #104]	; (8013908 <__gethex+0x488>)
 801389e:	4602      	mov	r2, r0
 80138a0:	2184      	movs	r1, #132	; 0x84
 80138a2:	e6a8      	b.n	80135f6 <__gethex+0x176>
 80138a4:	6922      	ldr	r2, [r4, #16]
 80138a6:	3202      	adds	r2, #2
 80138a8:	f104 010c 	add.w	r1, r4, #12
 80138ac:	0092      	lsls	r2, r2, #2
 80138ae:	300c      	adds	r0, #12
 80138b0:	f7fc fcdc 	bl	801026c <memcpy>
 80138b4:	4621      	mov	r1, r4
 80138b6:	ee18 0a10 	vmov	r0, s16
 80138ba:	f000 f9b3 	bl	8013c24 <_Bfree>
 80138be:	464c      	mov	r4, r9
 80138c0:	6923      	ldr	r3, [r4, #16]
 80138c2:	1c5a      	adds	r2, r3, #1
 80138c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80138c8:	6122      	str	r2, [r4, #16]
 80138ca:	2201      	movs	r2, #1
 80138cc:	615a      	str	r2, [r3, #20]
 80138ce:	e7bb      	b.n	8013848 <__gethex+0x3c8>
 80138d0:	6922      	ldr	r2, [r4, #16]
 80138d2:	455a      	cmp	r2, fp
 80138d4:	dd0b      	ble.n	80138ee <__gethex+0x46e>
 80138d6:	2101      	movs	r1, #1
 80138d8:	4620      	mov	r0, r4
 80138da:	f7ff fd6a 	bl	80133b2 <rshift>
 80138de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80138e2:	3501      	adds	r5, #1
 80138e4:	42ab      	cmp	r3, r5
 80138e6:	f6ff aed0 	blt.w	801368a <__gethex+0x20a>
 80138ea:	2701      	movs	r7, #1
 80138ec:	e7c0      	b.n	8013870 <__gethex+0x3f0>
 80138ee:	f016 061f 	ands.w	r6, r6, #31
 80138f2:	d0fa      	beq.n	80138ea <__gethex+0x46a>
 80138f4:	449a      	add	sl, r3
 80138f6:	f1c6 0620 	rsb	r6, r6, #32
 80138fa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80138fe:	f000 fa47 	bl	8013d90 <__hi0bits>
 8013902:	42b0      	cmp	r0, r6
 8013904:	dbe7      	blt.n	80138d6 <__gethex+0x456>
 8013906:	e7f0      	b.n	80138ea <__gethex+0x46a>
 8013908:	0801de24 	.word	0x0801de24

0801390c <L_shift>:
 801390c:	f1c2 0208 	rsb	r2, r2, #8
 8013910:	0092      	lsls	r2, r2, #2
 8013912:	b570      	push	{r4, r5, r6, lr}
 8013914:	f1c2 0620 	rsb	r6, r2, #32
 8013918:	6843      	ldr	r3, [r0, #4]
 801391a:	6804      	ldr	r4, [r0, #0]
 801391c:	fa03 f506 	lsl.w	r5, r3, r6
 8013920:	432c      	orrs	r4, r5
 8013922:	40d3      	lsrs	r3, r2
 8013924:	6004      	str	r4, [r0, #0]
 8013926:	f840 3f04 	str.w	r3, [r0, #4]!
 801392a:	4288      	cmp	r0, r1
 801392c:	d3f4      	bcc.n	8013918 <L_shift+0xc>
 801392e:	bd70      	pop	{r4, r5, r6, pc}

08013930 <__match>:
 8013930:	b530      	push	{r4, r5, lr}
 8013932:	6803      	ldr	r3, [r0, #0]
 8013934:	3301      	adds	r3, #1
 8013936:	f811 4b01 	ldrb.w	r4, [r1], #1
 801393a:	b914      	cbnz	r4, 8013942 <__match+0x12>
 801393c:	6003      	str	r3, [r0, #0]
 801393e:	2001      	movs	r0, #1
 8013940:	bd30      	pop	{r4, r5, pc}
 8013942:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013946:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801394a:	2d19      	cmp	r5, #25
 801394c:	bf98      	it	ls
 801394e:	3220      	addls	r2, #32
 8013950:	42a2      	cmp	r2, r4
 8013952:	d0f0      	beq.n	8013936 <__match+0x6>
 8013954:	2000      	movs	r0, #0
 8013956:	e7f3      	b.n	8013940 <__match+0x10>

08013958 <__hexnan>:
 8013958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801395c:	680b      	ldr	r3, [r1, #0]
 801395e:	6801      	ldr	r1, [r0, #0]
 8013960:	115e      	asrs	r6, r3, #5
 8013962:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013966:	f013 031f 	ands.w	r3, r3, #31
 801396a:	b087      	sub	sp, #28
 801396c:	bf18      	it	ne
 801396e:	3604      	addne	r6, #4
 8013970:	2500      	movs	r5, #0
 8013972:	1f37      	subs	r7, r6, #4
 8013974:	4682      	mov	sl, r0
 8013976:	4690      	mov	r8, r2
 8013978:	9301      	str	r3, [sp, #4]
 801397a:	f846 5c04 	str.w	r5, [r6, #-4]
 801397e:	46b9      	mov	r9, r7
 8013980:	463c      	mov	r4, r7
 8013982:	9502      	str	r5, [sp, #8]
 8013984:	46ab      	mov	fp, r5
 8013986:	784a      	ldrb	r2, [r1, #1]
 8013988:	1c4b      	adds	r3, r1, #1
 801398a:	9303      	str	r3, [sp, #12]
 801398c:	b342      	cbz	r2, 80139e0 <__hexnan+0x88>
 801398e:	4610      	mov	r0, r2
 8013990:	9105      	str	r1, [sp, #20]
 8013992:	9204      	str	r2, [sp, #16]
 8013994:	f7ff fd5f 	bl	8013456 <__hexdig_fun>
 8013998:	2800      	cmp	r0, #0
 801399a:	d14f      	bne.n	8013a3c <__hexnan+0xe4>
 801399c:	9a04      	ldr	r2, [sp, #16]
 801399e:	9905      	ldr	r1, [sp, #20]
 80139a0:	2a20      	cmp	r2, #32
 80139a2:	d818      	bhi.n	80139d6 <__hexnan+0x7e>
 80139a4:	9b02      	ldr	r3, [sp, #8]
 80139a6:	459b      	cmp	fp, r3
 80139a8:	dd13      	ble.n	80139d2 <__hexnan+0x7a>
 80139aa:	454c      	cmp	r4, r9
 80139ac:	d206      	bcs.n	80139bc <__hexnan+0x64>
 80139ae:	2d07      	cmp	r5, #7
 80139b0:	dc04      	bgt.n	80139bc <__hexnan+0x64>
 80139b2:	462a      	mov	r2, r5
 80139b4:	4649      	mov	r1, r9
 80139b6:	4620      	mov	r0, r4
 80139b8:	f7ff ffa8 	bl	801390c <L_shift>
 80139bc:	4544      	cmp	r4, r8
 80139be:	d950      	bls.n	8013a62 <__hexnan+0x10a>
 80139c0:	2300      	movs	r3, #0
 80139c2:	f1a4 0904 	sub.w	r9, r4, #4
 80139c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80139ca:	f8cd b008 	str.w	fp, [sp, #8]
 80139ce:	464c      	mov	r4, r9
 80139d0:	461d      	mov	r5, r3
 80139d2:	9903      	ldr	r1, [sp, #12]
 80139d4:	e7d7      	b.n	8013986 <__hexnan+0x2e>
 80139d6:	2a29      	cmp	r2, #41	; 0x29
 80139d8:	d156      	bne.n	8013a88 <__hexnan+0x130>
 80139da:	3102      	adds	r1, #2
 80139dc:	f8ca 1000 	str.w	r1, [sl]
 80139e0:	f1bb 0f00 	cmp.w	fp, #0
 80139e4:	d050      	beq.n	8013a88 <__hexnan+0x130>
 80139e6:	454c      	cmp	r4, r9
 80139e8:	d206      	bcs.n	80139f8 <__hexnan+0xa0>
 80139ea:	2d07      	cmp	r5, #7
 80139ec:	dc04      	bgt.n	80139f8 <__hexnan+0xa0>
 80139ee:	462a      	mov	r2, r5
 80139f0:	4649      	mov	r1, r9
 80139f2:	4620      	mov	r0, r4
 80139f4:	f7ff ff8a 	bl	801390c <L_shift>
 80139f8:	4544      	cmp	r4, r8
 80139fa:	d934      	bls.n	8013a66 <__hexnan+0x10e>
 80139fc:	f1a8 0204 	sub.w	r2, r8, #4
 8013a00:	4623      	mov	r3, r4
 8013a02:	f853 1b04 	ldr.w	r1, [r3], #4
 8013a06:	f842 1f04 	str.w	r1, [r2, #4]!
 8013a0a:	429f      	cmp	r7, r3
 8013a0c:	d2f9      	bcs.n	8013a02 <__hexnan+0xaa>
 8013a0e:	1b3b      	subs	r3, r7, r4
 8013a10:	f023 0303 	bic.w	r3, r3, #3
 8013a14:	3304      	adds	r3, #4
 8013a16:	3401      	adds	r4, #1
 8013a18:	3e03      	subs	r6, #3
 8013a1a:	42b4      	cmp	r4, r6
 8013a1c:	bf88      	it	hi
 8013a1e:	2304      	movhi	r3, #4
 8013a20:	4443      	add	r3, r8
 8013a22:	2200      	movs	r2, #0
 8013a24:	f843 2b04 	str.w	r2, [r3], #4
 8013a28:	429f      	cmp	r7, r3
 8013a2a:	d2fb      	bcs.n	8013a24 <__hexnan+0xcc>
 8013a2c:	683b      	ldr	r3, [r7, #0]
 8013a2e:	b91b      	cbnz	r3, 8013a38 <__hexnan+0xe0>
 8013a30:	4547      	cmp	r7, r8
 8013a32:	d127      	bne.n	8013a84 <__hexnan+0x12c>
 8013a34:	2301      	movs	r3, #1
 8013a36:	603b      	str	r3, [r7, #0]
 8013a38:	2005      	movs	r0, #5
 8013a3a:	e026      	b.n	8013a8a <__hexnan+0x132>
 8013a3c:	3501      	adds	r5, #1
 8013a3e:	2d08      	cmp	r5, #8
 8013a40:	f10b 0b01 	add.w	fp, fp, #1
 8013a44:	dd06      	ble.n	8013a54 <__hexnan+0xfc>
 8013a46:	4544      	cmp	r4, r8
 8013a48:	d9c3      	bls.n	80139d2 <__hexnan+0x7a>
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	f844 3c04 	str.w	r3, [r4, #-4]
 8013a50:	2501      	movs	r5, #1
 8013a52:	3c04      	subs	r4, #4
 8013a54:	6822      	ldr	r2, [r4, #0]
 8013a56:	f000 000f 	and.w	r0, r0, #15
 8013a5a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8013a5e:	6022      	str	r2, [r4, #0]
 8013a60:	e7b7      	b.n	80139d2 <__hexnan+0x7a>
 8013a62:	2508      	movs	r5, #8
 8013a64:	e7b5      	b.n	80139d2 <__hexnan+0x7a>
 8013a66:	9b01      	ldr	r3, [sp, #4]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d0df      	beq.n	8013a2c <__hexnan+0xd4>
 8013a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8013a70:	f1c3 0320 	rsb	r3, r3, #32
 8013a74:	fa22 f303 	lsr.w	r3, r2, r3
 8013a78:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013a7c:	401a      	ands	r2, r3
 8013a7e:	f846 2c04 	str.w	r2, [r6, #-4]
 8013a82:	e7d3      	b.n	8013a2c <__hexnan+0xd4>
 8013a84:	3f04      	subs	r7, #4
 8013a86:	e7d1      	b.n	8013a2c <__hexnan+0xd4>
 8013a88:	2004      	movs	r0, #4
 8013a8a:	b007      	add	sp, #28
 8013a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013a90 <_localeconv_r>:
 8013a90:	4800      	ldr	r0, [pc, #0]	; (8013a94 <_localeconv_r+0x4>)
 8013a92:	4770      	bx	lr
 8013a94:	2400a248 	.word	0x2400a248

08013a98 <__retarget_lock_init_recursive>:
 8013a98:	4770      	bx	lr

08013a9a <__retarget_lock_acquire_recursive>:
 8013a9a:	4770      	bx	lr

08013a9c <__retarget_lock_release_recursive>:
 8013a9c:	4770      	bx	lr

08013a9e <__swhatbuf_r>:
 8013a9e:	b570      	push	{r4, r5, r6, lr}
 8013aa0:	460e      	mov	r6, r1
 8013aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013aa6:	2900      	cmp	r1, #0
 8013aa8:	b096      	sub	sp, #88	; 0x58
 8013aaa:	4614      	mov	r4, r2
 8013aac:	461d      	mov	r5, r3
 8013aae:	da07      	bge.n	8013ac0 <__swhatbuf_r+0x22>
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	602b      	str	r3, [r5, #0]
 8013ab4:	89b3      	ldrh	r3, [r6, #12]
 8013ab6:	061a      	lsls	r2, r3, #24
 8013ab8:	d410      	bmi.n	8013adc <__swhatbuf_r+0x3e>
 8013aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013abe:	e00e      	b.n	8013ade <__swhatbuf_r+0x40>
 8013ac0:	466a      	mov	r2, sp
 8013ac2:	f000 ff7b 	bl	80149bc <_fstat_r>
 8013ac6:	2800      	cmp	r0, #0
 8013ac8:	dbf2      	blt.n	8013ab0 <__swhatbuf_r+0x12>
 8013aca:	9a01      	ldr	r2, [sp, #4]
 8013acc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013ad0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013ad4:	425a      	negs	r2, r3
 8013ad6:	415a      	adcs	r2, r3
 8013ad8:	602a      	str	r2, [r5, #0]
 8013ada:	e7ee      	b.n	8013aba <__swhatbuf_r+0x1c>
 8013adc:	2340      	movs	r3, #64	; 0x40
 8013ade:	2000      	movs	r0, #0
 8013ae0:	6023      	str	r3, [r4, #0]
 8013ae2:	b016      	add	sp, #88	; 0x58
 8013ae4:	bd70      	pop	{r4, r5, r6, pc}
	...

08013ae8 <__smakebuf_r>:
 8013ae8:	898b      	ldrh	r3, [r1, #12]
 8013aea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013aec:	079d      	lsls	r5, r3, #30
 8013aee:	4606      	mov	r6, r0
 8013af0:	460c      	mov	r4, r1
 8013af2:	d507      	bpl.n	8013b04 <__smakebuf_r+0x1c>
 8013af4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013af8:	6023      	str	r3, [r4, #0]
 8013afa:	6123      	str	r3, [r4, #16]
 8013afc:	2301      	movs	r3, #1
 8013afe:	6163      	str	r3, [r4, #20]
 8013b00:	b002      	add	sp, #8
 8013b02:	bd70      	pop	{r4, r5, r6, pc}
 8013b04:	ab01      	add	r3, sp, #4
 8013b06:	466a      	mov	r2, sp
 8013b08:	f7ff ffc9 	bl	8013a9e <__swhatbuf_r>
 8013b0c:	9900      	ldr	r1, [sp, #0]
 8013b0e:	4605      	mov	r5, r0
 8013b10:	4630      	mov	r0, r6
 8013b12:	f7fc fc2b 	bl	801036c <_malloc_r>
 8013b16:	b948      	cbnz	r0, 8013b2c <__smakebuf_r+0x44>
 8013b18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b1c:	059a      	lsls	r2, r3, #22
 8013b1e:	d4ef      	bmi.n	8013b00 <__smakebuf_r+0x18>
 8013b20:	f023 0303 	bic.w	r3, r3, #3
 8013b24:	f043 0302 	orr.w	r3, r3, #2
 8013b28:	81a3      	strh	r3, [r4, #12]
 8013b2a:	e7e3      	b.n	8013af4 <__smakebuf_r+0xc>
 8013b2c:	4b0d      	ldr	r3, [pc, #52]	; (8013b64 <__smakebuf_r+0x7c>)
 8013b2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8013b30:	89a3      	ldrh	r3, [r4, #12]
 8013b32:	6020      	str	r0, [r4, #0]
 8013b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b38:	81a3      	strh	r3, [r4, #12]
 8013b3a:	9b00      	ldr	r3, [sp, #0]
 8013b3c:	6163      	str	r3, [r4, #20]
 8013b3e:	9b01      	ldr	r3, [sp, #4]
 8013b40:	6120      	str	r0, [r4, #16]
 8013b42:	b15b      	cbz	r3, 8013b5c <__smakebuf_r+0x74>
 8013b44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013b48:	4630      	mov	r0, r6
 8013b4a:	f000 ff49 	bl	80149e0 <_isatty_r>
 8013b4e:	b128      	cbz	r0, 8013b5c <__smakebuf_r+0x74>
 8013b50:	89a3      	ldrh	r3, [r4, #12]
 8013b52:	f023 0303 	bic.w	r3, r3, #3
 8013b56:	f043 0301 	orr.w	r3, r3, #1
 8013b5a:	81a3      	strh	r3, [r4, #12]
 8013b5c:	89a0      	ldrh	r0, [r4, #12]
 8013b5e:	4305      	orrs	r5, r0
 8013b60:	81a5      	strh	r5, [r4, #12]
 8013b62:	e7cd      	b.n	8013b00 <__smakebuf_r+0x18>
 8013b64:	08013211 	.word	0x08013211

08013b68 <__ascii_mbtowc>:
 8013b68:	b082      	sub	sp, #8
 8013b6a:	b901      	cbnz	r1, 8013b6e <__ascii_mbtowc+0x6>
 8013b6c:	a901      	add	r1, sp, #4
 8013b6e:	b142      	cbz	r2, 8013b82 <__ascii_mbtowc+0x1a>
 8013b70:	b14b      	cbz	r3, 8013b86 <__ascii_mbtowc+0x1e>
 8013b72:	7813      	ldrb	r3, [r2, #0]
 8013b74:	600b      	str	r3, [r1, #0]
 8013b76:	7812      	ldrb	r2, [r2, #0]
 8013b78:	1e10      	subs	r0, r2, #0
 8013b7a:	bf18      	it	ne
 8013b7c:	2001      	movne	r0, #1
 8013b7e:	b002      	add	sp, #8
 8013b80:	4770      	bx	lr
 8013b82:	4610      	mov	r0, r2
 8013b84:	e7fb      	b.n	8013b7e <__ascii_mbtowc+0x16>
 8013b86:	f06f 0001 	mvn.w	r0, #1
 8013b8a:	e7f8      	b.n	8013b7e <__ascii_mbtowc+0x16>

08013b8c <__malloc_lock>:
 8013b8c:	4801      	ldr	r0, [pc, #4]	; (8013b94 <__malloc_lock+0x8>)
 8013b8e:	f7ff bf84 	b.w	8013a9a <__retarget_lock_acquire_recursive>
 8013b92:	bf00      	nop
 8013b94:	2400f6a4 	.word	0x2400f6a4

08013b98 <__malloc_unlock>:
 8013b98:	4801      	ldr	r0, [pc, #4]	; (8013ba0 <__malloc_unlock+0x8>)
 8013b9a:	f7ff bf7f 	b.w	8013a9c <__retarget_lock_release_recursive>
 8013b9e:	bf00      	nop
 8013ba0:	2400f6a4 	.word	0x2400f6a4

08013ba4 <_Balloc>:
 8013ba4:	b570      	push	{r4, r5, r6, lr}
 8013ba6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013ba8:	4604      	mov	r4, r0
 8013baa:	460d      	mov	r5, r1
 8013bac:	b976      	cbnz	r6, 8013bcc <_Balloc+0x28>
 8013bae:	2010      	movs	r0, #16
 8013bb0:	f7fc fb4c 	bl	801024c <malloc>
 8013bb4:	4602      	mov	r2, r0
 8013bb6:	6260      	str	r0, [r4, #36]	; 0x24
 8013bb8:	b920      	cbnz	r0, 8013bc4 <_Balloc+0x20>
 8013bba:	4b18      	ldr	r3, [pc, #96]	; (8013c1c <_Balloc+0x78>)
 8013bbc:	4818      	ldr	r0, [pc, #96]	; (8013c20 <_Balloc+0x7c>)
 8013bbe:	2166      	movs	r1, #102	; 0x66
 8013bc0:	f7fc faea 	bl	8010198 <__assert_func>
 8013bc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013bc8:	6006      	str	r6, [r0, #0]
 8013bca:	60c6      	str	r6, [r0, #12]
 8013bcc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013bce:	68f3      	ldr	r3, [r6, #12]
 8013bd0:	b183      	cbz	r3, 8013bf4 <_Balloc+0x50>
 8013bd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013bd4:	68db      	ldr	r3, [r3, #12]
 8013bd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013bda:	b9b8      	cbnz	r0, 8013c0c <_Balloc+0x68>
 8013bdc:	2101      	movs	r1, #1
 8013bde:	fa01 f605 	lsl.w	r6, r1, r5
 8013be2:	1d72      	adds	r2, r6, #5
 8013be4:	0092      	lsls	r2, r2, #2
 8013be6:	4620      	mov	r0, r4
 8013be8:	f000 fc98 	bl	801451c <_calloc_r>
 8013bec:	b160      	cbz	r0, 8013c08 <_Balloc+0x64>
 8013bee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013bf2:	e00e      	b.n	8013c12 <_Balloc+0x6e>
 8013bf4:	2221      	movs	r2, #33	; 0x21
 8013bf6:	2104      	movs	r1, #4
 8013bf8:	4620      	mov	r0, r4
 8013bfa:	f000 fc8f 	bl	801451c <_calloc_r>
 8013bfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013c00:	60f0      	str	r0, [r6, #12]
 8013c02:	68db      	ldr	r3, [r3, #12]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d1e4      	bne.n	8013bd2 <_Balloc+0x2e>
 8013c08:	2000      	movs	r0, #0
 8013c0a:	bd70      	pop	{r4, r5, r6, pc}
 8013c0c:	6802      	ldr	r2, [r0, #0]
 8013c0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013c12:	2300      	movs	r3, #0
 8013c14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013c18:	e7f7      	b.n	8013c0a <_Balloc+0x66>
 8013c1a:	bf00      	nop
 8013c1c:	0801ddae 	.word	0x0801ddae
 8013c20:	0801df18 	.word	0x0801df18

08013c24 <_Bfree>:
 8013c24:	b570      	push	{r4, r5, r6, lr}
 8013c26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013c28:	4605      	mov	r5, r0
 8013c2a:	460c      	mov	r4, r1
 8013c2c:	b976      	cbnz	r6, 8013c4c <_Bfree+0x28>
 8013c2e:	2010      	movs	r0, #16
 8013c30:	f7fc fb0c 	bl	801024c <malloc>
 8013c34:	4602      	mov	r2, r0
 8013c36:	6268      	str	r0, [r5, #36]	; 0x24
 8013c38:	b920      	cbnz	r0, 8013c44 <_Bfree+0x20>
 8013c3a:	4b09      	ldr	r3, [pc, #36]	; (8013c60 <_Bfree+0x3c>)
 8013c3c:	4809      	ldr	r0, [pc, #36]	; (8013c64 <_Bfree+0x40>)
 8013c3e:	218a      	movs	r1, #138	; 0x8a
 8013c40:	f7fc faaa 	bl	8010198 <__assert_func>
 8013c44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013c48:	6006      	str	r6, [r0, #0]
 8013c4a:	60c6      	str	r6, [r0, #12]
 8013c4c:	b13c      	cbz	r4, 8013c5e <_Bfree+0x3a>
 8013c4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013c50:	6862      	ldr	r2, [r4, #4]
 8013c52:	68db      	ldr	r3, [r3, #12]
 8013c54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013c58:	6021      	str	r1, [r4, #0]
 8013c5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013c5e:	bd70      	pop	{r4, r5, r6, pc}
 8013c60:	0801ddae 	.word	0x0801ddae
 8013c64:	0801df18 	.word	0x0801df18

08013c68 <__multadd>:
 8013c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c6c:	690e      	ldr	r6, [r1, #16]
 8013c6e:	4607      	mov	r7, r0
 8013c70:	4698      	mov	r8, r3
 8013c72:	460c      	mov	r4, r1
 8013c74:	f101 0014 	add.w	r0, r1, #20
 8013c78:	2300      	movs	r3, #0
 8013c7a:	6805      	ldr	r5, [r0, #0]
 8013c7c:	b2a9      	uxth	r1, r5
 8013c7e:	fb02 8101 	mla	r1, r2, r1, r8
 8013c82:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8013c86:	0c2d      	lsrs	r5, r5, #16
 8013c88:	fb02 c505 	mla	r5, r2, r5, ip
 8013c8c:	b289      	uxth	r1, r1
 8013c8e:	3301      	adds	r3, #1
 8013c90:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8013c94:	429e      	cmp	r6, r3
 8013c96:	f840 1b04 	str.w	r1, [r0], #4
 8013c9a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8013c9e:	dcec      	bgt.n	8013c7a <__multadd+0x12>
 8013ca0:	f1b8 0f00 	cmp.w	r8, #0
 8013ca4:	d022      	beq.n	8013cec <__multadd+0x84>
 8013ca6:	68a3      	ldr	r3, [r4, #8]
 8013ca8:	42b3      	cmp	r3, r6
 8013caa:	dc19      	bgt.n	8013ce0 <__multadd+0x78>
 8013cac:	6861      	ldr	r1, [r4, #4]
 8013cae:	4638      	mov	r0, r7
 8013cb0:	3101      	adds	r1, #1
 8013cb2:	f7ff ff77 	bl	8013ba4 <_Balloc>
 8013cb6:	4605      	mov	r5, r0
 8013cb8:	b928      	cbnz	r0, 8013cc6 <__multadd+0x5e>
 8013cba:	4602      	mov	r2, r0
 8013cbc:	4b0d      	ldr	r3, [pc, #52]	; (8013cf4 <__multadd+0x8c>)
 8013cbe:	480e      	ldr	r0, [pc, #56]	; (8013cf8 <__multadd+0x90>)
 8013cc0:	21b5      	movs	r1, #181	; 0xb5
 8013cc2:	f7fc fa69 	bl	8010198 <__assert_func>
 8013cc6:	6922      	ldr	r2, [r4, #16]
 8013cc8:	3202      	adds	r2, #2
 8013cca:	f104 010c 	add.w	r1, r4, #12
 8013cce:	0092      	lsls	r2, r2, #2
 8013cd0:	300c      	adds	r0, #12
 8013cd2:	f7fc facb 	bl	801026c <memcpy>
 8013cd6:	4621      	mov	r1, r4
 8013cd8:	4638      	mov	r0, r7
 8013cda:	f7ff ffa3 	bl	8013c24 <_Bfree>
 8013cde:	462c      	mov	r4, r5
 8013ce0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8013ce4:	3601      	adds	r6, #1
 8013ce6:	f8c3 8014 	str.w	r8, [r3, #20]
 8013cea:	6126      	str	r6, [r4, #16]
 8013cec:	4620      	mov	r0, r4
 8013cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cf2:	bf00      	nop
 8013cf4:	0801de24 	.word	0x0801de24
 8013cf8:	0801df18 	.word	0x0801df18

08013cfc <__s2b>:
 8013cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d00:	460c      	mov	r4, r1
 8013d02:	4615      	mov	r5, r2
 8013d04:	461f      	mov	r7, r3
 8013d06:	2209      	movs	r2, #9
 8013d08:	3308      	adds	r3, #8
 8013d0a:	4606      	mov	r6, r0
 8013d0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8013d10:	2100      	movs	r1, #0
 8013d12:	2201      	movs	r2, #1
 8013d14:	429a      	cmp	r2, r3
 8013d16:	db09      	blt.n	8013d2c <__s2b+0x30>
 8013d18:	4630      	mov	r0, r6
 8013d1a:	f7ff ff43 	bl	8013ba4 <_Balloc>
 8013d1e:	b940      	cbnz	r0, 8013d32 <__s2b+0x36>
 8013d20:	4602      	mov	r2, r0
 8013d22:	4b19      	ldr	r3, [pc, #100]	; (8013d88 <__s2b+0x8c>)
 8013d24:	4819      	ldr	r0, [pc, #100]	; (8013d8c <__s2b+0x90>)
 8013d26:	21ce      	movs	r1, #206	; 0xce
 8013d28:	f7fc fa36 	bl	8010198 <__assert_func>
 8013d2c:	0052      	lsls	r2, r2, #1
 8013d2e:	3101      	adds	r1, #1
 8013d30:	e7f0      	b.n	8013d14 <__s2b+0x18>
 8013d32:	9b08      	ldr	r3, [sp, #32]
 8013d34:	6143      	str	r3, [r0, #20]
 8013d36:	2d09      	cmp	r5, #9
 8013d38:	f04f 0301 	mov.w	r3, #1
 8013d3c:	6103      	str	r3, [r0, #16]
 8013d3e:	dd16      	ble.n	8013d6e <__s2b+0x72>
 8013d40:	f104 0909 	add.w	r9, r4, #9
 8013d44:	46c8      	mov	r8, r9
 8013d46:	442c      	add	r4, r5
 8013d48:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013d4c:	4601      	mov	r1, r0
 8013d4e:	3b30      	subs	r3, #48	; 0x30
 8013d50:	220a      	movs	r2, #10
 8013d52:	4630      	mov	r0, r6
 8013d54:	f7ff ff88 	bl	8013c68 <__multadd>
 8013d58:	45a0      	cmp	r8, r4
 8013d5a:	d1f5      	bne.n	8013d48 <__s2b+0x4c>
 8013d5c:	f1a5 0408 	sub.w	r4, r5, #8
 8013d60:	444c      	add	r4, r9
 8013d62:	1b2d      	subs	r5, r5, r4
 8013d64:	1963      	adds	r3, r4, r5
 8013d66:	42bb      	cmp	r3, r7
 8013d68:	db04      	blt.n	8013d74 <__s2b+0x78>
 8013d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d6e:	340a      	adds	r4, #10
 8013d70:	2509      	movs	r5, #9
 8013d72:	e7f6      	b.n	8013d62 <__s2b+0x66>
 8013d74:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013d78:	4601      	mov	r1, r0
 8013d7a:	3b30      	subs	r3, #48	; 0x30
 8013d7c:	220a      	movs	r2, #10
 8013d7e:	4630      	mov	r0, r6
 8013d80:	f7ff ff72 	bl	8013c68 <__multadd>
 8013d84:	e7ee      	b.n	8013d64 <__s2b+0x68>
 8013d86:	bf00      	nop
 8013d88:	0801de24 	.word	0x0801de24
 8013d8c:	0801df18 	.word	0x0801df18

08013d90 <__hi0bits>:
 8013d90:	0c03      	lsrs	r3, r0, #16
 8013d92:	041b      	lsls	r3, r3, #16
 8013d94:	b9d3      	cbnz	r3, 8013dcc <__hi0bits+0x3c>
 8013d96:	0400      	lsls	r0, r0, #16
 8013d98:	2310      	movs	r3, #16
 8013d9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013d9e:	bf04      	itt	eq
 8013da0:	0200      	lsleq	r0, r0, #8
 8013da2:	3308      	addeq	r3, #8
 8013da4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013da8:	bf04      	itt	eq
 8013daa:	0100      	lsleq	r0, r0, #4
 8013dac:	3304      	addeq	r3, #4
 8013dae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013db2:	bf04      	itt	eq
 8013db4:	0080      	lsleq	r0, r0, #2
 8013db6:	3302      	addeq	r3, #2
 8013db8:	2800      	cmp	r0, #0
 8013dba:	db05      	blt.n	8013dc8 <__hi0bits+0x38>
 8013dbc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013dc0:	f103 0301 	add.w	r3, r3, #1
 8013dc4:	bf08      	it	eq
 8013dc6:	2320      	moveq	r3, #32
 8013dc8:	4618      	mov	r0, r3
 8013dca:	4770      	bx	lr
 8013dcc:	2300      	movs	r3, #0
 8013dce:	e7e4      	b.n	8013d9a <__hi0bits+0xa>

08013dd0 <__lo0bits>:
 8013dd0:	6803      	ldr	r3, [r0, #0]
 8013dd2:	f013 0207 	ands.w	r2, r3, #7
 8013dd6:	4601      	mov	r1, r0
 8013dd8:	d00b      	beq.n	8013df2 <__lo0bits+0x22>
 8013dda:	07da      	lsls	r2, r3, #31
 8013ddc:	d424      	bmi.n	8013e28 <__lo0bits+0x58>
 8013dde:	0798      	lsls	r0, r3, #30
 8013de0:	bf49      	itett	mi
 8013de2:	085b      	lsrmi	r3, r3, #1
 8013de4:	089b      	lsrpl	r3, r3, #2
 8013de6:	2001      	movmi	r0, #1
 8013de8:	600b      	strmi	r3, [r1, #0]
 8013dea:	bf5c      	itt	pl
 8013dec:	600b      	strpl	r3, [r1, #0]
 8013dee:	2002      	movpl	r0, #2
 8013df0:	4770      	bx	lr
 8013df2:	b298      	uxth	r0, r3
 8013df4:	b9b0      	cbnz	r0, 8013e24 <__lo0bits+0x54>
 8013df6:	0c1b      	lsrs	r3, r3, #16
 8013df8:	2010      	movs	r0, #16
 8013dfa:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013dfe:	bf04      	itt	eq
 8013e00:	0a1b      	lsreq	r3, r3, #8
 8013e02:	3008      	addeq	r0, #8
 8013e04:	071a      	lsls	r2, r3, #28
 8013e06:	bf04      	itt	eq
 8013e08:	091b      	lsreq	r3, r3, #4
 8013e0a:	3004      	addeq	r0, #4
 8013e0c:	079a      	lsls	r2, r3, #30
 8013e0e:	bf04      	itt	eq
 8013e10:	089b      	lsreq	r3, r3, #2
 8013e12:	3002      	addeq	r0, #2
 8013e14:	07da      	lsls	r2, r3, #31
 8013e16:	d403      	bmi.n	8013e20 <__lo0bits+0x50>
 8013e18:	085b      	lsrs	r3, r3, #1
 8013e1a:	f100 0001 	add.w	r0, r0, #1
 8013e1e:	d005      	beq.n	8013e2c <__lo0bits+0x5c>
 8013e20:	600b      	str	r3, [r1, #0]
 8013e22:	4770      	bx	lr
 8013e24:	4610      	mov	r0, r2
 8013e26:	e7e8      	b.n	8013dfa <__lo0bits+0x2a>
 8013e28:	2000      	movs	r0, #0
 8013e2a:	4770      	bx	lr
 8013e2c:	2020      	movs	r0, #32
 8013e2e:	4770      	bx	lr

08013e30 <__i2b>:
 8013e30:	b510      	push	{r4, lr}
 8013e32:	460c      	mov	r4, r1
 8013e34:	2101      	movs	r1, #1
 8013e36:	f7ff feb5 	bl	8013ba4 <_Balloc>
 8013e3a:	4602      	mov	r2, r0
 8013e3c:	b928      	cbnz	r0, 8013e4a <__i2b+0x1a>
 8013e3e:	4b05      	ldr	r3, [pc, #20]	; (8013e54 <__i2b+0x24>)
 8013e40:	4805      	ldr	r0, [pc, #20]	; (8013e58 <__i2b+0x28>)
 8013e42:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013e46:	f7fc f9a7 	bl	8010198 <__assert_func>
 8013e4a:	2301      	movs	r3, #1
 8013e4c:	6144      	str	r4, [r0, #20]
 8013e4e:	6103      	str	r3, [r0, #16]
 8013e50:	bd10      	pop	{r4, pc}
 8013e52:	bf00      	nop
 8013e54:	0801de24 	.word	0x0801de24
 8013e58:	0801df18 	.word	0x0801df18

08013e5c <__multiply>:
 8013e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e60:	4614      	mov	r4, r2
 8013e62:	690a      	ldr	r2, [r1, #16]
 8013e64:	6923      	ldr	r3, [r4, #16]
 8013e66:	429a      	cmp	r2, r3
 8013e68:	bfb8      	it	lt
 8013e6a:	460b      	movlt	r3, r1
 8013e6c:	460d      	mov	r5, r1
 8013e6e:	bfbc      	itt	lt
 8013e70:	4625      	movlt	r5, r4
 8013e72:	461c      	movlt	r4, r3
 8013e74:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8013e78:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013e7c:	68ab      	ldr	r3, [r5, #8]
 8013e7e:	6869      	ldr	r1, [r5, #4]
 8013e80:	eb0a 0709 	add.w	r7, sl, r9
 8013e84:	42bb      	cmp	r3, r7
 8013e86:	b085      	sub	sp, #20
 8013e88:	bfb8      	it	lt
 8013e8a:	3101      	addlt	r1, #1
 8013e8c:	f7ff fe8a 	bl	8013ba4 <_Balloc>
 8013e90:	b930      	cbnz	r0, 8013ea0 <__multiply+0x44>
 8013e92:	4602      	mov	r2, r0
 8013e94:	4b42      	ldr	r3, [pc, #264]	; (8013fa0 <__multiply+0x144>)
 8013e96:	4843      	ldr	r0, [pc, #268]	; (8013fa4 <__multiply+0x148>)
 8013e98:	f240 115d 	movw	r1, #349	; 0x15d
 8013e9c:	f7fc f97c 	bl	8010198 <__assert_func>
 8013ea0:	f100 0614 	add.w	r6, r0, #20
 8013ea4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8013ea8:	4633      	mov	r3, r6
 8013eaa:	2200      	movs	r2, #0
 8013eac:	4543      	cmp	r3, r8
 8013eae:	d31e      	bcc.n	8013eee <__multiply+0x92>
 8013eb0:	f105 0c14 	add.w	ip, r5, #20
 8013eb4:	f104 0314 	add.w	r3, r4, #20
 8013eb8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8013ebc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8013ec0:	9202      	str	r2, [sp, #8]
 8013ec2:	ebac 0205 	sub.w	r2, ip, r5
 8013ec6:	3a15      	subs	r2, #21
 8013ec8:	f022 0203 	bic.w	r2, r2, #3
 8013ecc:	3204      	adds	r2, #4
 8013ece:	f105 0115 	add.w	r1, r5, #21
 8013ed2:	458c      	cmp	ip, r1
 8013ed4:	bf38      	it	cc
 8013ed6:	2204      	movcc	r2, #4
 8013ed8:	9201      	str	r2, [sp, #4]
 8013eda:	9a02      	ldr	r2, [sp, #8]
 8013edc:	9303      	str	r3, [sp, #12]
 8013ede:	429a      	cmp	r2, r3
 8013ee0:	d808      	bhi.n	8013ef4 <__multiply+0x98>
 8013ee2:	2f00      	cmp	r7, #0
 8013ee4:	dc55      	bgt.n	8013f92 <__multiply+0x136>
 8013ee6:	6107      	str	r7, [r0, #16]
 8013ee8:	b005      	add	sp, #20
 8013eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013eee:	f843 2b04 	str.w	r2, [r3], #4
 8013ef2:	e7db      	b.n	8013eac <__multiply+0x50>
 8013ef4:	f8b3 a000 	ldrh.w	sl, [r3]
 8013ef8:	f1ba 0f00 	cmp.w	sl, #0
 8013efc:	d020      	beq.n	8013f40 <__multiply+0xe4>
 8013efe:	f105 0e14 	add.w	lr, r5, #20
 8013f02:	46b1      	mov	r9, r6
 8013f04:	2200      	movs	r2, #0
 8013f06:	f85e 4b04 	ldr.w	r4, [lr], #4
 8013f0a:	f8d9 b000 	ldr.w	fp, [r9]
 8013f0e:	b2a1      	uxth	r1, r4
 8013f10:	fa1f fb8b 	uxth.w	fp, fp
 8013f14:	fb0a b101 	mla	r1, sl, r1, fp
 8013f18:	4411      	add	r1, r2
 8013f1a:	f8d9 2000 	ldr.w	r2, [r9]
 8013f1e:	0c24      	lsrs	r4, r4, #16
 8013f20:	0c12      	lsrs	r2, r2, #16
 8013f22:	fb0a 2404 	mla	r4, sl, r4, r2
 8013f26:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8013f2a:	b289      	uxth	r1, r1
 8013f2c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013f30:	45f4      	cmp	ip, lr
 8013f32:	f849 1b04 	str.w	r1, [r9], #4
 8013f36:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8013f3a:	d8e4      	bhi.n	8013f06 <__multiply+0xaa>
 8013f3c:	9901      	ldr	r1, [sp, #4]
 8013f3e:	5072      	str	r2, [r6, r1]
 8013f40:	9a03      	ldr	r2, [sp, #12]
 8013f42:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013f46:	3304      	adds	r3, #4
 8013f48:	f1b9 0f00 	cmp.w	r9, #0
 8013f4c:	d01f      	beq.n	8013f8e <__multiply+0x132>
 8013f4e:	6834      	ldr	r4, [r6, #0]
 8013f50:	f105 0114 	add.w	r1, r5, #20
 8013f54:	46b6      	mov	lr, r6
 8013f56:	f04f 0a00 	mov.w	sl, #0
 8013f5a:	880a      	ldrh	r2, [r1, #0]
 8013f5c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8013f60:	fb09 b202 	mla	r2, r9, r2, fp
 8013f64:	4492      	add	sl, r2
 8013f66:	b2a4      	uxth	r4, r4
 8013f68:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013f6c:	f84e 4b04 	str.w	r4, [lr], #4
 8013f70:	f851 4b04 	ldr.w	r4, [r1], #4
 8013f74:	f8be 2000 	ldrh.w	r2, [lr]
 8013f78:	0c24      	lsrs	r4, r4, #16
 8013f7a:	fb09 2404 	mla	r4, r9, r4, r2
 8013f7e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8013f82:	458c      	cmp	ip, r1
 8013f84:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013f88:	d8e7      	bhi.n	8013f5a <__multiply+0xfe>
 8013f8a:	9a01      	ldr	r2, [sp, #4]
 8013f8c:	50b4      	str	r4, [r6, r2]
 8013f8e:	3604      	adds	r6, #4
 8013f90:	e7a3      	b.n	8013eda <__multiply+0x7e>
 8013f92:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d1a5      	bne.n	8013ee6 <__multiply+0x8a>
 8013f9a:	3f01      	subs	r7, #1
 8013f9c:	e7a1      	b.n	8013ee2 <__multiply+0x86>
 8013f9e:	bf00      	nop
 8013fa0:	0801de24 	.word	0x0801de24
 8013fa4:	0801df18 	.word	0x0801df18

08013fa8 <__pow5mult>:
 8013fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013fac:	4615      	mov	r5, r2
 8013fae:	f012 0203 	ands.w	r2, r2, #3
 8013fb2:	4606      	mov	r6, r0
 8013fb4:	460f      	mov	r7, r1
 8013fb6:	d007      	beq.n	8013fc8 <__pow5mult+0x20>
 8013fb8:	4c25      	ldr	r4, [pc, #148]	; (8014050 <__pow5mult+0xa8>)
 8013fba:	3a01      	subs	r2, #1
 8013fbc:	2300      	movs	r3, #0
 8013fbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013fc2:	f7ff fe51 	bl	8013c68 <__multadd>
 8013fc6:	4607      	mov	r7, r0
 8013fc8:	10ad      	asrs	r5, r5, #2
 8013fca:	d03d      	beq.n	8014048 <__pow5mult+0xa0>
 8013fcc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013fce:	b97c      	cbnz	r4, 8013ff0 <__pow5mult+0x48>
 8013fd0:	2010      	movs	r0, #16
 8013fd2:	f7fc f93b 	bl	801024c <malloc>
 8013fd6:	4602      	mov	r2, r0
 8013fd8:	6270      	str	r0, [r6, #36]	; 0x24
 8013fda:	b928      	cbnz	r0, 8013fe8 <__pow5mult+0x40>
 8013fdc:	4b1d      	ldr	r3, [pc, #116]	; (8014054 <__pow5mult+0xac>)
 8013fde:	481e      	ldr	r0, [pc, #120]	; (8014058 <__pow5mult+0xb0>)
 8013fe0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013fe4:	f7fc f8d8 	bl	8010198 <__assert_func>
 8013fe8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013fec:	6004      	str	r4, [r0, #0]
 8013fee:	60c4      	str	r4, [r0, #12]
 8013ff0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013ff4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013ff8:	b94c      	cbnz	r4, 801400e <__pow5mult+0x66>
 8013ffa:	f240 2171 	movw	r1, #625	; 0x271
 8013ffe:	4630      	mov	r0, r6
 8014000:	f7ff ff16 	bl	8013e30 <__i2b>
 8014004:	2300      	movs	r3, #0
 8014006:	f8c8 0008 	str.w	r0, [r8, #8]
 801400a:	4604      	mov	r4, r0
 801400c:	6003      	str	r3, [r0, #0]
 801400e:	f04f 0900 	mov.w	r9, #0
 8014012:	07eb      	lsls	r3, r5, #31
 8014014:	d50a      	bpl.n	801402c <__pow5mult+0x84>
 8014016:	4639      	mov	r1, r7
 8014018:	4622      	mov	r2, r4
 801401a:	4630      	mov	r0, r6
 801401c:	f7ff ff1e 	bl	8013e5c <__multiply>
 8014020:	4639      	mov	r1, r7
 8014022:	4680      	mov	r8, r0
 8014024:	4630      	mov	r0, r6
 8014026:	f7ff fdfd 	bl	8013c24 <_Bfree>
 801402a:	4647      	mov	r7, r8
 801402c:	106d      	asrs	r5, r5, #1
 801402e:	d00b      	beq.n	8014048 <__pow5mult+0xa0>
 8014030:	6820      	ldr	r0, [r4, #0]
 8014032:	b938      	cbnz	r0, 8014044 <__pow5mult+0x9c>
 8014034:	4622      	mov	r2, r4
 8014036:	4621      	mov	r1, r4
 8014038:	4630      	mov	r0, r6
 801403a:	f7ff ff0f 	bl	8013e5c <__multiply>
 801403e:	6020      	str	r0, [r4, #0]
 8014040:	f8c0 9000 	str.w	r9, [r0]
 8014044:	4604      	mov	r4, r0
 8014046:	e7e4      	b.n	8014012 <__pow5mult+0x6a>
 8014048:	4638      	mov	r0, r7
 801404a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801404e:	bf00      	nop
 8014050:	0801e068 	.word	0x0801e068
 8014054:	0801ddae 	.word	0x0801ddae
 8014058:	0801df18 	.word	0x0801df18

0801405c <__lshift>:
 801405c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014060:	460c      	mov	r4, r1
 8014062:	6849      	ldr	r1, [r1, #4]
 8014064:	6923      	ldr	r3, [r4, #16]
 8014066:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801406a:	68a3      	ldr	r3, [r4, #8]
 801406c:	4607      	mov	r7, r0
 801406e:	4691      	mov	r9, r2
 8014070:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014074:	f108 0601 	add.w	r6, r8, #1
 8014078:	42b3      	cmp	r3, r6
 801407a:	db0b      	blt.n	8014094 <__lshift+0x38>
 801407c:	4638      	mov	r0, r7
 801407e:	f7ff fd91 	bl	8013ba4 <_Balloc>
 8014082:	4605      	mov	r5, r0
 8014084:	b948      	cbnz	r0, 801409a <__lshift+0x3e>
 8014086:	4602      	mov	r2, r0
 8014088:	4b28      	ldr	r3, [pc, #160]	; (801412c <__lshift+0xd0>)
 801408a:	4829      	ldr	r0, [pc, #164]	; (8014130 <__lshift+0xd4>)
 801408c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014090:	f7fc f882 	bl	8010198 <__assert_func>
 8014094:	3101      	adds	r1, #1
 8014096:	005b      	lsls	r3, r3, #1
 8014098:	e7ee      	b.n	8014078 <__lshift+0x1c>
 801409a:	2300      	movs	r3, #0
 801409c:	f100 0114 	add.w	r1, r0, #20
 80140a0:	f100 0210 	add.w	r2, r0, #16
 80140a4:	4618      	mov	r0, r3
 80140a6:	4553      	cmp	r3, sl
 80140a8:	db33      	blt.n	8014112 <__lshift+0xb6>
 80140aa:	6920      	ldr	r0, [r4, #16]
 80140ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80140b0:	f104 0314 	add.w	r3, r4, #20
 80140b4:	f019 091f 	ands.w	r9, r9, #31
 80140b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80140bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80140c0:	d02b      	beq.n	801411a <__lshift+0xbe>
 80140c2:	f1c9 0e20 	rsb	lr, r9, #32
 80140c6:	468a      	mov	sl, r1
 80140c8:	2200      	movs	r2, #0
 80140ca:	6818      	ldr	r0, [r3, #0]
 80140cc:	fa00 f009 	lsl.w	r0, r0, r9
 80140d0:	4302      	orrs	r2, r0
 80140d2:	f84a 2b04 	str.w	r2, [sl], #4
 80140d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80140da:	459c      	cmp	ip, r3
 80140dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80140e0:	d8f3      	bhi.n	80140ca <__lshift+0x6e>
 80140e2:	ebac 0304 	sub.w	r3, ip, r4
 80140e6:	3b15      	subs	r3, #21
 80140e8:	f023 0303 	bic.w	r3, r3, #3
 80140ec:	3304      	adds	r3, #4
 80140ee:	f104 0015 	add.w	r0, r4, #21
 80140f2:	4584      	cmp	ip, r0
 80140f4:	bf38      	it	cc
 80140f6:	2304      	movcc	r3, #4
 80140f8:	50ca      	str	r2, [r1, r3]
 80140fa:	b10a      	cbz	r2, 8014100 <__lshift+0xa4>
 80140fc:	f108 0602 	add.w	r6, r8, #2
 8014100:	3e01      	subs	r6, #1
 8014102:	4638      	mov	r0, r7
 8014104:	612e      	str	r6, [r5, #16]
 8014106:	4621      	mov	r1, r4
 8014108:	f7ff fd8c 	bl	8013c24 <_Bfree>
 801410c:	4628      	mov	r0, r5
 801410e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014112:	f842 0f04 	str.w	r0, [r2, #4]!
 8014116:	3301      	adds	r3, #1
 8014118:	e7c5      	b.n	80140a6 <__lshift+0x4a>
 801411a:	3904      	subs	r1, #4
 801411c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014120:	f841 2f04 	str.w	r2, [r1, #4]!
 8014124:	459c      	cmp	ip, r3
 8014126:	d8f9      	bhi.n	801411c <__lshift+0xc0>
 8014128:	e7ea      	b.n	8014100 <__lshift+0xa4>
 801412a:	bf00      	nop
 801412c:	0801de24 	.word	0x0801de24
 8014130:	0801df18 	.word	0x0801df18

08014134 <__mcmp>:
 8014134:	b530      	push	{r4, r5, lr}
 8014136:	6902      	ldr	r2, [r0, #16]
 8014138:	690c      	ldr	r4, [r1, #16]
 801413a:	1b12      	subs	r2, r2, r4
 801413c:	d10e      	bne.n	801415c <__mcmp+0x28>
 801413e:	f100 0314 	add.w	r3, r0, #20
 8014142:	3114      	adds	r1, #20
 8014144:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014148:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801414c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014150:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014154:	42a5      	cmp	r5, r4
 8014156:	d003      	beq.n	8014160 <__mcmp+0x2c>
 8014158:	d305      	bcc.n	8014166 <__mcmp+0x32>
 801415a:	2201      	movs	r2, #1
 801415c:	4610      	mov	r0, r2
 801415e:	bd30      	pop	{r4, r5, pc}
 8014160:	4283      	cmp	r3, r0
 8014162:	d3f3      	bcc.n	801414c <__mcmp+0x18>
 8014164:	e7fa      	b.n	801415c <__mcmp+0x28>
 8014166:	f04f 32ff 	mov.w	r2, #4294967295
 801416a:	e7f7      	b.n	801415c <__mcmp+0x28>

0801416c <__mdiff>:
 801416c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014170:	460c      	mov	r4, r1
 8014172:	4606      	mov	r6, r0
 8014174:	4611      	mov	r1, r2
 8014176:	4620      	mov	r0, r4
 8014178:	4617      	mov	r7, r2
 801417a:	f7ff ffdb 	bl	8014134 <__mcmp>
 801417e:	1e05      	subs	r5, r0, #0
 8014180:	d110      	bne.n	80141a4 <__mdiff+0x38>
 8014182:	4629      	mov	r1, r5
 8014184:	4630      	mov	r0, r6
 8014186:	f7ff fd0d 	bl	8013ba4 <_Balloc>
 801418a:	b930      	cbnz	r0, 801419a <__mdiff+0x2e>
 801418c:	4b39      	ldr	r3, [pc, #228]	; (8014274 <__mdiff+0x108>)
 801418e:	4602      	mov	r2, r0
 8014190:	f240 2132 	movw	r1, #562	; 0x232
 8014194:	4838      	ldr	r0, [pc, #224]	; (8014278 <__mdiff+0x10c>)
 8014196:	f7fb ffff 	bl	8010198 <__assert_func>
 801419a:	2301      	movs	r3, #1
 801419c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80141a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141a4:	bfa4      	itt	ge
 80141a6:	463b      	movge	r3, r7
 80141a8:	4627      	movge	r7, r4
 80141aa:	4630      	mov	r0, r6
 80141ac:	6879      	ldr	r1, [r7, #4]
 80141ae:	bfa6      	itte	ge
 80141b0:	461c      	movge	r4, r3
 80141b2:	2500      	movge	r5, #0
 80141b4:	2501      	movlt	r5, #1
 80141b6:	f7ff fcf5 	bl	8013ba4 <_Balloc>
 80141ba:	b920      	cbnz	r0, 80141c6 <__mdiff+0x5a>
 80141bc:	4b2d      	ldr	r3, [pc, #180]	; (8014274 <__mdiff+0x108>)
 80141be:	4602      	mov	r2, r0
 80141c0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80141c4:	e7e6      	b.n	8014194 <__mdiff+0x28>
 80141c6:	693e      	ldr	r6, [r7, #16]
 80141c8:	60c5      	str	r5, [r0, #12]
 80141ca:	6925      	ldr	r5, [r4, #16]
 80141cc:	f107 0114 	add.w	r1, r7, #20
 80141d0:	f104 0914 	add.w	r9, r4, #20
 80141d4:	f100 0e14 	add.w	lr, r0, #20
 80141d8:	f107 0210 	add.w	r2, r7, #16
 80141dc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80141e0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80141e4:	46f2      	mov	sl, lr
 80141e6:	2700      	movs	r7, #0
 80141e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80141ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80141f0:	fa1f f883 	uxth.w	r8, r3
 80141f4:	fa17 f78b 	uxtah	r7, r7, fp
 80141f8:	0c1b      	lsrs	r3, r3, #16
 80141fa:	eba7 0808 	sub.w	r8, r7, r8
 80141fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014202:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014206:	fa1f f888 	uxth.w	r8, r8
 801420a:	141f      	asrs	r7, r3, #16
 801420c:	454d      	cmp	r5, r9
 801420e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014212:	f84a 3b04 	str.w	r3, [sl], #4
 8014216:	d8e7      	bhi.n	80141e8 <__mdiff+0x7c>
 8014218:	1b2b      	subs	r3, r5, r4
 801421a:	3b15      	subs	r3, #21
 801421c:	f023 0303 	bic.w	r3, r3, #3
 8014220:	3304      	adds	r3, #4
 8014222:	3415      	adds	r4, #21
 8014224:	42a5      	cmp	r5, r4
 8014226:	bf38      	it	cc
 8014228:	2304      	movcc	r3, #4
 801422a:	4419      	add	r1, r3
 801422c:	4473      	add	r3, lr
 801422e:	469e      	mov	lr, r3
 8014230:	460d      	mov	r5, r1
 8014232:	4565      	cmp	r5, ip
 8014234:	d30e      	bcc.n	8014254 <__mdiff+0xe8>
 8014236:	f10c 0203 	add.w	r2, ip, #3
 801423a:	1a52      	subs	r2, r2, r1
 801423c:	f022 0203 	bic.w	r2, r2, #3
 8014240:	3903      	subs	r1, #3
 8014242:	458c      	cmp	ip, r1
 8014244:	bf38      	it	cc
 8014246:	2200      	movcc	r2, #0
 8014248:	441a      	add	r2, r3
 801424a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801424e:	b17b      	cbz	r3, 8014270 <__mdiff+0x104>
 8014250:	6106      	str	r6, [r0, #16]
 8014252:	e7a5      	b.n	80141a0 <__mdiff+0x34>
 8014254:	f855 8b04 	ldr.w	r8, [r5], #4
 8014258:	fa17 f488 	uxtah	r4, r7, r8
 801425c:	1422      	asrs	r2, r4, #16
 801425e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8014262:	b2a4      	uxth	r4, r4
 8014264:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8014268:	f84e 4b04 	str.w	r4, [lr], #4
 801426c:	1417      	asrs	r7, r2, #16
 801426e:	e7e0      	b.n	8014232 <__mdiff+0xc6>
 8014270:	3e01      	subs	r6, #1
 8014272:	e7ea      	b.n	801424a <__mdiff+0xde>
 8014274:	0801de24 	.word	0x0801de24
 8014278:	0801df18 	.word	0x0801df18

0801427c <__ulp>:
 801427c:	b082      	sub	sp, #8
 801427e:	ed8d 0b00 	vstr	d0, [sp]
 8014282:	9b01      	ldr	r3, [sp, #4]
 8014284:	4912      	ldr	r1, [pc, #72]	; (80142d0 <__ulp+0x54>)
 8014286:	4019      	ands	r1, r3
 8014288:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801428c:	2900      	cmp	r1, #0
 801428e:	dd05      	ble.n	801429c <__ulp+0x20>
 8014290:	2200      	movs	r2, #0
 8014292:	460b      	mov	r3, r1
 8014294:	ec43 2b10 	vmov	d0, r2, r3
 8014298:	b002      	add	sp, #8
 801429a:	4770      	bx	lr
 801429c:	4249      	negs	r1, r1
 801429e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80142a2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80142a6:	f04f 0200 	mov.w	r2, #0
 80142aa:	f04f 0300 	mov.w	r3, #0
 80142ae:	da04      	bge.n	80142ba <__ulp+0x3e>
 80142b0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80142b4:	fa41 f300 	asr.w	r3, r1, r0
 80142b8:	e7ec      	b.n	8014294 <__ulp+0x18>
 80142ba:	f1a0 0114 	sub.w	r1, r0, #20
 80142be:	291e      	cmp	r1, #30
 80142c0:	bfda      	itte	le
 80142c2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80142c6:	fa20 f101 	lsrle.w	r1, r0, r1
 80142ca:	2101      	movgt	r1, #1
 80142cc:	460a      	mov	r2, r1
 80142ce:	e7e1      	b.n	8014294 <__ulp+0x18>
 80142d0:	7ff00000 	.word	0x7ff00000

080142d4 <__b2d>:
 80142d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142d6:	6905      	ldr	r5, [r0, #16]
 80142d8:	f100 0714 	add.w	r7, r0, #20
 80142dc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80142e0:	1f2e      	subs	r6, r5, #4
 80142e2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80142e6:	4620      	mov	r0, r4
 80142e8:	f7ff fd52 	bl	8013d90 <__hi0bits>
 80142ec:	f1c0 0320 	rsb	r3, r0, #32
 80142f0:	280a      	cmp	r0, #10
 80142f2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8014370 <__b2d+0x9c>
 80142f6:	600b      	str	r3, [r1, #0]
 80142f8:	dc14      	bgt.n	8014324 <__b2d+0x50>
 80142fa:	f1c0 0e0b 	rsb	lr, r0, #11
 80142fe:	fa24 f10e 	lsr.w	r1, r4, lr
 8014302:	42b7      	cmp	r7, r6
 8014304:	ea41 030c 	orr.w	r3, r1, ip
 8014308:	bf34      	ite	cc
 801430a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801430e:	2100      	movcs	r1, #0
 8014310:	3015      	adds	r0, #21
 8014312:	fa04 f000 	lsl.w	r0, r4, r0
 8014316:	fa21 f10e 	lsr.w	r1, r1, lr
 801431a:	ea40 0201 	orr.w	r2, r0, r1
 801431e:	ec43 2b10 	vmov	d0, r2, r3
 8014322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014324:	42b7      	cmp	r7, r6
 8014326:	bf3a      	itte	cc
 8014328:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801432c:	f1a5 0608 	subcc.w	r6, r5, #8
 8014330:	2100      	movcs	r1, #0
 8014332:	380b      	subs	r0, #11
 8014334:	d017      	beq.n	8014366 <__b2d+0x92>
 8014336:	f1c0 0c20 	rsb	ip, r0, #32
 801433a:	fa04 f500 	lsl.w	r5, r4, r0
 801433e:	42be      	cmp	r6, r7
 8014340:	fa21 f40c 	lsr.w	r4, r1, ip
 8014344:	ea45 0504 	orr.w	r5, r5, r4
 8014348:	bf8c      	ite	hi
 801434a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801434e:	2400      	movls	r4, #0
 8014350:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8014354:	fa01 f000 	lsl.w	r0, r1, r0
 8014358:	fa24 f40c 	lsr.w	r4, r4, ip
 801435c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014360:	ea40 0204 	orr.w	r2, r0, r4
 8014364:	e7db      	b.n	801431e <__b2d+0x4a>
 8014366:	ea44 030c 	orr.w	r3, r4, ip
 801436a:	460a      	mov	r2, r1
 801436c:	e7d7      	b.n	801431e <__b2d+0x4a>
 801436e:	bf00      	nop
 8014370:	3ff00000 	.word	0x3ff00000

08014374 <__d2b>:
 8014374:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014378:	4689      	mov	r9, r1
 801437a:	2101      	movs	r1, #1
 801437c:	ec57 6b10 	vmov	r6, r7, d0
 8014380:	4690      	mov	r8, r2
 8014382:	f7ff fc0f 	bl	8013ba4 <_Balloc>
 8014386:	4604      	mov	r4, r0
 8014388:	b930      	cbnz	r0, 8014398 <__d2b+0x24>
 801438a:	4602      	mov	r2, r0
 801438c:	4b25      	ldr	r3, [pc, #148]	; (8014424 <__d2b+0xb0>)
 801438e:	4826      	ldr	r0, [pc, #152]	; (8014428 <__d2b+0xb4>)
 8014390:	f240 310a 	movw	r1, #778	; 0x30a
 8014394:	f7fb ff00 	bl	8010198 <__assert_func>
 8014398:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801439c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80143a0:	bb35      	cbnz	r5, 80143f0 <__d2b+0x7c>
 80143a2:	2e00      	cmp	r6, #0
 80143a4:	9301      	str	r3, [sp, #4]
 80143a6:	d028      	beq.n	80143fa <__d2b+0x86>
 80143a8:	4668      	mov	r0, sp
 80143aa:	9600      	str	r6, [sp, #0]
 80143ac:	f7ff fd10 	bl	8013dd0 <__lo0bits>
 80143b0:	9900      	ldr	r1, [sp, #0]
 80143b2:	b300      	cbz	r0, 80143f6 <__d2b+0x82>
 80143b4:	9a01      	ldr	r2, [sp, #4]
 80143b6:	f1c0 0320 	rsb	r3, r0, #32
 80143ba:	fa02 f303 	lsl.w	r3, r2, r3
 80143be:	430b      	orrs	r3, r1
 80143c0:	40c2      	lsrs	r2, r0
 80143c2:	6163      	str	r3, [r4, #20]
 80143c4:	9201      	str	r2, [sp, #4]
 80143c6:	9b01      	ldr	r3, [sp, #4]
 80143c8:	61a3      	str	r3, [r4, #24]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	bf14      	ite	ne
 80143ce:	2202      	movne	r2, #2
 80143d0:	2201      	moveq	r2, #1
 80143d2:	6122      	str	r2, [r4, #16]
 80143d4:	b1d5      	cbz	r5, 801440c <__d2b+0x98>
 80143d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80143da:	4405      	add	r5, r0
 80143dc:	f8c9 5000 	str.w	r5, [r9]
 80143e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80143e4:	f8c8 0000 	str.w	r0, [r8]
 80143e8:	4620      	mov	r0, r4
 80143ea:	b003      	add	sp, #12
 80143ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80143f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80143f4:	e7d5      	b.n	80143a2 <__d2b+0x2e>
 80143f6:	6161      	str	r1, [r4, #20]
 80143f8:	e7e5      	b.n	80143c6 <__d2b+0x52>
 80143fa:	a801      	add	r0, sp, #4
 80143fc:	f7ff fce8 	bl	8013dd0 <__lo0bits>
 8014400:	9b01      	ldr	r3, [sp, #4]
 8014402:	6163      	str	r3, [r4, #20]
 8014404:	2201      	movs	r2, #1
 8014406:	6122      	str	r2, [r4, #16]
 8014408:	3020      	adds	r0, #32
 801440a:	e7e3      	b.n	80143d4 <__d2b+0x60>
 801440c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014410:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014414:	f8c9 0000 	str.w	r0, [r9]
 8014418:	6918      	ldr	r0, [r3, #16]
 801441a:	f7ff fcb9 	bl	8013d90 <__hi0bits>
 801441e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014422:	e7df      	b.n	80143e4 <__d2b+0x70>
 8014424:	0801de24 	.word	0x0801de24
 8014428:	0801df18 	.word	0x0801df18

0801442c <__ratio>:
 801442c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014430:	468a      	mov	sl, r1
 8014432:	4669      	mov	r1, sp
 8014434:	4683      	mov	fp, r0
 8014436:	f7ff ff4d 	bl	80142d4 <__b2d>
 801443a:	a901      	add	r1, sp, #4
 801443c:	4650      	mov	r0, sl
 801443e:	ec59 8b10 	vmov	r8, r9, d0
 8014442:	ee10 6a10 	vmov	r6, s0
 8014446:	f7ff ff45 	bl	80142d4 <__b2d>
 801444a:	f8db 3010 	ldr.w	r3, [fp, #16]
 801444e:	f8da 2010 	ldr.w	r2, [sl, #16]
 8014452:	eba3 0c02 	sub.w	ip, r3, r2
 8014456:	e9dd 3200 	ldrd	r3, r2, [sp]
 801445a:	1a9b      	subs	r3, r3, r2
 801445c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014460:	ec55 4b10 	vmov	r4, r5, d0
 8014464:	2b00      	cmp	r3, #0
 8014466:	ee10 0a10 	vmov	r0, s0
 801446a:	bfce      	itee	gt
 801446c:	464a      	movgt	r2, r9
 801446e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014472:	462a      	movle	r2, r5
 8014474:	464f      	mov	r7, r9
 8014476:	4629      	mov	r1, r5
 8014478:	bfcc      	ite	gt
 801447a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801447e:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8014482:	ec47 6b17 	vmov	d7, r6, r7
 8014486:	ec41 0b16 	vmov	d6, r0, r1
 801448a:	ee87 0b06 	vdiv.f64	d0, d7, d6
 801448e:	b003      	add	sp, #12
 8014490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014494 <__copybits>:
 8014494:	3901      	subs	r1, #1
 8014496:	b570      	push	{r4, r5, r6, lr}
 8014498:	1149      	asrs	r1, r1, #5
 801449a:	6914      	ldr	r4, [r2, #16]
 801449c:	3101      	adds	r1, #1
 801449e:	f102 0314 	add.w	r3, r2, #20
 80144a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80144a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80144aa:	1f05      	subs	r5, r0, #4
 80144ac:	42a3      	cmp	r3, r4
 80144ae:	d30c      	bcc.n	80144ca <__copybits+0x36>
 80144b0:	1aa3      	subs	r3, r4, r2
 80144b2:	3b11      	subs	r3, #17
 80144b4:	f023 0303 	bic.w	r3, r3, #3
 80144b8:	3211      	adds	r2, #17
 80144ba:	42a2      	cmp	r2, r4
 80144bc:	bf88      	it	hi
 80144be:	2300      	movhi	r3, #0
 80144c0:	4418      	add	r0, r3
 80144c2:	2300      	movs	r3, #0
 80144c4:	4288      	cmp	r0, r1
 80144c6:	d305      	bcc.n	80144d4 <__copybits+0x40>
 80144c8:	bd70      	pop	{r4, r5, r6, pc}
 80144ca:	f853 6b04 	ldr.w	r6, [r3], #4
 80144ce:	f845 6f04 	str.w	r6, [r5, #4]!
 80144d2:	e7eb      	b.n	80144ac <__copybits+0x18>
 80144d4:	f840 3b04 	str.w	r3, [r0], #4
 80144d8:	e7f4      	b.n	80144c4 <__copybits+0x30>

080144da <__any_on>:
 80144da:	f100 0214 	add.w	r2, r0, #20
 80144de:	6900      	ldr	r0, [r0, #16]
 80144e0:	114b      	asrs	r3, r1, #5
 80144e2:	4298      	cmp	r0, r3
 80144e4:	b510      	push	{r4, lr}
 80144e6:	db11      	blt.n	801450c <__any_on+0x32>
 80144e8:	dd0a      	ble.n	8014500 <__any_on+0x26>
 80144ea:	f011 011f 	ands.w	r1, r1, #31
 80144ee:	d007      	beq.n	8014500 <__any_on+0x26>
 80144f0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80144f4:	fa24 f001 	lsr.w	r0, r4, r1
 80144f8:	fa00 f101 	lsl.w	r1, r0, r1
 80144fc:	428c      	cmp	r4, r1
 80144fe:	d10b      	bne.n	8014518 <__any_on+0x3e>
 8014500:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014504:	4293      	cmp	r3, r2
 8014506:	d803      	bhi.n	8014510 <__any_on+0x36>
 8014508:	2000      	movs	r0, #0
 801450a:	bd10      	pop	{r4, pc}
 801450c:	4603      	mov	r3, r0
 801450e:	e7f7      	b.n	8014500 <__any_on+0x26>
 8014510:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014514:	2900      	cmp	r1, #0
 8014516:	d0f5      	beq.n	8014504 <__any_on+0x2a>
 8014518:	2001      	movs	r0, #1
 801451a:	e7f6      	b.n	801450a <__any_on+0x30>

0801451c <_calloc_r>:
 801451c:	b513      	push	{r0, r1, r4, lr}
 801451e:	434a      	muls	r2, r1
 8014520:	4611      	mov	r1, r2
 8014522:	9201      	str	r2, [sp, #4]
 8014524:	f7fb ff22 	bl	801036c <_malloc_r>
 8014528:	4604      	mov	r4, r0
 801452a:	b118      	cbz	r0, 8014534 <_calloc_r+0x18>
 801452c:	9a01      	ldr	r2, [sp, #4]
 801452e:	2100      	movs	r1, #0
 8014530:	f7fb fec4 	bl	80102bc <memset>
 8014534:	4620      	mov	r0, r4
 8014536:	b002      	add	sp, #8
 8014538:	bd10      	pop	{r4, pc}

0801453a <_realloc_r>:
 801453a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801453c:	4607      	mov	r7, r0
 801453e:	4614      	mov	r4, r2
 8014540:	460e      	mov	r6, r1
 8014542:	b921      	cbnz	r1, 801454e <_realloc_r+0x14>
 8014544:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014548:	4611      	mov	r1, r2
 801454a:	f7fb bf0f 	b.w	801036c <_malloc_r>
 801454e:	b922      	cbnz	r2, 801455a <_realloc_r+0x20>
 8014550:	f7fb febc 	bl	80102cc <_free_r>
 8014554:	4625      	mov	r5, r4
 8014556:	4628      	mov	r0, r5
 8014558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801455a:	f000 fa63 	bl	8014a24 <_malloc_usable_size_r>
 801455e:	42a0      	cmp	r0, r4
 8014560:	d20f      	bcs.n	8014582 <_realloc_r+0x48>
 8014562:	4621      	mov	r1, r4
 8014564:	4638      	mov	r0, r7
 8014566:	f7fb ff01 	bl	801036c <_malloc_r>
 801456a:	4605      	mov	r5, r0
 801456c:	2800      	cmp	r0, #0
 801456e:	d0f2      	beq.n	8014556 <_realloc_r+0x1c>
 8014570:	4631      	mov	r1, r6
 8014572:	4622      	mov	r2, r4
 8014574:	f7fb fe7a 	bl	801026c <memcpy>
 8014578:	4631      	mov	r1, r6
 801457a:	4638      	mov	r0, r7
 801457c:	f7fb fea6 	bl	80102cc <_free_r>
 8014580:	e7e9      	b.n	8014556 <_realloc_r+0x1c>
 8014582:	4635      	mov	r5, r6
 8014584:	e7e7      	b.n	8014556 <_realloc_r+0x1c>

08014586 <__ssputs_r>:
 8014586:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801458a:	688e      	ldr	r6, [r1, #8]
 801458c:	429e      	cmp	r6, r3
 801458e:	4682      	mov	sl, r0
 8014590:	460c      	mov	r4, r1
 8014592:	4690      	mov	r8, r2
 8014594:	461f      	mov	r7, r3
 8014596:	d838      	bhi.n	801460a <__ssputs_r+0x84>
 8014598:	898a      	ldrh	r2, [r1, #12]
 801459a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801459e:	d032      	beq.n	8014606 <__ssputs_r+0x80>
 80145a0:	6825      	ldr	r5, [r4, #0]
 80145a2:	6909      	ldr	r1, [r1, #16]
 80145a4:	eba5 0901 	sub.w	r9, r5, r1
 80145a8:	6965      	ldr	r5, [r4, #20]
 80145aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80145ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80145b2:	3301      	adds	r3, #1
 80145b4:	444b      	add	r3, r9
 80145b6:	106d      	asrs	r5, r5, #1
 80145b8:	429d      	cmp	r5, r3
 80145ba:	bf38      	it	cc
 80145bc:	461d      	movcc	r5, r3
 80145be:	0553      	lsls	r3, r2, #21
 80145c0:	d531      	bpl.n	8014626 <__ssputs_r+0xa0>
 80145c2:	4629      	mov	r1, r5
 80145c4:	f7fb fed2 	bl	801036c <_malloc_r>
 80145c8:	4606      	mov	r6, r0
 80145ca:	b950      	cbnz	r0, 80145e2 <__ssputs_r+0x5c>
 80145cc:	230c      	movs	r3, #12
 80145ce:	f8ca 3000 	str.w	r3, [sl]
 80145d2:	89a3      	ldrh	r3, [r4, #12]
 80145d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80145d8:	81a3      	strh	r3, [r4, #12]
 80145da:	f04f 30ff 	mov.w	r0, #4294967295
 80145de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145e2:	6921      	ldr	r1, [r4, #16]
 80145e4:	464a      	mov	r2, r9
 80145e6:	f7fb fe41 	bl	801026c <memcpy>
 80145ea:	89a3      	ldrh	r3, [r4, #12]
 80145ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80145f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80145f4:	81a3      	strh	r3, [r4, #12]
 80145f6:	6126      	str	r6, [r4, #16]
 80145f8:	6165      	str	r5, [r4, #20]
 80145fa:	444e      	add	r6, r9
 80145fc:	eba5 0509 	sub.w	r5, r5, r9
 8014600:	6026      	str	r6, [r4, #0]
 8014602:	60a5      	str	r5, [r4, #8]
 8014604:	463e      	mov	r6, r7
 8014606:	42be      	cmp	r6, r7
 8014608:	d900      	bls.n	801460c <__ssputs_r+0x86>
 801460a:	463e      	mov	r6, r7
 801460c:	4632      	mov	r2, r6
 801460e:	6820      	ldr	r0, [r4, #0]
 8014610:	4641      	mov	r1, r8
 8014612:	f7fb fe39 	bl	8010288 <memmove>
 8014616:	68a3      	ldr	r3, [r4, #8]
 8014618:	6822      	ldr	r2, [r4, #0]
 801461a:	1b9b      	subs	r3, r3, r6
 801461c:	4432      	add	r2, r6
 801461e:	60a3      	str	r3, [r4, #8]
 8014620:	6022      	str	r2, [r4, #0]
 8014622:	2000      	movs	r0, #0
 8014624:	e7db      	b.n	80145de <__ssputs_r+0x58>
 8014626:	462a      	mov	r2, r5
 8014628:	f7ff ff87 	bl	801453a <_realloc_r>
 801462c:	4606      	mov	r6, r0
 801462e:	2800      	cmp	r0, #0
 8014630:	d1e1      	bne.n	80145f6 <__ssputs_r+0x70>
 8014632:	6921      	ldr	r1, [r4, #16]
 8014634:	4650      	mov	r0, sl
 8014636:	f7fb fe49 	bl	80102cc <_free_r>
 801463a:	e7c7      	b.n	80145cc <__ssputs_r+0x46>

0801463c <_svfiprintf_r>:
 801463c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014640:	4698      	mov	r8, r3
 8014642:	898b      	ldrh	r3, [r1, #12]
 8014644:	061b      	lsls	r3, r3, #24
 8014646:	b09d      	sub	sp, #116	; 0x74
 8014648:	4607      	mov	r7, r0
 801464a:	460d      	mov	r5, r1
 801464c:	4614      	mov	r4, r2
 801464e:	d50e      	bpl.n	801466e <_svfiprintf_r+0x32>
 8014650:	690b      	ldr	r3, [r1, #16]
 8014652:	b963      	cbnz	r3, 801466e <_svfiprintf_r+0x32>
 8014654:	2140      	movs	r1, #64	; 0x40
 8014656:	f7fb fe89 	bl	801036c <_malloc_r>
 801465a:	6028      	str	r0, [r5, #0]
 801465c:	6128      	str	r0, [r5, #16]
 801465e:	b920      	cbnz	r0, 801466a <_svfiprintf_r+0x2e>
 8014660:	230c      	movs	r3, #12
 8014662:	603b      	str	r3, [r7, #0]
 8014664:	f04f 30ff 	mov.w	r0, #4294967295
 8014668:	e0d1      	b.n	801480e <_svfiprintf_r+0x1d2>
 801466a:	2340      	movs	r3, #64	; 0x40
 801466c:	616b      	str	r3, [r5, #20]
 801466e:	2300      	movs	r3, #0
 8014670:	9309      	str	r3, [sp, #36]	; 0x24
 8014672:	2320      	movs	r3, #32
 8014674:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014678:	f8cd 800c 	str.w	r8, [sp, #12]
 801467c:	2330      	movs	r3, #48	; 0x30
 801467e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014828 <_svfiprintf_r+0x1ec>
 8014682:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014686:	f04f 0901 	mov.w	r9, #1
 801468a:	4623      	mov	r3, r4
 801468c:	469a      	mov	sl, r3
 801468e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014692:	b10a      	cbz	r2, 8014698 <_svfiprintf_r+0x5c>
 8014694:	2a25      	cmp	r2, #37	; 0x25
 8014696:	d1f9      	bne.n	801468c <_svfiprintf_r+0x50>
 8014698:	ebba 0b04 	subs.w	fp, sl, r4
 801469c:	d00b      	beq.n	80146b6 <_svfiprintf_r+0x7a>
 801469e:	465b      	mov	r3, fp
 80146a0:	4622      	mov	r2, r4
 80146a2:	4629      	mov	r1, r5
 80146a4:	4638      	mov	r0, r7
 80146a6:	f7ff ff6e 	bl	8014586 <__ssputs_r>
 80146aa:	3001      	adds	r0, #1
 80146ac:	f000 80aa 	beq.w	8014804 <_svfiprintf_r+0x1c8>
 80146b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80146b2:	445a      	add	r2, fp
 80146b4:	9209      	str	r2, [sp, #36]	; 0x24
 80146b6:	f89a 3000 	ldrb.w	r3, [sl]
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	f000 80a2 	beq.w	8014804 <_svfiprintf_r+0x1c8>
 80146c0:	2300      	movs	r3, #0
 80146c2:	f04f 32ff 	mov.w	r2, #4294967295
 80146c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80146ca:	f10a 0a01 	add.w	sl, sl, #1
 80146ce:	9304      	str	r3, [sp, #16]
 80146d0:	9307      	str	r3, [sp, #28]
 80146d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80146d6:	931a      	str	r3, [sp, #104]	; 0x68
 80146d8:	4654      	mov	r4, sl
 80146da:	2205      	movs	r2, #5
 80146dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80146e0:	4851      	ldr	r0, [pc, #324]	; (8014828 <_svfiprintf_r+0x1ec>)
 80146e2:	f7eb fe15 	bl	8000310 <memchr>
 80146e6:	9a04      	ldr	r2, [sp, #16]
 80146e8:	b9d8      	cbnz	r0, 8014722 <_svfiprintf_r+0xe6>
 80146ea:	06d0      	lsls	r0, r2, #27
 80146ec:	bf44      	itt	mi
 80146ee:	2320      	movmi	r3, #32
 80146f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80146f4:	0711      	lsls	r1, r2, #28
 80146f6:	bf44      	itt	mi
 80146f8:	232b      	movmi	r3, #43	; 0x2b
 80146fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80146fe:	f89a 3000 	ldrb.w	r3, [sl]
 8014702:	2b2a      	cmp	r3, #42	; 0x2a
 8014704:	d015      	beq.n	8014732 <_svfiprintf_r+0xf6>
 8014706:	9a07      	ldr	r2, [sp, #28]
 8014708:	4654      	mov	r4, sl
 801470a:	2000      	movs	r0, #0
 801470c:	f04f 0c0a 	mov.w	ip, #10
 8014710:	4621      	mov	r1, r4
 8014712:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014716:	3b30      	subs	r3, #48	; 0x30
 8014718:	2b09      	cmp	r3, #9
 801471a:	d94e      	bls.n	80147ba <_svfiprintf_r+0x17e>
 801471c:	b1b0      	cbz	r0, 801474c <_svfiprintf_r+0x110>
 801471e:	9207      	str	r2, [sp, #28]
 8014720:	e014      	b.n	801474c <_svfiprintf_r+0x110>
 8014722:	eba0 0308 	sub.w	r3, r0, r8
 8014726:	fa09 f303 	lsl.w	r3, r9, r3
 801472a:	4313      	orrs	r3, r2
 801472c:	9304      	str	r3, [sp, #16]
 801472e:	46a2      	mov	sl, r4
 8014730:	e7d2      	b.n	80146d8 <_svfiprintf_r+0x9c>
 8014732:	9b03      	ldr	r3, [sp, #12]
 8014734:	1d19      	adds	r1, r3, #4
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	9103      	str	r1, [sp, #12]
 801473a:	2b00      	cmp	r3, #0
 801473c:	bfbb      	ittet	lt
 801473e:	425b      	neglt	r3, r3
 8014740:	f042 0202 	orrlt.w	r2, r2, #2
 8014744:	9307      	strge	r3, [sp, #28]
 8014746:	9307      	strlt	r3, [sp, #28]
 8014748:	bfb8      	it	lt
 801474a:	9204      	strlt	r2, [sp, #16]
 801474c:	7823      	ldrb	r3, [r4, #0]
 801474e:	2b2e      	cmp	r3, #46	; 0x2e
 8014750:	d10c      	bne.n	801476c <_svfiprintf_r+0x130>
 8014752:	7863      	ldrb	r3, [r4, #1]
 8014754:	2b2a      	cmp	r3, #42	; 0x2a
 8014756:	d135      	bne.n	80147c4 <_svfiprintf_r+0x188>
 8014758:	9b03      	ldr	r3, [sp, #12]
 801475a:	1d1a      	adds	r2, r3, #4
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	9203      	str	r2, [sp, #12]
 8014760:	2b00      	cmp	r3, #0
 8014762:	bfb8      	it	lt
 8014764:	f04f 33ff 	movlt.w	r3, #4294967295
 8014768:	3402      	adds	r4, #2
 801476a:	9305      	str	r3, [sp, #20]
 801476c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014838 <_svfiprintf_r+0x1fc>
 8014770:	7821      	ldrb	r1, [r4, #0]
 8014772:	2203      	movs	r2, #3
 8014774:	4650      	mov	r0, sl
 8014776:	f7eb fdcb 	bl	8000310 <memchr>
 801477a:	b140      	cbz	r0, 801478e <_svfiprintf_r+0x152>
 801477c:	2340      	movs	r3, #64	; 0x40
 801477e:	eba0 000a 	sub.w	r0, r0, sl
 8014782:	fa03 f000 	lsl.w	r0, r3, r0
 8014786:	9b04      	ldr	r3, [sp, #16]
 8014788:	4303      	orrs	r3, r0
 801478a:	3401      	adds	r4, #1
 801478c:	9304      	str	r3, [sp, #16]
 801478e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014792:	4826      	ldr	r0, [pc, #152]	; (801482c <_svfiprintf_r+0x1f0>)
 8014794:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014798:	2206      	movs	r2, #6
 801479a:	f7eb fdb9 	bl	8000310 <memchr>
 801479e:	2800      	cmp	r0, #0
 80147a0:	d038      	beq.n	8014814 <_svfiprintf_r+0x1d8>
 80147a2:	4b23      	ldr	r3, [pc, #140]	; (8014830 <_svfiprintf_r+0x1f4>)
 80147a4:	bb1b      	cbnz	r3, 80147ee <_svfiprintf_r+0x1b2>
 80147a6:	9b03      	ldr	r3, [sp, #12]
 80147a8:	3307      	adds	r3, #7
 80147aa:	f023 0307 	bic.w	r3, r3, #7
 80147ae:	3308      	adds	r3, #8
 80147b0:	9303      	str	r3, [sp, #12]
 80147b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147b4:	4433      	add	r3, r6
 80147b6:	9309      	str	r3, [sp, #36]	; 0x24
 80147b8:	e767      	b.n	801468a <_svfiprintf_r+0x4e>
 80147ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80147be:	460c      	mov	r4, r1
 80147c0:	2001      	movs	r0, #1
 80147c2:	e7a5      	b.n	8014710 <_svfiprintf_r+0xd4>
 80147c4:	2300      	movs	r3, #0
 80147c6:	3401      	adds	r4, #1
 80147c8:	9305      	str	r3, [sp, #20]
 80147ca:	4619      	mov	r1, r3
 80147cc:	f04f 0c0a 	mov.w	ip, #10
 80147d0:	4620      	mov	r0, r4
 80147d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80147d6:	3a30      	subs	r2, #48	; 0x30
 80147d8:	2a09      	cmp	r2, #9
 80147da:	d903      	bls.n	80147e4 <_svfiprintf_r+0x1a8>
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d0c5      	beq.n	801476c <_svfiprintf_r+0x130>
 80147e0:	9105      	str	r1, [sp, #20]
 80147e2:	e7c3      	b.n	801476c <_svfiprintf_r+0x130>
 80147e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80147e8:	4604      	mov	r4, r0
 80147ea:	2301      	movs	r3, #1
 80147ec:	e7f0      	b.n	80147d0 <_svfiprintf_r+0x194>
 80147ee:	ab03      	add	r3, sp, #12
 80147f0:	9300      	str	r3, [sp, #0]
 80147f2:	462a      	mov	r2, r5
 80147f4:	4b0f      	ldr	r3, [pc, #60]	; (8014834 <_svfiprintf_r+0x1f8>)
 80147f6:	a904      	add	r1, sp, #16
 80147f8:	4638      	mov	r0, r7
 80147fa:	f7fb fffd 	bl	80107f8 <_printf_float>
 80147fe:	1c42      	adds	r2, r0, #1
 8014800:	4606      	mov	r6, r0
 8014802:	d1d6      	bne.n	80147b2 <_svfiprintf_r+0x176>
 8014804:	89ab      	ldrh	r3, [r5, #12]
 8014806:	065b      	lsls	r3, r3, #25
 8014808:	f53f af2c 	bmi.w	8014664 <_svfiprintf_r+0x28>
 801480c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801480e:	b01d      	add	sp, #116	; 0x74
 8014810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014814:	ab03      	add	r3, sp, #12
 8014816:	9300      	str	r3, [sp, #0]
 8014818:	462a      	mov	r2, r5
 801481a:	4b06      	ldr	r3, [pc, #24]	; (8014834 <_svfiprintf_r+0x1f8>)
 801481c:	a904      	add	r1, sp, #16
 801481e:	4638      	mov	r0, r7
 8014820:	f7fc fa76 	bl	8010d10 <_printf_i>
 8014824:	e7eb      	b.n	80147fe <_svfiprintf_r+0x1c2>
 8014826:	bf00      	nop
 8014828:	0801dc00 	.word	0x0801dc00
 801482c:	0801dc0a 	.word	0x0801dc0a
 8014830:	080107f9 	.word	0x080107f9
 8014834:	08014587 	.word	0x08014587
 8014838:	0801dc06 	.word	0x0801dc06
 801483c:	00000000 	.word	0x00000000

08014840 <nan>:
 8014840:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014848 <nan+0x8>
 8014844:	4770      	bx	lr
 8014846:	bf00      	nop
 8014848:	00000000 	.word	0x00000000
 801484c:	7ff80000 	.word	0x7ff80000

08014850 <_raise_r>:
 8014850:	291f      	cmp	r1, #31
 8014852:	b538      	push	{r3, r4, r5, lr}
 8014854:	4604      	mov	r4, r0
 8014856:	460d      	mov	r5, r1
 8014858:	d904      	bls.n	8014864 <_raise_r+0x14>
 801485a:	2316      	movs	r3, #22
 801485c:	6003      	str	r3, [r0, #0]
 801485e:	f04f 30ff 	mov.w	r0, #4294967295
 8014862:	bd38      	pop	{r3, r4, r5, pc}
 8014864:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014866:	b112      	cbz	r2, 801486e <_raise_r+0x1e>
 8014868:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801486c:	b94b      	cbnz	r3, 8014882 <_raise_r+0x32>
 801486e:	4620      	mov	r0, r4
 8014870:	f000 f830 	bl	80148d4 <_getpid_r>
 8014874:	462a      	mov	r2, r5
 8014876:	4601      	mov	r1, r0
 8014878:	4620      	mov	r0, r4
 801487a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801487e:	f000 b817 	b.w	80148b0 <_kill_r>
 8014882:	2b01      	cmp	r3, #1
 8014884:	d00a      	beq.n	801489c <_raise_r+0x4c>
 8014886:	1c59      	adds	r1, r3, #1
 8014888:	d103      	bne.n	8014892 <_raise_r+0x42>
 801488a:	2316      	movs	r3, #22
 801488c:	6003      	str	r3, [r0, #0]
 801488e:	2001      	movs	r0, #1
 8014890:	e7e7      	b.n	8014862 <_raise_r+0x12>
 8014892:	2400      	movs	r4, #0
 8014894:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014898:	4628      	mov	r0, r5
 801489a:	4798      	blx	r3
 801489c:	2000      	movs	r0, #0
 801489e:	e7e0      	b.n	8014862 <_raise_r+0x12>

080148a0 <raise>:
 80148a0:	4b02      	ldr	r3, [pc, #8]	; (80148ac <raise+0xc>)
 80148a2:	4601      	mov	r1, r0
 80148a4:	6818      	ldr	r0, [r3, #0]
 80148a6:	f7ff bfd3 	b.w	8014850 <_raise_r>
 80148aa:	bf00      	nop
 80148ac:	2400a0f0 	.word	0x2400a0f0

080148b0 <_kill_r>:
 80148b0:	b538      	push	{r3, r4, r5, lr}
 80148b2:	4d07      	ldr	r5, [pc, #28]	; (80148d0 <_kill_r+0x20>)
 80148b4:	2300      	movs	r3, #0
 80148b6:	4604      	mov	r4, r0
 80148b8:	4608      	mov	r0, r1
 80148ba:	4611      	mov	r1, r2
 80148bc:	602b      	str	r3, [r5, #0]
 80148be:	f7ec ffdd 	bl	800187c <_kill>
 80148c2:	1c43      	adds	r3, r0, #1
 80148c4:	d102      	bne.n	80148cc <_kill_r+0x1c>
 80148c6:	682b      	ldr	r3, [r5, #0]
 80148c8:	b103      	cbz	r3, 80148cc <_kill_r+0x1c>
 80148ca:	6023      	str	r3, [r4, #0]
 80148cc:	bd38      	pop	{r3, r4, r5, pc}
 80148ce:	bf00      	nop
 80148d0:	2400f6ac 	.word	0x2400f6ac

080148d4 <_getpid_r>:
 80148d4:	f7ec bfca 	b.w	800186c <_getpid>

080148d8 <__sread>:
 80148d8:	b510      	push	{r4, lr}
 80148da:	460c      	mov	r4, r1
 80148dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148e0:	f000 f8a8 	bl	8014a34 <_read_r>
 80148e4:	2800      	cmp	r0, #0
 80148e6:	bfab      	itete	ge
 80148e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80148ea:	89a3      	ldrhlt	r3, [r4, #12]
 80148ec:	181b      	addge	r3, r3, r0
 80148ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80148f2:	bfac      	ite	ge
 80148f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80148f6:	81a3      	strhlt	r3, [r4, #12]
 80148f8:	bd10      	pop	{r4, pc}

080148fa <__swrite>:
 80148fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148fe:	461f      	mov	r7, r3
 8014900:	898b      	ldrh	r3, [r1, #12]
 8014902:	05db      	lsls	r3, r3, #23
 8014904:	4605      	mov	r5, r0
 8014906:	460c      	mov	r4, r1
 8014908:	4616      	mov	r6, r2
 801490a:	d505      	bpl.n	8014918 <__swrite+0x1e>
 801490c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014910:	2302      	movs	r3, #2
 8014912:	2200      	movs	r2, #0
 8014914:	f000 f874 	bl	8014a00 <_lseek_r>
 8014918:	89a3      	ldrh	r3, [r4, #12]
 801491a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801491e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014922:	81a3      	strh	r3, [r4, #12]
 8014924:	4632      	mov	r2, r6
 8014926:	463b      	mov	r3, r7
 8014928:	4628      	mov	r0, r5
 801492a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801492e:	f000 b823 	b.w	8014978 <_write_r>

08014932 <__sseek>:
 8014932:	b510      	push	{r4, lr}
 8014934:	460c      	mov	r4, r1
 8014936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801493a:	f000 f861 	bl	8014a00 <_lseek_r>
 801493e:	1c43      	adds	r3, r0, #1
 8014940:	89a3      	ldrh	r3, [r4, #12]
 8014942:	bf15      	itete	ne
 8014944:	6560      	strne	r0, [r4, #84]	; 0x54
 8014946:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801494a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801494e:	81a3      	strheq	r3, [r4, #12]
 8014950:	bf18      	it	ne
 8014952:	81a3      	strhne	r3, [r4, #12]
 8014954:	bd10      	pop	{r4, pc}

08014956 <__sclose>:
 8014956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801495a:	f000 b81f 	b.w	801499c <_close_r>

0801495e <__ascii_wctomb>:
 801495e:	b149      	cbz	r1, 8014974 <__ascii_wctomb+0x16>
 8014960:	2aff      	cmp	r2, #255	; 0xff
 8014962:	bf85      	ittet	hi
 8014964:	238a      	movhi	r3, #138	; 0x8a
 8014966:	6003      	strhi	r3, [r0, #0]
 8014968:	700a      	strbls	r2, [r1, #0]
 801496a:	f04f 30ff 	movhi.w	r0, #4294967295
 801496e:	bf98      	it	ls
 8014970:	2001      	movls	r0, #1
 8014972:	4770      	bx	lr
 8014974:	4608      	mov	r0, r1
 8014976:	4770      	bx	lr

08014978 <_write_r>:
 8014978:	b538      	push	{r3, r4, r5, lr}
 801497a:	4d07      	ldr	r5, [pc, #28]	; (8014998 <_write_r+0x20>)
 801497c:	4604      	mov	r4, r0
 801497e:	4608      	mov	r0, r1
 8014980:	4611      	mov	r1, r2
 8014982:	2200      	movs	r2, #0
 8014984:	602a      	str	r2, [r5, #0]
 8014986:	461a      	mov	r2, r3
 8014988:	f7ec ffaf 	bl	80018ea <_write>
 801498c:	1c43      	adds	r3, r0, #1
 801498e:	d102      	bne.n	8014996 <_write_r+0x1e>
 8014990:	682b      	ldr	r3, [r5, #0]
 8014992:	b103      	cbz	r3, 8014996 <_write_r+0x1e>
 8014994:	6023      	str	r3, [r4, #0]
 8014996:	bd38      	pop	{r3, r4, r5, pc}
 8014998:	2400f6ac 	.word	0x2400f6ac

0801499c <_close_r>:
 801499c:	b538      	push	{r3, r4, r5, lr}
 801499e:	4d06      	ldr	r5, [pc, #24]	; (80149b8 <_close_r+0x1c>)
 80149a0:	2300      	movs	r3, #0
 80149a2:	4604      	mov	r4, r0
 80149a4:	4608      	mov	r0, r1
 80149a6:	602b      	str	r3, [r5, #0]
 80149a8:	f7ec ffbb 	bl	8001922 <_close>
 80149ac:	1c43      	adds	r3, r0, #1
 80149ae:	d102      	bne.n	80149b6 <_close_r+0x1a>
 80149b0:	682b      	ldr	r3, [r5, #0]
 80149b2:	b103      	cbz	r3, 80149b6 <_close_r+0x1a>
 80149b4:	6023      	str	r3, [r4, #0]
 80149b6:	bd38      	pop	{r3, r4, r5, pc}
 80149b8:	2400f6ac 	.word	0x2400f6ac

080149bc <_fstat_r>:
 80149bc:	b538      	push	{r3, r4, r5, lr}
 80149be:	4d07      	ldr	r5, [pc, #28]	; (80149dc <_fstat_r+0x20>)
 80149c0:	2300      	movs	r3, #0
 80149c2:	4604      	mov	r4, r0
 80149c4:	4608      	mov	r0, r1
 80149c6:	4611      	mov	r1, r2
 80149c8:	602b      	str	r3, [r5, #0]
 80149ca:	f7ec ffb6 	bl	800193a <_fstat>
 80149ce:	1c43      	adds	r3, r0, #1
 80149d0:	d102      	bne.n	80149d8 <_fstat_r+0x1c>
 80149d2:	682b      	ldr	r3, [r5, #0]
 80149d4:	b103      	cbz	r3, 80149d8 <_fstat_r+0x1c>
 80149d6:	6023      	str	r3, [r4, #0]
 80149d8:	bd38      	pop	{r3, r4, r5, pc}
 80149da:	bf00      	nop
 80149dc:	2400f6ac 	.word	0x2400f6ac

080149e0 <_isatty_r>:
 80149e0:	b538      	push	{r3, r4, r5, lr}
 80149e2:	4d06      	ldr	r5, [pc, #24]	; (80149fc <_isatty_r+0x1c>)
 80149e4:	2300      	movs	r3, #0
 80149e6:	4604      	mov	r4, r0
 80149e8:	4608      	mov	r0, r1
 80149ea:	602b      	str	r3, [r5, #0]
 80149ec:	f7ec ffb5 	bl	800195a <_isatty>
 80149f0:	1c43      	adds	r3, r0, #1
 80149f2:	d102      	bne.n	80149fa <_isatty_r+0x1a>
 80149f4:	682b      	ldr	r3, [r5, #0]
 80149f6:	b103      	cbz	r3, 80149fa <_isatty_r+0x1a>
 80149f8:	6023      	str	r3, [r4, #0]
 80149fa:	bd38      	pop	{r3, r4, r5, pc}
 80149fc:	2400f6ac 	.word	0x2400f6ac

08014a00 <_lseek_r>:
 8014a00:	b538      	push	{r3, r4, r5, lr}
 8014a02:	4d07      	ldr	r5, [pc, #28]	; (8014a20 <_lseek_r+0x20>)
 8014a04:	4604      	mov	r4, r0
 8014a06:	4608      	mov	r0, r1
 8014a08:	4611      	mov	r1, r2
 8014a0a:	2200      	movs	r2, #0
 8014a0c:	602a      	str	r2, [r5, #0]
 8014a0e:	461a      	mov	r2, r3
 8014a10:	f7ec ffae 	bl	8001970 <_lseek>
 8014a14:	1c43      	adds	r3, r0, #1
 8014a16:	d102      	bne.n	8014a1e <_lseek_r+0x1e>
 8014a18:	682b      	ldr	r3, [r5, #0]
 8014a1a:	b103      	cbz	r3, 8014a1e <_lseek_r+0x1e>
 8014a1c:	6023      	str	r3, [r4, #0]
 8014a1e:	bd38      	pop	{r3, r4, r5, pc}
 8014a20:	2400f6ac 	.word	0x2400f6ac

08014a24 <_malloc_usable_size_r>:
 8014a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014a28:	1f18      	subs	r0, r3, #4
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	bfbc      	itt	lt
 8014a2e:	580b      	ldrlt	r3, [r1, r0]
 8014a30:	18c0      	addlt	r0, r0, r3
 8014a32:	4770      	bx	lr

08014a34 <_read_r>:
 8014a34:	b538      	push	{r3, r4, r5, lr}
 8014a36:	4d07      	ldr	r5, [pc, #28]	; (8014a54 <_read_r+0x20>)
 8014a38:	4604      	mov	r4, r0
 8014a3a:	4608      	mov	r0, r1
 8014a3c:	4611      	mov	r1, r2
 8014a3e:	2200      	movs	r2, #0
 8014a40:	602a      	str	r2, [r5, #0]
 8014a42:	461a      	mov	r2, r3
 8014a44:	f7ec ff34 	bl	80018b0 <_read>
 8014a48:	1c43      	adds	r3, r0, #1
 8014a4a:	d102      	bne.n	8014a52 <_read_r+0x1e>
 8014a4c:	682b      	ldr	r3, [r5, #0]
 8014a4e:	b103      	cbz	r3, 8014a52 <_read_r+0x1e>
 8014a50:	6023      	str	r3, [r4, #0]
 8014a52:	bd38      	pop	{r3, r4, r5, pc}
 8014a54:	2400f6ac 	.word	0x2400f6ac

08014a58 <sinf_poly>:
 8014a58:	07cb      	lsls	r3, r1, #31
 8014a5a:	d412      	bmi.n	8014a82 <sinf_poly+0x2a>
 8014a5c:	ee21 6b00 	vmul.f64	d6, d1, d0
 8014a60:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 8014a64:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 8014a68:	eea5 7b01 	vfma.f64	d7, d5, d1
 8014a6c:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 8014a70:	ee21 1b06 	vmul.f64	d1, d1, d6
 8014a74:	eea5 0b06 	vfma.f64	d0, d5, d6
 8014a78:	eea7 0b01 	vfma.f64	d0, d7, d1
 8014a7c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8014a80:	4770      	bx	lr
 8014a82:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 8014a86:	ee21 6b01 	vmul.f64	d6, d1, d1
 8014a8a:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 8014a8e:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 8014a92:	eea1 7b05 	vfma.f64	d7, d1, d5
 8014a96:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 8014a9a:	eea1 0b05 	vfma.f64	d0, d1, d5
 8014a9e:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 8014aa2:	ee21 1b06 	vmul.f64	d1, d1, d6
 8014aa6:	eea6 0b05 	vfma.f64	d0, d6, d5
 8014aaa:	e7e5      	b.n	8014a78 <sinf_poly+0x20>
 8014aac:	0000      	movs	r0, r0
	...

08014ab0 <cosf>:
 8014ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ab2:	ee10 4a10 	vmov	r4, s0
 8014ab6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8014aba:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8014abe:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8014ac2:	d20c      	bcs.n	8014ade <cosf+0x2e>
 8014ac4:	ee26 1b06 	vmul.f64	d1, d6, d6
 8014ac8:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 8014acc:	d378      	bcc.n	8014bc0 <cosf+0x110>
 8014ace:	eeb0 0b46 	vmov.f64	d0, d6
 8014ad2:	483f      	ldr	r0, [pc, #252]	; (8014bd0 <cosf+0x120>)
 8014ad4:	2101      	movs	r1, #1
 8014ad6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014ada:	f7ff bfbd 	b.w	8014a58 <sinf_poly>
 8014ade:	f240 422e 	movw	r2, #1070	; 0x42e
 8014ae2:	4293      	cmp	r3, r2
 8014ae4:	d826      	bhi.n	8014b34 <cosf+0x84>
 8014ae6:	4b3a      	ldr	r3, [pc, #232]	; (8014bd0 <cosf+0x120>)
 8014ae8:	ed93 7b08 	vldr	d7, [r3, #32]
 8014aec:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014af0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8014af4:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8014af8:	ee17 1a90 	vmov	r1, s15
 8014afc:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 8014b00:	1609      	asrs	r1, r1, #24
 8014b02:	ee07 1a90 	vmov	s15, r1
 8014b06:	f001 0203 	and.w	r2, r1, #3
 8014b0a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8014b0e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8014b12:	ed92 0b00 	vldr	d0, [r2]
 8014b16:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8014b1a:	f011 0f02 	tst.w	r1, #2
 8014b1e:	eea5 6b47 	vfms.f64	d6, d5, d7
 8014b22:	f081 0101 	eor.w	r1, r1, #1
 8014b26:	bf08      	it	eq
 8014b28:	4618      	moveq	r0, r3
 8014b2a:	ee26 1b06 	vmul.f64	d1, d6, d6
 8014b2e:	ee20 0b06 	vmul.f64	d0, d0, d6
 8014b32:	e7d0      	b.n	8014ad6 <cosf+0x26>
 8014b34:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8014b38:	d23e      	bcs.n	8014bb8 <cosf+0x108>
 8014b3a:	4b26      	ldr	r3, [pc, #152]	; (8014bd4 <cosf+0x124>)
 8014b3c:	f3c4 6283 	ubfx	r2, r4, #26, #4
 8014b40:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8014b44:	f3c4 0116 	ubfx	r1, r4, #0, #23
 8014b48:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8014b4c:	6a06      	ldr	r6, [r0, #32]
 8014b4e:	6900      	ldr	r0, [r0, #16]
 8014b50:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8014b54:	40a9      	lsls	r1, r5
 8014b56:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8014b5a:	fba1 6706 	umull	r6, r7, r1, r6
 8014b5e:	fb05 f301 	mul.w	r3, r5, r1
 8014b62:	463a      	mov	r2, r7
 8014b64:	fbe0 2301 	umlal	r2, r3, r0, r1
 8014b68:	1c11      	adds	r1, r2, #0
 8014b6a:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 8014b6e:	2000      	movs	r0, #0
 8014b70:	1a10      	subs	r0, r2, r0
 8014b72:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 8014b76:	eb63 0101 	sbc.w	r1, r3, r1
 8014b7a:	f7eb fda7 	bl	80006cc <__aeabi_l2d>
 8014b7e:	0fb5      	lsrs	r5, r6, #30
 8014b80:	4b13      	ldr	r3, [pc, #76]	; (8014bd0 <cosf+0x120>)
 8014b82:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8014b86:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8014bc8 <cosf+0x118>
 8014b8a:	ec41 0b17 	vmov	d7, r0, r1
 8014b8e:	f004 0203 	and.w	r2, r4, #3
 8014b92:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8014b96:	ee27 0b00 	vmul.f64	d0, d7, d0
 8014b9a:	ed92 7b00 	vldr	d7, [r2]
 8014b9e:	ee20 1b00 	vmul.f64	d1, d0, d0
 8014ba2:	f014 0f02 	tst.w	r4, #2
 8014ba6:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8014baa:	f085 0101 	eor.w	r1, r5, #1
 8014bae:	bf08      	it	eq
 8014bb0:	4618      	moveq	r0, r3
 8014bb2:	ee27 0b00 	vmul.f64	d0, d7, d0
 8014bb6:	e78e      	b.n	8014ad6 <cosf+0x26>
 8014bb8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014bbc:	f000 b817 	b.w	8014bee <__math_invalidf>
 8014bc0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014bc6:	bf00      	nop
 8014bc8:	54442d18 	.word	0x54442d18
 8014bcc:	3c1921fb 	.word	0x3c1921fb
 8014bd0:	0801e0d8 	.word	0x0801e0d8
 8014bd4:	0801e074 	.word	0x0801e074

08014bd8 <with_errnof>:
 8014bd8:	b513      	push	{r0, r1, r4, lr}
 8014bda:	4604      	mov	r4, r0
 8014bdc:	ed8d 0a01 	vstr	s0, [sp, #4]
 8014be0:	f7fb faf8 	bl	80101d4 <__errno>
 8014be4:	ed9d 0a01 	vldr	s0, [sp, #4]
 8014be8:	6004      	str	r4, [r0, #0]
 8014bea:	b002      	add	sp, #8
 8014bec:	bd10      	pop	{r4, pc}

08014bee <__math_invalidf>:
 8014bee:	eef0 7a40 	vmov.f32	s15, s0
 8014bf2:	ee30 7a40 	vsub.f32	s14, s0, s0
 8014bf6:	eef4 7a67 	vcmp.f32	s15, s15
 8014bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bfe:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8014c02:	d602      	bvs.n	8014c0a <__math_invalidf+0x1c>
 8014c04:	2021      	movs	r0, #33	; 0x21
 8014c06:	f7ff bfe7 	b.w	8014bd8 <with_errnof>
 8014c0a:	4770      	bx	lr

08014c0c <fmax>:
 8014c0c:	b508      	push	{r3, lr}
 8014c0e:	ed2d 8b04 	vpush	{d8-d9}
 8014c12:	eeb0 8b40 	vmov.f64	d8, d0
 8014c16:	eeb0 9b41 	vmov.f64	d9, d1
 8014c1a:	f000 f82d 	bl	8014c78 <__fpclassifyd>
 8014c1e:	b148      	cbz	r0, 8014c34 <fmax+0x28>
 8014c20:	eeb0 0b49 	vmov.f64	d0, d9
 8014c24:	f000 f828 	bl	8014c78 <__fpclassifyd>
 8014c28:	b130      	cbz	r0, 8014c38 <fmax+0x2c>
 8014c2a:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8014c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c32:	dc01      	bgt.n	8014c38 <fmax+0x2c>
 8014c34:	eeb0 8b49 	vmov.f64	d8, d9
 8014c38:	eeb0 0b48 	vmov.f64	d0, d8
 8014c3c:	ecbd 8b04 	vpop	{d8-d9}
 8014c40:	bd08      	pop	{r3, pc}

08014c42 <fmin>:
 8014c42:	b508      	push	{r3, lr}
 8014c44:	ed2d 8b04 	vpush	{d8-d9}
 8014c48:	eeb0 8b40 	vmov.f64	d8, d0
 8014c4c:	eeb0 9b41 	vmov.f64	d9, d1
 8014c50:	f000 f812 	bl	8014c78 <__fpclassifyd>
 8014c54:	b148      	cbz	r0, 8014c6a <fmin+0x28>
 8014c56:	eeb0 0b49 	vmov.f64	d0, d9
 8014c5a:	f000 f80d 	bl	8014c78 <__fpclassifyd>
 8014c5e:	b130      	cbz	r0, 8014c6e <fmin+0x2c>
 8014c60:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8014c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c68:	d401      	bmi.n	8014c6e <fmin+0x2c>
 8014c6a:	eeb0 8b49 	vmov.f64	d8, d9
 8014c6e:	eeb0 0b48 	vmov.f64	d0, d8
 8014c72:	ecbd 8b04 	vpop	{d8-d9}
 8014c76:	bd08      	pop	{r3, pc}

08014c78 <__fpclassifyd>:
 8014c78:	ec51 0b10 	vmov	r0, r1, d0
 8014c7c:	b510      	push	{r4, lr}
 8014c7e:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8014c82:	460b      	mov	r3, r1
 8014c84:	d019      	beq.n	8014cba <__fpclassifyd+0x42>
 8014c86:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 8014c8a:	490e      	ldr	r1, [pc, #56]	; (8014cc4 <__fpclassifyd+0x4c>)
 8014c8c:	428a      	cmp	r2, r1
 8014c8e:	d90e      	bls.n	8014cae <__fpclassifyd+0x36>
 8014c90:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8014c94:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8014c98:	428a      	cmp	r2, r1
 8014c9a:	d908      	bls.n	8014cae <__fpclassifyd+0x36>
 8014c9c:	4a0a      	ldr	r2, [pc, #40]	; (8014cc8 <__fpclassifyd+0x50>)
 8014c9e:	4213      	tst	r3, r2
 8014ca0:	d007      	beq.n	8014cb2 <__fpclassifyd+0x3a>
 8014ca2:	4294      	cmp	r4, r2
 8014ca4:	d107      	bne.n	8014cb6 <__fpclassifyd+0x3e>
 8014ca6:	fab0 f080 	clz	r0, r0
 8014caa:	0940      	lsrs	r0, r0, #5
 8014cac:	bd10      	pop	{r4, pc}
 8014cae:	2004      	movs	r0, #4
 8014cb0:	e7fc      	b.n	8014cac <__fpclassifyd+0x34>
 8014cb2:	2003      	movs	r0, #3
 8014cb4:	e7fa      	b.n	8014cac <__fpclassifyd+0x34>
 8014cb6:	2000      	movs	r0, #0
 8014cb8:	e7f8      	b.n	8014cac <__fpclassifyd+0x34>
 8014cba:	2800      	cmp	r0, #0
 8014cbc:	d1ee      	bne.n	8014c9c <__fpclassifyd+0x24>
 8014cbe:	2002      	movs	r0, #2
 8014cc0:	e7f4      	b.n	8014cac <__fpclassifyd+0x34>
 8014cc2:	bf00      	nop
 8014cc4:	7fdfffff 	.word	0x7fdfffff
 8014cc8:	7ff00000 	.word	0x7ff00000

08014ccc <sinf_poly>:
 8014ccc:	07cb      	lsls	r3, r1, #31
 8014cce:	d412      	bmi.n	8014cf6 <sinf_poly+0x2a>
 8014cd0:	ee21 6b00 	vmul.f64	d6, d1, d0
 8014cd4:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 8014cd8:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 8014cdc:	eea5 7b01 	vfma.f64	d7, d5, d1
 8014ce0:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 8014ce4:	ee21 1b06 	vmul.f64	d1, d1, d6
 8014ce8:	eea5 0b06 	vfma.f64	d0, d5, d6
 8014cec:	eea7 0b01 	vfma.f64	d0, d7, d1
 8014cf0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8014cf4:	4770      	bx	lr
 8014cf6:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 8014cfa:	ee21 6b01 	vmul.f64	d6, d1, d1
 8014cfe:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 8014d02:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 8014d06:	eea1 7b05 	vfma.f64	d7, d1, d5
 8014d0a:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 8014d0e:	eea1 0b05 	vfma.f64	d0, d1, d5
 8014d12:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 8014d16:	ee21 1b06 	vmul.f64	d1, d1, d6
 8014d1a:	eea6 0b05 	vfma.f64	d0, d6, d5
 8014d1e:	e7e5      	b.n	8014cec <sinf_poly+0x20>

08014d20 <sinf>:
 8014d20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014d22:	ee10 4a10 	vmov	r4, s0
 8014d26:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8014d2a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8014d2e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8014d32:	eef0 7a40 	vmov.f32	s15, s0
 8014d36:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8014d3a:	d218      	bcs.n	8014d6e <sinf+0x4e>
 8014d3c:	ee26 1b06 	vmul.f64	d1, d6, d6
 8014d40:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 8014d44:	d20a      	bcs.n	8014d5c <sinf+0x3c>
 8014d46:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 8014d4a:	d103      	bne.n	8014d54 <sinf+0x34>
 8014d4c:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8014d50:	ed8d 1a01 	vstr	s2, [sp, #4]
 8014d54:	eeb0 0a67 	vmov.f32	s0, s15
 8014d58:	b003      	add	sp, #12
 8014d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d5c:	483e      	ldr	r0, [pc, #248]	; (8014e58 <sinf+0x138>)
 8014d5e:	eeb0 0b46 	vmov.f64	d0, d6
 8014d62:	2100      	movs	r1, #0
 8014d64:	b003      	add	sp, #12
 8014d66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014d6a:	f7ff bfaf 	b.w	8014ccc <sinf_poly>
 8014d6e:	f240 422e 	movw	r2, #1070	; 0x42e
 8014d72:	4293      	cmp	r3, r2
 8014d74:	d824      	bhi.n	8014dc0 <sinf+0xa0>
 8014d76:	4b38      	ldr	r3, [pc, #224]	; (8014e58 <sinf+0x138>)
 8014d78:	ed93 7b08 	vldr	d7, [r3, #32]
 8014d7c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014d80:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8014d84:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8014d88:	ee17 1a90 	vmov	r1, s15
 8014d8c:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 8014d90:	1609      	asrs	r1, r1, #24
 8014d92:	ee07 1a90 	vmov	s15, r1
 8014d96:	f001 0203 	and.w	r2, r1, #3
 8014d9a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8014d9e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8014da2:	ed92 0b00 	vldr	d0, [r2]
 8014da6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8014daa:	f011 0f02 	tst.w	r1, #2
 8014dae:	eea5 6b47 	vfms.f64	d6, d5, d7
 8014db2:	bf08      	it	eq
 8014db4:	4618      	moveq	r0, r3
 8014db6:	ee26 1b06 	vmul.f64	d1, d6, d6
 8014dba:	ee20 0b06 	vmul.f64	d0, d0, d6
 8014dbe:	e7d1      	b.n	8014d64 <sinf+0x44>
 8014dc0:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8014dc4:	d23d      	bcs.n	8014e42 <sinf+0x122>
 8014dc6:	4b25      	ldr	r3, [pc, #148]	; (8014e5c <sinf+0x13c>)
 8014dc8:	f3c4 6283 	ubfx	r2, r4, #26, #4
 8014dcc:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8014dd0:	f3c4 0116 	ubfx	r1, r4, #0, #23
 8014dd4:	6a06      	ldr	r6, [r0, #32]
 8014dd6:	6900      	ldr	r0, [r0, #16]
 8014dd8:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8014ddc:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8014de0:	40a9      	lsls	r1, r5
 8014de2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8014de6:	fba1 6706 	umull	r6, r7, r1, r6
 8014dea:	fb05 f301 	mul.w	r3, r5, r1
 8014dee:	463a      	mov	r2, r7
 8014df0:	fbe0 2301 	umlal	r2, r3, r0, r1
 8014df4:	1c11      	adds	r1, r2, #0
 8014df6:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 8014dfa:	2000      	movs	r0, #0
 8014dfc:	1a10      	subs	r0, r2, r0
 8014dfe:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 8014e02:	eb63 0101 	sbc.w	r1, r3, r1
 8014e06:	f7eb fc61 	bl	80006cc <__aeabi_l2d>
 8014e0a:	0fb5      	lsrs	r5, r6, #30
 8014e0c:	4a12      	ldr	r2, [pc, #72]	; (8014e58 <sinf+0x138>)
 8014e0e:	eb05 73d4 	add.w	r3, r5, r4, lsr #31
 8014e12:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8014e50 <sinf+0x130>
 8014e16:	ec41 0b17 	vmov	d7, r0, r1
 8014e1a:	f003 0103 	and.w	r1, r3, #3
 8014e1e:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8014e22:	ee27 0b00 	vmul.f64	d0, d7, d0
 8014e26:	ed91 7b00 	vldr	d7, [r1]
 8014e2a:	ee20 1b00 	vmul.f64	d1, d0, d0
 8014e2e:	f013 0f02 	tst.w	r3, #2
 8014e32:	f102 0070 	add.w	r0, r2, #112	; 0x70
 8014e36:	4629      	mov	r1, r5
 8014e38:	bf08      	it	eq
 8014e3a:	4610      	moveq	r0, r2
 8014e3c:	ee27 0b00 	vmul.f64	d0, d7, d0
 8014e40:	e790      	b.n	8014d64 <sinf+0x44>
 8014e42:	b003      	add	sp, #12
 8014e44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014e48:	f7ff bed1 	b.w	8014bee <__math_invalidf>
 8014e4c:	f3af 8000 	nop.w
 8014e50:	54442d18 	.word	0x54442d18
 8014e54:	3c1921fb 	.word	0x3c1921fb
 8014e58:	0801e0d8 	.word	0x0801e0d8
 8014e5c:	0801e074 	.word	0x0801e074

08014e60 <_init>:
 8014e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e62:	bf00      	nop
 8014e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014e66:	bc08      	pop	{r3}
 8014e68:	469e      	mov	lr, r3
 8014e6a:	4770      	bx	lr

08014e6c <_fini>:
 8014e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e6e:	bf00      	nop
 8014e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014e72:	bc08      	pop	{r3}
 8014e74:	469e      	mov	lr, r3
 8014e76:	4770      	bx	lr
