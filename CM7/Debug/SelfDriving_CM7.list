
SelfDriving_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014c70  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009340  08014f10  08014f10  00024f10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e250  0801e250  0005c200  2**0
                  CONTENTS
  4 .ARM          00000008  0801e250  0801e250  0002e250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e258  0801e258  0005c200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e258  0801e258  0002e258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e25c  0801e25c  0002e25c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000a2c4  24000000  0801e260  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  2400a2c4  08028524  0003a2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  2400a324  08028584  0003a324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000532c  2400a384  080285e4  0003a384  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2400f6b0  080285e4  0003f6b0  2**0
                  ALLOC
 13 .data_RAM_D2  00000000  30000000  30000000  0005c200  2**0
                  CONTENTS
 14 .bss_RAM_D2   00000000  30000000  30000000  0005c200  2**0
                  CONTENTS
 15 .openamp_section 0000008c  38000000  080285e4  00060000  2**2
                  ALLOC
 16 .ARM.attributes 0000002e  00000000  00000000  0005c200  2**0
                  CONTENTS, READONLY
 17 .RAM_D2       0001c200  30000000  080285e4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 18 .debug_info   00071184  00000000  00000000  0005c22e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 0000a31e  00000000  00000000  000cd3b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00002630  00000000  00000000  000d76d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00002298  00000000  00000000  000d9d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0004a94e  00000000  00000000  000dbf98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   00044774  00000000  00000000  001268e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    00199d7e  00000000  00000000  0016b05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      00000053  00000000  00000000  00304dd8  2**0
                  CONTENTS, READONLY
 26 .debug_frame  0000b2c4  00000000  00000000  00304e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400a384 	.word	0x2400a384
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014ef8 	.word	0x08014ef8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400a388 	.word	0x2400a388
 80002dc:	08014ef8 	.word	0x08014ef8

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b9a6 	b.w	8000a8c <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9d08      	ldr	r5, [sp, #32]
 80007ce:	4604      	mov	r4, r0
 80007d0:	468c      	mov	ip, r1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	f040 8083 	bne.w	80008de <__udivmoddi4+0x116>
 80007d8:	428a      	cmp	r2, r1
 80007da:	4617      	mov	r7, r2
 80007dc:	d947      	bls.n	800086e <__udivmoddi4+0xa6>
 80007de:	fab2 f282 	clz	r2, r2
 80007e2:	b142      	cbz	r2, 80007f6 <__udivmoddi4+0x2e>
 80007e4:	f1c2 0020 	rsb	r0, r2, #32
 80007e8:	fa24 f000 	lsr.w	r0, r4, r0
 80007ec:	4091      	lsls	r1, r2
 80007ee:	4097      	lsls	r7, r2
 80007f0:	ea40 0c01 	orr.w	ip, r0, r1
 80007f4:	4094      	lsls	r4, r2
 80007f6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007fa:	0c23      	lsrs	r3, r4, #16
 80007fc:	fbbc f6f8 	udiv	r6, ip, r8
 8000800:	fa1f fe87 	uxth.w	lr, r7
 8000804:	fb08 c116 	mls	r1, r8, r6, ip
 8000808:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800080c:	fb06 f10e 	mul.w	r1, r6, lr
 8000810:	4299      	cmp	r1, r3
 8000812:	d909      	bls.n	8000828 <__udivmoddi4+0x60>
 8000814:	18fb      	adds	r3, r7, r3
 8000816:	f106 30ff 	add.w	r0, r6, #4294967295
 800081a:	f080 8119 	bcs.w	8000a50 <__udivmoddi4+0x288>
 800081e:	4299      	cmp	r1, r3
 8000820:	f240 8116 	bls.w	8000a50 <__udivmoddi4+0x288>
 8000824:	3e02      	subs	r6, #2
 8000826:	443b      	add	r3, r7
 8000828:	1a5b      	subs	r3, r3, r1
 800082a:	b2a4      	uxth	r4, r4
 800082c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000830:	fb08 3310 	mls	r3, r8, r0, r3
 8000834:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000838:	fb00 fe0e 	mul.w	lr, r0, lr
 800083c:	45a6      	cmp	lr, r4
 800083e:	d909      	bls.n	8000854 <__udivmoddi4+0x8c>
 8000840:	193c      	adds	r4, r7, r4
 8000842:	f100 33ff 	add.w	r3, r0, #4294967295
 8000846:	f080 8105 	bcs.w	8000a54 <__udivmoddi4+0x28c>
 800084a:	45a6      	cmp	lr, r4
 800084c:	f240 8102 	bls.w	8000a54 <__udivmoddi4+0x28c>
 8000850:	3802      	subs	r0, #2
 8000852:	443c      	add	r4, r7
 8000854:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000858:	eba4 040e 	sub.w	r4, r4, lr
 800085c:	2600      	movs	r6, #0
 800085e:	b11d      	cbz	r5, 8000868 <__udivmoddi4+0xa0>
 8000860:	40d4      	lsrs	r4, r2
 8000862:	2300      	movs	r3, #0
 8000864:	e9c5 4300 	strd	r4, r3, [r5]
 8000868:	4631      	mov	r1, r6
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	b902      	cbnz	r2, 8000872 <__udivmoddi4+0xaa>
 8000870:	deff      	udf	#255	; 0xff
 8000872:	fab2 f282 	clz	r2, r2
 8000876:	2a00      	cmp	r2, #0
 8000878:	d150      	bne.n	800091c <__udivmoddi4+0x154>
 800087a:	1bcb      	subs	r3, r1, r7
 800087c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000880:	fa1f f887 	uxth.w	r8, r7
 8000884:	2601      	movs	r6, #1
 8000886:	fbb3 fcfe 	udiv	ip, r3, lr
 800088a:	0c21      	lsrs	r1, r4, #16
 800088c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000890:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000894:	fb08 f30c 	mul.w	r3, r8, ip
 8000898:	428b      	cmp	r3, r1
 800089a:	d907      	bls.n	80008ac <__udivmoddi4+0xe4>
 800089c:	1879      	adds	r1, r7, r1
 800089e:	f10c 30ff 	add.w	r0, ip, #4294967295
 80008a2:	d202      	bcs.n	80008aa <__udivmoddi4+0xe2>
 80008a4:	428b      	cmp	r3, r1
 80008a6:	f200 80e9 	bhi.w	8000a7c <__udivmoddi4+0x2b4>
 80008aa:	4684      	mov	ip, r0
 80008ac:	1ac9      	subs	r1, r1, r3
 80008ae:	b2a3      	uxth	r3, r4
 80008b0:	fbb1 f0fe 	udiv	r0, r1, lr
 80008b4:	fb0e 1110 	mls	r1, lr, r0, r1
 80008b8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80008bc:	fb08 f800 	mul.w	r8, r8, r0
 80008c0:	45a0      	cmp	r8, r4
 80008c2:	d907      	bls.n	80008d4 <__udivmoddi4+0x10c>
 80008c4:	193c      	adds	r4, r7, r4
 80008c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x10a>
 80008cc:	45a0      	cmp	r8, r4
 80008ce:	f200 80d9 	bhi.w	8000a84 <__udivmoddi4+0x2bc>
 80008d2:	4618      	mov	r0, r3
 80008d4:	eba4 0408 	sub.w	r4, r4, r8
 80008d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008dc:	e7bf      	b.n	800085e <__udivmoddi4+0x96>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d909      	bls.n	80008f6 <__udivmoddi4+0x12e>
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	f000 80b1 	beq.w	8000a4a <__udivmoddi4+0x282>
 80008e8:	2600      	movs	r6, #0
 80008ea:	e9c5 0100 	strd	r0, r1, [r5]
 80008ee:	4630      	mov	r0, r6
 80008f0:	4631      	mov	r1, r6
 80008f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f6:	fab3 f683 	clz	r6, r3
 80008fa:	2e00      	cmp	r6, #0
 80008fc:	d14a      	bne.n	8000994 <__udivmoddi4+0x1cc>
 80008fe:	428b      	cmp	r3, r1
 8000900:	d302      	bcc.n	8000908 <__udivmoddi4+0x140>
 8000902:	4282      	cmp	r2, r0
 8000904:	f200 80b8 	bhi.w	8000a78 <__udivmoddi4+0x2b0>
 8000908:	1a84      	subs	r4, r0, r2
 800090a:	eb61 0103 	sbc.w	r1, r1, r3
 800090e:	2001      	movs	r0, #1
 8000910:	468c      	mov	ip, r1
 8000912:	2d00      	cmp	r5, #0
 8000914:	d0a8      	beq.n	8000868 <__udivmoddi4+0xa0>
 8000916:	e9c5 4c00 	strd	r4, ip, [r5]
 800091a:	e7a5      	b.n	8000868 <__udivmoddi4+0xa0>
 800091c:	f1c2 0320 	rsb	r3, r2, #32
 8000920:	fa20 f603 	lsr.w	r6, r0, r3
 8000924:	4097      	lsls	r7, r2
 8000926:	fa01 f002 	lsl.w	r0, r1, r2
 800092a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800092e:	40d9      	lsrs	r1, r3
 8000930:	4330      	orrs	r0, r6
 8000932:	0c03      	lsrs	r3, r0, #16
 8000934:	fbb1 f6fe 	udiv	r6, r1, lr
 8000938:	fa1f f887 	uxth.w	r8, r7
 800093c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000940:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000944:	fb06 f108 	mul.w	r1, r6, r8
 8000948:	4299      	cmp	r1, r3
 800094a:	fa04 f402 	lsl.w	r4, r4, r2
 800094e:	d909      	bls.n	8000964 <__udivmoddi4+0x19c>
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	f106 3cff 	add.w	ip, r6, #4294967295
 8000956:	f080 808d 	bcs.w	8000a74 <__udivmoddi4+0x2ac>
 800095a:	4299      	cmp	r1, r3
 800095c:	f240 808a 	bls.w	8000a74 <__udivmoddi4+0x2ac>
 8000960:	3e02      	subs	r6, #2
 8000962:	443b      	add	r3, r7
 8000964:	1a5b      	subs	r3, r3, r1
 8000966:	b281      	uxth	r1, r0
 8000968:	fbb3 f0fe 	udiv	r0, r3, lr
 800096c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000970:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000974:	fb00 f308 	mul.w	r3, r0, r8
 8000978:	428b      	cmp	r3, r1
 800097a:	d907      	bls.n	800098c <__udivmoddi4+0x1c4>
 800097c:	1879      	adds	r1, r7, r1
 800097e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000982:	d273      	bcs.n	8000a6c <__udivmoddi4+0x2a4>
 8000984:	428b      	cmp	r3, r1
 8000986:	d971      	bls.n	8000a6c <__udivmoddi4+0x2a4>
 8000988:	3802      	subs	r0, #2
 800098a:	4439      	add	r1, r7
 800098c:	1acb      	subs	r3, r1, r3
 800098e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000992:	e778      	b.n	8000886 <__udivmoddi4+0xbe>
 8000994:	f1c6 0c20 	rsb	ip, r6, #32
 8000998:	fa03 f406 	lsl.w	r4, r3, r6
 800099c:	fa22 f30c 	lsr.w	r3, r2, ip
 80009a0:	431c      	orrs	r4, r3
 80009a2:	fa20 f70c 	lsr.w	r7, r0, ip
 80009a6:	fa01 f306 	lsl.w	r3, r1, r6
 80009aa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80009ae:	fa21 f10c 	lsr.w	r1, r1, ip
 80009b2:	431f      	orrs	r7, r3
 80009b4:	0c3b      	lsrs	r3, r7, #16
 80009b6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009ba:	fa1f f884 	uxth.w	r8, r4
 80009be:	fb0e 1119 	mls	r1, lr, r9, r1
 80009c2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009c6:	fb09 fa08 	mul.w	sl, r9, r8
 80009ca:	458a      	cmp	sl, r1
 80009cc:	fa02 f206 	lsl.w	r2, r2, r6
 80009d0:	fa00 f306 	lsl.w	r3, r0, r6
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x220>
 80009d6:	1861      	adds	r1, r4, r1
 80009d8:	f109 30ff 	add.w	r0, r9, #4294967295
 80009dc:	d248      	bcs.n	8000a70 <__udivmoddi4+0x2a8>
 80009de:	458a      	cmp	sl, r1
 80009e0:	d946      	bls.n	8000a70 <__udivmoddi4+0x2a8>
 80009e2:	f1a9 0902 	sub.w	r9, r9, #2
 80009e6:	4421      	add	r1, r4
 80009e8:	eba1 010a 	sub.w	r1, r1, sl
 80009ec:	b2bf      	uxth	r7, r7
 80009ee:	fbb1 f0fe 	udiv	r0, r1, lr
 80009f2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009f6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009fa:	fb00 f808 	mul.w	r8, r0, r8
 80009fe:	45b8      	cmp	r8, r7
 8000a00:	d907      	bls.n	8000a12 <__udivmoddi4+0x24a>
 8000a02:	19e7      	adds	r7, r4, r7
 8000a04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a08:	d22e      	bcs.n	8000a68 <__udivmoddi4+0x2a0>
 8000a0a:	45b8      	cmp	r8, r7
 8000a0c:	d92c      	bls.n	8000a68 <__udivmoddi4+0x2a0>
 8000a0e:	3802      	subs	r0, #2
 8000a10:	4427      	add	r7, r4
 8000a12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a16:	eba7 0708 	sub.w	r7, r7, r8
 8000a1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000a1e:	454f      	cmp	r7, r9
 8000a20:	46c6      	mov	lr, r8
 8000a22:	4649      	mov	r1, r9
 8000a24:	d31a      	bcc.n	8000a5c <__udivmoddi4+0x294>
 8000a26:	d017      	beq.n	8000a58 <__udivmoddi4+0x290>
 8000a28:	b15d      	cbz	r5, 8000a42 <__udivmoddi4+0x27a>
 8000a2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a36:	40f2      	lsrs	r2, r6
 8000a38:	ea4c 0202 	orr.w	r2, ip, r2
 8000a3c:	40f7      	lsrs	r7, r6
 8000a3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a42:	2600      	movs	r6, #0
 8000a44:	4631      	mov	r1, r6
 8000a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4a:	462e      	mov	r6, r5
 8000a4c:	4628      	mov	r0, r5
 8000a4e:	e70b      	b.n	8000868 <__udivmoddi4+0xa0>
 8000a50:	4606      	mov	r6, r0
 8000a52:	e6e9      	b.n	8000828 <__udivmoddi4+0x60>
 8000a54:	4618      	mov	r0, r3
 8000a56:	e6fd      	b.n	8000854 <__udivmoddi4+0x8c>
 8000a58:	4543      	cmp	r3, r8
 8000a5a:	d2e5      	bcs.n	8000a28 <__udivmoddi4+0x260>
 8000a5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a60:	eb69 0104 	sbc.w	r1, r9, r4
 8000a64:	3801      	subs	r0, #1
 8000a66:	e7df      	b.n	8000a28 <__udivmoddi4+0x260>
 8000a68:	4608      	mov	r0, r1
 8000a6a:	e7d2      	b.n	8000a12 <__udivmoddi4+0x24a>
 8000a6c:	4660      	mov	r0, ip
 8000a6e:	e78d      	b.n	800098c <__udivmoddi4+0x1c4>
 8000a70:	4681      	mov	r9, r0
 8000a72:	e7b9      	b.n	80009e8 <__udivmoddi4+0x220>
 8000a74:	4666      	mov	r6, ip
 8000a76:	e775      	b.n	8000964 <__udivmoddi4+0x19c>
 8000a78:	4630      	mov	r0, r6
 8000a7a:	e74a      	b.n	8000912 <__udivmoddi4+0x14a>
 8000a7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a80:	4439      	add	r1, r7
 8000a82:	e713      	b.n	80008ac <__udivmoddi4+0xe4>
 8000a84:	3802      	subs	r0, #2
 8000a86:	443c      	add	r4, r7
 8000a88:	e724      	b.n	80008d4 <__udivmoddi4+0x10c>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_idiv0>:
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <rpmsg_recv_callback>:

uint32_t receivedDataPointer = 0;

int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data,
		size_t len, uint32_t src, void *priv)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
 8000a9c:	603b      	str	r3, [r7, #0]
	received_data = *((unsigned int *) data);
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <rpmsg_recv_callback+0x38>)
 8000aa4:	6013      	str	r3, [r2, #0]
	receivedDataPointer = (uint32_t)((unsigned int *) data);
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	4a08      	ldr	r2, [pc, #32]	; (8000acc <rpmsg_recv_callback+0x3c>)
 8000aaa:	6013      	str	r3, [r2, #0]
	message_received=1;
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <rpmsg_recv_callback+0x40>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	601a      	str	r2, [r3, #0]
	parseRecievedMessages((uint8_t)received_data);
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <rpmsg_recv_callback+0x38>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 f853 	bl	8000b64 <parseRecievedMessages>
	return 0;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2400a570 	.word	0x2400a570
 8000acc:	2400a3a0 	.word	0x2400a3a0
 8000ad0:	2400a5b8 	.word	0x2400a5b8

08000ad4 <receive_message>:
}
#endif

#ifdef CORE_CM7
unsigned int receive_message(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	while (message_received == 0 && service_created == 1)
 8000ad8:	e001      	b.n	8000ade <receive_message+0xa>
	{
		OPENAMP_check_for_message();
 8000ada:	f00c fd4f 	bl	800d57c <OPENAMP_check_for_message>
	while (message_received == 0 && service_created == 1)
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <receive_message+0x28>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d103      	bne.n	8000aee <receive_message+0x1a>
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <receive_message+0x2c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d0f5      	beq.n	8000ada <receive_message+0x6>
	}
	message_received = 0;
 8000aee:	4b03      	ldr	r3, [pc, #12]	; (8000afc <receive_message+0x28>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]

	return received_data;
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <receive_message+0x30>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2400a5b8 	.word	0x2400a5b8
 8000b00:	2400a574 	.word	0x2400a574
 8000b04:	2400a570 	.word	0x2400a570

08000b08 <service_destroy_cb>:
void service_destroy_cb(struct rpmsg_endpoint *ept)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	/* this function is called while remote endpoint as been destroyed, the
	 * service is no more available
	 */
	service_created = 0;
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <service_destroy_cb+0x1c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	2400a574 	.word	0x2400a574

08000b28 <new_service_cb>:

void new_service_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
	/* create a endpoint for rmpsg communication */
	OPENAMP_create_endpoint(&rp_endpoint, name, dest, rpmsg_recv_callback,
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <new_service_cb+0x2c>)
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <new_service_cb+0x30>)
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	4807      	ldr	r0, [pc, #28]	; (8000b5c <new_service_cb+0x34>)
 8000b40:	f00c fcfe 	bl	800d540 <OPENAMP_create_endpoint>
			service_destroy_cb);
	service_created = 1;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <new_service_cb+0x38>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	601a      	str	r2, [r3, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	08000b09 	.word	0x08000b09
 8000b58:	08000a91 	.word	0x08000a91
 8000b5c:	2400a578 	.word	0x2400a578
 8000b60:	2400a574 	.word	0x2400a574

08000b64 <parseRecievedMessages>:
#ifdef CORE_CM7
#include "GUI_Paint.h"
#endif

void parseRecievedMessages(uint8_t opCode)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
	switch (opCode)
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d108      	bne.n	8000b86 <parseRecievedMessages+0x22>
	{
#ifdef CORE_CM7
		case (1):
		{
			memcpy(receivedAnglesData, (uint32_t *)receivedDataPointer, sizeof(tANGLESMESSAGES));
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <parseRecievedMessages+0x2c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <parseRecievedMessages+0x30>)
 8000b7a:	6812      	ldr	r2, [r2, #0]
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	221c      	movs	r2, #28
 8000b80:	4618      	mov	r0, r3
 8000b82:	f00f fbbf 	bl	8010304 <memcpy>
		default:
		{

		}
	}
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2400a56c 	.word	0x2400a56c
 8000b94:	2400a3a0 	.word	0x2400a3a0

08000b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b3f      	ldr	r3, [pc, #252]	; (8000c9c <SystemInit+0x104>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a3e      	ldr	r2, [pc, #248]	; (8000c9c <SystemInit+0x104>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000bac:	4b3b      	ldr	r3, [pc, #236]	; (8000c9c <SystemInit+0x104>)
 8000bae:	691b      	ldr	r3, [r3, #16]
 8000bb0:	4a3a      	ldr	r2, [pc, #232]	; (8000c9c <SystemInit+0x104>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bb8:	4b39      	ldr	r3, [pc, #228]	; (8000ca0 <SystemInit+0x108>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f003 030f 	and.w	r3, r3, #15
 8000bc0:	2b06      	cmp	r3, #6
 8000bc2:	d807      	bhi.n	8000bd4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bc4:	4b36      	ldr	r3, [pc, #216]	; (8000ca0 <SystemInit+0x108>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f023 030f 	bic.w	r3, r3, #15
 8000bcc:	4a34      	ldr	r2, [pc, #208]	; (8000ca0 <SystemInit+0x108>)
 8000bce:	f043 0307 	orr.w	r3, r3, #7
 8000bd2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bd4:	4b33      	ldr	r3, [pc, #204]	; (8000ca4 <SystemInit+0x10c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a32      	ldr	r2, [pc, #200]	; (8000ca4 <SystemInit+0x10c>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000be0:	4b30      	ldr	r3, [pc, #192]	; (8000ca4 <SystemInit+0x10c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000be6:	4b2f      	ldr	r3, [pc, #188]	; (8000ca4 <SystemInit+0x10c>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	492e      	ldr	r1, [pc, #184]	; (8000ca4 <SystemInit+0x10c>)
 8000bec:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <SystemInit+0x110>)
 8000bee:	4013      	ands	r3, r2
 8000bf0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bf2:	4b2b      	ldr	r3, [pc, #172]	; (8000ca0 <SystemInit+0x108>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d007      	beq.n	8000c0e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bfe:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <SystemInit+0x108>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f023 030f 	bic.w	r3, r3, #15
 8000c06:	4a26      	ldr	r2, [pc, #152]	; (8000ca0 <SystemInit+0x108>)
 8000c08:	f043 0307 	orr.w	r3, r3, #7
 8000c0c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c0e:	4b25      	ldr	r3, [pc, #148]	; (8000ca4 <SystemInit+0x10c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c14:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <SystemInit+0x10c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c1a:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <SystemInit+0x10c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c20:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <SystemInit+0x10c>)
 8000c22:	4a22      	ldr	r2, [pc, #136]	; (8000cac <SystemInit+0x114>)
 8000c24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <SystemInit+0x10c>)
 8000c28:	4a21      	ldr	r2, [pc, #132]	; (8000cb0 <SystemInit+0x118>)
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <SystemInit+0x10c>)
 8000c2e:	4a21      	ldr	r2, [pc, #132]	; (8000cb4 <SystemInit+0x11c>)
 8000c30:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <SystemInit+0x10c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <SystemInit+0x10c>)
 8000c3a:	4a1e      	ldr	r2, [pc, #120]	; (8000cb4 <SystemInit+0x11c>)
 8000c3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <SystemInit+0x10c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <SystemInit+0x10c>)
 8000c46:	4a1b      	ldr	r2, [pc, #108]	; (8000cb4 <SystemInit+0x11c>)
 8000c48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <SystemInit+0x10c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <SystemInit+0x10c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a13      	ldr	r2, [pc, #76]	; (8000ca4 <SystemInit+0x10c>)
 8000c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <SystemInit+0x10c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <SystemInit+0x120>)
 8000c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c66:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <SystemInit+0x120>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <SystemInit+0x124>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <SystemInit+0x128>)
 8000c74:	4013      	ands	r3, r2
 8000c76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c7a:	d202      	bcs.n	8000c82 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <SystemInit+0x12c>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <SystemInit+0x130>)
 8000c84:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c88:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000c8a:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <SystemInit+0x104>)
 8000c8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c90:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00
 8000ca0:	52002000 	.word	0x52002000
 8000ca4:	58024400 	.word	0x58024400
 8000ca8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cac:	02020200 	.word	0x02020200
 8000cb0:	01ff0000 	.word	0x01ff0000
 8000cb4:	01010280 	.word	0x01010280
 8000cb8:	580000c0 	.word	0x580000c0
 8000cbc:	5c001000 	.word	0x5c001000
 8000cc0:	ffff0000 	.word	0xffff0000
 8000cc4:	51008108 	.word	0x51008108
 8000cc8:	52004000 	.word	0x52004000

08000ccc <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000cd0:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <MX_ETH_Init+0x90>)
 8000cd2:	4a23      	ldr	r2, [pc, #140]	; (8000d60 <MX_ETH_Init+0x94>)
 8000cd4:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000cd6:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <MX_ETH_Init+0x90>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000cde:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <MX_ETH_Init+0x90>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	2280      	movs	r2, #128	; 0x80
 8000ce6:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <MX_ETH_Init+0x90>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	3302      	adds	r3, #2
 8000cee:	22e1      	movs	r2, #225	; 0xe1
 8000cf0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <MX_ETH_Init+0x90>)
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	3303      	adds	r3, #3
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000cfc:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <MX_ETH_Init+0x90>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	3304      	adds	r3, #4
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <MX_ETH_Init+0x90>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	3305      	adds	r3, #5
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <MX_ETH_Init+0x90>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d16:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <MX_ETH_Init+0x90>)
 8000d18:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <MX_ETH_Init+0x98>)
 8000d1a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <MX_ETH_Init+0x90>)
 8000d1e:	4a12      	ldr	r2, [pc, #72]	; (8000d68 <MX_ETH_Init+0x9c>)
 8000d20:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <MX_ETH_Init+0x90>)
 8000d24:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d28:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d2a:	480c      	ldr	r0, [pc, #48]	; (8000d5c <MX_ETH_Init+0x90>)
 8000d2c:	f001 fb8c 	bl	8002448 <HAL_ETH_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000d36:	f000 fc4c 	bl	80015d2 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d3a:	2234      	movs	r2, #52	; 0x34
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	480b      	ldr	r0, [pc, #44]	; (8000d6c <MX_ETH_Init+0xa0>)
 8000d40:	f00f fb08 	bl	8010354 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_ETH_Init+0xa0>)
 8000d46:	2221      	movs	r2, #33	; 0x21
 8000d48:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <MX_ETH_Init+0xa0>)
 8000d4c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d50:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <MX_ETH_Init+0xa0>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	2400a464 	.word	0x2400a464
 8000d60:	40028000 	.word	0x40028000
 8000d64:	2400a324 	.word	0x2400a324
 8000d68:	2400a2c4 	.word	0x2400a2c4
 8000d6c:	2400a4ec 	.word	0x2400a4ec

08000d70 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08e      	sub	sp, #56	; 0x38
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a59      	ldr	r2, [pc, #356]	; (8000ef4 <HAL_ETH_MspInit+0x184>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	f040 80ab 	bne.w	8000eea <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d94:	4b58      	ldr	r3, [pc, #352]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000d96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d9a:	4a57      	ldr	r2, [pc, #348]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000da0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000da4:	4b54      	ldr	r3, [pc, #336]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000da6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000daa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dae:	623b      	str	r3, [r7, #32]
 8000db0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000db2:	4b51      	ldr	r3, [pc, #324]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000db4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000db8:	4a4f      	ldr	r2, [pc, #316]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dbe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dc2:	4b4d      	ldr	r3, [pc, #308]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000dc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dcc:	61fb      	str	r3, [r7, #28]
 8000dce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000dd0:	4b49      	ldr	r3, [pc, #292]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000dd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dd6:	4a48      	ldr	r2, [pc, #288]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ddc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000de0:	4b45      	ldr	r3, [pc, #276]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000de2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dea:	61bb      	str	r3, [r7, #24]
 8000dec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dee:	4b42      	ldr	r3, [pc, #264]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df4:	4a40      	ldr	r2, [pc, #256]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000df6:	f043 0304 	orr.w	r3, r3, #4
 8000dfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dfe:	4b3e      	ldr	r3, [pc, #248]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e04:	f003 0304 	and.w	r3, r3, #4
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b3a      	ldr	r3, [pc, #232]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e12:	4a39      	ldr	r2, [pc, #228]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e1c:	4b36      	ldr	r3, [pc, #216]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	4b33      	ldr	r3, [pc, #204]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e30:	4a31      	ldr	r2, [pc, #196]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e32:	f043 0302 	orr.w	r3, r3, #2
 8000e36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e3a:	4b2f      	ldr	r3, [pc, #188]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e48:	4b2b      	ldr	r3, [pc, #172]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4e:	4a2a      	ldr	r2, [pc, #168]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e58:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <HAL_ETH_MspInit+0x188>)
 8000e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e66:	2332      	movs	r3, #50	; 0x32
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e76:	230b      	movs	r3, #11
 8000e78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7e:	4619      	mov	r1, r3
 8000e80:	481e      	ldr	r0, [pc, #120]	; (8000efc <HAL_ETH_MspInit+0x18c>)
 8000e82:	f001 fef7 	bl	8002c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e86:	2386      	movs	r3, #134	; 0x86
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e96:	230b      	movs	r3, #11
 8000e98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4817      	ldr	r0, [pc, #92]	; (8000f00 <HAL_ETH_MspInit+0x190>)
 8000ea2:	f001 fee7 	bl	8002c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ea6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eb8:	230b      	movs	r3, #11
 8000eba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4810      	ldr	r0, [pc, #64]	; (8000f04 <HAL_ETH_MspInit+0x194>)
 8000ec4:	f001 fed6 	bl	8002c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ec8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eda:	230b      	movs	r3, #11
 8000edc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4808      	ldr	r0, [pc, #32]	; (8000f08 <HAL_ETH_MspInit+0x198>)
 8000ee6:	f001 fec5 	bl	8002c74 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000eea:	bf00      	nop
 8000eec:	3738      	adds	r7, #56	; 0x38
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40028000 	.word	0x40028000
 8000ef8:	58024400 	.word	0x58024400
 8000efc:	58020800 	.word	0x58020800
 8000f00:	58020000 	.word	0x58020000
 8000f04:	58020400 	.word	0x58020400
 8000f08:	58021800 	.word	0x58021800

08000f0c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08e      	sub	sp, #56	; 0x38
 8000f10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f22:	4b53      	ldr	r3, [pc, #332]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f28:	4a51      	ldr	r2, [pc, #324]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f2a:	f043 0304 	orr.w	r3, r3, #4
 8000f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f32:	4b4f      	ldr	r3, [pc, #316]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f38:	f003 0304 	and.w	r3, r3, #4
 8000f3c:	623b      	str	r3, [r7, #32]
 8000f3e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f40:	4b4b      	ldr	r3, [pc, #300]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f46:	4a4a      	ldr	r2, [pc, #296]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f50:	4b47      	ldr	r3, [pc, #284]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f5a:	61fb      	str	r3, [r7, #28]
 8000f5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	4b44      	ldr	r3, [pc, #272]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f64:	4a42      	ldr	r2, [pc, #264]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f6e:	4b40      	ldr	r3, [pc, #256]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	61bb      	str	r3, [r7, #24]
 8000f7a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7c:	4b3c      	ldr	r3, [pc, #240]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f82:	4a3b      	ldr	r2, [pc, #236]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f8c:	4b38      	ldr	r3, [pc, #224]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f9a:	4b35      	ldr	r3, [pc, #212]	; (8001070 <MX_GPIO_Init+0x164>)
 8000f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa0:	4a33      	ldr	r2, [pc, #204]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fa2:	f043 0320 	orr.w	r3, r3, #32
 8000fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000faa:	4b31      	ldr	r3, [pc, #196]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb0:	f003 0320 	and.w	r3, r3, #32
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb8:	4b2d      	ldr	r3, [pc, #180]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fbe:	4a2c      	ldr	r2, [pc, #176]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fc0:	f043 0310 	orr.w	r3, r3, #16
 8000fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc8:	4b29      	ldr	r3, [pc, #164]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fce:	f003 0310 	and.w	r3, r3, #16
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd6:	4b26      	ldr	r3, [pc, #152]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fdc:	4a24      	ldr	r2, [pc, #144]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fde:	f043 0308 	orr.w	r3, r3, #8
 8000fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe6:	4b22      	ldr	r3, [pc, #136]	; (8001070 <MX_GPIO_Init+0x164>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fec:	f003 0308 	and.w	r3, r3, #8
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <MX_GPIO_Init+0x164>)
 8000ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffa:	4a1d      	ldr	r2, [pc, #116]	; (8001070 <MX_GPIO_Init+0x164>)
 8000ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001000:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <MX_GPIO_Init+0x164>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO___LCD_RST_GPIO_Port, GPIO___LCD_RST_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001018:	4816      	ldr	r0, [pc, #88]	; (8001074 <MX_GPIO_Init+0x168>)
 800101a:	f001 ffdb 	bl	8002fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO___LCD_CS_Pin|GPIO___LCD_DC_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001024:	4814      	ldr	r0, [pc, #80]	; (8001078 <MX_GPIO_Init+0x16c>)
 8001026:	f001 ffd5 	bl	8002fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO___LCD_RST_Pin;
 800102a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIO___LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001040:	4619      	mov	r1, r3
 8001042:	480c      	ldr	r0, [pc, #48]	; (8001074 <MX_GPIO_Init+0x168>)
 8001044:	f001 fe16 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = GPIO___LCD_CS_Pin|GPIO___LCD_DC_Pin;
 8001048:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104e:	2301      	movs	r3, #1
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800105a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <MX_GPIO_Init+0x16c>)
 8001062:	f001 fe07 	bl	8002c74 <HAL_GPIO_Init>

}
 8001066:	bf00      	nop
 8001068:	3738      	adds	r7, #56	; 0x38
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	58024400 	.word	0x58024400
 8001074:	58021400 	.word	0x58021400
 8001078:	58021800 	.word	0x58021800

0800107c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001080:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <MX_I2C1_Init+0x74>)
 8001082:	4a1c      	ldr	r2, [pc, #112]	; (80010f4 <MX_I2C1_Init+0x78>)
 8001084:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301242;
 8001086:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <MX_I2C1_Init+0x74>)
 8001088:	4a1b      	ldr	r2, [pc, #108]	; (80010f8 <MX_I2C1_Init+0x7c>)
 800108a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800108c:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <MX_I2C1_Init+0x74>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <MX_I2C1_Init+0x74>)
 8001094:	2201      	movs	r2, #1
 8001096:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <MX_I2C1_Init+0x74>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <MX_I2C1_Init+0x74>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <MX_I2C1_Init+0x74>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <MX_I2C1_Init+0x74>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <MX_I2C1_Init+0x74>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010b6:	480e      	ldr	r0, [pc, #56]	; (80010f0 <MX_I2C1_Init+0x74>)
 80010b8:	f002 f800 	bl	80030bc <HAL_I2C_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010c2:	f000 fa86 	bl	80015d2 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010c6:	2100      	movs	r1, #0
 80010c8:	4809      	ldr	r0, [pc, #36]	; (80010f0 <MX_I2C1_Init+0x74>)
 80010ca:	f002 f8a1 	bl	8003210 <HAL_I2CEx_ConfigAnalogFilter>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010d4:	f000 fa7d 	bl	80015d2 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010d8:	2100      	movs	r1, #0
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_I2C1_Init+0x74>)
 80010dc:	f002 f8e3 	bl	80032a6 <HAL_I2CEx_ConfigDigitalFilter>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010e6:	f000 fa74 	bl	80015d2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	2400a520 	.word	0x2400a520
 80010f4:	40005400 	.word	0x40005400
 80010f8:	00301242 	.word	0x00301242

080010fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b0b8      	sub	sp, #224	; 0xe0
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	22bc      	movs	r2, #188	; 0xbc
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f00f f919 	bl	8010354 <memset>
  if(i2cHandle->Instance==I2C1)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a28      	ldr	r2, [pc, #160]	; (80011c8 <HAL_I2C_MspInit+0xcc>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d149      	bne.n	80011c0 <HAL_I2C_MspInit+0xc4>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800112c:	2308      	movs	r3, #8
 800112e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001130:	2300      	movs	r3, #0
 8001132:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001136:	f107 0310 	add.w	r3, r7, #16
 800113a:	4618      	mov	r0, r3
 800113c:	f003 fa4e 	bl	80045dc <HAL_RCCEx_PeriphCLKConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001146:	f000 fa44 	bl	80015d2 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	4b20      	ldr	r3, [pc, #128]	; (80011cc <HAL_I2C_MspInit+0xd0>)
 800114c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001150:	4a1e      	ldr	r2, [pc, #120]	; (80011cc <HAL_I2C_MspInit+0xd0>)
 8001152:	f043 0302 	orr.w	r3, r3, #2
 8001156:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800115a:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <HAL_I2C_MspInit+0xd0>)
 800115c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL___ChassisMPU_Pin|I2C1_SDA___ChassisMPU_Pin;
 8001168:	23c0      	movs	r3, #192	; 0xc0
 800116a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800116e:	2312      	movs	r3, #18
 8001170:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001180:	2304      	movs	r3, #4
 8001182:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001186:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800118a:	4619      	mov	r1, r3
 800118c:	4810      	ldr	r0, [pc, #64]	; (80011d0 <HAL_I2C_MspInit+0xd4>)
 800118e:	f001 fd71 	bl	8002c74 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <HAL_I2C_MspInit+0xd0>)
 8001194:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001198:	4a0c      	ldr	r2, [pc, #48]	; (80011cc <HAL_I2C_MspInit+0xd0>)
 800119a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800119e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <HAL_I2C_MspInit+0xd0>)
 80011a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 4, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2104      	movs	r1, #4
 80011b4:	201f      	movs	r0, #31
 80011b6:	f001 f896 	bl	80022e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80011ba:	201f      	movs	r0, #31
 80011bc:	f001 f8ad 	bl	800231a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011c0:	bf00      	nop
 80011c2:	37e0      	adds	r7, #224	; 0xe0
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40005400 	.word	0x40005400
 80011cc:	58024400 	.word	0x58024400
 80011d0:	58020400 	.word	0x58020400

080011d4 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af02      	add	r7, sp, #8
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e8:	d101      	bne.n	80011ee <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <rpmsg_send+0x3c>)
 80011ec:	e00c      	b.n	8001208 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011f6:	2301      	movs	r3, #1
 80011f8:	9301      	str	r3, [sp, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f009 fe7b 	bl	800aefc <rpmsg_send_offchannel_raw>
 8001206:	4603      	mov	r3, r0
					 len, true);
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	fffff829 	.word	0xfffff829

08001214 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
 8001220:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2220      	movs	r2, #32
 8001226:	68b9      	ldr	r1, [r7, #8]
 8001228:	4618      	mov	r0, r3
 800122a:	f010 f9f1 	bl	8011610 <strncpy>
	ept->addr = src;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af02      	add	r7, sp, #8
/* USER CODE BEGIN Boot_Mode_Sequence_0 */

/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	MPU_Config();
 8001256:	f000 f995 	bl	8001584 <MPU_Config>
	CPU_CACHE_Enable();
 800125a:	f000 f925 	bl	80014a8 <CPU_CACHE_Enable>
//	timeout = 0xFFFF;
	while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 800125e:	e000      	b.n	8001262 <main+0x12>
	{
		asm("nop");
 8001260:	bf00      	nop
	while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 8001262:	4b48      	ldr	r3, [pc, #288]	; (8001384 <main+0x134>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f8      	bne.n	8001260 <main+0x10>
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126e:	f000 fe89 	bl	8001f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001272:	f000 f893 	bl	800139c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8001276:	4b43      	ldr	r3, [pc, #268]	; (8001384 <main+0x134>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127c:	4a41      	ldr	r2, [pc, #260]	; (8001384 <main+0x134>)
 800127e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001282:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001286:	4b3f      	ldr	r3, [pc, #252]	; (8001384 <main+0x134>)
 8001288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8001294:	2000      	movs	r0, #0
 8001296:	f001 feb7 	bl	8003008 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 800129a:	2100      	movs	r1, #0
 800129c:	2000      	movs	r0, #0
 800129e:	f001 fecd 	bl	800303c <HAL_HSEM_Release>


/* USER CODE END Boot_Mode_Sequence_2 */

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_D2SRAM1_CLK_ENABLE();
 80012a2:	4b38      	ldr	r3, [pc, #224]	; (8001384 <main+0x134>)
 80012a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80012a8:	4a36      	ldr	r2, [pc, #216]	; (8001384 <main+0x134>)
 80012aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012ae:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80012b2:	4b34      	ldr	r3, [pc, #208]	; (8001384 <main+0x134>)
 80012b4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80012b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012bc:	603b      	str	r3, [r7, #0]
 80012be:	683b      	ldr	r3, [r7, #0]
//  __HAL_RCC_AHBSRAM1_CLK_ENABLE();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c0:	f7ff fe24 	bl	8000f0c <MX_GPIO_Init>
  MX_ETH_Init();
 80012c4:	f7ff fd02 	bl	8000ccc <MX_ETH_Init>
  MX_USART3_UART_Init();
 80012c8:	f000 fca6 	bl	8001c18 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80012cc:	f000 fd56 	bl	8001d7c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80012d0:	f7ff fed4 	bl	800107c <MX_I2C1_Init>
  MX_SPI3_Init();
 80012d4:	f000 f982 	bl	80015dc <MX_SPI3_Init>
  MX_TIM1_Init();
 80012d8:	f000 fba2 	bl	8001a20 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	MAILBOX_Init();
 80012dc:	f00b ff78 	bl	800d1d0 <MAILBOX_Init>

	/* Initialize the rpmsg endpoint to set default addresses to RPMSG_ADDR_ANY */
	rpmsg_init_ept(&rp_endpoint, RPMSG_CHAN_NAME, RPMSG_ADDR_ANY, RPMSG_ADDR_ANY,
 80012e0:	2300      	movs	r3, #0
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	2300      	movs	r3, #0
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ec:	f04f 32ff 	mov.w	r2, #4294967295
 80012f0:	4925      	ldr	r1, [pc, #148]	; (8001388 <main+0x138>)
 80012f2:	4826      	ldr	r0, [pc, #152]	; (800138c <main+0x13c>)
 80012f4:	f7ff ff8e 	bl	8001214 <rpmsg_init_ept>
			NULL, NULL);
	/* Initialize OpenAmp and libmetal libraries */
	if (MX_OPENAMP_Init(RPMSG_MASTER, new_service_cb)!= HAL_OK)
 80012f8:	4925      	ldr	r1, [pc, #148]	; (8001390 <main+0x140>)
 80012fa:	2000      	movs	r0, #0
 80012fc:	f00c f88a 	bl	800d414 <MX_OPENAMP_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <main+0xba>
	{
		Error_Handler();
 8001306:	f000 f964 	bl	80015d2 <Error_Handler>
	/*
	 * The rpmsg service is initiate by the remote processor, on A7 new_service_cb
	 * callback is received on service creation. Wait for the callback
	 */
//	HAL_Delay(2000);
	OPENAMP_Wait_EndPointready(&rp_endpoint);
 800130a:	4820      	ldr	r0, [pc, #128]	; (800138c <main+0x13c>)
 800130c:	f00c f942 	bl	800d594 <OPENAMP_Wait_EndPointready>

	/* Send the massage to the remote CPU */
	int32_t status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 8001310:	2204      	movs	r2, #4
 8001312:	4920      	ldr	r1, [pc, #128]	; (8001394 <main+0x144>)
 8001314:	481d      	ldr	r0, [pc, #116]	; (800138c <main+0x13c>)
 8001316:	f7ff ff5d 	bl	80011d4 <rpmsg_send>
 800131a:	60f8      	str	r0, [r7, #12]

	if (status < 0)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	da01      	bge.n	8001326 <main+0xd6>
	{
		Error_Handler();
 8001322:	f000 f956 	bl	80015d2 <Error_Handler>

	//	ssd1306_TestAll();
//	ssd1306_Init();
//	ssd1306_TestBorder();

	uint8_t message = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	72fb      	strb	r3, [r7, #11]
	while (message < 100)
 800132a:	e011      	b.n	8001350 <main+0x100>
	{
		/* Receive the massage from the remote CPU */
		message = receive_message();
 800132c:	f7ff fbd2 	bl	8000ad4 <receive_message>
 8001330:	4603      	mov	r3, r0
 8001332:	b2db      	uxtb	r3, r3
 8001334:	72fb      	strb	r3, [r7, #11]
//		char localT[32] = "";
//		snprintf(localT,sizeof(localT),"%d",message);
//		ssd1306_SetCursor(0, 0);
//		ssd1306_WriteString(localT, Font_7x10, White);
		status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 8001336:	f107 030b 	add.w	r3, r7, #11
 800133a:	2201      	movs	r2, #1
 800133c:	4619      	mov	r1, r3
 800133e:	4813      	ldr	r0, [pc, #76]	; (800138c <main+0x13c>)
 8001340:	f7ff ff48 	bl	80011d4 <rpmsg_send>
 8001344:	60f8      	str	r0, [r7, #12]
		if (status < 0)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2b00      	cmp	r3, #0
 800134a:	da01      	bge.n	8001350 <main+0x100>
		{
			Error_Handler();
 800134c:	f000 f941 	bl	80015d2 <Error_Handler>
	while (message < 100)
 8001350:	7afb      	ldrb	r3, [r7, #11]
 8001352:	2b63      	cmp	r3, #99	; 0x63
 8001354:	d9ea      	bls.n	800132c <main+0xdc>
		}
	}

	//	isPortrait = true;
	screenInit();
 8001356:	f00a ffe5 	bl	800c324 <screenInit>
	screenClear();
 800135a:	f00b f8bf 	bl	800c4dc <screenClear>
	renderCompleteFrame = true;
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <main+0x148>)
 8001360:	2201      	movs	r2, #1
 8001362:	701a      	strb	r2, [r3, #0]

	initLidar();
 8001364:	f00a ffd2 	bl	800c30c <initLidar>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		message = receive_message();
 8001368:	f7ff fbb4 	bl	8000ad4 <receive_message>
 800136c:	4603      	mov	r3, r0
 800136e:	b2db      	uxtb	r3, r3
 8001370:	72fb      	strb	r3, [r7, #11]
		screenUpdate(true);
 8001372:	2001      	movs	r0, #1
 8001374:	f00b fad2 	bl	800c91c <screenUpdate>
		displayNextFrame();
 8001378:	f00c f9b0 	bl	800d6dc <displayNextFrame>
		message = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	72fb      	strb	r3, [r7, #11]
		message = receive_message();
 8001380:	e7f2      	b.n	8001368 <main+0x118>
 8001382:	bf00      	nop
 8001384:	58024400 	.word	0x58024400
 8001388:	08014f10 	.word	0x08014f10
 800138c:	2400a578 	.word	0x2400a578
 8001390:	08000b29 	.word	0x08000b29
 8001394:	2400a3a4 	.word	0x2400a3a4
 8001398:	2400a3b3 	.word	0x2400a3b3

0800139c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b09c      	sub	sp, #112	; 0x70
 80013a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a6:	224c      	movs	r2, #76	; 0x4c
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f00e ffd2 	bl	8010354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	2220      	movs	r2, #32
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f00e ffcc 	bl	8010354 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80013bc:	2004      	movs	r0, #4
 80013be:	f002 f907 	bl	80035d0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013c2:	2300      	movs	r3, #0
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	4b35      	ldr	r3, [pc, #212]	; (800149c <SystemClock_Config+0x100>)
 80013c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ca:	4a34      	ldr	r2, [pc, #208]	; (800149c <SystemClock_Config+0x100>)
 80013cc:	f023 0301 	bic.w	r3, r3, #1
 80013d0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80013d2:	4b32      	ldr	r3, [pc, #200]	; (800149c <SystemClock_Config+0x100>)
 80013d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	4b30      	ldr	r3, [pc, #192]	; (80014a0 <SystemClock_Config+0x104>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013e4:	4a2e      	ldr	r2, [pc, #184]	; (80014a0 <SystemClock_Config+0x104>)
 80013e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ea:	6193      	str	r3, [r2, #24]
 80013ec:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <SystemClock_Config+0x104>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013f8:	bf00      	nop
 80013fa:	4b29      	ldr	r3, [pc, #164]	; (80014a0 <SystemClock_Config+0x104>)
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001406:	d1f8      	bne.n	80013fa <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001408:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <SystemClock_Config+0x108>)
 800140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140c:	f023 0303 	bic.w	r3, r3, #3
 8001410:	4a24      	ldr	r2, [pc, #144]	; (80014a4 <SystemClock_Config+0x108>)
 8001412:	f043 0302 	orr.w	r3, r3, #2
 8001416:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001418:	2301      	movs	r3, #1
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800141c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001420:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001422:	2302      	movs	r3, #2
 8001424:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001426:	2302      	movs	r3, #2
 8001428:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800142a:	2301      	movs	r3, #1
 800142c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 800142e:	2312      	movs	r3, #18
 8001430:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001432:	2302      	movs	r3, #2
 8001434:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001436:	2302      	movs	r3, #2
 8001438:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800143a:	2302      	movs	r3, #2
 800143c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800143e:	230c      	movs	r3, #12
 8001440:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001442:	2302      	movs	r3, #2
 8001444:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8001446:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800144a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001450:	4618      	mov	r0, r3
 8001452:	f002 f927 	bl	80036a4 <HAL_RCC_OscConfig>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800145c:	f000 f8b9 	bl	80015d2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001460:	233f      	movs	r3, #63	; 0x3f
 8001462:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001464:	2303      	movs	r3, #3
 8001466:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001474:	2340      	movs	r3, #64	; 0x40
 8001476:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	2101      	movs	r1, #1
 8001484:	4618      	mov	r0, r3
 8001486:	f002 fd1d 	bl	8003ec4 <HAL_RCC_ClockConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001490:	f000 f89f 	bl	80015d2 <Error_Handler>
  }
}
 8001494:	bf00      	nop
 8001496:	3770      	adds	r7, #112	; 0x70
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	58000400 	.word	0x58000400
 80014a0:	58024800 	.word	0x58024800
 80014a4:	58024400 	.word	0x58024400

080014a8 <CPU_CACHE_Enable>:
 * @brief  CPU L1-Cache enable.
 * @param  None
 * @retval None
 */
static void CPU_CACHE_Enable(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80014ae:	4b34      	ldr	r3, [pc, #208]	; (8001580 <CPU_CACHE_Enable+0xd8>)
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d11b      	bne.n	80014f2 <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014ba:	f3bf 8f4f 	dsb	sy
}
 80014be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014c0:	f3bf 8f6f 	isb	sy
}
 80014c4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80014c6:	4b2e      	ldr	r3, [pc, #184]	; (8001580 <CPU_CACHE_Enable+0xd8>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80014ce:	f3bf 8f4f 	dsb	sy
}
 80014d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014d4:	f3bf 8f6f 	isb	sy
}
 80014d8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80014da:	4b29      	ldr	r3, [pc, #164]	; (8001580 <CPU_CACHE_Enable+0xd8>)
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	4a28      	ldr	r2, [pc, #160]	; (8001580 <CPU_CACHE_Enable+0xd8>)
 80014e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80014e6:	f3bf 8f4f 	dsb	sy
}
 80014ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014ec:	f3bf 8f6f 	isb	sy
}
 80014f0:	e000      	b.n	80014f4 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80014f2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80014f4:	4b22      	ldr	r3, [pc, #136]	; (8001580 <CPU_CACHE_Enable+0xd8>)
 80014f6:	695b      	ldr	r3, [r3, #20]
 80014f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d138      	bne.n	8001572 <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001500:	4b1f      	ldr	r3, [pc, #124]	; (8001580 <CPU_CACHE_Enable+0xd8>)
 8001502:	2200      	movs	r2, #0
 8001504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001508:	f3bf 8f4f 	dsb	sy
}
 800150c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800150e:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <CPU_CACHE_Enable+0xd8>)
 8001510:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001514:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	0b5b      	lsrs	r3, r3, #13
 800151a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800151e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	08db      	lsrs	r3, r3, #3
 8001524:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001528:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	015a      	lsls	r2, r3, #5
 800152e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001532:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001538:	4911      	ldr	r1, [pc, #68]	; (8001580 <CPU_CACHE_Enable+0xd8>)
 800153a:	4313      	orrs	r3, r2
 800153c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	1e5a      	subs	r2, r3, #1
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1ef      	bne.n	800152a <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	1e5a      	subs	r2, r3, #1
 800154e:	60ba      	str	r2, [r7, #8]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1e5      	bne.n	8001520 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8001554:	f3bf 8f4f 	dsb	sy
}
 8001558:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <CPU_CACHE_Enable+0xd8>)
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	4a08      	ldr	r2, [pc, #32]	; (8001580 <CPU_CACHE_Enable+0xd8>)
 8001560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001564:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001566:	f3bf 8f4f 	dsb	sy
}
 800156a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800156c:	f3bf 8f6f 	isb	sy
}
 8001570:	e000      	b.n	8001574 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001572:	bf00      	nop
	/* Enable I-Cache */
	SCB_EnableICache();

	/* Enable D-Cache */
	SCB_EnableDCache();
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <MPU_Config>:
 *         The Region Size is 64KB.
 * @param  None
 * @retval None
 */
static void MPU_Config(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct;

	/* Disable the MPU */
	HAL_MPU_Disable();
 800158a:	f000 fee1 	bl	8002350 <HAL_MPU_Disable>

	/* Configure the MPU attributes as WT for SDRAM */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800158e:	2301      	movs	r3, #1
 8001590:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = D3_SRAM_BASE;
 8001592:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001596:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8001598:	230f      	movs	r3, #15
 800159a:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800159c:	2303      	movs	r3, #3
 800159e:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80015a8:	2301      	movs	r3, #1
 80015aa:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 80015b4:	2300      	movs	r3, #0
 80015b6:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	733b      	strb	r3, [r7, #12]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80015bc:	463b      	mov	r3, r7
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 fefe 	bl	80023c0 <HAL_MPU_ConfigRegion>

	/* Enable the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80015c4:	2004      	movs	r0, #4
 80015c6:	f000 fedb 	bl	8002380 <HAL_MPU_Enable>
}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80015d6:	b672      	cpsid	i
}
 80015d8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80015da:	e7fe      	b.n	80015da <Error_Handler+0x8>

080015dc <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80015e0:	4b28      	ldr	r3, [pc, #160]	; (8001684 <MX_SPI3_Init+0xa8>)
 80015e2:	4a29      	ldr	r2, [pc, #164]	; (8001688 <MX_SPI3_Init+0xac>)
 80015e4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80015e6:	4b27      	ldr	r3, [pc, #156]	; (8001684 <MX_SPI3_Init+0xa8>)
 80015e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80015ec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 80015ee:	4b25      	ldr	r3, [pc, #148]	; (8001684 <MX_SPI3_Init+0xa8>)
 80015f0:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80015f4:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80015f6:	4b23      	ldr	r3, [pc, #140]	; (8001684 <MX_SPI3_Init+0xa8>)
 80015f8:	2207      	movs	r2, #7
 80015fa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015fc:	4b21      	ldr	r3, [pc, #132]	; (8001684 <MX_SPI3_Init+0xa8>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001602:	4b20      	ldr	r3, [pc, #128]	; (8001684 <MX_SPI3_Init+0xa8>)
 8001604:	2200      	movs	r2, #0
 8001606:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001608:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <MX_SPI3_Init+0xa8>)
 800160a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800160e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001610:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <MX_SPI3_Init+0xa8>)
 8001612:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001616:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001618:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <MX_SPI3_Init+0xa8>)
 800161a:	2200      	movs	r2, #0
 800161c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800161e:	4b19      	ldr	r3, [pc, #100]	; (8001684 <MX_SPI3_Init+0xa8>)
 8001620:	2200      	movs	r2, #0
 8001622:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001624:	4b17      	ldr	r3, [pc, #92]	; (8001684 <MX_SPI3_Init+0xa8>)
 8001626:	2200      	movs	r2, #0
 8001628:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800162a:	4b16      	ldr	r3, [pc, #88]	; (8001684 <MX_SPI3_Init+0xa8>)
 800162c:	2200      	movs	r2, #0
 800162e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001630:	4b14      	ldr	r3, [pc, #80]	; (8001684 <MX_SPI3_Init+0xa8>)
 8001632:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001636:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <MX_SPI3_Init+0xa8>)
 800163a:	2200      	movs	r2, #0
 800163c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <MX_SPI3_Init+0xa8>)
 8001640:	2200      	movs	r2, #0
 8001642:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001644:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <MX_SPI3_Init+0xa8>)
 8001646:	2200      	movs	r2, #0
 8001648:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800164a:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <MX_SPI3_Init+0xa8>)
 800164c:	2200      	movs	r2, #0
 800164e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <MX_SPI3_Init+0xa8>)
 8001652:	2200      	movs	r2, #0
 8001654:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <MX_SPI3_Init+0xa8>)
 8001658:	2200      	movs	r2, #0
 800165a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <MX_SPI3_Init+0xa8>)
 800165e:	2200      	movs	r2, #0
 8001660:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <MX_SPI3_Init+0xa8>)
 8001664:	2200      	movs	r2, #0
 8001666:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <MX_SPI3_Init+0xa8>)
 800166a:	2200      	movs	r2, #0
 800166c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <MX_SPI3_Init+0xa8>)
 8001670:	f004 fb16 	bl	8005ca0 <HAL_SPI_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 800167a:	f7ff ffaa 	bl	80015d2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2400a5cc 	.word	0x2400a5cc
 8001688:	40003c00 	.word	0x40003c00

0800168c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b0ba      	sub	sp, #232	; 0xe8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016a4:	f107 0318 	add.w	r3, r7, #24
 80016a8:	22bc      	movs	r2, #188	; 0xbc
 80016aa:	2100      	movs	r1, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f00e fe51 	bl	8010354 <memset>
  if(spiHandle->Instance==SPI3)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a37      	ldr	r2, [pc, #220]	; (8001794 <HAL_SPI_MspInit+0x108>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d166      	bne.n	800178a <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80016bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016c6:	f107 0318 	add.w	r3, r7, #24
 80016ca:	4618      	mov	r0, r3
 80016cc:	f002 ff86 	bl	80045dc <HAL_RCCEx_PeriphCLKConfig>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80016d6:	f7ff ff7c 	bl	80015d2 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016da:	4b2f      	ldr	r3, [pc, #188]	; (8001798 <HAL_SPI_MspInit+0x10c>)
 80016dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016e0:	4a2d      	ldr	r2, [pc, #180]	; (8001798 <HAL_SPI_MspInit+0x10c>)
 80016e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016ea:	4b2b      	ldr	r3, [pc, #172]	; (8001798 <HAL_SPI_MspInit+0x10c>)
 80016ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f8:	4b27      	ldr	r3, [pc, #156]	; (8001798 <HAL_SPI_MspInit+0x10c>)
 80016fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016fe:	4a26      	ldr	r2, [pc, #152]	; (8001798 <HAL_SPI_MspInit+0x10c>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001708:	4b23      	ldr	r3, [pc, #140]	; (8001798 <HAL_SPI_MspInit+0x10c>)
 800170a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001716:	4b20      	ldr	r3, [pc, #128]	; (8001798 <HAL_SPI_MspInit+0x10c>)
 8001718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800171c:	4a1e      	ldr	r2, [pc, #120]	; (8001798 <HAL_SPI_MspInit+0x10c>)
 800171e:	f043 0304 	orr.w	r3, r3, #4
 8001722:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001726:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <HAL_SPI_MspInit+0x10c>)
 8001728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = SPI3_MOSI___LCD_Pin;
 8001734:	2304      	movs	r3, #4
 8001736:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	2302      	movs	r3, #2
 800173c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	2300      	movs	r3, #0
 8001748:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800174c:	2307      	movs	r3, #7
 800174e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(SPI3_MOSI___LCD_GPIO_Port, &GPIO_InitStruct);
 8001752:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001756:	4619      	mov	r1, r3
 8001758:	4810      	ldr	r0, [pc, #64]	; (800179c <HAL_SPI_MspInit+0x110>)
 800175a:	f001 fa8b 	bl	8002c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI3_SCK___LCD_Pin;
 800175e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001762:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001766:	2302      	movs	r3, #2
 8001768:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001778:	2306      	movs	r3, #6
 800177a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(SPI3_SCK___LCD_GPIO_Port, &GPIO_InitStruct);
 800177e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001782:	4619      	mov	r1, r3
 8001784:	4806      	ldr	r0, [pc, #24]	; (80017a0 <HAL_SPI_MspInit+0x114>)
 8001786:	f001 fa75 	bl	8002c74 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800178a:	bf00      	nop
 800178c:	37e8      	adds	r7, #232	; 0xe8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40003c00 	.word	0x40003c00
 8001798:	58024400 	.word	0x58024400
 800179c:	58020400 	.word	0x58020400
 80017a0:	58020800 	.word	0x58020800

080017a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <HAL_MspInit+0x5c>)
 80017ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017b0:	4a13      	ldr	r2, [pc, #76]	; (8001800 <HAL_MspInit+0x5c>)
 80017b2:	f043 0302 	orr.w	r3, r3, #2
 80017b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <HAL_MspInit+0x5c>)
 80017bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* CM4_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM4_SEV_IRQn, 4, 0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2104      	movs	r1, #4
 80017cc:	2041      	movs	r0, #65	; 0x41
 80017ce:	f000 fd8a 	bl	80022e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM4_SEV_IRQn);
 80017d2:	2041      	movs	r0, #65	; 0x41
 80017d4:	f000 fda1 	bl	800231a <HAL_NVIC_EnableIRQ>
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 4, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	2104      	movs	r1, #4
 80017dc:	207d      	movs	r0, #125	; 0x7d
 80017de:	f000 fd82 	bl	80022e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 80017e2:	207d      	movs	r0, #125	; 0x7d
 80017e4:	f000 fd99 	bl	800231a <HAL_NVIC_EnableIRQ>
  /* HOLD_CORE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HOLD_CORE_IRQn, 4, 0);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2104      	movs	r1, #4
 80017ec:	2094      	movs	r0, #148	; 0x94
 80017ee:	f000 fd7a 	bl	80022e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HOLD_CORE_IRQn);
 80017f2:	2094      	movs	r0, #148	; 0x94
 80017f4:	f000 fd91 	bl	800231a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	58024400 	.word	0x58024400

08001804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001808:	e7fe      	b.n	8001808 <NMI_Handler+0x4>

0800180a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800180e:	e7fe      	b.n	800180e <HardFault_Handler+0x4>

08001810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <MemManage_Handler+0x4>

08001816 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <BusFault_Handler+0x4>

0800181c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <UsageFault_Handler+0x4>

08001822 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001850:	f000 fc0a 	bl	8002068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}

08001858 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800185c:	4802      	ldr	r0, [pc, #8]	; (8001868 <I2C1_EV_IRQHandler+0x10>)
 800185e:	f001 fcbd 	bl	80031dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	2400a520 	.word	0x2400a520

0800186c <CM4_SEV_IRQHandler>:

/**
  * @brief This function handles CM4 send event interrupt for CM7.
  */
void CM4_SEV_IRQHandler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END CM4_SEV_IRQn 0 */
  /* USER CODE BEGIN CM4_SEV_IRQn 1 */

  /* USER CODE END CM4_SEV_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800187e:	f001 fc03 	bl	8003088 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}

08001886 <HOLD_CORE_IRQHandler>:

/**
  * @brief This function handles Hold core interrupt.
  */
void HOLD_CORE_IRQHandler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END HOLD_CORE_IRQn 0 */
  /* USER CODE BEGIN HOLD_CORE_IRQn 1 */

  /* USER CODE END HOLD_CORE_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
	return 1;
 8001898:	2301      	movs	r3, #1
}
 800189a:	4618      	mov	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <_kill>:

int _kill(int pid, int sig)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018ae:	f00e fcdd 	bl	801026c <__errno>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2216      	movs	r2, #22
 80018b6:	601a      	str	r2, [r3, #0]
	return -1;
 80018b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <_exit>:

void _exit (int status)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018cc:	f04f 31ff 	mov.w	r1, #4294967295
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ffe7 	bl	80018a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018d6:	e7fe      	b.n	80018d6 <_exit+0x12>

080018d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	e00a      	b.n	8001900 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018ea:	f3af 8000 	nop.w
 80018ee:	4601      	mov	r1, r0
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	60ba      	str	r2, [r7, #8]
 80018f6:	b2ca      	uxtb	r2, r1
 80018f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	3301      	adds	r3, #1
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	429a      	cmp	r2, r3
 8001906:	dbf0      	blt.n	80018ea <_read+0x12>
	}

return len;
 8001908:	687b      	ldr	r3, [r7, #4]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	e009      	b.n	8001938 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	60ba      	str	r2, [r7, #8]
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	3301      	adds	r3, #1
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	429a      	cmp	r2, r3
 800193e:	dbf1      	blt.n	8001924 <_write+0x12>
	}
	return len;
 8001940:	687b      	ldr	r3, [r7, #4]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <_close>:

int _close(int file)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
	return -1;
 8001952:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001972:	605a      	str	r2, [r3, #4]
	return 0;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <_isatty>:

int _isatty(int file)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
	return 1;
 800198a:	2301      	movs	r3, #1
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
	return 0;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019bc:	4a14      	ldr	r2, [pc, #80]	; (8001a10 <_sbrk+0x5c>)
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <_sbrk+0x60>)
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c8:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <_sbrk+0x64>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d102      	bne.n	80019d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d0:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <_sbrk+0x64>)
 80019d2:	4a12      	ldr	r2, [pc, #72]	; (8001a1c <_sbrk+0x68>)
 80019d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <_sbrk+0x64>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d207      	bcs.n	80019f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e4:	f00e fc42 	bl	801026c <__errno>
 80019e8:	4603      	mov	r3, r0
 80019ea:	220c      	movs	r2, #12
 80019ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ee:	f04f 33ff 	mov.w	r3, #4294967295
 80019f2:	e009      	b.n	8001a08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f4:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <_sbrk+0x64>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019fa:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <_sbrk+0x64>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	4a05      	ldr	r2, [pc, #20]	; (8001a18 <_sbrk+0x64>)
 8001a04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a06:	68fb      	ldr	r3, [r7, #12]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	24040000 	.word	0x24040000
 8001a14:	00000400 	.word	0x00000400
 8001a18:	2400a3a8 	.word	0x2400a3a8
 8001a1c:	2400f6b0 	.word	0x2400f6b0

08001a20 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b096      	sub	sp, #88	; 0x58
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
 8001a40:	611a      	str	r2, [r3, #16]
 8001a42:	615a      	str	r2, [r3, #20]
 8001a44:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a46:	1d3b      	adds	r3, r7, #4
 8001a48:	222c      	movs	r2, #44	; 0x2c
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f00e fc81 	bl	8010354 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a52:	4b40      	ldr	r3, [pc, #256]	; (8001b54 <MX_TIM1_Init+0x134>)
 8001a54:	4a40      	ldr	r2, [pc, #256]	; (8001b58 <MX_TIM1_Init+0x138>)
 8001a56:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75;
 8001a58:	4b3e      	ldr	r3, [pc, #248]	; (8001b54 <MX_TIM1_Init+0x134>)
 8001a5a:	224b      	movs	r2, #75	; 0x4b
 8001a5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5e:	4b3d      	ldr	r3, [pc, #244]	; (8001b54 <MX_TIM1_Init+0x134>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001a64:	4b3b      	ldr	r3, [pc, #236]	; (8001b54 <MX_TIM1_Init+0x134>)
 8001a66:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a6c:	4b39      	ldr	r3, [pc, #228]	; (8001b54 <MX_TIM1_Init+0x134>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a72:	4b38      	ldr	r3, [pc, #224]	; (8001b54 <MX_TIM1_Init+0x134>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a78:	4b36      	ldr	r3, [pc, #216]	; (8001b54 <MX_TIM1_Init+0x134>)
 8001a7a:	2280      	movs	r2, #128	; 0x80
 8001a7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a7e:	4835      	ldr	r0, [pc, #212]	; (8001b54 <MX_TIM1_Init+0x134>)
 8001a80:	f004 fceb 	bl	800645a <HAL_TIM_PWM_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001a8a:	f7ff fda2 	bl	80015d2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a92:	2300      	movs	r3, #0
 8001a94:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a9a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	482c      	ldr	r0, [pc, #176]	; (8001b54 <MX_TIM1_Init+0x134>)
 8001aa2:	f005 fad7 	bl	8007054 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001aac:	f7ff fd91 	bl	80015d2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ab0:	2360      	movs	r3, #96	; 0x60
 8001ab2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 8001ab4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aba:	2300      	movs	r3, #0
 8001abc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001aca:	2300      	movs	r3, #0
 8001acc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ace:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	481f      	ldr	r0, [pc, #124]	; (8001b54 <MX_TIM1_Init+0x134>)
 8001ad8:	f004 fe1e 	bl	8006718 <HAL_TIM_PWM_ConfigChannel>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001ae2:	f7ff fd76 	bl	80015d2 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001aea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001aee:	2204      	movs	r2, #4
 8001af0:	4619      	mov	r1, r3
 8001af2:	4818      	ldr	r0, [pc, #96]	; (8001b54 <MX_TIM1_Init+0x134>)
 8001af4:	f004 fe10 	bl	8006718 <HAL_TIM_PWM_ConfigChannel>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 8001afe:	f7ff fd68 	bl	80015d2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b1a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	4619      	mov	r1, r3
 8001b36:	4807      	ldr	r0, [pc, #28]	; (8001b54 <MX_TIM1_Init+0x134>)
 8001b38:	f005 fb14 	bl	8007164 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001b42:	f7ff fd46 	bl	80015d2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b46:	4803      	ldr	r0, [pc, #12]	; (8001b54 <MX_TIM1_Init+0x134>)
 8001b48:	f000 f82a 	bl	8001ba0 <HAL_TIM_MspPostInit>

}
 8001b4c:	bf00      	nop
 8001b4e:	3758      	adds	r7, #88	; 0x58
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	2400a654 	.word	0x2400a654
 8001b58:	40010000 	.word	0x40010000

08001b5c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0b      	ldr	r2, [pc, #44]	; (8001b98 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d10e      	bne.n	8001b8c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_TIM_PWM_MspInit+0x40>)
 8001b70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b74:	4a09      	ldr	r2, [pc, #36]	; (8001b9c <HAL_TIM_PWM_MspInit+0x40>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b7e:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <HAL_TIM_PWM_MspInit+0x40>)
 8001b80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	40010000 	.word	0x40010000
 8001b9c:	58024400 	.word	0x58024400

08001ba0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 030c 	add.w	r3, r7, #12
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a13      	ldr	r2, [pc, #76]	; (8001c0c <HAL_TIM_MspPostInit+0x6c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d11f      	bne.n	8001c02 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bc2:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <HAL_TIM_MspPostInit+0x70>)
 8001bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc8:	4a11      	ldr	r2, [pc, #68]	; (8001c10 <HAL_TIM_MspPostInit+0x70>)
 8001bca:	f043 0310 	orr.w	r3, r3, #16
 8001bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bd2:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <HAL_TIM_MspPostInit+0x70>)
 8001bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM1_CH1___LCD_Brightness_Pin|TIM1_CH2___LIDAR_motor_ctrl_Pin;
 8001be0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001be4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bf6:	f107 030c 	add.w	r3, r7, #12
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4805      	ldr	r0, [pc, #20]	; (8001c14 <HAL_TIM_MspPostInit+0x74>)
 8001bfe:	f001 f839 	bl	8002c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c02:	bf00      	nop
 8001c04:	3720      	adds	r7, #32
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40010000 	.word	0x40010000
 8001c10:	58024400 	.word	0x58024400
 8001c14:	58021000 	.word	0x58021000

08001c18 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c1c:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <MX_USART3_UART_Init+0x90>)
 8001c1e:	4a23      	ldr	r2, [pc, #140]	; (8001cac <MX_USART3_UART_Init+0x94>)
 8001c20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c22:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <MX_USART3_UART_Init+0x90>)
 8001c24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <MX_USART3_UART_Init+0x90>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c30:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <MX_USART3_UART_Init+0x90>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c36:	4b1c      	ldr	r3, [pc, #112]	; (8001ca8 <MX_USART3_UART_Init+0x90>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <MX_USART3_UART_Init+0x90>)
 8001c3e:	220c      	movs	r2, #12
 8001c40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c42:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <MX_USART3_UART_Init+0x90>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c48:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <MX_USART3_UART_Init+0x90>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c4e:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <MX_USART3_UART_Init+0x90>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c54:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <MX_USART3_UART_Init+0x90>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c5a:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <MX_USART3_UART_Init+0x90>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c60:	4811      	ldr	r0, [pc, #68]	; (8001ca8 <MX_USART3_UART_Init+0x90>)
 8001c62:	f005 fafd 	bl	8007260 <HAL_UART_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001c6c:	f7ff fcb1 	bl	80015d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c70:	2100      	movs	r1, #0
 8001c72:	480d      	ldr	r0, [pc, #52]	; (8001ca8 <MX_USART3_UART_Init+0x90>)
 8001c74:	f006 fa4a 	bl	800810c <HAL_UARTEx_SetTxFifoThreshold>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001c7e:	f7ff fca8 	bl	80015d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c82:	2100      	movs	r1, #0
 8001c84:	4808      	ldr	r0, [pc, #32]	; (8001ca8 <MX_USART3_UART_Init+0x90>)
 8001c86:	f006 fa7f 	bl	8008188 <HAL_UARTEx_SetRxFifoThreshold>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001c90:	f7ff fc9f 	bl	80015d2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001c94:	4804      	ldr	r0, [pc, #16]	; (8001ca8 <MX_USART3_UART_Init+0x90>)
 8001c96:	f006 fa00 	bl	800809a <HAL_UARTEx_DisableFifoMode>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001ca0:	f7ff fc97 	bl	80015d2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	2400a6a0 	.word	0x2400a6a0
 8001cac:	40004800 	.word	0x40004800

08001cb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b0b8      	sub	sp, #224	; 0xe0
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cc8:	f107 0310 	add.w	r3, r7, #16
 8001ccc:	22bc      	movs	r2, #188	; 0xbc
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f00e fb3f 	bl	8010354 <memset>
  if(uartHandle->Instance==USART3)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a25      	ldr	r2, [pc, #148]	; (8001d70 <HAL_UART_MspInit+0xc0>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d142      	bne.n	8001d66 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cea:	f107 0310 	add.w	r3, r7, #16
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f002 fc74 	bl	80045dc <HAL_RCCEx_PeriphCLKConfig>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001cfa:	f7ff fc6a 	bl	80015d2 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <HAL_UART_MspInit+0xc4>)
 8001d00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d04:	4a1b      	ldr	r2, [pc, #108]	; (8001d74 <HAL_UART_MspInit+0xc4>)
 8001d06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d0a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d0e:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <HAL_UART_MspInit+0xc4>)
 8001d10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d1c:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <HAL_UART_MspInit+0xc4>)
 8001d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d22:	4a14      	ldr	r2, [pc, #80]	; (8001d74 <HAL_UART_MspInit+0xc4>)
 8001d24:	f043 0308 	orr.w	r3, r3, #8
 8001d28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <HAL_UART_MspInit+0xc4>)
 8001d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001d3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d54:	2307      	movs	r3, #7
 8001d56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d5a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4805      	ldr	r0, [pc, #20]	; (8001d78 <HAL_UART_MspInit+0xc8>)
 8001d62:	f000 ff87 	bl	8002c74 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d66:	bf00      	nop
 8001d68:	37e0      	adds	r7, #224	; 0xe0
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40004800 	.word	0x40004800
 8001d74:	58024400 	.word	0x58024400
 8001d78:	58020c00 	.word	0x58020c00

08001d7c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001d80:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d82:	4a16      	ldr	r2, [pc, #88]	; (8001ddc <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001d84:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001d86:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d88:	2209      	movs	r2, #9
 8001d8a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d8e:	2202      	movs	r2, #2
 8001d90:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001daa:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001db6:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001dc2:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001dc4:	f001 fabb 	bl	800333e <HAL_PCD_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001dce:	f7ff fc00 	bl	80015d2 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	2400a730 	.word	0x2400a730
 8001ddc:	40080000 	.word	0x40080000

08001de0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b0b8      	sub	sp, #224	; 0xe0
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001df8:	f107 0310 	add.w	r3, r7, #16
 8001dfc:	22bc      	movs	r2, #188	; 0xbc
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4618      	mov	r0, r3
 8001e02:	f00e faa7 	bl	8010354 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a37      	ldr	r2, [pc, #220]	; (8001ee8 <HAL_PCD_MspInit+0x108>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d166      	bne.n	8001ede <HAL_PCD_MspInit+0xfe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001e10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001e14:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001e16:	2301      	movs	r3, #1
 8001e18:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001e1a:	2312      	movs	r3, #18
 8001e1c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001e22:	2303      	movs	r3, #3
 8001e24:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001e26:	2302      	movs	r3, #2
 8001e28:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001e2a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e2e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8001e30:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e34:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001e36:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e3e:	f107 0310 	add.w	r3, r7, #16
 8001e42:	4618      	mov	r0, r3
 8001e44:	f002 fbca 	bl	80045dc <HAL_RCCEx_PeriphCLKConfig>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8001e4e:	f7ff fbc0 	bl	80015d2 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001e52:	f001 fc17 	bl	8003684 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e56:	4b25      	ldr	r3, [pc, #148]	; (8001eec <HAL_PCD_MspInit+0x10c>)
 8001e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e5c:	4a23      	ldr	r2, [pc, #140]	; (8001eec <HAL_PCD_MspInit+0x10c>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e66:	4b21      	ldr	r3, [pc, #132]	; (8001eec <HAL_PCD_MspInit+0x10c>)
 8001e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001e74:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001e78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001e8e:	230a      	movs	r3, #10
 8001e90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4815      	ldr	r0, [pc, #84]	; (8001ef0 <HAL_PCD_MspInit+0x110>)
 8001e9c:	f000 feea 	bl	8002c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ea4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001eb8:	4619      	mov	r1, r3
 8001eba:	480d      	ldr	r0, [pc, #52]	; (8001ef0 <HAL_PCD_MspInit+0x110>)
 8001ebc:	f000 feda 	bl	8002c74 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ec0:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <HAL_PCD_MspInit+0x10c>)
 8001ec2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ec6:	4a09      	ldr	r2, [pc, #36]	; (8001eec <HAL_PCD_MspInit+0x10c>)
 8001ec8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ecc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_PCD_MspInit+0x10c>)
 8001ed2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ed6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001ede:	bf00      	nop
 8001ee0:	37e0      	adds	r7, #224	; 0xe0
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40080000 	.word	0x40080000
 8001eec:	58024400 	.word	0x58024400
 8001ef0:	58020000 	.word	0x58020000

08001ef4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ef4:	f8df d05c 	ldr.w	sp, [pc, #92]	; 8001f54 <LoopFillZerobss_RAM_D2+0x12>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ef8:	f7fe fe4e 	bl	8000b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001efc:	4816      	ldr	r0, [pc, #88]	; (8001f58 <LoopFillZerobss_RAM_D2+0x16>)
  ldr r1, =_edata
 8001efe:	4917      	ldr	r1, [pc, #92]	; (8001f5c <LoopFillZerobss_RAM_D2+0x1a>)
  ldr r2, =_sidata
 8001f00:	4a17      	ldr	r2, [pc, #92]	; (8001f60 <LoopFillZerobss_RAM_D2+0x1e>)
  movs r3, #0
 8001f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f04:	e002      	b.n	8001f0c <LoopCopyDataInit>

08001f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f0a:	3304      	adds	r3, #4

08001f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f10:	d3f9      	bcc.n	8001f06 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f12:	4a14      	ldr	r2, [pc, #80]	; (8001f64 <LoopFillZerobss_RAM_D2+0x22>)
  ldr r4, =_ebss
 8001f14:	4c14      	ldr	r4, [pc, #80]	; (8001f68 <LoopFillZerobss_RAM_D2+0x26>)
  movs r3, #0
 8001f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f18:	e001      	b.n	8001f1e <LoopFillZerobss>

08001f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f1c:	3204      	adds	r2, #4

08001f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f20:	d3fb      	bcc.n	8001f1a <FillZerobss>

  /* Copy the data segment initializers from flash to RAM_D2 */
  movs  r1, #0
 8001f22:	2100      	movs	r1, #0
  b  LoopCopyDataInit_RAM_D2
 8001f24:	e003      	b.n	8001f2e <LoopCopyDataInit_RAM_D2>

08001f26 <CopyDataInit_RAM_D2>:

CopyDataInit_RAM_D2:
  ldr  r3, =_siRAM_D2
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <LoopFillZerobss_RAM_D2+0x2a>)
  ldr  r3, [r3, r1]
 8001f28:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f2a:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f2c:	3104      	adds	r1, #4

08001f2e <LoopCopyDataInit_RAM_D2>:

LoopCopyDataInit_RAM_D2:
  ldr  r0, =_sRAM_D2
 8001f2e:	4810      	ldr	r0, [pc, #64]	; (8001f70 <LoopFillZerobss_RAM_D2+0x2e>)
  ldr  r3, =_eRAM_D2
 8001f30:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <LoopFillZerobss_RAM_D2+0x32>)
  adds  r2, r0, r1
 8001f32:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f34:	429a      	cmp	r2, r3
  bcc  CopyDataInit_RAM_D2
 8001f36:	d3f6      	bcc.n	8001f26 <CopyDataInit_RAM_D2>
  ldr  r2, =_sbss_RAM_D2
 8001f38:	4a0f      	ldr	r2, [pc, #60]	; (8001f78 <LoopFillZerobss_RAM_D2+0x36>)
  b  LoopFillZerobss_RAM_D2
 8001f3a:	e002      	b.n	8001f42 <LoopFillZerobss_RAM_D2>

08001f3c <FillZerobss_RAM_D2>:


/* Zero fill the bss segment. */
FillZerobss_RAM_D2:
  movs  r3, #0
 8001f3c:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f3e:	f842 3b04 	str.w	r3, [r2], #4

08001f42 <LoopFillZerobss_RAM_D2>:

LoopFillZerobss_RAM_D2:
  ldr  r3, = _ebss_RAM_D2
 8001f42:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <LoopFillZerobss_RAM_D2+0x3a>)
  cmp  r2, r3
 8001f44:	429a      	cmp	r2, r3
  bcc  FillZerobss_RAM_D2
 8001f46:	d3f9      	bcc.n	8001f3c <FillZerobss_RAM_D2>

/* Call static constructors */
    bl __libc_init_array
 8001f48:	f00e f9a8 	bl	801029c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f4c:	f7ff f980 	bl	8001250 <main>
  bx  lr
 8001f50:	4770      	bx	lr
 8001f52:	0000      	.short	0x0000
  ldr   sp, =_estack      /* set stack pointer */
 8001f54:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8001f58:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f5c:	2400a2c4 	.word	0x2400a2c4
  ldr r2, =_sidata
 8001f60:	0801e260 	.word	0x0801e260
  ldr r2, =_sbss
 8001f64:	2400a384 	.word	0x2400a384
  ldr r4, =_ebss
 8001f68:	2400f6b0 	.word	0x2400f6b0
  ldr  r3, =_siRAM_D2
 8001f6c:	080285e4 	.word	0x080285e4
  ldr  r0, =_sRAM_D2
 8001f70:	30000000 	.word	0x30000000
  ldr  r3, =_eRAM_D2
 8001f74:	30000000 	.word	0x30000000
  ldr  r2, =_sbss_RAM_D2
 8001f78:	30000000 	.word	0x30000000
  ldr  r3, = _ebss_RAM_D2
 8001f7c:	30000000 	.word	0x30000000

08001f80 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f80:	e7fe      	b.n	8001f80 <ADC3_IRQHandler>
	...

08001f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f8a:	2003      	movs	r0, #3
 8001f8c:	f000 f9a0 	bl	80022d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f90:	f002 f94e 	bl	8004230 <HAL_RCC_GetSysClockFreq>
 8001f94:	4602      	mov	r2, r0
 8001f96:	4b15      	ldr	r3, [pc, #84]	; (8001fec <HAL_Init+0x68>)
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	0a1b      	lsrs	r3, r3, #8
 8001f9c:	f003 030f 	and.w	r3, r3, #15
 8001fa0:	4913      	ldr	r1, [pc, #76]	; (8001ff0 <HAL_Init+0x6c>)
 8001fa2:	5ccb      	ldrb	r3, [r1, r3]
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001fae:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <HAL_Init+0x68>)
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	4a0e      	ldr	r2, [pc, #56]	; (8001ff0 <HAL_Init+0x6c>)
 8001fb8:	5cd3      	ldrb	r3, [r2, r3]
 8001fba:	f003 031f 	and.w	r3, r3, #31
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc4:	4a0b      	ldr	r2, [pc, #44]	; (8001ff4 <HAL_Init+0x70>)
 8001fc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fc8:	4a0b      	ldr	r2, [pc, #44]	; (8001ff8 <HAL_Init+0x74>)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f000 f814 	bl	8001ffc <HAL_InitTick>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e002      	b.n	8001fe4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001fde:	f7ff fbe1 	bl	80017a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	58024400 	.word	0x58024400
 8001ff0:	08015450 	.word	0x08015450
 8001ff4:	24000004 	.word	0x24000004
 8001ff8:	24000000 	.word	0x24000000

08001ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002004:	4b15      	ldr	r3, [pc, #84]	; (800205c <HAL_InitTick+0x60>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e021      	b.n	8002054 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002010:	4b13      	ldr	r3, [pc, #76]	; (8002060 <HAL_InitTick+0x64>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <HAL_InitTick+0x60>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	4619      	mov	r1, r3
 800201a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800201e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002022:	fbb2 f3f3 	udiv	r3, r2, r3
 8002026:	4618      	mov	r0, r3
 8002028:	f000 f985 	bl	8002336 <HAL_SYSTICK_Config>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e00e      	b.n	8002054 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b0f      	cmp	r3, #15
 800203a:	d80a      	bhi.n	8002052 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800203c:	2200      	movs	r2, #0
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	f04f 30ff 	mov.w	r0, #4294967295
 8002044:	f000 f94f 	bl	80022e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002048:	4a06      	ldr	r2, [pc, #24]	; (8002064 <HAL_InitTick+0x68>)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	e000      	b.n	8002054 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
}
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	24000014 	.word	0x24000014
 8002060:	24000000 	.word	0x24000000
 8002064:	24000010 	.word	0x24000010

08002068 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <HAL_IncTick+0x20>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_IncTick+0x24>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4413      	add	r3, r2
 8002078:	4a04      	ldr	r2, [pc, #16]	; (800208c <HAL_IncTick+0x24>)
 800207a:	6013      	str	r3, [r2, #0]
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	24000014 	.word	0x24000014
 800208c:	2400ab38 	.word	0x2400ab38

08002090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return uwTick;
 8002094:	4b03      	ldr	r3, [pc, #12]	; (80020a4 <HAL_GetTick+0x14>)
 8002096:	681b      	ldr	r3, [r3, #0]
}
 8002098:	4618      	mov	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	2400ab38 	.word	0x2400ab38

080020a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020b0:	f7ff ffee 	bl	8002090 <HAL_GetTick>
 80020b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c0:	d005      	beq.n	80020ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_Delay+0x44>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4413      	add	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020ce:	bf00      	nop
 80020d0:	f7ff ffde 	bl	8002090 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d8f7      	bhi.n	80020d0 <HAL_Delay+0x28>
  {
  }
}
 80020e0:	bf00      	nop
 80020e2:	bf00      	nop
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	24000014 	.word	0x24000014

080020f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80020f4:	4b03      	ldr	r3, [pc, #12]	; (8002104 <HAL_GetREVID+0x14>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	0c1b      	lsrs	r3, r3, #16
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	5c001000 	.word	0x5c001000

08002108 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002118:	4904      	ldr	r1, [pc, #16]	; (800212c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4313      	orrs	r3, r2
 800211e:	604b      	str	r3, [r1, #4]
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	58000400 	.word	0x58000400

08002130 <__NVIC_SetPriorityGrouping>:
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <__NVIC_SetPriorityGrouping+0x40>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800214c:	4013      	ands	r3, r2
 800214e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <__NVIC_SetPriorityGrouping+0x44>)
 800215a:	4313      	orrs	r3, r2
 800215c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800215e:	4a04      	ldr	r2, [pc, #16]	; (8002170 <__NVIC_SetPriorityGrouping+0x40>)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	60d3      	str	r3, [r2, #12]
}
 8002164:	bf00      	nop
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	e000ed00 	.word	0xe000ed00
 8002174:	05fa0000 	.word	0x05fa0000

08002178 <__NVIC_GetPriorityGrouping>:
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <__NVIC_GetPriorityGrouping+0x18>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	0a1b      	lsrs	r3, r3, #8
 8002182:	f003 0307 	and.w	r3, r3, #7
}
 8002186:	4618      	mov	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <__NVIC_EnableIRQ>:
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800219e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	db0b      	blt.n	80021be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021a6:	88fb      	ldrh	r3, [r7, #6]
 80021a8:	f003 021f 	and.w	r2, r3, #31
 80021ac:	4907      	ldr	r1, [pc, #28]	; (80021cc <__NVIC_EnableIRQ+0x38>)
 80021ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021b2:	095b      	lsrs	r3, r3, #5
 80021b4:	2001      	movs	r0, #1
 80021b6:	fa00 f202 	lsl.w	r2, r0, r2
 80021ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	e000e100 	.word	0xe000e100

080021d0 <__NVIC_SetPriority>:
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	6039      	str	r1, [r7, #0]
 80021da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	db0a      	blt.n	80021fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	490c      	ldr	r1, [pc, #48]	; (800221c <__NVIC_SetPriority+0x4c>)
 80021ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ee:	0112      	lsls	r2, r2, #4
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	440b      	add	r3, r1
 80021f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80021f8:	e00a      	b.n	8002210 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	4908      	ldr	r1, [pc, #32]	; (8002220 <__NVIC_SetPriority+0x50>)
 8002200:	88fb      	ldrh	r3, [r7, #6]
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	3b04      	subs	r3, #4
 8002208:	0112      	lsls	r2, r2, #4
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	440b      	add	r3, r1
 800220e:	761a      	strb	r2, [r3, #24]
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	e000e100 	.word	0xe000e100
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <NVIC_EncodePriority>:
{
 8002224:	b480      	push	{r7}
 8002226:	b089      	sub	sp, #36	; 0x24
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f1c3 0307 	rsb	r3, r3, #7
 800223e:	2b04      	cmp	r3, #4
 8002240:	bf28      	it	cs
 8002242:	2304      	movcs	r3, #4
 8002244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3304      	adds	r3, #4
 800224a:	2b06      	cmp	r3, #6
 800224c:	d902      	bls.n	8002254 <NVIC_EncodePriority+0x30>
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	3b03      	subs	r3, #3
 8002252:	e000      	b.n	8002256 <NVIC_EncodePriority+0x32>
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002258:	f04f 32ff 	mov.w	r2, #4294967295
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43da      	mvns	r2, r3
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	401a      	ands	r2, r3
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800226c:	f04f 31ff 	mov.w	r1, #4294967295
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	fa01 f303 	lsl.w	r3, r1, r3
 8002276:	43d9      	mvns	r1, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800227c:	4313      	orrs	r3, r2
}
 800227e:	4618      	mov	r0, r3
 8002280:	3724      	adds	r7, #36	; 0x24
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
	...

0800228c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3b01      	subs	r3, #1
 8002298:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800229c:	d301      	bcc.n	80022a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800229e:	2301      	movs	r3, #1
 80022a0:	e00f      	b.n	80022c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022a2:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <SysTick_Config+0x40>)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022aa:	210f      	movs	r1, #15
 80022ac:	f04f 30ff 	mov.w	r0, #4294967295
 80022b0:	f7ff ff8e 	bl	80021d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022b4:	4b05      	ldr	r3, [pc, #20]	; (80022cc <SysTick_Config+0x40>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ba:	4b04      	ldr	r3, [pc, #16]	; (80022cc <SysTick_Config+0x40>)
 80022bc:	2207      	movs	r2, #7
 80022be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	e000e010 	.word	0xe000e010

080022d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f7ff ff29 	bl	8002130 <__NVIC_SetPriorityGrouping>
}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b086      	sub	sp, #24
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	4603      	mov	r3, r0
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	607a      	str	r2, [r7, #4]
 80022f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022f4:	f7ff ff40 	bl	8002178 <__NVIC_GetPriorityGrouping>
 80022f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	68b9      	ldr	r1, [r7, #8]
 80022fe:	6978      	ldr	r0, [r7, #20]
 8002300:	f7ff ff90 	bl	8002224 <NVIC_EncodePriority>
 8002304:	4602      	mov	r2, r0
 8002306:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800230a:	4611      	mov	r1, r2
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff ff5f 	bl	80021d0 <__NVIC_SetPriority>
}
 8002312:	bf00      	nop
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	4603      	mov	r3, r0
 8002322:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002324:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff ff33 	bl	8002194 <__NVIC_EnableIRQ>
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff ffa4 	bl	800228c <SysTick_Config>
 8002344:	4603      	mov	r3, r0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002354:	f3bf 8f5f 	dmb	sy
}
 8002358:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800235a:	4b07      	ldr	r3, [pc, #28]	; (8002378 <HAL_MPU_Disable+0x28>)
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	4a06      	ldr	r2, [pc, #24]	; (8002378 <HAL_MPU_Disable+0x28>)
 8002360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002364:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002366:	4b05      	ldr	r3, [pc, #20]	; (800237c <HAL_MPU_Disable+0x2c>)
 8002368:	2200      	movs	r2, #0
 800236a:	605a      	str	r2, [r3, #4]
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	e000ed00 	.word	0xe000ed00
 800237c:	e000ed90 	.word	0xe000ed90

08002380 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002388:	4a0b      	ldr	r2, [pc, #44]	; (80023b8 <HAL_MPU_Enable+0x38>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002392:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <HAL_MPU_Enable+0x3c>)
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	4a09      	ldr	r2, [pc, #36]	; (80023bc <HAL_MPU_Enable+0x3c>)
 8002398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800239e:	f3bf 8f4f 	dsb	sy
}
 80023a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80023a4:	f3bf 8f6f 	isb	sy
}
 80023a8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	e000ed90 	.word	0xe000ed90
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	785a      	ldrb	r2, [r3, #1]
 80023cc:	4b1d      	ldr	r3, [pc, #116]	; (8002444 <HAL_MPU_ConfigRegion+0x84>)
 80023ce:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d029      	beq.n	800242c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80023d8:	4a1a      	ldr	r2, [pc, #104]	; (8002444 <HAL_MPU_ConfigRegion+0x84>)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	7b1b      	ldrb	r3, [r3, #12]
 80023e4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	7adb      	ldrb	r3, [r3, #11]
 80023ea:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80023ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	7a9b      	ldrb	r3, [r3, #10]
 80023f2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80023f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	7b5b      	ldrb	r3, [r3, #13]
 80023fa:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80023fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	7b9b      	ldrb	r3, [r3, #14]
 8002402:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002404:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	7bdb      	ldrb	r3, [r3, #15]
 800240a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800240c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	7a5b      	ldrb	r3, [r3, #9]
 8002412:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002414:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	7a1b      	ldrb	r3, [r3, #8]
 800241a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800241c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	7812      	ldrb	r2, [r2, #0]
 8002422:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002424:	4a07      	ldr	r2, [pc, #28]	; (8002444 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002426:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002428:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800242a:	e005      	b.n	8002438 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800242c:	4b05      	ldr	r3, [pc, #20]	; (8002444 <HAL_MPU_ConfigRegion+0x84>)
 800242e:	2200      	movs	r2, #0
 8002430:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002432:	4b04      	ldr	r3, [pc, #16]	; (8002444 <HAL_MPU_ConfigRegion+0x84>)
 8002434:	2200      	movs	r2, #0
 8002436:	611a      	str	r2, [r3, #16]
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	e000ed90 	.word	0xe000ed90

08002448 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e0c6      	b.n	80025e8 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800245e:	2b00      	cmp	r3, #0
 8002460:	d102      	bne.n	8002468 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7fe fc84 	bl	8000d70 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2223      	movs	r2, #35	; 0x23
 800246c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246e:	4b60      	ldr	r3, [pc, #384]	; (80025f0 <HAL_ETH_Init+0x1a8>)
 8002470:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002474:	4a5e      	ldr	r2, [pc, #376]	; (80025f0 <HAL_ETH_Init+0x1a8>)
 8002476:	f043 0302 	orr.w	r3, r3, #2
 800247a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800247e:	4b5c      	ldr	r3, [pc, #368]	; (80025f0 <HAL_ETH_Init+0x1a8>)
 8002480:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	7a1b      	ldrb	r3, [r3, #8]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d103      	bne.n	800249c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002494:	2000      	movs	r0, #0
 8002496:	f7ff fe37 	bl	8002108 <HAL_SYSCFG_ETHInterfaceSelect>
 800249a:	e003      	b.n	80024a4 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800249c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80024a0:	f7ff fe32 	bl	8002108 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0201 	orr.w	r2, r2, #1
 80024b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024bc:	f7ff fde8 	bl	8002090 <HAL_GetTick>
 80024c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80024c2:	e00f      	b.n	80024e4 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80024c4:	f7ff fde4 	bl	8002090 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80024d2:	d907      	bls.n	80024e4 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2204      	movs	r2, #4
 80024d8:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	22e0      	movs	r2, #224	; 0xe0
 80024de:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e081      	b.n	80025e8 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1e6      	bne.n	80024c4 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 fac0 	bl	8002a7c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80024fc:	f002 f812 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 8002500:	4603      	mov	r3, r0
 8002502:	4a3c      	ldr	r2, [pc, #240]	; (80025f4 <HAL_ETH_Init+0x1ac>)
 8002504:	fba2 2303 	umull	r2, r3, r2, r3
 8002508:	0c9a      	lsrs	r2, r3, #18
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	3a01      	subs	r2, #1
 8002510:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 fa13 	bl	8002940 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002530:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002534:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d007      	beq.n	8002552 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	22e0      	movs	r2, #224	; 0xe0
 800254c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e04a      	b.n	80025e8 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	f241 1308 	movw	r3, #4360	; 0x1108
 800255a:	4413      	add	r3, r2
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	4b26      	ldr	r3, [pc, #152]	; (80025f8 <HAL_ETH_Init+0x1b0>)
 8002560:	4013      	ands	r3, r2
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6952      	ldr	r2, [r2, #20]
 8002566:	0052      	lsls	r2, r2, #1
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	6809      	ldr	r1, [r1, #0]
 800256c:	431a      	orrs	r2, r3
 800256e:	f241 1308 	movw	r3, #4360	; 0x1108
 8002572:	440b      	add	r3, r1
 8002574:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 fad8 	bl	8002b2c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 fb1c 	bl	8002bba <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	3305      	adds	r3, #5
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	021a      	lsls	r2, r3, #8
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	3304      	adds	r3, #4
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	4619      	mov	r1, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	3303      	adds	r3, #3
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	061a      	lsls	r2, r3, #24
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	3302      	adds	r3, #2
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	041b      	lsls	r3, r3, #16
 80025b4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	3301      	adds	r3, #1
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80025c0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80025ce:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80025d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2210      	movs	r2, #16
 80025de:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2210      	movs	r2, #16
 80025e4:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	58024400 	.word	0x58024400
 80025f4:	431bde83 	.word	0x431bde83
 80025f8:	ffff8001 	.word	0xffff8001

080025fc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800260e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	791b      	ldrb	r3, [r3, #4]
 8002614:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002616:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	7b1b      	ldrb	r3, [r3, #12]
 800261c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800261e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	7b5b      	ldrb	r3, [r3, #13]
 8002624:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002626:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	7b9b      	ldrb	r3, [r3, #14]
 800262c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800262e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	7bdb      	ldrb	r3, [r3, #15]
 8002634:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002636:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	7c12      	ldrb	r2, [r2, #16]
 800263c:	2a00      	cmp	r2, #0
 800263e:	d102      	bne.n	8002646 <ETH_SetMACConfig+0x4a>
 8002640:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002644:	e000      	b.n	8002648 <ETH_SetMACConfig+0x4c>
 8002646:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002648:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	7c52      	ldrb	r2, [r2, #17]
 800264e:	2a00      	cmp	r2, #0
 8002650:	d102      	bne.n	8002658 <ETH_SetMACConfig+0x5c>
 8002652:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002656:	e000      	b.n	800265a <ETH_SetMACConfig+0x5e>
 8002658:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800265a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	7c9b      	ldrb	r3, [r3, #18]
 8002660:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002662:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002668:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800266e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	7f1b      	ldrb	r3, [r3, #28]
 8002674:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002676:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	7f5b      	ldrb	r3, [r3, #29]
 800267c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800267e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	7f92      	ldrb	r2, [r2, #30]
 8002684:	2a00      	cmp	r2, #0
 8002686:	d102      	bne.n	800268e <ETH_SetMACConfig+0x92>
 8002688:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800268c:	e000      	b.n	8002690 <ETH_SetMACConfig+0x94>
 800268e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002690:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	7fdb      	ldrb	r3, [r3, #31]
 8002696:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002698:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	f892 2020 	ldrb.w	r2, [r2, #32]
 80026a0:	2a00      	cmp	r2, #0
 80026a2:	d102      	bne.n	80026aa <ETH_SetMACConfig+0xae>
 80026a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026a8:	e000      	b.n	80026ac <ETH_SetMACConfig+0xb0>
 80026aa:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80026ac:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80026b2:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026ba:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80026bc:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4b56      	ldr	r3, [pc, #344]	; (8002828 <ETH_SetMACConfig+0x22c>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	68f9      	ldr	r1, [r7, #12]
 80026d6:	430b      	orrs	r3, r1
 80026d8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026de:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026e6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80026e8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026f0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80026f2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80026fa:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80026fc:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002704:	2a00      	cmp	r2, #0
 8002706:	d102      	bne.n	800270e <ETH_SetMACConfig+0x112>
 8002708:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800270c:	e000      	b.n	8002710 <ETH_SetMACConfig+0x114>
 800270e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002710:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002716:	4313      	orrs	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	4b42      	ldr	r3, [pc, #264]	; (800282c <ETH_SetMACConfig+0x230>)
 8002722:	4013      	ands	r3, r2
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	68f9      	ldr	r1, [r7, #12]
 800272a:	430b      	orrs	r3, r1
 800272c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002734:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800273a:	4313      	orrs	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68da      	ldr	r2, [r3, #12]
 8002744:	4b3a      	ldr	r3, [pc, #232]	; (8002830 <ETH_SetMACConfig+0x234>)
 8002746:	4013      	ands	r3, r2
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	68f9      	ldr	r1, [r7, #12]
 800274e:	430b      	orrs	r3, r1
 8002750:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002758:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800275e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002766:	2a00      	cmp	r2, #0
 8002768:	d101      	bne.n	800276e <ETH_SetMACConfig+0x172>
 800276a:	2280      	movs	r2, #128	; 0x80
 800276c:	e000      	b.n	8002770 <ETH_SetMACConfig+0x174>
 800276e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002770:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002776:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002778:	4313      	orrs	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002782:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002786:	4013      	ands	r3, r2
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	68f9      	ldr	r1, [r7, #12]
 800278e:	430b      	orrs	r3, r1
 8002790:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002798:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80027a0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80027a2:	4313      	orrs	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ae:	f023 0103 	bic.w	r1, r3, #3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80027c6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80027e2:	2a00      	cmp	r2, #0
 80027e4:	d101      	bne.n	80027ea <ETH_SetMACConfig+0x1ee>
 80027e6:	2240      	movs	r2, #64	; 0x40
 80027e8:	e000      	b.n	80027ec <ETH_SetMACConfig+0x1f0>
 80027ea:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80027ec:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80027f4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80027f6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80027fe:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002800:	4313      	orrs	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800280c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	430a      	orrs	r2, r1
 8002818:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	00048083 	.word	0x00048083
 800282c:	c0f88000 	.word	0xc0f88000
 8002830:	fffffef0 	.word	0xfffffef0

08002834 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b38      	ldr	r3, [pc, #224]	; (800292c <ETH_SetDMAConfig+0xf8>)
 800284a:	4013      	ands	r3, r2
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	6809      	ldr	r1, [r1, #0]
 8002854:	431a      	orrs	r2, r3
 8002856:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800285a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	791b      	ldrb	r3, [r3, #4]
 8002860:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002866:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	7b1b      	ldrb	r3, [r3, #12]
 800286c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800286e:	4313      	orrs	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	f241 0304 	movw	r3, #4100	; 0x1004
 800287a:	4413      	add	r3, r2
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	4b2c      	ldr	r3, [pc, #176]	; (8002930 <ETH_SetDMAConfig+0xfc>)
 8002880:	4013      	ands	r3, r2
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6811      	ldr	r1, [r2, #0]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	431a      	orrs	r2, r3
 800288a:	f241 0304 	movw	r3, #4100	; 0x1004
 800288e:	440b      	add	r3, r1
 8002890:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	7b5b      	ldrb	r3, [r3, #13]
 8002896:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800289c:	4313      	orrs	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	4b22      	ldr	r3, [pc, #136]	; (8002934 <ETH_SetDMAConfig+0x100>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6811      	ldr	r1, [r2, #0]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	431a      	orrs	r2, r3
 80028b6:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80028ba:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	7d1b      	ldrb	r3, [r3, #20]
 80028c4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80028c6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	7f5b      	ldrb	r3, [r3, #29]
 80028cc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80028ce:	4313      	orrs	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	f241 1304 	movw	r3, #4356	; 0x1104
 80028da:	4413      	add	r3, r2
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	4b16      	ldr	r3, [pc, #88]	; (8002938 <ETH_SetDMAConfig+0x104>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6811      	ldr	r1, [r2, #0]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	431a      	orrs	r2, r3
 80028ea:	f241 1304 	movw	r3, #4356	; 0x1104
 80028ee:	440b      	add	r3, r1
 80028f0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	7f1b      	ldrb	r3, [r3, #28]
 80028f6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80028fc:	4313      	orrs	r3, r2
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	f241 1308 	movw	r3, #4360	; 0x1108
 8002908:	4413      	add	r3, r2
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <ETH_SetDMAConfig+0x108>)
 800290e:	4013      	ands	r3, r2
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6811      	ldr	r1, [r2, #0]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	431a      	orrs	r2, r3
 8002918:	f241 1308 	movw	r3, #4360	; 0x1108
 800291c:	440b      	add	r3, r1
 800291e:	601a      	str	r2, [r3, #0]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	ffff87fd 	.word	0xffff87fd
 8002930:	ffff2ffe 	.word	0xffff2ffe
 8002934:	fffec000 	.word	0xfffec000
 8002938:	ffc0efef 	.word	0xffc0efef
 800293c:	7fc0ffff 	.word	0x7fc0ffff

08002940 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b0a4      	sub	sp, #144	; 0x90
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002948:	2301      	movs	r3, #1
 800294a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800294e:	2300      	movs	r3, #0
 8002950:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002952:	2300      	movs	r3, #0
 8002954:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002958:	2300      	movs	r3, #0
 800295a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800295e:	2301      	movs	r3, #1
 8002960:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002964:	2301      	movs	r3, #1
 8002966:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800296a:	2301      	movs	r3, #1
 800296c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002970:	2300      	movs	r3, #0
 8002972:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002976:	2301      	movs	r3, #1
 8002978:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800297c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002980:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002982:	2300      	movs	r3, #0
 8002984:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002988:	2300      	movs	r3, #0
 800298a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800298c:	2300      	movs	r3, #0
 800298e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002992:	2300      	movs	r3, #0
 8002994:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002998:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800299c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800299e:	2300      	movs	r3, #0
 80029a0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80029a4:	2300      	movs	r3, #0
 80029a6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80029a8:	2301      	movs	r3, #1
 80029aa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80029ba:	2300      	movs	r3, #0
 80029bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80029be:	2300      	movs	r3, #0
 80029c0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80029c2:	2300      	movs	r3, #0
 80029c4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80029cc:	2300      	movs	r3, #0
 80029ce:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80029d2:	2301      	movs	r3, #1
 80029d4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80029d8:	2320      	movs	r3, #32
 80029da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80029de:	2301      	movs	r3, #1
 80029e0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80029e4:	2300      	movs	r3, #0
 80029e6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80029ea:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80029ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80029f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029f4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80029f6:	2300      	movs	r3, #0
 80029f8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80029fc:	2302      	movs	r3, #2
 80029fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002a02:	2300      	movs	r3, #0
 8002a04:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002a14:	2301      	movs	r3, #1
 8002a16:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002a24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a28:	4619      	mov	r1, r3
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff fde6 	bl	80025fc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002a30:	2301      	movs	r3, #1
 8002a32:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002a34:	2301      	movs	r3, #1
 8002a36:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002a42:	2300      	movs	r3, #0
 8002a44:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002a46:	2300      	movs	r3, #0
 8002a48:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002a4a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a4e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002a50:	2300      	movs	r3, #0
 8002a52:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002a54:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a58:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002a60:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002a64:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a66:	f107 0308 	add.w	r3, r7, #8
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff fee1 	bl	8002834 <ETH_SetDMAConfig>
}
 8002a72:	bf00      	nop
 8002a74:	3790      	adds	r7, #144	; 0x90
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a8c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a94:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002a96:	f001 fd45 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 8002a9a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	4a1e      	ldr	r2, [pc, #120]	; (8002b18 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d908      	bls.n	8002ab6 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	4a1d      	ldr	r2, [pc, #116]	; (8002b1c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d804      	bhi.n	8002ab6 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	e027      	b.n	8002b06 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	4a18      	ldr	r2, [pc, #96]	; (8002b1c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d908      	bls.n	8002ad0 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	4a17      	ldr	r2, [pc, #92]	; (8002b20 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d204      	bcs.n	8002ad0 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	e01a      	b.n	8002b06 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	4a13      	ldr	r2, [pc, #76]	; (8002b20 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d303      	bcc.n	8002ae0 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	4a12      	ldr	r2, [pc, #72]	; (8002b24 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d911      	bls.n	8002b04 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	4a10      	ldr	r2, [pc, #64]	; (8002b24 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d908      	bls.n	8002afa <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	4a0f      	ldr	r2, [pc, #60]	; (8002b28 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d804      	bhi.n	8002afa <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	e005      	b.n	8002b06 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	e000      	b.n	8002b06 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002b04:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002b10:	bf00      	nop
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	01312cff 	.word	0x01312cff
 8002b1c:	02160ebf 	.word	0x02160ebf
 8002b20:	03938700 	.word	0x03938700
 8002b24:	05f5e0ff 	.word	0x05f5e0ff
 8002b28:	08f0d17f 	.word	0x08f0d17f

08002b2c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	e01d      	b.n	8002b76 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68d9      	ldr	r1, [r3, #12]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4613      	mov	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	4413      	add	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	440b      	add	r3, r1
 8002b4a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2200      	movs	r2, #0
 8002b56:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2200      	movs	r2, #0
 8002b62:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002b64:	68b9      	ldr	r1, [r7, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	3206      	adds	r2, #6
 8002b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	3301      	adds	r3, #1
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d9de      	bls.n	8002b3a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	f241 132c 	movw	r3, #4396	; 0x112c
 8002b8a:	4413      	add	r3, r2
 8002b8c:	2203      	movs	r2, #3
 8002b8e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68d9      	ldr	r1, [r3, #12]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	f241 1314 	movw	r3, #4372	; 0x1114
 8002b9c:	4413      	add	r3, r2
 8002b9e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002bac:	601a      	str	r2, [r3, #0]
}
 8002bae:	bf00      	nop
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b085      	sub	sp, #20
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	e024      	b.n	8002c12 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6919      	ldr	r1, [r3, #16]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	4413      	add	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	440b      	add	r3, r1
 8002bd8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2200      	movs	r2, #0
 8002be4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2200      	movs	r2, #0
 8002bea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	3310      	adds	r3, #16
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d9d7      	bls.n	8002bc8 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	f241 1330 	movw	r3, #4400	; 0x1130
 8002c3e:	4413      	add	r3, r2
 8002c40:	2203      	movs	r2, #3
 8002c42:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6919      	ldr	r1, [r3, #16]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	f241 131c 	movw	r3, #4380	; 0x111c
 8002c50:	4413      	add	r3, r2
 8002c52:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	f241 1328 	movw	r3, #4392	; 0x1128
 8002c64:	4413      	add	r3, r2
 8002c66:	6019      	str	r1, [r3, #0]
}
 8002c68:	bf00      	nop
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b089      	sub	sp, #36	; 0x24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002c82:	4b89      	ldr	r3, [pc, #548]	; (8002ea8 <HAL_GPIO_Init+0x234>)
 8002c84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c86:	e194      	b.n	8002fb2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	fa01 f303 	lsl.w	r3, r1, r3
 8002c94:	4013      	ands	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 8186 	beq.w	8002fac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d00b      	beq.n	8002cc0 <HAL_GPIO_Init+0x4c>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d007      	beq.n	8002cc0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cb4:	2b11      	cmp	r3, #17
 8002cb6:	d003      	beq.n	8002cc0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b12      	cmp	r3, #18
 8002cbe:	d130      	bne.n	8002d22 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	2203      	movs	r2, #3
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4013      	ands	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	091b      	lsrs	r3, r3, #4
 8002d0c:	f003 0201 	and.w	r2, r3, #1
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	2203      	movs	r2, #3
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43db      	mvns	r3, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4013      	ands	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d003      	beq.n	8002d62 <HAL_GPIO_Init+0xee>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b12      	cmp	r3, #18
 8002d60:	d123      	bne.n	8002daa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	08da      	lsrs	r2, r3, #3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3208      	adds	r2, #8
 8002d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	220f      	movs	r2, #15
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4013      	ands	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	691a      	ldr	r2, [r3, #16]
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	08da      	lsrs	r2, r3, #3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3208      	adds	r2, #8
 8002da4:	69b9      	ldr	r1, [r7, #24]
 8002da6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	2203      	movs	r2, #3
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f003 0203 	and.w	r2, r3, #3
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 80e0 	beq.w	8002fac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dec:	4b2f      	ldr	r3, [pc, #188]	; (8002eac <HAL_GPIO_Init+0x238>)
 8002dee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002df2:	4a2e      	ldr	r2, [pc, #184]	; (8002eac <HAL_GPIO_Init+0x238>)
 8002df4:	f043 0302 	orr.w	r3, r3, #2
 8002df8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002dfc:	4b2b      	ldr	r3, [pc, #172]	; (8002eac <HAL_GPIO_Init+0x238>)
 8002dfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e0a:	4a29      	ldr	r2, [pc, #164]	; (8002eb0 <HAL_GPIO_Init+0x23c>)
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	089b      	lsrs	r3, r3, #2
 8002e10:	3302      	adds	r3, #2
 8002e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	220f      	movs	r2, #15
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	43db      	mvns	r3, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a20      	ldr	r2, [pc, #128]	; (8002eb4 <HAL_GPIO_Init+0x240>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d052      	beq.n	8002edc <HAL_GPIO_Init+0x268>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a1f      	ldr	r2, [pc, #124]	; (8002eb8 <HAL_GPIO_Init+0x244>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d031      	beq.n	8002ea2 <HAL_GPIO_Init+0x22e>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a1e      	ldr	r2, [pc, #120]	; (8002ebc <HAL_GPIO_Init+0x248>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d02b      	beq.n	8002e9e <HAL_GPIO_Init+0x22a>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a1d      	ldr	r2, [pc, #116]	; (8002ec0 <HAL_GPIO_Init+0x24c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d025      	beq.n	8002e9a <HAL_GPIO_Init+0x226>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a1c      	ldr	r2, [pc, #112]	; (8002ec4 <HAL_GPIO_Init+0x250>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d01f      	beq.n	8002e96 <HAL_GPIO_Init+0x222>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a1b      	ldr	r2, [pc, #108]	; (8002ec8 <HAL_GPIO_Init+0x254>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d019      	beq.n	8002e92 <HAL_GPIO_Init+0x21e>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a1a      	ldr	r2, [pc, #104]	; (8002ecc <HAL_GPIO_Init+0x258>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d013      	beq.n	8002e8e <HAL_GPIO_Init+0x21a>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a19      	ldr	r2, [pc, #100]	; (8002ed0 <HAL_GPIO_Init+0x25c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d00d      	beq.n	8002e8a <HAL_GPIO_Init+0x216>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a18      	ldr	r2, [pc, #96]	; (8002ed4 <HAL_GPIO_Init+0x260>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d007      	beq.n	8002e86 <HAL_GPIO_Init+0x212>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a17      	ldr	r2, [pc, #92]	; (8002ed8 <HAL_GPIO_Init+0x264>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d101      	bne.n	8002e82 <HAL_GPIO_Init+0x20e>
 8002e7e:	2309      	movs	r3, #9
 8002e80:	e02d      	b.n	8002ede <HAL_GPIO_Init+0x26a>
 8002e82:	230a      	movs	r3, #10
 8002e84:	e02b      	b.n	8002ede <HAL_GPIO_Init+0x26a>
 8002e86:	2308      	movs	r3, #8
 8002e88:	e029      	b.n	8002ede <HAL_GPIO_Init+0x26a>
 8002e8a:	2307      	movs	r3, #7
 8002e8c:	e027      	b.n	8002ede <HAL_GPIO_Init+0x26a>
 8002e8e:	2306      	movs	r3, #6
 8002e90:	e025      	b.n	8002ede <HAL_GPIO_Init+0x26a>
 8002e92:	2305      	movs	r3, #5
 8002e94:	e023      	b.n	8002ede <HAL_GPIO_Init+0x26a>
 8002e96:	2304      	movs	r3, #4
 8002e98:	e021      	b.n	8002ede <HAL_GPIO_Init+0x26a>
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e01f      	b.n	8002ede <HAL_GPIO_Init+0x26a>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e01d      	b.n	8002ede <HAL_GPIO_Init+0x26a>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e01b      	b.n	8002ede <HAL_GPIO_Init+0x26a>
 8002ea6:	bf00      	nop
 8002ea8:	58000080 	.word	0x58000080
 8002eac:	58024400 	.word	0x58024400
 8002eb0:	58000400 	.word	0x58000400
 8002eb4:	58020000 	.word	0x58020000
 8002eb8:	58020400 	.word	0x58020400
 8002ebc:	58020800 	.word	0x58020800
 8002ec0:	58020c00 	.word	0x58020c00
 8002ec4:	58021000 	.word	0x58021000
 8002ec8:	58021400 	.word	0x58021400
 8002ecc:	58021800 	.word	0x58021800
 8002ed0:	58021c00 	.word	0x58021c00
 8002ed4:	58022000 	.word	0x58022000
 8002ed8:	58022400 	.word	0x58022400
 8002edc:	2300      	movs	r3, #0
 8002ede:	69fa      	ldr	r2, [r7, #28]
 8002ee0:	f002 0203 	and.w	r2, r2, #3
 8002ee4:	0092      	lsls	r2, r2, #2
 8002ee6:	4093      	lsls	r3, r2
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002eee:	4938      	ldr	r1, [pc, #224]	; (8002fd0 <HAL_GPIO_Init+0x35c>)
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	089b      	lsrs	r3, r3, #2
 8002ef4:	3302      	adds	r3, #2
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	43db      	mvns	r3, r3
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4013      	ands	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002f76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002fa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f47f ae63 	bne.w	8002c88 <HAL_GPIO_Init+0x14>
  }
}
 8002fc2:	bf00      	nop
 8002fc4:	bf00      	nop
 8002fc6:	3724      	adds	r7, #36	; 0x24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	58000400 	.word	0x58000400

08002fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	807b      	strh	r3, [r7, #2]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fe4:	787b      	ldrb	r3, [r7, #1]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fea:	887a      	ldrh	r2, [r7, #2]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002ff0:	e003      	b.n	8002ffa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ff2:	887b      	ldrh	r3, [r7, #2]
 8002ff4:	041a      	lsls	r2, r3, #16
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	619a      	str	r2, [r3, #24]
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
	...

08003008 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003010:	4a08      	ldr	r2, [pc, #32]	; (8003034 <HAL_HSEM_FastTake+0x2c>)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3320      	adds	r3, #32
 8003016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800301a:	4a07      	ldr	r2, [pc, #28]	; (8003038 <HAL_HSEM_FastTake+0x30>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d101      	bne.n	8003024 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	e000      	b.n	8003026 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
}
 8003026:	4618      	mov	r0, r3
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	58026400 	.word	0x58026400
 8003038:	80000300 	.word	0x80000300

0800303c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003046:	4906      	ldr	r1, [pc, #24]	; (8003060 <HAL_HSEM_Release+0x24>)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	58026400 	.word	0x58026400

08003064 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 800306c:	4b05      	ldr	r3, [pc, #20]	; (8003084 <HAL_HSEM_ActivateNotification+0x20>)
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	4904      	ldr	r1, [pc, #16]	; (8003084 <HAL_HSEM_ActivateNotification+0x20>)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4313      	orrs	r3, r2
 8003076:	600b      	str	r3, [r1, #0]
#endif
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	58026500 	.word	0x58026500

08003088 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800308e:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <HAL_HSEM_IRQHandler+0x30>)
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003094:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <HAL_HSEM_IRQHandler+0x30>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	43db      	mvns	r3, r3
 800309c:	4906      	ldr	r1, [pc, #24]	; (80030b8 <HAL_HSEM_IRQHandler+0x30>)
 800309e:	4013      	ands	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80030a2:	4a05      	ldr	r2, [pc, #20]	; (80030b8 <HAL_HSEM_IRQHandler+0x30>)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f00a f881 	bl	800d1b0 <HAL_HSEM_FreeCallback>
}
 80030ae:	bf00      	nop
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	58026500 	.word	0x58026500

080030bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e07f      	b.n	80031ce <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d106      	bne.n	80030e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fe f80a 	bl	80010fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2224      	movs	r2, #36	; 0x24
 80030ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0201 	bic.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800310c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800311c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d107      	bne.n	8003136 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003132:	609a      	str	r2, [r3, #8]
 8003134:	e006      	b.n	8003144 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003142:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d104      	bne.n	8003156 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003154:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4b1d      	ldr	r3, [pc, #116]	; (80031d8 <HAL_I2C_Init+0x11c>)
 8003162:	430b      	orrs	r3, r1
 8003164:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003174:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691a      	ldr	r2, [r3, #16]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	ea42 0103 	orr.w	r1, r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	021a      	lsls	r2, r3, #8
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	69d9      	ldr	r1, [r3, #28]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a1a      	ldr	r2, [r3, #32]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0201 	orr.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2220      	movs	r2, #32
 80031ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	02008000 	.word	0x02008000

080031dc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	68f9      	ldr	r1, [r7, #12]
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	4798      	blx	r3
  }
}
 8003208:	bf00      	nop
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b20      	cmp	r3, #32
 8003224:	d138      	bne.n	8003298 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003230:	2302      	movs	r3, #2
 8003232:	e032      	b.n	800329a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2224      	movs	r2, #36	; 0x24
 8003240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0201 	bic.w	r2, r2, #1
 8003252:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003262:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6819      	ldr	r1, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0201 	orr.w	r2, r2, #1
 8003282:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2220      	movs	r2, #32
 8003288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	e000      	b.n	800329a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003298:	2302      	movs	r3, #2
  }
}
 800329a:	4618      	mov	r0, r3
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b085      	sub	sp, #20
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b20      	cmp	r3, #32
 80032ba:	d139      	bne.n	8003330 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e033      	b.n	8003332 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2224      	movs	r2, #36	; 0x24
 80032d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0201 	bic.w	r2, r2, #1
 80032e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	021b      	lsls	r3, r3, #8
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4313      	orrs	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	e000      	b.n	8003332 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003330:	2302      	movs	r3, #2
  }
}
 8003332:	4618      	mov	r0, r3
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800333e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003340:	b08f      	sub	sp, #60	; 0x3c
 8003342:	af0a      	add	r7, sp, #40	; 0x28
 8003344:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e116      	b.n	800357e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d106      	bne.n	8003370 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7fe fd38 	bl	8001de0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2203      	movs	r2, #3
 8003374:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003380:	2b00      	cmp	r3, #0
 8003382:	d102      	bne.n	800338a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f004 fff4 	bl	800837c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	603b      	str	r3, [r7, #0]
 800339a:	687e      	ldr	r6, [r7, #4]
 800339c:	466d      	mov	r5, sp
 800339e:	f106 0410 	add.w	r4, r6, #16
 80033a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80033b2:	1d33      	adds	r3, r6, #4
 80033b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033b6:	6838      	ldr	r0, [r7, #0]
 80033b8:	f004 ff72 	bl	80082a0 <USB_CoreInit>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d005      	beq.n	80033ce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2202      	movs	r2, #2
 80033c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e0d7      	b.n	800357e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2100      	movs	r1, #0
 80033d4:	4618      	mov	r0, r3
 80033d6:	f004 ffe2 	bl	800839e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033da:	2300      	movs	r3, #0
 80033dc:	73fb      	strb	r3, [r7, #15]
 80033de:	e04a      	b.n	8003476 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033e0:	7bfa      	ldrb	r2, [r7, #15]
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	4613      	mov	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	1a9b      	subs	r3, r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	333d      	adds	r3, #61	; 0x3d
 80033f0:	2201      	movs	r2, #1
 80033f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033f4:	7bfa      	ldrb	r2, [r7, #15]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	1a9b      	subs	r3, r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	333c      	adds	r3, #60	; 0x3c
 8003404:	7bfa      	ldrb	r2, [r7, #15]
 8003406:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003408:	7bfa      	ldrb	r2, [r7, #15]
 800340a:	7bfb      	ldrb	r3, [r7, #15]
 800340c:	b298      	uxth	r0, r3
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	3342      	adds	r3, #66	; 0x42
 800341c:	4602      	mov	r2, r0
 800341e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003420:	7bfa      	ldrb	r2, [r7, #15]
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	333f      	adds	r3, #63	; 0x3f
 8003430:	2200      	movs	r2, #0
 8003432:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003434:	7bfa      	ldrb	r2, [r7, #15]
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	1a9b      	subs	r3, r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	3344      	adds	r3, #68	; 0x44
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003448:	7bfa      	ldrb	r2, [r7, #15]
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	3348      	adds	r3, #72	; 0x48
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800345c:	7bfa      	ldrb	r2, [r7, #15]
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	1a9b      	subs	r3, r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	3350      	adds	r3, #80	; 0x50
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	3301      	adds	r3, #1
 8003474:	73fb      	strb	r3, [r7, #15]
 8003476:	7bfa      	ldrb	r2, [r7, #15]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	429a      	cmp	r2, r3
 800347e:	d3af      	bcc.n	80033e0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003480:	2300      	movs	r3, #0
 8003482:	73fb      	strb	r3, [r7, #15]
 8003484:	e044      	b.n	8003510 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003486:	7bfa      	ldrb	r2, [r7, #15]
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	1a9b      	subs	r3, r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	440b      	add	r3, r1
 8003494:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003498:	2200      	movs	r2, #0
 800349a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800349c:	7bfa      	ldrb	r2, [r7, #15]
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80034ae:	7bfa      	ldrb	r2, [r7, #15]
 80034b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034b2:	7bfa      	ldrb	r2, [r7, #15]
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	1a9b      	subs	r3, r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80034c4:	2200      	movs	r2, #0
 80034c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034c8:	7bfa      	ldrb	r2, [r7, #15]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034de:	7bfa      	ldrb	r2, [r7, #15]
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	1a9b      	subs	r3, r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	440b      	add	r3, r1
 80034ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034f4:	7bfa      	ldrb	r2, [r7, #15]
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	1a9b      	subs	r3, r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800350a:	7bfb      	ldrb	r3, [r7, #15]
 800350c:	3301      	adds	r3, #1
 800350e:	73fb      	strb	r3, [r7, #15]
 8003510:	7bfa      	ldrb	r2, [r7, #15]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	429a      	cmp	r2, r3
 8003518:	d3b5      	bcc.n	8003486 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	687e      	ldr	r6, [r7, #4]
 8003522:	466d      	mov	r5, sp
 8003524:	f106 0410 	add.w	r4, r6, #16
 8003528:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800352a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800352c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800352e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003530:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003534:	e885 0003 	stmia.w	r5, {r0, r1}
 8003538:	1d33      	adds	r3, r6, #4
 800353a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800353c:	6838      	ldr	r0, [r7, #0]
 800353e:	f004 ff59 	bl	80083f4 <USB_DevInit>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d005      	beq.n	8003554 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e014      	b.n	800357e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	2b01      	cmp	r3, #1
 800356a:	d102      	bne.n	8003572 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f80b 	bl	8003588 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f005 f8fb 	bl	8008772 <USB_DevDisconnect>

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003588 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035b6:	4b05      	ldr	r3, [pc, #20]	; (80035cc <HAL_PCDEx_ActivateLPM+0x44>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr
 80035cc:	10000003 	.word	0x10000003

080035d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80035d8:	4b29      	ldr	r3, [pc, #164]	; (8003680 <HAL_PWREx_ConfigSupply+0xb0>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	2b06      	cmp	r3, #6
 80035e2:	d00a      	beq.n	80035fa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80035e4:	4b26      	ldr	r3, [pc, #152]	; (8003680 <HAL_PWREx_ConfigSupply+0xb0>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d001      	beq.n	80035f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e040      	b.n	8003678 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80035f6:	2300      	movs	r3, #0
 80035f8:	e03e      	b.n	8003678 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80035fa:	4b21      	ldr	r3, [pc, #132]	; (8003680 <HAL_PWREx_ConfigSupply+0xb0>)
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003602:	491f      	ldr	r1, [pc, #124]	; (8003680 <HAL_PWREx_ConfigSupply+0xb0>)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4313      	orrs	r3, r2
 8003608:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800360a:	f7fe fd41 	bl	8002090 <HAL_GetTick>
 800360e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003610:	e009      	b.n	8003626 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003612:	f7fe fd3d 	bl	8002090 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003620:	d901      	bls.n	8003626 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e028      	b.n	8003678 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003626:	4b16      	ldr	r3, [pc, #88]	; (8003680 <HAL_PWREx_ConfigSupply+0xb0>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800362e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003632:	d1ee      	bne.n	8003612 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b1e      	cmp	r3, #30
 8003638:	d008      	beq.n	800364c <HAL_PWREx_ConfigSupply+0x7c>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b2e      	cmp	r3, #46	; 0x2e
 800363e:	d005      	beq.n	800364c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b1d      	cmp	r3, #29
 8003644:	d002      	beq.n	800364c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b2d      	cmp	r3, #45	; 0x2d
 800364a:	d114      	bne.n	8003676 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800364c:	f7fe fd20 	bl	8002090 <HAL_GetTick>
 8003650:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003652:	e009      	b.n	8003668 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003654:	f7fe fd1c 	bl	8002090 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003662:	d901      	bls.n	8003668 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e007      	b.n	8003678 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003668:	4b05      	ldr	r3, [pc, #20]	; (8003680 <HAL_PWREx_ConfigSupply+0xb0>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003674:	d1ee      	bne.n	8003654 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	58024800 	.word	0x58024800

08003684 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003688:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	4a04      	ldr	r2, [pc, #16]	; (80036a0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800368e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003692:	60d3      	str	r3, [r2, #12]
}
 8003694:	bf00      	nop
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	58024800 	.word	0x58024800

080036a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08c      	sub	sp, #48	; 0x30
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e3ff      	b.n	8003eb6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 8087 	beq.w	80037d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036c4:	4b99      	ldr	r3, [pc, #612]	; (800392c <HAL_RCC_OscConfig+0x288>)
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036ce:	4b97      	ldr	r3, [pc, #604]	; (800392c <HAL_RCC_OscConfig+0x288>)
 80036d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80036d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d6:	2b10      	cmp	r3, #16
 80036d8:	d007      	beq.n	80036ea <HAL_RCC_OscConfig+0x46>
 80036da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036dc:	2b18      	cmp	r3, #24
 80036de:	d110      	bne.n	8003702 <HAL_RCC_OscConfig+0x5e>
 80036e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d10b      	bne.n	8003702 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ea:	4b90      	ldr	r3, [pc, #576]	; (800392c <HAL_RCC_OscConfig+0x288>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d06c      	beq.n	80037d0 <HAL_RCC_OscConfig+0x12c>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d168      	bne.n	80037d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e3d9      	b.n	8003eb6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800370a:	d106      	bne.n	800371a <HAL_RCC_OscConfig+0x76>
 800370c:	4b87      	ldr	r3, [pc, #540]	; (800392c <HAL_RCC_OscConfig+0x288>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a86      	ldr	r2, [pc, #536]	; (800392c <HAL_RCC_OscConfig+0x288>)
 8003712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003716:	6013      	str	r3, [r2, #0]
 8003718:	e02e      	b.n	8003778 <HAL_RCC_OscConfig+0xd4>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10c      	bne.n	800373c <HAL_RCC_OscConfig+0x98>
 8003722:	4b82      	ldr	r3, [pc, #520]	; (800392c <HAL_RCC_OscConfig+0x288>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a81      	ldr	r2, [pc, #516]	; (800392c <HAL_RCC_OscConfig+0x288>)
 8003728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	4b7f      	ldr	r3, [pc, #508]	; (800392c <HAL_RCC_OscConfig+0x288>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a7e      	ldr	r2, [pc, #504]	; (800392c <HAL_RCC_OscConfig+0x288>)
 8003734:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	e01d      	b.n	8003778 <HAL_RCC_OscConfig+0xd4>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003744:	d10c      	bne.n	8003760 <HAL_RCC_OscConfig+0xbc>
 8003746:	4b79      	ldr	r3, [pc, #484]	; (800392c <HAL_RCC_OscConfig+0x288>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a78      	ldr	r2, [pc, #480]	; (800392c <HAL_RCC_OscConfig+0x288>)
 800374c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	4b76      	ldr	r3, [pc, #472]	; (800392c <HAL_RCC_OscConfig+0x288>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a75      	ldr	r2, [pc, #468]	; (800392c <HAL_RCC_OscConfig+0x288>)
 8003758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	e00b      	b.n	8003778 <HAL_RCC_OscConfig+0xd4>
 8003760:	4b72      	ldr	r3, [pc, #456]	; (800392c <HAL_RCC_OscConfig+0x288>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a71      	ldr	r2, [pc, #452]	; (800392c <HAL_RCC_OscConfig+0x288>)
 8003766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	4b6f      	ldr	r3, [pc, #444]	; (800392c <HAL_RCC_OscConfig+0x288>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a6e      	ldr	r2, [pc, #440]	; (800392c <HAL_RCC_OscConfig+0x288>)
 8003772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d013      	beq.n	80037a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003780:	f7fe fc86 	bl	8002090 <HAL_GetTick>
 8003784:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003788:	f7fe fc82 	bl	8002090 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b64      	cmp	r3, #100	; 0x64
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e38d      	b.n	8003eb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800379a:	4b64      	ldr	r3, [pc, #400]	; (800392c <HAL_RCC_OscConfig+0x288>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0f0      	beq.n	8003788 <HAL_RCC_OscConfig+0xe4>
 80037a6:	e014      	b.n	80037d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a8:	f7fe fc72 	bl	8002090 <HAL_GetTick>
 80037ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037b0:	f7fe fc6e 	bl	8002090 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b64      	cmp	r3, #100	; 0x64
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e379      	b.n	8003eb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037c2:	4b5a      	ldr	r3, [pc, #360]	; (800392c <HAL_RCC_OscConfig+0x288>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f0      	bne.n	80037b0 <HAL_RCC_OscConfig+0x10c>
 80037ce:	e000      	b.n	80037d2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 80ae 	beq.w	800393c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037e0:	4b52      	ldr	r3, [pc, #328]	; (800392c <HAL_RCC_OscConfig+0x288>)
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037ea:	4b50      	ldr	r3, [pc, #320]	; (800392c <HAL_RCC_OscConfig+0x288>)
 80037ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ee:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d007      	beq.n	8003806 <HAL_RCC_OscConfig+0x162>
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	2b18      	cmp	r3, #24
 80037fa:	d13a      	bne.n	8003872 <HAL_RCC_OscConfig+0x1ce>
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d135      	bne.n	8003872 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003806:	4b49      	ldr	r3, [pc, #292]	; (800392c <HAL_RCC_OscConfig+0x288>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0304 	and.w	r3, r3, #4
 800380e:	2b00      	cmp	r3, #0
 8003810:	d005      	beq.n	800381e <HAL_RCC_OscConfig+0x17a>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e34b      	b.n	8003eb6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800381e:	f7fe fc67 	bl	80020f0 <HAL_GetREVID>
 8003822:	4603      	mov	r3, r0
 8003824:	f241 0203 	movw	r2, #4099	; 0x1003
 8003828:	4293      	cmp	r3, r2
 800382a:	d817      	bhi.n	800385c <HAL_RCC_OscConfig+0x1b8>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	2b40      	cmp	r3, #64	; 0x40
 8003832:	d108      	bne.n	8003846 <HAL_RCC_OscConfig+0x1a2>
 8003834:	4b3d      	ldr	r3, [pc, #244]	; (800392c <HAL_RCC_OscConfig+0x288>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800383c:	4a3b      	ldr	r2, [pc, #236]	; (800392c <HAL_RCC_OscConfig+0x288>)
 800383e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003842:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003844:	e07a      	b.n	800393c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003846:	4b39      	ldr	r3, [pc, #228]	; (800392c <HAL_RCC_OscConfig+0x288>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	031b      	lsls	r3, r3, #12
 8003854:	4935      	ldr	r1, [pc, #212]	; (800392c <HAL_RCC_OscConfig+0x288>)
 8003856:	4313      	orrs	r3, r2
 8003858:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800385a:	e06f      	b.n	800393c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800385c:	4b33      	ldr	r3, [pc, #204]	; (800392c <HAL_RCC_OscConfig+0x288>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	061b      	lsls	r3, r3, #24
 800386a:	4930      	ldr	r1, [pc, #192]	; (800392c <HAL_RCC_OscConfig+0x288>)
 800386c:	4313      	orrs	r3, r2
 800386e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003870:	e064      	b.n	800393c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d045      	beq.n	8003906 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800387a:	4b2c      	ldr	r3, [pc, #176]	; (800392c <HAL_RCC_OscConfig+0x288>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f023 0219 	bic.w	r2, r3, #25
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	4929      	ldr	r1, [pc, #164]	; (800392c <HAL_RCC_OscConfig+0x288>)
 8003888:	4313      	orrs	r3, r2
 800388a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388c:	f7fe fc00 	bl	8002090 <HAL_GetTick>
 8003890:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003894:	f7fe fbfc 	bl	8002090 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e307      	b.n	8003eb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038a6:	4b21      	ldr	r3, [pc, #132]	; (800392c <HAL_RCC_OscConfig+0x288>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0f0      	beq.n	8003894 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b2:	f7fe fc1d 	bl	80020f0 <HAL_GetREVID>
 80038b6:	4603      	mov	r3, r0
 80038b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80038bc:	4293      	cmp	r3, r2
 80038be:	d817      	bhi.n	80038f0 <HAL_RCC_OscConfig+0x24c>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	2b40      	cmp	r3, #64	; 0x40
 80038c6:	d108      	bne.n	80038da <HAL_RCC_OscConfig+0x236>
 80038c8:	4b18      	ldr	r3, [pc, #96]	; (800392c <HAL_RCC_OscConfig+0x288>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80038d0:	4a16      	ldr	r2, [pc, #88]	; (800392c <HAL_RCC_OscConfig+0x288>)
 80038d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038d6:	6053      	str	r3, [r2, #4]
 80038d8:	e030      	b.n	800393c <HAL_RCC_OscConfig+0x298>
 80038da:	4b14      	ldr	r3, [pc, #80]	; (800392c <HAL_RCC_OscConfig+0x288>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	031b      	lsls	r3, r3, #12
 80038e8:	4910      	ldr	r1, [pc, #64]	; (800392c <HAL_RCC_OscConfig+0x288>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	604b      	str	r3, [r1, #4]
 80038ee:	e025      	b.n	800393c <HAL_RCC_OscConfig+0x298>
 80038f0:	4b0e      	ldr	r3, [pc, #56]	; (800392c <HAL_RCC_OscConfig+0x288>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	061b      	lsls	r3, r3, #24
 80038fe:	490b      	ldr	r1, [pc, #44]	; (800392c <HAL_RCC_OscConfig+0x288>)
 8003900:	4313      	orrs	r3, r2
 8003902:	604b      	str	r3, [r1, #4]
 8003904:	e01a      	b.n	800393c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003906:	4b09      	ldr	r3, [pc, #36]	; (800392c <HAL_RCC_OscConfig+0x288>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a08      	ldr	r2, [pc, #32]	; (800392c <HAL_RCC_OscConfig+0x288>)
 800390c:	f023 0301 	bic.w	r3, r3, #1
 8003910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003912:	f7fe fbbd 	bl	8002090 <HAL_GetTick>
 8003916:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003918:	e00a      	b.n	8003930 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800391a:	f7fe fbb9 	bl	8002090 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d903      	bls.n	8003930 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e2c4      	b.n	8003eb6 <HAL_RCC_OscConfig+0x812>
 800392c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003930:	4ba4      	ldr	r3, [pc, #656]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1ee      	bne.n	800391a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0310 	and.w	r3, r3, #16
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 80a9 	beq.w	8003a9c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800394a:	4b9e      	ldr	r3, [pc, #632]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003952:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003954:	4b9b      	ldr	r3, [pc, #620]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 8003956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003958:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	2b08      	cmp	r3, #8
 800395e:	d007      	beq.n	8003970 <HAL_RCC_OscConfig+0x2cc>
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	2b18      	cmp	r3, #24
 8003964:	d13a      	bne.n	80039dc <HAL_RCC_OscConfig+0x338>
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	2b01      	cmp	r3, #1
 800396e:	d135      	bne.n	80039dc <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003970:	4b94      	ldr	r3, [pc, #592]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <HAL_RCC_OscConfig+0x2e4>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	2b80      	cmp	r3, #128	; 0x80
 8003982:	d001      	beq.n	8003988 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e296      	b.n	8003eb6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003988:	f7fe fbb2 	bl	80020f0 <HAL_GetREVID>
 800398c:	4603      	mov	r3, r0
 800398e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003992:	4293      	cmp	r3, r2
 8003994:	d817      	bhi.n	80039c6 <HAL_RCC_OscConfig+0x322>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	2b20      	cmp	r3, #32
 800399c:	d108      	bne.n	80039b0 <HAL_RCC_OscConfig+0x30c>
 800399e:	4b89      	ldr	r3, [pc, #548]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80039a6:	4a87      	ldr	r2, [pc, #540]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 80039a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039ac:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039ae:	e075      	b.n	8003a9c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039b0:	4b84      	ldr	r3, [pc, #528]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	069b      	lsls	r3, r3, #26
 80039be:	4981      	ldr	r1, [pc, #516]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039c4:	e06a      	b.n	8003a9c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039c6:	4b7f      	ldr	r3, [pc, #508]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	061b      	lsls	r3, r3, #24
 80039d4:	497b      	ldr	r1, [pc, #492]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039da:	e05f      	b.n	8003a9c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d042      	beq.n	8003a6a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80039e4:	4b77      	ldr	r3, [pc, #476]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a76      	ldr	r2, [pc, #472]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 80039ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f0:	f7fe fb4e 	bl	8002090 <HAL_GetTick>
 80039f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80039f8:	f7fe fb4a 	bl	8002090 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e255      	b.n	8003eb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a0a:	4b6e      	ldr	r3, [pc, #440]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0f0      	beq.n	80039f8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a16:	f7fe fb6b 	bl	80020f0 <HAL_GetREVID>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d817      	bhi.n	8003a54 <HAL_RCC_OscConfig+0x3b0>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	2b20      	cmp	r3, #32
 8003a2a:	d108      	bne.n	8003a3e <HAL_RCC_OscConfig+0x39a>
 8003a2c:	4b65      	ldr	r3, [pc, #404]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003a34:	4a63      	ldr	r2, [pc, #396]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 8003a36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a3a:	6053      	str	r3, [r2, #4]
 8003a3c:	e02e      	b.n	8003a9c <HAL_RCC_OscConfig+0x3f8>
 8003a3e:	4b61      	ldr	r3, [pc, #388]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	069b      	lsls	r3, r3, #26
 8003a4c:	495d      	ldr	r1, [pc, #372]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	604b      	str	r3, [r1, #4]
 8003a52:	e023      	b.n	8003a9c <HAL_RCC_OscConfig+0x3f8>
 8003a54:	4b5b      	ldr	r3, [pc, #364]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	061b      	lsls	r3, r3, #24
 8003a62:	4958      	ldr	r1, [pc, #352]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60cb      	str	r3, [r1, #12]
 8003a68:	e018      	b.n	8003a9c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003a6a:	4b56      	ldr	r3, [pc, #344]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a55      	ldr	r2, [pc, #340]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 8003a70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a76:	f7fe fb0b 	bl	8002090 <HAL_GetTick>
 8003a7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003a7e:	f7fe fb07 	bl	8002090 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e212      	b.n	8003eb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a90:	4b4c      	ldr	r3, [pc, #304]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1f0      	bne.n	8003a7e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0308 	and.w	r3, r3, #8
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d036      	beq.n	8003b16 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d019      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ab0:	4b44      	ldr	r3, [pc, #272]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 8003ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab4:	4a43      	ldr	r2, [pc, #268]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003abc:	f7fe fae8 	bl	8002090 <HAL_GetTick>
 8003ac0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ac4:	f7fe fae4 	bl	8002090 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e1ef      	b.n	8003eb6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ad6:	4b3b      	ldr	r3, [pc, #236]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 8003ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x420>
 8003ae2:	e018      	b.n	8003b16 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ae4:	4b37      	ldr	r3, [pc, #220]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 8003ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae8:	4a36      	ldr	r2, [pc, #216]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 8003aea:	f023 0301 	bic.w	r3, r3, #1
 8003aee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af0:	f7fe face 	bl	8002090 <HAL_GetTick>
 8003af4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003af8:	f7fe faca 	bl	8002090 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e1d5      	b.n	8003eb6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b0a:	4b2e      	ldr	r3, [pc, #184]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 8003b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0320 	and.w	r3, r3, #32
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d036      	beq.n	8003b90 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d019      	beq.n	8003b5e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b2a:	4b26      	ldr	r3, [pc, #152]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a25      	ldr	r2, [pc, #148]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 8003b30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b34:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b36:	f7fe faab 	bl	8002090 <HAL_GetTick>
 8003b3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b3e:	f7fe faa7 	bl	8002090 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e1b2      	b.n	8003eb6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b50:	4b1c      	ldr	r3, [pc, #112]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0f0      	beq.n	8003b3e <HAL_RCC_OscConfig+0x49a>
 8003b5c:	e018      	b.n	8003b90 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b5e:	4b19      	ldr	r3, [pc, #100]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a18      	ldr	r2, [pc, #96]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 8003b64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b6a:	f7fe fa91 	bl	8002090 <HAL_GetTick>
 8003b6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b72:	f7fe fa8d 	bl	8002090 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e198      	b.n	8003eb6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b84:	4b0f      	ldr	r3, [pc, #60]	; (8003bc4 <HAL_RCC_OscConfig+0x520>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1f0      	bne.n	8003b72 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 8085 	beq.w	8003ca8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b9e:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <HAL_RCC_OscConfig+0x524>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a09      	ldr	r2, [pc, #36]	; (8003bc8 <HAL_RCC_OscConfig+0x524>)
 8003ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003baa:	f7fe fa71 	bl	8002090 <HAL_GetTick>
 8003bae:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bb0:	e00c      	b.n	8003bcc <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003bb2:	f7fe fa6d 	bl	8002090 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b64      	cmp	r3, #100	; 0x64
 8003bbe:	d905      	bls.n	8003bcc <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e178      	b.n	8003eb6 <HAL_RCC_OscConfig+0x812>
 8003bc4:	58024400 	.word	0x58024400
 8003bc8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bcc:	4b96      	ldr	r3, [pc, #600]	; (8003e28 <HAL_RCC_OscConfig+0x784>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0ec      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d106      	bne.n	8003bee <HAL_RCC_OscConfig+0x54a>
 8003be0:	4b92      	ldr	r3, [pc, #584]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be4:	4a91      	ldr	r2, [pc, #580]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003be6:	f043 0301 	orr.w	r3, r3, #1
 8003bea:	6713      	str	r3, [r2, #112]	; 0x70
 8003bec:	e02d      	b.n	8003c4a <HAL_RCC_OscConfig+0x5a6>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10c      	bne.n	8003c10 <HAL_RCC_OscConfig+0x56c>
 8003bf6:	4b8d      	ldr	r3, [pc, #564]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfa:	4a8c      	ldr	r2, [pc, #560]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003bfc:	f023 0301 	bic.w	r3, r3, #1
 8003c00:	6713      	str	r3, [r2, #112]	; 0x70
 8003c02:	4b8a      	ldr	r3, [pc, #552]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c06:	4a89      	ldr	r2, [pc, #548]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003c08:	f023 0304 	bic.w	r3, r3, #4
 8003c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c0e:	e01c      	b.n	8003c4a <HAL_RCC_OscConfig+0x5a6>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	2b05      	cmp	r3, #5
 8003c16:	d10c      	bne.n	8003c32 <HAL_RCC_OscConfig+0x58e>
 8003c18:	4b84      	ldr	r3, [pc, #528]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1c:	4a83      	ldr	r2, [pc, #524]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003c1e:	f043 0304 	orr.w	r3, r3, #4
 8003c22:	6713      	str	r3, [r2, #112]	; 0x70
 8003c24:	4b81      	ldr	r3, [pc, #516]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c28:	4a80      	ldr	r2, [pc, #512]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003c2a:	f043 0301 	orr.w	r3, r3, #1
 8003c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c30:	e00b      	b.n	8003c4a <HAL_RCC_OscConfig+0x5a6>
 8003c32:	4b7e      	ldr	r3, [pc, #504]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c36:	4a7d      	ldr	r2, [pc, #500]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003c38:	f023 0301 	bic.w	r3, r3, #1
 8003c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c3e:	4b7b      	ldr	r3, [pc, #492]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c42:	4a7a      	ldr	r2, [pc, #488]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003c44:	f023 0304 	bic.w	r3, r3, #4
 8003c48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d015      	beq.n	8003c7e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c52:	f7fe fa1d 	bl	8002090 <HAL_GetTick>
 8003c56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c58:	e00a      	b.n	8003c70 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c5a:	f7fe fa19 	bl	8002090 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e122      	b.n	8003eb6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c70:	4b6e      	ldr	r3, [pc, #440]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0ee      	beq.n	8003c5a <HAL_RCC_OscConfig+0x5b6>
 8003c7c:	e014      	b.n	8003ca8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7e:	f7fe fa07 	bl	8002090 <HAL_GetTick>
 8003c82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c84:	e00a      	b.n	8003c9c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c86:	f7fe fa03 	bl	8002090 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e10c      	b.n	8003eb6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c9c:	4b63      	ldr	r3, [pc, #396]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1ee      	bne.n	8003c86 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 8101 	beq.w	8003eb4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003cb2:	4b5e      	ldr	r3, [pc, #376]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cba:	2b18      	cmp	r3, #24
 8003cbc:	f000 80bc 	beq.w	8003e38 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	f040 8095 	bne.w	8003df4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cca:	4b58      	ldr	r3, [pc, #352]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a57      	ldr	r2, [pc, #348]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003cd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd6:	f7fe f9db 	bl	8002090 <HAL_GetTick>
 8003cda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cde:	f7fe f9d7 	bl	8002090 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e0e2      	b.n	8003eb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cf0:	4b4e      	ldr	r3, [pc, #312]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1f0      	bne.n	8003cde <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cfc:	4b4b      	ldr	r3, [pc, #300]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003cfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d00:	4b4b      	ldr	r3, [pc, #300]	; (8003e30 <HAL_RCC_OscConfig+0x78c>)
 8003d02:	4013      	ands	r3, r2
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d0c:	0112      	lsls	r2, r2, #4
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	4946      	ldr	r1, [pc, #280]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	628b      	str	r3, [r1, #40]	; 0x28
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d24:	3b01      	subs	r3, #1
 8003d26:	025b      	lsls	r3, r3, #9
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d30:	3b01      	subs	r3, #1
 8003d32:	041b      	lsls	r3, r3, #16
 8003d34:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	061b      	lsls	r3, r3, #24
 8003d42:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d46:	4939      	ldr	r1, [pc, #228]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003d4c:	4b37      	ldr	r3, [pc, #220]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d50:	4a36      	ldr	r2, [pc, #216]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003d52:	f023 0301 	bic.w	r3, r3, #1
 8003d56:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d58:	4b34      	ldr	r3, [pc, #208]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003d5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d5c:	4b35      	ldr	r3, [pc, #212]	; (8003e34 <HAL_RCC_OscConfig+0x790>)
 8003d5e:	4013      	ands	r3, r2
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d64:	00d2      	lsls	r2, r2, #3
 8003d66:	4931      	ldr	r1, [pc, #196]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d6c:	4b2f      	ldr	r3, [pc, #188]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	f023 020c 	bic.w	r2, r3, #12
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	492c      	ldr	r1, [pc, #176]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003d7e:	4b2b      	ldr	r3, [pc, #172]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d82:	f023 0202 	bic.w	r2, r3, #2
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8a:	4928      	ldr	r1, [pc, #160]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d90:	4b26      	ldr	r3, [pc, #152]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	4a25      	ldr	r2, [pc, #148]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d9c:	4b23      	ldr	r3, [pc, #140]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	4a22      	ldr	r2, [pc, #136]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003da2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003da8:	4b20      	ldr	r3, [pc, #128]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	4a1f      	ldr	r2, [pc, #124]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003dae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003db2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003db4:	4b1d      	ldr	r3, [pc, #116]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db8:	4a1c      	ldr	r2, [pc, #112]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003dba:	f043 0301 	orr.w	r3, r3, #1
 8003dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dc0:	4b1a      	ldr	r3, [pc, #104]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a19      	ldr	r2, [pc, #100]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003dc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dcc:	f7fe f960 	bl	8002090 <HAL_GetTick>
 8003dd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd4:	f7fe f95c 	bl	8002090 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e067      	b.n	8003eb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003de6:	4b11      	ldr	r3, [pc, #68]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0f0      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x730>
 8003df2:	e05f      	b.n	8003eb4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df4:	4b0d      	ldr	r3, [pc, #52]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a0c      	ldr	r2, [pc, #48]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003dfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e00:	f7fe f946 	bl	8002090 <HAL_GetTick>
 8003e04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e08:	f7fe f942 	bl	8002090 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e04d      	b.n	8003eb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e1a:	4b04      	ldr	r3, [pc, #16]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1f0      	bne.n	8003e08 <HAL_RCC_OscConfig+0x764>
 8003e26:	e045      	b.n	8003eb4 <HAL_RCC_OscConfig+0x810>
 8003e28:	58024800 	.word	0x58024800
 8003e2c:	58024400 	.word	0x58024400
 8003e30:	fffffc0c 	.word	0xfffffc0c
 8003e34:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003e38:	4b21      	ldr	r3, [pc, #132]	; (8003ec0 <HAL_RCC_OscConfig+0x81c>)
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e3e:	4b20      	ldr	r3, [pc, #128]	; (8003ec0 <HAL_RCC_OscConfig+0x81c>)
 8003e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e42:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d031      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f003 0203 	and.w	r2, r3, #3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d12a      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	091b      	lsrs	r3, r3, #4
 8003e5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d122      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e74:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d11a      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	0a5b      	lsrs	r3, r3, #9
 8003e7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e86:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d111      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	0c1b      	lsrs	r3, r3, #16
 8003e90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e98:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d108      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	0e1b      	lsrs	r3, r3, #24
 8003ea2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eaa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d001      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e000      	b.n	8003eb6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3730      	adds	r7, #48	; 0x30
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	58024400 	.word	0x58024400

08003ec4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e19c      	b.n	8004212 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ed8:	4b8a      	ldr	r3, [pc, #552]	; (8004104 <HAL_RCC_ClockConfig+0x240>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 030f 	and.w	r3, r3, #15
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d910      	bls.n	8003f08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee6:	4b87      	ldr	r3, [pc, #540]	; (8004104 <HAL_RCC_ClockConfig+0x240>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f023 020f 	bic.w	r2, r3, #15
 8003eee:	4985      	ldr	r1, [pc, #532]	; (8004104 <HAL_RCC_ClockConfig+0x240>)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef6:	4b83      	ldr	r3, [pc, #524]	; (8004104 <HAL_RCC_ClockConfig+0x240>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d001      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e184      	b.n	8004212 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d010      	beq.n	8003f36 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691a      	ldr	r2, [r3, #16]
 8003f18:	4b7b      	ldr	r3, [pc, #492]	; (8004108 <HAL_RCC_ClockConfig+0x244>)
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d908      	bls.n	8003f36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f24:	4b78      	ldr	r3, [pc, #480]	; (8004108 <HAL_RCC_ClockConfig+0x244>)
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	4975      	ldr	r1, [pc, #468]	; (8004108 <HAL_RCC_ClockConfig+0x244>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d010      	beq.n	8003f64 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	695a      	ldr	r2, [r3, #20]
 8003f46:	4b70      	ldr	r3, [pc, #448]	; (8004108 <HAL_RCC_ClockConfig+0x244>)
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d908      	bls.n	8003f64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f52:	4b6d      	ldr	r3, [pc, #436]	; (8004108 <HAL_RCC_ClockConfig+0x244>)
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	496a      	ldr	r1, [pc, #424]	; (8004108 <HAL_RCC_ClockConfig+0x244>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0310 	and.w	r3, r3, #16
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d010      	beq.n	8003f92 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	699a      	ldr	r2, [r3, #24]
 8003f74:	4b64      	ldr	r3, [pc, #400]	; (8004108 <HAL_RCC_ClockConfig+0x244>)
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d908      	bls.n	8003f92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f80:	4b61      	ldr	r3, [pc, #388]	; (8004108 <HAL_RCC_ClockConfig+0x244>)
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	495e      	ldr	r1, [pc, #376]	; (8004108 <HAL_RCC_ClockConfig+0x244>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0320 	and.w	r3, r3, #32
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d010      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	69da      	ldr	r2, [r3, #28]
 8003fa2:	4b59      	ldr	r3, [pc, #356]	; (8004108 <HAL_RCC_ClockConfig+0x244>)
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d908      	bls.n	8003fc0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003fae:	4b56      	ldr	r3, [pc, #344]	; (8004108 <HAL_RCC_ClockConfig+0x244>)
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	4953      	ldr	r1, [pc, #332]	; (8004108 <HAL_RCC_ClockConfig+0x244>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d010      	beq.n	8003fee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	4b4d      	ldr	r3, [pc, #308]	; (8004108 <HAL_RCC_ClockConfig+0x244>)
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	f003 030f 	and.w	r3, r3, #15
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d908      	bls.n	8003fee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fdc:	4b4a      	ldr	r3, [pc, #296]	; (8004108 <HAL_RCC_ClockConfig+0x244>)
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	f023 020f 	bic.w	r2, r3, #15
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	4947      	ldr	r1, [pc, #284]	; (8004108 <HAL_RCC_ClockConfig+0x244>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d055      	beq.n	80040a6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003ffa:	4b43      	ldr	r3, [pc, #268]	; (8004108 <HAL_RCC_ClockConfig+0x244>)
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	4940      	ldr	r1, [pc, #256]	; (8004108 <HAL_RCC_ClockConfig+0x244>)
 8004008:	4313      	orrs	r3, r2
 800400a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2b02      	cmp	r3, #2
 8004012:	d107      	bne.n	8004024 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004014:	4b3c      	ldr	r3, [pc, #240]	; (8004108 <HAL_RCC_ClockConfig+0x244>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d121      	bne.n	8004064 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e0f6      	b.n	8004212 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	2b03      	cmp	r3, #3
 800402a:	d107      	bne.n	800403c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800402c:	4b36      	ldr	r3, [pc, #216]	; (8004108 <HAL_RCC_ClockConfig+0x244>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d115      	bne.n	8004064 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e0ea      	b.n	8004212 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d107      	bne.n	8004054 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004044:	4b30      	ldr	r3, [pc, #192]	; (8004108 <HAL_RCC_ClockConfig+0x244>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404c:	2b00      	cmp	r3, #0
 800404e:	d109      	bne.n	8004064 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e0de      	b.n	8004212 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004054:	4b2c      	ldr	r3, [pc, #176]	; (8004108 <HAL_RCC_ClockConfig+0x244>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e0d6      	b.n	8004212 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004064:	4b28      	ldr	r3, [pc, #160]	; (8004108 <HAL_RCC_ClockConfig+0x244>)
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	f023 0207 	bic.w	r2, r3, #7
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	4925      	ldr	r1, [pc, #148]	; (8004108 <HAL_RCC_ClockConfig+0x244>)
 8004072:	4313      	orrs	r3, r2
 8004074:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004076:	f7fe f80b 	bl	8002090 <HAL_GetTick>
 800407a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407c:	e00a      	b.n	8004094 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800407e:	f7fe f807 	bl	8002090 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	f241 3288 	movw	r2, #5000	; 0x1388
 800408c:	4293      	cmp	r3, r2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e0be      	b.n	8004212 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004094:	4b1c      	ldr	r3, [pc, #112]	; (8004108 <HAL_RCC_ClockConfig+0x244>)
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d1eb      	bne.n	800407e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d010      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68da      	ldr	r2, [r3, #12]
 80040b6:	4b14      	ldr	r3, [pc, #80]	; (8004108 <HAL_RCC_ClockConfig+0x244>)
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	429a      	cmp	r2, r3
 80040c0:	d208      	bcs.n	80040d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040c2:	4b11      	ldr	r3, [pc, #68]	; (8004108 <HAL_RCC_ClockConfig+0x244>)
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	f023 020f 	bic.w	r2, r3, #15
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	490e      	ldr	r1, [pc, #56]	; (8004108 <HAL_RCC_ClockConfig+0x244>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040d4:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <HAL_RCC_ClockConfig+0x240>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 030f 	and.w	r3, r3, #15
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d214      	bcs.n	800410c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e2:	4b08      	ldr	r3, [pc, #32]	; (8004104 <HAL_RCC_ClockConfig+0x240>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f023 020f 	bic.w	r2, r3, #15
 80040ea:	4906      	ldr	r1, [pc, #24]	; (8004104 <HAL_RCC_ClockConfig+0x240>)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f2:	4b04      	ldr	r3, [pc, #16]	; (8004104 <HAL_RCC_ClockConfig+0x240>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d005      	beq.n	800410c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e086      	b.n	8004212 <HAL_RCC_ClockConfig+0x34e>
 8004104:	52002000 	.word	0x52002000
 8004108:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b00      	cmp	r3, #0
 8004116:	d010      	beq.n	800413a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	4b3f      	ldr	r3, [pc, #252]	; (800421c <HAL_RCC_ClockConfig+0x358>)
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004124:	429a      	cmp	r2, r3
 8004126:	d208      	bcs.n	800413a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004128:	4b3c      	ldr	r3, [pc, #240]	; (800421c <HAL_RCC_ClockConfig+0x358>)
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	4939      	ldr	r1, [pc, #228]	; (800421c <HAL_RCC_ClockConfig+0x358>)
 8004136:	4313      	orrs	r3, r2
 8004138:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	2b00      	cmp	r3, #0
 8004144:	d010      	beq.n	8004168 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	695a      	ldr	r2, [r3, #20]
 800414a:	4b34      	ldr	r3, [pc, #208]	; (800421c <HAL_RCC_ClockConfig+0x358>)
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004152:	429a      	cmp	r2, r3
 8004154:	d208      	bcs.n	8004168 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004156:	4b31      	ldr	r3, [pc, #196]	; (800421c <HAL_RCC_ClockConfig+0x358>)
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	492e      	ldr	r1, [pc, #184]	; (800421c <HAL_RCC_ClockConfig+0x358>)
 8004164:	4313      	orrs	r3, r2
 8004166:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0310 	and.w	r3, r3, #16
 8004170:	2b00      	cmp	r3, #0
 8004172:	d010      	beq.n	8004196 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	699a      	ldr	r2, [r3, #24]
 8004178:	4b28      	ldr	r3, [pc, #160]	; (800421c <HAL_RCC_ClockConfig+0x358>)
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004180:	429a      	cmp	r2, r3
 8004182:	d208      	bcs.n	8004196 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004184:	4b25      	ldr	r3, [pc, #148]	; (800421c <HAL_RCC_ClockConfig+0x358>)
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	4922      	ldr	r1, [pc, #136]	; (800421c <HAL_RCC_ClockConfig+0x358>)
 8004192:	4313      	orrs	r3, r2
 8004194:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0320 	and.w	r3, r3, #32
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d010      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69da      	ldr	r2, [r3, #28]
 80041a6:	4b1d      	ldr	r3, [pc, #116]	; (800421c <HAL_RCC_ClockConfig+0x358>)
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d208      	bcs.n	80041c4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80041b2:	4b1a      	ldr	r3, [pc, #104]	; (800421c <HAL_RCC_ClockConfig+0x358>)
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	4917      	ldr	r1, [pc, #92]	; (800421c <HAL_RCC_ClockConfig+0x358>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041c4:	f000 f834 	bl	8004230 <HAL_RCC_GetSysClockFreq>
 80041c8:	4602      	mov	r2, r0
 80041ca:	4b14      	ldr	r3, [pc, #80]	; (800421c <HAL_RCC_ClockConfig+0x358>)
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	0a1b      	lsrs	r3, r3, #8
 80041d0:	f003 030f 	and.w	r3, r3, #15
 80041d4:	4912      	ldr	r1, [pc, #72]	; (8004220 <HAL_RCC_ClockConfig+0x35c>)
 80041d6:	5ccb      	ldrb	r3, [r1, r3]
 80041d8:	f003 031f 	and.w	r3, r3, #31
 80041dc:	fa22 f303 	lsr.w	r3, r2, r3
 80041e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041e2:	4b0e      	ldr	r3, [pc, #56]	; (800421c <HAL_RCC_ClockConfig+0x358>)
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	4a0d      	ldr	r2, [pc, #52]	; (8004220 <HAL_RCC_ClockConfig+0x35c>)
 80041ec:	5cd3      	ldrb	r3, [r2, r3]
 80041ee:	f003 031f 	and.w	r3, r3, #31
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	fa22 f303 	lsr.w	r3, r2, r3
 80041f8:	4a0a      	ldr	r2, [pc, #40]	; (8004224 <HAL_RCC_ClockConfig+0x360>)
 80041fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041fc:	4a0a      	ldr	r2, [pc, #40]	; (8004228 <HAL_RCC_ClockConfig+0x364>)
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004202:	4b0a      	ldr	r3, [pc, #40]	; (800422c <HAL_RCC_ClockConfig+0x368>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f7fd fef8 	bl	8001ffc <HAL_InitTick>
 800420c:	4603      	mov	r3, r0
 800420e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004210:	7bfb      	ldrb	r3, [r7, #15]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	58024400 	.word	0x58024400
 8004220:	08015450 	.word	0x08015450
 8004224:	24000004 	.word	0x24000004
 8004228:	24000000 	.word	0x24000000
 800422c:	24000010 	.word	0x24000010

08004230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004230:	b480      	push	{r7}
 8004232:	b089      	sub	sp, #36	; 0x24
 8004234:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004236:	4bb3      	ldr	r3, [pc, #716]	; (8004504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800423e:	2b18      	cmp	r3, #24
 8004240:	f200 8155 	bhi.w	80044ee <HAL_RCC_GetSysClockFreq+0x2be>
 8004244:	a201      	add	r2, pc, #4	; (adr r2, 800424c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424a:	bf00      	nop
 800424c:	080042b1 	.word	0x080042b1
 8004250:	080044ef 	.word	0x080044ef
 8004254:	080044ef 	.word	0x080044ef
 8004258:	080044ef 	.word	0x080044ef
 800425c:	080044ef 	.word	0x080044ef
 8004260:	080044ef 	.word	0x080044ef
 8004264:	080044ef 	.word	0x080044ef
 8004268:	080044ef 	.word	0x080044ef
 800426c:	080042d7 	.word	0x080042d7
 8004270:	080044ef 	.word	0x080044ef
 8004274:	080044ef 	.word	0x080044ef
 8004278:	080044ef 	.word	0x080044ef
 800427c:	080044ef 	.word	0x080044ef
 8004280:	080044ef 	.word	0x080044ef
 8004284:	080044ef 	.word	0x080044ef
 8004288:	080044ef 	.word	0x080044ef
 800428c:	080042dd 	.word	0x080042dd
 8004290:	080044ef 	.word	0x080044ef
 8004294:	080044ef 	.word	0x080044ef
 8004298:	080044ef 	.word	0x080044ef
 800429c:	080044ef 	.word	0x080044ef
 80042a0:	080044ef 	.word	0x080044ef
 80042a4:	080044ef 	.word	0x080044ef
 80042a8:	080044ef 	.word	0x080044ef
 80042ac:	080042e3 	.word	0x080042e3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042b0:	4b94      	ldr	r3, [pc, #592]	; (8004504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0320 	and.w	r3, r3, #32
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d009      	beq.n	80042d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80042bc:	4b91      	ldr	r3, [pc, #580]	; (8004504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	08db      	lsrs	r3, r3, #3
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	4a90      	ldr	r2, [pc, #576]	; (8004508 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042c8:	fa22 f303 	lsr.w	r3, r2, r3
 80042cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80042ce:	e111      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80042d0:	4b8d      	ldr	r3, [pc, #564]	; (8004508 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042d2:	61bb      	str	r3, [r7, #24]
    break;
 80042d4:	e10e      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80042d6:	4b8d      	ldr	r3, [pc, #564]	; (800450c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80042d8:	61bb      	str	r3, [r7, #24]
    break;
 80042da:	e10b      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80042dc:	4b8c      	ldr	r3, [pc, #560]	; (8004510 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80042de:	61bb      	str	r3, [r7, #24]
    break;
 80042e0:	e108      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042e2:	4b88      	ldr	r3, [pc, #544]	; (8004504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e6:	f003 0303 	and.w	r3, r3, #3
 80042ea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80042ec:	4b85      	ldr	r3, [pc, #532]	; (8004504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f0:	091b      	lsrs	r3, r3, #4
 80042f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042f6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80042f8:	4b82      	ldr	r3, [pc, #520]	; (8004504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004302:	4b80      	ldr	r3, [pc, #512]	; (8004504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004306:	08db      	lsrs	r3, r3, #3
 8004308:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	fb02 f303 	mul.w	r3, r2, r3
 8004312:	ee07 3a90 	vmov	s15, r3
 8004316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800431a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 80e1 	beq.w	80044e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	2b02      	cmp	r3, #2
 800432a:	f000 8083 	beq.w	8004434 <HAL_RCC_GetSysClockFreq+0x204>
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	2b02      	cmp	r3, #2
 8004332:	f200 80a1 	bhi.w	8004478 <HAL_RCC_GetSysClockFreq+0x248>
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_RCC_GetSysClockFreq+0x114>
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d056      	beq.n	80043f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004342:	e099      	b.n	8004478 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004344:	4b6f      	ldr	r3, [pc, #444]	; (8004504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0320 	and.w	r3, r3, #32
 800434c:	2b00      	cmp	r3, #0
 800434e:	d02d      	beq.n	80043ac <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004350:	4b6c      	ldr	r3, [pc, #432]	; (8004504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	08db      	lsrs	r3, r3, #3
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	4a6b      	ldr	r2, [pc, #428]	; (8004508 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800435c:	fa22 f303 	lsr.w	r3, r2, r3
 8004360:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	ee07 3a90 	vmov	s15, r3
 8004368:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	ee07 3a90 	vmov	s15, r3
 8004372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800437a:	4b62      	ldr	r3, [pc, #392]	; (8004504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800437c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004382:	ee07 3a90 	vmov	s15, r3
 8004386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800438a:	ed97 6a02 	vldr	s12, [r7, #8]
 800438e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004514 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800439a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800439e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80043aa:	e087      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	ee07 3a90 	vmov	s15, r3
 80043b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004518 <HAL_RCC_GetSysClockFreq+0x2e8>
 80043ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043be:	4b51      	ldr	r3, [pc, #324]	; (8004504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043c6:	ee07 3a90 	vmov	s15, r3
 80043ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80043d2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004514 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043ee:	e065      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	ee07 3a90 	vmov	s15, r3
 80043f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043fa:	eddf 6a48 	vldr	s13, [pc, #288]	; 800451c <HAL_RCC_GetSysClockFreq+0x2ec>
 80043fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004402:	4b40      	ldr	r3, [pc, #256]	; (8004504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800440a:	ee07 3a90 	vmov	s15, r3
 800440e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004412:	ed97 6a02 	vldr	s12, [r7, #8]
 8004416:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004514 <HAL_RCC_GetSysClockFreq+0x2e4>
 800441a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800441e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800442a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800442e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004432:	e043      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	ee07 3a90 	vmov	s15, r3
 800443a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800443e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004520 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004446:	4b2f      	ldr	r3, [pc, #188]	; (8004504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800444e:	ee07 3a90 	vmov	s15, r3
 8004452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004456:	ed97 6a02 	vldr	s12, [r7, #8]
 800445a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004514 <HAL_RCC_GetSysClockFreq+0x2e4>
 800445e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800446a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800446e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004472:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004476:	e021      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	ee07 3a90 	vmov	s15, r3
 800447e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004482:	eddf 6a26 	vldr	s13, [pc, #152]	; 800451c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800448a:	4b1e      	ldr	r3, [pc, #120]	; (8004504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800448c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004492:	ee07 3a90 	vmov	s15, r3
 8004496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800449a:	ed97 6a02 	vldr	s12, [r7, #8]
 800449e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004514 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044ba:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80044bc:	4b11      	ldr	r3, [pc, #68]	; (8004504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c0:	0a5b      	lsrs	r3, r3, #9
 80044c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044c6:	3301      	adds	r3, #1
 80044c8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	ee07 3a90 	vmov	s15, r3
 80044d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80044d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044e0:	ee17 3a90 	vmov	r3, s15
 80044e4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80044e6:	e005      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	61bb      	str	r3, [r7, #24]
    break;
 80044ec:	e002      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80044ee:	4b07      	ldr	r3, [pc, #28]	; (800450c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044f0:	61bb      	str	r3, [r7, #24]
    break;
 80044f2:	bf00      	nop
  }

  return sysclockfreq;
 80044f4:	69bb      	ldr	r3, [r7, #24]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3724      	adds	r7, #36	; 0x24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	58024400 	.word	0x58024400
 8004508:	03d09000 	.word	0x03d09000
 800450c:	003d0900 	.word	0x003d0900
 8004510:	007a1200 	.word	0x007a1200
 8004514:	46000000 	.word	0x46000000
 8004518:	4c742400 	.word	0x4c742400
 800451c:	4a742400 	.word	0x4a742400
 8004520:	4af42400 	.word	0x4af42400

08004524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800452a:	f7ff fe81 	bl	8004230 <HAL_RCC_GetSysClockFreq>
 800452e:	4602      	mov	r2, r0
 8004530:	4b10      	ldr	r3, [pc, #64]	; (8004574 <HAL_RCC_GetHCLKFreq+0x50>)
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	0a1b      	lsrs	r3, r3, #8
 8004536:	f003 030f 	and.w	r3, r3, #15
 800453a:	490f      	ldr	r1, [pc, #60]	; (8004578 <HAL_RCC_GetHCLKFreq+0x54>)
 800453c:	5ccb      	ldrb	r3, [r1, r3]
 800453e:	f003 031f 	and.w	r3, r3, #31
 8004542:	fa22 f303 	lsr.w	r3, r2, r3
 8004546:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004548:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <HAL_RCC_GetHCLKFreq+0x50>)
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	f003 030f 	and.w	r3, r3, #15
 8004550:	4a09      	ldr	r2, [pc, #36]	; (8004578 <HAL_RCC_GetHCLKFreq+0x54>)
 8004552:	5cd3      	ldrb	r3, [r2, r3]
 8004554:	f003 031f 	and.w	r3, r3, #31
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	fa22 f303 	lsr.w	r3, r2, r3
 800455e:	4a07      	ldr	r2, [pc, #28]	; (800457c <HAL_RCC_GetHCLKFreq+0x58>)
 8004560:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004562:	4a07      	ldr	r2, [pc, #28]	; (8004580 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004568:	4b04      	ldr	r3, [pc, #16]	; (800457c <HAL_RCC_GetHCLKFreq+0x58>)
 800456a:	681b      	ldr	r3, [r3, #0]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	58024400 	.word	0x58024400
 8004578:	08015450 	.word	0x08015450
 800457c:	24000004 	.word	0x24000004
 8004580:	24000000 	.word	0x24000000

08004584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004588:	f7ff ffcc 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 800458c:	4602      	mov	r2, r0
 800458e:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	091b      	lsrs	r3, r3, #4
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	4904      	ldr	r1, [pc, #16]	; (80045ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800459a:	5ccb      	ldrb	r3, [r1, r3]
 800459c:	f003 031f 	and.w	r3, r3, #31
 80045a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	58024400 	.word	0x58024400
 80045ac:	08015450 	.word	0x08015450

080045b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80045b4:	f7ff ffb6 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 80045b8:	4602      	mov	r2, r0
 80045ba:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	0a1b      	lsrs	r3, r3, #8
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	4904      	ldr	r1, [pc, #16]	; (80045d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045c6:	5ccb      	ldrb	r3, [r1, r3]
 80045c8:	f003 031f 	and.w	r3, r3, #31
 80045cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	58024400 	.word	0x58024400
 80045d8:	08015450 	.word	0x08015450

080045dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045e4:	2300      	movs	r3, #0
 80045e6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045e8:	2300      	movs	r3, #0
 80045ea:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d03f      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004600:	d02a      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004602:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004606:	d824      	bhi.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004608:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800460c:	d018      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800460e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004612:	d81e      	bhi.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004614:	2b00      	cmp	r3, #0
 8004616:	d003      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004618:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800461c:	d007      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800461e:	e018      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004620:	4bab      	ldr	r3, [pc, #684]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	4aaa      	ldr	r2, [pc, #680]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800462a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800462c:	e015      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	3304      	adds	r3, #4
 8004632:	2102      	movs	r1, #2
 8004634:	4618      	mov	r0, r3
 8004636:	f001 f9cf 	bl	80059d8 <RCCEx_PLL2_Config>
 800463a:	4603      	mov	r3, r0
 800463c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800463e:	e00c      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3324      	adds	r3, #36	; 0x24
 8004644:	2102      	movs	r1, #2
 8004646:	4618      	mov	r0, r3
 8004648:	f001 fa78 	bl	8005b3c <RCCEx_PLL3_Config>
 800464c:	4603      	mov	r3, r0
 800464e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004650:	e003      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	75fb      	strb	r3, [r7, #23]
      break;
 8004656:	e000      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004658:	bf00      	nop
    }

    if(ret == HAL_OK)
 800465a:	7dfb      	ldrb	r3, [r7, #23]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d109      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004660:	4b9b      	ldr	r3, [pc, #620]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004664:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800466c:	4998      	ldr	r1, [pc, #608]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800466e:	4313      	orrs	r3, r2
 8004670:	650b      	str	r3, [r1, #80]	; 0x50
 8004672:	e001      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004674:	7dfb      	ldrb	r3, [r7, #23]
 8004676:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004680:	2b00      	cmp	r3, #0
 8004682:	d03d      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004688:	2b04      	cmp	r3, #4
 800468a:	d826      	bhi.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800468c:	a201      	add	r2, pc, #4	; (adr r2, 8004694 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800468e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004692:	bf00      	nop
 8004694:	080046a9 	.word	0x080046a9
 8004698:	080046b7 	.word	0x080046b7
 800469c:	080046c9 	.word	0x080046c9
 80046a0:	080046e1 	.word	0x080046e1
 80046a4:	080046e1 	.word	0x080046e1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046a8:	4b89      	ldr	r3, [pc, #548]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ac:	4a88      	ldr	r2, [pc, #544]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80046b4:	e015      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	3304      	adds	r3, #4
 80046ba:	2100      	movs	r1, #0
 80046bc:	4618      	mov	r0, r3
 80046be:	f001 f98b 	bl	80059d8 <RCCEx_PLL2_Config>
 80046c2:	4603      	mov	r3, r0
 80046c4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80046c6:	e00c      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3324      	adds	r3, #36	; 0x24
 80046cc:	2100      	movs	r1, #0
 80046ce:	4618      	mov	r0, r3
 80046d0:	f001 fa34 	bl	8005b3c <RCCEx_PLL3_Config>
 80046d4:	4603      	mov	r3, r0
 80046d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80046d8:	e003      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	75fb      	strb	r3, [r7, #23]
      break;
 80046de:	e000      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80046e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046e2:	7dfb      	ldrb	r3, [r7, #23]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d109      	bne.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046e8:	4b79      	ldr	r3, [pc, #484]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ec:	f023 0207 	bic.w	r2, r3, #7
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f4:	4976      	ldr	r1, [pc, #472]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	650b      	str	r3, [r1, #80]	; 0x50
 80046fa:	e001      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046fc:	7dfb      	ldrb	r3, [r7, #23]
 80046fe:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004708:	2b00      	cmp	r3, #0
 800470a:	d042      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004714:	d02b      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800471a:	d825      	bhi.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800471c:	2bc0      	cmp	r3, #192	; 0xc0
 800471e:	d028      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004720:	2bc0      	cmp	r3, #192	; 0xc0
 8004722:	d821      	bhi.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004724:	2b80      	cmp	r3, #128	; 0x80
 8004726:	d016      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004728:	2b80      	cmp	r3, #128	; 0x80
 800472a:	d81d      	bhi.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800472c:	2b00      	cmp	r3, #0
 800472e:	d002      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004730:	2b40      	cmp	r3, #64	; 0x40
 8004732:	d007      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004734:	e018      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004736:	4b66      	ldr	r3, [pc, #408]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473a:	4a65      	ldr	r2, [pc, #404]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800473c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004740:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004742:	e017      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3304      	adds	r3, #4
 8004748:	2100      	movs	r1, #0
 800474a:	4618      	mov	r0, r3
 800474c:	f001 f944 	bl	80059d8 <RCCEx_PLL2_Config>
 8004750:	4603      	mov	r3, r0
 8004752:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004754:	e00e      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	3324      	adds	r3, #36	; 0x24
 800475a:	2100      	movs	r1, #0
 800475c:	4618      	mov	r0, r3
 800475e:	f001 f9ed 	bl	8005b3c <RCCEx_PLL3_Config>
 8004762:	4603      	mov	r3, r0
 8004764:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004766:	e005      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	75fb      	strb	r3, [r7, #23]
      break;
 800476c:	e002      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800476e:	bf00      	nop
 8004770:	e000      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004772:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004774:	7dfb      	ldrb	r3, [r7, #23]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d109      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800477a:	4b55      	ldr	r3, [pc, #340]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800477c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800477e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004786:	4952      	ldr	r1, [pc, #328]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004788:	4313      	orrs	r3, r2
 800478a:	650b      	str	r3, [r1, #80]	; 0x50
 800478c:	e001      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800478e:	7dfb      	ldrb	r3, [r7, #23]
 8004790:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800479a:	2b00      	cmp	r3, #0
 800479c:	d049      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80047a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047a8:	d030      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80047aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047ae:	d82a      	bhi.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80047b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80047b4:	d02c      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80047b6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80047ba:	d824      	bhi.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80047bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047c0:	d018      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80047c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047c6:	d81e      	bhi.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80047cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047d0:	d007      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80047d2:	e018      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047d4:	4b3e      	ldr	r3, [pc, #248]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d8:	4a3d      	ldr	r2, [pc, #244]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047e0:	e017      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	3304      	adds	r3, #4
 80047e6:	2100      	movs	r1, #0
 80047e8:	4618      	mov	r0, r3
 80047ea:	f001 f8f5 	bl	80059d8 <RCCEx_PLL2_Config>
 80047ee:	4603      	mov	r3, r0
 80047f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80047f2:	e00e      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3324      	adds	r3, #36	; 0x24
 80047f8:	2100      	movs	r1, #0
 80047fa:	4618      	mov	r0, r3
 80047fc:	f001 f99e 	bl	8005b3c <RCCEx_PLL3_Config>
 8004800:	4603      	mov	r3, r0
 8004802:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004804:	e005      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	75fb      	strb	r3, [r7, #23]
      break;
 800480a:	e002      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800480c:	bf00      	nop
 800480e:	e000      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004810:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004812:	7dfb      	ldrb	r3, [r7, #23]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10a      	bne.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004818:	4b2d      	ldr	r3, [pc, #180]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800481a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004826:	492a      	ldr	r1, [pc, #168]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004828:	4313      	orrs	r3, r2
 800482a:	658b      	str	r3, [r1, #88]	; 0x58
 800482c:	e001      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800482e:	7dfb      	ldrb	r3, [r7, #23]
 8004830:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800483a:	2b00      	cmp	r3, #0
 800483c:	d04c      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004844:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004848:	d030      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800484a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800484e:	d82a      	bhi.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004850:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004854:	d02c      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004856:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800485a:	d824      	bhi.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800485c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004860:	d018      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004862:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004866:	d81e      	bhi.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800486c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004870:	d007      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004872:	e018      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004874:	4b16      	ldr	r3, [pc, #88]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004878:	4a15      	ldr	r2, [pc, #84]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800487a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800487e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004880:	e017      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	3304      	adds	r3, #4
 8004886:	2100      	movs	r1, #0
 8004888:	4618      	mov	r0, r3
 800488a:	f001 f8a5 	bl	80059d8 <RCCEx_PLL2_Config>
 800488e:	4603      	mov	r3, r0
 8004890:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004892:	e00e      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3324      	adds	r3, #36	; 0x24
 8004898:	2100      	movs	r1, #0
 800489a:	4618      	mov	r0, r3
 800489c:	f001 f94e 	bl	8005b3c <RCCEx_PLL3_Config>
 80048a0:	4603      	mov	r3, r0
 80048a2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048a4:	e005      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	75fb      	strb	r3, [r7, #23]
      break;
 80048aa:	e002      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80048ac:	bf00      	nop
 80048ae:	e000      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80048b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048b2:	7dfb      	ldrb	r3, [r7, #23]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10d      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80048b8:	4b05      	ldr	r3, [pc, #20]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048bc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80048c6:	4902      	ldr	r1, [pc, #8]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	658b      	str	r3, [r1, #88]	; 0x58
 80048cc:	e004      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80048ce:	bf00      	nop
 80048d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d4:	7dfb      	ldrb	r3, [r7, #23]
 80048d6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d032      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e8:	2b30      	cmp	r3, #48	; 0x30
 80048ea:	d01c      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80048ec:	2b30      	cmp	r3, #48	; 0x30
 80048ee:	d817      	bhi.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80048f0:	2b20      	cmp	r3, #32
 80048f2:	d00c      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x332>
 80048f4:	2b20      	cmp	r3, #32
 80048f6:	d813      	bhi.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d016      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80048fc:	2b10      	cmp	r3, #16
 80048fe:	d10f      	bne.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004900:	4baf      	ldr	r3, [pc, #700]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	4aae      	ldr	r2, [pc, #696]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800490a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800490c:	e00e      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	3304      	adds	r3, #4
 8004912:	2102      	movs	r1, #2
 8004914:	4618      	mov	r0, r3
 8004916:	f001 f85f 	bl	80059d8 <RCCEx_PLL2_Config>
 800491a:	4603      	mov	r3, r0
 800491c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800491e:	e005      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	75fb      	strb	r3, [r7, #23]
      break;
 8004924:	e002      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004926:	bf00      	nop
 8004928:	e000      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800492a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800492c:	7dfb      	ldrb	r3, [r7, #23]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d109      	bne.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004932:	4ba3      	ldr	r3, [pc, #652]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004936:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800493e:	49a0      	ldr	r1, [pc, #640]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004940:	4313      	orrs	r3, r2
 8004942:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004944:	e001      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004946:	7dfb      	ldrb	r3, [r7, #23]
 8004948:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d047      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800495a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800495e:	d030      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004960:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004964:	d82a      	bhi.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004966:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800496a:	d02c      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800496c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004970:	d824      	bhi.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004976:	d018      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004978:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800497c:	d81e      	bhi.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004986:	d007      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004988:	e018      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800498a:	4b8d      	ldr	r3, [pc, #564]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800498c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498e:	4a8c      	ldr	r2, [pc, #560]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004994:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004996:	e017      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	3304      	adds	r3, #4
 800499c:	2100      	movs	r1, #0
 800499e:	4618      	mov	r0, r3
 80049a0:	f001 f81a 	bl	80059d8 <RCCEx_PLL2_Config>
 80049a4:	4603      	mov	r3, r0
 80049a6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80049a8:	e00e      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	3324      	adds	r3, #36	; 0x24
 80049ae:	2100      	movs	r1, #0
 80049b0:	4618      	mov	r0, r3
 80049b2:	f001 f8c3 	bl	8005b3c <RCCEx_PLL3_Config>
 80049b6:	4603      	mov	r3, r0
 80049b8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80049ba:	e005      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	75fb      	strb	r3, [r7, #23]
      break;
 80049c0:	e002      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80049c2:	bf00      	nop
 80049c4:	e000      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80049c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049c8:	7dfb      	ldrb	r3, [r7, #23]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d109      	bne.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80049ce:	4b7c      	ldr	r3, [pc, #496]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80049d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049da:	4979      	ldr	r1, [pc, #484]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	650b      	str	r3, [r1, #80]	; 0x50
 80049e0:	e001      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e2:	7dfb      	ldrb	r3, [r7, #23]
 80049e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d049      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049fa:	d02e      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80049fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a00:	d828      	bhi.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004a02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a06:	d02a      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004a08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a0c:	d822      	bhi.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004a0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a12:	d026      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004a14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a18:	d81c      	bhi.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004a1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a1e:	d010      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004a20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a24:	d816      	bhi.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d01d      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a2e:	d111      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3304      	adds	r3, #4
 8004a34:	2101      	movs	r1, #1
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 ffce 	bl	80059d8 <RCCEx_PLL2_Config>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004a40:	e012      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	3324      	adds	r3, #36	; 0x24
 8004a46:	2101      	movs	r1, #1
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f001 f877 	bl	8005b3c <RCCEx_PLL3_Config>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004a52:	e009      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	75fb      	strb	r3, [r7, #23]
      break;
 8004a58:	e006      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004a5a:	bf00      	nop
 8004a5c:	e004      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004a5e:	bf00      	nop
 8004a60:	e002      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004a62:	bf00      	nop
 8004a64:	e000      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004a66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a68:	7dfb      	ldrb	r3, [r7, #23]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d109      	bne.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004a6e:	4b54      	ldr	r3, [pc, #336]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a72:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a7a:	4951      	ldr	r1, [pc, #324]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	650b      	str	r3, [r1, #80]	; 0x50
 8004a80:	e001      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a82:	7dfb      	ldrb	r3, [r7, #23]
 8004a84:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d04b      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a9c:	d02e      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004a9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004aa2:	d828      	bhi.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa8:	d02a      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aae:	d822      	bhi.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004ab0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ab4:	d026      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004ab6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004aba:	d81c      	bhi.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004abc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ac0:	d010      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004ac2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ac6:	d816      	bhi.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d01d      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004acc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ad0:	d111      	bne.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 ff7d 	bl	80059d8 <RCCEx_PLL2_Config>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004ae2:	e012      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3324      	adds	r3, #36	; 0x24
 8004ae8:	2101      	movs	r1, #1
 8004aea:	4618      	mov	r0, r3
 8004aec:	f001 f826 	bl	8005b3c <RCCEx_PLL3_Config>
 8004af0:	4603      	mov	r3, r0
 8004af2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004af4:	e009      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	75fb      	strb	r3, [r7, #23]
      break;
 8004afa:	e006      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004afc:	bf00      	nop
 8004afe:	e004      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004b00:	bf00      	nop
 8004b02:	e002      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004b04:	bf00      	nop
 8004b06:	e000      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004b08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b0a:	7dfb      	ldrb	r3, [r7, #23]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10a      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004b10:	4b2b      	ldr	r3, [pc, #172]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b14:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b1e:	4928      	ldr	r1, [pc, #160]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	658b      	str	r3, [r1, #88]	; 0x58
 8004b24:	e001      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b26:	7dfb      	ldrb	r3, [r7, #23]
 8004b28:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d02f      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b3e:	d00e      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004b40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b44:	d814      	bhi.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d015      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004b4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b4e:	d10f      	bne.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b50:	4b1b      	ldr	r3, [pc, #108]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	4a1a      	ldr	r2, [pc, #104]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004b5c:	e00c      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3304      	adds	r3, #4
 8004b62:	2101      	movs	r1, #1
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 ff37 	bl	80059d8 <RCCEx_PLL2_Config>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004b6e:	e003      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	75fb      	strb	r3, [r7, #23]
      break;
 8004b74:	e000      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004b76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b78:	7dfb      	ldrb	r3, [r7, #23]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d109      	bne.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b7e:	4b10      	ldr	r3, [pc, #64]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b8a:	490d      	ldr	r1, [pc, #52]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	650b      	str	r3, [r1, #80]	; 0x50
 8004b90:	e001      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b92:	7dfb      	ldrb	r3, [r7, #23]
 8004b94:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d033      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d81c      	bhi.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004baa:	a201      	add	r2, pc, #4	; (adr r2, 8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8004bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb0:	08004beb 	.word	0x08004beb
 8004bb4:	08004bc5 	.word	0x08004bc5
 8004bb8:	08004bd3 	.word	0x08004bd3
 8004bbc:	08004beb 	.word	0x08004beb
 8004bc0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bc4:	4bb8      	ldr	r3, [pc, #736]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc8:	4ab7      	ldr	r2, [pc, #732]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004bd0:	e00c      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	2102      	movs	r1, #2
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 fefd 	bl	80059d8 <RCCEx_PLL2_Config>
 8004bde:	4603      	mov	r3, r0
 8004be0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004be2:	e003      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	75fb      	strb	r3, [r7, #23]
      break;
 8004be8:	e000      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004bea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bec:	7dfb      	ldrb	r3, [r7, #23]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d109      	bne.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004bf2:	4bad      	ldr	r3, [pc, #692]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf6:	f023 0203 	bic.w	r2, r3, #3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfe:	49aa      	ldr	r1, [pc, #680]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004c04:	e001      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c06:	7dfb      	ldrb	r3, [r7, #23]
 8004c08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 8086 	beq.w	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c18:	4ba4      	ldr	r3, [pc, #656]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4aa3      	ldr	r2, [pc, #652]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c24:	f7fd fa34 	bl	8002090 <HAL_GetTick>
 8004c28:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c2a:	e009      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c2c:	f7fd fa30 	bl	8002090 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b64      	cmp	r3, #100	; 0x64
 8004c38:	d902      	bls.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	75fb      	strb	r3, [r7, #23]
        break;
 8004c3e:	e005      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c40:	4b9a      	ldr	r3, [pc, #616]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d0ef      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004c4c:	7dfb      	ldrb	r3, [r7, #23]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d166      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004c52:	4b95      	ldr	r3, [pc, #596]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c54:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c5c:	4053      	eors	r3, r2
 8004c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d013      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c66:	4b90      	ldr	r3, [pc, #576]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c6e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c70:	4b8d      	ldr	r3, [pc, #564]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c74:	4a8c      	ldr	r2, [pc, #560]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c7a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c7c:	4b8a      	ldr	r3, [pc, #552]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c80:	4a89      	ldr	r2, [pc, #548]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c86:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004c88:	4a87      	ldr	r2, [pc, #540]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c98:	d115      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9a:	f7fd f9f9 	bl	8002090 <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ca0:	e00b      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ca2:	f7fd f9f5 	bl	8002090 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d902      	bls.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	75fb      	strb	r3, [r7, #23]
            break;
 8004cb8:	e005      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cba:	4b7b      	ldr	r3, [pc, #492]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0ed      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004cc6:	7dfb      	ldrb	r3, [r7, #23]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d126      	bne.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cda:	d10d      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004cdc:	4b72      	ldr	r3, [pc, #456]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cea:	0919      	lsrs	r1, r3, #4
 8004cec:	4b70      	ldr	r3, [pc, #448]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8004cee:	400b      	ands	r3, r1
 8004cf0:	496d      	ldr	r1, [pc, #436]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	610b      	str	r3, [r1, #16]
 8004cf6:	e005      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004cf8:	4b6b      	ldr	r3, [pc, #428]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	4a6a      	ldr	r2, [pc, #424]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004cfe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004d02:	6113      	str	r3, [r2, #16]
 8004d04:	4b68      	ldr	r3, [pc, #416]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d12:	4965      	ldr	r1, [pc, #404]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	670b      	str	r3, [r1, #112]	; 0x70
 8004d18:	e004      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d1a:	7dfb      	ldrb	r3, [r7, #23]
 8004d1c:	75bb      	strb	r3, [r7, #22]
 8004d1e:	e001      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d20:	7dfb      	ldrb	r3, [r7, #23]
 8004d22:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d07e      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d34:	2b28      	cmp	r3, #40	; 0x28
 8004d36:	d867      	bhi.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004d38:	a201      	add	r2, pc, #4	; (adr r2, 8004d40 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3e:	bf00      	nop
 8004d40:	08004e0f 	.word	0x08004e0f
 8004d44:	08004e09 	.word	0x08004e09
 8004d48:	08004e09 	.word	0x08004e09
 8004d4c:	08004e09 	.word	0x08004e09
 8004d50:	08004e09 	.word	0x08004e09
 8004d54:	08004e09 	.word	0x08004e09
 8004d58:	08004e09 	.word	0x08004e09
 8004d5c:	08004e09 	.word	0x08004e09
 8004d60:	08004de5 	.word	0x08004de5
 8004d64:	08004e09 	.word	0x08004e09
 8004d68:	08004e09 	.word	0x08004e09
 8004d6c:	08004e09 	.word	0x08004e09
 8004d70:	08004e09 	.word	0x08004e09
 8004d74:	08004e09 	.word	0x08004e09
 8004d78:	08004e09 	.word	0x08004e09
 8004d7c:	08004e09 	.word	0x08004e09
 8004d80:	08004df7 	.word	0x08004df7
 8004d84:	08004e09 	.word	0x08004e09
 8004d88:	08004e09 	.word	0x08004e09
 8004d8c:	08004e09 	.word	0x08004e09
 8004d90:	08004e09 	.word	0x08004e09
 8004d94:	08004e09 	.word	0x08004e09
 8004d98:	08004e09 	.word	0x08004e09
 8004d9c:	08004e09 	.word	0x08004e09
 8004da0:	08004e0f 	.word	0x08004e0f
 8004da4:	08004e09 	.word	0x08004e09
 8004da8:	08004e09 	.word	0x08004e09
 8004dac:	08004e09 	.word	0x08004e09
 8004db0:	08004e09 	.word	0x08004e09
 8004db4:	08004e09 	.word	0x08004e09
 8004db8:	08004e09 	.word	0x08004e09
 8004dbc:	08004e09 	.word	0x08004e09
 8004dc0:	08004e0f 	.word	0x08004e0f
 8004dc4:	08004e09 	.word	0x08004e09
 8004dc8:	08004e09 	.word	0x08004e09
 8004dcc:	08004e09 	.word	0x08004e09
 8004dd0:	08004e09 	.word	0x08004e09
 8004dd4:	08004e09 	.word	0x08004e09
 8004dd8:	08004e09 	.word	0x08004e09
 8004ddc:	08004e09 	.word	0x08004e09
 8004de0:	08004e0f 	.word	0x08004e0f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3304      	adds	r3, #4
 8004de8:	2101      	movs	r1, #1
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fdf4 	bl	80059d8 <RCCEx_PLL2_Config>
 8004df0:	4603      	mov	r3, r0
 8004df2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004df4:	e00c      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	3324      	adds	r3, #36	; 0x24
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 fe9d 	bl	8005b3c <RCCEx_PLL3_Config>
 8004e02:	4603      	mov	r3, r0
 8004e04:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004e06:	e003      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e0c:	e000      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8004e0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e10:	7dfb      	ldrb	r3, [r7, #23]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d109      	bne.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004e16:	4b24      	ldr	r3, [pc, #144]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e22:	4921      	ldr	r1, [pc, #132]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	654b      	str	r3, [r1, #84]	; 0x54
 8004e28:	e001      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e2a:	7dfb      	ldrb	r3, [r7, #23]
 8004e2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d03e      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e3e:	2b05      	cmp	r3, #5
 8004e40:	d820      	bhi.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8004e42:	a201      	add	r2, pc, #4	; (adr r2, 8004e48 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8004e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e48:	08004e8b 	.word	0x08004e8b
 8004e4c:	08004e61 	.word	0x08004e61
 8004e50:	08004e73 	.word	0x08004e73
 8004e54:	08004e8b 	.word	0x08004e8b
 8004e58:	08004e8b 	.word	0x08004e8b
 8004e5c:	08004e8b 	.word	0x08004e8b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3304      	adds	r3, #4
 8004e64:	2101      	movs	r1, #1
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 fdb6 	bl	80059d8 <RCCEx_PLL2_Config>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004e70:	e00c      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	3324      	adds	r3, #36	; 0x24
 8004e76:	2101      	movs	r1, #1
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 fe5f 	bl	8005b3c <RCCEx_PLL3_Config>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004e82:	e003      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	75fb      	strb	r3, [r7, #23]
      break;
 8004e88:	e000      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8004e8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e8c:	7dfb      	ldrb	r3, [r7, #23]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d110      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004e92:	4b05      	ldr	r3, [pc, #20]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e96:	f023 0207 	bic.w	r2, r3, #7
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e9e:	4902      	ldr	r1, [pc, #8]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	654b      	str	r3, [r1, #84]	; 0x54
 8004ea4:	e008      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8004ea6:	bf00      	nop
 8004ea8:	58024400 	.word	0x58024400
 8004eac:	58024800 	.word	0x58024800
 8004eb0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb4:	7dfb      	ldrb	r3, [r7, #23]
 8004eb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d039      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eca:	2b05      	cmp	r3, #5
 8004ecc:	d820      	bhi.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004ece:	a201      	add	r2, pc, #4	; (adr r2, 8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8004ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed4:	08004f17 	.word	0x08004f17
 8004ed8:	08004eed 	.word	0x08004eed
 8004edc:	08004eff 	.word	0x08004eff
 8004ee0:	08004f17 	.word	0x08004f17
 8004ee4:	08004f17 	.word	0x08004f17
 8004ee8:	08004f17 	.word	0x08004f17
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3304      	adds	r3, #4
 8004ef0:	2101      	movs	r1, #1
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 fd70 	bl	80059d8 <RCCEx_PLL2_Config>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004efc:	e00c      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	3324      	adds	r3, #36	; 0x24
 8004f02:	2101      	movs	r1, #1
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 fe19 	bl	8005b3c <RCCEx_PLL3_Config>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004f0e:	e003      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	75fb      	strb	r3, [r7, #23]
      break;
 8004f14:	e000      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8004f16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f18:	7dfb      	ldrb	r3, [r7, #23]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10a      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f1e:	4bb7      	ldr	r3, [pc, #732]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f22:	f023 0207 	bic.w	r2, r3, #7
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2c:	49b3      	ldr	r1, [pc, #716]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	658b      	str	r3, [r1, #88]	; 0x58
 8004f32:	e001      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f34:	7dfb      	ldrb	r3, [r7, #23]
 8004f36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0320 	and.w	r3, r3, #32
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d04b      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f4e:	d02e      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f54:	d828      	bhi.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f5a:	d02a      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f60:	d822      	bhi.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004f62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f66:	d026      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004f68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f6c:	d81c      	bhi.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004f6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f72:	d010      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004f74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f78:	d816      	bhi.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d01d      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004f7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f82:	d111      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3304      	adds	r3, #4
 8004f88:	2100      	movs	r1, #0
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 fd24 	bl	80059d8 <RCCEx_PLL2_Config>
 8004f90:	4603      	mov	r3, r0
 8004f92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004f94:	e012      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	3324      	adds	r3, #36	; 0x24
 8004f9a:	2102      	movs	r1, #2
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 fdcd 	bl	8005b3c <RCCEx_PLL3_Config>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004fa6:	e009      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	75fb      	strb	r3, [r7, #23]
      break;
 8004fac:	e006      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004fae:	bf00      	nop
 8004fb0:	e004      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004fb2:	bf00      	nop
 8004fb4:	e002      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004fb6:	bf00      	nop
 8004fb8:	e000      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004fba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fbc:	7dfb      	ldrb	r3, [r7, #23]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10a      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fc2:	4b8e      	ldr	r3, [pc, #568]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fd0:	498a      	ldr	r1, [pc, #552]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	654b      	str	r3, [r1, #84]	; 0x54
 8004fd6:	e001      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd8:	7dfb      	ldrb	r3, [r7, #23]
 8004fda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d04b      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004ff2:	d02e      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8004ff4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004ff8:	d828      	bhi.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ffe:	d02a      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005004:	d822      	bhi.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005006:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800500a:	d026      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800500c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005010:	d81c      	bhi.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005016:	d010      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8005018:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800501c:	d816      	bhi.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800501e:	2b00      	cmp	r3, #0
 8005020:	d01d      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005026:	d111      	bne.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	3304      	adds	r3, #4
 800502c:	2100      	movs	r1, #0
 800502e:	4618      	mov	r0, r3
 8005030:	f000 fcd2 	bl	80059d8 <RCCEx_PLL2_Config>
 8005034:	4603      	mov	r3, r0
 8005036:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005038:	e012      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	3324      	adds	r3, #36	; 0x24
 800503e:	2102      	movs	r1, #2
 8005040:	4618      	mov	r0, r3
 8005042:	f000 fd7b 	bl	8005b3c <RCCEx_PLL3_Config>
 8005046:	4603      	mov	r3, r0
 8005048:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800504a:	e009      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	75fb      	strb	r3, [r7, #23]
      break;
 8005050:	e006      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005052:	bf00      	nop
 8005054:	e004      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005056:	bf00      	nop
 8005058:	e002      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800505a:	bf00      	nop
 800505c:	e000      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800505e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005060:	7dfb      	ldrb	r3, [r7, #23]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10a      	bne.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005066:	4b65      	ldr	r3, [pc, #404]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005074:	4961      	ldr	r1, [pc, #388]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005076:	4313      	orrs	r3, r2
 8005078:	658b      	str	r3, [r1, #88]	; 0x58
 800507a:	e001      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800507c:	7dfb      	ldrb	r3, [r7, #23]
 800507e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005088:	2b00      	cmp	r3, #0
 800508a:	d04b      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005092:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005096:	d02e      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8005098:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800509c:	d828      	bhi.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800509e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050a2:	d02a      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80050a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050a8:	d822      	bhi.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80050aa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80050ae:	d026      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80050b0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80050b4:	d81c      	bhi.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80050b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050ba:	d010      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80050bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050c0:	d816      	bhi.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d01d      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80050c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ca:	d111      	bne.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	3304      	adds	r3, #4
 80050d0:	2100      	movs	r1, #0
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fc80 	bl	80059d8 <RCCEx_PLL2_Config>
 80050d8:	4603      	mov	r3, r0
 80050da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80050dc:	e012      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3324      	adds	r3, #36	; 0x24
 80050e2:	2102      	movs	r1, #2
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 fd29 	bl	8005b3c <RCCEx_PLL3_Config>
 80050ea:	4603      	mov	r3, r0
 80050ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80050ee:	e009      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	75fb      	strb	r3, [r7, #23]
      break;
 80050f4:	e006      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80050f6:	bf00      	nop
 80050f8:	e004      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80050fa:	bf00      	nop
 80050fc:	e002      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80050fe:	bf00      	nop
 8005100:	e000      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005102:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005104:	7dfb      	ldrb	r3, [r7, #23]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10a      	bne.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800510a:	4b3c      	ldr	r3, [pc, #240]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800510c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800510e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005118:	4938      	ldr	r1, [pc, #224]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800511a:	4313      	orrs	r3, r2
 800511c:	658b      	str	r3, [r1, #88]	; 0x58
 800511e:	e001      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005120:	7dfb      	ldrb	r3, [r7, #23]
 8005122:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0308 	and.w	r3, r3, #8
 800512c:	2b00      	cmp	r3, #0
 800512e:	d01a      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800513a:	d10a      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	3324      	adds	r3, #36	; 0x24
 8005140:	2102      	movs	r1, #2
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fcfa 	bl	8005b3c <RCCEx_PLL3_Config>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005152:	4b2a      	ldr	r3, [pc, #168]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005156:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005160:	4926      	ldr	r1, [pc, #152]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005162:	4313      	orrs	r3, r2
 8005164:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0310 	and.w	r3, r3, #16
 800516e:	2b00      	cmp	r3, #0
 8005170:	d01a      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800517c:	d10a      	bne.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	3324      	adds	r3, #36	; 0x24
 8005182:	2102      	movs	r1, #2
 8005184:	4618      	mov	r0, r3
 8005186:	f000 fcd9 	bl	8005b3c <RCCEx_PLL3_Config>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005194:	4b19      	ldr	r3, [pc, #100]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005198:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051a2:	4916      	ldr	r1, [pc, #88]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d036      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80051ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051be:	d01f      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80051c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051c4:	d817      	bhi.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80051ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ce:	d009      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80051d0:	e011      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	3304      	adds	r3, #4
 80051d6:	2100      	movs	r1, #0
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 fbfd 	bl	80059d8 <RCCEx_PLL2_Config>
 80051de:	4603      	mov	r3, r0
 80051e0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80051e2:	e00e      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3324      	adds	r3, #36	; 0x24
 80051e8:	2102      	movs	r1, #2
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 fca6 	bl	8005b3c <RCCEx_PLL3_Config>
 80051f0:	4603      	mov	r3, r0
 80051f2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80051f4:	e005      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	75fb      	strb	r3, [r7, #23]
      break;
 80051fa:	e002      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80051fc:	58024400 	.word	0x58024400
      break;
 8005200:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005202:	7dfb      	ldrb	r3, [r7, #23]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10a      	bne.n	800521e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005208:	4b93      	ldr	r3, [pc, #588]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800520a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800520c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005216:	4990      	ldr	r1, [pc, #576]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005218:	4313      	orrs	r3, r2
 800521a:	658b      	str	r3, [r1, #88]	; 0x58
 800521c:	e001      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800521e:	7dfb      	ldrb	r3, [r7, #23]
 8005220:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d033      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005234:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005238:	d01c      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800523a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800523e:	d816      	bhi.n	800526e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8005240:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005244:	d003      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8005246:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800524a:	d007      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800524c:	e00f      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800524e:	4b82      	ldr	r3, [pc, #520]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005252:	4a81      	ldr	r2, [pc, #516]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005258:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800525a:	e00c      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	3324      	adds	r3, #36	; 0x24
 8005260:	2101      	movs	r1, #1
 8005262:	4618      	mov	r0, r3
 8005264:	f000 fc6a 	bl	8005b3c <RCCEx_PLL3_Config>
 8005268:	4603      	mov	r3, r0
 800526a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800526c:	e003      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	75fb      	strb	r3, [r7, #23]
      break;
 8005272:	e000      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8005274:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005276:	7dfb      	ldrb	r3, [r7, #23]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10a      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800527c:	4b76      	ldr	r3, [pc, #472]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800527e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005280:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800528a:	4973      	ldr	r1, [pc, #460]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800528c:	4313      	orrs	r3, r2
 800528e:	654b      	str	r3, [r1, #84]	; 0x54
 8005290:	e001      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005292:	7dfb      	ldrb	r3, [r7, #23]
 8005294:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d029      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80052aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ae:	d007      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80052b0:	e00f      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052b2:	4b69      	ldr	r3, [pc, #420]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80052b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b6:	4a68      	ldr	r2, [pc, #416]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80052b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80052be:	e00b      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3304      	adds	r3, #4
 80052c4:	2102      	movs	r1, #2
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 fb86 	bl	80059d8 <RCCEx_PLL2_Config>
 80052cc:	4603      	mov	r3, r0
 80052ce:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80052d0:	e002      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	75fb      	strb	r3, [r7, #23]
      break;
 80052d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052d8:	7dfb      	ldrb	r3, [r7, #23]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d109      	bne.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80052de:	4b5e      	ldr	r3, [pc, #376]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80052e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ea:	495b      	ldr	r1, [pc, #364]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 80052f0:	e001      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f2:	7dfb      	ldrb	r3, [r7, #23]
 80052f4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	3324      	adds	r3, #36	; 0x24
 8005306:	2102      	movs	r1, #2
 8005308:	4618      	mov	r0, r3
 800530a:	f000 fc17 	bl	8005b3c <RCCEx_PLL3_Config>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d030      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005328:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800532c:	d017      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800532e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005332:	d811      	bhi.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005338:	d013      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800533a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800533e:	d80b      	bhi.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005340:	2b00      	cmp	r3, #0
 8005342:	d010      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005348:	d106      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800534a:	4b43      	ldr	r3, [pc, #268]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800534c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534e:	4a42      	ldr	r2, [pc, #264]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005354:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005356:	e007      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	75fb      	strb	r3, [r7, #23]
      break;
 800535c:	e004      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800535e:	bf00      	nop
 8005360:	e002      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005362:	bf00      	nop
 8005364:	e000      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005366:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005368:	7dfb      	ldrb	r3, [r7, #23]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d109      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800536e:	4b3a      	ldr	r3, [pc, #232]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005372:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800537a:	4937      	ldr	r1, [pc, #220]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800537c:	4313      	orrs	r3, r2
 800537e:	654b      	str	r3, [r1, #84]	; 0x54
 8005380:	e001      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005382:	7dfb      	ldrb	r3, [r7, #23]
 8005384:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d008      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005392:	4b31      	ldr	r3, [pc, #196]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005396:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539e:	492e      	ldr	r1, [pc, #184]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d009      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80053b0:	4b29      	ldr	r3, [pc, #164]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80053be:	4926      	ldr	r1, [pc, #152]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d008      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053d0:	4b21      	ldr	r3, [pc, #132]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053dc:	491e      	ldr	r1, [pc, #120]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00d      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053ee:	4b1a      	ldr	r3, [pc, #104]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	4a19      	ldr	r2, [pc, #100]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053f8:	6113      	str	r3, [r2, #16]
 80053fa:	4b17      	ldr	r3, [pc, #92]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053fc:	691a      	ldr	r2, [r3, #16]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005404:	4914      	ldr	r1, [pc, #80]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005406:	4313      	orrs	r3, r2
 8005408:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	da08      	bge.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005412:	4b11      	ldr	r3, [pc, #68]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005416:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800541e:	490e      	ldr	r1, [pc, #56]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005420:	4313      	orrs	r3, r2
 8005422:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d009      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005430:	4b09      	ldr	r3, [pc, #36]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005434:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543e:	4906      	ldr	r1, [pc, #24]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005440:	4313      	orrs	r3, r2
 8005442:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005444:	7dbb      	ldrb	r3, [r7, #22]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800544a:	2300      	movs	r3, #0
 800544c:	e000      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
}
 8005450:	4618      	mov	r0, r3
 8005452:	3718      	adds	r7, #24
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	58024400 	.word	0x58024400

0800545c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005460:	f7ff f860 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 8005464:	4602      	mov	r2, r0
 8005466:	4b06      	ldr	r3, [pc, #24]	; (8005480 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	091b      	lsrs	r3, r3, #4
 800546c:	f003 0307 	and.w	r3, r3, #7
 8005470:	4904      	ldr	r1, [pc, #16]	; (8005484 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005472:	5ccb      	ldrb	r3, [r1, r3]
 8005474:	f003 031f 	and.w	r3, r3, #31
 8005478:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800547c:	4618      	mov	r0, r3
 800547e:	bd80      	pop	{r7, pc}
 8005480:	58024400 	.word	0x58024400
 8005484:	08015450 	.word	0x08015450

08005488 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005488:	b480      	push	{r7}
 800548a:	b089      	sub	sp, #36	; 0x24
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005490:	4ba1      	ldr	r3, [pc, #644]	; (8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005494:	f003 0303 	and.w	r3, r3, #3
 8005498:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800549a:	4b9f      	ldr	r3, [pc, #636]	; (8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800549c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549e:	0b1b      	lsrs	r3, r3, #12
 80054a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80054a6:	4b9c      	ldr	r3, [pc, #624]	; (8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054aa:	091b      	lsrs	r3, r3, #4
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80054b2:	4b99      	ldr	r3, [pc, #612]	; (8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b6:	08db      	lsrs	r3, r3, #3
 80054b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	fb02 f303 	mul.w	r3, r2, r3
 80054c2:	ee07 3a90 	vmov	s15, r3
 80054c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 8111 	beq.w	80056f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	2b02      	cmp	r3, #2
 80054da:	f000 8083 	beq.w	80055e4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	f200 80a1 	bhi.w	8005628 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d056      	beq.n	80055a0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80054f2:	e099      	b.n	8005628 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054f4:	4b88      	ldr	r3, [pc, #544]	; (8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0320 	and.w	r3, r3, #32
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d02d      	beq.n	800555c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005500:	4b85      	ldr	r3, [pc, #532]	; (8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	08db      	lsrs	r3, r3, #3
 8005506:	f003 0303 	and.w	r3, r3, #3
 800550a:	4a84      	ldr	r2, [pc, #528]	; (800571c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800550c:	fa22 f303 	lsr.w	r3, r2, r3
 8005510:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	ee07 3a90 	vmov	s15, r3
 8005518:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	ee07 3a90 	vmov	s15, r3
 8005522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800552a:	4b7b      	ldr	r3, [pc, #492]	; (8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800552c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005532:	ee07 3a90 	vmov	s15, r3
 8005536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800553a:	ed97 6a03 	vldr	s12, [r7, #12]
 800553e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005720 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800554a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800554e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005556:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800555a:	e087      	b.n	800566c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	ee07 3a90 	vmov	s15, r3
 8005562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005566:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005724 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800556a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800556e:	4b6a      	ldr	r3, [pc, #424]	; (8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005576:	ee07 3a90 	vmov	s15, r3
 800557a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800557e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005582:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005720 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800558a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800558e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800559a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800559e:	e065      	b.n	800566c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	ee07 3a90 	vmov	s15, r3
 80055a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005728 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80055ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055b2:	4b59      	ldr	r3, [pc, #356]	; (8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ba:	ee07 3a90 	vmov	s15, r3
 80055be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80055c6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005720 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055e2:	e043      	b.n	800566c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	ee07 3a90 	vmov	s15, r3
 80055ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800572c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80055f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055f6:	4b48      	ldr	r3, [pc, #288]	; (8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055fe:	ee07 3a90 	vmov	s15, r3
 8005602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005606:	ed97 6a03 	vldr	s12, [r7, #12]
 800560a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005720 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800560e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800561a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800561e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005622:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005626:	e021      	b.n	800566c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	ee07 3a90 	vmov	s15, r3
 800562e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005632:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005728 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800563a:	4b37      	ldr	r3, [pc, #220]	; (8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800563c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005642:	ee07 3a90 	vmov	s15, r3
 8005646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800564a:	ed97 6a03 	vldr	s12, [r7, #12]
 800564e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005720 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800565a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800565e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005666:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800566a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800566c:	4b2a      	ldr	r3, [pc, #168]	; (8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800566e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005670:	0a5b      	lsrs	r3, r3, #9
 8005672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005676:	ee07 3a90 	vmov	s15, r3
 800567a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800567e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005682:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005686:	edd7 6a07 	vldr	s13, [r7, #28]
 800568a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800568e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005692:	ee17 2a90 	vmov	r2, s15
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800569a:	4b1f      	ldr	r3, [pc, #124]	; (8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800569c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569e:	0c1b      	lsrs	r3, r3, #16
 80056a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056a4:	ee07 3a90 	vmov	s15, r3
 80056a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80056b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056c0:	ee17 2a90 	vmov	r2, s15
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80056c8:	4b13      	ldr	r3, [pc, #76]	; (8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056cc:	0e1b      	lsrs	r3, r3, #24
 80056ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056d2:	ee07 3a90 	vmov	s15, r3
 80056d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80056e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056ee:	ee17 2a90 	vmov	r2, s15
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80056f6:	e008      	b.n	800570a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	609a      	str	r2, [r3, #8]
}
 800570a:	bf00      	nop
 800570c:	3724      	adds	r7, #36	; 0x24
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	58024400 	.word	0x58024400
 800571c:	03d09000 	.word	0x03d09000
 8005720:	46000000 	.word	0x46000000
 8005724:	4c742400 	.word	0x4c742400
 8005728:	4a742400 	.word	0x4a742400
 800572c:	4af42400 	.word	0x4af42400

08005730 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005730:	b480      	push	{r7}
 8005732:	b089      	sub	sp, #36	; 0x24
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005738:	4ba1      	ldr	r3, [pc, #644]	; (80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800573a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573c:	f003 0303 	and.w	r3, r3, #3
 8005740:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005742:	4b9f      	ldr	r3, [pc, #636]	; (80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005746:	0d1b      	lsrs	r3, r3, #20
 8005748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800574c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800574e:	4b9c      	ldr	r3, [pc, #624]	; (80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005752:	0a1b      	lsrs	r3, r3, #8
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800575a:	4b99      	ldr	r3, [pc, #612]	; (80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800575c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800575e:	08db      	lsrs	r3, r3, #3
 8005760:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	fb02 f303 	mul.w	r3, r2, r3
 800576a:	ee07 3a90 	vmov	s15, r3
 800576e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005772:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 8111 	beq.w	80059a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	2b02      	cmp	r3, #2
 8005782:	f000 8083 	beq.w	800588c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	2b02      	cmp	r3, #2
 800578a:	f200 80a1 	bhi.w	80058d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d056      	beq.n	8005848 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800579a:	e099      	b.n	80058d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800579c:	4b88      	ldr	r3, [pc, #544]	; (80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0320 	and.w	r3, r3, #32
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d02d      	beq.n	8005804 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057a8:	4b85      	ldr	r3, [pc, #532]	; (80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	08db      	lsrs	r3, r3, #3
 80057ae:	f003 0303 	and.w	r3, r3, #3
 80057b2:	4a84      	ldr	r2, [pc, #528]	; (80059c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80057b4:	fa22 f303 	lsr.w	r3, r2, r3
 80057b8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	ee07 3a90 	vmov	s15, r3
 80057c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	ee07 3a90 	vmov	s15, r3
 80057ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057d2:	4b7b      	ldr	r3, [pc, #492]	; (80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057da:	ee07 3a90 	vmov	s15, r3
 80057de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80057e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80059c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057fe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005802:	e087      	b.n	8005914 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	ee07 3a90 	vmov	s15, r3
 800580a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800580e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80059cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005816:	4b6a      	ldr	r3, [pc, #424]	; (80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800581e:	ee07 3a90 	vmov	s15, r3
 8005822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005826:	ed97 6a03 	vldr	s12, [r7, #12]
 800582a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80059c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800582e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800583a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800583e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005842:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005846:	e065      	b.n	8005914 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	ee07 3a90 	vmov	s15, r3
 800584e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005852:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80059d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800585a:	4b59      	ldr	r3, [pc, #356]	; (80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005862:	ee07 3a90 	vmov	s15, r3
 8005866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800586a:	ed97 6a03 	vldr	s12, [r7, #12]
 800586e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80059c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800587a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800587e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005886:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800588a:	e043      	b.n	8005914 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	ee07 3a90 	vmov	s15, r3
 8005892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005896:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80059d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800589a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800589e:	4b48      	ldr	r3, [pc, #288]	; (80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a6:	ee07 3a90 	vmov	s15, r3
 80058aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80058b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80059c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058ce:	e021      	b.n	8005914 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	ee07 3a90 	vmov	s15, r3
 80058d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80059d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80058de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058e2:	4b37      	ldr	r3, [pc, #220]	; (80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ea:	ee07 3a90 	vmov	s15, r3
 80058ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80058f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80059c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800590a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800590e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005912:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005914:	4b2a      	ldr	r3, [pc, #168]	; (80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005918:	0a5b      	lsrs	r3, r3, #9
 800591a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800591e:	ee07 3a90 	vmov	s15, r3
 8005922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005926:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800592a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800592e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800593a:	ee17 2a90 	vmov	r2, s15
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005942:	4b1f      	ldr	r3, [pc, #124]	; (80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	0c1b      	lsrs	r3, r3, #16
 8005948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800594c:	ee07 3a90 	vmov	s15, r3
 8005950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005954:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005958:	ee37 7a87 	vadd.f32	s14, s15, s14
 800595c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005960:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005968:	ee17 2a90 	vmov	r2, s15
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005970:	4b13      	ldr	r3, [pc, #76]	; (80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005974:	0e1b      	lsrs	r3, r3, #24
 8005976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800597a:	ee07 3a90 	vmov	s15, r3
 800597e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005982:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005986:	ee37 7a87 	vadd.f32	s14, s15, s14
 800598a:	edd7 6a07 	vldr	s13, [r7, #28]
 800598e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005992:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005996:	ee17 2a90 	vmov	r2, s15
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800599e:	e008      	b.n	80059b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	609a      	str	r2, [r3, #8]
}
 80059b2:	bf00      	nop
 80059b4:	3724      	adds	r7, #36	; 0x24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	58024400 	.word	0x58024400
 80059c4:	03d09000 	.word	0x03d09000
 80059c8:	46000000 	.word	0x46000000
 80059cc:	4c742400 	.word	0x4c742400
 80059d0:	4a742400 	.word	0x4a742400
 80059d4:	4af42400 	.word	0x4af42400

080059d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059e2:	2300      	movs	r3, #0
 80059e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059e6:	4b53      	ldr	r3, [pc, #332]	; (8005b34 <RCCEx_PLL2_Config+0x15c>)
 80059e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ea:	f003 0303 	and.w	r3, r3, #3
 80059ee:	2b03      	cmp	r3, #3
 80059f0:	d101      	bne.n	80059f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e099      	b.n	8005b2a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80059f6:	4b4f      	ldr	r3, [pc, #316]	; (8005b34 <RCCEx_PLL2_Config+0x15c>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a4e      	ldr	r2, [pc, #312]	; (8005b34 <RCCEx_PLL2_Config+0x15c>)
 80059fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a02:	f7fc fb45 	bl	8002090 <HAL_GetTick>
 8005a06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a08:	e008      	b.n	8005a1c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005a0a:	f7fc fb41 	bl	8002090 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d901      	bls.n	8005a1c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e086      	b.n	8005b2a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a1c:	4b45      	ldr	r3, [pc, #276]	; (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1f0      	bne.n	8005a0a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005a28:	4b42      	ldr	r3, [pc, #264]	; (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	031b      	lsls	r3, r3, #12
 8005a36:	493f      	ldr	r1, [pc, #252]	; (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	628b      	str	r3, [r1, #40]	; 0x28
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	3b01      	subs	r3, #1
 8005a42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	025b      	lsls	r3, r3, #9
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	431a      	orrs	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	3b01      	subs	r3, #1
 8005a58:	041b      	lsls	r3, r3, #16
 8005a5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	3b01      	subs	r3, #1
 8005a66:	061b      	lsls	r3, r3, #24
 8005a68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a6c:	4931      	ldr	r1, [pc, #196]	; (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005a72:	4b30      	ldr	r3, [pc, #192]	; (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	492d      	ldr	r1, [pc, #180]	; (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005a84:	4b2b      	ldr	r3, [pc, #172]	; (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a88:	f023 0220 	bic.w	r2, r3, #32
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	4928      	ldr	r1, [pc, #160]	; (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005a96:	4b27      	ldr	r3, [pc, #156]	; (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9a:	4a26      	ldr	r2, [pc, #152]	; (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005a9c:	f023 0310 	bic.w	r3, r3, #16
 8005aa0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005aa2:	4b24      	ldr	r3, [pc, #144]	; (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005aa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005aa6:	4b24      	ldr	r3, [pc, #144]	; (8005b38 <RCCEx_PLL2_Config+0x160>)
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	69d2      	ldr	r2, [r2, #28]
 8005aae:	00d2      	lsls	r2, r2, #3
 8005ab0:	4920      	ldr	r1, [pc, #128]	; (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005ab6:	4b1f      	ldr	r3, [pc, #124]	; (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aba:	4a1e      	ldr	r2, [pc, #120]	; (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005abc:	f043 0310 	orr.w	r3, r3, #16
 8005ac0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d106      	bne.n	8005ad6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005ac8:	4b1a      	ldr	r3, [pc, #104]	; (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005acc:	4a19      	ldr	r2, [pc, #100]	; (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005ace:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ad2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ad4:	e00f      	b.n	8005af6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d106      	bne.n	8005aea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005adc:	4b15      	ldr	r3, [pc, #84]	; (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae0:	4a14      	ldr	r2, [pc, #80]	; (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005ae2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ae6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ae8:	e005      	b.n	8005af6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005aea:	4b12      	ldr	r3, [pc, #72]	; (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aee:	4a11      	ldr	r2, [pc, #68]	; (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005af0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005af4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005af6:	4b0f      	ldr	r3, [pc, #60]	; (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a0e      	ldr	r2, [pc, #56]	; (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005afc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b02:	f7fc fac5 	bl	8002090 <HAL_GetTick>
 8005b06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b08:	e008      	b.n	8005b1c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005b0a:	f7fc fac1 	bl	8002090 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d901      	bls.n	8005b1c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e006      	b.n	8005b2a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b1c:	4b05      	ldr	r3, [pc, #20]	; (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d0f0      	beq.n	8005b0a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	58024400 	.word	0x58024400
 8005b38:	ffff0007 	.word	0xffff0007

08005b3c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b46:	2300      	movs	r3, #0
 8005b48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005b4a:	4b53      	ldr	r3, [pc, #332]	; (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4e:	f003 0303 	and.w	r3, r3, #3
 8005b52:	2b03      	cmp	r3, #3
 8005b54:	d101      	bne.n	8005b5a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e099      	b.n	8005c8e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005b5a:	4b4f      	ldr	r3, [pc, #316]	; (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a4e      	ldr	r2, [pc, #312]	; (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b66:	f7fc fa93 	bl	8002090 <HAL_GetTick>
 8005b6a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b6c:	e008      	b.n	8005b80 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005b6e:	f7fc fa8f 	bl	8002090 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d901      	bls.n	8005b80 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e086      	b.n	8005c8e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b80:	4b45      	ldr	r3, [pc, #276]	; (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1f0      	bne.n	8005b6e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005b8c:	4b42      	ldr	r3, [pc, #264]	; (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b90:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	051b      	lsls	r3, r3, #20
 8005b9a:	493f      	ldr	r1, [pc, #252]	; (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	628b      	str	r3, [r1, #40]	; 0x28
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	025b      	lsls	r3, r3, #9
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	041b      	lsls	r3, r3, #16
 8005bbe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	061b      	lsls	r3, r3, #24
 8005bcc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005bd0:	4931      	ldr	r1, [pc, #196]	; (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005bd6:	4b30      	ldr	r3, [pc, #192]	; (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	492d      	ldr	r1, [pc, #180]	; (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005be8:	4b2b      	ldr	r3, [pc, #172]	; (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	4928      	ldr	r1, [pc, #160]	; (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005bfa:	4b27      	ldr	r3, [pc, #156]	; (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfe:	4a26      	ldr	r2, [pc, #152]	; (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005c06:	4b24      	ldr	r3, [pc, #144]	; (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005c08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c0a:	4b24      	ldr	r3, [pc, #144]	; (8005c9c <RCCEx_PLL3_Config+0x160>)
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	69d2      	ldr	r2, [r2, #28]
 8005c12:	00d2      	lsls	r2, r2, #3
 8005c14:	4920      	ldr	r1, [pc, #128]	; (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005c1a:	4b1f      	ldr	r3, [pc, #124]	; (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1e:	4a1e      	ldr	r2, [pc, #120]	; (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d106      	bne.n	8005c3a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005c2c:	4b1a      	ldr	r3, [pc, #104]	; (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c30:	4a19      	ldr	r2, [pc, #100]	; (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005c32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c38:	e00f      	b.n	8005c5a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d106      	bne.n	8005c4e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005c40:	4b15      	ldr	r3, [pc, #84]	; (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c44:	4a14      	ldr	r2, [pc, #80]	; (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005c46:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005c4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c4c:	e005      	b.n	8005c5a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005c4e:	4b12      	ldr	r3, [pc, #72]	; (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c52:	4a11      	ldr	r2, [pc, #68]	; (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005c54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c58:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005c5a:	4b0f      	ldr	r3, [pc, #60]	; (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a0e      	ldr	r2, [pc, #56]	; (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c66:	f7fc fa13 	bl	8002090 <HAL_GetTick>
 8005c6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c6c:	e008      	b.n	8005c80 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005c6e:	f7fc fa0f 	bl	8002090 <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d901      	bls.n	8005c80 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e006      	b.n	8005c8e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c80:	4b05      	ldr	r3, [pc, #20]	; (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d0f0      	beq.n	8005c6e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	58024400 	.word	0x58024400
 8005c9c:	ffff0007 	.word	0xffff0007

08005ca0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e0eb      	b.n	8005e8e <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a75      	ldr	r2, [pc, #468]	; (8005e98 <HAL_SPI_Init+0x1f8>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d00f      	beq.n	8005ce6 <HAL_SPI_Init+0x46>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a74      	ldr	r2, [pc, #464]	; (8005e9c <HAL_SPI_Init+0x1fc>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d00a      	beq.n	8005ce6 <HAL_SPI_Init+0x46>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a72      	ldr	r2, [pc, #456]	; (8005ea0 <HAL_SPI_Init+0x200>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d005      	beq.n	8005ce6 <HAL_SPI_Init+0x46>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	2b0f      	cmp	r3, #15
 8005ce0:	d901      	bls.n	8005ce6 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e0d3      	b.n	8005e8e <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 fb9c 	bl	8006424 <SPI_GetPacketSize>
 8005cec:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a69      	ldr	r2, [pc, #420]	; (8005e98 <HAL_SPI_Init+0x1f8>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d00c      	beq.n	8005d12 <HAL_SPI_Init+0x72>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a67      	ldr	r2, [pc, #412]	; (8005e9c <HAL_SPI_Init+0x1fc>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d007      	beq.n	8005d12 <HAL_SPI_Init+0x72>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a66      	ldr	r2, [pc, #408]	; (8005ea0 <HAL_SPI_Init+0x200>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d002      	beq.n	8005d12 <HAL_SPI_Init+0x72>
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2b08      	cmp	r3, #8
 8005d10:	d811      	bhi.n	8005d36 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005d16:	4a60      	ldr	r2, [pc, #384]	; (8005e98 <HAL_SPI_Init+0x1f8>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d009      	beq.n	8005d30 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a5e      	ldr	r2, [pc, #376]	; (8005e9c <HAL_SPI_Init+0x1fc>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d004      	beq.n	8005d30 <HAL_SPI_Init+0x90>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a5d      	ldr	r2, [pc, #372]	; (8005ea0 <HAL_SPI_Init+0x200>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d104      	bne.n	8005d3a <HAL_SPI_Init+0x9a>
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	2b10      	cmp	r3, #16
 8005d34:	d901      	bls.n	8005d3a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e0a9      	b.n	8005e8e <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d106      	bne.n	8005d54 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7fb fc9c 	bl	800168c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2202      	movs	r2, #2
 8005d58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f022 0201 	bic.w	r2, r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d74:	d119      	bne.n	8005daa <HAL_SPI_Init+0x10a>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d7e:	d103      	bne.n	8005d88 <HAL_SPI_Init+0xe8>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d008      	beq.n	8005d9a <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10c      	bne.n	8005daa <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d98:	d107      	bne.n	8005daa <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005da8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	69da      	ldr	r2, [r3, #28]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db2:	431a      	orrs	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	431a      	orrs	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dbc:	ea42 0103 	orr.w	r1, r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68da      	ldr	r2, [r3, #12]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	431a      	orrs	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	431a      	orrs	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	431a      	orrs	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	431a      	orrs	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	431a      	orrs	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	431a      	orrs	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e0a:	ea42 0103 	orr.w	r1, r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d113      	bne.n	8005e4a <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e34:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e48:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 0201 	bic.w	r2, r2, #1
 8005e58:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00a      	beq.n	8005e7c <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	40013000 	.word	0x40013000
 8005e9c:	40003800 	.word	0x40003800
 8005ea0:	40003c00 	.word	0x40003c00

08005ea4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b08a      	sub	sp, #40	; 0x28
 8005ea8:	af02      	add	r7, sp, #8
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	603b      	str	r3, [r7, #0]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3320      	adds	r3, #32
 8005eba:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d101      	bne.n	8005ece <HAL_SPI_Transmit+0x2a>
 8005eca:	2302      	movs	r3, #2
 8005ecc:	e1d7      	b.n	800627e <HAL_SPI_Transmit+0x3da>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ed6:	f7fc f8db 	bl	8002090 <HAL_GetTick>
 8005eda:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d007      	beq.n	8005ef8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005ee8:	2302      	movs	r3, #2
 8005eea:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005ef4:	7efb      	ldrb	r3, [r7, #27]
 8005ef6:	e1c2      	b.n	800627e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d002      	beq.n	8005f04 <HAL_SPI_Transmit+0x60>
 8005efe:	88fb      	ldrh	r3, [r7, #6]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d107      	bne.n	8005f14 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005f10:	7efb      	ldrb	r3, [r7, #27]
 8005f12:	e1b4      	b.n	800627e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2203      	movs	r2, #3
 8005f18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	88fa      	ldrh	r2, [r7, #6]
 8005f2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	88fa      	ldrh	r2, [r7, #6]
 8005f36:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005f64:	d107      	bne.n	8005f76 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f74:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	4b96      	ldr	r3, [pc, #600]	; (80061d8 <HAL_SPI_Transmit+0x334>)
 8005f7e:	4013      	ands	r3, r2
 8005f80:	88f9      	ldrh	r1, [r7, #6]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	6812      	ldr	r2, [r2, #0]
 8005f86:	430b      	orrs	r3, r1
 8005f88:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f042 0201 	orr.w	r2, r2, #1
 8005f98:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fa2:	d107      	bne.n	8005fb4 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	2b0f      	cmp	r3, #15
 8005fba:	d947      	bls.n	800604c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005fbc:	e03f      	b.n	800603e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d114      	bne.n	8005ff6 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6812      	ldr	r2, [r2, #0]
 8005fd6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fdc:	1d1a      	adds	r2, r3, #4
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	3b01      	subs	r3, #1
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005ff4:	e023      	b.n	800603e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ff6:	f7fc f84b 	bl	8002090 <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	429a      	cmp	r2, r3
 8006004:	d803      	bhi.n	800600e <HAL_SPI_Transmit+0x16a>
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600c:	d102      	bne.n	8006014 <HAL_SPI_Transmit+0x170>
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d114      	bne.n	800603e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 f937 	bl	8006288 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006028:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e11f      	b.n	800627e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006044:	b29b      	uxth	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1b9      	bne.n	8005fbe <HAL_SPI_Transmit+0x11a>
 800604a:	e0f2      	b.n	8006232 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	2b07      	cmp	r3, #7
 8006052:	f240 80e7 	bls.w	8006224 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006056:	e05d      	b.n	8006114 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	f003 0302 	and.w	r3, r3, #2
 8006062:	2b02      	cmp	r3, #2
 8006064:	d132      	bne.n	80060cc <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800606c:	b29b      	uxth	r3, r3
 800606e:	2b01      	cmp	r3, #1
 8006070:	d918      	bls.n	80060a4 <HAL_SPI_Transmit+0x200>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006076:	2b00      	cmp	r3, #0
 8006078:	d014      	beq.n	80060a4 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6812      	ldr	r2, [r2, #0]
 8006084:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800608a:	1d1a      	adds	r2, r3, #4
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006096:	b29b      	uxth	r3, r3
 8006098:	3b02      	subs	r3, #2
 800609a:	b29a      	uxth	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80060a2:	e037      	b.n	8006114 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060a8:	881a      	ldrh	r2, [r3, #0]
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060b2:	1c9a      	adds	r2, r3, #2
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80060be:	b29b      	uxth	r3, r3
 80060c0:	3b01      	subs	r3, #1
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80060ca:	e023      	b.n	8006114 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060cc:	f7fb ffe0 	bl	8002090 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d803      	bhi.n	80060e4 <HAL_SPI_Transmit+0x240>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e2:	d102      	bne.n	80060ea <HAL_SPI_Transmit+0x246>
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d114      	bne.n	8006114 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 f8cc 	bl	8006288 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e0b4      	b.n	800627e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800611a:	b29b      	uxth	r3, r3
 800611c:	2b00      	cmp	r3, #0
 800611e:	d19b      	bne.n	8006058 <HAL_SPI_Transmit+0x1b4>
 8006120:	e087      	b.n	8006232 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	f003 0302 	and.w	r3, r3, #2
 800612c:	2b02      	cmp	r3, #2
 800612e:	d155      	bne.n	80061dc <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006136:	b29b      	uxth	r3, r3
 8006138:	2b03      	cmp	r3, #3
 800613a:	d918      	bls.n	800616e <HAL_SPI_Transmit+0x2ca>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006140:	2b40      	cmp	r3, #64	; 0x40
 8006142:	d914      	bls.n	800616e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6812      	ldr	r2, [r2, #0]
 800614e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006154:	1d1a      	adds	r2, r3, #4
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006160:	b29b      	uxth	r3, r3
 8006162:	3b04      	subs	r3, #4
 8006164:	b29a      	uxth	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800616c:	e05a      	b.n	8006224 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006174:	b29b      	uxth	r3, r3
 8006176:	2b01      	cmp	r3, #1
 8006178:	d917      	bls.n	80061aa <HAL_SPI_Transmit+0x306>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617e:	2b00      	cmp	r3, #0
 8006180:	d013      	beq.n	80061aa <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006186:	881a      	ldrh	r2, [r3, #0]
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006190:	1c9a      	adds	r2, r3, #2
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800619c:	b29b      	uxth	r3, r3
 800619e:	3b02      	subs	r3, #2
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80061a8:	e03c      	b.n	8006224 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3320      	adds	r3, #32
 80061b4:	7812      	ldrb	r2, [r2, #0]
 80061b6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061bc:	1c5a      	adds	r2, r3, #1
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	3b01      	subs	r3, #1
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80061d4:	e026      	b.n	8006224 <HAL_SPI_Transmit+0x380>
 80061d6:	bf00      	nop
 80061d8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061dc:	f7fb ff58 	bl	8002090 <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	683a      	ldr	r2, [r7, #0]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d803      	bhi.n	80061f4 <HAL_SPI_Transmit+0x350>
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f2:	d102      	bne.n	80061fa <HAL_SPI_Transmit+0x356>
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d114      	bne.n	8006224 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f000 f844 	bl	8006288 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800620e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e02c      	b.n	800627e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800622a:	b29b      	uxth	r3, r3
 800622c:	2b00      	cmp	r3, #0
 800622e:	f47f af78 	bne.w	8006122 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	2200      	movs	r2, #0
 800623a:	2108      	movs	r1, #8
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 f8c3 	bl	80063c8 <SPI_WaitOnFlagUntilTimeout>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d007      	beq.n	8006258 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800624e:	f043 0220 	orr.w	r2, r3, #32
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f000 f815 	bl	8006288 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006274:	2b00      	cmp	r3, #0
 8006276:	d001      	beq.n	800627c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e000      	b.n	800627e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800627c:	7efb      	ldrb	r3, [r7, #27]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3720      	adds	r7, #32
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop

08006288 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	699a      	ldr	r2, [r3, #24]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f042 0208 	orr.w	r2, r2, #8
 80062a6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	699a      	ldr	r2, [r3, #24]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f042 0210 	orr.w	r2, r2, #16
 80062b6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f022 0201 	bic.w	r2, r2, #1
 80062c6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6919      	ldr	r1, [r3, #16]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	4b3c      	ldr	r3, [pc, #240]	; (80063c4 <SPI_CloseTransfer+0x13c>)
 80062d4:	400b      	ands	r3, r1
 80062d6:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689a      	ldr	r2, [r3, #8]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80062e6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	2b04      	cmp	r3, #4
 80062f2:	d014      	beq.n	800631e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f003 0320 	and.w	r3, r3, #32
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00f      	beq.n	800631e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006304:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	699a      	ldr	r2, [r3, #24]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f042 0220 	orr.w	r2, r2, #32
 800631c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b03      	cmp	r3, #3
 8006328:	d014      	beq.n	8006354 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00f      	beq.n	8006354 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800633a:	f043 0204 	orr.w	r2, r3, #4
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	699a      	ldr	r2, [r3, #24]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006352:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00f      	beq.n	800637e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006364:	f043 0201 	orr.w	r2, r3, #1
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	699a      	ldr	r2, [r3, #24]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800637c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00f      	beq.n	80063a8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800638e:	f043 0208 	orr.w	r2, r3, #8
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699a      	ldr	r2, [r3, #24]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063a6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80063b8:	bf00      	nop
 80063ba:	3714      	adds	r7, #20
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr
 80063c4:	fffffc90 	.word	0xfffffc90

080063c8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	603b      	str	r3, [r7, #0]
 80063d4:	4613      	mov	r3, r2
 80063d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80063d8:	e010      	b.n	80063fc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063da:	f7fb fe59 	bl	8002090 <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d803      	bhi.n	80063f2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f0:	d102      	bne.n	80063f8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e00f      	b.n	800641c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	695a      	ldr	r2, [r3, #20]
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	4013      	ands	r3, r2
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	429a      	cmp	r2, r3
 800640a:	bf0c      	ite	eq
 800640c:	2301      	moveq	r3, #1
 800640e:	2300      	movne	r3, #0
 8006410:	b2db      	uxtb	r3, r3
 8006412:	461a      	mov	r2, r3
 8006414:	79fb      	ldrb	r3, [r7, #7]
 8006416:	429a      	cmp	r2, r3
 8006418:	d0df      	beq.n	80063da <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006430:	095b      	lsrs	r3, r3, #5
 8006432:	3301      	adds	r3, #1
 8006434:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	3301      	adds	r3, #1
 800643c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	3307      	adds	r3, #7
 8006442:	08db      	lsrs	r3, r3, #3
 8006444:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	fb02 f303 	mul.w	r3, r2, r3
}
 800644e:	4618      	mov	r0, r3
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b082      	sub	sp, #8
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d101      	bne.n	800646c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e049      	b.n	8006500 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006472:	b2db      	uxtb	r3, r3
 8006474:	2b00      	cmp	r3, #0
 8006476:	d106      	bne.n	8006486 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f7fb fb6b 	bl	8001b5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2202      	movs	r2, #2
 800648a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	3304      	adds	r3, #4
 8006496:	4619      	mov	r1, r3
 8006498:	4610      	mov	r0, r2
 800649a:	f000 fa4d 	bl	8006938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d109      	bne.n	800652c <HAL_TIM_PWM_Start+0x24>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b01      	cmp	r3, #1
 8006522:	bf14      	ite	ne
 8006524:	2301      	movne	r3, #1
 8006526:	2300      	moveq	r3, #0
 8006528:	b2db      	uxtb	r3, r3
 800652a:	e03c      	b.n	80065a6 <HAL_TIM_PWM_Start+0x9e>
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	2b04      	cmp	r3, #4
 8006530:	d109      	bne.n	8006546 <HAL_TIM_PWM_Start+0x3e>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b01      	cmp	r3, #1
 800653c:	bf14      	ite	ne
 800653e:	2301      	movne	r3, #1
 8006540:	2300      	moveq	r3, #0
 8006542:	b2db      	uxtb	r3, r3
 8006544:	e02f      	b.n	80065a6 <HAL_TIM_PWM_Start+0x9e>
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b08      	cmp	r3, #8
 800654a:	d109      	bne.n	8006560 <HAL_TIM_PWM_Start+0x58>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2b01      	cmp	r3, #1
 8006556:	bf14      	ite	ne
 8006558:	2301      	movne	r3, #1
 800655a:	2300      	moveq	r3, #0
 800655c:	b2db      	uxtb	r3, r3
 800655e:	e022      	b.n	80065a6 <HAL_TIM_PWM_Start+0x9e>
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	2b0c      	cmp	r3, #12
 8006564:	d109      	bne.n	800657a <HAL_TIM_PWM_Start+0x72>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b01      	cmp	r3, #1
 8006570:	bf14      	ite	ne
 8006572:	2301      	movne	r3, #1
 8006574:	2300      	moveq	r3, #0
 8006576:	b2db      	uxtb	r3, r3
 8006578:	e015      	b.n	80065a6 <HAL_TIM_PWM_Start+0x9e>
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2b10      	cmp	r3, #16
 800657e:	d109      	bne.n	8006594 <HAL_TIM_PWM_Start+0x8c>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b01      	cmp	r3, #1
 800658a:	bf14      	ite	ne
 800658c:	2301      	movne	r3, #1
 800658e:	2300      	moveq	r3, #0
 8006590:	b2db      	uxtb	r3, r3
 8006592:	e008      	b.n	80065a6 <HAL_TIM_PWM_Start+0x9e>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b01      	cmp	r3, #1
 800659e:	bf14      	ite	ne
 80065a0:	2301      	movne	r3, #1
 80065a2:	2300      	moveq	r3, #0
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e09c      	b.n	80066e8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d104      	bne.n	80065be <HAL_TIM_PWM_Start+0xb6>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2202      	movs	r2, #2
 80065b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065bc:	e023      	b.n	8006606 <HAL_TIM_PWM_Start+0xfe>
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2b04      	cmp	r3, #4
 80065c2:	d104      	bne.n	80065ce <HAL_TIM_PWM_Start+0xc6>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2202      	movs	r2, #2
 80065c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065cc:	e01b      	b.n	8006606 <HAL_TIM_PWM_Start+0xfe>
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	2b08      	cmp	r3, #8
 80065d2:	d104      	bne.n	80065de <HAL_TIM_PWM_Start+0xd6>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065dc:	e013      	b.n	8006606 <HAL_TIM_PWM_Start+0xfe>
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	2b0c      	cmp	r3, #12
 80065e2:	d104      	bne.n	80065ee <HAL_TIM_PWM_Start+0xe6>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2202      	movs	r2, #2
 80065e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065ec:	e00b      	b.n	8006606 <HAL_TIM_PWM_Start+0xfe>
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	2b10      	cmp	r3, #16
 80065f2:	d104      	bne.n	80065fe <HAL_TIM_PWM_Start+0xf6>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2202      	movs	r2, #2
 80065f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065fc:	e003      	b.n	8006606 <HAL_TIM_PWM_Start+0xfe>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2202      	movs	r2, #2
 8006602:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2201      	movs	r2, #1
 800660c:	6839      	ldr	r1, [r7, #0]
 800660e:	4618      	mov	r0, r3
 8006610:	f000 fcfa 	bl	8007008 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a35      	ldr	r2, [pc, #212]	; (80066f0 <HAL_TIM_PWM_Start+0x1e8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d013      	beq.n	8006646 <HAL_TIM_PWM_Start+0x13e>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a34      	ldr	r2, [pc, #208]	; (80066f4 <HAL_TIM_PWM_Start+0x1ec>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d00e      	beq.n	8006646 <HAL_TIM_PWM_Start+0x13e>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a32      	ldr	r2, [pc, #200]	; (80066f8 <HAL_TIM_PWM_Start+0x1f0>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d009      	beq.n	8006646 <HAL_TIM_PWM_Start+0x13e>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a31      	ldr	r2, [pc, #196]	; (80066fc <HAL_TIM_PWM_Start+0x1f4>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d004      	beq.n	8006646 <HAL_TIM_PWM_Start+0x13e>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a2f      	ldr	r2, [pc, #188]	; (8006700 <HAL_TIM_PWM_Start+0x1f8>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d101      	bne.n	800664a <HAL_TIM_PWM_Start+0x142>
 8006646:	2301      	movs	r3, #1
 8006648:	e000      	b.n	800664c <HAL_TIM_PWM_Start+0x144>
 800664a:	2300      	movs	r3, #0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d007      	beq.n	8006660 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800665e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a22      	ldr	r2, [pc, #136]	; (80066f0 <HAL_TIM_PWM_Start+0x1e8>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d01d      	beq.n	80066a6 <HAL_TIM_PWM_Start+0x19e>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006672:	d018      	beq.n	80066a6 <HAL_TIM_PWM_Start+0x19e>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a22      	ldr	r2, [pc, #136]	; (8006704 <HAL_TIM_PWM_Start+0x1fc>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d013      	beq.n	80066a6 <HAL_TIM_PWM_Start+0x19e>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a21      	ldr	r2, [pc, #132]	; (8006708 <HAL_TIM_PWM_Start+0x200>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d00e      	beq.n	80066a6 <HAL_TIM_PWM_Start+0x19e>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a1f      	ldr	r2, [pc, #124]	; (800670c <HAL_TIM_PWM_Start+0x204>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d009      	beq.n	80066a6 <HAL_TIM_PWM_Start+0x19e>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a17      	ldr	r2, [pc, #92]	; (80066f4 <HAL_TIM_PWM_Start+0x1ec>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d004      	beq.n	80066a6 <HAL_TIM_PWM_Start+0x19e>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a1b      	ldr	r2, [pc, #108]	; (8006710 <HAL_TIM_PWM_Start+0x208>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d115      	bne.n	80066d2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689a      	ldr	r2, [r3, #8]
 80066ac:	4b19      	ldr	r3, [pc, #100]	; (8006714 <HAL_TIM_PWM_Start+0x20c>)
 80066ae:	4013      	ands	r3, r2
 80066b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2b06      	cmp	r3, #6
 80066b6:	d015      	beq.n	80066e4 <HAL_TIM_PWM_Start+0x1dc>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066be:	d011      	beq.n	80066e4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f042 0201 	orr.w	r2, r2, #1
 80066ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066d0:	e008      	b.n	80066e4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f042 0201 	orr.w	r2, r2, #1
 80066e0:	601a      	str	r2, [r3, #0]
 80066e2:	e000      	b.n	80066e6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	40010000 	.word	0x40010000
 80066f4:	40010400 	.word	0x40010400
 80066f8:	40014000 	.word	0x40014000
 80066fc:	40014400 	.word	0x40014400
 8006700:	40014800 	.word	0x40014800
 8006704:	40000400 	.word	0x40000400
 8006708:	40000800 	.word	0x40000800
 800670c:	40000c00 	.word	0x40000c00
 8006710:	40001800 	.word	0x40001800
 8006714:	00010007 	.word	0x00010007

08006718 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800672a:	2b01      	cmp	r3, #1
 800672c:	d101      	bne.n	8006732 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800672e:	2302      	movs	r3, #2
 8006730:	e0fd      	b.n	800692e <HAL_TIM_PWM_ConfigChannel+0x216>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b14      	cmp	r3, #20
 800673e:	f200 80f0 	bhi.w	8006922 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006742:	a201      	add	r2, pc, #4	; (adr r2, 8006748 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006748:	0800679d 	.word	0x0800679d
 800674c:	08006923 	.word	0x08006923
 8006750:	08006923 	.word	0x08006923
 8006754:	08006923 	.word	0x08006923
 8006758:	080067dd 	.word	0x080067dd
 800675c:	08006923 	.word	0x08006923
 8006760:	08006923 	.word	0x08006923
 8006764:	08006923 	.word	0x08006923
 8006768:	0800681f 	.word	0x0800681f
 800676c:	08006923 	.word	0x08006923
 8006770:	08006923 	.word	0x08006923
 8006774:	08006923 	.word	0x08006923
 8006778:	0800685f 	.word	0x0800685f
 800677c:	08006923 	.word	0x08006923
 8006780:	08006923 	.word	0x08006923
 8006784:	08006923 	.word	0x08006923
 8006788:	080068a1 	.word	0x080068a1
 800678c:	08006923 	.word	0x08006923
 8006790:	08006923 	.word	0x08006923
 8006794:	08006923 	.word	0x08006923
 8006798:	080068e1 	.word	0x080068e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68b9      	ldr	r1, [r7, #8]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 f962 	bl	8006a6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	699a      	ldr	r2, [r3, #24]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f042 0208 	orr.w	r2, r2, #8
 80067b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	699a      	ldr	r2, [r3, #24]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f022 0204 	bic.w	r2, r2, #4
 80067c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6999      	ldr	r1, [r3, #24]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	691a      	ldr	r2, [r3, #16]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	619a      	str	r2, [r3, #24]
      break;
 80067da:	e0a3      	b.n	8006924 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68b9      	ldr	r1, [r7, #8]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 f9d2 	bl	8006b8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	699a      	ldr	r2, [r3, #24]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	699a      	ldr	r2, [r3, #24]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6999      	ldr	r1, [r3, #24]
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	021a      	lsls	r2, r3, #8
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	430a      	orrs	r2, r1
 800681a:	619a      	str	r2, [r3, #24]
      break;
 800681c:	e082      	b.n	8006924 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68b9      	ldr	r1, [r7, #8]
 8006824:	4618      	mov	r0, r3
 8006826:	f000 fa3b 	bl	8006ca0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	69da      	ldr	r2, [r3, #28]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f042 0208 	orr.w	r2, r2, #8
 8006838:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	69da      	ldr	r2, [r3, #28]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f022 0204 	bic.w	r2, r2, #4
 8006848:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	69d9      	ldr	r1, [r3, #28]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	691a      	ldr	r2, [r3, #16]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	430a      	orrs	r2, r1
 800685a:	61da      	str	r2, [r3, #28]
      break;
 800685c:	e062      	b.n	8006924 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68b9      	ldr	r1, [r7, #8]
 8006864:	4618      	mov	r0, r3
 8006866:	f000 faa1 	bl	8006dac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	69da      	ldr	r2, [r3, #28]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006878:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	69da      	ldr	r2, [r3, #28]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006888:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	69d9      	ldr	r1, [r3, #28]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	021a      	lsls	r2, r3, #8
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	430a      	orrs	r2, r1
 800689c:	61da      	str	r2, [r3, #28]
      break;
 800689e:	e041      	b.n	8006924 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68b9      	ldr	r1, [r7, #8]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 fae8 	bl	8006e7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f042 0208 	orr.w	r2, r2, #8
 80068ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f022 0204 	bic.w	r2, r2, #4
 80068ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	691a      	ldr	r2, [r3, #16]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	430a      	orrs	r2, r1
 80068dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068de:	e021      	b.n	8006924 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68b9      	ldr	r1, [r7, #8]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 fb2a 	bl	8006f40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800690a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	021a      	lsls	r2, r3, #8
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	430a      	orrs	r2, r1
 800691e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006920:	e000      	b.n	8006924 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006922:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop

08006938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a40      	ldr	r2, [pc, #256]	; (8006a4c <TIM_Base_SetConfig+0x114>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d013      	beq.n	8006978 <TIM_Base_SetConfig+0x40>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006956:	d00f      	beq.n	8006978 <TIM_Base_SetConfig+0x40>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a3d      	ldr	r2, [pc, #244]	; (8006a50 <TIM_Base_SetConfig+0x118>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d00b      	beq.n	8006978 <TIM_Base_SetConfig+0x40>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a3c      	ldr	r2, [pc, #240]	; (8006a54 <TIM_Base_SetConfig+0x11c>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d007      	beq.n	8006978 <TIM_Base_SetConfig+0x40>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a3b      	ldr	r2, [pc, #236]	; (8006a58 <TIM_Base_SetConfig+0x120>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d003      	beq.n	8006978 <TIM_Base_SetConfig+0x40>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a3a      	ldr	r2, [pc, #232]	; (8006a5c <TIM_Base_SetConfig+0x124>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d108      	bne.n	800698a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800697e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a2f      	ldr	r2, [pc, #188]	; (8006a4c <TIM_Base_SetConfig+0x114>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d01f      	beq.n	80069d2 <TIM_Base_SetConfig+0x9a>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006998:	d01b      	beq.n	80069d2 <TIM_Base_SetConfig+0x9a>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a2c      	ldr	r2, [pc, #176]	; (8006a50 <TIM_Base_SetConfig+0x118>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d017      	beq.n	80069d2 <TIM_Base_SetConfig+0x9a>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a2b      	ldr	r2, [pc, #172]	; (8006a54 <TIM_Base_SetConfig+0x11c>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d013      	beq.n	80069d2 <TIM_Base_SetConfig+0x9a>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a2a      	ldr	r2, [pc, #168]	; (8006a58 <TIM_Base_SetConfig+0x120>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d00f      	beq.n	80069d2 <TIM_Base_SetConfig+0x9a>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a29      	ldr	r2, [pc, #164]	; (8006a5c <TIM_Base_SetConfig+0x124>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d00b      	beq.n	80069d2 <TIM_Base_SetConfig+0x9a>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a28      	ldr	r2, [pc, #160]	; (8006a60 <TIM_Base_SetConfig+0x128>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d007      	beq.n	80069d2 <TIM_Base_SetConfig+0x9a>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a27      	ldr	r2, [pc, #156]	; (8006a64 <TIM_Base_SetConfig+0x12c>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d003      	beq.n	80069d2 <TIM_Base_SetConfig+0x9a>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a26      	ldr	r2, [pc, #152]	; (8006a68 <TIM_Base_SetConfig+0x130>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d108      	bne.n	80069e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	689a      	ldr	r2, [r3, #8]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a10      	ldr	r2, [pc, #64]	; (8006a4c <TIM_Base_SetConfig+0x114>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d00f      	beq.n	8006a30 <TIM_Base_SetConfig+0xf8>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a12      	ldr	r2, [pc, #72]	; (8006a5c <TIM_Base_SetConfig+0x124>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d00b      	beq.n	8006a30 <TIM_Base_SetConfig+0xf8>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a11      	ldr	r2, [pc, #68]	; (8006a60 <TIM_Base_SetConfig+0x128>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d007      	beq.n	8006a30 <TIM_Base_SetConfig+0xf8>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a10      	ldr	r2, [pc, #64]	; (8006a64 <TIM_Base_SetConfig+0x12c>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d003      	beq.n	8006a30 <TIM_Base_SetConfig+0xf8>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a0f      	ldr	r2, [pc, #60]	; (8006a68 <TIM_Base_SetConfig+0x130>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d103      	bne.n	8006a38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	691a      	ldr	r2, [r3, #16]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	615a      	str	r2, [r3, #20]
}
 8006a3e:	bf00      	nop
 8006a40:	3714      	adds	r7, #20
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	40010000 	.word	0x40010000
 8006a50:	40000400 	.word	0x40000400
 8006a54:	40000800 	.word	0x40000800
 8006a58:	40000c00 	.word	0x40000c00
 8006a5c:	40010400 	.word	0x40010400
 8006a60:	40014000 	.word	0x40014000
 8006a64:	40014400 	.word	0x40014400
 8006a68:	40014800 	.word	0x40014800

08006a6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	f023 0201 	bic.w	r2, r3, #1
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	4b37      	ldr	r3, [pc, #220]	; (8006b74 <TIM_OC1_SetConfig+0x108>)
 8006a98:	4013      	ands	r3, r2
 8006a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f023 0303 	bic.w	r3, r3, #3
 8006aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f023 0302 	bic.w	r3, r3, #2
 8006ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a2d      	ldr	r2, [pc, #180]	; (8006b78 <TIM_OC1_SetConfig+0x10c>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d00f      	beq.n	8006ae8 <TIM_OC1_SetConfig+0x7c>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a2c      	ldr	r2, [pc, #176]	; (8006b7c <TIM_OC1_SetConfig+0x110>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d00b      	beq.n	8006ae8 <TIM_OC1_SetConfig+0x7c>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a2b      	ldr	r2, [pc, #172]	; (8006b80 <TIM_OC1_SetConfig+0x114>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d007      	beq.n	8006ae8 <TIM_OC1_SetConfig+0x7c>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a2a      	ldr	r2, [pc, #168]	; (8006b84 <TIM_OC1_SetConfig+0x118>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d003      	beq.n	8006ae8 <TIM_OC1_SetConfig+0x7c>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a29      	ldr	r2, [pc, #164]	; (8006b88 <TIM_OC1_SetConfig+0x11c>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d10c      	bne.n	8006b02 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f023 0308 	bic.w	r3, r3, #8
 8006aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f023 0304 	bic.w	r3, r3, #4
 8006b00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a1c      	ldr	r2, [pc, #112]	; (8006b78 <TIM_OC1_SetConfig+0x10c>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d00f      	beq.n	8006b2a <TIM_OC1_SetConfig+0xbe>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a1b      	ldr	r2, [pc, #108]	; (8006b7c <TIM_OC1_SetConfig+0x110>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d00b      	beq.n	8006b2a <TIM_OC1_SetConfig+0xbe>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a1a      	ldr	r2, [pc, #104]	; (8006b80 <TIM_OC1_SetConfig+0x114>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d007      	beq.n	8006b2a <TIM_OC1_SetConfig+0xbe>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a19      	ldr	r2, [pc, #100]	; (8006b84 <TIM_OC1_SetConfig+0x118>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d003      	beq.n	8006b2a <TIM_OC1_SetConfig+0xbe>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a18      	ldr	r2, [pc, #96]	; (8006b88 <TIM_OC1_SetConfig+0x11c>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d111      	bne.n	8006b4e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	685a      	ldr	r2, [r3, #4]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	621a      	str	r2, [r3, #32]
}
 8006b68:	bf00      	nop
 8006b6a:	371c      	adds	r7, #28
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr
 8006b74:	fffeff8f 	.word	0xfffeff8f
 8006b78:	40010000 	.word	0x40010000
 8006b7c:	40010400 	.word	0x40010400
 8006b80:	40014000 	.word	0x40014000
 8006b84:	40014400 	.word	0x40014400
 8006b88:	40014800 	.word	0x40014800

08006b8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b087      	sub	sp, #28
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	f023 0210 	bic.w	r2, r3, #16
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a1b      	ldr	r3, [r3, #32]
 8006ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	4b34      	ldr	r3, [pc, #208]	; (8006c88 <TIM_OC2_SetConfig+0xfc>)
 8006bb8:	4013      	ands	r3, r2
 8006bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	021b      	lsls	r3, r3, #8
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	f023 0320 	bic.w	r3, r3, #32
 8006bd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	011b      	lsls	r3, r3, #4
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a29      	ldr	r2, [pc, #164]	; (8006c8c <TIM_OC2_SetConfig+0x100>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d003      	beq.n	8006bf4 <TIM_OC2_SetConfig+0x68>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a28      	ldr	r2, [pc, #160]	; (8006c90 <TIM_OC2_SetConfig+0x104>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d10d      	bne.n	8006c10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	011b      	lsls	r3, r3, #4
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a1e      	ldr	r2, [pc, #120]	; (8006c8c <TIM_OC2_SetConfig+0x100>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d00f      	beq.n	8006c38 <TIM_OC2_SetConfig+0xac>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a1d      	ldr	r2, [pc, #116]	; (8006c90 <TIM_OC2_SetConfig+0x104>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d00b      	beq.n	8006c38 <TIM_OC2_SetConfig+0xac>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a1c      	ldr	r2, [pc, #112]	; (8006c94 <TIM_OC2_SetConfig+0x108>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d007      	beq.n	8006c38 <TIM_OC2_SetConfig+0xac>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a1b      	ldr	r2, [pc, #108]	; (8006c98 <TIM_OC2_SetConfig+0x10c>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d003      	beq.n	8006c38 <TIM_OC2_SetConfig+0xac>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a1a      	ldr	r2, [pc, #104]	; (8006c9c <TIM_OC2_SetConfig+0x110>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d113      	bne.n	8006c60 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	695b      	ldr	r3, [r3, #20]
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	693a      	ldr	r2, [r7, #16]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	685a      	ldr	r2, [r3, #4]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	697a      	ldr	r2, [r7, #20]
 8006c78:	621a      	str	r2, [r3, #32]
}
 8006c7a:	bf00      	nop
 8006c7c:	371c      	adds	r7, #28
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	feff8fff 	.word	0xfeff8fff
 8006c8c:	40010000 	.word	0x40010000
 8006c90:	40010400 	.word	0x40010400
 8006c94:	40014000 	.word	0x40014000
 8006c98:	40014400 	.word	0x40014400
 8006c9c:	40014800 	.word	0x40014800

08006ca0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	69db      	ldr	r3, [r3, #28]
 8006cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 0303 	bic.w	r3, r3, #3
 8006cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ce8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	021b      	lsls	r3, r3, #8
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a27      	ldr	r2, [pc, #156]	; (8006d98 <TIM_OC3_SetConfig+0xf8>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d003      	beq.n	8006d06 <TIM_OC3_SetConfig+0x66>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a26      	ldr	r2, [pc, #152]	; (8006d9c <TIM_OC3_SetConfig+0xfc>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d10d      	bne.n	8006d22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	021b      	lsls	r3, r3, #8
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a1c      	ldr	r2, [pc, #112]	; (8006d98 <TIM_OC3_SetConfig+0xf8>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d00f      	beq.n	8006d4a <TIM_OC3_SetConfig+0xaa>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a1b      	ldr	r2, [pc, #108]	; (8006d9c <TIM_OC3_SetConfig+0xfc>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d00b      	beq.n	8006d4a <TIM_OC3_SetConfig+0xaa>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a1a      	ldr	r2, [pc, #104]	; (8006da0 <TIM_OC3_SetConfig+0x100>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d007      	beq.n	8006d4a <TIM_OC3_SetConfig+0xaa>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a19      	ldr	r2, [pc, #100]	; (8006da4 <TIM_OC3_SetConfig+0x104>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d003      	beq.n	8006d4a <TIM_OC3_SetConfig+0xaa>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a18      	ldr	r2, [pc, #96]	; (8006da8 <TIM_OC3_SetConfig+0x108>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d113      	bne.n	8006d72 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	011b      	lsls	r3, r3, #4
 8006d60:	693a      	ldr	r2, [r7, #16]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	011b      	lsls	r3, r3, #4
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	621a      	str	r2, [r3, #32]
}
 8006d8c:	bf00      	nop
 8006d8e:	371c      	adds	r7, #28
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr
 8006d98:	40010000 	.word	0x40010000
 8006d9c:	40010400 	.word	0x40010400
 8006da0:	40014000 	.word	0x40014000
 8006da4:	40014400 	.word	0x40014400
 8006da8:	40014800 	.word	0x40014800

08006dac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b087      	sub	sp, #28
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006de2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	021b      	lsls	r3, r3, #8
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006df6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	031b      	lsls	r3, r3, #12
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a18      	ldr	r2, [pc, #96]	; (8006e68 <TIM_OC4_SetConfig+0xbc>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d00f      	beq.n	8006e2c <TIM_OC4_SetConfig+0x80>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a17      	ldr	r2, [pc, #92]	; (8006e6c <TIM_OC4_SetConfig+0xc0>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d00b      	beq.n	8006e2c <TIM_OC4_SetConfig+0x80>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a16      	ldr	r2, [pc, #88]	; (8006e70 <TIM_OC4_SetConfig+0xc4>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d007      	beq.n	8006e2c <TIM_OC4_SetConfig+0x80>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a15      	ldr	r2, [pc, #84]	; (8006e74 <TIM_OC4_SetConfig+0xc8>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d003      	beq.n	8006e2c <TIM_OC4_SetConfig+0x80>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a14      	ldr	r2, [pc, #80]	; (8006e78 <TIM_OC4_SetConfig+0xcc>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d109      	bne.n	8006e40 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	019b      	lsls	r3, r3, #6
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	621a      	str	r2, [r3, #32]
}
 8006e5a:	bf00      	nop
 8006e5c:	371c      	adds	r7, #28
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	40010000 	.word	0x40010000
 8006e6c:	40010400 	.word	0x40010400
 8006e70:	40014000 	.word	0x40014000
 8006e74:	40014400 	.word	0x40014400
 8006e78:	40014800 	.word	0x40014800

08006e7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b087      	sub	sp, #28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006ebc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	041b      	lsls	r3, r3, #16
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a17      	ldr	r2, [pc, #92]	; (8006f2c <TIM_OC5_SetConfig+0xb0>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d00f      	beq.n	8006ef2 <TIM_OC5_SetConfig+0x76>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a16      	ldr	r2, [pc, #88]	; (8006f30 <TIM_OC5_SetConfig+0xb4>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d00b      	beq.n	8006ef2 <TIM_OC5_SetConfig+0x76>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a15      	ldr	r2, [pc, #84]	; (8006f34 <TIM_OC5_SetConfig+0xb8>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d007      	beq.n	8006ef2 <TIM_OC5_SetConfig+0x76>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a14      	ldr	r2, [pc, #80]	; (8006f38 <TIM_OC5_SetConfig+0xbc>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d003      	beq.n	8006ef2 <TIM_OC5_SetConfig+0x76>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a13      	ldr	r2, [pc, #76]	; (8006f3c <TIM_OC5_SetConfig+0xc0>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d109      	bne.n	8006f06 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ef8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	021b      	lsls	r3, r3, #8
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	693a      	ldr	r2, [r7, #16]
 8006f1e:	621a      	str	r2, [r3, #32]
}
 8006f20:	bf00      	nop
 8006f22:	371c      	adds	r7, #28
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr
 8006f2c:	40010000 	.word	0x40010000
 8006f30:	40010400 	.word	0x40010400
 8006f34:	40014000 	.word	0x40014000
 8006f38:	40014400 	.word	0x40014400
 8006f3c:	40014800 	.word	0x40014800

08006f40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b087      	sub	sp, #28
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	021b      	lsls	r3, r3, #8
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	051b      	lsls	r3, r3, #20
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a18      	ldr	r2, [pc, #96]	; (8006ff4 <TIM_OC6_SetConfig+0xb4>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d00f      	beq.n	8006fb8 <TIM_OC6_SetConfig+0x78>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a17      	ldr	r2, [pc, #92]	; (8006ff8 <TIM_OC6_SetConfig+0xb8>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d00b      	beq.n	8006fb8 <TIM_OC6_SetConfig+0x78>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a16      	ldr	r2, [pc, #88]	; (8006ffc <TIM_OC6_SetConfig+0xbc>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d007      	beq.n	8006fb8 <TIM_OC6_SetConfig+0x78>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a15      	ldr	r2, [pc, #84]	; (8007000 <TIM_OC6_SetConfig+0xc0>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d003      	beq.n	8006fb8 <TIM_OC6_SetConfig+0x78>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a14      	ldr	r2, [pc, #80]	; (8007004 <TIM_OC6_SetConfig+0xc4>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d109      	bne.n	8006fcc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	029b      	lsls	r3, r3, #10
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	685a      	ldr	r2, [r3, #4]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	621a      	str	r2, [r3, #32]
}
 8006fe6:	bf00      	nop
 8006fe8:	371c      	adds	r7, #28
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	40010000 	.word	0x40010000
 8006ff8:	40010400 	.word	0x40010400
 8006ffc:	40014000 	.word	0x40014000
 8007000:	40014400 	.word	0x40014400
 8007004:	40014800 	.word	0x40014800

08007008 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007008:	b480      	push	{r7}
 800700a:	b087      	sub	sp, #28
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f003 031f 	and.w	r3, r3, #31
 800701a:	2201      	movs	r2, #1
 800701c:	fa02 f303 	lsl.w	r3, r2, r3
 8007020:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6a1a      	ldr	r2, [r3, #32]
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	43db      	mvns	r3, r3
 800702a:	401a      	ands	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6a1a      	ldr	r2, [r3, #32]
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	f003 031f 	and.w	r3, r3, #31
 800703a:	6879      	ldr	r1, [r7, #4]
 800703c:	fa01 f303 	lsl.w	r3, r1, r3
 8007040:	431a      	orrs	r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	621a      	str	r2, [r3, #32]
}
 8007046:	bf00      	nop
 8007048:	371c      	adds	r7, #28
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
	...

08007054 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007064:	2b01      	cmp	r3, #1
 8007066:	d101      	bne.n	800706c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007068:	2302      	movs	r3, #2
 800706a:	e068      	b.n	800713e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a2e      	ldr	r2, [pc, #184]	; (800714c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d004      	beq.n	80070a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a2d      	ldr	r2, [pc, #180]	; (8007150 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d108      	bne.n	80070b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80070a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a1e      	ldr	r2, [pc, #120]	; (800714c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d01d      	beq.n	8007112 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070de:	d018      	beq.n	8007112 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a1b      	ldr	r2, [pc, #108]	; (8007154 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d013      	beq.n	8007112 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a1a      	ldr	r2, [pc, #104]	; (8007158 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d00e      	beq.n	8007112 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a18      	ldr	r2, [pc, #96]	; (800715c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d009      	beq.n	8007112 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a13      	ldr	r2, [pc, #76]	; (8007150 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d004      	beq.n	8007112 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a14      	ldr	r2, [pc, #80]	; (8007160 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d10c      	bne.n	800712c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007118:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	4313      	orrs	r3, r2
 8007122:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68ba      	ldr	r2, [r7, #8]
 800712a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	40010000 	.word	0x40010000
 8007150:	40010400 	.word	0x40010400
 8007154:	40000400 	.word	0x40000400
 8007158:	40000800 	.word	0x40000800
 800715c:	40000c00 	.word	0x40000c00
 8007160:	40001800 	.word	0x40001800

08007164 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800716e:	2300      	movs	r3, #0
 8007170:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007178:	2b01      	cmp	r3, #1
 800717a:	d101      	bne.n	8007180 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800717c:	2302      	movs	r3, #2
 800717e:	e065      	b.n	800724c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	4313      	orrs	r3, r2
 8007194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4313      	orrs	r3, r2
 80071be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	4313      	orrs	r3, r2
 80071da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e6:	4313      	orrs	r3, r2
 80071e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	041b      	lsls	r3, r3, #16
 80071f6:	4313      	orrs	r3, r2
 80071f8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a16      	ldr	r2, [pc, #88]	; (8007258 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d004      	beq.n	800720e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a14      	ldr	r2, [pc, #80]	; (800725c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d115      	bne.n	800723a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007218:	051b      	lsls	r3, r3, #20
 800721a:	4313      	orrs	r3, r2
 800721c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	69db      	ldr	r3, [r3, #28]
 8007228:	4313      	orrs	r3, r2
 800722a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	4313      	orrs	r3, r2
 8007238:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr
 8007258:	40010000 	.word	0x40010000
 800725c:	40010400 	.word	0x40010400

08007260 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d101      	bne.n	8007272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e042      	b.n	80072f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007278:	2b00      	cmp	r3, #0
 800727a:	d106      	bne.n	800728a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f7fa fd13 	bl	8001cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2224      	movs	r2, #36	; 0x24
 800728e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f022 0201 	bic.w	r2, r2, #1
 80072a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f82c 	bl	8007300 <UART_SetConfig>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d101      	bne.n	80072b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e022      	b.n	80072f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d002      	beq.n	80072c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fd80 	bl	8007dc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	689a      	ldr	r2, [r3, #8]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f042 0201 	orr.w	r2, r2, #1
 80072ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fe07 	bl	8007f04 <UART_CheckIdleState>
 80072f6:	4603      	mov	r3, r0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3708      	adds	r7, #8
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007300:	b5b0      	push	{r4, r5, r7, lr}
 8007302:	b08e      	sub	sp, #56	; 0x38
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007308:	2300      	movs	r3, #0
 800730a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	689a      	ldr	r2, [r3, #8]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	431a      	orrs	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	695b      	ldr	r3, [r3, #20]
 800731c:	431a      	orrs	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	69db      	ldr	r3, [r3, #28]
 8007322:	4313      	orrs	r3, r2
 8007324:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	4bbf      	ldr	r3, [pc, #764]	; (800762c <UART_SetConfig+0x32c>)
 800732e:	4013      	ands	r3, r2
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	6812      	ldr	r2, [r2, #0]
 8007334:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007336:	430b      	orrs	r3, r1
 8007338:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	68da      	ldr	r2, [r3, #12]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	430a      	orrs	r2, r1
 800734e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4ab5      	ldr	r2, [pc, #724]	; (8007630 <UART_SetConfig+0x330>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d004      	beq.n	800736a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a1b      	ldr	r3, [r3, #32]
 8007364:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007366:	4313      	orrs	r3, r2
 8007368:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689a      	ldr	r2, [r3, #8]
 8007370:	4bb0      	ldr	r3, [pc, #704]	; (8007634 <UART_SetConfig+0x334>)
 8007372:	4013      	ands	r3, r2
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	6812      	ldr	r2, [r2, #0]
 8007378:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800737a:	430b      	orrs	r3, r1
 800737c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007384:	f023 010f 	bic.w	r1, r3, #15
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	430a      	orrs	r2, r1
 8007392:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4aa7      	ldr	r2, [pc, #668]	; (8007638 <UART_SetConfig+0x338>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d176      	bne.n	800748c <UART_SetConfig+0x18c>
 800739e:	4ba7      	ldr	r3, [pc, #668]	; (800763c <UART_SetConfig+0x33c>)
 80073a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073a6:	2b28      	cmp	r3, #40	; 0x28
 80073a8:	d86c      	bhi.n	8007484 <UART_SetConfig+0x184>
 80073aa:	a201      	add	r2, pc, #4	; (adr r2, 80073b0 <UART_SetConfig+0xb0>)
 80073ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b0:	08007455 	.word	0x08007455
 80073b4:	08007485 	.word	0x08007485
 80073b8:	08007485 	.word	0x08007485
 80073bc:	08007485 	.word	0x08007485
 80073c0:	08007485 	.word	0x08007485
 80073c4:	08007485 	.word	0x08007485
 80073c8:	08007485 	.word	0x08007485
 80073cc:	08007485 	.word	0x08007485
 80073d0:	0800745d 	.word	0x0800745d
 80073d4:	08007485 	.word	0x08007485
 80073d8:	08007485 	.word	0x08007485
 80073dc:	08007485 	.word	0x08007485
 80073e0:	08007485 	.word	0x08007485
 80073e4:	08007485 	.word	0x08007485
 80073e8:	08007485 	.word	0x08007485
 80073ec:	08007485 	.word	0x08007485
 80073f0:	08007465 	.word	0x08007465
 80073f4:	08007485 	.word	0x08007485
 80073f8:	08007485 	.word	0x08007485
 80073fc:	08007485 	.word	0x08007485
 8007400:	08007485 	.word	0x08007485
 8007404:	08007485 	.word	0x08007485
 8007408:	08007485 	.word	0x08007485
 800740c:	08007485 	.word	0x08007485
 8007410:	0800746d 	.word	0x0800746d
 8007414:	08007485 	.word	0x08007485
 8007418:	08007485 	.word	0x08007485
 800741c:	08007485 	.word	0x08007485
 8007420:	08007485 	.word	0x08007485
 8007424:	08007485 	.word	0x08007485
 8007428:	08007485 	.word	0x08007485
 800742c:	08007485 	.word	0x08007485
 8007430:	08007475 	.word	0x08007475
 8007434:	08007485 	.word	0x08007485
 8007438:	08007485 	.word	0x08007485
 800743c:	08007485 	.word	0x08007485
 8007440:	08007485 	.word	0x08007485
 8007444:	08007485 	.word	0x08007485
 8007448:	08007485 	.word	0x08007485
 800744c:	08007485 	.word	0x08007485
 8007450:	0800747d 	.word	0x0800747d
 8007454:	2301      	movs	r3, #1
 8007456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800745a:	e222      	b.n	80078a2 <UART_SetConfig+0x5a2>
 800745c:	2304      	movs	r3, #4
 800745e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007462:	e21e      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007464:	2308      	movs	r3, #8
 8007466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800746a:	e21a      	b.n	80078a2 <UART_SetConfig+0x5a2>
 800746c:	2310      	movs	r3, #16
 800746e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007472:	e216      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007474:	2320      	movs	r3, #32
 8007476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800747a:	e212      	b.n	80078a2 <UART_SetConfig+0x5a2>
 800747c:	2340      	movs	r3, #64	; 0x40
 800747e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007482:	e20e      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007484:	2380      	movs	r3, #128	; 0x80
 8007486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800748a:	e20a      	b.n	80078a2 <UART_SetConfig+0x5a2>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a6b      	ldr	r2, [pc, #428]	; (8007640 <UART_SetConfig+0x340>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d130      	bne.n	80074f8 <UART_SetConfig+0x1f8>
 8007496:	4b69      	ldr	r3, [pc, #420]	; (800763c <UART_SetConfig+0x33c>)
 8007498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800749a:	f003 0307 	and.w	r3, r3, #7
 800749e:	2b05      	cmp	r3, #5
 80074a0:	d826      	bhi.n	80074f0 <UART_SetConfig+0x1f0>
 80074a2:	a201      	add	r2, pc, #4	; (adr r2, 80074a8 <UART_SetConfig+0x1a8>)
 80074a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a8:	080074c1 	.word	0x080074c1
 80074ac:	080074c9 	.word	0x080074c9
 80074b0:	080074d1 	.word	0x080074d1
 80074b4:	080074d9 	.word	0x080074d9
 80074b8:	080074e1 	.word	0x080074e1
 80074bc:	080074e9 	.word	0x080074e9
 80074c0:	2300      	movs	r3, #0
 80074c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074c6:	e1ec      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80074c8:	2304      	movs	r3, #4
 80074ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ce:	e1e8      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80074d0:	2308      	movs	r3, #8
 80074d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074d6:	e1e4      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80074d8:	2310      	movs	r3, #16
 80074da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074de:	e1e0      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80074e0:	2320      	movs	r3, #32
 80074e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074e6:	e1dc      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80074e8:	2340      	movs	r3, #64	; 0x40
 80074ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ee:	e1d8      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80074f0:	2380      	movs	r3, #128	; 0x80
 80074f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074f6:	e1d4      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a51      	ldr	r2, [pc, #324]	; (8007644 <UART_SetConfig+0x344>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d130      	bne.n	8007564 <UART_SetConfig+0x264>
 8007502:	4b4e      	ldr	r3, [pc, #312]	; (800763c <UART_SetConfig+0x33c>)
 8007504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007506:	f003 0307 	and.w	r3, r3, #7
 800750a:	2b05      	cmp	r3, #5
 800750c:	d826      	bhi.n	800755c <UART_SetConfig+0x25c>
 800750e:	a201      	add	r2, pc, #4	; (adr r2, 8007514 <UART_SetConfig+0x214>)
 8007510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007514:	0800752d 	.word	0x0800752d
 8007518:	08007535 	.word	0x08007535
 800751c:	0800753d 	.word	0x0800753d
 8007520:	08007545 	.word	0x08007545
 8007524:	0800754d 	.word	0x0800754d
 8007528:	08007555 	.word	0x08007555
 800752c:	2300      	movs	r3, #0
 800752e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007532:	e1b6      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007534:	2304      	movs	r3, #4
 8007536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800753a:	e1b2      	b.n	80078a2 <UART_SetConfig+0x5a2>
 800753c:	2308      	movs	r3, #8
 800753e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007542:	e1ae      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007544:	2310      	movs	r3, #16
 8007546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800754a:	e1aa      	b.n	80078a2 <UART_SetConfig+0x5a2>
 800754c:	2320      	movs	r3, #32
 800754e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007552:	e1a6      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007554:	2340      	movs	r3, #64	; 0x40
 8007556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800755a:	e1a2      	b.n	80078a2 <UART_SetConfig+0x5a2>
 800755c:	2380      	movs	r3, #128	; 0x80
 800755e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007562:	e19e      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a37      	ldr	r2, [pc, #220]	; (8007648 <UART_SetConfig+0x348>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d130      	bne.n	80075d0 <UART_SetConfig+0x2d0>
 800756e:	4b33      	ldr	r3, [pc, #204]	; (800763c <UART_SetConfig+0x33c>)
 8007570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007572:	f003 0307 	and.w	r3, r3, #7
 8007576:	2b05      	cmp	r3, #5
 8007578:	d826      	bhi.n	80075c8 <UART_SetConfig+0x2c8>
 800757a:	a201      	add	r2, pc, #4	; (adr r2, 8007580 <UART_SetConfig+0x280>)
 800757c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007580:	08007599 	.word	0x08007599
 8007584:	080075a1 	.word	0x080075a1
 8007588:	080075a9 	.word	0x080075a9
 800758c:	080075b1 	.word	0x080075b1
 8007590:	080075b9 	.word	0x080075b9
 8007594:	080075c1 	.word	0x080075c1
 8007598:	2300      	movs	r3, #0
 800759a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800759e:	e180      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80075a0:	2304      	movs	r3, #4
 80075a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075a6:	e17c      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80075a8:	2308      	movs	r3, #8
 80075aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075ae:	e178      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80075b0:	2310      	movs	r3, #16
 80075b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075b6:	e174      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80075b8:	2320      	movs	r3, #32
 80075ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075be:	e170      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80075c0:	2340      	movs	r3, #64	; 0x40
 80075c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075c6:	e16c      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80075c8:	2380      	movs	r3, #128	; 0x80
 80075ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075ce:	e168      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a1d      	ldr	r2, [pc, #116]	; (800764c <UART_SetConfig+0x34c>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d142      	bne.n	8007660 <UART_SetConfig+0x360>
 80075da:	4b18      	ldr	r3, [pc, #96]	; (800763c <UART_SetConfig+0x33c>)
 80075dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075de:	f003 0307 	and.w	r3, r3, #7
 80075e2:	2b05      	cmp	r3, #5
 80075e4:	d838      	bhi.n	8007658 <UART_SetConfig+0x358>
 80075e6:	a201      	add	r2, pc, #4	; (adr r2, 80075ec <UART_SetConfig+0x2ec>)
 80075e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ec:	08007605 	.word	0x08007605
 80075f0:	0800760d 	.word	0x0800760d
 80075f4:	08007615 	.word	0x08007615
 80075f8:	0800761d 	.word	0x0800761d
 80075fc:	08007625 	.word	0x08007625
 8007600:	08007651 	.word	0x08007651
 8007604:	2300      	movs	r3, #0
 8007606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800760a:	e14a      	b.n	80078a2 <UART_SetConfig+0x5a2>
 800760c:	2304      	movs	r3, #4
 800760e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007612:	e146      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007614:	2308      	movs	r3, #8
 8007616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800761a:	e142      	b.n	80078a2 <UART_SetConfig+0x5a2>
 800761c:	2310      	movs	r3, #16
 800761e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007622:	e13e      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007624:	2320      	movs	r3, #32
 8007626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800762a:	e13a      	b.n	80078a2 <UART_SetConfig+0x5a2>
 800762c:	cfff69f3 	.word	0xcfff69f3
 8007630:	58000c00 	.word	0x58000c00
 8007634:	11fff4ff 	.word	0x11fff4ff
 8007638:	40011000 	.word	0x40011000
 800763c:	58024400 	.word	0x58024400
 8007640:	40004400 	.word	0x40004400
 8007644:	40004800 	.word	0x40004800
 8007648:	40004c00 	.word	0x40004c00
 800764c:	40005000 	.word	0x40005000
 8007650:	2340      	movs	r3, #64	; 0x40
 8007652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007656:	e124      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007658:	2380      	movs	r3, #128	; 0x80
 800765a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800765e:	e120      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4acc      	ldr	r2, [pc, #816]	; (8007998 <UART_SetConfig+0x698>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d176      	bne.n	8007758 <UART_SetConfig+0x458>
 800766a:	4bcc      	ldr	r3, [pc, #816]	; (800799c <UART_SetConfig+0x69c>)
 800766c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800766e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007672:	2b28      	cmp	r3, #40	; 0x28
 8007674:	d86c      	bhi.n	8007750 <UART_SetConfig+0x450>
 8007676:	a201      	add	r2, pc, #4	; (adr r2, 800767c <UART_SetConfig+0x37c>)
 8007678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767c:	08007721 	.word	0x08007721
 8007680:	08007751 	.word	0x08007751
 8007684:	08007751 	.word	0x08007751
 8007688:	08007751 	.word	0x08007751
 800768c:	08007751 	.word	0x08007751
 8007690:	08007751 	.word	0x08007751
 8007694:	08007751 	.word	0x08007751
 8007698:	08007751 	.word	0x08007751
 800769c:	08007729 	.word	0x08007729
 80076a0:	08007751 	.word	0x08007751
 80076a4:	08007751 	.word	0x08007751
 80076a8:	08007751 	.word	0x08007751
 80076ac:	08007751 	.word	0x08007751
 80076b0:	08007751 	.word	0x08007751
 80076b4:	08007751 	.word	0x08007751
 80076b8:	08007751 	.word	0x08007751
 80076bc:	08007731 	.word	0x08007731
 80076c0:	08007751 	.word	0x08007751
 80076c4:	08007751 	.word	0x08007751
 80076c8:	08007751 	.word	0x08007751
 80076cc:	08007751 	.word	0x08007751
 80076d0:	08007751 	.word	0x08007751
 80076d4:	08007751 	.word	0x08007751
 80076d8:	08007751 	.word	0x08007751
 80076dc:	08007739 	.word	0x08007739
 80076e0:	08007751 	.word	0x08007751
 80076e4:	08007751 	.word	0x08007751
 80076e8:	08007751 	.word	0x08007751
 80076ec:	08007751 	.word	0x08007751
 80076f0:	08007751 	.word	0x08007751
 80076f4:	08007751 	.word	0x08007751
 80076f8:	08007751 	.word	0x08007751
 80076fc:	08007741 	.word	0x08007741
 8007700:	08007751 	.word	0x08007751
 8007704:	08007751 	.word	0x08007751
 8007708:	08007751 	.word	0x08007751
 800770c:	08007751 	.word	0x08007751
 8007710:	08007751 	.word	0x08007751
 8007714:	08007751 	.word	0x08007751
 8007718:	08007751 	.word	0x08007751
 800771c:	08007749 	.word	0x08007749
 8007720:	2301      	movs	r3, #1
 8007722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007726:	e0bc      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007728:	2304      	movs	r3, #4
 800772a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800772e:	e0b8      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007730:	2308      	movs	r3, #8
 8007732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007736:	e0b4      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007738:	2310      	movs	r3, #16
 800773a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800773e:	e0b0      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007740:	2320      	movs	r3, #32
 8007742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007746:	e0ac      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007748:	2340      	movs	r3, #64	; 0x40
 800774a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800774e:	e0a8      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007750:	2380      	movs	r3, #128	; 0x80
 8007752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007756:	e0a4      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a90      	ldr	r2, [pc, #576]	; (80079a0 <UART_SetConfig+0x6a0>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d130      	bne.n	80077c4 <UART_SetConfig+0x4c4>
 8007762:	4b8e      	ldr	r3, [pc, #568]	; (800799c <UART_SetConfig+0x69c>)
 8007764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007766:	f003 0307 	and.w	r3, r3, #7
 800776a:	2b05      	cmp	r3, #5
 800776c:	d826      	bhi.n	80077bc <UART_SetConfig+0x4bc>
 800776e:	a201      	add	r2, pc, #4	; (adr r2, 8007774 <UART_SetConfig+0x474>)
 8007770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007774:	0800778d 	.word	0x0800778d
 8007778:	08007795 	.word	0x08007795
 800777c:	0800779d 	.word	0x0800779d
 8007780:	080077a5 	.word	0x080077a5
 8007784:	080077ad 	.word	0x080077ad
 8007788:	080077b5 	.word	0x080077b5
 800778c:	2300      	movs	r3, #0
 800778e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007792:	e086      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007794:	2304      	movs	r3, #4
 8007796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800779a:	e082      	b.n	80078a2 <UART_SetConfig+0x5a2>
 800779c:	2308      	movs	r3, #8
 800779e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077a2:	e07e      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80077a4:	2310      	movs	r3, #16
 80077a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077aa:	e07a      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80077ac:	2320      	movs	r3, #32
 80077ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077b2:	e076      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80077b4:	2340      	movs	r3, #64	; 0x40
 80077b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ba:	e072      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80077bc:	2380      	movs	r3, #128	; 0x80
 80077be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077c2:	e06e      	b.n	80078a2 <UART_SetConfig+0x5a2>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a76      	ldr	r2, [pc, #472]	; (80079a4 <UART_SetConfig+0x6a4>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d130      	bne.n	8007830 <UART_SetConfig+0x530>
 80077ce:	4b73      	ldr	r3, [pc, #460]	; (800799c <UART_SetConfig+0x69c>)
 80077d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d2:	f003 0307 	and.w	r3, r3, #7
 80077d6:	2b05      	cmp	r3, #5
 80077d8:	d826      	bhi.n	8007828 <UART_SetConfig+0x528>
 80077da:	a201      	add	r2, pc, #4	; (adr r2, 80077e0 <UART_SetConfig+0x4e0>)
 80077dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e0:	080077f9 	.word	0x080077f9
 80077e4:	08007801 	.word	0x08007801
 80077e8:	08007809 	.word	0x08007809
 80077ec:	08007811 	.word	0x08007811
 80077f0:	08007819 	.word	0x08007819
 80077f4:	08007821 	.word	0x08007821
 80077f8:	2300      	movs	r3, #0
 80077fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077fe:	e050      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007800:	2304      	movs	r3, #4
 8007802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007806:	e04c      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007808:	2308      	movs	r3, #8
 800780a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800780e:	e048      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007810:	2310      	movs	r3, #16
 8007812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007816:	e044      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007818:	2320      	movs	r3, #32
 800781a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800781e:	e040      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007820:	2340      	movs	r3, #64	; 0x40
 8007822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007826:	e03c      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007828:	2380      	movs	r3, #128	; 0x80
 800782a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800782e:	e038      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a5c      	ldr	r2, [pc, #368]	; (80079a8 <UART_SetConfig+0x6a8>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d130      	bne.n	800789c <UART_SetConfig+0x59c>
 800783a:	4b58      	ldr	r3, [pc, #352]	; (800799c <UART_SetConfig+0x69c>)
 800783c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800783e:	f003 0307 	and.w	r3, r3, #7
 8007842:	2b05      	cmp	r3, #5
 8007844:	d826      	bhi.n	8007894 <UART_SetConfig+0x594>
 8007846:	a201      	add	r2, pc, #4	; (adr r2, 800784c <UART_SetConfig+0x54c>)
 8007848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784c:	08007865 	.word	0x08007865
 8007850:	0800786d 	.word	0x0800786d
 8007854:	08007875 	.word	0x08007875
 8007858:	0800787d 	.word	0x0800787d
 800785c:	08007885 	.word	0x08007885
 8007860:	0800788d 	.word	0x0800788d
 8007864:	2302      	movs	r3, #2
 8007866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800786a:	e01a      	b.n	80078a2 <UART_SetConfig+0x5a2>
 800786c:	2304      	movs	r3, #4
 800786e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007872:	e016      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007874:	2308      	movs	r3, #8
 8007876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800787a:	e012      	b.n	80078a2 <UART_SetConfig+0x5a2>
 800787c:	2310      	movs	r3, #16
 800787e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007882:	e00e      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007884:	2320      	movs	r3, #32
 8007886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800788a:	e00a      	b.n	80078a2 <UART_SetConfig+0x5a2>
 800788c:	2340      	movs	r3, #64	; 0x40
 800788e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007892:	e006      	b.n	80078a2 <UART_SetConfig+0x5a2>
 8007894:	2380      	movs	r3, #128	; 0x80
 8007896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800789a:	e002      	b.n	80078a2 <UART_SetConfig+0x5a2>
 800789c:	2380      	movs	r3, #128	; 0x80
 800789e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a40      	ldr	r2, [pc, #256]	; (80079a8 <UART_SetConfig+0x6a8>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	f040 80ef 	bne.w	8007a8c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80078b2:	2b20      	cmp	r3, #32
 80078b4:	dc46      	bgt.n	8007944 <UART_SetConfig+0x644>
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	f2c0 8081 	blt.w	80079be <UART_SetConfig+0x6be>
 80078bc:	3b02      	subs	r3, #2
 80078be:	2b1e      	cmp	r3, #30
 80078c0:	d87d      	bhi.n	80079be <UART_SetConfig+0x6be>
 80078c2:	a201      	add	r2, pc, #4	; (adr r2, 80078c8 <UART_SetConfig+0x5c8>)
 80078c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c8:	0800794b 	.word	0x0800794b
 80078cc:	080079bf 	.word	0x080079bf
 80078d0:	08007953 	.word	0x08007953
 80078d4:	080079bf 	.word	0x080079bf
 80078d8:	080079bf 	.word	0x080079bf
 80078dc:	080079bf 	.word	0x080079bf
 80078e0:	08007963 	.word	0x08007963
 80078e4:	080079bf 	.word	0x080079bf
 80078e8:	080079bf 	.word	0x080079bf
 80078ec:	080079bf 	.word	0x080079bf
 80078f0:	080079bf 	.word	0x080079bf
 80078f4:	080079bf 	.word	0x080079bf
 80078f8:	080079bf 	.word	0x080079bf
 80078fc:	080079bf 	.word	0x080079bf
 8007900:	08007973 	.word	0x08007973
 8007904:	080079bf 	.word	0x080079bf
 8007908:	080079bf 	.word	0x080079bf
 800790c:	080079bf 	.word	0x080079bf
 8007910:	080079bf 	.word	0x080079bf
 8007914:	080079bf 	.word	0x080079bf
 8007918:	080079bf 	.word	0x080079bf
 800791c:	080079bf 	.word	0x080079bf
 8007920:	080079bf 	.word	0x080079bf
 8007924:	080079bf 	.word	0x080079bf
 8007928:	080079bf 	.word	0x080079bf
 800792c:	080079bf 	.word	0x080079bf
 8007930:	080079bf 	.word	0x080079bf
 8007934:	080079bf 	.word	0x080079bf
 8007938:	080079bf 	.word	0x080079bf
 800793c:	080079bf 	.word	0x080079bf
 8007940:	080079b1 	.word	0x080079b1
 8007944:	2b40      	cmp	r3, #64	; 0x40
 8007946:	d036      	beq.n	80079b6 <UART_SetConfig+0x6b6>
 8007948:	e039      	b.n	80079be <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800794a:	f7fd fd87 	bl	800545c <HAL_RCCEx_GetD3PCLK1Freq>
 800794e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007950:	e03b      	b.n	80079ca <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007952:	f107 0314 	add.w	r3, r7, #20
 8007956:	4618      	mov	r0, r3
 8007958:	f7fd fd96 	bl	8005488 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007960:	e033      	b.n	80079ca <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007962:	f107 0308 	add.w	r3, r7, #8
 8007966:	4618      	mov	r0, r3
 8007968:	f7fd fee2 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007970:	e02b      	b.n	80079ca <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007972:	4b0a      	ldr	r3, [pc, #40]	; (800799c <UART_SetConfig+0x69c>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 0320 	and.w	r3, r3, #32
 800797a:	2b00      	cmp	r3, #0
 800797c:	d009      	beq.n	8007992 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800797e:	4b07      	ldr	r3, [pc, #28]	; (800799c <UART_SetConfig+0x69c>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	08db      	lsrs	r3, r3, #3
 8007984:	f003 0303 	and.w	r3, r3, #3
 8007988:	4a08      	ldr	r2, [pc, #32]	; (80079ac <UART_SetConfig+0x6ac>)
 800798a:	fa22 f303 	lsr.w	r3, r2, r3
 800798e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007990:	e01b      	b.n	80079ca <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8007992:	4b06      	ldr	r3, [pc, #24]	; (80079ac <UART_SetConfig+0x6ac>)
 8007994:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007996:	e018      	b.n	80079ca <UART_SetConfig+0x6ca>
 8007998:	40011400 	.word	0x40011400
 800799c:	58024400 	.word	0x58024400
 80079a0:	40007800 	.word	0x40007800
 80079a4:	40007c00 	.word	0x40007c00
 80079a8:	58000c00 	.word	0x58000c00
 80079ac:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80079b0:	4bc4      	ldr	r3, [pc, #784]	; (8007cc4 <UART_SetConfig+0x9c4>)
 80079b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079b4:	e009      	b.n	80079ca <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079bc:	e005      	b.n	80079ca <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80079be:	2300      	movs	r3, #0
 80079c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80079c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80079ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 81da 	beq.w	8007d86 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d6:	4abc      	ldr	r2, [pc, #752]	; (8007cc8 <UART_SetConfig+0x9c8>)
 80079d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079dc:	461a      	mov	r2, r3
 80079de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80079e4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	685a      	ldr	r2, [r3, #4]
 80079ea:	4613      	mov	r3, r2
 80079ec:	005b      	lsls	r3, r3, #1
 80079ee:	4413      	add	r3, r2
 80079f0:	6a3a      	ldr	r2, [r7, #32]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d305      	bcc.n	8007a02 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079fc:	6a3a      	ldr	r2, [r7, #32]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d903      	bls.n	8007a0a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007a08:	e1bd      	b.n	8007d86 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f04f 0100 	mov.w	r1, #0
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a16:	4aac      	ldr	r2, [pc, #688]	; (8007cc8 <UART_SetConfig+0x9c8>)
 8007a18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	f04f 0300 	mov.w	r3, #0
 8007a22:	f7f8 fe81 	bl	8000728 <__aeabi_uldivmod>
 8007a26:	4602      	mov	r2, r0
 8007a28:	460b      	mov	r3, r1
 8007a2a:	4610      	mov	r0, r2
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	f04f 0200 	mov.w	r2, #0
 8007a32:	f04f 0300 	mov.w	r3, #0
 8007a36:	020b      	lsls	r3, r1, #8
 8007a38:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007a3c:	0202      	lsls	r2, r0, #8
 8007a3e:	6879      	ldr	r1, [r7, #4]
 8007a40:	6849      	ldr	r1, [r1, #4]
 8007a42:	0849      	lsrs	r1, r1, #1
 8007a44:	4608      	mov	r0, r1
 8007a46:	f04f 0100 	mov.w	r1, #0
 8007a4a:	1814      	adds	r4, r2, r0
 8007a4c:	eb43 0501 	adc.w	r5, r3, r1
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	461a      	mov	r2, r3
 8007a56:	f04f 0300 	mov.w	r3, #0
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	4629      	mov	r1, r5
 8007a5e:	f7f8 fe63 	bl	8000728 <__aeabi_uldivmod>
 8007a62:	4602      	mov	r2, r0
 8007a64:	460b      	mov	r3, r1
 8007a66:	4613      	mov	r3, r2
 8007a68:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a70:	d308      	bcc.n	8007a84 <UART_SetConfig+0x784>
 8007a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a78:	d204      	bcs.n	8007a84 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a80:	60da      	str	r2, [r3, #12]
 8007a82:	e180      	b.n	8007d86 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007a8a:	e17c      	b.n	8007d86 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	69db      	ldr	r3, [r3, #28]
 8007a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a94:	f040 80bf 	bne.w	8007c16 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8007a98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007a9c:	2b20      	cmp	r3, #32
 8007a9e:	dc49      	bgt.n	8007b34 <UART_SetConfig+0x834>
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	db7c      	blt.n	8007b9e <UART_SetConfig+0x89e>
 8007aa4:	2b20      	cmp	r3, #32
 8007aa6:	d87a      	bhi.n	8007b9e <UART_SetConfig+0x89e>
 8007aa8:	a201      	add	r2, pc, #4	; (adr r2, 8007ab0 <UART_SetConfig+0x7b0>)
 8007aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aae:	bf00      	nop
 8007ab0:	08007b3b 	.word	0x08007b3b
 8007ab4:	08007b43 	.word	0x08007b43
 8007ab8:	08007b9f 	.word	0x08007b9f
 8007abc:	08007b9f 	.word	0x08007b9f
 8007ac0:	08007b4b 	.word	0x08007b4b
 8007ac4:	08007b9f 	.word	0x08007b9f
 8007ac8:	08007b9f 	.word	0x08007b9f
 8007acc:	08007b9f 	.word	0x08007b9f
 8007ad0:	08007b5b 	.word	0x08007b5b
 8007ad4:	08007b9f 	.word	0x08007b9f
 8007ad8:	08007b9f 	.word	0x08007b9f
 8007adc:	08007b9f 	.word	0x08007b9f
 8007ae0:	08007b9f 	.word	0x08007b9f
 8007ae4:	08007b9f 	.word	0x08007b9f
 8007ae8:	08007b9f 	.word	0x08007b9f
 8007aec:	08007b9f 	.word	0x08007b9f
 8007af0:	08007b6b 	.word	0x08007b6b
 8007af4:	08007b9f 	.word	0x08007b9f
 8007af8:	08007b9f 	.word	0x08007b9f
 8007afc:	08007b9f 	.word	0x08007b9f
 8007b00:	08007b9f 	.word	0x08007b9f
 8007b04:	08007b9f 	.word	0x08007b9f
 8007b08:	08007b9f 	.word	0x08007b9f
 8007b0c:	08007b9f 	.word	0x08007b9f
 8007b10:	08007b9f 	.word	0x08007b9f
 8007b14:	08007b9f 	.word	0x08007b9f
 8007b18:	08007b9f 	.word	0x08007b9f
 8007b1c:	08007b9f 	.word	0x08007b9f
 8007b20:	08007b9f 	.word	0x08007b9f
 8007b24:	08007b9f 	.word	0x08007b9f
 8007b28:	08007b9f 	.word	0x08007b9f
 8007b2c:	08007b9f 	.word	0x08007b9f
 8007b30:	08007b91 	.word	0x08007b91
 8007b34:	2b40      	cmp	r3, #64	; 0x40
 8007b36:	d02e      	beq.n	8007b96 <UART_SetConfig+0x896>
 8007b38:	e031      	b.n	8007b9e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b3a:	f7fc fd23 	bl	8004584 <HAL_RCC_GetPCLK1Freq>
 8007b3e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007b40:	e033      	b.n	8007baa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b42:	f7fc fd35 	bl	80045b0 <HAL_RCC_GetPCLK2Freq>
 8007b46:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007b48:	e02f      	b.n	8007baa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b4a:	f107 0314 	add.w	r3, r7, #20
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7fd fc9a 	bl	8005488 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b58:	e027      	b.n	8007baa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b5a:	f107 0308 	add.w	r3, r7, #8
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fd fde6 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b68:	e01f      	b.n	8007baa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b6a:	4b58      	ldr	r3, [pc, #352]	; (8007ccc <UART_SetConfig+0x9cc>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 0320 	and.w	r3, r3, #32
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d009      	beq.n	8007b8a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b76:	4b55      	ldr	r3, [pc, #340]	; (8007ccc <UART_SetConfig+0x9cc>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	08db      	lsrs	r3, r3, #3
 8007b7c:	f003 0303 	and.w	r3, r3, #3
 8007b80:	4a53      	ldr	r2, [pc, #332]	; (8007cd0 <UART_SetConfig+0x9d0>)
 8007b82:	fa22 f303 	lsr.w	r3, r2, r3
 8007b86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b88:	e00f      	b.n	8007baa <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8007b8a:	4b51      	ldr	r3, [pc, #324]	; (8007cd0 <UART_SetConfig+0x9d0>)
 8007b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b8e:	e00c      	b.n	8007baa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b90:	4b4c      	ldr	r3, [pc, #304]	; (8007cc4 <UART_SetConfig+0x9c4>)
 8007b92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b94:	e009      	b.n	8007baa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b9c:	e005      	b.n	8007baa <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007ba8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f000 80ea 	beq.w	8007d86 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb6:	4a44      	ldr	r2, [pc, #272]	; (8007cc8 <UART_SetConfig+0x9c8>)
 8007bb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bc4:	005a      	lsls	r2, r3, #1
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	085b      	lsrs	r3, r3, #1
 8007bcc:	441a      	add	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bdc:	2b0f      	cmp	r3, #15
 8007bde:	d916      	bls.n	8007c0e <UART_SetConfig+0x90e>
 8007be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007be6:	d212      	bcs.n	8007c0e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	f023 030f 	bic.w	r3, r3, #15
 8007bf0:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf4:	085b      	lsrs	r3, r3, #1
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	f003 0307 	and.w	r3, r3, #7
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c00:	4313      	orrs	r3, r2
 8007c02:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007c0a:	60da      	str	r2, [r3, #12]
 8007c0c:	e0bb      	b.n	8007d86 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007c14:	e0b7      	b.n	8007d86 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007c1a:	2b20      	cmp	r3, #32
 8007c1c:	dc4a      	bgt.n	8007cb4 <UART_SetConfig+0x9b4>
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f2c0 8086 	blt.w	8007d30 <UART_SetConfig+0xa30>
 8007c24:	2b20      	cmp	r3, #32
 8007c26:	f200 8083 	bhi.w	8007d30 <UART_SetConfig+0xa30>
 8007c2a:	a201      	add	r2, pc, #4	; (adr r2, 8007c30 <UART_SetConfig+0x930>)
 8007c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c30:	08007cbb 	.word	0x08007cbb
 8007c34:	08007cd5 	.word	0x08007cd5
 8007c38:	08007d31 	.word	0x08007d31
 8007c3c:	08007d31 	.word	0x08007d31
 8007c40:	08007cdd 	.word	0x08007cdd
 8007c44:	08007d31 	.word	0x08007d31
 8007c48:	08007d31 	.word	0x08007d31
 8007c4c:	08007d31 	.word	0x08007d31
 8007c50:	08007ced 	.word	0x08007ced
 8007c54:	08007d31 	.word	0x08007d31
 8007c58:	08007d31 	.word	0x08007d31
 8007c5c:	08007d31 	.word	0x08007d31
 8007c60:	08007d31 	.word	0x08007d31
 8007c64:	08007d31 	.word	0x08007d31
 8007c68:	08007d31 	.word	0x08007d31
 8007c6c:	08007d31 	.word	0x08007d31
 8007c70:	08007cfd 	.word	0x08007cfd
 8007c74:	08007d31 	.word	0x08007d31
 8007c78:	08007d31 	.word	0x08007d31
 8007c7c:	08007d31 	.word	0x08007d31
 8007c80:	08007d31 	.word	0x08007d31
 8007c84:	08007d31 	.word	0x08007d31
 8007c88:	08007d31 	.word	0x08007d31
 8007c8c:	08007d31 	.word	0x08007d31
 8007c90:	08007d31 	.word	0x08007d31
 8007c94:	08007d31 	.word	0x08007d31
 8007c98:	08007d31 	.word	0x08007d31
 8007c9c:	08007d31 	.word	0x08007d31
 8007ca0:	08007d31 	.word	0x08007d31
 8007ca4:	08007d31 	.word	0x08007d31
 8007ca8:	08007d31 	.word	0x08007d31
 8007cac:	08007d31 	.word	0x08007d31
 8007cb0:	08007d23 	.word	0x08007d23
 8007cb4:	2b40      	cmp	r3, #64	; 0x40
 8007cb6:	d037      	beq.n	8007d28 <UART_SetConfig+0xa28>
 8007cb8:	e03a      	b.n	8007d30 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cba:	f7fc fc63 	bl	8004584 <HAL_RCC_GetPCLK1Freq>
 8007cbe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007cc0:	e03c      	b.n	8007d3c <UART_SetConfig+0xa3c>
 8007cc2:	bf00      	nop
 8007cc4:	003d0900 	.word	0x003d0900
 8007cc8:	08015460 	.word	0x08015460
 8007ccc:	58024400 	.word	0x58024400
 8007cd0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cd4:	f7fc fc6c 	bl	80045b0 <HAL_RCC_GetPCLK2Freq>
 8007cd8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007cda:	e02f      	b.n	8007d3c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cdc:	f107 0314 	add.w	r3, r7, #20
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7fd fbd1 	bl	8005488 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cea:	e027      	b.n	8007d3c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cec:	f107 0308 	add.w	r3, r7, #8
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fd fd1d 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cfa:	e01f      	b.n	8007d3c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cfc:	4b2c      	ldr	r3, [pc, #176]	; (8007db0 <UART_SetConfig+0xab0>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0320 	and.w	r3, r3, #32
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d009      	beq.n	8007d1c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007d08:	4b29      	ldr	r3, [pc, #164]	; (8007db0 <UART_SetConfig+0xab0>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	08db      	lsrs	r3, r3, #3
 8007d0e:	f003 0303 	and.w	r3, r3, #3
 8007d12:	4a28      	ldr	r2, [pc, #160]	; (8007db4 <UART_SetConfig+0xab4>)
 8007d14:	fa22 f303 	lsr.w	r3, r2, r3
 8007d18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d1a:	e00f      	b.n	8007d3c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8007d1c:	4b25      	ldr	r3, [pc, #148]	; (8007db4 <UART_SetConfig+0xab4>)
 8007d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d20:	e00c      	b.n	8007d3c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d22:	4b25      	ldr	r3, [pc, #148]	; (8007db8 <UART_SetConfig+0xab8>)
 8007d24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d26:	e009      	b.n	8007d3c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d2e:	e005      	b.n	8007d3c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8007d30:	2300      	movs	r3, #0
 8007d32:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007d3a:	bf00      	nop
    }

    if (pclk != 0U)
 8007d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d021      	beq.n	8007d86 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d46:	4a1d      	ldr	r2, [pc, #116]	; (8007dbc <UART_SetConfig+0xabc>)
 8007d48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d50:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	085b      	lsrs	r3, r3, #1
 8007d5a:	441a      	add	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6a:	2b0f      	cmp	r3, #15
 8007d6c:	d908      	bls.n	8007d80 <UART_SetConfig+0xa80>
 8007d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d74:	d204      	bcs.n	8007d80 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d7c:	60da      	str	r2, [r3, #12]
 8007d7e:	e002      	b.n	8007d86 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007da2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3738      	adds	r7, #56	; 0x38
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bdb0      	pop	{r4, r5, r7, pc}
 8007dae:	bf00      	nop
 8007db0:	58024400 	.word	0x58024400
 8007db4:	03d09000 	.word	0x03d09000
 8007db8:	003d0900 	.word	0x003d0900
 8007dbc:	08015460 	.word	0x08015460

08007dc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00a      	beq.n	8007dea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	430a      	orrs	r2, r1
 8007de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dee:	f003 0302 	and.w	r3, r3, #2
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00a      	beq.n	8007e0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	430a      	orrs	r2, r1
 8007e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e10:	f003 0304 	and.w	r3, r3, #4
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00a      	beq.n	8007e2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	430a      	orrs	r2, r1
 8007e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e32:	f003 0308 	and.w	r3, r3, #8
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00a      	beq.n	8007e50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	430a      	orrs	r2, r1
 8007e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e54:	f003 0310 	and.w	r3, r3, #16
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00a      	beq.n	8007e72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e76:	f003 0320 	and.w	r3, r3, #32
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00a      	beq.n	8007e94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	430a      	orrs	r2, r1
 8007e92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d01a      	beq.n	8007ed6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ebe:	d10a      	bne.n	8007ed6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	430a      	orrs	r2, r1
 8007ed4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00a      	beq.n	8007ef8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	430a      	orrs	r2, r1
 8007ef6:	605a      	str	r2, [r3, #4]
  }
}
 8007ef8:	bf00      	nop
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af02      	add	r7, sp, #8
 8007f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f14:	f7fa f8bc 	bl	8002090 <HAL_GetTick>
 8007f18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 0308 	and.w	r3, r3, #8
 8007f24:	2b08      	cmp	r3, #8
 8007f26:	d10e      	bne.n	8007f46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f2c:	9300      	str	r3, [sp, #0]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f82f 	bl	8007f9a <UART_WaitOnFlagUntilTimeout>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d001      	beq.n	8007f46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e025      	b.n	8007f92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 0304 	and.w	r3, r3, #4
 8007f50:	2b04      	cmp	r3, #4
 8007f52:	d10e      	bne.n	8007f72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 f819 	bl	8007f9a <UART_WaitOnFlagUntilTimeout>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f6e:	2303      	movs	r3, #3
 8007f70:	e00f      	b.n	8007f92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2220      	movs	r2, #32
 8007f76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2220      	movs	r2, #32
 8007f7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b084      	sub	sp, #16
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	60f8      	str	r0, [r7, #12]
 8007fa2:	60b9      	str	r1, [r7, #8]
 8007fa4:	603b      	str	r3, [r7, #0]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007faa:	e062      	b.n	8008072 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb2:	d05e      	beq.n	8008072 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fb4:	f7fa f86c 	bl	8002090 <HAL_GetTick>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	69ba      	ldr	r2, [r7, #24]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d302      	bcc.n	8007fca <UART_WaitOnFlagUntilTimeout+0x30>
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d11d      	bne.n	8008006 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007fd8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	689a      	ldr	r2, [r3, #8]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f022 0201 	bic.w	r2, r2, #1
 8007fe8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2220      	movs	r2, #32
 8007fee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2220      	movs	r2, #32
 8007ff6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008002:	2303      	movs	r3, #3
 8008004:	e045      	b.n	8008092 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 0304 	and.w	r3, r3, #4
 8008010:	2b00      	cmp	r3, #0
 8008012:	d02e      	beq.n	8008072 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	69db      	ldr	r3, [r3, #28]
 800801a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800801e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008022:	d126      	bne.n	8008072 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800802c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800803c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	689a      	ldr	r2, [r3, #8]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f022 0201 	bic.w	r2, r2, #1
 800804c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2220      	movs	r2, #32
 8008052:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2220      	movs	r2, #32
 800805a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2220      	movs	r2, #32
 8008062:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	e00f      	b.n	8008092 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	69da      	ldr	r2, [r3, #28]
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	4013      	ands	r3, r2
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	429a      	cmp	r2, r3
 8008080:	bf0c      	ite	eq
 8008082:	2301      	moveq	r3, #1
 8008084:	2300      	movne	r3, #0
 8008086:	b2db      	uxtb	r3, r3
 8008088:	461a      	mov	r2, r3
 800808a:	79fb      	ldrb	r3, [r7, #7]
 800808c:	429a      	cmp	r2, r3
 800808e:	d08d      	beq.n	8007fac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800809a:	b480      	push	{r7}
 800809c:	b085      	sub	sp, #20
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d101      	bne.n	80080b0 <HAL_UARTEx_DisableFifoMode+0x16>
 80080ac:	2302      	movs	r3, #2
 80080ae:	e027      	b.n	8008100 <HAL_UARTEx_DisableFifoMode+0x66>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2224      	movs	r2, #36	; 0x24
 80080bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f022 0201 	bic.w	r2, r2, #1
 80080d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80080de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2220      	movs	r2, #32
 80080f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800811c:	2b01      	cmp	r3, #1
 800811e:	d101      	bne.n	8008124 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008120:	2302      	movs	r3, #2
 8008122:	e02d      	b.n	8008180 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2224      	movs	r2, #36	; 0x24
 8008130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f022 0201 	bic.w	r2, r2, #1
 800814a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	430a      	orrs	r2, r1
 800815e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 f84f 	bl	8008204 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2220      	movs	r2, #32
 8008172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008198:	2b01      	cmp	r3, #1
 800819a:	d101      	bne.n	80081a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800819c:	2302      	movs	r3, #2
 800819e:	e02d      	b.n	80081fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2224      	movs	r2, #36	; 0x24
 80081ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f022 0201 	bic.w	r2, r2, #1
 80081c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	683a      	ldr	r2, [r7, #0]
 80081d8:	430a      	orrs	r2, r1
 80081da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 f811 	bl	8008204 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2220      	movs	r2, #32
 80081ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008210:	2b00      	cmp	r3, #0
 8008212:	d108      	bne.n	8008226 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008224:	e031      	b.n	800828a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008226:	2310      	movs	r3, #16
 8008228:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800822a:	2310      	movs	r3, #16
 800822c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	0e5b      	lsrs	r3, r3, #25
 8008236:	b2db      	uxtb	r3, r3
 8008238:	f003 0307 	and.w	r3, r3, #7
 800823c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	0f5b      	lsrs	r3, r3, #29
 8008246:	b2db      	uxtb	r3, r3
 8008248:	f003 0307 	and.w	r3, r3, #7
 800824c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800824e:	7bbb      	ldrb	r3, [r7, #14]
 8008250:	7b3a      	ldrb	r2, [r7, #12]
 8008252:	4911      	ldr	r1, [pc, #68]	; (8008298 <UARTEx_SetNbDataToProcess+0x94>)
 8008254:	5c8a      	ldrb	r2, [r1, r2]
 8008256:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800825a:	7b3a      	ldrb	r2, [r7, #12]
 800825c:	490f      	ldr	r1, [pc, #60]	; (800829c <UARTEx_SetNbDataToProcess+0x98>)
 800825e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008260:	fb93 f3f2 	sdiv	r3, r3, r2
 8008264:	b29a      	uxth	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800826c:	7bfb      	ldrb	r3, [r7, #15]
 800826e:	7b7a      	ldrb	r2, [r7, #13]
 8008270:	4909      	ldr	r1, [pc, #36]	; (8008298 <UARTEx_SetNbDataToProcess+0x94>)
 8008272:	5c8a      	ldrb	r2, [r1, r2]
 8008274:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008278:	7b7a      	ldrb	r2, [r7, #13]
 800827a:	4908      	ldr	r1, [pc, #32]	; (800829c <UARTEx_SetNbDataToProcess+0x98>)
 800827c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800827e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008282:	b29a      	uxth	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800828a:	bf00      	nop
 800828c:	3714      	adds	r7, #20
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	08015478 	.word	0x08015478
 800829c:	08015480 	.word	0x08015480

080082a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80082a0:	b084      	sub	sp, #16
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b084      	sub	sp, #16
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	f107 001c 	add.w	r0, r7, #28
 80082ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80082b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d120      	bne.n	80082fa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	68da      	ldr	r2, [r3, #12]
 80082c8:	4b2a      	ldr	r3, [pc, #168]	; (8008374 <USB_CoreInit+0xd4>)
 80082ca:	4013      	ands	r3, r2
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80082dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d105      	bne.n	80082ee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fa60 	bl	80087b4 <USB_CoreReset>
 80082f4:	4603      	mov	r3, r0
 80082f6:	73fb      	strb	r3, [r7, #15]
 80082f8:	e01a      	b.n	8008330 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fa54 	bl	80087b4 <USB_CoreReset>
 800830c:	4603      	mov	r3, r0
 800830e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008312:	2b00      	cmp	r3, #0
 8008314:	d106      	bne.n	8008324 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	639a      	str	r2, [r3, #56]	; 0x38
 8008322:	e005      	b.n	8008330 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008328:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008332:	2b01      	cmp	r3, #1
 8008334:	d116      	bne.n	8008364 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800833a:	b29a      	uxth	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008344:	4b0c      	ldr	r3, [pc, #48]	; (8008378 <USB_CoreInit+0xd8>)
 8008346:	4313      	orrs	r3, r2
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	f043 0206 	orr.w	r2, r3, #6
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	f043 0220 	orr.w	r2, r3, #32
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008364:	7bfb      	ldrb	r3, [r7, #15]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008370:	b004      	add	sp, #16
 8008372:	4770      	bx	lr
 8008374:	ffbdffbf 	.word	0xffbdffbf
 8008378:	03ee0000 	.word	0x03ee0000

0800837c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	f023 0201 	bic.w	r2, r3, #1
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	370c      	adds	r7, #12
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr

0800839e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b082      	sub	sp, #8
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
 80083a6:	460b      	mov	r3, r1
 80083a8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80083b6:	78fb      	ldrb	r3, [r7, #3]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d106      	bne.n	80083ca <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	60da      	str	r2, [r3, #12]
 80083c8:	e00b      	b.n	80083e2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80083ca:	78fb      	ldrb	r3, [r7, #3]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d106      	bne.n	80083de <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	60da      	str	r2, [r3, #12]
 80083dc:	e001      	b.n	80083e2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	e003      	b.n	80083ea <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80083e2:	2032      	movs	r0, #50	; 0x32
 80083e4:	f7f9 fe60 	bl	80020a8 <HAL_Delay>

  return HAL_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
	...

080083f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80083f4:	b084      	sub	sp, #16
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b086      	sub	sp, #24
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008402:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008406:	2300      	movs	r3, #0
 8008408:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800840e:	2300      	movs	r3, #0
 8008410:	613b      	str	r3, [r7, #16]
 8008412:	e009      	b.n	8008428 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	3340      	adds	r3, #64	; 0x40
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4413      	add	r3, r2
 800841e:	2200      	movs	r2, #0
 8008420:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	3301      	adds	r3, #1
 8008426:	613b      	str	r3, [r7, #16]
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	2b0e      	cmp	r3, #14
 800842c:	d9f2      	bls.n	8008414 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800842e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008430:	2b00      	cmp	r3, #0
 8008432:	d11c      	bne.n	800846e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008442:	f043 0302 	orr.w	r3, r3, #2
 8008446:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	601a      	str	r2, [r3, #0]
 800846c:	e005      	b.n	800847a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008472:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008480:	461a      	mov	r2, r3
 8008482:	2300      	movs	r3, #0
 8008484:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800848c:	4619      	mov	r1, r3
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008494:	461a      	mov	r2, r3
 8008496:	680b      	ldr	r3, [r1, #0]
 8008498:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800849a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849c:	2b01      	cmp	r3, #1
 800849e:	d10c      	bne.n	80084ba <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80084a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d104      	bne.n	80084b0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80084a6:	2100      	movs	r1, #0
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f949 	bl	8008740 <USB_SetDevSpeed>
 80084ae:	e008      	b.n	80084c2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80084b0:	2101      	movs	r1, #1
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 f944 	bl	8008740 <USB_SetDevSpeed>
 80084b8:	e003      	b.n	80084c2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80084ba:	2103      	movs	r1, #3
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 f93f 	bl	8008740 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80084c2:	2110      	movs	r1, #16
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 f8f3 	bl	80086b0 <USB_FlushTxFifo>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d001      	beq.n	80084d4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 f911 	bl	80086fc <USB_FlushRxFifo>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d001      	beq.n	80084e4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ea:	461a      	mov	r2, r3
 80084ec:	2300      	movs	r3, #0
 80084ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084f6:	461a      	mov	r2, r3
 80084f8:	2300      	movs	r3, #0
 80084fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008502:	461a      	mov	r2, r3
 8008504:	2300      	movs	r3, #0
 8008506:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008508:	2300      	movs	r3, #0
 800850a:	613b      	str	r3, [r7, #16]
 800850c:	e043      	b.n	8008596 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	015a      	lsls	r2, r3, #5
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	4413      	add	r3, r2
 8008516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008520:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008524:	d118      	bne.n	8008558 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d10a      	bne.n	8008542 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	015a      	lsls	r2, r3, #5
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	4413      	add	r3, r2
 8008534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008538:	461a      	mov	r2, r3
 800853a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800853e:	6013      	str	r3, [r2, #0]
 8008540:	e013      	b.n	800856a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	4413      	add	r3, r2
 800854a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800854e:	461a      	mov	r2, r3
 8008550:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008554:	6013      	str	r3, [r2, #0]
 8008556:	e008      	b.n	800856a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	015a      	lsls	r2, r3, #5
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	4413      	add	r3, r2
 8008560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008564:	461a      	mov	r2, r3
 8008566:	2300      	movs	r3, #0
 8008568:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	015a      	lsls	r2, r3, #5
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	4413      	add	r3, r2
 8008572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008576:	461a      	mov	r2, r3
 8008578:	2300      	movs	r3, #0
 800857a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	015a      	lsls	r2, r3, #5
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	4413      	add	r3, r2
 8008584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008588:	461a      	mov	r2, r3
 800858a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800858e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	3301      	adds	r3, #1
 8008594:	613b      	str	r3, [r7, #16]
 8008596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008598:	693a      	ldr	r2, [r7, #16]
 800859a:	429a      	cmp	r2, r3
 800859c:	d3b7      	bcc.n	800850e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800859e:	2300      	movs	r3, #0
 80085a0:	613b      	str	r3, [r7, #16]
 80085a2:	e043      	b.n	800862c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	015a      	lsls	r2, r3, #5
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	4413      	add	r3, r2
 80085ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085ba:	d118      	bne.n	80085ee <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d10a      	bne.n	80085d8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	015a      	lsls	r2, r3, #5
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	4413      	add	r3, r2
 80085ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ce:	461a      	mov	r2, r3
 80085d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80085d4:	6013      	str	r3, [r2, #0]
 80085d6:	e013      	b.n	8008600 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	015a      	lsls	r2, r3, #5
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	4413      	add	r3, r2
 80085e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085e4:	461a      	mov	r2, r3
 80085e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80085ea:	6013      	str	r3, [r2, #0]
 80085ec:	e008      	b.n	8008600 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	015a      	lsls	r2, r3, #5
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	4413      	add	r3, r2
 80085f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085fa:	461a      	mov	r2, r3
 80085fc:	2300      	movs	r3, #0
 80085fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	015a      	lsls	r2, r3, #5
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	4413      	add	r3, r2
 8008608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800860c:	461a      	mov	r2, r3
 800860e:	2300      	movs	r3, #0
 8008610:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	015a      	lsls	r2, r3, #5
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	4413      	add	r3, r2
 800861a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800861e:	461a      	mov	r2, r3
 8008620:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008624:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	3301      	adds	r3, #1
 800862a:	613b      	str	r3, [r7, #16]
 800862c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862e:	693a      	ldr	r2, [r7, #16]
 8008630:	429a      	cmp	r2, r3
 8008632:	d3b7      	bcc.n	80085a4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008642:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008646:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008654:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008658:	2b00      	cmp	r3, #0
 800865a:	d105      	bne.n	8008668 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	f043 0210 	orr.w	r2, r3, #16
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	699a      	ldr	r2, [r3, #24]
 800866c:	4b0e      	ldr	r3, [pc, #56]	; (80086a8 <USB_DevInit+0x2b4>)
 800866e:	4313      	orrs	r3, r2
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008676:	2b00      	cmp	r3, #0
 8008678:	d005      	beq.n	8008686 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	f043 0208 	orr.w	r2, r3, #8
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008688:	2b01      	cmp	r3, #1
 800868a:	d105      	bne.n	8008698 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	699a      	ldr	r2, [r3, #24]
 8008690:	4b06      	ldr	r3, [pc, #24]	; (80086ac <USB_DevInit+0x2b8>)
 8008692:	4313      	orrs	r3, r2
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008698:	7dfb      	ldrb	r3, [r7, #23]
}
 800869a:	4618      	mov	r0, r3
 800869c:	3718      	adds	r7, #24
 800869e:	46bd      	mov	sp, r7
 80086a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80086a4:	b004      	add	sp, #16
 80086a6:	4770      	bx	lr
 80086a8:	803c3800 	.word	0x803c3800
 80086ac:	40000004 	.word	0x40000004

080086b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80086ba:	2300      	movs	r3, #0
 80086bc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	019b      	lsls	r3, r3, #6
 80086c2:	f043 0220 	orr.w	r2, r3, #32
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	3301      	adds	r3, #1
 80086ce:	60fb      	str	r3, [r7, #12]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	4a09      	ldr	r2, [pc, #36]	; (80086f8 <USB_FlushTxFifo+0x48>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d901      	bls.n	80086dc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80086d8:	2303      	movs	r3, #3
 80086da:	e006      	b.n	80086ea <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	691b      	ldr	r3, [r3, #16]
 80086e0:	f003 0320 	and.w	r3, r3, #32
 80086e4:	2b20      	cmp	r3, #32
 80086e6:	d0f0      	beq.n	80086ca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3714      	adds	r7, #20
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	00030d40 	.word	0x00030d40

080086fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008704:	2300      	movs	r3, #0
 8008706:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2210      	movs	r2, #16
 800870c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	3301      	adds	r3, #1
 8008712:	60fb      	str	r3, [r7, #12]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	4a09      	ldr	r2, [pc, #36]	; (800873c <USB_FlushRxFifo+0x40>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d901      	bls.n	8008720 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800871c:	2303      	movs	r3, #3
 800871e:	e006      	b.n	800872e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	f003 0310 	and.w	r3, r3, #16
 8008728:	2b10      	cmp	r3, #16
 800872a:	d0f0      	beq.n	800870e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3714      	adds	r7, #20
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	00030d40 	.word	0x00030d40

08008740 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	460b      	mov	r3, r1
 800874a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	78fb      	ldrb	r3, [r7, #3]
 800875a:	68f9      	ldr	r1, [r7, #12]
 800875c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008760:	4313      	orrs	r3, r2
 8008762:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3714      	adds	r7, #20
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr

08008772 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008772:	b480      	push	{r7}
 8008774:	b085      	sub	sp, #20
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800878c:	f023 0303 	bic.w	r3, r3, #3
 8008790:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087a0:	f043 0302 	orr.w	r3, r3, #2
 80087a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3714      	adds	r7, #20
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80087bc:	2300      	movs	r3, #0
 80087be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	3301      	adds	r3, #1
 80087c4:	60fb      	str	r3, [r7, #12]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	4a13      	ldr	r2, [pc, #76]	; (8008818 <USB_CoreReset+0x64>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d901      	bls.n	80087d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80087ce:	2303      	movs	r3, #3
 80087d0:	e01b      	b.n	800880a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	daf2      	bge.n	80087c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80087da:	2300      	movs	r3, #0
 80087dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	f043 0201 	orr.w	r2, r3, #1
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	3301      	adds	r3, #1
 80087ee:	60fb      	str	r3, [r7, #12]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	4a09      	ldr	r2, [pc, #36]	; (8008818 <USB_CoreReset+0x64>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d901      	bls.n	80087fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80087f8:	2303      	movs	r3, #3
 80087fa:	e006      	b.n	800880a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	f003 0301 	and.w	r3, r3, #1
 8008804:	2b01      	cmp	r3, #1
 8008806:	d0f0      	beq.n	80087ea <USB_CoreReset+0x36>

  return HAL_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3714      	adds	r7, #20
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	00030d40 	.word	0x00030d40

0800881c <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	4603      	mov	r3, r0
 8008824:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&DEV_SPI, (uint8_t *)&_dat, 1, 500);
 8008826:	1df9      	adds	r1, r7, #7
 8008828:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800882c:	2201      	movs	r2, #1
 800882e:	4803      	ldr	r0, [pc, #12]	; (800883c <DEV_SPI_WRite+0x20>)
 8008830:	f7fd fb38 	bl	8005ea4 <HAL_SPI_Transmit>
}
 8008834:	bf00      	nop
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	2400a5cc 	.word	0x2400a5cc

08008840 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 8008844:	2201      	movs	r2, #1
 8008846:	f44f 7180 	mov.w	r1, #256	; 0x100
 800884a:	480a      	ldr	r0, [pc, #40]	; (8008874 <DEV_Module_Init+0x34>)
 800884c:	f7fa fbc2 	bl	8002fd4 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 8008850:	2201      	movs	r2, #1
 8008852:	2140      	movs	r1, #64	; 0x40
 8008854:	4807      	ldr	r0, [pc, #28]	; (8008874 <DEV_Module_Init+0x34>)
 8008856:	f7fa fbbd 	bl	8002fd4 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 800885a:	2201      	movs	r2, #1
 800885c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008860:	4805      	ldr	r0, [pc, #20]	; (8008878 <DEV_Module_Init+0x38>)
 8008862:	f7fa fbb7 	bl	8002fd4 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&DEV_BL_TIM, DEV_BL_CH);
 8008866:	2100      	movs	r1, #0
 8008868:	4804      	ldr	r0, [pc, #16]	; (800887c <DEV_Module_Init+0x3c>)
 800886a:	f7fd fe4d 	bl	8006508 <HAL_TIM_PWM_Start>
		return 0;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	bd80      	pop	{r7, pc}
 8008874:	58021800 	.word	0x58021800
 8008878:	58021400 	.word	0x58021400
 800887c:	2400a654 	.word	0x2400a654

08008880 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8008880:	b590      	push	{r4, r7, lr}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	4604      	mov	r4, r0
 8008888:	4608      	mov	r0, r1
 800888a:	4611      	mov	r1, r2
 800888c:	461a      	mov	r2, r3
 800888e:	4623      	mov	r3, r4
 8008890:	80fb      	strh	r3, [r7, #6]
 8008892:	4603      	mov	r3, r0
 8008894:	80bb      	strh	r3, [r7, #4]
 8008896:	460b      	mov	r3, r1
 8008898:	807b      	strh	r3, [r7, #2]
 800889a:	4613      	mov	r3, r2
 800889c:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 800889e:	4a1c      	ldr	r2, [pc, #112]	; (8008910 <Paint_NewImage+0x90>)
 80088a0:	88fb      	ldrh	r3, [r7, #6]
 80088a2:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 80088a4:	4a1a      	ldr	r2, [pc, #104]	; (8008910 <Paint_NewImage+0x90>)
 80088a6:	88bb      	ldrh	r3, [r7, #4]
 80088a8:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 80088aa:	4a19      	ldr	r2, [pc, #100]	; (8008910 <Paint_NewImage+0x90>)
 80088ac:	883b      	ldrh	r3, [r7, #0]
 80088ae:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 80088b0:	4a17      	ldr	r2, [pc, #92]	; (8008910 <Paint_NewImage+0x90>)
 80088b2:	88fb      	ldrh	r3, [r7, #6]
 80088b4:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 80088b6:	4a16      	ldr	r2, [pc, #88]	; (8008910 <Paint_NewImage+0x90>)
 80088b8:	88bb      	ldrh	r3, [r7, #4]
 80088ba:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 80088bc:	4b14      	ldr	r3, [pc, #80]	; (8008910 <Paint_NewImage+0x90>)
 80088be:	8a5b      	ldrh	r3, [r3, #18]
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	4619      	mov	r1, r3
 80088c4:	4b12      	ldr	r3, [pc, #72]	; (8008910 <Paint_NewImage+0x90>)
 80088c6:	8a9b      	ldrh	r3, [r3, #20]
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	461a      	mov	r2, r3
 80088cc:	4811      	ldr	r0, [pc, #68]	; (8008914 <Paint_NewImage+0x94>)
 80088ce:	f008 fd95 	bl	80113fc <iprintf>
   
    Paint.Rotate = Rotate;
 80088d2:	4a0f      	ldr	r2, [pc, #60]	; (8008910 <Paint_NewImage+0x90>)
 80088d4:	887b      	ldrh	r3, [r7, #2]
 80088d6:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 80088d8:	4b0d      	ldr	r3, [pc, #52]	; (8008910 <Paint_NewImage+0x90>)
 80088da:	2200      	movs	r2, #0
 80088dc:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 80088de:	887b      	ldrh	r3, [r7, #2]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d002      	beq.n	80088ea <Paint_NewImage+0x6a>
 80088e4:	887b      	ldrh	r3, [r7, #2]
 80088e6:	2bb4      	cmp	r3, #180	; 0xb4
 80088e8:	d106      	bne.n	80088f8 <Paint_NewImage+0x78>
        Paint.Width = Width;
 80088ea:	4a09      	ldr	r2, [pc, #36]	; (8008910 <Paint_NewImage+0x90>)
 80088ec:	88fb      	ldrh	r3, [r7, #6]
 80088ee:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 80088f0:	4a07      	ldr	r2, [pc, #28]	; (8008910 <Paint_NewImage+0x90>)
 80088f2:	88bb      	ldrh	r3, [r7, #4]
 80088f4:	80d3      	strh	r3, [r2, #6]
 80088f6:	e006      	b.n	8008906 <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 80088f8:	4a05      	ldr	r2, [pc, #20]	; (8008910 <Paint_NewImage+0x90>)
 80088fa:	88bb      	ldrh	r3, [r7, #4]
 80088fc:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 80088fe:	4a04      	ldr	r2, [pc, #16]	; (8008910 <Paint_NewImage+0x90>)
 8008900:	88fb      	ldrh	r3, [r7, #6]
 8008902:	80d3      	strh	r3, [r2, #6]
    }
}
 8008904:	bf00      	nop
 8008906:	bf00      	nop
 8008908:	370c      	adds	r7, #12
 800890a:	46bd      	mov	sp, r7
 800890c:	bd90      	pop	{r4, r7, pc}
 800890e:	bf00      	nop
 8008910:	2400ab40 	.word	0x2400ab40
 8008914:	08014f28 	.word	0x08014f28

08008918 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 8008920:	4a04      	ldr	r2, [pc, #16]	; (8008934 <Paint_SetClearFuntion+0x1c>)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6013      	str	r3, [r2, #0]
}
 8008926:	bf00      	nop
 8008928:	370c      	adds	r7, #12
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	2400ab58 	.word	0x2400ab58

08008938 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 8008940:	4a04      	ldr	r2, [pc, #16]	; (8008954 <Paint_SetDisplayFuntion+0x1c>)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6013      	str	r3, [r2, #0]
}
 8008946:	bf00      	nop
 8008948:	370c      	adds	r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	2400ab3c 	.word	0x2400ab3c

08008958 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	4603      	mov	r3, r0
 8008960:	80fb      	strh	r3, [r7, #6]
 8008962:	460b      	mov	r3, r1
 8008964:	80bb      	strh	r3, [r7, #4]
 8008966:	4613      	mov	r3, r2
 8008968:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 800896a:	4b50      	ldr	r3, [pc, #320]	; (8008aac <Paint_SetPixel+0x154>)
 800896c:	889b      	ldrh	r3, [r3, #4]
 800896e:	b29b      	uxth	r3, r3
 8008970:	88fa      	ldrh	r2, [r7, #6]
 8008972:	429a      	cmp	r2, r3
 8008974:	d805      	bhi.n	8008982 <Paint_SetPixel+0x2a>
 8008976:	4b4d      	ldr	r3, [pc, #308]	; (8008aac <Paint_SetPixel+0x154>)
 8008978:	88db      	ldrh	r3, [r3, #6]
 800897a:	b29b      	uxth	r3, r3
 800897c:	88ba      	ldrh	r2, [r7, #4]
 800897e:	429a      	cmp	r2, r3
 8008980:	d903      	bls.n	800898a <Paint_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 8008982:	484b      	ldr	r0, [pc, #300]	; (8008ab0 <Paint_SetPixel+0x158>)
 8008984:	f008 fdc0 	bl	8011508 <puts>
        return;
 8008988:	e08c      	b.n	8008aa4 <Paint_SetPixel+0x14c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 800898a:	4b48      	ldr	r3, [pc, #288]	; (8008aac <Paint_SetPixel+0x154>)
 800898c:	89db      	ldrh	r3, [r3, #14]
 800898e:	b29b      	uxth	r3, r3
 8008990:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8008994:	d02d      	beq.n	80089f2 <Paint_SetPixel+0x9a>
 8008996:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800899a:	f300 8080 	bgt.w	8008a9e <Paint_SetPixel+0x146>
 800899e:	2bb4      	cmp	r3, #180	; 0xb4
 80089a0:	d016      	beq.n	80089d0 <Paint_SetPixel+0x78>
 80089a2:	2bb4      	cmp	r3, #180	; 0xb4
 80089a4:	dc7b      	bgt.n	8008a9e <Paint_SetPixel+0x146>
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d002      	beq.n	80089b0 <Paint_SetPixel+0x58>
 80089aa:	2b5a      	cmp	r3, #90	; 0x5a
 80089ac:	d005      	beq.n	80089ba <Paint_SetPixel+0x62>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 80089ae:	e076      	b.n	8008a9e <Paint_SetPixel+0x146>
        X = Xpoint;
 80089b0:	88fb      	ldrh	r3, [r7, #6]
 80089b2:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 80089b4:	88bb      	ldrh	r3, [r7, #4]
 80089b6:	81bb      	strh	r3, [r7, #12]
        break;
 80089b8:	e026      	b.n	8008a08 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Ypoint - 1;
 80089ba:	4b3c      	ldr	r3, [pc, #240]	; (8008aac <Paint_SetPixel+0x154>)
 80089bc:	891b      	ldrh	r3, [r3, #8]
 80089be:	b29a      	uxth	r2, r3
 80089c0:	88bb      	ldrh	r3, [r7, #4]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	3b01      	subs	r3, #1
 80089c8:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 80089ca:	88fb      	ldrh	r3, [r7, #6]
 80089cc:	81bb      	strh	r3, [r7, #12]
        break;
 80089ce:	e01b      	b.n	8008a08 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Xpoint - 1;
 80089d0:	4b36      	ldr	r3, [pc, #216]	; (8008aac <Paint_SetPixel+0x154>)
 80089d2:	891b      	ldrh	r3, [r3, #8]
 80089d4:	b29a      	uxth	r2, r3
 80089d6:	88fb      	ldrh	r3, [r7, #6]
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	b29b      	uxth	r3, r3
 80089dc:	3b01      	subs	r3, #1
 80089de:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 80089e0:	4b32      	ldr	r3, [pc, #200]	; (8008aac <Paint_SetPixel+0x154>)
 80089e2:	895b      	ldrh	r3, [r3, #10]
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	88bb      	ldrh	r3, [r7, #4]
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	3b01      	subs	r3, #1
 80089ee:	81bb      	strh	r3, [r7, #12]
        break;
 80089f0:	e00a      	b.n	8008a08 <Paint_SetPixel+0xb0>
        X = Ypoint;
 80089f2:	88bb      	ldrh	r3, [r7, #4]
 80089f4:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 80089f6:	4b2d      	ldr	r3, [pc, #180]	; (8008aac <Paint_SetPixel+0x154>)
 80089f8:	895b      	ldrh	r3, [r3, #10]
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	88fb      	ldrh	r3, [r7, #6]
 80089fe:	1ad3      	subs	r3, r2, r3
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	3b01      	subs	r3, #1
 8008a04:	81bb      	strh	r3, [r7, #12]
        break;
 8008a06:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8008a08:	4b28      	ldr	r3, [pc, #160]	; (8008aac <Paint_SetPixel+0x154>)
 8008a0a:	8a1b      	ldrh	r3, [r3, #16]
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	2b03      	cmp	r3, #3
 8008a10:	d847      	bhi.n	8008aa2 <Paint_SetPixel+0x14a>
 8008a12:	a201      	add	r2, pc, #4	; (adr r2, 8008a18 <Paint_SetPixel+0xc0>)
 8008a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a18:	08008a6f 	.word	0x08008a6f
 8008a1c:	08008a29 	.word	0x08008a29
 8008a20:	08008a3b 	.word	0x08008a3b
 8008a24:	08008a4d 	.word	0x08008a4d
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8008a28:	4b20      	ldr	r3, [pc, #128]	; (8008aac <Paint_SetPixel+0x154>)
 8008a2a:	891b      	ldrh	r3, [r3, #8]
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	89fb      	ldrh	r3, [r7, #14]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	3b01      	subs	r3, #1
 8008a36:	81fb      	strh	r3, [r7, #14]
        break;
 8008a38:	e01a      	b.n	8008a70 <Paint_SetPixel+0x118>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8008a3a:	4b1c      	ldr	r3, [pc, #112]	; (8008aac <Paint_SetPixel+0x154>)
 8008a3c:	895b      	ldrh	r3, [r3, #10]
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	89bb      	ldrh	r3, [r7, #12]
 8008a42:	1ad3      	subs	r3, r2, r3
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	3b01      	subs	r3, #1
 8008a48:	81bb      	strh	r3, [r7, #12]
        break;
 8008a4a:	e011      	b.n	8008a70 <Paint_SetPixel+0x118>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8008a4c:	4b17      	ldr	r3, [pc, #92]	; (8008aac <Paint_SetPixel+0x154>)
 8008a4e:	891b      	ldrh	r3, [r3, #8]
 8008a50:	b29a      	uxth	r2, r3
 8008a52:	89fb      	ldrh	r3, [r7, #14]
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 8008a5c:	4b13      	ldr	r3, [pc, #76]	; (8008aac <Paint_SetPixel+0x154>)
 8008a5e:	895b      	ldrh	r3, [r3, #10]
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	89bb      	ldrh	r3, [r7, #12]
 8008a64:	1ad3      	subs	r3, r2, r3
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	81bb      	strh	r3, [r7, #12]
        break;
 8008a6c:	e000      	b.n	8008a70 <Paint_SetPixel+0x118>
        break;
 8008a6e:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8008a70:	4b0e      	ldr	r3, [pc, #56]	; (8008aac <Paint_SetPixel+0x154>)
 8008a72:	891b      	ldrh	r3, [r3, #8]
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	89fa      	ldrh	r2, [r7, #14]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d805      	bhi.n	8008a88 <Paint_SetPixel+0x130>
 8008a7c:	4b0b      	ldr	r3, [pc, #44]	; (8008aac <Paint_SetPixel+0x154>)
 8008a7e:	895b      	ldrh	r3, [r3, #10]
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	89ba      	ldrh	r2, [r7, #12]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d903      	bls.n	8008a90 <Paint_SetPixel+0x138>
        Debug("Exceeding display boundaries\r\n");
 8008a88:	4809      	ldr	r0, [pc, #36]	; (8008ab0 <Paint_SetPixel+0x158>)
 8008a8a:	f008 fd3d 	bl	8011508 <puts>
        return;
 8008a8e:	e009      	b.n	8008aa4 <Paint_SetPixel+0x14c>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 8008a90:	4b08      	ldr	r3, [pc, #32]	; (8008ab4 <Paint_SetPixel+0x15c>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	887a      	ldrh	r2, [r7, #2]
 8008a96:	89b9      	ldrh	r1, [r7, #12]
 8008a98:	89f8      	ldrh	r0, [r7, #14]
 8008a9a:	4798      	blx	r3
 8008a9c:	e002      	b.n	8008aa4 <Paint_SetPixel+0x14c>
        return;
 8008a9e:	bf00      	nop
 8008aa0:	e000      	b.n	8008aa4 <Paint_SetPixel+0x14c>
        return;
 8008aa2:	bf00      	nop
}
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	2400ab40 	.word	0x2400ab40
 8008ab0:	08015028 	.word	0x08015028
 8008ab4:	2400ab3c 	.word	0x2400ab3c

08008ab8 <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	4603      	mov	r3, r0
 8008ac0:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 8008ac2:	4b04      	ldr	r3, [pc, #16]	; (8008ad4 <Paint_Clear+0x1c>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	88fa      	ldrh	r2, [r7, #6]
 8008ac8:	4610      	mov	r0, r2
 8008aca:	4798      	blx	r3
}
 8008acc:	bf00      	nop
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	2400ab58 	.word	0x2400ab58

08008ad8 <Paint_ClearWindows>:
    Ystart :   Y starting point
    Xend   :   x end point
    Yend   :   y end point
******************************************************************************/
void Paint_ClearWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, UWORD Color)
{
 8008ad8:	b590      	push	{r4, r7, lr}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	4604      	mov	r4, r0
 8008ae0:	4608      	mov	r0, r1
 8008ae2:	4611      	mov	r1, r2
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	4623      	mov	r3, r4
 8008ae8:	80fb      	strh	r3, [r7, #6]
 8008aea:	4603      	mov	r3, r0
 8008aec:	80bb      	strh	r3, [r7, #4]
 8008aee:	460b      	mov	r3, r1
 8008af0:	807b      	strh	r3, [r7, #2]
 8008af2:	4613      	mov	r3, r2
 8008af4:	803b      	strh	r3, [r7, #0]
    UWORD X, Y;
    for (Y = Ystart; Y < Yend; Y++)
 8008af6:	88bb      	ldrh	r3, [r7, #4]
 8008af8:	81bb      	strh	r3, [r7, #12]
 8008afa:	e012      	b.n	8008b22 <Paint_ClearWindows+0x4a>
    {
        for (X = Xstart; X < Xend; X++)
 8008afc:	88fb      	ldrh	r3, [r7, #6]
 8008afe:	81fb      	strh	r3, [r7, #14]
 8008b00:	e008      	b.n	8008b14 <Paint_ClearWindows+0x3c>
        {//8 pixel =  1 byte
            Paint_SetPixel(X, Y, Color);
 8008b02:	8c3a      	ldrh	r2, [r7, #32]
 8008b04:	89b9      	ldrh	r1, [r7, #12]
 8008b06:	89fb      	ldrh	r3, [r7, #14]
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7ff ff25 	bl	8008958 <Paint_SetPixel>
        for (X = Xstart; X < Xend; X++)
 8008b0e:	89fb      	ldrh	r3, [r7, #14]
 8008b10:	3301      	adds	r3, #1
 8008b12:	81fb      	strh	r3, [r7, #14]
 8008b14:	89fa      	ldrh	r2, [r7, #14]
 8008b16:	887b      	ldrh	r3, [r7, #2]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d3f2      	bcc.n	8008b02 <Paint_ClearWindows+0x2a>
    for (Y = Ystart; Y < Yend; Y++)
 8008b1c:	89bb      	ldrh	r3, [r7, #12]
 8008b1e:	3301      	adds	r3, #1
 8008b20:	81bb      	strh	r3, [r7, #12]
 8008b22:	89ba      	ldrh	r2, [r7, #12]
 8008b24:	883b      	ldrh	r3, [r7, #0]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d3e8      	bcc.n	8008afc <Paint_ClearWindows+0x24>
        }
    }
}
 8008b2a:	bf00      	nop
 8008b2c:	bf00      	nop
 8008b2e:	3714      	adds	r7, #20
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd90      	pop	{r4, r7, pc}

08008b34 <Paint_DrawPoint>:
    Color		:   Set color
    Dot_Pixel	:	point size
******************************************************************************/
void Paint_DrawPoint( UWORD Xpoint,       UWORD Ypoint, UWORD Color,
                      DOT_PIXEL Dot_Pixel,DOT_STYLE Dot_FillWay)
{
 8008b34:	b590      	push	{r4, r7, lr}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	4604      	mov	r4, r0
 8008b3c:	4608      	mov	r0, r1
 8008b3e:	4611      	mov	r1, r2
 8008b40:	461a      	mov	r2, r3
 8008b42:	4623      	mov	r3, r4
 8008b44:	80fb      	strh	r3, [r7, #6]
 8008b46:	4603      	mov	r3, r0
 8008b48:	80bb      	strh	r3, [r7, #4]
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	807b      	strh	r3, [r7, #2]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 8008b52:	4b44      	ldr	r3, [pc, #272]	; (8008c64 <Paint_DrawPoint+0x130>)
 8008b54:	889b      	ldrh	r3, [r3, #4]
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	88fa      	ldrh	r2, [r7, #6]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d805      	bhi.n	8008b6a <Paint_DrawPoint+0x36>
 8008b5e:	4b41      	ldr	r3, [pc, #260]	; (8008c64 <Paint_DrawPoint+0x130>)
 8008b60:	88db      	ldrh	r3, [r3, #6]
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	88ba      	ldrh	r2, [r7, #4]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d903      	bls.n	8008b72 <Paint_DrawPoint+0x3e>
    {
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 8008b6a:	483f      	ldr	r0, [pc, #252]	; (8008c68 <Paint_DrawPoint+0x134>)
 8008b6c:	f008 fccc 	bl	8011508 <puts>
        return;
 8008b70:	e074      	b.n	8008c5c <Paint_DrawPoint+0x128>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_FillWay == DOT_FILL_AROUND)
 8008b72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d144      	bne.n	8008c04 <Paint_DrawPoint+0xd0>
    {
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++)
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	81fb      	strh	r3, [r7, #14]
 8008b7e:	e039      	b.n	8008bf4 <Paint_DrawPoint+0xc0>
        {
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++)
 8008b80:	2300      	movs	r3, #0
 8008b82:	81bb      	strh	r3, [r7, #12]
 8008b84:	e029      	b.n	8008bda <Paint_DrawPoint+0xa6>
            {
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 8008b86:	88fa      	ldrh	r2, [r7, #6]
 8008b88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008b8c:	441a      	add	r2, r3
 8008b8e:	787b      	ldrb	r3, [r7, #1]
 8008b90:	1ad3      	subs	r3, r2, r3
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	db28      	blt.n	8008be8 <Paint_DrawPoint+0xb4>
 8008b96:	88ba      	ldrh	r2, [r7, #4]
 8008b98:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008b9c:	441a      	add	r2, r3
 8008b9e:	787b      	ldrb	r3, [r7, #1]
 8008ba0:	1ad3      	subs	r3, r2, r3
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	db20      	blt.n	8008be8 <Paint_DrawPoint+0xb4>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 8008ba6:	89fa      	ldrh	r2, [r7, #14]
 8008ba8:	88fb      	ldrh	r3, [r7, #6]
 8008baa:	4413      	add	r3, r2
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	787b      	ldrb	r3, [r7, #1]
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	1ad3      	subs	r3, r2, r3
 8008bb4:	b298      	uxth	r0, r3
 8008bb6:	89ba      	ldrh	r2, [r7, #12]
 8008bb8:	88bb      	ldrh	r3, [r7, #4]
 8008bba:	4413      	add	r3, r2
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	787b      	ldrb	r3, [r7, #1]
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	1ad3      	subs	r3, r2, r3
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	887a      	ldrh	r2, [r7, #2]
 8008bc8:	4619      	mov	r1, r3
 8008bca:	f7ff fec5 	bl	8008958 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++)
 8008bce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	81bb      	strh	r3, [r7, #12]
 8008bda:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008bde:	787b      	ldrb	r3, [r7, #1]
 8008be0:	005b      	lsls	r3, r3, #1
 8008be2:	3b01      	subs	r3, #1
 8008be4:	429a      	cmp	r2, r3
 8008be6:	dbce      	blt.n	8008b86 <Paint_DrawPoint+0x52>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++)
 8008be8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	3301      	adds	r3, #1
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	81fb      	strh	r3, [r7, #14]
 8008bf4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8008bf8:	787b      	ldrb	r3, [r7, #1]
 8008bfa:	005b      	lsls	r3, r3, #1
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	dbbe      	blt.n	8008b80 <Paint_DrawPoint+0x4c>
 8008c02:	e02b      	b.n	8008c5c <Paint_DrawPoint+0x128>
            }
        }
    }
    else
    {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++)
 8008c04:	2300      	movs	r3, #0
 8008c06:	81fb      	strh	r3, [r7, #14]
 8008c08:	e023      	b.n	8008c52 <Paint_DrawPoint+0x11e>
        {
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++)
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	81bb      	strh	r3, [r7, #12]
 8008c0e:	e015      	b.n	8008c3c <Paint_DrawPoint+0x108>
            {
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 8008c10:	89fa      	ldrh	r2, [r7, #14]
 8008c12:	88fb      	ldrh	r3, [r7, #6]
 8008c14:	4413      	add	r3, r2
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	b298      	uxth	r0, r3
 8008c1c:	89ba      	ldrh	r2, [r7, #12]
 8008c1e:	88bb      	ldrh	r3, [r7, #4]
 8008c20:	4413      	add	r3, r2
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	3b01      	subs	r3, #1
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	887a      	ldrh	r2, [r7, #2]
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	f7ff fe94 	bl	8008958 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++)
 8008c30:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	3301      	adds	r3, #1
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	81bb      	strh	r3, [r7, #12]
 8008c3c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008c40:	787b      	ldrb	r3, [r7, #1]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	dbe4      	blt.n	8008c10 <Paint_DrawPoint+0xdc>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++)
 8008c46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	81fb      	strh	r3, [r7, #14]
 8008c52:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8008c56:	787b      	ldrb	r3, [r7, #1]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	dbd6      	blt.n	8008c0a <Paint_DrawPoint+0xd6>
            }
        }
    }
}
 8008c5c:	3714      	adds	r7, #20
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd90      	pop	{r4, r7, pc}
 8008c62:	bf00      	nop
 8008c64:	2400ab40 	.word	0x2400ab40
 8008c68:	08015050 	.word	0x08015050

08008c6c <Paint_DrawLine>:
    Yend   ：End point Ypoint coordinate
    Color  ：The color of the line segment
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 8008c6c:	b590      	push	{r4, r7, lr}
 8008c6e:	b08d      	sub	sp, #52	; 0x34
 8008c70:	af02      	add	r7, sp, #8
 8008c72:	4604      	mov	r4, r0
 8008c74:	4608      	mov	r0, r1
 8008c76:	4611      	mov	r1, r2
 8008c78:	461a      	mov	r2, r3
 8008c7a:	4623      	mov	r3, r4
 8008c7c:	80fb      	strh	r3, [r7, #6]
 8008c7e:	4603      	mov	r3, r0
 8008c80:	80bb      	strh	r3, [r7, #4]
 8008c82:	460b      	mov	r3, r1
 8008c84:	807b      	strh	r3, [r7, #2]
 8008c86:	4613      	mov	r3, r2
 8008c88:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8008c8a:	4b4d      	ldr	r3, [pc, #308]	; (8008dc0 <Paint_DrawLine+0x154>)
 8008c8c:	889b      	ldrh	r3, [r3, #4]
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	88fa      	ldrh	r2, [r7, #6]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d811      	bhi.n	8008cba <Paint_DrawLine+0x4e>
 8008c96:	4b4a      	ldr	r3, [pc, #296]	; (8008dc0 <Paint_DrawLine+0x154>)
 8008c98:	88db      	ldrh	r3, [r3, #6]
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	88ba      	ldrh	r2, [r7, #4]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d80b      	bhi.n	8008cba <Paint_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 8008ca2:	4b47      	ldr	r3, [pc, #284]	; (8008dc0 <Paint_DrawLine+0x154>)
 8008ca4:	889b      	ldrh	r3, [r3, #4]
 8008ca6:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8008ca8:	887a      	ldrh	r2, [r7, #2]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d805      	bhi.n	8008cba <Paint_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 8008cae:	4b44      	ldr	r3, [pc, #272]	; (8008dc0 <Paint_DrawLine+0x154>)
 8008cb0:	88db      	ldrh	r3, [r3, #6]
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	883a      	ldrh	r2, [r7, #0]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d903      	bls.n	8008cc2 <Paint_DrawLine+0x56>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 8008cba:	4842      	ldr	r0, [pc, #264]	; (8008dc4 <Paint_DrawLine+0x158>)
 8008cbc:	f008 fc24 	bl	8011508 <puts>
        return;
 8008cc0:	e07b      	b.n	8008dba <Paint_DrawLine+0x14e>
    }

    UWORD Xpoint = Xstart;
 8008cc2:	88fb      	ldrh	r3, [r7, #6]
 8008cc4:	84fb      	strh	r3, [r7, #38]	; 0x26
    UWORD Ypoint = Ystart;
 8008cc6:	88bb      	ldrh	r3, [r7, #4]
 8008cc8:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8008cca:	887a      	ldrh	r2, [r7, #2]
 8008ccc:	88fb      	ldrh	r3, [r7, #6]
 8008cce:	1ad3      	subs	r3, r2, r3
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	bfb8      	it	lt
 8008cd4:	425b      	neglt	r3, r3
 8008cd6:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8008cd8:	883a      	ldrh	r2, [r7, #0]
 8008cda:	88bb      	ldrh	r3, [r7, #4]
 8008cdc:	1ad3      	subs	r3, r2, r3
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	bfb8      	it	lt
 8008ce2:	425b      	neglt	r3, r3
 8008ce4:	425b      	negs	r3, r3
 8008ce6:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 8008ce8:	88fa      	ldrh	r2, [r7, #6]
 8008cea:	887b      	ldrh	r3, [r7, #2]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d201      	bcs.n	8008cf4 <Paint_DrawLine+0x88>
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e001      	b.n	8008cf8 <Paint_DrawLine+0x8c>
 8008cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8008cf8:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 8008cfa:	88ba      	ldrh	r2, [r7, #4]
 8008cfc:	883b      	ldrh	r3, [r7, #0]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d201      	bcs.n	8008d06 <Paint_DrawLine+0x9a>
 8008d02:	2301      	movs	r3, #1
 8008d04:	e001      	b.n	8008d0a <Paint_DrawLine+0x9e>
 8008d06:	f04f 33ff 	mov.w	r3, #4294967295
 8008d0a:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 8008d0c:	69ba      	ldr	r2, [r7, #24]
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	4413      	add	r3, r2
 8008d12:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 8008d14:	2300      	movs	r3, #0
 8008d16:	77fb      	strb	r3, [r7, #31]

    for (;;)
    {
        Dotted_Len++;
 8008d18:	7ffb      	ldrb	r3, [r7, #31]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0)
 8008d1e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d118      	bne.n	8008d58 <Paint_DrawLine+0xec>
 8008d26:	7ffa      	ldrb	r2, [r7, #31]
 8008d28:	4b27      	ldr	r3, [pc, #156]	; (8008dc8 <Paint_DrawLine+0x15c>)
 8008d2a:	fba3 1302 	umull	r1, r3, r3, r2
 8008d2e:	0859      	lsrs	r1, r3, #1
 8008d30:	460b      	mov	r3, r1
 8008d32:	005b      	lsls	r3, r3, #1
 8008d34:	440b      	add	r3, r1
 8008d36:	1ad3      	subs	r3, r2, r3
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d10c      	bne.n	8008d58 <Paint_DrawLine+0xec>
        {
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 8008d3e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008d42:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8008d44:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8008d46:	2201      	movs	r2, #1
 8008d48:	9200      	str	r2, [sp, #0]
 8008d4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d4e:	f7ff fef1 	bl	8008b34 <Paint_DrawPoint>
            Dotted_Len = 0;
 8008d52:	2300      	movs	r3, #0
 8008d54:	77fb      	strb	r3, [r7, #31]
 8008d56:	e008      	b.n	8008d6a <Paint_DrawLine+0xfe>
        }
        else
        {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 8008d58:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008d5c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8008d5e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8008d60:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8008d62:	2401      	movs	r4, #1
 8008d64:	9400      	str	r4, [sp, #0]
 8008d66:	f7ff fee5 	bl	8008b34 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy)
 8008d6a:	6a3b      	ldr	r3, [r7, #32]
 8008d6c:	005b      	lsls	r3, r3, #1
 8008d6e:	697a      	ldr	r2, [r7, #20]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	dc0c      	bgt.n	8008d8e <Paint_DrawLine+0x122>
        {
            if (Xpoint == Xend)
 8008d74:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008d76:	887b      	ldrh	r3, [r7, #2]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d01b      	beq.n	8008db4 <Paint_DrawLine+0x148>
                break;
            Esp += dy;
 8008d7c:	6a3a      	ldr	r2, [r7, #32]
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	4413      	add	r3, r2
 8008d82:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	b29a      	uxth	r2, r3
 8008d88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d8a:	4413      	add	r3, r2
 8008d8c:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx)
 8008d8e:	6a3b      	ldr	r3, [r7, #32]
 8008d90:	005b      	lsls	r3, r3, #1
 8008d92:	69ba      	ldr	r2, [r7, #24]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	dbbf      	blt.n	8008d18 <Paint_DrawLine+0xac>
        {
            if (Ypoint == Yend)
 8008d98:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008d9a:	883b      	ldrh	r3, [r7, #0]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d00b      	beq.n	8008db8 <Paint_DrawLine+0x14c>
                break;
            Esp += dx;
 8008da0:	6a3a      	ldr	r2, [r7, #32]
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	4413      	add	r3, r2
 8008da6:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	b29a      	uxth	r2, r3
 8008dac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dae:	4413      	add	r3, r2
 8008db0:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 8008db2:	e7b1      	b.n	8008d18 <Paint_DrawLine+0xac>
                break;
 8008db4:	bf00      	nop
 8008db6:	e000      	b.n	8008dba <Paint_DrawLine+0x14e>
                break;
 8008db8:	bf00      	nop
        }
    }
}
 8008dba:	372c      	adds	r7, #44	; 0x2c
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd90      	pop	{r4, r7, pc}
 8008dc0:	2400ab40 	.word	0x2400ab40
 8008dc4:	08015090 	.word	0x08015090
 8008dc8:	aaaaaaab 	.word	0xaaaaaaab

08008dcc <Paint_DrawRectangle>:
    Color  ：The color of the Rectangular segment
    Filled : Whether it is filled--- 1 solid 0：empty
******************************************************************************/
void Paint_DrawRectangle( UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                          UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Filled )
{
 8008dcc:	b590      	push	{r4, r7, lr}
 8008dce:	b089      	sub	sp, #36	; 0x24
 8008dd0:	af04      	add	r7, sp, #16
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	4608      	mov	r0, r1
 8008dd6:	4611      	mov	r1, r2
 8008dd8:	461a      	mov	r2, r3
 8008dda:	4623      	mov	r3, r4
 8008ddc:	80fb      	strh	r3, [r7, #6]
 8008dde:	4603      	mov	r3, r0
 8008de0:	80bb      	strh	r3, [r7, #4]
 8008de2:	460b      	mov	r3, r1
 8008de4:	807b      	strh	r3, [r7, #2]
 8008de6:	4613      	mov	r3, r2
 8008de8:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8008dea:	4b3a      	ldr	r3, [pc, #232]	; (8008ed4 <Paint_DrawRectangle+0x108>)
 8008dec:	889b      	ldrh	r3, [r3, #4]
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	88fa      	ldrh	r2, [r7, #6]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d811      	bhi.n	8008e1a <Paint_DrawRectangle+0x4e>
 8008df6:	4b37      	ldr	r3, [pc, #220]	; (8008ed4 <Paint_DrawRectangle+0x108>)
 8008df8:	88db      	ldrh	r3, [r3, #6]
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	88ba      	ldrh	r2, [r7, #4]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d80b      	bhi.n	8008e1a <Paint_DrawRectangle+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 8008e02:	4b34      	ldr	r3, [pc, #208]	; (8008ed4 <Paint_DrawRectangle+0x108>)
 8008e04:	889b      	ldrh	r3, [r3, #4]
 8008e06:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8008e08:	887a      	ldrh	r2, [r7, #2]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d805      	bhi.n	8008e1a <Paint_DrawRectangle+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 8008e0e:	4b31      	ldr	r3, [pc, #196]	; (8008ed4 <Paint_DrawRectangle+0x108>)
 8008e10:	88db      	ldrh	r3, [r3, #6]
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	883a      	ldrh	r2, [r7, #0]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d903      	bls.n	8008e22 <Paint_DrawRectangle+0x56>
        Debug("Input exceeds the normal display range\r\n");
 8008e1a:	482f      	ldr	r0, [pc, #188]	; (8008ed8 <Paint_DrawRectangle+0x10c>)
 8008e1c:	f008 fb74 	bl	8011508 <puts>
        return;
 8008e20:	e054      	b.n	8008ecc <Paint_DrawRectangle+0x100>
    }

    if (Filled )
 8008e22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d018      	beq.n	8008e5c <Paint_DrawRectangle+0x90>
    {
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++)
 8008e2a:	88bb      	ldrh	r3, [r7, #4]
 8008e2c:	81fb      	strh	r3, [r7, #14]
 8008e2e:	e010      	b.n	8008e52 <Paint_DrawRectangle+0x86>
        {
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color ,Line_width, LINE_STYLE_SOLID);
 8008e30:	89fc      	ldrh	r4, [r7, #14]
 8008e32:	887a      	ldrh	r2, [r7, #2]
 8008e34:	89f9      	ldrh	r1, [r7, #14]
 8008e36:	88f8      	ldrh	r0, [r7, #6]
 8008e38:	2300      	movs	r3, #0
 8008e3a:	9302      	str	r3, [sp, #8]
 8008e3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e40:	9301      	str	r3, [sp, #4]
 8008e42:	8c3b      	ldrh	r3, [r7, #32]
 8008e44:	9300      	str	r3, [sp, #0]
 8008e46:	4623      	mov	r3, r4
 8008e48:	f7ff ff10 	bl	8008c6c <Paint_DrawLine>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++)
 8008e4c:	89fb      	ldrh	r3, [r7, #14]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	81fb      	strh	r3, [r7, #14]
 8008e52:	89fa      	ldrh	r2, [r7, #14]
 8008e54:	883b      	ldrh	r3, [r7, #0]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d3ea      	bcc.n	8008e30 <Paint_DrawRectangle+0x64>
 8008e5a:	e037      	b.n	8008ecc <Paint_DrawRectangle+0x100>
        }
    }
    else
    {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color ,Line_width, LINE_STYLE_SOLID);
 8008e5c:	88bc      	ldrh	r4, [r7, #4]
 8008e5e:	887a      	ldrh	r2, [r7, #2]
 8008e60:	88b9      	ldrh	r1, [r7, #4]
 8008e62:	88f8      	ldrh	r0, [r7, #6]
 8008e64:	2300      	movs	r3, #0
 8008e66:	9302      	str	r3, [sp, #8]
 8008e68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e6c:	9301      	str	r3, [sp, #4]
 8008e6e:	8c3b      	ldrh	r3, [r7, #32]
 8008e70:	9300      	str	r3, [sp, #0]
 8008e72:	4623      	mov	r3, r4
 8008e74:	f7ff fefa 	bl	8008c6c <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color ,Line_width, LINE_STYLE_SOLID);
 8008e78:	883c      	ldrh	r4, [r7, #0]
 8008e7a:	88fa      	ldrh	r2, [r7, #6]
 8008e7c:	88b9      	ldrh	r1, [r7, #4]
 8008e7e:	88f8      	ldrh	r0, [r7, #6]
 8008e80:	2300      	movs	r3, #0
 8008e82:	9302      	str	r3, [sp, #8]
 8008e84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e88:	9301      	str	r3, [sp, #4]
 8008e8a:	8c3b      	ldrh	r3, [r7, #32]
 8008e8c:	9300      	str	r3, [sp, #0]
 8008e8e:	4623      	mov	r3, r4
 8008e90:	f7ff feec 	bl	8008c6c <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color ,Line_width, LINE_STYLE_SOLID);
 8008e94:	88bc      	ldrh	r4, [r7, #4]
 8008e96:	887a      	ldrh	r2, [r7, #2]
 8008e98:	8839      	ldrh	r1, [r7, #0]
 8008e9a:	8878      	ldrh	r0, [r7, #2]
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	9302      	str	r3, [sp, #8]
 8008ea0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008ea4:	9301      	str	r3, [sp, #4]
 8008ea6:	8c3b      	ldrh	r3, [r7, #32]
 8008ea8:	9300      	str	r3, [sp, #0]
 8008eaa:	4623      	mov	r3, r4
 8008eac:	f7ff fede 	bl	8008c6c <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color ,Line_width, LINE_STYLE_SOLID);
 8008eb0:	883c      	ldrh	r4, [r7, #0]
 8008eb2:	88fa      	ldrh	r2, [r7, #6]
 8008eb4:	8839      	ldrh	r1, [r7, #0]
 8008eb6:	8878      	ldrh	r0, [r7, #2]
 8008eb8:	2300      	movs	r3, #0
 8008eba:	9302      	str	r3, [sp, #8]
 8008ebc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008ec0:	9301      	str	r3, [sp, #4]
 8008ec2:	8c3b      	ldrh	r3, [r7, #32]
 8008ec4:	9300      	str	r3, [sp, #0]
 8008ec6:	4623      	mov	r3, r4
 8008ec8:	f7ff fed0 	bl	8008c6c <Paint_DrawLine>
    }
}
 8008ecc:	3714      	adds	r7, #20
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd90      	pop	{r4, r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	2400ab40 	.word	0x2400ab40
 8008ed8:	080150d0 	.word	0x080150d0

08008edc <Paint_DrawCircle>:
    Color     ：The color of the ：circle segment
    Filled    : Whether it is filled: 1 filling 0：Do not
******************************************************************************/
void Paint_DrawCircle(  UWORD X_Center, UWORD Y_Center, UWORD Radius, 
                        UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill )
{
 8008edc:	b590      	push	{r4, r7, lr}
 8008ede:	b087      	sub	sp, #28
 8008ee0:	af02      	add	r7, sp, #8
 8008ee2:	4604      	mov	r4, r0
 8008ee4:	4608      	mov	r0, r1
 8008ee6:	4611      	mov	r1, r2
 8008ee8:	461a      	mov	r2, r3
 8008eea:	4623      	mov	r3, r4
 8008eec:	80fb      	strh	r3, [r7, #6]
 8008eee:	4603      	mov	r3, r0
 8008ef0:	80bb      	strh	r3, [r7, #4]
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	807b      	strh	r3, [r7, #2]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	803b      	strh	r3, [r7, #0]
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 8008efa:	4b68      	ldr	r3, [pc, #416]	; (800909c <Paint_DrawCircle+0x1c0>)
 8008efc:	889b      	ldrh	r3, [r3, #4]
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	88fa      	ldrh	r2, [r7, #6]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d805      	bhi.n	8008f12 <Paint_DrawCircle+0x36>
 8008f06:	4b65      	ldr	r3, [pc, #404]	; (800909c <Paint_DrawCircle+0x1c0>)
 8008f08:	88db      	ldrh	r3, [r3, #6]
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	88ba      	ldrh	r2, [r7, #4]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d303      	bcc.n	8008f1a <Paint_DrawCircle+0x3e>
        Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 8008f12:	4863      	ldr	r0, [pc, #396]	; (80090a0 <Paint_DrawCircle+0x1c4>)
 8008f14:	f008 faf8 	bl	8011508 <puts>
        return;
 8008f18:	e16b      	b.n	80091f2 <Paint_DrawCircle+0x316>
    }

    //Draw a circle from(0, R) as a starting point
    int16_t XCurrent, YCurrent;
    XCurrent = 0;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	81fb      	strh	r3, [r7, #14]
    YCurrent = Radius;
 8008f1e:	887b      	ldrh	r3, [r7, #2]
 8008f20:	81bb      	strh	r3, [r7, #12]

    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );
 8008f22:	887b      	ldrh	r3, [r7, #2]
 8008f24:	005b      	lsls	r3, r3, #1
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	f1c3 0303 	rsb	r3, r3, #3
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	817b      	strh	r3, [r7, #10]

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
 8008f30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	f040 8155 	bne.w	80091e4 <Paint_DrawCircle+0x308>
        while (XCurrent <= YCurrent ) { //Realistic circles
 8008f3a:	e0a6      	b.n	800908a <Paint_DrawCircle+0x1ae>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 8008f3c:	89fb      	ldrh	r3, [r7, #14]
 8008f3e:	813b      	strh	r3, [r7, #8]
 8008f40:	e075      	b.n	800902e <Paint_DrawCircle+0x152>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//1
 8008f42:	89fa      	ldrh	r2, [r7, #14]
 8008f44:	88fb      	ldrh	r3, [r7, #6]
 8008f46:	4413      	add	r3, r2
 8008f48:	b298      	uxth	r0, r3
 8008f4a:	893a      	ldrh	r2, [r7, #8]
 8008f4c:	88bb      	ldrh	r3, [r7, #4]
 8008f4e:	4413      	add	r3, r2
 8008f50:	b299      	uxth	r1, r3
 8008f52:	883a      	ldrh	r2, [r7, #0]
 8008f54:	2301      	movs	r3, #1
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	2301      	movs	r3, #1
 8008f5a:	f7ff fdeb 	bl	8008b34 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//2
 8008f5e:	89fb      	ldrh	r3, [r7, #14]
 8008f60:	88fa      	ldrh	r2, [r7, #6]
 8008f62:	1ad3      	subs	r3, r2, r3
 8008f64:	b298      	uxth	r0, r3
 8008f66:	893a      	ldrh	r2, [r7, #8]
 8008f68:	88bb      	ldrh	r3, [r7, #4]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	b299      	uxth	r1, r3
 8008f6e:	883a      	ldrh	r2, [r7, #0]
 8008f70:	2301      	movs	r3, #1
 8008f72:	9300      	str	r3, [sp, #0]
 8008f74:	2301      	movs	r3, #1
 8008f76:	f7ff fddd 	bl	8008b34 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//3
 8008f7a:	893b      	ldrh	r3, [r7, #8]
 8008f7c:	88fa      	ldrh	r2, [r7, #6]
 8008f7e:	1ad3      	subs	r3, r2, r3
 8008f80:	b298      	uxth	r0, r3
 8008f82:	89fa      	ldrh	r2, [r7, #14]
 8008f84:	88bb      	ldrh	r3, [r7, #4]
 8008f86:	4413      	add	r3, r2
 8008f88:	b299      	uxth	r1, r3
 8008f8a:	883a      	ldrh	r2, [r7, #0]
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	9300      	str	r3, [sp, #0]
 8008f90:	2301      	movs	r3, #1
 8008f92:	f7ff fdcf 	bl	8008b34 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//4
 8008f96:	893b      	ldrh	r3, [r7, #8]
 8008f98:	88fa      	ldrh	r2, [r7, #6]
 8008f9a:	1ad3      	subs	r3, r2, r3
 8008f9c:	b298      	uxth	r0, r3
 8008f9e:	89fb      	ldrh	r3, [r7, #14]
 8008fa0:	88ba      	ldrh	r2, [r7, #4]
 8008fa2:	1ad3      	subs	r3, r2, r3
 8008fa4:	b299      	uxth	r1, r3
 8008fa6:	883a      	ldrh	r2, [r7, #0]
 8008fa8:	2301      	movs	r3, #1
 8008faa:	9300      	str	r3, [sp, #0]
 8008fac:	2301      	movs	r3, #1
 8008fae:	f7ff fdc1 	bl	8008b34 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
 8008fb2:	89fb      	ldrh	r3, [r7, #14]
 8008fb4:	88fa      	ldrh	r2, [r7, #6]
 8008fb6:	1ad3      	subs	r3, r2, r3
 8008fb8:	b298      	uxth	r0, r3
 8008fba:	893b      	ldrh	r3, [r7, #8]
 8008fbc:	88ba      	ldrh	r2, [r7, #4]
 8008fbe:	1ad3      	subs	r3, r2, r3
 8008fc0:	b299      	uxth	r1, r3
 8008fc2:	883a      	ldrh	r2, [r7, #0]
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	2301      	movs	r3, #1
 8008fca:	f7ff fdb3 	bl	8008b34 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
 8008fce:	89fa      	ldrh	r2, [r7, #14]
 8008fd0:	88fb      	ldrh	r3, [r7, #6]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	b298      	uxth	r0, r3
 8008fd6:	893b      	ldrh	r3, [r7, #8]
 8008fd8:	88ba      	ldrh	r2, [r7, #4]
 8008fda:	1ad3      	subs	r3, r2, r3
 8008fdc:	b299      	uxth	r1, r3
 8008fde:	883a      	ldrh	r2, [r7, #0]
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	9300      	str	r3, [sp, #0]
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	f7ff fda5 	bl	8008b34 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
 8008fea:	893a      	ldrh	r2, [r7, #8]
 8008fec:	88fb      	ldrh	r3, [r7, #6]
 8008fee:	4413      	add	r3, r2
 8008ff0:	b298      	uxth	r0, r3
 8008ff2:	89fb      	ldrh	r3, [r7, #14]
 8008ff4:	88ba      	ldrh	r2, [r7, #4]
 8008ff6:	1ad3      	subs	r3, r2, r3
 8008ff8:	b299      	uxth	r1, r3
 8008ffa:	883a      	ldrh	r2, [r7, #0]
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	9300      	str	r3, [sp, #0]
 8009000:	2301      	movs	r3, #1
 8009002:	f7ff fd97 	bl	8008b34 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 8009006:	893a      	ldrh	r2, [r7, #8]
 8009008:	88fb      	ldrh	r3, [r7, #6]
 800900a:	4413      	add	r3, r2
 800900c:	b298      	uxth	r0, r3
 800900e:	89fa      	ldrh	r2, [r7, #14]
 8009010:	88bb      	ldrh	r3, [r7, #4]
 8009012:	4413      	add	r3, r2
 8009014:	b299      	uxth	r1, r3
 8009016:	883a      	ldrh	r2, [r7, #0]
 8009018:	2301      	movs	r3, #1
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	2301      	movs	r3, #1
 800901e:	f7ff fd89 	bl	8008b34 <Paint_DrawPoint>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 8009022:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009026:	b29b      	uxth	r3, r3
 8009028:	3301      	adds	r3, #1
 800902a:	b29b      	uxth	r3, r3
 800902c:	813b      	strh	r3, [r7, #8]
 800902e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8009032:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009036:	429a      	cmp	r2, r3
 8009038:	dd83      	ble.n	8008f42 <Paint_DrawCircle+0x66>
            }
            if (Esp < 0 )
 800903a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800903e:	2b00      	cmp	r3, #0
 8009040:	da09      	bge.n	8009056 <Paint_DrawCircle+0x17a>
                Esp += 4 * XCurrent + 6;
 8009042:	89fb      	ldrh	r3, [r7, #14]
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	b29a      	uxth	r2, r3
 8009048:	897b      	ldrh	r3, [r7, #10]
 800904a:	4413      	add	r3, r2
 800904c:	b29b      	uxth	r3, r3
 800904e:	3306      	adds	r3, #6
 8009050:	b29b      	uxth	r3, r3
 8009052:	817b      	strh	r3, [r7, #10]
 8009054:	e013      	b.n	800907e <Paint_DrawCircle+0x1a2>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 8009056:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800905a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	b29b      	uxth	r3, r3
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	b29a      	uxth	r2, r3
 8009066:	897b      	ldrh	r3, [r7, #10]
 8009068:	4413      	add	r3, r2
 800906a:	b29b      	uxth	r3, r3
 800906c:	330a      	adds	r3, #10
 800906e:	b29b      	uxth	r3, r3
 8009070:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 8009072:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009076:	b29b      	uxth	r3, r3
 8009078:	3b01      	subs	r3, #1
 800907a:	b29b      	uxth	r3, r3
 800907c:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 800907e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009082:	b29b      	uxth	r3, r3
 8009084:	3301      	adds	r3, #1
 8009086:	b29b      	uxth	r3, r3
 8009088:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) { //Realistic circles
 800908a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800908e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009092:	429a      	cmp	r2, r3
 8009094:	f77f af52 	ble.w	8008f3c <Paint_DrawCircle+0x60>
 8009098:	e0ab      	b.n	80091f2 <Paint_DrawCircle+0x316>
 800909a:	bf00      	nop
 800909c:	2400ab40 	.word	0x2400ab40
 80090a0:	08015100 	.word	0x08015100
        }
    } else { //Draw a hollow circle
        while (XCurrent <= YCurrent ) {
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
 80090a4:	89fa      	ldrh	r2, [r7, #14]
 80090a6:	88fb      	ldrh	r3, [r7, #6]
 80090a8:	4413      	add	r3, r2
 80090aa:	b298      	uxth	r0, r3
 80090ac:	89ba      	ldrh	r2, [r7, #12]
 80090ae:	88bb      	ldrh	r3, [r7, #4]
 80090b0:	4413      	add	r3, r2
 80090b2:	b299      	uxth	r1, r3
 80090b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80090b8:	883a      	ldrh	r2, [r7, #0]
 80090ba:	2401      	movs	r4, #1
 80090bc:	9400      	str	r4, [sp, #0]
 80090be:	f7ff fd39 	bl	8008b34 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//2
 80090c2:	89fb      	ldrh	r3, [r7, #14]
 80090c4:	88fa      	ldrh	r2, [r7, #6]
 80090c6:	1ad3      	subs	r3, r2, r3
 80090c8:	b298      	uxth	r0, r3
 80090ca:	89ba      	ldrh	r2, [r7, #12]
 80090cc:	88bb      	ldrh	r3, [r7, #4]
 80090ce:	4413      	add	r3, r2
 80090d0:	b299      	uxth	r1, r3
 80090d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80090d6:	883a      	ldrh	r2, [r7, #0]
 80090d8:	2401      	movs	r4, #1
 80090da:	9400      	str	r4, [sp, #0]
 80090dc:	f7ff fd2a 	bl	8008b34 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//3
 80090e0:	89bb      	ldrh	r3, [r7, #12]
 80090e2:	88fa      	ldrh	r2, [r7, #6]
 80090e4:	1ad3      	subs	r3, r2, r3
 80090e6:	b298      	uxth	r0, r3
 80090e8:	89fa      	ldrh	r2, [r7, #14]
 80090ea:	88bb      	ldrh	r3, [r7, #4]
 80090ec:	4413      	add	r3, r2
 80090ee:	b299      	uxth	r1, r3
 80090f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80090f4:	883a      	ldrh	r2, [r7, #0]
 80090f6:	2401      	movs	r4, #1
 80090f8:	9400      	str	r4, [sp, #0]
 80090fa:	f7ff fd1b 	bl	8008b34 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//4
 80090fe:	89bb      	ldrh	r3, [r7, #12]
 8009100:	88fa      	ldrh	r2, [r7, #6]
 8009102:	1ad3      	subs	r3, r2, r3
 8009104:	b298      	uxth	r0, r3
 8009106:	89fb      	ldrh	r3, [r7, #14]
 8009108:	88ba      	ldrh	r2, [r7, #4]
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	b299      	uxth	r1, r3
 800910e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009112:	883a      	ldrh	r2, [r7, #0]
 8009114:	2401      	movs	r4, #1
 8009116:	9400      	str	r4, [sp, #0]
 8009118:	f7ff fd0c 	bl	8008b34 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//5
 800911c:	89fb      	ldrh	r3, [r7, #14]
 800911e:	88fa      	ldrh	r2, [r7, #6]
 8009120:	1ad3      	subs	r3, r2, r3
 8009122:	b298      	uxth	r0, r3
 8009124:	89bb      	ldrh	r3, [r7, #12]
 8009126:	88ba      	ldrh	r2, [r7, #4]
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	b299      	uxth	r1, r3
 800912c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009130:	883a      	ldrh	r2, [r7, #0]
 8009132:	2401      	movs	r4, #1
 8009134:	9400      	str	r4, [sp, #0]
 8009136:	f7ff fcfd 	bl	8008b34 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//6
 800913a:	89fa      	ldrh	r2, [r7, #14]
 800913c:	88fb      	ldrh	r3, [r7, #6]
 800913e:	4413      	add	r3, r2
 8009140:	b298      	uxth	r0, r3
 8009142:	89bb      	ldrh	r3, [r7, #12]
 8009144:	88ba      	ldrh	r2, [r7, #4]
 8009146:	1ad3      	subs	r3, r2, r3
 8009148:	b299      	uxth	r1, r3
 800914a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800914e:	883a      	ldrh	r2, [r7, #0]
 8009150:	2401      	movs	r4, #1
 8009152:	9400      	str	r4, [sp, #0]
 8009154:	f7ff fcee 	bl	8008b34 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//7
 8009158:	89ba      	ldrh	r2, [r7, #12]
 800915a:	88fb      	ldrh	r3, [r7, #6]
 800915c:	4413      	add	r3, r2
 800915e:	b298      	uxth	r0, r3
 8009160:	89fb      	ldrh	r3, [r7, #14]
 8009162:	88ba      	ldrh	r2, [r7, #4]
 8009164:	1ad3      	subs	r3, r2, r3
 8009166:	b299      	uxth	r1, r3
 8009168:	f897 3020 	ldrb.w	r3, [r7, #32]
 800916c:	883a      	ldrh	r2, [r7, #0]
 800916e:	2401      	movs	r4, #1
 8009170:	9400      	str	r4, [sp, #0]
 8009172:	f7ff fcdf 	bl	8008b34 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//0
 8009176:	89ba      	ldrh	r2, [r7, #12]
 8009178:	88fb      	ldrh	r3, [r7, #6]
 800917a:	4413      	add	r3, r2
 800917c:	b298      	uxth	r0, r3
 800917e:	89fa      	ldrh	r2, [r7, #14]
 8009180:	88bb      	ldrh	r3, [r7, #4]
 8009182:	4413      	add	r3, r2
 8009184:	b299      	uxth	r1, r3
 8009186:	f897 3020 	ldrb.w	r3, [r7, #32]
 800918a:	883a      	ldrh	r2, [r7, #0]
 800918c:	2401      	movs	r4, #1
 800918e:	9400      	str	r4, [sp, #0]
 8009190:	f7ff fcd0 	bl	8008b34 <Paint_DrawPoint>

            if (Esp < 0 )
 8009194:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009198:	2b00      	cmp	r3, #0
 800919a:	da09      	bge.n	80091b0 <Paint_DrawCircle+0x2d4>
                Esp += 4 * XCurrent + 6;
 800919c:	89fb      	ldrh	r3, [r7, #14]
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	b29a      	uxth	r2, r3
 80091a2:	897b      	ldrh	r3, [r7, #10]
 80091a4:	4413      	add	r3, r2
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	3306      	adds	r3, #6
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	817b      	strh	r3, [r7, #10]
 80091ae:	e013      	b.n	80091d8 <Paint_DrawCircle+0x2fc>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 80091b0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80091b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80091b8:	1ad3      	subs	r3, r2, r3
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	b29a      	uxth	r2, r3
 80091c0:	897b      	ldrh	r3, [r7, #10]
 80091c2:	4413      	add	r3, r2
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	330a      	adds	r3, #10
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 80091cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	3b01      	subs	r3, #1
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 80091d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80091dc:	b29b      	uxth	r3, r3
 80091de:	3301      	adds	r3, #1
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) {
 80091e4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80091e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	f77f af59 	ble.w	80090a4 <Paint_DrawCircle+0x1c8>
        }
    }
}
 80091f2:	3714      	adds	r7, #20
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd90      	pop	{r4, r7, pc}

080091f8 <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b088      	sub	sp, #32
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	607b      	str	r3, [r7, #4]
 8009200:	4603      	mov	r3, r0
 8009202:	81fb      	strh	r3, [r7, #14]
 8009204:	460b      	mov	r3, r1
 8009206:	81bb      	strh	r3, [r7, #12]
 8009208:	4613      	mov	r3, r2
 800920a:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800920c:	4b3f      	ldr	r3, [pc, #252]	; (800930c <Paint_DrawChar+0x114>)
 800920e:	889b      	ldrh	r3, [r3, #4]
 8009210:	b29b      	uxth	r3, r3
 8009212:	89fa      	ldrh	r2, [r7, #14]
 8009214:	429a      	cmp	r2, r3
 8009216:	d805      	bhi.n	8009224 <Paint_DrawChar+0x2c>
 8009218:	4b3c      	ldr	r3, [pc, #240]	; (800930c <Paint_DrawChar+0x114>)
 800921a:	88db      	ldrh	r3, [r3, #6]
 800921c:	b29b      	uxth	r3, r3
 800921e:	89ba      	ldrh	r2, [r7, #12]
 8009220:	429a      	cmp	r2, r3
 8009222:	d903      	bls.n	800922c <Paint_DrawChar+0x34>
    {
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8009224:	483a      	ldr	r0, [pc, #232]	; (8009310 <Paint_DrawChar+0x118>)
 8009226:	f008 f96f 	bl	8011508 <puts>
        return;
 800922a:	e06b      	b.n	8009304 <Paint_DrawChar+0x10c>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 800922c:	7afb      	ldrb	r3, [r7, #11]
 800922e:	3b20      	subs	r3, #32
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	88d2      	ldrh	r2, [r2, #6]
 8009234:	fb02 f303 	mul.w	r3, r2, r3
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	8892      	ldrh	r2, [r2, #4]
 800923c:	08d2      	lsrs	r2, r2, #3
 800923e:	b292      	uxth	r2, r2
 8009240:	4611      	mov	r1, r2
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	8892      	ldrh	r2, [r2, #4]
 8009246:	f002 0207 	and.w	r2, r2, #7
 800924a:	b292      	uxth	r2, r2
 800924c:	2a00      	cmp	r2, #0
 800924e:	bf14      	ite	ne
 8009250:	2201      	movne	r2, #1
 8009252:	2200      	moveq	r2, #0
 8009254:	b2d2      	uxtb	r2, r2
 8009256:	440a      	add	r2, r1
 8009258:	fb02 f303 	mul.w	r3, r2, r3
 800925c:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	4413      	add	r3, r2
 8009266:	61fb      	str	r3, [r7, #28]

    for (Page = 0; Page < Font->Height; Page ++ )
 8009268:	2300      	movs	r3, #0
 800926a:	837b      	strh	r3, [r7, #26]
 800926c:	e045      	b.n	80092fa <Paint_DrawChar+0x102>
    {
        for (Column = 0; Column < Font->Width; Column ++ )
 800926e:	2300      	movs	r3, #0
 8009270:	833b      	strh	r3, [r7, #24]
 8009272:	e030      	b.n	80092d6 <Paint_DrawChar+0xde>
                }
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            }
            else
            {
                if (*ptr & (0x80 >> (Column % 8)))
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	4619      	mov	r1, r3
 800927a:	8b3b      	ldrh	r3, [r7, #24]
 800927c:	f003 0307 	and.w	r3, r3, #7
 8009280:	2280      	movs	r2, #128	; 0x80
 8009282:	fa42 f303 	asr.w	r3, r2, r3
 8009286:	400b      	ands	r3, r1
 8009288:	2b00      	cmp	r3, #0
 800928a:	d00c      	beq.n	80092a6 <Paint_DrawChar+0xae>
                {

//                    if (!renderCompleteFrame)
//                    {
                    	Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800928c:	89fa      	ldrh	r2, [r7, #14]
 800928e:	8b3b      	ldrh	r3, [r7, #24]
 8009290:	4413      	add	r3, r2
 8009292:	b298      	uxth	r0, r3
 8009294:	89ba      	ldrh	r2, [r7, #12]
 8009296:	8b7b      	ldrh	r3, [r7, #26]
 8009298:	4413      	add	r3, r2
 800929a:	b29b      	uxth	r3, r3
 800929c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800929e:	4619      	mov	r1, r3
 80092a0:	f7ff fb5a 	bl	8008958 <Paint_SetPixel>
 80092a4:	e00b      	b.n	80092be <Paint_DrawChar+0xc6>
                }
                else
                {
//                	if (!renderCompleteFrame)
//                	{
                		Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 80092a6:	89fa      	ldrh	r2, [r7, #14]
 80092a8:	8b3b      	ldrh	r3, [r7, #24]
 80092aa:	4413      	add	r3, r2
 80092ac:	b298      	uxth	r0, r3
 80092ae:	89ba      	ldrh	r2, [r7, #12]
 80092b0:	8b7b      	ldrh	r3, [r7, #26]
 80092b2:	4413      	add	r3, r2
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80092b8:	4619      	mov	r1, r3
 80092ba:	f7ff fb4d 	bl	8008958 <Paint_SetPixel>
//                	}
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 80092be:	8b3b      	ldrh	r3, [r7, #24]
 80092c0:	f003 0307 	and.w	r3, r3, #7
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	2b07      	cmp	r3, #7
 80092c8:	d102      	bne.n	80092d0 <Paint_DrawChar+0xd8>
            {
                ptr++;
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	3301      	adds	r3, #1
 80092ce:	61fb      	str	r3, [r7, #28]
        for (Column = 0; Column < Font->Width; Column ++ )
 80092d0:	8b3b      	ldrh	r3, [r7, #24]
 80092d2:	3301      	adds	r3, #1
 80092d4:	833b      	strh	r3, [r7, #24]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	889b      	ldrh	r3, [r3, #4]
 80092da:	8b3a      	ldrh	r2, [r7, #24]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d3c9      	bcc.n	8009274 <Paint_DrawChar+0x7c>
            }
        }// Write a line
        if (Font->Width % 8 != 0)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	889b      	ldrh	r3, [r3, #4]
 80092e4:	f003 0307 	and.w	r3, r3, #7
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d002      	beq.n	80092f4 <Paint_DrawChar+0xfc>
        {
            ptr++;
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	3301      	adds	r3, #1
 80092f2:	61fb      	str	r3, [r7, #28]
    for (Page = 0; Page < Font->Height; Page ++ )
 80092f4:	8b7b      	ldrh	r3, [r7, #26]
 80092f6:	3301      	adds	r3, #1
 80092f8:	837b      	strh	r3, [r7, #26]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	88db      	ldrh	r3, [r3, #6]
 80092fe:	8b7a      	ldrh	r2, [r7, #26]
 8009300:	429a      	cmp	r2, r3
 8009302:	d3b4      	bcc.n	800926e <Paint_DrawChar+0x76>
        }
    }// Write all
}
 8009304:	3720      	adds	r7, #32
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	2400ab40 	.word	0x2400ab40
 8009310:	08015144 	.word	0x08015144

08009314 <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b088      	sub	sp, #32
 8009318:	af02      	add	r7, sp, #8
 800931a:	60ba      	str	r2, [r7, #8]
 800931c:	607b      	str	r3, [r7, #4]
 800931e:	4603      	mov	r3, r0
 8009320:	81fb      	strh	r3, [r7, #14]
 8009322:	460b      	mov	r3, r1
 8009324:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 8009326:	89fb      	ldrh	r3, [r7, #14]
 8009328:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 800932a:	89bb      	ldrh	r3, [r7, #12]
 800932c:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 800932e:	4b23      	ldr	r3, [pc, #140]	; (80093bc <Paint_DrawString_EN+0xa8>)
 8009330:	889b      	ldrh	r3, [r3, #4]
 8009332:	b29b      	uxth	r3, r3
 8009334:	89fa      	ldrh	r2, [r7, #14]
 8009336:	429a      	cmp	r2, r3
 8009338:	d805      	bhi.n	8009346 <Paint_DrawString_EN+0x32>
 800933a:	4b20      	ldr	r3, [pc, #128]	; (80093bc <Paint_DrawString_EN+0xa8>)
 800933c:	88db      	ldrh	r3, [r3, #6]
 800933e:	b29b      	uxth	r3, r3
 8009340:	89ba      	ldrh	r2, [r7, #12]
 8009342:	429a      	cmp	r2, r3
 8009344:	d933      	bls.n	80093ae <Paint_DrawString_EN+0x9a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8009346:	481e      	ldr	r0, [pc, #120]	; (80093c0 <Paint_DrawString_EN+0xac>)
 8009348:	f008 f8de 	bl	8011508 <puts>
        return;
 800934c:	e033      	b.n	80093b6 <Paint_DrawString_EN+0xa2>
    }

    while (* pString != '\0')
    {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width )
 800934e:	8afb      	ldrh	r3, [r7, #22]
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	8892      	ldrh	r2, [r2, #4]
 8009354:	4413      	add	r3, r2
 8009356:	4a19      	ldr	r2, [pc, #100]	; (80093bc <Paint_DrawString_EN+0xa8>)
 8009358:	8892      	ldrh	r2, [r2, #4]
 800935a:	b292      	uxth	r2, r2
 800935c:	4293      	cmp	r3, r2
 800935e:	dd06      	ble.n	800936e <Paint_DrawString_EN+0x5a>
        {
            Xpoint = Xstart;
 8009360:	89fb      	ldrh	r3, [r7, #14]
 8009362:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	88da      	ldrh	r2, [r3, #6]
 8009368:	8abb      	ldrh	r3, [r7, #20]
 800936a:	4413      	add	r3, r2
 800936c:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height )
 800936e:	8abb      	ldrh	r3, [r7, #20]
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	88d2      	ldrh	r2, [r2, #6]
 8009374:	4413      	add	r3, r2
 8009376:	4a11      	ldr	r2, [pc, #68]	; (80093bc <Paint_DrawString_EN+0xa8>)
 8009378:	88d2      	ldrh	r2, [r2, #6]
 800937a:	b292      	uxth	r2, r2
 800937c:	4293      	cmp	r3, r2
 800937e:	dd03      	ble.n	8009388 <Paint_DrawString_EN+0x74>
        {
            Xpoint = Xstart;
 8009380:	89fb      	ldrh	r3, [r7, #14]
 8009382:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8009384:	89bb      	ldrh	r3, [r7, #12]
 8009386:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	781a      	ldrb	r2, [r3, #0]
 800938c:	8ab9      	ldrh	r1, [r7, #20]
 800938e:	8af8      	ldrh	r0, [r7, #22]
 8009390:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009392:	9301      	str	r3, [sp, #4]
 8009394:	8c3b      	ldrh	r3, [r7, #32]
 8009396:	9300      	str	r3, [sp, #0]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f7ff ff2d 	bl	80091f8 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	3301      	adds	r3, #1
 80093a2:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	889a      	ldrh	r2, [r3, #4]
 80093a8:	8afb      	ldrh	r3, [r7, #22]
 80093aa:	4413      	add	r3, r2
 80093ac:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0')
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d1cb      	bne.n	800934e <Paint_DrawString_EN+0x3a>
    }
}
 80093b6:	3718      	adds	r7, #24
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	2400ab40 	.word	0x2400ab40
 80093c0:	08015184 	.word	0x08015184

080093c4 <Paint_DrawFloatNum>:
    Font             ：A structure pointer that displays a character size
    Color            : Select the background color of the English character
******************************************************************************/
void Paint_DrawFloatNum(UWORD Xpoint, UWORD Ypoint, double Nummber,  UBYTE Decimal_Point, 
                        sFONT* Font,  UWORD Color_Background, UWORD Color_Foreground)
{
 80093c4:	b590      	push	{r4, r7, lr}
 80093c6:	b0cb      	sub	sp, #300	; 0x12c
 80093c8:	af02      	add	r7, sp, #8
 80093ca:	4604      	mov	r4, r0
 80093cc:	4608      	mov	r0, r1
 80093ce:	f107 0108 	add.w	r1, r7, #8
 80093d2:	ed81 0b00 	vstr	d0, [r1]
 80093d6:	4611      	mov	r1, r2
 80093d8:	1d3a      	adds	r2, r7, #4
 80093da:	6013      	str	r3, [r2, #0]
 80093dc:	f107 0316 	add.w	r3, r7, #22
 80093e0:	4622      	mov	r2, r4
 80093e2:	801a      	strh	r2, [r3, #0]
 80093e4:	f107 0314 	add.w	r3, r7, #20
 80093e8:	4602      	mov	r2, r0
 80093ea:	801a      	strh	r2, [r3, #0]
 80093ec:	f107 0313 	add.w	r3, r7, #19
 80093f0:	460a      	mov	r2, r1
 80093f2:	701a      	strb	r2, [r3, #0]
    char Str[ARRAY_LEN] = "";
 80093f4:	f107 031c 	add.w	r3, r7, #28
 80093f8:	2200      	movs	r2, #0
 80093fa:	601a      	str	r2, [r3, #0]
 80093fc:	3304      	adds	r3, #4
 80093fe:	22fb      	movs	r2, #251	; 0xfb
 8009400:	2100      	movs	r1, #0
 8009402:	4618      	mov	r0, r3
 8009404:	f006 ffa6 	bl	8010354 <memset>
    sprintf(Str,"%.*lf",Decimal_Point+2,Nummber);
 8009408:	f107 0313 	add.w	r3, r7, #19
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	1c99      	adds	r1, r3, #2
 8009410:	f107 001c 	add.w	r0, r7, #28
 8009414:	f107 0308 	add.w	r3, r7, #8
 8009418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941c:	e9cd 2300 	strd	r2, r3, [sp]
 8009420:	460a      	mov	r2, r1
 8009422:	4930      	ldr	r1, [pc, #192]	; (80094e4 <Paint_DrawFloatNum+0x120>)
 8009424:	f008 f8c2 	bl	80115ac <siprintf>
    char * pStr= (char *)malloc((strlen(Str))*sizeof(char));
 8009428:	f107 031c 	add.w	r3, r7, #28
 800942c:	4618      	mov	r0, r3
 800942e:	f7f6 ff61 	bl	80002f4 <strlen>
 8009432:	4603      	mov	r3, r0
 8009434:	4618      	mov	r0, r3
 8009436:	f006 ff55 	bl	80102e4 <malloc>
 800943a:	4603      	mov	r3, r0
 800943c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    memcpy(pStr,Str,(strlen(Str)-2));
 8009440:	f107 031c 	add.w	r3, r7, #28
 8009444:	4618      	mov	r0, r3
 8009446:	f7f6 ff55 	bl	80002f4 <strlen>
 800944a:	4603      	mov	r3, r0
 800944c:	1e9a      	subs	r2, r3, #2
 800944e:	f107 031c 	add.w	r3, r7, #28
 8009452:	4619      	mov	r1, r3
 8009454:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8009458:	f006 ff54 	bl	8010304 <memcpy>
    * (pStr+strlen(Str)-2)='\0';
 800945c:	f107 031c 	add.w	r3, r7, #28
 8009460:	4618      	mov	r0, r3
 8009462:	f7f6 ff47 	bl	80002f4 <strlen>
 8009466:	4603      	mov	r3, r0
 8009468:	3b02      	subs	r3, #2
 800946a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800946e:	4413      	add	r3, r2
 8009470:	2200      	movs	r2, #0
 8009472:	701a      	strb	r2, [r3, #0]
    if((*(pStr+strlen(Str)-3))=='.')
 8009474:	f107 031c 	add.w	r3, r7, #28
 8009478:	4618      	mov	r0, r3
 800947a:	f7f6 ff3b 	bl	80002f4 <strlen>
 800947e:	4603      	mov	r3, r0
 8009480:	3b03      	subs	r3, #3
 8009482:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009486:	4413      	add	r3, r2
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	2b2e      	cmp	r3, #46	; 0x2e
 800948c:	d10b      	bne.n	80094a6 <Paint_DrawFloatNum+0xe2>
    {
      *(pStr+strlen(Str)-3)='\0';
 800948e:	f107 031c 	add.w	r3, r7, #28
 8009492:	4618      	mov	r0, r3
 8009494:	f7f6 ff2e 	bl	80002f4 <strlen>
 8009498:	4603      	mov	r3, r0
 800949a:	3b03      	subs	r3, #3
 800949c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80094a0:	4413      	add	r3, r2
 80094a2:	2200      	movs	r2, #0
 80094a4:	701a      	strb	r2, [r3, #0]
    }
    //show
    Paint_DrawString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Foreground, Color_Background);
 80094a6:	1d3b      	adds	r3, r7, #4
 80094a8:	f107 0214 	add.w	r2, r7, #20
 80094ac:	8811      	ldrh	r1, [r2, #0]
 80094ae:	f107 0216 	add.w	r2, r7, #22
 80094b2:	8810      	ldrh	r0, [r2, #0]
 80094b4:	f8b7 2130 	ldrh.w	r2, [r7, #304]	; 0x130
 80094b8:	9201      	str	r2, [sp, #4]
 80094ba:	f8b7 2134 	ldrh.w	r2, [r7, #308]	; 0x134
 80094be:	9200      	str	r2, [sp, #0]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80094c6:	f7ff ff25 	bl	8009314 <Paint_DrawString_EN>
    free(pStr);
 80094ca:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80094ce:	f006 ff11 	bl	80102f4 <free>
    pStr=NULL;
 80094d2:	2300      	movs	r3, #0
 80094d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
}
 80094d8:	bf00      	nop
 80094da:	f507 7792 	add.w	r7, r7, #292	; 0x124
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd90      	pop	{r4, r7, pc}
 80094e2:	bf00      	nop
 80094e4:	08015208 	.word	0x08015208

080094e8 <Paint_DrawImage>:
    yStart           : Y starting coordinates
    xEnd             ：Image width
    yEnd             : Image height
******************************************************************************/
void Paint_DrawImage(const unsigned char *image, UWORD xStart, UWORD yStart, UWORD W_Image, UWORD H_Image) 
{
 80094e8:	b590      	push	{r4, r7, lr}
 80094ea:	b087      	sub	sp, #28
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	4608      	mov	r0, r1
 80094f2:	4611      	mov	r1, r2
 80094f4:	461a      	mov	r2, r3
 80094f6:	4603      	mov	r3, r0
 80094f8:	817b      	strh	r3, [r7, #10]
 80094fa:	460b      	mov	r3, r1
 80094fc:	813b      	strh	r3, [r7, #8]
 80094fe:	4613      	mov	r3, r2
 8009500:	80fb      	strh	r3, [r7, #6]
	int i,j;
	for(j = 0; j < H_Image; j++)
 8009502:	2300      	movs	r3, #0
 8009504:	613b      	str	r3, [r7, #16]
 8009506:	e049      	b.n	800959c <Paint_DrawImage+0xb4>
	{
		for(i = 0; i < W_Image; i++)
 8009508:	2300      	movs	r3, #0
 800950a:	617b      	str	r3, [r7, #20]
 800950c:	e03f      	b.n	800958e <Paint_DrawImage+0xa6>
		{
			if(xStart+i < Paint.WidthMemory  &&  yStart+j < Paint.HeightMemory)//Exceeded part does not display
 800950e:	897a      	ldrh	r2, [r7, #10]
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	4413      	add	r3, r2
 8009514:	4a26      	ldr	r2, [pc, #152]	; (80095b0 <Paint_DrawImage+0xc8>)
 8009516:	8912      	ldrh	r2, [r2, #8]
 8009518:	b292      	uxth	r2, r2
 800951a:	4293      	cmp	r3, r2
 800951c:	da34      	bge.n	8009588 <Paint_DrawImage+0xa0>
 800951e:	893a      	ldrh	r2, [r7, #8]
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	4413      	add	r3, r2
 8009524:	4a22      	ldr	r2, [pc, #136]	; (80095b0 <Paint_DrawImage+0xc8>)
 8009526:	8952      	ldrh	r2, [r2, #10]
 8009528:	b292      	uxth	r2, r2
 800952a:	4293      	cmp	r3, r2
 800952c:	da2c      	bge.n	8009588 <Paint_DrawImage+0xa0>
			{
				Paint_SetPixel(xStart + i, yStart + j, (*(image + j*W_Image*2 + i*2+1))<<8 | (*(image + j*W_Image*2 + i*2)));
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	b29a      	uxth	r2, r3
 8009532:	897b      	ldrh	r3, [r7, #10]
 8009534:	4413      	add	r3, r2
 8009536:	b298      	uxth	r0, r3
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	b29a      	uxth	r2, r3
 800953c:	893b      	ldrh	r3, [r7, #8]
 800953e:	4413      	add	r3, r2
 8009540:	b29c      	uxth	r4, r3
 8009542:	88fb      	ldrh	r3, [r7, #6]
 8009544:	693a      	ldr	r2, [r7, #16]
 8009546:	fb02 f303 	mul.w	r3, r2, r3
 800954a:	005b      	lsls	r3, r3, #1
 800954c:	461a      	mov	r2, r3
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	005b      	lsls	r3, r3, #1
 8009552:	4413      	add	r3, r2
 8009554:	3301      	adds	r3, #1
 8009556:	68fa      	ldr	r2, [r7, #12]
 8009558:	4413      	add	r3, r2
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	021b      	lsls	r3, r3, #8
 800955e:	b21a      	sxth	r2, r3
 8009560:	88fb      	ldrh	r3, [r7, #6]
 8009562:	6939      	ldr	r1, [r7, #16]
 8009564:	fb01 f303 	mul.w	r3, r1, r3
 8009568:	005b      	lsls	r3, r3, #1
 800956a:	4619      	mov	r1, r3
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	005b      	lsls	r3, r3, #1
 8009570:	440b      	add	r3, r1
 8009572:	68f9      	ldr	r1, [r7, #12]
 8009574:	440b      	add	r3, r1
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	b21b      	sxth	r3, r3
 800957a:	4313      	orrs	r3, r2
 800957c:	b21b      	sxth	r3, r3
 800957e:	b29b      	uxth	r3, r3
 8009580:	461a      	mov	r2, r3
 8009582:	4621      	mov	r1, r4
 8009584:	f7ff f9e8 	bl	8008958 <Paint_SetPixel>
		for(i = 0; i < W_Image; i++)
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	3301      	adds	r3, #1
 800958c:	617b      	str	r3, [r7, #20]
 800958e:	88fb      	ldrh	r3, [r7, #6]
 8009590:	697a      	ldr	r2, [r7, #20]
 8009592:	429a      	cmp	r2, r3
 8009594:	dbbb      	blt.n	800950e <Paint_DrawImage+0x26>
	for(j = 0; j < H_Image; j++)
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	3301      	adds	r3, #1
 800959a:	613b      	str	r3, [r7, #16]
 800959c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800959e:	693a      	ldr	r2, [r7, #16]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	dbb1      	blt.n	8009508 <Paint_DrawImage+0x20>
			//Using arrays is a property of sequential storage, accessing the original array by algorithm
			//j*W_Image*2 			   Y offset
			//i*2              	   X offset
		}
	}
}
 80095a4:	bf00      	nop
 80095a6:	bf00      	nop
 80095a8:	371c      	adds	r7, #28
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd90      	pop	{r4, r7, pc}
 80095ae:	bf00      	nop
 80095b0:	2400ab40 	.word	0x2400ab40

080095b4 <LCD_1IN8_Reset>:
/*******************************************************************************
function:
			Hardware reset
*******************************************************************************/
static void LCD_1IN8_Reset(void)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	af00      	add	r7, sp, #0
    LCD_1IN8_RST_1;
 80095b8:	2201      	movs	r2, #1
 80095ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80095be:	480d      	ldr	r0, [pc, #52]	; (80095f4 <LCD_1IN8_Reset+0x40>)
 80095c0:	f7f9 fd08 	bl	8002fd4 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 80095c4:	2064      	movs	r0, #100	; 0x64
 80095c6:	f7f8 fd6f 	bl	80020a8 <HAL_Delay>
    LCD_1IN8_RST_0;
 80095ca:	2200      	movs	r2, #0
 80095cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80095d0:	4808      	ldr	r0, [pc, #32]	; (80095f4 <LCD_1IN8_Reset+0x40>)
 80095d2:	f7f9 fcff 	bl	8002fd4 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 80095d6:	2064      	movs	r0, #100	; 0x64
 80095d8:	f7f8 fd66 	bl	80020a8 <HAL_Delay>
    LCD_1IN8_RST_1;
 80095dc:	2201      	movs	r2, #1
 80095de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80095e2:	4804      	ldr	r0, [pc, #16]	; (80095f4 <LCD_1IN8_Reset+0x40>)
 80095e4:	f7f9 fcf6 	bl	8002fd4 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 80095e8:	2064      	movs	r0, #100	; 0x64
 80095ea:	f7f8 fd5d 	bl	80020a8 <HAL_Delay>
}
 80095ee:	bf00      	nop
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	58021400 	.word	0x58021400

080095f8 <LCD_1IN8_WriteReg>:
/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
static void LCD_1IN8_WriteReg(uint8_t Reg)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	4603      	mov	r3, r0
 8009600:	71fb      	strb	r3, [r7, #7]
    LCD_1IN8_DC_0;
 8009602:	2200      	movs	r2, #0
 8009604:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009608:	4807      	ldr	r0, [pc, #28]	; (8009628 <LCD_1IN8_WriteReg+0x30>)
 800960a:	f7f9 fce3 	bl	8002fd4 <HAL_GPIO_WritePin>
    LCD_1IN8_CS_0;
 800960e:	2200      	movs	r2, #0
 8009610:	2140      	movs	r1, #64	; 0x40
 8009612:	4805      	ldr	r0, [pc, #20]	; (8009628 <LCD_1IN8_WriteReg+0x30>)
 8009614:	f7f9 fcde 	bl	8002fd4 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Reg);
 8009618:	79fb      	ldrb	r3, [r7, #7]
 800961a:	4618      	mov	r0, r3
 800961c:	f7ff f8fe 	bl	800881c <DEV_SPI_WRite>
    //LCD_1IN8_CS_1;
}
 8009620:	bf00      	nop
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}
 8009628:	58021800 	.word	0x58021800

0800962c <LCD_1IN8_WriteData_8Bit>:

static void LCD_1IN8_WriteData_8Bit(uint8_t Data)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	4603      	mov	r3, r0
 8009634:	71fb      	strb	r3, [r7, #7]
    LCD_1IN8_DC_1;
 8009636:	2201      	movs	r2, #1
 8009638:	f44f 7180 	mov.w	r1, #256	; 0x100
 800963c:	480a      	ldr	r0, [pc, #40]	; (8009668 <LCD_1IN8_WriteData_8Bit+0x3c>)
 800963e:	f7f9 fcc9 	bl	8002fd4 <HAL_GPIO_WritePin>
    LCD_1IN8_CS_0;
 8009642:	2200      	movs	r2, #0
 8009644:	2140      	movs	r1, #64	; 0x40
 8009646:	4808      	ldr	r0, [pc, #32]	; (8009668 <LCD_1IN8_WriteData_8Bit+0x3c>)
 8009648:	f7f9 fcc4 	bl	8002fd4 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data);
 800964c:	79fb      	ldrb	r3, [r7, #7]
 800964e:	4618      	mov	r0, r3
 8009650:	f7ff f8e4 	bl	800881c <DEV_SPI_WRite>
    LCD_1IN8_CS_1;
 8009654:	2201      	movs	r2, #1
 8009656:	2140      	movs	r1, #64	; 0x40
 8009658:	4803      	ldr	r0, [pc, #12]	; (8009668 <LCD_1IN8_WriteData_8Bit+0x3c>)
 800965a:	f7f9 fcbb 	bl	8002fd4 <HAL_GPIO_WritePin>
}
 800965e:	bf00      	nop
 8009660:	3708      	adds	r7, #8
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	58021800 	.word	0x58021800

0800966c <LCD_1IN8_WriteData_NLen16Bit>:
    DEV_SPI_WRITE(Data & 0XFF);
    //LCD_1IN8_CS_1;
}*/

void LCD_1IN8_WriteData_NLen16Bit(uint16_t Data,uint32_t DataLen)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	4603      	mov	r3, r0
 8009674:	6039      	str	r1, [r7, #0]
 8009676:	80fb      	strh	r3, [r7, #6]
    uint32_t i;
    LCD_1IN8_DC_1;
 8009678:	2201      	movs	r2, #1
 800967a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800967e:	480f      	ldr	r0, [pc, #60]	; (80096bc <LCD_1IN8_WriteData_NLen16Bit+0x50>)
 8009680:	f7f9 fca8 	bl	8002fd4 <HAL_GPIO_WritePin>
    //LCD_1IN8_CS_0;
    for(i = 0; i < DataLen; i++) {
 8009684:	2300      	movs	r3, #0
 8009686:	60fb      	str	r3, [r7, #12]
 8009688:	e00e      	b.n	80096a8 <LCD_1IN8_WriteData_NLen16Bit+0x3c>
        DEV_SPI_WRITE( (uint8_t)(Data >> 8) );
 800968a:	88fb      	ldrh	r3, [r7, #6]
 800968c:	0a1b      	lsrs	r3, r3, #8
 800968e:	b29b      	uxth	r3, r3
 8009690:	b2db      	uxtb	r3, r3
 8009692:	4618      	mov	r0, r3
 8009694:	f7ff f8c2 	bl	800881c <DEV_SPI_WRite>
        DEV_SPI_WRITE( (uint8_t)(Data & 0XFF) );
 8009698:	88fb      	ldrh	r3, [r7, #6]
 800969a:	b2db      	uxtb	r3, r3
 800969c:	4618      	mov	r0, r3
 800969e:	f7ff f8bd 	bl	800881c <DEV_SPI_WRite>
    for(i = 0; i < DataLen; i++) {
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	3301      	adds	r3, #1
 80096a6:	60fb      	str	r3, [r7, #12]
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d3ec      	bcc.n	800968a <LCD_1IN8_WriteData_NLen16Bit+0x1e>
    }
    //LCD_1IN8_CS_1;
}
 80096b0:	bf00      	nop
 80096b2:	bf00      	nop
 80096b4:	3710      	adds	r7, #16
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	58021800 	.word	0x58021800

080096c0 <LCD_1IN8_InitReg>:
/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_1IN8_InitReg(void)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	af00      	add	r7, sp, #0
    //ST7735R Frame Rate
    LCD_1IN8_WriteReg(0xB1);
 80096c4:	20b1      	movs	r0, #177	; 0xb1
 80096c6:	f7ff ff97 	bl	80095f8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 80096ca:	2001      	movs	r0, #1
 80096cc:	f7ff ffae 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 80096d0:	202c      	movs	r0, #44	; 0x2c
 80096d2:	f7ff ffab 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 80096d6:	202d      	movs	r0, #45	; 0x2d
 80096d8:	f7ff ffa8 	bl	800962c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB2);
 80096dc:	20b2      	movs	r0, #178	; 0xb2
 80096de:	f7ff ff8b 	bl	80095f8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 80096e2:	2001      	movs	r0, #1
 80096e4:	f7ff ffa2 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 80096e8:	202c      	movs	r0, #44	; 0x2c
 80096ea:	f7ff ff9f 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 80096ee:	202d      	movs	r0, #45	; 0x2d
 80096f0:	f7ff ff9c 	bl	800962c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB3);
 80096f4:	20b3      	movs	r0, #179	; 0xb3
 80096f6:	f7ff ff7f 	bl	80095f8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 80096fa:	2001      	movs	r0, #1
 80096fc:	f7ff ff96 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 8009700:	202c      	movs	r0, #44	; 0x2c
 8009702:	f7ff ff93 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 8009706:	202d      	movs	r0, #45	; 0x2d
 8009708:	f7ff ff90 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x01);
 800970c:	2001      	movs	r0, #1
 800970e:	f7ff ff8d 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 8009712:	202c      	movs	r0, #44	; 0x2c
 8009714:	f7ff ff8a 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 8009718:	202d      	movs	r0, #45	; 0x2d
 800971a:	f7ff ff87 	bl	800962c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB4); //Column inversion
 800971e:	20b4      	movs	r0, #180	; 0xb4
 8009720:	f7ff ff6a 	bl	80095f8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x07);
 8009724:	2007      	movs	r0, #7
 8009726:	f7ff ff81 	bl	800962c <LCD_1IN8_WriteData_8Bit>

    //ST7735R Power Sequence
    LCD_1IN8_WriteReg(0xC0);
 800972a:	20c0      	movs	r0, #192	; 0xc0
 800972c:	f7ff ff64 	bl	80095f8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0xA2);
 8009730:	20a2      	movs	r0, #162	; 0xa2
 8009732:	f7ff ff7b 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x02);
 8009736:	2002      	movs	r0, #2
 8009738:	f7ff ff78 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x84);
 800973c:	2084      	movs	r0, #132	; 0x84
 800973e:	f7ff ff75 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteReg(0xC1);
 8009742:	20c1      	movs	r0, #193	; 0xc1
 8009744:	f7ff ff58 	bl	80095f8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0xC5);
 8009748:	20c5      	movs	r0, #197	; 0xc5
 800974a:	f7ff ff6f 	bl	800962c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC2);
 800974e:	20c2      	movs	r0, #194	; 0xc2
 8009750:	f7ff ff52 	bl	80095f8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0A);
 8009754:	200a      	movs	r0, #10
 8009756:	f7ff ff69 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 800975a:	2000      	movs	r0, #0
 800975c:	f7ff ff66 	bl	800962c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC3);
 8009760:	20c3      	movs	r0, #195	; 0xc3
 8009762:	f7ff ff49 	bl	80095f8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x8A);
 8009766:	208a      	movs	r0, #138	; 0x8a
 8009768:	f7ff ff60 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2A);
 800976c:	202a      	movs	r0, #42	; 0x2a
 800976e:	f7ff ff5d 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteReg(0xC4);
 8009772:	20c4      	movs	r0, #196	; 0xc4
 8009774:	f7ff ff40 	bl	80095f8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x8A);
 8009778:	208a      	movs	r0, #138	; 0x8a
 800977a:	f7ff ff57 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0xEE);
 800977e:	20ee      	movs	r0, #238	; 0xee
 8009780:	f7ff ff54 	bl	800962c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC5); //VCOM
 8009784:	20c5      	movs	r0, #197	; 0xc5
 8009786:	f7ff ff37 	bl	80095f8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0E);
 800978a:	200e      	movs	r0, #14
 800978c:	f7ff ff4e 	bl	800962c <LCD_1IN8_WriteData_8Bit>

    //ST7735R Gamma Sequence
    LCD_1IN8_WriteReg(0xe0);
 8009790:	20e0      	movs	r0, #224	; 0xe0
 8009792:	f7ff ff31 	bl	80095f8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0f);
 8009796:	200f      	movs	r0, #15
 8009798:	f7ff ff48 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1a);
 800979c:	201a      	movs	r0, #26
 800979e:	f7ff ff45 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x0f);
 80097a2:	200f      	movs	r0, #15
 80097a4:	f7ff ff42 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x18);
 80097a8:	2018      	movs	r0, #24
 80097aa:	f7ff ff3f 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2f);
 80097ae:	202f      	movs	r0, #47	; 0x2f
 80097b0:	f7ff ff3c 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x28);
 80097b4:	2028      	movs	r0, #40	; 0x28
 80097b6:	f7ff ff39 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x20);
 80097ba:	2020      	movs	r0, #32
 80097bc:	f7ff ff36 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x22);
 80097c0:	2022      	movs	r0, #34	; 0x22
 80097c2:	f7ff ff33 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1f);
 80097c6:	201f      	movs	r0, #31
 80097c8:	f7ff ff30 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1b);
 80097cc:	201b      	movs	r0, #27
 80097ce:	f7ff ff2d 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x23);
 80097d2:	2023      	movs	r0, #35	; 0x23
 80097d4:	f7ff ff2a 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x37);
 80097d8:	2037      	movs	r0, #55	; 0x37
 80097da:	f7ff ff27 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 80097de:	2000      	movs	r0, #0
 80097e0:	f7ff ff24 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x07);
 80097e4:	2007      	movs	r0, #7
 80097e6:	f7ff ff21 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x02);
 80097ea:	2002      	movs	r0, #2
 80097ec:	f7ff ff1e 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x10);
 80097f0:	2010      	movs	r0, #16
 80097f2:	f7ff ff1b 	bl	800962c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xe1);
 80097f6:	20e1      	movs	r0, #225	; 0xe1
 80097f8:	f7ff fefe 	bl	80095f8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0f);
 80097fc:	200f      	movs	r0, #15
 80097fe:	f7ff ff15 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1b);
 8009802:	201b      	movs	r0, #27
 8009804:	f7ff ff12 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x0f);
 8009808:	200f      	movs	r0, #15
 800980a:	f7ff ff0f 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x17);
 800980e:	2017      	movs	r0, #23
 8009810:	f7ff ff0c 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x33);
 8009814:	2033      	movs	r0, #51	; 0x33
 8009816:	f7ff ff09 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2c);
 800981a:	202c      	movs	r0, #44	; 0x2c
 800981c:	f7ff ff06 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x29);
 8009820:	2029      	movs	r0, #41	; 0x29
 8009822:	f7ff ff03 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2e);
 8009826:	202e      	movs	r0, #46	; 0x2e
 8009828:	f7ff ff00 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x30);
 800982c:	2030      	movs	r0, #48	; 0x30
 800982e:	f7ff fefd 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x30);
 8009832:	2030      	movs	r0, #48	; 0x30
 8009834:	f7ff fefa 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x39);
 8009838:	2039      	movs	r0, #57	; 0x39
 800983a:	f7ff fef7 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x3f);
 800983e:	203f      	movs	r0, #63	; 0x3f
 8009840:	f7ff fef4 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 8009844:	2000      	movs	r0, #0
 8009846:	f7ff fef1 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x07);
 800984a:	2007      	movs	r0, #7
 800984c:	f7ff feee 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x03);
 8009850:	2003      	movs	r0, #3
 8009852:	f7ff feeb 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x10);
 8009856:	2010      	movs	r0, #16
 8009858:	f7ff fee8 	bl	800962c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xF0); //Enable test command
 800985c:	20f0      	movs	r0, #240	; 0xf0
 800985e:	f7ff fecb 	bl	80095f8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 8009862:	2001      	movs	r0, #1
 8009864:	f7ff fee2 	bl	800962c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xF6); //Disable ram power save mode
 8009868:	20f6      	movs	r0, #246	; 0xf6
 800986a:	f7ff fec5 	bl	80095f8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x00);
 800986e:	2000      	movs	r0, #0
 8009870:	f7ff fedc 	bl	800962c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0x3A); //65k mode
 8009874:	203a      	movs	r0, #58	; 0x3a
 8009876:	f7ff febf 	bl	80095f8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x05);
 800987a:	2005      	movs	r0, #5
 800987c:	f7ff fed6 	bl	800962c <LCD_1IN8_WriteData_8Bit>

}
 8009880:	bf00      	nop
 8009882:	bd80      	pop	{r7, pc}

08009884 <LCD_1IN8_SetGramScanWay>:
parameter:
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_1IN8_SetGramScanWay(LCD_1IN8_SCAN_DIR Scan_dir)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	4603      	mov	r3, r0
 800988c:	71fb      	strb	r3, [r7, #7]
    //Get the screen scan direction
    sLCD_1IN8_DIS.LCD_1IN8_Scan_Dir = Scan_dir;
 800988e:	4a34      	ldr	r2, [pc, #208]	; (8009960 <LCD_1IN8_SetGramScanWay+0xdc>)
 8009890:	79fb      	ldrb	r3, [r7, #7]
 8009892:	7113      	strb	r3, [r2, #4]

	//Get GRAM and LCD width and height
	if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U)
 8009894:	79fb      	ldrb	r3, [r7, #7]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d008      	beq.n	80098ac <LCD_1IN8_SetGramScanWay+0x28>
 800989a:	79fb      	ldrb	r3, [r7, #7]
 800989c:	2b01      	cmp	r3, #1
 800989e:	d005      	beq.n	80098ac <LCD_1IN8_SetGramScanWay+0x28>
 80098a0:	79fb      	ldrb	r3, [r7, #7]
 80098a2:	2b02      	cmp	r3, #2
 80098a4:	d002      	beq.n	80098ac <LCD_1IN8_SetGramScanWay+0x28>
 80098a6:	79fb      	ldrb	r3, [r7, #7]
 80098a8:	2b03      	cmp	r3, #3
 80098aa:	d10c      	bne.n	80098c6 <LCD_1IN8_SetGramScanWay+0x42>
	{
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Column	= LCD_1IN8_HEIGHT ;
 80098ac:	4b2c      	ldr	r3, [pc, #176]	; (8009960 <LCD_1IN8_SetGramScanWay+0xdc>)
 80098ae:	2280      	movs	r2, #128	; 0x80
 80098b0:	801a      	strh	r2, [r3, #0]
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Page = LCD_1IN8_WIDTH ;
 80098b2:	4b2b      	ldr	r3, [pc, #172]	; (8009960 <LCD_1IN8_SetGramScanWay+0xdc>)
 80098b4:	22a0      	movs	r2, #160	; 0xa0
 80098b6:	805a      	strh	r2, [r3, #2]
		sLCD_1IN8_DIS.LCD_1IN8_X_Adjust = LCD_1IN8_X;
 80098b8:	4b29      	ldr	r3, [pc, #164]	; (8009960 <LCD_1IN8_SetGramScanWay+0xdc>)
 80098ba:	2202      	movs	r2, #2
 80098bc:	80da      	strh	r2, [r3, #6]
		sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust = LCD_1IN8_Y;
 80098be:	4b28      	ldr	r3, [pc, #160]	; (8009960 <LCD_1IN8_SetGramScanWay+0xdc>)
 80098c0:	2201      	movs	r2, #1
 80098c2:	811a      	strh	r2, [r3, #8]
 80098c4:	e00b      	b.n	80098de <LCD_1IN8_SetGramScanWay+0x5a>
	}
	else
	{
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Column	= LCD_1IN8_WIDTH ;
 80098c6:	4b26      	ldr	r3, [pc, #152]	; (8009960 <LCD_1IN8_SetGramScanWay+0xdc>)
 80098c8:	22a0      	movs	r2, #160	; 0xa0
 80098ca:	801a      	strh	r2, [r3, #0]
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Page = LCD_1IN8_HEIGHT ;	
 80098cc:	4b24      	ldr	r3, [pc, #144]	; (8009960 <LCD_1IN8_SetGramScanWay+0xdc>)
 80098ce:	2280      	movs	r2, #128	; 0x80
 80098d0:	805a      	strh	r2, [r3, #2]
		sLCD_1IN8_DIS.LCD_1IN8_X_Adjust = LCD_1IN8_Y;
 80098d2:	4b23      	ldr	r3, [pc, #140]	; (8009960 <LCD_1IN8_SetGramScanWay+0xdc>)
 80098d4:	2201      	movs	r2, #1
 80098d6:	80da      	strh	r2, [r3, #6]
		sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust = LCD_1IN8_X;
 80098d8:	4b21      	ldr	r3, [pc, #132]	; (8009960 <LCD_1IN8_SetGramScanWay+0xdc>)
 80098da:	2202      	movs	r2, #2
 80098dc:	811a      	strh	r2, [r3, #8]
	}

    // Gets the scan direction of GRAM
    uint16_t MemoryAccessReg_Data=0;  //0x36
 80098de:	2300      	movs	r3, #0
 80098e0:	81fb      	strh	r3, [r7, #14]
    switch (Scan_dir) {
 80098e2:	79fb      	ldrb	r3, [r7, #7]
 80098e4:	2b07      	cmp	r3, #7
 80098e6:	d82b      	bhi.n	8009940 <LCD_1IN8_SetGramScanWay+0xbc>
 80098e8:	a201      	add	r2, pc, #4	; (adr r2, 80098f0 <LCD_1IN8_SetGramScanWay+0x6c>)
 80098ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ee:	bf00      	nop
 80098f0:	08009911 	.word	0x08009911
 80098f4:	08009917 	.word	0x08009917
 80098f8:	0800991d 	.word	0x0800991d
 80098fc:	08009923 	.word	0x08009923
 8009900:	08009929 	.word	0x08009929
 8009904:	0800992f 	.word	0x0800992f
 8009908:	08009935 	.word	0x08009935
 800990c:	0800993b 	.word	0x0800993b
    case L2R_U2D:
        MemoryAccessReg_Data = 0X00 | 0x00;//x Scan direction | y Scan direction
 8009910:	2300      	movs	r3, #0
 8009912:	81fb      	strh	r3, [r7, #14]
        break;
 8009914:	e014      	b.n	8009940 <LCD_1IN8_SetGramScanWay+0xbc>
    case L2R_D2U:
        MemoryAccessReg_Data = 0x00 | 0x80;//0xC8 | 0X10
 8009916:	2380      	movs	r3, #128	; 0x80
 8009918:	81fb      	strh	r3, [r7, #14]
        break;
 800991a:	e011      	b.n	8009940 <LCD_1IN8_SetGramScanWay+0xbc>
    case R2L_U2D:	//0X04
        MemoryAccessReg_Data = 0x40 | 0x00;
 800991c:	2340      	movs	r3, #64	; 0x40
 800991e:	81fb      	strh	r3, [r7, #14]
        break;
 8009920:	e00e      	b.n	8009940 <LCD_1IN8_SetGramScanWay+0xbc>
    case R2L_D2U:	//0X0C
        MemoryAccessReg_Data = 0x40 | 0x80;
 8009922:	23c0      	movs	r3, #192	; 0xc0
 8009924:	81fb      	strh	r3, [r7, #14]
        break;
 8009926:	e00b      	b.n	8009940 <LCD_1IN8_SetGramScanWay+0xbc>
    case U2D_L2R:	//0X02
        MemoryAccessReg_Data = 0X00 | 0X00 | 0x20;
 8009928:	2320      	movs	r3, #32
 800992a:	81fb      	strh	r3, [r7, #14]
        break;
 800992c:	e008      	b.n	8009940 <LCD_1IN8_SetGramScanWay+0xbc>
    case U2D_R2L:	//0X06
        MemoryAccessReg_Data = 0x00 | 0X40 | 0x20;
 800992e:	2360      	movs	r3, #96	; 0x60
 8009930:	81fb      	strh	r3, [r7, #14]
        break;
 8009932:	e005      	b.n	8009940 <LCD_1IN8_SetGramScanWay+0xbc>
    case D2U_L2R:	//0X0A
        MemoryAccessReg_Data = 0x80 | 0x00 | 0x20;
 8009934:	23a0      	movs	r3, #160	; 0xa0
 8009936:	81fb      	strh	r3, [r7, #14]
        break;
 8009938:	e002      	b.n	8009940 <LCD_1IN8_SetGramScanWay+0xbc>
    case D2U_R2L:	//0X0E
        MemoryAccessReg_Data = 0x40 | 0x80 | 0x20;
 800993a:	23e0      	movs	r3, #224	; 0xe0
 800993c:	81fb      	strh	r3, [r7, #14]
        break;
 800993e:	bf00      	nop
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN8_WriteReg(0x36); //MX, MY, RGB mode
 8009940:	2036      	movs	r0, #54	; 0x36
 8009942:	f7ff fe59 	bl	80095f8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit( MemoryAccessReg_Data & 0xf7);	//RGB color filter panel
 8009946:	89fb      	ldrh	r3, [r7, #14]
 8009948:	b2db      	uxtb	r3, r3
 800994a:	f023 0308 	bic.w	r3, r3, #8
 800994e:	b2db      	uxtb	r3, r3
 8009950:	4618      	mov	r0, r3
 8009952:	f7ff fe6b 	bl	800962c <LCD_1IN8_WriteData_8Bit>

}
 8009956:	bf00      	nop
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	2400ab5c 	.word	0x2400ab5c

08009964 <LCD_1IN8_Init>:
/********************************************************************************
function:
			initialization
********************************************************************************/
void LCD_1IN8_Init( LCD_1IN8_SCAN_DIR LCD_1IN8_ScanDir )
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	4603      	mov	r3, r0
 800996c:	71fb      	strb	r3, [r7, #7]

    //Hardware reset
    LCD_1IN8_Reset();
 800996e:	f7ff fe21 	bl	80095b4 <LCD_1IN8_Reset>

    //Set the initialization register
    LCD_1IN8_InitReg();
 8009972:	f7ff fea5 	bl	80096c0 <LCD_1IN8_InitReg>

    //Set the display scan and color transfer modes
    LCD_1IN8_SetGramScanWay( LCD_1IN8_ScanDir );
 8009976:	79fb      	ldrb	r3, [r7, #7]
 8009978:	4618      	mov	r0, r3
 800997a:	f7ff ff83 	bl	8009884 <LCD_1IN8_SetGramScanWay>
    DEV_Delay_ms(200);
 800997e:	20c8      	movs	r0, #200	; 0xc8
 8009980:	f7f8 fb92 	bl	80020a8 <HAL_Delay>

    //sleep out
    LCD_1IN8_WriteReg(0x11);
 8009984:	2011      	movs	r0, #17
 8009986:	f7ff fe37 	bl	80095f8 <LCD_1IN8_WriteReg>
    DEV_Delay_ms(120);
 800998a:	2078      	movs	r0, #120	; 0x78
 800998c:	f7f8 fb8c 	bl	80020a8 <HAL_Delay>

    //Turn on the LCD display
    LCD_1IN8_WriteReg(0x29);
 8009990:	2029      	movs	r0, #41	; 0x29
 8009992:	f7ff fe31 	bl	80095f8 <LCD_1IN8_WriteReg>
}
 8009996:	bf00      	nop
 8009998:	3708      	adds	r7, #8
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
	...

080099a0 <LCD_1IN8_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN8_SetWindows( POINT Xstart, POINT Ystart, POINT Xend, POINT Yend )
{
 80099a0:	b590      	push	{r4, r7, lr}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	4604      	mov	r4, r0
 80099a8:	4608      	mov	r0, r1
 80099aa:	4611      	mov	r1, r2
 80099ac:	461a      	mov	r2, r3
 80099ae:	4623      	mov	r3, r4
 80099b0:	80fb      	strh	r3, [r7, #6]
 80099b2:	4603      	mov	r3, r0
 80099b4:	80bb      	strh	r3, [r7, #4]
 80099b6:	460b      	mov	r3, r1
 80099b8:	807b      	strh	r3, [r7, #2]
 80099ba:	4613      	mov	r3, r2
 80099bc:	803b      	strh	r3, [r7, #0]

    //set the X coordinates
    LCD_1IN8_WriteReg ( 0x2A );
 80099be:	202a      	movs	r0, #42	; 0x2a
 80099c0:	f7ff fe1a 	bl	80095f8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit ( 0x00 );						//Set the horizontal starting point to the high octet
 80099c4:	2000      	movs	r0, #0
 80099c6:	f7ff fe31 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (Xstart & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_X_Adjust);			//Set the horizontal starting point to the low octet
 80099ca:	88fb      	ldrh	r3, [r7, #6]
 80099cc:	b2da      	uxtb	r2, r3
 80099ce:	4b1e      	ldr	r3, [pc, #120]	; (8009a48 <LCD_1IN8_SetWindows+0xa8>)
 80099d0:	88db      	ldrh	r3, [r3, #6]
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	4413      	add	r3, r2
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	4618      	mov	r0, r3
 80099da:	f7ff fe27 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( 0x00 );				//Set the horizontal end to the high octet
 80099de:	2000      	movs	r0, #0
 80099e0:	f7ff fe24 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (( Xend - 1 ) & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_X_Adjust);	//Set the horizontal end to the low octet
 80099e4:	887b      	ldrh	r3, [r7, #2]
 80099e6:	b2da      	uxtb	r2, r3
 80099e8:	4b17      	ldr	r3, [pc, #92]	; (8009a48 <LCD_1IN8_SetWindows+0xa8>)
 80099ea:	88db      	ldrh	r3, [r3, #6]
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	4413      	add	r3, r2
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	3b01      	subs	r3, #1
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7ff fe18 	bl	800962c <LCD_1IN8_WriteData_8Bit>

    //set the Y coordinates
    LCD_1IN8_WriteReg ( 0x2B );
 80099fc:	202b      	movs	r0, #43	; 0x2b
 80099fe:	f7ff fdfb 	bl	80095f8 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit ( 0x00 );
 8009a02:	2000      	movs	r0, #0
 8009a04:	f7ff fe12 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (Ystart & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust);
 8009a08:	88bb      	ldrh	r3, [r7, #4]
 8009a0a:	b2da      	uxtb	r2, r3
 8009a0c:	4b0e      	ldr	r3, [pc, #56]	; (8009a48 <LCD_1IN8_SetWindows+0xa8>)
 8009a0e:	891b      	ldrh	r3, [r3, #8]
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	4413      	add	r3, r2
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7ff fe08 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( 0x00 );
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	f7ff fe05 	bl	800962c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( ( (Yend - 1) & 0xff )+ sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust);
 8009a22:	883b      	ldrh	r3, [r7, #0]
 8009a24:	b2da      	uxtb	r2, r3
 8009a26:	4b08      	ldr	r3, [pc, #32]	; (8009a48 <LCD_1IN8_SetWindows+0xa8>)
 8009a28:	891b      	ldrh	r3, [r3, #8]
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	4413      	add	r3, r2
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	3b01      	subs	r3, #1
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	4618      	mov	r0, r3
 8009a36:	f7ff fdf9 	bl	800962c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0x2C);
 8009a3a:	202c      	movs	r0, #44	; 0x2c
 8009a3c:	f7ff fddc 	bl	80095f8 <LCD_1IN8_WriteReg>

}
 8009a40:	bf00      	nop
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd90      	pop	{r4, r7, pc}
 8009a48:	2400ab5c 	.word	0x2400ab5c

08009a4c <LCD_1IN8_SetCursor>:
parameter:
		xStart :   X direction Start coordinates
		xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_1IN8_SetCursor ( POINT Xpoint, POINT Ypoint )
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	4603      	mov	r3, r0
 8009a54:	460a      	mov	r2, r1
 8009a56:	80fb      	strh	r3, [r7, #6]
 8009a58:	4613      	mov	r3, r2
 8009a5a:	80bb      	strh	r3, [r7, #4]
    LCD_1IN8_SetWindows ( Xpoint, Ypoint, Xpoint , Ypoint );
 8009a5c:	88bb      	ldrh	r3, [r7, #4]
 8009a5e:	88fa      	ldrh	r2, [r7, #6]
 8009a60:	88b9      	ldrh	r1, [r7, #4]
 8009a62:	88f8      	ldrh	r0, [r7, #6]
 8009a64:	f7ff ff9c 	bl	80099a0 <LCD_1IN8_SetWindows>
}
 8009a68:	bf00      	nop
 8009a6a:	3708      	adds	r7, #8
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <LCD_1IN8_SetColor>:
parameter:
		Color  :   Set show color
********************************************************************************/
//static void LCD_1IN8_SetColor( LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_1IN8_SetColor( COLOR Color ,POINT Xpoint, POINT Ypoint)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	4603      	mov	r3, r0
 8009a78:	80fb      	strh	r3, [r7, #6]
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	80bb      	strh	r3, [r7, #4]
 8009a7e:	4613      	mov	r3, r2
 8009a80:	807b      	strh	r3, [r7, #2]
    LCD_1IN8_WriteData_NLen16Bit(Color ,(uint32_t)Xpoint * (uint32_t)Ypoint);
 8009a82:	88bb      	ldrh	r3, [r7, #4]
 8009a84:	887a      	ldrh	r2, [r7, #2]
 8009a86:	fb02 f203 	mul.w	r2, r2, r3
 8009a8a:	88fb      	ldrh	r3, [r7, #6]
 8009a8c:	4611      	mov	r1, r2
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7ff fdec 	bl	800966c <LCD_1IN8_WriteData_NLen16Bit>
}
 8009a94:	bf00      	nop
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <LCD_1IN8_DrawPaint>:
		Xpoint :   The x coordinate of the point
		Ypoint :   The y coordinate of the point
		Color  :   Set the color
********************************************************************************/
void LCD_1IN8_DrawPaint ( POINT Xpoint, POINT Ypoint, COLOR Color )
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	80fb      	strh	r3, [r7, #6]
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	80bb      	strh	r3, [r7, #4]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	807b      	strh	r3, [r7, #2]
    if ( ( Xpoint <= sLCD_1IN8_DIS.LCD_1IN8_Dis_Column ) && ( Ypoint <= sLCD_1IN8_DIS.LCD_1IN8_Dis_Page ) )
 8009aae:	4b1b      	ldr	r3, [pc, #108]	; (8009b1c <LCD_1IN8_DrawPaint+0x80>)
 8009ab0:	881b      	ldrh	r3, [r3, #0]
 8009ab2:	88fa      	ldrh	r2, [r7, #6]
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d82d      	bhi.n	8009b14 <LCD_1IN8_DrawPaint+0x78>
 8009ab8:	4b18      	ldr	r3, [pc, #96]	; (8009b1c <LCD_1IN8_DrawPaint+0x80>)
 8009aba:	885b      	ldrh	r3, [r3, #2]
 8009abc:	88ba      	ldrh	r2, [r7, #4]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d828      	bhi.n	8009b14 <LCD_1IN8_DrawPaint+0x78>
    {
    	if (!renderCompleteFrame)
 8009ac2:	4b17      	ldr	r3, [pc, #92]	; (8009b20 <LCD_1IN8_DrawPaint+0x84>)
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	f083 0301 	eor.w	r3, r3, #1
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d00c      	beq.n	8009aea <LCD_1IN8_DrawPaint+0x4e>
    	{
    		LCD_1IN8_SetCursor (Xpoint, Ypoint);
 8009ad0:	88ba      	ldrh	r2, [r7, #4]
 8009ad2:	88fb      	ldrh	r3, [r7, #6]
 8009ad4:	4611      	mov	r1, r2
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7ff ffb8 	bl	8009a4c <LCD_1IN8_SetCursor>
    		LCD_1IN8_SetColor ( Color , 1 , 1);
 8009adc:	887b      	ldrh	r3, [r7, #2]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	2101      	movs	r1, #1
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7ff ffc4 	bl	8009a70 <LCD_1IN8_SetColor>
    	{
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2] = (uint8_t)((Color & 0xFF00) >> 8 );
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2 + 1] = (uint8_t)((Color & 0x00FF));
    	}
    }
}
 8009ae8:	e014      	b.n	8009b14 <LCD_1IN8_DrawPaint+0x78>
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2] = (uint8_t)((Color & 0xFF00) >> 8 );
 8009aea:	887b      	ldrh	r3, [r7, #2]
 8009aec:	0a1b      	lsrs	r3, r3, #8
 8009aee:	b299      	uxth	r1, r3
 8009af0:	88bb      	ldrh	r3, [r7, #4]
 8009af2:	01da      	lsls	r2, r3, #7
 8009af4:	88fb      	ldrh	r3, [r7, #6]
 8009af6:	4413      	add	r3, r2
 8009af8:	005b      	lsls	r3, r3, #1
 8009afa:	b2c9      	uxtb	r1, r1
 8009afc:	4a09      	ldr	r2, [pc, #36]	; (8009b24 <LCD_1IN8_DrawPaint+0x88>)
 8009afe:	54d1      	strb	r1, [r2, r3]
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2 + 1] = (uint8_t)((Color & 0x00FF));
 8009b00:	88bb      	ldrh	r3, [r7, #4]
 8009b02:	01da      	lsls	r2, r3, #7
 8009b04:	88fb      	ldrh	r3, [r7, #6]
 8009b06:	4413      	add	r3, r2
 8009b08:	005b      	lsls	r3, r3, #1
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	887a      	ldrh	r2, [r7, #2]
 8009b0e:	b2d1      	uxtb	r1, r2
 8009b10:	4a04      	ldr	r2, [pc, #16]	; (8009b24 <LCD_1IN8_DrawPaint+0x88>)
 8009b12:	54d1      	strb	r1, [r2, r3]
}
 8009b14:	bf00      	nop
 8009b16:	3708      	adds	r7, #8
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	2400ab5c 	.word	0x2400ab5c
 8009b20:	2400a3b3 	.word	0x2400a3b3
 8009b24:	24000058 	.word	0x24000058

08009b28 <LCD_1IN8_Clear>:
/********************************************************************************
function:
			Clear screen
********************************************************************************/
void LCD_1IN8_Clear(COLOR  Color)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	4603      	mov	r3, r0
 8009b30:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_1IN8_SetWindows(0, 0, sLCD_1IN8_DIS.LCD_1IN8_Dis_Column, sLCD_1IN8_DIS.LCD_1IN8_Dis_Page);
 8009b32:	4b1a      	ldr	r3, [pc, #104]	; (8009b9c <LCD_1IN8_Clear+0x74>)
 8009b34:	881a      	ldrh	r2, [r3, #0]
 8009b36:	4b19      	ldr	r3, [pc, #100]	; (8009b9c <LCD_1IN8_Clear+0x74>)
 8009b38:	885b      	ldrh	r3, [r3, #2]
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	2000      	movs	r0, #0
 8009b3e:	f7ff ff2f 	bl	80099a0 <LCD_1IN8_SetWindows>
    LCD_1IN8_DC_1;
 8009b42:	2201      	movs	r2, #1
 8009b44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009b48:	4815      	ldr	r0, [pc, #84]	; (8009ba0 <LCD_1IN8_Clear+0x78>)
 8009b4a:	f7f9 fa43 	bl	8002fd4 <HAL_GPIO_WritePin>
    for(i=0;i<sLCD_1IN8_DIS.LCD_1IN8_Dis_Column;i++)
 8009b4e:	2300      	movs	r3, #0
 8009b50:	81fb      	strh	r3, [r7, #14]
 8009b52:	e019      	b.n	8009b88 <LCD_1IN8_Clear+0x60>
	{
		for(j=0;j<sLCD_1IN8_DIS.LCD_1IN8_Dis_Page;j++)
 8009b54:	2300      	movs	r3, #0
 8009b56:	81bb      	strh	r3, [r7, #12]
 8009b58:	e00e      	b.n	8009b78 <LCD_1IN8_Clear+0x50>
		{
			//LCD_1IN8_WriteData_NLen16Bit(Image[i*LCD_1IN8_WIDTH+j],1);
			DEV_SPI_WRITE( (uint8_t)(Color & 0XFF) );
 8009b5a:	88fb      	ldrh	r3, [r7, #6]
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7fe fe5c 	bl	800881c <DEV_SPI_WRite>
			DEV_SPI_WRITE( (uint8_t)(Color >> 8) );
 8009b64:	88fb      	ldrh	r3, [r7, #6]
 8009b66:	0a1b      	lsrs	r3, r3, #8
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f7fe fe55 	bl	800881c <DEV_SPI_WRite>
		for(j=0;j<sLCD_1IN8_DIS.LCD_1IN8_Dis_Page;j++)
 8009b72:	89bb      	ldrh	r3, [r7, #12]
 8009b74:	3301      	adds	r3, #1
 8009b76:	81bb      	strh	r3, [r7, #12]
 8009b78:	4b08      	ldr	r3, [pc, #32]	; (8009b9c <LCD_1IN8_Clear+0x74>)
 8009b7a:	885b      	ldrh	r3, [r3, #2]
 8009b7c:	89ba      	ldrh	r2, [r7, #12]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d3eb      	bcc.n	8009b5a <LCD_1IN8_Clear+0x32>
    for(i=0;i<sLCD_1IN8_DIS.LCD_1IN8_Dis_Column;i++)
 8009b82:	89fb      	ldrh	r3, [r7, #14]
 8009b84:	3301      	adds	r3, #1
 8009b86:	81fb      	strh	r3, [r7, #14]
 8009b88:	4b04      	ldr	r3, [pc, #16]	; (8009b9c <LCD_1IN8_Clear+0x74>)
 8009b8a:	881b      	ldrh	r3, [r3, #0]
 8009b8c:	89fa      	ldrh	r2, [r7, #14]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d3e0      	bcc.n	8009b54 <LCD_1IN8_Clear+0x2c>
			
		}
	}
}
 8009b92:	bf00      	nop
 8009b94:	bf00      	nop
 8009b96:	3710      	adds	r7, #16
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	2400ab5c 	.word	0x2400ab5c
 8009ba0:	58021800 	.word	0x58021800

08009ba4 <LCD_1IN8_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_1IN8_SetBackLight(UWORD Value)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	4603      	mov	r3, r0
 8009bac:	80fb      	strh	r3, [r7, #6]
	 DEV_Set_PWM(Value);
 8009bae:	4a04      	ldr	r2, [pc, #16]	; (8009bc0 <LCD_1IN8_SetBackLight+0x1c>)
 8009bb0:	88fb      	ldrh	r3, [r7, #6]
 8009bb2:	6353      	str	r3, [r2, #52]	; 0x34
}
 8009bb4:	bf00      	nop
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr
 8009bc0:	40010000 	.word	0x40010000

08009bc4 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	605a      	str	r2, [r3, #4]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	685a      	ldr	r2, [r3, #4]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	601a      	str	r2, [r3, #0]
}
 8009bda:	bf00      	nop
 8009bdc:	370c      	adds	r7, #12
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr

08009be6 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 8009be6:	b480      	push	{r7}
 8009be8:	b083      	sub	sp, #12
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
 8009bee:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	685a      	ldr	r2, [r3, #4]
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	683a      	ldr	r2, [r7, #0]
 8009c04:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	683a      	ldr	r2, [r7, #0]
 8009c0c:	601a      	str	r2, [r3, #0]
}
 8009c0e:	bf00      	nop
 8009c10:	370c      	adds	r7, #12
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr

08009c1a <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 8009c1a:	b580      	push	{r7, lr}
 8009c1c:	b082      	sub	sp, #8
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
 8009c22:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8009c24:	6839      	ldr	r1, [r7, #0]
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f7ff ffdd 	bl	8009be6 <metal_list_add_before>
}
 8009c2c:	bf00      	nop
 8009c2e:	3708      	adds	r7, #8
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 8009c3e:	6839      	ldr	r1, [r7, #0]
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f001 ff89 	bl	800bb58 <metal_machine_cache_flush>
}
 8009c46:	bf00      	nop
 8009c48:	3708      	adds	r7, #8
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b082      	sub	sp, #8
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
 8009c56:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8009c58:	6839      	ldr	r1, [r7, #0]
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f001 ff87 	bl	800bb6e <metal_machine_cache_invalidate>
}
 8009c60:	bf00      	nop
 8009c62:	3708      	adds	r7, #8
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 8009c72:	6839      	ldr	r1, [r7, #0]
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f7ff ffdd 	bl	8009c34 <__metal_cache_flush>
}
 8009c7a:	bf00      	nop
 8009c7c:	3708      	adds	r7, #8
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}

08009c82 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 8009c82:	b580      	push	{r7, lr}
 8009c84:	b082      	sub	sp, #8
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
 8009c8a:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8009c8c:	6839      	ldr	r1, [r7, #0]
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f7ff ffdd 	bl	8009c4e <__metal_cache_invalidate>
}
 8009c94:	bf00      	nop
 8009c96:	3708      	adds	r7, #8
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d008      	beq.n	8009cbc <metal_bus_register+0x20>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d004      	beq.n	8009cbc <metal_bus_register+0x20>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d102      	bne.n	8009cc2 <metal_bus_register+0x26>
		return -EINVAL;
 8009cbc:	f06f 0315 	mvn.w	r3, #21
 8009cc0:	e026      	b.n	8009d10 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2100      	movs	r1, #0
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f000 f82b 	bl	8009d24 <metal_bus_find>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d102      	bne.n	8009cda <metal_bus_register+0x3e>
		return -EEXIST;
 8009cd4:	f06f 0310 	mvn.w	r3, #16
 8009cd8:	e01a      	b.n	8009d10 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	331c      	adds	r3, #28
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7ff ff70 	bl	8009bc4 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	3324      	adds	r3, #36	; 0x24
 8009ce8:	4619      	mov	r1, r3
 8009cea:	480b      	ldr	r0, [pc, #44]	; (8009d18 <metal_bus_register+0x7c>)
 8009cec:	f7ff ff95 	bl	8009c1a <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 8009cf0:	4b0a      	ldr	r3, [pc, #40]	; (8009d1c <metal_bus_register+0x80>)
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	2b06      	cmp	r3, #6
 8009cf6:	d90a      	bls.n	8009d0e <metal_bus_register+0x72>
 8009cf8:	4b08      	ldr	r3, [pc, #32]	; (8009d1c <metal_bus_register+0x80>)
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d006      	beq.n	8009d0e <metal_bus_register+0x72>
 8009d00:	4b06      	ldr	r3, [pc, #24]	; (8009d1c <metal_bus_register+0x80>)
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	6812      	ldr	r2, [r2, #0]
 8009d08:	4905      	ldr	r1, [pc, #20]	; (8009d20 <metal_bus_register+0x84>)
 8009d0a:	2007      	movs	r0, #7
 8009d0c:	4798      	blx	r3
	return 0;
 8009d0e:	2300      	movs	r3, #0
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	2400ab70 	.word	0x2400ab70
 8009d1c:	2400ab68 	.word	0x2400ab68
 8009d20:	0801521c 	.word	0x0801521c

08009d24 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 8009d2e:	4b13      	ldr	r3, [pc, #76]	; (8009d7c <metal_bus_find+0x58>)
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	60fb      	str	r3, [r7, #12]
 8009d34:	e017      	b.n	8009d66 <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	3b24      	subs	r3, #36	; 0x24
 8009d3a:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	6879      	ldr	r1, [r7, #4]
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7f6 facc 	bl	80002e0 <strcmp>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d003      	beq.n	8009d56 <metal_bus_find+0x32>
	metal_list_for_each(&_metal.common.bus_list, node) {
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	60fb      	str	r3, [r7, #12]
 8009d54:	e007      	b.n	8009d66 <metal_bus_find+0x42>
			continue;
		if (result)
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d002      	beq.n	8009d62 <metal_bus_find+0x3e>
			*result = bus;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	601a      	str	r2, [r3, #0]
		return 0;
 8009d62:	2300      	movs	r3, #0
 8009d64:	e005      	b.n	8009d72 <metal_bus_find+0x4e>
	metal_list_for_each(&_metal.common.bus_list, node) {
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	4a05      	ldr	r2, [pc, #20]	; (8009d80 <metal_bus_find+0x5c>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d1e3      	bne.n	8009d36 <metal_bus_find+0x12>
	}
	return -ENOENT;
 8009d6e:	f06f 0301 	mvn.w	r3, #1
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3710      	adds	r7, #16
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	2400ab68 	.word	0x2400ab68
 8009d80:	2400ab70 	.word	0x2400ab70

08009d84 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b086      	sub	sp, #24
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d00d      	beq.n	8009db2 <metal_device_open+0x2e>
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d009      	beq.n	8009db2 <metal_device_open+0x2e>
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d006      	beq.n	8009db2 <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d002      	beq.n	8009db2 <metal_device_open+0x2e>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d102      	bne.n	8009db8 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 8009db2:	f06f 0315 	mvn.w	r3, #21
 8009db6:	e01f      	b.n	8009df8 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 8009db8:	f107 0310 	add.w	r3, r7, #16
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	68f8      	ldr	r0, [r7, #12]
 8009dc0:	f7ff ffb0 	bl	8009d24 <metal_bus_find>
 8009dc4:	6178      	str	r0, [r7, #20]
	if (error)
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d001      	beq.n	8009dd0 <metal_device_open+0x4c>
		return error;
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	e013      	b.n	8009df8 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d102      	bne.n	8009dde <metal_device_open+0x5a>
		return -ENODEV;
 8009dd8:	f06f 0312 	mvn.w	r3, #18
 8009ddc:	e00c      	b.n	8009df8 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	6938      	ldr	r0, [r7, #16]
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	68b9      	ldr	r1, [r7, #8]
 8009de8:	4798      	blx	r3
 8009dea:	6178      	str	r0, [r7, #20]
	if (error)
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d001      	beq.n	8009df6 <metal_device_open+0x72>
		return error;
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	e000      	b.n	8009df8 <metal_device_open+0x74>

	return 0;
 8009df6:	2300      	movs	r3, #0
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3718      	adds	r7, #24
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d008      	beq.n	8009e22 <metal_register_generic_device+0x22>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d003      	beq.n	8009e22 <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d902      	bls.n	8009e28 <metal_register_generic_device+0x28>
		return -EINVAL;
 8009e22:	f06f 0315 	mvn.w	r3, #21
 8009e26:	e009      	b.n	8009e3c <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a06      	ldr	r2, [pc, #24]	; (8009e44 <metal_register_generic_device+0x44>)
 8009e2c:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	336c      	adds	r3, #108	; 0x6c
 8009e32:	4619      	mov	r1, r3
 8009e34:	4804      	ldr	r0, [pc, #16]	; (8009e48 <metal_register_generic_device+0x48>)
 8009e36:	f7ff fef0 	bl	8009c1a <metal_list_add_tail>
			    &device->node);
	return 0;
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3708      	adds	r7, #8
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	24000028 	.word	0x24000028
 8009e48:	2400ab80 	.word	0x2400ab80

08009e4c <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b086      	sub	sp, #24
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8009e58:	4b12      	ldr	r3, [pc, #72]	; (8009ea4 <metal_generic_dev_open+0x58>)
 8009e5a:	699b      	ldr	r3, [r3, #24]
 8009e5c:	617b      	str	r3, [r7, #20]
 8009e5e:	e017      	b.n	8009e90 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	3b6c      	subs	r3, #108	; 0x6c
 8009e64:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	68b9      	ldr	r1, [r7, #8]
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7f6 fa37 	bl	80002e0 <strcmp>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d003      	beq.n	8009e80 <metal_generic_dev_open+0x34>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	617b      	str	r3, [r7, #20]
 8009e7e:	e007      	b.n	8009e90 <metal_generic_dev_open+0x44>
			continue;
		*device = dev;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	693a      	ldr	r2, [r7, #16]
 8009e84:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 8009e86:	6938      	ldr	r0, [r7, #16]
 8009e88:	f000 f88c 	bl	8009fa4 <metal_generic_dev_sys_open>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	e005      	b.n	8009e9c <metal_generic_dev_open+0x50>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	4a05      	ldr	r2, [pc, #20]	; (8009ea8 <metal_generic_dev_open+0x5c>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d1e3      	bne.n	8009e60 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 8009e98:	f06f 0312 	mvn.w	r3, #18
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3718      	adds	r7, #24
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	2400ab68 	.word	0x2400ab68
 8009ea8:	2400ab80 	.word	0x2400ab80

08009eac <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b086      	sub	sp, #24
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	607a      	str	r2, [r7, #4]
 8009eb8:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 8009eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d009      	beq.n	8009ed6 <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 8009ec2:	6a3a      	ldr	r2, [r7, #32]
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	005b      	lsls	r3, r3, #1
 8009ec8:	4413      	add	r3, r2
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	461a      	mov	r2, r3
 8009ece:	6839      	ldr	r1, [r7, #0]
 8009ed0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ed2:	f006 fa17 	bl	8010304 <memcpy>
	for (i = 0; i < nents_in; i++) {
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	617b      	str	r3, [r7, #20]
 8009eda:	e02f      	b.n	8009f3c <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2b02      	cmp	r3, #2
 8009ee0:	d114      	bne.n	8009f0c <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 8009ee2:	697a      	ldr	r2, [r7, #20]
 8009ee4:	4613      	mov	r3, r2
 8009ee6:	005b      	lsls	r3, r3, #1
 8009ee8:	4413      	add	r3, r2
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	461a      	mov	r2, r3
 8009eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef0:	4413      	add	r3, r2
 8009ef2:	6818      	ldr	r0, [r3, #0]
 8009ef4:	697a      	ldr	r2, [r7, #20]
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	005b      	lsls	r3, r3, #1
 8009efa:	4413      	add	r3, r2
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	461a      	mov	r2, r3
 8009f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f02:	4413      	add	r3, r2
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	4619      	mov	r1, r3
 8009f08:	f7ff feae 	bl	8009c68 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 8009f0c:	697a      	ldr	r2, [r7, #20]
 8009f0e:	4613      	mov	r3, r2
 8009f10:	005b      	lsls	r3, r3, #1
 8009f12:	4413      	add	r3, r2
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	461a      	mov	r2, r3
 8009f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1a:	4413      	add	r3, r2
 8009f1c:	6818      	ldr	r0, [r3, #0]
 8009f1e:	697a      	ldr	r2, [r7, #20]
 8009f20:	4613      	mov	r3, r2
 8009f22:	005b      	lsls	r3, r3, #1
 8009f24:	4413      	add	r3, r2
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	461a      	mov	r2, r3
 8009f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2c:	4413      	add	r3, r2
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	4619      	mov	r1, r3
 8009f32:	f7ff fea6 	bl	8009c82 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	3301      	adds	r3, #1
 8009f3a:	617b      	str	r3, [r7, #20]
 8009f3c:	697a      	ldr	r2, [r7, #20]
 8009f3e:	6a3b      	ldr	r3, [r7, #32]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	dbcb      	blt.n	8009edc <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 8009f44:	6a3b      	ldr	r3, [r7, #32]
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3718      	adds	r7, #24
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}

08009f4e <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 8009f4e:	b580      	push	{r7, lr}
 8009f50:	b086      	sub	sp, #24
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	60f8      	str	r0, [r7, #12]
 8009f56:	60b9      	str	r1, [r7, #8]
 8009f58:	607a      	str	r2, [r7, #4]
 8009f5a:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	617b      	str	r3, [r7, #20]
 8009f60:	e017      	b.n	8009f92 <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 8009f62:	697a      	ldr	r2, [r7, #20]
 8009f64:	4613      	mov	r3, r2
 8009f66:	005b      	lsls	r3, r3, #1
 8009f68:	4413      	add	r3, r2
 8009f6a:	009b      	lsls	r3, r3, #2
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	4413      	add	r3, r2
 8009f72:	6818      	ldr	r0, [r3, #0]
 8009f74:	697a      	ldr	r2, [r7, #20]
 8009f76:	4613      	mov	r3, r2
 8009f78:	005b      	lsls	r3, r3, #1
 8009f7a:	4413      	add	r3, r2
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	461a      	mov	r2, r3
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	4413      	add	r3, r2
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	4619      	mov	r1, r3
 8009f88:	f7ff fe7b 	bl	8009c82 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	3301      	adds	r3, #1
 8009f90:	617b      	str	r3, [r7, #20]
 8009f92:	697a      	ldr	r2, [r7, #20]
 8009f94:	6a3b      	ldr	r3, [r7, #32]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	dbe3      	blt.n	8009f62 <metal_generic_dev_dma_unmap+0x14>
	}
}
 8009f9a:	bf00      	nop
 8009f9c:	bf00      	nop
 8009f9e:	3718      	adds	r7, #24
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 8009fac:	2300      	movs	r3, #0
 8009fae:	60fb      	str	r3, [r7, #12]
 8009fb0:	e013      	b.n	8009fda <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 8009fb2:	68fa      	ldr	r2, [r7, #12]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	005b      	lsls	r3, r3, #1
 8009fb8:	4413      	add	r3, r2
 8009fba:	011b      	lsls	r3, r3, #4
 8009fbc:	3308      	adds	r3, #8
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	3304      	adds	r3, #4
 8009fc4:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00b      	beq.n	8009fe6 <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 8009fce:	68b8      	ldr	r0, [r7, #8]
 8009fd0:	f000 f81e 	bl	800a010 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	60fb      	str	r3, [r7, #12]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	68fa      	ldr	r2, [r7, #12]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d3e6      	bcc.n	8009fb2 <metal_generic_dev_sys_open+0xe>
 8009fe4:	e000      	b.n	8009fe8 <metal_generic_dev_sys_open+0x44>
			break;
 8009fe6:	bf00      	nop
	}

	return 0;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3710      	adds	r7, #16
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
	...

08009ff4 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 8009ffc:	4803      	ldr	r0, [pc, #12]	; (800a00c <metal_sys_init+0x18>)
 8009ffe:	f7ff fe4d 	bl	8009c9c <metal_bus_register>
	return 0;
 800a002:	2300      	movs	r3, #0
}
 800a004:	4618      	mov	r0, r3
 800a006:	3708      	adds	r7, #8
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	24000028 	.word	0x24000028

0800a010 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b086      	sub	sp, #24
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	613b      	str	r3, [r7, #16]
	if (psize) {
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d02c      	beq.n	800a084 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	693a      	ldr	r2, [r7, #16]
 800a030:	fa22 f303 	lsr.w	r3, r2, r3
 800a034:	2b00      	cmp	r3, #0
 800a036:	d005      	beq.n	800a044 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	2201      	movs	r2, #1
 800a03e:	fa02 f303 	lsl.w	r3, r2, r3
 800a042:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 800a044:	2300      	movs	r3, #0
 800a046:	617b      	str	r3, [r7, #20]
 800a048:	e013      	b.n	800a072 <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	685a      	ldr	r2, [r3, #4]
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	4413      	add	r3, r2
 800a054:	6819      	ldr	r1, [r3, #0]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	695b      	ldr	r3, [r3, #20]
 800a05a:	693a      	ldr	r2, [r7, #16]
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	f001 fd91 	bl	800bb84 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	68fa      	ldr	r2, [r7, #12]
 800a068:	4413      	add	r3, r2
 800a06a:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	3301      	adds	r3, #1
 800a070:	617b      	str	r3, [r7, #20]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	689a      	ldr	r2, [r3, #8]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	fa22 f303 	lsr.w	r3, r2, r3
 800a07e:	697a      	ldr	r2, [r7, #20]
 800a080:	429a      	cmp	r2, r3
 800a082:	d9e2      	bls.n	800a04a <metal_sys_io_mem_map+0x3a>
		}
	}
}
 800a084:	bf00      	nop
 800a086:	3718      	adds	r7, #24
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <metal_list_init>:
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	605a      	str	r2, [r3, #4]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	685a      	ldr	r2, [r3, #4]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	601a      	str	r2, [r3, #0]
}
 800a0a2:	bf00      	nop
 800a0a4:	370c      	adds	r7, #12
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr
	...

0800a0b0 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
	int error = 0;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 800a0bc:	2220      	movs	r2, #32
 800a0be:	2100      	movs	r1, #0
 800a0c0:	4810      	ldr	r0, [pc, #64]	; (800a104 <metal_init+0x54>)
 800a0c2:	f006 f947 	bl	8010354 <memset>

	_metal.common.log_handler   = params->log_handler;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a0e      	ldr	r2, [pc, #56]	; (800a104 <metal_init+0x54>)
 800a0cc:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	791a      	ldrb	r2, [r3, #4]
 800a0d2:	4b0c      	ldr	r3, [pc, #48]	; (800a104 <metal_init+0x54>)
 800a0d4:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 800a0d6:	480c      	ldr	r0, [pc, #48]	; (800a108 <metal_init+0x58>)
 800a0d8:	f7ff ffd8 	bl	800a08c <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 800a0dc:	480b      	ldr	r0, [pc, #44]	; (800a10c <metal_init+0x5c>)
 800a0de:	f7ff ffd5 	bl	800a08c <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 800a0e2:	480b      	ldr	r0, [pc, #44]	; (800a110 <metal_init+0x60>)
 800a0e4:	f7ff ffd2 	bl	800a08c <metal_list_init>

	error = metal_sys_init(params);
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f7ff ff83 	bl	8009ff4 <metal_sys_init>
 800a0ee:	60f8      	str	r0, [r7, #12]
	if (error)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d001      	beq.n	800a0fa <metal_init+0x4a>
		return error;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	e000      	b.n	800a0fc <metal_init+0x4c>

	return error;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3710      	adds	r7, #16
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}
 800a104:	2400ab68 	.word	0x2400ab68
 800a108:	2400ab70 	.word	0x2400ab70
 800a10c:	2400ab78 	.word	0x2400ab78
 800a110:	2400ab80 	.word	0x2400ab80

0800a114 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 800a122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a126:	d009      	beq.n	800a13c <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	683a      	ldr	r2, [r7, #0]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d804      	bhi.n	800a13c <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681a      	ldr	r2, [r3, #0]
		: NULL);
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	4413      	add	r3, r2
 800a13a:	e000      	b.n	800a13e <metal_io_virt+0x2a>
 800a13c:	2300      	movs	r3, #0
}
 800a13e:	4618      	mov	r0, r3
 800a140:	370c      	adds	r7, #12
 800a142:	46bd      	mov	sp, r7
 800a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a148:	4770      	bx	lr

0800a14a <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 800a14a:	b5b0      	push	{r4, r5, r7, lr}
 800a14c:	b08a      	sub	sp, #40	; 0x28
 800a14e:	af00      	add	r7, sp, #0
 800a150:	60f8      	str	r0, [r7, #12]
 800a152:	60b9      	str	r1, [r7, #8]
 800a154:	607a      	str	r2, [r7, #4]
 800a156:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 800a158:	f107 0310 	add.w	r3, r7, #16
 800a15c:	2200      	movs	r2, #0
 800a15e:	601a      	str	r2, [r3, #0]
 800a160:	605a      	str	r2, [r3, #4]
 800a162:	609a      	str	r2, [r3, #8]
 800a164:	60da      	str	r2, [r3, #12]
 800a166:	611a      	str	r2, [r3, #16]
 800a168:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	68ba      	ldr	r2, [r7, #8]
 800a16e:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	605a      	str	r2, [r3, #4]
	io->size = size;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	683a      	ldr	r2, [r7, #0]
 800a17a:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a180:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 800a182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a184:	2b1f      	cmp	r3, #31
 800a186:	d904      	bls.n	800a192 <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f04f 32ff 	mov.w	r2, #4294967295
 800a18e:	611a      	str	r2, [r3, #16]
 800a190:	e006      	b.n	800a1a0 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 800a192:	2201      	movs	r2, #1
 800a194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a196:	fa02 f303 	lsl.w	r3, r2, r3
 800a19a:	1e5a      	subs	r2, r3, #1
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a1a4:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 800a1a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d00b      	beq.n	800a1c4 <metal_io_init+0x7a>
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a1b0:	f103 0418 	add.w	r4, r3, #24
 800a1b4:	4615      	mov	r5, r2
 800a1b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a1b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a1ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a1be:	e884 0003 	stmia.w	r4, {r0, r1}
 800a1c2:	e00a      	b.n	800a1da <metal_io_init+0x90>
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f103 0418 	add.w	r4, r3, #24
 800a1ca:	f107 0510 	add.w	r5, r7, #16
 800a1ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a1d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a1d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a1d6:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 800a1da:	68f8      	ldr	r0, [r7, #12]
 800a1dc:	f7ff ff18 	bl	800a010 <metal_sys_io_mem_map>
}
 800a1e0:	bf00      	nop
 800a1e2:	3728      	adds	r7, #40	; 0x28
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bdb0      	pop	{r4, r5, r7, pc}

0800a1e8 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 800a1e8:	b590      	push	{r4, r7, lr}
 800a1ea:	b08b      	sub	sp, #44	; 0x2c
 800a1ec:	af02      	add	r7, sp, #8
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	607a      	str	r2, [r7, #4]
 800a1f4:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 800a1f6:	68b9      	ldr	r1, [r7, #8]
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f7ff ff8b 	bl	800a114 <metal_io_virt>
 800a1fe:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	68ba      	ldr	r2, [r7, #8]
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d902      	bls.n	800a214 <metal_io_block_read+0x2c>
		return -ERANGE;
 800a20e:	f06f 0321 	mvn.w	r3, #33	; 0x21
 800a212:	e05c      	b.n	800a2ce <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 800a214:	683a      	ldr	r2, [r7, #0]
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	441a      	add	r2, r3
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	429a      	cmp	r2, r3
 800a220:	d904      	bls.n	800a22c <metal_io_block_read+0x44>
		len = io->size - offset;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	689a      	ldr	r2, [r3, #8]
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	1ad3      	subs	r3, r2, r3
 800a22a:	603b      	str	r3, [r7, #0]
	retlen = len;
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	6a1b      	ldr	r3, [r3, #32]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00a      	beq.n	800a24e <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6a1c      	ldr	r4, [r3, #32]
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	9300      	str	r3, [sp, #0]
 800a240:	2305      	movs	r3, #5
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	68b9      	ldr	r1, [r7, #8]
 800a246:	68f8      	ldr	r0, [r7, #12]
 800a248:	47a0      	blx	r4
 800a24a:	6178      	str	r0, [r7, #20]
 800a24c:	e03e      	b.n	800a2cc <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 800a24e:	f3bf 8f5b 	dmb	ish
		while ( len && (
 800a252:	e00c      	b.n	800a26e <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 800a254:	69fb      	ldr	r3, [r7, #28]
 800a256:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 800a258:	69bb      	ldr	r3, [r7, #24]
 800a25a:	701a      	strb	r2, [r3, #0]
			dest++;
 800a25c:	69bb      	ldr	r3, [r7, #24]
 800a25e:	3301      	adds	r3, #1
 800a260:	61bb      	str	r3, [r7, #24]
			ptr++;
 800a262:	69fb      	ldr	r3, [r7, #28]
 800a264:	3301      	adds	r3, #1
 800a266:	61fb      	str	r3, [r7, #28]
			len--;
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	3b01      	subs	r3, #1
 800a26c:	603b      	str	r3, [r7, #0]
		while ( len && (
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d017      	beq.n	800a2a4 <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d1ea      	bne.n	800a254 <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 800a284:	2b00      	cmp	r3, #0
 800a286:	d1e5      	bne.n	800a254 <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 800a288:	e00c      	b.n	800a2a4 <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 800a28a:	69fb      	ldr	r3, [r7, #28]
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	69bb      	ldr	r3, [r7, #24]
 800a290:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 800a292:	69bb      	ldr	r3, [r7, #24]
 800a294:	3304      	adds	r3, #4
 800a296:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 800a298:	69fb      	ldr	r3, [r7, #28]
 800a29a:	3304      	adds	r3, #4
 800a29c:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	3b04      	subs	r3, #4
 800a2a2:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	2b03      	cmp	r3, #3
 800a2a8:	dcef      	bgt.n	800a28a <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 800a2aa:	e00c      	b.n	800a2c6 <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 800a2ac:	69fb      	ldr	r3, [r7, #28]
 800a2ae:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 800a2b0:	69bb      	ldr	r3, [r7, #24]
 800a2b2:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 800a2b4:	69bb      	ldr	r3, [r7, #24]
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	61bb      	str	r3, [r7, #24]
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	3301      	adds	r3, #1
 800a2be:	61fb      	str	r3, [r7, #28]
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	3b01      	subs	r3, #1
 800a2c4:	603b      	str	r3, [r7, #0]
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d1ef      	bne.n	800a2ac <metal_io_block_read+0xc4>
	}
	return retlen;
 800a2cc:	697b      	ldr	r3, [r7, #20]
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3724      	adds	r7, #36	; 0x24
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd90      	pop	{r4, r7, pc}

0800a2d6 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 800a2d6:	b590      	push	{r4, r7, lr}
 800a2d8:	b08b      	sub	sp, #44	; 0x2c
 800a2da:	af02      	add	r7, sp, #8
 800a2dc:	60f8      	str	r0, [r7, #12]
 800a2de:	60b9      	str	r1, [r7, #8]
 800a2e0:	607a      	str	r2, [r7, #4]
 800a2e2:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 800a2e4:	68b9      	ldr	r1, [r7, #8]
 800a2e6:	68f8      	ldr	r0, [r7, #12]
 800a2e8:	f7ff ff14 	bl	800a114 <metal_io_virt>
 800a2ec:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	68ba      	ldr	r2, [r7, #8]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d902      	bls.n	800a302 <metal_io_block_write+0x2c>
		return -ERANGE;
 800a2fc:	f06f 0321 	mvn.w	r3, #33	; 0x21
 800a300:	e05b      	b.n	800a3ba <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 800a302:	683a      	ldr	r2, [r7, #0]
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	441a      	add	r2, r3
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	689b      	ldr	r3, [r3, #8]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d904      	bls.n	800a31a <metal_io_block_write+0x44>
		len = io->size - offset;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	689a      	ldr	r2, [r3, #8]
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	1ad3      	subs	r3, r2, r3
 800a318:	603b      	str	r3, [r7, #0]
	retlen = len;
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a322:	2b00      	cmp	r3, #0
 800a324:	d017      	beq.n	800a356 <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	9300      	str	r3, [sp, #0]
 800a32e:	2305      	movs	r3, #5
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	68b9      	ldr	r1, [r7, #8]
 800a334:	68f8      	ldr	r0, [r7, #12]
 800a336:	47a0      	blx	r4
 800a338:	6178      	str	r0, [r7, #20]
 800a33a:	e03d      	b.n	800a3b8 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	701a      	strb	r2, [r3, #0]
			ptr++;
 800a344:	69fb      	ldr	r3, [r7, #28]
 800a346:	3301      	adds	r3, #1
 800a348:	61fb      	str	r3, [r7, #28]
			source++;
 800a34a:	69bb      	ldr	r3, [r7, #24]
 800a34c:	3301      	adds	r3, #1
 800a34e:	61bb      	str	r3, [r7, #24]
			len--;
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	3b01      	subs	r3, #1
 800a354:	603b      	str	r3, [r7, #0]
		while ( len && (
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d017      	beq.n	800a38c <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 800a35c:	69fb      	ldr	r3, [r7, #28]
 800a35e:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 800a362:	2b00      	cmp	r3, #0
 800a364:	d1ea      	bne.n	800a33c <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 800a366:	69bb      	ldr	r3, [r7, #24]
 800a368:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d1e5      	bne.n	800a33c <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800a370:	e00c      	b.n	800a38c <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 800a372:	69bb      	ldr	r3, [r7, #24]
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	69fb      	ldr	r3, [r7, #28]
 800a378:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800a37a:	69fb      	ldr	r3, [r7, #28]
 800a37c:	3304      	adds	r3, #4
 800a37e:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	3304      	adds	r3, #4
 800a384:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	3b04      	subs	r3, #4
 800a38a:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	2b03      	cmp	r3, #3
 800a390:	dcef      	bgt.n	800a372 <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 800a392:	e00c      	b.n	800a3ae <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 800a394:	69bb      	ldr	r3, [r7, #24]
 800a396:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 800a398:	69fb      	ldr	r3, [r7, #28]
 800a39a:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 800a39c:	69fb      	ldr	r3, [r7, #28]
 800a39e:	3301      	adds	r3, #1
 800a3a0:	61fb      	str	r3, [r7, #28]
 800a3a2:	69bb      	ldr	r3, [r7, #24]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	61bb      	str	r3, [r7, #24]
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	603b      	str	r3, [r7, #0]
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d1ef      	bne.n	800a394 <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 800a3b4:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 800a3b8:	697b      	ldr	r3, [r7, #20]
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3724      	adds	r7, #36	; 0x24
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd90      	pop	{r4, r7, pc}

0800a3c2 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
 800a3c2:	b590      	push	{r4, r7, lr}
 800a3c4:	b08b      	sub	sp, #44	; 0x2c
 800a3c6:	af02      	add	r7, sp, #8
 800a3c8:	60f8      	str	r0, [r7, #12]
 800a3ca:	60b9      	str	r1, [r7, #8]
 800a3cc:	603b      	str	r3, [r7, #0]
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = metal_io_virt(io, offset);
 800a3d2:	68b9      	ldr	r1, [r7, #8]
 800a3d4:	68f8      	ldr	r0, [r7, #12]
 800a3d6:	f7ff fe9d 	bl	800a114 <metal_io_virt>
 800a3da:	61f8      	str	r0, [r7, #28]
	int retlen = len;
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	613b      	str	r3, [r7, #16]

	if (offset > io->size)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	689b      	ldr	r3, [r3, #8]
 800a3e4:	68ba      	ldr	r2, [r7, #8]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d902      	bls.n	800a3f0 <metal_io_block_set+0x2e>
		return -ERANGE;
 800a3ea:	f06f 0321 	mvn.w	r3, #33	; 0x21
 800a3ee:	e05d      	b.n	800a4ac <metal_io_block_set+0xea>
	if ((offset + len) > io->size)
 800a3f0:	683a      	ldr	r2, [r7, #0]
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	441a      	add	r2, r3
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	689b      	ldr	r3, [r3, #8]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d904      	bls.n	800a408 <metal_io_block_set+0x46>
		len = io->size - offset;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	689a      	ldr	r2, [r3, #8]
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	1ad3      	subs	r3, r2, r3
 800a406:	603b      	str	r3, [r7, #0]
	retlen = len;
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	613b      	str	r3, [r7, #16]
	if (io->ops.block_set) {
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a410:	2b00      	cmp	r3, #0
 800a412:	d009      	beq.n	800a428 <metal_io_block_set+0x66>
		(*io->ops.block_set)(
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800a418:	79fa      	ldrb	r2, [r7, #7]
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	9300      	str	r3, [sp, #0]
 800a41e:	2305      	movs	r3, #5
 800a420:	68b9      	ldr	r1, [r7, #8]
 800a422:	68f8      	ldr	r0, [r7, #12]
 800a424:	47a0      	blx	r4
 800a426:	e040      	b.n	800a4aa <metal_io_block_set+0xe8>
			io, offset, value, memory_order_seq_cst, len);
	} else {
		unsigned int cint = value;
 800a428:	79fb      	ldrb	r3, [r7, #7]
 800a42a:	61bb      	str	r3, [r7, #24]
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
 800a42c:	2301      	movs	r3, #1
 800a42e:	617b      	str	r3, [r7, #20]
 800a430:	e00a      	b.n	800a448 <metal_io_block_set+0x86>
			cint |= ((unsigned int)value << (8 * i));
 800a432:	79fa      	ldrb	r2, [r7, #7]
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	00db      	lsls	r3, r3, #3
 800a438:	fa02 f303 	lsl.w	r3, r2, r3
 800a43c:	69ba      	ldr	r2, [r7, #24]
 800a43e:	4313      	orrs	r3, r2
 800a440:	61bb      	str	r3, [r7, #24]
		for (i = 1; i < sizeof(int); i++)
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	3301      	adds	r3, #1
 800a446:	617b      	str	r3, [r7, #20]
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	2b03      	cmp	r3, #3
 800a44c:	d9f1      	bls.n	800a432 <metal_io_block_set+0x70>

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 800a44e:	e008      	b.n	800a462 <metal_io_block_set+0xa0>
			*(unsigned char *)ptr = (unsigned char) value;
 800a450:	69fb      	ldr	r3, [r7, #28]
 800a452:	79fa      	ldrb	r2, [r7, #7]
 800a454:	701a      	strb	r2, [r3, #0]
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	3301      	adds	r3, #1
 800a45a:	61fb      	str	r3, [r7, #28]
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	3b01      	subs	r3, #1
 800a460:	603b      	str	r3, [r7, #0]
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d00e      	beq.n	800a486 <metal_io_block_set+0xc4>
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	f003 0303 	and.w	r3, r3, #3
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d1ee      	bne.n	800a450 <metal_io_block_set+0x8e>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800a472:	e008      	b.n	800a486 <metal_io_block_set+0xc4>
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
 800a474:	69fb      	ldr	r3, [r7, #28]
 800a476:	69ba      	ldr	r2, [r7, #24]
 800a478:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800a47a:	69fb      	ldr	r3, [r7, #28]
 800a47c:	3304      	adds	r3, #4
 800a47e:	61fb      	str	r3, [r7, #28]
						len -= sizeof(int))
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	3b04      	subs	r3, #4
 800a484:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	2b03      	cmp	r3, #3
 800a48a:	dcf3      	bgt.n	800a474 <metal_io_block_set+0xb2>
		for (; len != 0; ptr++, len--)
 800a48c:	e008      	b.n	800a4a0 <metal_io_block_set+0xde>
			*(unsigned char *)ptr = (unsigned char) value;
 800a48e:	69fb      	ldr	r3, [r7, #28]
 800a490:	79fa      	ldrb	r2, [r7, #7]
 800a492:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, len--)
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	3301      	adds	r3, #1
 800a498:	61fb      	str	r3, [r7, #28]
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	3b01      	subs	r3, #1
 800a49e:	603b      	str	r3, [r7, #0]
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d1f3      	bne.n	800a48e <metal_io_block_set+0xcc>
		atomic_thread_fence(memory_order_seq_cst);
 800a4a6:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 800a4aa:	693b      	ldr	r3, [r7, #16]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3724      	adds	r7, #36	; 0x24
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd90      	pop	{r4, r7, pc}

0800a4b4 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 800a4b4:	b40e      	push	{r1, r2, r3}
 800a4b6:	b480      	push	{r7}
 800a4b8:	b082      	sub	sp, #8
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	4603      	mov	r3, r0
 800a4be:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 800a4c0:	bf00      	nop
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	b003      	add	sp, #12
 800a4cc:	4770      	bx	lr

0800a4ce <metal_io_virt>:
{
 800a4ce:	b480      	push	{r7}
 800a4d0:	b083      	sub	sp, #12
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
 800a4d6:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
		: NULL);
 800a4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4e0:	d009      	beq.n	800a4f6 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	683a      	ldr	r2, [r7, #0]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d804      	bhi.n	800a4f6 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681a      	ldr	r2, [r3, #0]
		: NULL);
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	e000      	b.n	800a4f8 <metal_io_virt+0x2a>
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 800a504:	b480      	push	{r7}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	683a      	ldr	r2, [r7, #0]
 800a514:	1ad3      	subs	r3, r2, r3
 800a516:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	68fa      	ldr	r2, [r7, #12]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d201      	bcs.n	800a526 <metal_io_virt_to_offset+0x22>
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	e001      	b.n	800a52a <metal_io_virt_to_offset+0x26>
 800a526:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3714      	adds	r7, #20
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr
	...

0800a538 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 800a538:	b590      	push	{r4, r7, lr}
 800a53a:	b08d      	sub	sp, #52	; 0x34
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	603b      	str	r3, [r7, #0]
 800a544:	4613      	mov	r3, r2
 800a546:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 800a548:	68b9      	ldr	r1, [r7, #8]
 800a54a:	68f8      	ldr	r0, [r7, #12]
 800a54c:	f7ff ffbf 	bl	800a4ce <metal_io_virt>
 800a550:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	699b      	ldr	r3, [r3, #24]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d009      	beq.n	800a56e <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	699c      	ldr	r4, [r3, #24]
 800a55e:	79fa      	ldrb	r2, [r7, #7]
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	68b9      	ldr	r1, [r7, #8]
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	47a0      	blx	r4
 800a568:	4602      	mov	r2, r0
 800a56a:	460b      	mov	r3, r1
 800a56c:	e057      	b.n	800a61e <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uchar) == width)
 800a56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a570:	2b00      	cmp	r3, #0
 800a572:	d011      	beq.n	800a598 <metal_io_read+0x60>
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	2b01      	cmp	r3, #1
 800a578:	d10e      	bne.n	800a598 <metal_io_read+0x60>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 800a57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a57c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a580:	f3bf 8f5b 	dmb	ish
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	f3bf 8f5b 	dmb	ish
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	76fb      	strb	r3, [r7, #27]
 800a58e:	7efb      	ldrb	r3, [r7, #27]
 800a590:	b2da      	uxtb	r2, r3
 800a592:	f04f 0300 	mov.w	r3, #0
 800a596:	e042      	b.n	800a61e <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ushort) == width)
 800a598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d011      	beq.n	800a5c2 <metal_io_read+0x8a>
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	2b02      	cmp	r3, #2
 800a5a2:	d10e      	bne.n	800a5c2 <metal_io_read+0x8a>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 800a5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a6:	627b      	str	r3, [r7, #36]	; 0x24
 800a5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5aa:	f3bf 8f5b 	dmb	ish
 800a5ae:	881b      	ldrh	r3, [r3, #0]
 800a5b0:	f3bf 8f5b 	dmb	ish
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	833b      	strh	r3, [r7, #24]
 800a5b8:	8b3b      	ldrh	r3, [r7, #24]
 800a5ba:	b29a      	uxth	r2, r3
 800a5bc:	f04f 0300 	mov.w	r3, #0
 800a5c0:	e02d      	b.n	800a61e <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uint) == width)
 800a5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d010      	beq.n	800a5ea <metal_io_read+0xb2>
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	2b04      	cmp	r3, #4
 800a5cc:	d10d      	bne.n	800a5ea <metal_io_read+0xb2>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 800a5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d0:	623b      	str	r3, [r7, #32]
 800a5d2:	6a3b      	ldr	r3, [r7, #32]
 800a5d4:	f3bf 8f5b 	dmb	ish
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f3bf 8f5b 	dmb	ish
 800a5de:	617b      	str	r3, [r7, #20]
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	f04f 0300 	mov.w	r3, #0
 800a5e8:	e019      	b.n	800a61e <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ulong) == width)
 800a5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d010      	beq.n	800a612 <metal_io_read+0xda>
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	2b04      	cmp	r3, #4
 800a5f4:	d10d      	bne.n	800a612 <metal_io_read+0xda>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 800a5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f8:	61fb      	str	r3, [r7, #28]
 800a5fa:	69fb      	ldr	r3, [r7, #28]
 800a5fc:	f3bf 8f5b 	dmb	ish
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f3bf 8f5b 	dmb	ish
 800a606:	613b      	str	r3, [r7, #16]
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	461a      	mov	r2, r3
 800a60c:	f04f 0300 	mov.w	r3, #0
 800a610:	e005      	b.n	800a61e <metal_io_read+0xe6>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 800a612:	4b05      	ldr	r3, [pc, #20]	; (800a628 <metal_io_read+0xf0>)
 800a614:	4a05      	ldr	r2, [pc, #20]	; (800a62c <metal_io_read+0xf4>)
 800a616:	21f0      	movs	r1, #240	; 0xf0
 800a618:	4805      	ldr	r0, [pc, #20]	; (800a630 <metal_io_read+0xf8>)
 800a61a:	f005 fe09 	bl	8010230 <__assert_func>
	return 0; /* quiet compiler */
}
 800a61e:	4610      	mov	r0, r2
 800a620:	4619      	mov	r1, r3
 800a622:	3734      	adds	r7, #52	; 0x34
 800a624:	46bd      	mov	sp, r7
 800a626:	bd90      	pop	{r4, r7, pc}
 800a628:	080152d8 	.word	0x080152d8
 800a62c:	0801dc38 	.word	0x0801dc38
 800a630:	080152dc 	.word	0x080152dc

0800a634 <metal_io_write>:
 *			to inline cleanly.
 */
static inline void
metal_io_write(struct metal_io_region *io, unsigned long offset,
	       uint64_t value, memory_order order, int width)
{
 800a634:	b590      	push	{r4, r7, lr}
 800a636:	b08f      	sub	sp, #60	; 0x3c
 800a638:	af02      	add	r7, sp, #8
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	e9c7 2300 	strd	r2, r3, [r7]
	void *ptr = metal_io_virt(io, offset);
 800a642:	68b9      	ldr	r1, [r7, #8]
 800a644:	68f8      	ldr	r0, [r7, #12]
 800a646:	f7ff ff42 	bl	800a4ce <metal_io_virt>
 800a64a:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (io->ops.write)
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	69db      	ldr	r3, [r3, #28]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d00c      	beq.n	800a66e <metal_io_write+0x3a>
		(*io->ops.write)(io, offset, value, order, width);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	69dc      	ldr	r4, [r3, #28]
 800a658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a65a:	9301      	str	r3, [sp, #4]
 800a65c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a660:	9300      	str	r3, [sp, #0]
 800a662:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a666:	68b9      	ldr	r1, [r7, #8]
 800a668:	68f8      	ldr	r0, [r7, #12]
 800a66a:	47a0      	blx	r4
	else if (ptr && sizeof(atomic_ullong) == width)
		atomic_store_explicit((atomic_ullong *)ptr, value, order);
#endif
	else
		metal_assert (0);
}
 800a66c:	e04e      	b.n	800a70c <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uchar) == width)
 800a66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a670:	2b00      	cmp	r3, #0
 800a672:	d00e      	beq.n	800a692 <metal_io_write+0x5e>
 800a674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a676:	2b01      	cmp	r3, #1
 800a678:	d10b      	bne.n	800a692 <metal_io_write+0x5e>
		atomic_store_explicit((atomic_uchar *)ptr, value, order);
 800a67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a67e:	783b      	ldrb	r3, [r7, #0]
 800a680:	76fb      	strb	r3, [r7, #27]
 800a682:	7efa      	ldrb	r2, [r7, #27]
 800a684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a686:	f3bf 8f5b 	dmb	ish
 800a68a:	701a      	strb	r2, [r3, #0]
 800a68c:	f3bf 8f5b 	dmb	ish
 800a690:	e03c      	b.n	800a70c <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ushort) == width)
 800a692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a694:	2b00      	cmp	r3, #0
 800a696:	d00e      	beq.n	800a6b6 <metal_io_write+0x82>
 800a698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a69a:	2b02      	cmp	r3, #2
 800a69c:	d10b      	bne.n	800a6b6 <metal_io_write+0x82>
		atomic_store_explicit((atomic_ushort *)ptr, value, order);
 800a69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a0:	627b      	str	r3, [r7, #36]	; 0x24
 800a6a2:	883b      	ldrh	r3, [r7, #0]
 800a6a4:	833b      	strh	r3, [r7, #24]
 800a6a6:	8b3a      	ldrh	r2, [r7, #24]
 800a6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6aa:	f3bf 8f5b 	dmb	ish
 800a6ae:	801a      	strh	r2, [r3, #0]
 800a6b0:	f3bf 8f5b 	dmb	ish
 800a6b4:	e02a      	b.n	800a70c <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uint) == width)
 800a6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00e      	beq.n	800a6da <metal_io_write+0xa6>
 800a6bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6be:	2b04      	cmp	r3, #4
 800a6c0:	d10b      	bne.n	800a6da <metal_io_write+0xa6>
		atomic_store_explicit((atomic_uint *)ptr, value, order);
 800a6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c4:	623b      	str	r3, [r7, #32]
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	617b      	str	r3, [r7, #20]
 800a6ca:	697a      	ldr	r2, [r7, #20]
 800a6cc:	6a3b      	ldr	r3, [r7, #32]
 800a6ce:	f3bf 8f5b 	dmb	ish
 800a6d2:	601a      	str	r2, [r3, #0]
 800a6d4:	f3bf 8f5b 	dmb	ish
 800a6d8:	e018      	b.n	800a70c <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ulong) == width)
 800a6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d00e      	beq.n	800a6fe <metal_io_write+0xca>
 800a6e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6e2:	2b04      	cmp	r3, #4
 800a6e4:	d10b      	bne.n	800a6fe <metal_io_write+0xca>
		atomic_store_explicit((atomic_ulong *)ptr, value, order);
 800a6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e8:	61fb      	str	r3, [r7, #28]
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	613b      	str	r3, [r7, #16]
 800a6ee:	693a      	ldr	r2, [r7, #16]
 800a6f0:	69fb      	ldr	r3, [r7, #28]
 800a6f2:	f3bf 8f5b 	dmb	ish
 800a6f6:	601a      	str	r2, [r3, #0]
 800a6f8:	f3bf 8f5b 	dmb	ish
 800a6fc:	e006      	b.n	800a70c <metal_io_write+0xd8>
		metal_assert (0);
 800a6fe:	4b05      	ldr	r3, [pc, #20]	; (800a714 <metal_io_write+0xe0>)
 800a700:	4a05      	ldr	r2, [pc, #20]	; (800a718 <metal_io_write+0xe4>)
 800a702:	f44f 7189 	mov.w	r1, #274	; 0x112
 800a706:	4805      	ldr	r0, [pc, #20]	; (800a71c <metal_io_write+0xe8>)
 800a708:	f005 fd92 	bl	8010230 <__assert_func>
}
 800a70c:	bf00      	nop
 800a70e:	3734      	adds	r7, #52	; 0x34
 800a710:	46bd      	mov	sp, r7
 800a712:	bd90      	pop	{r4, r7, pc}
 800a714:	080152d8 	.word	0x080152d8
 800a718:	0801dc48 	.word	0x0801dc48
 800a71c:	080152dc 	.word	0x080152dc

0800a720 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f005 fddb 	bl	80102e4 <malloc>
 800a72e:	4603      	mov	r3, r0
}
 800a730:	4618      	mov	r0, r3
 800a732:	3708      	adds	r7, #8
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
	free(ptr);
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f005 fdd7 	bl	80102f4 <free>
}
 800a746:	bf00      	nop
 800a748:	3708      	adds	r7, #8
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}

0800a74e <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 800a74e:	b580      	push	{r7, lr}
 800a750:	b084      	sub	sp, #16
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	3307      	adds	r3, #7
 800a75a:	00db      	lsls	r3, r3, #3
 800a75c:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 800a75e:	68f8      	ldr	r0, [r7, #12]
 800a760:	f7ff ffde 	bl	800a720 <metal_allocate_memory>
 800a764:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d004      	beq.n	800a776 <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	2100      	movs	r1, #0
 800a770:	68b8      	ldr	r0, [r7, #8]
 800a772:	f005 fdef 	bl	8010354 <memset>
	}

	return vqs;
 800a776:	68bb      	ldr	r3, [r7, #8]
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3710      	adds	r7, #16
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b086      	sub	sp, #24
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	891b      	ldrh	r3, [r3, #8]
 800a78c:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	3b18      	subs	r3, #24
 800a798:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a79e:	697a      	ldr	r2, [r7, #20]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d905      	bls.n	800a7b0 <rproc_virtio_virtqueue_notify+0x30>
 800a7a4:	4b0d      	ldr	r3, [pc, #52]	; (800a7dc <rproc_virtio_virtqueue_notify+0x5c>)
 800a7a6:	4a0e      	ldr	r2, [pc, #56]	; (800a7e0 <rproc_virtio_virtqueue_notify+0x60>)
 800a7a8:	2133      	movs	r1, #51	; 0x33
 800a7aa:	480e      	ldr	r0, [pc, #56]	; (800a7e4 <rproc_virtio_virtqueue_notify+0x64>)
 800a7ac:	f005 fd40 	bl	8010230 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a7b4:	697a      	ldr	r2, [r7, #20]
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	005b      	lsls	r3, r3, #1
 800a7ba:	4413      	add	r3, r2
 800a7bc:	00db      	lsls	r3, r3, #3
 800a7be:	440b      	add	r3, r1
 800a7c0:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	691b      	ldr	r3, [r3, #16]
 800a7c6:	68fa      	ldr	r2, [r7, #12]
 800a7c8:	6810      	ldr	r0, [r2, #0]
 800a7ca:	68ba      	ldr	r2, [r7, #8]
 800a7cc:	6912      	ldr	r2, [r2, #16]
 800a7ce:	4611      	mov	r1, r2
 800a7d0:	4798      	blx	r3
}
 800a7d2:	bf00      	nop
 800a7d4:	3718      	adds	r7, #24
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	08015324 	.word	0x08015324
 800a7e0:	0801dc18 	.word	0x0801dc18
 800a7e4:	08015340 	.word	0x08015340

0800a7e8 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b086      	sub	sp, #24
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	3b18      	subs	r3, #24
 800a7f4:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	689b      	ldr	r3, [r3, #8]
 800a7fa:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	3318      	adds	r3, #24
 800a806:	4619      	mov	r1, r3
 800a808:	68f8      	ldr	r0, [r7, #12]
 800a80a:	f7ff fe7b 	bl	800a504 <metal_io_virt_to_offset>
 800a80e:	4601      	mov	r1, r0
 800a810:	2301      	movs	r3, #1
 800a812:	2205      	movs	r2, #5
 800a814:	68f8      	ldr	r0, [r7, #12]
 800a816:	f7ff fe8f 	bl	800a538 <metal_io_read>
 800a81a:	4602      	mov	r2, r0
 800a81c:	460b      	mov	r3, r1
 800a81e:	4613      	mov	r3, r2
 800a820:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 800a822:	7afb      	ldrb	r3, [r7, #11]
}
 800a824:	4618      	mov	r0, r3
 800a826:	3718      	adds	r7, #24
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <rproc_virtio_set_status>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_status(struct virtio_device *vdev,
				    unsigned char status)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b088      	sub	sp, #32
 800a830:	af02      	add	r7, sp, #8
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	460b      	mov	r3, r1
 800a836:	70fb      	strb	r3, [r7, #3]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	3b18      	subs	r3, #24
 800a83c:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	60fb      	str	r3, [r7, #12]
	metal_io_write8(io,
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	3318      	adds	r3, #24
 800a84e:	4619      	mov	r1, r3
 800a850:	68f8      	ldr	r0, [r7, #12]
 800a852:	f7ff fe57 	bl	800a504 <metal_io_virt_to_offset>
 800a856:	4601      	mov	r1, r0
 800a858:	78fa      	ldrb	r2, [r7, #3]
 800a85a:	f04f 0300 	mov.w	r3, #0
 800a85e:	2001      	movs	r0, #1
 800a860:	9001      	str	r0, [sp, #4]
 800a862:	2005      	movs	r0, #5
 800a864:	9000      	str	r0, [sp, #0]
 800a866:	68f8      	ldr	r0, [r7, #12]
 800a868:	f7ff fee4 	bl	800a634 <metal_io_write>
			metal_io_virt_to_offset(io, &vdev_rsc->status),
			status);
	rpvdev->notify(rpvdev->priv, vdev->index);
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	691b      	ldr	r3, [r3, #16]
 800a870:	697a      	ldr	r2, [r7, #20]
 800a872:	6810      	ldr	r0, [r2, #0]
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	6812      	ldr	r2, [r2, #0]
 800a878:	4611      	mov	r1, r2
 800a87a:	4798      	blx	r3
}
 800a87c:	bf00      	nop
 800a87e:	3718      	adds	r7, #24
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <rproc_virtio_get_features>:
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b086      	sub	sp, #24
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	3b18      	subs	r3, #24
 800a890:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	689b      	ldr	r3, [r3, #8]
 800a896:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	68db      	ldr	r3, [r3, #12]
 800a89c:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	330c      	adds	r3, #12
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f7ff fe2d 	bl	800a504 <metal_io_virt_to_offset>
 800a8aa:	4601      	mov	r1, r0
 800a8ac:	2304      	movs	r3, #4
 800a8ae:	2205      	movs	r2, #5
 800a8b0:	68f8      	ldr	r0, [r7, #12]
 800a8b2:	f7ff fe41 	bl	800a538 <metal_io_read>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 800a8be:	68bb      	ldr	r3, [r7, #8]
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3718      	adds	r7, #24
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <rproc_virtio_set_features>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_features(struct virtio_device *vdev,
				      uint32_t features)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b088      	sub	sp, #32
 800a8cc:	af02      	add	r7, sp, #8
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	3b18      	subs	r3, #24
 800a8d6:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	68db      	ldr	r3, [r3, #12]
 800a8e2:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we set features based on the role ? */
	metal_io_write32(io,
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	330c      	adds	r3, #12
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	68f8      	ldr	r0, [r7, #12]
 800a8ec:	f7ff fe0a 	bl	800a504 <metal_io_virt_to_offset>
 800a8f0:	4601      	mov	r1, r0
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	f04f 0300 	mov.w	r3, #0
 800a8fa:	2004      	movs	r0, #4
 800a8fc:	9001      	str	r0, [sp, #4]
 800a8fe:	2005      	movs	r0, #5
 800a900:	9000      	str	r0, [sp, #0]
 800a902:	68f8      	ldr	r0, [r7, #12]
 800a904:	f7ff fe96 	bl	800a634 <metal_io_write>
			 metal_io_virt_to_offset(io, &vdev_rsc->dfeatures),
			 features);
	rpvdev->notify(rpvdev->priv, vdev->index);
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	691b      	ldr	r3, [r3, #16]
 800a90c:	697a      	ldr	r2, [r7, #20]
 800a90e:	6810      	ldr	r0, [r2, #0]
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	6812      	ldr	r2, [r2, #0]
 800a914:	4611      	mov	r1, r2
 800a916:	4798      	blx	r3
}
 800a918:	bf00      	nop
 800a91a:	3718      	adds	r7, #24
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <rproc_virtio_negotiate_features>:
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 800a92a:	2300      	movs	r3, #0
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	370c      	adds	r7, #12
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr

0800a938 <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 800a938:	b480      	push	{r7}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	607a      	str	r2, [r7, #4]
 800a944:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 800a946:	bf00      	nop
 800a948:	3714      	adds	r7, #20
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr

0800a952 <rproc_virtio_write_config>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_write_config(struct virtio_device *vdev,
				      uint32_t offset, void *src, int length)
{
 800a952:	b480      	push	{r7}
 800a954:	b085      	sub	sp, #20
 800a956:	af00      	add	r7, sp, #0
 800a958:	60f8      	str	r0, [r7, #12]
 800a95a:	60b9      	str	r1, [r7, #8]
 800a95c:	607a      	str	r2, [r7, #4]
 800a95e:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)src;
	(void)length;
}
 800a960:	bf00      	nop
 800a962:	3714      	adds	r7, #20
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <rproc_virtio_reset_device>:

static void rproc_virtio_reset_device(struct virtio_device *vdev)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b082      	sub	sp, #8
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
	if (vdev->role == VIRTIO_DEV_MASTER)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	699b      	ldr	r3, [r3, #24]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d103      	bne.n	800a984 <rproc_virtio_reset_device+0x18>
		rproc_virtio_set_status(vdev,
 800a97c:	2140      	movs	r1, #64	; 0x40
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f7ff ff54 	bl	800a82c <rproc_virtio_set_status>
					VIRTIO_CONFIG_STATUS_NEEDS_RESET);
}
 800a984:	bf00      	nop
 800a986:	3708      	adds	r7, #8
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b08e      	sub	sp, #56	; 0x38
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	607a      	str	r2, [r7, #4]
 800a998:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 800a99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a0:	7e5b      	ldrb	r3, [r3, #25]
 800a9a2:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 800a9a4:	2050      	movs	r0, #80	; 0x50
 800a9a6:	f7ff febb 	bl	800a720 <metal_allocate_memory>
 800a9aa:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
 800a9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d101      	bne.n	800a9b6 <rproc_virtio_create_vdev+0x2a>
		return NULL;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	e092      	b.n	800aadc <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 800a9b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9b8:	4613      	mov	r3, r2
 800a9ba:	005b      	lsls	r3, r3, #1
 800a9bc:	4413      	add	r3, r2
 800a9be:	00db      	lsls	r3, r3, #3
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7ff fead 	bl	800a720 <metal_allocate_memory>
 800a9c6:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 800a9c8:	6a3b      	ldr	r3, [r7, #32]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	f000 8081 	beq.w	800aad2 <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 800a9d0:	2250      	movs	r2, #80	; 0x50
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a9d6:	f005 fcbd 	bl	8010354 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 800a9da:	2218      	movs	r2, #24
 800a9dc:	2100      	movs	r1, #0
 800a9de:	6a38      	ldr	r0, [r7, #32]
 800a9e0:	f005 fcb8 	bl	8010354 <memset>
	vdev = &rpvdev->vdev;
 800a9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e6:	3318      	adds	r3, #24
 800a9e8:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	637b      	str	r3, [r7, #52]	; 0x34
 800a9ee:	e025      	b.n	800aa3c <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
 800a9f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9f6:	4613      	mov	r3, r2
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	4413      	add	r3, r2
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	3318      	adds	r3, #24
 800aa00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa02:	4413      	add	r3, r2
 800aa04:	3304      	adds	r3, #4
 800aa06:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d102      	bne.n	800aa14 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 800aa0e:	69bb      	ldr	r3, [r7, #24]
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 800aa14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa16:	f7ff fe9a 	bl	800a74e <virtqueue_allocate>
 800aa1a:	6178      	str	r0, [r7, #20]
		if (!vq)
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d031      	beq.n	800aa86 <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 800aa22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa24:	4613      	mov	r3, r2
 800aa26:	005b      	lsls	r3, r3, #1
 800aa28:	4413      	add	r3, r2
 800aa2a:	00db      	lsls	r3, r3, #3
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	6a3b      	ldr	r3, [r7, #32]
 800aa30:	4413      	add	r3, r2
 800aa32:	697a      	ldr	r2, [r7, #20]
 800aa34:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 800aa36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa38:	3301      	adds	r3, #1
 800aa3a:	637b      	str	r3, [r7, #52]	; 0x34
 800aa3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d3d5      	bcc.n	800a9f0 <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 800aa44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa48:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 800aa4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa4e:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 800aa50:	69fb      	ldr	r3, [r7, #28]
 800aa52:	6a3a      	ldr	r2, [r7, #32]
 800aa54:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 800aa56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa5a:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 800aa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5e:	683a      	ldr	r2, [r7, #0]
 800aa60:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 800aa62:	69fb      	ldr	r3, [r7, #28]
 800aa64:	68ba      	ldr	r2, [r7, #8]
 800aa66:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 800aa68:	69fb      	ldr	r3, [r7, #28]
 800aa6a:	68fa      	ldr	r2, [r7, #12]
 800aa6c:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 800aa6e:	69fb      	ldr	r3, [r7, #28]
 800aa70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa72:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 800aa74:	69fb      	ldr	r3, [r7, #28]
 800aa76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa78:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	4a19      	ldr	r2, [pc, #100]	; (800aae4 <rproc_virtio_create_vdev+0x158>)
 800aa7e:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 800aa80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa82:	3318      	adds	r3, #24
 800aa84:	e02a      	b.n	800aadc <rproc_virtio_create_vdev+0x150>
			goto err1;
 800aa86:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 800aa88:	2300      	movs	r3, #0
 800aa8a:	637b      	str	r3, [r7, #52]	; 0x34
 800aa8c:	e019      	b.n	800aac2 <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 800aa8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa90:	4613      	mov	r3, r2
 800aa92:	005b      	lsls	r3, r3, #1
 800aa94:	4413      	add	r3, r2
 800aa96:	00db      	lsls	r3, r3, #3
 800aa98:	461a      	mov	r2, r3
 800aa9a:	6a3b      	ldr	r3, [r7, #32]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d00b      	beq.n	800aabc <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 800aaa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	005b      	lsls	r3, r3, #1
 800aaaa:	4413      	add	r3, r2
 800aaac:	00db      	lsls	r3, r3, #3
 800aaae:	461a      	mov	r2, r3
 800aab0:	6a3b      	ldr	r3, [r7, #32]
 800aab2:	4413      	add	r3, r2
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7ff fe3e 	bl	800a738 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 800aabc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aabe:	3301      	adds	r3, #1
 800aac0:	637b      	str	r3, [r7, #52]	; 0x34
 800aac2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d3e1      	bcc.n	800aa8e <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 800aaca:	6a38      	ldr	r0, [r7, #32]
 800aacc:	f7ff fe34 	bl	800a738 <metal_free_memory>
 800aad0:	e000      	b.n	800aad4 <rproc_virtio_create_vdev+0x148>
		goto err0;
 800aad2:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 800aad4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aad6:	f7ff fe2f 	bl	800a738 <metal_free_memory>
	return NULL;
 800aada:	2300      	movs	r3, #0
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3738      	adds	r7, #56	; 0x38
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}
 800aae4:	0801dbf4 	.word	0x0801dbf4

0800aae8 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b087      	sub	sp, #28
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	60f8      	str	r0, [r7, #12]
 800aaf0:	60b9      	str	r1, [r7, #8]
 800aaf2:	607a      	str	r2, [r7, #4]
 800aaf4:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aafa:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 800aafc:	68ba      	ldr	r2, [r7, #8]
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d302      	bcc.n	800ab0a <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 800ab04:	f06f 0301 	mvn.w	r3, #1
 800ab08:	e019      	b.n	800ab3e <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ab0e:	68ba      	ldr	r2, [r7, #8]
 800ab10:	4613      	mov	r3, r2
 800ab12:	005b      	lsls	r3, r3, #1
 800ab14:	4413      	add	r3, r2
 800ab16:	00db      	lsls	r3, r3, #3
 800ab18:	440b      	add	r3, r1
 800ab1a:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	6a3a      	ldr	r2, [r7, #32]
 800ab20:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	683a      	ldr	r2, [r7, #0]
 800ab2c:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 800ab2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab30:	b29a      	uxth	r2, r3
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab3a:	609a      	str	r2, [r3, #8]

	return 0;
 800ab3c:	2300      	movs	r3, #0
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	371c      	adds	r7, #28
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr

0800ab4a <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b086      	sub	sp, #24
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
 800ab52:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d102      	bne.n	800ab60 <rproc_virtio_notified+0x16>
		return -EINVAL;
 800ab5a:	f06f 0315 	mvn.w	r3, #21
 800ab5e:	e02c      	b.n	800abba <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	683a      	ldr	r2, [r7, #0]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d101      	bne.n	800ab6e <rproc_virtio_notified+0x24>
		return 0;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	e025      	b.n	800abba <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab72:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 800ab74:	2300      	movs	r3, #0
 800ab76:	617b      	str	r3, [r7, #20]
 800ab78:	e01a      	b.n	800abb0 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ab7e:	697a      	ldr	r2, [r7, #20]
 800ab80:	4613      	mov	r3, r2
 800ab82:	005b      	lsls	r3, r3, #1
 800ab84:	4413      	add	r3, r2
 800ab86:	00db      	lsls	r3, r3, #3
 800ab88:	440b      	add	r3, r1
 800ab8a:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	691b      	ldr	r3, [r3, #16]
 800ab90:	683a      	ldr	r2, [r7, #0]
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d003      	beq.n	800ab9e <rproc_virtio_notified+0x54>
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab9c:	d105      	bne.n	800abaa <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 800aba4:	68b8      	ldr	r0, [r7, #8]
 800aba6:	f001 fb58 	bl	800c25a <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	3301      	adds	r3, #1
 800abae:	617b      	str	r3, [r7, #20]
 800abb0:	697a      	ldr	r2, [r7, #20]
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d3e0      	bcc.n	800ab7a <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3718      	adds	r7, #24
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b084      	sub	sp, #16
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	699b      	ldr	r3, [r3, #24]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d00a      	beq.n	800abe8 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f7ff fe08 	bl	800a7e8 <rproc_virtio_get_status>
 800abd8:	4603      	mov	r3, r0
 800abda:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 800abdc:	7bfb      	ldrb	r3, [r7, #15]
 800abde:	f003 0304 	and.w	r3, r3, #4
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d102      	bne.n	800abec <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 800abe6:	e7f4      	b.n	800abd2 <rproc_virtio_wait_remote_ready+0x10>
		return;
 800abe8:	bf00      	nop
 800abea:	e000      	b.n	800abee <rproc_virtio_wait_remote_ready+0x2c>
			return;
 800abec:	bf00      	nop
	}
}
 800abee:	3710      	adds	r7, #16
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 800abfc:	bf00      	nop
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2201      	movs	r2, #1
 800ac02:	4611      	mov	r1, r2
 800ac04:	f3bf 8f5b 	dmb	ish
 800ac08:	e8d3 2f4f 	ldrexb	r2, [r3]
 800ac0c:	e8c3 1f40 	strexb	r0, r1, [r3]
 800ac10:	2800      	cmp	r0, #0
 800ac12:	d1f9      	bne.n	800ac08 <__metal_mutex_acquire+0x14>
 800ac14:	f3bf 8f5b 	dmb	ish
 800ac18:	b2d3      	uxtb	r3, r2
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d1ef      	bne.n	800abfe <__metal_mutex_acquire+0xa>
		;
	}
}
 800ac1e:	bf00      	nop
 800ac20:	bf00      	nop
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f3bf 8f5b 	dmb	ish
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	701a      	strb	r2, [r3, #0]
 800ac3e:	f3bf 8f5b 	dmb	ish
}
 800ac42:	bf00      	nop
 800ac44:	370c      	adds	r7, #12
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr

0800ac4e <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 800ac4e:	b580      	push	{r7, lr}
 800ac50:	b082      	sub	sp, #8
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f7ff ffcc 	bl	800abf4 <__metal_mutex_acquire>
}
 800ac5c:	bf00      	nop
 800ac5e:	3708      	adds	r7, #8
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b082      	sub	sp, #8
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f7ff ffdd 	bl	800ac2c <__metal_mutex_release>
}
 800ac72:	bf00      	nop
 800ac74:	3708      	adds	r7, #8
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}

0800ac7a <metal_list_add_before>:
{
 800ac7a:	b480      	push	{r7}
 800ac7c:	b083      	sub	sp, #12
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
 800ac82:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	685a      	ldr	r2, [r3, #4]
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	683a      	ldr	r2, [r7, #0]
 800ac98:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	683a      	ldr	r2, [r7, #0]
 800aca0:	601a      	str	r2, [r3, #0]
}
 800aca2:	bf00      	nop
 800aca4:	370c      	adds	r7, #12
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr

0800acae <metal_list_add_tail>:
{
 800acae:	b580      	push	{r7, lr}
 800acb0:	b082      	sub	sp, #8
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
 800acb6:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 800acb8:	6839      	ldr	r1, [r7, #0]
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f7ff ffdd 	bl	800ac7a <metal_list_add_before>
}
 800acc0:	bf00      	nop
 800acc2:	3708      	adds	r7, #8
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	6852      	ldr	r2, [r2, #4]
 800acd8:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	6812      	ldr	r2, [r2, #0]
 800ace2:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	687a      	ldr	r2, [r7, #4]
 800ace8:	605a      	str	r2, [r3, #4]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	685a      	ldr	r2, [r3, #4]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	601a      	str	r2, [r3, #0]
}
 800acf2:	bf00      	nop
 800acf4:	370c      	adds	r7, #12
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr

0800acfe <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 800acfe:	b480      	push	{r7}
 800ad00:	b083      	sub	sp, #12
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
 800ad06:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	095b      	lsrs	r3, r3, #5
 800ad0c:	009a      	lsls	r2, r3, #2
 800ad0e:	6879      	ldr	r1, [r7, #4]
 800ad10:	440a      	add	r2, r1
 800ad12:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 800ad14:	683a      	ldr	r2, [r7, #0]
 800ad16:	f002 021f 	and.w	r2, r2, #31
 800ad1a:	2001      	movs	r0, #1
 800ad1c:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	4403      	add	r3, r0
 800ad26:	430a      	orrs	r2, r1
 800ad28:	601a      	str	r2, [r3, #0]
}
 800ad2a:	bf00      	nop
 800ad2c:	370c      	adds	r7, #12
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr

0800ad36 <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 800ad36:	b480      	push	{r7}
 800ad38:	b083      	sub	sp, #12
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
 800ad3e:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	095b      	lsrs	r3, r3, #5
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	4413      	add	r3, r2
 800ad4a:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	f003 031f 	and.w	r3, r3, #31
 800ad52:	2101      	movs	r1, #1
 800ad54:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 800ad58:	4013      	ands	r3, r2
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	370c      	adds	r7, #12
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr

0800ad66 <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 800ad66:	b480      	push	{r7}
 800ad68:	b083      	sub	sp, #12
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
 800ad6e:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	095b      	lsrs	r3, r3, #5
 800ad74:	009a      	lsls	r2, r3, #2
 800ad76:	6879      	ldr	r1, [r7, #4]
 800ad78:	440a      	add	r2, r1
 800ad7a:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 800ad7c:	683a      	ldr	r2, [r7, #0]
 800ad7e:	f002 021f 	and.w	r2, r2, #31
 800ad82:	2001      	movs	r0, #1
 800ad84:	fa00 f202 	lsl.w	r2, r0, r2
 800ad88:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	4403      	add	r3, r0
 800ad90:	400a      	ands	r2, r1
 800ad92:	601a      	str	r2, [r3, #0]
}
 800ad94:	bf00      	nop
 800ad96:	370c      	adds	r7, #12
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr

0800ada0 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 800adaa:	6839      	ldr	r1, [r7, #0]
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f7ff ffc2 	bl	800ad36 <metal_bitmap_is_bit_set>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	bf0c      	ite	eq
 800adb8:	2301      	moveq	r3, #1
 800adba:	2300      	movne	r3, #0
 800adbc:	b2db      	uxtb	r3, r3
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3708      	adds	r7, #8
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}

0800adc6 <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b086      	sub	sp, #24
 800adca:	af00      	add	r7, sp, #0
 800adcc:	60f8      	str	r0, [r7, #12]
 800adce:	60b9      	str	r1, [r7, #8]
 800add0:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	617b      	str	r3, [r7, #20]
 800add6:	e002      	b.n	800adde <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	3301      	adds	r3, #1
 800addc:	617b      	str	r3, [r7, #20]
	for (bit = start;
 800adde:	697a      	ldr	r2, [r7, #20]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d207      	bcs.n	800adf6 <metal_bitmap_next_clear_bit+0x30>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	4619      	mov	r1, r3
 800adea:	68f8      	ldr	r0, [r7, #12]
 800adec:	f7ff ffd8 	bl	800ada0 <metal_bitmap_is_bit_clear>
 800adf0:	4603      	mov	r3, r0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d0f0      	beq.n	800add8 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 800adf6:	697b      	ldr	r3, [r7, #20]
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3718      	adds	r7, #24
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <rpmsg_init_ept>:
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	60b9      	str	r1, [r7, #8]
 800ae0a:	607a      	str	r2, [r7, #4]
 800ae0c:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2220      	movs	r2, #32
 800ae12:	68b9      	ldr	r1, [r7, #8]
 800ae14:	4618      	mov	r0, r3
 800ae16:	f006 fbfb 	bl	8011610 <strncpy>
	ept->addr = src;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	683a      	ldr	r2, [r7, #0]
 800ae24:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	69ba      	ldr	r2, [r7, #24]
 800ae2a:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	69fa      	ldr	r2, [r7, #28]
 800ae30:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ae32:	bf00      	nop
 800ae34:	3710      	adds	r7, #16
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}

0800ae3a <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 800ae3a:	b580      	push	{r7, lr}
 800ae3c:	b084      	sub	sp, #16
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	6078      	str	r0, [r7, #4]
 800ae42:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 800ae44:	f04f 33ff 	mov.w	r3, #4294967295
 800ae48:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	2100      	movs	r1, #0
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f7ff ffb8 	bl	800adc6 <metal_bitmap_next_clear_bit>
 800ae56:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	68ba      	ldr	r2, [r7, #8]
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d206      	bcs.n	800ae6e <rpmsg_get_address+0x34>
		addr = nextbit;
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	4619      	mov	r1, r3
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f7ff ff48 	bl	800acfe <metal_bitmap_set_bit>
	}

	return addr;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3710      	adds	r7, #16
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	60f8      	str	r0, [r7, #12]
 800ae80:	60b9      	str	r1, [r7, #8]
 800ae82:	607a      	str	r2, [r7, #4]
	if (addr < size)
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	da03      	bge.n	800ae94 <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 800ae8c:	6879      	ldr	r1, [r7, #4]
 800ae8e:	68f8      	ldr	r0, [r7, #12]
 800ae90:	f7ff ff69 	bl	800ad66 <metal_bitmap_clear_bit>
}
 800ae94:	bf00      	nop
 800ae96:	3710      	adds	r7, #16
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	607a      	str	r2, [r7, #4]
	if (addr < size)
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	429a      	cmp	r2, r3
 800aeae:	da05      	bge.n	800aebc <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 800aeb0:	6879      	ldr	r1, [r7, #4]
 800aeb2:	68f8      	ldr	r0, [r7, #12]
 800aeb4:	f7ff ff3f 	bl	800ad36 <metal_bitmap_is_bit_set>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	e000      	b.n	800aebe <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 800aebc:	4b02      	ldr	r3, [pc, #8]	; (800aec8 <rpmsg_is_address_set+0x2c>)
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3710      	adds	r7, #16
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	fffff82d 	.word	0xfffff82d

0800aecc <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 800aed8:	687a      	ldr	r2, [r7, #4]
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	429a      	cmp	r2, r3
 800aede:	da05      	bge.n	800aeec <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 800aee0:	6879      	ldr	r1, [r7, #4]
 800aee2:	68f8      	ldr	r0, [r7, #12]
 800aee4:	f7ff ff0b 	bl	800acfe <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 800aee8:	2300      	movs	r3, #0
 800aeea:	e000      	b.n	800aeee <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 800aeec:	4b02      	ldr	r3, [pc, #8]	; (800aef8 <rpmsg_set_address+0x2c>)
	}
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3710      	adds	r7, #16
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	fffff82d 	.word	0xfffff82d

0800aefc <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 800aefc:	b590      	push	{r4, r7, lr}
 800aefe:	b089      	sub	sp, #36	; 0x24
 800af00:	af02      	add	r7, sp, #8
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	607a      	str	r2, [r7, #4]
 800af08:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d00a      	beq.n	800af26 <rpmsg_send_offchannel_raw+0x2a>
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	6a1b      	ldr	r3, [r3, #32]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d006      	beq.n	800af26 <rpmsg_send_offchannel_raw+0x2a>
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d003      	beq.n	800af26 <rpmsg_send_offchannel_raw+0x2a>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af24:	d101      	bne.n	800af2a <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 800af26:	4b0d      	ldr	r3, [pc, #52]	; (800af5c <rpmsg_send_offchannel_raw+0x60>)
 800af28:	e014      	b.n	800af54 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	6a1b      	ldr	r3, [r3, #32]
 800af2e:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af34:	2b00      	cmp	r3, #0
 800af36:	d00c      	beq.n	800af52 <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800af3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af3e:	9301      	str	r3, [sp, #4]
 800af40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af42:	9300      	str	r3, [sp, #0]
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	68b9      	ldr	r1, [r7, #8]
 800af4a:	6978      	ldr	r0, [r7, #20]
 800af4c:	47a0      	blx	r4
 800af4e:	4603      	mov	r3, r0
 800af50:	e000      	b.n	800af54 <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 800af52:	4b02      	ldr	r3, [pc, #8]	; (800af5c <rpmsg_send_offchannel_raw+0x60>)
}
 800af54:	4618      	mov	r0, r3
 800af56:	371c      	adds	r7, #28
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd90      	pop	{r4, r7, pc}
 800af5c:	fffff82d 	.word	0xfffff82d

0800af60 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b090      	sub	sp, #64	; 0x40
 800af64:	af02      	add	r7, sp, #8
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	633b      	str	r3, [r7, #48]	; 0x30
	ns_msg.addr = ept->addr;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af72:	62fb      	str	r3, [r7, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 800af74:	6879      	ldr	r1, [r7, #4]
 800af76:	f107 030c 	add.w	r3, r7, #12
 800af7a:	2220      	movs	r2, #32
 800af7c:	4618      	mov	r0, r3
 800af7e:	f006 fb47 	bl	8011610 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800af86:	f107 030c 	add.w	r3, r7, #12
 800af8a:	2201      	movs	r2, #1
 800af8c:	9201      	str	r2, [sp, #4]
 800af8e:	2228      	movs	r2, #40	; 0x28
 800af90:	9200      	str	r2, [sp, #0]
 800af92:	2235      	movs	r2, #53	; 0x35
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f7ff ffb1 	bl	800aefc <rpmsg_send_offchannel_raw>
 800af9a:	6378      	str	r0, [r7, #52]	; 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 800af9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	da01      	bge.n	800afa6 <rpmsg_send_ns_message+0x46>
		return ret;
 800afa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afa4:	e000      	b.n	800afa8 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 800afa6:	2300      	movs	r3, #0
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3738      	adds	r7, #56	; 0x38
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b088      	sub	sp, #32
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	60f8      	str	r0, [r7, #12]
 800afb8:	60b9      	str	r1, [r7, #8]
 800afba:	607a      	str	r2, [r7, #4]
 800afbc:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	61fb      	str	r3, [r7, #28]
 800afc4:	e04b      	b.n	800b05e <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 800afc6:	2300      	movs	r3, #0
 800afc8:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 800afca:	69fb      	ldr	r3, [r7, #28]
 800afcc:	3b34      	subs	r3, #52	; 0x34
 800afce:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afd6:	d006      	beq.n	800afe6 <rpmsg_get_endpoint+0x36>
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afdc:	687a      	ldr	r2, [r7, #4]
 800afde:	429a      	cmp	r2, r3
 800afe0:	d101      	bne.n	800afe6 <rpmsg_get_endpoint+0x36>
			return ept;
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	e040      	b.n	800b068 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	429a      	cmp	r2, r3
 800afee:	d106      	bne.n	800affe <rpmsg_get_endpoint+0x4e>
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aff4:	683a      	ldr	r2, [r7, #0]
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d101      	bne.n	800affe <rpmsg_get_endpoint+0x4e>
			return ept;
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	e034      	b.n	800b068 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d00c      	beq.n	800b01e <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	2220      	movs	r2, #32
 800b008:	68b9      	ldr	r1, [r7, #8]
 800b00a:	4618      	mov	r0, r3
 800b00c:	f006 faee 	bl	80115ec <strncmp>
 800b010:	4603      	mov	r3, r0
 800b012:	2b00      	cmp	r3, #0
 800b014:	bf0c      	ite	eq
 800b016:	2301      	moveq	r3, #1
 800b018:	2300      	movne	r3, #0
 800b01a:	b2db      	uxtb	r3, r3
 800b01c:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d018      	beq.n	800b056 <rpmsg_get_endpoint+0xa6>
 800b024:	69bb      	ldr	r3, [r7, #24]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d015      	beq.n	800b056 <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b030:	d006      	beq.n	800b040 <rpmsg_get_endpoint+0x90>
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b036:	683a      	ldr	r2, [r7, #0]
 800b038:	429a      	cmp	r2, r3
 800b03a:	d101      	bne.n	800b040 <rpmsg_get_endpoint+0x90>
			return ept;
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	e013      	b.n	800b068 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b046:	d107      	bne.n	800b058 <rpmsg_get_endpoint+0xa8>
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b04c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b050:	d102      	bne.n	800b058 <rpmsg_get_endpoint+0xa8>
			return ept;
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	e008      	b.n	800b068 <rpmsg_get_endpoint+0xb8>
			continue;
 800b056:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	61fb      	str	r3, [r7, #28]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	69fa      	ldr	r2, [r7, #28]
 800b062:	429a      	cmp	r2, r3
 800b064:	d1af      	bne.n	800afc6 <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 800b066:	2300      	movs	r3, #0
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3720      	adds	r7, #32
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d016      	beq.n	800b0ac <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6a1b      	ldr	r3, [r3, #32]
 800b082:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b08c:	d008      	beq.n	800b0a0 <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	f103 0048 	add.w	r0, r3, #72	; 0x48
				      ept->addr);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 800b098:	461a      	mov	r2, r3
 800b09a:	2180      	movs	r1, #128	; 0x80
 800b09c:	f7ff feec 	bl	800ae78 <rpmsg_release_address>
	metal_list_del(&ept->node);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	3334      	adds	r3, #52	; 0x34
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f7ff fe0f 	bl	800acc8 <metal_list_del>
 800b0aa:	e000      	b.n	800b0ae <rpmsg_unregister_endpoint+0x3e>
		return;
 800b0ac:	bf00      	nop
}
 800b0ae:	3710      	adds	r7, #16
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	687a      	ldr	r2, [r7, #4]
 800b0c2:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	3334      	adds	r3, #52	; 0x34
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	4610      	mov	r0, r2
 800b0ce:	f7ff fdee 	bl	800acae <metal_list_add_tail>
	return RPMSG_SUCCESS;
 800b0d2:	2300      	movs	r3, #0
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3708      	adds	r7, #8
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b088      	sub	sp, #32
 800b0e0:	af02      	add	r7, sp, #8
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	607a      	str	r2, [r7, #4]
 800b0e8:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	613b      	str	r3, [r7, #16]

	if (!ept)
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d101      	bne.n	800b0f8 <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 800b0f4:	4b37      	ldr	r3, [pc, #220]	; (800b1d4 <rpmsg_create_ept+0xf8>)
 800b0f6:	e068      	b.n	800b1ca <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	3358      	adds	r3, #88	; 0x58
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f7ff fda6 	bl	800ac4e <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b108:	d018      	beq.n	800b13c <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	3348      	adds	r3, #72	; 0x48
 800b10e:	683a      	ldr	r2, [r7, #0]
 800b110:	2180      	movs	r1, #128	; 0x80
 800b112:	4618      	mov	r0, r3
 800b114:	f7ff fec2 	bl	800ae9c <rpmsg_is_address_set>
 800b118:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d107      	bne.n	800b130 <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	3348      	adds	r3, #72	; 0x48
 800b124:	683a      	ldr	r2, [r7, #0]
 800b126:	2180      	movs	r1, #128	; 0x80
 800b128:	4618      	mov	r0, r3
 800b12a:	f7ff fecf 	bl	800aecc <rpmsg_set_address>
 800b12e:	e00c      	b.n	800b14a <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	2b00      	cmp	r3, #0
 800b134:	dd40      	ble.n	800b1b8 <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 800b136:	2300      	movs	r3, #0
 800b138:	617b      	str	r3, [r7, #20]
			goto ret_status;
 800b13a:	e040      	b.n	800b1be <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	3348      	adds	r3, #72	; 0x48
 800b140:	2180      	movs	r1, #128	; 0x80
 800b142:	4618      	mov	r0, r3
 800b144:	f7ff fe79 	bl	800ae3a <rpmsg_get_address>
 800b148:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 800b14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b14c:	9301      	str	r3, [sp, #4]
 800b14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b150:	9300      	str	r3, [sp, #0]
 800b152:	6a3b      	ldr	r3, [r7, #32]
 800b154:	693a      	ldr	r2, [r7, #16]
 800b156:	6879      	ldr	r1, [r7, #4]
 800b158:	68f8      	ldr	r0, [r7, #12]
 800b15a:	f7ff fe51 	bl	800ae00 <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 800b15e:	68f9      	ldr	r1, [r7, #12]
 800b160:	68b8      	ldr	r0, [r7, #8]
 800b162:	f7ff ffa7 	bl	800b0b4 <rpmsg_register_endpoint>
 800b166:	6178      	str	r0, [r7, #20]
	if (status < 0)
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	da06      	bge.n	800b17c <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	3348      	adds	r3, #72	; 0x48
 800b172:	693a      	ldr	r2, [r7, #16]
 800b174:	2180      	movs	r1, #128	; 0x80
 800b176:	4618      	mov	r0, r3
 800b178:	f7ff fe7e 	bl	800ae78 <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d11c      	bne.n	800b1bc <rpmsg_create_ept+0xe0>
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b18a:	d117      	bne.n	800b1bc <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	3358      	adds	r3, #88	; 0x58
 800b190:	4618      	mov	r0, r3
 800b192:	f7ff fd67 	bl	800ac64 <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 800b196:	2100      	movs	r1, #0
 800b198:	68f8      	ldr	r0, [r7, #12]
 800b19a:	f7ff fee1 	bl	800af60 <rpmsg_send_ns_message>
 800b19e:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	3358      	adds	r3, #88	; 0x58
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f7ff fd52 	bl	800ac4e <metal_mutex_acquire>
		if (status)
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d005      	beq.n	800b1bc <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 800b1b0:	68f8      	ldr	r0, [r7, #12]
 800b1b2:	f7ff ff5d 	bl	800b070 <rpmsg_unregister_endpoint>
 800b1b6:	e002      	b.n	800b1be <rpmsg_create_ept+0xe2>
			goto ret_status;
 800b1b8:	bf00      	nop
 800b1ba:	e000      	b.n	800b1be <rpmsg_create_ept+0xe2>
	}

ret_status:
 800b1bc:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	3358      	adds	r3, #88	; 0x58
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f7ff fd4e 	bl	800ac64 <metal_mutex_release>
	return status;
 800b1c8:	697b      	ldr	r3, [r7, #20]
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3718      	adds	r7, #24
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	fffff82d 	.word	0xfffff82d

0800b1d8 <__metal_cache_invalidate>:
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 800b1e2:	6839      	ldr	r1, [r7, #0]
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f000 fcc2 	bl	800bb6e <metal_machine_cache_invalidate>
}
 800b1ea:	bf00      	nop
 800b1ec:	3708      	adds	r7, #8
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}

0800b1f2 <metal_cache_invalidate>:
{
 800b1f2:	b580      	push	{r7, lr}
 800b1f4:	b082      	sub	sp, #8
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
 800b1fa:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 800b1fc:	6839      	ldr	r1, [r7, #0]
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f7ff ffea 	bl	800b1d8 <__metal_cache_invalidate>
}
 800b204:	bf00      	nop
 800b206:	3708      	adds	r7, #8
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b083      	sub	sp, #12
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 800b214:	2300      	movs	r3, #0
}
 800b216:	4618      	mov	r0, r3
 800b218:	370c      	adds	r7, #12
 800b21a:	46bd      	mov	sp, r7
 800b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b220:	4770      	bx	lr

0800b222 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 800b222:	b580      	push	{r7, lr}
 800b224:	b082      	sub	sp, #8
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f7ff ffee 	bl	800b20c <__metal_sleep_usec>
 800b230:	4603      	mov	r3, r0
}
 800b232:	4618      	mov	r0, r3
 800b234:	3708      	adds	r7, #8
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}

0800b23a <metal_list_init>:
{
 800b23a:	b480      	push	{r7}
 800b23c:	b083      	sub	sp, #12
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	687a      	ldr	r2, [r7, #4]
 800b246:	605a      	str	r2, [r3, #4]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	685a      	ldr	r2, [r3, #4]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	601a      	str	r2, [r3, #0]
}
 800b250:	bf00      	nop
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <metal_io_virt_to_offset>:
{
 800b25c:	b480      	push	{r7}
 800b25e:	b085      	sub	sp, #20
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	683a      	ldr	r2, [r7, #0]
 800b26c:	1ad3      	subs	r3, r2, r3
 800b26e:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	689b      	ldr	r3, [r3, #8]
 800b274:	68fa      	ldr	r2, [r7, #12]
 800b276:	429a      	cmp	r2, r3
 800b278:	d201      	bcs.n	800b27e <metal_io_virt_to_offset+0x22>
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	e001      	b.n	800b282 <metal_io_virt_to_offset+0x26>
 800b27e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b282:	4618      	mov	r0, r3
 800b284:	3714      	adds	r7, #20
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr

0800b28e <__metal_mutex_init>:
{
 800b28e:	b480      	push	{r7}
 800b290:	b085      	sub	sp, #20
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	60fb      	str	r3, [r7, #12]
 800b29a:	2300      	movs	r3, #0
 800b29c:	60bb      	str	r3, [r7, #8]
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f3bf 8f5b 	dmb	ish
 800b2a8:	601a      	str	r2, [r3, #0]
 800b2aa:	f3bf 8f5b 	dmb	ish
}
 800b2ae:	bf00      	nop
 800b2b0:	3714      	adds	r7, #20
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr

0800b2ba <__metal_mutex_acquire>:
{
 800b2ba:	b480      	push	{r7}
 800b2bc:	b083      	sub	sp, #12
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 800b2c2:	bf00      	nop
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	4611      	mov	r1, r2
 800b2ca:	f3bf 8f5b 	dmb	ish
 800b2ce:	e8d3 2f4f 	ldrexb	r2, [r3]
 800b2d2:	e8c3 1f40 	strexb	r0, r1, [r3]
 800b2d6:	2800      	cmp	r0, #0
 800b2d8:	d1f9      	bne.n	800b2ce <__metal_mutex_acquire+0x14>
 800b2da:	f3bf 8f5b 	dmb	ish
 800b2de:	b2d3      	uxtb	r3, r2
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d1ef      	bne.n	800b2c4 <__metal_mutex_acquire+0xa>
}
 800b2e4:	bf00      	nop
 800b2e6:	bf00      	nop
 800b2e8:	370c      	adds	r7, #12
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr

0800b2f2 <__metal_mutex_release>:
{
 800b2f2:	b480      	push	{r7}
 800b2f4:	b083      	sub	sp, #12
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f3bf 8f5b 	dmb	ish
 800b300:	2200      	movs	r2, #0
 800b302:	701a      	strb	r2, [r3, #0]
 800b304:	f3bf 8f5b 	dmb	ish
}
 800b308:	bf00      	nop
 800b30a:	370c      	adds	r7, #12
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <metal_mutex_init>:
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f7ff ffb6 	bl	800b28e <__metal_mutex_init>
}
 800b322:	bf00      	nop
 800b324:	3708      	adds	r7, #8
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}

0800b32a <metal_mutex_acquire>:
{
 800b32a:	b580      	push	{r7, lr}
 800b32c:	b082      	sub	sp, #8
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f7ff ffc1 	bl	800b2ba <__metal_mutex_acquire>
}
 800b338:	bf00      	nop
 800b33a:	3708      	adds	r7, #8
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <metal_mutex_release>:
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b082      	sub	sp, #8
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f7ff ffd2 	bl	800b2f2 <__metal_mutex_release>
}
 800b34e:	bf00      	nop
 800b350:	3708      	adds	r7, #8
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}

0800b356 <rpmsg_init_ept>:
{
 800b356:	b580      	push	{r7, lr}
 800b358:	b084      	sub	sp, #16
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	60f8      	str	r0, [r7, #12]
 800b35e:	60b9      	str	r1, [r7, #8]
 800b360:	607a      	str	r2, [r7, #4]
 800b362:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2220      	movs	r2, #32
 800b368:	68b9      	ldr	r1, [r7, #8]
 800b36a:	4618      	mov	r0, r3
 800b36c:	f006 f950 	bl	8011610 <strncpy>
	ept->addr = src;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	683a      	ldr	r2, [r7, #0]
 800b37a:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	69ba      	ldr	r2, [r7, #24]
 800b380:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	69fa      	ldr	r2, [r7, #28]
 800b386:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b388:	bf00      	nop
 800b38a:	3710      	adds	r7, #16
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b39c:	699b      	ldr	r3, [r3, #24]
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	370c      	adds	r7, #12
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr

0800b3aa <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 800b3aa:	b580      	push	{r7, lr}
 800b3ac:	b082      	sub	sp, #8
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
 800b3b2:	460b      	mov	r3, r1
 800b3b4:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3ba:	6a1b      	ldr	r3, [r3, #32]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800b3c2:	78f9      	ldrb	r1, [r7, #3]
 800b3c4:	4610      	mov	r0, r2
 800b3c6:	4798      	blx	r3
}
 800b3c8:	bf00      	nop
 800b3ca:	3708      	adds	r7, #8
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3dc:	6a1b      	ldr	r3, [r3, #32]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800b3e4:	4610      	mov	r0, r2
 800b3e6:	4798      	blx	r3
 800b3e8:	4603      	mov	r3, r0
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3708      	adds	r7, #8
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}

0800b3f2 <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 800b3f2:	b580      	push	{r7, lr}
 800b3f4:	b082      	sub	sp, #8
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3fe:	6a1b      	ldr	r3, [r3, #32]
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	687a      	ldr	r2, [r7, #4]
 800b404:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800b406:	4610      	mov	r0, r2
 800b408:	4798      	blx	r3
 800b40a:	4603      	mov	r3, r0
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3708      	adds	r7, #8
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b086      	sub	sp, #24
 800b418:	af02      	add	r7, sp, #8
 800b41a:	60f8      	str	r0, [r7, #12]
 800b41c:	60b9      	str	r1, [r7, #8]
 800b41e:	607a      	str	r2, [r7, #4]
 800b420:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800b426:	68b9      	ldr	r1, [r7, #8]
 800b428:	69bb      	ldr	r3, [r7, #24]
 800b42a:	9300      	str	r3, [sp, #0]
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	f000 fbf2 	bl	800bc18 <virtio_create_virtqueues>
 800b434:	4603      	mov	r3, r0
					callbacks);
}
 800b436:	4618      	mov	r0, r3
 800b438:	3710      	adds	r7, #16
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}

0800b43e <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 800b43e:	b580      	push	{r7, lr}
 800b440:	b082      	sub	sp, #8
 800b442:	af00      	add	r7, sp, #0
 800b444:	6078      	str	r0, [r7, #4]
 800b446:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 800b448:	f04f 33ff 	mov.w	r3, #4294967295
 800b44c:	683a      	ldr	r2, [r7, #0]
 800b44e:	2100      	movs	r1, #0
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f7ff fdad 	bl	800afb0 <rpmsg_get_endpoint>
 800b456:	4603      	mov	r3, r0
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3708      	adds	r7, #8
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <rpmsg_virtio_shm_pool_get_buffer>:

#ifndef VIRTIO_SLAVE_ONLY
metal_weak void *
rpmsg_virtio_shm_pool_get_buffer(struct rpmsg_virtio_shm_pool *shpool,
				 size_t size)
{
 800b460:	b480      	push	{r7}
 800b462:	b085      	sub	sp, #20
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	6039      	str	r1, [r7, #0]
	void *buffer;

	if (shpool->avail < size)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	683a      	ldr	r2, [r7, #0]
 800b470:	429a      	cmp	r2, r3
 800b472:	d901      	bls.n	800b478 <rpmsg_virtio_shm_pool_get_buffer+0x18>
		return NULL;
 800b474:	2300      	movs	r3, #0
 800b476:	e00f      	b.n	800b498 <rpmsg_virtio_shm_pool_get_buffer+0x38>
	buffer =  (void *)((char *)shpool->base + shpool->size - shpool->avail);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6899      	ldr	r1, [r3, #8]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	1acb      	subs	r3, r1, r3
 800b486:	4413      	add	r3, r2
 800b488:	60fb      	str	r3, [r7, #12]
	shpool->avail -= size;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	685a      	ldr	r2, [r3, #4]
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	1ad2      	subs	r2, r2, r3
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	605a      	str	r2, [r3, #4]

	return buffer;
 800b496:	68fb      	ldr	r3, [r7, #12]
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3714      	adds	r7, #20
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <rpmsg_virtio_init_shm_pool>:
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b085      	sub	sp, #20
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	60f8      	str	r0, [r7, #12]
 800b4ac:	60b9      	str	r1, [r7, #8]
 800b4ae:	607a      	str	r2, [r7, #4]
	if (!shpool)
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d01d      	beq.n	800b4f2 <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	68ba      	ldr	r2, [r7, #8]
 800b4ba:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f003 0303 	and.w	r3, r3, #3
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d004      	beq.n	800b4d0 <rpmsg_virtio_init_shm_pool+0x2c>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f023 0303 	bic.w	r3, r3, #3
 800b4cc:	3304      	adds	r3, #4
 800b4ce:	e000      	b.n	800b4d2 <rpmsg_virtio_init_shm_pool+0x2e>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	68fa      	ldr	r2, [r7, #12]
 800b4d4:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f003 0303 	and.w	r3, r3, #3
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d004      	beq.n	800b4ea <rpmsg_virtio_init_shm_pool+0x46>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f023 0303 	bic.w	r3, r3, #3
 800b4e6:	3304      	adds	r3, #4
 800b4e8:	e000      	b.n	800b4ec <rpmsg_virtio_init_shm_pool+0x48>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	68fa      	ldr	r2, [r7, #12]
 800b4ee:	6053      	str	r3, [r2, #4]
 800b4f0:	e000      	b.n	800b4f4 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 800b4f2:	bf00      	nop
}
 800b4f4:	3714      	adds	r7, #20
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr

0800b4fe <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 800b4fe:	b580      	push	{r7, lr}
 800b500:	b08a      	sub	sp, #40	; 0x28
 800b502:	af02      	add	r7, sp, #8
 800b504:	60f8      	str	r0, [r7, #12]
 800b506:	60b9      	str	r1, [r7, #8]
 800b508:	607a      	str	r2, [r7, #4]
 800b50a:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800b50c:	68f8      	ldr	r0, [r7, #12]
 800b50e:	f7ff ff3f 	bl	800b390 <rpmsg_virtio_get_role>
 800b512:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800b514:	69fb      	ldr	r3, [r7, #28]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d10d      	bne.n	800b536 <rpmsg_virtio_return_buffer+0x38>
		struct virtqueue_buf vqbuf;

		(void)idx;
		/* Initialize buffer node */
		vqbuf.buf = buffer;
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	61bb      	str	r3, [r7, #24]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800b526:	f107 0114 	add.w	r1, r7, #20
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	9300      	str	r3, [sp, #0]
 800b52e:	2301      	movs	r3, #1
 800b530:	2200      	movs	r2, #0
 800b532:	f000 fcc0 	bl	800beb6 <virtqueue_add_buffer>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 800b536:	bf00      	nop
 800b538:	3720      	adds	r7, #32
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}

0800b53e <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 800b53e:	b580      	push	{r7, lr}
 800b540:	b08a      	sub	sp, #40	; 0x28
 800b542:	af02      	add	r7, sp, #8
 800b544:	60f8      	str	r0, [r7, #12]
 800b546:	60b9      	str	r1, [r7, #8]
 800b548:	607a      	str	r2, [r7, #4]
 800b54a:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800b54c:	68f8      	ldr	r0, [r7, #12]
 800b54e:	f7ff ff1f 	bl	800b390 <rpmsg_virtio_get_role>
 800b552:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800b554:	69fb      	ldr	r3, [r7, #28]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d10f      	bne.n	800b57a <rpmsg_virtio_enqueue_buffer+0x3c>
		struct virtqueue_buf vqbuf;
		(void)idx;

		/* Initialize buffer node */
		vqbuf.buf = buffer;
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	61bb      	str	r3, [r7, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800b566:	f107 0114 	add.w	r1, r7, #20
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	9300      	str	r3, [sp, #0]
 800b56e:	2301      	movs	r3, #1
 800b570:	2200      	movs	r2, #0
 800b572:	f000 fca0 	bl	800beb6 <virtqueue_add_buffer>
 800b576:	4603      	mov	r3, r0
 800b578:	e000      	b.n	800b57c <rpmsg_virtio_enqueue_buffer+0x3e>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 800b57a:	2300      	movs	r3, #0
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3720      	adds	r7, #32
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b086      	sub	sp, #24
 800b588:	af00      	add	r7, sp, #0
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	f7ff fefd 	bl	800b390 <rpmsg_virtio_get_role>
 800b596:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 800b598:	2300      	movs	r3, #0
 800b59a:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d116      	bne.n	800b5d0 <rpmsg_virtio_get_tx_buffer+0x4c>
		data = virtqueue_get_buffer(rvdev->svq, (uint32_t *)len, idx);
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5a6:	687a      	ldr	r2, [r7, #4]
 800b5a8:	68b9      	ldr	r1, [r7, #8]
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f000 fcc7 	bl	800bf3e <virtqueue_get_buffer>
 800b5b0:	6178      	str	r0, [r7, #20]
		if (data == NULL) {
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d10b      	bne.n	800b5d0 <rpmsg_virtio_get_tx_buffer+0x4c>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7ff ff4d 	bl	800b460 <rpmsg_virtio_shm_pool_get_buffer>
 800b5c6:	6178      	str	r0, [r7, #20]
							RPMSG_BUFFER_SIZE);
			*len = RPMSG_BUFFER_SIZE;
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b5ce:	601a      	str	r2, [r3, #0]
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 800b5d0:	697b      	ldr	r3, [r7, #20]
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3718      	adds	r7, #24
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}

0800b5da <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 800b5da:	b580      	push	{r7, lr}
 800b5dc:	b086      	sub	sp, #24
 800b5de:	af00      	add	r7, sp, #0
 800b5e0:	60f8      	str	r0, [r7, #12]
 800b5e2:	60b9      	str	r1, [r7, #8]
 800b5e4:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800b5e6:	68f8      	ldr	r0, [r7, #12]
 800b5e8:	f7ff fed2 	bl	800b390 <rpmsg_virtio_get_role>
 800b5ec:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d107      	bne.n	800b608 <rpmsg_virtio_get_rx_buffer+0x2e>
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5fc:	687a      	ldr	r2, [r7, #4]
 800b5fe:	68b9      	ldr	r1, [r7, #8]
 800b600:	4618      	mov	r0, r3
 800b602:	f000 fc9c 	bl	800bf3e <virtqueue_get_buffer>
 800b606:	6178      	str	r0, [r7, #20]
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d005      	beq.n	800b61a <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	4619      	mov	r1, r3
 800b614:	6978      	ldr	r0, [r7, #20]
 800b616:	f7ff fdec 	bl	800b1f2 <metal_cache_invalidate>
	}

	return data;
 800b61a:	697b      	ldr	r3, [r7, #20]
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3718      	adds	r7, #24
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f7ff feaf 	bl	800b390 <rpmsg_virtio_get_role>
 800b632:	60b8      	str	r0, [r7, #8]
	int length = 0;
 800b634:	2300      	movs	r3, #0
 800b636:	60fb      	str	r3, [r7, #12]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d102      	bne.n	800b644 <_rpmsg_virtio_get_buffer_size+0x20>
		/*
		 * If device role is Remote then buffers are provided by us
		 * (RPMSG Master), so just provide the macro.
		 */
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
 800b63e:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 800b642:	60fb      	str	r3, [r7, #12]
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 800b644:	68fb      	ldr	r3, [r7, #12]
}
 800b646:	4618      	mov	r0, r3
 800b648:	3710      	adds	r7, #16
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
	...

0800b650 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b090      	sub	sp, #64	; 0x40
 800b654:	af00      	add	r7, sp, #0
 800b656:	60f8      	str	r0, [r7, #12]
 800b658:	60b9      	str	r1, [r7, #8]
 800b65a:	607a      	str	r2, [r7, #4]
 800b65c:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 800b65e:	2300      	movs	r3, #0
 800b660:	63fb      	str	r3, [r7, #60]	; 0x3c
	unsigned short idx;
	int tick_count = 0;
 800b662:	2300      	movs	r3, #0
 800b664:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	637b      	str	r3, [r7, #52]	; 0x34

	status = rpmsg_virtio_get_status(rvdev);
 800b66a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b66c:	f7ff feb0 	bl	800b3d0 <rpmsg_virtio_get_status>
 800b670:	4603      	mov	r3, r0
 800b672:	633b      	str	r3, [r7, #48]	; 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 800b674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b676:	f003 0304 	and.w	r3, r3, #4
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d101      	bne.n	800b682 <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 800b67e:	4b45      	ldr	r3, [pc, #276]	; (800b794 <rpmsg_virtio_send_offchannel_raw+0x144>)
 800b680:	e083      	b.n	800b78a <rpmsg_virtio_send_offchannel_raw+0x13a>
	}

	if (wait)
 800b682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b684:	2b00      	cmp	r3, #0
 800b686:	d003      	beq.n	800b690 <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 800b688:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800b68c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b68e:	e001      	b.n	800b694 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 800b690:	2300      	movs	r3, #0
 800b692:	63bb      	str	r3, [r7, #56]	; 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	3358      	adds	r3, #88	; 0x58
 800b698:	4618      	mov	r0, r3
 800b69a:	f7ff fe46 	bl	800b32a <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 800b69e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b6a0:	f7ff ffc0 	bl	800b624 <_rpmsg_virtio_get_buffer_size>
 800b6a4:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (size <= avail_size)
 800b6a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	dc08      	bgt.n	800b6c0 <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 800b6ae:	f107 0216 	add.w	r2, r7, #22
 800b6b2:	f107 0310 	add.w	r3, r7, #16
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b6ba:	f7ff ff63 	bl	800b584 <rpmsg_virtio_get_tx_buffer>
 800b6be:	63f8      	str	r0, [r7, #60]	; 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	3358      	adds	r3, #88	; 0x58
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f7ff fe3b 	bl	800b340 <metal_mutex_release>
		if (buffer || !tick_count)
 800b6ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d10e      	bne.n	800b6ee <rpmsg_virtio_send_offchannel_raw+0x9e>
 800b6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00b      	beq.n	800b6ee <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 800b6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d001      	beq.n	800b6e0 <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 800b6dc:	4b2e      	ldr	r3, [pc, #184]	; (800b798 <rpmsg_virtio_send_offchannel_raw+0x148>)
 800b6de:	e054      	b.n	800b78a <rpmsg_virtio_send_offchannel_raw+0x13a>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 800b6e0:	200a      	movs	r0, #10
 800b6e2:	f7ff fd9e 	bl	800b222 <metal_sleep_usec>
		tick_count--;
 800b6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e8:	3b01      	subs	r3, #1
 800b6ea:	63bb      	str	r3, [r7, #56]	; 0x38
	while (1) {
 800b6ec:	e7d2      	b.n	800b694 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 800b6ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d101      	bne.n	800b6f8 <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 800b6f4:	4b29      	ldr	r3, [pc, #164]	; (800b79c <rpmsg_virtio_send_offchannel_raw+0x14c>)
 800b6f6:	e048      	b.n	800b78a <rpmsg_virtio_send_offchannel_raw+0x13a>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 800b700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b702:	b29b      	uxth	r3, r3
 800b704:	84bb      	strh	r3, [r7, #36]	; 0x24
	rp_hdr.reserved = 0;
 800b706:	2300      	movs	r3, #0
 800b708:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 800b70a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b70c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b70e:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 800b710:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b712:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b714:	f7ff fda2 	bl	800b25c <metal_io_virt_to_offset>
 800b718:	4601      	mov	r1, r0
 800b71a:	f107 0218 	add.w	r2, r7, #24
 800b71e:	2310      	movs	r3, #16
 800b720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b722:	f7fe fdd8 	bl	800a2d6 <metal_io_block_write>
 800b726:	6338      	str	r0, [r7, #48]	; 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 800b728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72a:	2b10      	cmp	r3, #16
 800b72c:	d000      	beq.n	800b730 <rpmsg_virtio_send_offchannel_raw+0xe0>
 800b72e:	e7fe      	b.n	800b72e <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 800b730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b732:	3310      	adds	r3, #16
 800b734:	4619      	mov	r1, r3
 800b736:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b738:	f7ff fd90 	bl	800b25c <metal_io_virt_to_offset>
 800b73c:	4601      	mov	r1, r0
 800b73e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b740:	683a      	ldr	r2, [r7, #0]
 800b742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b744:	f7fe fdc7 	bl	800a2d6 <metal_io_block_write>
 800b748:	6338      	str	r0, [r7, #48]	; 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 800b74a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b74c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b74e:	429a      	cmp	r2, r3
 800b750:	d000      	beq.n	800b754 <rpmsg_virtio_send_offchannel_raw+0x104>
 800b752:	e7fe      	b.n	800b752 <rpmsg_virtio_send_offchannel_raw+0x102>
	metal_mutex_acquire(&rdev->lock);
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	3358      	adds	r3, #88	; 0x58
 800b758:	4618      	mov	r0, r3
 800b75a:	f7ff fde6 	bl	800b32a <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 800b75e:	693a      	ldr	r2, [r7, #16]
 800b760:	8afb      	ldrh	r3, [r7, #22]
 800b762:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b764:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b766:	f7ff feea 	bl	800b53e <rpmsg_virtio_enqueue_buffer>
 800b76a:	6338      	str	r0, [r7, #48]	; 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 800b76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d000      	beq.n	800b774 <rpmsg_virtio_send_offchannel_raw+0x124>
 800b772:	e7fe      	b.n	800b772 <rpmsg_virtio_send_offchannel_raw+0x122>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 800b774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b778:	4618      	mov	r0, r3
 800b77a:	f000 fc5a 	bl	800c032 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	3358      	adds	r3, #88	; 0x58
 800b782:	4618      	mov	r0, r3
 800b784:	f7ff fddc 	bl	800b340 <metal_mutex_release>

	return size;
 800b788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3740      	adds	r7, #64	; 0x40
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
 800b792:	bf00      	nop
 800b794:	fffff82c 	.word	0xfffff82c
 800b798:	fffff82b 	.word	0xfffff82b
 800b79c:	fffff82e 	.word	0xfffff82e

0800b7a0 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b083      	sub	sp, #12
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 800b7a8:	bf00      	nop
 800b7aa:	370c      	adds	r7, #12
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr

0800b7b4 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 800b7b4:	b590      	push	{r4, r7, lr}
 800b7b6:	b08d      	sub	sp, #52	; 0x34
 800b7b8:	af02      	add	r7, sp, #8
 800b7ba:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 800b7c2:	6a3b      	ldr	r3, [r7, #32]
 800b7c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c6:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 800b7c8:	69fb      	ldr	r3, [r7, #28]
 800b7ca:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 800b7cc:	69bb      	ldr	r3, [r7, #24]
 800b7ce:	3358      	adds	r3, #88	; 0x58
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7ff fdaa 	bl	800b32a <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 800b7d6:	f107 020a 	add.w	r2, r7, #10
 800b7da:	f107 030c 	add.w	r3, r7, #12
 800b7de:	4619      	mov	r1, r3
 800b7e0:	69f8      	ldr	r0, [r7, #28]
 800b7e2:	f7ff fefa 	bl	800b5da <rpmsg_virtio_get_rx_buffer>
 800b7e6:	6278      	str	r0, [r7, #36]	; 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	3358      	adds	r3, #88	; 0x58
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f7ff fda7 	bl	800b340 <metal_mutex_release>

	while (rp_hdr) {
 800b7f2:	e04c      	b.n	800b88e <rpmsg_virtio_rx_callback+0xda>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 800b7f4:	69bb      	ldr	r3, [r7, #24]
 800b7f6:	3358      	adds	r3, #88	; 0x58
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f7ff fd96 	bl	800b32a <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 800b7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	4619      	mov	r1, r3
 800b804:	69b8      	ldr	r0, [r7, #24]
 800b806:	f7ff fe1a 	bl	800b43e <rpmsg_get_ept_from_addr>
 800b80a:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 800b80c:	69bb      	ldr	r3, [r7, #24]
 800b80e:	3358      	adds	r3, #88	; 0x58
 800b810:	4618      	mov	r0, r3
 800b812:	f7ff fd95 	bl	800b340 <metal_mutex_release>

		if (!ept)
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d03c      	beq.n	800b896 <rpmsg_virtio_rx_callback+0xe2>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b820:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b824:	d103      	bne.n	800b82e <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 800b826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b828:	681a      	ldr	r2, [r3, #0]
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	629a      	str	r2, [r3, #40]	; 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800b832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b834:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 800b838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83a:	899b      	ldrh	r3, [r3, #12]
 800b83c:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 800b83e:	4618      	mov	r0, r3
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b848:	9300      	str	r3, [sp, #0]
 800b84a:	4613      	mov	r3, r2
 800b84c:	4602      	mov	r2, r0
 800b84e:	6978      	ldr	r0, [r7, #20]
 800b850:	47a0      	blx	r4
 800b852:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d000      	beq.n	800b85c <rpmsg_virtio_rx_callback+0xa8>
 800b85a:	e7fe      	b.n	800b85a <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 800b85c:	69bb      	ldr	r3, [r7, #24]
 800b85e:	3358      	adds	r3, #88	; 0x58
 800b860:	4618      	mov	r0, r3
 800b862:	f7ff fd62 	bl	800b32a <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 800b866:	68fa      	ldr	r2, [r7, #12]
 800b868:	897b      	ldrh	r3, [r7, #10]
 800b86a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b86c:	69f8      	ldr	r0, [r7, #28]
 800b86e:	f7ff fe46 	bl	800b4fe <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 800b872:	f107 020a 	add.w	r2, r7, #10
 800b876:	f107 030c 	add.w	r3, r7, #12
 800b87a:	4619      	mov	r1, r3
 800b87c:	69f8      	ldr	r0, [r7, #28]
 800b87e:	f7ff feac 	bl	800b5da <rpmsg_virtio_get_rx_buffer>
 800b882:	6278      	str	r0, [r7, #36]	; 0x24
		metal_mutex_release(&rdev->lock);
 800b884:	69bb      	ldr	r3, [r7, #24]
 800b886:	3358      	adds	r3, #88	; 0x58
 800b888:	4618      	mov	r0, r3
 800b88a:	f7ff fd59 	bl	800b340 <metal_mutex_release>
	while (rp_hdr) {
 800b88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b890:	2b00      	cmp	r3, #0
 800b892:	d1af      	bne.n	800b7f4 <rpmsg_virtio_rx_callback+0x40>
 800b894:	e000      	b.n	800b898 <rpmsg_virtio_rx_callback+0xe4>
			return;
 800b896:	bf00      	nop
	}
}
 800b898:	372c      	adds	r7, #44	; 0x2c
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd90      	pop	{r4, r7, pc}

0800b89e <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b092      	sub	sp, #72	; 0x48
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	60f8      	str	r0, [r7, #12]
 800b8a6:	60b9      	str	r1, [r7, #8]
 800b8a8:	607a      	str	r2, [r7, #4]
 800b8aa:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	6a1b      	ldr	r3, [r3, #32]
 800b8b0:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 800b8b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8b4:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 800b8b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2b28      	cmp	r3, #40	; 0x28
 800b8c4:	d001      	beq.n	800b8ca <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	e057      	b.n	800b97a <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 800b8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b8d0:	f7ff fcc4 	bl	800b25c <metal_io_virt_to_offset>
 800b8d4:	4601      	mov	r1, r0
 800b8d6:	f107 0210 	add.w	r2, r7, #16
 800b8da:	2320      	movs	r3, #32
 800b8dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b8de:	f7fe fc83 	bl	800a1e8 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 800b8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e4:	6a1b      	ldr	r3, [r3, #32]
 800b8e6:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 800b8e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8ea:	3358      	adds	r3, #88	; 0x58
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f7ff fd1c 	bl	800b32a <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 800b8f2:	f107 0110 	add.w	r1, r7, #16
 800b8f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8f8:	f04f 32ff 	mov.w	r2, #4294967295
 800b8fc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b8fe:	f7ff fb57 	bl	800afb0 <rpmsg_get_endpoint>
 800b902:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 800b904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b908:	f003 0301 	and.w	r3, r3, #1
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d017      	beq.n	800b940 <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 800b910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b912:	2b00      	cmp	r3, #0
 800b914:	d003      	beq.n	800b91e <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 800b916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b918:	f04f 32ff 	mov.w	r2, #4294967295
 800b91c:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
 800b91e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b920:	3358      	adds	r3, #88	; 0x58
 800b922:	4618      	mov	r0, r3
 800b924:	f7ff fd0c 	bl	800b340 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 800b928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d024      	beq.n	800b978 <rpmsg_virtio_ns_callback+0xda>
 800b92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b932:	2b00      	cmp	r3, #0
 800b934:	d020      	beq.n	800b978 <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 800b936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b93a:	68f8      	ldr	r0, [r7, #12]
 800b93c:	4798      	blx	r3
 800b93e:	e01b      	b.n	800b978 <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 800b940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b942:	2b00      	cmp	r3, #0
 800b944:	d110      	bne.n	800b968 <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 800b946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b948:	3358      	adds	r3, #88	; 0x58
 800b94a:	4618      	mov	r0, r3
 800b94c:	f7ff fcf8 	bl	800b340 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 800b950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b954:	2b00      	cmp	r3, #0
 800b956:	d00f      	beq.n	800b978 <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 800b958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b95a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b95c:	f107 0110 	add.w	r1, r7, #16
 800b960:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b962:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b964:	4798      	blx	r3
 800b966:	e007      	b.n	800b978 <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 800b968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b96c:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
 800b96e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b970:	3358      	adds	r3, #88	; 0x58
 800b972:	4618      	mov	r0, r3
 800b974:	f7ff fce4 	bl	800b340 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 800b978:	2300      	movs	r3, #0
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3748      	adds	r7, #72	; 0x48
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}
	...

0800b984 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b094      	sub	sp, #80	; 0x50
 800b988:	af02      	add	r7, sp, #8
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	607a      	str	r2, [r7, #4]
 800b990:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	63bb      	str	r3, [r7, #56]	; 0x38
	memset(rdev, 0, sizeof(*rdev));
 800b996:	2264      	movs	r2, #100	; 0x64
 800b998:	2100      	movs	r1, #0
 800b99a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b99c:	f004 fcda 	bl	8010354 <memset>
	metal_mutex_init(&rdev->lock);
 800b9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a2:	3358      	adds	r3, #88	; 0x58
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7ff fcb5 	bl	800b314 <metal_mutex_init>
	rvdev->vdev = vdev;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	68ba      	ldr	r2, [r7, #8]
 800b9ae:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 800b9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	68fa      	ldr	r2, [r7, #12]
 800b9ba:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 800b9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9be:	4a5d      	ldr	r2, [pc, #372]	; (800bb34 <rpmsg_init_vdev+0x1b0>)
 800b9c0:	661a      	str	r2, [r3, #96]	; 0x60
	role = rpmsg_virtio_get_role(rvdev);
 800b9c2:	68f8      	ldr	r0, [r7, #12]
 800b9c4:	f7ff fce4 	bl	800b390 <rpmsg_virtio_get_role>
 800b9c8:	6378      	str	r0, [r7, #52]	; 0x34

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800b9ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d120      	bne.n	800ba12 <rpmsg_init_vdev+0x8e>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
 800b9d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d101      	bne.n	800b9da <rpmsg_init_vdev+0x56>
			return RPMSG_ERR_PARAM;
 800b9d6:	4b58      	ldr	r3, [pc, #352]	; (800bb38 <rpmsg_init_vdev+0x1b4>)
 800b9d8:	e0a7      	b.n	800bb2a <rpmsg_init_vdev+0x1a6>
		if (!shpool->size)
 800b9da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9dc:	689b      	ldr	r3, [r3, #8]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d101      	bne.n	800b9e6 <rpmsg_init_vdev+0x62>
			return RPMSG_ERR_NO_BUFF;
 800b9e2:	4b56      	ldr	r3, [pc, #344]	; (800bb3c <rpmsg_init_vdev+0x1b8>)
 800b9e4:	e0a1      	b.n	800bb2a <rpmsg_init_vdev+0x1a6>
		rvdev->shpool = shpool;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b9ea:	675a      	str	r2, [r3, #116]	; 0x74

		vq_names[0] = "rx_vq";
 800b9ec:	4b54      	ldr	r3, [pc, #336]	; (800bb40 <rpmsg_init_vdev+0x1bc>)
 800b9ee:	623b      	str	r3, [r7, #32]
		vq_names[1] = "tx_vq";
 800b9f0:	4b54      	ldr	r3, [pc, #336]	; (800bb44 <rpmsg_init_vdev+0x1c0>)
 800b9f2:	627b      	str	r3, [r7, #36]	; 0x24
		callback[0] = rpmsg_virtio_rx_callback;
 800b9f4:	4b54      	ldr	r3, [pc, #336]	; (800bb48 <rpmsg_init_vdev+0x1c4>)
 800b9f6:	61bb      	str	r3, [r7, #24]
		callback[1] = rpmsg_virtio_tx_callback;
 800b9f8:	4b54      	ldr	r3, [pc, #336]	; (800bb4c <rpmsg_init_vdev+0x1c8>)
 800b9fa:	61fb      	str	r3, [r7, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba00:	681a      	ldr	r2, [r3, #0]
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	669a      	str	r2, [r3, #104]	; 0x68
		rvdev->svq  = vdev->vrings_info[1].vq;
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba0a:	3318      	adds	r3, #24
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	66da      	str	r2, [r3, #108]	; 0x6c
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	683a      	ldr	r2, [r7, #0]
 800ba16:	671a      	str	r2, [r3, #112]	; 0x70
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 800ba18:	f107 0220 	add.w	r2, r7, #32
 800ba1c:	f107 0318 	add.w	r3, r7, #24
 800ba20:	9300      	str	r3, [sp, #0]
 800ba22:	4613      	mov	r3, r2
 800ba24:	2202      	movs	r2, #2
 800ba26:	2100      	movs	r1, #0
 800ba28:	68f8      	ldr	r0, [r7, #12]
 800ba2a:	f7ff fcf3 	bl	800b414 <rpmsg_virtio_create_virtqueues>
 800ba2e:	6478      	str	r0, [r7, #68]	; 0x44
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 800ba30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d001      	beq.n	800ba3a <rpmsg_init_vdev+0xb6>
		return status;
 800ba36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba38:	e077      	b.n	800bb2a <rpmsg_init_vdev+0x1a6>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	643b      	str	r3, [r7, #64]	; 0x40
 800ba3e:	e00f      	b.n	800ba60 <rpmsg_init_vdev+0xdc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ba44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ba46:	4613      	mov	r3, r2
 800ba48:	005b      	lsls	r3, r3, #1
 800ba4a:	4413      	add	r3, r2
 800ba4c:	00db      	lsls	r3, r3, #3
 800ba4e:	440b      	add	r3, r1
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	62bb      	str	r3, [r7, #40]	; 0x28
		vq->shm_io = shm_io;
 800ba54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba56:	683a      	ldr	r2, [r7, #0]
 800ba58:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 800ba5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	643b      	str	r3, [r7, #64]	; 0x40
 800ba60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d9ec      	bls.n	800ba40 <rpmsg_init_vdev+0xbc>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800ba66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d137      	bne.n	800badc <rpmsg_init_vdev+0x158>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
 800ba6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba70:	617b      	str	r3, [r7, #20]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 800ba72:	2300      	movs	r3, #0
 800ba74:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba76:	e02a      	b.n	800bace <rpmsg_init_vdev+0x14a>
			/* Initialize TX virtqueue buffers for remote device */
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
 800ba78:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ba7c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ba7e:	f7ff fcef 	bl	800b460 <rpmsg_virtio_shm_pool_get_buffer>
 800ba82:	6338      	str	r0, [r7, #48]	; 0x30
							RPMSG_BUFFER_SIZE);

			if (!buffer) {
 800ba84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d101      	bne.n	800ba8e <rpmsg_init_vdev+0x10a>
				return RPMSG_ERR_NO_BUFF;
 800ba8a:	4b2c      	ldr	r3, [pc, #176]	; (800bb3c <rpmsg_init_vdev+0x1b8>)
 800ba8c:	e04d      	b.n	800bb2a <rpmsg_init_vdev+0x1a6>
			}

			vqbuf.buf = buffer;
 800ba8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba90:	613b      	str	r3, [r7, #16]

			metal_io_block_set(shm_io,
 800ba92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba94:	6838      	ldr	r0, [r7, #0]
 800ba96:	f7ff fbe1 	bl	800b25c <metal_io_virt_to_offset>
 800ba9a:	4601      	mov	r1, r0
 800ba9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800baa0:	2200      	movs	r2, #0
 800baa2:	6838      	ldr	r0, [r7, #0]
 800baa4:	f7fe fc8d 	bl	800a3c2 <metal_io_block_set>
					   metal_io_virt_to_offset(shm_io,
								   buffer),
					   0x00, RPMSG_BUFFER_SIZE);
			status =
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800baac:	f107 0110 	add.w	r1, r7, #16
 800bab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab2:	9300      	str	r3, [sp, #0]
 800bab4:	2301      	movs	r3, #1
 800bab6:	2200      	movs	r2, #0
 800bab8:	f000 f9fd 	bl	800beb6 <virtqueue_add_buffer>
 800babc:	6478      	str	r0, [r7, #68]	; 0x44
						     buffer);

			if (status != RPMSG_SUCCESS) {
 800babe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d001      	beq.n	800bac8 <rpmsg_init_vdev+0x144>
				return status;
 800bac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bac6:	e030      	b.n	800bb2a <rpmsg_init_vdev+0x1a6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 800bac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800baca:	3301      	adds	r3, #1
 800bacc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bad2:	895b      	ldrh	r3, [r3, #10]
 800bad4:	461a      	mov	r2, r3
 800bad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bad8:	4293      	cmp	r3, r2
 800bada:	d3cd      	bcc.n	800ba78 <rpmsg_init_vdev+0xf4>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 800badc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bade:	4618      	mov	r0, r3
 800bae0:	f7ff fbab 	bl	800b23a <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 800bae4:	68f8      	ldr	r0, [r7, #12]
 800bae6:	f7ff fc84 	bl	800b3f2 <rpmsg_virtio_get_features>
 800baea:	62f8      	str	r0, [r7, #44]	; 0x2c

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 800baec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baee:	f003 0301 	and.w	r3, r3, #1
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d011      	beq.n	800bb1a <rpmsg_init_vdev+0x196>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 800baf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf8:	f103 0008 	add.w	r0, r3, #8
 800bafc:	2300      	movs	r3, #0
 800bafe:	9301      	str	r3, [sp, #4]
 800bb00:	4b13      	ldr	r3, [pc, #76]	; (800bb50 <rpmsg_init_vdev+0x1cc>)
 800bb02:	9300      	str	r3, [sp, #0]
 800bb04:	2335      	movs	r3, #53	; 0x35
 800bb06:	2235      	movs	r2, #53	; 0x35
 800bb08:	4912      	ldr	r1, [pc, #72]	; (800bb54 <rpmsg_init_vdev+0x1d0>)
 800bb0a:	f7ff fc24 	bl	800b356 <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 800bb0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb10:	3308      	adds	r3, #8
 800bb12:	4619      	mov	r1, r3
 800bb14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb16:	f7ff facd 	bl	800b0b4 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
 800bb1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d103      	bne.n	800bb28 <rpmsg_init_vdev+0x1a4>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
 800bb20:	2104      	movs	r1, #4
 800bb22:	68f8      	ldr	r0, [r7, #12]
 800bb24:	f7ff fc41 	bl	800b3aa <rpmsg_virtio_set_status>
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 800bb28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3748      	adds	r7, #72	; 0x48
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop
 800bb34:	0800b651 	.word	0x0800b651
 800bb38:	fffff82d 	.word	0xfffff82d
 800bb3c:	fffff82e 	.word	0xfffff82e
 800bb40:	080153c4 	.word	0x080153c4
 800bb44:	080153cc 	.word	0x080153cc
 800bb48:	0800b7b5 	.word	0x0800b7b5
 800bb4c:	0800b7a1 	.word	0x0800b7a1
 800bb50:	0800b89f 	.word	0x0800b89f
 800bb54:	080153d4 	.word	0x080153d4

0800bb58 <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 800bb62:	bf00      	nop
 800bb64:	370c      	adds	r7, #12
 800bb66:	46bd      	mov	sp, r7
 800bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6c:	4770      	bx	lr

0800bb6e <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 800bb6e:	b480      	push	{r7}
 800bb70:	b083      	sub	sp, #12
 800bb72:	af00      	add	r7, sp, #0
 800bb74:	6078      	str	r0, [r7, #4]
 800bb76:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 800bb78:	bf00      	nop
 800bb7a:	370c      	adds	r7, #12
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr

0800bb84 <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b085      	sub	sp, #20
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	60f8      	str	r0, [r7, #12]
 800bb8c:	60b9      	str	r1, [r7, #8]
 800bb8e:	607a      	str	r2, [r7, #4]
 800bb90:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 800bb92:	68fb      	ldr	r3, [r7, #12]
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3714      	adds	r7, #20
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr

0800bba0 <vring_size>:
 */
#define vring_used_event(vr)	((vr)->avail->ring[(vr)->num])
#define vring_avail_event(vr)	((vr)->used->ring[(vr)->num].id & 0xFFFF)

static inline int vring_size(unsigned int num, unsigned long align)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b085      	sub	sp, #20
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
	int size;

	size = num * sizeof(struct vring_desc);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	011b      	lsls	r3, r3, #4
 800bbae:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	3303      	adds	r3, #3
 800bbb4:	005a      	lsls	r2, r3, #1
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	4413      	add	r3, r2
 800bbba:	60fb      	str	r3, [r7, #12]
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
 800bbbc:	68fa      	ldr	r2, [r7, #12]
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	4413      	add	r3, r2
 800bbc2:	1e5a      	subs	r2, r3, #1
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	425b      	negs	r3, r3
 800bbc8:	4013      	ands	r3, r2
 800bbca:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	00da      	lsls	r2, r3, #3
	size += sizeof(struct vring_used) +
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	4413      	add	r3, r2
 800bbd4:	3306      	adds	r3, #6
 800bbd6:	60fb      	str	r3, [r7, #12]

	return size;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3714      	adds	r7, #20
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe4:	4770      	bx	lr

0800bbe6 <metal_io_virt_to_offset>:
{
 800bbe6:	b480      	push	{r7}
 800bbe8:	b085      	sub	sp, #20
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	6078      	str	r0, [r7, #4]
 800bbee:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	683a      	ldr	r2, [r7, #0]
 800bbf6:	1ad3      	subs	r3, r2, r3
 800bbf8:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	689b      	ldr	r3, [r3, #8]
 800bbfe:	68fa      	ldr	r2, [r7, #12]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d201      	bcs.n	800bc08 <metal_io_virt_to_offset+0x22>
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	e001      	b.n	800bc0c <metal_io_virt_to_offset+0x26>
 800bc08:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3714      	adds	r7, #20
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr

0800bc18 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 800bc18:	b590      	push	{r4, r7, lr}
 800bc1a:	b091      	sub	sp, #68	; 0x44
 800bc1c:	af04      	add	r7, sp, #16
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	60b9      	str	r1, [r7, #8]
 800bc22:	607a      	str	r2, [r7, #4]
 800bc24:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc2a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (nvqs > num_vrings)
 800bc2c:	687a      	ldr	r2, [r7, #4]
 800bc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d902      	bls.n	800bc3a <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 800bc34:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 800bc38:	e053      	b.n	800bce2 <virtio_create_virtqueues+0xca>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc3e:	e04b      	b.n	800bcd8 <virtio_create_virtqueues+0xc0>
		vring_info = &vdev->vrings_info[i];
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bc44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc46:	4613      	mov	r3, r2
 800bc48:	005b      	lsls	r3, r3, #1
 800bc4a:	4413      	add	r3, r2
 800bc4c:	00db      	lsls	r3, r3, #3
 800bc4e:	440b      	add	r3, r1
 800bc50:	627b      	str	r3, [r7, #36]	; 0x24

		vring_alloc = &vring_info->info;
 800bc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc54:	3304      	adds	r3, #4
 800bc56:	623b      	str	r3, [r7, #32]
#ifndef VIRTIO_SLAVE_ONLY
		if (vdev->role == VIRTIO_DEV_MASTER) {
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	699b      	ldr	r3, [r3, #24]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d118      	bne.n	800bc92 <virtio_create_virtqueues+0x7a>
			size_t offset;
			struct metal_io_region *io = vring_info->io;
 800bc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc62:	695b      	ldr	r3, [r3, #20]
 800bc64:	61fb      	str	r3, [r7, #28]

			offset = metal_io_virt_to_offset(io,
 800bc66:	6a3b      	ldr	r3, [r7, #32]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	69f8      	ldr	r0, [r7, #28]
 800bc6e:	f7ff ffba 	bl	800bbe6 <metal_io_virt_to_offset>
 800bc72:	61b8      	str	r0, [r7, #24]
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
 800bc74:	6a3b      	ldr	r3, [r7, #32]
 800bc76:	891b      	ldrh	r3, [r3, #8]
			metal_io_block_set(io, offset, 0,
 800bc78:	461a      	mov	r2, r3
 800bc7a:	6a3b      	ldr	r3, [r7, #32]
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	4619      	mov	r1, r3
 800bc80:	4610      	mov	r0, r2
 800bc82:	f7ff ff8d 	bl	800bba0 <vring_size>
 800bc86:	4603      	mov	r3, r0
 800bc88:	2200      	movs	r2, #0
 800bc8a:	69b9      	ldr	r1, [r7, #24]
 800bc8c:	69f8      	ldr	r0, [r7, #28]
 800bc8e:	f7fe fb98 	bl	800a3c2 <metal_io_block_set>
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 800bc92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc94:	b298      	uxth	r0, r3
 800bc96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc98:	009b      	lsls	r3, r3, #2
 800bc9a:	683a      	ldr	r2, [r7, #0]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 800bca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca2:	009b      	lsls	r3, r3, #2
 800bca4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bca6:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 800bca8:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 800bcaa:	68fa      	ldr	r2, [r7, #12]
 800bcac:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 800bcae:	6a12      	ldr	r2, [r2, #32]
 800bcb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bcb2:	6809      	ldr	r1, [r1, #0]
 800bcb4:	9102      	str	r1, [sp, #8]
 800bcb6:	9201      	str	r2, [sp, #4]
 800bcb8:	9300      	str	r3, [sp, #0]
 800bcba:	6a3b      	ldr	r3, [r7, #32]
 800bcbc:	4622      	mov	r2, r4
 800bcbe:	4601      	mov	r1, r0
 800bcc0:	68f8      	ldr	r0, [r7, #12]
 800bcc2:	f000 f8c4 	bl	800be4e <virtqueue_create>
 800bcc6:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d001      	beq.n	800bcd2 <virtio_create_virtqueues+0xba>
			return ret;
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	e007      	b.n	800bce2 <virtio_create_virtqueues+0xca>
	for (i = 0; i < nvqs; i++) {
 800bcd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bcd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d3af      	bcc.n	800bc40 <virtio_create_virtqueues+0x28>
	}
	return 0;
 800bce0:	2300      	movs	r3, #0
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3734      	adds	r7, #52	; 0x34
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd90      	pop	{r4, r7, pc}

0800bcea <vring_init>:

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 800bcea:	b480      	push	{r7}
 800bcec:	b085      	sub	sp, #20
 800bcee:	af00      	add	r7, sp, #0
 800bcf0:	60f8      	str	r0, [r7, #12]
 800bcf2:	60b9      	str	r1, [r7, #8]
 800bcf4:	607a      	str	r2, [r7, #4]
 800bcf6:	603b      	str	r3, [r7, #0]
	vr->num = num;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	68ba      	ldr	r2, [r7, #8]
 800bcfc:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	011b      	lsls	r3, r3, #4
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	441a      	add	r2, r3
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	689a      	ldr	r2, [r3, #8]
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	005b      	lsls	r3, r3, #1
 800bd18:	4413      	add	r3, r2
 800bd1a:	3304      	adds	r3, #4
 800bd1c:	461a      	mov	r2, r3
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 800bd22:	1c5a      	adds	r2, r3, #1
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	425b      	negs	r3, r3
 800bd28:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	60da      	str	r2, [r3, #12]
}
 800bd30:	bf00      	nop
 800bd32:	3714      	adds	r7, #20
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr

0800bd3c <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b083      	sub	sp, #12
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	4603      	mov	r3, r0
 800bd44:	80fb      	strh	r3, [r7, #6]
 800bd46:	460b      	mov	r3, r1
 800bd48:	80bb      	strh	r3, [r7, #4]
 800bd4a:	4613      	mov	r3, r2
 800bd4c:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 800bd4e:	88ba      	ldrh	r2, [r7, #4]
 800bd50:	88fb      	ldrh	r3, [r7, #6]
 800bd52:	1ad3      	subs	r3, r2, r3
 800bd54:	b29b      	uxth	r3, r3
 800bd56:	3b01      	subs	r3, #1
 800bd58:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 800bd5a:	88b9      	ldrh	r1, [r7, #4]
 800bd5c:	887b      	ldrh	r3, [r7, #2]
 800bd5e:	1acb      	subs	r3, r1, r3
 800bd60:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 800bd62:	429a      	cmp	r2, r3
 800bd64:	bf34      	ite	cc
 800bd66:	2301      	movcc	r3, #1
 800bd68:	2300      	movcs	r3, #0
 800bd6a:	b2db      	uxtb	r3, r3
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	370c      	adds	r7, #12
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr

0800bd78 <metal_io_virt_to_offset>:
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b085      	sub	sp, #20
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	683a      	ldr	r2, [r7, #0]
 800bd88:	1ad3      	subs	r3, r2, r3
 800bd8a:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	689b      	ldr	r3, [r3, #8]
 800bd90:	68fa      	ldr	r2, [r7, #12]
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d201      	bcs.n	800bd9a <metal_io_virt_to_offset+0x22>
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	e001      	b.n	800bd9e <metal_io_virt_to_offset+0x26>
 800bd9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3714      	adds	r7, #20
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr

0800bdaa <metal_io_phys>:
{
 800bdaa:	b480      	push	{r7}
 800bdac:	b085      	sub	sp, #20
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
 800bdb2:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 800bdb8:	2b1f      	cmp	r3, #31
 800bdba:	d805      	bhi.n	800bdc8 <metal_io_phys+0x1e>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	68db      	ldr	r3, [r3, #12]
 800bdc0:	683a      	ldr	r2, [r7, #0]
 800bdc2:	fa22 f303 	lsr.w	r3, r2, r3
 800bdc6:	e000      	b.n	800bdca <metal_io_phys+0x20>
 800bdc8:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 800bdca:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d010      	beq.n	800bdf6 <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	689b      	ldr	r3, [r3, #8]
 800bdd8:	683a      	ldr	r2, [r7, #0]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d80b      	bhi.n	800bdf6 <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	685a      	ldr	r2, [r3, #4]
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	009b      	lsls	r3, r3, #2
 800bde6:	4413      	add	r3, r2
 800bde8:	681a      	ldr	r2, [r3, #0]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6919      	ldr	r1, [r3, #16]
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 800bdf2:	4413      	add	r3, r2
 800bdf4:	e001      	b.n	800bdfa <metal_io_phys+0x50>
 800bdf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3714      	adds	r7, #20
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr

0800be06 <metal_io_virt_to_phys>:
{
 800be06:	b580      	push	{r7, lr}
 800be08:	b082      	sub	sp, #8
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	6078      	str	r0, [r7, #4]
 800be0e:	6039      	str	r1, [r7, #0]
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
 800be10:	6839      	ldr	r1, [r7, #0]
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f7ff ffb0 	bl	800bd78 <metal_io_virt_to_offset>
 800be18:	4603      	mov	r3, r0
 800be1a:	4619      	mov	r1, r3
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f7ff ffc4 	bl	800bdaa <metal_io_phys>
 800be22:	4603      	mov	r3, r0
}
 800be24:	4618      	mov	r0, r3
 800be26:	3708      	adds	r7, #8
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}

0800be2c <virtqueue_virt_to_phys>:
}

/* Default implementation of V2P based on libmetal */
static inline metal_phys_addr_t virtqueue_virt_to_phys(struct virtqueue *vq,
						       void *buf)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b084      	sub	sp, #16
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be3a:	60fb      	str	r3, [r7, #12]

	return metal_io_virt_to_phys(io, buf);
 800be3c:	6839      	ldr	r1, [r7, #0]
 800be3e:	68f8      	ldr	r0, [r7, #12]
 800be40:	f7ff ffe1 	bl	800be06 <metal_io_virt_to_phys>
 800be44:	4603      	mov	r3, r0
}
 800be46:	4618      	mov	r0, r3
 800be48:	3710      	adds	r7, #16
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}

0800be4e <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 800be4e:	b580      	push	{r7, lr}
 800be50:	b086      	sub	sp, #24
 800be52:	af00      	add	r7, sp, #0
 800be54:	60f8      	str	r0, [r7, #12]
 800be56:	607a      	str	r2, [r7, #4]
 800be58:	603b      	str	r3, [r7, #0]
 800be5a:	460b      	mov	r3, r1
 800be5c:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 800be5e:	2300      	movs	r3, #0
 800be60:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d121      	bne.n	800beac <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 800be68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be6a:	68fa      	ldr	r2, [r7, #12]
 800be6c:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 800be6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be70:	687a      	ldr	r2, [r7, #4]
 800be72:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 800be74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be76:	897a      	ldrh	r2, [r7, #10]
 800be78:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	891a      	ldrh	r2, [r3, #8]
 800be7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be80:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 800be82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be84:	895a      	ldrh	r2, [r3, #10]
 800be86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be88:	851a      	strh	r2, [r3, #40]	; 0x28
		vq->callback = callback;
 800be8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be8c:	6a3a      	ldr	r2, [r7, #32]
 800be8e:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 800be90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be94:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	6819      	ldr	r1, [r3, #0]
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	461a      	mov	r2, r3
 800bea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bea2:	f000 f97a 	bl	800c19a <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 800bea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bea8:	f000 f899 	bl	800bfde <virtqueue_disable_cb>
	}

	return (status);
 800beac:	697b      	ldr	r3, [r7, #20]
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3718      	adds	r7, #24
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}

0800beb6 <virtqueue_add_buffer>:
 *
 * @return                  - Function status
 */
int virtqueue_add_buffer(struct virtqueue *vq, struct virtqueue_buf *buf_list,
			 int readable, int writable, void *cookie)
{
 800beb6:	b580      	push	{r7, lr}
 800beb8:	b08a      	sub	sp, #40	; 0x28
 800beba:	af02      	add	r7, sp, #8
 800bebc:	60f8      	str	r0, [r7, #12]
 800bebe:	60b9      	str	r1, [r7, #8]
 800bec0:	607a      	str	r2, [r7, #4]
 800bec2:	603b      	str	r3, [r7, #0]
	struct vq_desc_extra *dxp = NULL;
 800bec4:	2300      	movs	r3, #0
 800bec6:	61fb      	str	r3, [r7, #28]
	int status = VQUEUE_SUCCESS;
 800bec8:	2300      	movs	r3, #0
 800beca:	61bb      	str	r3, [r7, #24]
	uint16_t head_idx;
	uint16_t idx;
	int needed;

	needed = readable + writable;
 800becc:	687a      	ldr	r2, [r7, #4]
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	4413      	add	r3, r2
 800bed2:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(needed < 1, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(vq->vq_free_cnt == 0, status, ERROR_VRING_FULL);

	VQUEUE_BUSY(vq);

	if (status == VQUEUE_SUCCESS) {
 800bed4:	69bb      	ldr	r3, [r7, #24]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d12c      	bne.n	800bf34 <virtqueue_add_buffer+0x7e>
		VQASSERT(vq, cookie != NULL, "enqueuing with no cookie");

		head_idx = vq->vq_desc_head_idx;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800bede:	827b      	strh	r3, [r7, #18]
		VQ_RING_ASSERT_VALID_IDX(vq, head_idx);
		dxp = &vq->vq_descx[head_idx];
 800bee0:	8a7b      	ldrh	r3, [r7, #18]
 800bee2:	3307      	adds	r3, #7
 800bee4:	00db      	lsls	r3, r3, #3
 800bee6:	68fa      	ldr	r2, [r7, #12]
 800bee8:	4413      	add	r3, r2
 800beea:	61fb      	str	r3, [r7, #28]

		VQASSERT(vq, dxp->cookie == NULL,
			 "cookie already exists for index");

		dxp->cookie = cookie;
 800beec:	69fb      	ldr	r3, [r7, #28]
 800beee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bef0:	601a      	str	r2, [r3, #0]
		dxp->ndescs = needed;
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	b29a      	uxth	r2, r3
 800bef6:	69fb      	ldr	r3, [r7, #28]
 800bef8:	809a      	strh	r2, [r3, #4]

		/* Enqueue buffer onto the ring. */
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	69d9      	ldr	r1, [r3, #28]
 800befe:	8a7a      	ldrh	r2, [r7, #18]
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	9301      	str	r3, [sp, #4]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	9300      	str	r3, [sp, #0]
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	68f8      	ldr	r0, [r7, #12]
 800bf0c:	f000 f8a7 	bl	800c05e <vq_ring_add_buffer>
 800bf10:	4603      	mov	r3, r0
 800bf12:	823b      	strh	r3, [r7, #16]
					 buf_list, readable, writable);

		vq->vq_desc_head_idx = idx;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	8a3a      	ldrh	r2, [r7, #16]
 800bf18:	861a      	strh	r2, [r3, #48]	; 0x30
		vq->vq_free_cnt -= needed;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	b29b      	uxth	r3, r3
 800bf22:	1ad3      	subs	r3, r2, r3
 800bf24:	b29a      	uxth	r2, r3
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	851a      	strh	r2, [r3, #40]	; 0x28

		/*
		 * Update vring_avail control block fields so that other
		 * side can get buffer using it.
		 */
		vq_ring_update_avail(vq, head_idx);
 800bf2a:	8a7b      	ldrh	r3, [r7, #18]
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	68f8      	ldr	r0, [r7, #12]
 800bf30:	f000 f966 	bl	800c200 <vq_ring_update_avail>
	}

	VQUEUE_IDLE(vq);

	return status;
 800bf34:	69bb      	ldr	r3, [r7, #24]
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3720      	adds	r7, #32
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}

0800bf3e <virtqueue_get_buffer>:
 * @param idx           - index of the buffer
 *
 * @return              - Pointer to used buffer
 */
void *virtqueue_get_buffer(struct virtqueue *vq, uint32_t *len, uint16_t *idx)
{
 800bf3e:	b580      	push	{r7, lr}
 800bf40:	b088      	sub	sp, #32
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	60f8      	str	r0, [r7, #12]
 800bf46:	60b9      	str	r1, [r7, #8]
 800bf48:	607a      	str	r2, [r7, #4]
	struct vring_used_elem *uep;
	void *cookie;
	uint16_t used_idx, desc_idx;

	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d006      	beq.n	800bf5e <virtqueue_get_buffer+0x20>
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf58:	885b      	ldrh	r3, [r3, #2]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d101      	bne.n	800bf62 <virtqueue_get_buffer+0x24>
		return (NULL);
 800bf5e:	2300      	movs	r3, #0
 800bf60:	e039      	b.n	800bfd6 <virtqueue_get_buffer+0x98>

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf66:	1c5a      	adds	r2, r3, #1
 800bf68:	b291      	uxth	r1, r2
 800bf6a:	68fa      	ldr	r2, [r7, #12]
 800bf6c:	8651      	strh	r1, [r2, #50]	; 0x32
 800bf6e:	b21a      	sxth	r2, r3
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	895b      	ldrh	r3, [r3, #10]
 800bf74:	3b01      	subs	r3, #1
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	b21b      	sxth	r3, r3
 800bf7a:	4013      	ands	r3, r2
 800bf7c:	b21b      	sxth	r3, r3
 800bf7e:	83fb      	strh	r3, [r7, #30]
	uep = &vq->vq_ring.used->ring[used_idx];
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf84:	8bfb      	ldrh	r3, [r7, #30]
 800bf86:	00db      	lsls	r3, r3, #3
 800bf88:	4413      	add	r3, r2
 800bf8a:	3304      	adds	r3, #4
 800bf8c:	61bb      	str	r3, [r7, #24]

	atomic_thread_fence(memory_order_seq_cst);
 800bf8e:	f3bf 8f5b 	dmb	ish

	desc_idx = (uint16_t)uep->id;
 800bf92:	69bb      	ldr	r3, [r7, #24]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	82fb      	strh	r3, [r7, #22]
	if (len)
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d003      	beq.n	800bfa6 <virtqueue_get_buffer+0x68>
		*len = uep->len;
 800bf9e:	69bb      	ldr	r3, [r7, #24]
 800bfa0:	685a      	ldr	r2, [r3, #4]
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	601a      	str	r2, [r3, #0]

	vq_ring_free_chain(vq, desc_idx);
 800bfa6:	8afb      	ldrh	r3, [r7, #22]
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	68f8      	ldr	r0, [r7, #12]
 800bfac:	f000 f8ae 	bl	800c10c <vq_ring_free_chain>

	cookie = vq->vq_descx[desc_idx].cookie;
 800bfb0:	8afa      	ldrh	r2, [r7, #22]
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	3207      	adds	r2, #7
 800bfb6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800bfba:	613b      	str	r3, [r7, #16]
	vq->vq_descx[desc_idx].cookie = NULL;
 800bfbc:	8afa      	ldrh	r2, [r7, #22]
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	3207      	adds	r2, #7
 800bfc2:	2100      	movs	r1, #0
 800bfc4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

	if (idx)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d002      	beq.n	800bfd4 <virtqueue_get_buffer+0x96>
		*idx = used_idx;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	8bfa      	ldrh	r2, [r7, #30]
 800bfd2:	801a      	strh	r2, [r3, #0]
	VQUEUE_IDLE(vq);

	return cookie;
 800bfd4:	693b      	ldr	r3, [r7, #16]
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3720      	adds	r7, #32
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 800bfde:	b480      	push	{r7}
 800bfe0:	b083      	sub	sp, #12
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	68db      	ldr	r3, [r3, #12]
 800bfea:	f003 0302 	and.w	r3, r3, #2
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d010      	beq.n	800c014 <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	895b      	ldrh	r3, [r3, #10]
 800bffa:	1ad3      	subs	r3, r2, r3
 800bffc:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6a1a      	ldr	r2, [r3, #32]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 800c006:	3901      	subs	r1, #1
 800c008:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 800c00a:	005b      	lsls	r3, r3, #1
 800c00c:	4413      	add	r3, r2
 800c00e:	460a      	mov	r2, r1
 800c010:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 800c012:	e008      	b.n	800c026 <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6a1b      	ldr	r3, [r3, #32]
 800c018:	881a      	ldrh	r2, [r3, #0]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6a1b      	ldr	r3, [r3, #32]
 800c01e:	f042 0201 	orr.w	r2, r2, #1
 800c022:	b292      	uxth	r2, r2
 800c024:	801a      	strh	r2, [r3, #0]
}
 800c026:	bf00      	nop
 800c028:	370c      	adds	r7, #12
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr

0800c032 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 800c032:	b580      	push	{r7, lr}
 800c034:	b082      	sub	sp, #8
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 800c03a:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 f91d 	bl	800c27e <vq_ring_must_notify_host>
 800c044:	4603      	mov	r3, r0
 800c046:	2b00      	cmp	r3, #0
 800c048:	d002      	beq.n	800c050 <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 f94d 	bl	800c2ea <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2200      	movs	r2, #0
 800c054:	855a      	strh	r2, [r3, #42]	; 0x2a

	VQUEUE_IDLE(vq);
}
 800c056:	bf00      	nop
 800c058:	3708      	adds	r7, #8
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}

0800c05e <vq_ring_add_buffer>:
 */
static uint16_t vq_ring_add_buffer(struct virtqueue *vq,
				   struct vring_desc *desc, uint16_t head_idx,
				   struct virtqueue_buf *buf_list, int readable,
				   int writable)
{
 800c05e:	b580      	push	{r7, lr}
 800c060:	b088      	sub	sp, #32
 800c062:	af00      	add	r7, sp, #0
 800c064:	60f8      	str	r0, [r7, #12]
 800c066:	60b9      	str	r1, [r7, #8]
 800c068:	603b      	str	r3, [r7, #0]
 800c06a:	4613      	mov	r3, r2
 800c06c:	80fb      	strh	r3, [r7, #6]
	int i, needed;
	uint16_t idx;

	(void)vq;

	needed = readable + writable;
 800c06e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c072:	4413      	add	r3, r2
 800c074:	617b      	str	r3, [r7, #20]

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 800c076:	2300      	movs	r3, #0
 800c078:	61fb      	str	r3, [r7, #28]
 800c07a:	88fb      	ldrh	r3, [r7, #6]
 800c07c:	837b      	strh	r3, [r7, #26]
 800c07e:	e03c      	b.n	800c0fa <vq_ring_add_buffer+0x9c>
		VQASSERT(vq, idx != VQ_RING_DESC_CHAIN_END,
			 "premature end of free desc chain");

		dp = &desc[idx];
 800c080:	8b7b      	ldrh	r3, [r7, #26]
 800c082:	011b      	lsls	r3, r3, #4
 800c084:	68ba      	ldr	r2, [r7, #8]
 800c086:	4413      	add	r3, r2
 800c088:	613b      	str	r3, [r7, #16]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
 800c08a:	69fb      	ldr	r3, [r7, #28]
 800c08c:	00db      	lsls	r3, r3, #3
 800c08e:	683a      	ldr	r2, [r7, #0]
 800c090:	4413      	add	r3, r2
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	4619      	mov	r1, r3
 800c096:	68f8      	ldr	r0, [r7, #12]
 800c098:	f7ff fec8 	bl	800be2c <virtqueue_virt_to_phys>
 800c09c:	4603      	mov	r3, r0
 800c09e:	461a      	mov	r2, r3
 800c0a0:	f04f 0300 	mov.w	r3, #0
 800c0a4:	6939      	ldr	r1, [r7, #16]
 800c0a6:	e9c1 2300 	strd	r2, r3, [r1]
		dp->len = buf_list[i].len;
 800c0aa:	69fb      	ldr	r3, [r7, #28]
 800c0ac:	00db      	lsls	r3, r3, #3
 800c0ae:	683a      	ldr	r2, [r7, #0]
 800c0b0:	4413      	add	r3, r2
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	461a      	mov	r2, r3
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	609a      	str	r2, [r3, #8]
		dp->flags = 0;
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	819a      	strh	r2, [r3, #12]

		if (i < needed - 1)
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	3b01      	subs	r3, #1
 800c0c4:	69fa      	ldr	r2, [r7, #28]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	da06      	bge.n	800c0d8 <vq_ring_add_buffer+0x7a>
			dp->flags |= VRING_DESC_F_NEXT;
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	899b      	ldrh	r3, [r3, #12]
 800c0ce:	f043 0301 	orr.w	r3, r3, #1
 800c0d2:	b29a      	uxth	r2, r3
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	819a      	strh	r2, [r3, #12]

		/*
		 * Readable buffers are inserted  into vring before the
		 * writable buffers.
		 */
		if (i >= readable)
 800c0d8:	69fa      	ldr	r2, [r7, #28]
 800c0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	db06      	blt.n	800c0ee <vq_ring_add_buffer+0x90>
			dp->flags |= VRING_DESC_F_WRITE;
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	899b      	ldrh	r3, [r3, #12]
 800c0e4:	f043 0302 	orr.w	r3, r3, #2
 800c0e8:	b29a      	uxth	r2, r3
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	819a      	strh	r2, [r3, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 800c0ee:	69fb      	ldr	r3, [r7, #28]
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	61fb      	str	r3, [r7, #28]
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	89db      	ldrh	r3, [r3, #14]
 800c0f8:	837b      	strh	r3, [r7, #26]
 800c0fa:	69fa      	ldr	r2, [r7, #28]
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	429a      	cmp	r2, r3
 800c100:	dbbe      	blt.n	800c080 <vq_ring_add_buffer+0x22>
	}

	return (idx);
 800c102:	8b7b      	ldrh	r3, [r7, #26]
}
 800c104:	4618      	mov	r0, r3
 800c106:	3720      	adds	r7, #32
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
 800c10c:	b480      	push	{r7}
 800c10e:	b085      	sub	sp, #20
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	460b      	mov	r3, r1
 800c116:	807b      	strh	r3, [r7, #2]
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	69da      	ldr	r2, [r3, #28]
 800c11c:	887b      	ldrh	r3, [r7, #2]
 800c11e:	011b      	lsls	r3, r3, #4
 800c120:	4413      	add	r3, r2
 800c122:	60fb      	str	r3, [r7, #12]
	dxp = &vq->vq_descx[desc_idx];
 800c124:	887b      	ldrh	r3, [r7, #2]
 800c126:	3307      	adds	r3, #7
 800c128:	00db      	lsls	r3, r3, #3
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	4413      	add	r3, r2
 800c12e:	60bb      	str	r3, [r7, #8]

	if (vq->vq_free_cnt == 0) {
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	889b      	ldrh	r3, [r3, #4]
 800c138:	4413      	add	r3, r2
 800c13a:	b29a      	uxth	r2, r3
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	851a      	strh	r2, [r3, #40]	; 0x28
	dxp->ndescs--;
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	889b      	ldrh	r3, [r3, #4]
 800c144:	3b01      	subs	r3, #1
 800c146:	b29a      	uxth	r2, r3
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	809a      	strh	r2, [r3, #4]

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	899b      	ldrh	r3, [r3, #12]
 800c150:	f003 0304 	and.w	r3, r3, #4
 800c154:	2b00      	cmp	r3, #0
 800c156:	d113      	bne.n	800c180 <vq_ring_free_chain+0x74>
		while (dp->flags & VRING_DESC_F_NEXT) {
 800c158:	e00c      	b.n	800c174 <vq_ring_free_chain+0x68>
			VQ_RING_ASSERT_VALID_IDX(vq, dp->next);
			dp = &vq->vq_ring.desc[dp->next];
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	69da      	ldr	r2, [r3, #28]
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	89db      	ldrh	r3, [r3, #14]
 800c162:	011b      	lsls	r3, r3, #4
 800c164:	4413      	add	r3, r2
 800c166:	60fb      	str	r3, [r7, #12]
			dxp->ndescs--;
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	889b      	ldrh	r3, [r3, #4]
 800c16c:	3b01      	subs	r3, #1
 800c16e:	b29a      	uxth	r2, r3
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	809a      	strh	r2, [r3, #4]
		while (dp->flags & VRING_DESC_F_NEXT) {
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	899b      	ldrh	r3, [r3, #12]
 800c178:	f003 0301 	and.w	r3, r3, #1
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d1ec      	bne.n	800c15a <vq_ring_free_chain+0x4e>
	/*
	 * We must append the existing free chain, if any, to the end of
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 */
	dp->next = vq->vq_desc_head_idx;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	81da      	strh	r2, [r3, #14]
	vq->vq_desc_head_idx = desc_idx;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	887a      	ldrh	r2, [r7, #2]
 800c18c:	861a      	strh	r2, [r3, #48]	; 0x30
}
 800c18e:	bf00      	nop
 800c190:	3714      	adds	r7, #20
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr

0800c19a <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b088      	sub	sp, #32
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	60f8      	str	r0, [r7, #12]
 800c1a2:	60b9      	str	r1, [r7, #8]
 800c1a4:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	895b      	ldrh	r3, [r3, #10]
 800c1aa:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	3318      	adds	r3, #24
 800c1b0:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 800c1b2:	69b9      	ldr	r1, [r7, #24]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	68ba      	ldr	r2, [r7, #8]
 800c1b8:	6978      	ldr	r0, [r7, #20]
 800c1ba:	f7ff fd96 	bl	800bcea <vring_init>

	for (i = 0; i < size - 1; i++)
 800c1be:	2300      	movs	r3, #0
 800c1c0:	61fb      	str	r3, [r7, #28]
 800c1c2:	e00c      	b.n	800c1de <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 800c1c4:	69fb      	ldr	r3, [r7, #28]
 800c1c6:	b29a      	uxth	r2, r3
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	6859      	ldr	r1, [r3, #4]
 800c1cc:	69fb      	ldr	r3, [r7, #28]
 800c1ce:	011b      	lsls	r3, r3, #4
 800c1d0:	440b      	add	r3, r1
 800c1d2:	3201      	adds	r2, #1
 800c1d4:	b292      	uxth	r2, r2
 800c1d6:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 800c1d8:	69fb      	ldr	r3, [r7, #28]
 800c1da:	3301      	adds	r3, #1
 800c1dc:	61fb      	str	r3, [r7, #28]
 800c1de:	69bb      	ldr	r3, [r7, #24]
 800c1e0:	3b01      	subs	r3, #1
 800c1e2:	69fa      	ldr	r2, [r7, #28]
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	dbed      	blt.n	800c1c4 <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	685a      	ldr	r2, [r3, #4]
 800c1ec:	69fb      	ldr	r3, [r7, #28]
 800c1ee:	011b      	lsls	r3, r3, #4
 800c1f0:	4413      	add	r3, r2
 800c1f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c1f6:	81da      	strh	r2, [r3, #14]
}
 800c1f8:	bf00      	nop
 800c1fa:	3720      	adds	r7, #32
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <vq_ring_update_avail>:
 *
 * vq_ring_update_avail
 *
 */
static void vq_ring_update_avail(struct virtqueue *vq, uint16_t desc_idx)
{
 800c200:	b480      	push	{r7}
 800c202:	b085      	sub	sp, #20
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	460b      	mov	r3, r1
 800c20a:	807b      	strh	r3, [r7, #2]
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6a1b      	ldr	r3, [r3, #32]
 800c210:	885b      	ldrh	r3, [r3, #2]
 800c212:	b21a      	sxth	r2, r3
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	895b      	ldrh	r3, [r3, #10]
 800c218:	3b01      	subs	r3, #1
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	b21b      	sxth	r3, r3
 800c21e:	4013      	ands	r3, r2
 800c220:	b21b      	sxth	r3, r3
 800c222:	81fb      	strh	r3, [r7, #14]
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6a1a      	ldr	r2, [r3, #32]
 800c228:	89fb      	ldrh	r3, [r7, #14]
 800c22a:	005b      	lsls	r3, r3, #1
 800c22c:	4413      	add	r3, r2
 800c22e:	887a      	ldrh	r2, [r7, #2]
 800c230:	809a      	strh	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 800c232:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6a1b      	ldr	r3, [r3, #32]
 800c23a:	885a      	ldrh	r2, [r3, #2]
 800c23c:	3201      	adds	r2, #1
 800c23e:	b292      	uxth	r2, r2
 800c240:	805a      	strh	r2, [r3, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c246:	3301      	adds	r3, #1
 800c248:	b29a      	uxth	r2, r3
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c24e:	bf00      	nop
 800c250:	3714      	adds	r7, #20
 800c252:	46bd      	mov	sp, r7
 800c254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c258:	4770      	bx	lr

0800c25a <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 800c25a:	b580      	push	{r7, lr}
 800c25c:	b082      	sub	sp, #8
 800c25e:	af00      	add	r7, sp, #0
 800c260:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 800c262:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	691b      	ldr	r3, [r3, #16]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d003      	beq.n	800c276 <virtqueue_notification+0x1c>
		vq->callback(vq);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	691b      	ldr	r3, [r3, #16]
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	4798      	blx	r3
}
 800c276:	bf00      	nop
 800c278:	3708      	adds	r7, #8
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}

0800c27e <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 800c27e:	b580      	push	{r7, lr}
 800c280:	b084      	sub	sp, #16
 800c282:	af00      	add	r7, sp, #0
 800c284:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	68db      	ldr	r3, [r3, #12]
 800c28a:	f003 0302 	and.w	r3, r3, #2
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d01d      	beq.n	800c2ce <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6a1b      	ldr	r3, [r3, #32]
 800c296:	885b      	ldrh	r3, [r3, #2]
 800c298:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c29e:	89fa      	ldrh	r2, [r7, #14]
 800c2a0:	1ad3      	subs	r3, r2, r3
 800c2a2:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	699b      	ldr	r3, [r3, #24]
 800c2ac:	00db      	lsls	r3, r3, #3
 800c2ae:	4413      	add	r3, r2
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 800c2b4:	89ba      	ldrh	r2, [r7, #12]
 800c2b6:	89f9      	ldrh	r1, [r7, #14]
 800c2b8:	897b      	ldrh	r3, [r7, #10]
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7ff fd3e 	bl	800bd3c <vring_need_event>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	bf14      	ite	ne
 800c2c6:	2301      	movne	r3, #1
 800c2c8:	2300      	moveq	r3, #0
 800c2ca:	b2db      	uxtb	r3, r3
 800c2cc:	e009      	b.n	800c2e2 <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2d2:	881b      	ldrh	r3, [r3, #0]
 800c2d4:	f003 0301 	and.w	r3, r3, #1
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	bf0c      	ite	eq
 800c2dc:	2301      	moveq	r3, #1
 800c2de:	2300      	movne	r3, #0
 800c2e0:	b2db      	uxtb	r3, r3
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3710      	adds	r7, #16
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}

0800c2ea <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 800c2ea:	b580      	push	{r7, lr}
 800c2ec:	b082      	sub	sp, #8
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	695b      	ldr	r3, [r3, #20]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d003      	beq.n	800c302 <vq_ring_notify_host+0x18>
		vq->notify(vq);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	695b      	ldr	r3, [r3, #20]
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	4798      	blx	r3
}
 800c302:	bf00      	nop
 800c304:	3708      	adds	r7, #8
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
	...

0800c30c <initLidar>:
__attribute__((section (".RAM_D2"))) uint8_t lidarRXArray[115200] = {0};

uint8_t lidarTXArray[64] = {0};

void initLidar(void)
{
 800c30c:	b480      	push	{r7}
 800c30e:	af00      	add	r7, sp, #0
//	lidarRXArray[0] = 0xff;
	lidarRXArray[0] = 0xff;
 800c310:	4b03      	ldr	r3, [pc, #12]	; (800c320 <initLidar+0x14>)
 800c312:	22ff      	movs	r2, #255	; 0xff
 800c314:	701a      	strb	r2, [r3, #0]
}
 800c316:	bf00      	nop
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr
 800c320:	30000000 	.word	0x30000000

0800c324 <screenInit>:
tIMAGE_DATA safeairBarImageArray[5];

uint8_t nextFrameToDraw[40960] = {0xFF};

void screenInit(void)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b082      	sub	sp, #8
 800c328:	af02      	add	r7, sp, #8
	isPortrait = true;
 800c32a:	4b63      	ldr	r3, [pc, #396]	; (800c4b8 <screenInit+0x194>)
 800c32c:	2201      	movs	r2, #1
 800c32e:	701a      	strb	r2, [r3, #0]
	DEV_Module_Init();
 800c330:	f7fc fa86 	bl	8008840 <DEV_Module_Init>
	LCD_1IN8_SetBackLight(1000);
 800c334:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c338:	f7fd fc34 	bl	8009ba4 <LCD_1IN8_SetBackLight>

	if (isPortrait)
 800c33c:	4b5e      	ldr	r3, [pc, #376]	; (800c4b8 <screenInit+0x194>)
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d00d      	beq.n	800c360 <screenInit+0x3c>
	{
		LCD_1IN8_Init(L2R_U2D);
 800c344:	2000      	movs	r0, #0
 800c346:	f7fd fb0d 	bl	8009964 <LCD_1IN8_Init>
		LCD_1IN8_Clear(BLACK);
 800c34a:	2000      	movs	r0, #0
 800c34c:	f7fd fbec 	bl	8009b28 <LCD_1IN8_Clear>
		Paint_NewImage(LCD_1IN8_HEIGHT,LCD_1IN8_WIDTH, 0, WHITE);
 800c350:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c354:	2200      	movs	r2, #0
 800c356:	21a0      	movs	r1, #160	; 0xa0
 800c358:	2080      	movs	r0, #128	; 0x80
 800c35a:	f7fc fa91 	bl	8008880 <Paint_NewImage>
 800c35e:	e00c      	b.n	800c37a <screenInit+0x56>
	}
	else
	{
		LCD_1IN8_Init(U2D_R2L);
 800c360:	2005      	movs	r0, #5
 800c362:	f7fd faff 	bl	8009964 <LCD_1IN8_Init>
		LCD_1IN8_Clear(BLACK);
 800c366:	2000      	movs	r0, #0
 800c368:	f7fd fbde 	bl	8009b28 <LCD_1IN8_Clear>
		Paint_NewImage(LCD_1IN8_WIDTH,LCD_1IN8_HEIGHT, 0, WHITE);
 800c36c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c370:	2200      	movs	r2, #0
 800c372:	2180      	movs	r1, #128	; 0x80
 800c374:	20a0      	movs	r0, #160	; 0xa0
 800c376:	f7fc fa83 	bl	8008880 <Paint_NewImage>
	}

	Paint_SetClearFuntion(LCD_1IN8_Clear);
 800c37a:	4850      	ldr	r0, [pc, #320]	; (800c4bc <screenInit+0x198>)
 800c37c:	f7fc facc 	bl	8008918 <Paint_SetClearFuntion>
	Paint_SetDisplayFuntion(LCD_1IN8_DrawPaint);
 800c380:	484f      	ldr	r0, [pc, #316]	; (800c4c0 <screenInit+0x19c>)
 800c382:	f7fc fad9 	bl	8008938 <Paint_SetDisplayFuntion>

//	printf("Paint_Clear\r\n");
	Paint_Clear(WHITE);
 800c386:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c38a:	f7fc fb95 	bl	8008ab8 <Paint_Clear>
	DEV_Delay_ms(1000);
 800c38e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c392:	f7f5 fe89 	bl	80020a8 <HAL_Delay>

	if (isPortrait)
 800c396:	4b48      	ldr	r3, [pc, #288]	; (800c4b8 <screenInit+0x194>)
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d042      	beq.n	800c424 <screenInit+0x100>
	{
		Paint_DrawImage(gImage_Rain, 0, 0, 128, 128);
 800c39e:	2380      	movs	r3, #128	; 0x80
 800c3a0:	9300      	str	r3, [sp, #0]
 800c3a2:	2380      	movs	r3, #128	; 0x80
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	2100      	movs	r1, #0
 800c3a8:	4846      	ldr	r0, [pc, #280]	; (800c4c4 <screenInit+0x1a0>)
 800c3aa:	f7fd f89d 	bl	80094e8 <Paint_DrawImage>
		Paint_DrawString_EN(1, 130, "Version", &Font12, WHITE,  BLACK);
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	9301      	str	r3, [sp, #4]
 800c3b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c3b6:	9300      	str	r3, [sp, #0]
 800c3b8:	4b43      	ldr	r3, [pc, #268]	; (800c4c8 <screenInit+0x1a4>)
 800c3ba:	4a44      	ldr	r2, [pc, #272]	; (800c4cc <screenInit+0x1a8>)
 800c3bc:	2182      	movs	r1, #130	; 0x82
 800c3be:	2001      	movs	r0, #1
 800c3c0:	f7fc ffa8 	bl	8009314 <Paint_DrawString_EN>
		Paint_DrawFloatNum (1, 142 , versionID, 2,  &Font12, BLACK, WHITE);
 800c3c4:	4b42      	ldr	r3, [pc, #264]	; (800c4d0 <screenInit+0x1ac>)
 800c3c6:	edd3 7a00 	vldr	s15, [r3]
 800c3ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c3ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c3d2:	9301      	str	r3, [sp, #4]
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	9300      	str	r3, [sp, #0]
 800c3d8:	4b3b      	ldr	r3, [pc, #236]	; (800c4c8 <screenInit+0x1a4>)
 800c3da:	2202      	movs	r2, #2
 800c3dc:	eeb0 0b47 	vmov.f64	d0, d7
 800c3e0:	218e      	movs	r1, #142	; 0x8e
 800c3e2:	2001      	movs	r0, #1
 800c3e4:	f7fc ffee 	bl	80093c4 <Paint_DrawFloatNum>
		Paint_DrawString_EN(70, 130, "BuildID", &Font12, WHITE,  BLACK);
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	9301      	str	r3, [sp, #4]
 800c3ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c3f0:	9300      	str	r3, [sp, #0]
 800c3f2:	4b35      	ldr	r3, [pc, #212]	; (800c4c8 <screenInit+0x1a4>)
 800c3f4:	4a37      	ldr	r2, [pc, #220]	; (800c4d4 <screenInit+0x1b0>)
 800c3f6:	2182      	movs	r1, #130	; 0x82
 800c3f8:	2046      	movs	r0, #70	; 0x46
 800c3fa:	f7fc ff8b 	bl	8009314 <Paint_DrawString_EN>
		Paint_DrawFloatNum (70, 142 , buildID, 2,  &Font12, BLACK, WHITE);
 800c3fe:	4b36      	ldr	r3, [pc, #216]	; (800c4d8 <screenInit+0x1b4>)
 800c400:	edd3 7a00 	vldr	s15, [r3]
 800c404:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c408:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c40c:	9301      	str	r3, [sp, #4]
 800c40e:	2300      	movs	r3, #0
 800c410:	9300      	str	r3, [sp, #0]
 800c412:	4b2d      	ldr	r3, [pc, #180]	; (800c4c8 <screenInit+0x1a4>)
 800c414:	2202      	movs	r2, #2
 800c416:	eeb0 0b47 	vmov.f64	d0, d7
 800c41a:	218e      	movs	r1, #142	; 0x8e
 800c41c:	2046      	movs	r0, #70	; 0x46
 800c41e:	f7fc ffd1 	bl	80093c4 <Paint_DrawFloatNum>
 800c422:	e041      	b.n	800c4a8 <screenInit+0x184>
	}
	else
	{
		Paint_DrawImage(gImage_Rain, 16, 0, 128, 128);
 800c424:	2380      	movs	r3, #128	; 0x80
 800c426:	9300      	str	r3, [sp, #0]
 800c428:	2380      	movs	r3, #128	; 0x80
 800c42a:	2200      	movs	r2, #0
 800c42c:	2110      	movs	r1, #16
 800c42e:	4825      	ldr	r0, [pc, #148]	; (800c4c4 <screenInit+0x1a0>)
 800c430:	f7fd f85a 	bl	80094e8 <Paint_DrawImage>
		Paint_DrawString_EN(1, 98, "Version", &Font12, WHITE,  BLACK);
 800c434:	2300      	movs	r3, #0
 800c436:	9301      	str	r3, [sp, #4]
 800c438:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c43c:	9300      	str	r3, [sp, #0]
 800c43e:	4b22      	ldr	r3, [pc, #136]	; (800c4c8 <screenInit+0x1a4>)
 800c440:	4a22      	ldr	r2, [pc, #136]	; (800c4cc <screenInit+0x1a8>)
 800c442:	2162      	movs	r1, #98	; 0x62
 800c444:	2001      	movs	r0, #1
 800c446:	f7fc ff65 	bl	8009314 <Paint_DrawString_EN>
		Paint_DrawFloatNum (1, 110 , versionID, 2,  &Font12, BLACK, WHITE);
 800c44a:	4b21      	ldr	r3, [pc, #132]	; (800c4d0 <screenInit+0x1ac>)
 800c44c:	edd3 7a00 	vldr	s15, [r3]
 800c450:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c454:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c458:	9301      	str	r3, [sp, #4]
 800c45a:	2300      	movs	r3, #0
 800c45c:	9300      	str	r3, [sp, #0]
 800c45e:	4b1a      	ldr	r3, [pc, #104]	; (800c4c8 <screenInit+0x1a4>)
 800c460:	2202      	movs	r2, #2
 800c462:	eeb0 0b47 	vmov.f64	d0, d7
 800c466:	216e      	movs	r1, #110	; 0x6e
 800c468:	2001      	movs	r0, #1
 800c46a:	f7fc ffab 	bl	80093c4 <Paint_DrawFloatNum>
		Paint_DrawString_EN(104, 98, "BuildID", &Font12, WHITE,  BLACK);
 800c46e:	2300      	movs	r3, #0
 800c470:	9301      	str	r3, [sp, #4]
 800c472:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c476:	9300      	str	r3, [sp, #0]
 800c478:	4b13      	ldr	r3, [pc, #76]	; (800c4c8 <screenInit+0x1a4>)
 800c47a:	4a16      	ldr	r2, [pc, #88]	; (800c4d4 <screenInit+0x1b0>)
 800c47c:	2162      	movs	r1, #98	; 0x62
 800c47e:	2068      	movs	r0, #104	; 0x68
 800c480:	f7fc ff48 	bl	8009314 <Paint_DrawString_EN>
		Paint_DrawFloatNum (124, 110 , buildID, 2,  &Font12, BLACK, WHITE);
 800c484:	4b14      	ldr	r3, [pc, #80]	; (800c4d8 <screenInit+0x1b4>)
 800c486:	edd3 7a00 	vldr	s15, [r3]
 800c48a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c48e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c492:	9301      	str	r3, [sp, #4]
 800c494:	2300      	movs	r3, #0
 800c496:	9300      	str	r3, [sp, #0]
 800c498:	4b0b      	ldr	r3, [pc, #44]	; (800c4c8 <screenInit+0x1a4>)
 800c49a:	2202      	movs	r2, #2
 800c49c:	eeb0 0b47 	vmov.f64	d0, d7
 800c4a0:	216e      	movs	r1, #110	; 0x6e
 800c4a2:	207c      	movs	r0, #124	; 0x7c
 800c4a4:	f7fc ff8e 	bl	80093c4 <Paint_DrawFloatNum>
	}


	HAL_Delay(1000);
 800c4a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c4ac:	f7f5 fdfc 	bl	80020a8 <HAL_Delay>
}
 800c4b0:	bf00      	nop
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	24000054 	.word	0x24000054
 800c4bc:	08009b29 	.word	0x08009b29
 800c4c0:	08009a9d 	.word	0x08009a9d
 800c4c4:	08015bf4 	.word	0x08015bf4
 800c4c8:	24000018 	.word	0x24000018
 800c4cc:	080153d8 	.word	0x080153d8
 800c4d0:	24000008 	.word	0x24000008
 800c4d4:	080153e0 	.word	0x080153e0
 800c4d8:	2400000c 	.word	0x2400000c

0800c4dc <screenClear>:

void screenClear(void)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	af00      	add	r7, sp, #0
	if (isPortrait)
 800c4e0:	4b0e      	ldr	r3, [pc, #56]	; (800c51c <screenClear+0x40>)
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d007      	beq.n	800c4f8 <screenClear+0x1c>
	{
		Paint_NewImage(LCD_1IN8_HEIGHT,LCD_1IN8_WIDTH, 0, WHITE);
 800c4e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	21a0      	movs	r1, #160	; 0xa0
 800c4f0:	2080      	movs	r0, #128	; 0x80
 800c4f2:	f7fc f9c5 	bl	8008880 <Paint_NewImage>
 800c4f6:	e006      	b.n	800c506 <screenClear+0x2a>
	}
	else
	{
		Paint_NewImage(LCD_1IN8_WIDTH,LCD_1IN8_HEIGHT, 0, WHITE);
 800c4f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	2180      	movs	r1, #128	; 0x80
 800c500:	20a0      	movs	r0, #160	; 0xa0
 800c502:	f7fc f9bd 	bl	8008880 <Paint_NewImage>
	}

	Paint_Clear(WHITE);
 800c506:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c50a:	f7fc fad5 	bl	8008ab8 <Paint_Clear>
	DEV_Delay_ms(1000);
 800c50e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c512:	f7f5 fdc9 	bl	80020a8 <HAL_Delay>
}
 800c516:	bf00      	nop
 800c518:	bd80      	pop	{r7, pc}
 800c51a:	bf00      	nop
 800c51c:	24000054 	.word	0x24000054

0800c520 <centeredString>:

void centeredString(UWORD XCenterstart, UWORD Ystart, const char * pString, uint16_t textColor, uint16_t backgroundColor, uint8_t numberOfCharactersToClear, sFONT localFont)
{
 800c520:	b590      	push	{r4, r7, lr}
 800c522:	b089      	sub	sp, #36	; 0x24
 800c524:	af02      	add	r7, sp, #8
 800c526:	60ba      	str	r2, [r7, #8]
 800c528:	461a      	mov	r2, r3
 800c52a:	4603      	mov	r3, r0
 800c52c:	81fb      	strh	r3, [r7, #14]
 800c52e:	460b      	mov	r3, r1
 800c530:	81bb      	strh	r3, [r7, #12]
 800c532:	4613      	mov	r3, r2
 800c534:	80fb      	strh	r3, [r7, #6]
	uint8_t Xstart = 0;
 800c536:	2300      	movs	r3, #0
 800c538:	75fb      	strb	r3, [r7, #23]

	Xstart = fmax( XCenterstart - numberOfCharactersToClear * localFont.Width / 2, 0) ;
 800c53a:	89fa      	ldrh	r2, [r7, #14]
 800c53c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c540:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800c542:	fb01 f303 	mul.w	r3, r1, r3
 800c546:	2b00      	cmp	r3, #0
 800c548:	da00      	bge.n	800c54c <centeredString+0x2c>
 800c54a:	3301      	adds	r3, #1
 800c54c:	105b      	asrs	r3, r3, #1
 800c54e:	425b      	negs	r3, r3
 800c550:	4413      	add	r3, r2
 800c552:	ee07 3a90 	vmov	s15, r3
 800c556:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c55a:	ed9f 1b57 	vldr	d1, [pc, #348]	; 800c6b8 <centeredString+0x198>
 800c55e:	eeb0 0b47 	vmov.f64	d0, d7
 800c562:	f008 fb9f 	bl	8014ca4 <fmax>
 800c566:	eeb0 7b40 	vmov.f64	d7, d0
 800c56a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800c56e:	edc7 7a00 	vstr	s15, [r7]
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	75fb      	strb	r3, [r7, #23]
//	Paint_DrawString_EN(Xstart, Ystart, "MAINTENANCE", &Font12, WHITE,  WHITE);
	if (!renderCompleteFrame)
 800c576:	4b52      	ldr	r3, [pc, #328]	; (800c6c0 <centeredString+0x1a0>)
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	f083 0301 	eor.w	r3, r3, #1
 800c57e:	b2db      	uxtb	r3, r3
 800c580:	2b00      	cmp	r3, #0
 800c582:	d018      	beq.n	800c5b6 <centeredString+0x96>
	{
		Paint_ClearWindows(Xstart, Ystart, Xstart + numberOfCharactersToClear * localFont.Width, Ystart + localFont.Height, WHITE);
 800c584:	7dfb      	ldrb	r3, [r7, #23]
 800c586:	b298      	uxth	r0, r3
 800c588:	7dfb      	ldrb	r3, [r7, #23]
 800c58a:	b29a      	uxth	r2, r3
 800c58c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c590:	b299      	uxth	r1, r3
 800c592:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c594:	fb11 f303 	smulbb	r3, r1, r3
 800c598:	b29b      	uxth	r3, r3
 800c59a:	4413      	add	r3, r2
 800c59c:	b29c      	uxth	r4, r3
 800c59e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c5a0:	89bb      	ldrh	r3, [r7, #12]
 800c5a2:	4413      	add	r3, r2
 800c5a4:	b29b      	uxth	r3, r3
 800c5a6:	89b9      	ldrh	r1, [r7, #12]
 800c5a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c5ac:	9200      	str	r2, [sp, #0]
 800c5ae:	4622      	mov	r2, r4
 800c5b0:	f7fc fa92 	bl	8008ad8 <Paint_ClearWindows>
 800c5b4:	e04e      	b.n	800c654 <centeredString+0x134>
	}
	else if ( (renderCompleteFrame) && (!isMenuDisplayed) && (!isPopupDisplayed) )
 800c5b6:	4b42      	ldr	r3, [pc, #264]	; (800c6c0 <centeredString+0x1a0>)
 800c5b8:	781b      	ldrb	r3, [r3, #0]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d026      	beq.n	800c60c <centeredString+0xec>
 800c5be:	4b41      	ldr	r3, [pc, #260]	; (800c6c4 <centeredString+0x1a4>)
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	f083 0301 	eor.w	r3, r3, #1
 800c5c6:	b2db      	uxtb	r3, r3
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d01f      	beq.n	800c60c <centeredString+0xec>
 800c5cc:	4b3e      	ldr	r3, [pc, #248]	; (800c6c8 <centeredString+0x1a8>)
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	f083 0301 	eor.w	r3, r3, #1
 800c5d4:	b2db      	uxtb	r3, r3
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d018      	beq.n	800c60c <centeredString+0xec>
	{
		Paint_ClearWindows(Xstart, Ystart, Xstart + numberOfCharactersToClear * localFont.Width, Ystart + localFont.Height, backgroundColor);
 800c5da:	7dfb      	ldrb	r3, [r7, #23]
 800c5dc:	b298      	uxth	r0, r3
 800c5de:	7dfb      	ldrb	r3, [r7, #23]
 800c5e0:	b29a      	uxth	r2, r3
 800c5e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c5e6:	b299      	uxth	r1, r3
 800c5e8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c5ea:	fb11 f303 	smulbb	r3, r1, r3
 800c5ee:	b29b      	uxth	r3, r3
 800c5f0:	4413      	add	r3, r2
 800c5f2:	b29c      	uxth	r4, r3
 800c5f4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c5f6:	89bb      	ldrh	r3, [r7, #12]
 800c5f8:	4413      	add	r3, r2
 800c5fa:	b29a      	uxth	r2, r3
 800c5fc:	89b9      	ldrh	r1, [r7, #12]
 800c5fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c600:	9300      	str	r3, [sp, #0]
 800c602:	4613      	mov	r3, r2
 800c604:	4622      	mov	r2, r4
 800c606:	f7fc fa67 	bl	8008ad8 <Paint_ClearWindows>
 800c60a:	e023      	b.n	800c654 <centeredString+0x134>
	}
	else if ( (renderCompleteFrame) && ( (isMenuDisplayed) || (isPopupDisplayed) ) )
 800c60c:	4b2c      	ldr	r3, [pc, #176]	; (800c6c0 <centeredString+0x1a0>)
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d01f      	beq.n	800c654 <centeredString+0x134>
 800c614:	4b2b      	ldr	r3, [pc, #172]	; (800c6c4 <centeredString+0x1a4>)
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d103      	bne.n	800c624 <centeredString+0x104>
 800c61c:	4b2a      	ldr	r3, [pc, #168]	; (800c6c8 <centeredString+0x1a8>)
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d017      	beq.n	800c654 <centeredString+0x134>
	{
		Paint_ClearWindows(Xstart, Ystart, Xstart + numberOfCharactersToClear * localFont.Width, Ystart + localFont.Height, WHITE);
 800c624:	7dfb      	ldrb	r3, [r7, #23]
 800c626:	b298      	uxth	r0, r3
 800c628:	7dfb      	ldrb	r3, [r7, #23]
 800c62a:	b29a      	uxth	r2, r3
 800c62c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c630:	b299      	uxth	r1, r3
 800c632:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c634:	fb11 f303 	smulbb	r3, r1, r3
 800c638:	b29b      	uxth	r3, r3
 800c63a:	4413      	add	r3, r2
 800c63c:	b29c      	uxth	r4, r3
 800c63e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c640:	89bb      	ldrh	r3, [r7, #12]
 800c642:	4413      	add	r3, r2
 800c644:	b29b      	uxth	r3, r3
 800c646:	89b9      	ldrh	r1, [r7, #12]
 800c648:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c64c:	9200      	str	r2, [sp, #0]
 800c64e:	4622      	mov	r2, r4
 800c650:	f7fc fa42 	bl	8008ad8 <Paint_ClearWindows>
	}
	Xstart = strlen(pString);
 800c654:	68b8      	ldr	r0, [r7, #8]
 800c656:	f7f3 fe4d 	bl	80002f4 <strlen>
 800c65a:	4603      	mov	r3, r0
 800c65c:	75fb      	strb	r3, [r7, #23]
	Xstart = fmax( XCenterstart - strlen(pString) * localFont.Width / 2, 0) ;
 800c65e:	89fc      	ldrh	r4, [r7, #14]
 800c660:	68b8      	ldr	r0, [r7, #8]
 800c662:	f7f3 fe47 	bl	80002f4 <strlen>
 800c666:	4603      	mov	r3, r0
 800c668:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800c66a:	fb02 f303 	mul.w	r3, r2, r3
 800c66e:	085b      	lsrs	r3, r3, #1
 800c670:	1ae3      	subs	r3, r4, r3
 800c672:	ee07 3a90 	vmov	s15, r3
 800c676:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c67a:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 800c6b8 <centeredString+0x198>
 800c67e:	eeb0 0b47 	vmov.f64	d0, d7
 800c682:	f008 fb0f 	bl	8014ca4 <fmax>
 800c686:	eeb0 7b40 	vmov.f64	d7, d0
 800c68a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800c68e:	edc7 7a00 	vstr	s15, [r7]
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	75fb      	strb	r3, [r7, #23]
	Paint_DrawString_EN(Xstart, Ystart, pString, &localFont, backgroundColor,  textColor);
 800c696:	7dfb      	ldrb	r3, [r7, #23]
 800c698:	b298      	uxth	r0, r3
 800c69a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c69e:	89b9      	ldrh	r1, [r7, #12]
 800c6a0:	88fb      	ldrh	r3, [r7, #6]
 800c6a2:	9301      	str	r3, [sp, #4]
 800c6a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c6a6:	9300      	str	r3, [sp, #0]
 800c6a8:	4613      	mov	r3, r2
 800c6aa:	68ba      	ldr	r2, [r7, #8]
 800c6ac:	f7fc fe32 	bl	8009314 <Paint_DrawString_EN>
}
 800c6b0:	bf00      	nop
 800c6b2:	371c      	adds	r7, #28
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd90      	pop	{r4, r7, pc}
	...
 800c6c0:	2400a3b3 	.word	0x2400a3b3
 800c6c4:	2400a3ad 	.word	0x2400a3ad
 800c6c8:	2400a3b2 	.word	0x2400a3b2

0800c6cc <showAngles>:

void showAngles(void)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b08a      	sub	sp, #40	; 0x28
 800c6d0:	af02      	add	r7, sp, #8
	char localT[32] = "";
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	603b      	str	r3, [r7, #0]
 800c6d6:	1d3b      	adds	r3, r7, #4
 800c6d8:	2200      	movs	r2, #0
 800c6da:	601a      	str	r2, [r3, #0]
 800c6dc:	605a      	str	r2, [r3, #4]
 800c6de:	609a      	str	r2, [r3, #8]
 800c6e0:	60da      	str	r2, [r3, #12]
 800c6e2:	611a      	str	r2, [r3, #16]
 800c6e4:	615a      	str	r2, [r3, #20]
 800c6e6:	619a      	str	r2, [r3, #24]

	snprintf(localT,sizeof(localT),"R: %04.3f", receivedAnglesData->bodyAngles.Roll);
 800c6e8:	4b2a      	ldr	r3, [pc, #168]	; (800c794 <showAngles+0xc8>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	edd3 7a01 	vldr	s15, [r3, #4]
 800c6f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c6f4:	463b      	mov	r3, r7
 800c6f6:	ed8d 7b00 	vstr	d7, [sp]
 800c6fa:	4a27      	ldr	r2, [pc, #156]	; (800c798 <showAngles+0xcc>)
 800c6fc:	2120      	movs	r1, #32
 800c6fe:	4618      	mov	r0, r3
 800c700:	f004 ff20 	bl	8011544 <sniprintf>
	Paint_DrawString_EN(VerticalRollChasisX, VerticalRollChasisY, (char *)localT, &Font8, WHITE, BLACK);
 800c704:	463a      	mov	r2, r7
 800c706:	2300      	movs	r3, #0
 800c708:	9301      	str	r3, [sp, #4]
 800c70a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c70e:	9300      	str	r3, [sp, #0]
 800c710:	4b22      	ldr	r3, [pc, #136]	; (800c79c <showAngles+0xd0>)
 800c712:	218c      	movs	r1, #140	; 0x8c
 800c714:	2002      	movs	r0, #2
 800c716:	f7fc fdfd 	bl	8009314 <Paint_DrawString_EN>

	memset(localT,0,32);
 800c71a:	463b      	mov	r3, r7
 800c71c:	2220      	movs	r2, #32
 800c71e:	2100      	movs	r1, #0
 800c720:	4618      	mov	r0, r3
 800c722:	f003 fe17 	bl	8010354 <memset>
	snprintf(localT,sizeof(localT),"P: %04.3f", receivedAnglesData->bodyAngles.Pitch);
 800c726:	4b1b      	ldr	r3, [pc, #108]	; (800c794 <showAngles+0xc8>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	edd3 7a02 	vldr	s15, [r3, #8]
 800c72e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c732:	463b      	mov	r3, r7
 800c734:	ed8d 7b00 	vstr	d7, [sp]
 800c738:	4a19      	ldr	r2, [pc, #100]	; (800c7a0 <showAngles+0xd4>)
 800c73a:	2120      	movs	r1, #32
 800c73c:	4618      	mov	r0, r3
 800c73e:	f004 ff01 	bl	8011544 <sniprintf>
	Paint_DrawString_EN(VerticalPitchChasisX, VerticalPitchChasisY, (char *)localT, &Font8, WHITE, BLACK);
 800c742:	463a      	mov	r2, r7
 800c744:	2300      	movs	r3, #0
 800c746:	9301      	str	r3, [sp, #4]
 800c748:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c74c:	9300      	str	r3, [sp, #0]
 800c74e:	4b13      	ldr	r3, [pc, #76]	; (800c79c <showAngles+0xd0>)
 800c750:	218c      	movs	r1, #140	; 0x8c
 800c752:	2044      	movs	r0, #68	; 0x44
 800c754:	f7fc fdde 	bl	8009314 <Paint_DrawString_EN>

	memset(localT,0,32);
 800c758:	463b      	mov	r3, r7
 800c75a:	2220      	movs	r2, #32
 800c75c:	2100      	movs	r1, #0
 800c75e:	4618      	mov	r0, r3
 800c760:	f003 fdf8 	bl	8010354 <memset>
	snprintf(localT,sizeof(localT),"Y: %04.3f", receivedAnglesData->bodyAngles.Yaw);
 800c764:	4b0b      	ldr	r3, [pc, #44]	; (800c794 <showAngles+0xc8>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	edd3 7a03 	vldr	s15, [r3, #12]
 800c76c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c770:	463b      	mov	r3, r7
 800c772:	ed8d 7b00 	vstr	d7, [sp]
 800c776:	4a0b      	ldr	r2, [pc, #44]	; (800c7a4 <showAngles+0xd8>)
 800c778:	2120      	movs	r1, #32
 800c77a:	4618      	mov	r0, r3
 800c77c:	f004 fee2 	bl	8011544 <sniprintf>
//	Paint_DrawString_EN(VerticalYawChasisX, VerticalYawChasisY, (char *)localT, &Font8, WHITE, BLACK);
	memset(localT,0,32);
 800c780:	463b      	mov	r3, r7
 800c782:	2220      	movs	r2, #32
 800c784:	2100      	movs	r1, #0
 800c786:	4618      	mov	r0, r3
 800c788:	f003 fde4 	bl	8010354 <memset>
}
 800c78c:	bf00      	nop
 800c78e:	3720      	adds	r7, #32
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}
 800c794:	2400a56c 	.word	0x2400a56c
 800c798:	080153e8 	.word	0x080153e8
 800c79c:	24000020 	.word	0x24000020
 800c7a0:	080153f4 	.word	0x080153f4
 800c7a4:	08015400 	.word	0x08015400

0800c7a8 <showLIDAR>:

void showLIDAR(void)
{
 800c7a8:	b590      	push	{r4, r7, lr}
 800c7aa:	b085      	sub	sp, #20
 800c7ac:	af04      	add	r7, sp, #16
	Paint_DrawCircle(  lidarCenterX, lidarCenterY, 50, BLUE, DOT_PIXEL_2X2, DRAW_FILL_EMPTY );
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	9301      	str	r3, [sp, #4]
 800c7b2:	2302      	movs	r3, #2
 800c7b4:	9300      	str	r3, [sp, #0]
 800c7b6:	231f      	movs	r3, #31
 800c7b8:	2232      	movs	r2, #50	; 0x32
 800c7ba:	214c      	movs	r1, #76	; 0x4c
 800c7bc:	2040      	movs	r0, #64	; 0x40
 800c7be:	f7fc fb8d 	bl	8008edc <Paint_DrawCircle>
	Paint_DrawCircle(  lidarCenterX, lidarCenterY, 1, RED, DOT_PIXEL_2X2, DRAW_FILL_FULL );
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	9301      	str	r3, [sp, #4]
 800c7c6:	2302      	movs	r3, #2
 800c7c8:	9300      	str	r3, [sp, #0]
 800c7ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	214c      	movs	r1, #76	; 0x4c
 800c7d2:	2040      	movs	r0, #64	; 0x40
 800c7d4:	f7fc fb82 	bl	8008edc <Paint_DrawCircle>

	if (HAL_GetTick() - lastLidarBoresight >= 40)
 800c7d8:	f7f5 fc5a 	bl	8002090 <HAL_GetTick>
 800c7dc:	4602      	mov	r2, r0
 800c7de:	4b48      	ldr	r3, [pc, #288]	; (800c900 <showLIDAR+0x158>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	1ad3      	subs	r3, r2, r3
 800c7e4:	2b27      	cmp	r3, #39	; 0x27
 800c7e6:	d927      	bls.n	800c838 <showLIDAR+0x90>
	{
		currentLidarAngle = (float)((uint32_t)(1.8 * (HAL_GetTick() - lastLidarBoresight)) % (360));
 800c7e8:	f7f5 fc52 	bl	8002090 <HAL_GetTick>
 800c7ec:	4602      	mov	r2, r0
 800c7ee:	4b44      	ldr	r3, [pc, #272]	; (800c900 <showLIDAR+0x158>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	1ad3      	subs	r3, r2, r3
 800c7f4:	ee07 3a90 	vmov	s15, r3
 800c7f8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c7fc:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 800c8e8 <showLIDAR+0x140>
 800c800:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c804:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800c808:	ee17 2a90 	vmov	r2, s15
 800c80c:	08d3      	lsrs	r3, r2, #3
 800c80e:	493d      	ldr	r1, [pc, #244]	; (800c904 <showLIDAR+0x15c>)
 800c810:	fba1 1303 	umull	r1, r3, r1, r3
 800c814:	089b      	lsrs	r3, r3, #2
 800c816:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800c81a:	fb01 f303 	mul.w	r3, r1, r3
 800c81e:	1ad3      	subs	r3, r2, r3
 800c820:	ee07 3a90 	vmov	s15, r3
 800c824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c828:	4b37      	ldr	r3, [pc, #220]	; (800c908 <showLIDAR+0x160>)
 800c82a:	edc3 7a00 	vstr	s15, [r3]
		lastLidarBoresight = HAL_GetTick();
 800c82e:	f7f5 fc2f 	bl	8002090 <HAL_GetTick>
 800c832:	4603      	mov	r3, r0
 800c834:	4a32      	ldr	r2, [pc, #200]	; (800c900 <showLIDAR+0x158>)
 800c836:	6013      	str	r3, [r2, #0]
	}
	Paint_DrawLine(lidarCenterX, lidarCenterY, lidarCenterX + lidarRadius * cosf(receivedAnglesData->bodyAngles.Yaw * AHRSIMU_DEG2RAD),
 800c838:	4b34      	ldr	r3, [pc, #208]	; (800c90c <showLIDAR+0x164>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	edd3 7a03 	vldr	s15, [r3, #12]
 800c840:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c844:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 800c8f0 <showLIDAR+0x148>
 800c848:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c84c:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 800c8f8 <showLIDAR+0x150>
 800c850:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c854:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c858:	eeb0 0a67 	vmov.f32	s0, s15
 800c85c:	f008 f974 	bl	8014b48 <cosf>
 800c860:	eef0 7a40 	vmov.f32	s15, s0
 800c864:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800c910 <showLIDAR+0x168>
 800c868:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c86c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800c914 <showLIDAR+0x16c>
 800c870:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c878:	ee17 3a90 	vmov	r3, s15
 800c87c:	b29c      	uxth	r4, r3
			lidarCenterY + lidarRadius * sinf(receivedAnglesData->bodyAngles.Yaw * AHRSIMU_DEG2RAD), DARKBLUE, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 800c87e:	4b23      	ldr	r3, [pc, #140]	; (800c90c <showLIDAR+0x164>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	edd3 7a03 	vldr	s15, [r3, #12]
 800c886:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c88a:	ed9f 6b19 	vldr	d6, [pc, #100]	; 800c8f0 <showLIDAR+0x148>
 800c88e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c892:	ed9f 5b19 	vldr	d5, [pc, #100]	; 800c8f8 <showLIDAR+0x150>
 800c896:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c89a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c89e:	eeb0 0a67 	vmov.f32	s0, s15
 800c8a2:	f008 fa89 	bl	8014db8 <sinf>
 800c8a6:	eef0 7a40 	vmov.f32	s15, s0
 800c8aa:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800c910 <showLIDAR+0x168>
 800c8ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c8b2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800c918 <showLIDAR+0x170>
 800c8b6:	ee77 7a87 	vadd.f32	s15, s15, s14
	Paint_DrawLine(lidarCenterX, lidarCenterY, lidarCenterX + lidarRadius * cosf(receivedAnglesData->bodyAngles.Yaw * AHRSIMU_DEG2RAD),
 800c8ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8be:	ee17 3a90 	vmov	r3, s15
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	9202      	str	r2, [sp, #8]
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	9201      	str	r2, [sp, #4]
 800c8cc:	f240 12cf 	movw	r2, #463	; 0x1cf
 800c8d0:	9200      	str	r2, [sp, #0]
 800c8d2:	4622      	mov	r2, r4
 800c8d4:	214c      	movs	r1, #76	; 0x4c
 800c8d6:	2040      	movs	r0, #64	; 0x40
 800c8d8:	f7fc f9c8 	bl	8008c6c <Paint_DrawLine>

}
 800c8dc:	bf00      	nop
 800c8de:	3704      	adds	r7, #4
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd90      	pop	{r4, r7, pc}
 800c8e4:	f3af 8000 	nop.w
 800c8e8:	cccccccd 	.word	0xcccccccd
 800c8ec:	3ffccccc 	.word	0x3ffccccc
 800c8f0:	54442d18 	.word	0x54442d18
 800c8f4:	400921fb 	.word	0x400921fb
 800c8f8:	00000000 	.word	0x00000000
 800c8fc:	40668000 	.word	0x40668000
 800c900:	2400a3b8 	.word	0x2400a3b8
 800c904:	16c16c17 	.word	0x16c16c17
 800c908:	2400a3bc 	.word	0x2400a3bc
 800c90c:	2400a56c 	.word	0x2400a56c
 800c910:	42480000 	.word	0x42480000
 800c914:	42800000 	.word	0x42800000
 800c918:	42980000 	.word	0x42980000

0800c91c <screenUpdate>:



void screenUpdate(bool drawDeltaImage)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b082      	sub	sp, #8
 800c920:	af00      	add	r7, sp, #0
 800c922:	4603      	mov	r3, r0
 800c924:	71fb      	strb	r3, [r7, #7]
//	numberOfDisplayedSafeAirIcons = 1 * isAutoPilotDisplayed + 1 * isPlatformDisplayed +
//			1 * isTriggerModeDisplayed + 1 * isSafeAirBatteryDisplayed;
//	setIconPositionOnScreen();
	if ( (!isMenuDisplayed) && (!isPopupDisplayed) )
 800c926:	4b21      	ldr	r3, [pc, #132]	; (800c9ac <screenUpdate+0x90>)
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	f083 0301 	eor.w	r3, r3, #1
 800c92e:	b2db      	uxtb	r3, r3
 800c930:	2b00      	cmp	r3, #0
 800c932:	d00e      	beq.n	800c952 <screenUpdate+0x36>
 800c934:	4b1e      	ldr	r3, [pc, #120]	; (800c9b0 <screenUpdate+0x94>)
 800c936:	781b      	ldrb	r3, [r3, #0]
 800c938:	f083 0301 	eor.w	r3, r3, #1
 800c93c:	b2db      	uxtb	r3, r3
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d007      	beq.n	800c952 <screenUpdate+0x36>
	{
		createEmptyFrame(false);
 800c942:	2000      	movs	r0, #0
 800c944:	f000 fe88 	bl	800d658 <createEmptyFrame>
		showAngles();
 800c948:	f7ff fec0 	bl	800c6cc <showAngles>
		showLIDAR();
 800c94c:	f7ff ff2c 	bl	800c7a8 <showLIDAR>
 800c950:	e01f      	b.n	800c992 <screenUpdate+0x76>
	}
	else if (isMenuDisplayed)
 800c952:	4b16      	ldr	r3, [pc, #88]	; (800c9ac <screenUpdate+0x90>)
 800c954:	781b      	ldrb	r3, [r3, #0]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d01b      	beq.n	800c992 <screenUpdate+0x76>
	{
		if (shouldRenderMenu)
 800c95a:	4b16      	ldr	r3, [pc, #88]	; (800c9b4 <screenUpdate+0x98>)
 800c95c:	781b      	ldrb	r3, [r3, #0]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d00a      	beq.n	800c978 <screenUpdate+0x5c>
		{
			drawMenu(shouldClearScreen, menuDrawDirection);
 800c962:	4b15      	ldr	r3, [pc, #84]	; (800c9b8 <screenUpdate+0x9c>)
 800c964:	781b      	ldrb	r3, [r3, #0]
 800c966:	4a15      	ldr	r2, [pc, #84]	; (800c9bc <screenUpdate+0xa0>)
 800c968:	7812      	ldrb	r2, [r2, #0]
 800c96a:	4611      	mov	r1, r2
 800c96c:	4618      	mov	r0, r3
 800c96e:	f000 f82d 	bl	800c9cc <drawMenu>
			shouldRenderMenu = false;
 800c972:	4b10      	ldr	r3, [pc, #64]	; (800c9b4 <screenUpdate+0x98>)
 800c974:	2200      	movs	r2, #0
 800c976:	701a      	strb	r2, [r3, #0]
		}
		if (shouldRenderItem)
 800c978:	4b11      	ldr	r3, [pc, #68]	; (800c9c0 <screenUpdate+0xa4>)
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d008      	beq.n	800c992 <screenUpdate+0x76>
		{
			drawItem(false, itemDrawDirection);
 800c980:	4b10      	ldr	r3, [pc, #64]	; (800c9c4 <screenUpdate+0xa8>)
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	4619      	mov	r1, r3
 800c986:	2000      	movs	r0, #0
 800c988:	f000 f9c4 	bl	800cd14 <drawItem>
			shouldRenderItem = false;
 800c98c:	4b0c      	ldr	r3, [pc, #48]	; (800c9c0 <screenUpdate+0xa4>)
 800c98e:	2200      	movs	r2, #0
 800c990:	701a      	strb	r2, [r3, #0]
		}

	} // End of is Menu displayed
	if(shouldRenderPopup)
 800c992:	4b0d      	ldr	r3, [pc, #52]	; (800c9c8 <screenUpdate+0xac>)
 800c994:	781b      	ldrb	r3, [r3, #0]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d004      	beq.n	800c9a4 <screenUpdate+0x88>
	{
		drawPopup();
 800c99a:	f000 fa7b 	bl	800ce94 <drawPopup>
		shouldRenderPopup = false;
 800c99e:	4b0a      	ldr	r3, [pc, #40]	; (800c9c8 <screenUpdate+0xac>)
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	701a      	strb	r2, [r3, #0]
	}
}
 800c9a4:	bf00      	nop
 800c9a6:	3708      	adds	r7, #8
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}
 800c9ac:	2400a3ad 	.word	0x2400a3ad
 800c9b0:	2400a3b2 	.word	0x2400a3b2
 800c9b4:	2400a3ac 	.word	0x2400a3ac
 800c9b8:	2400a3ae 	.word	0x2400a3ae
 800c9bc:	24000055 	.word	0x24000055
 800c9c0:	2400a3af 	.word	0x2400a3af
 800c9c4:	24000056 	.word	0x24000056
 800c9c8:	2400a3b1 	.word	0x2400a3b1

0800c9cc <drawMenu>:

void drawMenu(bool clearScreen, MENUDRAWType howToDraw)
{
 800c9cc:	b5b0      	push	{r4, r5, r7, lr}
 800c9ce:	b08a      	sub	sp, #40	; 0x28
 800c9d0:	af04      	add	r7, sp, #16
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	460a      	mov	r2, r1
 800c9d6:	71fb      	strb	r3, [r7, #7]
 800c9d8:	4613      	mov	r3, r2
 800c9da:	71bb      	strb	r3, [r7, #6]
	if (clearScreen)
 800c9dc:	79fb      	ldrb	r3, [r7, #7]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d006      	beq.n	800c9f0 <drawMenu+0x24>
	{
		Paint_Clear(WHITE);
 800c9e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c9e6:	f7fc f867 	bl	8008ab8 <Paint_Clear>
		createEmptyFrame(true);
 800c9ea:	2001      	movs	r0, #1
 800c9ec:	f000 fe34 	bl	800d658 <createEmptyFrame>
	}

	uint8_t MenuRectangleStartX = 0;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	75fb      	strb	r3, [r7, #23]
	uint8_t MenuRectangleStartY = 0;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	75bb      	strb	r3, [r7, #22]
	uint8_t MenuRectangleHeight = 0;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	757b      	strb	r3, [r7, #21]
	uint8_t MenuRectangleWidth = 0;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	753b      	strb	r3, [r7, #20]
	uint8_t DisplayCenterWidth = 0;
 800ca00:	2300      	movs	r3, #0
 800ca02:	74fb      	strb	r3, [r7, #19]

	if (isPortrait)
 800ca04:	4b89      	ldr	r3, [pc, #548]	; (800cc2c <drawMenu+0x260>)
 800ca06:	781b      	ldrb	r3, [r3, #0]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d009      	beq.n	800ca20 <drawMenu+0x54>
	{
		MenuRectangleStartX = VerticalMenuRectangleStartX;
 800ca0c:	2302      	movs	r3, #2
 800ca0e:	75fb      	strb	r3, [r7, #23]
		MenuRectangleStartY = VerticalMenuRectangleStartY;
 800ca10:	230c      	movs	r3, #12
 800ca12:	75bb      	strb	r3, [r7, #22]
		MenuRectangleHeight = VerticalMenuRectangleHeight;
 800ca14:	230e      	movs	r3, #14
 800ca16:	757b      	strb	r3, [r7, #21]
		MenuRectangleWidth = VerticalMenuRectangleWidth;
 800ca18:	237c      	movs	r3, #124	; 0x7c
 800ca1a:	753b      	strb	r3, [r7, #20]
		DisplayCenterWidth = VerticalDisplayCenterWidth;
 800ca1c:	2340      	movs	r3, #64	; 0x40
 800ca1e:	74fb      	strb	r3, [r7, #19]
//		MenuRectangleHeight = HorizontalMenuRectangleHeight;
//		MenuRectangleWidth = HorizontalMenuRectangleWidth;
//		DisplayCenterWidth = HorizontalDisplayCenterWidth;
	}

	if (howToDraw == FULL)
 800ca20:	79bb      	ldrb	r3, [r7, #6]
 800ca22:	2b02      	cmp	r3, #2
 800ca24:	f040 809f 	bne.w	800cb66 <drawMenu+0x19a>
	{
		for (int i = 0; i < pagesArray[currentCursorPosition.currentPageID].numberOfItemsInPage; i++)
 800ca28:	2300      	movs	r3, #0
 800ca2a:	60fb      	str	r3, [r7, #12]
 800ca2c:	e08a      	b.n	800cb44 <drawMenu+0x178>
		{
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800ca2e:	7dfb      	ldrb	r3, [r7, #23]
 800ca30:	b298      	uxth	r0, r3
 800ca32:	7dbb      	ldrb	r3, [r7, #22]
 800ca34:	b29a      	uxth	r2, r3
 800ca36:	7d7b      	ldrb	r3, [r7, #21]
 800ca38:	b299      	uxth	r1, r3
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	b29b      	uxth	r3, r3
 800ca3e:	fb11 f303 	smulbb	r3, r1, r3
 800ca42:	b29b      	uxth	r3, r3
 800ca44:	4413      	add	r3, r2
 800ca46:	b29c      	uxth	r4, r3
 800ca48:	7dfb      	ldrb	r3, [r7, #23]
 800ca4a:	b29a      	uxth	r2, r3
 800ca4c:	7d3b      	ldrb	r3, [r7, #20]
 800ca4e:	b29b      	uxth	r3, r3
 800ca50:	4413      	add	r3, r2
 800ca52:	b29d      	uxth	r5, r3
 800ca54:	7dbb      	ldrb	r3, [r7, #22]
 800ca56:	b29a      	uxth	r2, r3
 800ca58:	7d7b      	ldrb	r3, [r7, #21]
 800ca5a:	b299      	uxth	r1, r3
					MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * ( i + 1),
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	3301      	adds	r3, #1
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800ca60:	b29b      	uxth	r3, r3
 800ca62:	fb11 f303 	smulbb	r3, r1, r3
 800ca66:	b29b      	uxth	r3, r3
 800ca68:	4413      	add	r3, r2
 800ca6a:	b29b      	uxth	r3, r3
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	9202      	str	r2, [sp, #8]
 800ca70:	2201      	movs	r2, #1
 800ca72:	9201      	str	r2, [sp, #4]
 800ca74:	2200      	movs	r2, #0
 800ca76:	9200      	str	r2, [sp, #0]
 800ca78:	462a      	mov	r2, r5
 800ca7a:	4621      	mov	r1, r4
 800ca7c:	f7fc f9a6 	bl	8008dcc <Paint_DrawRectangle>
					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			if (i == currentCursorPosition.cursorPosition)
 800ca80:	4b6b      	ldr	r3, [pc, #428]	; (800cc30 <drawMenu+0x264>)
 800ca82:	781b      	ldrb	r3, [r3, #0]
 800ca84:	461a      	mov	r2, r3
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d12c      	bne.n	800cae6 <drawMenu+0x11a>
			{
				centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * i,
 800ca8c:	7cfb      	ldrb	r3, [r7, #19]
 800ca8e:	b29c      	uxth	r4, r3
 800ca90:	7dbb      	ldrb	r3, [r7, #22]
 800ca92:	b29a      	uxth	r2, r3
 800ca94:	7d7b      	ldrb	r3, [r7, #21]
 800ca96:	b299      	uxth	r1, r3
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	b29b      	uxth	r3, r3
 800ca9c:	fb11 f303 	smulbb	r3, r1, r3
 800caa0:	b29b      	uxth	r3, r3
 800caa2:	4413      	add	r3, r2
 800caa4:	b29b      	uxth	r3, r3
 800caa6:	3301      	adds	r3, #1
 800caa8:	b29d      	uxth	r5, r3
						pagesArray[currentCursorPosition.currentPageID].itemsArray[i], BLACK, LGRAY, 16, Font12);
 800caaa:	4b61      	ldr	r3, [pc, #388]	; (800cc30 <drawMenu+0x264>)
 800caac:	785b      	ldrb	r3, [r3, #1]
 800caae:	4619      	mov	r1, r3
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	330a      	adds	r3, #10
 800cab4:	011a      	lsls	r2, r3, #4
 800cab6:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 800caba:	fb03 f301 	mul.w	r3, r3, r1
 800cabe:	4413      	add	r3, r2
 800cac0:	4a5c      	ldr	r2, [pc, #368]	; (800cc34 <drawMenu+0x268>)
 800cac2:	4413      	add	r3, r2
 800cac4:	1c9a      	adds	r2, r3, #2
				centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * i,
 800cac6:	495c      	ldr	r1, [pc, #368]	; (800cc38 <drawMenu+0x26c>)
 800cac8:	ab02      	add	r3, sp, #8
 800caca:	c903      	ldmia	r1, {r0, r1}
 800cacc:	e883 0003 	stmia.w	r3, {r0, r1}
 800cad0:	2310      	movs	r3, #16
 800cad2:	9301      	str	r3, [sp, #4]
 800cad4:	f24c 6318 	movw	r3, #50712	; 0xc618
 800cad8:	9300      	str	r3, [sp, #0]
 800cada:	2300      	movs	r3, #0
 800cadc:	4629      	mov	r1, r5
 800cade:	4620      	mov	r0, r4
 800cae0:	f7ff fd1e 	bl	800c520 <centeredString>
 800cae4:	e02b      	b.n	800cb3e <drawMenu+0x172>
			}
			else
			{
				centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * i,
 800cae6:	7cfb      	ldrb	r3, [r7, #19]
 800cae8:	b29c      	uxth	r4, r3
 800caea:	7dbb      	ldrb	r3, [r7, #22]
 800caec:	b29a      	uxth	r2, r3
 800caee:	7d7b      	ldrb	r3, [r7, #21]
 800caf0:	b299      	uxth	r1, r3
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	b29b      	uxth	r3, r3
 800caf6:	fb11 f303 	smulbb	r3, r1, r3
 800cafa:	b29b      	uxth	r3, r3
 800cafc:	4413      	add	r3, r2
 800cafe:	b29b      	uxth	r3, r3
 800cb00:	3301      	adds	r3, #1
 800cb02:	b29d      	uxth	r5, r3
						pagesArray[currentCursorPosition.currentPageID].itemsArray[i], BLACK, WHITE, 16, Font12);
 800cb04:	4b4a      	ldr	r3, [pc, #296]	; (800cc30 <drawMenu+0x264>)
 800cb06:	785b      	ldrb	r3, [r3, #1]
 800cb08:	4619      	mov	r1, r3
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	330a      	adds	r3, #10
 800cb0e:	011a      	lsls	r2, r3, #4
 800cb10:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 800cb14:	fb03 f301 	mul.w	r3, r3, r1
 800cb18:	4413      	add	r3, r2
 800cb1a:	4a46      	ldr	r2, [pc, #280]	; (800cc34 <drawMenu+0x268>)
 800cb1c:	4413      	add	r3, r2
 800cb1e:	1c9a      	adds	r2, r3, #2
				centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * i,
 800cb20:	4945      	ldr	r1, [pc, #276]	; (800cc38 <drawMenu+0x26c>)
 800cb22:	ab02      	add	r3, sp, #8
 800cb24:	c903      	ldmia	r1, {r0, r1}
 800cb26:	e883 0003 	stmia.w	r3, {r0, r1}
 800cb2a:	2310      	movs	r3, #16
 800cb2c:	9301      	str	r3, [sp, #4]
 800cb2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cb32:	9300      	str	r3, [sp, #0]
 800cb34:	2300      	movs	r3, #0
 800cb36:	4629      	mov	r1, r5
 800cb38:	4620      	mov	r0, r4
 800cb3a:	f7ff fcf1 	bl	800c520 <centeredString>
		for (int i = 0; i < pagesArray[currentCursorPosition.currentPageID].numberOfItemsInPage; i++)
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	3301      	adds	r3, #1
 800cb42:	60fb      	str	r3, [r7, #12]
 800cb44:	4b3a      	ldr	r3, [pc, #232]	; (800cc30 <drawMenu+0x264>)
 800cb46:	785b      	ldrb	r3, [r3, #1]
 800cb48:	4619      	mov	r1, r3
 800cb4a:	4a3a      	ldr	r2, [pc, #232]	; (800cc34 <drawMenu+0x268>)
 800cb4c:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 800cb50:	fb03 f301 	mul.w	r3, r3, r1
 800cb54:	4413      	add	r3, r2
 800cb56:	33a1      	adds	r3, #161	; 0xa1
 800cb58:	781b      	ldrb	r3, [r3, #0]
 800cb5a:	461a      	mov	r2, r3
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	f6ff af65 	blt.w	800ca2e <drawMenu+0x62>
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition - 1),
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition - 1], BLACK, WHITE, 16, Font12);
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition], BLACK, LGRAY, 16, Font12);
	}
}
 800cb64:	e0cb      	b.n	800ccfe <drawMenu+0x332>
	else if (howToDraw == UP)
 800cb66:	79bb      	ldrb	r3, [r7, #6]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d167      	bne.n	800cc3c <drawMenu+0x270>
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition + 1),
 800cb6c:	7cfb      	ldrb	r3, [r7, #19]
 800cb6e:	b29c      	uxth	r4, r3
 800cb70:	7dbb      	ldrb	r3, [r7, #22]
 800cb72:	b29a      	uxth	r2, r3
 800cb74:	7d7b      	ldrb	r3, [r7, #21]
 800cb76:	b299      	uxth	r1, r3
 800cb78:	4b2d      	ldr	r3, [pc, #180]	; (800cc30 <drawMenu+0x264>)
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	3301      	adds	r3, #1
 800cb7e:	b29b      	uxth	r3, r3
 800cb80:	fb11 f303 	smulbb	r3, r1, r3
 800cb84:	b29b      	uxth	r3, r3
 800cb86:	4413      	add	r3, r2
 800cb88:	b29b      	uxth	r3, r3
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	b29d      	uxth	r5, r3
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition + 1], BLACK, WHITE, 16, Font12);
 800cb8e:	4b28      	ldr	r3, [pc, #160]	; (800cc30 <drawMenu+0x264>)
 800cb90:	785b      	ldrb	r3, [r3, #1]
 800cb92:	4619      	mov	r1, r3
 800cb94:	4b26      	ldr	r3, [pc, #152]	; (800cc30 <drawMenu+0x264>)
 800cb96:	781b      	ldrb	r3, [r3, #0]
 800cb98:	3301      	adds	r3, #1
 800cb9a:	330a      	adds	r3, #10
 800cb9c:	011a      	lsls	r2, r3, #4
 800cb9e:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 800cba2:	fb03 f301 	mul.w	r3, r3, r1
 800cba6:	4413      	add	r3, r2
 800cba8:	4a22      	ldr	r2, [pc, #136]	; (800cc34 <drawMenu+0x268>)
 800cbaa:	4413      	add	r3, r2
 800cbac:	1c9a      	adds	r2, r3, #2
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition + 1),
 800cbae:	4922      	ldr	r1, [pc, #136]	; (800cc38 <drawMenu+0x26c>)
 800cbb0:	ab02      	add	r3, sp, #8
 800cbb2:	c903      	ldmia	r1, {r0, r1}
 800cbb4:	e883 0003 	stmia.w	r3, {r0, r1}
 800cbb8:	2310      	movs	r3, #16
 800cbba:	9301      	str	r3, [sp, #4]
 800cbbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cbc0:	9300      	str	r3, [sp, #0]
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	4629      	mov	r1, r5
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	f7ff fcaa 	bl	800c520 <centeredString>
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
 800cbcc:	7cfb      	ldrb	r3, [r7, #19]
 800cbce:	b29c      	uxth	r4, r3
 800cbd0:	7dbb      	ldrb	r3, [r7, #22]
 800cbd2:	b29a      	uxth	r2, r3
 800cbd4:	7d7b      	ldrb	r3, [r7, #21]
 800cbd6:	b299      	uxth	r1, r3
 800cbd8:	4b15      	ldr	r3, [pc, #84]	; (800cc30 <drawMenu+0x264>)
 800cbda:	781b      	ldrb	r3, [r3, #0]
 800cbdc:	b29b      	uxth	r3, r3
 800cbde:	fb11 f303 	smulbb	r3, r1, r3
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	4413      	add	r3, r2
 800cbe6:	b29b      	uxth	r3, r3
 800cbe8:	3301      	adds	r3, #1
 800cbea:	b29d      	uxth	r5, r3
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition], BLACK, LGRAY, 16, Font12);
 800cbec:	4b10      	ldr	r3, [pc, #64]	; (800cc30 <drawMenu+0x264>)
 800cbee:	785b      	ldrb	r3, [r3, #1]
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	4b0f      	ldr	r3, [pc, #60]	; (800cc30 <drawMenu+0x264>)
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	330a      	adds	r3, #10
 800cbf8:	011a      	lsls	r2, r3, #4
 800cbfa:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 800cbfe:	fb03 f301 	mul.w	r3, r3, r1
 800cc02:	4413      	add	r3, r2
 800cc04:	4a0b      	ldr	r2, [pc, #44]	; (800cc34 <drawMenu+0x268>)
 800cc06:	4413      	add	r3, r2
 800cc08:	1c9a      	adds	r2, r3, #2
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
 800cc0a:	490b      	ldr	r1, [pc, #44]	; (800cc38 <drawMenu+0x26c>)
 800cc0c:	ab02      	add	r3, sp, #8
 800cc0e:	c903      	ldmia	r1, {r0, r1}
 800cc10:	e883 0003 	stmia.w	r3, {r0, r1}
 800cc14:	2310      	movs	r3, #16
 800cc16:	9301      	str	r3, [sp, #4]
 800cc18:	f24c 6318 	movw	r3, #50712	; 0xc618
 800cc1c:	9300      	str	r3, [sp, #0]
 800cc1e:	2300      	movs	r3, #0
 800cc20:	4629      	mov	r1, r5
 800cc22:	4620      	mov	r0, r4
 800cc24:	f7ff fc7c 	bl	800c520 <centeredString>
}
 800cc28:	e069      	b.n	800ccfe <drawMenu+0x332>
 800cc2a:	bf00      	nop
 800cc2c:	24000054 	.word	0x24000054
 800cc30:	2400a5bc 	.word	0x2400a5bc
 800cc34:	2400e220 	.word	0x2400e220
 800cc38:	24000018 	.word	0x24000018
	else if (howToDraw == DOWN)
 800cc3c:	79bb      	ldrb	r3, [r7, #6]
 800cc3e:	2b01      	cmp	r3, #1
 800cc40:	d15d      	bne.n	800ccfe <drawMenu+0x332>
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition - 1),
 800cc42:	7cfb      	ldrb	r3, [r7, #19]
 800cc44:	b29c      	uxth	r4, r3
 800cc46:	7dbb      	ldrb	r3, [r7, #22]
 800cc48:	b29a      	uxth	r2, r3
 800cc4a:	7d7b      	ldrb	r3, [r7, #21]
 800cc4c:	b299      	uxth	r1, r3
 800cc4e:	4b2e      	ldr	r3, [pc, #184]	; (800cd08 <drawMenu+0x33c>)
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	3b01      	subs	r3, #1
 800cc54:	b29b      	uxth	r3, r3
 800cc56:	fb11 f303 	smulbb	r3, r1, r3
 800cc5a:	b29b      	uxth	r3, r3
 800cc5c:	4413      	add	r3, r2
 800cc5e:	b29b      	uxth	r3, r3
 800cc60:	3301      	adds	r3, #1
 800cc62:	b29d      	uxth	r5, r3
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition - 1], BLACK, WHITE, 16, Font12);
 800cc64:	4b28      	ldr	r3, [pc, #160]	; (800cd08 <drawMenu+0x33c>)
 800cc66:	785b      	ldrb	r3, [r3, #1]
 800cc68:	4619      	mov	r1, r3
 800cc6a:	4b27      	ldr	r3, [pc, #156]	; (800cd08 <drawMenu+0x33c>)
 800cc6c:	781b      	ldrb	r3, [r3, #0]
 800cc6e:	3b01      	subs	r3, #1
 800cc70:	330a      	adds	r3, #10
 800cc72:	011a      	lsls	r2, r3, #4
 800cc74:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 800cc78:	fb03 f301 	mul.w	r3, r3, r1
 800cc7c:	4413      	add	r3, r2
 800cc7e:	4a23      	ldr	r2, [pc, #140]	; (800cd0c <drawMenu+0x340>)
 800cc80:	4413      	add	r3, r2
 800cc82:	1c9a      	adds	r2, r3, #2
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition - 1),
 800cc84:	4922      	ldr	r1, [pc, #136]	; (800cd10 <drawMenu+0x344>)
 800cc86:	ab02      	add	r3, sp, #8
 800cc88:	c903      	ldmia	r1, {r0, r1}
 800cc8a:	e883 0003 	stmia.w	r3, {r0, r1}
 800cc8e:	2310      	movs	r3, #16
 800cc90:	9301      	str	r3, [sp, #4]
 800cc92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cc96:	9300      	str	r3, [sp, #0]
 800cc98:	2300      	movs	r3, #0
 800cc9a:	4629      	mov	r1, r5
 800cc9c:	4620      	mov	r0, r4
 800cc9e:	f7ff fc3f 	bl	800c520 <centeredString>
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
 800cca2:	7cfb      	ldrb	r3, [r7, #19]
 800cca4:	b29c      	uxth	r4, r3
 800cca6:	7dbb      	ldrb	r3, [r7, #22]
 800cca8:	b29a      	uxth	r2, r3
 800ccaa:	7d7b      	ldrb	r3, [r7, #21]
 800ccac:	b299      	uxth	r1, r3
 800ccae:	4b16      	ldr	r3, [pc, #88]	; (800cd08 <drawMenu+0x33c>)
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	b29b      	uxth	r3, r3
 800ccb4:	fb11 f303 	smulbb	r3, r1, r3
 800ccb8:	b29b      	uxth	r3, r3
 800ccba:	4413      	add	r3, r2
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	b29d      	uxth	r5, r3
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition], BLACK, LGRAY, 16, Font12);
 800ccc2:	4b11      	ldr	r3, [pc, #68]	; (800cd08 <drawMenu+0x33c>)
 800ccc4:	785b      	ldrb	r3, [r3, #1]
 800ccc6:	4619      	mov	r1, r3
 800ccc8:	4b0f      	ldr	r3, [pc, #60]	; (800cd08 <drawMenu+0x33c>)
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	330a      	adds	r3, #10
 800ccce:	011a      	lsls	r2, r3, #4
 800ccd0:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 800ccd4:	fb03 f301 	mul.w	r3, r3, r1
 800ccd8:	4413      	add	r3, r2
 800ccda:	4a0c      	ldr	r2, [pc, #48]	; (800cd0c <drawMenu+0x340>)
 800ccdc:	4413      	add	r3, r2
 800ccde:	1c9a      	adds	r2, r3, #2
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
 800cce0:	490b      	ldr	r1, [pc, #44]	; (800cd10 <drawMenu+0x344>)
 800cce2:	ab02      	add	r3, sp, #8
 800cce4:	c903      	ldmia	r1, {r0, r1}
 800cce6:	e883 0003 	stmia.w	r3, {r0, r1}
 800ccea:	2310      	movs	r3, #16
 800ccec:	9301      	str	r3, [sp, #4]
 800ccee:	f24c 6318 	movw	r3, #50712	; 0xc618
 800ccf2:	9300      	str	r3, [sp, #0]
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	4629      	mov	r1, r5
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	f7ff fc11 	bl	800c520 <centeredString>
}
 800ccfe:	bf00      	nop
 800cd00:	3718      	adds	r7, #24
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bdb0      	pop	{r4, r5, r7, pc}
 800cd06:	bf00      	nop
 800cd08:	2400a5bc 	.word	0x2400a5bc
 800cd0c:	2400e220 	.word	0x2400e220
 800cd10:	24000018 	.word	0x24000018

0800cd14 <drawItem>:

void drawItem(bool clearScreen, MENUDRAWType howToDraw)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b082      	sub	sp, #8
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	460a      	mov	r2, r1
 800cd1e:	71fb      	strb	r3, [r7, #7]
 800cd20:	4613      	mov	r3, r2
 800cd22:	71bb      	strb	r3, [r7, #6]
	if ((clearScreen) || (!isItemDisplayed) )
 800cd24:	79fb      	ldrb	r3, [r7, #7]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d106      	bne.n	800cd38 <drawItem+0x24>
 800cd2a:	4b53      	ldr	r3, [pc, #332]	; (800ce78 <drawItem+0x164>)
 800cd2c:	781b      	ldrb	r3, [r3, #0]
 800cd2e:	f083 0301 	eor.w	r3, r3, #1
 800cd32:	b2db      	uxtb	r3, r3
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d006      	beq.n	800cd46 <drawItem+0x32>
	{
		Paint_Clear(WHITE);
 800cd38:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800cd3c:	f7fb febc 	bl	8008ab8 <Paint_Clear>
		createEmptyFrame(true);
 800cd40:	2001      	movs	r0, #1
 800cd42:	f000 fc89 	bl	800d658 <createEmptyFrame>
	}
	if ( pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth - 1]].
 800cd46:	4b4d      	ldr	r3, [pc, #308]	; (800ce7c <drawItem+0x168>)
 800cd48:	7b1b      	ldrb	r3, [r3, #12]
 800cd4a:	3b01      	subs	r3, #1
 800cd4c:	4a4b      	ldr	r2, [pc, #300]	; (800ce7c <drawItem+0x168>)
 800cd4e:	4413      	add	r3, r2
 800cd50:	789b      	ldrb	r3, [r3, #2]
 800cd52:	4618      	mov	r0, r3
			cellTypeArray[currentCursorPosition.previousPageCursorPosition[currentCursorPosition.menuDepth - 1]] == UINT16_ITEM )
 800cd54:	4b49      	ldr	r3, [pc, #292]	; (800ce7c <drawItem+0x168>)
 800cd56:	7b1b      	ldrb	r3, [r3, #12]
 800cd58:	3b01      	subs	r3, #1
 800cd5a:	4a48      	ldr	r2, [pc, #288]	; (800ce7c <drawItem+0x168>)
 800cd5c:	4413      	add	r3, r2
 800cd5e:	79db      	ldrb	r3, [r3, #7]
 800cd60:	4619      	mov	r1, r3
 800cd62:	4a47      	ldr	r2, [pc, #284]	; (800ce80 <drawItem+0x16c>)
 800cd64:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 800cd68:	fb03 f300 	mul.w	r3, r3, r0
 800cd6c:	4413      	add	r3, r2
 800cd6e:	440b      	add	r3, r1
 800cd70:	3380      	adds	r3, #128	; 0x80
 800cd72:	781b      	ldrb	r3, [r3, #0]
	if ( pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth - 1]].
 800cd74:	2b02      	cmp	r3, #2
 800cd76:	d130      	bne.n	800cdda <drawItem+0xc6>
	{
		if ( !(isItemDisplayed) )
 800cd78:	4b3f      	ldr	r3, [pc, #252]	; (800ce78 <drawItem+0x164>)
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	f083 0301 	eor.w	r3, r3, #1
 800cd80:	b2db      	uxtb	r3, r3
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d022      	beq.n	800cdcc <drawItem+0xb8>
		{
			multiplierIndex = 0;
 800cd86:	4b3f      	ldr	r3, [pc, #252]	; (800ce84 <drawItem+0x170>)
 800cd88:	2200      	movs	r2, #0
 800cd8a:	701a      	strb	r2, [r3, #0]
			memcpy(&uint16Item, (uint32_t *)pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth -1]].
 800cd8c:	4b3b      	ldr	r3, [pc, #236]	; (800ce7c <drawItem+0x168>)
 800cd8e:	7b1b      	ldrb	r3, [r3, #12]
 800cd90:	3b01      	subs	r3, #1
 800cd92:	4a3a      	ldr	r2, [pc, #232]	; (800ce7c <drawItem+0x168>)
 800cd94:	4413      	add	r3, r2
 800cd96:	789b      	ldrb	r3, [r3, #2]
 800cd98:	4618      	mov	r0, r3
					nextCellIDArray[currentCursorPosition.previousPageCursorPosition[currentCursorPosition.menuDepth -1]], sizeof(tUINT16_ITEM));
 800cd9a:	4b38      	ldr	r3, [pc, #224]	; (800ce7c <drawItem+0x168>)
 800cd9c:	7b1b      	ldrb	r3, [r3, #12]
 800cd9e:	3b01      	subs	r3, #1
 800cda0:	4a36      	ldr	r2, [pc, #216]	; (800ce7c <drawItem+0x168>)
 800cda2:	4413      	add	r3, r2
 800cda4:	79db      	ldrb	r3, [r3, #7]
 800cda6:	4619      	mov	r1, r3
 800cda8:	4a35      	ldr	r2, [pc, #212]	; (800ce80 <drawItem+0x16c>)
 800cdaa:	23a9      	movs	r3, #169	; 0xa9
 800cdac:	fb03 f300 	mul.w	r3, r3, r0
 800cdb0:	440b      	add	r3, r1
 800cdb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			memcpy(&uint16Item, (uint32_t *)pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth -1]].
 800cdb6:	f44f 7204 	mov.w	r2, #528	; 0x210
 800cdba:	4619      	mov	r1, r3
 800cdbc:	4832      	ldr	r0, [pc, #200]	; (800ce88 <drawItem+0x174>)
 800cdbe:	f003 faa1 	bl	8010304 <memcpy>
			itemIDtoUpdate = uint16Item.itemID;
 800cdc2:	4b31      	ldr	r3, [pc, #196]	; (800ce88 <drawItem+0x174>)
 800cdc4:	7b9b      	ldrb	r3, [r3, #14]
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	4b30      	ldr	r3, [pc, #192]	; (800ce8c <drawItem+0x178>)
 800cdca:	601a      	str	r2, [r3, #0]
		}
		isItemDisplayed = true;
 800cdcc:	4b2a      	ldr	r3, [pc, #168]	; (800ce78 <drawItem+0x164>)
 800cdce:	2201      	movs	r2, #1
 800cdd0:	701a      	strb	r2, [r3, #0]
		updateUint16Item(howToDraw);
 800cdd2:	79bb      	ldrb	r3, [r7, #6]
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f000 fca3 	bl	800d720 <updateUint16Item>
	}
	if ( pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth - 1]].
 800cdda:	4b28      	ldr	r3, [pc, #160]	; (800ce7c <drawItem+0x168>)
 800cddc:	7b1b      	ldrb	r3, [r3, #12]
 800cdde:	3b01      	subs	r3, #1
 800cde0:	4a26      	ldr	r2, [pc, #152]	; (800ce7c <drawItem+0x168>)
 800cde2:	4413      	add	r3, r2
 800cde4:	789b      	ldrb	r3, [r3, #2]
 800cde6:	4618      	mov	r0, r3
			cellTypeArray[currentCursorPosition.previousPageCursorPosition[currentCursorPosition.menuDepth - 1]] == STRING_ITEM )
 800cde8:	4b24      	ldr	r3, [pc, #144]	; (800ce7c <drawItem+0x168>)
 800cdea:	7b1b      	ldrb	r3, [r3, #12]
 800cdec:	3b01      	subs	r3, #1
 800cdee:	4a23      	ldr	r2, [pc, #140]	; (800ce7c <drawItem+0x168>)
 800cdf0:	4413      	add	r3, r2
 800cdf2:	79db      	ldrb	r3, [r3, #7]
 800cdf4:	4619      	mov	r1, r3
 800cdf6:	4a22      	ldr	r2, [pc, #136]	; (800ce80 <drawItem+0x16c>)
 800cdf8:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 800cdfc:	fb03 f300 	mul.w	r3, r3, r0
 800ce00:	4413      	add	r3, r2
 800ce02:	440b      	add	r3, r1
 800ce04:	3380      	adds	r3, #128	; 0x80
 800ce06:	781b      	ldrb	r3, [r3, #0]
	if ( pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth - 1]].
 800ce08:	2b08      	cmp	r3, #8
 800ce0a:	d131      	bne.n	800ce70 <drawItem+0x15c>
	{
		if ( !(isItemDisplayed) )
 800ce0c:	4b1a      	ldr	r3, [pc, #104]	; (800ce78 <drawItem+0x164>)
 800ce0e:	781b      	ldrb	r3, [r3, #0]
 800ce10:	f083 0301 	eor.w	r3, r3, #1
 800ce14:	b2db      	uxtb	r3, r3
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d023      	beq.n	800ce62 <drawItem+0x14e>
		{
			multiplierIndex = 0;
 800ce1a:	4b1a      	ldr	r3, [pc, #104]	; (800ce84 <drawItem+0x170>)
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	701a      	strb	r2, [r3, #0]
			memcpy(&stringItem, (uint32_t *)pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth -1]].
 800ce20:	4b16      	ldr	r3, [pc, #88]	; (800ce7c <drawItem+0x168>)
 800ce22:	7b1b      	ldrb	r3, [r3, #12]
 800ce24:	3b01      	subs	r3, #1
 800ce26:	4a15      	ldr	r2, [pc, #84]	; (800ce7c <drawItem+0x168>)
 800ce28:	4413      	add	r3, r2
 800ce2a:	789b      	ldrb	r3, [r3, #2]
 800ce2c:	4618      	mov	r0, r3
					nextCellIDArray[currentCursorPosition.previousPageCursorPosition[currentCursorPosition.menuDepth -1]], sizeof(tSTRING_ITEM));
 800ce2e:	4b13      	ldr	r3, [pc, #76]	; (800ce7c <drawItem+0x168>)
 800ce30:	7b1b      	ldrb	r3, [r3, #12]
 800ce32:	3b01      	subs	r3, #1
 800ce34:	4a11      	ldr	r2, [pc, #68]	; (800ce7c <drawItem+0x168>)
 800ce36:	4413      	add	r3, r2
 800ce38:	79db      	ldrb	r3, [r3, #7]
 800ce3a:	4619      	mov	r1, r3
 800ce3c:	4a10      	ldr	r2, [pc, #64]	; (800ce80 <drawItem+0x16c>)
 800ce3e:	23a9      	movs	r3, #169	; 0xa9
 800ce40:	fb03 f300 	mul.w	r3, r3, r0
 800ce44:	440b      	add	r3, r1
 800ce46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			memcpy(&stringItem, (uint32_t *)pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth -1]].
 800ce4a:	f240 420c 	movw	r2, #1036	; 0x40c
 800ce4e:	4619      	mov	r1, r3
 800ce50:	480f      	ldr	r0, [pc, #60]	; (800ce90 <drawItem+0x17c>)
 800ce52:	f003 fa57 	bl	8010304 <memcpy>
			itemIDtoUpdate = stringItem.itemID;
 800ce56:	4b0e      	ldr	r3, [pc, #56]	; (800ce90 <drawItem+0x17c>)
 800ce58:	f893 320a 	ldrb.w	r3, [r3, #522]	; 0x20a
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	4b0b      	ldr	r3, [pc, #44]	; (800ce8c <drawItem+0x178>)
 800ce60:	601a      	str	r2, [r3, #0]
		}
		isItemDisplayed = true;
 800ce62:	4b05      	ldr	r3, [pc, #20]	; (800ce78 <drawItem+0x164>)
 800ce64:	2201      	movs	r2, #1
 800ce66:	701a      	strb	r2, [r3, #0]
		updateStringItem(howToDraw);
 800ce68:	79bb      	ldrb	r3, [r7, #6]
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f001 ff88 	bl	800ed80 <updateStringItem>
	}
}
 800ce70:	bf00      	nop
 800ce72:	3708      	adds	r7, #8
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	2400a3b0 	.word	0x2400a3b0
 800ce7c:	2400a5bc 	.word	0x2400a5bc
 800ce80:	2400e220 	.word	0x2400e220
 800ce84:	2400a0d8 	.word	0x2400a0d8
 800ce88:	2400ae1c 	.word	0x2400ae1c
 800ce8c:	2400a458 	.word	0x2400a458
 800ce90:	2400b030 	.word	0x2400b030

0800ce94 <drawPopup>:

void drawPopup(void)
{
 800ce94:	b5b0      	push	{r4, r5, r7, lr}
 800ce96:	b088      	sub	sp, #32
 800ce98:	af04      	add	r7, sp, #16
	uint8_t MenuRectangleStartX = 0;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	73fb      	strb	r3, [r7, #15]
	uint8_t MenuRectangleStartY = 0;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	73bb      	strb	r3, [r7, #14]
	uint8_t MenuRectangleHeight = 0;
 800cea2:	2300      	movs	r3, #0
 800cea4:	737b      	strb	r3, [r7, #13]
	uint8_t MenuRectangleWidth = 0;
 800cea6:	2300      	movs	r3, #0
 800cea8:	733b      	strb	r3, [r7, #12]
	uint8_t DisplayCenterWidth = 0;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	72fb      	strb	r3, [r7, #11]
	uint8_t PopupRectangleHeight = 0;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	72bb      	strb	r3, [r7, #10]
	uint8_t QuestionRectangleHeight = 0;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	727b      	strb	r3, [r7, #9]

	if (isPortrait)
 800ceb6:	4ba3      	ldr	r3, [pc, #652]	; (800d144 <drawPopup+0x2b0>)
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d00d      	beq.n	800ceda <drawPopup+0x46>
	{
		MenuRectangleStartX = VerticalMenuRectangleStartX;
 800cebe:	2302      	movs	r3, #2
 800cec0:	73fb      	strb	r3, [r7, #15]
		MenuRectangleStartY = VerticalMenuRectangleStartY;
 800cec2:	230c      	movs	r3, #12
 800cec4:	73bb      	strb	r3, [r7, #14]
		MenuRectangleHeight = VerticalMenuRectangleHeight;
 800cec6:	230e      	movs	r3, #14
 800cec8:	737b      	strb	r3, [r7, #13]
		MenuRectangleWidth = VerticalMenuRectangleWidth;
 800ceca:	237c      	movs	r3, #124	; 0x7c
 800cecc:	733b      	strb	r3, [r7, #12]
		DisplayCenterWidth = VerticalDisplayCenterWidth;
 800cece:	2340      	movs	r3, #64	; 0x40
 800ced0:	72fb      	strb	r3, [r7, #11]
		PopupRectangleHeight = VerticalPopupRectangleHeight;
 800ced2:	2364      	movs	r3, #100	; 0x64
 800ced4:	72bb      	strb	r3, [r7, #10]
		QuestionRectangleHeight = VerticalQuestionRectangleHeight;
 800ced6:	2356      	movs	r3, #86	; 0x56
 800ced8:	727b      	strb	r3, [r7, #9]
//		DisplayCenterWidth = HorizontalDisplayCenterWidth;
//		PopupRectangleHeight = HorizontalPopupRectangleHeight;
//		QuestionRectangleHeight = HorizontalQuestionRectangleHeight;
	}

	isPopupDisplayed = true;
 800ceda:	4b9b      	ldr	r3, [pc, #620]	; (800d148 <drawPopup+0x2b4>)
 800cedc:	2201      	movs	r2, #1
 800cede:	701a      	strb	r2, [r3, #0]
	isItemDisplayed = false;
 800cee0:	4b9a      	ldr	r3, [pc, #616]	; (800d14c <drawPopup+0x2b8>)
 800cee2:	2200      	movs	r2, #0
 800cee4:	701a      	strb	r2, [r3, #0]
	isMenuDisplayed = false;
 800cee6:	4b9a      	ldr	r3, [pc, #616]	; (800d150 <drawPopup+0x2bc>)
 800cee8:	2200      	movs	r2, #0
 800ceea:	701a      	strb	r2, [r3, #0]
	if (popupDrawDirection == FULL)
 800ceec:	4b99      	ldr	r3, [pc, #612]	; (800d154 <drawPopup+0x2c0>)
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	2b02      	cmp	r3, #2
 800cef2:	f040 8097 	bne.w	800d024 <drawPopup+0x190>
	{
		Paint_Clear(WHITE);
 800cef6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800cefa:	f7fb fddd 	bl	8008ab8 <Paint_Clear>
		createEmptyFrame(true);
 800cefe:	2001      	movs	r0, #1
 800cf00:	f000 fbaa 	bl	800d658 <createEmptyFrame>
		Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY ,
 800cf04:	7bfb      	ldrb	r3, [r7, #15]
 800cf06:	b298      	uxth	r0, r3
 800cf08:	7bbb      	ldrb	r3, [r7, #14]
 800cf0a:	b299      	uxth	r1, r3
 800cf0c:	7bfb      	ldrb	r3, [r7, #15]
 800cf0e:	b29a      	uxth	r2, r3
 800cf10:	7b3b      	ldrb	r3, [r7, #12]
 800cf12:	b29b      	uxth	r3, r3
 800cf14:	4413      	add	r3, r2
 800cf16:	b29c      	uxth	r4, r3
 800cf18:	7bbb      	ldrb	r3, [r7, #14]
 800cf1a:	b29a      	uxth	r2, r3
 800cf1c:	7abb      	ldrb	r3, [r7, #10]
 800cf1e:	b29b      	uxth	r3, r3
 800cf20:	4413      	add	r3, r2
 800cf22:	b29b      	uxth	r3, r3
 800cf24:	2200      	movs	r2, #0
 800cf26:	9202      	str	r2, [sp, #8]
 800cf28:	2201      	movs	r2, #1
 800cf2a:	9201      	str	r2, [sp, #4]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	9200      	str	r2, [sp, #0]
 800cf30:	4622      	mov	r2, r4
 800cf32:	f7fb ff4b 	bl	8008dcc <Paint_DrawRectangle>
				MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + PopupRectangleHeight,
				BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );

		if (popupToShow.isQuestion)
 800cf36:	4b88      	ldr	r3, [pc, #544]	; (800d158 <drawPopup+0x2c4>)
 800cf38:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d020      	beq.n	800cf82 <drawPopup+0xee>
		{
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + QuestionRectangleHeight,
 800cf40:	7bfb      	ldrb	r3, [r7, #15]
 800cf42:	b298      	uxth	r0, r3
 800cf44:	7bbb      	ldrb	r3, [r7, #14]
 800cf46:	b29a      	uxth	r2, r3
 800cf48:	7a7b      	ldrb	r3, [r7, #9]
 800cf4a:	b29b      	uxth	r3, r3
 800cf4c:	4413      	add	r3, r2
 800cf4e:	b299      	uxth	r1, r3
 800cf50:	7bfb      	ldrb	r3, [r7, #15]
 800cf52:	b29a      	uxth	r2, r3
 800cf54:	7b3b      	ldrb	r3, [r7, #12]
 800cf56:	b29b      	uxth	r3, r3
 800cf58:	4413      	add	r3, r2
 800cf5a:	b29c      	uxth	r4, r3
					MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + QuestionRectangleHeight + MenuRectangleHeight,
 800cf5c:	7bbb      	ldrb	r3, [r7, #14]
 800cf5e:	b29a      	uxth	r2, r3
 800cf60:	7a7b      	ldrb	r3, [r7, #9]
 800cf62:	b29b      	uxth	r3, r3
 800cf64:	4413      	add	r3, r2
 800cf66:	b29a      	uxth	r2, r3
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + QuestionRectangleHeight,
 800cf68:	7b7b      	ldrb	r3, [r7, #13]
 800cf6a:	b29b      	uxth	r3, r3
 800cf6c:	4413      	add	r3, r2
 800cf6e:	b29b      	uxth	r3, r3
 800cf70:	2200      	movs	r2, #0
 800cf72:	9202      	str	r2, [sp, #8]
 800cf74:	2201      	movs	r2, #1
 800cf76:	9201      	str	r2, [sp, #4]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	9200      	str	r2, [sp, #0]
 800cf7c:	4622      	mov	r2, r4
 800cf7e:	f7fb ff25 	bl	8008dcc <Paint_DrawRectangle>
					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
		}

		Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + PopupRectangleHeight,
 800cf82:	7bfb      	ldrb	r3, [r7, #15]
 800cf84:	b298      	uxth	r0, r3
 800cf86:	7bbb      	ldrb	r3, [r7, #14]
 800cf88:	b29a      	uxth	r2, r3
 800cf8a:	7abb      	ldrb	r3, [r7, #10]
 800cf8c:	b29b      	uxth	r3, r3
 800cf8e:	4413      	add	r3, r2
 800cf90:	b299      	uxth	r1, r3
 800cf92:	7bfb      	ldrb	r3, [r7, #15]
 800cf94:	b29a      	uxth	r2, r3
 800cf96:	7b3b      	ldrb	r3, [r7, #12]
 800cf98:	b29b      	uxth	r3, r3
 800cf9a:	4413      	add	r3, r2
 800cf9c:	b29c      	uxth	r4, r3
				MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + PopupRectangleHeight + MenuRectangleHeight,
 800cf9e:	7bbb      	ldrb	r3, [r7, #14]
 800cfa0:	b29a      	uxth	r2, r3
 800cfa2:	7abb      	ldrb	r3, [r7, #10]
 800cfa4:	b29b      	uxth	r3, r3
 800cfa6:	4413      	add	r3, r2
 800cfa8:	b29a      	uxth	r2, r3
		Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + PopupRectangleHeight,
 800cfaa:	7b7b      	ldrb	r3, [r7, #13]
 800cfac:	b29b      	uxth	r3, r3
 800cfae:	4413      	add	r3, r2
 800cfb0:	b29b      	uxth	r3, r3
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	9202      	str	r2, [sp, #8]
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	9201      	str	r2, [sp, #4]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	9200      	str	r2, [sp, #0]
 800cfbe:	4622      	mov	r2, r4
 800cfc0:	f7fb ff04 	bl	8008dcc <Paint_DrawRectangle>
				BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );

		for (int i = 0 ; i < popupToShow.numberOfItemsInPopup - 2; i++)
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	607b      	str	r3, [r7, #4]
 800cfc8:	e026      	b.n	800d018 <drawPopup+0x184>
		{
			centeredString( DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1) + 1,
 800cfca:	7afb      	ldrb	r3, [r7, #11]
 800cfcc:	b29c      	uxth	r4, r3
 800cfce:	7bbb      	ldrb	r3, [r7, #14]
 800cfd0:	b29a      	uxth	r2, r3
 800cfd2:	7b7b      	ldrb	r3, [r7, #13]
 800cfd4:	b299      	uxth	r1, r3
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	3301      	adds	r3, #1
 800cfda:	b29b      	uxth	r3, r3
 800cfdc:	fb11 f303 	smulbb	r3, r1, r3
 800cfe0:	b29b      	uxth	r3, r3
 800cfe2:	4413      	add	r3, r2
 800cfe4:	b29b      	uxth	r3, r3
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[i], BLACK, WHITE, 16, Font12);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	011b      	lsls	r3, r3, #4
 800cfee:	4a5a      	ldr	r2, [pc, #360]	; (800d158 <drawPopup+0x2c4>)
 800cff0:	4413      	add	r3, r2
 800cff2:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1) + 1,
 800cff4:	4959      	ldr	r1, [pc, #356]	; (800d15c <drawPopup+0x2c8>)
 800cff6:	ab02      	add	r3, sp, #8
 800cff8:	c903      	ldmia	r1, {r0, r1}
 800cffa:	e883 0003 	stmia.w	r3, {r0, r1}
 800cffe:	2310      	movs	r3, #16
 800d000:	9301      	str	r3, [sp, #4]
 800d002:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d006:	9300      	str	r3, [sp, #0]
 800d008:	2300      	movs	r3, #0
 800d00a:	4629      	mov	r1, r5
 800d00c:	4620      	mov	r0, r4
 800d00e:	f7ff fa87 	bl	800c520 <centeredString>
		for (int i = 0 ; i < popupToShow.numberOfItemsInPopup - 2; i++)
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	3301      	adds	r3, #1
 800d016:	607b      	str	r3, [r7, #4]
 800d018:	4b4f      	ldr	r3, [pc, #316]	; (800d158 <drawPopup+0x2c4>)
 800d01a:	785b      	ldrb	r3, [r3, #1]
 800d01c:	3b02      	subs	r3, #2
 800d01e:	687a      	ldr	r2, [r7, #4]
 800d020:	429a      	cmp	r2, r3
 800d022:	dbd2      	blt.n	800cfca <drawPopup+0x136>
		}
	}

	if (popupToShow.isQuestion)
 800d024:	4b4c      	ldr	r3, [pc, #304]	; (800d158 <drawPopup+0x2c4>)
 800d026:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	f000 8098 	beq.w	800d160 <drawPopup+0x2cc>
	{
		if ( (popupDrawDirection == FULL) || (popupDrawDirection == UP))
 800d030:	4b48      	ldr	r3, [pc, #288]	; (800d154 <drawPopup+0x2c0>)
 800d032:	781b      	ldrb	r3, [r3, #0]
 800d034:	2b02      	cmp	r3, #2
 800d036:	d003      	beq.n	800d040 <drawPopup+0x1ac>
 800d038:	4b46      	ldr	r3, [pc, #280]	; (800d154 <drawPopup+0x2c0>)
 800d03a:	781b      	ldrb	r3, [r3, #0]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d140      	bne.n	800d0c2 <drawPopup+0x22e>
		{
			centeredString( DisplayCenterWidth, MenuRectangleStartY + QuestionRectangleHeight + 1,
 800d040:	7afb      	ldrb	r3, [r7, #11]
 800d042:	b29c      	uxth	r4, r3
 800d044:	7bbb      	ldrb	r3, [r7, #14]
 800d046:	b29a      	uxth	r2, r3
 800d048:	7a7b      	ldrb	r3, [r7, #9]
 800d04a:	b29b      	uxth	r3, r3
 800d04c:	4413      	add	r3, r2
 800d04e:	b29b      	uxth	r3, r3
 800d050:	3301      	adds	r3, #1
 800d052:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 2], BLACK, LGRAY, 16, Font12);
 800d054:	4b40      	ldr	r3, [pc, #256]	; (800d158 <drawPopup+0x2c4>)
 800d056:	785b      	ldrb	r3, [r3, #1]
 800d058:	3b02      	subs	r3, #2
 800d05a:	011b      	lsls	r3, r3, #4
 800d05c:	4a3e      	ldr	r2, [pc, #248]	; (800d158 <drawPopup+0x2c4>)
 800d05e:	4413      	add	r3, r2
 800d060:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + QuestionRectangleHeight + 1,
 800d062:	493e      	ldr	r1, [pc, #248]	; (800d15c <drawPopup+0x2c8>)
 800d064:	ab02      	add	r3, sp, #8
 800d066:	c903      	ldmia	r1, {r0, r1}
 800d068:	e883 0003 	stmia.w	r3, {r0, r1}
 800d06c:	2310      	movs	r3, #16
 800d06e:	9301      	str	r3, [sp, #4]
 800d070:	f24c 6318 	movw	r3, #50712	; 0xc618
 800d074:	9300      	str	r3, [sp, #0]
 800d076:	2300      	movs	r3, #0
 800d078:	4629      	mov	r1, r5
 800d07a:	4620      	mov	r0, r4
 800d07c:	f7ff fa50 	bl	800c520 <centeredString>

			centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 800d080:	7afb      	ldrb	r3, [r7, #11]
 800d082:	b29c      	uxth	r4, r3
 800d084:	7bbb      	ldrb	r3, [r7, #14]
 800d086:	b29a      	uxth	r2, r3
 800d088:	7abb      	ldrb	r3, [r7, #10]
 800d08a:	b29b      	uxth	r3, r3
 800d08c:	4413      	add	r3, r2
 800d08e:	b29b      	uxth	r3, r3
 800d090:	3301      	adds	r3, #1
 800d092:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 1], BLACK, WHITE, 16, Font12);
 800d094:	4b30      	ldr	r3, [pc, #192]	; (800d158 <drawPopup+0x2c4>)
 800d096:	785b      	ldrb	r3, [r3, #1]
 800d098:	3b01      	subs	r3, #1
 800d09a:	011b      	lsls	r3, r3, #4
 800d09c:	4a2e      	ldr	r2, [pc, #184]	; (800d158 <drawPopup+0x2c4>)
 800d09e:	4413      	add	r3, r2
 800d0a0:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 800d0a2:	492e      	ldr	r1, [pc, #184]	; (800d15c <drawPopup+0x2c8>)
 800d0a4:	ab02      	add	r3, sp, #8
 800d0a6:	c903      	ldmia	r1, {r0, r1}
 800d0a8:	e883 0003 	stmia.w	r3, {r0, r1}
 800d0ac:	2310      	movs	r3, #16
 800d0ae:	9301      	str	r3, [sp, #4]
 800d0b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d0b4:	9300      	str	r3, [sp, #0]
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	4629      	mov	r1, r5
 800d0ba:	4620      	mov	r0, r4
 800d0bc:	f7ff fa30 	bl	800c520 <centeredString>
	else
	{
		centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
				popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 1], BLACK, LGRAY, 16, Font12);
	}
}
 800d0c0:	e06e      	b.n	800d1a0 <drawPopup+0x30c>
			centeredString( DisplayCenterWidth, MenuRectangleStartY + QuestionRectangleHeight + 1,
 800d0c2:	7afb      	ldrb	r3, [r7, #11]
 800d0c4:	b29c      	uxth	r4, r3
 800d0c6:	7bbb      	ldrb	r3, [r7, #14]
 800d0c8:	b29a      	uxth	r2, r3
 800d0ca:	7a7b      	ldrb	r3, [r7, #9]
 800d0cc:	b29b      	uxth	r3, r3
 800d0ce:	4413      	add	r3, r2
 800d0d0:	b29b      	uxth	r3, r3
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 2], BLACK, WHITE, 16, Font12);
 800d0d6:	4b20      	ldr	r3, [pc, #128]	; (800d158 <drawPopup+0x2c4>)
 800d0d8:	785b      	ldrb	r3, [r3, #1]
 800d0da:	3b02      	subs	r3, #2
 800d0dc:	011b      	lsls	r3, r3, #4
 800d0de:	4a1e      	ldr	r2, [pc, #120]	; (800d158 <drawPopup+0x2c4>)
 800d0e0:	4413      	add	r3, r2
 800d0e2:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + QuestionRectangleHeight + 1,
 800d0e4:	491d      	ldr	r1, [pc, #116]	; (800d15c <drawPopup+0x2c8>)
 800d0e6:	ab02      	add	r3, sp, #8
 800d0e8:	c903      	ldmia	r1, {r0, r1}
 800d0ea:	e883 0003 	stmia.w	r3, {r0, r1}
 800d0ee:	2310      	movs	r3, #16
 800d0f0:	9301      	str	r3, [sp, #4]
 800d0f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d0f6:	9300      	str	r3, [sp, #0]
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	4629      	mov	r1, r5
 800d0fc:	4620      	mov	r0, r4
 800d0fe:	f7ff fa0f 	bl	800c520 <centeredString>
			centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 800d102:	7afb      	ldrb	r3, [r7, #11]
 800d104:	b29c      	uxth	r4, r3
 800d106:	7bbb      	ldrb	r3, [r7, #14]
 800d108:	b29a      	uxth	r2, r3
 800d10a:	7abb      	ldrb	r3, [r7, #10]
 800d10c:	b29b      	uxth	r3, r3
 800d10e:	4413      	add	r3, r2
 800d110:	b29b      	uxth	r3, r3
 800d112:	3301      	adds	r3, #1
 800d114:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 1], BLACK, LGRAY, 16, Font12);
 800d116:	4b10      	ldr	r3, [pc, #64]	; (800d158 <drawPopup+0x2c4>)
 800d118:	785b      	ldrb	r3, [r3, #1]
 800d11a:	3b01      	subs	r3, #1
 800d11c:	011b      	lsls	r3, r3, #4
 800d11e:	4a0e      	ldr	r2, [pc, #56]	; (800d158 <drawPopup+0x2c4>)
 800d120:	4413      	add	r3, r2
 800d122:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 800d124:	490d      	ldr	r1, [pc, #52]	; (800d15c <drawPopup+0x2c8>)
 800d126:	ab02      	add	r3, sp, #8
 800d128:	c903      	ldmia	r1, {r0, r1}
 800d12a:	e883 0003 	stmia.w	r3, {r0, r1}
 800d12e:	2310      	movs	r3, #16
 800d130:	9301      	str	r3, [sp, #4]
 800d132:	f24c 6318 	movw	r3, #50712	; 0xc618
 800d136:	9300      	str	r3, [sp, #0]
 800d138:	2300      	movs	r3, #0
 800d13a:	4629      	mov	r1, r5
 800d13c:	4620      	mov	r0, r4
 800d13e:	f7ff f9ef 	bl	800c520 <centeredString>
}
 800d142:	e02d      	b.n	800d1a0 <drawPopup+0x30c>
 800d144:	24000054 	.word	0x24000054
 800d148:	2400a3b2 	.word	0x2400a3b2
 800d14c:	2400a3b0 	.word	0x2400a3b0
 800d150:	2400a3ad 	.word	0x2400a3ad
 800d154:	24000057 	.word	0x24000057
 800d158:	2400b660 	.word	0x2400b660
 800d15c:	24000018 	.word	0x24000018
		centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 800d160:	7afb      	ldrb	r3, [r7, #11]
 800d162:	b29c      	uxth	r4, r3
 800d164:	7bbb      	ldrb	r3, [r7, #14]
 800d166:	b29a      	uxth	r2, r3
 800d168:	7abb      	ldrb	r3, [r7, #10]
 800d16a:	b29b      	uxth	r3, r3
 800d16c:	4413      	add	r3, r2
 800d16e:	b29b      	uxth	r3, r3
 800d170:	3301      	adds	r3, #1
 800d172:	b29d      	uxth	r5, r3
				popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 1], BLACK, LGRAY, 16, Font12);
 800d174:	4b0c      	ldr	r3, [pc, #48]	; (800d1a8 <drawPopup+0x314>)
 800d176:	785b      	ldrb	r3, [r3, #1]
 800d178:	3b01      	subs	r3, #1
 800d17a:	011b      	lsls	r3, r3, #4
 800d17c:	4a0a      	ldr	r2, [pc, #40]	; (800d1a8 <drawPopup+0x314>)
 800d17e:	4413      	add	r3, r2
 800d180:	1c9a      	adds	r2, r3, #2
		centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 800d182:	490a      	ldr	r1, [pc, #40]	; (800d1ac <drawPopup+0x318>)
 800d184:	ab02      	add	r3, sp, #8
 800d186:	c903      	ldmia	r1, {r0, r1}
 800d188:	e883 0003 	stmia.w	r3, {r0, r1}
 800d18c:	2310      	movs	r3, #16
 800d18e:	9301      	str	r3, [sp, #4]
 800d190:	f24c 6318 	movw	r3, #50712	; 0xc618
 800d194:	9300      	str	r3, [sp, #0]
 800d196:	2300      	movs	r3, #0
 800d198:	4629      	mov	r1, r5
 800d19a:	4620      	mov	r0, r4
 800d19c:	f7ff f9c0 	bl	800c520 <centeredString>
}
 800d1a0:	bf00      	nop
 800d1a2:	3710      	adds	r7, #16
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bdb0      	pop	{r4, r5, r7, pc}
 800d1a8:	2400b660 	.word	0x2400b660
 800d1ac:	24000018 	.word	0x24000018

0800d1b0 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b082      	sub	sp, #8
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 800d1b8:	4b04      	ldr	r3, [pc, #16]	; (800d1cc <HAL_HSEM_FreeCallback+0x1c>)
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM7 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 800d1be:	2002      	movs	r0, #2
 800d1c0:	f7f5 ff50 	bl	8003064 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 800d1c4:	bf00      	nop
 800d1c6:	3708      	adds	r7, #8
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}
 800d1cc:	2400a3c0 	.word	0x2400a3c0

0800d1d0 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b082      	sub	sp, #8
 800d1d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 800d1d6:	4b0f      	ldr	r3, [pc, #60]	; (800d214 <MAILBOX_Init+0x44>)
 800d1d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d1dc:	4a0d      	ldr	r2, [pc, #52]	; (800d214 <MAILBOX_Init+0x44>)
 800d1de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d1e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d1e6:	4b0b      	ldr	r3, [pc, #44]	; (800d214 <MAILBOX_Init+0x44>)
 800d1e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d1ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d1f0:	607b      	str	r3, [r7, #4]
 800d1f2:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN PRE_MAILBOX_INIT_CM7 */

  /* USER CODE END PRE_MAILBOX_INIT_CM7 */

  /* Enable CM7 receive irq */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 0, 1);
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	2100      	movs	r1, #0
 800d1f8:	207d      	movs	r0, #125	; 0x7d
 800d1fa:	f7f5 f874 	bl	80022e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 800d1fe:	207d      	movs	r0, #125	; 0x7d
 800d200:	f7f5 f88b 	bl	800231a <HAL_NVIC_EnableIRQ>
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 800d204:	2002      	movs	r0, #2
 800d206:	f7f5 ff2d 	bl	8003064 <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 800d20a:	2300      	movs	r3, #0
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3708      	adds	r7, #8
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}
 800d214:	58024400 	.word	0x58024400

0800d218 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 800d220:	4b09      	ldr	r3, [pc, #36]	; (800d248 <MAILBOX_Poll+0x30>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	2b01      	cmp	r3, #1
 800d226:	d108      	bne.n	800d23a <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM7 */

    /* USER CODE END PRE_NEW_MSG_CM7 */

    rproc_virtio_notified(vdev, VRING0_ID);
 800d228:	2100      	movs	r1, #0
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f7fd fc8d 	bl	800ab4a <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 800d230:	4b05      	ldr	r3, [pc, #20]	; (800d248 <MAILBOX_Poll+0x30>)
 800d232:	2200      	movs	r2, #0
 800d234:	601a      	str	r2, [r3, #0]
    return 0;
 800d236:	2300      	movs	r3, #0
 800d238:	e001      	b.n	800d23e <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 800d23a:	f06f 030a 	mvn.w	r3, #10
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3708      	adds	r7, #8
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}
 800d246:	bf00      	nop
 800d248:	2400a3c0 	.word	0x2400a3c0

0800d24c <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b082      	sub	sp, #8
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
 800d254:	6039      	str	r1, [r7, #0]
#ifdef CORE_CM7

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM7 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM7 */
  HAL_HSEM_FastTake(HSEM_ID_0);
 800d256:	2000      	movs	r0, #0
 800d258:	f7f5 fed6 	bl	8003008 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_0,0);
 800d25c:	2100      	movs	r1, #0
 800d25e:	2000      	movs	r0, #0
 800d260:	f7f5 feec 	bl	800303c <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 800d264:	2300      	movs	r3, #0
}
 800d266:	4618      	mov	r0, r3
 800d268:	3708      	adds	r7, #8
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}

0800d26e <is_rpmsg_ept_ready>:
 *
 * Returns 1 if the rpmsg endpoint has both local addr and destination
 * addr set, 0 otherwise
 */
static inline unsigned int is_rpmsg_ept_ready(struct rpmsg_endpoint *ept)
{
 800d26e:	b480      	push	{r7}
 800d270:	b083      	sub	sp, #12
 800d272:	af00      	add	r7, sp, #0
 800d274:	6078      	str	r0, [r7, #4]
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d27a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d27e:	d006      	beq.n	800d28e <is_rpmsg_ept_ready+0x20>
		ept->addr != RPMSG_ADDR_ANY);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 800d284:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d288:	d001      	beq.n	800d28e <is_rpmsg_ept_ready+0x20>
 800d28a:	2301      	movs	r3, #1
 800d28c:	e000      	b.n	800d290 <is_rpmsg_ept_ready+0x22>
 800d28e:	2300      	movs	r3, #0
}
 800d290:	4618      	mov	r0, r3
 800d292:	370c      	adds	r7, #12
 800d294:	46bd      	mov	sp, r7
 800d296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29a:	4770      	bx	lr

0800d29c <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 800d29c:	b480      	push	{r7}
 800d29e:	b083      	sub	sp, #12
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
 800d2a4:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 800d2aa:	683a      	ldr	r2, [r7, #0]
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	d209      	bcs.n	800d2c4 <metal_device_io_region+0x28>
 800d2b0:	683a      	ldr	r2, [r7, #0]
 800d2b2:	4613      	mov	r3, r2
 800d2b4:	005b      	lsls	r3, r3, #1
 800d2b6:	4413      	add	r3, r2
 800d2b8:	011b      	lsls	r3, r3, #4
 800d2ba:	3308      	adds	r3, #8
 800d2bc:	687a      	ldr	r2, [r7, #4]
 800d2be:	4413      	add	r3, r2
 800d2c0:	3304      	adds	r3, #4
 800d2c2:	e000      	b.n	800d2c6 <metal_device_io_region+0x2a>
 800d2c4:	2300      	movs	r3, #0
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	370c      	adds	r7, #12
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d0:	4770      	bx	lr
	...

0800d2d4 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 800d2d4:	b590      	push	{r4, r7, lr}
 800d2d6:	b08d      	sub	sp, #52	; 0x34
 800d2d8:	af04      	add	r7, sp, #16
 800d2da:	6078      	str	r0, [r7, #4]
  int status = 0;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 800d2e4:	4a41      	ldr	r2, [pc, #260]	; (800d3ec <OPENAMP_shmem_init+0x118>)
 800d2e6:	f107 0310 	add.w	r3, r7, #16
 800d2ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d2ee:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 800d2fa:	f107 0310 	add.w	r3, r7, #16
 800d2fe:	4618      	mov	r0, r3
 800d300:	f7fc fed6 	bl	800a0b0 <metal_init>

  status = metal_register_generic_device(&shm_device);
 800d304:	483a      	ldr	r0, [pc, #232]	; (800d3f0 <OPENAMP_shmem_init+0x11c>)
 800d306:	f7fc fd7b 	bl	8009e00 <metal_register_generic_device>
 800d30a:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 800d30c:	69fb      	ldr	r3, [r7, #28]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d001      	beq.n	800d316 <OPENAMP_shmem_init+0x42>
    return status;
 800d312:	69fb      	ldr	r3, [r7, #28]
 800d314:	e066      	b.n	800d3e4 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 800d316:	f107 0318 	add.w	r3, r7, #24
 800d31a:	461a      	mov	r2, r3
 800d31c:	4935      	ldr	r1, [pc, #212]	; (800d3f4 <OPENAMP_shmem_init+0x120>)
 800d31e:	4836      	ldr	r0, [pc, #216]	; (800d3f8 <OPENAMP_shmem_init+0x124>)
 800d320:	f7fc fd30 	bl	8009d84 <metal_device_open>
 800d324:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 800d326:	69fb      	ldr	r3, [r7, #28]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d001      	beq.n	800d330 <OPENAMP_shmem_init+0x5c>
    return status;
 800d32c:	69fb      	ldr	r3, [r7, #28]
 800d32e:	e059      	b.n	800d3e4 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 800d330:	4a32      	ldr	r2, [pc, #200]	; (800d3fc <OPENAMP_shmem_init+0x128>)
 800d332:	4b33      	ldr	r3, [pc, #204]	; (800d400 <OPENAMP_shmem_init+0x12c>)
 800d334:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 800d336:	69bb      	ldr	r3, [r7, #24]
 800d338:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 800d33c:	4a31      	ldr	r2, [pc, #196]	; (800d404 <OPENAMP_shmem_init+0x130>)
 800d33e:	4b2f      	ldr	r3, [pc, #188]	; (800d3fc <OPENAMP_shmem_init+0x128>)
 800d340:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 800d342:	461a      	mov	r2, r3
 800d344:	2300      	movs	r3, #0
 800d346:	9302      	str	r3, [sp, #8]
 800d348:	2300      	movs	r3, #0
 800d34a:	9301      	str	r3, [sp, #4]
 800d34c:	f04f 33ff 	mov.w	r3, #4294967295
 800d350:	9300      	str	r3, [sp, #0]
 800d352:	4613      	mov	r3, r2
 800d354:	4a2a      	ldr	r2, [pc, #168]	; (800d400 <OPENAMP_shmem_init+0x12c>)
 800d356:	4929      	ldr	r1, [pc, #164]	; (800d3fc <OPENAMP_shmem_init+0x128>)
 800d358:	f7fc fef7 	bl	800a14a <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 800d35c:	69bb      	ldr	r3, [r7, #24]
 800d35e:	2100      	movs	r1, #0
 800d360:	4618      	mov	r0, r3
 800d362:	f7ff ff9b 	bl	800d29c <metal_device_io_region>
 800d366:	4603      	mov	r3, r0
 800d368:	4a27      	ldr	r2, [pc, #156]	; (800d408 <OPENAMP_shmem_init+0x134>)
 800d36a:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 800d36c:	4b26      	ldr	r3, [pc, #152]	; (800d408 <OPENAMP_shmem_init+0x134>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d102      	bne.n	800d37a <OPENAMP_shmem_init+0xa6>
    return -1;
 800d374:	f04f 33ff 	mov.w	r3, #4294967295
 800d378:	e034      	b.n	800d3e4 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 800d37a:	f107 0208 	add.w	r2, r7, #8
 800d37e:	f107 030c 	add.w	r3, r7, #12
 800d382:	4619      	mov	r1, r3
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f000 f91d 	bl	800d5c4 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	4a1f      	ldr	r2, [pc, #124]	; (800d40c <OPENAMP_shmem_init+0x138>)
 800d38e:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 800d390:	4b1e      	ldr	r3, [pc, #120]	; (800d40c <OPENAMP_shmem_init+0x138>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d102      	bne.n	800d39e <OPENAMP_shmem_init+0xca>
  {
    return -1;
 800d398:	f04f 33ff 	mov.w	r3, #4294967295
 800d39c:	e022      	b.n	800d3e4 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 800d39e:	69bb      	ldr	r3, [r7, #24]
 800d3a0:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800d3a4:	4b19      	ldr	r3, [pc, #100]	; (800d40c <OPENAMP_shmem_init+0x138>)
 800d3a6:	6819      	ldr	r1, [r3, #0]
 800d3a8:	4b18      	ldr	r3, [pc, #96]	; (800d40c <OPENAMP_shmem_init+0x138>)
 800d3aa:	681a      	ldr	r2, [r3, #0]
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	461c      	mov	r4, r3
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	9302      	str	r3, [sp, #8]
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	9301      	str	r3, [sp, #4]
 800d3b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d3bc:	9300      	str	r3, [sp, #0]
 800d3be:	4623      	mov	r3, r4
 800d3c0:	f7fc fec3 	bl	800a14a <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 800d3c4:	69bb      	ldr	r3, [r7, #24]
 800d3c6:	2101      	movs	r1, #1
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7ff ff67 	bl	800d29c <metal_device_io_region>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	4a0f      	ldr	r2, [pc, #60]	; (800d410 <OPENAMP_shmem_init+0x13c>)
 800d3d2:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 800d3d4:	4b0e      	ldr	r3, [pc, #56]	; (800d410 <OPENAMP_shmem_init+0x13c>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d102      	bne.n	800d3e2 <OPENAMP_shmem_init+0x10e>
    return -1;
 800d3dc:	f04f 33ff 	mov.w	r3, #4294967295
 800d3e0:	e000      	b.n	800d3e4 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 800d3e2:	2300      	movs	r3, #0
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3724      	adds	r7, #36	; 0x24
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd90      	pop	{r4, r7, pc}
 800d3ec:	08015420 	.word	0x08015420
 800d3f0:	2400a058 	.word	0x2400a058
 800d3f4:	0801540c 	.word	0x0801540c
 800d3f8:	08015418 	.word	0x08015418
 800d3fc:	38000400 	.word	0x38000400
 800d400:	2400a454 	.word	0x2400a454
 800d404:	38010000 	.word	0x38010000
 800d408:	2400a3c4 	.word	0x2400a3c4
 800d40c:	2400a3cc 	.word	0x2400a3cc
 800d410:	2400a3c8 	.word	0x2400a3c8

0800d414 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 800d414:	b590      	push	{r4, r7, lr}
 800d416:	b08b      	sub	sp, #44	; 0x2c
 800d418:	af04      	add	r7, sp, #16
 800d41a:	6078      	str	r0, [r7, #4]
 800d41c:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 800d41e:	2300      	movs	r3, #0
 800d420:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 800d422:	2300      	movs	r3, #0
 800d424:	613b      	str	r3, [r7, #16]
  int status = 0;
 800d426:	2300      	movs	r3, #0
 800d428:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 800d42a:	f7ff fed1 	bl	800d1d0 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f7ff ff50 	bl	800d2d4 <OPENAMP_shmem_init>
 800d434:	60f8      	str	r0, [r7, #12]
  if(status)
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d001      	beq.n	800d440 <MX_OPENAMP_Init+0x2c>
  {
    return status;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	e06a      	b.n	800d516 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	4b37      	ldr	r3, [pc, #220]	; (800d520 <MX_OPENAMP_Init+0x10c>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f103 0218 	add.w	r2, r3, #24
 800d44a:	4b36      	ldr	r3, [pc, #216]	; (800d524 <MX_OPENAMP_Init+0x110>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	2100      	movs	r1, #0
 800d450:	9102      	str	r1, [sp, #8]
 800d452:	4935      	ldr	r1, [pc, #212]	; (800d528 <MX_OPENAMP_Init+0x114>)
 800d454:	9101      	str	r1, [sp, #4]
 800d456:	2100      	movs	r1, #0
 800d458:	9100      	str	r1, [sp, #0]
 800d45a:	21ff      	movs	r1, #255	; 0xff
 800d45c:	f7fd fa96 	bl	800a98c <rproc_virtio_create_vdev>
 800d460:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d102      	bne.n	800d46e <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 800d468:	f04f 33ff 	mov.w	r3, #4294967295
 800d46c:	e053      	b.n	800d516 <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 800d46e:	6938      	ldr	r0, [r7, #16]
 800d470:	f7fd fba7 	bl	800abc2 <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 800d474:	4b2a      	ldr	r3, [pc, #168]	; (800d520 <MX_OPENAMP_Init+0x10c>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	3334      	adds	r3, #52	; 0x34
 800d47a:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800d484:	461c      	mov	r4, r3
 800d486:	4b29      	ldr	r3, [pc, #164]	; (800d52c <MX_OPENAMP_Init+0x118>)
 800d488:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 800d48a:	697a      	ldr	r2, [r7, #20]
 800d48c:	6892      	ldr	r2, [r2, #8]
 800d48e:	6979      	ldr	r1, [r7, #20]
 800d490:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800d492:	9102      	str	r1, [sp, #8]
 800d494:	9201      	str	r2, [sp, #4]
 800d496:	9300      	str	r3, [sp, #0]
 800d498:	4623      	mov	r3, r4
 800d49a:	4602      	mov	r2, r0
 800d49c:	2100      	movs	r1, #0
 800d49e:	6938      	ldr	r0, [r7, #16]
 800d4a0:	f7fd fb22 	bl	800aae8 <rproc_virtio_init_vring>
 800d4a4:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d001      	beq.n	800d4b0 <MX_OPENAMP_Init+0x9c>
  {
    return status;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	e032      	b.n	800d516 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 800d4b0:	4b1b      	ldr	r3, [pc, #108]	; (800d520 <MX_OPENAMP_Init+0x10c>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	3348      	adds	r3, #72	; 0x48
 800d4b6:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800d4c0:	461c      	mov	r4, r3
 800d4c2:	4b1a      	ldr	r3, [pc, #104]	; (800d52c <MX_OPENAMP_Init+0x118>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 800d4c6:	697a      	ldr	r2, [r7, #20]
 800d4c8:	6892      	ldr	r2, [r2, #8]
 800d4ca:	6979      	ldr	r1, [r7, #20]
 800d4cc:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800d4ce:	9102      	str	r1, [sp, #8]
 800d4d0:	9201      	str	r2, [sp, #4]
 800d4d2:	9300      	str	r3, [sp, #0]
 800d4d4:	4623      	mov	r3, r4
 800d4d6:	4602      	mov	r2, r0
 800d4d8:	2101      	movs	r1, #1
 800d4da:	6938      	ldr	r0, [r7, #16]
 800d4dc:	f7fd fb04 	bl	800aae8 <rproc_virtio_init_vring>
 800d4e0:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d001      	beq.n	800d4ec <MX_OPENAMP_Init+0xd8>
  {
    return status;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	e014      	b.n	800d516 <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 800d4ec:	4b10      	ldr	r3, [pc, #64]	; (800d530 <MX_OPENAMP_Init+0x11c>)
 800d4ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4f2:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 800d4f4:	4a0f      	ldr	r2, [pc, #60]	; (800d534 <MX_OPENAMP_Init+0x120>)
 800d4f6:	4b0e      	ldr	r3, [pc, #56]	; (800d530 <MX_OPENAMP_Init+0x11c>)
 800d4f8:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 800d4fa:	461a      	mov	r2, r3
 800d4fc:	480e      	ldr	r0, [pc, #56]	; (800d538 <MX_OPENAMP_Init+0x124>)
 800d4fe:	f7fd ffd1 	bl	800b4a4 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 800d502:	4b0a      	ldr	r3, [pc, #40]	; (800d52c <MX_OPENAMP_Init+0x118>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	4a0c      	ldr	r2, [pc, #48]	; (800d538 <MX_OPENAMP_Init+0x124>)
 800d508:	9200      	str	r2, [sp, #0]
 800d50a:	683a      	ldr	r2, [r7, #0]
 800d50c:	6939      	ldr	r1, [r7, #16]
 800d50e:	480b      	ldr	r0, [pc, #44]	; (800d53c <MX_OPENAMP_Init+0x128>)
 800d510:	f7fe fa38 	bl	800b984 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 800d514:	2300      	movs	r3, #0
}
 800d516:	4618      	mov	r0, r3
 800d518:	371c      	adds	r7, #28
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd90      	pop	{r4, r7, pc}
 800d51e:	bf00      	nop
 800d520:	2400a3cc 	.word	0x2400a3cc
 800d524:	2400a3c8 	.word	0x2400a3c8
 800d528:	0800d24d 	.word	0x0800d24d
 800d52c:	2400a3c4 	.word	0x2400a3c4
 800d530:	38000400 	.word	0x38000400
 800d534:	38010000 	.word	0x38010000
 800d538:	2400a3d0 	.word	0x2400a3d0
 800d53c:	2400a3dc 	.word	0x2400a3dc

0800d540 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b08a      	sub	sp, #40	; 0x28
 800d544:	af04      	add	r7, sp, #16
 800d546:	60f8      	str	r0, [r7, #12]
 800d548:	60b9      	str	r1, [r7, #8]
 800d54a:	607a      	str	r2, [r7, #4]
 800d54c:	603b      	str	r3, [r7, #0]
  int ret = 0;
 800d54e:	2300      	movs	r3, #0
 800d550:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 800d552:	6a3b      	ldr	r3, [r7, #32]
 800d554:	9302      	str	r3, [sp, #8]
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	9301      	str	r3, [sp, #4]
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	9300      	str	r3, [sp, #0]
 800d55e:	f04f 33ff 	mov.w	r3, #4294967295
 800d562:	68ba      	ldr	r2, [r7, #8]
 800d564:	4904      	ldr	r1, [pc, #16]	; (800d578 <OPENAMP_create_endpoint+0x38>)
 800d566:	68f8      	ldr	r0, [r7, #12]
 800d568:	f7fd fdb8 	bl	800b0dc <rpmsg_create_ept>
 800d56c:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 800d56e:	697b      	ldr	r3, [r7, #20]
}
 800d570:	4618      	mov	r0, r3
 800d572:	3718      	adds	r7, #24
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}
 800d578:	2400a3dc 	.word	0x2400a3dc

0800d57c <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 800d580:	4b03      	ldr	r3, [pc, #12]	; (800d590 <OPENAMP_check_for_message+0x14>)
 800d582:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d584:	4618      	mov	r0, r3
 800d586:	f7ff fe47 	bl	800d218 <MAILBOX_Poll>
}
 800d58a:	bf00      	nop
 800d58c:	bd80      	pop	{r7, pc}
 800d58e:	bf00      	nop
 800d590:	2400a3dc 	.word	0x2400a3dc

0800d594 <OPENAMP_Wait_EndPointready>:

void OPENAMP_Wait_EndPointready(struct rpmsg_endpoint *rp_ept)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b082      	sub	sp, #8
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EP_READY */

  /* USER CODE END EP_READY */

  while(!is_rpmsg_ept_ready(rp_ept))
 800d59c:	e004      	b.n	800d5a8 <OPENAMP_Wait_EndPointready+0x14>
  {
    /* USER CODE BEGIN 0 */

    /* USER CODE END 0 */
      MAILBOX_Poll(rvdev.vdev);
 800d59e:	4b08      	ldr	r3, [pc, #32]	; (800d5c0 <OPENAMP_Wait_EndPointready+0x2c>)
 800d5a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f7ff fe38 	bl	800d218 <MAILBOX_Poll>
  while(!is_rpmsg_ept_ready(rp_ept))
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f7ff fe60 	bl	800d26e <is_rpmsg_ept_ready>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d0f4      	beq.n	800d59e <OPENAMP_Wait_EndPointready+0xa>

    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */
  }
}
 800d5b4:	bf00      	nop
 800d5b6:	bf00      	nop
 800d5b8:	3708      	adds	r7, #8
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop
 800d5c0:	2400a3dc 	.word	0x2400a3dc

0800d5c4 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b084      	sub	sp, #16
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	60f8      	str	r0, [r7, #12]
 800d5cc:	60b9      	str	r1, [r7, #8]
 800d5ce:	607a      	str	r2, [r7, #4]

    /*
     * Currently the GCC linker doesn't initialize the resource_table global variable at startup
     * it is done here by the master application.
     */
	memset(&resource_table, '\0', sizeof(struct shared_resource_table));
 800d5d0:	228c      	movs	r2, #140	; 0x8c
 800d5d2:	2100      	movs	r1, #0
 800d5d4:	481e      	ldr	r0, [pc, #120]	; (800d650 <resource_table_init+0x8c>)
 800d5d6:	f002 febd 	bl	8010354 <memset>
	resource_table.num = 1;
 800d5da:	4b1d      	ldr	r3, [pc, #116]	; (800d650 <resource_table_init+0x8c>)
 800d5dc:	2201      	movs	r2, #1
 800d5de:	605a      	str	r2, [r3, #4]
	resource_table.version = 1;
 800d5e0:	4b1b      	ldr	r3, [pc, #108]	; (800d650 <resource_table_init+0x8c>)
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	601a      	str	r2, [r3, #0]
	resource_table.offset[0] = offsetof(struct shared_resource_table, vdev);
 800d5e6:	4b1a      	ldr	r3, [pc, #104]	; (800d650 <resource_table_init+0x8c>)
 800d5e8:	2218      	movs	r2, #24
 800d5ea:	611a      	str	r2, [r3, #16]

	resource_table.vring0.da = VRING_TX_ADDRESS;
 800d5ec:	4b19      	ldr	r3, [pc, #100]	; (800d654 <resource_table_init+0x90>)
 800d5ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d5f2:	4a17      	ldr	r2, [pc, #92]	; (800d650 <resource_table_init+0x8c>)
 800d5f4:	6353      	str	r3, [r2, #52]	; 0x34
	resource_table.vring0.align = VRING_ALIGNMENT;
 800d5f6:	4b16      	ldr	r3, [pc, #88]	; (800d650 <resource_table_init+0x8c>)
 800d5f8:	2204      	movs	r2, #4
 800d5fa:	639a      	str	r2, [r3, #56]	; 0x38
	resource_table.vring0.num = VRING_NUM_BUFFS;
 800d5fc:	4b14      	ldr	r3, [pc, #80]	; (800d650 <resource_table_init+0x8c>)
 800d5fe:	2204      	movs	r2, #4
 800d600:	63da      	str	r2, [r3, #60]	; 0x3c
	resource_table.vring0.notifyid = VRING0_ID;
 800d602:	4b13      	ldr	r3, [pc, #76]	; (800d650 <resource_table_init+0x8c>)
 800d604:	2200      	movs	r2, #0
 800d606:	641a      	str	r2, [r3, #64]	; 0x40

	resource_table.vring1.da = VRING_RX_ADDRESS;
 800d608:	4a12      	ldr	r2, [pc, #72]	; (800d654 <resource_table_init+0x90>)
 800d60a:	4b11      	ldr	r3, [pc, #68]	; (800d650 <resource_table_init+0x8c>)
 800d60c:	649a      	str	r2, [r3, #72]	; 0x48
	resource_table.vring1.align = VRING_ALIGNMENT;
 800d60e:	4b10      	ldr	r3, [pc, #64]	; (800d650 <resource_table_init+0x8c>)
 800d610:	2204      	movs	r2, #4
 800d612:	64da      	str	r2, [r3, #76]	; 0x4c
	resource_table.vring1.num = VRING_NUM_BUFFS;
 800d614:	4b0e      	ldr	r3, [pc, #56]	; (800d650 <resource_table_init+0x8c>)
 800d616:	2204      	movs	r2, #4
 800d618:	651a      	str	r2, [r3, #80]	; 0x50
	resource_table.vring1.notifyid = VRING1_ID;
 800d61a:	4b0d      	ldr	r3, [pc, #52]	; (800d650 <resource_table_init+0x8c>)
 800d61c:	2201      	movs	r2, #1
 800d61e:	655a      	str	r2, [r3, #84]	; 0x54

	resource_table.vdev.type = RSC_VDEV;
 800d620:	4b0b      	ldr	r3, [pc, #44]	; (800d650 <resource_table_init+0x8c>)
 800d622:	2203      	movs	r2, #3
 800d624:	619a      	str	r2, [r3, #24]
	resource_table.vdev.id = VIRTIO_ID_RPMSG_;
 800d626:	4b0a      	ldr	r3, [pc, #40]	; (800d650 <resource_table_init+0x8c>)
 800d628:	2207      	movs	r2, #7
 800d62a:	61da      	str	r2, [r3, #28]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
 800d62c:	4b08      	ldr	r3, [pc, #32]	; (800d650 <resource_table_init+0x8c>)
 800d62e:	2202      	movs	r2, #2
 800d630:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
 800d634:	4b06      	ldr	r3, [pc, #24]	; (800d650 <resource_table_init+0x8c>)
 800d636:	2201      	movs	r2, #1
 800d638:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	228c      	movs	r2, #140	; 0x8c
 800d63e:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	4a03      	ldr	r2, [pc, #12]	; (800d650 <resource_table_init+0x8c>)
 800d644:	601a      	str	r2, [r3, #0]
}
 800d646:	bf00      	nop
 800d648:	3710      	adds	r7, #16
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
 800d64e:	bf00      	nop
 800d650:	38000000 	.word	0x38000000
 800d654:	38000400 	.word	0x38000400

0800d658 <createEmptyFrame>:
uint8_t numberOfDisplayedSafeAirIcons = 0;

uint32_t LCDArraySize = 40960;

void createEmptyFrame(bool isMenuFrame)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b084      	sub	sp, #16
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	4603      	mov	r3, r0
 800d660:	71fb      	strb	r3, [r7, #7]
	if (!isMenuFrame)
 800d662:	79fb      	ldrb	r3, [r7, #7]
 800d664:	f083 0301 	eor.w	r3, r3, #1
 800d668:	b2db      	uxtb	r3, r3
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d024      	beq.n	800d6b8 <createEmptyFrame+0x60>
	{
		memset(nextFrameToDraw,0x00,LCDArraySize);
 800d66e:	4b19      	ldr	r3, [pc, #100]	; (800d6d4 <createEmptyFrame+0x7c>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	461a      	mov	r2, r3
 800d674:	2100      	movs	r1, #0
 800d676:	4818      	ldr	r0, [pc, #96]	; (800d6d8 <createEmptyFrame+0x80>)
 800d678:	f002 fe6c 	bl	8010354 <memset>

		for (int i = 0 ; i < (LCDArraySize - SCREEN_WIDTH * STATUSBAR_HEIGHT * 2) /2 ; i++)
 800d67c:	2300      	movs	r3, #0
 800d67e:	60fb      	str	r3, [r7, #12]
 800d680:	e011      	b.n	800d6a6 <createEmptyFrame+0x4e>
		{
			nextFrameToDraw[(i + SCREEN_WIDTH * STATUSBAR_HEIGHT) * 2] = BACKGROUND_HIGH_BYTE;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 800d688:	005b      	lsls	r3, r3, #1
 800d68a:	4a13      	ldr	r2, [pc, #76]	; (800d6d8 <createEmptyFrame+0x80>)
 800d68c:	21ff      	movs	r1, #255	; 0xff
 800d68e:	54d1      	strb	r1, [r2, r3]
			nextFrameToDraw[(i + SCREEN_WIDTH * STATUSBAR_HEIGHT) * 2 + 1] = BACKGROUND_LOW_BYTE;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 800d696:	005b      	lsls	r3, r3, #1
 800d698:	3301      	adds	r3, #1
 800d69a:	4a0f      	ldr	r2, [pc, #60]	; (800d6d8 <createEmptyFrame+0x80>)
 800d69c:	21ff      	movs	r1, #255	; 0xff
 800d69e:	54d1      	strb	r1, [r2, r3]
		for (int i = 0 ; i < (LCDArraySize - SCREEN_WIDTH * STATUSBAR_HEIGHT * 2) /2 ; i++)
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	60fb      	str	r3, [r7, #12]
 800d6a6:	4b0b      	ldr	r3, [pc, #44]	; (800d6d4 <createEmptyFrame+0x7c>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	f5a3 53c8 	sub.w	r3, r3, #6400	; 0x1900
 800d6ae:	085a      	lsrs	r2, r3, #1
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d8e5      	bhi.n	800d682 <createEmptyFrame+0x2a>
	}
	else if (isMenuFrame)
	{
		memset(nextFrameToDraw,0xFF,LCDArraySize);
	}
}
 800d6b6:	e009      	b.n	800d6cc <createEmptyFrame+0x74>
	else if (isMenuFrame)
 800d6b8:	79fb      	ldrb	r3, [r7, #7]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d006      	beq.n	800d6cc <createEmptyFrame+0x74>
		memset(nextFrameToDraw,0xFF,LCDArraySize);
 800d6be:	4b05      	ldr	r3, [pc, #20]	; (800d6d4 <createEmptyFrame+0x7c>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	461a      	mov	r2, r3
 800d6c4:	21ff      	movs	r1, #255	; 0xff
 800d6c6:	4804      	ldr	r0, [pc, #16]	; (800d6d8 <createEmptyFrame+0x80>)
 800d6c8:	f002 fe44 	bl	8010354 <memset>
}
 800d6cc:	bf00      	nop
 800d6ce:	3710      	adds	r7, #16
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd80      	pop	{r7, pc}
 800d6d4:	2400a0d4 	.word	0x2400a0d4
 800d6d8:	24000058 	.word	0x24000058

0800d6dc <displayNextFrame>:

void displayNextFrame(void)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	af00      	add	r7, sp, #0
//	LCD_1IN8_SetCursor(0, 0);
	if (HAL_GetTick() - lastFrameDisplayed > 30)
 800d6e0:	f7f4 fcd6 	bl	8002090 <HAL_GetTick>
 800d6e4:	4602      	mov	r2, r0
 800d6e6:	4b0a      	ldr	r3, [pc, #40]	; (800d710 <displayNextFrame+0x34>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	1ad3      	subs	r3, r2, r3
 800d6ec:	2b1e      	cmp	r3, #30
 800d6ee:	d90d      	bls.n	800d70c <displayNextFrame+0x30>
	{
		HAL_SPI_Transmit(&DEV_SPI, (uint8_t *)nextFrameToDraw, LCDArraySize, 1500);
 800d6f0:	4b08      	ldr	r3, [pc, #32]	; (800d714 <displayNextFrame+0x38>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	b29a      	uxth	r2, r3
 800d6f6:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800d6fa:	4907      	ldr	r1, [pc, #28]	; (800d718 <displayNextFrame+0x3c>)
 800d6fc:	4807      	ldr	r0, [pc, #28]	; (800d71c <displayNextFrame+0x40>)
 800d6fe:	f7f8 fbd1 	bl	8005ea4 <HAL_SPI_Transmit>
//		createEmptyFrame();
		lastFrameDisplayed = HAL_GetTick();
 800d702:	f7f4 fcc5 	bl	8002090 <HAL_GetTick>
 800d706:	4603      	mov	r3, r0
 800d708:	4a01      	ldr	r2, [pc, #4]	; (800d710 <displayNextFrame+0x34>)
 800d70a:	6013      	str	r3, [r2, #0]
	}
}
 800d70c:	bf00      	nop
 800d70e:	bd80      	pop	{r7, pc}
 800d710:	2400a3b4 	.word	0x2400a3b4
 800d714:	2400a0d4 	.word	0x2400a0d4
 800d718:	24000058 	.word	0x24000058
 800d71c:	2400a5cc 	.word	0x2400a5cc

0800d720 <updateUint16Item>:
		}
	}
}

void updateUint16Item(MENUDRAWType howToDraw)
{
 800d720:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d722:	b08f      	sub	sp, #60	; 0x3c
 800d724:	af04      	add	r7, sp, #16
 800d726:	4603      	mov	r3, r0
 800d728:	71fb      	strb	r3, [r7, #7]

	uint8_t MenuRectangleStartX = 0;
 800d72a:	2300      	movs	r3, #0
 800d72c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t MenuRectangleStartY = 0;
 800d730:	2300      	movs	r3, #0
 800d732:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MenuRectangleHeight = 0;
 800d736:	2300      	movs	r3, #0
 800d738:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MenuRectangleWidth = 0;
 800d73c:	2300      	movs	r3, #0
 800d73e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t DisplayCenterWidth = 0;
 800d742:	2300      	movs	r3, #0
 800d744:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (isPortrait)
 800d748:	4b0b      	ldr	r3, [pc, #44]	; (800d778 <updateUint16Item+0x58>)
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d00e      	beq.n	800d76e <updateUint16Item+0x4e>
	{
		MenuRectangleStartX = VerticalMenuRectangleStartX;
 800d750:	2302      	movs	r3, #2
 800d752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		MenuRectangleStartY = VerticalMenuRectangleStartY;
 800d756:	230c      	movs	r3, #12
 800d758:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		MenuRectangleHeight = VerticalMenuRectangleHeight;
 800d75c:	230e      	movs	r3, #14
 800d75e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		MenuRectangleWidth = VerticalMenuRectangleWidth;
 800d762:	237c      	movs	r3, #124	; 0x7c
 800d764:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		DisplayCenterWidth = VerticalDisplayCenterWidth;
 800d768:	2340      	movs	r3, #64	; 0x40
 800d76a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
//		MenuRectangleHeight = HorizontalMenuRectangleHeight;
//		MenuRectangleWidth = HorizontalMenuRectangleWidth;
//		DisplayCenterWidth = HorizontalDisplayCenterWidth;
	}

	for (int i = 0; i < uint16Item.numberOfItemsInPage ; i++)
 800d76e:	2300      	movs	r3, #0
 800d770:	61fb      	str	r3, [r7, #28]
 800d772:	f001 baf3 	b.w	800ed5c <updateUint16Item+0x163c>
 800d776:	bf00      	nop
 800d778:	24000054 	.word	0x24000054
	{
		if  ( (i < 2) && (howToDraw == FULL) )
 800d77c:	69fb      	ldr	r3, [r7, #28]
 800d77e:	2b01      	cmp	r3, #1
 800d780:	dc58      	bgt.n	800d834 <updateUint16Item+0x114>
 800d782:	79fb      	ldrb	r3, [r7, #7]
 800d784:	2b02      	cmp	r3, #2
 800d786:	d155      	bne.n	800d834 <updateUint16Item+0x114>
		{
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800d788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d78c:	b298      	uxth	r0, r3
 800d78e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d792:	b29a      	uxth	r2, r3
 800d794:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d798:	b299      	uxth	r1, r3
 800d79a:	69fb      	ldr	r3, [r7, #28]
 800d79c:	b29b      	uxth	r3, r3
 800d79e:	fb11 f303 	smulbb	r3, r1, r3
 800d7a2:	b29b      	uxth	r3, r3
 800d7a4:	4413      	add	r3, r2
 800d7a6:	b29c      	uxth	r4, r3
 800d7a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7ac:	b29a      	uxth	r2, r3
 800d7ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d7b2:	b29b      	uxth	r3, r3
 800d7b4:	4413      	add	r3, r2
 800d7b6:	b29d      	uxth	r5, r3
 800d7b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d7bc:	b29a      	uxth	r2, r3
 800d7be:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d7c2:	b299      	uxth	r1, r3
					MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 800d7c4:	69fb      	ldr	r3, [r7, #28]
 800d7c6:	3301      	adds	r3, #1
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800d7c8:	b29b      	uxth	r3, r3
 800d7ca:	fb11 f303 	smulbb	r3, r1, r3
 800d7ce:	b29b      	uxth	r3, r3
 800d7d0:	4413      	add	r3, r2
 800d7d2:	b29b      	uxth	r3, r3
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	9202      	str	r2, [sp, #8]
 800d7d8:	2201      	movs	r2, #1
 800d7da:	9201      	str	r2, [sp, #4]
 800d7dc:	2200      	movs	r2, #0
 800d7de:	9200      	str	r2, [sp, #0]
 800d7e0:	462a      	mov	r2, r5
 800d7e2:	4621      	mov	r1, r4
 800d7e4:	f7fb faf2 	bl	8008dcc <Paint_DrawRectangle>
					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800d7e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d7ec:	b29c      	uxth	r4, r3
 800d7ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d7f2:	b29a      	uxth	r2, r3
 800d7f4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d7f8:	b299      	uxth	r1, r3
 800d7fa:	69fb      	ldr	r3, [r7, #28]
 800d7fc:	b29b      	uxth	r3, r3
 800d7fe:	fb11 f303 	smulbb	r3, r1, r3
 800d802:	b29b      	uxth	r3, r3
 800d804:	4413      	add	r3, r2
 800d806:	b29b      	uxth	r3, r3
 800d808:	3301      	adds	r3, #1
 800d80a:	b29d      	uxth	r5, r3
					uint16Item.itemsArray[i], BLACK, WHITE, 16, Font12);
 800d80c:	69fb      	ldr	r3, [r7, #28]
 800d80e:	3301      	adds	r3, #1
 800d810:	011b      	lsls	r3, r3, #4
 800d812:	4a9f      	ldr	r2, [pc, #636]	; (800da90 <updateUint16Item+0x370>)
 800d814:	441a      	add	r2, r3
			centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800d816:	499f      	ldr	r1, [pc, #636]	; (800da94 <updateUint16Item+0x374>)
 800d818:	ab02      	add	r3, sp, #8
 800d81a:	c903      	ldmia	r1, {r0, r1}
 800d81c:	e883 0003 	stmia.w	r3, {r0, r1}
 800d820:	2310      	movs	r3, #16
 800d822:	9301      	str	r3, [sp, #4]
 800d824:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d828:	9300      	str	r3, [sp, #0]
 800d82a:	2300      	movs	r3, #0
 800d82c:	4629      	mov	r1, r5
 800d82e:	4620      	mov	r0, r4
 800d830:	f7fe fe76 	bl	800c520 <centeredString>
		}
		if ( (i >= 2) && (i < uint16Item.numberOfItemsInPage - 2) )
 800d834:	69fb      	ldr	r3, [r7, #28]
 800d836:	2b01      	cmp	r3, #1
 800d838:	f340 87ed 	ble.w	800e816 <updateUint16Item+0x10f6>
 800d83c:	4b94      	ldr	r3, [pc, #592]	; (800da90 <updateUint16Item+0x370>)
 800d83e:	7bdb      	ldrb	r3, [r3, #15]
 800d840:	3b02      	subs	r3, #2
 800d842:	69fa      	ldr	r2, [r7, #28]
 800d844:	429a      	cmp	r2, r3
 800d846:	f280 87e6 	bge.w	800e816 <updateUint16Item+0x10f6>
		{
			if (howToDraw == FULL)
 800d84a:	79fb      	ldrb	r3, [r7, #7]
 800d84c:	2b02      	cmp	r3, #2
 800d84e:	d168      	bne.n	800d922 <updateUint16Item+0x202>
			{
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800d850:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d854:	b298      	uxth	r0, r3
 800d856:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d85a:	b29a      	uxth	r2, r3
 800d85c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d860:	b299      	uxth	r1, r3
 800d862:	69fb      	ldr	r3, [r7, #28]
 800d864:	b29b      	uxth	r3, r3
 800d866:	fb11 f303 	smulbb	r3, r1, r3
 800d86a:	b29b      	uxth	r3, r3
 800d86c:	4413      	add	r3, r2
 800d86e:	b29c      	uxth	r4, r3
 800d870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d874:	b29a      	uxth	r2, r3
 800d876:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d87a:	085b      	lsrs	r3, r3, #1
 800d87c:	b2db      	uxtb	r3, r3
 800d87e:	b29b      	uxth	r3, r3
 800d880:	4413      	add	r3, r2
 800d882:	b29d      	uxth	r5, r3
 800d884:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d888:	b29a      	uxth	r2, r3
 800d88a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d88e:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 800d890:	69fb      	ldr	r3, [r7, #28]
 800d892:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800d894:	b29b      	uxth	r3, r3
 800d896:	fb11 f303 	smulbb	r3, r1, r3
 800d89a:	b29b      	uxth	r3, r3
 800d89c:	4413      	add	r3, r2
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	9202      	str	r2, [sp, #8]
 800d8a4:	2201      	movs	r2, #1
 800d8a6:	9201      	str	r2, [sp, #4]
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	9200      	str	r2, [sp, #0]
 800d8ac:	462a      	mov	r2, r5
 800d8ae:	4621      	mov	r1, r4
 800d8b0:	f7fb fa8c 	bl	8008dcc <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
				Paint_DrawRectangle( MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * i,
 800d8b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8b8:	b29a      	uxth	r2, r3
 800d8ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d8be:	085b      	lsrs	r3, r3, #1
 800d8c0:	b2db      	uxtb	r3, r3
 800d8c2:	b29b      	uxth	r3, r3
 800d8c4:	4413      	add	r3, r2
 800d8c6:	b298      	uxth	r0, r3
 800d8c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d8cc:	b29a      	uxth	r2, r3
 800d8ce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d8d2:	b299      	uxth	r1, r3
 800d8d4:	69fb      	ldr	r3, [r7, #28]
 800d8d6:	b29b      	uxth	r3, r3
 800d8d8:	fb11 f303 	smulbb	r3, r1, r3
 800d8dc:	b29b      	uxth	r3, r3
 800d8de:	4413      	add	r3, r2
 800d8e0:	b29c      	uxth	r4, r3
 800d8e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8e6:	b29a      	uxth	r2, r3
 800d8e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d8ec:	b29b      	uxth	r3, r3
 800d8ee:	4413      	add	r3, r2
 800d8f0:	b29d      	uxth	r5, r3
 800d8f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d8f6:	b29a      	uxth	r2, r3
 800d8f8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d8fc:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 800d8fe:	69fb      	ldr	r3, [r7, #28]
 800d900:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * i,
 800d902:	b29b      	uxth	r3, r3
 800d904:	fb11 f303 	smulbb	r3, r1, r3
 800d908:	b29b      	uxth	r3, r3
 800d90a:	4413      	add	r3, r2
 800d90c:	b29b      	uxth	r3, r3
 800d90e:	2200      	movs	r2, #0
 800d910:	9202      	str	r2, [sp, #8]
 800d912:	2201      	movs	r2, #1
 800d914:	9201      	str	r2, [sp, #4]
 800d916:	2200      	movs	r2, #0
 800d918:	9200      	str	r2, [sp, #0]
 800d91a:	462a      	mov	r2, r5
 800d91c:	4621      	mov	r1, r4
 800d91e:	f7fb fa55 	bl	8008dcc <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			}

			if ( (i == 2) )
 800d922:	69fb      	ldr	r3, [r7, #28]
 800d924:	2b02      	cmp	r3, #2
 800d926:	f040 83b6 	bne.w	800e096 <updateUint16Item+0x976>
			{
				char localString[8] = "";
 800d92a:	2300      	movs	r3, #0
 800d92c:	617b      	str	r3, [r7, #20]
 800d92e:	2300      	movs	r3, #0
 800d930:	61bb      	str	r3, [r7, #24]
				sprintf(localString,"%04d",uint16Item.startValue);
 800d932:	4b57      	ldr	r3, [pc, #348]	; (800da90 <updateUint16Item+0x370>)
 800d934:	891b      	ldrh	r3, [r3, #8]
 800d936:	461a      	mov	r2, r3
 800d938:	f107 0314 	add.w	r3, r7, #20
 800d93c:	4956      	ldr	r1, [pc, #344]	; (800da98 <updateUint16Item+0x378>)
 800d93e:	4618      	mov	r0, r3
 800d940:	f003 fe34 	bl	80115ac <siprintf>
				if (currentCursorPosition.cursorPosition == 0x02)
 800d944:	4b55      	ldr	r3, [pc, #340]	; (800da9c <updateUint16Item+0x37c>)
 800d946:	781b      	ldrb	r3, [r3, #0]
 800d948:	2b02      	cmp	r3, #2
 800d94a:	f040 81cd 	bne.w	800dce8 <updateUint16Item+0x5c8>
				{
					if ( (howToDraw == LEFT) || (howToDraw == FULL) )
 800d94e:	79fb      	ldrb	r3, [r7, #7]
 800d950:	2b03      	cmp	r3, #3
 800d952:	d003      	beq.n	800d95c <updateUint16Item+0x23c>
 800d954:	79fb      	ldrb	r3, [r7, #7]
 800d956:	2b02      	cmp	r3, #2
 800d958:	f040 80a2 	bne.w	800daa0 <updateUint16Item+0x380>
					{
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800d95c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d960:	b29b      	uxth	r3, r3
 800d962:	3301      	adds	r3, #1
 800d964:	b298      	uxth	r0, r3
 800d966:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d96a:	b29a      	uxth	r2, r3
 800d96c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d970:	b299      	uxth	r1, r3
 800d972:	69fb      	ldr	r3, [r7, #28]
 800d974:	b29b      	uxth	r3, r3
 800d976:	fb11 f303 	smulbb	r3, r1, r3
 800d97a:	b29b      	uxth	r3, r3
 800d97c:	4413      	add	r3, r2
 800d97e:	b29b      	uxth	r3, r3
 800d980:	3301      	adds	r3, #1
 800d982:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 800d984:	69fb      	ldr	r3, [r7, #28]
 800d986:	3301      	adds	r3, #1
 800d988:	011b      	lsls	r3, r3, #4
 800d98a:	4a41      	ldr	r2, [pc, #260]	; (800da90 <updateUint16Item+0x370>)
 800d98c:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800d98e:	2300      	movs	r3, #0
 800d990:	9301      	str	r3, [sp, #4]
 800d992:	f24c 6318 	movw	r3, #50712	; 0xc618
 800d996:	9300      	str	r3, [sp, #0]
 800d998:	4b3e      	ldr	r3, [pc, #248]	; (800da94 <updateUint16Item+0x374>)
 800d99a:	f7fb fcbb 	bl	8009314 <Paint_DrawString_EN>
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800d99e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9a2:	b29a      	uxth	r2, r3
 800d9a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d9a8:	085b      	lsrs	r3, r3, #1
 800d9aa:	b2db      	uxtb	r3, r3
 800d9ac:	b29b      	uxth	r3, r3
 800d9ae:	4413      	add	r3, r2
 800d9b0:	b29b      	uxth	r3, r3
 800d9b2:	3301      	adds	r3, #1
 800d9b4:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800d9b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d9ba:	b29a      	uxth	r2, r3
 800d9bc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d9c0:	b299      	uxth	r1, r3
 800d9c2:	69fb      	ldr	r3, [r7, #28]
 800d9c4:	b29b      	uxth	r3, r3
 800d9c6:	fb11 f303 	smulbb	r3, r1, r3
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	4413      	add	r3, r2
 800d9ce:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800d9d0:	3301      	adds	r3, #1
 800d9d2:	b29e      	uxth	r6, r3
								MenuRectangleStartX + MenuRectangleWidth / 2 + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 800d9d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9d8:	b29a      	uxth	r2, r3
 800d9da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d9de:	085b      	lsrs	r3, r3, #1
 800d9e0:	b2db      	uxtb	r3, r3
 800d9e2:	b29b      	uxth	r3, r3
 800d9e4:	4413      	add	r3, r2
 800d9e6:	b29c      	uxth	r4, r3
 800d9e8:	69fb      	ldr	r3, [r7, #28]
 800d9ea:	3301      	adds	r3, #1
 800d9ec:	011b      	lsls	r3, r3, #4
 800d9ee:	4a28      	ldr	r2, [pc, #160]	; (800da90 <updateUint16Item+0x370>)
 800d9f0:	4413      	add	r3, r2
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f7f2 fc7e 	bl	80002f4 <strlen>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	b29a      	uxth	r2, r3
 800d9fc:	4b25      	ldr	r3, [pc, #148]	; (800da94 <updateUint16Item+0x374>)
 800d9fe:	889b      	ldrh	r3, [r3, #4]
 800da00:	fb12 f303 	smulbb	r3, r2, r3
 800da04:	b29b      	uxth	r3, r3
 800da06:	4423      	add	r3, r4
 800da08:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800da0a:	3301      	adds	r3, #1
 800da0c:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800da0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da12:	b29a      	uxth	r2, r3
 800da14:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800da18:	b299      	uxth	r1, r3
 800da1a:	69fb      	ldr	r3, [r7, #28]
 800da1c:	b29b      	uxth	r3, r3
 800da1e:	fb11 f303 	smulbb	r3, r1, r3
 800da22:	b29b      	uxth	r3, r3
 800da24:	4413      	add	r3, r2
 800da26:	b29a      	uxth	r2, r3
 800da28:	4b1a      	ldr	r3, [pc, #104]	; (800da94 <updateUint16Item+0x374>)
 800da2a:	88db      	ldrh	r3, [r3, #6]
 800da2c:	4413      	add	r3, r2
 800da2e:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800da30:	3301      	adds	r3, #1
 800da32:	b29b      	uxth	r3, r3
 800da34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da38:	9200      	str	r2, [sp, #0]
 800da3a:	4602      	mov	r2, r0
 800da3c:	4631      	mov	r1, r6
 800da3e:	4628      	mov	r0, r5
 800da40:	f7fb f84a 	bl	8008ad8 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800da44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da48:	b29a      	uxth	r2, r3
 800da4a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800da4e:	085b      	lsrs	r3, r3, #1
 800da50:	b2db      	uxtb	r3, r3
 800da52:	b29b      	uxth	r3, r3
 800da54:	4413      	add	r3, r2
 800da56:	b29b      	uxth	r3, r3
 800da58:	3301      	adds	r3, #1
 800da5a:	b298      	uxth	r0, r3
 800da5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da60:	b29a      	uxth	r2, r3
 800da62:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800da66:	b299      	uxth	r1, r3
 800da68:	69fb      	ldr	r3, [r7, #28]
 800da6a:	b29b      	uxth	r3, r3
 800da6c:	fb11 f303 	smulbb	r3, r1, r3
 800da70:	b29b      	uxth	r3, r3
 800da72:	4413      	add	r3, r2
 800da74:	b29b      	uxth	r3, r3
 800da76:	3301      	adds	r3, #1
 800da78:	b299      	uxth	r1, r3
 800da7a:	f107 0214 	add.w	r2, r7, #20
 800da7e:	2300      	movs	r3, #0
 800da80:	9301      	str	r3, [sp, #4]
 800da82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800da86:	9300      	str	r3, [sp, #0]
 800da88:	4b02      	ldr	r3, [pc, #8]	; (800da94 <updateUint16Item+0x374>)
 800da8a:	f7fb fc43 	bl	8009314 <Paint_DrawString_EN>
 800da8e:	e302      	b.n	800e096 <updateUint16Item+0x976>
 800da90:	2400ae1c 	.word	0x2400ae1c
 800da94:	24000018 	.word	0x24000018
 800da98:	08015434 	.word	0x08015434
 800da9c:	2400a5bc 	.word	0x2400a5bc
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == DOWN)
 800daa0:	79fb      	ldrb	r3, [r7, #7]
 800daa2:	2b01      	cmp	r3, #1
 800daa4:	f040 808c 	bne.w	800dbc0 <updateUint16Item+0x4a0>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800daa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800daac:	b29b      	uxth	r3, r3
 800daae:	3301      	adds	r3, #1
 800dab0:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800dab2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dab6:	b29a      	uxth	r2, r3
 800dab8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800dabc:	b299      	uxth	r1, r3
 800dabe:	69fb      	ldr	r3, [r7, #28]
 800dac0:	b29b      	uxth	r3, r3
 800dac2:	fb11 f303 	smulbb	r3, r1, r3
 800dac6:	b29b      	uxth	r3, r3
 800dac8:	4413      	add	r3, r2
 800daca:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800dacc:	3301      	adds	r3, #1
 800dace:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 800dad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dad4:	b29c      	uxth	r4, r3
 800dad6:	69fb      	ldr	r3, [r7, #28]
 800dad8:	3301      	adds	r3, #1
 800dada:	011b      	lsls	r3, r3, #4
 800dadc:	4a80      	ldr	r2, [pc, #512]	; (800dce0 <updateUint16Item+0x5c0>)
 800dade:	4413      	add	r3, r2
 800dae0:	4618      	mov	r0, r3
 800dae2:	f7f2 fc07 	bl	80002f4 <strlen>
 800dae6:	4603      	mov	r3, r0
 800dae8:	b29a      	uxth	r2, r3
 800daea:	4b7e      	ldr	r3, [pc, #504]	; (800dce4 <updateUint16Item+0x5c4>)
 800daec:	889b      	ldrh	r3, [r3, #4]
 800daee:	fb12 f303 	smulbb	r3, r2, r3
 800daf2:	b29b      	uxth	r3, r3
 800daf4:	4423      	add	r3, r4
 800daf6:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800daf8:	3301      	adds	r3, #1
 800dafa:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800dafc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db00:	b29a      	uxth	r2, r3
 800db02:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800db06:	b299      	uxth	r1, r3
 800db08:	69fb      	ldr	r3, [r7, #28]
 800db0a:	b29b      	uxth	r3, r3
 800db0c:	fb11 f303 	smulbb	r3, r1, r3
 800db10:	b29b      	uxth	r3, r3
 800db12:	4413      	add	r3, r2
 800db14:	b29a      	uxth	r2, r3
 800db16:	4b73      	ldr	r3, [pc, #460]	; (800dce4 <updateUint16Item+0x5c4>)
 800db18:	88db      	ldrh	r3, [r3, #6]
 800db1a:	4413      	add	r3, r2
 800db1c:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800db1e:	3301      	adds	r3, #1
 800db20:	b29b      	uxth	r3, r3
 800db22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800db26:	9200      	str	r2, [sp, #0]
 800db28:	4602      	mov	r2, r0
 800db2a:	4631      	mov	r1, r6
 800db2c:	4628      	mov	r0, r5
 800db2e:	f7fa ffd3 	bl	8008ad8 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800db32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db36:	b29b      	uxth	r3, r3
 800db38:	3301      	adds	r3, #1
 800db3a:	b298      	uxth	r0, r3
 800db3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db40:	b29a      	uxth	r2, r3
 800db42:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800db46:	b299      	uxth	r1, r3
 800db48:	69fb      	ldr	r3, [r7, #28]
 800db4a:	b29b      	uxth	r3, r3
 800db4c:	fb11 f303 	smulbb	r3, r1, r3
 800db50:	b29b      	uxth	r3, r3
 800db52:	4413      	add	r3, r2
 800db54:	b29b      	uxth	r3, r3
 800db56:	3301      	adds	r3, #1
 800db58:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 800db5a:	69fb      	ldr	r3, [r7, #28]
 800db5c:	3301      	adds	r3, #1
 800db5e:	011b      	lsls	r3, r3, #4
 800db60:	4a5f      	ldr	r2, [pc, #380]	; (800dce0 <updateUint16Item+0x5c0>)
 800db62:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800db64:	2300      	movs	r3, #0
 800db66:	9301      	str	r3, [sp, #4]
 800db68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800db6c:	9300      	str	r3, [sp, #0]
 800db6e:	4b5d      	ldr	r3, [pc, #372]	; (800dce4 <updateUint16Item+0x5c4>)
 800db70:	f7fb fbd0 	bl	8009314 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800db74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db78:	b29a      	uxth	r2, r3
 800db7a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800db7e:	085b      	lsrs	r3, r3, #1
 800db80:	b2db      	uxtb	r3, r3
 800db82:	b29b      	uxth	r3, r3
 800db84:	4413      	add	r3, r2
 800db86:	b29b      	uxth	r3, r3
 800db88:	3301      	adds	r3, #1
 800db8a:	b298      	uxth	r0, r3
 800db8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db90:	b29a      	uxth	r2, r3
 800db92:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800db96:	b299      	uxth	r1, r3
 800db98:	69fb      	ldr	r3, [r7, #28]
 800db9a:	b29b      	uxth	r3, r3
 800db9c:	fb11 f303 	smulbb	r3, r1, r3
 800dba0:	b29b      	uxth	r3, r3
 800dba2:	4413      	add	r3, r2
 800dba4:	b29b      	uxth	r3, r3
 800dba6:	3301      	adds	r3, #1
 800dba8:	b299      	uxth	r1, r3
 800dbaa:	f107 0214 	add.w	r2, r7, #20
 800dbae:	2300      	movs	r3, #0
 800dbb0:	9301      	str	r3, [sp, #4]
 800dbb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dbb6:	9300      	str	r3, [sp, #0]
 800dbb8:	4b4a      	ldr	r3, [pc, #296]	; (800dce4 <updateUint16Item+0x5c4>)
 800dbba:	f7fb fbab 	bl	8009314 <Paint_DrawString_EN>
 800dbbe:	e26a      	b.n	800e096 <updateUint16Item+0x976>
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == UP)
 800dbc0:	79fb      	ldrb	r3, [r7, #7]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	f040 8267 	bne.w	800e096 <updateUint16Item+0x976>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800dbc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbcc:	b29b      	uxth	r3, r3
 800dbce:	3301      	adds	r3, #1
 800dbd0:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800dbd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dbd6:	b29a      	uxth	r2, r3
 800dbd8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800dbdc:	b299      	uxth	r1, r3
 800dbde:	69fb      	ldr	r3, [r7, #28]
 800dbe0:	b29b      	uxth	r3, r3
 800dbe2:	fb11 f303 	smulbb	r3, r1, r3
 800dbe6:	b29b      	uxth	r3, r3
 800dbe8:	4413      	add	r3, r2
 800dbea:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800dbec:	3301      	adds	r3, #1
 800dbee:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 800dbf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbf4:	b29c      	uxth	r4, r3
 800dbf6:	69fb      	ldr	r3, [r7, #28]
 800dbf8:	3301      	adds	r3, #1
 800dbfa:	011b      	lsls	r3, r3, #4
 800dbfc:	4a38      	ldr	r2, [pc, #224]	; (800dce0 <updateUint16Item+0x5c0>)
 800dbfe:	4413      	add	r3, r2
 800dc00:	4618      	mov	r0, r3
 800dc02:	f7f2 fb77 	bl	80002f4 <strlen>
 800dc06:	4603      	mov	r3, r0
 800dc08:	b29a      	uxth	r2, r3
 800dc0a:	4b36      	ldr	r3, [pc, #216]	; (800dce4 <updateUint16Item+0x5c4>)
 800dc0c:	889b      	ldrh	r3, [r3, #4]
 800dc0e:	fb12 f303 	smulbb	r3, r2, r3
 800dc12:	b29b      	uxth	r3, r3
 800dc14:	4423      	add	r3, r4
 800dc16:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800dc18:	3301      	adds	r3, #1
 800dc1a:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800dc1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dc20:	b29a      	uxth	r2, r3
 800dc22:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800dc26:	b299      	uxth	r1, r3
 800dc28:	69fb      	ldr	r3, [r7, #28]
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	fb11 f303 	smulbb	r3, r1, r3
 800dc30:	b29b      	uxth	r3, r3
 800dc32:	4413      	add	r3, r2
 800dc34:	b29a      	uxth	r2, r3
 800dc36:	4b2b      	ldr	r3, [pc, #172]	; (800dce4 <updateUint16Item+0x5c4>)
 800dc38:	88db      	ldrh	r3, [r3, #6]
 800dc3a:	4413      	add	r3, r2
 800dc3c:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800dc3e:	3301      	adds	r3, #1
 800dc40:	b29b      	uxth	r3, r3
 800dc42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc46:	9200      	str	r2, [sp, #0]
 800dc48:	4602      	mov	r2, r0
 800dc4a:	4631      	mov	r1, r6
 800dc4c:	4628      	mov	r0, r5
 800dc4e:	f7fa ff43 	bl	8008ad8 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800dc52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc56:	b29b      	uxth	r3, r3
 800dc58:	3301      	adds	r3, #1
 800dc5a:	b298      	uxth	r0, r3
 800dc5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dc60:	b29a      	uxth	r2, r3
 800dc62:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800dc66:	b299      	uxth	r1, r3
 800dc68:	69fb      	ldr	r3, [r7, #28]
 800dc6a:	b29b      	uxth	r3, r3
 800dc6c:	fb11 f303 	smulbb	r3, r1, r3
 800dc70:	b29b      	uxth	r3, r3
 800dc72:	4413      	add	r3, r2
 800dc74:	b29b      	uxth	r3, r3
 800dc76:	3301      	adds	r3, #1
 800dc78:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 800dc7a:	69fb      	ldr	r3, [r7, #28]
 800dc7c:	3301      	adds	r3, #1
 800dc7e:	011b      	lsls	r3, r3, #4
 800dc80:	4a17      	ldr	r2, [pc, #92]	; (800dce0 <updateUint16Item+0x5c0>)
 800dc82:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800dc84:	2300      	movs	r3, #0
 800dc86:	9301      	str	r3, [sp, #4]
 800dc88:	f24c 6318 	movw	r3, #50712	; 0xc618
 800dc8c:	9300      	str	r3, [sp, #0]
 800dc8e:	4b15      	ldr	r3, [pc, #84]	; (800dce4 <updateUint16Item+0x5c4>)
 800dc90:	f7fb fb40 	bl	8009314 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800dc94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc98:	b29a      	uxth	r2, r3
 800dc9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dc9e:	085b      	lsrs	r3, r3, #1
 800dca0:	b2db      	uxtb	r3, r3
 800dca2:	b29b      	uxth	r3, r3
 800dca4:	4413      	add	r3, r2
 800dca6:	b29b      	uxth	r3, r3
 800dca8:	3301      	adds	r3, #1
 800dcaa:	b298      	uxth	r0, r3
 800dcac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dcb0:	b29a      	uxth	r2, r3
 800dcb2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800dcb6:	b299      	uxth	r1, r3
 800dcb8:	69fb      	ldr	r3, [r7, #28]
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	fb11 f303 	smulbb	r3, r1, r3
 800dcc0:	b29b      	uxth	r3, r3
 800dcc2:	4413      	add	r3, r2
 800dcc4:	b29b      	uxth	r3, r3
 800dcc6:	3301      	adds	r3, #1
 800dcc8:	b299      	uxth	r1, r3
 800dcca:	f107 0214 	add.w	r2, r7, #20
 800dcce:	2300      	movs	r3, #0
 800dcd0:	9301      	str	r3, [sp, #4]
 800dcd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dcd6:	9300      	str	r3, [sp, #0]
 800dcd8:	4b02      	ldr	r3, [pc, #8]	; (800dce4 <updateUint16Item+0x5c4>)
 800dcda:	f7fb fb1b 	bl	8009314 <Paint_DrawString_EN>
 800dcde:	e1da      	b.n	800e096 <updateUint16Item+0x976>
 800dce0:	2400ae1c 	.word	0x2400ae1c
 800dce4:	24000018 	.word	0x24000018
								localString, &Font12, WHITE,  BLACK);
					}

				}
				else if (currentCursorPosition.cursorPosition == VALUE)
 800dce8:	4ba1      	ldr	r3, [pc, #644]	; (800df70 <updateUint16Item+0x850>)
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	2b0b      	cmp	r3, #11
 800dcee:	f040 8147 	bne.w	800df80 <updateUint16Item+0x860>
				{
					if (howToDraw == RIGHT)
 800dcf2:	79fb      	ldrb	r3, [r7, #7]
 800dcf4:	2b04      	cmp	r3, #4
 800dcf6:	f040 808c 	bne.w	800de12 <updateUint16Item+0x6f2>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800dcfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcfe:	b29b      	uxth	r3, r3
 800dd00:	3301      	adds	r3, #1
 800dd02:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800dd04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd08:	b29a      	uxth	r2, r3
 800dd0a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800dd0e:	b299      	uxth	r1, r3
 800dd10:	69fb      	ldr	r3, [r7, #28]
 800dd12:	b29b      	uxth	r3, r3
 800dd14:	fb11 f303 	smulbb	r3, r1, r3
 800dd18:	b29b      	uxth	r3, r3
 800dd1a:	4413      	add	r3, r2
 800dd1c:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800dd1e:	3301      	adds	r3, #1
 800dd20:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 800dd22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd26:	b29c      	uxth	r4, r3
 800dd28:	69fb      	ldr	r3, [r7, #28]
 800dd2a:	3301      	adds	r3, #1
 800dd2c:	011b      	lsls	r3, r3, #4
 800dd2e:	4a91      	ldr	r2, [pc, #580]	; (800df74 <updateUint16Item+0x854>)
 800dd30:	4413      	add	r3, r2
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7f2 fade 	bl	80002f4 <strlen>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	b29a      	uxth	r2, r3
 800dd3c:	4b8e      	ldr	r3, [pc, #568]	; (800df78 <updateUint16Item+0x858>)
 800dd3e:	889b      	ldrh	r3, [r3, #4]
 800dd40:	fb12 f303 	smulbb	r3, r2, r3
 800dd44:	b29b      	uxth	r3, r3
 800dd46:	4423      	add	r3, r4
 800dd48:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800dd4a:	3301      	adds	r3, #1
 800dd4c:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800dd4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd52:	b29a      	uxth	r2, r3
 800dd54:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800dd58:	b299      	uxth	r1, r3
 800dd5a:	69fb      	ldr	r3, [r7, #28]
 800dd5c:	b29b      	uxth	r3, r3
 800dd5e:	fb11 f303 	smulbb	r3, r1, r3
 800dd62:	b29b      	uxth	r3, r3
 800dd64:	4413      	add	r3, r2
 800dd66:	b29a      	uxth	r2, r3
 800dd68:	4b83      	ldr	r3, [pc, #524]	; (800df78 <updateUint16Item+0x858>)
 800dd6a:	88db      	ldrh	r3, [r3, #6]
 800dd6c:	4413      	add	r3, r2
 800dd6e:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800dd70:	3301      	adds	r3, #1
 800dd72:	b29b      	uxth	r3, r3
 800dd74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd78:	9200      	str	r2, [sp, #0]
 800dd7a:	4602      	mov	r2, r0
 800dd7c:	4631      	mov	r1, r6
 800dd7e:	4628      	mov	r0, r5
 800dd80:	f7fa feaa 	bl	8008ad8 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800dd84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd88:	b29b      	uxth	r3, r3
 800dd8a:	3301      	adds	r3, #1
 800dd8c:	b298      	uxth	r0, r3
 800dd8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd92:	b29a      	uxth	r2, r3
 800dd94:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800dd98:	b299      	uxth	r1, r3
 800dd9a:	69fb      	ldr	r3, [r7, #28]
 800dd9c:	b29b      	uxth	r3, r3
 800dd9e:	fb11 f303 	smulbb	r3, r1, r3
 800dda2:	b29b      	uxth	r3, r3
 800dda4:	4413      	add	r3, r2
 800dda6:	b29b      	uxth	r3, r3
 800dda8:	3301      	adds	r3, #1
 800ddaa:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 800ddac:	69fb      	ldr	r3, [r7, #28]
 800ddae:	3301      	adds	r3, #1
 800ddb0:	011b      	lsls	r3, r3, #4
 800ddb2:	4a70      	ldr	r2, [pc, #448]	; (800df74 <updateUint16Item+0x854>)
 800ddb4:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	9301      	str	r3, [sp, #4]
 800ddba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ddbe:	9300      	str	r3, [sp, #0]
 800ddc0:	4b6d      	ldr	r3, [pc, #436]	; (800df78 <updateUint16Item+0x858>)
 800ddc2:	f7fb faa7 	bl	8009314 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800ddc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddca:	b29a      	uxth	r2, r3
 800ddcc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ddd0:	085b      	lsrs	r3, r3, #1
 800ddd2:	b2db      	uxtb	r3, r3
 800ddd4:	b29b      	uxth	r3, r3
 800ddd6:	4413      	add	r3, r2
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	3301      	adds	r3, #1
 800dddc:	b298      	uxth	r0, r3
 800ddde:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dde2:	b29a      	uxth	r2, r3
 800dde4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800dde8:	b299      	uxth	r1, r3
 800ddea:	69fb      	ldr	r3, [r7, #28]
 800ddec:	b29b      	uxth	r3, r3
 800ddee:	fb11 f303 	smulbb	r3, r1, r3
 800ddf2:	b29b      	uxth	r3, r3
 800ddf4:	4413      	add	r3, r2
 800ddf6:	b29b      	uxth	r3, r3
 800ddf8:	3301      	adds	r3, #1
 800ddfa:	b299      	uxth	r1, r3
 800ddfc:	f107 0214 	add.w	r2, r7, #20
 800de00:	2300      	movs	r3, #0
 800de02:	9301      	str	r3, [sp, #4]
 800de04:	f24c 6318 	movw	r3, #50712	; 0xc618
 800de08:	9300      	str	r3, [sp, #0]
 800de0a:	4b5b      	ldr	r3, [pc, #364]	; (800df78 <updateUint16Item+0x858>)
 800de0c:	f7fb fa82 	bl	8009314 <Paint_DrawString_EN>
 800de10:	e141      	b.n	800e096 <updateUint16Item+0x976>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == DOWN)
 800de12:	79fb      	ldrb	r3, [r7, #7]
 800de14:	2b01      	cmp	r3, #1
 800de16:	d158      	bne.n	800deca <updateUint16Item+0x7aa>
					{
						if (uint16Item.deltaMultiplier < uint16Item.startValue)
 800de18:	4b56      	ldr	r3, [pc, #344]	; (800df74 <updateUint16Item+0x854>)
 800de1a:	899a      	ldrh	r2, [r3, #12]
 800de1c:	4b55      	ldr	r3, [pc, #340]	; (800df74 <updateUint16Item+0x854>)
 800de1e:	891b      	ldrh	r3, [r3, #8]
 800de20:	429a      	cmp	r2, r3
 800de22:	d21f      	bcs.n	800de64 <updateUint16Item+0x744>
						{
							uint16Item.startValue = fmax(uint16Item.startValue - uint16Item.deltaMultiplier, uint16Item.minValue * 1.0);
 800de24:	4b53      	ldr	r3, [pc, #332]	; (800df74 <updateUint16Item+0x854>)
 800de26:	891b      	ldrh	r3, [r3, #8]
 800de28:	461a      	mov	r2, r3
 800de2a:	4b52      	ldr	r3, [pc, #328]	; (800df74 <updateUint16Item+0x854>)
 800de2c:	899b      	ldrh	r3, [r3, #12]
 800de2e:	1ad3      	subs	r3, r2, r3
 800de30:	ee07 3a90 	vmov	s15, r3
 800de34:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800de38:	4b4e      	ldr	r3, [pc, #312]	; (800df74 <updateUint16Item+0x854>)
 800de3a:	889b      	ldrh	r3, [r3, #4]
 800de3c:	ee06 3a90 	vmov	s13, r3
 800de40:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800de44:	eeb0 1b46 	vmov.f64	d1, d6
 800de48:	eeb0 0b47 	vmov.f64	d0, d7
 800de4c:	f006 ff2a 	bl	8014ca4 <fmax>
 800de50:	eeb0 7b40 	vmov.f64	d7, d0
 800de54:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800de58:	ee17 3a90 	vmov	r3, s15
 800de5c:	b29a      	uxth	r2, r3
 800de5e:	4b45      	ldr	r3, [pc, #276]	; (800df74 <updateUint16Item+0x854>)
 800de60:	811a      	strh	r2, [r3, #8]
 800de62:	e003      	b.n	800de6c <updateUint16Item+0x74c>
						}
						else
						{
							uint16Item.startValue = uint16Item.minValue;
 800de64:	4b43      	ldr	r3, [pc, #268]	; (800df74 <updateUint16Item+0x854>)
 800de66:	889a      	ldrh	r2, [r3, #4]
 800de68:	4b42      	ldr	r3, [pc, #264]	; (800df74 <updateUint16Item+0x854>)
 800de6a:	811a      	strh	r2, [r3, #8]
						}

						sprintf(localString,"%04d",uint16Item.startValue);
 800de6c:	4b41      	ldr	r3, [pc, #260]	; (800df74 <updateUint16Item+0x854>)
 800de6e:	891b      	ldrh	r3, [r3, #8]
 800de70:	461a      	mov	r2, r3
 800de72:	f107 0314 	add.w	r3, r7, #20
 800de76:	4941      	ldr	r1, [pc, #260]	; (800df7c <updateUint16Item+0x85c>)
 800de78:	4618      	mov	r0, r3
 800de7a:	f003 fb97 	bl	80115ac <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800de7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de82:	b29a      	uxth	r2, r3
 800de84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800de88:	085b      	lsrs	r3, r3, #1
 800de8a:	b2db      	uxtb	r3, r3
 800de8c:	b29b      	uxth	r3, r3
 800de8e:	4413      	add	r3, r2
 800de90:	b29b      	uxth	r3, r3
 800de92:	3301      	adds	r3, #1
 800de94:	b298      	uxth	r0, r3
 800de96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800de9a:	b29a      	uxth	r2, r3
 800de9c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800dea0:	b299      	uxth	r1, r3
 800dea2:	69fb      	ldr	r3, [r7, #28]
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	fb11 f303 	smulbb	r3, r1, r3
 800deaa:	b29b      	uxth	r3, r3
 800deac:	4413      	add	r3, r2
 800deae:	b29b      	uxth	r3, r3
 800deb0:	3301      	adds	r3, #1
 800deb2:	b299      	uxth	r1, r3
 800deb4:	f107 0214 	add.w	r2, r7, #20
 800deb8:	2300      	movs	r3, #0
 800deba:	9301      	str	r3, [sp, #4]
 800debc:	f24c 6318 	movw	r3, #50712	; 0xc618
 800dec0:	9300      	str	r3, [sp, #0]
 800dec2:	4b2d      	ldr	r3, [pc, #180]	; (800df78 <updateUint16Item+0x858>)
 800dec4:	f7fb fa26 	bl	8009314 <Paint_DrawString_EN>
 800dec8:	e0e5      	b.n	800e096 <updateUint16Item+0x976>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == UP)
 800deca:	79fb      	ldrb	r3, [r7, #7]
 800decc:	2b00      	cmp	r3, #0
 800dece:	f040 80e2 	bne.w	800e096 <updateUint16Item+0x976>
					{
						uint16Item.startValue = fmin(uint16Item.startValue + uint16Item.deltaMultiplier, uint16Item.maxValue * 1.0);
 800ded2:	4b28      	ldr	r3, [pc, #160]	; (800df74 <updateUint16Item+0x854>)
 800ded4:	891b      	ldrh	r3, [r3, #8]
 800ded6:	461a      	mov	r2, r3
 800ded8:	4b26      	ldr	r3, [pc, #152]	; (800df74 <updateUint16Item+0x854>)
 800deda:	899b      	ldrh	r3, [r3, #12]
 800dedc:	4413      	add	r3, r2
 800dede:	ee07 3a90 	vmov	s15, r3
 800dee2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dee6:	4b23      	ldr	r3, [pc, #140]	; (800df74 <updateUint16Item+0x854>)
 800dee8:	88db      	ldrh	r3, [r3, #6]
 800deea:	ee06 3a90 	vmov	s13, r3
 800deee:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800def2:	eeb0 1b46 	vmov.f64	d1, d6
 800def6:	eeb0 0b47 	vmov.f64	d0, d7
 800defa:	f006 feee 	bl	8014cda <fmin>
 800defe:	eeb0 7b40 	vmov.f64	d7, d0
 800df02:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800df06:	ee17 3a90 	vmov	r3, s15
 800df0a:	b29a      	uxth	r2, r3
 800df0c:	4b19      	ldr	r3, [pc, #100]	; (800df74 <updateUint16Item+0x854>)
 800df0e:	811a      	strh	r2, [r3, #8]
						sprintf(localString,"%04d",uint16Item.startValue);
 800df10:	4b18      	ldr	r3, [pc, #96]	; (800df74 <updateUint16Item+0x854>)
 800df12:	891b      	ldrh	r3, [r3, #8]
 800df14:	461a      	mov	r2, r3
 800df16:	f107 0314 	add.w	r3, r7, #20
 800df1a:	4918      	ldr	r1, [pc, #96]	; (800df7c <updateUint16Item+0x85c>)
 800df1c:	4618      	mov	r0, r3
 800df1e:	f003 fb45 	bl	80115ac <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800df22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df26:	b29a      	uxth	r2, r3
 800df28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800df2c:	085b      	lsrs	r3, r3, #1
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	b29b      	uxth	r3, r3
 800df32:	4413      	add	r3, r2
 800df34:	b29b      	uxth	r3, r3
 800df36:	3301      	adds	r3, #1
 800df38:	b298      	uxth	r0, r3
 800df3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df3e:	b29a      	uxth	r2, r3
 800df40:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800df44:	b299      	uxth	r1, r3
 800df46:	69fb      	ldr	r3, [r7, #28]
 800df48:	b29b      	uxth	r3, r3
 800df4a:	fb11 f303 	smulbb	r3, r1, r3
 800df4e:	b29b      	uxth	r3, r3
 800df50:	4413      	add	r3, r2
 800df52:	b29b      	uxth	r3, r3
 800df54:	3301      	adds	r3, #1
 800df56:	b299      	uxth	r1, r3
 800df58:	f107 0214 	add.w	r2, r7, #20
 800df5c:	2300      	movs	r3, #0
 800df5e:	9301      	str	r3, [sp, #4]
 800df60:	f24c 6318 	movw	r3, #50712	; 0xc618
 800df64:	9300      	str	r3, [sp, #0]
 800df66:	4b04      	ldr	r3, [pc, #16]	; (800df78 <updateUint16Item+0x858>)
 800df68:	f7fb f9d4 	bl	8009314 <Paint_DrawString_EN>
 800df6c:	e093      	b.n	800e096 <updateUint16Item+0x976>
 800df6e:	bf00      	nop
 800df70:	2400a5bc 	.word	0x2400a5bc
 800df74:	2400ae1c 	.word	0x2400ae1c
 800df78:	24000018 	.word	0x24000018
 800df7c:	08015434 	.word	0x08015434
								localString, &Font12, LGRAY,  BLACK);
					}
				}
				else
				{
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800df80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df84:	b29b      	uxth	r3, r3
 800df86:	3301      	adds	r3, #1
 800df88:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800df8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df8e:	b29a      	uxth	r2, r3
 800df90:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800df94:	b299      	uxth	r1, r3
 800df96:	69fb      	ldr	r3, [r7, #28]
 800df98:	b29b      	uxth	r3, r3
 800df9a:	fb11 f303 	smulbb	r3, r1, r3
 800df9e:	b29b      	uxth	r3, r3
 800dfa0:	4413      	add	r3, r2
 800dfa2:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800dfa4:	3301      	adds	r3, #1
 800dfa6:	b29e      	uxth	r6, r3
							MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 800dfa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfac:	b29c      	uxth	r4, r3
 800dfae:	69fb      	ldr	r3, [r7, #28]
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	011b      	lsls	r3, r3, #4
 800dfb4:	4a93      	ldr	r2, [pc, #588]	; (800e204 <updateUint16Item+0xae4>)
 800dfb6:	4413      	add	r3, r2
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f7f2 f99b 	bl	80002f4 <strlen>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	b29a      	uxth	r2, r3
 800dfc2:	4b91      	ldr	r3, [pc, #580]	; (800e208 <updateUint16Item+0xae8>)
 800dfc4:	889b      	ldrh	r3, [r3, #4]
 800dfc6:	fb12 f303 	smulbb	r3, r2, r3
 800dfca:	b29b      	uxth	r3, r3
 800dfcc:	4423      	add	r3, r4
 800dfce:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800dfd0:	3301      	adds	r3, #1
 800dfd2:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800dfd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dfd8:	b29a      	uxth	r2, r3
 800dfda:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800dfde:	b299      	uxth	r1, r3
 800dfe0:	69fb      	ldr	r3, [r7, #28]
 800dfe2:	b29b      	uxth	r3, r3
 800dfe4:	fb11 f303 	smulbb	r3, r1, r3
 800dfe8:	b29b      	uxth	r3, r3
 800dfea:	4413      	add	r3, r2
 800dfec:	b29a      	uxth	r2, r3
 800dfee:	4b86      	ldr	r3, [pc, #536]	; (800e208 <updateUint16Item+0xae8>)
 800dff0:	88db      	ldrh	r3, [r3, #6]
 800dff2:	4413      	add	r3, r2
 800dff4:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800dff6:	3301      	adds	r3, #1
 800dff8:	b29b      	uxth	r3, r3
 800dffa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dffe:	9200      	str	r2, [sp, #0]
 800e000:	4602      	mov	r2, r0
 800e002:	4631      	mov	r1, r6
 800e004:	4628      	mov	r0, r5
 800e006:	f7fa fd67 	bl	8008ad8 <Paint_ClearWindows>
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e00a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e00e:	b29b      	uxth	r3, r3
 800e010:	3301      	adds	r3, #1
 800e012:	b298      	uxth	r0, r3
 800e014:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e018:	b29a      	uxth	r2, r3
 800e01a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e01e:	b299      	uxth	r1, r3
 800e020:	69fb      	ldr	r3, [r7, #28]
 800e022:	b29b      	uxth	r3, r3
 800e024:	fb11 f303 	smulbb	r3, r1, r3
 800e028:	b29b      	uxth	r3, r3
 800e02a:	4413      	add	r3, r2
 800e02c:	b29b      	uxth	r3, r3
 800e02e:	3301      	adds	r3, #1
 800e030:	b299      	uxth	r1, r3
							uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 800e032:	69fb      	ldr	r3, [r7, #28]
 800e034:	3301      	adds	r3, #1
 800e036:	011b      	lsls	r3, r3, #4
 800e038:	4a72      	ldr	r2, [pc, #456]	; (800e204 <updateUint16Item+0xae4>)
 800e03a:	441a      	add	r2, r3
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e03c:	2300      	movs	r3, #0
 800e03e:	9301      	str	r3, [sp, #4]
 800e040:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e044:	9300      	str	r3, [sp, #0]
 800e046:	4b70      	ldr	r3, [pc, #448]	; (800e208 <updateUint16Item+0xae8>)
 800e048:	f7fb f964 	bl	8009314 <Paint_DrawString_EN>
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e04c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e050:	b29a      	uxth	r2, r3
 800e052:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e056:	085b      	lsrs	r3, r3, #1
 800e058:	b2db      	uxtb	r3, r3
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	4413      	add	r3, r2
 800e05e:	b29b      	uxth	r3, r3
 800e060:	3301      	adds	r3, #1
 800e062:	b298      	uxth	r0, r3
 800e064:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e068:	b29a      	uxth	r2, r3
 800e06a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e06e:	b299      	uxth	r1, r3
 800e070:	69fb      	ldr	r3, [r7, #28]
 800e072:	b29b      	uxth	r3, r3
 800e074:	fb11 f303 	smulbb	r3, r1, r3
 800e078:	b29b      	uxth	r3, r3
 800e07a:	4413      	add	r3, r2
 800e07c:	b29b      	uxth	r3, r3
 800e07e:	3301      	adds	r3, #1
 800e080:	b299      	uxth	r1, r3
 800e082:	f107 0214 	add.w	r2, r7, #20
 800e086:	2300      	movs	r3, #0
 800e088:	9301      	str	r3, [sp, #4]
 800e08a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e08e:	9300      	str	r3, [sp, #0]
 800e090:	4b5d      	ldr	r3, [pc, #372]	; (800e208 <updateUint16Item+0xae8>)
 800e092:	f7fb f93f 	bl	8009314 <Paint_DrawString_EN>
							localString, &Font12, WHITE,  BLACK);
				}
			}
			// Render value text of "Multiplier" with Grey or White background
			if ( (i == 3) )
 800e096:	69fb      	ldr	r3, [r7, #28]
 800e098:	2b03      	cmp	r3, #3
 800e09a:	f040 83bc 	bne.w	800e816 <updateUint16Item+0x10f6>
			{
				char localString[8] = "";
 800e09e:	2300      	movs	r3, #0
 800e0a0:	60fb      	str	r3, [r7, #12]
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	613b      	str	r3, [r7, #16]
				sprintf(localString,"%04d",uint16Item.deltaMultiplier);
 800e0a6:	4b57      	ldr	r3, [pc, #348]	; (800e204 <updateUint16Item+0xae4>)
 800e0a8:	899b      	ldrh	r3, [r3, #12]
 800e0aa:	461a      	mov	r2, r3
 800e0ac:	f107 030c 	add.w	r3, r7, #12
 800e0b0:	4956      	ldr	r1, [pc, #344]	; (800e20c <updateUint16Item+0xaec>)
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f003 fa7a 	bl	80115ac <siprintf>
				if (currentCursorPosition.cursorPosition == 0x03)
 800e0b8:	4b55      	ldr	r3, [pc, #340]	; (800e210 <updateUint16Item+0xaf0>)
 800e0ba:	781b      	ldrb	r3, [r3, #0]
 800e0bc:	2b03      	cmp	r3, #3
 800e0be:	f040 81cd 	bne.w	800e45c <updateUint16Item+0xd3c>
				{
					if ( (howToDraw == LEFT) || (howToDraw == FULL) )
 800e0c2:	79fb      	ldrb	r3, [r7, #7]
 800e0c4:	2b03      	cmp	r3, #3
 800e0c6:	d003      	beq.n	800e0d0 <updateUint16Item+0x9b0>
 800e0c8:	79fb      	ldrb	r3, [r7, #7]
 800e0ca:	2b02      	cmp	r3, #2
 800e0cc:	f040 80a2 	bne.w	800e214 <updateUint16Item+0xaf4>
					{
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e0d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0d4:	b29b      	uxth	r3, r3
 800e0d6:	3301      	adds	r3, #1
 800e0d8:	b298      	uxth	r0, r3
 800e0da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e0de:	b29a      	uxth	r2, r3
 800e0e0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e0e4:	b299      	uxth	r1, r3
 800e0e6:	69fb      	ldr	r3, [r7, #28]
 800e0e8:	b29b      	uxth	r3, r3
 800e0ea:	fb11 f303 	smulbb	r3, r1, r3
 800e0ee:	b29b      	uxth	r3, r3
 800e0f0:	4413      	add	r3, r2
 800e0f2:	b29b      	uxth	r3, r3
 800e0f4:	3301      	adds	r3, #1
 800e0f6:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 800e0f8:	69fb      	ldr	r3, [r7, #28]
 800e0fa:	3301      	adds	r3, #1
 800e0fc:	011b      	lsls	r3, r3, #4
 800e0fe:	4a41      	ldr	r2, [pc, #260]	; (800e204 <updateUint16Item+0xae4>)
 800e100:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e102:	2300      	movs	r3, #0
 800e104:	9301      	str	r3, [sp, #4]
 800e106:	f24c 6318 	movw	r3, #50712	; 0xc618
 800e10a:	9300      	str	r3, [sp, #0]
 800e10c:	4b3e      	ldr	r3, [pc, #248]	; (800e208 <updateUint16Item+0xae8>)
 800e10e:	f7fb f901 	bl	8009314 <Paint_DrawString_EN>
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800e112:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e116:	b29a      	uxth	r2, r3
 800e118:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e11c:	085b      	lsrs	r3, r3, #1
 800e11e:	b2db      	uxtb	r3, r3
 800e120:	b29b      	uxth	r3, r3
 800e122:	4413      	add	r3, r2
 800e124:	b29b      	uxth	r3, r3
 800e126:	3301      	adds	r3, #1
 800e128:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e12a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e12e:	b29a      	uxth	r2, r3
 800e130:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e134:	b299      	uxth	r1, r3
 800e136:	69fb      	ldr	r3, [r7, #28]
 800e138:	b29b      	uxth	r3, r3
 800e13a:	fb11 f303 	smulbb	r3, r1, r3
 800e13e:	b29b      	uxth	r3, r3
 800e140:	4413      	add	r3, r2
 800e142:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800e144:	3301      	adds	r3, #1
 800e146:	b29e      	uxth	r6, r3
								MenuRectangleStartX + MenuRectangleWidth / 2 + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 800e148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e14c:	b29a      	uxth	r2, r3
 800e14e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e152:	085b      	lsrs	r3, r3, #1
 800e154:	b2db      	uxtb	r3, r3
 800e156:	b29b      	uxth	r3, r3
 800e158:	4413      	add	r3, r2
 800e15a:	b29c      	uxth	r4, r3
 800e15c:	69fb      	ldr	r3, [r7, #28]
 800e15e:	3301      	adds	r3, #1
 800e160:	011b      	lsls	r3, r3, #4
 800e162:	4a28      	ldr	r2, [pc, #160]	; (800e204 <updateUint16Item+0xae4>)
 800e164:	4413      	add	r3, r2
 800e166:	4618      	mov	r0, r3
 800e168:	f7f2 f8c4 	bl	80002f4 <strlen>
 800e16c:	4603      	mov	r3, r0
 800e16e:	b29a      	uxth	r2, r3
 800e170:	4b25      	ldr	r3, [pc, #148]	; (800e208 <updateUint16Item+0xae8>)
 800e172:	889b      	ldrh	r3, [r3, #4]
 800e174:	fb12 f303 	smulbb	r3, r2, r3
 800e178:	b29b      	uxth	r3, r3
 800e17a:	4423      	add	r3, r4
 800e17c:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800e17e:	3301      	adds	r3, #1
 800e180:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800e182:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e186:	b29a      	uxth	r2, r3
 800e188:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e18c:	b299      	uxth	r1, r3
 800e18e:	69fb      	ldr	r3, [r7, #28]
 800e190:	b29b      	uxth	r3, r3
 800e192:	fb11 f303 	smulbb	r3, r1, r3
 800e196:	b29b      	uxth	r3, r3
 800e198:	4413      	add	r3, r2
 800e19a:	b29a      	uxth	r2, r3
 800e19c:	4b1a      	ldr	r3, [pc, #104]	; (800e208 <updateUint16Item+0xae8>)
 800e19e:	88db      	ldrh	r3, [r3, #6]
 800e1a0:	4413      	add	r3, r2
 800e1a2:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800e1a4:	3301      	adds	r3, #1
 800e1a6:	b29b      	uxth	r3, r3
 800e1a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e1ac:	9200      	str	r2, [sp, #0]
 800e1ae:	4602      	mov	r2, r0
 800e1b0:	4631      	mov	r1, r6
 800e1b2:	4628      	mov	r0, r5
 800e1b4:	f7fa fc90 	bl	8008ad8 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e1b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1bc:	b29a      	uxth	r2, r3
 800e1be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e1c2:	085b      	lsrs	r3, r3, #1
 800e1c4:	b2db      	uxtb	r3, r3
 800e1c6:	b29b      	uxth	r3, r3
 800e1c8:	4413      	add	r3, r2
 800e1ca:	b29b      	uxth	r3, r3
 800e1cc:	3301      	adds	r3, #1
 800e1ce:	b298      	uxth	r0, r3
 800e1d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e1d4:	b29a      	uxth	r2, r3
 800e1d6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e1da:	b299      	uxth	r1, r3
 800e1dc:	69fb      	ldr	r3, [r7, #28]
 800e1de:	b29b      	uxth	r3, r3
 800e1e0:	fb11 f303 	smulbb	r3, r1, r3
 800e1e4:	b29b      	uxth	r3, r3
 800e1e6:	4413      	add	r3, r2
 800e1e8:	b29b      	uxth	r3, r3
 800e1ea:	3301      	adds	r3, #1
 800e1ec:	b299      	uxth	r1, r3
 800e1ee:	f107 020c 	add.w	r2, r7, #12
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	9301      	str	r3, [sp, #4]
 800e1f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e1fa:	9300      	str	r3, [sp, #0]
 800e1fc:	4b02      	ldr	r3, [pc, #8]	; (800e208 <updateUint16Item+0xae8>)
 800e1fe:	f7fb f889 	bl	8009314 <Paint_DrawString_EN>
 800e202:	e308      	b.n	800e816 <updateUint16Item+0x10f6>
 800e204:	2400ae1c 	.word	0x2400ae1c
 800e208:	24000018 	.word	0x24000018
 800e20c:	08015434 	.word	0x08015434
 800e210:	2400a5bc 	.word	0x2400a5bc
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == DOWN)
 800e214:	79fb      	ldrb	r3, [r7, #7]
 800e216:	2b01      	cmp	r3, #1
 800e218:	f040 808c 	bne.w	800e334 <updateUint16Item+0xc14>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800e21c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e220:	b29b      	uxth	r3, r3
 800e222:	3301      	adds	r3, #1
 800e224:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e226:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e22a:	b29a      	uxth	r2, r3
 800e22c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e230:	b299      	uxth	r1, r3
 800e232:	69fb      	ldr	r3, [r7, #28]
 800e234:	b29b      	uxth	r3, r3
 800e236:	fb11 f303 	smulbb	r3, r1, r3
 800e23a:	b29b      	uxth	r3, r3
 800e23c:	4413      	add	r3, r2
 800e23e:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800e240:	3301      	adds	r3, #1
 800e242:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 800e244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e248:	b29c      	uxth	r4, r3
 800e24a:	69fb      	ldr	r3, [r7, #28]
 800e24c:	3301      	adds	r3, #1
 800e24e:	011b      	lsls	r3, r3, #4
 800e250:	4a80      	ldr	r2, [pc, #512]	; (800e454 <updateUint16Item+0xd34>)
 800e252:	4413      	add	r3, r2
 800e254:	4618      	mov	r0, r3
 800e256:	f7f2 f84d 	bl	80002f4 <strlen>
 800e25a:	4603      	mov	r3, r0
 800e25c:	b29a      	uxth	r2, r3
 800e25e:	4b7e      	ldr	r3, [pc, #504]	; (800e458 <updateUint16Item+0xd38>)
 800e260:	889b      	ldrh	r3, [r3, #4]
 800e262:	fb12 f303 	smulbb	r3, r2, r3
 800e266:	b29b      	uxth	r3, r3
 800e268:	4423      	add	r3, r4
 800e26a:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800e26c:	3301      	adds	r3, #1
 800e26e:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800e270:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e274:	b29a      	uxth	r2, r3
 800e276:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e27a:	b299      	uxth	r1, r3
 800e27c:	69fb      	ldr	r3, [r7, #28]
 800e27e:	b29b      	uxth	r3, r3
 800e280:	fb11 f303 	smulbb	r3, r1, r3
 800e284:	b29b      	uxth	r3, r3
 800e286:	4413      	add	r3, r2
 800e288:	b29a      	uxth	r2, r3
 800e28a:	4b73      	ldr	r3, [pc, #460]	; (800e458 <updateUint16Item+0xd38>)
 800e28c:	88db      	ldrh	r3, [r3, #6]
 800e28e:	4413      	add	r3, r2
 800e290:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800e292:	3301      	adds	r3, #1
 800e294:	b29b      	uxth	r3, r3
 800e296:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e29a:	9200      	str	r2, [sp, #0]
 800e29c:	4602      	mov	r2, r0
 800e29e:	4631      	mov	r1, r6
 800e2a0:	4628      	mov	r0, r5
 800e2a2:	f7fa fc19 	bl	8008ad8 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e2a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2aa:	b29b      	uxth	r3, r3
 800e2ac:	3301      	adds	r3, #1
 800e2ae:	b298      	uxth	r0, r3
 800e2b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e2b4:	b29a      	uxth	r2, r3
 800e2b6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e2ba:	b299      	uxth	r1, r3
 800e2bc:	69fb      	ldr	r3, [r7, #28]
 800e2be:	b29b      	uxth	r3, r3
 800e2c0:	fb11 f303 	smulbb	r3, r1, r3
 800e2c4:	b29b      	uxth	r3, r3
 800e2c6:	4413      	add	r3, r2
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	3301      	adds	r3, #1
 800e2cc:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 800e2ce:	69fb      	ldr	r3, [r7, #28]
 800e2d0:	3301      	adds	r3, #1
 800e2d2:	011b      	lsls	r3, r3, #4
 800e2d4:	4a5f      	ldr	r2, [pc, #380]	; (800e454 <updateUint16Item+0xd34>)
 800e2d6:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e2d8:	2300      	movs	r3, #0
 800e2da:	9301      	str	r3, [sp, #4]
 800e2dc:	f24c 6318 	movw	r3, #50712	; 0xc618
 800e2e0:	9300      	str	r3, [sp, #0]
 800e2e2:	4b5d      	ldr	r3, [pc, #372]	; (800e458 <updateUint16Item+0xd38>)
 800e2e4:	f7fb f816 	bl	8009314 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e2e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2ec:	b29a      	uxth	r2, r3
 800e2ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e2f2:	085b      	lsrs	r3, r3, #1
 800e2f4:	b2db      	uxtb	r3, r3
 800e2f6:	b29b      	uxth	r3, r3
 800e2f8:	4413      	add	r3, r2
 800e2fa:	b29b      	uxth	r3, r3
 800e2fc:	3301      	adds	r3, #1
 800e2fe:	b298      	uxth	r0, r3
 800e300:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e304:	b29a      	uxth	r2, r3
 800e306:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e30a:	b299      	uxth	r1, r3
 800e30c:	69fb      	ldr	r3, [r7, #28]
 800e30e:	b29b      	uxth	r3, r3
 800e310:	fb11 f303 	smulbb	r3, r1, r3
 800e314:	b29b      	uxth	r3, r3
 800e316:	4413      	add	r3, r2
 800e318:	b29b      	uxth	r3, r3
 800e31a:	3301      	adds	r3, #1
 800e31c:	b299      	uxth	r1, r3
 800e31e:	f107 020c 	add.w	r2, r7, #12
 800e322:	2300      	movs	r3, #0
 800e324:	9301      	str	r3, [sp, #4]
 800e326:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e32a:	9300      	str	r3, [sp, #0]
 800e32c:	4b4a      	ldr	r3, [pc, #296]	; (800e458 <updateUint16Item+0xd38>)
 800e32e:	f7fa fff1 	bl	8009314 <Paint_DrawString_EN>
 800e332:	e270      	b.n	800e816 <updateUint16Item+0x10f6>
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == UP)
 800e334:	79fb      	ldrb	r3, [r7, #7]
 800e336:	2b00      	cmp	r3, #0
 800e338:	f040 826d 	bne.w	800e816 <updateUint16Item+0x10f6>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800e33c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e340:	b29b      	uxth	r3, r3
 800e342:	3301      	adds	r3, #1
 800e344:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e346:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e34a:	b29a      	uxth	r2, r3
 800e34c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e350:	b299      	uxth	r1, r3
 800e352:	69fb      	ldr	r3, [r7, #28]
 800e354:	b29b      	uxth	r3, r3
 800e356:	fb11 f303 	smulbb	r3, r1, r3
 800e35a:	b29b      	uxth	r3, r3
 800e35c:	4413      	add	r3, r2
 800e35e:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800e360:	3301      	adds	r3, #1
 800e362:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 800e364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e368:	b29c      	uxth	r4, r3
 800e36a:	69fb      	ldr	r3, [r7, #28]
 800e36c:	3301      	adds	r3, #1
 800e36e:	011b      	lsls	r3, r3, #4
 800e370:	4a38      	ldr	r2, [pc, #224]	; (800e454 <updateUint16Item+0xd34>)
 800e372:	4413      	add	r3, r2
 800e374:	4618      	mov	r0, r3
 800e376:	f7f1 ffbd 	bl	80002f4 <strlen>
 800e37a:	4603      	mov	r3, r0
 800e37c:	b29a      	uxth	r2, r3
 800e37e:	4b36      	ldr	r3, [pc, #216]	; (800e458 <updateUint16Item+0xd38>)
 800e380:	889b      	ldrh	r3, [r3, #4]
 800e382:	fb12 f303 	smulbb	r3, r2, r3
 800e386:	b29b      	uxth	r3, r3
 800e388:	4423      	add	r3, r4
 800e38a:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800e38c:	3301      	adds	r3, #1
 800e38e:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800e390:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e394:	b29a      	uxth	r2, r3
 800e396:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e39a:	b299      	uxth	r1, r3
 800e39c:	69fb      	ldr	r3, [r7, #28]
 800e39e:	b29b      	uxth	r3, r3
 800e3a0:	fb11 f303 	smulbb	r3, r1, r3
 800e3a4:	b29b      	uxth	r3, r3
 800e3a6:	4413      	add	r3, r2
 800e3a8:	b29a      	uxth	r2, r3
 800e3aa:	4b2b      	ldr	r3, [pc, #172]	; (800e458 <updateUint16Item+0xd38>)
 800e3ac:	88db      	ldrh	r3, [r3, #6]
 800e3ae:	4413      	add	r3, r2
 800e3b0:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800e3b2:	3301      	adds	r3, #1
 800e3b4:	b29b      	uxth	r3, r3
 800e3b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e3ba:	9200      	str	r2, [sp, #0]
 800e3bc:	4602      	mov	r2, r0
 800e3be:	4631      	mov	r1, r6
 800e3c0:	4628      	mov	r0, r5
 800e3c2:	f7fa fb89 	bl	8008ad8 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e3c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3ca:	b29b      	uxth	r3, r3
 800e3cc:	3301      	adds	r3, #1
 800e3ce:	b298      	uxth	r0, r3
 800e3d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e3d4:	b29a      	uxth	r2, r3
 800e3d6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e3da:	b299      	uxth	r1, r3
 800e3dc:	69fb      	ldr	r3, [r7, #28]
 800e3de:	b29b      	uxth	r3, r3
 800e3e0:	fb11 f303 	smulbb	r3, r1, r3
 800e3e4:	b29b      	uxth	r3, r3
 800e3e6:	4413      	add	r3, r2
 800e3e8:	b29b      	uxth	r3, r3
 800e3ea:	3301      	adds	r3, #1
 800e3ec:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 800e3ee:	69fb      	ldr	r3, [r7, #28]
 800e3f0:	3301      	adds	r3, #1
 800e3f2:	011b      	lsls	r3, r3, #4
 800e3f4:	4a17      	ldr	r2, [pc, #92]	; (800e454 <updateUint16Item+0xd34>)
 800e3f6:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	9301      	str	r3, [sp, #4]
 800e3fc:	f24c 6318 	movw	r3, #50712	; 0xc618
 800e400:	9300      	str	r3, [sp, #0]
 800e402:	4b15      	ldr	r3, [pc, #84]	; (800e458 <updateUint16Item+0xd38>)
 800e404:	f7fa ff86 	bl	8009314 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e40c:	b29a      	uxth	r2, r3
 800e40e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e412:	085b      	lsrs	r3, r3, #1
 800e414:	b2db      	uxtb	r3, r3
 800e416:	b29b      	uxth	r3, r3
 800e418:	4413      	add	r3, r2
 800e41a:	b29b      	uxth	r3, r3
 800e41c:	3301      	adds	r3, #1
 800e41e:	b298      	uxth	r0, r3
 800e420:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e424:	b29a      	uxth	r2, r3
 800e426:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e42a:	b299      	uxth	r1, r3
 800e42c:	69fb      	ldr	r3, [r7, #28]
 800e42e:	b29b      	uxth	r3, r3
 800e430:	fb11 f303 	smulbb	r3, r1, r3
 800e434:	b29b      	uxth	r3, r3
 800e436:	4413      	add	r3, r2
 800e438:	b29b      	uxth	r3, r3
 800e43a:	3301      	adds	r3, #1
 800e43c:	b299      	uxth	r1, r3
 800e43e:	f107 020c 	add.w	r2, r7, #12
 800e442:	2300      	movs	r3, #0
 800e444:	9301      	str	r3, [sp, #4]
 800e446:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e44a:	9300      	str	r3, [sp, #0]
 800e44c:	4b02      	ldr	r3, [pc, #8]	; (800e458 <updateUint16Item+0xd38>)
 800e44e:	f7fa ff61 	bl	8009314 <Paint_DrawString_EN>
 800e452:	e1e0      	b.n	800e816 <updateUint16Item+0x10f6>
 800e454:	2400ae1c 	.word	0x2400ae1c
 800e458:	24000018 	.word	0x24000018
								localString, &Font12, WHITE,  BLACK);
					}
				}
				else if (currentCursorPosition.cursorPosition == MULTIPLIER)
 800e45c:	4ba2      	ldr	r3, [pc, #648]	; (800e6e8 <updateUint16Item+0xfc8>)
 800e45e:	781b      	ldrb	r3, [r3, #0]
 800e460:	2b0c      	cmp	r3, #12
 800e462:	f040 814d 	bne.w	800e700 <updateUint16Item+0xfe0>
				{
					if (howToDraw == RIGHT)
 800e466:	79fb      	ldrb	r3, [r7, #7]
 800e468:	2b04      	cmp	r3, #4
 800e46a:	f040 808c 	bne.w	800e586 <updateUint16Item+0xe66>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800e46e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e472:	b29b      	uxth	r3, r3
 800e474:	3301      	adds	r3, #1
 800e476:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e478:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e47c:	b29a      	uxth	r2, r3
 800e47e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e482:	b299      	uxth	r1, r3
 800e484:	69fb      	ldr	r3, [r7, #28]
 800e486:	b29b      	uxth	r3, r3
 800e488:	fb11 f303 	smulbb	r3, r1, r3
 800e48c:	b29b      	uxth	r3, r3
 800e48e:	4413      	add	r3, r2
 800e490:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800e492:	3301      	adds	r3, #1
 800e494:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 800e496:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e49a:	b29c      	uxth	r4, r3
 800e49c:	69fb      	ldr	r3, [r7, #28]
 800e49e:	3301      	adds	r3, #1
 800e4a0:	011b      	lsls	r3, r3, #4
 800e4a2:	4a92      	ldr	r2, [pc, #584]	; (800e6ec <updateUint16Item+0xfcc>)
 800e4a4:	4413      	add	r3, r2
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7f1 ff24 	bl	80002f4 <strlen>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	b29a      	uxth	r2, r3
 800e4b0:	4b8f      	ldr	r3, [pc, #572]	; (800e6f0 <updateUint16Item+0xfd0>)
 800e4b2:	889b      	ldrh	r3, [r3, #4]
 800e4b4:	fb12 f303 	smulbb	r3, r2, r3
 800e4b8:	b29b      	uxth	r3, r3
 800e4ba:	4423      	add	r3, r4
 800e4bc:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800e4be:	3301      	adds	r3, #1
 800e4c0:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800e4c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e4c6:	b29a      	uxth	r2, r3
 800e4c8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e4cc:	b299      	uxth	r1, r3
 800e4ce:	69fb      	ldr	r3, [r7, #28]
 800e4d0:	b29b      	uxth	r3, r3
 800e4d2:	fb11 f303 	smulbb	r3, r1, r3
 800e4d6:	b29b      	uxth	r3, r3
 800e4d8:	4413      	add	r3, r2
 800e4da:	b29a      	uxth	r2, r3
 800e4dc:	4b84      	ldr	r3, [pc, #528]	; (800e6f0 <updateUint16Item+0xfd0>)
 800e4de:	88db      	ldrh	r3, [r3, #6]
 800e4e0:	4413      	add	r3, r2
 800e4e2:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800e4e4:	3301      	adds	r3, #1
 800e4e6:	b29b      	uxth	r3, r3
 800e4e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e4ec:	9200      	str	r2, [sp, #0]
 800e4ee:	4602      	mov	r2, r0
 800e4f0:	4631      	mov	r1, r6
 800e4f2:	4628      	mov	r0, r5
 800e4f4:	f7fa faf0 	bl	8008ad8 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e4f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4fc:	b29b      	uxth	r3, r3
 800e4fe:	3301      	adds	r3, #1
 800e500:	b298      	uxth	r0, r3
 800e502:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e506:	b29a      	uxth	r2, r3
 800e508:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e50c:	b299      	uxth	r1, r3
 800e50e:	69fb      	ldr	r3, [r7, #28]
 800e510:	b29b      	uxth	r3, r3
 800e512:	fb11 f303 	smulbb	r3, r1, r3
 800e516:	b29b      	uxth	r3, r3
 800e518:	4413      	add	r3, r2
 800e51a:	b29b      	uxth	r3, r3
 800e51c:	3301      	adds	r3, #1
 800e51e:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 800e520:	69fb      	ldr	r3, [r7, #28]
 800e522:	3301      	adds	r3, #1
 800e524:	011b      	lsls	r3, r3, #4
 800e526:	4a71      	ldr	r2, [pc, #452]	; (800e6ec <updateUint16Item+0xfcc>)
 800e528:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e52a:	2300      	movs	r3, #0
 800e52c:	9301      	str	r3, [sp, #4]
 800e52e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e532:	9300      	str	r3, [sp, #0]
 800e534:	4b6e      	ldr	r3, [pc, #440]	; (800e6f0 <updateUint16Item+0xfd0>)
 800e536:	f7fa feed 	bl	8009314 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e53a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e53e:	b29a      	uxth	r2, r3
 800e540:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e544:	085b      	lsrs	r3, r3, #1
 800e546:	b2db      	uxtb	r3, r3
 800e548:	b29b      	uxth	r3, r3
 800e54a:	4413      	add	r3, r2
 800e54c:	b29b      	uxth	r3, r3
 800e54e:	3301      	adds	r3, #1
 800e550:	b298      	uxth	r0, r3
 800e552:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e556:	b29a      	uxth	r2, r3
 800e558:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e55c:	b299      	uxth	r1, r3
 800e55e:	69fb      	ldr	r3, [r7, #28]
 800e560:	b29b      	uxth	r3, r3
 800e562:	fb11 f303 	smulbb	r3, r1, r3
 800e566:	b29b      	uxth	r3, r3
 800e568:	4413      	add	r3, r2
 800e56a:	b29b      	uxth	r3, r3
 800e56c:	3301      	adds	r3, #1
 800e56e:	b299      	uxth	r1, r3
 800e570:	f107 020c 	add.w	r2, r7, #12
 800e574:	2300      	movs	r3, #0
 800e576:	9301      	str	r3, [sp, #4]
 800e578:	f24c 6318 	movw	r3, #50712	; 0xc618
 800e57c:	9300      	str	r3, [sp, #0]
 800e57e:	4b5c      	ldr	r3, [pc, #368]	; (800e6f0 <updateUint16Item+0xfd0>)
 800e580:	f7fa fec8 	bl	8009314 <Paint_DrawString_EN>
 800e584:	e147      	b.n	800e816 <updateUint16Item+0x10f6>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == DOWN)
 800e586:	79fb      	ldrb	r3, [r7, #7]
 800e588:	2b01      	cmp	r3, #1
 800e58a:	d155      	bne.n	800e638 <updateUint16Item+0xf18>
					{
						if (multiplierIndex >= 1)
 800e58c:	4b59      	ldr	r3, [pc, #356]	; (800e6f4 <updateUint16Item+0xfd4>)
 800e58e:	781b      	ldrb	r3, [r3, #0]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d017      	beq.n	800e5c4 <updateUint16Item+0xea4>
						{
							multiplierIndex = fmax(multiplierIndex - 1, 0);
 800e594:	4b57      	ldr	r3, [pc, #348]	; (800e6f4 <updateUint16Item+0xfd4>)
 800e596:	781b      	ldrb	r3, [r3, #0]
 800e598:	3b01      	subs	r3, #1
 800e59a:	ee07 3a90 	vmov	s15, r3
 800e59e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e5a2:	ed9f 1b4f 	vldr	d1, [pc, #316]	; 800e6e0 <updateUint16Item+0xfc0>
 800e5a6:	eeb0 0b47 	vmov.f64	d0, d7
 800e5aa:	f006 fb7b 	bl	8014ca4 <fmax>
 800e5ae:	eeb0 7b40 	vmov.f64	d7, d0
 800e5b2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800e5b6:	edc7 7a00 	vstr	s15, [r7]
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	b2da      	uxtb	r2, r3
 800e5be:	4b4d      	ldr	r3, [pc, #308]	; (800e6f4 <updateUint16Item+0xfd4>)
 800e5c0:	701a      	strb	r2, [r3, #0]
 800e5c2:	e002      	b.n	800e5ca <updateUint16Item+0xeaa>
						}
						else
						{
							multiplierIndex = 0;
 800e5c4:	4b4b      	ldr	r3, [pc, #300]	; (800e6f4 <updateUint16Item+0xfd4>)
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	701a      	strb	r2, [r3, #0]
						}
						uint16Item.deltaMultiplier = uint16MultiplierArray[multiplierIndex];
 800e5ca:	4b4a      	ldr	r3, [pc, #296]	; (800e6f4 <updateUint16Item+0xfd4>)
 800e5cc:	781b      	ldrb	r3, [r3, #0]
 800e5ce:	461a      	mov	r2, r3
 800e5d0:	4b49      	ldr	r3, [pc, #292]	; (800e6f8 <updateUint16Item+0xfd8>)
 800e5d2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800e5d6:	4b45      	ldr	r3, [pc, #276]	; (800e6ec <updateUint16Item+0xfcc>)
 800e5d8:	819a      	strh	r2, [r3, #12]
						sprintf(localString,"%04d",uint16Item.deltaMultiplier);
 800e5da:	4b44      	ldr	r3, [pc, #272]	; (800e6ec <updateUint16Item+0xfcc>)
 800e5dc:	899b      	ldrh	r3, [r3, #12]
 800e5de:	461a      	mov	r2, r3
 800e5e0:	f107 030c 	add.w	r3, r7, #12
 800e5e4:	4945      	ldr	r1, [pc, #276]	; (800e6fc <updateUint16Item+0xfdc>)
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f002 ffe0 	bl	80115ac <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e5ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5f0:	b29a      	uxth	r2, r3
 800e5f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e5f6:	085b      	lsrs	r3, r3, #1
 800e5f8:	b2db      	uxtb	r3, r3
 800e5fa:	b29b      	uxth	r3, r3
 800e5fc:	4413      	add	r3, r2
 800e5fe:	b29b      	uxth	r3, r3
 800e600:	3301      	adds	r3, #1
 800e602:	b298      	uxth	r0, r3
 800e604:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e608:	b29a      	uxth	r2, r3
 800e60a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e60e:	b299      	uxth	r1, r3
 800e610:	69fb      	ldr	r3, [r7, #28]
 800e612:	b29b      	uxth	r3, r3
 800e614:	fb11 f303 	smulbb	r3, r1, r3
 800e618:	b29b      	uxth	r3, r3
 800e61a:	4413      	add	r3, r2
 800e61c:	b29b      	uxth	r3, r3
 800e61e:	3301      	adds	r3, #1
 800e620:	b299      	uxth	r1, r3
 800e622:	f107 020c 	add.w	r2, r7, #12
 800e626:	2300      	movs	r3, #0
 800e628:	9301      	str	r3, [sp, #4]
 800e62a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800e62e:	9300      	str	r3, [sp, #0]
 800e630:	4b2f      	ldr	r3, [pc, #188]	; (800e6f0 <updateUint16Item+0xfd0>)
 800e632:	f7fa fe6f 	bl	8009314 <Paint_DrawString_EN>
 800e636:	e0ee      	b.n	800e816 <updateUint16Item+0x10f6>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == UP)
 800e638:	79fb      	ldrb	r3, [r7, #7]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	f040 80eb 	bne.w	800e816 <updateUint16Item+0x10f6>
					{
						multiplierIndex = fmin(multiplierIndex + 1, 7);
 800e640:	4b2c      	ldr	r3, [pc, #176]	; (800e6f4 <updateUint16Item+0xfd4>)
 800e642:	781b      	ldrb	r3, [r3, #0]
 800e644:	3301      	adds	r3, #1
 800e646:	ee07 3a90 	vmov	s15, r3
 800e64a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e64e:	eeb1 1b0c 	vmov.f64	d1, #28	; 0x40e00000  7.0
 800e652:	eeb0 0b47 	vmov.f64	d0, d7
 800e656:	f006 fb40 	bl	8014cda <fmin>
 800e65a:	eeb0 7b40 	vmov.f64	d7, d0
 800e65e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800e662:	edc7 7a00 	vstr	s15, [r7]
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	b2da      	uxtb	r2, r3
 800e66a:	4b22      	ldr	r3, [pc, #136]	; (800e6f4 <updateUint16Item+0xfd4>)
 800e66c:	701a      	strb	r2, [r3, #0]
						uint16Item.deltaMultiplier = uint16MultiplierArray[multiplierIndex];
 800e66e:	4b21      	ldr	r3, [pc, #132]	; (800e6f4 <updateUint16Item+0xfd4>)
 800e670:	781b      	ldrb	r3, [r3, #0]
 800e672:	461a      	mov	r2, r3
 800e674:	4b20      	ldr	r3, [pc, #128]	; (800e6f8 <updateUint16Item+0xfd8>)
 800e676:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800e67a:	4b1c      	ldr	r3, [pc, #112]	; (800e6ec <updateUint16Item+0xfcc>)
 800e67c:	819a      	strh	r2, [r3, #12]
						sprintf(localString,"%04d",uint16Item.deltaMultiplier);
 800e67e:	4b1b      	ldr	r3, [pc, #108]	; (800e6ec <updateUint16Item+0xfcc>)
 800e680:	899b      	ldrh	r3, [r3, #12]
 800e682:	461a      	mov	r2, r3
 800e684:	f107 030c 	add.w	r3, r7, #12
 800e688:	491c      	ldr	r1, [pc, #112]	; (800e6fc <updateUint16Item+0xfdc>)
 800e68a:	4618      	mov	r0, r3
 800e68c:	f002 ff8e 	bl	80115ac <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e694:	b29a      	uxth	r2, r3
 800e696:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e69a:	085b      	lsrs	r3, r3, #1
 800e69c:	b2db      	uxtb	r3, r3
 800e69e:	b29b      	uxth	r3, r3
 800e6a0:	4413      	add	r3, r2
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	3301      	adds	r3, #1
 800e6a6:	b298      	uxth	r0, r3
 800e6a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e6ac:	b29a      	uxth	r2, r3
 800e6ae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e6b2:	b299      	uxth	r1, r3
 800e6b4:	69fb      	ldr	r3, [r7, #28]
 800e6b6:	b29b      	uxth	r3, r3
 800e6b8:	fb11 f303 	smulbb	r3, r1, r3
 800e6bc:	b29b      	uxth	r3, r3
 800e6be:	4413      	add	r3, r2
 800e6c0:	b29b      	uxth	r3, r3
 800e6c2:	3301      	adds	r3, #1
 800e6c4:	b299      	uxth	r1, r3
 800e6c6:	f107 020c 	add.w	r2, r7, #12
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	9301      	str	r3, [sp, #4]
 800e6ce:	f24c 6318 	movw	r3, #50712	; 0xc618
 800e6d2:	9300      	str	r3, [sp, #0]
 800e6d4:	4b06      	ldr	r3, [pc, #24]	; (800e6f0 <updateUint16Item+0xfd0>)
 800e6d6:	f7fa fe1d 	bl	8009314 <Paint_DrawString_EN>
 800e6da:	e09c      	b.n	800e816 <updateUint16Item+0x10f6>
 800e6dc:	f3af 8000 	nop.w
	...
 800e6e8:	2400a5bc 	.word	0x2400a5bc
 800e6ec:	2400ae1c 	.word	0x2400ae1c
 800e6f0:	24000018 	.word	0x24000018
 800e6f4:	2400a0d8 	.word	0x2400a0d8
 800e6f8:	2400a0dc 	.word	0x2400a0dc
 800e6fc:	08015434 	.word	0x08015434
					//									localString, &Font12, WHITE,  BLACK);
					//						}
				}
				else
				{
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800e700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e704:	b29b      	uxth	r3, r3
 800e706:	3301      	adds	r3, #1
 800e708:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e70a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e70e:	b29a      	uxth	r2, r3
 800e710:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e714:	b299      	uxth	r1, r3
 800e716:	69fb      	ldr	r3, [r7, #28]
 800e718:	b29b      	uxth	r3, r3
 800e71a:	fb11 f303 	smulbb	r3, r1, r3
 800e71e:	b29b      	uxth	r3, r3
 800e720:	4413      	add	r3, r2
 800e722:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800e724:	3301      	adds	r3, #1
 800e726:	b29e      	uxth	r6, r3
							MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 800e728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e72c:	b29c      	uxth	r4, r3
 800e72e:	69fb      	ldr	r3, [r7, #28]
 800e730:	3301      	adds	r3, #1
 800e732:	011b      	lsls	r3, r3, #4
 800e734:	4a9c      	ldr	r2, [pc, #624]	; (800e9a8 <updateUint16Item+0x1288>)
 800e736:	4413      	add	r3, r2
 800e738:	4618      	mov	r0, r3
 800e73a:	f7f1 fddb 	bl	80002f4 <strlen>
 800e73e:	4603      	mov	r3, r0
 800e740:	b29a      	uxth	r2, r3
 800e742:	4b9a      	ldr	r3, [pc, #616]	; (800e9ac <updateUint16Item+0x128c>)
 800e744:	889b      	ldrh	r3, [r3, #4]
 800e746:	fb12 f303 	smulbb	r3, r2, r3
 800e74a:	b29b      	uxth	r3, r3
 800e74c:	4423      	add	r3, r4
 800e74e:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800e750:	3301      	adds	r3, #1
 800e752:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800e754:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e758:	b29a      	uxth	r2, r3
 800e75a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e75e:	b299      	uxth	r1, r3
 800e760:	69fb      	ldr	r3, [r7, #28]
 800e762:	b29b      	uxth	r3, r3
 800e764:	fb11 f303 	smulbb	r3, r1, r3
 800e768:	b29b      	uxth	r3, r3
 800e76a:	4413      	add	r3, r2
 800e76c:	b29a      	uxth	r2, r3
 800e76e:	4b8f      	ldr	r3, [pc, #572]	; (800e9ac <updateUint16Item+0x128c>)
 800e770:	88db      	ldrh	r3, [r3, #6]
 800e772:	4413      	add	r3, r2
 800e774:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800e776:	3301      	adds	r3, #1
 800e778:	b29b      	uxth	r3, r3
 800e77a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e77e:	9200      	str	r2, [sp, #0]
 800e780:	4602      	mov	r2, r0
 800e782:	4631      	mov	r1, r6
 800e784:	4628      	mov	r0, r5
 800e786:	f7fa f9a7 	bl	8008ad8 <Paint_ClearWindows>
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e78a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e78e:	b29b      	uxth	r3, r3
 800e790:	3301      	adds	r3, #1
 800e792:	b298      	uxth	r0, r3
 800e794:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e798:	b29a      	uxth	r2, r3
 800e79a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e79e:	b299      	uxth	r1, r3
 800e7a0:	69fb      	ldr	r3, [r7, #28]
 800e7a2:	b29b      	uxth	r3, r3
 800e7a4:	fb11 f303 	smulbb	r3, r1, r3
 800e7a8:	b29b      	uxth	r3, r3
 800e7aa:	4413      	add	r3, r2
 800e7ac:	b29b      	uxth	r3, r3
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	b299      	uxth	r1, r3
							uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 800e7b2:	69fb      	ldr	r3, [r7, #28]
 800e7b4:	3301      	adds	r3, #1
 800e7b6:	011b      	lsls	r3, r3, #4
 800e7b8:	4a7b      	ldr	r2, [pc, #492]	; (800e9a8 <updateUint16Item+0x1288>)
 800e7ba:	441a      	add	r2, r3
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e7bc:	2300      	movs	r3, #0
 800e7be:	9301      	str	r3, [sp, #4]
 800e7c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e7c4:	9300      	str	r3, [sp, #0]
 800e7c6:	4b79      	ldr	r3, [pc, #484]	; (800e9ac <updateUint16Item+0x128c>)
 800e7c8:	f7fa fda4 	bl	8009314 <Paint_DrawString_EN>
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800e7cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7d0:	b29a      	uxth	r2, r3
 800e7d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e7d6:	085b      	lsrs	r3, r3, #1
 800e7d8:	b2db      	uxtb	r3, r3
 800e7da:	b29b      	uxth	r3, r3
 800e7dc:	4413      	add	r3, r2
 800e7de:	b29b      	uxth	r3, r3
 800e7e0:	3301      	adds	r3, #1
 800e7e2:	b298      	uxth	r0, r3
 800e7e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e7e8:	b29a      	uxth	r2, r3
 800e7ea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e7ee:	b299      	uxth	r1, r3
 800e7f0:	69fb      	ldr	r3, [r7, #28]
 800e7f2:	b29b      	uxth	r3, r3
 800e7f4:	fb11 f303 	smulbb	r3, r1, r3
 800e7f8:	b29b      	uxth	r3, r3
 800e7fa:	4413      	add	r3, r2
 800e7fc:	b29b      	uxth	r3, r3
 800e7fe:	3301      	adds	r3, #1
 800e800:	b299      	uxth	r1, r3
 800e802:	f107 020c 	add.w	r2, r7, #12
 800e806:	2300      	movs	r3, #0
 800e808:	9301      	str	r3, [sp, #4]
 800e80a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e80e:	9300      	str	r3, [sp, #0]
 800e810:	4b66      	ldr	r3, [pc, #408]	; (800e9ac <updateUint16Item+0x128c>)
 800e812:	f7fa fd7f 	bl	8009314 <Paint_DrawString_EN>
			}
		}
		//			Paint_DrawRectangle( HorizontalMenuRectangleStartX + HorizontalMenuRectangleWidth / 2, HorizontalMenuRectangleStartY + HorizontalMenuRectangleHeight * (i + 1),
		//					HorizontalMenuRectangleStartX + HorizontalMenuRectangleWidth, HorizontalMenuRectangleStartY + HorizontalMenuRectangleHeight * (i + 2),
		//					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
		if ( (i >= uint16Item.numberOfItemsInPage - 2) && (i < uint16Item.numberOfItemsInPage) )
 800e816:	4b64      	ldr	r3, [pc, #400]	; (800e9a8 <updateUint16Item+0x1288>)
 800e818:	7bdb      	ldrb	r3, [r3, #15]
 800e81a:	3b02      	subs	r3, #2
 800e81c:	69fa      	ldr	r2, [r7, #28]
 800e81e:	429a      	cmp	r2, r3
 800e820:	f2c0 8299 	blt.w	800ed56 <updateUint16Item+0x1636>
 800e824:	4b60      	ldr	r3, [pc, #384]	; (800e9a8 <updateUint16Item+0x1288>)
 800e826:	7bdb      	ldrb	r3, [r3, #15]
 800e828:	461a      	mov	r2, r3
 800e82a:	69fb      	ldr	r3, [r7, #28]
 800e82c:	4293      	cmp	r3, r2
 800e82e:	f280 8292 	bge.w	800ed56 <updateUint16Item+0x1636>
		{
			if (howToDraw == FULL)
 800e832:	79fb      	ldrb	r3, [r7, #7]
 800e834:	2b02      	cmp	r3, #2
 800e836:	f040 8084 	bne.w	800e942 <updateUint16Item+0x1222>
			{
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800e83a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e83e:	b298      	uxth	r0, r3
 800e840:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e844:	b29a      	uxth	r2, r3
 800e846:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e84a:	b299      	uxth	r1, r3
 800e84c:	69fb      	ldr	r3, [r7, #28]
 800e84e:	b29b      	uxth	r3, r3
 800e850:	fb11 f303 	smulbb	r3, r1, r3
 800e854:	b29b      	uxth	r3, r3
 800e856:	4413      	add	r3, r2
 800e858:	b29c      	uxth	r4, r3
 800e85a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e85e:	b29a      	uxth	r2, r3
 800e860:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e864:	b29b      	uxth	r3, r3
 800e866:	4413      	add	r3, r2
 800e868:	b29d      	uxth	r5, r3
 800e86a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e86e:	b29a      	uxth	r2, r3
 800e870:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e874:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 800e876:	69fb      	ldr	r3, [r7, #28]
 800e878:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800e87a:	b29b      	uxth	r3, r3
 800e87c:	fb11 f303 	smulbb	r3, r1, r3
 800e880:	b29b      	uxth	r3, r3
 800e882:	4413      	add	r3, r2
 800e884:	b29b      	uxth	r3, r3
 800e886:	2200      	movs	r2, #0
 800e888:	9202      	str	r2, [sp, #8]
 800e88a:	2201      	movs	r2, #1
 800e88c:	9201      	str	r2, [sp, #4]
 800e88e:	2200      	movs	r2, #0
 800e890:	9200      	str	r2, [sp, #0]
 800e892:	462a      	mov	r2, r5
 800e894:	4621      	mov	r1, r4
 800e896:	f7fa fa99 	bl	8008dcc <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
				if (currentCursorPosition.cursorPosition == i)
 800e89a:	4b45      	ldr	r3, [pc, #276]	; (800e9b0 <updateUint16Item+0x1290>)
 800e89c:	781b      	ldrb	r3, [r3, #0]
 800e89e:	461a      	mov	r2, r3
 800e8a0:	69fb      	ldr	r3, [r7, #28]
 800e8a2:	4293      	cmp	r3, r2
 800e8a4:	d126      	bne.n	800e8f4 <updateUint16Item+0x11d4>
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800e8a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e8aa:	b29c      	uxth	r4, r3
 800e8ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e8b0:	b29a      	uxth	r2, r3
 800e8b2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e8b6:	b299      	uxth	r1, r3
 800e8b8:	69fb      	ldr	r3, [r7, #28]
 800e8ba:	b29b      	uxth	r3, r3
 800e8bc:	fb11 f303 	smulbb	r3, r1, r3
 800e8c0:	b29b      	uxth	r3, r3
 800e8c2:	4413      	add	r3, r2
 800e8c4:	b29b      	uxth	r3, r3
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i], BLACK, LGRAY, 16, Font12);
 800e8ca:	69fb      	ldr	r3, [r7, #28]
 800e8cc:	3301      	adds	r3, #1
 800e8ce:	011b      	lsls	r3, r3, #4
 800e8d0:	4a35      	ldr	r2, [pc, #212]	; (800e9a8 <updateUint16Item+0x1288>)
 800e8d2:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800e8d4:	4935      	ldr	r1, [pc, #212]	; (800e9ac <updateUint16Item+0x128c>)
 800e8d6:	ab02      	add	r3, sp, #8
 800e8d8:	c903      	ldmia	r1, {r0, r1}
 800e8da:	e883 0003 	stmia.w	r3, {r0, r1}
 800e8de:	2310      	movs	r3, #16
 800e8e0:	9301      	str	r3, [sp, #4]
 800e8e2:	f24c 6318 	movw	r3, #50712	; 0xc618
 800e8e6:	9300      	str	r3, [sp, #0]
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	4629      	mov	r1, r5
 800e8ec:	4620      	mov	r0, r4
 800e8ee:	f7fd fe17 	bl	800c520 <centeredString>
 800e8f2:	e230      	b.n	800ed56 <updateUint16Item+0x1636>
				}
				else
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800e8f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e8f8:	b29c      	uxth	r4, r3
 800e8fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e8fe:	b29a      	uxth	r2, r3
 800e900:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e904:	b299      	uxth	r1, r3
 800e906:	69fb      	ldr	r3, [r7, #28]
 800e908:	b29b      	uxth	r3, r3
 800e90a:	fb11 f303 	smulbb	r3, r1, r3
 800e90e:	b29b      	uxth	r3, r3
 800e910:	4413      	add	r3, r2
 800e912:	b29b      	uxth	r3, r3
 800e914:	3301      	adds	r3, #1
 800e916:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i], BLACK, WHITE, 16, Font12);
 800e918:	69fb      	ldr	r3, [r7, #28]
 800e91a:	3301      	adds	r3, #1
 800e91c:	011b      	lsls	r3, r3, #4
 800e91e:	4a22      	ldr	r2, [pc, #136]	; (800e9a8 <updateUint16Item+0x1288>)
 800e920:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800e922:	4922      	ldr	r1, [pc, #136]	; (800e9ac <updateUint16Item+0x128c>)
 800e924:	ab02      	add	r3, sp, #8
 800e926:	c903      	ldmia	r1, {r0, r1}
 800e928:	e883 0003 	stmia.w	r3, {r0, r1}
 800e92c:	2310      	movs	r3, #16
 800e92e:	9301      	str	r3, [sp, #4]
 800e930:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e934:	9300      	str	r3, [sp, #0]
 800e936:	2300      	movs	r3, #0
 800e938:	4629      	mov	r1, r5
 800e93a:	4620      	mov	r0, r4
 800e93c:	f7fd fdf0 	bl	800c520 <centeredString>
 800e940:	e209      	b.n	800ed56 <updateUint16Item+0x1636>
				}
			}
			else if (howToDraw == DOWN)
 800e942:	79fb      	ldrb	r3, [r7, #7]
 800e944:	2b01      	cmp	r3, #1
 800e946:	f040 80d1 	bne.w	800eaec <updateUint16Item+0x13cc>
			{
				if ( (currentCursorPosition.cursorPosition == 4) && (i == 4) )
 800e94a:	4b19      	ldr	r3, [pc, #100]	; (800e9b0 <updateUint16Item+0x1290>)
 800e94c:	781b      	ldrb	r3, [r3, #0]
 800e94e:	2b04      	cmp	r3, #4
 800e950:	d130      	bne.n	800e9b4 <updateUint16Item+0x1294>
 800e952:	69fb      	ldr	r3, [r7, #28]
 800e954:	2b04      	cmp	r3, #4
 800e956:	d12d      	bne.n	800e9b4 <updateUint16Item+0x1294>
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800e958:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e95c:	b29c      	uxth	r4, r3
 800e95e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e962:	b29a      	uxth	r2, r3
 800e964:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e968:	b299      	uxth	r1, r3
 800e96a:	69fb      	ldr	r3, [r7, #28]
 800e96c:	b29b      	uxth	r3, r3
 800e96e:	fb11 f303 	smulbb	r3, r1, r3
 800e972:	b29b      	uxth	r3, r3
 800e974:	4413      	add	r3, r2
 800e976:	b29b      	uxth	r3, r3
 800e978:	3301      	adds	r3, #1
 800e97a:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i], BLACK, LGRAY, 16, Font12);
 800e97c:	69fb      	ldr	r3, [r7, #28]
 800e97e:	3301      	adds	r3, #1
 800e980:	011b      	lsls	r3, r3, #4
 800e982:	4a09      	ldr	r2, [pc, #36]	; (800e9a8 <updateUint16Item+0x1288>)
 800e984:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800e986:	4909      	ldr	r1, [pc, #36]	; (800e9ac <updateUint16Item+0x128c>)
 800e988:	ab02      	add	r3, sp, #8
 800e98a:	c903      	ldmia	r1, {r0, r1}
 800e98c:	e883 0003 	stmia.w	r3, {r0, r1}
 800e990:	2310      	movs	r3, #16
 800e992:	9301      	str	r3, [sp, #4]
 800e994:	f24c 6318 	movw	r3, #50712	; 0xc618
 800e998:	9300      	str	r3, [sp, #0]
 800e99a:	2300      	movs	r3, #0
 800e99c:	4629      	mov	r1, r5
 800e99e:	4620      	mov	r0, r4
 800e9a0:	f7fd fdbe 	bl	800c520 <centeredString>
 800e9a4:	e1d7      	b.n	800ed56 <updateUint16Item+0x1636>
 800e9a6:	bf00      	nop
 800e9a8:	2400ae1c 	.word	0x2400ae1c
 800e9ac:	24000018 	.word	0x24000018
 800e9b0:	2400a5bc 	.word	0x2400a5bc
				}
				else if ( (currentCursorPosition.cursorPosition == 5) && (i == 5) )
 800e9b4:	4b90      	ldr	r3, [pc, #576]	; (800ebf8 <updateUint16Item+0x14d8>)
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	2b05      	cmp	r3, #5
 800e9ba:	f040 81cc 	bne.w	800ed56 <updateUint16Item+0x1636>
 800e9be:	69fb      	ldr	r3, [r7, #28]
 800e9c0:	2b05      	cmp	r3, #5
 800e9c2:	f040 81c8 	bne.w	800ed56 <updateUint16Item+0x1636>
				{
					Paint_ClearWindows(DisplayCenterWidth,
 800e9c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e9ca:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 800e9cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e9d0:	b29a      	uxth	r2, r3
 800e9d2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e9d6:	b299      	uxth	r1, r3
 800e9d8:	69fb      	ldr	r3, [r7, #28]
 800e9da:	3b01      	subs	r3, #1
 800e9dc:	b29b      	uxth	r3, r3
 800e9de:	fb11 f303 	smulbb	r3, r1, r3
 800e9e2:	b29b      	uxth	r3, r3
 800e9e4:	4413      	add	r3, r2
 800e9e6:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth,
 800e9e8:	3301      	adds	r3, #1
 800e9ea:	b29e      	uxth	r6, r3
 800e9ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e9f0:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(uint16Item.itemsArray[i - 1]) * Font12.Width,
 800e9f2:	69fb      	ldr	r3, [r7, #28]
 800e9f4:	3b01      	subs	r3, #1
 800e9f6:	3301      	adds	r3, #1
 800e9f8:	011b      	lsls	r3, r3, #4
 800e9fa:	4a80      	ldr	r2, [pc, #512]	; (800ebfc <updateUint16Item+0x14dc>)
 800e9fc:	4413      	add	r3, r2
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f7f1 fc78 	bl	80002f4 <strlen>
 800ea04:	4603      	mov	r3, r0
					Paint_ClearWindows(DisplayCenterWidth,
 800ea06:	b29a      	uxth	r2, r3
							DisplayCenterWidth + strlen(uint16Item.itemsArray[i - 1]) * Font12.Width,
 800ea08:	4b7d      	ldr	r3, [pc, #500]	; (800ec00 <updateUint16Item+0x14e0>)
 800ea0a:	889b      	ldrh	r3, [r3, #4]
					Paint_ClearWindows(DisplayCenterWidth,
 800ea0c:	fb12 f303 	smulbb	r3, r2, r3
 800ea10:	b29b      	uxth	r3, r3
 800ea12:	4423      	add	r3, r4
 800ea14:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1 + Font12.Height, WHITE);
 800ea16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea1a:	b29a      	uxth	r2, r3
 800ea1c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ea20:	b299      	uxth	r1, r3
 800ea22:	69fb      	ldr	r3, [r7, #28]
 800ea24:	3b01      	subs	r3, #1
 800ea26:	b29b      	uxth	r3, r3
 800ea28:	fb11 f303 	smulbb	r3, r1, r3
 800ea2c:	b29b      	uxth	r3, r3
 800ea2e:	4413      	add	r3, r2
 800ea30:	b29a      	uxth	r2, r3
 800ea32:	4b73      	ldr	r3, [pc, #460]	; (800ec00 <updateUint16Item+0x14e0>)
 800ea34:	88db      	ldrh	r3, [r3, #6]
 800ea36:	4413      	add	r3, r2
 800ea38:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth,
 800ea3a:	3301      	adds	r3, #1
 800ea3c:	b29b      	uxth	r3, r3
 800ea3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea42:	9200      	str	r2, [sp, #0]
 800ea44:	4602      	mov	r2, r0
 800ea46:	4631      	mov	r1, r6
 800ea48:	4628      	mov	r0, r5
 800ea4a:	f7fa f845 	bl	8008ad8 <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 800ea4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ea52:	b29c      	uxth	r4, r3
 800ea54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea58:	b29a      	uxth	r2, r3
 800ea5a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ea5e:	b299      	uxth	r1, r3
 800ea60:	69fb      	ldr	r3, [r7, #28]
 800ea62:	3b01      	subs	r3, #1
 800ea64:	b29b      	uxth	r3, r3
 800ea66:	fb11 f303 	smulbb	r3, r1, r3
 800ea6a:	b29b      	uxth	r3, r3
 800ea6c:	4413      	add	r3, r2
 800ea6e:	b29b      	uxth	r3, r3
 800ea70:	3301      	adds	r3, #1
 800ea72:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[(i - 1)], BLACK, WHITE, 16, Font12);
 800ea74:	69fb      	ldr	r3, [r7, #28]
 800ea76:	3b01      	subs	r3, #1
 800ea78:	3301      	adds	r3, #1
 800ea7a:	011b      	lsls	r3, r3, #4
 800ea7c:	4a5f      	ldr	r2, [pc, #380]	; (800ebfc <updateUint16Item+0x14dc>)
 800ea7e:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 800ea80:	495f      	ldr	r1, [pc, #380]	; (800ec00 <updateUint16Item+0x14e0>)
 800ea82:	ab02      	add	r3, sp, #8
 800ea84:	c903      	ldmia	r1, {r0, r1}
 800ea86:	e883 0003 	stmia.w	r3, {r0, r1}
 800ea8a:	2310      	movs	r3, #16
 800ea8c:	9301      	str	r3, [sp, #4]
 800ea8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ea92:	9300      	str	r3, [sp, #0]
 800ea94:	2300      	movs	r3, #0
 800ea96:	4629      	mov	r1, r5
 800ea98:	4620      	mov	r0, r4
 800ea9a:	f7fd fd41 	bl	800c520 <centeredString>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800ea9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eaa2:	b29c      	uxth	r4, r3
 800eaa4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eaa8:	b29a      	uxth	r2, r3
 800eaaa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800eaae:	b299      	uxth	r1, r3
 800eab0:	69fb      	ldr	r3, [r7, #28]
 800eab2:	b29b      	uxth	r3, r3
 800eab4:	fb11 f303 	smulbb	r3, r1, r3
 800eab8:	b29b      	uxth	r3, r3
 800eaba:	4413      	add	r3, r2
 800eabc:	b29b      	uxth	r3, r3
 800eabe:	3301      	adds	r3, #1
 800eac0:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i], BLACK, LGRAY, 16, Font12);
 800eac2:	69fb      	ldr	r3, [r7, #28]
 800eac4:	3301      	adds	r3, #1
 800eac6:	011b      	lsls	r3, r3, #4
 800eac8:	4a4c      	ldr	r2, [pc, #304]	; (800ebfc <updateUint16Item+0x14dc>)
 800eaca:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800eacc:	494c      	ldr	r1, [pc, #304]	; (800ec00 <updateUint16Item+0x14e0>)
 800eace:	ab02      	add	r3, sp, #8
 800ead0:	c903      	ldmia	r1, {r0, r1}
 800ead2:	e883 0003 	stmia.w	r3, {r0, r1}
 800ead6:	2310      	movs	r3, #16
 800ead8:	9301      	str	r3, [sp, #4]
 800eada:	f24c 6318 	movw	r3, #50712	; 0xc618
 800eade:	9300      	str	r3, [sp, #0]
 800eae0:	2300      	movs	r3, #0
 800eae2:	4629      	mov	r1, r5
 800eae4:	4620      	mov	r0, r4
 800eae6:	f7fd fd1b 	bl	800c520 <centeredString>
 800eaea:	e134      	b.n	800ed56 <updateUint16Item+0x1636>
				}
			}
			else if (howToDraw == UP)
 800eaec:	79fb      	ldrb	r3, [r7, #7]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	f040 8131 	bne.w	800ed56 <updateUint16Item+0x1636>
			{
				if ( (currentCursorPosition.cursorPosition == 3) && (i == 4) )
 800eaf4:	4b40      	ldr	r3, [pc, #256]	; (800ebf8 <updateUint16Item+0x14d8>)
 800eaf6:	781b      	ldrb	r3, [r3, #0]
 800eaf8:	2b03      	cmp	r3, #3
 800eafa:	f040 8083 	bne.w	800ec04 <updateUint16Item+0x14e4>
 800eafe:	69fb      	ldr	r3, [r7, #28]
 800eb00:	2b04      	cmp	r3, #4
 800eb02:	d17f      	bne.n	800ec04 <updateUint16Item+0x14e4>
				{
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 800eb04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eb08:	b29c      	uxth	r4, r3
 800eb0a:	69fb      	ldr	r3, [r7, #28]
 800eb0c:	3301      	adds	r3, #1
 800eb0e:	011b      	lsls	r3, r3, #4
 800eb10:	4a3a      	ldr	r2, [pc, #232]	; (800ebfc <updateUint16Item+0x14dc>)
 800eb12:	4413      	add	r3, r2
 800eb14:	4618      	mov	r0, r3
 800eb16:	f7f1 fbed 	bl	80002f4 <strlen>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	4a38      	ldr	r2, [pc, #224]	; (800ec00 <updateUint16Item+0x14e0>)
 800eb1e:	8892      	ldrh	r2, [r2, #4]
 800eb20:	fb02 f303 	mul.w	r3, r2, r3
 800eb24:	085b      	lsrs	r3, r3, #1
 800eb26:	b29b      	uxth	r3, r3
 800eb28:	1ae3      	subs	r3, r4, r3
 800eb2a:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800eb2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eb30:	b29a      	uxth	r2, r3
 800eb32:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800eb36:	b299      	uxth	r1, r3
 800eb38:	69fb      	ldr	r3, [r7, #28]
 800eb3a:	b29b      	uxth	r3, r3
 800eb3c:	fb11 f303 	smulbb	r3, r1, r3
 800eb40:	b29b      	uxth	r3, r3
 800eb42:	4413      	add	r3, r2
 800eb44:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 800eb46:	3301      	adds	r3, #1
 800eb48:	b29e      	uxth	r6, r3
 800eb4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eb4e:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(uint16Item.itemsArray[i]) * Font12.Width /2,
 800eb50:	69fb      	ldr	r3, [r7, #28]
 800eb52:	3301      	adds	r3, #1
 800eb54:	011b      	lsls	r3, r3, #4
 800eb56:	4a29      	ldr	r2, [pc, #164]	; (800ebfc <updateUint16Item+0x14dc>)
 800eb58:	4413      	add	r3, r2
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f7f1 fbca 	bl	80002f4 <strlen>
 800eb60:	4603      	mov	r3, r0
 800eb62:	4a27      	ldr	r2, [pc, #156]	; (800ec00 <updateUint16Item+0x14e0>)
 800eb64:	8892      	ldrh	r2, [r2, #4]
 800eb66:	fb02 f303 	mul.w	r3, r2, r3
 800eb6a:	085b      	lsrs	r3, r3, #1
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 800eb6c:	b29b      	uxth	r3, r3
 800eb6e:	4423      	add	r3, r4
 800eb70:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800eb72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eb76:	b29a      	uxth	r2, r3
 800eb78:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800eb7c:	b299      	uxth	r1, r3
 800eb7e:	69fb      	ldr	r3, [r7, #28]
 800eb80:	b29b      	uxth	r3, r3
 800eb82:	fb11 f303 	smulbb	r3, r1, r3
 800eb86:	b29b      	uxth	r3, r3
 800eb88:	4413      	add	r3, r2
 800eb8a:	b29a      	uxth	r2, r3
 800eb8c:	4b1c      	ldr	r3, [pc, #112]	; (800ec00 <updateUint16Item+0x14e0>)
 800eb8e:	88db      	ldrh	r3, [r3, #6]
 800eb90:	4413      	add	r3, r2
 800eb92:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 800eb94:	3301      	adds	r3, #1
 800eb96:	b29b      	uxth	r3, r3
 800eb98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb9c:	9200      	str	r2, [sp, #0]
 800eb9e:	4602      	mov	r2, r0
 800eba0:	4631      	mov	r1, r6
 800eba2:	4628      	mov	r0, r5
 800eba4:	f7f9 ff98 	bl	8008ad8 <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800eba8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ebac:	b29c      	uxth	r4, r3
 800ebae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ebb2:	b29a      	uxth	r2, r3
 800ebb4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ebb8:	b299      	uxth	r1, r3
 800ebba:	69fb      	ldr	r3, [r7, #28]
 800ebbc:	b29b      	uxth	r3, r3
 800ebbe:	fb11 f303 	smulbb	r3, r1, r3
 800ebc2:	b29b      	uxth	r3, r3
 800ebc4:	4413      	add	r3, r2
 800ebc6:	b29b      	uxth	r3, r3
 800ebc8:	3301      	adds	r3, #1
 800ebca:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[(i)], BLACK, WHITE, 16, Font12);
 800ebcc:	69fb      	ldr	r3, [r7, #28]
 800ebce:	3301      	adds	r3, #1
 800ebd0:	011b      	lsls	r3, r3, #4
 800ebd2:	4a0a      	ldr	r2, [pc, #40]	; (800ebfc <updateUint16Item+0x14dc>)
 800ebd4:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800ebd6:	490a      	ldr	r1, [pc, #40]	; (800ec00 <updateUint16Item+0x14e0>)
 800ebd8:	ab02      	add	r3, sp, #8
 800ebda:	c903      	ldmia	r1, {r0, r1}
 800ebdc:	e883 0003 	stmia.w	r3, {r0, r1}
 800ebe0:	2310      	movs	r3, #16
 800ebe2:	9301      	str	r3, [sp, #4]
 800ebe4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ebe8:	9300      	str	r3, [sp, #0]
 800ebea:	2300      	movs	r3, #0
 800ebec:	4629      	mov	r1, r5
 800ebee:	4620      	mov	r0, r4
 800ebf0:	f7fd fc96 	bl	800c520 <centeredString>
 800ebf4:	e0af      	b.n	800ed56 <updateUint16Item+0x1636>
 800ebf6:	bf00      	nop
 800ebf8:	2400a5bc 	.word	0x2400a5bc
 800ebfc:	2400ae1c 	.word	0x2400ae1c
 800ec00:	24000018 	.word	0x24000018
					//						centeredString(HorizontalDisplayCenterWidth, HorizontalMenuRectangleStartY + HorizontalMenuRectangleHeight * i + 1,
					//								uint16Item.itemsArray[i], BLACK, LGRAY, 16);
				}
				else if ( (currentCursorPosition.cursorPosition == 4) && (i == 5) )
 800ec04:	4b5b      	ldr	r3, [pc, #364]	; (800ed74 <updateUint16Item+0x1654>)
 800ec06:	781b      	ldrb	r3, [r3, #0]
 800ec08:	2b04      	cmp	r3, #4
 800ec0a:	f040 80a4 	bne.w	800ed56 <updateUint16Item+0x1636>
 800ec0e:	69fb      	ldr	r3, [r7, #28]
 800ec10:	2b05      	cmp	r3, #5
 800ec12:	f040 80a0 	bne.w	800ed56 <updateUint16Item+0x1636>
				{
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 800ec16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ec1a:	b29c      	uxth	r4, r3
 800ec1c:	69fb      	ldr	r3, [r7, #28]
 800ec1e:	3301      	adds	r3, #1
 800ec20:	011b      	lsls	r3, r3, #4
 800ec22:	4a55      	ldr	r2, [pc, #340]	; (800ed78 <updateUint16Item+0x1658>)
 800ec24:	4413      	add	r3, r2
 800ec26:	4618      	mov	r0, r3
 800ec28:	f7f1 fb64 	bl	80002f4 <strlen>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	4a53      	ldr	r2, [pc, #332]	; (800ed7c <updateUint16Item+0x165c>)
 800ec30:	8892      	ldrh	r2, [r2, #4]
 800ec32:	fb02 f303 	mul.w	r3, r2, r3
 800ec36:	085b      	lsrs	r3, r3, #1
 800ec38:	b29b      	uxth	r3, r3
 800ec3a:	1ae3      	subs	r3, r4, r3
 800ec3c:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800ec3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ec42:	b29a      	uxth	r2, r3
 800ec44:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ec48:	b299      	uxth	r1, r3
 800ec4a:	69fb      	ldr	r3, [r7, #28]
 800ec4c:	b29b      	uxth	r3, r3
 800ec4e:	fb11 f303 	smulbb	r3, r1, r3
 800ec52:	b29b      	uxth	r3, r3
 800ec54:	4413      	add	r3, r2
 800ec56:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 800ec58:	3301      	adds	r3, #1
 800ec5a:	b29e      	uxth	r6, r3
 800ec5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ec60:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(uint16Item.itemsArray[i]) * Font12.Width /2,
 800ec62:	69fb      	ldr	r3, [r7, #28]
 800ec64:	3301      	adds	r3, #1
 800ec66:	011b      	lsls	r3, r3, #4
 800ec68:	4a43      	ldr	r2, [pc, #268]	; (800ed78 <updateUint16Item+0x1658>)
 800ec6a:	4413      	add	r3, r2
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	f7f1 fb41 	bl	80002f4 <strlen>
 800ec72:	4603      	mov	r3, r0
 800ec74:	4a41      	ldr	r2, [pc, #260]	; (800ed7c <updateUint16Item+0x165c>)
 800ec76:	8892      	ldrh	r2, [r2, #4]
 800ec78:	fb02 f303 	mul.w	r3, r2, r3
 800ec7c:	085b      	lsrs	r3, r3, #1
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 800ec7e:	b29b      	uxth	r3, r3
 800ec80:	4423      	add	r3, r4
 800ec82:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800ec84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ec88:	b29a      	uxth	r2, r3
 800ec8a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ec8e:	b299      	uxth	r1, r3
 800ec90:	69fb      	ldr	r3, [r7, #28]
 800ec92:	b29b      	uxth	r3, r3
 800ec94:	fb11 f303 	smulbb	r3, r1, r3
 800ec98:	b29b      	uxth	r3, r3
 800ec9a:	4413      	add	r3, r2
 800ec9c:	b29a      	uxth	r2, r3
 800ec9e:	4b37      	ldr	r3, [pc, #220]	; (800ed7c <updateUint16Item+0x165c>)
 800eca0:	88db      	ldrh	r3, [r3, #6]
 800eca2:	4413      	add	r3, r2
 800eca4:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 800eca6:	3301      	adds	r3, #1
 800eca8:	b29b      	uxth	r3, r3
 800ecaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ecae:	9200      	str	r2, [sp, #0]
 800ecb0:	4602      	mov	r2, r0
 800ecb2:	4631      	mov	r1, r6
 800ecb4:	4628      	mov	r0, r5
 800ecb6:	f7f9 ff0f 	bl	8008ad8 <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800ecba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ecbe:	b29c      	uxth	r4, r3
 800ecc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ecc4:	b29a      	uxth	r2, r3
 800ecc6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ecca:	b299      	uxth	r1, r3
 800eccc:	69fb      	ldr	r3, [r7, #28]
 800ecce:	b29b      	uxth	r3, r3
 800ecd0:	fb11 f303 	smulbb	r3, r1, r3
 800ecd4:	b29b      	uxth	r3, r3
 800ecd6:	4413      	add	r3, r2
 800ecd8:	b29b      	uxth	r3, r3
 800ecda:	3301      	adds	r3, #1
 800ecdc:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[(i)], BLACK, WHITE, 16, Font12);
 800ecde:	69fb      	ldr	r3, [r7, #28]
 800ece0:	3301      	adds	r3, #1
 800ece2:	011b      	lsls	r3, r3, #4
 800ece4:	4a24      	ldr	r2, [pc, #144]	; (800ed78 <updateUint16Item+0x1658>)
 800ece6:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800ece8:	4924      	ldr	r1, [pc, #144]	; (800ed7c <updateUint16Item+0x165c>)
 800ecea:	ab02      	add	r3, sp, #8
 800ecec:	c903      	ldmia	r1, {r0, r1}
 800ecee:	e883 0003 	stmia.w	r3, {r0, r1}
 800ecf2:	2310      	movs	r3, #16
 800ecf4:	9301      	str	r3, [sp, #4]
 800ecf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ecfa:	9300      	str	r3, [sp, #0]
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	4629      	mov	r1, r5
 800ed00:	4620      	mov	r0, r4
 800ed02:	f7fd fc0d 	bl	800c520 <centeredString>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 800ed06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ed0a:	b29c      	uxth	r4, r3
 800ed0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ed10:	b29a      	uxth	r2, r3
 800ed12:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ed16:	b299      	uxth	r1, r3
 800ed18:	69fb      	ldr	r3, [r7, #28]
 800ed1a:	3b01      	subs	r3, #1
 800ed1c:	b29b      	uxth	r3, r3
 800ed1e:	fb11 f303 	smulbb	r3, r1, r3
 800ed22:	b29b      	uxth	r3, r3
 800ed24:	4413      	add	r3, r2
 800ed26:	b29b      	uxth	r3, r3
 800ed28:	3301      	adds	r3, #1
 800ed2a:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i - 1], BLACK, LGRAY, 16, Font12);
 800ed2c:	69fb      	ldr	r3, [r7, #28]
 800ed2e:	3b01      	subs	r3, #1
 800ed30:	3301      	adds	r3, #1
 800ed32:	011b      	lsls	r3, r3, #4
 800ed34:	4a10      	ldr	r2, [pc, #64]	; (800ed78 <updateUint16Item+0x1658>)
 800ed36:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 800ed38:	4910      	ldr	r1, [pc, #64]	; (800ed7c <updateUint16Item+0x165c>)
 800ed3a:	ab02      	add	r3, sp, #8
 800ed3c:	c903      	ldmia	r1, {r0, r1}
 800ed3e:	e883 0003 	stmia.w	r3, {r0, r1}
 800ed42:	2310      	movs	r3, #16
 800ed44:	9301      	str	r3, [sp, #4]
 800ed46:	f24c 6318 	movw	r3, #50712	; 0xc618
 800ed4a:	9300      	str	r3, [sp, #0]
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	4629      	mov	r1, r5
 800ed50:	4620      	mov	r0, r4
 800ed52:	f7fd fbe5 	bl	800c520 <centeredString>
	for (int i = 0; i < uint16Item.numberOfItemsInPage ; i++)
 800ed56:	69fb      	ldr	r3, [r7, #28]
 800ed58:	3301      	adds	r3, #1
 800ed5a:	61fb      	str	r3, [r7, #28]
 800ed5c:	4b06      	ldr	r3, [pc, #24]	; (800ed78 <updateUint16Item+0x1658>)
 800ed5e:	7bdb      	ldrb	r3, [r3, #15]
 800ed60:	461a      	mov	r2, r3
 800ed62:	69fb      	ldr	r3, [r7, #28]
 800ed64:	4293      	cmp	r3, r2
 800ed66:	f6fe ad09 	blt.w	800d77c <updateUint16Item+0x5c>
				}
			}
		}
	}
}
 800ed6a:	bf00      	nop
 800ed6c:	bf00      	nop
 800ed6e:	372c      	adds	r7, #44	; 0x2c
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed74:	2400a5bc 	.word	0x2400a5bc
 800ed78:	2400ae1c 	.word	0x2400ae1c
 800ed7c:	24000018 	.word	0x24000018

0800ed80 <updateStringItem>:
		}
	}
}

void updateStringItem(MENUDRAWType howToDraw)
{
 800ed80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed82:	b08d      	sub	sp, #52	; 0x34
 800ed84:	af04      	add	r7, sp, #16
 800ed86:	4603      	mov	r3, r0
 800ed88:	71fb      	strb	r3, [r7, #7]
	uint8_t MenuRectangleStartX = 0;
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	77fb      	strb	r3, [r7, #31]
	uint8_t MenuRectangleStartY = 0;
 800ed8e:	2300      	movs	r3, #0
 800ed90:	77bb      	strb	r3, [r7, #30]
	uint8_t MenuRectangleHeight = 0;
 800ed92:	2300      	movs	r3, #0
 800ed94:	777b      	strb	r3, [r7, #29]
	uint8_t MenuRectangleWidth = 0;
 800ed96:	2300      	movs	r3, #0
 800ed98:	773b      	strb	r3, [r7, #28]
	uint8_t DisplayCenterWidth = 0;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	76fb      	strb	r3, [r7, #27]

	if (isPortrait)
 800ed9e:	4b09      	ldr	r3, [pc, #36]	; (800edc4 <updateStringItem+0x44>)
 800eda0:	781b      	ldrb	r3, [r3, #0]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d009      	beq.n	800edba <updateStringItem+0x3a>
	{
		MenuRectangleStartX = VerticalMenuRectangleStartX;
 800eda6:	2302      	movs	r3, #2
 800eda8:	77fb      	strb	r3, [r7, #31]
		MenuRectangleStartY = VerticalMenuRectangleStartY;
 800edaa:	230c      	movs	r3, #12
 800edac:	77bb      	strb	r3, [r7, #30]
		MenuRectangleHeight = VerticalMenuRectangleHeight;
 800edae:	230e      	movs	r3, #14
 800edb0:	777b      	strb	r3, [r7, #29]
		MenuRectangleWidth = VerticalMenuRectangleWidth;
 800edb2:	237c      	movs	r3, #124	; 0x7c
 800edb4:	773b      	strb	r3, [r7, #28]
		DisplayCenterWidth = VerticalDisplayCenterWidth;
 800edb6:	2340      	movs	r3, #64	; 0x40
 800edb8:	76fb      	strb	r3, [r7, #27]
//		MenuRectangleHeight = HorizontalMenuRectangleHeight;
//		MenuRectangleWidth = HorizontalMenuRectangleWidth;
//		DisplayCenterWidth = HorizontalDisplayCenterWidth;
	}

	for (int i = 0; i < stringItem.numberOfItemsInPage ; i++)
 800edba:	2300      	movs	r3, #0
 800edbc:	617b      	str	r3, [r7, #20]
 800edbe:	f001 ba23 	b.w	8010208 <updateStringItem+0x1488>
 800edc2:	bf00      	nop
 800edc4:	24000054 	.word	0x24000054
	{
		if  ( (i < 2) && (howToDraw == FULL) )
 800edc8:	697b      	ldr	r3, [r7, #20]
 800edca:	2b01      	cmp	r3, #1
 800edcc:	dc50      	bgt.n	800ee70 <updateStringItem+0xf0>
 800edce:	79fb      	ldrb	r3, [r7, #7]
 800edd0:	2b02      	cmp	r3, #2
 800edd2:	d14d      	bne.n	800ee70 <updateStringItem+0xf0>
		{
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800edd4:	7ffb      	ldrb	r3, [r7, #31]
 800edd6:	b298      	uxth	r0, r3
 800edd8:	7fbb      	ldrb	r3, [r7, #30]
 800edda:	b29a      	uxth	r2, r3
 800eddc:	7f7b      	ldrb	r3, [r7, #29]
 800edde:	b299      	uxth	r1, r3
 800ede0:	697b      	ldr	r3, [r7, #20]
 800ede2:	b29b      	uxth	r3, r3
 800ede4:	fb11 f303 	smulbb	r3, r1, r3
 800ede8:	b29b      	uxth	r3, r3
 800edea:	4413      	add	r3, r2
 800edec:	b29c      	uxth	r4, r3
 800edee:	7ffb      	ldrb	r3, [r7, #31]
 800edf0:	b29a      	uxth	r2, r3
 800edf2:	7f3b      	ldrb	r3, [r7, #28]
 800edf4:	b29b      	uxth	r3, r3
 800edf6:	4413      	add	r3, r2
 800edf8:	b29d      	uxth	r5, r3
 800edfa:	7fbb      	ldrb	r3, [r7, #30]
 800edfc:	b29a      	uxth	r2, r3
 800edfe:	7f7b      	ldrb	r3, [r7, #29]
 800ee00:	b299      	uxth	r1, r3
					MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	3301      	adds	r3, #1
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800ee06:	b29b      	uxth	r3, r3
 800ee08:	fb11 f303 	smulbb	r3, r1, r3
 800ee0c:	b29b      	uxth	r3, r3
 800ee0e:	4413      	add	r3, r2
 800ee10:	b29b      	uxth	r3, r3
 800ee12:	2200      	movs	r2, #0
 800ee14:	9202      	str	r2, [sp, #8]
 800ee16:	2201      	movs	r2, #1
 800ee18:	9201      	str	r2, [sp, #4]
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	9200      	str	r2, [sp, #0]
 800ee1e:	462a      	mov	r2, r5
 800ee20:	4621      	mov	r1, r4
 800ee22:	f7f9 ffd3 	bl	8008dcc <Paint_DrawRectangle>
					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800ee26:	7efb      	ldrb	r3, [r7, #27]
 800ee28:	b29c      	uxth	r4, r3
 800ee2a:	7fbb      	ldrb	r3, [r7, #30]
 800ee2c:	b29a      	uxth	r2, r3
 800ee2e:	7f7b      	ldrb	r3, [r7, #29]
 800ee30:	b299      	uxth	r1, r3
 800ee32:	697b      	ldr	r3, [r7, #20]
 800ee34:	b29b      	uxth	r3, r3
 800ee36:	fb11 f303 	smulbb	r3, r1, r3
 800ee3a:	b29b      	uxth	r3, r3
 800ee3c:	4413      	add	r3, r2
 800ee3e:	b29b      	uxth	r3, r3
 800ee40:	3301      	adds	r3, #1
 800ee42:	b29d      	uxth	r5, r3
					stringItem.itemsArray[i], BLACK, WHITE, 16, Font12);
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	011b      	lsls	r3, r3, #4
 800ee48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ee4c:	4a8e      	ldr	r2, [pc, #568]	; (800f088 <updateStringItem+0x308>)
 800ee4e:	4413      	add	r3, r2
 800ee50:	1d1a      	adds	r2, r3, #4
			centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800ee52:	498e      	ldr	r1, [pc, #568]	; (800f08c <updateStringItem+0x30c>)
 800ee54:	ab02      	add	r3, sp, #8
 800ee56:	c903      	ldmia	r1, {r0, r1}
 800ee58:	e883 0003 	stmia.w	r3, {r0, r1}
 800ee5c:	2310      	movs	r3, #16
 800ee5e:	9301      	str	r3, [sp, #4]
 800ee60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ee64:	9300      	str	r3, [sp, #0]
 800ee66:	2300      	movs	r3, #0
 800ee68:	4629      	mov	r1, r5
 800ee6a:	4620      	mov	r0, r4
 800ee6c:	f7fd fb58 	bl	800c520 <centeredString>
		}
		if ( (i >= 2) && (i < stringItem.numberOfItemsInPage - 2) )
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	2b01      	cmp	r3, #1
 800ee74:	f340 873c 	ble.w	800fcf0 <updateStringItem+0xf70>
 800ee78:	4b83      	ldr	r3, [pc, #524]	; (800f088 <updateStringItem+0x308>)
 800ee7a:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 800ee7e:	3b02      	subs	r3, #2
 800ee80:	697a      	ldr	r2, [r7, #20]
 800ee82:	429a      	cmp	r2, r3
 800ee84:	f280 8734 	bge.w	800fcf0 <updateStringItem+0xf70>
		{
			if (howToDraw == FULL)
 800ee88:	79fb      	ldrb	r3, [r7, #7]
 800ee8a:	2b02      	cmp	r3, #2
 800ee8c:	d159      	bne.n	800ef42 <updateStringItem+0x1c2>
			{
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800ee8e:	7ffb      	ldrb	r3, [r7, #31]
 800ee90:	b298      	uxth	r0, r3
 800ee92:	7fbb      	ldrb	r3, [r7, #30]
 800ee94:	b29a      	uxth	r2, r3
 800ee96:	7f7b      	ldrb	r3, [r7, #29]
 800ee98:	b299      	uxth	r1, r3
 800ee9a:	697b      	ldr	r3, [r7, #20]
 800ee9c:	b29b      	uxth	r3, r3
 800ee9e:	fb11 f303 	smulbb	r3, r1, r3
 800eea2:	b29b      	uxth	r3, r3
 800eea4:	4413      	add	r3, r2
 800eea6:	b29c      	uxth	r4, r3
 800eea8:	7ffb      	ldrb	r3, [r7, #31]
 800eeaa:	b29a      	uxth	r2, r3
 800eeac:	7f3b      	ldrb	r3, [r7, #28]
 800eeae:	085b      	lsrs	r3, r3, #1
 800eeb0:	b2db      	uxtb	r3, r3
 800eeb2:	b29b      	uxth	r3, r3
 800eeb4:	4413      	add	r3, r2
 800eeb6:	b29d      	uxth	r5, r3
 800eeb8:	7fbb      	ldrb	r3, [r7, #30]
 800eeba:	b29a      	uxth	r2, r3
 800eebc:	7f7b      	ldrb	r3, [r7, #29]
 800eebe:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800eec4:	b29b      	uxth	r3, r3
 800eec6:	fb11 f303 	smulbb	r3, r1, r3
 800eeca:	b29b      	uxth	r3, r3
 800eecc:	4413      	add	r3, r2
 800eece:	b29b      	uxth	r3, r3
 800eed0:	2200      	movs	r2, #0
 800eed2:	9202      	str	r2, [sp, #8]
 800eed4:	2201      	movs	r2, #1
 800eed6:	9201      	str	r2, [sp, #4]
 800eed8:	2200      	movs	r2, #0
 800eeda:	9200      	str	r2, [sp, #0]
 800eedc:	462a      	mov	r2, r5
 800eede:	4621      	mov	r1, r4
 800eee0:	f7f9 ff74 	bl	8008dcc <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
				Paint_DrawRectangle( MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * i,
 800eee4:	7ffb      	ldrb	r3, [r7, #31]
 800eee6:	b29a      	uxth	r2, r3
 800eee8:	7f3b      	ldrb	r3, [r7, #28]
 800eeea:	085b      	lsrs	r3, r3, #1
 800eeec:	b2db      	uxtb	r3, r3
 800eeee:	b29b      	uxth	r3, r3
 800eef0:	4413      	add	r3, r2
 800eef2:	b298      	uxth	r0, r3
 800eef4:	7fbb      	ldrb	r3, [r7, #30]
 800eef6:	b29a      	uxth	r2, r3
 800eef8:	7f7b      	ldrb	r3, [r7, #29]
 800eefa:	b299      	uxth	r1, r3
 800eefc:	697b      	ldr	r3, [r7, #20]
 800eefe:	b29b      	uxth	r3, r3
 800ef00:	fb11 f303 	smulbb	r3, r1, r3
 800ef04:	b29b      	uxth	r3, r3
 800ef06:	4413      	add	r3, r2
 800ef08:	b29c      	uxth	r4, r3
 800ef0a:	7ffb      	ldrb	r3, [r7, #31]
 800ef0c:	b29a      	uxth	r2, r3
 800ef0e:	7f3b      	ldrb	r3, [r7, #28]
 800ef10:	b29b      	uxth	r3, r3
 800ef12:	4413      	add	r3, r2
 800ef14:	b29d      	uxth	r5, r3
 800ef16:	7fbb      	ldrb	r3, [r7, #30]
 800ef18:	b29a      	uxth	r2, r3
 800ef1a:	7f7b      	ldrb	r3, [r7, #29]
 800ef1c:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 800ef1e:	697b      	ldr	r3, [r7, #20]
 800ef20:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * i,
 800ef22:	b29b      	uxth	r3, r3
 800ef24:	fb11 f303 	smulbb	r3, r1, r3
 800ef28:	b29b      	uxth	r3, r3
 800ef2a:	4413      	add	r3, r2
 800ef2c:	b29b      	uxth	r3, r3
 800ef2e:	2200      	movs	r2, #0
 800ef30:	9202      	str	r2, [sp, #8]
 800ef32:	2201      	movs	r2, #1
 800ef34:	9201      	str	r2, [sp, #4]
 800ef36:	2200      	movs	r2, #0
 800ef38:	9200      	str	r2, [sp, #0]
 800ef3a:	462a      	mov	r2, r5
 800ef3c:	4621      	mov	r1, r4
 800ef3e:	f7f9 ff45 	bl	8008dcc <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			}

			if ( (i == 2) )
 800ef42:	697b      	ldr	r3, [r7, #20]
 800ef44:	2b02      	cmp	r3, #2
 800ef46:	f040 8371 	bne.w	800f62c <updateStringItem+0x8ac>
			{
//				char localString[8] = "";
//				sprintf(localString,"%03d",stringItem.startValue);
				if (currentCursorPosition.cursorPosition == 0x02)
 800ef4a:	4b51      	ldr	r3, [pc, #324]	; (800f090 <updateStringItem+0x310>)
 800ef4c:	781b      	ldrb	r3, [r3, #0]
 800ef4e:	2b02      	cmp	r3, #2
 800ef50:	f040 81ba 	bne.w	800f2c8 <updateStringItem+0x548>
				{
					if ( (howToDraw == LEFT) || (howToDraw == FULL) )
 800ef54:	79fb      	ldrb	r3, [r7, #7]
 800ef56:	2b03      	cmp	r3, #3
 800ef58:	d003      	beq.n	800ef62 <updateStringItem+0x1e2>
 800ef5a:	79fb      	ldrb	r3, [r7, #7]
 800ef5c:	2b02      	cmp	r3, #2
 800ef5e:	f040 8099 	bne.w	800f094 <updateStringItem+0x314>
					{
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800ef62:	7ffb      	ldrb	r3, [r7, #31]
 800ef64:	b29b      	uxth	r3, r3
 800ef66:	3301      	adds	r3, #1
 800ef68:	b298      	uxth	r0, r3
 800ef6a:	7fbb      	ldrb	r3, [r7, #30]
 800ef6c:	b29a      	uxth	r2, r3
 800ef6e:	7f7b      	ldrb	r3, [r7, #29]
 800ef70:	b299      	uxth	r1, r3
 800ef72:	697b      	ldr	r3, [r7, #20]
 800ef74:	b29b      	uxth	r3, r3
 800ef76:	fb11 f303 	smulbb	r3, r1, r3
 800ef7a:	b29b      	uxth	r3, r3
 800ef7c:	4413      	add	r3, r2
 800ef7e:	b29b      	uxth	r3, r3
 800ef80:	3301      	adds	r3, #1
 800ef82:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 800ef84:	697b      	ldr	r3, [r7, #20]
 800ef86:	011b      	lsls	r3, r3, #4
 800ef88:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ef8c:	4a3e      	ldr	r2, [pc, #248]	; (800f088 <updateStringItem+0x308>)
 800ef8e:	4413      	add	r3, r2
 800ef90:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800ef92:	2300      	movs	r3, #0
 800ef94:	9301      	str	r3, [sp, #4]
 800ef96:	f24c 6318 	movw	r3, #50712	; 0xc618
 800ef9a:	9300      	str	r3, [sp, #0]
 800ef9c:	4b3b      	ldr	r3, [pc, #236]	; (800f08c <updateStringItem+0x30c>)
 800ef9e:	f7fa f9b9 	bl	8009314 <Paint_DrawString_EN>
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800efa2:	7ffb      	ldrb	r3, [r7, #31]
 800efa4:	b29a      	uxth	r2, r3
 800efa6:	7f3b      	ldrb	r3, [r7, #28]
 800efa8:	085b      	lsrs	r3, r3, #1
 800efaa:	b2db      	uxtb	r3, r3
 800efac:	b29b      	uxth	r3, r3
 800efae:	4413      	add	r3, r2
 800efb0:	b29b      	uxth	r3, r3
 800efb2:	3301      	adds	r3, #1
 800efb4:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800efb6:	7fbb      	ldrb	r3, [r7, #30]
 800efb8:	b29a      	uxth	r2, r3
 800efba:	7f7b      	ldrb	r3, [r7, #29]
 800efbc:	b299      	uxth	r1, r3
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	b29b      	uxth	r3, r3
 800efc2:	fb11 f303 	smulbb	r3, r1, r3
 800efc6:	b29b      	uxth	r3, r3
 800efc8:	4413      	add	r3, r2
 800efca:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800efcc:	3301      	adds	r3, #1
 800efce:	b29e      	uxth	r6, r3
								MenuRectangleStartX + MenuRectangleWidth / 2 + 1 + strlen(stringItem.valuesArray[stringItem.startValue]) * Font12.Width,
 800efd0:	7ffb      	ldrb	r3, [r7, #31]
 800efd2:	b29a      	uxth	r2, r3
 800efd4:	7f3b      	ldrb	r3, [r7, #28]
 800efd6:	085b      	lsrs	r3, r3, #1
 800efd8:	b2db      	uxtb	r3, r3
 800efda:	b29b      	uxth	r3, r3
 800efdc:	4413      	add	r3, r2
 800efde:	b29c      	uxth	r4, r3
 800efe0:	4b29      	ldr	r3, [pc, #164]	; (800f088 <updateStringItem+0x308>)
 800efe2:	799b      	ldrb	r3, [r3, #6]
 800efe4:	011b      	lsls	r3, r3, #4
 800efe6:	3308      	adds	r3, #8
 800efe8:	4a27      	ldr	r2, [pc, #156]	; (800f088 <updateStringItem+0x308>)
 800efea:	4413      	add	r3, r2
 800efec:	4618      	mov	r0, r3
 800efee:	f7f1 f981 	bl	80002f4 <strlen>
 800eff2:	4603      	mov	r3, r0
 800eff4:	b29a      	uxth	r2, r3
 800eff6:	4b25      	ldr	r3, [pc, #148]	; (800f08c <updateStringItem+0x30c>)
 800eff8:	889b      	ldrh	r3, [r3, #4]
 800effa:	fb12 f303 	smulbb	r3, r2, r3
 800effe:	b29b      	uxth	r3, r3
 800f000:	4423      	add	r3, r4
 800f002:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800f004:	3301      	adds	r3, #1
 800f006:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800f008:	7fbb      	ldrb	r3, [r7, #30]
 800f00a:	b29a      	uxth	r2, r3
 800f00c:	7f7b      	ldrb	r3, [r7, #29]
 800f00e:	b299      	uxth	r1, r3
 800f010:	697b      	ldr	r3, [r7, #20]
 800f012:	b29b      	uxth	r3, r3
 800f014:	fb11 f303 	smulbb	r3, r1, r3
 800f018:	b29b      	uxth	r3, r3
 800f01a:	4413      	add	r3, r2
 800f01c:	b29a      	uxth	r2, r3
 800f01e:	4b1b      	ldr	r3, [pc, #108]	; (800f08c <updateStringItem+0x30c>)
 800f020:	88db      	ldrh	r3, [r3, #6]
 800f022:	4413      	add	r3, r2
 800f024:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800f026:	3301      	adds	r3, #1
 800f028:	b29b      	uxth	r3, r3
 800f02a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f02e:	9200      	str	r2, [sp, #0]
 800f030:	4602      	mov	r2, r0
 800f032:	4631      	mov	r1, r6
 800f034:	4628      	mov	r0, r5
 800f036:	f7f9 fd4f 	bl	8008ad8 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f03a:	7ffb      	ldrb	r3, [r7, #31]
 800f03c:	b29a      	uxth	r2, r3
 800f03e:	7f3b      	ldrb	r3, [r7, #28]
 800f040:	085b      	lsrs	r3, r3, #1
 800f042:	b2db      	uxtb	r3, r3
 800f044:	b29b      	uxth	r3, r3
 800f046:	4413      	add	r3, r2
 800f048:	b29b      	uxth	r3, r3
 800f04a:	3301      	adds	r3, #1
 800f04c:	b298      	uxth	r0, r3
 800f04e:	7fbb      	ldrb	r3, [r7, #30]
 800f050:	b29a      	uxth	r2, r3
 800f052:	7f7b      	ldrb	r3, [r7, #29]
 800f054:	b299      	uxth	r1, r3
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	b29b      	uxth	r3, r3
 800f05a:	fb11 f303 	smulbb	r3, r1, r3
 800f05e:	b29b      	uxth	r3, r3
 800f060:	4413      	add	r3, r2
 800f062:	b29b      	uxth	r3, r3
 800f064:	3301      	adds	r3, #1
 800f066:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, WHITE,  BLACK);
 800f068:	4b07      	ldr	r3, [pc, #28]	; (800f088 <updateStringItem+0x308>)
 800f06a:	799b      	ldrb	r3, [r3, #6]
 800f06c:	011b      	lsls	r3, r3, #4
 800f06e:	3308      	adds	r3, #8
 800f070:	4a05      	ldr	r2, [pc, #20]	; (800f088 <updateStringItem+0x308>)
 800f072:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f074:	2300      	movs	r3, #0
 800f076:	9301      	str	r3, [sp, #4]
 800f078:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f07c:	9300      	str	r3, [sp, #0]
 800f07e:	4b03      	ldr	r3, [pc, #12]	; (800f08c <updateStringItem+0x30c>)
 800f080:	f7fa f948 	bl	8009314 <Paint_DrawString_EN>
 800f084:	e2d2      	b.n	800f62c <updateStringItem+0x8ac>
 800f086:	bf00      	nop
 800f088:	2400b030 	.word	0x2400b030
 800f08c:	24000018 	.word	0x24000018
 800f090:	2400a5bc 	.word	0x2400a5bc
					}
					else if (howToDraw == DOWN)
 800f094:	79fb      	ldrb	r3, [r7, #7]
 800f096:	2b01      	cmp	r3, #1
 800f098:	f040 8087 	bne.w	800f1aa <updateStringItem+0x42a>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f09c:	7ffb      	ldrb	r3, [r7, #31]
 800f09e:	b29b      	uxth	r3, r3
 800f0a0:	3301      	adds	r3, #1
 800f0a2:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f0a4:	7fbb      	ldrb	r3, [r7, #30]
 800f0a6:	b29a      	uxth	r2, r3
 800f0a8:	7f7b      	ldrb	r3, [r7, #29]
 800f0aa:	b299      	uxth	r1, r3
 800f0ac:	697b      	ldr	r3, [r7, #20]
 800f0ae:	b29b      	uxth	r3, r3
 800f0b0:	fb11 f303 	smulbb	r3, r1, r3
 800f0b4:	b29b      	uxth	r3, r3
 800f0b6:	4413      	add	r3, r2
 800f0b8:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f0ba:	3301      	adds	r3, #1
 800f0bc:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 800f0be:	7ffb      	ldrb	r3, [r7, #31]
 800f0c0:	b29c      	uxth	r4, r3
 800f0c2:	697b      	ldr	r3, [r7, #20]
 800f0c4:	011b      	lsls	r3, r3, #4
 800f0c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f0ca:	4a7d      	ldr	r2, [pc, #500]	; (800f2c0 <updateStringItem+0x540>)
 800f0cc:	4413      	add	r3, r2
 800f0ce:	3304      	adds	r3, #4
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f7f1 f90f 	bl	80002f4 <strlen>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	b29a      	uxth	r2, r3
 800f0da:	4b7a      	ldr	r3, [pc, #488]	; (800f2c4 <updateStringItem+0x544>)
 800f0dc:	889b      	ldrh	r3, [r3, #4]
 800f0de:	fb12 f303 	smulbb	r3, r2, r3
 800f0e2:	b29b      	uxth	r3, r3
 800f0e4:	4423      	add	r3, r4
 800f0e6:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f0e8:	3301      	adds	r3, #1
 800f0ea:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800f0ec:	7fbb      	ldrb	r3, [r7, #30]
 800f0ee:	b29a      	uxth	r2, r3
 800f0f0:	7f7b      	ldrb	r3, [r7, #29]
 800f0f2:	b299      	uxth	r1, r3
 800f0f4:	697b      	ldr	r3, [r7, #20]
 800f0f6:	b29b      	uxth	r3, r3
 800f0f8:	fb11 f303 	smulbb	r3, r1, r3
 800f0fc:	b29b      	uxth	r3, r3
 800f0fe:	4413      	add	r3, r2
 800f100:	b29a      	uxth	r2, r3
 800f102:	4b70      	ldr	r3, [pc, #448]	; (800f2c4 <updateStringItem+0x544>)
 800f104:	88db      	ldrh	r3, [r3, #6]
 800f106:	4413      	add	r3, r2
 800f108:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f10a:	3301      	adds	r3, #1
 800f10c:	b29b      	uxth	r3, r3
 800f10e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f112:	9200      	str	r2, [sp, #0]
 800f114:	4602      	mov	r2, r0
 800f116:	4631      	mov	r1, r6
 800f118:	4628      	mov	r0, r5
 800f11a:	f7f9 fcdd 	bl	8008ad8 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f11e:	7ffb      	ldrb	r3, [r7, #31]
 800f120:	b29b      	uxth	r3, r3
 800f122:	3301      	adds	r3, #1
 800f124:	b298      	uxth	r0, r3
 800f126:	7fbb      	ldrb	r3, [r7, #30]
 800f128:	b29a      	uxth	r2, r3
 800f12a:	7f7b      	ldrb	r3, [r7, #29]
 800f12c:	b299      	uxth	r1, r3
 800f12e:	697b      	ldr	r3, [r7, #20]
 800f130:	b29b      	uxth	r3, r3
 800f132:	fb11 f303 	smulbb	r3, r1, r3
 800f136:	b29b      	uxth	r3, r3
 800f138:	4413      	add	r3, r2
 800f13a:	b29b      	uxth	r3, r3
 800f13c:	3301      	adds	r3, #1
 800f13e:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	011b      	lsls	r3, r3, #4
 800f144:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f148:	4a5d      	ldr	r2, [pc, #372]	; (800f2c0 <updateStringItem+0x540>)
 800f14a:	4413      	add	r3, r2
 800f14c:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f14e:	2300      	movs	r3, #0
 800f150:	9301      	str	r3, [sp, #4]
 800f152:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f156:	9300      	str	r3, [sp, #0]
 800f158:	4b5a      	ldr	r3, [pc, #360]	; (800f2c4 <updateStringItem+0x544>)
 800f15a:	f7fa f8db 	bl	8009314 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f15e:	7ffb      	ldrb	r3, [r7, #31]
 800f160:	b29a      	uxth	r2, r3
 800f162:	7f3b      	ldrb	r3, [r7, #28]
 800f164:	085b      	lsrs	r3, r3, #1
 800f166:	b2db      	uxtb	r3, r3
 800f168:	b29b      	uxth	r3, r3
 800f16a:	4413      	add	r3, r2
 800f16c:	b29b      	uxth	r3, r3
 800f16e:	3301      	adds	r3, #1
 800f170:	b298      	uxth	r0, r3
 800f172:	7fbb      	ldrb	r3, [r7, #30]
 800f174:	b29a      	uxth	r2, r3
 800f176:	7f7b      	ldrb	r3, [r7, #29]
 800f178:	b299      	uxth	r1, r3
 800f17a:	697b      	ldr	r3, [r7, #20]
 800f17c:	b29b      	uxth	r3, r3
 800f17e:	fb11 f303 	smulbb	r3, r1, r3
 800f182:	b29b      	uxth	r3, r3
 800f184:	4413      	add	r3, r2
 800f186:	b29b      	uxth	r3, r3
 800f188:	3301      	adds	r3, #1
 800f18a:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, WHITE,  BLACK);
 800f18c:	4b4c      	ldr	r3, [pc, #304]	; (800f2c0 <updateStringItem+0x540>)
 800f18e:	799b      	ldrb	r3, [r3, #6]
 800f190:	011b      	lsls	r3, r3, #4
 800f192:	3308      	adds	r3, #8
 800f194:	4a4a      	ldr	r2, [pc, #296]	; (800f2c0 <updateStringItem+0x540>)
 800f196:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f198:	2300      	movs	r3, #0
 800f19a:	9301      	str	r3, [sp, #4]
 800f19c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f1a0:	9300      	str	r3, [sp, #0]
 800f1a2:	4b48      	ldr	r3, [pc, #288]	; (800f2c4 <updateStringItem+0x544>)
 800f1a4:	f7fa f8b6 	bl	8009314 <Paint_DrawString_EN>
 800f1a8:	e240      	b.n	800f62c <updateStringItem+0x8ac>
					}
					else if (howToDraw == UP)
 800f1aa:	79fb      	ldrb	r3, [r7, #7]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	f040 823d 	bne.w	800f62c <updateStringItem+0x8ac>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f1b2:	7ffb      	ldrb	r3, [r7, #31]
 800f1b4:	b29b      	uxth	r3, r3
 800f1b6:	3301      	adds	r3, #1
 800f1b8:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f1ba:	7fbb      	ldrb	r3, [r7, #30]
 800f1bc:	b29a      	uxth	r2, r3
 800f1be:	7f7b      	ldrb	r3, [r7, #29]
 800f1c0:	b299      	uxth	r1, r3
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	b29b      	uxth	r3, r3
 800f1c6:	fb11 f303 	smulbb	r3, r1, r3
 800f1ca:	b29b      	uxth	r3, r3
 800f1cc:	4413      	add	r3, r2
 800f1ce:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f1d0:	3301      	adds	r3, #1
 800f1d2:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 800f1d4:	7ffb      	ldrb	r3, [r7, #31]
 800f1d6:	b29c      	uxth	r4, r3
 800f1d8:	697b      	ldr	r3, [r7, #20]
 800f1da:	011b      	lsls	r3, r3, #4
 800f1dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f1e0:	4a37      	ldr	r2, [pc, #220]	; (800f2c0 <updateStringItem+0x540>)
 800f1e2:	4413      	add	r3, r2
 800f1e4:	3304      	adds	r3, #4
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f7f1 f884 	bl	80002f4 <strlen>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	b29a      	uxth	r2, r3
 800f1f0:	4b34      	ldr	r3, [pc, #208]	; (800f2c4 <updateStringItem+0x544>)
 800f1f2:	889b      	ldrh	r3, [r3, #4]
 800f1f4:	fb12 f303 	smulbb	r3, r2, r3
 800f1f8:	b29b      	uxth	r3, r3
 800f1fa:	4423      	add	r3, r4
 800f1fc:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f1fe:	3301      	adds	r3, #1
 800f200:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800f202:	7fbb      	ldrb	r3, [r7, #30]
 800f204:	b29a      	uxth	r2, r3
 800f206:	7f7b      	ldrb	r3, [r7, #29]
 800f208:	b299      	uxth	r1, r3
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	b29b      	uxth	r3, r3
 800f20e:	fb11 f303 	smulbb	r3, r1, r3
 800f212:	b29b      	uxth	r3, r3
 800f214:	4413      	add	r3, r2
 800f216:	b29a      	uxth	r2, r3
 800f218:	4b2a      	ldr	r3, [pc, #168]	; (800f2c4 <updateStringItem+0x544>)
 800f21a:	88db      	ldrh	r3, [r3, #6]
 800f21c:	4413      	add	r3, r2
 800f21e:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f220:	3301      	adds	r3, #1
 800f222:	b29b      	uxth	r3, r3
 800f224:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f228:	9200      	str	r2, [sp, #0]
 800f22a:	4602      	mov	r2, r0
 800f22c:	4631      	mov	r1, r6
 800f22e:	4628      	mov	r0, r5
 800f230:	f7f9 fc52 	bl	8008ad8 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f234:	7ffb      	ldrb	r3, [r7, #31]
 800f236:	b29b      	uxth	r3, r3
 800f238:	3301      	adds	r3, #1
 800f23a:	b298      	uxth	r0, r3
 800f23c:	7fbb      	ldrb	r3, [r7, #30]
 800f23e:	b29a      	uxth	r2, r3
 800f240:	7f7b      	ldrb	r3, [r7, #29]
 800f242:	b299      	uxth	r1, r3
 800f244:	697b      	ldr	r3, [r7, #20]
 800f246:	b29b      	uxth	r3, r3
 800f248:	fb11 f303 	smulbb	r3, r1, r3
 800f24c:	b29b      	uxth	r3, r3
 800f24e:	4413      	add	r3, r2
 800f250:	b29b      	uxth	r3, r3
 800f252:	3301      	adds	r3, #1
 800f254:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	011b      	lsls	r3, r3, #4
 800f25a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f25e:	4a18      	ldr	r2, [pc, #96]	; (800f2c0 <updateStringItem+0x540>)
 800f260:	4413      	add	r3, r2
 800f262:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f264:	2300      	movs	r3, #0
 800f266:	9301      	str	r3, [sp, #4]
 800f268:	f24c 6318 	movw	r3, #50712	; 0xc618
 800f26c:	9300      	str	r3, [sp, #0]
 800f26e:	4b15      	ldr	r3, [pc, #84]	; (800f2c4 <updateStringItem+0x544>)
 800f270:	f7fa f850 	bl	8009314 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f274:	7ffb      	ldrb	r3, [r7, #31]
 800f276:	b29a      	uxth	r2, r3
 800f278:	7f3b      	ldrb	r3, [r7, #28]
 800f27a:	085b      	lsrs	r3, r3, #1
 800f27c:	b2db      	uxtb	r3, r3
 800f27e:	b29b      	uxth	r3, r3
 800f280:	4413      	add	r3, r2
 800f282:	b29b      	uxth	r3, r3
 800f284:	3301      	adds	r3, #1
 800f286:	b298      	uxth	r0, r3
 800f288:	7fbb      	ldrb	r3, [r7, #30]
 800f28a:	b29a      	uxth	r2, r3
 800f28c:	7f7b      	ldrb	r3, [r7, #29]
 800f28e:	b299      	uxth	r1, r3
 800f290:	697b      	ldr	r3, [r7, #20]
 800f292:	b29b      	uxth	r3, r3
 800f294:	fb11 f303 	smulbb	r3, r1, r3
 800f298:	b29b      	uxth	r3, r3
 800f29a:	4413      	add	r3, r2
 800f29c:	b29b      	uxth	r3, r3
 800f29e:	3301      	adds	r3, #1
 800f2a0:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, WHITE,  BLACK);
 800f2a2:	4b07      	ldr	r3, [pc, #28]	; (800f2c0 <updateStringItem+0x540>)
 800f2a4:	799b      	ldrb	r3, [r3, #6]
 800f2a6:	011b      	lsls	r3, r3, #4
 800f2a8:	3308      	adds	r3, #8
 800f2aa:	4a05      	ldr	r2, [pc, #20]	; (800f2c0 <updateStringItem+0x540>)
 800f2ac:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	9301      	str	r3, [sp, #4]
 800f2b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f2b6:	9300      	str	r3, [sp, #0]
 800f2b8:	4b02      	ldr	r3, [pc, #8]	; (800f2c4 <updateStringItem+0x544>)
 800f2ba:	f7fa f82b 	bl	8009314 <Paint_DrawString_EN>
 800f2be:	e1b5      	b.n	800f62c <updateStringItem+0x8ac>
 800f2c0:	2400b030 	.word	0x2400b030
 800f2c4:	24000018 	.word	0x24000018
					}

				}
				else if (currentCursorPosition.cursorPosition == VALUE)
 800f2c8:	4b92      	ldr	r3, [pc, #584]	; (800f514 <updateStringItem+0x794>)
 800f2ca:	781b      	ldrb	r3, [r3, #0]
 800f2cc:	2b0b      	cmp	r3, #11
 800f2ce:	f040 8127 	bne.w	800f520 <updateStringItem+0x7a0>
				{
					if (howToDraw == RIGHT)
 800f2d2:	79fb      	ldrb	r3, [r7, #7]
 800f2d4:	2b04      	cmp	r3, #4
 800f2d6:	f040 8087 	bne.w	800f3e8 <updateStringItem+0x668>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f2da:	7ffb      	ldrb	r3, [r7, #31]
 800f2dc:	b29b      	uxth	r3, r3
 800f2de:	3301      	adds	r3, #1
 800f2e0:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f2e2:	7fbb      	ldrb	r3, [r7, #30]
 800f2e4:	b29a      	uxth	r2, r3
 800f2e6:	7f7b      	ldrb	r3, [r7, #29]
 800f2e8:	b299      	uxth	r1, r3
 800f2ea:	697b      	ldr	r3, [r7, #20]
 800f2ec:	b29b      	uxth	r3, r3
 800f2ee:	fb11 f303 	smulbb	r3, r1, r3
 800f2f2:	b29b      	uxth	r3, r3
 800f2f4:	4413      	add	r3, r2
 800f2f6:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f2f8:	3301      	adds	r3, #1
 800f2fa:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 800f2fc:	7ffb      	ldrb	r3, [r7, #31]
 800f2fe:	b29c      	uxth	r4, r3
 800f300:	697b      	ldr	r3, [r7, #20]
 800f302:	011b      	lsls	r3, r3, #4
 800f304:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f308:	4a83      	ldr	r2, [pc, #524]	; (800f518 <updateStringItem+0x798>)
 800f30a:	4413      	add	r3, r2
 800f30c:	3304      	adds	r3, #4
 800f30e:	4618      	mov	r0, r3
 800f310:	f7f0 fff0 	bl	80002f4 <strlen>
 800f314:	4603      	mov	r3, r0
 800f316:	b29a      	uxth	r2, r3
 800f318:	4b80      	ldr	r3, [pc, #512]	; (800f51c <updateStringItem+0x79c>)
 800f31a:	889b      	ldrh	r3, [r3, #4]
 800f31c:	fb12 f303 	smulbb	r3, r2, r3
 800f320:	b29b      	uxth	r3, r3
 800f322:	4423      	add	r3, r4
 800f324:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f326:	3301      	adds	r3, #1
 800f328:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800f32a:	7fbb      	ldrb	r3, [r7, #30]
 800f32c:	b29a      	uxth	r2, r3
 800f32e:	7f7b      	ldrb	r3, [r7, #29]
 800f330:	b299      	uxth	r1, r3
 800f332:	697b      	ldr	r3, [r7, #20]
 800f334:	b29b      	uxth	r3, r3
 800f336:	fb11 f303 	smulbb	r3, r1, r3
 800f33a:	b29b      	uxth	r3, r3
 800f33c:	4413      	add	r3, r2
 800f33e:	b29a      	uxth	r2, r3
 800f340:	4b76      	ldr	r3, [pc, #472]	; (800f51c <updateStringItem+0x79c>)
 800f342:	88db      	ldrh	r3, [r3, #6]
 800f344:	4413      	add	r3, r2
 800f346:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f348:	3301      	adds	r3, #1
 800f34a:	b29b      	uxth	r3, r3
 800f34c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f350:	9200      	str	r2, [sp, #0]
 800f352:	4602      	mov	r2, r0
 800f354:	4631      	mov	r1, r6
 800f356:	4628      	mov	r0, r5
 800f358:	f7f9 fbbe 	bl	8008ad8 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f35c:	7ffb      	ldrb	r3, [r7, #31]
 800f35e:	b29b      	uxth	r3, r3
 800f360:	3301      	adds	r3, #1
 800f362:	b298      	uxth	r0, r3
 800f364:	7fbb      	ldrb	r3, [r7, #30]
 800f366:	b29a      	uxth	r2, r3
 800f368:	7f7b      	ldrb	r3, [r7, #29]
 800f36a:	b299      	uxth	r1, r3
 800f36c:	697b      	ldr	r3, [r7, #20]
 800f36e:	b29b      	uxth	r3, r3
 800f370:	fb11 f303 	smulbb	r3, r1, r3
 800f374:	b29b      	uxth	r3, r3
 800f376:	4413      	add	r3, r2
 800f378:	b29b      	uxth	r3, r3
 800f37a:	3301      	adds	r3, #1
 800f37c:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 800f37e:	697b      	ldr	r3, [r7, #20]
 800f380:	011b      	lsls	r3, r3, #4
 800f382:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f386:	4a64      	ldr	r2, [pc, #400]	; (800f518 <updateStringItem+0x798>)
 800f388:	4413      	add	r3, r2
 800f38a:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f38c:	2300      	movs	r3, #0
 800f38e:	9301      	str	r3, [sp, #4]
 800f390:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f394:	9300      	str	r3, [sp, #0]
 800f396:	4b61      	ldr	r3, [pc, #388]	; (800f51c <updateStringItem+0x79c>)
 800f398:	f7f9 ffbc 	bl	8009314 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f39c:	7ffb      	ldrb	r3, [r7, #31]
 800f39e:	b29a      	uxth	r2, r3
 800f3a0:	7f3b      	ldrb	r3, [r7, #28]
 800f3a2:	085b      	lsrs	r3, r3, #1
 800f3a4:	b2db      	uxtb	r3, r3
 800f3a6:	b29b      	uxth	r3, r3
 800f3a8:	4413      	add	r3, r2
 800f3aa:	b29b      	uxth	r3, r3
 800f3ac:	3301      	adds	r3, #1
 800f3ae:	b298      	uxth	r0, r3
 800f3b0:	7fbb      	ldrb	r3, [r7, #30]
 800f3b2:	b29a      	uxth	r2, r3
 800f3b4:	7f7b      	ldrb	r3, [r7, #29]
 800f3b6:	b299      	uxth	r1, r3
 800f3b8:	697b      	ldr	r3, [r7, #20]
 800f3ba:	b29b      	uxth	r3, r3
 800f3bc:	fb11 f303 	smulbb	r3, r1, r3
 800f3c0:	b29b      	uxth	r3, r3
 800f3c2:	4413      	add	r3, r2
 800f3c4:	b29b      	uxth	r3, r3
 800f3c6:	3301      	adds	r3, #1
 800f3c8:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, LGRAY,  BLACK);
 800f3ca:	4b53      	ldr	r3, [pc, #332]	; (800f518 <updateStringItem+0x798>)
 800f3cc:	799b      	ldrb	r3, [r3, #6]
 800f3ce:	011b      	lsls	r3, r3, #4
 800f3d0:	3308      	adds	r3, #8
 800f3d2:	4a51      	ldr	r2, [pc, #324]	; (800f518 <updateStringItem+0x798>)
 800f3d4:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	9301      	str	r3, [sp, #4]
 800f3da:	f24c 6318 	movw	r3, #50712	; 0xc618
 800f3de:	9300      	str	r3, [sp, #0]
 800f3e0:	4b4e      	ldr	r3, [pc, #312]	; (800f51c <updateStringItem+0x79c>)
 800f3e2:	f7f9 ff97 	bl	8009314 <Paint_DrawString_EN>
 800f3e6:	e121      	b.n	800f62c <updateStringItem+0x8ac>
					}
					else if (howToDraw == DOWN)
 800f3e8:	79fb      	ldrb	r3, [r7, #7]
 800f3ea:	2b01      	cmp	r3, #1
 800f3ec:	d146      	bne.n	800f47c <updateStringItem+0x6fc>
					{
						stringItem.startValue = fmax(stringItem.startValue - stringItem.deltaMultiplier, stringItem.minValue * 1.0);
 800f3ee:	4b4a      	ldr	r3, [pc, #296]	; (800f518 <updateStringItem+0x798>)
 800f3f0:	799b      	ldrb	r3, [r3, #6]
 800f3f2:	461a      	mov	r2, r3
 800f3f4:	4b48      	ldr	r3, [pc, #288]	; (800f518 <updateStringItem+0x798>)
 800f3f6:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 800f3fa:	1ad3      	subs	r3, r2, r3
 800f3fc:	ee07 3a90 	vmov	s15, r3
 800f400:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f404:	4b44      	ldr	r3, [pc, #272]	; (800f518 <updateStringItem+0x798>)
 800f406:	791b      	ldrb	r3, [r3, #4]
 800f408:	ee06 3a90 	vmov	s13, r3
 800f40c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f410:	eeb0 1b46 	vmov.f64	d1, d6
 800f414:	eeb0 0b47 	vmov.f64	d0, d7
 800f418:	f005 fc44 	bl	8014ca4 <fmax>
 800f41c:	eeb0 7b40 	vmov.f64	d7, d0
 800f420:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800f424:	edc7 7a00 	vstr	s15, [r7]
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	b2da      	uxtb	r2, r3
 800f42c:	4b3a      	ldr	r3, [pc, #232]	; (800f518 <updateStringItem+0x798>)
 800f42e:	719a      	strb	r2, [r3, #6]
//						sprintf(localString,"%05d",stringItem.startValue);
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f430:	7ffb      	ldrb	r3, [r7, #31]
 800f432:	b29a      	uxth	r2, r3
 800f434:	7f3b      	ldrb	r3, [r7, #28]
 800f436:	085b      	lsrs	r3, r3, #1
 800f438:	b2db      	uxtb	r3, r3
 800f43a:	b29b      	uxth	r3, r3
 800f43c:	4413      	add	r3, r2
 800f43e:	b29b      	uxth	r3, r3
 800f440:	3301      	adds	r3, #1
 800f442:	b298      	uxth	r0, r3
 800f444:	7fbb      	ldrb	r3, [r7, #30]
 800f446:	b29a      	uxth	r2, r3
 800f448:	7f7b      	ldrb	r3, [r7, #29]
 800f44a:	b299      	uxth	r1, r3
 800f44c:	697b      	ldr	r3, [r7, #20]
 800f44e:	b29b      	uxth	r3, r3
 800f450:	fb11 f303 	smulbb	r3, r1, r3
 800f454:	b29b      	uxth	r3, r3
 800f456:	4413      	add	r3, r2
 800f458:	b29b      	uxth	r3, r3
 800f45a:	3301      	adds	r3, #1
 800f45c:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, LGRAY,  BLACK);
 800f45e:	4b2e      	ldr	r3, [pc, #184]	; (800f518 <updateStringItem+0x798>)
 800f460:	799b      	ldrb	r3, [r3, #6]
 800f462:	011b      	lsls	r3, r3, #4
 800f464:	3308      	adds	r3, #8
 800f466:	4a2c      	ldr	r2, [pc, #176]	; (800f518 <updateStringItem+0x798>)
 800f468:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f46a:	2300      	movs	r3, #0
 800f46c:	9301      	str	r3, [sp, #4]
 800f46e:	f24c 6318 	movw	r3, #50712	; 0xc618
 800f472:	9300      	str	r3, [sp, #0]
 800f474:	4b29      	ldr	r3, [pc, #164]	; (800f51c <updateStringItem+0x79c>)
 800f476:	f7f9 ff4d 	bl	8009314 <Paint_DrawString_EN>
 800f47a:	e0d7      	b.n	800f62c <updateStringItem+0x8ac>
					}
					else if (howToDraw == UP)
 800f47c:	79fb      	ldrb	r3, [r7, #7]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	f040 80d4 	bne.w	800f62c <updateStringItem+0x8ac>
					{
						stringItem.startValue = fmin(stringItem.startValue + stringItem.deltaMultiplier, stringItem.maxValue * 1.0);
 800f484:	4b24      	ldr	r3, [pc, #144]	; (800f518 <updateStringItem+0x798>)
 800f486:	799b      	ldrb	r3, [r3, #6]
 800f488:	461a      	mov	r2, r3
 800f48a:	4b23      	ldr	r3, [pc, #140]	; (800f518 <updateStringItem+0x798>)
 800f48c:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 800f490:	4413      	add	r3, r2
 800f492:	ee07 3a90 	vmov	s15, r3
 800f496:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f49a:	4b1f      	ldr	r3, [pc, #124]	; (800f518 <updateStringItem+0x798>)
 800f49c:	795b      	ldrb	r3, [r3, #5]
 800f49e:	ee06 3a90 	vmov	s13, r3
 800f4a2:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f4a6:	eeb0 1b46 	vmov.f64	d1, d6
 800f4aa:	eeb0 0b47 	vmov.f64	d0, d7
 800f4ae:	f005 fc14 	bl	8014cda <fmin>
 800f4b2:	eeb0 7b40 	vmov.f64	d7, d0
 800f4b6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800f4ba:	edc7 7a00 	vstr	s15, [r7]
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	b2da      	uxtb	r2, r3
 800f4c2:	4b15      	ldr	r3, [pc, #84]	; (800f518 <updateStringItem+0x798>)
 800f4c4:	719a      	strb	r2, [r3, #6]
//						sprintf(localString,"%05d",stringItem.startValue);
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f4c6:	7ffb      	ldrb	r3, [r7, #31]
 800f4c8:	b29a      	uxth	r2, r3
 800f4ca:	7f3b      	ldrb	r3, [r7, #28]
 800f4cc:	085b      	lsrs	r3, r3, #1
 800f4ce:	b2db      	uxtb	r3, r3
 800f4d0:	b29b      	uxth	r3, r3
 800f4d2:	4413      	add	r3, r2
 800f4d4:	b29b      	uxth	r3, r3
 800f4d6:	3301      	adds	r3, #1
 800f4d8:	b298      	uxth	r0, r3
 800f4da:	7fbb      	ldrb	r3, [r7, #30]
 800f4dc:	b29a      	uxth	r2, r3
 800f4de:	7f7b      	ldrb	r3, [r7, #29]
 800f4e0:	b299      	uxth	r1, r3
 800f4e2:	697b      	ldr	r3, [r7, #20]
 800f4e4:	b29b      	uxth	r3, r3
 800f4e6:	fb11 f303 	smulbb	r3, r1, r3
 800f4ea:	b29b      	uxth	r3, r3
 800f4ec:	4413      	add	r3, r2
 800f4ee:	b29b      	uxth	r3, r3
 800f4f0:	3301      	adds	r3, #1
 800f4f2:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, LGRAY,  BLACK);
 800f4f4:	4b08      	ldr	r3, [pc, #32]	; (800f518 <updateStringItem+0x798>)
 800f4f6:	799b      	ldrb	r3, [r3, #6]
 800f4f8:	011b      	lsls	r3, r3, #4
 800f4fa:	3308      	adds	r3, #8
 800f4fc:	4a06      	ldr	r2, [pc, #24]	; (800f518 <updateStringItem+0x798>)
 800f4fe:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f500:	2300      	movs	r3, #0
 800f502:	9301      	str	r3, [sp, #4]
 800f504:	f24c 6318 	movw	r3, #50712	; 0xc618
 800f508:	9300      	str	r3, [sp, #0]
 800f50a:	4b04      	ldr	r3, [pc, #16]	; (800f51c <updateStringItem+0x79c>)
 800f50c:	f7f9 ff02 	bl	8009314 <Paint_DrawString_EN>
 800f510:	e08c      	b.n	800f62c <updateStringItem+0x8ac>
 800f512:	bf00      	nop
 800f514:	2400a5bc 	.word	0x2400a5bc
 800f518:	2400b030 	.word	0x2400b030
 800f51c:	24000018 	.word	0x24000018
					}
				}
				else
				{
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800f520:	7ffb      	ldrb	r3, [r7, #31]
 800f522:	b29b      	uxth	r3, r3
 800f524:	3301      	adds	r3, #1
 800f526:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f528:	7fbb      	ldrb	r3, [r7, #30]
 800f52a:	b29a      	uxth	r2, r3
 800f52c:	7f7b      	ldrb	r3, [r7, #29]
 800f52e:	b299      	uxth	r1, r3
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	b29b      	uxth	r3, r3
 800f534:	fb11 f303 	smulbb	r3, r1, r3
 800f538:	b29b      	uxth	r3, r3
 800f53a:	4413      	add	r3, r2
 800f53c:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800f53e:	3301      	adds	r3, #1
 800f540:	b29e      	uxth	r6, r3
							MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 800f542:	7ffb      	ldrb	r3, [r7, #31]
 800f544:	b29c      	uxth	r4, r3
 800f546:	697b      	ldr	r3, [r7, #20]
 800f548:	011b      	lsls	r3, r3, #4
 800f54a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f54e:	4a8e      	ldr	r2, [pc, #568]	; (800f788 <updateStringItem+0xa08>)
 800f550:	4413      	add	r3, r2
 800f552:	3304      	adds	r3, #4
 800f554:	4618      	mov	r0, r3
 800f556:	f7f0 fecd 	bl	80002f4 <strlen>
 800f55a:	4603      	mov	r3, r0
 800f55c:	b29a      	uxth	r2, r3
 800f55e:	4b8b      	ldr	r3, [pc, #556]	; (800f78c <updateStringItem+0xa0c>)
 800f560:	889b      	ldrh	r3, [r3, #4]
 800f562:	fb12 f303 	smulbb	r3, r2, r3
 800f566:	b29b      	uxth	r3, r3
 800f568:	4423      	add	r3, r4
 800f56a:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800f56c:	3301      	adds	r3, #1
 800f56e:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800f570:	7fbb      	ldrb	r3, [r7, #30]
 800f572:	b29a      	uxth	r2, r3
 800f574:	7f7b      	ldrb	r3, [r7, #29]
 800f576:	b299      	uxth	r1, r3
 800f578:	697b      	ldr	r3, [r7, #20]
 800f57a:	b29b      	uxth	r3, r3
 800f57c:	fb11 f303 	smulbb	r3, r1, r3
 800f580:	b29b      	uxth	r3, r3
 800f582:	4413      	add	r3, r2
 800f584:	b29a      	uxth	r2, r3
 800f586:	4b81      	ldr	r3, [pc, #516]	; (800f78c <updateStringItem+0xa0c>)
 800f588:	88db      	ldrh	r3, [r3, #6]
 800f58a:	4413      	add	r3, r2
 800f58c:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800f58e:	3301      	adds	r3, #1
 800f590:	b29b      	uxth	r3, r3
 800f592:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f596:	9200      	str	r2, [sp, #0]
 800f598:	4602      	mov	r2, r0
 800f59a:	4631      	mov	r1, r6
 800f59c:	4628      	mov	r0, r5
 800f59e:	f7f9 fa9b 	bl	8008ad8 <Paint_ClearWindows>
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f5a2:	7ffb      	ldrb	r3, [r7, #31]
 800f5a4:	b29b      	uxth	r3, r3
 800f5a6:	3301      	adds	r3, #1
 800f5a8:	b298      	uxth	r0, r3
 800f5aa:	7fbb      	ldrb	r3, [r7, #30]
 800f5ac:	b29a      	uxth	r2, r3
 800f5ae:	7f7b      	ldrb	r3, [r7, #29]
 800f5b0:	b299      	uxth	r1, r3
 800f5b2:	697b      	ldr	r3, [r7, #20]
 800f5b4:	b29b      	uxth	r3, r3
 800f5b6:	fb11 f303 	smulbb	r3, r1, r3
 800f5ba:	b29b      	uxth	r3, r3
 800f5bc:	4413      	add	r3, r2
 800f5be:	b29b      	uxth	r3, r3
 800f5c0:	3301      	adds	r3, #1
 800f5c2:	b299      	uxth	r1, r3
							stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 800f5c4:	697b      	ldr	r3, [r7, #20]
 800f5c6:	011b      	lsls	r3, r3, #4
 800f5c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f5cc:	4a6e      	ldr	r2, [pc, #440]	; (800f788 <updateStringItem+0xa08>)
 800f5ce:	4413      	add	r3, r2
 800f5d0:	1d1a      	adds	r2, r3, #4
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	9301      	str	r3, [sp, #4]
 800f5d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f5da:	9300      	str	r3, [sp, #0]
 800f5dc:	4b6b      	ldr	r3, [pc, #428]	; (800f78c <updateStringItem+0xa0c>)
 800f5de:	f7f9 fe99 	bl	8009314 <Paint_DrawString_EN>
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f5e2:	7ffb      	ldrb	r3, [r7, #31]
 800f5e4:	b29a      	uxth	r2, r3
 800f5e6:	7f3b      	ldrb	r3, [r7, #28]
 800f5e8:	085b      	lsrs	r3, r3, #1
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	b29b      	uxth	r3, r3
 800f5ee:	4413      	add	r3, r2
 800f5f0:	b29b      	uxth	r3, r3
 800f5f2:	3301      	adds	r3, #1
 800f5f4:	b298      	uxth	r0, r3
 800f5f6:	7fbb      	ldrb	r3, [r7, #30]
 800f5f8:	b29a      	uxth	r2, r3
 800f5fa:	7f7b      	ldrb	r3, [r7, #29]
 800f5fc:	b299      	uxth	r1, r3
 800f5fe:	697b      	ldr	r3, [r7, #20]
 800f600:	b29b      	uxth	r3, r3
 800f602:	fb11 f303 	smulbb	r3, r1, r3
 800f606:	b29b      	uxth	r3, r3
 800f608:	4413      	add	r3, r2
 800f60a:	b29b      	uxth	r3, r3
 800f60c:	3301      	adds	r3, #1
 800f60e:	b299      	uxth	r1, r3
							stringItem.valuesArray[stringItem.startValue], &Font12, WHITE,  BLACK);
 800f610:	4b5d      	ldr	r3, [pc, #372]	; (800f788 <updateStringItem+0xa08>)
 800f612:	799b      	ldrb	r3, [r3, #6]
 800f614:	011b      	lsls	r3, r3, #4
 800f616:	3308      	adds	r3, #8
 800f618:	4a5b      	ldr	r2, [pc, #364]	; (800f788 <updateStringItem+0xa08>)
 800f61a:	441a      	add	r2, r3
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f61c:	2300      	movs	r3, #0
 800f61e:	9301      	str	r3, [sp, #4]
 800f620:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f624:	9300      	str	r3, [sp, #0]
 800f626:	4b59      	ldr	r3, [pc, #356]	; (800f78c <updateStringItem+0xa0c>)
 800f628:	f7f9 fe74 	bl	8009314 <Paint_DrawString_EN>
				}
			}
			// Render value text of "Multiplier" with Grey or White background
			if ( (i == 3) )
 800f62c:	697b      	ldr	r3, [r7, #20]
 800f62e:	2b03      	cmp	r3, #3
 800f630:	f040 835e 	bne.w	800fcf0 <updateStringItem+0xf70>
			{
				char localString[8] = "";
 800f634:	2300      	movs	r3, #0
 800f636:	60fb      	str	r3, [r7, #12]
 800f638:	2300      	movs	r3, #0
 800f63a:	613b      	str	r3, [r7, #16]
				sprintf(localString,"%d",stringItem.deltaMultiplier);
 800f63c:	4b52      	ldr	r3, [pc, #328]	; (800f788 <updateStringItem+0xa08>)
 800f63e:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 800f642:	461a      	mov	r2, r3
 800f644:	f107 030c 	add.w	r3, r7, #12
 800f648:	4951      	ldr	r1, [pc, #324]	; (800f790 <updateStringItem+0xa10>)
 800f64a:	4618      	mov	r0, r3
 800f64c:	f001 ffae 	bl	80115ac <siprintf>
				if (currentCursorPosition.cursorPosition == 0x03)
 800f650:	4b50      	ldr	r3, [pc, #320]	; (800f794 <updateStringItem+0xa14>)
 800f652:	781b      	ldrb	r3, [r3, #0]
 800f654:	2b03      	cmp	r3, #3
 800f656:	f040 81b1 	bne.w	800f9bc <updateStringItem+0xc3c>
				{
					if ( (howToDraw == LEFT) || (howToDraw == FULL) )
 800f65a:	79fb      	ldrb	r3, [r7, #7]
 800f65c:	2b03      	cmp	r3, #3
 800f65e:	d003      	beq.n	800f668 <updateStringItem+0x8e8>
 800f660:	79fb      	ldrb	r3, [r7, #7]
 800f662:	2b02      	cmp	r3, #2
 800f664:	f040 8098 	bne.w	800f798 <updateStringItem+0xa18>
					{
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f668:	7ffb      	ldrb	r3, [r7, #31]
 800f66a:	b29b      	uxth	r3, r3
 800f66c:	3301      	adds	r3, #1
 800f66e:	b298      	uxth	r0, r3
 800f670:	7fbb      	ldrb	r3, [r7, #30]
 800f672:	b29a      	uxth	r2, r3
 800f674:	7f7b      	ldrb	r3, [r7, #29]
 800f676:	b299      	uxth	r1, r3
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	b29b      	uxth	r3, r3
 800f67c:	fb11 f303 	smulbb	r3, r1, r3
 800f680:	b29b      	uxth	r3, r3
 800f682:	4413      	add	r3, r2
 800f684:	b29b      	uxth	r3, r3
 800f686:	3301      	adds	r3, #1
 800f688:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 800f68a:	697b      	ldr	r3, [r7, #20]
 800f68c:	011b      	lsls	r3, r3, #4
 800f68e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f692:	4a3d      	ldr	r2, [pc, #244]	; (800f788 <updateStringItem+0xa08>)
 800f694:	4413      	add	r3, r2
 800f696:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f698:	2300      	movs	r3, #0
 800f69a:	9301      	str	r3, [sp, #4]
 800f69c:	f24c 6318 	movw	r3, #50712	; 0xc618
 800f6a0:	9300      	str	r3, [sp, #0]
 800f6a2:	4b3a      	ldr	r3, [pc, #232]	; (800f78c <updateStringItem+0xa0c>)
 800f6a4:	f7f9 fe36 	bl	8009314 <Paint_DrawString_EN>
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800f6a8:	7ffb      	ldrb	r3, [r7, #31]
 800f6aa:	b29a      	uxth	r2, r3
 800f6ac:	7f3b      	ldrb	r3, [r7, #28]
 800f6ae:	085b      	lsrs	r3, r3, #1
 800f6b0:	b2db      	uxtb	r3, r3
 800f6b2:	b29b      	uxth	r3, r3
 800f6b4:	4413      	add	r3, r2
 800f6b6:	b29b      	uxth	r3, r3
 800f6b8:	3301      	adds	r3, #1
 800f6ba:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f6bc:	7fbb      	ldrb	r3, [r7, #30]
 800f6be:	b29a      	uxth	r2, r3
 800f6c0:	7f7b      	ldrb	r3, [r7, #29]
 800f6c2:	b299      	uxth	r1, r3
 800f6c4:	697b      	ldr	r3, [r7, #20]
 800f6c6:	b29b      	uxth	r3, r3
 800f6c8:	fb11 f303 	smulbb	r3, r1, r3
 800f6cc:	b29b      	uxth	r3, r3
 800f6ce:	4413      	add	r3, r2
 800f6d0:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800f6d2:	3301      	adds	r3, #1
 800f6d4:	b29e      	uxth	r6, r3
								MenuRectangleStartX + MenuRectangleWidth / 2 + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 800f6d6:	7ffb      	ldrb	r3, [r7, #31]
 800f6d8:	b29a      	uxth	r2, r3
 800f6da:	7f3b      	ldrb	r3, [r7, #28]
 800f6dc:	085b      	lsrs	r3, r3, #1
 800f6de:	b2db      	uxtb	r3, r3
 800f6e0:	b29b      	uxth	r3, r3
 800f6e2:	4413      	add	r3, r2
 800f6e4:	b29c      	uxth	r4, r3
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	011b      	lsls	r3, r3, #4
 800f6ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f6ee:	4a26      	ldr	r2, [pc, #152]	; (800f788 <updateStringItem+0xa08>)
 800f6f0:	4413      	add	r3, r2
 800f6f2:	3304      	adds	r3, #4
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f7f0 fdfd 	bl	80002f4 <strlen>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	b29a      	uxth	r2, r3
 800f6fe:	4b23      	ldr	r3, [pc, #140]	; (800f78c <updateStringItem+0xa0c>)
 800f700:	889b      	ldrh	r3, [r3, #4]
 800f702:	fb12 f303 	smulbb	r3, r2, r3
 800f706:	b29b      	uxth	r3, r3
 800f708:	4423      	add	r3, r4
 800f70a:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800f70c:	3301      	adds	r3, #1
 800f70e:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800f710:	7fbb      	ldrb	r3, [r7, #30]
 800f712:	b29a      	uxth	r2, r3
 800f714:	7f7b      	ldrb	r3, [r7, #29]
 800f716:	b299      	uxth	r1, r3
 800f718:	697b      	ldr	r3, [r7, #20]
 800f71a:	b29b      	uxth	r3, r3
 800f71c:	fb11 f303 	smulbb	r3, r1, r3
 800f720:	b29b      	uxth	r3, r3
 800f722:	4413      	add	r3, r2
 800f724:	b29a      	uxth	r2, r3
 800f726:	4b19      	ldr	r3, [pc, #100]	; (800f78c <updateStringItem+0xa0c>)
 800f728:	88db      	ldrh	r3, [r3, #6]
 800f72a:	4413      	add	r3, r2
 800f72c:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 800f72e:	3301      	adds	r3, #1
 800f730:	b29b      	uxth	r3, r3
 800f732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f736:	9200      	str	r2, [sp, #0]
 800f738:	4602      	mov	r2, r0
 800f73a:	4631      	mov	r1, r6
 800f73c:	4628      	mov	r0, r5
 800f73e:	f7f9 f9cb 	bl	8008ad8 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f742:	7ffb      	ldrb	r3, [r7, #31]
 800f744:	b29a      	uxth	r2, r3
 800f746:	7f3b      	ldrb	r3, [r7, #28]
 800f748:	085b      	lsrs	r3, r3, #1
 800f74a:	b2db      	uxtb	r3, r3
 800f74c:	b29b      	uxth	r3, r3
 800f74e:	4413      	add	r3, r2
 800f750:	b29b      	uxth	r3, r3
 800f752:	3301      	adds	r3, #1
 800f754:	b298      	uxth	r0, r3
 800f756:	7fbb      	ldrb	r3, [r7, #30]
 800f758:	b29a      	uxth	r2, r3
 800f75a:	7f7b      	ldrb	r3, [r7, #29]
 800f75c:	b299      	uxth	r1, r3
 800f75e:	697b      	ldr	r3, [r7, #20]
 800f760:	b29b      	uxth	r3, r3
 800f762:	fb11 f303 	smulbb	r3, r1, r3
 800f766:	b29b      	uxth	r3, r3
 800f768:	4413      	add	r3, r2
 800f76a:	b29b      	uxth	r3, r3
 800f76c:	3301      	adds	r3, #1
 800f76e:	b299      	uxth	r1, r3
 800f770:	f107 020c 	add.w	r2, r7, #12
 800f774:	2300      	movs	r3, #0
 800f776:	9301      	str	r3, [sp, #4]
 800f778:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f77c:	9300      	str	r3, [sp, #0]
 800f77e:	4b03      	ldr	r3, [pc, #12]	; (800f78c <updateStringItem+0xa0c>)
 800f780:	f7f9 fdc8 	bl	8009314 <Paint_DrawString_EN>
 800f784:	e2b4      	b.n	800fcf0 <updateStringItem+0xf70>
 800f786:	bf00      	nop
 800f788:	2400b030 	.word	0x2400b030
 800f78c:	24000018 	.word	0x24000018
 800f790:	0801544c 	.word	0x0801544c
 800f794:	2400a5bc 	.word	0x2400a5bc
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == DOWN)
 800f798:	79fb      	ldrb	r3, [r7, #7]
 800f79a:	2b01      	cmp	r3, #1
 800f79c:	f040 8083 	bne.w	800f8a6 <updateStringItem+0xb26>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f7a0:	7ffb      	ldrb	r3, [r7, #31]
 800f7a2:	b29b      	uxth	r3, r3
 800f7a4:	3301      	adds	r3, #1
 800f7a6:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f7a8:	7fbb      	ldrb	r3, [r7, #30]
 800f7aa:	b29a      	uxth	r2, r3
 800f7ac:	7f7b      	ldrb	r3, [r7, #29]
 800f7ae:	b299      	uxth	r1, r3
 800f7b0:	697b      	ldr	r3, [r7, #20]
 800f7b2:	b29b      	uxth	r3, r3
 800f7b4:	fb11 f303 	smulbb	r3, r1, r3
 800f7b8:	b29b      	uxth	r3, r3
 800f7ba:	4413      	add	r3, r2
 800f7bc:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f7be:	3301      	adds	r3, #1
 800f7c0:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 800f7c2:	7ffb      	ldrb	r3, [r7, #31]
 800f7c4:	b29c      	uxth	r4, r3
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	011b      	lsls	r3, r3, #4
 800f7ca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f7ce:	4a79      	ldr	r2, [pc, #484]	; (800f9b4 <updateStringItem+0xc34>)
 800f7d0:	4413      	add	r3, r2
 800f7d2:	3304      	adds	r3, #4
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f7f0 fd8d 	bl	80002f4 <strlen>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	b29a      	uxth	r2, r3
 800f7de:	4b76      	ldr	r3, [pc, #472]	; (800f9b8 <updateStringItem+0xc38>)
 800f7e0:	889b      	ldrh	r3, [r3, #4]
 800f7e2:	fb12 f303 	smulbb	r3, r2, r3
 800f7e6:	b29b      	uxth	r3, r3
 800f7e8:	4423      	add	r3, r4
 800f7ea:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f7ec:	3301      	adds	r3, #1
 800f7ee:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800f7f0:	7fbb      	ldrb	r3, [r7, #30]
 800f7f2:	b29a      	uxth	r2, r3
 800f7f4:	7f7b      	ldrb	r3, [r7, #29]
 800f7f6:	b299      	uxth	r1, r3
 800f7f8:	697b      	ldr	r3, [r7, #20]
 800f7fa:	b29b      	uxth	r3, r3
 800f7fc:	fb11 f303 	smulbb	r3, r1, r3
 800f800:	b29b      	uxth	r3, r3
 800f802:	4413      	add	r3, r2
 800f804:	b29a      	uxth	r2, r3
 800f806:	4b6c      	ldr	r3, [pc, #432]	; (800f9b8 <updateStringItem+0xc38>)
 800f808:	88db      	ldrh	r3, [r3, #6]
 800f80a:	4413      	add	r3, r2
 800f80c:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f80e:	3301      	adds	r3, #1
 800f810:	b29b      	uxth	r3, r3
 800f812:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f816:	9200      	str	r2, [sp, #0]
 800f818:	4602      	mov	r2, r0
 800f81a:	4631      	mov	r1, r6
 800f81c:	4628      	mov	r0, r5
 800f81e:	f7f9 f95b 	bl	8008ad8 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f822:	7ffb      	ldrb	r3, [r7, #31]
 800f824:	b29b      	uxth	r3, r3
 800f826:	3301      	adds	r3, #1
 800f828:	b298      	uxth	r0, r3
 800f82a:	7fbb      	ldrb	r3, [r7, #30]
 800f82c:	b29a      	uxth	r2, r3
 800f82e:	7f7b      	ldrb	r3, [r7, #29]
 800f830:	b299      	uxth	r1, r3
 800f832:	697b      	ldr	r3, [r7, #20]
 800f834:	b29b      	uxth	r3, r3
 800f836:	fb11 f303 	smulbb	r3, r1, r3
 800f83a:	b29b      	uxth	r3, r3
 800f83c:	4413      	add	r3, r2
 800f83e:	b29b      	uxth	r3, r3
 800f840:	3301      	adds	r3, #1
 800f842:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 800f844:	697b      	ldr	r3, [r7, #20]
 800f846:	011b      	lsls	r3, r3, #4
 800f848:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f84c:	4a59      	ldr	r2, [pc, #356]	; (800f9b4 <updateStringItem+0xc34>)
 800f84e:	4413      	add	r3, r2
 800f850:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f852:	2300      	movs	r3, #0
 800f854:	9301      	str	r3, [sp, #4]
 800f856:	f24c 6318 	movw	r3, #50712	; 0xc618
 800f85a:	9300      	str	r3, [sp, #0]
 800f85c:	4b56      	ldr	r3, [pc, #344]	; (800f9b8 <updateStringItem+0xc38>)
 800f85e:	f7f9 fd59 	bl	8009314 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f862:	7ffb      	ldrb	r3, [r7, #31]
 800f864:	b29a      	uxth	r2, r3
 800f866:	7f3b      	ldrb	r3, [r7, #28]
 800f868:	085b      	lsrs	r3, r3, #1
 800f86a:	b2db      	uxtb	r3, r3
 800f86c:	b29b      	uxth	r3, r3
 800f86e:	4413      	add	r3, r2
 800f870:	b29b      	uxth	r3, r3
 800f872:	3301      	adds	r3, #1
 800f874:	b298      	uxth	r0, r3
 800f876:	7fbb      	ldrb	r3, [r7, #30]
 800f878:	b29a      	uxth	r2, r3
 800f87a:	7f7b      	ldrb	r3, [r7, #29]
 800f87c:	b299      	uxth	r1, r3
 800f87e:	697b      	ldr	r3, [r7, #20]
 800f880:	b29b      	uxth	r3, r3
 800f882:	fb11 f303 	smulbb	r3, r1, r3
 800f886:	b29b      	uxth	r3, r3
 800f888:	4413      	add	r3, r2
 800f88a:	b29b      	uxth	r3, r3
 800f88c:	3301      	adds	r3, #1
 800f88e:	b299      	uxth	r1, r3
 800f890:	f107 020c 	add.w	r2, r7, #12
 800f894:	2300      	movs	r3, #0
 800f896:	9301      	str	r3, [sp, #4]
 800f898:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f89c:	9300      	str	r3, [sp, #0]
 800f89e:	4b46      	ldr	r3, [pc, #280]	; (800f9b8 <updateStringItem+0xc38>)
 800f8a0:	f7f9 fd38 	bl	8009314 <Paint_DrawString_EN>
 800f8a4:	e224      	b.n	800fcf0 <updateStringItem+0xf70>
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == UP)
 800f8a6:	79fb      	ldrb	r3, [r7, #7]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	f040 8221 	bne.w	800fcf0 <updateStringItem+0xf70>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f8ae:	7ffb      	ldrb	r3, [r7, #31]
 800f8b0:	b29b      	uxth	r3, r3
 800f8b2:	3301      	adds	r3, #1
 800f8b4:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f8b6:	7fbb      	ldrb	r3, [r7, #30]
 800f8b8:	b29a      	uxth	r2, r3
 800f8ba:	7f7b      	ldrb	r3, [r7, #29]
 800f8bc:	b299      	uxth	r1, r3
 800f8be:	697b      	ldr	r3, [r7, #20]
 800f8c0:	b29b      	uxth	r3, r3
 800f8c2:	fb11 f303 	smulbb	r3, r1, r3
 800f8c6:	b29b      	uxth	r3, r3
 800f8c8:	4413      	add	r3, r2
 800f8ca:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f8cc:	3301      	adds	r3, #1
 800f8ce:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 800f8d0:	7ffb      	ldrb	r3, [r7, #31]
 800f8d2:	b29c      	uxth	r4, r3
 800f8d4:	697b      	ldr	r3, [r7, #20]
 800f8d6:	011b      	lsls	r3, r3, #4
 800f8d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f8dc:	4a35      	ldr	r2, [pc, #212]	; (800f9b4 <updateStringItem+0xc34>)
 800f8de:	4413      	add	r3, r2
 800f8e0:	3304      	adds	r3, #4
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f7f0 fd06 	bl	80002f4 <strlen>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	b29a      	uxth	r2, r3
 800f8ec:	4b32      	ldr	r3, [pc, #200]	; (800f9b8 <updateStringItem+0xc38>)
 800f8ee:	889b      	ldrh	r3, [r3, #4]
 800f8f0:	fb12 f303 	smulbb	r3, r2, r3
 800f8f4:	b29b      	uxth	r3, r3
 800f8f6:	4423      	add	r3, r4
 800f8f8:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f8fa:	3301      	adds	r3, #1
 800f8fc:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800f8fe:	7fbb      	ldrb	r3, [r7, #30]
 800f900:	b29a      	uxth	r2, r3
 800f902:	7f7b      	ldrb	r3, [r7, #29]
 800f904:	b299      	uxth	r1, r3
 800f906:	697b      	ldr	r3, [r7, #20]
 800f908:	b29b      	uxth	r3, r3
 800f90a:	fb11 f303 	smulbb	r3, r1, r3
 800f90e:	b29b      	uxth	r3, r3
 800f910:	4413      	add	r3, r2
 800f912:	b29a      	uxth	r2, r3
 800f914:	4b28      	ldr	r3, [pc, #160]	; (800f9b8 <updateStringItem+0xc38>)
 800f916:	88db      	ldrh	r3, [r3, #6]
 800f918:	4413      	add	r3, r2
 800f91a:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f91c:	3301      	adds	r3, #1
 800f91e:	b29b      	uxth	r3, r3
 800f920:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f924:	9200      	str	r2, [sp, #0]
 800f926:	4602      	mov	r2, r0
 800f928:	4631      	mov	r1, r6
 800f92a:	4628      	mov	r0, r5
 800f92c:	f7f9 f8d4 	bl	8008ad8 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f930:	7ffb      	ldrb	r3, [r7, #31]
 800f932:	b29b      	uxth	r3, r3
 800f934:	3301      	adds	r3, #1
 800f936:	b298      	uxth	r0, r3
 800f938:	7fbb      	ldrb	r3, [r7, #30]
 800f93a:	b29a      	uxth	r2, r3
 800f93c:	7f7b      	ldrb	r3, [r7, #29]
 800f93e:	b299      	uxth	r1, r3
 800f940:	697b      	ldr	r3, [r7, #20]
 800f942:	b29b      	uxth	r3, r3
 800f944:	fb11 f303 	smulbb	r3, r1, r3
 800f948:	b29b      	uxth	r3, r3
 800f94a:	4413      	add	r3, r2
 800f94c:	b29b      	uxth	r3, r3
 800f94e:	3301      	adds	r3, #1
 800f950:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 800f952:	697b      	ldr	r3, [r7, #20]
 800f954:	011b      	lsls	r3, r3, #4
 800f956:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f95a:	4a16      	ldr	r2, [pc, #88]	; (800f9b4 <updateStringItem+0xc34>)
 800f95c:	4413      	add	r3, r2
 800f95e:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f960:	2300      	movs	r3, #0
 800f962:	9301      	str	r3, [sp, #4]
 800f964:	f24c 6318 	movw	r3, #50712	; 0xc618
 800f968:	9300      	str	r3, [sp, #0]
 800f96a:	4b13      	ldr	r3, [pc, #76]	; (800f9b8 <updateStringItem+0xc38>)
 800f96c:	f7f9 fcd2 	bl	8009314 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f970:	7ffb      	ldrb	r3, [r7, #31]
 800f972:	b29a      	uxth	r2, r3
 800f974:	7f3b      	ldrb	r3, [r7, #28]
 800f976:	085b      	lsrs	r3, r3, #1
 800f978:	b2db      	uxtb	r3, r3
 800f97a:	b29b      	uxth	r3, r3
 800f97c:	4413      	add	r3, r2
 800f97e:	b29b      	uxth	r3, r3
 800f980:	3301      	adds	r3, #1
 800f982:	b298      	uxth	r0, r3
 800f984:	7fbb      	ldrb	r3, [r7, #30]
 800f986:	b29a      	uxth	r2, r3
 800f988:	7f7b      	ldrb	r3, [r7, #29]
 800f98a:	b299      	uxth	r1, r3
 800f98c:	697b      	ldr	r3, [r7, #20]
 800f98e:	b29b      	uxth	r3, r3
 800f990:	fb11 f303 	smulbb	r3, r1, r3
 800f994:	b29b      	uxth	r3, r3
 800f996:	4413      	add	r3, r2
 800f998:	b29b      	uxth	r3, r3
 800f99a:	3301      	adds	r3, #1
 800f99c:	b299      	uxth	r1, r3
 800f99e:	f107 020c 	add.w	r2, r7, #12
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	9301      	str	r3, [sp, #4]
 800f9a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f9aa:	9300      	str	r3, [sp, #0]
 800f9ac:	4b02      	ldr	r3, [pc, #8]	; (800f9b8 <updateStringItem+0xc38>)
 800f9ae:	f7f9 fcb1 	bl	8009314 <Paint_DrawString_EN>
 800f9b2:	e19d      	b.n	800fcf0 <updateStringItem+0xf70>
 800f9b4:	2400b030 	.word	0x2400b030
 800f9b8:	24000018 	.word	0x24000018
								localString, &Font12, WHITE,  BLACK);
					}
				}
				else if (currentCursorPosition.cursorPosition == MULTIPLIER)
 800f9bc:	4b85      	ldr	r3, [pc, #532]	; (800fbd4 <updateStringItem+0xe54>)
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	2b0c      	cmp	r3, #12
 800f9c2:	f040 8113 	bne.w	800fbec <updateStringItem+0xe6c>
				{
					if (howToDraw == RIGHT)
 800f9c6:	79fb      	ldrb	r3, [r7, #7]
 800f9c8:	2b04      	cmp	r3, #4
 800f9ca:	f040 8083 	bne.w	800fad4 <updateStringItem+0xd54>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f9ce:	7ffb      	ldrb	r3, [r7, #31]
 800f9d0:	b29b      	uxth	r3, r3
 800f9d2:	3301      	adds	r3, #1
 800f9d4:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800f9d6:	7fbb      	ldrb	r3, [r7, #30]
 800f9d8:	b29a      	uxth	r2, r3
 800f9da:	7f7b      	ldrb	r3, [r7, #29]
 800f9dc:	b299      	uxth	r1, r3
 800f9de:	697b      	ldr	r3, [r7, #20]
 800f9e0:	b29b      	uxth	r3, r3
 800f9e2:	fb11 f303 	smulbb	r3, r1, r3
 800f9e6:	b29b      	uxth	r3, r3
 800f9e8:	4413      	add	r3, r2
 800f9ea:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800f9ec:	3301      	adds	r3, #1
 800f9ee:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 800f9f0:	7ffb      	ldrb	r3, [r7, #31]
 800f9f2:	b29c      	uxth	r4, r3
 800f9f4:	697b      	ldr	r3, [r7, #20]
 800f9f6:	011b      	lsls	r3, r3, #4
 800f9f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f9fc:	4a76      	ldr	r2, [pc, #472]	; (800fbd8 <updateStringItem+0xe58>)
 800f9fe:	4413      	add	r3, r2
 800fa00:	3304      	adds	r3, #4
 800fa02:	4618      	mov	r0, r3
 800fa04:	f7f0 fc76 	bl	80002f4 <strlen>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	b29a      	uxth	r2, r3
 800fa0c:	4b73      	ldr	r3, [pc, #460]	; (800fbdc <updateStringItem+0xe5c>)
 800fa0e:	889b      	ldrh	r3, [r3, #4]
 800fa10:	fb12 f303 	smulbb	r3, r2, r3
 800fa14:	b29b      	uxth	r3, r3
 800fa16:	4423      	add	r3, r4
 800fa18:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800fa1a:	3301      	adds	r3, #1
 800fa1c:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800fa1e:	7fbb      	ldrb	r3, [r7, #30]
 800fa20:	b29a      	uxth	r2, r3
 800fa22:	7f7b      	ldrb	r3, [r7, #29]
 800fa24:	b299      	uxth	r1, r3
 800fa26:	697b      	ldr	r3, [r7, #20]
 800fa28:	b29b      	uxth	r3, r3
 800fa2a:	fb11 f303 	smulbb	r3, r1, r3
 800fa2e:	b29b      	uxth	r3, r3
 800fa30:	4413      	add	r3, r2
 800fa32:	b29a      	uxth	r2, r3
 800fa34:	4b69      	ldr	r3, [pc, #420]	; (800fbdc <updateStringItem+0xe5c>)
 800fa36:	88db      	ldrh	r3, [r3, #6]
 800fa38:	4413      	add	r3, r2
 800fa3a:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 800fa3c:	3301      	adds	r3, #1
 800fa3e:	b29b      	uxth	r3, r3
 800fa40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa44:	9200      	str	r2, [sp, #0]
 800fa46:	4602      	mov	r2, r0
 800fa48:	4631      	mov	r1, r6
 800fa4a:	4628      	mov	r0, r5
 800fa4c:	f7f9 f844 	bl	8008ad8 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800fa50:	7ffb      	ldrb	r3, [r7, #31]
 800fa52:	b29b      	uxth	r3, r3
 800fa54:	3301      	adds	r3, #1
 800fa56:	b298      	uxth	r0, r3
 800fa58:	7fbb      	ldrb	r3, [r7, #30]
 800fa5a:	b29a      	uxth	r2, r3
 800fa5c:	7f7b      	ldrb	r3, [r7, #29]
 800fa5e:	b299      	uxth	r1, r3
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	b29b      	uxth	r3, r3
 800fa64:	fb11 f303 	smulbb	r3, r1, r3
 800fa68:	b29b      	uxth	r3, r3
 800fa6a:	4413      	add	r3, r2
 800fa6c:	b29b      	uxth	r3, r3
 800fa6e:	3301      	adds	r3, #1
 800fa70:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	011b      	lsls	r3, r3, #4
 800fa76:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fa7a:	4a57      	ldr	r2, [pc, #348]	; (800fbd8 <updateStringItem+0xe58>)
 800fa7c:	4413      	add	r3, r2
 800fa7e:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800fa80:	2300      	movs	r3, #0
 800fa82:	9301      	str	r3, [sp, #4]
 800fa84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fa88:	9300      	str	r3, [sp, #0]
 800fa8a:	4b54      	ldr	r3, [pc, #336]	; (800fbdc <updateStringItem+0xe5c>)
 800fa8c:	f7f9 fc42 	bl	8009314 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800fa90:	7ffb      	ldrb	r3, [r7, #31]
 800fa92:	b29a      	uxth	r2, r3
 800fa94:	7f3b      	ldrb	r3, [r7, #28]
 800fa96:	085b      	lsrs	r3, r3, #1
 800fa98:	b2db      	uxtb	r3, r3
 800fa9a:	b29b      	uxth	r3, r3
 800fa9c:	4413      	add	r3, r2
 800fa9e:	b29b      	uxth	r3, r3
 800faa0:	3301      	adds	r3, #1
 800faa2:	b298      	uxth	r0, r3
 800faa4:	7fbb      	ldrb	r3, [r7, #30]
 800faa6:	b29a      	uxth	r2, r3
 800faa8:	7f7b      	ldrb	r3, [r7, #29]
 800faaa:	b299      	uxth	r1, r3
 800faac:	697b      	ldr	r3, [r7, #20]
 800faae:	b29b      	uxth	r3, r3
 800fab0:	fb11 f303 	smulbb	r3, r1, r3
 800fab4:	b29b      	uxth	r3, r3
 800fab6:	4413      	add	r3, r2
 800fab8:	b29b      	uxth	r3, r3
 800faba:	3301      	adds	r3, #1
 800fabc:	b299      	uxth	r1, r3
 800fabe:	f107 020c 	add.w	r2, r7, #12
 800fac2:	2300      	movs	r3, #0
 800fac4:	9301      	str	r3, [sp, #4]
 800fac6:	f24c 6318 	movw	r3, #50712	; 0xc618
 800faca:	9300      	str	r3, [sp, #0]
 800facc:	4b43      	ldr	r3, [pc, #268]	; (800fbdc <updateStringItem+0xe5c>)
 800face:	f7f9 fc21 	bl	8009314 <Paint_DrawString_EN>
 800fad2:	e10d      	b.n	800fcf0 <updateStringItem+0xf70>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == DOWN)
 800fad4:	79fb      	ldrb	r3, [r7, #7]
 800fad6:	2b01      	cmp	r3, #1
 800fad8:	d136      	bne.n	800fb48 <updateStringItem+0xdc8>
					{

						multiplierIndex = 0;
 800fada:	4b41      	ldr	r3, [pc, #260]	; (800fbe0 <updateStringItem+0xe60>)
 800fadc:	2200      	movs	r2, #0
 800fade:	701a      	strb	r2, [r3, #0]
						stringItem.deltaMultiplier = stringMultiplierArray[multiplierIndex];
 800fae0:	4b3f      	ldr	r3, [pc, #252]	; (800fbe0 <updateStringItem+0xe60>)
 800fae2:	781b      	ldrb	r3, [r3, #0]
 800fae4:	461a      	mov	r2, r3
 800fae6:	4b3f      	ldr	r3, [pc, #252]	; (800fbe4 <updateStringItem+0xe64>)
 800fae8:	5c9a      	ldrb	r2, [r3, r2]
 800faea:	4b3b      	ldr	r3, [pc, #236]	; (800fbd8 <updateStringItem+0xe58>)
 800faec:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
						sprintf(localString,"%d",stringItem.deltaMultiplier);
 800faf0:	4b39      	ldr	r3, [pc, #228]	; (800fbd8 <updateStringItem+0xe58>)
 800faf2:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 800faf6:	461a      	mov	r2, r3
 800faf8:	f107 030c 	add.w	r3, r7, #12
 800fafc:	493a      	ldr	r1, [pc, #232]	; (800fbe8 <updateStringItem+0xe68>)
 800fafe:	4618      	mov	r0, r3
 800fb00:	f001 fd54 	bl	80115ac <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800fb04:	7ffb      	ldrb	r3, [r7, #31]
 800fb06:	b29a      	uxth	r2, r3
 800fb08:	7f3b      	ldrb	r3, [r7, #28]
 800fb0a:	085b      	lsrs	r3, r3, #1
 800fb0c:	b2db      	uxtb	r3, r3
 800fb0e:	b29b      	uxth	r3, r3
 800fb10:	4413      	add	r3, r2
 800fb12:	b29b      	uxth	r3, r3
 800fb14:	3301      	adds	r3, #1
 800fb16:	b298      	uxth	r0, r3
 800fb18:	7fbb      	ldrb	r3, [r7, #30]
 800fb1a:	b29a      	uxth	r2, r3
 800fb1c:	7f7b      	ldrb	r3, [r7, #29]
 800fb1e:	b299      	uxth	r1, r3
 800fb20:	697b      	ldr	r3, [r7, #20]
 800fb22:	b29b      	uxth	r3, r3
 800fb24:	fb11 f303 	smulbb	r3, r1, r3
 800fb28:	b29b      	uxth	r3, r3
 800fb2a:	4413      	add	r3, r2
 800fb2c:	b29b      	uxth	r3, r3
 800fb2e:	3301      	adds	r3, #1
 800fb30:	b299      	uxth	r1, r3
 800fb32:	f107 020c 	add.w	r2, r7, #12
 800fb36:	2300      	movs	r3, #0
 800fb38:	9301      	str	r3, [sp, #4]
 800fb3a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800fb3e:	9300      	str	r3, [sp, #0]
 800fb40:	4b26      	ldr	r3, [pc, #152]	; (800fbdc <updateStringItem+0xe5c>)
 800fb42:	f7f9 fbe7 	bl	8009314 <Paint_DrawString_EN>
 800fb46:	e0d3      	b.n	800fcf0 <updateStringItem+0xf70>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == UP)
 800fb48:	79fb      	ldrb	r3, [r7, #7]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	f040 80d0 	bne.w	800fcf0 <updateStringItem+0xf70>
					{
						multiplierIndex = fmin(multiplierIndex + 1, 7);
 800fb50:	4b23      	ldr	r3, [pc, #140]	; (800fbe0 <updateStringItem+0xe60>)
 800fb52:	781b      	ldrb	r3, [r3, #0]
 800fb54:	3301      	adds	r3, #1
 800fb56:	ee07 3a90 	vmov	s15, r3
 800fb5a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800fb5e:	eeb1 1b0c 	vmov.f64	d1, #28	; 0x40e00000  7.0
 800fb62:	eeb0 0b47 	vmov.f64	d0, d7
 800fb66:	f005 f8b8 	bl	8014cda <fmin>
 800fb6a:	eeb0 7b40 	vmov.f64	d7, d0
 800fb6e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800fb72:	edc7 7a00 	vstr	s15, [r7]
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	b2da      	uxtb	r2, r3
 800fb7a:	4b19      	ldr	r3, [pc, #100]	; (800fbe0 <updateStringItem+0xe60>)
 800fb7c:	701a      	strb	r2, [r3, #0]
						stringItem.deltaMultiplier = stringMultiplierArray[multiplierIndex];
 800fb7e:	4b18      	ldr	r3, [pc, #96]	; (800fbe0 <updateStringItem+0xe60>)
 800fb80:	781b      	ldrb	r3, [r3, #0]
 800fb82:	461a      	mov	r2, r3
 800fb84:	4b17      	ldr	r3, [pc, #92]	; (800fbe4 <updateStringItem+0xe64>)
 800fb86:	5c9a      	ldrb	r2, [r3, r2]
 800fb88:	4b13      	ldr	r3, [pc, #76]	; (800fbd8 <updateStringItem+0xe58>)
 800fb8a:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
//						sprintf(localString,"%04d",stringItem.deltaMultiplier);
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800fb8e:	7ffb      	ldrb	r3, [r7, #31]
 800fb90:	b29a      	uxth	r2, r3
 800fb92:	7f3b      	ldrb	r3, [r7, #28]
 800fb94:	085b      	lsrs	r3, r3, #1
 800fb96:	b2db      	uxtb	r3, r3
 800fb98:	b29b      	uxth	r3, r3
 800fb9a:	4413      	add	r3, r2
 800fb9c:	b29b      	uxth	r3, r3
 800fb9e:	3301      	adds	r3, #1
 800fba0:	b298      	uxth	r0, r3
 800fba2:	7fbb      	ldrb	r3, [r7, #30]
 800fba4:	b29a      	uxth	r2, r3
 800fba6:	7f7b      	ldrb	r3, [r7, #29]
 800fba8:	b299      	uxth	r1, r3
 800fbaa:	697b      	ldr	r3, [r7, #20]
 800fbac:	b29b      	uxth	r3, r3
 800fbae:	fb11 f303 	smulbb	r3, r1, r3
 800fbb2:	b29b      	uxth	r3, r3
 800fbb4:	4413      	add	r3, r2
 800fbb6:	b29b      	uxth	r3, r3
 800fbb8:	3301      	adds	r3, #1
 800fbba:	b299      	uxth	r1, r3
 800fbbc:	f107 020c 	add.w	r2, r7, #12
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	9301      	str	r3, [sp, #4]
 800fbc4:	f24c 6318 	movw	r3, #50712	; 0xc618
 800fbc8:	9300      	str	r3, [sp, #0]
 800fbca:	4b04      	ldr	r3, [pc, #16]	; (800fbdc <updateStringItem+0xe5c>)
 800fbcc:	f7f9 fba2 	bl	8009314 <Paint_DrawString_EN>
 800fbd0:	e08e      	b.n	800fcf0 <updateStringItem+0xf70>
 800fbd2:	bf00      	nop
 800fbd4:	2400a5bc 	.word	0x2400a5bc
 800fbd8:	2400b030 	.word	0x2400b030
 800fbdc:	24000018 	.word	0x24000018
 800fbe0:	2400a0d8 	.word	0x2400a0d8
 800fbe4:	2400a0ec 	.word	0x2400a0ec
 800fbe8:	0801544c 	.word	0x0801544c
								localString, &Font12, LGRAY,  BLACK);
					}
				}
				else
				{
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800fbec:	7ffb      	ldrb	r3, [r7, #31]
 800fbee:	b29b      	uxth	r3, r3
 800fbf0:	3301      	adds	r3, #1
 800fbf2:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800fbf4:	7fbb      	ldrb	r3, [r7, #30]
 800fbf6:	b29a      	uxth	r2, r3
 800fbf8:	7f7b      	ldrb	r3, [r7, #29]
 800fbfa:	b299      	uxth	r1, r3
 800fbfc:	697b      	ldr	r3, [r7, #20]
 800fbfe:	b29b      	uxth	r3, r3
 800fc00:	fb11 f303 	smulbb	r3, r1, r3
 800fc04:	b29b      	uxth	r3, r3
 800fc06:	4413      	add	r3, r2
 800fc08:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800fc0a:	3301      	adds	r3, #1
 800fc0c:	b29e      	uxth	r6, r3
							MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 800fc0e:	7ffb      	ldrb	r3, [r7, #31]
 800fc10:	b29c      	uxth	r4, r3
 800fc12:	697b      	ldr	r3, [r7, #20]
 800fc14:	011b      	lsls	r3, r3, #4
 800fc16:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fc1a:	4a95      	ldr	r2, [pc, #596]	; (800fe70 <updateStringItem+0x10f0>)
 800fc1c:	4413      	add	r3, r2
 800fc1e:	3304      	adds	r3, #4
 800fc20:	4618      	mov	r0, r3
 800fc22:	f7f0 fb67 	bl	80002f4 <strlen>
 800fc26:	4603      	mov	r3, r0
 800fc28:	b29a      	uxth	r2, r3
 800fc2a:	4b92      	ldr	r3, [pc, #584]	; (800fe74 <updateStringItem+0x10f4>)
 800fc2c:	889b      	ldrh	r3, [r3, #4]
 800fc2e:	fb12 f303 	smulbb	r3, r2, r3
 800fc32:	b29b      	uxth	r3, r3
 800fc34:	4423      	add	r3, r4
 800fc36:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800fc38:	3301      	adds	r3, #1
 800fc3a:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 800fc3c:	7fbb      	ldrb	r3, [r7, #30]
 800fc3e:	b29a      	uxth	r2, r3
 800fc40:	7f7b      	ldrb	r3, [r7, #29]
 800fc42:	b299      	uxth	r1, r3
 800fc44:	697b      	ldr	r3, [r7, #20]
 800fc46:	b29b      	uxth	r3, r3
 800fc48:	fb11 f303 	smulbb	r3, r1, r3
 800fc4c:	b29b      	uxth	r3, r3
 800fc4e:	4413      	add	r3, r2
 800fc50:	b29a      	uxth	r2, r3
 800fc52:	4b88      	ldr	r3, [pc, #544]	; (800fe74 <updateStringItem+0x10f4>)
 800fc54:	88db      	ldrh	r3, [r3, #6]
 800fc56:	4413      	add	r3, r2
 800fc58:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 800fc5a:	3301      	adds	r3, #1
 800fc5c:	b29b      	uxth	r3, r3
 800fc5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc62:	9200      	str	r2, [sp, #0]
 800fc64:	4602      	mov	r2, r0
 800fc66:	4631      	mov	r1, r6
 800fc68:	4628      	mov	r0, r5
 800fc6a:	f7f8 ff35 	bl	8008ad8 <Paint_ClearWindows>
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800fc6e:	7ffb      	ldrb	r3, [r7, #31]
 800fc70:	b29b      	uxth	r3, r3
 800fc72:	3301      	adds	r3, #1
 800fc74:	b298      	uxth	r0, r3
 800fc76:	7fbb      	ldrb	r3, [r7, #30]
 800fc78:	b29a      	uxth	r2, r3
 800fc7a:	7f7b      	ldrb	r3, [r7, #29]
 800fc7c:	b299      	uxth	r1, r3
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	b29b      	uxth	r3, r3
 800fc82:	fb11 f303 	smulbb	r3, r1, r3
 800fc86:	b29b      	uxth	r3, r3
 800fc88:	4413      	add	r3, r2
 800fc8a:	b29b      	uxth	r3, r3
 800fc8c:	3301      	adds	r3, #1
 800fc8e:	b299      	uxth	r1, r3
							stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 800fc90:	697b      	ldr	r3, [r7, #20]
 800fc92:	011b      	lsls	r3, r3, #4
 800fc94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fc98:	4a75      	ldr	r2, [pc, #468]	; (800fe70 <updateStringItem+0x10f0>)
 800fc9a:	4413      	add	r3, r2
 800fc9c:	1d1a      	adds	r2, r3, #4
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800fc9e:	2300      	movs	r3, #0
 800fca0:	9301      	str	r3, [sp, #4]
 800fca2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fca6:	9300      	str	r3, [sp, #0]
 800fca8:	4b72      	ldr	r3, [pc, #456]	; (800fe74 <updateStringItem+0x10f4>)
 800fcaa:	f7f9 fb33 	bl	8009314 <Paint_DrawString_EN>
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800fcae:	7ffb      	ldrb	r3, [r7, #31]
 800fcb0:	b29a      	uxth	r2, r3
 800fcb2:	7f3b      	ldrb	r3, [r7, #28]
 800fcb4:	085b      	lsrs	r3, r3, #1
 800fcb6:	b2db      	uxtb	r3, r3
 800fcb8:	b29b      	uxth	r3, r3
 800fcba:	4413      	add	r3, r2
 800fcbc:	b29b      	uxth	r3, r3
 800fcbe:	3301      	adds	r3, #1
 800fcc0:	b298      	uxth	r0, r3
 800fcc2:	7fbb      	ldrb	r3, [r7, #30]
 800fcc4:	b29a      	uxth	r2, r3
 800fcc6:	7f7b      	ldrb	r3, [r7, #29]
 800fcc8:	b299      	uxth	r1, r3
 800fcca:	697b      	ldr	r3, [r7, #20]
 800fccc:	b29b      	uxth	r3, r3
 800fcce:	fb11 f303 	smulbb	r3, r1, r3
 800fcd2:	b29b      	uxth	r3, r3
 800fcd4:	4413      	add	r3, r2
 800fcd6:	b29b      	uxth	r3, r3
 800fcd8:	3301      	adds	r3, #1
 800fcda:	b299      	uxth	r1, r3
 800fcdc:	f107 020c 	add.w	r2, r7, #12
 800fce0:	2300      	movs	r3, #0
 800fce2:	9301      	str	r3, [sp, #4]
 800fce4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fce8:	9300      	str	r3, [sp, #0]
 800fcea:	4b62      	ldr	r3, [pc, #392]	; (800fe74 <updateStringItem+0x10f4>)
 800fcec:	f7f9 fb12 	bl	8009314 <Paint_DrawString_EN>
							localString, &Font12, WHITE,  BLACK);
				}
			}
		}
		if ( (i >= stringItem.numberOfItemsInPage - 2) && (i < stringItem.numberOfItemsInPage) )
 800fcf0:	4b5f      	ldr	r3, [pc, #380]	; (800fe70 <updateStringItem+0x10f0>)
 800fcf2:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 800fcf6:	3b02      	subs	r3, #2
 800fcf8:	697a      	ldr	r2, [r7, #20]
 800fcfa:	429a      	cmp	r2, r3
 800fcfc:	f2c0 8281 	blt.w	8010202 <updateStringItem+0x1482>
 800fd00:	4b5b      	ldr	r3, [pc, #364]	; (800fe70 <updateStringItem+0x10f0>)
 800fd02:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 800fd06:	461a      	mov	r2, r3
 800fd08:	697b      	ldr	r3, [r7, #20]
 800fd0a:	4293      	cmp	r3, r2
 800fd0c:	f280 8279 	bge.w	8010202 <updateStringItem+0x1482>
		{
			if (howToDraw == FULL)
 800fd10:	79fb      	ldrb	r3, [r7, #7]
 800fd12:	2b02      	cmp	r3, #2
 800fd14:	d17a      	bne.n	800fe0c <updateStringItem+0x108c>
			{
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800fd16:	7ffb      	ldrb	r3, [r7, #31]
 800fd18:	b298      	uxth	r0, r3
 800fd1a:	7fbb      	ldrb	r3, [r7, #30]
 800fd1c:	b29a      	uxth	r2, r3
 800fd1e:	7f7b      	ldrb	r3, [r7, #29]
 800fd20:	b299      	uxth	r1, r3
 800fd22:	697b      	ldr	r3, [r7, #20]
 800fd24:	b29b      	uxth	r3, r3
 800fd26:	fb11 f303 	smulbb	r3, r1, r3
 800fd2a:	b29b      	uxth	r3, r3
 800fd2c:	4413      	add	r3, r2
 800fd2e:	b29c      	uxth	r4, r3
 800fd30:	7ffb      	ldrb	r3, [r7, #31]
 800fd32:	b29a      	uxth	r2, r3
 800fd34:	7f3b      	ldrb	r3, [r7, #28]
 800fd36:	b29b      	uxth	r3, r3
 800fd38:	4413      	add	r3, r2
 800fd3a:	b29d      	uxth	r5, r3
 800fd3c:	7fbb      	ldrb	r3, [r7, #30]
 800fd3e:	b29a      	uxth	r2, r3
 800fd40:	7f7b      	ldrb	r3, [r7, #29]
 800fd42:	b299      	uxth	r1, r3
						MenuRectangleStartX+MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 800fd44:	697b      	ldr	r3, [r7, #20]
 800fd46:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 800fd48:	b29b      	uxth	r3, r3
 800fd4a:	fb11 f303 	smulbb	r3, r1, r3
 800fd4e:	b29b      	uxth	r3, r3
 800fd50:	4413      	add	r3, r2
 800fd52:	b29b      	uxth	r3, r3
 800fd54:	2200      	movs	r2, #0
 800fd56:	9202      	str	r2, [sp, #8]
 800fd58:	2201      	movs	r2, #1
 800fd5a:	9201      	str	r2, [sp, #4]
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	9200      	str	r2, [sp, #0]
 800fd60:	462a      	mov	r2, r5
 800fd62:	4621      	mov	r1, r4
 800fd64:	f7f9 f832 	bl	8008dcc <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
				if (currentCursorPosition.cursorPosition == i)
 800fd68:	4b43      	ldr	r3, [pc, #268]	; (800fe78 <updateStringItem+0x10f8>)
 800fd6a:	781b      	ldrb	r3, [r3, #0]
 800fd6c:	461a      	mov	r2, r3
 800fd6e:	697b      	ldr	r3, [r7, #20]
 800fd70:	4293      	cmp	r3, r2
 800fd72:	d125      	bne.n	800fdc0 <updateStringItem+0x1040>
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800fd74:	7efb      	ldrb	r3, [r7, #27]
 800fd76:	b29c      	uxth	r4, r3
 800fd78:	7fbb      	ldrb	r3, [r7, #30]
 800fd7a:	b29a      	uxth	r2, r3
 800fd7c:	7f7b      	ldrb	r3, [r7, #29]
 800fd7e:	b299      	uxth	r1, r3
 800fd80:	697b      	ldr	r3, [r7, #20]
 800fd82:	b29b      	uxth	r3, r3
 800fd84:	fb11 f303 	smulbb	r3, r1, r3
 800fd88:	b29b      	uxth	r3, r3
 800fd8a:	4413      	add	r3, r2
 800fd8c:	b29b      	uxth	r3, r3
 800fd8e:	3301      	adds	r3, #1
 800fd90:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i], BLACK, LGRAY, 16, Font12);
 800fd92:	697b      	ldr	r3, [r7, #20]
 800fd94:	011b      	lsls	r3, r3, #4
 800fd96:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fd9a:	4a35      	ldr	r2, [pc, #212]	; (800fe70 <updateStringItem+0x10f0>)
 800fd9c:	4413      	add	r3, r2
 800fd9e:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800fda0:	4934      	ldr	r1, [pc, #208]	; (800fe74 <updateStringItem+0x10f4>)
 800fda2:	ab02      	add	r3, sp, #8
 800fda4:	c903      	ldmia	r1, {r0, r1}
 800fda6:	e883 0003 	stmia.w	r3, {r0, r1}
 800fdaa:	2310      	movs	r3, #16
 800fdac:	9301      	str	r3, [sp, #4]
 800fdae:	f24c 6318 	movw	r3, #50712	; 0xc618
 800fdb2:	9300      	str	r3, [sp, #0]
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	4629      	mov	r1, r5
 800fdb8:	4620      	mov	r0, r4
 800fdba:	f7fc fbb1 	bl	800c520 <centeredString>
 800fdbe:	e220      	b.n	8010202 <updateStringItem+0x1482>
				}
				else
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800fdc0:	7efb      	ldrb	r3, [r7, #27]
 800fdc2:	b29c      	uxth	r4, r3
 800fdc4:	7fbb      	ldrb	r3, [r7, #30]
 800fdc6:	b29a      	uxth	r2, r3
 800fdc8:	7f7b      	ldrb	r3, [r7, #29]
 800fdca:	b299      	uxth	r1, r3
 800fdcc:	697b      	ldr	r3, [r7, #20]
 800fdce:	b29b      	uxth	r3, r3
 800fdd0:	fb11 f303 	smulbb	r3, r1, r3
 800fdd4:	b29b      	uxth	r3, r3
 800fdd6:	4413      	add	r3, r2
 800fdd8:	b29b      	uxth	r3, r3
 800fdda:	3301      	adds	r3, #1
 800fddc:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i], BLACK, WHITE, 16, Font12);
 800fdde:	697b      	ldr	r3, [r7, #20]
 800fde0:	011b      	lsls	r3, r3, #4
 800fde2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fde6:	4a22      	ldr	r2, [pc, #136]	; (800fe70 <updateStringItem+0x10f0>)
 800fde8:	4413      	add	r3, r2
 800fdea:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800fdec:	4921      	ldr	r1, [pc, #132]	; (800fe74 <updateStringItem+0x10f4>)
 800fdee:	ab02      	add	r3, sp, #8
 800fdf0:	c903      	ldmia	r1, {r0, r1}
 800fdf2:	e883 0003 	stmia.w	r3, {r0, r1}
 800fdf6:	2310      	movs	r3, #16
 800fdf8:	9301      	str	r3, [sp, #4]
 800fdfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fdfe:	9300      	str	r3, [sp, #0]
 800fe00:	2300      	movs	r3, #0
 800fe02:	4629      	mov	r1, r5
 800fe04:	4620      	mov	r0, r4
 800fe06:	f7fc fb8b 	bl	800c520 <centeredString>
 800fe0a:	e1fa      	b.n	8010202 <updateStringItem+0x1482>
				}
			}
			else if (howToDraw == DOWN)
 800fe0c:	79fb      	ldrb	r3, [r7, #7]
 800fe0e:	2b01      	cmp	r3, #1
 800fe10:	f040 80ca 	bne.w	800ffa8 <updateStringItem+0x1228>
			{
				if ( (currentCursorPosition.cursorPosition == 4) && (i == 4) )
 800fe14:	4b18      	ldr	r3, [pc, #96]	; (800fe78 <updateStringItem+0x10f8>)
 800fe16:	781b      	ldrb	r3, [r3, #0]
 800fe18:	2b04      	cmp	r3, #4
 800fe1a:	d12f      	bne.n	800fe7c <updateStringItem+0x10fc>
 800fe1c:	697b      	ldr	r3, [r7, #20]
 800fe1e:	2b04      	cmp	r3, #4
 800fe20:	d12c      	bne.n	800fe7c <updateStringItem+0x10fc>
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800fe22:	7efb      	ldrb	r3, [r7, #27]
 800fe24:	b29c      	uxth	r4, r3
 800fe26:	7fbb      	ldrb	r3, [r7, #30]
 800fe28:	b29a      	uxth	r2, r3
 800fe2a:	7f7b      	ldrb	r3, [r7, #29]
 800fe2c:	b299      	uxth	r1, r3
 800fe2e:	697b      	ldr	r3, [r7, #20]
 800fe30:	b29b      	uxth	r3, r3
 800fe32:	fb11 f303 	smulbb	r3, r1, r3
 800fe36:	b29b      	uxth	r3, r3
 800fe38:	4413      	add	r3, r2
 800fe3a:	b29b      	uxth	r3, r3
 800fe3c:	3301      	adds	r3, #1
 800fe3e:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i], BLACK, LGRAY, 16, Font12);
 800fe40:	697b      	ldr	r3, [r7, #20]
 800fe42:	011b      	lsls	r3, r3, #4
 800fe44:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fe48:	4a09      	ldr	r2, [pc, #36]	; (800fe70 <updateStringItem+0x10f0>)
 800fe4a:	4413      	add	r3, r2
 800fe4c:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800fe4e:	4909      	ldr	r1, [pc, #36]	; (800fe74 <updateStringItem+0x10f4>)
 800fe50:	ab02      	add	r3, sp, #8
 800fe52:	c903      	ldmia	r1, {r0, r1}
 800fe54:	e883 0003 	stmia.w	r3, {r0, r1}
 800fe58:	2310      	movs	r3, #16
 800fe5a:	9301      	str	r3, [sp, #4]
 800fe5c:	f24c 6318 	movw	r3, #50712	; 0xc618
 800fe60:	9300      	str	r3, [sp, #0]
 800fe62:	2300      	movs	r3, #0
 800fe64:	4629      	mov	r1, r5
 800fe66:	4620      	mov	r0, r4
 800fe68:	f7fc fb5a 	bl	800c520 <centeredString>
 800fe6c:	e1c9      	b.n	8010202 <updateStringItem+0x1482>
 800fe6e:	bf00      	nop
 800fe70:	2400b030 	.word	0x2400b030
 800fe74:	24000018 	.word	0x24000018
 800fe78:	2400a5bc 	.word	0x2400a5bc
				}
				else if ( (currentCursorPosition.cursorPosition == 5) && (i == 5) )
 800fe7c:	4b8b      	ldr	r3, [pc, #556]	; (80100ac <updateStringItem+0x132c>)
 800fe7e:	781b      	ldrb	r3, [r3, #0]
 800fe80:	2b05      	cmp	r3, #5
 800fe82:	f040 81be 	bne.w	8010202 <updateStringItem+0x1482>
 800fe86:	697b      	ldr	r3, [r7, #20]
 800fe88:	2b05      	cmp	r3, #5
 800fe8a:	f040 81ba 	bne.w	8010202 <updateStringItem+0x1482>
				{
					Paint_ClearWindows(DisplayCenterWidth,
 800fe8e:	7efb      	ldrb	r3, [r7, #27]
 800fe90:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 800fe92:	7fbb      	ldrb	r3, [r7, #30]
 800fe94:	b29a      	uxth	r2, r3
 800fe96:	7f7b      	ldrb	r3, [r7, #29]
 800fe98:	b299      	uxth	r1, r3
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	3b01      	subs	r3, #1
 800fe9e:	b29b      	uxth	r3, r3
 800fea0:	fb11 f303 	smulbb	r3, r1, r3
 800fea4:	b29b      	uxth	r3, r3
 800fea6:	4413      	add	r3, r2
 800fea8:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth,
 800feaa:	3301      	adds	r3, #1
 800feac:	b29e      	uxth	r6, r3
 800feae:	7efb      	ldrb	r3, [r7, #27]
 800feb0:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(stringItem.itemsArray[i - 1]) * Font12.Width,
 800feb2:	697b      	ldr	r3, [r7, #20]
 800feb4:	3b01      	subs	r3, #1
 800feb6:	011b      	lsls	r3, r3, #4
 800feb8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800febc:	4a7c      	ldr	r2, [pc, #496]	; (80100b0 <updateStringItem+0x1330>)
 800febe:	4413      	add	r3, r2
 800fec0:	3304      	adds	r3, #4
 800fec2:	4618      	mov	r0, r3
 800fec4:	f7f0 fa16 	bl	80002f4 <strlen>
 800fec8:	4603      	mov	r3, r0
					Paint_ClearWindows(DisplayCenterWidth,
 800feca:	b29a      	uxth	r2, r3
							DisplayCenterWidth + strlen(stringItem.itemsArray[i - 1]) * Font12.Width,
 800fecc:	4b79      	ldr	r3, [pc, #484]	; (80100b4 <updateStringItem+0x1334>)
 800fece:	889b      	ldrh	r3, [r3, #4]
					Paint_ClearWindows(DisplayCenterWidth,
 800fed0:	fb12 f303 	smulbb	r3, r2, r3
 800fed4:	b29b      	uxth	r3, r3
 800fed6:	4423      	add	r3, r4
 800fed8:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1 + Font12.Height, WHITE);
 800feda:	7fbb      	ldrb	r3, [r7, #30]
 800fedc:	b29a      	uxth	r2, r3
 800fede:	7f7b      	ldrb	r3, [r7, #29]
 800fee0:	b299      	uxth	r1, r3
 800fee2:	697b      	ldr	r3, [r7, #20]
 800fee4:	3b01      	subs	r3, #1
 800fee6:	b29b      	uxth	r3, r3
 800fee8:	fb11 f303 	smulbb	r3, r1, r3
 800feec:	b29b      	uxth	r3, r3
 800feee:	4413      	add	r3, r2
 800fef0:	b29a      	uxth	r2, r3
 800fef2:	4b70      	ldr	r3, [pc, #448]	; (80100b4 <updateStringItem+0x1334>)
 800fef4:	88db      	ldrh	r3, [r3, #6]
 800fef6:	4413      	add	r3, r2
 800fef8:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth,
 800fefa:	3301      	adds	r3, #1
 800fefc:	b29b      	uxth	r3, r3
 800fefe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ff02:	9200      	str	r2, [sp, #0]
 800ff04:	4602      	mov	r2, r0
 800ff06:	4631      	mov	r1, r6
 800ff08:	4628      	mov	r0, r5
 800ff0a:	f7f8 fde5 	bl	8008ad8 <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 800ff0e:	7efb      	ldrb	r3, [r7, #27]
 800ff10:	b29c      	uxth	r4, r3
 800ff12:	7fbb      	ldrb	r3, [r7, #30]
 800ff14:	b29a      	uxth	r2, r3
 800ff16:	7f7b      	ldrb	r3, [r7, #29]
 800ff18:	b299      	uxth	r1, r3
 800ff1a:	697b      	ldr	r3, [r7, #20]
 800ff1c:	3b01      	subs	r3, #1
 800ff1e:	b29b      	uxth	r3, r3
 800ff20:	fb11 f303 	smulbb	r3, r1, r3
 800ff24:	b29b      	uxth	r3, r3
 800ff26:	4413      	add	r3, r2
 800ff28:	b29b      	uxth	r3, r3
 800ff2a:	3301      	adds	r3, #1
 800ff2c:	b29d      	uxth	r5, r3
							stringItem.itemsArray[(i - 1)], BLACK, WHITE, 16, Font12);
 800ff2e:	697b      	ldr	r3, [r7, #20]
 800ff30:	3b01      	subs	r3, #1
 800ff32:	011b      	lsls	r3, r3, #4
 800ff34:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ff38:	4a5d      	ldr	r2, [pc, #372]	; (80100b0 <updateStringItem+0x1330>)
 800ff3a:	4413      	add	r3, r2
 800ff3c:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 800ff3e:	495d      	ldr	r1, [pc, #372]	; (80100b4 <updateStringItem+0x1334>)
 800ff40:	ab02      	add	r3, sp, #8
 800ff42:	c903      	ldmia	r1, {r0, r1}
 800ff44:	e883 0003 	stmia.w	r3, {r0, r1}
 800ff48:	2310      	movs	r3, #16
 800ff4a:	9301      	str	r3, [sp, #4]
 800ff4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ff50:	9300      	str	r3, [sp, #0]
 800ff52:	2300      	movs	r3, #0
 800ff54:	4629      	mov	r1, r5
 800ff56:	4620      	mov	r0, r4
 800ff58:	f7fc fae2 	bl	800c520 <centeredString>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800ff5c:	7efb      	ldrb	r3, [r7, #27]
 800ff5e:	b29c      	uxth	r4, r3
 800ff60:	7fbb      	ldrb	r3, [r7, #30]
 800ff62:	b29a      	uxth	r2, r3
 800ff64:	7f7b      	ldrb	r3, [r7, #29]
 800ff66:	b299      	uxth	r1, r3
 800ff68:	697b      	ldr	r3, [r7, #20]
 800ff6a:	b29b      	uxth	r3, r3
 800ff6c:	fb11 f303 	smulbb	r3, r1, r3
 800ff70:	b29b      	uxth	r3, r3
 800ff72:	4413      	add	r3, r2
 800ff74:	b29b      	uxth	r3, r3
 800ff76:	3301      	adds	r3, #1
 800ff78:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i], BLACK, LGRAY, 16, Font12);
 800ff7a:	697b      	ldr	r3, [r7, #20]
 800ff7c:	011b      	lsls	r3, r3, #4
 800ff7e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ff82:	4a4b      	ldr	r2, [pc, #300]	; (80100b0 <updateStringItem+0x1330>)
 800ff84:	4413      	add	r3, r2
 800ff86:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 800ff88:	494a      	ldr	r1, [pc, #296]	; (80100b4 <updateStringItem+0x1334>)
 800ff8a:	ab02      	add	r3, sp, #8
 800ff8c:	c903      	ldmia	r1, {r0, r1}
 800ff8e:	e883 0003 	stmia.w	r3, {r0, r1}
 800ff92:	2310      	movs	r3, #16
 800ff94:	9301      	str	r3, [sp, #4]
 800ff96:	f24c 6318 	movw	r3, #50712	; 0xc618
 800ff9a:	9300      	str	r3, [sp, #0]
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	4629      	mov	r1, r5
 800ffa0:	4620      	mov	r0, r4
 800ffa2:	f7fc fabd 	bl	800c520 <centeredString>
 800ffa6:	e12c      	b.n	8010202 <updateStringItem+0x1482>
				}
			}
			else if (howToDraw == UP)
 800ffa8:	79fb      	ldrb	r3, [r7, #7]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	f040 8129 	bne.w	8010202 <updateStringItem+0x1482>
			{
				if ( (currentCursorPosition.cursorPosition == 3) && (i == 4) )
 800ffb0:	4b3e      	ldr	r3, [pc, #248]	; (80100ac <updateStringItem+0x132c>)
 800ffb2:	781b      	ldrb	r3, [r3, #0]
 800ffb4:	2b03      	cmp	r3, #3
 800ffb6:	d17f      	bne.n	80100b8 <updateStringItem+0x1338>
 800ffb8:	697b      	ldr	r3, [r7, #20]
 800ffba:	2b04      	cmp	r3, #4
 800ffbc:	d17c      	bne.n	80100b8 <updateStringItem+0x1338>
				{
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 800ffbe:	7efb      	ldrb	r3, [r7, #27]
 800ffc0:	b29c      	uxth	r4, r3
 800ffc2:	697b      	ldr	r3, [r7, #20]
 800ffc4:	011b      	lsls	r3, r3, #4
 800ffc6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ffca:	4a39      	ldr	r2, [pc, #228]	; (80100b0 <updateStringItem+0x1330>)
 800ffcc:	4413      	add	r3, r2
 800ffce:	3304      	adds	r3, #4
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f7f0 f98f 	bl	80002f4 <strlen>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	4a36      	ldr	r2, [pc, #216]	; (80100b4 <updateStringItem+0x1334>)
 800ffda:	8892      	ldrh	r2, [r2, #4]
 800ffdc:	fb02 f303 	mul.w	r3, r2, r3
 800ffe0:	085b      	lsrs	r3, r3, #1
 800ffe2:	b29b      	uxth	r3, r3
 800ffe4:	1ae3      	subs	r3, r4, r3
 800ffe6:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 800ffe8:	7fbb      	ldrb	r3, [r7, #30]
 800ffea:	b29a      	uxth	r2, r3
 800ffec:	7f7b      	ldrb	r3, [r7, #29]
 800ffee:	b299      	uxth	r1, r3
 800fff0:	697b      	ldr	r3, [r7, #20]
 800fff2:	b29b      	uxth	r3, r3
 800fff4:	fb11 f303 	smulbb	r3, r1, r3
 800fff8:	b29b      	uxth	r3, r3
 800fffa:	4413      	add	r3, r2
 800fffc:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 800fffe:	3301      	adds	r3, #1
 8010000:	b29e      	uxth	r6, r3
 8010002:	7efb      	ldrb	r3, [r7, #27]
 8010004:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(stringItem.itemsArray[i]) * Font12.Width /2,
 8010006:	697b      	ldr	r3, [r7, #20]
 8010008:	011b      	lsls	r3, r3, #4
 801000a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801000e:	4a28      	ldr	r2, [pc, #160]	; (80100b0 <updateStringItem+0x1330>)
 8010010:	4413      	add	r3, r2
 8010012:	3304      	adds	r3, #4
 8010014:	4618      	mov	r0, r3
 8010016:	f7f0 f96d 	bl	80002f4 <strlen>
 801001a:	4603      	mov	r3, r0
 801001c:	4a25      	ldr	r2, [pc, #148]	; (80100b4 <updateStringItem+0x1334>)
 801001e:	8892      	ldrh	r2, [r2, #4]
 8010020:	fb02 f303 	mul.w	r3, r2, r3
 8010024:	085b      	lsrs	r3, r3, #1
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 8010026:	b29b      	uxth	r3, r3
 8010028:	4423      	add	r3, r4
 801002a:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801002c:	7fbb      	ldrb	r3, [r7, #30]
 801002e:	b29a      	uxth	r2, r3
 8010030:	7f7b      	ldrb	r3, [r7, #29]
 8010032:	b299      	uxth	r1, r3
 8010034:	697b      	ldr	r3, [r7, #20]
 8010036:	b29b      	uxth	r3, r3
 8010038:	fb11 f303 	smulbb	r3, r1, r3
 801003c:	b29b      	uxth	r3, r3
 801003e:	4413      	add	r3, r2
 8010040:	b29a      	uxth	r2, r3
 8010042:	4b1c      	ldr	r3, [pc, #112]	; (80100b4 <updateStringItem+0x1334>)
 8010044:	88db      	ldrh	r3, [r3, #6]
 8010046:	4413      	add	r3, r2
 8010048:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 801004a:	3301      	adds	r3, #1
 801004c:	b29b      	uxth	r3, r3
 801004e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010052:	9200      	str	r2, [sp, #0]
 8010054:	4602      	mov	r2, r0
 8010056:	4631      	mov	r1, r6
 8010058:	4628      	mov	r0, r5
 801005a:	f7f8 fd3d 	bl	8008ad8 <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801005e:	7efb      	ldrb	r3, [r7, #27]
 8010060:	b29c      	uxth	r4, r3
 8010062:	7fbb      	ldrb	r3, [r7, #30]
 8010064:	b29a      	uxth	r2, r3
 8010066:	7f7b      	ldrb	r3, [r7, #29]
 8010068:	b299      	uxth	r1, r3
 801006a:	697b      	ldr	r3, [r7, #20]
 801006c:	b29b      	uxth	r3, r3
 801006e:	fb11 f303 	smulbb	r3, r1, r3
 8010072:	b29b      	uxth	r3, r3
 8010074:	4413      	add	r3, r2
 8010076:	b29b      	uxth	r3, r3
 8010078:	3301      	adds	r3, #1
 801007a:	b29d      	uxth	r5, r3
							stringItem.itemsArray[(i)], BLACK, WHITE, 16, Font12);
 801007c:	697b      	ldr	r3, [r7, #20]
 801007e:	011b      	lsls	r3, r3, #4
 8010080:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010084:	4a0a      	ldr	r2, [pc, #40]	; (80100b0 <updateStringItem+0x1330>)
 8010086:	4413      	add	r3, r2
 8010088:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801008a:	490a      	ldr	r1, [pc, #40]	; (80100b4 <updateStringItem+0x1334>)
 801008c:	ab02      	add	r3, sp, #8
 801008e:	c903      	ldmia	r1, {r0, r1}
 8010090:	e883 0003 	stmia.w	r3, {r0, r1}
 8010094:	2310      	movs	r3, #16
 8010096:	9301      	str	r3, [sp, #4]
 8010098:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801009c:	9300      	str	r3, [sp, #0]
 801009e:	2300      	movs	r3, #0
 80100a0:	4629      	mov	r1, r5
 80100a2:	4620      	mov	r0, r4
 80100a4:	f7fc fa3c 	bl	800c520 <centeredString>
 80100a8:	e0ab      	b.n	8010202 <updateStringItem+0x1482>
 80100aa:	bf00      	nop
 80100ac:	2400a5bc 	.word	0x2400a5bc
 80100b0:	2400b030 	.word	0x2400b030
 80100b4:	24000018 	.word	0x24000018
					//						centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
					//								uint16Item.itemsArray[i], BLACK, LGRAY, 16);
				}
				else if ( (currentCursorPosition.cursorPosition == 4) && (i == 5) )
 80100b8:	4b5a      	ldr	r3, [pc, #360]	; (8010224 <updateStringItem+0x14a4>)
 80100ba:	781b      	ldrb	r3, [r3, #0]
 80100bc:	2b04      	cmp	r3, #4
 80100be:	f040 80a0 	bne.w	8010202 <updateStringItem+0x1482>
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	2b05      	cmp	r3, #5
 80100c6:	f040 809c 	bne.w	8010202 <updateStringItem+0x1482>
				{
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 80100ca:	7efb      	ldrb	r3, [r7, #27]
 80100cc:	b29c      	uxth	r4, r3
 80100ce:	697b      	ldr	r3, [r7, #20]
 80100d0:	011b      	lsls	r3, r3, #4
 80100d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80100d6:	4a54      	ldr	r2, [pc, #336]	; (8010228 <updateStringItem+0x14a8>)
 80100d8:	4413      	add	r3, r2
 80100da:	3304      	adds	r3, #4
 80100dc:	4618      	mov	r0, r3
 80100de:	f7f0 f909 	bl	80002f4 <strlen>
 80100e2:	4603      	mov	r3, r0
 80100e4:	4a51      	ldr	r2, [pc, #324]	; (801022c <updateStringItem+0x14ac>)
 80100e6:	8892      	ldrh	r2, [r2, #4]
 80100e8:	fb02 f303 	mul.w	r3, r2, r3
 80100ec:	085b      	lsrs	r3, r3, #1
 80100ee:	b29b      	uxth	r3, r3
 80100f0:	1ae3      	subs	r3, r4, r3
 80100f2:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80100f4:	7fbb      	ldrb	r3, [r7, #30]
 80100f6:	b29a      	uxth	r2, r3
 80100f8:	7f7b      	ldrb	r3, [r7, #29]
 80100fa:	b299      	uxth	r1, r3
 80100fc:	697b      	ldr	r3, [r7, #20]
 80100fe:	b29b      	uxth	r3, r3
 8010100:	fb11 f303 	smulbb	r3, r1, r3
 8010104:	b29b      	uxth	r3, r3
 8010106:	4413      	add	r3, r2
 8010108:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 801010a:	3301      	adds	r3, #1
 801010c:	b29e      	uxth	r6, r3
 801010e:	7efb      	ldrb	r3, [r7, #27]
 8010110:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(stringItem.itemsArray[i]) * Font12.Width /2,
 8010112:	697b      	ldr	r3, [r7, #20]
 8010114:	011b      	lsls	r3, r3, #4
 8010116:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801011a:	4a43      	ldr	r2, [pc, #268]	; (8010228 <updateStringItem+0x14a8>)
 801011c:	4413      	add	r3, r2
 801011e:	3304      	adds	r3, #4
 8010120:	4618      	mov	r0, r3
 8010122:	f7f0 f8e7 	bl	80002f4 <strlen>
 8010126:	4603      	mov	r3, r0
 8010128:	4a40      	ldr	r2, [pc, #256]	; (801022c <updateStringItem+0x14ac>)
 801012a:	8892      	ldrh	r2, [r2, #4]
 801012c:	fb02 f303 	mul.w	r3, r2, r3
 8010130:	085b      	lsrs	r3, r3, #1
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 8010132:	b29b      	uxth	r3, r3
 8010134:	4423      	add	r3, r4
 8010136:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8010138:	7fbb      	ldrb	r3, [r7, #30]
 801013a:	b29a      	uxth	r2, r3
 801013c:	7f7b      	ldrb	r3, [r7, #29]
 801013e:	b299      	uxth	r1, r3
 8010140:	697b      	ldr	r3, [r7, #20]
 8010142:	b29b      	uxth	r3, r3
 8010144:	fb11 f303 	smulbb	r3, r1, r3
 8010148:	b29b      	uxth	r3, r3
 801014a:	4413      	add	r3, r2
 801014c:	b29a      	uxth	r2, r3
 801014e:	4b37      	ldr	r3, [pc, #220]	; (801022c <updateStringItem+0x14ac>)
 8010150:	88db      	ldrh	r3, [r3, #6]
 8010152:	4413      	add	r3, r2
 8010154:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 8010156:	3301      	adds	r3, #1
 8010158:	b29b      	uxth	r3, r3
 801015a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801015e:	9200      	str	r2, [sp, #0]
 8010160:	4602      	mov	r2, r0
 8010162:	4631      	mov	r1, r6
 8010164:	4628      	mov	r0, r5
 8010166:	f7f8 fcb7 	bl	8008ad8 <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801016a:	7efb      	ldrb	r3, [r7, #27]
 801016c:	b29c      	uxth	r4, r3
 801016e:	7fbb      	ldrb	r3, [r7, #30]
 8010170:	b29a      	uxth	r2, r3
 8010172:	7f7b      	ldrb	r3, [r7, #29]
 8010174:	b299      	uxth	r1, r3
 8010176:	697b      	ldr	r3, [r7, #20]
 8010178:	b29b      	uxth	r3, r3
 801017a:	fb11 f303 	smulbb	r3, r1, r3
 801017e:	b29b      	uxth	r3, r3
 8010180:	4413      	add	r3, r2
 8010182:	b29b      	uxth	r3, r3
 8010184:	3301      	adds	r3, #1
 8010186:	b29d      	uxth	r5, r3
							stringItem.itemsArray[(i)], BLACK, WHITE, 16, Font12);
 8010188:	697b      	ldr	r3, [r7, #20]
 801018a:	011b      	lsls	r3, r3, #4
 801018c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010190:	4a25      	ldr	r2, [pc, #148]	; (8010228 <updateStringItem+0x14a8>)
 8010192:	4413      	add	r3, r2
 8010194:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8010196:	4925      	ldr	r1, [pc, #148]	; (801022c <updateStringItem+0x14ac>)
 8010198:	ab02      	add	r3, sp, #8
 801019a:	c903      	ldmia	r1, {r0, r1}
 801019c:	e883 0003 	stmia.w	r3, {r0, r1}
 80101a0:	2310      	movs	r3, #16
 80101a2:	9301      	str	r3, [sp, #4]
 80101a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80101a8:	9300      	str	r3, [sp, #0]
 80101aa:	2300      	movs	r3, #0
 80101ac:	4629      	mov	r1, r5
 80101ae:	4620      	mov	r0, r4
 80101b0:	f7fc f9b6 	bl	800c520 <centeredString>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 80101b4:	7efb      	ldrb	r3, [r7, #27]
 80101b6:	b29c      	uxth	r4, r3
 80101b8:	7fbb      	ldrb	r3, [r7, #30]
 80101ba:	b29a      	uxth	r2, r3
 80101bc:	7f7b      	ldrb	r3, [r7, #29]
 80101be:	b299      	uxth	r1, r3
 80101c0:	697b      	ldr	r3, [r7, #20]
 80101c2:	3b01      	subs	r3, #1
 80101c4:	b29b      	uxth	r3, r3
 80101c6:	fb11 f303 	smulbb	r3, r1, r3
 80101ca:	b29b      	uxth	r3, r3
 80101cc:	4413      	add	r3, r2
 80101ce:	b29b      	uxth	r3, r3
 80101d0:	3301      	adds	r3, #1
 80101d2:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i - 1], BLACK, LGRAY, 16, Font12);
 80101d4:	697b      	ldr	r3, [r7, #20]
 80101d6:	3b01      	subs	r3, #1
 80101d8:	011b      	lsls	r3, r3, #4
 80101da:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80101de:	4a12      	ldr	r2, [pc, #72]	; (8010228 <updateStringItem+0x14a8>)
 80101e0:	4413      	add	r3, r2
 80101e2:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 80101e4:	4911      	ldr	r1, [pc, #68]	; (801022c <updateStringItem+0x14ac>)
 80101e6:	ab02      	add	r3, sp, #8
 80101e8:	c903      	ldmia	r1, {r0, r1}
 80101ea:	e883 0003 	stmia.w	r3, {r0, r1}
 80101ee:	2310      	movs	r3, #16
 80101f0:	9301      	str	r3, [sp, #4]
 80101f2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80101f6:	9300      	str	r3, [sp, #0]
 80101f8:	2300      	movs	r3, #0
 80101fa:	4629      	mov	r1, r5
 80101fc:	4620      	mov	r0, r4
 80101fe:	f7fc f98f 	bl	800c520 <centeredString>
	for (int i = 0; i < stringItem.numberOfItemsInPage ; i++)
 8010202:	697b      	ldr	r3, [r7, #20]
 8010204:	3301      	adds	r3, #1
 8010206:	617b      	str	r3, [r7, #20]
 8010208:	4b07      	ldr	r3, [pc, #28]	; (8010228 <updateStringItem+0x14a8>)
 801020a:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 801020e:	461a      	mov	r2, r3
 8010210:	697b      	ldr	r3, [r7, #20]
 8010212:	4293      	cmp	r3, r2
 8010214:	f6fe add8 	blt.w	800edc8 <updateStringItem+0x48>
				}
			}
		}
	}
}
 8010218:	bf00      	nop
 801021a:	bf00      	nop
 801021c:	3724      	adds	r7, #36	; 0x24
 801021e:	46bd      	mov	sp, r7
 8010220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010222:	bf00      	nop
 8010224:	2400a5bc 	.word	0x2400a5bc
 8010228:	2400b030 	.word	0x2400b030
 801022c:	24000018 	.word	0x24000018

08010230 <__assert_func>:
 8010230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010232:	4614      	mov	r4, r2
 8010234:	461a      	mov	r2, r3
 8010236:	4b09      	ldr	r3, [pc, #36]	; (801025c <__assert_func+0x2c>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	4605      	mov	r5, r0
 801023c:	68d8      	ldr	r0, [r3, #12]
 801023e:	b14c      	cbz	r4, 8010254 <__assert_func+0x24>
 8010240:	4b07      	ldr	r3, [pc, #28]	; (8010260 <__assert_func+0x30>)
 8010242:	9100      	str	r1, [sp, #0]
 8010244:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010248:	4906      	ldr	r1, [pc, #24]	; (8010264 <__assert_func+0x34>)
 801024a:	462b      	mov	r3, r5
 801024c:	f000 f814 	bl	8010278 <fiprintf>
 8010250:	f002 f930 	bl	80124b4 <abort>
 8010254:	4b04      	ldr	r3, [pc, #16]	; (8010268 <__assert_func+0x38>)
 8010256:	461c      	mov	r4, r3
 8010258:	e7f3      	b.n	8010242 <__assert_func+0x12>
 801025a:	bf00      	nop
 801025c:	2400a0f0 	.word	0x2400a0f0
 8010260:	0801dc57 	.word	0x0801dc57
 8010264:	0801dc64 	.word	0x0801dc64
 8010268:	0801dc92 	.word	0x0801dc92

0801026c <__errno>:
 801026c:	4b01      	ldr	r3, [pc, #4]	; (8010274 <__errno+0x8>)
 801026e:	6818      	ldr	r0, [r3, #0]
 8010270:	4770      	bx	lr
 8010272:	bf00      	nop
 8010274:	2400a0f0 	.word	0x2400a0f0

08010278 <fiprintf>:
 8010278:	b40e      	push	{r1, r2, r3}
 801027a:	b503      	push	{r0, r1, lr}
 801027c:	4601      	mov	r1, r0
 801027e:	ab03      	add	r3, sp, #12
 8010280:	4805      	ldr	r0, [pc, #20]	; (8010298 <fiprintf+0x20>)
 8010282:	f853 2b04 	ldr.w	r2, [r3], #4
 8010286:	6800      	ldr	r0, [r0, #0]
 8010288:	9301      	str	r3, [sp, #4]
 801028a:	f000 f93f 	bl	801050c <_vfiprintf_r>
 801028e:	b002      	add	sp, #8
 8010290:	f85d eb04 	ldr.w	lr, [sp], #4
 8010294:	b003      	add	sp, #12
 8010296:	4770      	bx	lr
 8010298:	2400a0f0 	.word	0x2400a0f0

0801029c <__libc_init_array>:
 801029c:	b570      	push	{r4, r5, r6, lr}
 801029e:	4d0d      	ldr	r5, [pc, #52]	; (80102d4 <__libc_init_array+0x38>)
 80102a0:	4c0d      	ldr	r4, [pc, #52]	; (80102d8 <__libc_init_array+0x3c>)
 80102a2:	1b64      	subs	r4, r4, r5
 80102a4:	10a4      	asrs	r4, r4, #2
 80102a6:	2600      	movs	r6, #0
 80102a8:	42a6      	cmp	r6, r4
 80102aa:	d109      	bne.n	80102c0 <__libc_init_array+0x24>
 80102ac:	4d0b      	ldr	r5, [pc, #44]	; (80102dc <__libc_init_array+0x40>)
 80102ae:	4c0c      	ldr	r4, [pc, #48]	; (80102e0 <__libc_init_array+0x44>)
 80102b0:	f004 fe22 	bl	8014ef8 <_init>
 80102b4:	1b64      	subs	r4, r4, r5
 80102b6:	10a4      	asrs	r4, r4, #2
 80102b8:	2600      	movs	r6, #0
 80102ba:	42a6      	cmp	r6, r4
 80102bc:	d105      	bne.n	80102ca <__libc_init_array+0x2e>
 80102be:	bd70      	pop	{r4, r5, r6, pc}
 80102c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80102c4:	4798      	blx	r3
 80102c6:	3601      	adds	r6, #1
 80102c8:	e7ee      	b.n	80102a8 <__libc_init_array+0xc>
 80102ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80102ce:	4798      	blx	r3
 80102d0:	3601      	adds	r6, #1
 80102d2:	e7f2      	b.n	80102ba <__libc_init_array+0x1e>
 80102d4:	0801e258 	.word	0x0801e258
 80102d8:	0801e258 	.word	0x0801e258
 80102dc:	0801e258 	.word	0x0801e258
 80102e0:	0801e25c 	.word	0x0801e25c

080102e4 <malloc>:
 80102e4:	4b02      	ldr	r3, [pc, #8]	; (80102f0 <malloc+0xc>)
 80102e6:	4601      	mov	r1, r0
 80102e8:	6818      	ldr	r0, [r3, #0]
 80102ea:	f000 b88b 	b.w	8010404 <_malloc_r>
 80102ee:	bf00      	nop
 80102f0:	2400a0f0 	.word	0x2400a0f0

080102f4 <free>:
 80102f4:	4b02      	ldr	r3, [pc, #8]	; (8010300 <free+0xc>)
 80102f6:	4601      	mov	r1, r0
 80102f8:	6818      	ldr	r0, [r3, #0]
 80102fa:	f000 b833 	b.w	8010364 <_free_r>
 80102fe:	bf00      	nop
 8010300:	2400a0f0 	.word	0x2400a0f0

08010304 <memcpy>:
 8010304:	440a      	add	r2, r1
 8010306:	4291      	cmp	r1, r2
 8010308:	f100 33ff 	add.w	r3, r0, #4294967295
 801030c:	d100      	bne.n	8010310 <memcpy+0xc>
 801030e:	4770      	bx	lr
 8010310:	b510      	push	{r4, lr}
 8010312:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010316:	f803 4f01 	strb.w	r4, [r3, #1]!
 801031a:	4291      	cmp	r1, r2
 801031c:	d1f9      	bne.n	8010312 <memcpy+0xe>
 801031e:	bd10      	pop	{r4, pc}

08010320 <memmove>:
 8010320:	4288      	cmp	r0, r1
 8010322:	b510      	push	{r4, lr}
 8010324:	eb01 0402 	add.w	r4, r1, r2
 8010328:	d902      	bls.n	8010330 <memmove+0x10>
 801032a:	4284      	cmp	r4, r0
 801032c:	4623      	mov	r3, r4
 801032e:	d807      	bhi.n	8010340 <memmove+0x20>
 8010330:	1e43      	subs	r3, r0, #1
 8010332:	42a1      	cmp	r1, r4
 8010334:	d008      	beq.n	8010348 <memmove+0x28>
 8010336:	f811 2b01 	ldrb.w	r2, [r1], #1
 801033a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801033e:	e7f8      	b.n	8010332 <memmove+0x12>
 8010340:	4402      	add	r2, r0
 8010342:	4601      	mov	r1, r0
 8010344:	428a      	cmp	r2, r1
 8010346:	d100      	bne.n	801034a <memmove+0x2a>
 8010348:	bd10      	pop	{r4, pc}
 801034a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801034e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010352:	e7f7      	b.n	8010344 <memmove+0x24>

08010354 <memset>:
 8010354:	4402      	add	r2, r0
 8010356:	4603      	mov	r3, r0
 8010358:	4293      	cmp	r3, r2
 801035a:	d100      	bne.n	801035e <memset+0xa>
 801035c:	4770      	bx	lr
 801035e:	f803 1b01 	strb.w	r1, [r3], #1
 8010362:	e7f9      	b.n	8010358 <memset+0x4>

08010364 <_free_r>:
 8010364:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010366:	2900      	cmp	r1, #0
 8010368:	d048      	beq.n	80103fc <_free_r+0x98>
 801036a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801036e:	9001      	str	r0, [sp, #4]
 8010370:	2b00      	cmp	r3, #0
 8010372:	f1a1 0404 	sub.w	r4, r1, #4
 8010376:	bfb8      	it	lt
 8010378:	18e4      	addlt	r4, r4, r3
 801037a:	f003 fc53 	bl	8013c24 <__malloc_lock>
 801037e:	4a20      	ldr	r2, [pc, #128]	; (8010400 <_free_r+0x9c>)
 8010380:	9801      	ldr	r0, [sp, #4]
 8010382:	6813      	ldr	r3, [r2, #0]
 8010384:	4615      	mov	r5, r2
 8010386:	b933      	cbnz	r3, 8010396 <_free_r+0x32>
 8010388:	6063      	str	r3, [r4, #4]
 801038a:	6014      	str	r4, [r2, #0]
 801038c:	b003      	add	sp, #12
 801038e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010392:	f003 bc4d 	b.w	8013c30 <__malloc_unlock>
 8010396:	42a3      	cmp	r3, r4
 8010398:	d90b      	bls.n	80103b2 <_free_r+0x4e>
 801039a:	6821      	ldr	r1, [r4, #0]
 801039c:	1862      	adds	r2, r4, r1
 801039e:	4293      	cmp	r3, r2
 80103a0:	bf04      	itt	eq
 80103a2:	681a      	ldreq	r2, [r3, #0]
 80103a4:	685b      	ldreq	r3, [r3, #4]
 80103a6:	6063      	str	r3, [r4, #4]
 80103a8:	bf04      	itt	eq
 80103aa:	1852      	addeq	r2, r2, r1
 80103ac:	6022      	streq	r2, [r4, #0]
 80103ae:	602c      	str	r4, [r5, #0]
 80103b0:	e7ec      	b.n	801038c <_free_r+0x28>
 80103b2:	461a      	mov	r2, r3
 80103b4:	685b      	ldr	r3, [r3, #4]
 80103b6:	b10b      	cbz	r3, 80103bc <_free_r+0x58>
 80103b8:	42a3      	cmp	r3, r4
 80103ba:	d9fa      	bls.n	80103b2 <_free_r+0x4e>
 80103bc:	6811      	ldr	r1, [r2, #0]
 80103be:	1855      	adds	r5, r2, r1
 80103c0:	42a5      	cmp	r5, r4
 80103c2:	d10b      	bne.n	80103dc <_free_r+0x78>
 80103c4:	6824      	ldr	r4, [r4, #0]
 80103c6:	4421      	add	r1, r4
 80103c8:	1854      	adds	r4, r2, r1
 80103ca:	42a3      	cmp	r3, r4
 80103cc:	6011      	str	r1, [r2, #0]
 80103ce:	d1dd      	bne.n	801038c <_free_r+0x28>
 80103d0:	681c      	ldr	r4, [r3, #0]
 80103d2:	685b      	ldr	r3, [r3, #4]
 80103d4:	6053      	str	r3, [r2, #4]
 80103d6:	4421      	add	r1, r4
 80103d8:	6011      	str	r1, [r2, #0]
 80103da:	e7d7      	b.n	801038c <_free_r+0x28>
 80103dc:	d902      	bls.n	80103e4 <_free_r+0x80>
 80103de:	230c      	movs	r3, #12
 80103e0:	6003      	str	r3, [r0, #0]
 80103e2:	e7d3      	b.n	801038c <_free_r+0x28>
 80103e4:	6825      	ldr	r5, [r4, #0]
 80103e6:	1961      	adds	r1, r4, r5
 80103e8:	428b      	cmp	r3, r1
 80103ea:	bf04      	itt	eq
 80103ec:	6819      	ldreq	r1, [r3, #0]
 80103ee:	685b      	ldreq	r3, [r3, #4]
 80103f0:	6063      	str	r3, [r4, #4]
 80103f2:	bf04      	itt	eq
 80103f4:	1949      	addeq	r1, r1, r5
 80103f6:	6021      	streq	r1, [r4, #0]
 80103f8:	6054      	str	r4, [r2, #4]
 80103fa:	e7c7      	b.n	801038c <_free_r+0x28>
 80103fc:	b003      	add	sp, #12
 80103fe:	bd30      	pop	{r4, r5, pc}
 8010400:	2400a45c 	.word	0x2400a45c

08010404 <_malloc_r>:
 8010404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010406:	1ccd      	adds	r5, r1, #3
 8010408:	f025 0503 	bic.w	r5, r5, #3
 801040c:	3508      	adds	r5, #8
 801040e:	2d0c      	cmp	r5, #12
 8010410:	bf38      	it	cc
 8010412:	250c      	movcc	r5, #12
 8010414:	2d00      	cmp	r5, #0
 8010416:	4606      	mov	r6, r0
 8010418:	db01      	blt.n	801041e <_malloc_r+0x1a>
 801041a:	42a9      	cmp	r1, r5
 801041c:	d903      	bls.n	8010426 <_malloc_r+0x22>
 801041e:	230c      	movs	r3, #12
 8010420:	6033      	str	r3, [r6, #0]
 8010422:	2000      	movs	r0, #0
 8010424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010426:	f003 fbfd 	bl	8013c24 <__malloc_lock>
 801042a:	4921      	ldr	r1, [pc, #132]	; (80104b0 <_malloc_r+0xac>)
 801042c:	680a      	ldr	r2, [r1, #0]
 801042e:	4614      	mov	r4, r2
 8010430:	b99c      	cbnz	r4, 801045a <_malloc_r+0x56>
 8010432:	4f20      	ldr	r7, [pc, #128]	; (80104b4 <_malloc_r+0xb0>)
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	b923      	cbnz	r3, 8010442 <_malloc_r+0x3e>
 8010438:	4621      	mov	r1, r4
 801043a:	4630      	mov	r0, r6
 801043c:	f001 f86c 	bl	8011518 <_sbrk_r>
 8010440:	6038      	str	r0, [r7, #0]
 8010442:	4629      	mov	r1, r5
 8010444:	4630      	mov	r0, r6
 8010446:	f001 f867 	bl	8011518 <_sbrk_r>
 801044a:	1c43      	adds	r3, r0, #1
 801044c:	d123      	bne.n	8010496 <_malloc_r+0x92>
 801044e:	230c      	movs	r3, #12
 8010450:	6033      	str	r3, [r6, #0]
 8010452:	4630      	mov	r0, r6
 8010454:	f003 fbec 	bl	8013c30 <__malloc_unlock>
 8010458:	e7e3      	b.n	8010422 <_malloc_r+0x1e>
 801045a:	6823      	ldr	r3, [r4, #0]
 801045c:	1b5b      	subs	r3, r3, r5
 801045e:	d417      	bmi.n	8010490 <_malloc_r+0x8c>
 8010460:	2b0b      	cmp	r3, #11
 8010462:	d903      	bls.n	801046c <_malloc_r+0x68>
 8010464:	6023      	str	r3, [r4, #0]
 8010466:	441c      	add	r4, r3
 8010468:	6025      	str	r5, [r4, #0]
 801046a:	e004      	b.n	8010476 <_malloc_r+0x72>
 801046c:	6863      	ldr	r3, [r4, #4]
 801046e:	42a2      	cmp	r2, r4
 8010470:	bf0c      	ite	eq
 8010472:	600b      	streq	r3, [r1, #0]
 8010474:	6053      	strne	r3, [r2, #4]
 8010476:	4630      	mov	r0, r6
 8010478:	f003 fbda 	bl	8013c30 <__malloc_unlock>
 801047c:	f104 000b 	add.w	r0, r4, #11
 8010480:	1d23      	adds	r3, r4, #4
 8010482:	f020 0007 	bic.w	r0, r0, #7
 8010486:	1ac2      	subs	r2, r0, r3
 8010488:	d0cc      	beq.n	8010424 <_malloc_r+0x20>
 801048a:	1a1b      	subs	r3, r3, r0
 801048c:	50a3      	str	r3, [r4, r2]
 801048e:	e7c9      	b.n	8010424 <_malloc_r+0x20>
 8010490:	4622      	mov	r2, r4
 8010492:	6864      	ldr	r4, [r4, #4]
 8010494:	e7cc      	b.n	8010430 <_malloc_r+0x2c>
 8010496:	1cc4      	adds	r4, r0, #3
 8010498:	f024 0403 	bic.w	r4, r4, #3
 801049c:	42a0      	cmp	r0, r4
 801049e:	d0e3      	beq.n	8010468 <_malloc_r+0x64>
 80104a0:	1a21      	subs	r1, r4, r0
 80104a2:	4630      	mov	r0, r6
 80104a4:	f001 f838 	bl	8011518 <_sbrk_r>
 80104a8:	3001      	adds	r0, #1
 80104aa:	d1dd      	bne.n	8010468 <_malloc_r+0x64>
 80104ac:	e7cf      	b.n	801044e <_malloc_r+0x4a>
 80104ae:	bf00      	nop
 80104b0:	2400a45c 	.word	0x2400a45c
 80104b4:	2400a460 	.word	0x2400a460

080104b8 <__sfputc_r>:
 80104b8:	6893      	ldr	r3, [r2, #8]
 80104ba:	3b01      	subs	r3, #1
 80104bc:	2b00      	cmp	r3, #0
 80104be:	b410      	push	{r4}
 80104c0:	6093      	str	r3, [r2, #8]
 80104c2:	da08      	bge.n	80104d6 <__sfputc_r+0x1e>
 80104c4:	6994      	ldr	r4, [r2, #24]
 80104c6:	42a3      	cmp	r3, r4
 80104c8:	db01      	blt.n	80104ce <__sfputc_r+0x16>
 80104ca:	290a      	cmp	r1, #10
 80104cc:	d103      	bne.n	80104d6 <__sfputc_r+0x1e>
 80104ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104d2:	f001 bf2f 	b.w	8012334 <__swbuf_r>
 80104d6:	6813      	ldr	r3, [r2, #0]
 80104d8:	1c58      	adds	r0, r3, #1
 80104da:	6010      	str	r0, [r2, #0]
 80104dc:	7019      	strb	r1, [r3, #0]
 80104de:	4608      	mov	r0, r1
 80104e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104e4:	4770      	bx	lr

080104e6 <__sfputs_r>:
 80104e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104e8:	4606      	mov	r6, r0
 80104ea:	460f      	mov	r7, r1
 80104ec:	4614      	mov	r4, r2
 80104ee:	18d5      	adds	r5, r2, r3
 80104f0:	42ac      	cmp	r4, r5
 80104f2:	d101      	bne.n	80104f8 <__sfputs_r+0x12>
 80104f4:	2000      	movs	r0, #0
 80104f6:	e007      	b.n	8010508 <__sfputs_r+0x22>
 80104f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104fc:	463a      	mov	r2, r7
 80104fe:	4630      	mov	r0, r6
 8010500:	f7ff ffda 	bl	80104b8 <__sfputc_r>
 8010504:	1c43      	adds	r3, r0, #1
 8010506:	d1f3      	bne.n	80104f0 <__sfputs_r+0xa>
 8010508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801050c <_vfiprintf_r>:
 801050c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010510:	460d      	mov	r5, r1
 8010512:	b09d      	sub	sp, #116	; 0x74
 8010514:	4614      	mov	r4, r2
 8010516:	4698      	mov	r8, r3
 8010518:	4606      	mov	r6, r0
 801051a:	b118      	cbz	r0, 8010524 <_vfiprintf_r+0x18>
 801051c:	6983      	ldr	r3, [r0, #24]
 801051e:	b90b      	cbnz	r3, 8010524 <_vfiprintf_r+0x18>
 8010520:	f002 fef6 	bl	8013310 <__sinit>
 8010524:	4b89      	ldr	r3, [pc, #548]	; (801074c <_vfiprintf_r+0x240>)
 8010526:	429d      	cmp	r5, r3
 8010528:	d11b      	bne.n	8010562 <_vfiprintf_r+0x56>
 801052a:	6875      	ldr	r5, [r6, #4]
 801052c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801052e:	07d9      	lsls	r1, r3, #31
 8010530:	d405      	bmi.n	801053e <_vfiprintf_r+0x32>
 8010532:	89ab      	ldrh	r3, [r5, #12]
 8010534:	059a      	lsls	r2, r3, #22
 8010536:	d402      	bmi.n	801053e <_vfiprintf_r+0x32>
 8010538:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801053a:	f003 fafa 	bl	8013b32 <__retarget_lock_acquire_recursive>
 801053e:	89ab      	ldrh	r3, [r5, #12]
 8010540:	071b      	lsls	r3, r3, #28
 8010542:	d501      	bpl.n	8010548 <_vfiprintf_r+0x3c>
 8010544:	692b      	ldr	r3, [r5, #16]
 8010546:	b9eb      	cbnz	r3, 8010584 <_vfiprintf_r+0x78>
 8010548:	4629      	mov	r1, r5
 801054a:	4630      	mov	r0, r6
 801054c:	f001 ff44 	bl	80123d8 <__swsetup_r>
 8010550:	b1c0      	cbz	r0, 8010584 <_vfiprintf_r+0x78>
 8010552:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010554:	07dc      	lsls	r4, r3, #31
 8010556:	d50e      	bpl.n	8010576 <_vfiprintf_r+0x6a>
 8010558:	f04f 30ff 	mov.w	r0, #4294967295
 801055c:	b01d      	add	sp, #116	; 0x74
 801055e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010562:	4b7b      	ldr	r3, [pc, #492]	; (8010750 <_vfiprintf_r+0x244>)
 8010564:	429d      	cmp	r5, r3
 8010566:	d101      	bne.n	801056c <_vfiprintf_r+0x60>
 8010568:	68b5      	ldr	r5, [r6, #8]
 801056a:	e7df      	b.n	801052c <_vfiprintf_r+0x20>
 801056c:	4b79      	ldr	r3, [pc, #484]	; (8010754 <_vfiprintf_r+0x248>)
 801056e:	429d      	cmp	r5, r3
 8010570:	bf08      	it	eq
 8010572:	68f5      	ldreq	r5, [r6, #12]
 8010574:	e7da      	b.n	801052c <_vfiprintf_r+0x20>
 8010576:	89ab      	ldrh	r3, [r5, #12]
 8010578:	0598      	lsls	r0, r3, #22
 801057a:	d4ed      	bmi.n	8010558 <_vfiprintf_r+0x4c>
 801057c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801057e:	f003 fad9 	bl	8013b34 <__retarget_lock_release_recursive>
 8010582:	e7e9      	b.n	8010558 <_vfiprintf_r+0x4c>
 8010584:	2300      	movs	r3, #0
 8010586:	9309      	str	r3, [sp, #36]	; 0x24
 8010588:	2320      	movs	r3, #32
 801058a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801058e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010592:	2330      	movs	r3, #48	; 0x30
 8010594:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010758 <_vfiprintf_r+0x24c>
 8010598:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801059c:	f04f 0901 	mov.w	r9, #1
 80105a0:	4623      	mov	r3, r4
 80105a2:	469a      	mov	sl, r3
 80105a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105a8:	b10a      	cbz	r2, 80105ae <_vfiprintf_r+0xa2>
 80105aa:	2a25      	cmp	r2, #37	; 0x25
 80105ac:	d1f9      	bne.n	80105a2 <_vfiprintf_r+0x96>
 80105ae:	ebba 0b04 	subs.w	fp, sl, r4
 80105b2:	d00b      	beq.n	80105cc <_vfiprintf_r+0xc0>
 80105b4:	465b      	mov	r3, fp
 80105b6:	4622      	mov	r2, r4
 80105b8:	4629      	mov	r1, r5
 80105ba:	4630      	mov	r0, r6
 80105bc:	f7ff ff93 	bl	80104e6 <__sfputs_r>
 80105c0:	3001      	adds	r0, #1
 80105c2:	f000 80aa 	beq.w	801071a <_vfiprintf_r+0x20e>
 80105c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80105c8:	445a      	add	r2, fp
 80105ca:	9209      	str	r2, [sp, #36]	; 0x24
 80105cc:	f89a 3000 	ldrb.w	r3, [sl]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	f000 80a2 	beq.w	801071a <_vfiprintf_r+0x20e>
 80105d6:	2300      	movs	r3, #0
 80105d8:	f04f 32ff 	mov.w	r2, #4294967295
 80105dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105e0:	f10a 0a01 	add.w	sl, sl, #1
 80105e4:	9304      	str	r3, [sp, #16]
 80105e6:	9307      	str	r3, [sp, #28]
 80105e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80105ec:	931a      	str	r3, [sp, #104]	; 0x68
 80105ee:	4654      	mov	r4, sl
 80105f0:	2205      	movs	r2, #5
 80105f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105f6:	4858      	ldr	r0, [pc, #352]	; (8010758 <_vfiprintf_r+0x24c>)
 80105f8:	f7ef fe8a 	bl	8000310 <memchr>
 80105fc:	9a04      	ldr	r2, [sp, #16]
 80105fe:	b9d8      	cbnz	r0, 8010638 <_vfiprintf_r+0x12c>
 8010600:	06d1      	lsls	r1, r2, #27
 8010602:	bf44      	itt	mi
 8010604:	2320      	movmi	r3, #32
 8010606:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801060a:	0713      	lsls	r3, r2, #28
 801060c:	bf44      	itt	mi
 801060e:	232b      	movmi	r3, #43	; 0x2b
 8010610:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010614:	f89a 3000 	ldrb.w	r3, [sl]
 8010618:	2b2a      	cmp	r3, #42	; 0x2a
 801061a:	d015      	beq.n	8010648 <_vfiprintf_r+0x13c>
 801061c:	9a07      	ldr	r2, [sp, #28]
 801061e:	4654      	mov	r4, sl
 8010620:	2000      	movs	r0, #0
 8010622:	f04f 0c0a 	mov.w	ip, #10
 8010626:	4621      	mov	r1, r4
 8010628:	f811 3b01 	ldrb.w	r3, [r1], #1
 801062c:	3b30      	subs	r3, #48	; 0x30
 801062e:	2b09      	cmp	r3, #9
 8010630:	d94e      	bls.n	80106d0 <_vfiprintf_r+0x1c4>
 8010632:	b1b0      	cbz	r0, 8010662 <_vfiprintf_r+0x156>
 8010634:	9207      	str	r2, [sp, #28]
 8010636:	e014      	b.n	8010662 <_vfiprintf_r+0x156>
 8010638:	eba0 0308 	sub.w	r3, r0, r8
 801063c:	fa09 f303 	lsl.w	r3, r9, r3
 8010640:	4313      	orrs	r3, r2
 8010642:	9304      	str	r3, [sp, #16]
 8010644:	46a2      	mov	sl, r4
 8010646:	e7d2      	b.n	80105ee <_vfiprintf_r+0xe2>
 8010648:	9b03      	ldr	r3, [sp, #12]
 801064a:	1d19      	adds	r1, r3, #4
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	9103      	str	r1, [sp, #12]
 8010650:	2b00      	cmp	r3, #0
 8010652:	bfbb      	ittet	lt
 8010654:	425b      	neglt	r3, r3
 8010656:	f042 0202 	orrlt.w	r2, r2, #2
 801065a:	9307      	strge	r3, [sp, #28]
 801065c:	9307      	strlt	r3, [sp, #28]
 801065e:	bfb8      	it	lt
 8010660:	9204      	strlt	r2, [sp, #16]
 8010662:	7823      	ldrb	r3, [r4, #0]
 8010664:	2b2e      	cmp	r3, #46	; 0x2e
 8010666:	d10c      	bne.n	8010682 <_vfiprintf_r+0x176>
 8010668:	7863      	ldrb	r3, [r4, #1]
 801066a:	2b2a      	cmp	r3, #42	; 0x2a
 801066c:	d135      	bne.n	80106da <_vfiprintf_r+0x1ce>
 801066e:	9b03      	ldr	r3, [sp, #12]
 8010670:	1d1a      	adds	r2, r3, #4
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	9203      	str	r2, [sp, #12]
 8010676:	2b00      	cmp	r3, #0
 8010678:	bfb8      	it	lt
 801067a:	f04f 33ff 	movlt.w	r3, #4294967295
 801067e:	3402      	adds	r4, #2
 8010680:	9305      	str	r3, [sp, #20]
 8010682:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010768 <_vfiprintf_r+0x25c>
 8010686:	7821      	ldrb	r1, [r4, #0]
 8010688:	2203      	movs	r2, #3
 801068a:	4650      	mov	r0, sl
 801068c:	f7ef fe40 	bl	8000310 <memchr>
 8010690:	b140      	cbz	r0, 80106a4 <_vfiprintf_r+0x198>
 8010692:	2340      	movs	r3, #64	; 0x40
 8010694:	eba0 000a 	sub.w	r0, r0, sl
 8010698:	fa03 f000 	lsl.w	r0, r3, r0
 801069c:	9b04      	ldr	r3, [sp, #16]
 801069e:	4303      	orrs	r3, r0
 80106a0:	3401      	adds	r4, #1
 80106a2:	9304      	str	r3, [sp, #16]
 80106a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106a8:	482c      	ldr	r0, [pc, #176]	; (801075c <_vfiprintf_r+0x250>)
 80106aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80106ae:	2206      	movs	r2, #6
 80106b0:	f7ef fe2e 	bl	8000310 <memchr>
 80106b4:	2800      	cmp	r0, #0
 80106b6:	d03f      	beq.n	8010738 <_vfiprintf_r+0x22c>
 80106b8:	4b29      	ldr	r3, [pc, #164]	; (8010760 <_vfiprintf_r+0x254>)
 80106ba:	bb1b      	cbnz	r3, 8010704 <_vfiprintf_r+0x1f8>
 80106bc:	9b03      	ldr	r3, [sp, #12]
 80106be:	3307      	adds	r3, #7
 80106c0:	f023 0307 	bic.w	r3, r3, #7
 80106c4:	3308      	adds	r3, #8
 80106c6:	9303      	str	r3, [sp, #12]
 80106c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106ca:	443b      	add	r3, r7
 80106cc:	9309      	str	r3, [sp, #36]	; 0x24
 80106ce:	e767      	b.n	80105a0 <_vfiprintf_r+0x94>
 80106d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80106d4:	460c      	mov	r4, r1
 80106d6:	2001      	movs	r0, #1
 80106d8:	e7a5      	b.n	8010626 <_vfiprintf_r+0x11a>
 80106da:	2300      	movs	r3, #0
 80106dc:	3401      	adds	r4, #1
 80106de:	9305      	str	r3, [sp, #20]
 80106e0:	4619      	mov	r1, r3
 80106e2:	f04f 0c0a 	mov.w	ip, #10
 80106e6:	4620      	mov	r0, r4
 80106e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106ec:	3a30      	subs	r2, #48	; 0x30
 80106ee:	2a09      	cmp	r2, #9
 80106f0:	d903      	bls.n	80106fa <_vfiprintf_r+0x1ee>
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d0c5      	beq.n	8010682 <_vfiprintf_r+0x176>
 80106f6:	9105      	str	r1, [sp, #20]
 80106f8:	e7c3      	b.n	8010682 <_vfiprintf_r+0x176>
 80106fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80106fe:	4604      	mov	r4, r0
 8010700:	2301      	movs	r3, #1
 8010702:	e7f0      	b.n	80106e6 <_vfiprintf_r+0x1da>
 8010704:	ab03      	add	r3, sp, #12
 8010706:	9300      	str	r3, [sp, #0]
 8010708:	462a      	mov	r2, r5
 801070a:	4b16      	ldr	r3, [pc, #88]	; (8010764 <_vfiprintf_r+0x258>)
 801070c:	a904      	add	r1, sp, #16
 801070e:	4630      	mov	r0, r6
 8010710:	f000 f8be 	bl	8010890 <_printf_float>
 8010714:	4607      	mov	r7, r0
 8010716:	1c78      	adds	r0, r7, #1
 8010718:	d1d6      	bne.n	80106c8 <_vfiprintf_r+0x1bc>
 801071a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801071c:	07d9      	lsls	r1, r3, #31
 801071e:	d405      	bmi.n	801072c <_vfiprintf_r+0x220>
 8010720:	89ab      	ldrh	r3, [r5, #12]
 8010722:	059a      	lsls	r2, r3, #22
 8010724:	d402      	bmi.n	801072c <_vfiprintf_r+0x220>
 8010726:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010728:	f003 fa04 	bl	8013b34 <__retarget_lock_release_recursive>
 801072c:	89ab      	ldrh	r3, [r5, #12]
 801072e:	065b      	lsls	r3, r3, #25
 8010730:	f53f af12 	bmi.w	8010558 <_vfiprintf_r+0x4c>
 8010734:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010736:	e711      	b.n	801055c <_vfiprintf_r+0x50>
 8010738:	ab03      	add	r3, sp, #12
 801073a:	9300      	str	r3, [sp, #0]
 801073c:	462a      	mov	r2, r5
 801073e:	4b09      	ldr	r3, [pc, #36]	; (8010764 <_vfiprintf_r+0x258>)
 8010740:	a904      	add	r1, sp, #16
 8010742:	4630      	mov	r0, r6
 8010744:	f000 fb30 	bl	8010da8 <_printf_i>
 8010748:	e7e4      	b.n	8010714 <_vfiprintf_r+0x208>
 801074a:	bf00      	nop
 801074c:	0801def0 	.word	0x0801def0
 8010750:	0801df10 	.word	0x0801df10
 8010754:	0801ded0 	.word	0x0801ded0
 8010758:	0801dc98 	.word	0x0801dc98
 801075c:	0801dca2 	.word	0x0801dca2
 8010760:	08010891 	.word	0x08010891
 8010764:	080104e7 	.word	0x080104e7
 8010768:	0801dc9e 	.word	0x0801dc9e

0801076c <__cvt>:
 801076c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801076e:	ed2d 8b02 	vpush	{d8}
 8010772:	eeb0 8b40 	vmov.f64	d8, d0
 8010776:	b085      	sub	sp, #20
 8010778:	4617      	mov	r7, r2
 801077a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801077c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801077e:	ee18 2a90 	vmov	r2, s17
 8010782:	f025 0520 	bic.w	r5, r5, #32
 8010786:	2a00      	cmp	r2, #0
 8010788:	bfb6      	itet	lt
 801078a:	222d      	movlt	r2, #45	; 0x2d
 801078c:	2200      	movge	r2, #0
 801078e:	eeb1 8b40 	vneglt.f64	d8, d0
 8010792:	2d46      	cmp	r5, #70	; 0x46
 8010794:	460c      	mov	r4, r1
 8010796:	701a      	strb	r2, [r3, #0]
 8010798:	d004      	beq.n	80107a4 <__cvt+0x38>
 801079a:	2d45      	cmp	r5, #69	; 0x45
 801079c:	d100      	bne.n	80107a0 <__cvt+0x34>
 801079e:	3401      	adds	r4, #1
 80107a0:	2102      	movs	r1, #2
 80107a2:	e000      	b.n	80107a6 <__cvt+0x3a>
 80107a4:	2103      	movs	r1, #3
 80107a6:	ab03      	add	r3, sp, #12
 80107a8:	9301      	str	r3, [sp, #4]
 80107aa:	ab02      	add	r3, sp, #8
 80107ac:	9300      	str	r3, [sp, #0]
 80107ae:	4622      	mov	r2, r4
 80107b0:	4633      	mov	r3, r6
 80107b2:	eeb0 0b48 	vmov.f64	d0, d8
 80107b6:	f001 ff0f 	bl	80125d8 <_dtoa_r>
 80107ba:	2d47      	cmp	r5, #71	; 0x47
 80107bc:	d109      	bne.n	80107d2 <__cvt+0x66>
 80107be:	07fb      	lsls	r3, r7, #31
 80107c0:	d407      	bmi.n	80107d2 <__cvt+0x66>
 80107c2:	9b03      	ldr	r3, [sp, #12]
 80107c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80107c6:	1a1b      	subs	r3, r3, r0
 80107c8:	6013      	str	r3, [r2, #0]
 80107ca:	b005      	add	sp, #20
 80107cc:	ecbd 8b02 	vpop	{d8}
 80107d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107d2:	2d46      	cmp	r5, #70	; 0x46
 80107d4:	eb00 0204 	add.w	r2, r0, r4
 80107d8:	d10c      	bne.n	80107f4 <__cvt+0x88>
 80107da:	7803      	ldrb	r3, [r0, #0]
 80107dc:	2b30      	cmp	r3, #48	; 0x30
 80107de:	d107      	bne.n	80107f0 <__cvt+0x84>
 80107e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80107e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107e8:	bf1c      	itt	ne
 80107ea:	f1c4 0401 	rsbne	r4, r4, #1
 80107ee:	6034      	strne	r4, [r6, #0]
 80107f0:	6833      	ldr	r3, [r6, #0]
 80107f2:	441a      	add	r2, r3
 80107f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80107f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107fc:	bf08      	it	eq
 80107fe:	9203      	streq	r2, [sp, #12]
 8010800:	2130      	movs	r1, #48	; 0x30
 8010802:	9b03      	ldr	r3, [sp, #12]
 8010804:	4293      	cmp	r3, r2
 8010806:	d2dc      	bcs.n	80107c2 <__cvt+0x56>
 8010808:	1c5c      	adds	r4, r3, #1
 801080a:	9403      	str	r4, [sp, #12]
 801080c:	7019      	strb	r1, [r3, #0]
 801080e:	e7f8      	b.n	8010802 <__cvt+0x96>

08010810 <__exponent>:
 8010810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010812:	4603      	mov	r3, r0
 8010814:	2900      	cmp	r1, #0
 8010816:	bfb8      	it	lt
 8010818:	4249      	neglt	r1, r1
 801081a:	f803 2b02 	strb.w	r2, [r3], #2
 801081e:	bfb4      	ite	lt
 8010820:	222d      	movlt	r2, #45	; 0x2d
 8010822:	222b      	movge	r2, #43	; 0x2b
 8010824:	2909      	cmp	r1, #9
 8010826:	7042      	strb	r2, [r0, #1]
 8010828:	dd2a      	ble.n	8010880 <__exponent+0x70>
 801082a:	f10d 0407 	add.w	r4, sp, #7
 801082e:	46a4      	mov	ip, r4
 8010830:	270a      	movs	r7, #10
 8010832:	46a6      	mov	lr, r4
 8010834:	460a      	mov	r2, r1
 8010836:	fb91 f6f7 	sdiv	r6, r1, r7
 801083a:	fb07 1516 	mls	r5, r7, r6, r1
 801083e:	3530      	adds	r5, #48	; 0x30
 8010840:	2a63      	cmp	r2, #99	; 0x63
 8010842:	f104 34ff 	add.w	r4, r4, #4294967295
 8010846:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801084a:	4631      	mov	r1, r6
 801084c:	dcf1      	bgt.n	8010832 <__exponent+0x22>
 801084e:	3130      	adds	r1, #48	; 0x30
 8010850:	f1ae 0502 	sub.w	r5, lr, #2
 8010854:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010858:	1c44      	adds	r4, r0, #1
 801085a:	4629      	mov	r1, r5
 801085c:	4561      	cmp	r1, ip
 801085e:	d30a      	bcc.n	8010876 <__exponent+0x66>
 8010860:	f10d 0209 	add.w	r2, sp, #9
 8010864:	eba2 020e 	sub.w	r2, r2, lr
 8010868:	4565      	cmp	r5, ip
 801086a:	bf88      	it	hi
 801086c:	2200      	movhi	r2, #0
 801086e:	4413      	add	r3, r2
 8010870:	1a18      	subs	r0, r3, r0
 8010872:	b003      	add	sp, #12
 8010874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010876:	f811 2b01 	ldrb.w	r2, [r1], #1
 801087a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801087e:	e7ed      	b.n	801085c <__exponent+0x4c>
 8010880:	2330      	movs	r3, #48	; 0x30
 8010882:	3130      	adds	r1, #48	; 0x30
 8010884:	7083      	strb	r3, [r0, #2]
 8010886:	70c1      	strb	r1, [r0, #3]
 8010888:	1d03      	adds	r3, r0, #4
 801088a:	e7f1      	b.n	8010870 <__exponent+0x60>
 801088c:	0000      	movs	r0, r0
	...

08010890 <_printf_float>:
 8010890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010894:	b08b      	sub	sp, #44	; 0x2c
 8010896:	460c      	mov	r4, r1
 8010898:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801089c:	4616      	mov	r6, r2
 801089e:	461f      	mov	r7, r3
 80108a0:	4605      	mov	r5, r0
 80108a2:	f003 f941 	bl	8013b28 <_localeconv_r>
 80108a6:	f8d0 b000 	ldr.w	fp, [r0]
 80108aa:	4658      	mov	r0, fp
 80108ac:	f7ef fd22 	bl	80002f4 <strlen>
 80108b0:	2300      	movs	r3, #0
 80108b2:	9308      	str	r3, [sp, #32]
 80108b4:	f8d8 3000 	ldr.w	r3, [r8]
 80108b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80108bc:	6822      	ldr	r2, [r4, #0]
 80108be:	3307      	adds	r3, #7
 80108c0:	f023 0307 	bic.w	r3, r3, #7
 80108c4:	f103 0108 	add.w	r1, r3, #8
 80108c8:	f8c8 1000 	str.w	r1, [r8]
 80108cc:	4682      	mov	sl, r0
 80108ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80108d2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80108d6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8010b38 <_printf_float+0x2a8>
 80108da:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80108de:	eeb0 6bc0 	vabs.f64	d6, d0
 80108e2:	eeb4 6b47 	vcmp.f64	d6, d7
 80108e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108ea:	dd24      	ble.n	8010936 <_printf_float+0xa6>
 80108ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80108f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108f4:	d502      	bpl.n	80108fc <_printf_float+0x6c>
 80108f6:	232d      	movs	r3, #45	; 0x2d
 80108f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80108fc:	4b90      	ldr	r3, [pc, #576]	; (8010b40 <_printf_float+0x2b0>)
 80108fe:	4891      	ldr	r0, [pc, #580]	; (8010b44 <_printf_float+0x2b4>)
 8010900:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010904:	bf94      	ite	ls
 8010906:	4698      	movls	r8, r3
 8010908:	4680      	movhi	r8, r0
 801090a:	2303      	movs	r3, #3
 801090c:	6123      	str	r3, [r4, #16]
 801090e:	f022 0204 	bic.w	r2, r2, #4
 8010912:	2300      	movs	r3, #0
 8010914:	6022      	str	r2, [r4, #0]
 8010916:	9304      	str	r3, [sp, #16]
 8010918:	9700      	str	r7, [sp, #0]
 801091a:	4633      	mov	r3, r6
 801091c:	aa09      	add	r2, sp, #36	; 0x24
 801091e:	4621      	mov	r1, r4
 8010920:	4628      	mov	r0, r5
 8010922:	f000 f9d3 	bl	8010ccc <_printf_common>
 8010926:	3001      	adds	r0, #1
 8010928:	f040 808a 	bne.w	8010a40 <_printf_float+0x1b0>
 801092c:	f04f 30ff 	mov.w	r0, #4294967295
 8010930:	b00b      	add	sp, #44	; 0x2c
 8010932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010936:	eeb4 0b40 	vcmp.f64	d0, d0
 801093a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801093e:	d709      	bvc.n	8010954 <_printf_float+0xc4>
 8010940:	ee10 3a90 	vmov	r3, s1
 8010944:	2b00      	cmp	r3, #0
 8010946:	bfbc      	itt	lt
 8010948:	232d      	movlt	r3, #45	; 0x2d
 801094a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801094e:	487e      	ldr	r0, [pc, #504]	; (8010b48 <_printf_float+0x2b8>)
 8010950:	4b7e      	ldr	r3, [pc, #504]	; (8010b4c <_printf_float+0x2bc>)
 8010952:	e7d5      	b.n	8010900 <_printf_float+0x70>
 8010954:	6863      	ldr	r3, [r4, #4]
 8010956:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801095a:	9104      	str	r1, [sp, #16]
 801095c:	1c59      	adds	r1, r3, #1
 801095e:	d13c      	bne.n	80109da <_printf_float+0x14a>
 8010960:	2306      	movs	r3, #6
 8010962:	6063      	str	r3, [r4, #4]
 8010964:	2300      	movs	r3, #0
 8010966:	9303      	str	r3, [sp, #12]
 8010968:	ab08      	add	r3, sp, #32
 801096a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801096e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010972:	ab07      	add	r3, sp, #28
 8010974:	6861      	ldr	r1, [r4, #4]
 8010976:	9300      	str	r3, [sp, #0]
 8010978:	6022      	str	r2, [r4, #0]
 801097a:	f10d 031b 	add.w	r3, sp, #27
 801097e:	4628      	mov	r0, r5
 8010980:	f7ff fef4 	bl	801076c <__cvt>
 8010984:	9b04      	ldr	r3, [sp, #16]
 8010986:	9907      	ldr	r1, [sp, #28]
 8010988:	2b47      	cmp	r3, #71	; 0x47
 801098a:	4680      	mov	r8, r0
 801098c:	d108      	bne.n	80109a0 <_printf_float+0x110>
 801098e:	1cc8      	adds	r0, r1, #3
 8010990:	db02      	blt.n	8010998 <_printf_float+0x108>
 8010992:	6863      	ldr	r3, [r4, #4]
 8010994:	4299      	cmp	r1, r3
 8010996:	dd41      	ble.n	8010a1c <_printf_float+0x18c>
 8010998:	f1a9 0902 	sub.w	r9, r9, #2
 801099c:	fa5f f989 	uxtb.w	r9, r9
 80109a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80109a4:	d820      	bhi.n	80109e8 <_printf_float+0x158>
 80109a6:	3901      	subs	r1, #1
 80109a8:	464a      	mov	r2, r9
 80109aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80109ae:	9107      	str	r1, [sp, #28]
 80109b0:	f7ff ff2e 	bl	8010810 <__exponent>
 80109b4:	9a08      	ldr	r2, [sp, #32]
 80109b6:	9004      	str	r0, [sp, #16]
 80109b8:	1813      	adds	r3, r2, r0
 80109ba:	2a01      	cmp	r2, #1
 80109bc:	6123      	str	r3, [r4, #16]
 80109be:	dc02      	bgt.n	80109c6 <_printf_float+0x136>
 80109c0:	6822      	ldr	r2, [r4, #0]
 80109c2:	07d2      	lsls	r2, r2, #31
 80109c4:	d501      	bpl.n	80109ca <_printf_float+0x13a>
 80109c6:	3301      	adds	r3, #1
 80109c8:	6123      	str	r3, [r4, #16]
 80109ca:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d0a2      	beq.n	8010918 <_printf_float+0x88>
 80109d2:	232d      	movs	r3, #45	; 0x2d
 80109d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80109d8:	e79e      	b.n	8010918 <_printf_float+0x88>
 80109da:	9904      	ldr	r1, [sp, #16]
 80109dc:	2947      	cmp	r1, #71	; 0x47
 80109de:	d1c1      	bne.n	8010964 <_printf_float+0xd4>
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d1bf      	bne.n	8010964 <_printf_float+0xd4>
 80109e4:	2301      	movs	r3, #1
 80109e6:	e7bc      	b.n	8010962 <_printf_float+0xd2>
 80109e8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80109ec:	d118      	bne.n	8010a20 <_printf_float+0x190>
 80109ee:	2900      	cmp	r1, #0
 80109f0:	6863      	ldr	r3, [r4, #4]
 80109f2:	dd0b      	ble.n	8010a0c <_printf_float+0x17c>
 80109f4:	6121      	str	r1, [r4, #16]
 80109f6:	b913      	cbnz	r3, 80109fe <_printf_float+0x16e>
 80109f8:	6822      	ldr	r2, [r4, #0]
 80109fa:	07d0      	lsls	r0, r2, #31
 80109fc:	d502      	bpl.n	8010a04 <_printf_float+0x174>
 80109fe:	3301      	adds	r3, #1
 8010a00:	440b      	add	r3, r1
 8010a02:	6123      	str	r3, [r4, #16]
 8010a04:	2300      	movs	r3, #0
 8010a06:	65a1      	str	r1, [r4, #88]	; 0x58
 8010a08:	9304      	str	r3, [sp, #16]
 8010a0a:	e7de      	b.n	80109ca <_printf_float+0x13a>
 8010a0c:	b913      	cbnz	r3, 8010a14 <_printf_float+0x184>
 8010a0e:	6822      	ldr	r2, [r4, #0]
 8010a10:	07d2      	lsls	r2, r2, #31
 8010a12:	d501      	bpl.n	8010a18 <_printf_float+0x188>
 8010a14:	3302      	adds	r3, #2
 8010a16:	e7f4      	b.n	8010a02 <_printf_float+0x172>
 8010a18:	2301      	movs	r3, #1
 8010a1a:	e7f2      	b.n	8010a02 <_printf_float+0x172>
 8010a1c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8010a20:	9b08      	ldr	r3, [sp, #32]
 8010a22:	4299      	cmp	r1, r3
 8010a24:	db05      	blt.n	8010a32 <_printf_float+0x1a2>
 8010a26:	6823      	ldr	r3, [r4, #0]
 8010a28:	6121      	str	r1, [r4, #16]
 8010a2a:	07d8      	lsls	r0, r3, #31
 8010a2c:	d5ea      	bpl.n	8010a04 <_printf_float+0x174>
 8010a2e:	1c4b      	adds	r3, r1, #1
 8010a30:	e7e7      	b.n	8010a02 <_printf_float+0x172>
 8010a32:	2900      	cmp	r1, #0
 8010a34:	bfd4      	ite	le
 8010a36:	f1c1 0202 	rsble	r2, r1, #2
 8010a3a:	2201      	movgt	r2, #1
 8010a3c:	4413      	add	r3, r2
 8010a3e:	e7e0      	b.n	8010a02 <_printf_float+0x172>
 8010a40:	6823      	ldr	r3, [r4, #0]
 8010a42:	055a      	lsls	r2, r3, #21
 8010a44:	d407      	bmi.n	8010a56 <_printf_float+0x1c6>
 8010a46:	6923      	ldr	r3, [r4, #16]
 8010a48:	4642      	mov	r2, r8
 8010a4a:	4631      	mov	r1, r6
 8010a4c:	4628      	mov	r0, r5
 8010a4e:	47b8      	blx	r7
 8010a50:	3001      	adds	r0, #1
 8010a52:	d12a      	bne.n	8010aaa <_printf_float+0x21a>
 8010a54:	e76a      	b.n	801092c <_printf_float+0x9c>
 8010a56:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010a5a:	f240 80e2 	bls.w	8010c22 <_printf_float+0x392>
 8010a5e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010a62:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a6a:	d133      	bne.n	8010ad4 <_printf_float+0x244>
 8010a6c:	4a38      	ldr	r2, [pc, #224]	; (8010b50 <_printf_float+0x2c0>)
 8010a6e:	2301      	movs	r3, #1
 8010a70:	4631      	mov	r1, r6
 8010a72:	4628      	mov	r0, r5
 8010a74:	47b8      	blx	r7
 8010a76:	3001      	adds	r0, #1
 8010a78:	f43f af58 	beq.w	801092c <_printf_float+0x9c>
 8010a7c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010a80:	429a      	cmp	r2, r3
 8010a82:	db02      	blt.n	8010a8a <_printf_float+0x1fa>
 8010a84:	6823      	ldr	r3, [r4, #0]
 8010a86:	07d8      	lsls	r0, r3, #31
 8010a88:	d50f      	bpl.n	8010aaa <_printf_float+0x21a>
 8010a8a:	4653      	mov	r3, sl
 8010a8c:	465a      	mov	r2, fp
 8010a8e:	4631      	mov	r1, r6
 8010a90:	4628      	mov	r0, r5
 8010a92:	47b8      	blx	r7
 8010a94:	3001      	adds	r0, #1
 8010a96:	f43f af49 	beq.w	801092c <_printf_float+0x9c>
 8010a9a:	f04f 0800 	mov.w	r8, #0
 8010a9e:	f104 091a 	add.w	r9, r4, #26
 8010aa2:	9b08      	ldr	r3, [sp, #32]
 8010aa4:	3b01      	subs	r3, #1
 8010aa6:	4543      	cmp	r3, r8
 8010aa8:	dc09      	bgt.n	8010abe <_printf_float+0x22e>
 8010aaa:	6823      	ldr	r3, [r4, #0]
 8010aac:	079b      	lsls	r3, r3, #30
 8010aae:	f100 8108 	bmi.w	8010cc2 <_printf_float+0x432>
 8010ab2:	68e0      	ldr	r0, [r4, #12]
 8010ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ab6:	4298      	cmp	r0, r3
 8010ab8:	bfb8      	it	lt
 8010aba:	4618      	movlt	r0, r3
 8010abc:	e738      	b.n	8010930 <_printf_float+0xa0>
 8010abe:	2301      	movs	r3, #1
 8010ac0:	464a      	mov	r2, r9
 8010ac2:	4631      	mov	r1, r6
 8010ac4:	4628      	mov	r0, r5
 8010ac6:	47b8      	blx	r7
 8010ac8:	3001      	adds	r0, #1
 8010aca:	f43f af2f 	beq.w	801092c <_printf_float+0x9c>
 8010ace:	f108 0801 	add.w	r8, r8, #1
 8010ad2:	e7e6      	b.n	8010aa2 <_printf_float+0x212>
 8010ad4:	9b07      	ldr	r3, [sp, #28]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	dc3c      	bgt.n	8010b54 <_printf_float+0x2c4>
 8010ada:	4a1d      	ldr	r2, [pc, #116]	; (8010b50 <_printf_float+0x2c0>)
 8010adc:	2301      	movs	r3, #1
 8010ade:	4631      	mov	r1, r6
 8010ae0:	4628      	mov	r0, r5
 8010ae2:	47b8      	blx	r7
 8010ae4:	3001      	adds	r0, #1
 8010ae6:	f43f af21 	beq.w	801092c <_printf_float+0x9c>
 8010aea:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010aee:	4313      	orrs	r3, r2
 8010af0:	d102      	bne.n	8010af8 <_printf_float+0x268>
 8010af2:	6823      	ldr	r3, [r4, #0]
 8010af4:	07d9      	lsls	r1, r3, #31
 8010af6:	d5d8      	bpl.n	8010aaa <_printf_float+0x21a>
 8010af8:	4653      	mov	r3, sl
 8010afa:	465a      	mov	r2, fp
 8010afc:	4631      	mov	r1, r6
 8010afe:	4628      	mov	r0, r5
 8010b00:	47b8      	blx	r7
 8010b02:	3001      	adds	r0, #1
 8010b04:	f43f af12 	beq.w	801092c <_printf_float+0x9c>
 8010b08:	f04f 0900 	mov.w	r9, #0
 8010b0c:	f104 0a1a 	add.w	sl, r4, #26
 8010b10:	9b07      	ldr	r3, [sp, #28]
 8010b12:	425b      	negs	r3, r3
 8010b14:	454b      	cmp	r3, r9
 8010b16:	dc01      	bgt.n	8010b1c <_printf_float+0x28c>
 8010b18:	9b08      	ldr	r3, [sp, #32]
 8010b1a:	e795      	b.n	8010a48 <_printf_float+0x1b8>
 8010b1c:	2301      	movs	r3, #1
 8010b1e:	4652      	mov	r2, sl
 8010b20:	4631      	mov	r1, r6
 8010b22:	4628      	mov	r0, r5
 8010b24:	47b8      	blx	r7
 8010b26:	3001      	adds	r0, #1
 8010b28:	f43f af00 	beq.w	801092c <_printf_float+0x9c>
 8010b2c:	f109 0901 	add.w	r9, r9, #1
 8010b30:	e7ee      	b.n	8010b10 <_printf_float+0x280>
 8010b32:	bf00      	nop
 8010b34:	f3af 8000 	nop.w
 8010b38:	ffffffff 	.word	0xffffffff
 8010b3c:	7fefffff 	.word	0x7fefffff
 8010b40:	0801dca9 	.word	0x0801dca9
 8010b44:	0801dcad 	.word	0x0801dcad
 8010b48:	0801dcb5 	.word	0x0801dcb5
 8010b4c:	0801dcb1 	.word	0x0801dcb1
 8010b50:	0801dcb9 	.word	0x0801dcb9
 8010b54:	9a08      	ldr	r2, [sp, #32]
 8010b56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010b58:	429a      	cmp	r2, r3
 8010b5a:	bfa8      	it	ge
 8010b5c:	461a      	movge	r2, r3
 8010b5e:	2a00      	cmp	r2, #0
 8010b60:	4691      	mov	r9, r2
 8010b62:	dc38      	bgt.n	8010bd6 <_printf_float+0x346>
 8010b64:	2300      	movs	r3, #0
 8010b66:	9305      	str	r3, [sp, #20]
 8010b68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010b6c:	f104 021a 	add.w	r2, r4, #26
 8010b70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010b72:	9905      	ldr	r1, [sp, #20]
 8010b74:	9304      	str	r3, [sp, #16]
 8010b76:	eba3 0309 	sub.w	r3, r3, r9
 8010b7a:	428b      	cmp	r3, r1
 8010b7c:	dc33      	bgt.n	8010be6 <_printf_float+0x356>
 8010b7e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010b82:	429a      	cmp	r2, r3
 8010b84:	db3c      	blt.n	8010c00 <_printf_float+0x370>
 8010b86:	6823      	ldr	r3, [r4, #0]
 8010b88:	07da      	lsls	r2, r3, #31
 8010b8a:	d439      	bmi.n	8010c00 <_printf_float+0x370>
 8010b8c:	9a08      	ldr	r2, [sp, #32]
 8010b8e:	9b04      	ldr	r3, [sp, #16]
 8010b90:	9907      	ldr	r1, [sp, #28]
 8010b92:	1ad3      	subs	r3, r2, r3
 8010b94:	eba2 0901 	sub.w	r9, r2, r1
 8010b98:	4599      	cmp	r9, r3
 8010b9a:	bfa8      	it	ge
 8010b9c:	4699      	movge	r9, r3
 8010b9e:	f1b9 0f00 	cmp.w	r9, #0
 8010ba2:	dc35      	bgt.n	8010c10 <_printf_float+0x380>
 8010ba4:	f04f 0800 	mov.w	r8, #0
 8010ba8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010bac:	f104 0a1a 	add.w	sl, r4, #26
 8010bb0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010bb4:	1a9b      	subs	r3, r3, r2
 8010bb6:	eba3 0309 	sub.w	r3, r3, r9
 8010bba:	4543      	cmp	r3, r8
 8010bbc:	f77f af75 	ble.w	8010aaa <_printf_float+0x21a>
 8010bc0:	2301      	movs	r3, #1
 8010bc2:	4652      	mov	r2, sl
 8010bc4:	4631      	mov	r1, r6
 8010bc6:	4628      	mov	r0, r5
 8010bc8:	47b8      	blx	r7
 8010bca:	3001      	adds	r0, #1
 8010bcc:	f43f aeae 	beq.w	801092c <_printf_float+0x9c>
 8010bd0:	f108 0801 	add.w	r8, r8, #1
 8010bd4:	e7ec      	b.n	8010bb0 <_printf_float+0x320>
 8010bd6:	4613      	mov	r3, r2
 8010bd8:	4631      	mov	r1, r6
 8010bda:	4642      	mov	r2, r8
 8010bdc:	4628      	mov	r0, r5
 8010bde:	47b8      	blx	r7
 8010be0:	3001      	adds	r0, #1
 8010be2:	d1bf      	bne.n	8010b64 <_printf_float+0x2d4>
 8010be4:	e6a2      	b.n	801092c <_printf_float+0x9c>
 8010be6:	2301      	movs	r3, #1
 8010be8:	4631      	mov	r1, r6
 8010bea:	4628      	mov	r0, r5
 8010bec:	9204      	str	r2, [sp, #16]
 8010bee:	47b8      	blx	r7
 8010bf0:	3001      	adds	r0, #1
 8010bf2:	f43f ae9b 	beq.w	801092c <_printf_float+0x9c>
 8010bf6:	9b05      	ldr	r3, [sp, #20]
 8010bf8:	9a04      	ldr	r2, [sp, #16]
 8010bfa:	3301      	adds	r3, #1
 8010bfc:	9305      	str	r3, [sp, #20]
 8010bfe:	e7b7      	b.n	8010b70 <_printf_float+0x2e0>
 8010c00:	4653      	mov	r3, sl
 8010c02:	465a      	mov	r2, fp
 8010c04:	4631      	mov	r1, r6
 8010c06:	4628      	mov	r0, r5
 8010c08:	47b8      	blx	r7
 8010c0a:	3001      	adds	r0, #1
 8010c0c:	d1be      	bne.n	8010b8c <_printf_float+0x2fc>
 8010c0e:	e68d      	b.n	801092c <_printf_float+0x9c>
 8010c10:	9a04      	ldr	r2, [sp, #16]
 8010c12:	464b      	mov	r3, r9
 8010c14:	4442      	add	r2, r8
 8010c16:	4631      	mov	r1, r6
 8010c18:	4628      	mov	r0, r5
 8010c1a:	47b8      	blx	r7
 8010c1c:	3001      	adds	r0, #1
 8010c1e:	d1c1      	bne.n	8010ba4 <_printf_float+0x314>
 8010c20:	e684      	b.n	801092c <_printf_float+0x9c>
 8010c22:	9a08      	ldr	r2, [sp, #32]
 8010c24:	2a01      	cmp	r2, #1
 8010c26:	dc01      	bgt.n	8010c2c <_printf_float+0x39c>
 8010c28:	07db      	lsls	r3, r3, #31
 8010c2a:	d537      	bpl.n	8010c9c <_printf_float+0x40c>
 8010c2c:	2301      	movs	r3, #1
 8010c2e:	4642      	mov	r2, r8
 8010c30:	4631      	mov	r1, r6
 8010c32:	4628      	mov	r0, r5
 8010c34:	47b8      	blx	r7
 8010c36:	3001      	adds	r0, #1
 8010c38:	f43f ae78 	beq.w	801092c <_printf_float+0x9c>
 8010c3c:	4653      	mov	r3, sl
 8010c3e:	465a      	mov	r2, fp
 8010c40:	4631      	mov	r1, r6
 8010c42:	4628      	mov	r0, r5
 8010c44:	47b8      	blx	r7
 8010c46:	3001      	adds	r0, #1
 8010c48:	f43f ae70 	beq.w	801092c <_printf_float+0x9c>
 8010c4c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010c50:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c58:	d01b      	beq.n	8010c92 <_printf_float+0x402>
 8010c5a:	9b08      	ldr	r3, [sp, #32]
 8010c5c:	f108 0201 	add.w	r2, r8, #1
 8010c60:	3b01      	subs	r3, #1
 8010c62:	4631      	mov	r1, r6
 8010c64:	4628      	mov	r0, r5
 8010c66:	47b8      	blx	r7
 8010c68:	3001      	adds	r0, #1
 8010c6a:	d10e      	bne.n	8010c8a <_printf_float+0x3fa>
 8010c6c:	e65e      	b.n	801092c <_printf_float+0x9c>
 8010c6e:	2301      	movs	r3, #1
 8010c70:	464a      	mov	r2, r9
 8010c72:	4631      	mov	r1, r6
 8010c74:	4628      	mov	r0, r5
 8010c76:	47b8      	blx	r7
 8010c78:	3001      	adds	r0, #1
 8010c7a:	f43f ae57 	beq.w	801092c <_printf_float+0x9c>
 8010c7e:	f108 0801 	add.w	r8, r8, #1
 8010c82:	9b08      	ldr	r3, [sp, #32]
 8010c84:	3b01      	subs	r3, #1
 8010c86:	4543      	cmp	r3, r8
 8010c88:	dcf1      	bgt.n	8010c6e <_printf_float+0x3de>
 8010c8a:	9b04      	ldr	r3, [sp, #16]
 8010c8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010c90:	e6db      	b.n	8010a4a <_printf_float+0x1ba>
 8010c92:	f04f 0800 	mov.w	r8, #0
 8010c96:	f104 091a 	add.w	r9, r4, #26
 8010c9a:	e7f2      	b.n	8010c82 <_printf_float+0x3f2>
 8010c9c:	2301      	movs	r3, #1
 8010c9e:	4642      	mov	r2, r8
 8010ca0:	e7df      	b.n	8010c62 <_printf_float+0x3d2>
 8010ca2:	2301      	movs	r3, #1
 8010ca4:	464a      	mov	r2, r9
 8010ca6:	4631      	mov	r1, r6
 8010ca8:	4628      	mov	r0, r5
 8010caa:	47b8      	blx	r7
 8010cac:	3001      	adds	r0, #1
 8010cae:	f43f ae3d 	beq.w	801092c <_printf_float+0x9c>
 8010cb2:	f108 0801 	add.w	r8, r8, #1
 8010cb6:	68e3      	ldr	r3, [r4, #12]
 8010cb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010cba:	1a5b      	subs	r3, r3, r1
 8010cbc:	4543      	cmp	r3, r8
 8010cbe:	dcf0      	bgt.n	8010ca2 <_printf_float+0x412>
 8010cc0:	e6f7      	b.n	8010ab2 <_printf_float+0x222>
 8010cc2:	f04f 0800 	mov.w	r8, #0
 8010cc6:	f104 0919 	add.w	r9, r4, #25
 8010cca:	e7f4      	b.n	8010cb6 <_printf_float+0x426>

08010ccc <_printf_common>:
 8010ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cd0:	4616      	mov	r6, r2
 8010cd2:	4699      	mov	r9, r3
 8010cd4:	688a      	ldr	r2, [r1, #8]
 8010cd6:	690b      	ldr	r3, [r1, #16]
 8010cd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010cdc:	4293      	cmp	r3, r2
 8010cde:	bfb8      	it	lt
 8010ce0:	4613      	movlt	r3, r2
 8010ce2:	6033      	str	r3, [r6, #0]
 8010ce4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010ce8:	4607      	mov	r7, r0
 8010cea:	460c      	mov	r4, r1
 8010cec:	b10a      	cbz	r2, 8010cf2 <_printf_common+0x26>
 8010cee:	3301      	adds	r3, #1
 8010cf0:	6033      	str	r3, [r6, #0]
 8010cf2:	6823      	ldr	r3, [r4, #0]
 8010cf4:	0699      	lsls	r1, r3, #26
 8010cf6:	bf42      	ittt	mi
 8010cf8:	6833      	ldrmi	r3, [r6, #0]
 8010cfa:	3302      	addmi	r3, #2
 8010cfc:	6033      	strmi	r3, [r6, #0]
 8010cfe:	6825      	ldr	r5, [r4, #0]
 8010d00:	f015 0506 	ands.w	r5, r5, #6
 8010d04:	d106      	bne.n	8010d14 <_printf_common+0x48>
 8010d06:	f104 0a19 	add.w	sl, r4, #25
 8010d0a:	68e3      	ldr	r3, [r4, #12]
 8010d0c:	6832      	ldr	r2, [r6, #0]
 8010d0e:	1a9b      	subs	r3, r3, r2
 8010d10:	42ab      	cmp	r3, r5
 8010d12:	dc26      	bgt.n	8010d62 <_printf_common+0x96>
 8010d14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010d18:	1e13      	subs	r3, r2, #0
 8010d1a:	6822      	ldr	r2, [r4, #0]
 8010d1c:	bf18      	it	ne
 8010d1e:	2301      	movne	r3, #1
 8010d20:	0692      	lsls	r2, r2, #26
 8010d22:	d42b      	bmi.n	8010d7c <_printf_common+0xb0>
 8010d24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010d28:	4649      	mov	r1, r9
 8010d2a:	4638      	mov	r0, r7
 8010d2c:	47c0      	blx	r8
 8010d2e:	3001      	adds	r0, #1
 8010d30:	d01e      	beq.n	8010d70 <_printf_common+0xa4>
 8010d32:	6823      	ldr	r3, [r4, #0]
 8010d34:	68e5      	ldr	r5, [r4, #12]
 8010d36:	6832      	ldr	r2, [r6, #0]
 8010d38:	f003 0306 	and.w	r3, r3, #6
 8010d3c:	2b04      	cmp	r3, #4
 8010d3e:	bf08      	it	eq
 8010d40:	1aad      	subeq	r5, r5, r2
 8010d42:	68a3      	ldr	r3, [r4, #8]
 8010d44:	6922      	ldr	r2, [r4, #16]
 8010d46:	bf0c      	ite	eq
 8010d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010d4c:	2500      	movne	r5, #0
 8010d4e:	4293      	cmp	r3, r2
 8010d50:	bfc4      	itt	gt
 8010d52:	1a9b      	subgt	r3, r3, r2
 8010d54:	18ed      	addgt	r5, r5, r3
 8010d56:	2600      	movs	r6, #0
 8010d58:	341a      	adds	r4, #26
 8010d5a:	42b5      	cmp	r5, r6
 8010d5c:	d11a      	bne.n	8010d94 <_printf_common+0xc8>
 8010d5e:	2000      	movs	r0, #0
 8010d60:	e008      	b.n	8010d74 <_printf_common+0xa8>
 8010d62:	2301      	movs	r3, #1
 8010d64:	4652      	mov	r2, sl
 8010d66:	4649      	mov	r1, r9
 8010d68:	4638      	mov	r0, r7
 8010d6a:	47c0      	blx	r8
 8010d6c:	3001      	adds	r0, #1
 8010d6e:	d103      	bne.n	8010d78 <_printf_common+0xac>
 8010d70:	f04f 30ff 	mov.w	r0, #4294967295
 8010d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d78:	3501      	adds	r5, #1
 8010d7a:	e7c6      	b.n	8010d0a <_printf_common+0x3e>
 8010d7c:	18e1      	adds	r1, r4, r3
 8010d7e:	1c5a      	adds	r2, r3, #1
 8010d80:	2030      	movs	r0, #48	; 0x30
 8010d82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010d86:	4422      	add	r2, r4
 8010d88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010d8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010d90:	3302      	adds	r3, #2
 8010d92:	e7c7      	b.n	8010d24 <_printf_common+0x58>
 8010d94:	2301      	movs	r3, #1
 8010d96:	4622      	mov	r2, r4
 8010d98:	4649      	mov	r1, r9
 8010d9a:	4638      	mov	r0, r7
 8010d9c:	47c0      	blx	r8
 8010d9e:	3001      	adds	r0, #1
 8010da0:	d0e6      	beq.n	8010d70 <_printf_common+0xa4>
 8010da2:	3601      	adds	r6, #1
 8010da4:	e7d9      	b.n	8010d5a <_printf_common+0x8e>
	...

08010da8 <_printf_i>:
 8010da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010dac:	460c      	mov	r4, r1
 8010dae:	4691      	mov	r9, r2
 8010db0:	7e27      	ldrb	r7, [r4, #24]
 8010db2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010db4:	2f78      	cmp	r7, #120	; 0x78
 8010db6:	4680      	mov	r8, r0
 8010db8:	469a      	mov	sl, r3
 8010dba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010dbe:	d807      	bhi.n	8010dd0 <_printf_i+0x28>
 8010dc0:	2f62      	cmp	r7, #98	; 0x62
 8010dc2:	d80a      	bhi.n	8010dda <_printf_i+0x32>
 8010dc4:	2f00      	cmp	r7, #0
 8010dc6:	f000 80d8 	beq.w	8010f7a <_printf_i+0x1d2>
 8010dca:	2f58      	cmp	r7, #88	; 0x58
 8010dcc:	f000 80a3 	beq.w	8010f16 <_printf_i+0x16e>
 8010dd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010dd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010dd8:	e03a      	b.n	8010e50 <_printf_i+0xa8>
 8010dda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010dde:	2b15      	cmp	r3, #21
 8010de0:	d8f6      	bhi.n	8010dd0 <_printf_i+0x28>
 8010de2:	a001      	add	r0, pc, #4	; (adr r0, 8010de8 <_printf_i+0x40>)
 8010de4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010de8:	08010e41 	.word	0x08010e41
 8010dec:	08010e55 	.word	0x08010e55
 8010df0:	08010dd1 	.word	0x08010dd1
 8010df4:	08010dd1 	.word	0x08010dd1
 8010df8:	08010dd1 	.word	0x08010dd1
 8010dfc:	08010dd1 	.word	0x08010dd1
 8010e00:	08010e55 	.word	0x08010e55
 8010e04:	08010dd1 	.word	0x08010dd1
 8010e08:	08010dd1 	.word	0x08010dd1
 8010e0c:	08010dd1 	.word	0x08010dd1
 8010e10:	08010dd1 	.word	0x08010dd1
 8010e14:	08010f61 	.word	0x08010f61
 8010e18:	08010e85 	.word	0x08010e85
 8010e1c:	08010f43 	.word	0x08010f43
 8010e20:	08010dd1 	.word	0x08010dd1
 8010e24:	08010dd1 	.word	0x08010dd1
 8010e28:	08010f83 	.word	0x08010f83
 8010e2c:	08010dd1 	.word	0x08010dd1
 8010e30:	08010e85 	.word	0x08010e85
 8010e34:	08010dd1 	.word	0x08010dd1
 8010e38:	08010dd1 	.word	0x08010dd1
 8010e3c:	08010f4b 	.word	0x08010f4b
 8010e40:	680b      	ldr	r3, [r1, #0]
 8010e42:	1d1a      	adds	r2, r3, #4
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	600a      	str	r2, [r1, #0]
 8010e48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010e4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010e50:	2301      	movs	r3, #1
 8010e52:	e0a3      	b.n	8010f9c <_printf_i+0x1f4>
 8010e54:	6825      	ldr	r5, [r4, #0]
 8010e56:	6808      	ldr	r0, [r1, #0]
 8010e58:	062e      	lsls	r6, r5, #24
 8010e5a:	f100 0304 	add.w	r3, r0, #4
 8010e5e:	d50a      	bpl.n	8010e76 <_printf_i+0xce>
 8010e60:	6805      	ldr	r5, [r0, #0]
 8010e62:	600b      	str	r3, [r1, #0]
 8010e64:	2d00      	cmp	r5, #0
 8010e66:	da03      	bge.n	8010e70 <_printf_i+0xc8>
 8010e68:	232d      	movs	r3, #45	; 0x2d
 8010e6a:	426d      	negs	r5, r5
 8010e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e70:	485e      	ldr	r0, [pc, #376]	; (8010fec <_printf_i+0x244>)
 8010e72:	230a      	movs	r3, #10
 8010e74:	e019      	b.n	8010eaa <_printf_i+0x102>
 8010e76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010e7a:	6805      	ldr	r5, [r0, #0]
 8010e7c:	600b      	str	r3, [r1, #0]
 8010e7e:	bf18      	it	ne
 8010e80:	b22d      	sxthne	r5, r5
 8010e82:	e7ef      	b.n	8010e64 <_printf_i+0xbc>
 8010e84:	680b      	ldr	r3, [r1, #0]
 8010e86:	6825      	ldr	r5, [r4, #0]
 8010e88:	1d18      	adds	r0, r3, #4
 8010e8a:	6008      	str	r0, [r1, #0]
 8010e8c:	0628      	lsls	r0, r5, #24
 8010e8e:	d501      	bpl.n	8010e94 <_printf_i+0xec>
 8010e90:	681d      	ldr	r5, [r3, #0]
 8010e92:	e002      	b.n	8010e9a <_printf_i+0xf2>
 8010e94:	0669      	lsls	r1, r5, #25
 8010e96:	d5fb      	bpl.n	8010e90 <_printf_i+0xe8>
 8010e98:	881d      	ldrh	r5, [r3, #0]
 8010e9a:	4854      	ldr	r0, [pc, #336]	; (8010fec <_printf_i+0x244>)
 8010e9c:	2f6f      	cmp	r7, #111	; 0x6f
 8010e9e:	bf0c      	ite	eq
 8010ea0:	2308      	moveq	r3, #8
 8010ea2:	230a      	movne	r3, #10
 8010ea4:	2100      	movs	r1, #0
 8010ea6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010eaa:	6866      	ldr	r6, [r4, #4]
 8010eac:	60a6      	str	r6, [r4, #8]
 8010eae:	2e00      	cmp	r6, #0
 8010eb0:	bfa2      	ittt	ge
 8010eb2:	6821      	ldrge	r1, [r4, #0]
 8010eb4:	f021 0104 	bicge.w	r1, r1, #4
 8010eb8:	6021      	strge	r1, [r4, #0]
 8010eba:	b90d      	cbnz	r5, 8010ec0 <_printf_i+0x118>
 8010ebc:	2e00      	cmp	r6, #0
 8010ebe:	d04d      	beq.n	8010f5c <_printf_i+0x1b4>
 8010ec0:	4616      	mov	r6, r2
 8010ec2:	fbb5 f1f3 	udiv	r1, r5, r3
 8010ec6:	fb03 5711 	mls	r7, r3, r1, r5
 8010eca:	5dc7      	ldrb	r7, [r0, r7]
 8010ecc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010ed0:	462f      	mov	r7, r5
 8010ed2:	42bb      	cmp	r3, r7
 8010ed4:	460d      	mov	r5, r1
 8010ed6:	d9f4      	bls.n	8010ec2 <_printf_i+0x11a>
 8010ed8:	2b08      	cmp	r3, #8
 8010eda:	d10b      	bne.n	8010ef4 <_printf_i+0x14c>
 8010edc:	6823      	ldr	r3, [r4, #0]
 8010ede:	07df      	lsls	r7, r3, #31
 8010ee0:	d508      	bpl.n	8010ef4 <_printf_i+0x14c>
 8010ee2:	6923      	ldr	r3, [r4, #16]
 8010ee4:	6861      	ldr	r1, [r4, #4]
 8010ee6:	4299      	cmp	r1, r3
 8010ee8:	bfde      	ittt	le
 8010eea:	2330      	movle	r3, #48	; 0x30
 8010eec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010ef0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010ef4:	1b92      	subs	r2, r2, r6
 8010ef6:	6122      	str	r2, [r4, #16]
 8010ef8:	f8cd a000 	str.w	sl, [sp]
 8010efc:	464b      	mov	r3, r9
 8010efe:	aa03      	add	r2, sp, #12
 8010f00:	4621      	mov	r1, r4
 8010f02:	4640      	mov	r0, r8
 8010f04:	f7ff fee2 	bl	8010ccc <_printf_common>
 8010f08:	3001      	adds	r0, #1
 8010f0a:	d14c      	bne.n	8010fa6 <_printf_i+0x1fe>
 8010f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010f10:	b004      	add	sp, #16
 8010f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f16:	4835      	ldr	r0, [pc, #212]	; (8010fec <_printf_i+0x244>)
 8010f18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010f1c:	6823      	ldr	r3, [r4, #0]
 8010f1e:	680e      	ldr	r6, [r1, #0]
 8010f20:	061f      	lsls	r7, r3, #24
 8010f22:	f856 5b04 	ldr.w	r5, [r6], #4
 8010f26:	600e      	str	r6, [r1, #0]
 8010f28:	d514      	bpl.n	8010f54 <_printf_i+0x1ac>
 8010f2a:	07d9      	lsls	r1, r3, #31
 8010f2c:	bf44      	itt	mi
 8010f2e:	f043 0320 	orrmi.w	r3, r3, #32
 8010f32:	6023      	strmi	r3, [r4, #0]
 8010f34:	b91d      	cbnz	r5, 8010f3e <_printf_i+0x196>
 8010f36:	6823      	ldr	r3, [r4, #0]
 8010f38:	f023 0320 	bic.w	r3, r3, #32
 8010f3c:	6023      	str	r3, [r4, #0]
 8010f3e:	2310      	movs	r3, #16
 8010f40:	e7b0      	b.n	8010ea4 <_printf_i+0xfc>
 8010f42:	6823      	ldr	r3, [r4, #0]
 8010f44:	f043 0320 	orr.w	r3, r3, #32
 8010f48:	6023      	str	r3, [r4, #0]
 8010f4a:	2378      	movs	r3, #120	; 0x78
 8010f4c:	4828      	ldr	r0, [pc, #160]	; (8010ff0 <_printf_i+0x248>)
 8010f4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010f52:	e7e3      	b.n	8010f1c <_printf_i+0x174>
 8010f54:	065e      	lsls	r6, r3, #25
 8010f56:	bf48      	it	mi
 8010f58:	b2ad      	uxthmi	r5, r5
 8010f5a:	e7e6      	b.n	8010f2a <_printf_i+0x182>
 8010f5c:	4616      	mov	r6, r2
 8010f5e:	e7bb      	b.n	8010ed8 <_printf_i+0x130>
 8010f60:	680b      	ldr	r3, [r1, #0]
 8010f62:	6826      	ldr	r6, [r4, #0]
 8010f64:	6960      	ldr	r0, [r4, #20]
 8010f66:	1d1d      	adds	r5, r3, #4
 8010f68:	600d      	str	r5, [r1, #0]
 8010f6a:	0635      	lsls	r5, r6, #24
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	d501      	bpl.n	8010f74 <_printf_i+0x1cc>
 8010f70:	6018      	str	r0, [r3, #0]
 8010f72:	e002      	b.n	8010f7a <_printf_i+0x1d2>
 8010f74:	0671      	lsls	r1, r6, #25
 8010f76:	d5fb      	bpl.n	8010f70 <_printf_i+0x1c8>
 8010f78:	8018      	strh	r0, [r3, #0]
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	6123      	str	r3, [r4, #16]
 8010f7e:	4616      	mov	r6, r2
 8010f80:	e7ba      	b.n	8010ef8 <_printf_i+0x150>
 8010f82:	680b      	ldr	r3, [r1, #0]
 8010f84:	1d1a      	adds	r2, r3, #4
 8010f86:	600a      	str	r2, [r1, #0]
 8010f88:	681e      	ldr	r6, [r3, #0]
 8010f8a:	6862      	ldr	r2, [r4, #4]
 8010f8c:	2100      	movs	r1, #0
 8010f8e:	4630      	mov	r0, r6
 8010f90:	f7ef f9be 	bl	8000310 <memchr>
 8010f94:	b108      	cbz	r0, 8010f9a <_printf_i+0x1f2>
 8010f96:	1b80      	subs	r0, r0, r6
 8010f98:	6060      	str	r0, [r4, #4]
 8010f9a:	6863      	ldr	r3, [r4, #4]
 8010f9c:	6123      	str	r3, [r4, #16]
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010fa4:	e7a8      	b.n	8010ef8 <_printf_i+0x150>
 8010fa6:	6923      	ldr	r3, [r4, #16]
 8010fa8:	4632      	mov	r2, r6
 8010faa:	4649      	mov	r1, r9
 8010fac:	4640      	mov	r0, r8
 8010fae:	47d0      	blx	sl
 8010fb0:	3001      	adds	r0, #1
 8010fb2:	d0ab      	beq.n	8010f0c <_printf_i+0x164>
 8010fb4:	6823      	ldr	r3, [r4, #0]
 8010fb6:	079b      	lsls	r3, r3, #30
 8010fb8:	d413      	bmi.n	8010fe2 <_printf_i+0x23a>
 8010fba:	68e0      	ldr	r0, [r4, #12]
 8010fbc:	9b03      	ldr	r3, [sp, #12]
 8010fbe:	4298      	cmp	r0, r3
 8010fc0:	bfb8      	it	lt
 8010fc2:	4618      	movlt	r0, r3
 8010fc4:	e7a4      	b.n	8010f10 <_printf_i+0x168>
 8010fc6:	2301      	movs	r3, #1
 8010fc8:	4632      	mov	r2, r6
 8010fca:	4649      	mov	r1, r9
 8010fcc:	4640      	mov	r0, r8
 8010fce:	47d0      	blx	sl
 8010fd0:	3001      	adds	r0, #1
 8010fd2:	d09b      	beq.n	8010f0c <_printf_i+0x164>
 8010fd4:	3501      	adds	r5, #1
 8010fd6:	68e3      	ldr	r3, [r4, #12]
 8010fd8:	9903      	ldr	r1, [sp, #12]
 8010fda:	1a5b      	subs	r3, r3, r1
 8010fdc:	42ab      	cmp	r3, r5
 8010fde:	dcf2      	bgt.n	8010fc6 <_printf_i+0x21e>
 8010fe0:	e7eb      	b.n	8010fba <_printf_i+0x212>
 8010fe2:	2500      	movs	r5, #0
 8010fe4:	f104 0619 	add.w	r6, r4, #25
 8010fe8:	e7f5      	b.n	8010fd6 <_printf_i+0x22e>
 8010fea:	bf00      	nop
 8010fec:	0801dcbb 	.word	0x0801dcbb
 8010ff0:	0801dccc 	.word	0x0801dccc

08010ff4 <_scanf_float>:
 8010ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ff8:	b087      	sub	sp, #28
 8010ffa:	4617      	mov	r7, r2
 8010ffc:	9303      	str	r3, [sp, #12]
 8010ffe:	688b      	ldr	r3, [r1, #8]
 8011000:	1e5a      	subs	r2, r3, #1
 8011002:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011006:	bf83      	ittte	hi
 8011008:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801100c:	195b      	addhi	r3, r3, r5
 801100e:	9302      	strhi	r3, [sp, #8]
 8011010:	2300      	movls	r3, #0
 8011012:	bf86      	itte	hi
 8011014:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011018:	608b      	strhi	r3, [r1, #8]
 801101a:	9302      	strls	r3, [sp, #8]
 801101c:	680b      	ldr	r3, [r1, #0]
 801101e:	468b      	mov	fp, r1
 8011020:	2500      	movs	r5, #0
 8011022:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011026:	f84b 3b1c 	str.w	r3, [fp], #28
 801102a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801102e:	4680      	mov	r8, r0
 8011030:	460c      	mov	r4, r1
 8011032:	465e      	mov	r6, fp
 8011034:	46aa      	mov	sl, r5
 8011036:	46a9      	mov	r9, r5
 8011038:	9501      	str	r5, [sp, #4]
 801103a:	68a2      	ldr	r2, [r4, #8]
 801103c:	b152      	cbz	r2, 8011054 <_scanf_float+0x60>
 801103e:	683b      	ldr	r3, [r7, #0]
 8011040:	781b      	ldrb	r3, [r3, #0]
 8011042:	2b4e      	cmp	r3, #78	; 0x4e
 8011044:	d864      	bhi.n	8011110 <_scanf_float+0x11c>
 8011046:	2b40      	cmp	r3, #64	; 0x40
 8011048:	d83c      	bhi.n	80110c4 <_scanf_float+0xd0>
 801104a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801104e:	b2c8      	uxtb	r0, r1
 8011050:	280e      	cmp	r0, #14
 8011052:	d93a      	bls.n	80110ca <_scanf_float+0xd6>
 8011054:	f1b9 0f00 	cmp.w	r9, #0
 8011058:	d003      	beq.n	8011062 <_scanf_float+0x6e>
 801105a:	6823      	ldr	r3, [r4, #0]
 801105c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011060:	6023      	str	r3, [r4, #0]
 8011062:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011066:	f1ba 0f01 	cmp.w	sl, #1
 801106a:	f200 8113 	bhi.w	8011294 <_scanf_float+0x2a0>
 801106e:	455e      	cmp	r6, fp
 8011070:	f200 8105 	bhi.w	801127e <_scanf_float+0x28a>
 8011074:	2501      	movs	r5, #1
 8011076:	4628      	mov	r0, r5
 8011078:	b007      	add	sp, #28
 801107a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801107e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8011082:	2a0d      	cmp	r2, #13
 8011084:	d8e6      	bhi.n	8011054 <_scanf_float+0x60>
 8011086:	a101      	add	r1, pc, #4	; (adr r1, 801108c <_scanf_float+0x98>)
 8011088:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801108c:	080111cb 	.word	0x080111cb
 8011090:	08011055 	.word	0x08011055
 8011094:	08011055 	.word	0x08011055
 8011098:	08011055 	.word	0x08011055
 801109c:	0801122b 	.word	0x0801122b
 80110a0:	08011203 	.word	0x08011203
 80110a4:	08011055 	.word	0x08011055
 80110a8:	08011055 	.word	0x08011055
 80110ac:	080111d9 	.word	0x080111d9
 80110b0:	08011055 	.word	0x08011055
 80110b4:	08011055 	.word	0x08011055
 80110b8:	08011055 	.word	0x08011055
 80110bc:	08011055 	.word	0x08011055
 80110c0:	08011191 	.word	0x08011191
 80110c4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80110c8:	e7db      	b.n	8011082 <_scanf_float+0x8e>
 80110ca:	290e      	cmp	r1, #14
 80110cc:	d8c2      	bhi.n	8011054 <_scanf_float+0x60>
 80110ce:	a001      	add	r0, pc, #4	; (adr r0, 80110d4 <_scanf_float+0xe0>)
 80110d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80110d4:	08011183 	.word	0x08011183
 80110d8:	08011055 	.word	0x08011055
 80110dc:	08011183 	.word	0x08011183
 80110e0:	08011217 	.word	0x08011217
 80110e4:	08011055 	.word	0x08011055
 80110e8:	08011131 	.word	0x08011131
 80110ec:	0801116d 	.word	0x0801116d
 80110f0:	0801116d 	.word	0x0801116d
 80110f4:	0801116d 	.word	0x0801116d
 80110f8:	0801116d 	.word	0x0801116d
 80110fc:	0801116d 	.word	0x0801116d
 8011100:	0801116d 	.word	0x0801116d
 8011104:	0801116d 	.word	0x0801116d
 8011108:	0801116d 	.word	0x0801116d
 801110c:	0801116d 	.word	0x0801116d
 8011110:	2b6e      	cmp	r3, #110	; 0x6e
 8011112:	d809      	bhi.n	8011128 <_scanf_float+0x134>
 8011114:	2b60      	cmp	r3, #96	; 0x60
 8011116:	d8b2      	bhi.n	801107e <_scanf_float+0x8a>
 8011118:	2b54      	cmp	r3, #84	; 0x54
 801111a:	d077      	beq.n	801120c <_scanf_float+0x218>
 801111c:	2b59      	cmp	r3, #89	; 0x59
 801111e:	d199      	bne.n	8011054 <_scanf_float+0x60>
 8011120:	2d07      	cmp	r5, #7
 8011122:	d197      	bne.n	8011054 <_scanf_float+0x60>
 8011124:	2508      	movs	r5, #8
 8011126:	e029      	b.n	801117c <_scanf_float+0x188>
 8011128:	2b74      	cmp	r3, #116	; 0x74
 801112a:	d06f      	beq.n	801120c <_scanf_float+0x218>
 801112c:	2b79      	cmp	r3, #121	; 0x79
 801112e:	e7f6      	b.n	801111e <_scanf_float+0x12a>
 8011130:	6821      	ldr	r1, [r4, #0]
 8011132:	05c8      	lsls	r0, r1, #23
 8011134:	d51a      	bpl.n	801116c <_scanf_float+0x178>
 8011136:	9b02      	ldr	r3, [sp, #8]
 8011138:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801113c:	6021      	str	r1, [r4, #0]
 801113e:	f109 0901 	add.w	r9, r9, #1
 8011142:	b11b      	cbz	r3, 801114c <_scanf_float+0x158>
 8011144:	3b01      	subs	r3, #1
 8011146:	3201      	adds	r2, #1
 8011148:	9302      	str	r3, [sp, #8]
 801114a:	60a2      	str	r2, [r4, #8]
 801114c:	68a3      	ldr	r3, [r4, #8]
 801114e:	3b01      	subs	r3, #1
 8011150:	60a3      	str	r3, [r4, #8]
 8011152:	6923      	ldr	r3, [r4, #16]
 8011154:	3301      	adds	r3, #1
 8011156:	6123      	str	r3, [r4, #16]
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	3b01      	subs	r3, #1
 801115c:	2b00      	cmp	r3, #0
 801115e:	607b      	str	r3, [r7, #4]
 8011160:	f340 8084 	ble.w	801126c <_scanf_float+0x278>
 8011164:	683b      	ldr	r3, [r7, #0]
 8011166:	3301      	adds	r3, #1
 8011168:	603b      	str	r3, [r7, #0]
 801116a:	e766      	b.n	801103a <_scanf_float+0x46>
 801116c:	eb1a 0f05 	cmn.w	sl, r5
 8011170:	f47f af70 	bne.w	8011054 <_scanf_float+0x60>
 8011174:	6822      	ldr	r2, [r4, #0]
 8011176:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801117a:	6022      	str	r2, [r4, #0]
 801117c:	f806 3b01 	strb.w	r3, [r6], #1
 8011180:	e7e4      	b.n	801114c <_scanf_float+0x158>
 8011182:	6822      	ldr	r2, [r4, #0]
 8011184:	0610      	lsls	r0, r2, #24
 8011186:	f57f af65 	bpl.w	8011054 <_scanf_float+0x60>
 801118a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801118e:	e7f4      	b.n	801117a <_scanf_float+0x186>
 8011190:	f1ba 0f00 	cmp.w	sl, #0
 8011194:	d10e      	bne.n	80111b4 <_scanf_float+0x1c0>
 8011196:	f1b9 0f00 	cmp.w	r9, #0
 801119a:	d10e      	bne.n	80111ba <_scanf_float+0x1c6>
 801119c:	6822      	ldr	r2, [r4, #0]
 801119e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80111a2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80111a6:	d108      	bne.n	80111ba <_scanf_float+0x1c6>
 80111a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80111ac:	6022      	str	r2, [r4, #0]
 80111ae:	f04f 0a01 	mov.w	sl, #1
 80111b2:	e7e3      	b.n	801117c <_scanf_float+0x188>
 80111b4:	f1ba 0f02 	cmp.w	sl, #2
 80111b8:	d055      	beq.n	8011266 <_scanf_float+0x272>
 80111ba:	2d01      	cmp	r5, #1
 80111bc:	d002      	beq.n	80111c4 <_scanf_float+0x1d0>
 80111be:	2d04      	cmp	r5, #4
 80111c0:	f47f af48 	bne.w	8011054 <_scanf_float+0x60>
 80111c4:	3501      	adds	r5, #1
 80111c6:	b2ed      	uxtb	r5, r5
 80111c8:	e7d8      	b.n	801117c <_scanf_float+0x188>
 80111ca:	f1ba 0f01 	cmp.w	sl, #1
 80111ce:	f47f af41 	bne.w	8011054 <_scanf_float+0x60>
 80111d2:	f04f 0a02 	mov.w	sl, #2
 80111d6:	e7d1      	b.n	801117c <_scanf_float+0x188>
 80111d8:	b97d      	cbnz	r5, 80111fa <_scanf_float+0x206>
 80111da:	f1b9 0f00 	cmp.w	r9, #0
 80111de:	f47f af3c 	bne.w	801105a <_scanf_float+0x66>
 80111e2:	6822      	ldr	r2, [r4, #0]
 80111e4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80111e8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80111ec:	f47f af39 	bne.w	8011062 <_scanf_float+0x6e>
 80111f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80111f4:	6022      	str	r2, [r4, #0]
 80111f6:	2501      	movs	r5, #1
 80111f8:	e7c0      	b.n	801117c <_scanf_float+0x188>
 80111fa:	2d03      	cmp	r5, #3
 80111fc:	d0e2      	beq.n	80111c4 <_scanf_float+0x1d0>
 80111fe:	2d05      	cmp	r5, #5
 8011200:	e7de      	b.n	80111c0 <_scanf_float+0x1cc>
 8011202:	2d02      	cmp	r5, #2
 8011204:	f47f af26 	bne.w	8011054 <_scanf_float+0x60>
 8011208:	2503      	movs	r5, #3
 801120a:	e7b7      	b.n	801117c <_scanf_float+0x188>
 801120c:	2d06      	cmp	r5, #6
 801120e:	f47f af21 	bne.w	8011054 <_scanf_float+0x60>
 8011212:	2507      	movs	r5, #7
 8011214:	e7b2      	b.n	801117c <_scanf_float+0x188>
 8011216:	6822      	ldr	r2, [r4, #0]
 8011218:	0591      	lsls	r1, r2, #22
 801121a:	f57f af1b 	bpl.w	8011054 <_scanf_float+0x60>
 801121e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8011222:	6022      	str	r2, [r4, #0]
 8011224:	f8cd 9004 	str.w	r9, [sp, #4]
 8011228:	e7a8      	b.n	801117c <_scanf_float+0x188>
 801122a:	6822      	ldr	r2, [r4, #0]
 801122c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8011230:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8011234:	d006      	beq.n	8011244 <_scanf_float+0x250>
 8011236:	0550      	lsls	r0, r2, #21
 8011238:	f57f af0c 	bpl.w	8011054 <_scanf_float+0x60>
 801123c:	f1b9 0f00 	cmp.w	r9, #0
 8011240:	f43f af0f 	beq.w	8011062 <_scanf_float+0x6e>
 8011244:	0591      	lsls	r1, r2, #22
 8011246:	bf58      	it	pl
 8011248:	9901      	ldrpl	r1, [sp, #4]
 801124a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801124e:	bf58      	it	pl
 8011250:	eba9 0101 	subpl.w	r1, r9, r1
 8011254:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8011258:	bf58      	it	pl
 801125a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801125e:	6022      	str	r2, [r4, #0]
 8011260:	f04f 0900 	mov.w	r9, #0
 8011264:	e78a      	b.n	801117c <_scanf_float+0x188>
 8011266:	f04f 0a03 	mov.w	sl, #3
 801126a:	e787      	b.n	801117c <_scanf_float+0x188>
 801126c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011270:	4639      	mov	r1, r7
 8011272:	4640      	mov	r0, r8
 8011274:	4798      	blx	r3
 8011276:	2800      	cmp	r0, #0
 8011278:	f43f aedf 	beq.w	801103a <_scanf_float+0x46>
 801127c:	e6ea      	b.n	8011054 <_scanf_float+0x60>
 801127e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011282:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011286:	463a      	mov	r2, r7
 8011288:	4640      	mov	r0, r8
 801128a:	4798      	blx	r3
 801128c:	6923      	ldr	r3, [r4, #16]
 801128e:	3b01      	subs	r3, #1
 8011290:	6123      	str	r3, [r4, #16]
 8011292:	e6ec      	b.n	801106e <_scanf_float+0x7a>
 8011294:	1e6b      	subs	r3, r5, #1
 8011296:	2b06      	cmp	r3, #6
 8011298:	d825      	bhi.n	80112e6 <_scanf_float+0x2f2>
 801129a:	2d02      	cmp	r5, #2
 801129c:	d836      	bhi.n	801130c <_scanf_float+0x318>
 801129e:	455e      	cmp	r6, fp
 80112a0:	f67f aee8 	bls.w	8011074 <_scanf_float+0x80>
 80112a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80112a8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80112ac:	463a      	mov	r2, r7
 80112ae:	4640      	mov	r0, r8
 80112b0:	4798      	blx	r3
 80112b2:	6923      	ldr	r3, [r4, #16]
 80112b4:	3b01      	subs	r3, #1
 80112b6:	6123      	str	r3, [r4, #16]
 80112b8:	e7f1      	b.n	801129e <_scanf_float+0x2aa>
 80112ba:	9802      	ldr	r0, [sp, #8]
 80112bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80112c0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80112c4:	9002      	str	r0, [sp, #8]
 80112c6:	463a      	mov	r2, r7
 80112c8:	4640      	mov	r0, r8
 80112ca:	4798      	blx	r3
 80112cc:	6923      	ldr	r3, [r4, #16]
 80112ce:	3b01      	subs	r3, #1
 80112d0:	6123      	str	r3, [r4, #16]
 80112d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80112d6:	fa5f fa8a 	uxtb.w	sl, sl
 80112da:	f1ba 0f02 	cmp.w	sl, #2
 80112de:	d1ec      	bne.n	80112ba <_scanf_float+0x2c6>
 80112e0:	3d03      	subs	r5, #3
 80112e2:	b2ed      	uxtb	r5, r5
 80112e4:	1b76      	subs	r6, r6, r5
 80112e6:	6823      	ldr	r3, [r4, #0]
 80112e8:	05da      	lsls	r2, r3, #23
 80112ea:	d52f      	bpl.n	801134c <_scanf_float+0x358>
 80112ec:	055b      	lsls	r3, r3, #21
 80112ee:	d510      	bpl.n	8011312 <_scanf_float+0x31e>
 80112f0:	455e      	cmp	r6, fp
 80112f2:	f67f aebf 	bls.w	8011074 <_scanf_float+0x80>
 80112f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80112fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80112fe:	463a      	mov	r2, r7
 8011300:	4640      	mov	r0, r8
 8011302:	4798      	blx	r3
 8011304:	6923      	ldr	r3, [r4, #16]
 8011306:	3b01      	subs	r3, #1
 8011308:	6123      	str	r3, [r4, #16]
 801130a:	e7f1      	b.n	80112f0 <_scanf_float+0x2fc>
 801130c:	46aa      	mov	sl, r5
 801130e:	9602      	str	r6, [sp, #8]
 8011310:	e7df      	b.n	80112d2 <_scanf_float+0x2de>
 8011312:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011316:	6923      	ldr	r3, [r4, #16]
 8011318:	2965      	cmp	r1, #101	; 0x65
 801131a:	f103 33ff 	add.w	r3, r3, #4294967295
 801131e:	f106 35ff 	add.w	r5, r6, #4294967295
 8011322:	6123      	str	r3, [r4, #16]
 8011324:	d00c      	beq.n	8011340 <_scanf_float+0x34c>
 8011326:	2945      	cmp	r1, #69	; 0x45
 8011328:	d00a      	beq.n	8011340 <_scanf_float+0x34c>
 801132a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801132e:	463a      	mov	r2, r7
 8011330:	4640      	mov	r0, r8
 8011332:	4798      	blx	r3
 8011334:	6923      	ldr	r3, [r4, #16]
 8011336:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801133a:	3b01      	subs	r3, #1
 801133c:	1eb5      	subs	r5, r6, #2
 801133e:	6123      	str	r3, [r4, #16]
 8011340:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011344:	463a      	mov	r2, r7
 8011346:	4640      	mov	r0, r8
 8011348:	4798      	blx	r3
 801134a:	462e      	mov	r6, r5
 801134c:	6825      	ldr	r5, [r4, #0]
 801134e:	f015 0510 	ands.w	r5, r5, #16
 8011352:	d14d      	bne.n	80113f0 <_scanf_float+0x3fc>
 8011354:	7035      	strb	r5, [r6, #0]
 8011356:	6823      	ldr	r3, [r4, #0]
 8011358:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801135c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011360:	d11a      	bne.n	8011398 <_scanf_float+0x3a4>
 8011362:	9b01      	ldr	r3, [sp, #4]
 8011364:	454b      	cmp	r3, r9
 8011366:	eba3 0209 	sub.w	r2, r3, r9
 801136a:	d122      	bne.n	80113b2 <_scanf_float+0x3be>
 801136c:	2200      	movs	r2, #0
 801136e:	4659      	mov	r1, fp
 8011370:	4640      	mov	r0, r8
 8011372:	f000 ff53 	bl	801221c <_strtod_r>
 8011376:	9b03      	ldr	r3, [sp, #12]
 8011378:	6821      	ldr	r1, [r4, #0]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	f011 0f02 	tst.w	r1, #2
 8011380:	f103 0204 	add.w	r2, r3, #4
 8011384:	d020      	beq.n	80113c8 <_scanf_float+0x3d4>
 8011386:	9903      	ldr	r1, [sp, #12]
 8011388:	600a      	str	r2, [r1, #0]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	ed83 0b00 	vstr	d0, [r3]
 8011390:	68e3      	ldr	r3, [r4, #12]
 8011392:	3301      	adds	r3, #1
 8011394:	60e3      	str	r3, [r4, #12]
 8011396:	e66e      	b.n	8011076 <_scanf_float+0x82>
 8011398:	9b04      	ldr	r3, [sp, #16]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d0e6      	beq.n	801136c <_scanf_float+0x378>
 801139e:	9905      	ldr	r1, [sp, #20]
 80113a0:	230a      	movs	r3, #10
 80113a2:	462a      	mov	r2, r5
 80113a4:	3101      	adds	r1, #1
 80113a6:	4640      	mov	r0, r8
 80113a8:	f000 ffc2 	bl	8012330 <_strtol_r>
 80113ac:	9b04      	ldr	r3, [sp, #16]
 80113ae:	9e05      	ldr	r6, [sp, #20]
 80113b0:	1ac2      	subs	r2, r0, r3
 80113b2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80113b6:	429e      	cmp	r6, r3
 80113b8:	bf28      	it	cs
 80113ba:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80113be:	490d      	ldr	r1, [pc, #52]	; (80113f4 <_scanf_float+0x400>)
 80113c0:	4630      	mov	r0, r6
 80113c2:	f000 f8f3 	bl	80115ac <siprintf>
 80113c6:	e7d1      	b.n	801136c <_scanf_float+0x378>
 80113c8:	f011 0f04 	tst.w	r1, #4
 80113cc:	9903      	ldr	r1, [sp, #12]
 80113ce:	600a      	str	r2, [r1, #0]
 80113d0:	d1db      	bne.n	801138a <_scanf_float+0x396>
 80113d2:	eeb4 0b40 	vcmp.f64	d0, d0
 80113d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113da:	681e      	ldr	r6, [r3, #0]
 80113dc:	d705      	bvc.n	80113ea <_scanf_float+0x3f6>
 80113de:	4806      	ldr	r0, [pc, #24]	; (80113f8 <_scanf_float+0x404>)
 80113e0:	f000 f8aa 	bl	8011538 <nanf>
 80113e4:	ed86 0a00 	vstr	s0, [r6]
 80113e8:	e7d2      	b.n	8011390 <_scanf_float+0x39c>
 80113ea:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80113ee:	e7f9      	b.n	80113e4 <_scanf_float+0x3f0>
 80113f0:	2500      	movs	r5, #0
 80113f2:	e640      	b.n	8011076 <_scanf_float+0x82>
 80113f4:	0801dcdd 	.word	0x0801dcdd
 80113f8:	0801dc92 	.word	0x0801dc92

080113fc <iprintf>:
 80113fc:	b40f      	push	{r0, r1, r2, r3}
 80113fe:	4b0a      	ldr	r3, [pc, #40]	; (8011428 <iprintf+0x2c>)
 8011400:	b513      	push	{r0, r1, r4, lr}
 8011402:	681c      	ldr	r4, [r3, #0]
 8011404:	b124      	cbz	r4, 8011410 <iprintf+0x14>
 8011406:	69a3      	ldr	r3, [r4, #24]
 8011408:	b913      	cbnz	r3, 8011410 <iprintf+0x14>
 801140a:	4620      	mov	r0, r4
 801140c:	f001 ff80 	bl	8013310 <__sinit>
 8011410:	ab05      	add	r3, sp, #20
 8011412:	9a04      	ldr	r2, [sp, #16]
 8011414:	68a1      	ldr	r1, [r4, #8]
 8011416:	9301      	str	r3, [sp, #4]
 8011418:	4620      	mov	r0, r4
 801141a:	f7ff f877 	bl	801050c <_vfiprintf_r>
 801141e:	b002      	add	sp, #8
 8011420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011424:	b004      	add	sp, #16
 8011426:	4770      	bx	lr
 8011428:	2400a0f0 	.word	0x2400a0f0

0801142c <_puts_r>:
 801142c:	b570      	push	{r4, r5, r6, lr}
 801142e:	460e      	mov	r6, r1
 8011430:	4605      	mov	r5, r0
 8011432:	b118      	cbz	r0, 801143c <_puts_r+0x10>
 8011434:	6983      	ldr	r3, [r0, #24]
 8011436:	b90b      	cbnz	r3, 801143c <_puts_r+0x10>
 8011438:	f001 ff6a 	bl	8013310 <__sinit>
 801143c:	69ab      	ldr	r3, [r5, #24]
 801143e:	68ac      	ldr	r4, [r5, #8]
 8011440:	b913      	cbnz	r3, 8011448 <_puts_r+0x1c>
 8011442:	4628      	mov	r0, r5
 8011444:	f001 ff64 	bl	8013310 <__sinit>
 8011448:	4b2c      	ldr	r3, [pc, #176]	; (80114fc <_puts_r+0xd0>)
 801144a:	429c      	cmp	r4, r3
 801144c:	d120      	bne.n	8011490 <_puts_r+0x64>
 801144e:	686c      	ldr	r4, [r5, #4]
 8011450:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011452:	07db      	lsls	r3, r3, #31
 8011454:	d405      	bmi.n	8011462 <_puts_r+0x36>
 8011456:	89a3      	ldrh	r3, [r4, #12]
 8011458:	0598      	lsls	r0, r3, #22
 801145a:	d402      	bmi.n	8011462 <_puts_r+0x36>
 801145c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801145e:	f002 fb68 	bl	8013b32 <__retarget_lock_acquire_recursive>
 8011462:	89a3      	ldrh	r3, [r4, #12]
 8011464:	0719      	lsls	r1, r3, #28
 8011466:	d51d      	bpl.n	80114a4 <_puts_r+0x78>
 8011468:	6923      	ldr	r3, [r4, #16]
 801146a:	b1db      	cbz	r3, 80114a4 <_puts_r+0x78>
 801146c:	3e01      	subs	r6, #1
 801146e:	68a3      	ldr	r3, [r4, #8]
 8011470:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011474:	3b01      	subs	r3, #1
 8011476:	60a3      	str	r3, [r4, #8]
 8011478:	bb39      	cbnz	r1, 80114ca <_puts_r+0x9e>
 801147a:	2b00      	cmp	r3, #0
 801147c:	da38      	bge.n	80114f0 <_puts_r+0xc4>
 801147e:	4622      	mov	r2, r4
 8011480:	210a      	movs	r1, #10
 8011482:	4628      	mov	r0, r5
 8011484:	f000 ff56 	bl	8012334 <__swbuf_r>
 8011488:	3001      	adds	r0, #1
 801148a:	d011      	beq.n	80114b0 <_puts_r+0x84>
 801148c:	250a      	movs	r5, #10
 801148e:	e011      	b.n	80114b4 <_puts_r+0x88>
 8011490:	4b1b      	ldr	r3, [pc, #108]	; (8011500 <_puts_r+0xd4>)
 8011492:	429c      	cmp	r4, r3
 8011494:	d101      	bne.n	801149a <_puts_r+0x6e>
 8011496:	68ac      	ldr	r4, [r5, #8]
 8011498:	e7da      	b.n	8011450 <_puts_r+0x24>
 801149a:	4b1a      	ldr	r3, [pc, #104]	; (8011504 <_puts_r+0xd8>)
 801149c:	429c      	cmp	r4, r3
 801149e:	bf08      	it	eq
 80114a0:	68ec      	ldreq	r4, [r5, #12]
 80114a2:	e7d5      	b.n	8011450 <_puts_r+0x24>
 80114a4:	4621      	mov	r1, r4
 80114a6:	4628      	mov	r0, r5
 80114a8:	f000 ff96 	bl	80123d8 <__swsetup_r>
 80114ac:	2800      	cmp	r0, #0
 80114ae:	d0dd      	beq.n	801146c <_puts_r+0x40>
 80114b0:	f04f 35ff 	mov.w	r5, #4294967295
 80114b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80114b6:	07da      	lsls	r2, r3, #31
 80114b8:	d405      	bmi.n	80114c6 <_puts_r+0x9a>
 80114ba:	89a3      	ldrh	r3, [r4, #12]
 80114bc:	059b      	lsls	r3, r3, #22
 80114be:	d402      	bmi.n	80114c6 <_puts_r+0x9a>
 80114c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80114c2:	f002 fb37 	bl	8013b34 <__retarget_lock_release_recursive>
 80114c6:	4628      	mov	r0, r5
 80114c8:	bd70      	pop	{r4, r5, r6, pc}
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	da04      	bge.n	80114d8 <_puts_r+0xac>
 80114ce:	69a2      	ldr	r2, [r4, #24]
 80114d0:	429a      	cmp	r2, r3
 80114d2:	dc06      	bgt.n	80114e2 <_puts_r+0xb6>
 80114d4:	290a      	cmp	r1, #10
 80114d6:	d004      	beq.n	80114e2 <_puts_r+0xb6>
 80114d8:	6823      	ldr	r3, [r4, #0]
 80114da:	1c5a      	adds	r2, r3, #1
 80114dc:	6022      	str	r2, [r4, #0]
 80114de:	7019      	strb	r1, [r3, #0]
 80114e0:	e7c5      	b.n	801146e <_puts_r+0x42>
 80114e2:	4622      	mov	r2, r4
 80114e4:	4628      	mov	r0, r5
 80114e6:	f000 ff25 	bl	8012334 <__swbuf_r>
 80114ea:	3001      	adds	r0, #1
 80114ec:	d1bf      	bne.n	801146e <_puts_r+0x42>
 80114ee:	e7df      	b.n	80114b0 <_puts_r+0x84>
 80114f0:	6823      	ldr	r3, [r4, #0]
 80114f2:	250a      	movs	r5, #10
 80114f4:	1c5a      	adds	r2, r3, #1
 80114f6:	6022      	str	r2, [r4, #0]
 80114f8:	701d      	strb	r5, [r3, #0]
 80114fa:	e7db      	b.n	80114b4 <_puts_r+0x88>
 80114fc:	0801def0 	.word	0x0801def0
 8011500:	0801df10 	.word	0x0801df10
 8011504:	0801ded0 	.word	0x0801ded0

08011508 <puts>:
 8011508:	4b02      	ldr	r3, [pc, #8]	; (8011514 <puts+0xc>)
 801150a:	4601      	mov	r1, r0
 801150c:	6818      	ldr	r0, [r3, #0]
 801150e:	f7ff bf8d 	b.w	801142c <_puts_r>
 8011512:	bf00      	nop
 8011514:	2400a0f0 	.word	0x2400a0f0

08011518 <_sbrk_r>:
 8011518:	b538      	push	{r3, r4, r5, lr}
 801151a:	4d06      	ldr	r5, [pc, #24]	; (8011534 <_sbrk_r+0x1c>)
 801151c:	2300      	movs	r3, #0
 801151e:	4604      	mov	r4, r0
 8011520:	4608      	mov	r0, r1
 8011522:	602b      	str	r3, [r5, #0]
 8011524:	f7f0 fa46 	bl	80019b4 <_sbrk>
 8011528:	1c43      	adds	r3, r0, #1
 801152a:	d102      	bne.n	8011532 <_sbrk_r+0x1a>
 801152c:	682b      	ldr	r3, [r5, #0]
 801152e:	b103      	cbz	r3, 8011532 <_sbrk_r+0x1a>
 8011530:	6023      	str	r3, [r4, #0]
 8011532:	bd38      	pop	{r3, r4, r5, pc}
 8011534:	2400f6ac 	.word	0x2400f6ac

08011538 <nanf>:
 8011538:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011540 <nanf+0x8>
 801153c:	4770      	bx	lr
 801153e:	bf00      	nop
 8011540:	7fc00000 	.word	0x7fc00000

08011544 <sniprintf>:
 8011544:	b40c      	push	{r2, r3}
 8011546:	b530      	push	{r4, r5, lr}
 8011548:	4b17      	ldr	r3, [pc, #92]	; (80115a8 <sniprintf+0x64>)
 801154a:	1e0c      	subs	r4, r1, #0
 801154c:	681d      	ldr	r5, [r3, #0]
 801154e:	b09d      	sub	sp, #116	; 0x74
 8011550:	da08      	bge.n	8011564 <sniprintf+0x20>
 8011552:	238b      	movs	r3, #139	; 0x8b
 8011554:	602b      	str	r3, [r5, #0]
 8011556:	f04f 30ff 	mov.w	r0, #4294967295
 801155a:	b01d      	add	sp, #116	; 0x74
 801155c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011560:	b002      	add	sp, #8
 8011562:	4770      	bx	lr
 8011564:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011568:	f8ad 3014 	strh.w	r3, [sp, #20]
 801156c:	bf14      	ite	ne
 801156e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011572:	4623      	moveq	r3, r4
 8011574:	9304      	str	r3, [sp, #16]
 8011576:	9307      	str	r3, [sp, #28]
 8011578:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801157c:	9002      	str	r0, [sp, #8]
 801157e:	9006      	str	r0, [sp, #24]
 8011580:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011584:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011586:	ab21      	add	r3, sp, #132	; 0x84
 8011588:	a902      	add	r1, sp, #8
 801158a:	4628      	mov	r0, r5
 801158c:	9301      	str	r3, [sp, #4]
 801158e:	f003 f8a1 	bl	80146d4 <_svfiprintf_r>
 8011592:	1c43      	adds	r3, r0, #1
 8011594:	bfbc      	itt	lt
 8011596:	238b      	movlt	r3, #139	; 0x8b
 8011598:	602b      	strlt	r3, [r5, #0]
 801159a:	2c00      	cmp	r4, #0
 801159c:	d0dd      	beq.n	801155a <sniprintf+0x16>
 801159e:	9b02      	ldr	r3, [sp, #8]
 80115a0:	2200      	movs	r2, #0
 80115a2:	701a      	strb	r2, [r3, #0]
 80115a4:	e7d9      	b.n	801155a <sniprintf+0x16>
 80115a6:	bf00      	nop
 80115a8:	2400a0f0 	.word	0x2400a0f0

080115ac <siprintf>:
 80115ac:	b40e      	push	{r1, r2, r3}
 80115ae:	b500      	push	{lr}
 80115b0:	b09c      	sub	sp, #112	; 0x70
 80115b2:	ab1d      	add	r3, sp, #116	; 0x74
 80115b4:	9002      	str	r0, [sp, #8]
 80115b6:	9006      	str	r0, [sp, #24]
 80115b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80115bc:	4809      	ldr	r0, [pc, #36]	; (80115e4 <siprintf+0x38>)
 80115be:	9107      	str	r1, [sp, #28]
 80115c0:	9104      	str	r1, [sp, #16]
 80115c2:	4909      	ldr	r1, [pc, #36]	; (80115e8 <siprintf+0x3c>)
 80115c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80115c8:	9105      	str	r1, [sp, #20]
 80115ca:	6800      	ldr	r0, [r0, #0]
 80115cc:	9301      	str	r3, [sp, #4]
 80115ce:	a902      	add	r1, sp, #8
 80115d0:	f003 f880 	bl	80146d4 <_svfiprintf_r>
 80115d4:	9b02      	ldr	r3, [sp, #8]
 80115d6:	2200      	movs	r2, #0
 80115d8:	701a      	strb	r2, [r3, #0]
 80115da:	b01c      	add	sp, #112	; 0x70
 80115dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80115e0:	b003      	add	sp, #12
 80115e2:	4770      	bx	lr
 80115e4:	2400a0f0 	.word	0x2400a0f0
 80115e8:	ffff0208 	.word	0xffff0208

080115ec <strncmp>:
 80115ec:	b510      	push	{r4, lr}
 80115ee:	b16a      	cbz	r2, 801160c <strncmp+0x20>
 80115f0:	3901      	subs	r1, #1
 80115f2:	1884      	adds	r4, r0, r2
 80115f4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80115f8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80115fc:	4293      	cmp	r3, r2
 80115fe:	d103      	bne.n	8011608 <strncmp+0x1c>
 8011600:	42a0      	cmp	r0, r4
 8011602:	d001      	beq.n	8011608 <strncmp+0x1c>
 8011604:	2b00      	cmp	r3, #0
 8011606:	d1f5      	bne.n	80115f4 <strncmp+0x8>
 8011608:	1a98      	subs	r0, r3, r2
 801160a:	bd10      	pop	{r4, pc}
 801160c:	4610      	mov	r0, r2
 801160e:	e7fc      	b.n	801160a <strncmp+0x1e>

08011610 <strncpy>:
 8011610:	b510      	push	{r4, lr}
 8011612:	3901      	subs	r1, #1
 8011614:	4603      	mov	r3, r0
 8011616:	b132      	cbz	r2, 8011626 <strncpy+0x16>
 8011618:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801161c:	f803 4b01 	strb.w	r4, [r3], #1
 8011620:	3a01      	subs	r2, #1
 8011622:	2c00      	cmp	r4, #0
 8011624:	d1f7      	bne.n	8011616 <strncpy+0x6>
 8011626:	441a      	add	r2, r3
 8011628:	2100      	movs	r1, #0
 801162a:	4293      	cmp	r3, r2
 801162c:	d100      	bne.n	8011630 <strncpy+0x20>
 801162e:	bd10      	pop	{r4, pc}
 8011630:	f803 1b01 	strb.w	r1, [r3], #1
 8011634:	e7f9      	b.n	801162a <strncpy+0x1a>

08011636 <sulp>:
 8011636:	b570      	push	{r4, r5, r6, lr}
 8011638:	4604      	mov	r4, r0
 801163a:	460d      	mov	r5, r1
 801163c:	4616      	mov	r6, r2
 801163e:	ec45 4b10 	vmov	d0, r4, r5
 8011642:	f002 fe67 	bl	8014314 <__ulp>
 8011646:	b17e      	cbz	r6, 8011668 <sulp+0x32>
 8011648:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801164c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011650:	2b00      	cmp	r3, #0
 8011652:	dd09      	ble.n	8011668 <sulp+0x32>
 8011654:	051b      	lsls	r3, r3, #20
 8011656:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801165a:	2000      	movs	r0, #0
 801165c:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8011660:	ec41 0b17 	vmov	d7, r0, r1
 8011664:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011668:	bd70      	pop	{r4, r5, r6, pc}
 801166a:	0000      	movs	r0, r0
 801166c:	0000      	movs	r0, r0
	...

08011670 <_strtod_l>:
 8011670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011674:	ed2d 8b0c 	vpush	{d8-d13}
 8011678:	b09d      	sub	sp, #116	; 0x74
 801167a:	461f      	mov	r7, r3
 801167c:	2300      	movs	r3, #0
 801167e:	9318      	str	r3, [sp, #96]	; 0x60
 8011680:	4ba6      	ldr	r3, [pc, #664]	; (801191c <_strtod_l+0x2ac>)
 8011682:	9213      	str	r2, [sp, #76]	; 0x4c
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	9308      	str	r3, [sp, #32]
 8011688:	4604      	mov	r4, r0
 801168a:	4618      	mov	r0, r3
 801168c:	468a      	mov	sl, r1
 801168e:	f7ee fe31 	bl	80002f4 <strlen>
 8011692:	f04f 0800 	mov.w	r8, #0
 8011696:	4605      	mov	r5, r0
 8011698:	f04f 0900 	mov.w	r9, #0
 801169c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80116a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80116a2:	781a      	ldrb	r2, [r3, #0]
 80116a4:	2a2b      	cmp	r2, #43	; 0x2b
 80116a6:	d04d      	beq.n	8011744 <_strtod_l+0xd4>
 80116a8:	d83a      	bhi.n	8011720 <_strtod_l+0xb0>
 80116aa:	2a0d      	cmp	r2, #13
 80116ac:	d833      	bhi.n	8011716 <_strtod_l+0xa6>
 80116ae:	2a08      	cmp	r2, #8
 80116b0:	d833      	bhi.n	801171a <_strtod_l+0xaa>
 80116b2:	2a00      	cmp	r2, #0
 80116b4:	d03d      	beq.n	8011732 <_strtod_l+0xc2>
 80116b6:	2300      	movs	r3, #0
 80116b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80116ba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80116bc:	7833      	ldrb	r3, [r6, #0]
 80116be:	2b30      	cmp	r3, #48	; 0x30
 80116c0:	f040 80b6 	bne.w	8011830 <_strtod_l+0x1c0>
 80116c4:	7873      	ldrb	r3, [r6, #1]
 80116c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80116ca:	2b58      	cmp	r3, #88	; 0x58
 80116cc:	d16d      	bne.n	80117aa <_strtod_l+0x13a>
 80116ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80116d0:	9301      	str	r3, [sp, #4]
 80116d2:	ab18      	add	r3, sp, #96	; 0x60
 80116d4:	9702      	str	r7, [sp, #8]
 80116d6:	9300      	str	r3, [sp, #0]
 80116d8:	4a91      	ldr	r2, [pc, #580]	; (8011920 <_strtod_l+0x2b0>)
 80116da:	ab19      	add	r3, sp, #100	; 0x64
 80116dc:	a917      	add	r1, sp, #92	; 0x5c
 80116de:	4620      	mov	r0, r4
 80116e0:	f001 ff1a 	bl	8013518 <__gethex>
 80116e4:	f010 0507 	ands.w	r5, r0, #7
 80116e8:	4607      	mov	r7, r0
 80116ea:	d005      	beq.n	80116f8 <_strtod_l+0x88>
 80116ec:	2d06      	cmp	r5, #6
 80116ee:	d12b      	bne.n	8011748 <_strtod_l+0xd8>
 80116f0:	3601      	adds	r6, #1
 80116f2:	2300      	movs	r3, #0
 80116f4:	9617      	str	r6, [sp, #92]	; 0x5c
 80116f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80116f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	f040 856e 	bne.w	80121dc <_strtod_l+0xb6c>
 8011700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011702:	b1e3      	cbz	r3, 801173e <_strtod_l+0xce>
 8011704:	ec49 8b17 	vmov	d7, r8, r9
 8011708:	eeb1 0b47 	vneg.f64	d0, d7
 801170c:	b01d      	add	sp, #116	; 0x74
 801170e:	ecbd 8b0c 	vpop	{d8-d13}
 8011712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011716:	2a20      	cmp	r2, #32
 8011718:	d1cd      	bne.n	80116b6 <_strtod_l+0x46>
 801171a:	3301      	adds	r3, #1
 801171c:	9317      	str	r3, [sp, #92]	; 0x5c
 801171e:	e7bf      	b.n	80116a0 <_strtod_l+0x30>
 8011720:	2a2d      	cmp	r2, #45	; 0x2d
 8011722:	d1c8      	bne.n	80116b6 <_strtod_l+0x46>
 8011724:	2201      	movs	r2, #1
 8011726:	920b      	str	r2, [sp, #44]	; 0x2c
 8011728:	1c5a      	adds	r2, r3, #1
 801172a:	9217      	str	r2, [sp, #92]	; 0x5c
 801172c:	785b      	ldrb	r3, [r3, #1]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d1c3      	bne.n	80116ba <_strtod_l+0x4a>
 8011732:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011734:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8011738:	2b00      	cmp	r3, #0
 801173a:	f040 854d 	bne.w	80121d8 <_strtod_l+0xb68>
 801173e:	ec49 8b10 	vmov	d0, r8, r9
 8011742:	e7e3      	b.n	801170c <_strtod_l+0x9c>
 8011744:	2200      	movs	r2, #0
 8011746:	e7ee      	b.n	8011726 <_strtod_l+0xb6>
 8011748:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801174a:	b13a      	cbz	r2, 801175c <_strtod_l+0xec>
 801174c:	2135      	movs	r1, #53	; 0x35
 801174e:	a81a      	add	r0, sp, #104	; 0x68
 8011750:	f002 feec 	bl	801452c <__copybits>
 8011754:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011756:	4620      	mov	r0, r4
 8011758:	f002 fab0 	bl	8013cbc <_Bfree>
 801175c:	3d01      	subs	r5, #1
 801175e:	2d05      	cmp	r5, #5
 8011760:	d807      	bhi.n	8011772 <_strtod_l+0x102>
 8011762:	e8df f005 	tbb	[pc, r5]
 8011766:	0b0e      	.short	0x0b0e
 8011768:	030e1d18 	.word	0x030e1d18
 801176c:	f04f 0900 	mov.w	r9, #0
 8011770:	46c8      	mov	r8, r9
 8011772:	073b      	lsls	r3, r7, #28
 8011774:	d5c0      	bpl.n	80116f8 <_strtod_l+0x88>
 8011776:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 801177a:	e7bd      	b.n	80116f8 <_strtod_l+0x88>
 801177c:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8011780:	e7f7      	b.n	8011772 <_strtod_l+0x102>
 8011782:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8011786:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011788:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801178c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011790:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8011794:	e7ed      	b.n	8011772 <_strtod_l+0x102>
 8011796:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8011924 <_strtod_l+0x2b4>
 801179a:	f04f 0800 	mov.w	r8, #0
 801179e:	e7e8      	b.n	8011772 <_strtod_l+0x102>
 80117a0:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80117a4:	f04f 38ff 	mov.w	r8, #4294967295
 80117a8:	e7e3      	b.n	8011772 <_strtod_l+0x102>
 80117aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80117ac:	1c5a      	adds	r2, r3, #1
 80117ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80117b0:	785b      	ldrb	r3, [r3, #1]
 80117b2:	2b30      	cmp	r3, #48	; 0x30
 80117b4:	d0f9      	beq.n	80117aa <_strtod_l+0x13a>
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d09e      	beq.n	80116f8 <_strtod_l+0x88>
 80117ba:	2301      	movs	r3, #1
 80117bc:	9306      	str	r3, [sp, #24]
 80117be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80117c0:	930c      	str	r3, [sp, #48]	; 0x30
 80117c2:	2300      	movs	r3, #0
 80117c4:	9304      	str	r3, [sp, #16]
 80117c6:	930a      	str	r3, [sp, #40]	; 0x28
 80117c8:	461e      	mov	r6, r3
 80117ca:	220a      	movs	r2, #10
 80117cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80117ce:	f890 b000 	ldrb.w	fp, [r0]
 80117d2:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 80117d6:	b2d9      	uxtb	r1, r3
 80117d8:	2909      	cmp	r1, #9
 80117da:	d92b      	bls.n	8011834 <_strtod_l+0x1c4>
 80117dc:	9908      	ldr	r1, [sp, #32]
 80117de:	462a      	mov	r2, r5
 80117e0:	f7ff ff04 	bl	80115ec <strncmp>
 80117e4:	2800      	cmp	r0, #0
 80117e6:	d035      	beq.n	8011854 <_strtod_l+0x1e4>
 80117e8:	2000      	movs	r0, #0
 80117ea:	465a      	mov	r2, fp
 80117ec:	4633      	mov	r3, r6
 80117ee:	4683      	mov	fp, r0
 80117f0:	4601      	mov	r1, r0
 80117f2:	2a65      	cmp	r2, #101	; 0x65
 80117f4:	d001      	beq.n	80117fa <_strtod_l+0x18a>
 80117f6:	2a45      	cmp	r2, #69	; 0x45
 80117f8:	d118      	bne.n	801182c <_strtod_l+0x1bc>
 80117fa:	b91b      	cbnz	r3, 8011804 <_strtod_l+0x194>
 80117fc:	9b06      	ldr	r3, [sp, #24]
 80117fe:	4303      	orrs	r3, r0
 8011800:	d097      	beq.n	8011732 <_strtod_l+0xc2>
 8011802:	2300      	movs	r3, #0
 8011804:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8011808:	f10a 0201 	add.w	r2, sl, #1
 801180c:	9217      	str	r2, [sp, #92]	; 0x5c
 801180e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8011812:	2a2b      	cmp	r2, #43	; 0x2b
 8011814:	d077      	beq.n	8011906 <_strtod_l+0x296>
 8011816:	2a2d      	cmp	r2, #45	; 0x2d
 8011818:	d07d      	beq.n	8011916 <_strtod_l+0x2a6>
 801181a:	f04f 0e00 	mov.w	lr, #0
 801181e:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8011822:	2d09      	cmp	r5, #9
 8011824:	f240 8084 	bls.w	8011930 <_strtod_l+0x2c0>
 8011828:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 801182c:	2500      	movs	r5, #0
 801182e:	e09f      	b.n	8011970 <_strtod_l+0x300>
 8011830:	2300      	movs	r3, #0
 8011832:	e7c3      	b.n	80117bc <_strtod_l+0x14c>
 8011834:	2e08      	cmp	r6, #8
 8011836:	bfd5      	itete	le
 8011838:	990a      	ldrle	r1, [sp, #40]	; 0x28
 801183a:	9904      	ldrgt	r1, [sp, #16]
 801183c:	fb02 3301 	mlale	r3, r2, r1, r3
 8011840:	fb02 3301 	mlagt	r3, r2, r1, r3
 8011844:	f100 0001 	add.w	r0, r0, #1
 8011848:	bfd4      	ite	le
 801184a:	930a      	strle	r3, [sp, #40]	; 0x28
 801184c:	9304      	strgt	r3, [sp, #16]
 801184e:	3601      	adds	r6, #1
 8011850:	9017      	str	r0, [sp, #92]	; 0x5c
 8011852:	e7bb      	b.n	80117cc <_strtod_l+0x15c>
 8011854:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011856:	195a      	adds	r2, r3, r5
 8011858:	9217      	str	r2, [sp, #92]	; 0x5c
 801185a:	5d5a      	ldrb	r2, [r3, r5]
 801185c:	b3ae      	cbz	r6, 80118ca <_strtod_l+0x25a>
 801185e:	4683      	mov	fp, r0
 8011860:	4633      	mov	r3, r6
 8011862:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8011866:	2909      	cmp	r1, #9
 8011868:	d912      	bls.n	8011890 <_strtod_l+0x220>
 801186a:	2101      	movs	r1, #1
 801186c:	e7c1      	b.n	80117f2 <_strtod_l+0x182>
 801186e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011870:	1c5a      	adds	r2, r3, #1
 8011872:	9217      	str	r2, [sp, #92]	; 0x5c
 8011874:	785a      	ldrb	r2, [r3, #1]
 8011876:	3001      	adds	r0, #1
 8011878:	2a30      	cmp	r2, #48	; 0x30
 801187a:	d0f8      	beq.n	801186e <_strtod_l+0x1fe>
 801187c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8011880:	2b08      	cmp	r3, #8
 8011882:	f200 84b0 	bhi.w	80121e6 <_strtod_l+0xb76>
 8011886:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011888:	930c      	str	r3, [sp, #48]	; 0x30
 801188a:	4683      	mov	fp, r0
 801188c:	2000      	movs	r0, #0
 801188e:	4603      	mov	r3, r0
 8011890:	3a30      	subs	r2, #48	; 0x30
 8011892:	f100 0101 	add.w	r1, r0, #1
 8011896:	d012      	beq.n	80118be <_strtod_l+0x24e>
 8011898:	448b      	add	fp, r1
 801189a:	eb00 0c03 	add.w	ip, r0, r3
 801189e:	4619      	mov	r1, r3
 80118a0:	250a      	movs	r5, #10
 80118a2:	4561      	cmp	r1, ip
 80118a4:	d113      	bne.n	80118ce <_strtod_l+0x25e>
 80118a6:	1819      	adds	r1, r3, r0
 80118a8:	2908      	cmp	r1, #8
 80118aa:	f103 0301 	add.w	r3, r3, #1
 80118ae:	4403      	add	r3, r0
 80118b0:	dc1d      	bgt.n	80118ee <_strtod_l+0x27e>
 80118b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80118b4:	210a      	movs	r1, #10
 80118b6:	fb01 2200 	mla	r2, r1, r0, r2
 80118ba:	920a      	str	r2, [sp, #40]	; 0x28
 80118bc:	2100      	movs	r1, #0
 80118be:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80118c0:	1c50      	adds	r0, r2, #1
 80118c2:	9017      	str	r0, [sp, #92]	; 0x5c
 80118c4:	7852      	ldrb	r2, [r2, #1]
 80118c6:	4608      	mov	r0, r1
 80118c8:	e7cb      	b.n	8011862 <_strtod_l+0x1f2>
 80118ca:	4630      	mov	r0, r6
 80118cc:	e7d4      	b.n	8011878 <_strtod_l+0x208>
 80118ce:	2908      	cmp	r1, #8
 80118d0:	dc04      	bgt.n	80118dc <_strtod_l+0x26c>
 80118d2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80118d4:	436f      	muls	r7, r5
 80118d6:	970a      	str	r7, [sp, #40]	; 0x28
 80118d8:	3101      	adds	r1, #1
 80118da:	e7e2      	b.n	80118a2 <_strtod_l+0x232>
 80118dc:	f101 0e01 	add.w	lr, r1, #1
 80118e0:	f1be 0f10 	cmp.w	lr, #16
 80118e4:	bfde      	ittt	le
 80118e6:	9f04      	ldrle	r7, [sp, #16]
 80118e8:	436f      	mulle	r7, r5
 80118ea:	9704      	strle	r7, [sp, #16]
 80118ec:	e7f4      	b.n	80118d8 <_strtod_l+0x268>
 80118ee:	2b10      	cmp	r3, #16
 80118f0:	bfdf      	itttt	le
 80118f2:	9804      	ldrle	r0, [sp, #16]
 80118f4:	210a      	movle	r1, #10
 80118f6:	fb01 2200 	mlale	r2, r1, r0, r2
 80118fa:	9204      	strle	r2, [sp, #16]
 80118fc:	e7de      	b.n	80118bc <_strtod_l+0x24c>
 80118fe:	f04f 0b00 	mov.w	fp, #0
 8011902:	2101      	movs	r1, #1
 8011904:	e77a      	b.n	80117fc <_strtod_l+0x18c>
 8011906:	f04f 0e00 	mov.w	lr, #0
 801190a:	f10a 0202 	add.w	r2, sl, #2
 801190e:	9217      	str	r2, [sp, #92]	; 0x5c
 8011910:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8011914:	e783      	b.n	801181e <_strtod_l+0x1ae>
 8011916:	f04f 0e01 	mov.w	lr, #1
 801191a:	e7f6      	b.n	801190a <_strtod_l+0x29a>
 801191c:	0801df9c 	.word	0x0801df9c
 8011920:	0801dce4 	.word	0x0801dce4
 8011924:	7ff00000 	.word	0x7ff00000
 8011928:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801192a:	1c55      	adds	r5, r2, #1
 801192c:	9517      	str	r5, [sp, #92]	; 0x5c
 801192e:	7852      	ldrb	r2, [r2, #1]
 8011930:	2a30      	cmp	r2, #48	; 0x30
 8011932:	d0f9      	beq.n	8011928 <_strtod_l+0x2b8>
 8011934:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8011938:	2d08      	cmp	r5, #8
 801193a:	f63f af77 	bhi.w	801182c <_strtod_l+0x1bc>
 801193e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8011942:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011944:	9208      	str	r2, [sp, #32]
 8011946:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011948:	1c55      	adds	r5, r2, #1
 801194a:	9517      	str	r5, [sp, #92]	; 0x5c
 801194c:	7852      	ldrb	r2, [r2, #1]
 801194e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8011952:	2f09      	cmp	r7, #9
 8011954:	d937      	bls.n	80119c6 <_strtod_l+0x356>
 8011956:	9f08      	ldr	r7, [sp, #32]
 8011958:	1bed      	subs	r5, r5, r7
 801195a:	2d08      	cmp	r5, #8
 801195c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8011960:	dc02      	bgt.n	8011968 <_strtod_l+0x2f8>
 8011962:	4565      	cmp	r5, ip
 8011964:	bfa8      	it	ge
 8011966:	4665      	movge	r5, ip
 8011968:	f1be 0f00 	cmp.w	lr, #0
 801196c:	d000      	beq.n	8011970 <_strtod_l+0x300>
 801196e:	426d      	negs	r5, r5
 8011970:	2b00      	cmp	r3, #0
 8011972:	d14f      	bne.n	8011a14 <_strtod_l+0x3a4>
 8011974:	9b06      	ldr	r3, [sp, #24]
 8011976:	4303      	orrs	r3, r0
 8011978:	f47f aebe 	bne.w	80116f8 <_strtod_l+0x88>
 801197c:	2900      	cmp	r1, #0
 801197e:	f47f aed8 	bne.w	8011732 <_strtod_l+0xc2>
 8011982:	2a69      	cmp	r2, #105	; 0x69
 8011984:	d027      	beq.n	80119d6 <_strtod_l+0x366>
 8011986:	dc24      	bgt.n	80119d2 <_strtod_l+0x362>
 8011988:	2a49      	cmp	r2, #73	; 0x49
 801198a:	d024      	beq.n	80119d6 <_strtod_l+0x366>
 801198c:	2a4e      	cmp	r2, #78	; 0x4e
 801198e:	f47f aed0 	bne.w	8011732 <_strtod_l+0xc2>
 8011992:	499b      	ldr	r1, [pc, #620]	; (8011c00 <_strtod_l+0x590>)
 8011994:	a817      	add	r0, sp, #92	; 0x5c
 8011996:	f002 f817 	bl	80139c8 <__match>
 801199a:	2800      	cmp	r0, #0
 801199c:	f43f aec9 	beq.w	8011732 <_strtod_l+0xc2>
 80119a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80119a2:	781b      	ldrb	r3, [r3, #0]
 80119a4:	2b28      	cmp	r3, #40	; 0x28
 80119a6:	d12d      	bne.n	8011a04 <_strtod_l+0x394>
 80119a8:	4996      	ldr	r1, [pc, #600]	; (8011c04 <_strtod_l+0x594>)
 80119aa:	aa1a      	add	r2, sp, #104	; 0x68
 80119ac:	a817      	add	r0, sp, #92	; 0x5c
 80119ae:	f002 f81f 	bl	80139f0 <__hexnan>
 80119b2:	2805      	cmp	r0, #5
 80119b4:	d126      	bne.n	8011a04 <_strtod_l+0x394>
 80119b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80119b8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80119bc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80119c0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80119c4:	e698      	b.n	80116f8 <_strtod_l+0x88>
 80119c6:	250a      	movs	r5, #10
 80119c8:	fb05 250c 	mla	r5, r5, ip, r2
 80119cc:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 80119d0:	e7b9      	b.n	8011946 <_strtod_l+0x2d6>
 80119d2:	2a6e      	cmp	r2, #110	; 0x6e
 80119d4:	e7db      	b.n	801198e <_strtod_l+0x31e>
 80119d6:	498c      	ldr	r1, [pc, #560]	; (8011c08 <_strtod_l+0x598>)
 80119d8:	a817      	add	r0, sp, #92	; 0x5c
 80119da:	f001 fff5 	bl	80139c8 <__match>
 80119de:	2800      	cmp	r0, #0
 80119e0:	f43f aea7 	beq.w	8011732 <_strtod_l+0xc2>
 80119e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80119e6:	4989      	ldr	r1, [pc, #548]	; (8011c0c <_strtod_l+0x59c>)
 80119e8:	3b01      	subs	r3, #1
 80119ea:	a817      	add	r0, sp, #92	; 0x5c
 80119ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80119ee:	f001 ffeb 	bl	80139c8 <__match>
 80119f2:	b910      	cbnz	r0, 80119fa <_strtod_l+0x38a>
 80119f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80119f6:	3301      	adds	r3, #1
 80119f8:	9317      	str	r3, [sp, #92]	; 0x5c
 80119fa:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8011c20 <_strtod_l+0x5b0>
 80119fe:	f04f 0800 	mov.w	r8, #0
 8011a02:	e679      	b.n	80116f8 <_strtod_l+0x88>
 8011a04:	4882      	ldr	r0, [pc, #520]	; (8011c10 <_strtod_l+0x5a0>)
 8011a06:	f002 ff67 	bl	80148d8 <nan>
 8011a0a:	ed8d 0b04 	vstr	d0, [sp, #16]
 8011a0e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8011a12:	e671      	b.n	80116f8 <_strtod_l+0x88>
 8011a14:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8011a18:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011a1c:	eba5 020b 	sub.w	r2, r5, fp
 8011a20:	2e00      	cmp	r6, #0
 8011a22:	bf08      	it	eq
 8011a24:	461e      	moveq	r6, r3
 8011a26:	2b10      	cmp	r3, #16
 8011a28:	ed8d 7b08 	vstr	d7, [sp, #32]
 8011a2c:	9206      	str	r2, [sp, #24]
 8011a2e:	461a      	mov	r2, r3
 8011a30:	bfa8      	it	ge
 8011a32:	2210      	movge	r2, #16
 8011a34:	2b09      	cmp	r3, #9
 8011a36:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8011a3a:	dd0e      	ble.n	8011a5a <_strtod_l+0x3ea>
 8011a3c:	4975      	ldr	r1, [pc, #468]	; (8011c14 <_strtod_l+0x5a4>)
 8011a3e:	eddd 7a04 	vldr	s15, [sp, #16]
 8011a42:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8011a46:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8011a4a:	ed9d 5b08 	vldr	d5, [sp, #32]
 8011a4e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011a52:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011a56:	ec59 8b17 	vmov	r8, r9, d7
 8011a5a:	2b0f      	cmp	r3, #15
 8011a5c:	dc37      	bgt.n	8011ace <_strtod_l+0x45e>
 8011a5e:	9906      	ldr	r1, [sp, #24]
 8011a60:	2900      	cmp	r1, #0
 8011a62:	f43f ae49 	beq.w	80116f8 <_strtod_l+0x88>
 8011a66:	dd23      	ble.n	8011ab0 <_strtod_l+0x440>
 8011a68:	2916      	cmp	r1, #22
 8011a6a:	dc0b      	bgt.n	8011a84 <_strtod_l+0x414>
 8011a6c:	4b69      	ldr	r3, [pc, #420]	; (8011c14 <_strtod_l+0x5a4>)
 8011a6e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8011a72:	ed93 7b00 	vldr	d7, [r3]
 8011a76:	ec49 8b16 	vmov	d6, r8, r9
 8011a7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011a7e:	ec59 8b17 	vmov	r8, r9, d7
 8011a82:	e639      	b.n	80116f8 <_strtod_l+0x88>
 8011a84:	9806      	ldr	r0, [sp, #24]
 8011a86:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8011a8a:	4281      	cmp	r1, r0
 8011a8c:	db1f      	blt.n	8011ace <_strtod_l+0x45e>
 8011a8e:	4a61      	ldr	r2, [pc, #388]	; (8011c14 <_strtod_l+0x5a4>)
 8011a90:	f1c3 030f 	rsb	r3, r3, #15
 8011a94:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8011a98:	ed91 7b00 	vldr	d7, [r1]
 8011a9c:	ec49 8b16 	vmov	d6, r8, r9
 8011aa0:	1ac3      	subs	r3, r0, r3
 8011aa2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011aa6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011aaa:	ed92 6b00 	vldr	d6, [r2]
 8011aae:	e7e4      	b.n	8011a7a <_strtod_l+0x40a>
 8011ab0:	9906      	ldr	r1, [sp, #24]
 8011ab2:	3116      	adds	r1, #22
 8011ab4:	db0b      	blt.n	8011ace <_strtod_l+0x45e>
 8011ab6:	4b57      	ldr	r3, [pc, #348]	; (8011c14 <_strtod_l+0x5a4>)
 8011ab8:	ebab 0505 	sub.w	r5, fp, r5
 8011abc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011ac0:	ed95 7b00 	vldr	d7, [r5]
 8011ac4:	ec49 8b16 	vmov	d6, r8, r9
 8011ac8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011acc:	e7d7      	b.n	8011a7e <_strtod_l+0x40e>
 8011ace:	9906      	ldr	r1, [sp, #24]
 8011ad0:	1a9a      	subs	r2, r3, r2
 8011ad2:	440a      	add	r2, r1
 8011ad4:	2a00      	cmp	r2, #0
 8011ad6:	dd74      	ble.n	8011bc2 <_strtod_l+0x552>
 8011ad8:	f012 000f 	ands.w	r0, r2, #15
 8011adc:	d00a      	beq.n	8011af4 <_strtod_l+0x484>
 8011ade:	494d      	ldr	r1, [pc, #308]	; (8011c14 <_strtod_l+0x5a4>)
 8011ae0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011ae4:	ed91 7b00 	vldr	d7, [r1]
 8011ae8:	ec49 8b16 	vmov	d6, r8, r9
 8011aec:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011af0:	ec59 8b17 	vmov	r8, r9, d7
 8011af4:	f032 020f 	bics.w	r2, r2, #15
 8011af8:	d04f      	beq.n	8011b9a <_strtod_l+0x52a>
 8011afa:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8011afe:	dd22      	ble.n	8011b46 <_strtod_l+0x4d6>
 8011b00:	2500      	movs	r5, #0
 8011b02:	462e      	mov	r6, r5
 8011b04:	950a      	str	r5, [sp, #40]	; 0x28
 8011b06:	462f      	mov	r7, r5
 8011b08:	2322      	movs	r3, #34	; 0x22
 8011b0a:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8011c20 <_strtod_l+0x5b0>
 8011b0e:	6023      	str	r3, [r4, #0]
 8011b10:	f04f 0800 	mov.w	r8, #0
 8011b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	f43f adee 	beq.w	80116f8 <_strtod_l+0x88>
 8011b1c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011b1e:	4620      	mov	r0, r4
 8011b20:	f002 f8cc 	bl	8013cbc <_Bfree>
 8011b24:	4639      	mov	r1, r7
 8011b26:	4620      	mov	r0, r4
 8011b28:	f002 f8c8 	bl	8013cbc <_Bfree>
 8011b2c:	4631      	mov	r1, r6
 8011b2e:	4620      	mov	r0, r4
 8011b30:	f002 f8c4 	bl	8013cbc <_Bfree>
 8011b34:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011b36:	4620      	mov	r0, r4
 8011b38:	f002 f8c0 	bl	8013cbc <_Bfree>
 8011b3c:	4629      	mov	r1, r5
 8011b3e:	4620      	mov	r0, r4
 8011b40:	f002 f8bc 	bl	8013cbc <_Bfree>
 8011b44:	e5d8      	b.n	80116f8 <_strtod_l+0x88>
 8011b46:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8011b4a:	2000      	movs	r0, #0
 8011b4c:	4f32      	ldr	r7, [pc, #200]	; (8011c18 <_strtod_l+0x5a8>)
 8011b4e:	1112      	asrs	r2, r2, #4
 8011b50:	4601      	mov	r1, r0
 8011b52:	2a01      	cmp	r2, #1
 8011b54:	dc24      	bgt.n	8011ba0 <_strtod_l+0x530>
 8011b56:	b108      	cbz	r0, 8011b5c <_strtod_l+0x4ec>
 8011b58:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8011b5c:	4a2e      	ldr	r2, [pc, #184]	; (8011c18 <_strtod_l+0x5a8>)
 8011b5e:	482f      	ldr	r0, [pc, #188]	; (8011c1c <_strtod_l+0x5ac>)
 8011b60:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8011b64:	ed91 7b00 	vldr	d7, [r1]
 8011b68:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8011b6c:	ec49 8b16 	vmov	d6, r8, r9
 8011b70:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011b74:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011b78:	9905      	ldr	r1, [sp, #20]
 8011b7a:	4a29      	ldr	r2, [pc, #164]	; (8011c20 <_strtod_l+0x5b0>)
 8011b7c:	400a      	ands	r2, r1
 8011b7e:	4282      	cmp	r2, r0
 8011b80:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8011b84:	d8bc      	bhi.n	8011b00 <_strtod_l+0x490>
 8011b86:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8011b8a:	4282      	cmp	r2, r0
 8011b8c:	bf86      	itte	hi
 8011b8e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8011c24 <_strtod_l+0x5b4>
 8011b92:	f04f 38ff 	movhi.w	r8, #4294967295
 8011b96:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	9204      	str	r2, [sp, #16]
 8011b9e:	e07f      	b.n	8011ca0 <_strtod_l+0x630>
 8011ba0:	f012 0f01 	tst.w	r2, #1
 8011ba4:	d00a      	beq.n	8011bbc <_strtod_l+0x54c>
 8011ba6:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8011baa:	ed90 7b00 	vldr	d7, [r0]
 8011bae:	ed9d 6b04 	vldr	d6, [sp, #16]
 8011bb2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011bb6:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011bba:	2001      	movs	r0, #1
 8011bbc:	3101      	adds	r1, #1
 8011bbe:	1052      	asrs	r2, r2, #1
 8011bc0:	e7c7      	b.n	8011b52 <_strtod_l+0x4e2>
 8011bc2:	d0ea      	beq.n	8011b9a <_strtod_l+0x52a>
 8011bc4:	4252      	negs	r2, r2
 8011bc6:	f012 000f 	ands.w	r0, r2, #15
 8011bca:	d00a      	beq.n	8011be2 <_strtod_l+0x572>
 8011bcc:	4911      	ldr	r1, [pc, #68]	; (8011c14 <_strtod_l+0x5a4>)
 8011bce:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011bd2:	ed91 7b00 	vldr	d7, [r1]
 8011bd6:	ec49 8b16 	vmov	d6, r8, r9
 8011bda:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011bde:	ec59 8b17 	vmov	r8, r9, d7
 8011be2:	1112      	asrs	r2, r2, #4
 8011be4:	d0d9      	beq.n	8011b9a <_strtod_l+0x52a>
 8011be6:	2a1f      	cmp	r2, #31
 8011be8:	dd1e      	ble.n	8011c28 <_strtod_l+0x5b8>
 8011bea:	2500      	movs	r5, #0
 8011bec:	462e      	mov	r6, r5
 8011bee:	950a      	str	r5, [sp, #40]	; 0x28
 8011bf0:	462f      	mov	r7, r5
 8011bf2:	2322      	movs	r3, #34	; 0x22
 8011bf4:	f04f 0800 	mov.w	r8, #0
 8011bf8:	f04f 0900 	mov.w	r9, #0
 8011bfc:	6023      	str	r3, [r4, #0]
 8011bfe:	e789      	b.n	8011b14 <_strtod_l+0x4a4>
 8011c00:	0801dcb6 	.word	0x0801dcb6
 8011c04:	0801dcf8 	.word	0x0801dcf8
 8011c08:	0801dcae 	.word	0x0801dcae
 8011c0c:	0801de3c 	.word	0x0801de3c
 8011c10:	0801dc92 	.word	0x0801dc92
 8011c14:	0801e038 	.word	0x0801e038
 8011c18:	0801e010 	.word	0x0801e010
 8011c1c:	7ca00000 	.word	0x7ca00000
 8011c20:	7ff00000 	.word	0x7ff00000
 8011c24:	7fefffff 	.word	0x7fefffff
 8011c28:	f012 0110 	ands.w	r1, r2, #16
 8011c2c:	bf18      	it	ne
 8011c2e:	216a      	movne	r1, #106	; 0x6a
 8011c30:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8011c34:	9104      	str	r1, [sp, #16]
 8011c36:	49c0      	ldr	r1, [pc, #768]	; (8011f38 <_strtod_l+0x8c8>)
 8011c38:	2000      	movs	r0, #0
 8011c3a:	07d7      	lsls	r7, r2, #31
 8011c3c:	d508      	bpl.n	8011c50 <_strtod_l+0x5e0>
 8011c3e:	ed9d 6b08 	vldr	d6, [sp, #32]
 8011c42:	ed91 7b00 	vldr	d7, [r1]
 8011c46:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011c4a:	ed8d 7b08 	vstr	d7, [sp, #32]
 8011c4e:	2001      	movs	r0, #1
 8011c50:	1052      	asrs	r2, r2, #1
 8011c52:	f101 0108 	add.w	r1, r1, #8
 8011c56:	d1f0      	bne.n	8011c3a <_strtod_l+0x5ca>
 8011c58:	b108      	cbz	r0, 8011c5e <_strtod_l+0x5ee>
 8011c5a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8011c5e:	9a04      	ldr	r2, [sp, #16]
 8011c60:	b1ba      	cbz	r2, 8011c92 <_strtod_l+0x622>
 8011c62:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8011c66:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8011c6a:	2a00      	cmp	r2, #0
 8011c6c:	4649      	mov	r1, r9
 8011c6e:	dd10      	ble.n	8011c92 <_strtod_l+0x622>
 8011c70:	2a1f      	cmp	r2, #31
 8011c72:	f340 8132 	ble.w	8011eda <_strtod_l+0x86a>
 8011c76:	2a34      	cmp	r2, #52	; 0x34
 8011c78:	bfde      	ittt	le
 8011c7a:	3a20      	suble	r2, #32
 8011c7c:	f04f 30ff 	movle.w	r0, #4294967295
 8011c80:	fa00 f202 	lslle.w	r2, r0, r2
 8011c84:	f04f 0800 	mov.w	r8, #0
 8011c88:	bfcc      	ite	gt
 8011c8a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8011c8e:	ea02 0901 	andle.w	r9, r2, r1
 8011c92:	ec49 8b17 	vmov	d7, r8, r9
 8011c96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c9e:	d0a4      	beq.n	8011bea <_strtod_l+0x57a>
 8011ca0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011ca2:	9200      	str	r2, [sp, #0]
 8011ca4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011ca6:	4632      	mov	r2, r6
 8011ca8:	4620      	mov	r0, r4
 8011caa:	f002 f873 	bl	8013d94 <__s2b>
 8011cae:	900a      	str	r0, [sp, #40]	; 0x28
 8011cb0:	2800      	cmp	r0, #0
 8011cb2:	f43f af25 	beq.w	8011b00 <_strtod_l+0x490>
 8011cb6:	9b06      	ldr	r3, [sp, #24]
 8011cb8:	ebab 0505 	sub.w	r5, fp, r5
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	bfb4      	ite	lt
 8011cc0:	462b      	movlt	r3, r5
 8011cc2:	2300      	movge	r3, #0
 8011cc4:	930c      	str	r3, [sp, #48]	; 0x30
 8011cc6:	9b06      	ldr	r3, [sp, #24]
 8011cc8:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8011f20 <_strtod_l+0x8b0>
 8011ccc:	ed9f ab96 	vldr	d10, [pc, #600]	; 8011f28 <_strtod_l+0x8b8>
 8011cd0:	ed9f bb97 	vldr	d11, [pc, #604]	; 8011f30 <_strtod_l+0x8c0>
 8011cd4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011cd8:	2500      	movs	r5, #0
 8011cda:	9312      	str	r3, [sp, #72]	; 0x48
 8011cdc:	462e      	mov	r6, r5
 8011cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ce0:	4620      	mov	r0, r4
 8011ce2:	6859      	ldr	r1, [r3, #4]
 8011ce4:	f001 ffaa 	bl	8013c3c <_Balloc>
 8011ce8:	4607      	mov	r7, r0
 8011cea:	2800      	cmp	r0, #0
 8011cec:	f43f af0c 	beq.w	8011b08 <_strtod_l+0x498>
 8011cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cf2:	691a      	ldr	r2, [r3, #16]
 8011cf4:	3202      	adds	r2, #2
 8011cf6:	f103 010c 	add.w	r1, r3, #12
 8011cfa:	0092      	lsls	r2, r2, #2
 8011cfc:	300c      	adds	r0, #12
 8011cfe:	f7fe fb01 	bl	8010304 <memcpy>
 8011d02:	ec49 8b10 	vmov	d0, r8, r9
 8011d06:	aa1a      	add	r2, sp, #104	; 0x68
 8011d08:	a919      	add	r1, sp, #100	; 0x64
 8011d0a:	4620      	mov	r0, r4
 8011d0c:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8011d10:	f002 fb7c 	bl	801440c <__d2b>
 8011d14:	9018      	str	r0, [sp, #96]	; 0x60
 8011d16:	2800      	cmp	r0, #0
 8011d18:	f43f aef6 	beq.w	8011b08 <_strtod_l+0x498>
 8011d1c:	2101      	movs	r1, #1
 8011d1e:	4620      	mov	r0, r4
 8011d20:	f002 f8d2 	bl	8013ec8 <__i2b>
 8011d24:	4606      	mov	r6, r0
 8011d26:	2800      	cmp	r0, #0
 8011d28:	f43f aeee 	beq.w	8011b08 <_strtod_l+0x498>
 8011d2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011d2e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	bfab      	itete	ge
 8011d34:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8011d36:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8011d38:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8011d3c:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8011d40:	bfac      	ite	ge
 8011d42:	eb03 0b02 	addge.w	fp, r3, r2
 8011d46:	eba2 0a03 	sublt.w	sl, r2, r3
 8011d4a:	9a04      	ldr	r2, [sp, #16]
 8011d4c:	1a9b      	subs	r3, r3, r2
 8011d4e:	440b      	add	r3, r1
 8011d50:	4a7a      	ldr	r2, [pc, #488]	; (8011f3c <_strtod_l+0x8cc>)
 8011d52:	3b01      	subs	r3, #1
 8011d54:	4293      	cmp	r3, r2
 8011d56:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8011d5a:	f280 80d1 	bge.w	8011f00 <_strtod_l+0x890>
 8011d5e:	1ad2      	subs	r2, r2, r3
 8011d60:	2a1f      	cmp	r2, #31
 8011d62:	eba1 0102 	sub.w	r1, r1, r2
 8011d66:	f04f 0001 	mov.w	r0, #1
 8011d6a:	f300 80bd 	bgt.w	8011ee8 <_strtod_l+0x878>
 8011d6e:	fa00 f302 	lsl.w	r3, r0, r2
 8011d72:	930e      	str	r3, [sp, #56]	; 0x38
 8011d74:	2300      	movs	r3, #0
 8011d76:	930d      	str	r3, [sp, #52]	; 0x34
 8011d78:	eb0b 0301 	add.w	r3, fp, r1
 8011d7c:	9a04      	ldr	r2, [sp, #16]
 8011d7e:	459b      	cmp	fp, r3
 8011d80:	448a      	add	sl, r1
 8011d82:	4492      	add	sl, r2
 8011d84:	465a      	mov	r2, fp
 8011d86:	bfa8      	it	ge
 8011d88:	461a      	movge	r2, r3
 8011d8a:	4552      	cmp	r2, sl
 8011d8c:	bfa8      	it	ge
 8011d8e:	4652      	movge	r2, sl
 8011d90:	2a00      	cmp	r2, #0
 8011d92:	bfc2      	ittt	gt
 8011d94:	1a9b      	subgt	r3, r3, r2
 8011d96:	ebaa 0a02 	subgt.w	sl, sl, r2
 8011d9a:	ebab 0b02 	subgt.w	fp, fp, r2
 8011d9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011da0:	2a00      	cmp	r2, #0
 8011da2:	dd18      	ble.n	8011dd6 <_strtod_l+0x766>
 8011da4:	4631      	mov	r1, r6
 8011da6:	4620      	mov	r0, r4
 8011da8:	9315      	str	r3, [sp, #84]	; 0x54
 8011daa:	f002 f949 	bl	8014040 <__pow5mult>
 8011dae:	4606      	mov	r6, r0
 8011db0:	2800      	cmp	r0, #0
 8011db2:	f43f aea9 	beq.w	8011b08 <_strtod_l+0x498>
 8011db6:	4601      	mov	r1, r0
 8011db8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011dba:	4620      	mov	r0, r4
 8011dbc:	f002 f89a 	bl	8013ef4 <__multiply>
 8011dc0:	9014      	str	r0, [sp, #80]	; 0x50
 8011dc2:	2800      	cmp	r0, #0
 8011dc4:	f43f aea0 	beq.w	8011b08 <_strtod_l+0x498>
 8011dc8:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011dca:	4620      	mov	r0, r4
 8011dcc:	f001 ff76 	bl	8013cbc <_Bfree>
 8011dd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011dd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011dd4:	9218      	str	r2, [sp, #96]	; 0x60
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	f300 8097 	bgt.w	8011f0a <_strtod_l+0x89a>
 8011ddc:	9b06      	ldr	r3, [sp, #24]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	dd08      	ble.n	8011df4 <_strtod_l+0x784>
 8011de2:	4639      	mov	r1, r7
 8011de4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011de6:	4620      	mov	r0, r4
 8011de8:	f002 f92a 	bl	8014040 <__pow5mult>
 8011dec:	4607      	mov	r7, r0
 8011dee:	2800      	cmp	r0, #0
 8011df0:	f43f ae8a 	beq.w	8011b08 <_strtod_l+0x498>
 8011df4:	f1ba 0f00 	cmp.w	sl, #0
 8011df8:	dd08      	ble.n	8011e0c <_strtod_l+0x79c>
 8011dfa:	4639      	mov	r1, r7
 8011dfc:	4652      	mov	r2, sl
 8011dfe:	4620      	mov	r0, r4
 8011e00:	f002 f978 	bl	80140f4 <__lshift>
 8011e04:	4607      	mov	r7, r0
 8011e06:	2800      	cmp	r0, #0
 8011e08:	f43f ae7e 	beq.w	8011b08 <_strtod_l+0x498>
 8011e0c:	f1bb 0f00 	cmp.w	fp, #0
 8011e10:	dd08      	ble.n	8011e24 <_strtod_l+0x7b4>
 8011e12:	4631      	mov	r1, r6
 8011e14:	465a      	mov	r2, fp
 8011e16:	4620      	mov	r0, r4
 8011e18:	f002 f96c 	bl	80140f4 <__lshift>
 8011e1c:	4606      	mov	r6, r0
 8011e1e:	2800      	cmp	r0, #0
 8011e20:	f43f ae72 	beq.w	8011b08 <_strtod_l+0x498>
 8011e24:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011e26:	463a      	mov	r2, r7
 8011e28:	4620      	mov	r0, r4
 8011e2a:	f002 f9eb 	bl	8014204 <__mdiff>
 8011e2e:	4605      	mov	r5, r0
 8011e30:	2800      	cmp	r0, #0
 8011e32:	f43f ae69 	beq.w	8011b08 <_strtod_l+0x498>
 8011e36:	2300      	movs	r3, #0
 8011e38:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8011e3c:	60c3      	str	r3, [r0, #12]
 8011e3e:	4631      	mov	r1, r6
 8011e40:	f002 f9c4 	bl	80141cc <__mcmp>
 8011e44:	2800      	cmp	r0, #0
 8011e46:	da7f      	bge.n	8011f48 <_strtod_l+0x8d8>
 8011e48:	ea5a 0308 	orrs.w	r3, sl, r8
 8011e4c:	f040 80a5 	bne.w	8011f9a <_strtod_l+0x92a>
 8011e50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	f040 80a0 	bne.w	8011f9a <_strtod_l+0x92a>
 8011e5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011e5e:	0d1b      	lsrs	r3, r3, #20
 8011e60:	051b      	lsls	r3, r3, #20
 8011e62:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011e66:	f240 8098 	bls.w	8011f9a <_strtod_l+0x92a>
 8011e6a:	696b      	ldr	r3, [r5, #20]
 8011e6c:	b91b      	cbnz	r3, 8011e76 <_strtod_l+0x806>
 8011e6e:	692b      	ldr	r3, [r5, #16]
 8011e70:	2b01      	cmp	r3, #1
 8011e72:	f340 8092 	ble.w	8011f9a <_strtod_l+0x92a>
 8011e76:	4629      	mov	r1, r5
 8011e78:	2201      	movs	r2, #1
 8011e7a:	4620      	mov	r0, r4
 8011e7c:	f002 f93a 	bl	80140f4 <__lshift>
 8011e80:	4631      	mov	r1, r6
 8011e82:	4605      	mov	r5, r0
 8011e84:	f002 f9a2 	bl	80141cc <__mcmp>
 8011e88:	2800      	cmp	r0, #0
 8011e8a:	f340 8086 	ble.w	8011f9a <_strtod_l+0x92a>
 8011e8e:	9904      	ldr	r1, [sp, #16]
 8011e90:	4a2b      	ldr	r2, [pc, #172]	; (8011f40 <_strtod_l+0x8d0>)
 8011e92:	464b      	mov	r3, r9
 8011e94:	2900      	cmp	r1, #0
 8011e96:	f000 80a1 	beq.w	8011fdc <_strtod_l+0x96c>
 8011e9a:	ea02 0109 	and.w	r1, r2, r9
 8011e9e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011ea2:	f300 809b 	bgt.w	8011fdc <_strtod_l+0x96c>
 8011ea6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011eaa:	f77f aea2 	ble.w	8011bf2 <_strtod_l+0x582>
 8011eae:	4a25      	ldr	r2, [pc, #148]	; (8011f44 <_strtod_l+0x8d4>)
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8011eb6:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8011eba:	ec49 8b17 	vmov	d7, r8, r9
 8011ebe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011ec2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011ec6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8011eca:	4313      	orrs	r3, r2
 8011ecc:	bf08      	it	eq
 8011ece:	2322      	moveq	r3, #34	; 0x22
 8011ed0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8011ed4:	bf08      	it	eq
 8011ed6:	6023      	streq	r3, [r4, #0]
 8011ed8:	e620      	b.n	8011b1c <_strtod_l+0x4ac>
 8011eda:	f04f 31ff 	mov.w	r1, #4294967295
 8011ede:	fa01 f202 	lsl.w	r2, r1, r2
 8011ee2:	ea02 0808 	and.w	r8, r2, r8
 8011ee6:	e6d4      	b.n	8011c92 <_strtod_l+0x622>
 8011ee8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8011eec:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8011ef0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8011ef4:	33e2      	adds	r3, #226	; 0xe2
 8011ef6:	fa00 f303 	lsl.w	r3, r0, r3
 8011efa:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8011efe:	e73b      	b.n	8011d78 <_strtod_l+0x708>
 8011f00:	2000      	movs	r0, #0
 8011f02:	2301      	movs	r3, #1
 8011f04:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8011f08:	e736      	b.n	8011d78 <_strtod_l+0x708>
 8011f0a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011f0c:	461a      	mov	r2, r3
 8011f0e:	4620      	mov	r0, r4
 8011f10:	f002 f8f0 	bl	80140f4 <__lshift>
 8011f14:	9018      	str	r0, [sp, #96]	; 0x60
 8011f16:	2800      	cmp	r0, #0
 8011f18:	f47f af60 	bne.w	8011ddc <_strtod_l+0x76c>
 8011f1c:	e5f4      	b.n	8011b08 <_strtod_l+0x498>
 8011f1e:	bf00      	nop
 8011f20:	94a03595 	.word	0x94a03595
 8011f24:	3fcfffff 	.word	0x3fcfffff
 8011f28:	94a03595 	.word	0x94a03595
 8011f2c:	3fdfffff 	.word	0x3fdfffff
 8011f30:	35afe535 	.word	0x35afe535
 8011f34:	3fe00000 	.word	0x3fe00000
 8011f38:	0801dd10 	.word	0x0801dd10
 8011f3c:	fffffc02 	.word	0xfffffc02
 8011f40:	7ff00000 	.word	0x7ff00000
 8011f44:	39500000 	.word	0x39500000
 8011f48:	46cb      	mov	fp, r9
 8011f4a:	d165      	bne.n	8012018 <_strtod_l+0x9a8>
 8011f4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011f50:	f1ba 0f00 	cmp.w	sl, #0
 8011f54:	d02a      	beq.n	8011fac <_strtod_l+0x93c>
 8011f56:	4aaa      	ldr	r2, [pc, #680]	; (8012200 <_strtod_l+0xb90>)
 8011f58:	4293      	cmp	r3, r2
 8011f5a:	d12b      	bne.n	8011fb4 <_strtod_l+0x944>
 8011f5c:	9b04      	ldr	r3, [sp, #16]
 8011f5e:	4641      	mov	r1, r8
 8011f60:	b1fb      	cbz	r3, 8011fa2 <_strtod_l+0x932>
 8011f62:	4aa8      	ldr	r2, [pc, #672]	; (8012204 <_strtod_l+0xb94>)
 8011f64:	ea09 0202 	and.w	r2, r9, r2
 8011f68:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8011f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8011f70:	d81a      	bhi.n	8011fa8 <_strtod_l+0x938>
 8011f72:	0d12      	lsrs	r2, r2, #20
 8011f74:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011f78:	fa00 f303 	lsl.w	r3, r0, r3
 8011f7c:	4299      	cmp	r1, r3
 8011f7e:	d119      	bne.n	8011fb4 <_strtod_l+0x944>
 8011f80:	4ba1      	ldr	r3, [pc, #644]	; (8012208 <_strtod_l+0xb98>)
 8011f82:	459b      	cmp	fp, r3
 8011f84:	d102      	bne.n	8011f8c <_strtod_l+0x91c>
 8011f86:	3101      	adds	r1, #1
 8011f88:	f43f adbe 	beq.w	8011b08 <_strtod_l+0x498>
 8011f8c:	4b9d      	ldr	r3, [pc, #628]	; (8012204 <_strtod_l+0xb94>)
 8011f8e:	ea0b 0303 	and.w	r3, fp, r3
 8011f92:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8011f96:	f04f 0800 	mov.w	r8, #0
 8011f9a:	9b04      	ldr	r3, [sp, #16]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d186      	bne.n	8011eae <_strtod_l+0x83e>
 8011fa0:	e5bc      	b.n	8011b1c <_strtod_l+0x4ac>
 8011fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8011fa6:	e7e9      	b.n	8011f7c <_strtod_l+0x90c>
 8011fa8:	4603      	mov	r3, r0
 8011faa:	e7e7      	b.n	8011f7c <_strtod_l+0x90c>
 8011fac:	ea53 0308 	orrs.w	r3, r3, r8
 8011fb0:	f43f af6d 	beq.w	8011e8e <_strtod_l+0x81e>
 8011fb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011fb6:	b1db      	cbz	r3, 8011ff0 <_strtod_l+0x980>
 8011fb8:	ea13 0f0b 	tst.w	r3, fp
 8011fbc:	d0ed      	beq.n	8011f9a <_strtod_l+0x92a>
 8011fbe:	9a04      	ldr	r2, [sp, #16]
 8011fc0:	4640      	mov	r0, r8
 8011fc2:	4649      	mov	r1, r9
 8011fc4:	f1ba 0f00 	cmp.w	sl, #0
 8011fc8:	d016      	beq.n	8011ff8 <_strtod_l+0x988>
 8011fca:	f7ff fb34 	bl	8011636 <sulp>
 8011fce:	ed9d 7b08 	vldr	d7, [sp, #32]
 8011fd2:	ee37 7b00 	vadd.f64	d7, d7, d0
 8011fd6:	ec59 8b17 	vmov	r8, r9, d7
 8011fda:	e7de      	b.n	8011f9a <_strtod_l+0x92a>
 8011fdc:	4013      	ands	r3, r2
 8011fde:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011fe2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8011fe6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8011fea:	f04f 38ff 	mov.w	r8, #4294967295
 8011fee:	e7d4      	b.n	8011f9a <_strtod_l+0x92a>
 8011ff0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011ff2:	ea13 0f08 	tst.w	r3, r8
 8011ff6:	e7e1      	b.n	8011fbc <_strtod_l+0x94c>
 8011ff8:	f7ff fb1d 	bl	8011636 <sulp>
 8011ffc:	ed9d 7b08 	vldr	d7, [sp, #32]
 8012000:	ee37 7b40 	vsub.f64	d7, d7, d0
 8012004:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012008:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801200c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012010:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8012014:	d1c1      	bne.n	8011f9a <_strtod_l+0x92a>
 8012016:	e5ec      	b.n	8011bf2 <_strtod_l+0x582>
 8012018:	4631      	mov	r1, r6
 801201a:	4628      	mov	r0, r5
 801201c:	f002 fa52 	bl	80144c4 <__ratio>
 8012020:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8012024:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8012028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801202c:	d867      	bhi.n	80120fe <_strtod_l+0xa8e>
 801202e:	f1ba 0f00 	cmp.w	sl, #0
 8012032:	d044      	beq.n	80120be <_strtod_l+0xa4e>
 8012034:	4b75      	ldr	r3, [pc, #468]	; (801220c <_strtod_l+0xb9c>)
 8012036:	2200      	movs	r2, #0
 8012038:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 801203c:	4971      	ldr	r1, [pc, #452]	; (8012204 <_strtod_l+0xb94>)
 801203e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8012218 <_strtod_l+0xba8>
 8012042:	ea0b 0001 	and.w	r0, fp, r1
 8012046:	4560      	cmp	r0, ip
 8012048:	900d      	str	r0, [sp, #52]	; 0x34
 801204a:	f040 808b 	bne.w	8012164 <_strtod_l+0xaf4>
 801204e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012052:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8012056:	ec49 8b10 	vmov	d0, r8, r9
 801205a:	ec43 2b1c 	vmov	d12, r2, r3
 801205e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012062:	f002 f957 	bl	8014314 <__ulp>
 8012066:	ec49 8b1d 	vmov	d13, r8, r9
 801206a:	eeac db00 	vfma.f64	d13, d12, d0
 801206e:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8012072:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012074:	4963      	ldr	r1, [pc, #396]	; (8012204 <_strtod_l+0xb94>)
 8012076:	4a66      	ldr	r2, [pc, #408]	; (8012210 <_strtod_l+0xba0>)
 8012078:	4019      	ands	r1, r3
 801207a:	4291      	cmp	r1, r2
 801207c:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8012080:	d947      	bls.n	8012112 <_strtod_l+0xaa2>
 8012082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012084:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012088:	4293      	cmp	r3, r2
 801208a:	d103      	bne.n	8012094 <_strtod_l+0xa24>
 801208c:	9b08      	ldr	r3, [sp, #32]
 801208e:	3301      	adds	r3, #1
 8012090:	f43f ad3a 	beq.w	8011b08 <_strtod_l+0x498>
 8012094:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8012208 <_strtod_l+0xb98>
 8012098:	f04f 38ff 	mov.w	r8, #4294967295
 801209c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801209e:	4620      	mov	r0, r4
 80120a0:	f001 fe0c 	bl	8013cbc <_Bfree>
 80120a4:	4639      	mov	r1, r7
 80120a6:	4620      	mov	r0, r4
 80120a8:	f001 fe08 	bl	8013cbc <_Bfree>
 80120ac:	4631      	mov	r1, r6
 80120ae:	4620      	mov	r0, r4
 80120b0:	f001 fe04 	bl	8013cbc <_Bfree>
 80120b4:	4629      	mov	r1, r5
 80120b6:	4620      	mov	r0, r4
 80120b8:	f001 fe00 	bl	8013cbc <_Bfree>
 80120bc:	e60f      	b.n	8011cde <_strtod_l+0x66e>
 80120be:	f1b8 0f00 	cmp.w	r8, #0
 80120c2:	d112      	bne.n	80120ea <_strtod_l+0xa7a>
 80120c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80120c8:	b9b3      	cbnz	r3, 80120f8 <_strtod_l+0xa88>
 80120ca:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80120ce:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80120d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120d6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80120da:	d401      	bmi.n	80120e0 <_strtod_l+0xa70>
 80120dc:	ee20 8b08 	vmul.f64	d8, d0, d8
 80120e0:	eeb1 7b48 	vneg.f64	d7, d8
 80120e4:	ec53 2b17 	vmov	r2, r3, d7
 80120e8:	e7a8      	b.n	801203c <_strtod_l+0x9cc>
 80120ea:	f1b8 0f01 	cmp.w	r8, #1
 80120ee:	d103      	bne.n	80120f8 <_strtod_l+0xa88>
 80120f0:	f1b9 0f00 	cmp.w	r9, #0
 80120f4:	f43f ad7d 	beq.w	8011bf2 <_strtod_l+0x582>
 80120f8:	4b46      	ldr	r3, [pc, #280]	; (8012214 <_strtod_l+0xba4>)
 80120fa:	2200      	movs	r2, #0
 80120fc:	e79c      	b.n	8012038 <_strtod_l+0x9c8>
 80120fe:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8012102:	ee20 8b08 	vmul.f64	d8, d0, d8
 8012106:	f1ba 0f00 	cmp.w	sl, #0
 801210a:	d0e9      	beq.n	80120e0 <_strtod_l+0xa70>
 801210c:	ec53 2b18 	vmov	r2, r3, d8
 8012110:	e794      	b.n	801203c <_strtod_l+0x9cc>
 8012112:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8012116:	9b04      	ldr	r3, [sp, #16]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d1bf      	bne.n	801209c <_strtod_l+0xa2c>
 801211c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012120:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012122:	0d1b      	lsrs	r3, r3, #20
 8012124:	051b      	lsls	r3, r3, #20
 8012126:	429a      	cmp	r2, r3
 8012128:	d1b8      	bne.n	801209c <_strtod_l+0xa2c>
 801212a:	ec51 0b18 	vmov	r0, r1, d8
 801212e:	f7ee fb13 	bl	8000758 <__aeabi_d2lz>
 8012132:	f7ee facb 	bl	80006cc <__aeabi_l2d>
 8012136:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801213a:	ec41 0b17 	vmov	d7, r0, r1
 801213e:	ea43 0308 	orr.w	r3, r3, r8
 8012142:	ea53 030a 	orrs.w	r3, r3, sl
 8012146:	ee38 8b47 	vsub.f64	d8, d8, d7
 801214a:	d03e      	beq.n	80121ca <_strtod_l+0xb5a>
 801214c:	eeb4 8bca 	vcmpe.f64	d8, d10
 8012150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012154:	f53f ace2 	bmi.w	8011b1c <_strtod_l+0x4ac>
 8012158:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801215c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012160:	dd9c      	ble.n	801209c <_strtod_l+0xa2c>
 8012162:	e4db      	b.n	8011b1c <_strtod_l+0x4ac>
 8012164:	9904      	ldr	r1, [sp, #16]
 8012166:	b301      	cbz	r1, 80121aa <_strtod_l+0xb3a>
 8012168:	990d      	ldr	r1, [sp, #52]	; 0x34
 801216a:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801216e:	d81c      	bhi.n	80121aa <_strtod_l+0xb3a>
 8012170:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80121f8 <_strtod_l+0xb88>
 8012174:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801217c:	d811      	bhi.n	80121a2 <_strtod_l+0xb32>
 801217e:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8012182:	ee18 3a10 	vmov	r3, s16
 8012186:	2b01      	cmp	r3, #1
 8012188:	bf38      	it	cc
 801218a:	2301      	movcc	r3, #1
 801218c:	ee08 3a10 	vmov	s16, r3
 8012190:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8012194:	f1ba 0f00 	cmp.w	sl, #0
 8012198:	d114      	bne.n	80121c4 <_strtod_l+0xb54>
 801219a:	eeb1 7b48 	vneg.f64	d7, d8
 801219e:	ec53 2b17 	vmov	r2, r3, d7
 80121a2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80121a4:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 80121a8:	1a0b      	subs	r3, r1, r0
 80121aa:	ed9d 0b08 	vldr	d0, [sp, #32]
 80121ae:	ec43 2b1c 	vmov	d12, r2, r3
 80121b2:	f002 f8af 	bl	8014314 <__ulp>
 80121b6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80121ba:	eeac 7b00 	vfma.f64	d7, d12, d0
 80121be:	ec59 8b17 	vmov	r8, r9, d7
 80121c2:	e7a8      	b.n	8012116 <_strtod_l+0xaa6>
 80121c4:	ec53 2b18 	vmov	r2, r3, d8
 80121c8:	e7eb      	b.n	80121a2 <_strtod_l+0xb32>
 80121ca:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80121ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121d2:	f57f af63 	bpl.w	801209c <_strtod_l+0xa2c>
 80121d6:	e4a1      	b.n	8011b1c <_strtod_l+0x4ac>
 80121d8:	2300      	movs	r3, #0
 80121da:	930b      	str	r3, [sp, #44]	; 0x2c
 80121dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80121de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80121e0:	6013      	str	r3, [r2, #0]
 80121e2:	f7ff ba8d 	b.w	8011700 <_strtod_l+0x90>
 80121e6:	2a65      	cmp	r2, #101	; 0x65
 80121e8:	f43f ab89 	beq.w	80118fe <_strtod_l+0x28e>
 80121ec:	2a45      	cmp	r2, #69	; 0x45
 80121ee:	f43f ab86 	beq.w	80118fe <_strtod_l+0x28e>
 80121f2:	2101      	movs	r1, #1
 80121f4:	f7ff bbbe 	b.w	8011974 <_strtod_l+0x304>
 80121f8:	ffc00000 	.word	0xffc00000
 80121fc:	41dfffff 	.word	0x41dfffff
 8012200:	000fffff 	.word	0x000fffff
 8012204:	7ff00000 	.word	0x7ff00000
 8012208:	7fefffff 	.word	0x7fefffff
 801220c:	3ff00000 	.word	0x3ff00000
 8012210:	7c9fffff 	.word	0x7c9fffff
 8012214:	bff00000 	.word	0xbff00000
 8012218:	7fe00000 	.word	0x7fe00000

0801221c <_strtod_r>:
 801221c:	4b01      	ldr	r3, [pc, #4]	; (8012224 <_strtod_r+0x8>)
 801221e:	f7ff ba27 	b.w	8011670 <_strtod_l>
 8012222:	bf00      	nop
 8012224:	2400a158 	.word	0x2400a158

08012228 <_strtol_l.isra.0>:
 8012228:	2b01      	cmp	r3, #1
 801222a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801222e:	d001      	beq.n	8012234 <_strtol_l.isra.0+0xc>
 8012230:	2b24      	cmp	r3, #36	; 0x24
 8012232:	d906      	bls.n	8012242 <_strtol_l.isra.0+0x1a>
 8012234:	f7fe f81a 	bl	801026c <__errno>
 8012238:	2316      	movs	r3, #22
 801223a:	6003      	str	r3, [r0, #0]
 801223c:	2000      	movs	r0, #0
 801223e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012242:	4f3a      	ldr	r7, [pc, #232]	; (801232c <_strtol_l.isra.0+0x104>)
 8012244:	468e      	mov	lr, r1
 8012246:	4676      	mov	r6, lr
 8012248:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801224c:	5de5      	ldrb	r5, [r4, r7]
 801224e:	f015 0508 	ands.w	r5, r5, #8
 8012252:	d1f8      	bne.n	8012246 <_strtol_l.isra.0+0x1e>
 8012254:	2c2d      	cmp	r4, #45	; 0x2d
 8012256:	d134      	bne.n	80122c2 <_strtol_l.isra.0+0x9a>
 8012258:	f89e 4000 	ldrb.w	r4, [lr]
 801225c:	f04f 0801 	mov.w	r8, #1
 8012260:	f106 0e02 	add.w	lr, r6, #2
 8012264:	2b00      	cmp	r3, #0
 8012266:	d05c      	beq.n	8012322 <_strtol_l.isra.0+0xfa>
 8012268:	2b10      	cmp	r3, #16
 801226a:	d10c      	bne.n	8012286 <_strtol_l.isra.0+0x5e>
 801226c:	2c30      	cmp	r4, #48	; 0x30
 801226e:	d10a      	bne.n	8012286 <_strtol_l.isra.0+0x5e>
 8012270:	f89e 4000 	ldrb.w	r4, [lr]
 8012274:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012278:	2c58      	cmp	r4, #88	; 0x58
 801227a:	d14d      	bne.n	8012318 <_strtol_l.isra.0+0xf0>
 801227c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8012280:	2310      	movs	r3, #16
 8012282:	f10e 0e02 	add.w	lr, lr, #2
 8012286:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801228a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801228e:	2600      	movs	r6, #0
 8012290:	fbbc f9f3 	udiv	r9, ip, r3
 8012294:	4635      	mov	r5, r6
 8012296:	fb03 ca19 	mls	sl, r3, r9, ip
 801229a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801229e:	2f09      	cmp	r7, #9
 80122a0:	d818      	bhi.n	80122d4 <_strtol_l.isra.0+0xac>
 80122a2:	463c      	mov	r4, r7
 80122a4:	42a3      	cmp	r3, r4
 80122a6:	dd24      	ble.n	80122f2 <_strtol_l.isra.0+0xca>
 80122a8:	2e00      	cmp	r6, #0
 80122aa:	db1f      	blt.n	80122ec <_strtol_l.isra.0+0xc4>
 80122ac:	45a9      	cmp	r9, r5
 80122ae:	d31d      	bcc.n	80122ec <_strtol_l.isra.0+0xc4>
 80122b0:	d101      	bne.n	80122b6 <_strtol_l.isra.0+0x8e>
 80122b2:	45a2      	cmp	sl, r4
 80122b4:	db1a      	blt.n	80122ec <_strtol_l.isra.0+0xc4>
 80122b6:	fb05 4503 	mla	r5, r5, r3, r4
 80122ba:	2601      	movs	r6, #1
 80122bc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80122c0:	e7eb      	b.n	801229a <_strtol_l.isra.0+0x72>
 80122c2:	2c2b      	cmp	r4, #43	; 0x2b
 80122c4:	bf08      	it	eq
 80122c6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80122ca:	46a8      	mov	r8, r5
 80122cc:	bf08      	it	eq
 80122ce:	f106 0e02 	addeq.w	lr, r6, #2
 80122d2:	e7c7      	b.n	8012264 <_strtol_l.isra.0+0x3c>
 80122d4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80122d8:	2f19      	cmp	r7, #25
 80122da:	d801      	bhi.n	80122e0 <_strtol_l.isra.0+0xb8>
 80122dc:	3c37      	subs	r4, #55	; 0x37
 80122de:	e7e1      	b.n	80122a4 <_strtol_l.isra.0+0x7c>
 80122e0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80122e4:	2f19      	cmp	r7, #25
 80122e6:	d804      	bhi.n	80122f2 <_strtol_l.isra.0+0xca>
 80122e8:	3c57      	subs	r4, #87	; 0x57
 80122ea:	e7db      	b.n	80122a4 <_strtol_l.isra.0+0x7c>
 80122ec:	f04f 36ff 	mov.w	r6, #4294967295
 80122f0:	e7e4      	b.n	80122bc <_strtol_l.isra.0+0x94>
 80122f2:	2e00      	cmp	r6, #0
 80122f4:	da05      	bge.n	8012302 <_strtol_l.isra.0+0xda>
 80122f6:	2322      	movs	r3, #34	; 0x22
 80122f8:	6003      	str	r3, [r0, #0]
 80122fa:	4665      	mov	r5, ip
 80122fc:	b942      	cbnz	r2, 8012310 <_strtol_l.isra.0+0xe8>
 80122fe:	4628      	mov	r0, r5
 8012300:	e79d      	b.n	801223e <_strtol_l.isra.0+0x16>
 8012302:	f1b8 0f00 	cmp.w	r8, #0
 8012306:	d000      	beq.n	801230a <_strtol_l.isra.0+0xe2>
 8012308:	426d      	negs	r5, r5
 801230a:	2a00      	cmp	r2, #0
 801230c:	d0f7      	beq.n	80122fe <_strtol_l.isra.0+0xd6>
 801230e:	b10e      	cbz	r6, 8012314 <_strtol_l.isra.0+0xec>
 8012310:	f10e 31ff 	add.w	r1, lr, #4294967295
 8012314:	6011      	str	r1, [r2, #0]
 8012316:	e7f2      	b.n	80122fe <_strtol_l.isra.0+0xd6>
 8012318:	2430      	movs	r4, #48	; 0x30
 801231a:	2b00      	cmp	r3, #0
 801231c:	d1b3      	bne.n	8012286 <_strtol_l.isra.0+0x5e>
 801231e:	2308      	movs	r3, #8
 8012320:	e7b1      	b.n	8012286 <_strtol_l.isra.0+0x5e>
 8012322:	2c30      	cmp	r4, #48	; 0x30
 8012324:	d0a4      	beq.n	8012270 <_strtol_l.isra.0+0x48>
 8012326:	230a      	movs	r3, #10
 8012328:	e7ad      	b.n	8012286 <_strtol_l.isra.0+0x5e>
 801232a:	bf00      	nop
 801232c:	0801dd39 	.word	0x0801dd39

08012330 <_strtol_r>:
 8012330:	f7ff bf7a 	b.w	8012228 <_strtol_l.isra.0>

08012334 <__swbuf_r>:
 8012334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012336:	460e      	mov	r6, r1
 8012338:	4614      	mov	r4, r2
 801233a:	4605      	mov	r5, r0
 801233c:	b118      	cbz	r0, 8012346 <__swbuf_r+0x12>
 801233e:	6983      	ldr	r3, [r0, #24]
 8012340:	b90b      	cbnz	r3, 8012346 <__swbuf_r+0x12>
 8012342:	f000 ffe5 	bl	8013310 <__sinit>
 8012346:	4b21      	ldr	r3, [pc, #132]	; (80123cc <__swbuf_r+0x98>)
 8012348:	429c      	cmp	r4, r3
 801234a:	d12b      	bne.n	80123a4 <__swbuf_r+0x70>
 801234c:	686c      	ldr	r4, [r5, #4]
 801234e:	69a3      	ldr	r3, [r4, #24]
 8012350:	60a3      	str	r3, [r4, #8]
 8012352:	89a3      	ldrh	r3, [r4, #12]
 8012354:	071a      	lsls	r2, r3, #28
 8012356:	d52f      	bpl.n	80123b8 <__swbuf_r+0x84>
 8012358:	6923      	ldr	r3, [r4, #16]
 801235a:	b36b      	cbz	r3, 80123b8 <__swbuf_r+0x84>
 801235c:	6923      	ldr	r3, [r4, #16]
 801235e:	6820      	ldr	r0, [r4, #0]
 8012360:	1ac0      	subs	r0, r0, r3
 8012362:	6963      	ldr	r3, [r4, #20]
 8012364:	b2f6      	uxtb	r6, r6
 8012366:	4283      	cmp	r3, r0
 8012368:	4637      	mov	r7, r6
 801236a:	dc04      	bgt.n	8012376 <__swbuf_r+0x42>
 801236c:	4621      	mov	r1, r4
 801236e:	4628      	mov	r0, r5
 8012370:	f000 ff3a 	bl	80131e8 <_fflush_r>
 8012374:	bb30      	cbnz	r0, 80123c4 <__swbuf_r+0x90>
 8012376:	68a3      	ldr	r3, [r4, #8]
 8012378:	3b01      	subs	r3, #1
 801237a:	60a3      	str	r3, [r4, #8]
 801237c:	6823      	ldr	r3, [r4, #0]
 801237e:	1c5a      	adds	r2, r3, #1
 8012380:	6022      	str	r2, [r4, #0]
 8012382:	701e      	strb	r6, [r3, #0]
 8012384:	6963      	ldr	r3, [r4, #20]
 8012386:	3001      	adds	r0, #1
 8012388:	4283      	cmp	r3, r0
 801238a:	d004      	beq.n	8012396 <__swbuf_r+0x62>
 801238c:	89a3      	ldrh	r3, [r4, #12]
 801238e:	07db      	lsls	r3, r3, #31
 8012390:	d506      	bpl.n	80123a0 <__swbuf_r+0x6c>
 8012392:	2e0a      	cmp	r6, #10
 8012394:	d104      	bne.n	80123a0 <__swbuf_r+0x6c>
 8012396:	4621      	mov	r1, r4
 8012398:	4628      	mov	r0, r5
 801239a:	f000 ff25 	bl	80131e8 <_fflush_r>
 801239e:	b988      	cbnz	r0, 80123c4 <__swbuf_r+0x90>
 80123a0:	4638      	mov	r0, r7
 80123a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123a4:	4b0a      	ldr	r3, [pc, #40]	; (80123d0 <__swbuf_r+0x9c>)
 80123a6:	429c      	cmp	r4, r3
 80123a8:	d101      	bne.n	80123ae <__swbuf_r+0x7a>
 80123aa:	68ac      	ldr	r4, [r5, #8]
 80123ac:	e7cf      	b.n	801234e <__swbuf_r+0x1a>
 80123ae:	4b09      	ldr	r3, [pc, #36]	; (80123d4 <__swbuf_r+0xa0>)
 80123b0:	429c      	cmp	r4, r3
 80123b2:	bf08      	it	eq
 80123b4:	68ec      	ldreq	r4, [r5, #12]
 80123b6:	e7ca      	b.n	801234e <__swbuf_r+0x1a>
 80123b8:	4621      	mov	r1, r4
 80123ba:	4628      	mov	r0, r5
 80123bc:	f000 f80c 	bl	80123d8 <__swsetup_r>
 80123c0:	2800      	cmp	r0, #0
 80123c2:	d0cb      	beq.n	801235c <__swbuf_r+0x28>
 80123c4:	f04f 37ff 	mov.w	r7, #4294967295
 80123c8:	e7ea      	b.n	80123a0 <__swbuf_r+0x6c>
 80123ca:	bf00      	nop
 80123cc:	0801def0 	.word	0x0801def0
 80123d0:	0801df10 	.word	0x0801df10
 80123d4:	0801ded0 	.word	0x0801ded0

080123d8 <__swsetup_r>:
 80123d8:	4b32      	ldr	r3, [pc, #200]	; (80124a4 <__swsetup_r+0xcc>)
 80123da:	b570      	push	{r4, r5, r6, lr}
 80123dc:	681d      	ldr	r5, [r3, #0]
 80123de:	4606      	mov	r6, r0
 80123e0:	460c      	mov	r4, r1
 80123e2:	b125      	cbz	r5, 80123ee <__swsetup_r+0x16>
 80123e4:	69ab      	ldr	r3, [r5, #24]
 80123e6:	b913      	cbnz	r3, 80123ee <__swsetup_r+0x16>
 80123e8:	4628      	mov	r0, r5
 80123ea:	f000 ff91 	bl	8013310 <__sinit>
 80123ee:	4b2e      	ldr	r3, [pc, #184]	; (80124a8 <__swsetup_r+0xd0>)
 80123f0:	429c      	cmp	r4, r3
 80123f2:	d10f      	bne.n	8012414 <__swsetup_r+0x3c>
 80123f4:	686c      	ldr	r4, [r5, #4]
 80123f6:	89a3      	ldrh	r3, [r4, #12]
 80123f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80123fc:	0719      	lsls	r1, r3, #28
 80123fe:	d42c      	bmi.n	801245a <__swsetup_r+0x82>
 8012400:	06dd      	lsls	r5, r3, #27
 8012402:	d411      	bmi.n	8012428 <__swsetup_r+0x50>
 8012404:	2309      	movs	r3, #9
 8012406:	6033      	str	r3, [r6, #0]
 8012408:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801240c:	81a3      	strh	r3, [r4, #12]
 801240e:	f04f 30ff 	mov.w	r0, #4294967295
 8012412:	e03e      	b.n	8012492 <__swsetup_r+0xba>
 8012414:	4b25      	ldr	r3, [pc, #148]	; (80124ac <__swsetup_r+0xd4>)
 8012416:	429c      	cmp	r4, r3
 8012418:	d101      	bne.n	801241e <__swsetup_r+0x46>
 801241a:	68ac      	ldr	r4, [r5, #8]
 801241c:	e7eb      	b.n	80123f6 <__swsetup_r+0x1e>
 801241e:	4b24      	ldr	r3, [pc, #144]	; (80124b0 <__swsetup_r+0xd8>)
 8012420:	429c      	cmp	r4, r3
 8012422:	bf08      	it	eq
 8012424:	68ec      	ldreq	r4, [r5, #12]
 8012426:	e7e6      	b.n	80123f6 <__swsetup_r+0x1e>
 8012428:	0758      	lsls	r0, r3, #29
 801242a:	d512      	bpl.n	8012452 <__swsetup_r+0x7a>
 801242c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801242e:	b141      	cbz	r1, 8012442 <__swsetup_r+0x6a>
 8012430:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012434:	4299      	cmp	r1, r3
 8012436:	d002      	beq.n	801243e <__swsetup_r+0x66>
 8012438:	4630      	mov	r0, r6
 801243a:	f7fd ff93 	bl	8010364 <_free_r>
 801243e:	2300      	movs	r3, #0
 8012440:	6363      	str	r3, [r4, #52]	; 0x34
 8012442:	89a3      	ldrh	r3, [r4, #12]
 8012444:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012448:	81a3      	strh	r3, [r4, #12]
 801244a:	2300      	movs	r3, #0
 801244c:	6063      	str	r3, [r4, #4]
 801244e:	6923      	ldr	r3, [r4, #16]
 8012450:	6023      	str	r3, [r4, #0]
 8012452:	89a3      	ldrh	r3, [r4, #12]
 8012454:	f043 0308 	orr.w	r3, r3, #8
 8012458:	81a3      	strh	r3, [r4, #12]
 801245a:	6923      	ldr	r3, [r4, #16]
 801245c:	b94b      	cbnz	r3, 8012472 <__swsetup_r+0x9a>
 801245e:	89a3      	ldrh	r3, [r4, #12]
 8012460:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012468:	d003      	beq.n	8012472 <__swsetup_r+0x9a>
 801246a:	4621      	mov	r1, r4
 801246c:	4630      	mov	r0, r6
 801246e:	f001 fb87 	bl	8013b80 <__smakebuf_r>
 8012472:	89a0      	ldrh	r0, [r4, #12]
 8012474:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012478:	f010 0301 	ands.w	r3, r0, #1
 801247c:	d00a      	beq.n	8012494 <__swsetup_r+0xbc>
 801247e:	2300      	movs	r3, #0
 8012480:	60a3      	str	r3, [r4, #8]
 8012482:	6963      	ldr	r3, [r4, #20]
 8012484:	425b      	negs	r3, r3
 8012486:	61a3      	str	r3, [r4, #24]
 8012488:	6923      	ldr	r3, [r4, #16]
 801248a:	b943      	cbnz	r3, 801249e <__swsetup_r+0xc6>
 801248c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012490:	d1ba      	bne.n	8012408 <__swsetup_r+0x30>
 8012492:	bd70      	pop	{r4, r5, r6, pc}
 8012494:	0781      	lsls	r1, r0, #30
 8012496:	bf58      	it	pl
 8012498:	6963      	ldrpl	r3, [r4, #20]
 801249a:	60a3      	str	r3, [r4, #8]
 801249c:	e7f4      	b.n	8012488 <__swsetup_r+0xb0>
 801249e:	2000      	movs	r0, #0
 80124a0:	e7f7      	b.n	8012492 <__swsetup_r+0xba>
 80124a2:	bf00      	nop
 80124a4:	2400a0f0 	.word	0x2400a0f0
 80124a8:	0801def0 	.word	0x0801def0
 80124ac:	0801df10 	.word	0x0801df10
 80124b0:	0801ded0 	.word	0x0801ded0

080124b4 <abort>:
 80124b4:	b508      	push	{r3, lr}
 80124b6:	2006      	movs	r0, #6
 80124b8:	f002 fa3e 	bl	8014938 <raise>
 80124bc:	2001      	movs	r0, #1
 80124be:	f7ef fa01 	bl	80018c4 <_exit>

080124c2 <quorem>:
 80124c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124c6:	6903      	ldr	r3, [r0, #16]
 80124c8:	690c      	ldr	r4, [r1, #16]
 80124ca:	42a3      	cmp	r3, r4
 80124cc:	4607      	mov	r7, r0
 80124ce:	f2c0 8081 	blt.w	80125d4 <quorem+0x112>
 80124d2:	3c01      	subs	r4, #1
 80124d4:	f101 0814 	add.w	r8, r1, #20
 80124d8:	f100 0514 	add.w	r5, r0, #20
 80124dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80124e0:	9301      	str	r3, [sp, #4]
 80124e2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80124e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80124ea:	3301      	adds	r3, #1
 80124ec:	429a      	cmp	r2, r3
 80124ee:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80124f2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80124f6:	fbb2 f6f3 	udiv	r6, r2, r3
 80124fa:	d331      	bcc.n	8012560 <quorem+0x9e>
 80124fc:	f04f 0e00 	mov.w	lr, #0
 8012500:	4640      	mov	r0, r8
 8012502:	46ac      	mov	ip, r5
 8012504:	46f2      	mov	sl, lr
 8012506:	f850 2b04 	ldr.w	r2, [r0], #4
 801250a:	b293      	uxth	r3, r2
 801250c:	fb06 e303 	mla	r3, r6, r3, lr
 8012510:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012514:	b29b      	uxth	r3, r3
 8012516:	ebaa 0303 	sub.w	r3, sl, r3
 801251a:	0c12      	lsrs	r2, r2, #16
 801251c:	f8dc a000 	ldr.w	sl, [ip]
 8012520:	fb06 e202 	mla	r2, r6, r2, lr
 8012524:	fa13 f38a 	uxtah	r3, r3, sl
 8012528:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801252c:	fa1f fa82 	uxth.w	sl, r2
 8012530:	f8dc 2000 	ldr.w	r2, [ip]
 8012534:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8012538:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801253c:	b29b      	uxth	r3, r3
 801253e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012542:	4581      	cmp	r9, r0
 8012544:	f84c 3b04 	str.w	r3, [ip], #4
 8012548:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801254c:	d2db      	bcs.n	8012506 <quorem+0x44>
 801254e:	f855 300b 	ldr.w	r3, [r5, fp]
 8012552:	b92b      	cbnz	r3, 8012560 <quorem+0x9e>
 8012554:	9b01      	ldr	r3, [sp, #4]
 8012556:	3b04      	subs	r3, #4
 8012558:	429d      	cmp	r5, r3
 801255a:	461a      	mov	r2, r3
 801255c:	d32e      	bcc.n	80125bc <quorem+0xfa>
 801255e:	613c      	str	r4, [r7, #16]
 8012560:	4638      	mov	r0, r7
 8012562:	f001 fe33 	bl	80141cc <__mcmp>
 8012566:	2800      	cmp	r0, #0
 8012568:	db24      	blt.n	80125b4 <quorem+0xf2>
 801256a:	3601      	adds	r6, #1
 801256c:	4628      	mov	r0, r5
 801256e:	f04f 0c00 	mov.w	ip, #0
 8012572:	f858 2b04 	ldr.w	r2, [r8], #4
 8012576:	f8d0 e000 	ldr.w	lr, [r0]
 801257a:	b293      	uxth	r3, r2
 801257c:	ebac 0303 	sub.w	r3, ip, r3
 8012580:	0c12      	lsrs	r2, r2, #16
 8012582:	fa13 f38e 	uxtah	r3, r3, lr
 8012586:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801258a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801258e:	b29b      	uxth	r3, r3
 8012590:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012594:	45c1      	cmp	r9, r8
 8012596:	f840 3b04 	str.w	r3, [r0], #4
 801259a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801259e:	d2e8      	bcs.n	8012572 <quorem+0xb0>
 80125a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80125a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80125a8:	b922      	cbnz	r2, 80125b4 <quorem+0xf2>
 80125aa:	3b04      	subs	r3, #4
 80125ac:	429d      	cmp	r5, r3
 80125ae:	461a      	mov	r2, r3
 80125b0:	d30a      	bcc.n	80125c8 <quorem+0x106>
 80125b2:	613c      	str	r4, [r7, #16]
 80125b4:	4630      	mov	r0, r6
 80125b6:	b003      	add	sp, #12
 80125b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125bc:	6812      	ldr	r2, [r2, #0]
 80125be:	3b04      	subs	r3, #4
 80125c0:	2a00      	cmp	r2, #0
 80125c2:	d1cc      	bne.n	801255e <quorem+0x9c>
 80125c4:	3c01      	subs	r4, #1
 80125c6:	e7c7      	b.n	8012558 <quorem+0x96>
 80125c8:	6812      	ldr	r2, [r2, #0]
 80125ca:	3b04      	subs	r3, #4
 80125cc:	2a00      	cmp	r2, #0
 80125ce:	d1f0      	bne.n	80125b2 <quorem+0xf0>
 80125d0:	3c01      	subs	r4, #1
 80125d2:	e7eb      	b.n	80125ac <quorem+0xea>
 80125d4:	2000      	movs	r0, #0
 80125d6:	e7ee      	b.n	80125b6 <quorem+0xf4>

080125d8 <_dtoa_r>:
 80125d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125dc:	ec59 8b10 	vmov	r8, r9, d0
 80125e0:	b095      	sub	sp, #84	; 0x54
 80125e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80125e4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80125e6:	9107      	str	r1, [sp, #28]
 80125e8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80125ec:	4606      	mov	r6, r0
 80125ee:	9209      	str	r2, [sp, #36]	; 0x24
 80125f0:	9310      	str	r3, [sp, #64]	; 0x40
 80125f2:	b975      	cbnz	r5, 8012612 <_dtoa_r+0x3a>
 80125f4:	2010      	movs	r0, #16
 80125f6:	f7fd fe75 	bl	80102e4 <malloc>
 80125fa:	4602      	mov	r2, r0
 80125fc:	6270      	str	r0, [r6, #36]	; 0x24
 80125fe:	b920      	cbnz	r0, 801260a <_dtoa_r+0x32>
 8012600:	4bab      	ldr	r3, [pc, #684]	; (80128b0 <_dtoa_r+0x2d8>)
 8012602:	21ea      	movs	r1, #234	; 0xea
 8012604:	48ab      	ldr	r0, [pc, #684]	; (80128b4 <_dtoa_r+0x2dc>)
 8012606:	f7fd fe13 	bl	8010230 <__assert_func>
 801260a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801260e:	6005      	str	r5, [r0, #0]
 8012610:	60c5      	str	r5, [r0, #12]
 8012612:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012614:	6819      	ldr	r1, [r3, #0]
 8012616:	b151      	cbz	r1, 801262e <_dtoa_r+0x56>
 8012618:	685a      	ldr	r2, [r3, #4]
 801261a:	604a      	str	r2, [r1, #4]
 801261c:	2301      	movs	r3, #1
 801261e:	4093      	lsls	r3, r2
 8012620:	608b      	str	r3, [r1, #8]
 8012622:	4630      	mov	r0, r6
 8012624:	f001 fb4a 	bl	8013cbc <_Bfree>
 8012628:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801262a:	2200      	movs	r2, #0
 801262c:	601a      	str	r2, [r3, #0]
 801262e:	f1b9 0300 	subs.w	r3, r9, #0
 8012632:	bfbb      	ittet	lt
 8012634:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012638:	9303      	strlt	r3, [sp, #12]
 801263a:	2300      	movge	r3, #0
 801263c:	2201      	movlt	r2, #1
 801263e:	bfac      	ite	ge
 8012640:	6023      	strge	r3, [r4, #0]
 8012642:	6022      	strlt	r2, [r4, #0]
 8012644:	4b9c      	ldr	r3, [pc, #624]	; (80128b8 <_dtoa_r+0x2e0>)
 8012646:	9c03      	ldr	r4, [sp, #12]
 8012648:	43a3      	bics	r3, r4
 801264a:	d11a      	bne.n	8012682 <_dtoa_r+0xaa>
 801264c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801264e:	f242 730f 	movw	r3, #9999	; 0x270f
 8012652:	6013      	str	r3, [r2, #0]
 8012654:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8012658:	ea53 0308 	orrs.w	r3, r3, r8
 801265c:	f000 8512 	beq.w	8013084 <_dtoa_r+0xaac>
 8012660:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012662:	b953      	cbnz	r3, 801267a <_dtoa_r+0xa2>
 8012664:	4b95      	ldr	r3, [pc, #596]	; (80128bc <_dtoa_r+0x2e4>)
 8012666:	e01f      	b.n	80126a8 <_dtoa_r+0xd0>
 8012668:	4b95      	ldr	r3, [pc, #596]	; (80128c0 <_dtoa_r+0x2e8>)
 801266a:	9300      	str	r3, [sp, #0]
 801266c:	3308      	adds	r3, #8
 801266e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012670:	6013      	str	r3, [r2, #0]
 8012672:	9800      	ldr	r0, [sp, #0]
 8012674:	b015      	add	sp, #84	; 0x54
 8012676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801267a:	4b90      	ldr	r3, [pc, #576]	; (80128bc <_dtoa_r+0x2e4>)
 801267c:	9300      	str	r3, [sp, #0]
 801267e:	3303      	adds	r3, #3
 8012680:	e7f5      	b.n	801266e <_dtoa_r+0x96>
 8012682:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012686:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801268a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801268e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012692:	d10b      	bne.n	80126ac <_dtoa_r+0xd4>
 8012694:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012696:	2301      	movs	r3, #1
 8012698:	6013      	str	r3, [r2, #0]
 801269a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801269c:	2b00      	cmp	r3, #0
 801269e:	f000 84ee 	beq.w	801307e <_dtoa_r+0xaa6>
 80126a2:	4888      	ldr	r0, [pc, #544]	; (80128c4 <_dtoa_r+0x2ec>)
 80126a4:	6018      	str	r0, [r3, #0]
 80126a6:	1e43      	subs	r3, r0, #1
 80126a8:	9300      	str	r3, [sp, #0]
 80126aa:	e7e2      	b.n	8012672 <_dtoa_r+0x9a>
 80126ac:	a913      	add	r1, sp, #76	; 0x4c
 80126ae:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80126b2:	aa12      	add	r2, sp, #72	; 0x48
 80126b4:	4630      	mov	r0, r6
 80126b6:	f001 fea9 	bl	801440c <__d2b>
 80126ba:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80126be:	4605      	mov	r5, r0
 80126c0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80126c2:	2900      	cmp	r1, #0
 80126c4:	d047      	beq.n	8012756 <_dtoa_r+0x17e>
 80126c6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80126c8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80126cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80126d0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80126d4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80126d8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80126dc:	2400      	movs	r4, #0
 80126de:	ec43 2b16 	vmov	d6, r2, r3
 80126e2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80126e6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8012898 <_dtoa_r+0x2c0>
 80126ea:	ee36 7b47 	vsub.f64	d7, d6, d7
 80126ee:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80128a0 <_dtoa_r+0x2c8>
 80126f2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80126f6:	eeb0 7b46 	vmov.f64	d7, d6
 80126fa:	ee06 1a90 	vmov	s13, r1
 80126fe:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8012702:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80128a8 <_dtoa_r+0x2d0>
 8012706:	eea5 7b06 	vfma.f64	d7, d5, d6
 801270a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801270e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012716:	ee16 ba90 	vmov	fp, s13
 801271a:	9411      	str	r4, [sp, #68]	; 0x44
 801271c:	d508      	bpl.n	8012730 <_dtoa_r+0x158>
 801271e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012722:	eeb4 6b47 	vcmp.f64	d6, d7
 8012726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801272a:	bf18      	it	ne
 801272c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8012730:	f1bb 0f16 	cmp.w	fp, #22
 8012734:	d832      	bhi.n	801279c <_dtoa_r+0x1c4>
 8012736:	4b64      	ldr	r3, [pc, #400]	; (80128c8 <_dtoa_r+0x2f0>)
 8012738:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801273c:	ed93 7b00 	vldr	d7, [r3]
 8012740:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8012744:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801274c:	d501      	bpl.n	8012752 <_dtoa_r+0x17a>
 801274e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012752:	2300      	movs	r3, #0
 8012754:	e023      	b.n	801279e <_dtoa_r+0x1c6>
 8012756:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012758:	4401      	add	r1, r0
 801275a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 801275e:	2b20      	cmp	r3, #32
 8012760:	bfc3      	ittte	gt
 8012762:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012766:	fa04 f303 	lslgt.w	r3, r4, r3
 801276a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 801276e:	f1c3 0320 	rsble	r3, r3, #32
 8012772:	bfc6      	itte	gt
 8012774:	fa28 f804 	lsrgt.w	r8, r8, r4
 8012778:	ea43 0308 	orrgt.w	r3, r3, r8
 801277c:	fa08 f303 	lslle.w	r3, r8, r3
 8012780:	ee07 3a90 	vmov	s15, r3
 8012784:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012788:	3901      	subs	r1, #1
 801278a:	ed8d 7b00 	vstr	d7, [sp]
 801278e:	9c01      	ldr	r4, [sp, #4]
 8012790:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012794:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8012798:	2401      	movs	r4, #1
 801279a:	e7a0      	b.n	80126de <_dtoa_r+0x106>
 801279c:	2301      	movs	r3, #1
 801279e:	930f      	str	r3, [sp, #60]	; 0x3c
 80127a0:	1a43      	subs	r3, r0, r1
 80127a2:	1e5a      	subs	r2, r3, #1
 80127a4:	bf45      	ittet	mi
 80127a6:	f1c3 0301 	rsbmi	r3, r3, #1
 80127aa:	9305      	strmi	r3, [sp, #20]
 80127ac:	2300      	movpl	r3, #0
 80127ae:	2300      	movmi	r3, #0
 80127b0:	9206      	str	r2, [sp, #24]
 80127b2:	bf54      	ite	pl
 80127b4:	9305      	strpl	r3, [sp, #20]
 80127b6:	9306      	strmi	r3, [sp, #24]
 80127b8:	f1bb 0f00 	cmp.w	fp, #0
 80127bc:	db18      	blt.n	80127f0 <_dtoa_r+0x218>
 80127be:	9b06      	ldr	r3, [sp, #24]
 80127c0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80127c4:	445b      	add	r3, fp
 80127c6:	9306      	str	r3, [sp, #24]
 80127c8:	2300      	movs	r3, #0
 80127ca:	9a07      	ldr	r2, [sp, #28]
 80127cc:	2a09      	cmp	r2, #9
 80127ce:	d849      	bhi.n	8012864 <_dtoa_r+0x28c>
 80127d0:	2a05      	cmp	r2, #5
 80127d2:	bfc4      	itt	gt
 80127d4:	3a04      	subgt	r2, #4
 80127d6:	9207      	strgt	r2, [sp, #28]
 80127d8:	9a07      	ldr	r2, [sp, #28]
 80127da:	f1a2 0202 	sub.w	r2, r2, #2
 80127de:	bfcc      	ite	gt
 80127e0:	2400      	movgt	r4, #0
 80127e2:	2401      	movle	r4, #1
 80127e4:	2a03      	cmp	r2, #3
 80127e6:	d848      	bhi.n	801287a <_dtoa_r+0x2a2>
 80127e8:	e8df f002 	tbb	[pc, r2]
 80127ec:	3a2c2e0b 	.word	0x3a2c2e0b
 80127f0:	9b05      	ldr	r3, [sp, #20]
 80127f2:	2200      	movs	r2, #0
 80127f4:	eba3 030b 	sub.w	r3, r3, fp
 80127f8:	9305      	str	r3, [sp, #20]
 80127fa:	920e      	str	r2, [sp, #56]	; 0x38
 80127fc:	f1cb 0300 	rsb	r3, fp, #0
 8012800:	e7e3      	b.n	80127ca <_dtoa_r+0x1f2>
 8012802:	2200      	movs	r2, #0
 8012804:	9208      	str	r2, [sp, #32]
 8012806:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012808:	2a00      	cmp	r2, #0
 801280a:	dc39      	bgt.n	8012880 <_dtoa_r+0x2a8>
 801280c:	f04f 0a01 	mov.w	sl, #1
 8012810:	46d1      	mov	r9, sl
 8012812:	4652      	mov	r2, sl
 8012814:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8012818:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801281a:	2100      	movs	r1, #0
 801281c:	6079      	str	r1, [r7, #4]
 801281e:	2004      	movs	r0, #4
 8012820:	f100 0c14 	add.w	ip, r0, #20
 8012824:	4594      	cmp	ip, r2
 8012826:	6879      	ldr	r1, [r7, #4]
 8012828:	d92f      	bls.n	801288a <_dtoa_r+0x2b2>
 801282a:	4630      	mov	r0, r6
 801282c:	930c      	str	r3, [sp, #48]	; 0x30
 801282e:	f001 fa05 	bl	8013c3c <_Balloc>
 8012832:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012834:	9000      	str	r0, [sp, #0]
 8012836:	4602      	mov	r2, r0
 8012838:	2800      	cmp	r0, #0
 801283a:	d149      	bne.n	80128d0 <_dtoa_r+0x2f8>
 801283c:	4b23      	ldr	r3, [pc, #140]	; (80128cc <_dtoa_r+0x2f4>)
 801283e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012842:	e6df      	b.n	8012604 <_dtoa_r+0x2c>
 8012844:	2201      	movs	r2, #1
 8012846:	e7dd      	b.n	8012804 <_dtoa_r+0x22c>
 8012848:	2200      	movs	r2, #0
 801284a:	9208      	str	r2, [sp, #32]
 801284c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801284e:	eb0b 0a02 	add.w	sl, fp, r2
 8012852:	f10a 0901 	add.w	r9, sl, #1
 8012856:	464a      	mov	r2, r9
 8012858:	2a01      	cmp	r2, #1
 801285a:	bfb8      	it	lt
 801285c:	2201      	movlt	r2, #1
 801285e:	e7db      	b.n	8012818 <_dtoa_r+0x240>
 8012860:	2201      	movs	r2, #1
 8012862:	e7f2      	b.n	801284a <_dtoa_r+0x272>
 8012864:	2401      	movs	r4, #1
 8012866:	2200      	movs	r2, #0
 8012868:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801286c:	f04f 3aff 	mov.w	sl, #4294967295
 8012870:	2100      	movs	r1, #0
 8012872:	46d1      	mov	r9, sl
 8012874:	2212      	movs	r2, #18
 8012876:	9109      	str	r1, [sp, #36]	; 0x24
 8012878:	e7ce      	b.n	8012818 <_dtoa_r+0x240>
 801287a:	2201      	movs	r2, #1
 801287c:	9208      	str	r2, [sp, #32]
 801287e:	e7f5      	b.n	801286c <_dtoa_r+0x294>
 8012880:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8012884:	46d1      	mov	r9, sl
 8012886:	4652      	mov	r2, sl
 8012888:	e7c6      	b.n	8012818 <_dtoa_r+0x240>
 801288a:	3101      	adds	r1, #1
 801288c:	6079      	str	r1, [r7, #4]
 801288e:	0040      	lsls	r0, r0, #1
 8012890:	e7c6      	b.n	8012820 <_dtoa_r+0x248>
 8012892:	bf00      	nop
 8012894:	f3af 8000 	nop.w
 8012898:	636f4361 	.word	0x636f4361
 801289c:	3fd287a7 	.word	0x3fd287a7
 80128a0:	8b60c8b3 	.word	0x8b60c8b3
 80128a4:	3fc68a28 	.word	0x3fc68a28
 80128a8:	509f79fb 	.word	0x509f79fb
 80128ac:	3fd34413 	.word	0x3fd34413
 80128b0:	0801de46 	.word	0x0801de46
 80128b4:	0801de5d 	.word	0x0801de5d
 80128b8:	7ff00000 	.word	0x7ff00000
 80128bc:	0801de42 	.word	0x0801de42
 80128c0:	0801de39 	.word	0x0801de39
 80128c4:	0801dcba 	.word	0x0801dcba
 80128c8:	0801e038 	.word	0x0801e038
 80128cc:	0801debc 	.word	0x0801debc
 80128d0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80128d2:	9900      	ldr	r1, [sp, #0]
 80128d4:	6011      	str	r1, [r2, #0]
 80128d6:	f1b9 0f0e 	cmp.w	r9, #14
 80128da:	d872      	bhi.n	80129c2 <_dtoa_r+0x3ea>
 80128dc:	2c00      	cmp	r4, #0
 80128de:	d070      	beq.n	80129c2 <_dtoa_r+0x3ea>
 80128e0:	f1bb 0f00 	cmp.w	fp, #0
 80128e4:	f340 80a6 	ble.w	8012a34 <_dtoa_r+0x45c>
 80128e8:	49ca      	ldr	r1, [pc, #808]	; (8012c14 <_dtoa_r+0x63c>)
 80128ea:	f00b 020f 	and.w	r2, fp, #15
 80128ee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80128f2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80128f6:	ed92 7b00 	vldr	d7, [r2]
 80128fa:	ea4f 112b 	mov.w	r1, fp, asr #4
 80128fe:	f000 808d 	beq.w	8012a1c <_dtoa_r+0x444>
 8012902:	4ac5      	ldr	r2, [pc, #788]	; (8012c18 <_dtoa_r+0x640>)
 8012904:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8012908:	ed92 6b08 	vldr	d6, [r2, #32]
 801290c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8012910:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012914:	f001 010f 	and.w	r1, r1, #15
 8012918:	2203      	movs	r2, #3
 801291a:	48bf      	ldr	r0, [pc, #764]	; (8012c18 <_dtoa_r+0x640>)
 801291c:	2900      	cmp	r1, #0
 801291e:	d17f      	bne.n	8012a20 <_dtoa_r+0x448>
 8012920:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012924:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012928:	ed8d 7b02 	vstr	d7, [sp, #8]
 801292c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801292e:	2900      	cmp	r1, #0
 8012930:	f000 80b2 	beq.w	8012a98 <_dtoa_r+0x4c0>
 8012934:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012938:	ed9d 7b02 	vldr	d7, [sp, #8]
 801293c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012944:	f140 80a8 	bpl.w	8012a98 <_dtoa_r+0x4c0>
 8012948:	f1b9 0f00 	cmp.w	r9, #0
 801294c:	f000 80a4 	beq.w	8012a98 <_dtoa_r+0x4c0>
 8012950:	f1ba 0f00 	cmp.w	sl, #0
 8012954:	dd31      	ble.n	80129ba <_dtoa_r+0x3e2>
 8012956:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801295a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801295e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012962:	f10b 37ff 	add.w	r7, fp, #4294967295
 8012966:	3201      	adds	r2, #1
 8012968:	4650      	mov	r0, sl
 801296a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801296e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8012972:	ee07 2a90 	vmov	s15, r2
 8012976:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801297a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801297e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8012982:	9c03      	ldr	r4, [sp, #12]
 8012984:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8012988:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801298c:	2800      	cmp	r0, #0
 801298e:	f040 8086 	bne.w	8012a9e <_dtoa_r+0x4c6>
 8012992:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012996:	ee36 6b47 	vsub.f64	d6, d6, d7
 801299a:	ec42 1b17 	vmov	d7, r1, r2
 801299e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80129a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129a6:	f300 8272 	bgt.w	8012e8e <_dtoa_r+0x8b6>
 80129aa:	eeb1 7b47 	vneg.f64	d7, d7
 80129ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80129b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129b6:	f100 8267 	bmi.w	8012e88 <_dtoa_r+0x8b0>
 80129ba:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80129be:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80129c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80129c4:	2a00      	cmp	r2, #0
 80129c6:	f2c0 8129 	blt.w	8012c1c <_dtoa_r+0x644>
 80129ca:	f1bb 0f0e 	cmp.w	fp, #14
 80129ce:	f300 8125 	bgt.w	8012c1c <_dtoa_r+0x644>
 80129d2:	4b90      	ldr	r3, [pc, #576]	; (8012c14 <_dtoa_r+0x63c>)
 80129d4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80129d8:	ed93 6b00 	vldr	d6, [r3]
 80129dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129de:	2b00      	cmp	r3, #0
 80129e0:	f280 80c3 	bge.w	8012b6a <_dtoa_r+0x592>
 80129e4:	f1b9 0f00 	cmp.w	r9, #0
 80129e8:	f300 80bf 	bgt.w	8012b6a <_dtoa_r+0x592>
 80129ec:	f040 824c 	bne.w	8012e88 <_dtoa_r+0x8b0>
 80129f0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80129f4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80129f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80129fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a04:	464c      	mov	r4, r9
 8012a06:	464f      	mov	r7, r9
 8012a08:	f280 8222 	bge.w	8012e50 <_dtoa_r+0x878>
 8012a0c:	f8dd 8000 	ldr.w	r8, [sp]
 8012a10:	2331      	movs	r3, #49	; 0x31
 8012a12:	f808 3b01 	strb.w	r3, [r8], #1
 8012a16:	f10b 0b01 	add.w	fp, fp, #1
 8012a1a:	e21e      	b.n	8012e5a <_dtoa_r+0x882>
 8012a1c:	2202      	movs	r2, #2
 8012a1e:	e77c      	b.n	801291a <_dtoa_r+0x342>
 8012a20:	07cc      	lsls	r4, r1, #31
 8012a22:	d504      	bpl.n	8012a2e <_dtoa_r+0x456>
 8012a24:	ed90 6b00 	vldr	d6, [r0]
 8012a28:	3201      	adds	r2, #1
 8012a2a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012a2e:	1049      	asrs	r1, r1, #1
 8012a30:	3008      	adds	r0, #8
 8012a32:	e773      	b.n	801291c <_dtoa_r+0x344>
 8012a34:	d02e      	beq.n	8012a94 <_dtoa_r+0x4bc>
 8012a36:	f1cb 0100 	rsb	r1, fp, #0
 8012a3a:	4a76      	ldr	r2, [pc, #472]	; (8012c14 <_dtoa_r+0x63c>)
 8012a3c:	f001 000f 	and.w	r0, r1, #15
 8012a40:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012a44:	ed92 7b00 	vldr	d7, [r2]
 8012a48:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8012a4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012a50:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8012a54:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8012a58:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8012a5c:	486e      	ldr	r0, [pc, #440]	; (8012c18 <_dtoa_r+0x640>)
 8012a5e:	1109      	asrs	r1, r1, #4
 8012a60:	2400      	movs	r4, #0
 8012a62:	2202      	movs	r2, #2
 8012a64:	b939      	cbnz	r1, 8012a76 <_dtoa_r+0x49e>
 8012a66:	2c00      	cmp	r4, #0
 8012a68:	f43f af60 	beq.w	801292c <_dtoa_r+0x354>
 8012a6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012a70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012a74:	e75a      	b.n	801292c <_dtoa_r+0x354>
 8012a76:	07cf      	lsls	r7, r1, #31
 8012a78:	d509      	bpl.n	8012a8e <_dtoa_r+0x4b6>
 8012a7a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8012a7e:	ed90 7b00 	vldr	d7, [r0]
 8012a82:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012a86:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8012a8a:	3201      	adds	r2, #1
 8012a8c:	2401      	movs	r4, #1
 8012a8e:	1049      	asrs	r1, r1, #1
 8012a90:	3008      	adds	r0, #8
 8012a92:	e7e7      	b.n	8012a64 <_dtoa_r+0x48c>
 8012a94:	2202      	movs	r2, #2
 8012a96:	e749      	b.n	801292c <_dtoa_r+0x354>
 8012a98:	465f      	mov	r7, fp
 8012a9a:	4648      	mov	r0, r9
 8012a9c:	e765      	b.n	801296a <_dtoa_r+0x392>
 8012a9e:	ec42 1b17 	vmov	d7, r1, r2
 8012aa2:	4a5c      	ldr	r2, [pc, #368]	; (8012c14 <_dtoa_r+0x63c>)
 8012aa4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012aa8:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012aac:	9a00      	ldr	r2, [sp, #0]
 8012aae:	1814      	adds	r4, r2, r0
 8012ab0:	9a08      	ldr	r2, [sp, #32]
 8012ab2:	b352      	cbz	r2, 8012b0a <_dtoa_r+0x532>
 8012ab4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8012ab8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8012abc:	f8dd 8000 	ldr.w	r8, [sp]
 8012ac0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012ac4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012ac8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012acc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012ad0:	ee14 2a90 	vmov	r2, s9
 8012ad4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012ad8:	3230      	adds	r2, #48	; 0x30
 8012ada:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012ade:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ae6:	f808 2b01 	strb.w	r2, [r8], #1
 8012aea:	d439      	bmi.n	8012b60 <_dtoa_r+0x588>
 8012aec:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012af0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012af8:	d472      	bmi.n	8012be0 <_dtoa_r+0x608>
 8012afa:	45a0      	cmp	r8, r4
 8012afc:	f43f af5d 	beq.w	80129ba <_dtoa_r+0x3e2>
 8012b00:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012b04:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012b08:	e7e0      	b.n	8012acc <_dtoa_r+0x4f4>
 8012b0a:	f8dd 8000 	ldr.w	r8, [sp]
 8012b0e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012b12:	4621      	mov	r1, r4
 8012b14:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012b18:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012b1c:	ee14 2a90 	vmov	r2, s9
 8012b20:	3230      	adds	r2, #48	; 0x30
 8012b22:	f808 2b01 	strb.w	r2, [r8], #1
 8012b26:	45a0      	cmp	r8, r4
 8012b28:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012b2c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012b30:	d118      	bne.n	8012b64 <_dtoa_r+0x58c>
 8012b32:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012b36:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012b3a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b42:	dc4d      	bgt.n	8012be0 <_dtoa_r+0x608>
 8012b44:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012b48:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b50:	f57f af33 	bpl.w	80129ba <_dtoa_r+0x3e2>
 8012b54:	4688      	mov	r8, r1
 8012b56:	3901      	subs	r1, #1
 8012b58:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8012b5c:	2b30      	cmp	r3, #48	; 0x30
 8012b5e:	d0f9      	beq.n	8012b54 <_dtoa_r+0x57c>
 8012b60:	46bb      	mov	fp, r7
 8012b62:	e02a      	b.n	8012bba <_dtoa_r+0x5e2>
 8012b64:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012b68:	e7d6      	b.n	8012b18 <_dtoa_r+0x540>
 8012b6a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012b6e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8012b72:	f8dd 8000 	ldr.w	r8, [sp]
 8012b76:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012b7a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012b7e:	ee15 3a10 	vmov	r3, s10
 8012b82:	3330      	adds	r3, #48	; 0x30
 8012b84:	f808 3b01 	strb.w	r3, [r8], #1
 8012b88:	9b00      	ldr	r3, [sp, #0]
 8012b8a:	eba8 0303 	sub.w	r3, r8, r3
 8012b8e:	4599      	cmp	r9, r3
 8012b90:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012b94:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012b98:	d133      	bne.n	8012c02 <_dtoa_r+0x62a>
 8012b9a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012b9e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ba6:	dc1a      	bgt.n	8012bde <_dtoa_r+0x606>
 8012ba8:	eeb4 7b46 	vcmp.f64	d7, d6
 8012bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bb0:	d103      	bne.n	8012bba <_dtoa_r+0x5e2>
 8012bb2:	ee15 3a10 	vmov	r3, s10
 8012bb6:	07d9      	lsls	r1, r3, #31
 8012bb8:	d411      	bmi.n	8012bde <_dtoa_r+0x606>
 8012bba:	4629      	mov	r1, r5
 8012bbc:	4630      	mov	r0, r6
 8012bbe:	f001 f87d 	bl	8013cbc <_Bfree>
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012bc6:	f888 3000 	strb.w	r3, [r8]
 8012bca:	f10b 0301 	add.w	r3, fp, #1
 8012bce:	6013      	str	r3, [r2, #0]
 8012bd0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	f43f ad4d 	beq.w	8012672 <_dtoa_r+0x9a>
 8012bd8:	f8c3 8000 	str.w	r8, [r3]
 8012bdc:	e549      	b.n	8012672 <_dtoa_r+0x9a>
 8012bde:	465f      	mov	r7, fp
 8012be0:	4643      	mov	r3, r8
 8012be2:	4698      	mov	r8, r3
 8012be4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012be8:	2a39      	cmp	r2, #57	; 0x39
 8012bea:	d106      	bne.n	8012bfa <_dtoa_r+0x622>
 8012bec:	9a00      	ldr	r2, [sp, #0]
 8012bee:	429a      	cmp	r2, r3
 8012bf0:	d1f7      	bne.n	8012be2 <_dtoa_r+0x60a>
 8012bf2:	9900      	ldr	r1, [sp, #0]
 8012bf4:	2230      	movs	r2, #48	; 0x30
 8012bf6:	3701      	adds	r7, #1
 8012bf8:	700a      	strb	r2, [r1, #0]
 8012bfa:	781a      	ldrb	r2, [r3, #0]
 8012bfc:	3201      	adds	r2, #1
 8012bfe:	701a      	strb	r2, [r3, #0]
 8012c00:	e7ae      	b.n	8012b60 <_dtoa_r+0x588>
 8012c02:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012c06:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c0e:	d1b2      	bne.n	8012b76 <_dtoa_r+0x59e>
 8012c10:	e7d3      	b.n	8012bba <_dtoa_r+0x5e2>
 8012c12:	bf00      	nop
 8012c14:	0801e038 	.word	0x0801e038
 8012c18:	0801e010 	.word	0x0801e010
 8012c1c:	9908      	ldr	r1, [sp, #32]
 8012c1e:	2900      	cmp	r1, #0
 8012c20:	f000 80d1 	beq.w	8012dc6 <_dtoa_r+0x7ee>
 8012c24:	9907      	ldr	r1, [sp, #28]
 8012c26:	2901      	cmp	r1, #1
 8012c28:	f300 80b4 	bgt.w	8012d94 <_dtoa_r+0x7bc>
 8012c2c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012c2e:	2900      	cmp	r1, #0
 8012c30:	f000 80ac 	beq.w	8012d8c <_dtoa_r+0x7b4>
 8012c34:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012c38:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012c3c:	461c      	mov	r4, r3
 8012c3e:	930a      	str	r3, [sp, #40]	; 0x28
 8012c40:	9b05      	ldr	r3, [sp, #20]
 8012c42:	4413      	add	r3, r2
 8012c44:	9305      	str	r3, [sp, #20]
 8012c46:	9b06      	ldr	r3, [sp, #24]
 8012c48:	2101      	movs	r1, #1
 8012c4a:	4413      	add	r3, r2
 8012c4c:	4630      	mov	r0, r6
 8012c4e:	9306      	str	r3, [sp, #24]
 8012c50:	f001 f93a 	bl	8013ec8 <__i2b>
 8012c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c56:	4607      	mov	r7, r0
 8012c58:	f1b8 0f00 	cmp.w	r8, #0
 8012c5c:	dd0d      	ble.n	8012c7a <_dtoa_r+0x6a2>
 8012c5e:	9a06      	ldr	r2, [sp, #24]
 8012c60:	2a00      	cmp	r2, #0
 8012c62:	dd0a      	ble.n	8012c7a <_dtoa_r+0x6a2>
 8012c64:	4542      	cmp	r2, r8
 8012c66:	9905      	ldr	r1, [sp, #20]
 8012c68:	bfa8      	it	ge
 8012c6a:	4642      	movge	r2, r8
 8012c6c:	1a89      	subs	r1, r1, r2
 8012c6e:	9105      	str	r1, [sp, #20]
 8012c70:	9906      	ldr	r1, [sp, #24]
 8012c72:	eba8 0802 	sub.w	r8, r8, r2
 8012c76:	1a8a      	subs	r2, r1, r2
 8012c78:	9206      	str	r2, [sp, #24]
 8012c7a:	b303      	cbz	r3, 8012cbe <_dtoa_r+0x6e6>
 8012c7c:	9a08      	ldr	r2, [sp, #32]
 8012c7e:	2a00      	cmp	r2, #0
 8012c80:	f000 80a6 	beq.w	8012dd0 <_dtoa_r+0x7f8>
 8012c84:	2c00      	cmp	r4, #0
 8012c86:	dd13      	ble.n	8012cb0 <_dtoa_r+0x6d8>
 8012c88:	4639      	mov	r1, r7
 8012c8a:	4622      	mov	r2, r4
 8012c8c:	4630      	mov	r0, r6
 8012c8e:	930c      	str	r3, [sp, #48]	; 0x30
 8012c90:	f001 f9d6 	bl	8014040 <__pow5mult>
 8012c94:	462a      	mov	r2, r5
 8012c96:	4601      	mov	r1, r0
 8012c98:	4607      	mov	r7, r0
 8012c9a:	4630      	mov	r0, r6
 8012c9c:	f001 f92a 	bl	8013ef4 <__multiply>
 8012ca0:	4629      	mov	r1, r5
 8012ca2:	900a      	str	r0, [sp, #40]	; 0x28
 8012ca4:	4630      	mov	r0, r6
 8012ca6:	f001 f809 	bl	8013cbc <_Bfree>
 8012caa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012cac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012cae:	4615      	mov	r5, r2
 8012cb0:	1b1a      	subs	r2, r3, r4
 8012cb2:	d004      	beq.n	8012cbe <_dtoa_r+0x6e6>
 8012cb4:	4629      	mov	r1, r5
 8012cb6:	4630      	mov	r0, r6
 8012cb8:	f001 f9c2 	bl	8014040 <__pow5mult>
 8012cbc:	4605      	mov	r5, r0
 8012cbe:	2101      	movs	r1, #1
 8012cc0:	4630      	mov	r0, r6
 8012cc2:	f001 f901 	bl	8013ec8 <__i2b>
 8012cc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	4604      	mov	r4, r0
 8012ccc:	f340 8082 	ble.w	8012dd4 <_dtoa_r+0x7fc>
 8012cd0:	461a      	mov	r2, r3
 8012cd2:	4601      	mov	r1, r0
 8012cd4:	4630      	mov	r0, r6
 8012cd6:	f001 f9b3 	bl	8014040 <__pow5mult>
 8012cda:	9b07      	ldr	r3, [sp, #28]
 8012cdc:	2b01      	cmp	r3, #1
 8012cde:	4604      	mov	r4, r0
 8012ce0:	dd7b      	ble.n	8012dda <_dtoa_r+0x802>
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	930a      	str	r3, [sp, #40]	; 0x28
 8012ce6:	6922      	ldr	r2, [r4, #16]
 8012ce8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012cec:	6910      	ldr	r0, [r2, #16]
 8012cee:	f001 f89b 	bl	8013e28 <__hi0bits>
 8012cf2:	f1c0 0020 	rsb	r0, r0, #32
 8012cf6:	9b06      	ldr	r3, [sp, #24]
 8012cf8:	4418      	add	r0, r3
 8012cfa:	f010 001f 	ands.w	r0, r0, #31
 8012cfe:	f000 808d 	beq.w	8012e1c <_dtoa_r+0x844>
 8012d02:	f1c0 0220 	rsb	r2, r0, #32
 8012d06:	2a04      	cmp	r2, #4
 8012d08:	f340 8086 	ble.w	8012e18 <_dtoa_r+0x840>
 8012d0c:	f1c0 001c 	rsb	r0, r0, #28
 8012d10:	9b05      	ldr	r3, [sp, #20]
 8012d12:	4403      	add	r3, r0
 8012d14:	9305      	str	r3, [sp, #20]
 8012d16:	9b06      	ldr	r3, [sp, #24]
 8012d18:	4403      	add	r3, r0
 8012d1a:	4480      	add	r8, r0
 8012d1c:	9306      	str	r3, [sp, #24]
 8012d1e:	9b05      	ldr	r3, [sp, #20]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	dd05      	ble.n	8012d30 <_dtoa_r+0x758>
 8012d24:	4629      	mov	r1, r5
 8012d26:	461a      	mov	r2, r3
 8012d28:	4630      	mov	r0, r6
 8012d2a:	f001 f9e3 	bl	80140f4 <__lshift>
 8012d2e:	4605      	mov	r5, r0
 8012d30:	9b06      	ldr	r3, [sp, #24]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	dd05      	ble.n	8012d42 <_dtoa_r+0x76a>
 8012d36:	4621      	mov	r1, r4
 8012d38:	461a      	mov	r2, r3
 8012d3a:	4630      	mov	r0, r6
 8012d3c:	f001 f9da 	bl	80140f4 <__lshift>
 8012d40:	4604      	mov	r4, r0
 8012d42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d06b      	beq.n	8012e20 <_dtoa_r+0x848>
 8012d48:	4621      	mov	r1, r4
 8012d4a:	4628      	mov	r0, r5
 8012d4c:	f001 fa3e 	bl	80141cc <__mcmp>
 8012d50:	2800      	cmp	r0, #0
 8012d52:	da65      	bge.n	8012e20 <_dtoa_r+0x848>
 8012d54:	2300      	movs	r3, #0
 8012d56:	4629      	mov	r1, r5
 8012d58:	220a      	movs	r2, #10
 8012d5a:	4630      	mov	r0, r6
 8012d5c:	f000 ffd0 	bl	8013d00 <__multadd>
 8012d60:	9b08      	ldr	r3, [sp, #32]
 8012d62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012d66:	4605      	mov	r5, r0
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	f000 8192 	beq.w	8013092 <_dtoa_r+0xaba>
 8012d6e:	4639      	mov	r1, r7
 8012d70:	2300      	movs	r3, #0
 8012d72:	220a      	movs	r2, #10
 8012d74:	4630      	mov	r0, r6
 8012d76:	f000 ffc3 	bl	8013d00 <__multadd>
 8012d7a:	f1ba 0f00 	cmp.w	sl, #0
 8012d7e:	4607      	mov	r7, r0
 8012d80:	f300 808e 	bgt.w	8012ea0 <_dtoa_r+0x8c8>
 8012d84:	9b07      	ldr	r3, [sp, #28]
 8012d86:	2b02      	cmp	r3, #2
 8012d88:	dc51      	bgt.n	8012e2e <_dtoa_r+0x856>
 8012d8a:	e089      	b.n	8012ea0 <_dtoa_r+0x8c8>
 8012d8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012d8e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012d92:	e751      	b.n	8012c38 <_dtoa_r+0x660>
 8012d94:	f109 34ff 	add.w	r4, r9, #4294967295
 8012d98:	42a3      	cmp	r3, r4
 8012d9a:	bfbf      	itttt	lt
 8012d9c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8012d9e:	1ae3      	sublt	r3, r4, r3
 8012da0:	18d2      	addlt	r2, r2, r3
 8012da2:	4613      	movlt	r3, r2
 8012da4:	bfb7      	itett	lt
 8012da6:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012da8:	1b1c      	subge	r4, r3, r4
 8012daa:	4623      	movlt	r3, r4
 8012dac:	2400      	movlt	r4, #0
 8012dae:	f1b9 0f00 	cmp.w	r9, #0
 8012db2:	bfb5      	itete	lt
 8012db4:	9a05      	ldrlt	r2, [sp, #20]
 8012db6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8012dba:	eba2 0809 	sublt.w	r8, r2, r9
 8012dbe:	464a      	movge	r2, r9
 8012dc0:	bfb8      	it	lt
 8012dc2:	2200      	movlt	r2, #0
 8012dc4:	e73b      	b.n	8012c3e <_dtoa_r+0x666>
 8012dc6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012dca:	9f08      	ldr	r7, [sp, #32]
 8012dcc:	461c      	mov	r4, r3
 8012dce:	e743      	b.n	8012c58 <_dtoa_r+0x680>
 8012dd0:	461a      	mov	r2, r3
 8012dd2:	e76f      	b.n	8012cb4 <_dtoa_r+0x6dc>
 8012dd4:	9b07      	ldr	r3, [sp, #28]
 8012dd6:	2b01      	cmp	r3, #1
 8012dd8:	dc18      	bgt.n	8012e0c <_dtoa_r+0x834>
 8012dda:	9b02      	ldr	r3, [sp, #8]
 8012ddc:	b9b3      	cbnz	r3, 8012e0c <_dtoa_r+0x834>
 8012dde:	9b03      	ldr	r3, [sp, #12]
 8012de0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012de4:	b9a2      	cbnz	r2, 8012e10 <_dtoa_r+0x838>
 8012de6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8012dea:	0d12      	lsrs	r2, r2, #20
 8012dec:	0512      	lsls	r2, r2, #20
 8012dee:	b18a      	cbz	r2, 8012e14 <_dtoa_r+0x83c>
 8012df0:	9b05      	ldr	r3, [sp, #20]
 8012df2:	3301      	adds	r3, #1
 8012df4:	9305      	str	r3, [sp, #20]
 8012df6:	9b06      	ldr	r3, [sp, #24]
 8012df8:	3301      	adds	r3, #1
 8012dfa:	9306      	str	r3, [sp, #24]
 8012dfc:	2301      	movs	r3, #1
 8012dfe:	930a      	str	r3, [sp, #40]	; 0x28
 8012e00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	f47f af6f 	bne.w	8012ce6 <_dtoa_r+0x70e>
 8012e08:	2001      	movs	r0, #1
 8012e0a:	e774      	b.n	8012cf6 <_dtoa_r+0x71e>
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	e7f6      	b.n	8012dfe <_dtoa_r+0x826>
 8012e10:	9b02      	ldr	r3, [sp, #8]
 8012e12:	e7f4      	b.n	8012dfe <_dtoa_r+0x826>
 8012e14:	920a      	str	r2, [sp, #40]	; 0x28
 8012e16:	e7f3      	b.n	8012e00 <_dtoa_r+0x828>
 8012e18:	d081      	beq.n	8012d1e <_dtoa_r+0x746>
 8012e1a:	4610      	mov	r0, r2
 8012e1c:	301c      	adds	r0, #28
 8012e1e:	e777      	b.n	8012d10 <_dtoa_r+0x738>
 8012e20:	f1b9 0f00 	cmp.w	r9, #0
 8012e24:	dc37      	bgt.n	8012e96 <_dtoa_r+0x8be>
 8012e26:	9b07      	ldr	r3, [sp, #28]
 8012e28:	2b02      	cmp	r3, #2
 8012e2a:	dd34      	ble.n	8012e96 <_dtoa_r+0x8be>
 8012e2c:	46ca      	mov	sl, r9
 8012e2e:	f1ba 0f00 	cmp.w	sl, #0
 8012e32:	d10d      	bne.n	8012e50 <_dtoa_r+0x878>
 8012e34:	4621      	mov	r1, r4
 8012e36:	4653      	mov	r3, sl
 8012e38:	2205      	movs	r2, #5
 8012e3a:	4630      	mov	r0, r6
 8012e3c:	f000 ff60 	bl	8013d00 <__multadd>
 8012e40:	4601      	mov	r1, r0
 8012e42:	4604      	mov	r4, r0
 8012e44:	4628      	mov	r0, r5
 8012e46:	f001 f9c1 	bl	80141cc <__mcmp>
 8012e4a:	2800      	cmp	r0, #0
 8012e4c:	f73f adde 	bgt.w	8012a0c <_dtoa_r+0x434>
 8012e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e52:	f8dd 8000 	ldr.w	r8, [sp]
 8012e56:	ea6f 0b03 	mvn.w	fp, r3
 8012e5a:	f04f 0900 	mov.w	r9, #0
 8012e5e:	4621      	mov	r1, r4
 8012e60:	4630      	mov	r0, r6
 8012e62:	f000 ff2b 	bl	8013cbc <_Bfree>
 8012e66:	2f00      	cmp	r7, #0
 8012e68:	f43f aea7 	beq.w	8012bba <_dtoa_r+0x5e2>
 8012e6c:	f1b9 0f00 	cmp.w	r9, #0
 8012e70:	d005      	beq.n	8012e7e <_dtoa_r+0x8a6>
 8012e72:	45b9      	cmp	r9, r7
 8012e74:	d003      	beq.n	8012e7e <_dtoa_r+0x8a6>
 8012e76:	4649      	mov	r1, r9
 8012e78:	4630      	mov	r0, r6
 8012e7a:	f000 ff1f 	bl	8013cbc <_Bfree>
 8012e7e:	4639      	mov	r1, r7
 8012e80:	4630      	mov	r0, r6
 8012e82:	f000 ff1b 	bl	8013cbc <_Bfree>
 8012e86:	e698      	b.n	8012bba <_dtoa_r+0x5e2>
 8012e88:	2400      	movs	r4, #0
 8012e8a:	4627      	mov	r7, r4
 8012e8c:	e7e0      	b.n	8012e50 <_dtoa_r+0x878>
 8012e8e:	46bb      	mov	fp, r7
 8012e90:	4604      	mov	r4, r0
 8012e92:	4607      	mov	r7, r0
 8012e94:	e5ba      	b.n	8012a0c <_dtoa_r+0x434>
 8012e96:	9b08      	ldr	r3, [sp, #32]
 8012e98:	46ca      	mov	sl, r9
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	f000 8100 	beq.w	80130a0 <_dtoa_r+0xac8>
 8012ea0:	f1b8 0f00 	cmp.w	r8, #0
 8012ea4:	dd05      	ble.n	8012eb2 <_dtoa_r+0x8da>
 8012ea6:	4639      	mov	r1, r7
 8012ea8:	4642      	mov	r2, r8
 8012eaa:	4630      	mov	r0, r6
 8012eac:	f001 f922 	bl	80140f4 <__lshift>
 8012eb0:	4607      	mov	r7, r0
 8012eb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d05d      	beq.n	8012f74 <_dtoa_r+0x99c>
 8012eb8:	6879      	ldr	r1, [r7, #4]
 8012eba:	4630      	mov	r0, r6
 8012ebc:	f000 febe 	bl	8013c3c <_Balloc>
 8012ec0:	4680      	mov	r8, r0
 8012ec2:	b928      	cbnz	r0, 8012ed0 <_dtoa_r+0x8f8>
 8012ec4:	4b82      	ldr	r3, [pc, #520]	; (80130d0 <_dtoa_r+0xaf8>)
 8012ec6:	4602      	mov	r2, r0
 8012ec8:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012ecc:	f7ff bb9a 	b.w	8012604 <_dtoa_r+0x2c>
 8012ed0:	693a      	ldr	r2, [r7, #16]
 8012ed2:	3202      	adds	r2, #2
 8012ed4:	0092      	lsls	r2, r2, #2
 8012ed6:	f107 010c 	add.w	r1, r7, #12
 8012eda:	300c      	adds	r0, #12
 8012edc:	f7fd fa12 	bl	8010304 <memcpy>
 8012ee0:	2201      	movs	r2, #1
 8012ee2:	4641      	mov	r1, r8
 8012ee4:	4630      	mov	r0, r6
 8012ee6:	f001 f905 	bl	80140f4 <__lshift>
 8012eea:	9b00      	ldr	r3, [sp, #0]
 8012eec:	3301      	adds	r3, #1
 8012eee:	9305      	str	r3, [sp, #20]
 8012ef0:	9b00      	ldr	r3, [sp, #0]
 8012ef2:	4453      	add	r3, sl
 8012ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8012ef6:	9b02      	ldr	r3, [sp, #8]
 8012ef8:	f003 0301 	and.w	r3, r3, #1
 8012efc:	46b9      	mov	r9, r7
 8012efe:	9308      	str	r3, [sp, #32]
 8012f00:	4607      	mov	r7, r0
 8012f02:	9b05      	ldr	r3, [sp, #20]
 8012f04:	4621      	mov	r1, r4
 8012f06:	3b01      	subs	r3, #1
 8012f08:	4628      	mov	r0, r5
 8012f0a:	9302      	str	r3, [sp, #8]
 8012f0c:	f7ff fad9 	bl	80124c2 <quorem>
 8012f10:	4603      	mov	r3, r0
 8012f12:	3330      	adds	r3, #48	; 0x30
 8012f14:	9006      	str	r0, [sp, #24]
 8012f16:	4649      	mov	r1, r9
 8012f18:	4628      	mov	r0, r5
 8012f1a:	930a      	str	r3, [sp, #40]	; 0x28
 8012f1c:	f001 f956 	bl	80141cc <__mcmp>
 8012f20:	463a      	mov	r2, r7
 8012f22:	4682      	mov	sl, r0
 8012f24:	4621      	mov	r1, r4
 8012f26:	4630      	mov	r0, r6
 8012f28:	f001 f96c 	bl	8014204 <__mdiff>
 8012f2c:	68c2      	ldr	r2, [r0, #12]
 8012f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f30:	4680      	mov	r8, r0
 8012f32:	bb0a      	cbnz	r2, 8012f78 <_dtoa_r+0x9a0>
 8012f34:	4601      	mov	r1, r0
 8012f36:	4628      	mov	r0, r5
 8012f38:	f001 f948 	bl	80141cc <__mcmp>
 8012f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f3e:	4602      	mov	r2, r0
 8012f40:	4641      	mov	r1, r8
 8012f42:	4630      	mov	r0, r6
 8012f44:	920e      	str	r2, [sp, #56]	; 0x38
 8012f46:	930a      	str	r3, [sp, #40]	; 0x28
 8012f48:	f000 feb8 	bl	8013cbc <_Bfree>
 8012f4c:	9b07      	ldr	r3, [sp, #28]
 8012f4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012f50:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012f54:	ea43 0102 	orr.w	r1, r3, r2
 8012f58:	9b08      	ldr	r3, [sp, #32]
 8012f5a:	430b      	orrs	r3, r1
 8012f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f5e:	d10d      	bne.n	8012f7c <_dtoa_r+0x9a4>
 8012f60:	2b39      	cmp	r3, #57	; 0x39
 8012f62:	d029      	beq.n	8012fb8 <_dtoa_r+0x9e0>
 8012f64:	f1ba 0f00 	cmp.w	sl, #0
 8012f68:	dd01      	ble.n	8012f6e <_dtoa_r+0x996>
 8012f6a:	9b06      	ldr	r3, [sp, #24]
 8012f6c:	3331      	adds	r3, #49	; 0x31
 8012f6e:	9a02      	ldr	r2, [sp, #8]
 8012f70:	7013      	strb	r3, [r2, #0]
 8012f72:	e774      	b.n	8012e5e <_dtoa_r+0x886>
 8012f74:	4638      	mov	r0, r7
 8012f76:	e7b8      	b.n	8012eea <_dtoa_r+0x912>
 8012f78:	2201      	movs	r2, #1
 8012f7a:	e7e1      	b.n	8012f40 <_dtoa_r+0x968>
 8012f7c:	f1ba 0f00 	cmp.w	sl, #0
 8012f80:	db06      	blt.n	8012f90 <_dtoa_r+0x9b8>
 8012f82:	9907      	ldr	r1, [sp, #28]
 8012f84:	ea41 0a0a 	orr.w	sl, r1, sl
 8012f88:	9908      	ldr	r1, [sp, #32]
 8012f8a:	ea5a 0101 	orrs.w	r1, sl, r1
 8012f8e:	d120      	bne.n	8012fd2 <_dtoa_r+0x9fa>
 8012f90:	2a00      	cmp	r2, #0
 8012f92:	ddec      	ble.n	8012f6e <_dtoa_r+0x996>
 8012f94:	4629      	mov	r1, r5
 8012f96:	2201      	movs	r2, #1
 8012f98:	4630      	mov	r0, r6
 8012f9a:	9305      	str	r3, [sp, #20]
 8012f9c:	f001 f8aa 	bl	80140f4 <__lshift>
 8012fa0:	4621      	mov	r1, r4
 8012fa2:	4605      	mov	r5, r0
 8012fa4:	f001 f912 	bl	80141cc <__mcmp>
 8012fa8:	2800      	cmp	r0, #0
 8012faa:	9b05      	ldr	r3, [sp, #20]
 8012fac:	dc02      	bgt.n	8012fb4 <_dtoa_r+0x9dc>
 8012fae:	d1de      	bne.n	8012f6e <_dtoa_r+0x996>
 8012fb0:	07da      	lsls	r2, r3, #31
 8012fb2:	d5dc      	bpl.n	8012f6e <_dtoa_r+0x996>
 8012fb4:	2b39      	cmp	r3, #57	; 0x39
 8012fb6:	d1d8      	bne.n	8012f6a <_dtoa_r+0x992>
 8012fb8:	9a02      	ldr	r2, [sp, #8]
 8012fba:	2339      	movs	r3, #57	; 0x39
 8012fbc:	7013      	strb	r3, [r2, #0]
 8012fbe:	4643      	mov	r3, r8
 8012fc0:	4698      	mov	r8, r3
 8012fc2:	3b01      	subs	r3, #1
 8012fc4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8012fc8:	2a39      	cmp	r2, #57	; 0x39
 8012fca:	d051      	beq.n	8013070 <_dtoa_r+0xa98>
 8012fcc:	3201      	adds	r2, #1
 8012fce:	701a      	strb	r2, [r3, #0]
 8012fd0:	e745      	b.n	8012e5e <_dtoa_r+0x886>
 8012fd2:	2a00      	cmp	r2, #0
 8012fd4:	dd03      	ble.n	8012fde <_dtoa_r+0xa06>
 8012fd6:	2b39      	cmp	r3, #57	; 0x39
 8012fd8:	d0ee      	beq.n	8012fb8 <_dtoa_r+0x9e0>
 8012fda:	3301      	adds	r3, #1
 8012fdc:	e7c7      	b.n	8012f6e <_dtoa_r+0x996>
 8012fde:	9a05      	ldr	r2, [sp, #20]
 8012fe0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012fe2:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012fe6:	428a      	cmp	r2, r1
 8012fe8:	d02b      	beq.n	8013042 <_dtoa_r+0xa6a>
 8012fea:	4629      	mov	r1, r5
 8012fec:	2300      	movs	r3, #0
 8012fee:	220a      	movs	r2, #10
 8012ff0:	4630      	mov	r0, r6
 8012ff2:	f000 fe85 	bl	8013d00 <__multadd>
 8012ff6:	45b9      	cmp	r9, r7
 8012ff8:	4605      	mov	r5, r0
 8012ffa:	f04f 0300 	mov.w	r3, #0
 8012ffe:	f04f 020a 	mov.w	r2, #10
 8013002:	4649      	mov	r1, r9
 8013004:	4630      	mov	r0, r6
 8013006:	d107      	bne.n	8013018 <_dtoa_r+0xa40>
 8013008:	f000 fe7a 	bl	8013d00 <__multadd>
 801300c:	4681      	mov	r9, r0
 801300e:	4607      	mov	r7, r0
 8013010:	9b05      	ldr	r3, [sp, #20]
 8013012:	3301      	adds	r3, #1
 8013014:	9305      	str	r3, [sp, #20]
 8013016:	e774      	b.n	8012f02 <_dtoa_r+0x92a>
 8013018:	f000 fe72 	bl	8013d00 <__multadd>
 801301c:	4639      	mov	r1, r7
 801301e:	4681      	mov	r9, r0
 8013020:	2300      	movs	r3, #0
 8013022:	220a      	movs	r2, #10
 8013024:	4630      	mov	r0, r6
 8013026:	f000 fe6b 	bl	8013d00 <__multadd>
 801302a:	4607      	mov	r7, r0
 801302c:	e7f0      	b.n	8013010 <_dtoa_r+0xa38>
 801302e:	f1ba 0f00 	cmp.w	sl, #0
 8013032:	9a00      	ldr	r2, [sp, #0]
 8013034:	bfcc      	ite	gt
 8013036:	46d0      	movgt	r8, sl
 8013038:	f04f 0801 	movle.w	r8, #1
 801303c:	4490      	add	r8, r2
 801303e:	f04f 0900 	mov.w	r9, #0
 8013042:	4629      	mov	r1, r5
 8013044:	2201      	movs	r2, #1
 8013046:	4630      	mov	r0, r6
 8013048:	9302      	str	r3, [sp, #8]
 801304a:	f001 f853 	bl	80140f4 <__lshift>
 801304e:	4621      	mov	r1, r4
 8013050:	4605      	mov	r5, r0
 8013052:	f001 f8bb 	bl	80141cc <__mcmp>
 8013056:	2800      	cmp	r0, #0
 8013058:	dcb1      	bgt.n	8012fbe <_dtoa_r+0x9e6>
 801305a:	d102      	bne.n	8013062 <_dtoa_r+0xa8a>
 801305c:	9b02      	ldr	r3, [sp, #8]
 801305e:	07db      	lsls	r3, r3, #31
 8013060:	d4ad      	bmi.n	8012fbe <_dtoa_r+0x9e6>
 8013062:	4643      	mov	r3, r8
 8013064:	4698      	mov	r8, r3
 8013066:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801306a:	2a30      	cmp	r2, #48	; 0x30
 801306c:	d0fa      	beq.n	8013064 <_dtoa_r+0xa8c>
 801306e:	e6f6      	b.n	8012e5e <_dtoa_r+0x886>
 8013070:	9a00      	ldr	r2, [sp, #0]
 8013072:	429a      	cmp	r2, r3
 8013074:	d1a4      	bne.n	8012fc0 <_dtoa_r+0x9e8>
 8013076:	f10b 0b01 	add.w	fp, fp, #1
 801307a:	2331      	movs	r3, #49	; 0x31
 801307c:	e778      	b.n	8012f70 <_dtoa_r+0x998>
 801307e:	4b15      	ldr	r3, [pc, #84]	; (80130d4 <_dtoa_r+0xafc>)
 8013080:	f7ff bb12 	b.w	80126a8 <_dtoa_r+0xd0>
 8013084:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013086:	2b00      	cmp	r3, #0
 8013088:	f47f aaee 	bne.w	8012668 <_dtoa_r+0x90>
 801308c:	4b12      	ldr	r3, [pc, #72]	; (80130d8 <_dtoa_r+0xb00>)
 801308e:	f7ff bb0b 	b.w	80126a8 <_dtoa_r+0xd0>
 8013092:	f1ba 0f00 	cmp.w	sl, #0
 8013096:	dc03      	bgt.n	80130a0 <_dtoa_r+0xac8>
 8013098:	9b07      	ldr	r3, [sp, #28]
 801309a:	2b02      	cmp	r3, #2
 801309c:	f73f aec7 	bgt.w	8012e2e <_dtoa_r+0x856>
 80130a0:	f8dd 8000 	ldr.w	r8, [sp]
 80130a4:	4621      	mov	r1, r4
 80130a6:	4628      	mov	r0, r5
 80130a8:	f7ff fa0b 	bl	80124c2 <quorem>
 80130ac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80130b0:	f808 3b01 	strb.w	r3, [r8], #1
 80130b4:	9a00      	ldr	r2, [sp, #0]
 80130b6:	eba8 0202 	sub.w	r2, r8, r2
 80130ba:	4592      	cmp	sl, r2
 80130bc:	ddb7      	ble.n	801302e <_dtoa_r+0xa56>
 80130be:	4629      	mov	r1, r5
 80130c0:	2300      	movs	r3, #0
 80130c2:	220a      	movs	r2, #10
 80130c4:	4630      	mov	r0, r6
 80130c6:	f000 fe1b 	bl	8013d00 <__multadd>
 80130ca:	4605      	mov	r5, r0
 80130cc:	e7ea      	b.n	80130a4 <_dtoa_r+0xacc>
 80130ce:	bf00      	nop
 80130d0:	0801debc 	.word	0x0801debc
 80130d4:	0801dcb9 	.word	0x0801dcb9
 80130d8:	0801de39 	.word	0x0801de39

080130dc <__sflush_r>:
 80130dc:	898a      	ldrh	r2, [r1, #12]
 80130de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130e2:	4605      	mov	r5, r0
 80130e4:	0710      	lsls	r0, r2, #28
 80130e6:	460c      	mov	r4, r1
 80130e8:	d458      	bmi.n	801319c <__sflush_r+0xc0>
 80130ea:	684b      	ldr	r3, [r1, #4]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	dc05      	bgt.n	80130fc <__sflush_r+0x20>
 80130f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	dc02      	bgt.n	80130fc <__sflush_r+0x20>
 80130f6:	2000      	movs	r0, #0
 80130f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80130fe:	2e00      	cmp	r6, #0
 8013100:	d0f9      	beq.n	80130f6 <__sflush_r+0x1a>
 8013102:	2300      	movs	r3, #0
 8013104:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013108:	682f      	ldr	r7, [r5, #0]
 801310a:	602b      	str	r3, [r5, #0]
 801310c:	d032      	beq.n	8013174 <__sflush_r+0x98>
 801310e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013110:	89a3      	ldrh	r3, [r4, #12]
 8013112:	075a      	lsls	r2, r3, #29
 8013114:	d505      	bpl.n	8013122 <__sflush_r+0x46>
 8013116:	6863      	ldr	r3, [r4, #4]
 8013118:	1ac0      	subs	r0, r0, r3
 801311a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801311c:	b10b      	cbz	r3, 8013122 <__sflush_r+0x46>
 801311e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013120:	1ac0      	subs	r0, r0, r3
 8013122:	2300      	movs	r3, #0
 8013124:	4602      	mov	r2, r0
 8013126:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013128:	6a21      	ldr	r1, [r4, #32]
 801312a:	4628      	mov	r0, r5
 801312c:	47b0      	blx	r6
 801312e:	1c43      	adds	r3, r0, #1
 8013130:	89a3      	ldrh	r3, [r4, #12]
 8013132:	d106      	bne.n	8013142 <__sflush_r+0x66>
 8013134:	6829      	ldr	r1, [r5, #0]
 8013136:	291d      	cmp	r1, #29
 8013138:	d82c      	bhi.n	8013194 <__sflush_r+0xb8>
 801313a:	4a2a      	ldr	r2, [pc, #168]	; (80131e4 <__sflush_r+0x108>)
 801313c:	40ca      	lsrs	r2, r1
 801313e:	07d6      	lsls	r6, r2, #31
 8013140:	d528      	bpl.n	8013194 <__sflush_r+0xb8>
 8013142:	2200      	movs	r2, #0
 8013144:	6062      	str	r2, [r4, #4]
 8013146:	04d9      	lsls	r1, r3, #19
 8013148:	6922      	ldr	r2, [r4, #16]
 801314a:	6022      	str	r2, [r4, #0]
 801314c:	d504      	bpl.n	8013158 <__sflush_r+0x7c>
 801314e:	1c42      	adds	r2, r0, #1
 8013150:	d101      	bne.n	8013156 <__sflush_r+0x7a>
 8013152:	682b      	ldr	r3, [r5, #0]
 8013154:	b903      	cbnz	r3, 8013158 <__sflush_r+0x7c>
 8013156:	6560      	str	r0, [r4, #84]	; 0x54
 8013158:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801315a:	602f      	str	r7, [r5, #0]
 801315c:	2900      	cmp	r1, #0
 801315e:	d0ca      	beq.n	80130f6 <__sflush_r+0x1a>
 8013160:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013164:	4299      	cmp	r1, r3
 8013166:	d002      	beq.n	801316e <__sflush_r+0x92>
 8013168:	4628      	mov	r0, r5
 801316a:	f7fd f8fb 	bl	8010364 <_free_r>
 801316e:	2000      	movs	r0, #0
 8013170:	6360      	str	r0, [r4, #52]	; 0x34
 8013172:	e7c1      	b.n	80130f8 <__sflush_r+0x1c>
 8013174:	6a21      	ldr	r1, [r4, #32]
 8013176:	2301      	movs	r3, #1
 8013178:	4628      	mov	r0, r5
 801317a:	47b0      	blx	r6
 801317c:	1c41      	adds	r1, r0, #1
 801317e:	d1c7      	bne.n	8013110 <__sflush_r+0x34>
 8013180:	682b      	ldr	r3, [r5, #0]
 8013182:	2b00      	cmp	r3, #0
 8013184:	d0c4      	beq.n	8013110 <__sflush_r+0x34>
 8013186:	2b1d      	cmp	r3, #29
 8013188:	d001      	beq.n	801318e <__sflush_r+0xb2>
 801318a:	2b16      	cmp	r3, #22
 801318c:	d101      	bne.n	8013192 <__sflush_r+0xb6>
 801318e:	602f      	str	r7, [r5, #0]
 8013190:	e7b1      	b.n	80130f6 <__sflush_r+0x1a>
 8013192:	89a3      	ldrh	r3, [r4, #12]
 8013194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013198:	81a3      	strh	r3, [r4, #12]
 801319a:	e7ad      	b.n	80130f8 <__sflush_r+0x1c>
 801319c:	690f      	ldr	r7, [r1, #16]
 801319e:	2f00      	cmp	r7, #0
 80131a0:	d0a9      	beq.n	80130f6 <__sflush_r+0x1a>
 80131a2:	0793      	lsls	r3, r2, #30
 80131a4:	680e      	ldr	r6, [r1, #0]
 80131a6:	bf08      	it	eq
 80131a8:	694b      	ldreq	r3, [r1, #20]
 80131aa:	600f      	str	r7, [r1, #0]
 80131ac:	bf18      	it	ne
 80131ae:	2300      	movne	r3, #0
 80131b0:	eba6 0807 	sub.w	r8, r6, r7
 80131b4:	608b      	str	r3, [r1, #8]
 80131b6:	f1b8 0f00 	cmp.w	r8, #0
 80131ba:	dd9c      	ble.n	80130f6 <__sflush_r+0x1a>
 80131bc:	6a21      	ldr	r1, [r4, #32]
 80131be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80131c0:	4643      	mov	r3, r8
 80131c2:	463a      	mov	r2, r7
 80131c4:	4628      	mov	r0, r5
 80131c6:	47b0      	blx	r6
 80131c8:	2800      	cmp	r0, #0
 80131ca:	dc06      	bgt.n	80131da <__sflush_r+0xfe>
 80131cc:	89a3      	ldrh	r3, [r4, #12]
 80131ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80131d2:	81a3      	strh	r3, [r4, #12]
 80131d4:	f04f 30ff 	mov.w	r0, #4294967295
 80131d8:	e78e      	b.n	80130f8 <__sflush_r+0x1c>
 80131da:	4407      	add	r7, r0
 80131dc:	eba8 0800 	sub.w	r8, r8, r0
 80131e0:	e7e9      	b.n	80131b6 <__sflush_r+0xda>
 80131e2:	bf00      	nop
 80131e4:	20400001 	.word	0x20400001

080131e8 <_fflush_r>:
 80131e8:	b538      	push	{r3, r4, r5, lr}
 80131ea:	690b      	ldr	r3, [r1, #16]
 80131ec:	4605      	mov	r5, r0
 80131ee:	460c      	mov	r4, r1
 80131f0:	b913      	cbnz	r3, 80131f8 <_fflush_r+0x10>
 80131f2:	2500      	movs	r5, #0
 80131f4:	4628      	mov	r0, r5
 80131f6:	bd38      	pop	{r3, r4, r5, pc}
 80131f8:	b118      	cbz	r0, 8013202 <_fflush_r+0x1a>
 80131fa:	6983      	ldr	r3, [r0, #24]
 80131fc:	b90b      	cbnz	r3, 8013202 <_fflush_r+0x1a>
 80131fe:	f000 f887 	bl	8013310 <__sinit>
 8013202:	4b14      	ldr	r3, [pc, #80]	; (8013254 <_fflush_r+0x6c>)
 8013204:	429c      	cmp	r4, r3
 8013206:	d11b      	bne.n	8013240 <_fflush_r+0x58>
 8013208:	686c      	ldr	r4, [r5, #4]
 801320a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d0ef      	beq.n	80131f2 <_fflush_r+0xa>
 8013212:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013214:	07d0      	lsls	r0, r2, #31
 8013216:	d404      	bmi.n	8013222 <_fflush_r+0x3a>
 8013218:	0599      	lsls	r1, r3, #22
 801321a:	d402      	bmi.n	8013222 <_fflush_r+0x3a>
 801321c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801321e:	f000 fc88 	bl	8013b32 <__retarget_lock_acquire_recursive>
 8013222:	4628      	mov	r0, r5
 8013224:	4621      	mov	r1, r4
 8013226:	f7ff ff59 	bl	80130dc <__sflush_r>
 801322a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801322c:	07da      	lsls	r2, r3, #31
 801322e:	4605      	mov	r5, r0
 8013230:	d4e0      	bmi.n	80131f4 <_fflush_r+0xc>
 8013232:	89a3      	ldrh	r3, [r4, #12]
 8013234:	059b      	lsls	r3, r3, #22
 8013236:	d4dd      	bmi.n	80131f4 <_fflush_r+0xc>
 8013238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801323a:	f000 fc7b 	bl	8013b34 <__retarget_lock_release_recursive>
 801323e:	e7d9      	b.n	80131f4 <_fflush_r+0xc>
 8013240:	4b05      	ldr	r3, [pc, #20]	; (8013258 <_fflush_r+0x70>)
 8013242:	429c      	cmp	r4, r3
 8013244:	d101      	bne.n	801324a <_fflush_r+0x62>
 8013246:	68ac      	ldr	r4, [r5, #8]
 8013248:	e7df      	b.n	801320a <_fflush_r+0x22>
 801324a:	4b04      	ldr	r3, [pc, #16]	; (801325c <_fflush_r+0x74>)
 801324c:	429c      	cmp	r4, r3
 801324e:	bf08      	it	eq
 8013250:	68ec      	ldreq	r4, [r5, #12]
 8013252:	e7da      	b.n	801320a <_fflush_r+0x22>
 8013254:	0801def0 	.word	0x0801def0
 8013258:	0801df10 	.word	0x0801df10
 801325c:	0801ded0 	.word	0x0801ded0

08013260 <std>:
 8013260:	2300      	movs	r3, #0
 8013262:	b510      	push	{r4, lr}
 8013264:	4604      	mov	r4, r0
 8013266:	e9c0 3300 	strd	r3, r3, [r0]
 801326a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801326e:	6083      	str	r3, [r0, #8]
 8013270:	8181      	strh	r1, [r0, #12]
 8013272:	6643      	str	r3, [r0, #100]	; 0x64
 8013274:	81c2      	strh	r2, [r0, #14]
 8013276:	6183      	str	r3, [r0, #24]
 8013278:	4619      	mov	r1, r3
 801327a:	2208      	movs	r2, #8
 801327c:	305c      	adds	r0, #92	; 0x5c
 801327e:	f7fd f869 	bl	8010354 <memset>
 8013282:	4b05      	ldr	r3, [pc, #20]	; (8013298 <std+0x38>)
 8013284:	6263      	str	r3, [r4, #36]	; 0x24
 8013286:	4b05      	ldr	r3, [pc, #20]	; (801329c <std+0x3c>)
 8013288:	62a3      	str	r3, [r4, #40]	; 0x28
 801328a:	4b05      	ldr	r3, [pc, #20]	; (80132a0 <std+0x40>)
 801328c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801328e:	4b05      	ldr	r3, [pc, #20]	; (80132a4 <std+0x44>)
 8013290:	6224      	str	r4, [r4, #32]
 8013292:	6323      	str	r3, [r4, #48]	; 0x30
 8013294:	bd10      	pop	{r4, pc}
 8013296:	bf00      	nop
 8013298:	08014971 	.word	0x08014971
 801329c:	08014993 	.word	0x08014993
 80132a0:	080149cb 	.word	0x080149cb
 80132a4:	080149ef 	.word	0x080149ef

080132a8 <_cleanup_r>:
 80132a8:	4901      	ldr	r1, [pc, #4]	; (80132b0 <_cleanup_r+0x8>)
 80132aa:	f000 b8af 	b.w	801340c <_fwalk_reent>
 80132ae:	bf00      	nop
 80132b0:	080131e9 	.word	0x080131e9

080132b4 <__sfmoreglue>:
 80132b4:	b570      	push	{r4, r5, r6, lr}
 80132b6:	1e4a      	subs	r2, r1, #1
 80132b8:	2568      	movs	r5, #104	; 0x68
 80132ba:	4355      	muls	r5, r2
 80132bc:	460e      	mov	r6, r1
 80132be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80132c2:	f7fd f89f 	bl	8010404 <_malloc_r>
 80132c6:	4604      	mov	r4, r0
 80132c8:	b140      	cbz	r0, 80132dc <__sfmoreglue+0x28>
 80132ca:	2100      	movs	r1, #0
 80132cc:	e9c0 1600 	strd	r1, r6, [r0]
 80132d0:	300c      	adds	r0, #12
 80132d2:	60a0      	str	r0, [r4, #8]
 80132d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80132d8:	f7fd f83c 	bl	8010354 <memset>
 80132dc:	4620      	mov	r0, r4
 80132de:	bd70      	pop	{r4, r5, r6, pc}

080132e0 <__sfp_lock_acquire>:
 80132e0:	4801      	ldr	r0, [pc, #4]	; (80132e8 <__sfp_lock_acquire+0x8>)
 80132e2:	f000 bc26 	b.w	8013b32 <__retarget_lock_acquire_recursive>
 80132e6:	bf00      	nop
 80132e8:	2400f6a8 	.word	0x2400f6a8

080132ec <__sfp_lock_release>:
 80132ec:	4801      	ldr	r0, [pc, #4]	; (80132f4 <__sfp_lock_release+0x8>)
 80132ee:	f000 bc21 	b.w	8013b34 <__retarget_lock_release_recursive>
 80132f2:	bf00      	nop
 80132f4:	2400f6a8 	.word	0x2400f6a8

080132f8 <__sinit_lock_acquire>:
 80132f8:	4801      	ldr	r0, [pc, #4]	; (8013300 <__sinit_lock_acquire+0x8>)
 80132fa:	f000 bc1a 	b.w	8013b32 <__retarget_lock_acquire_recursive>
 80132fe:	bf00      	nop
 8013300:	2400f6a3 	.word	0x2400f6a3

08013304 <__sinit_lock_release>:
 8013304:	4801      	ldr	r0, [pc, #4]	; (801330c <__sinit_lock_release+0x8>)
 8013306:	f000 bc15 	b.w	8013b34 <__retarget_lock_release_recursive>
 801330a:	bf00      	nop
 801330c:	2400f6a3 	.word	0x2400f6a3

08013310 <__sinit>:
 8013310:	b510      	push	{r4, lr}
 8013312:	4604      	mov	r4, r0
 8013314:	f7ff fff0 	bl	80132f8 <__sinit_lock_acquire>
 8013318:	69a3      	ldr	r3, [r4, #24]
 801331a:	b11b      	cbz	r3, 8013324 <__sinit+0x14>
 801331c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013320:	f7ff bff0 	b.w	8013304 <__sinit_lock_release>
 8013324:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013328:	6523      	str	r3, [r4, #80]	; 0x50
 801332a:	4b13      	ldr	r3, [pc, #76]	; (8013378 <__sinit+0x68>)
 801332c:	4a13      	ldr	r2, [pc, #76]	; (801337c <__sinit+0x6c>)
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	62a2      	str	r2, [r4, #40]	; 0x28
 8013332:	42a3      	cmp	r3, r4
 8013334:	bf04      	itt	eq
 8013336:	2301      	moveq	r3, #1
 8013338:	61a3      	streq	r3, [r4, #24]
 801333a:	4620      	mov	r0, r4
 801333c:	f000 f820 	bl	8013380 <__sfp>
 8013340:	6060      	str	r0, [r4, #4]
 8013342:	4620      	mov	r0, r4
 8013344:	f000 f81c 	bl	8013380 <__sfp>
 8013348:	60a0      	str	r0, [r4, #8]
 801334a:	4620      	mov	r0, r4
 801334c:	f000 f818 	bl	8013380 <__sfp>
 8013350:	2200      	movs	r2, #0
 8013352:	60e0      	str	r0, [r4, #12]
 8013354:	2104      	movs	r1, #4
 8013356:	6860      	ldr	r0, [r4, #4]
 8013358:	f7ff ff82 	bl	8013260 <std>
 801335c:	68a0      	ldr	r0, [r4, #8]
 801335e:	2201      	movs	r2, #1
 8013360:	2109      	movs	r1, #9
 8013362:	f7ff ff7d 	bl	8013260 <std>
 8013366:	68e0      	ldr	r0, [r4, #12]
 8013368:	2202      	movs	r2, #2
 801336a:	2112      	movs	r1, #18
 801336c:	f7ff ff78 	bl	8013260 <std>
 8013370:	2301      	movs	r3, #1
 8013372:	61a3      	str	r3, [r4, #24]
 8013374:	e7d2      	b.n	801331c <__sinit+0xc>
 8013376:	bf00      	nop
 8013378:	0801dc94 	.word	0x0801dc94
 801337c:	080132a9 	.word	0x080132a9

08013380 <__sfp>:
 8013380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013382:	4607      	mov	r7, r0
 8013384:	f7ff ffac 	bl	80132e0 <__sfp_lock_acquire>
 8013388:	4b1e      	ldr	r3, [pc, #120]	; (8013404 <__sfp+0x84>)
 801338a:	681e      	ldr	r6, [r3, #0]
 801338c:	69b3      	ldr	r3, [r6, #24]
 801338e:	b913      	cbnz	r3, 8013396 <__sfp+0x16>
 8013390:	4630      	mov	r0, r6
 8013392:	f7ff ffbd 	bl	8013310 <__sinit>
 8013396:	3648      	adds	r6, #72	; 0x48
 8013398:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801339c:	3b01      	subs	r3, #1
 801339e:	d503      	bpl.n	80133a8 <__sfp+0x28>
 80133a0:	6833      	ldr	r3, [r6, #0]
 80133a2:	b30b      	cbz	r3, 80133e8 <__sfp+0x68>
 80133a4:	6836      	ldr	r6, [r6, #0]
 80133a6:	e7f7      	b.n	8013398 <__sfp+0x18>
 80133a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80133ac:	b9d5      	cbnz	r5, 80133e4 <__sfp+0x64>
 80133ae:	4b16      	ldr	r3, [pc, #88]	; (8013408 <__sfp+0x88>)
 80133b0:	60e3      	str	r3, [r4, #12]
 80133b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80133b6:	6665      	str	r5, [r4, #100]	; 0x64
 80133b8:	f000 fbba 	bl	8013b30 <__retarget_lock_init_recursive>
 80133bc:	f7ff ff96 	bl	80132ec <__sfp_lock_release>
 80133c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80133c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80133c8:	6025      	str	r5, [r4, #0]
 80133ca:	61a5      	str	r5, [r4, #24]
 80133cc:	2208      	movs	r2, #8
 80133ce:	4629      	mov	r1, r5
 80133d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80133d4:	f7fc ffbe 	bl	8010354 <memset>
 80133d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80133dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80133e0:	4620      	mov	r0, r4
 80133e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133e4:	3468      	adds	r4, #104	; 0x68
 80133e6:	e7d9      	b.n	801339c <__sfp+0x1c>
 80133e8:	2104      	movs	r1, #4
 80133ea:	4638      	mov	r0, r7
 80133ec:	f7ff ff62 	bl	80132b4 <__sfmoreglue>
 80133f0:	4604      	mov	r4, r0
 80133f2:	6030      	str	r0, [r6, #0]
 80133f4:	2800      	cmp	r0, #0
 80133f6:	d1d5      	bne.n	80133a4 <__sfp+0x24>
 80133f8:	f7ff ff78 	bl	80132ec <__sfp_lock_release>
 80133fc:	230c      	movs	r3, #12
 80133fe:	603b      	str	r3, [r7, #0]
 8013400:	e7ee      	b.n	80133e0 <__sfp+0x60>
 8013402:	bf00      	nop
 8013404:	0801dc94 	.word	0x0801dc94
 8013408:	ffff0001 	.word	0xffff0001

0801340c <_fwalk_reent>:
 801340c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013410:	4606      	mov	r6, r0
 8013412:	4688      	mov	r8, r1
 8013414:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013418:	2700      	movs	r7, #0
 801341a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801341e:	f1b9 0901 	subs.w	r9, r9, #1
 8013422:	d505      	bpl.n	8013430 <_fwalk_reent+0x24>
 8013424:	6824      	ldr	r4, [r4, #0]
 8013426:	2c00      	cmp	r4, #0
 8013428:	d1f7      	bne.n	801341a <_fwalk_reent+0xe>
 801342a:	4638      	mov	r0, r7
 801342c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013430:	89ab      	ldrh	r3, [r5, #12]
 8013432:	2b01      	cmp	r3, #1
 8013434:	d907      	bls.n	8013446 <_fwalk_reent+0x3a>
 8013436:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801343a:	3301      	adds	r3, #1
 801343c:	d003      	beq.n	8013446 <_fwalk_reent+0x3a>
 801343e:	4629      	mov	r1, r5
 8013440:	4630      	mov	r0, r6
 8013442:	47c0      	blx	r8
 8013444:	4307      	orrs	r7, r0
 8013446:	3568      	adds	r5, #104	; 0x68
 8013448:	e7e9      	b.n	801341e <_fwalk_reent+0x12>

0801344a <rshift>:
 801344a:	6903      	ldr	r3, [r0, #16]
 801344c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013454:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013458:	f100 0414 	add.w	r4, r0, #20
 801345c:	dd45      	ble.n	80134ea <rshift+0xa0>
 801345e:	f011 011f 	ands.w	r1, r1, #31
 8013462:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013466:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801346a:	d10c      	bne.n	8013486 <rshift+0x3c>
 801346c:	f100 0710 	add.w	r7, r0, #16
 8013470:	4629      	mov	r1, r5
 8013472:	42b1      	cmp	r1, r6
 8013474:	d334      	bcc.n	80134e0 <rshift+0x96>
 8013476:	1a9b      	subs	r3, r3, r2
 8013478:	009b      	lsls	r3, r3, #2
 801347a:	1eea      	subs	r2, r5, #3
 801347c:	4296      	cmp	r6, r2
 801347e:	bf38      	it	cc
 8013480:	2300      	movcc	r3, #0
 8013482:	4423      	add	r3, r4
 8013484:	e015      	b.n	80134b2 <rshift+0x68>
 8013486:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801348a:	f1c1 0820 	rsb	r8, r1, #32
 801348e:	40cf      	lsrs	r7, r1
 8013490:	f105 0e04 	add.w	lr, r5, #4
 8013494:	46a1      	mov	r9, r4
 8013496:	4576      	cmp	r6, lr
 8013498:	46f4      	mov	ip, lr
 801349a:	d815      	bhi.n	80134c8 <rshift+0x7e>
 801349c:	1a9b      	subs	r3, r3, r2
 801349e:	009a      	lsls	r2, r3, #2
 80134a0:	3a04      	subs	r2, #4
 80134a2:	3501      	adds	r5, #1
 80134a4:	42ae      	cmp	r6, r5
 80134a6:	bf38      	it	cc
 80134a8:	2200      	movcc	r2, #0
 80134aa:	18a3      	adds	r3, r4, r2
 80134ac:	50a7      	str	r7, [r4, r2]
 80134ae:	b107      	cbz	r7, 80134b2 <rshift+0x68>
 80134b0:	3304      	adds	r3, #4
 80134b2:	1b1a      	subs	r2, r3, r4
 80134b4:	42a3      	cmp	r3, r4
 80134b6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80134ba:	bf08      	it	eq
 80134bc:	2300      	moveq	r3, #0
 80134be:	6102      	str	r2, [r0, #16]
 80134c0:	bf08      	it	eq
 80134c2:	6143      	streq	r3, [r0, #20]
 80134c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80134c8:	f8dc c000 	ldr.w	ip, [ip]
 80134cc:	fa0c fc08 	lsl.w	ip, ip, r8
 80134d0:	ea4c 0707 	orr.w	r7, ip, r7
 80134d4:	f849 7b04 	str.w	r7, [r9], #4
 80134d8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80134dc:	40cf      	lsrs	r7, r1
 80134de:	e7da      	b.n	8013496 <rshift+0x4c>
 80134e0:	f851 cb04 	ldr.w	ip, [r1], #4
 80134e4:	f847 cf04 	str.w	ip, [r7, #4]!
 80134e8:	e7c3      	b.n	8013472 <rshift+0x28>
 80134ea:	4623      	mov	r3, r4
 80134ec:	e7e1      	b.n	80134b2 <rshift+0x68>

080134ee <__hexdig_fun>:
 80134ee:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80134f2:	2b09      	cmp	r3, #9
 80134f4:	d802      	bhi.n	80134fc <__hexdig_fun+0xe>
 80134f6:	3820      	subs	r0, #32
 80134f8:	b2c0      	uxtb	r0, r0
 80134fa:	4770      	bx	lr
 80134fc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013500:	2b05      	cmp	r3, #5
 8013502:	d801      	bhi.n	8013508 <__hexdig_fun+0x1a>
 8013504:	3847      	subs	r0, #71	; 0x47
 8013506:	e7f7      	b.n	80134f8 <__hexdig_fun+0xa>
 8013508:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801350c:	2b05      	cmp	r3, #5
 801350e:	d801      	bhi.n	8013514 <__hexdig_fun+0x26>
 8013510:	3827      	subs	r0, #39	; 0x27
 8013512:	e7f1      	b.n	80134f8 <__hexdig_fun+0xa>
 8013514:	2000      	movs	r0, #0
 8013516:	4770      	bx	lr

08013518 <__gethex>:
 8013518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801351c:	ed2d 8b02 	vpush	{d8}
 8013520:	b089      	sub	sp, #36	; 0x24
 8013522:	ee08 0a10 	vmov	s16, r0
 8013526:	9304      	str	r3, [sp, #16]
 8013528:	4bbc      	ldr	r3, [pc, #752]	; (801381c <__gethex+0x304>)
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	9301      	str	r3, [sp, #4]
 801352e:	4618      	mov	r0, r3
 8013530:	468b      	mov	fp, r1
 8013532:	4690      	mov	r8, r2
 8013534:	f7ec fede 	bl	80002f4 <strlen>
 8013538:	9b01      	ldr	r3, [sp, #4]
 801353a:	f8db 2000 	ldr.w	r2, [fp]
 801353e:	4403      	add	r3, r0
 8013540:	4682      	mov	sl, r0
 8013542:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8013546:	9305      	str	r3, [sp, #20]
 8013548:	1c93      	adds	r3, r2, #2
 801354a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801354e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013552:	32fe      	adds	r2, #254	; 0xfe
 8013554:	18d1      	adds	r1, r2, r3
 8013556:	461f      	mov	r7, r3
 8013558:	f813 0b01 	ldrb.w	r0, [r3], #1
 801355c:	9100      	str	r1, [sp, #0]
 801355e:	2830      	cmp	r0, #48	; 0x30
 8013560:	d0f8      	beq.n	8013554 <__gethex+0x3c>
 8013562:	f7ff ffc4 	bl	80134ee <__hexdig_fun>
 8013566:	4604      	mov	r4, r0
 8013568:	2800      	cmp	r0, #0
 801356a:	d13a      	bne.n	80135e2 <__gethex+0xca>
 801356c:	9901      	ldr	r1, [sp, #4]
 801356e:	4652      	mov	r2, sl
 8013570:	4638      	mov	r0, r7
 8013572:	f7fe f83b 	bl	80115ec <strncmp>
 8013576:	4605      	mov	r5, r0
 8013578:	2800      	cmp	r0, #0
 801357a:	d168      	bne.n	801364e <__gethex+0x136>
 801357c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8013580:	eb07 060a 	add.w	r6, r7, sl
 8013584:	f7ff ffb3 	bl	80134ee <__hexdig_fun>
 8013588:	2800      	cmp	r0, #0
 801358a:	d062      	beq.n	8013652 <__gethex+0x13a>
 801358c:	4633      	mov	r3, r6
 801358e:	7818      	ldrb	r0, [r3, #0]
 8013590:	2830      	cmp	r0, #48	; 0x30
 8013592:	461f      	mov	r7, r3
 8013594:	f103 0301 	add.w	r3, r3, #1
 8013598:	d0f9      	beq.n	801358e <__gethex+0x76>
 801359a:	f7ff ffa8 	bl	80134ee <__hexdig_fun>
 801359e:	2301      	movs	r3, #1
 80135a0:	fab0 f480 	clz	r4, r0
 80135a4:	0964      	lsrs	r4, r4, #5
 80135a6:	4635      	mov	r5, r6
 80135a8:	9300      	str	r3, [sp, #0]
 80135aa:	463a      	mov	r2, r7
 80135ac:	4616      	mov	r6, r2
 80135ae:	3201      	adds	r2, #1
 80135b0:	7830      	ldrb	r0, [r6, #0]
 80135b2:	f7ff ff9c 	bl	80134ee <__hexdig_fun>
 80135b6:	2800      	cmp	r0, #0
 80135b8:	d1f8      	bne.n	80135ac <__gethex+0x94>
 80135ba:	9901      	ldr	r1, [sp, #4]
 80135bc:	4652      	mov	r2, sl
 80135be:	4630      	mov	r0, r6
 80135c0:	f7fe f814 	bl	80115ec <strncmp>
 80135c4:	b980      	cbnz	r0, 80135e8 <__gethex+0xd0>
 80135c6:	b94d      	cbnz	r5, 80135dc <__gethex+0xc4>
 80135c8:	eb06 050a 	add.w	r5, r6, sl
 80135cc:	462a      	mov	r2, r5
 80135ce:	4616      	mov	r6, r2
 80135d0:	3201      	adds	r2, #1
 80135d2:	7830      	ldrb	r0, [r6, #0]
 80135d4:	f7ff ff8b 	bl	80134ee <__hexdig_fun>
 80135d8:	2800      	cmp	r0, #0
 80135da:	d1f8      	bne.n	80135ce <__gethex+0xb6>
 80135dc:	1bad      	subs	r5, r5, r6
 80135de:	00ad      	lsls	r5, r5, #2
 80135e0:	e004      	b.n	80135ec <__gethex+0xd4>
 80135e2:	2400      	movs	r4, #0
 80135e4:	4625      	mov	r5, r4
 80135e6:	e7e0      	b.n	80135aa <__gethex+0x92>
 80135e8:	2d00      	cmp	r5, #0
 80135ea:	d1f7      	bne.n	80135dc <__gethex+0xc4>
 80135ec:	7833      	ldrb	r3, [r6, #0]
 80135ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80135f2:	2b50      	cmp	r3, #80	; 0x50
 80135f4:	d13b      	bne.n	801366e <__gethex+0x156>
 80135f6:	7873      	ldrb	r3, [r6, #1]
 80135f8:	2b2b      	cmp	r3, #43	; 0x2b
 80135fa:	d02c      	beq.n	8013656 <__gethex+0x13e>
 80135fc:	2b2d      	cmp	r3, #45	; 0x2d
 80135fe:	d02e      	beq.n	801365e <__gethex+0x146>
 8013600:	1c71      	adds	r1, r6, #1
 8013602:	f04f 0900 	mov.w	r9, #0
 8013606:	7808      	ldrb	r0, [r1, #0]
 8013608:	f7ff ff71 	bl	80134ee <__hexdig_fun>
 801360c:	1e43      	subs	r3, r0, #1
 801360e:	b2db      	uxtb	r3, r3
 8013610:	2b18      	cmp	r3, #24
 8013612:	d82c      	bhi.n	801366e <__gethex+0x156>
 8013614:	f1a0 0210 	sub.w	r2, r0, #16
 8013618:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801361c:	f7ff ff67 	bl	80134ee <__hexdig_fun>
 8013620:	1e43      	subs	r3, r0, #1
 8013622:	b2db      	uxtb	r3, r3
 8013624:	2b18      	cmp	r3, #24
 8013626:	d91d      	bls.n	8013664 <__gethex+0x14c>
 8013628:	f1b9 0f00 	cmp.w	r9, #0
 801362c:	d000      	beq.n	8013630 <__gethex+0x118>
 801362e:	4252      	negs	r2, r2
 8013630:	4415      	add	r5, r2
 8013632:	f8cb 1000 	str.w	r1, [fp]
 8013636:	b1e4      	cbz	r4, 8013672 <__gethex+0x15a>
 8013638:	9b00      	ldr	r3, [sp, #0]
 801363a:	2b00      	cmp	r3, #0
 801363c:	bf14      	ite	ne
 801363e:	2700      	movne	r7, #0
 8013640:	2706      	moveq	r7, #6
 8013642:	4638      	mov	r0, r7
 8013644:	b009      	add	sp, #36	; 0x24
 8013646:	ecbd 8b02 	vpop	{d8}
 801364a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801364e:	463e      	mov	r6, r7
 8013650:	4625      	mov	r5, r4
 8013652:	2401      	movs	r4, #1
 8013654:	e7ca      	b.n	80135ec <__gethex+0xd4>
 8013656:	f04f 0900 	mov.w	r9, #0
 801365a:	1cb1      	adds	r1, r6, #2
 801365c:	e7d3      	b.n	8013606 <__gethex+0xee>
 801365e:	f04f 0901 	mov.w	r9, #1
 8013662:	e7fa      	b.n	801365a <__gethex+0x142>
 8013664:	230a      	movs	r3, #10
 8013666:	fb03 0202 	mla	r2, r3, r2, r0
 801366a:	3a10      	subs	r2, #16
 801366c:	e7d4      	b.n	8013618 <__gethex+0x100>
 801366e:	4631      	mov	r1, r6
 8013670:	e7df      	b.n	8013632 <__gethex+0x11a>
 8013672:	1bf3      	subs	r3, r6, r7
 8013674:	3b01      	subs	r3, #1
 8013676:	4621      	mov	r1, r4
 8013678:	2b07      	cmp	r3, #7
 801367a:	dc0b      	bgt.n	8013694 <__gethex+0x17c>
 801367c:	ee18 0a10 	vmov	r0, s16
 8013680:	f000 fadc 	bl	8013c3c <_Balloc>
 8013684:	4604      	mov	r4, r0
 8013686:	b940      	cbnz	r0, 801369a <__gethex+0x182>
 8013688:	4b65      	ldr	r3, [pc, #404]	; (8013820 <__gethex+0x308>)
 801368a:	4602      	mov	r2, r0
 801368c:	21de      	movs	r1, #222	; 0xde
 801368e:	4865      	ldr	r0, [pc, #404]	; (8013824 <__gethex+0x30c>)
 8013690:	f7fc fdce 	bl	8010230 <__assert_func>
 8013694:	3101      	adds	r1, #1
 8013696:	105b      	asrs	r3, r3, #1
 8013698:	e7ee      	b.n	8013678 <__gethex+0x160>
 801369a:	f100 0914 	add.w	r9, r0, #20
 801369e:	f04f 0b00 	mov.w	fp, #0
 80136a2:	f1ca 0301 	rsb	r3, sl, #1
 80136a6:	f8cd 9008 	str.w	r9, [sp, #8]
 80136aa:	f8cd b000 	str.w	fp, [sp]
 80136ae:	9306      	str	r3, [sp, #24]
 80136b0:	42b7      	cmp	r7, r6
 80136b2:	d340      	bcc.n	8013736 <__gethex+0x21e>
 80136b4:	9802      	ldr	r0, [sp, #8]
 80136b6:	9b00      	ldr	r3, [sp, #0]
 80136b8:	f840 3b04 	str.w	r3, [r0], #4
 80136bc:	eba0 0009 	sub.w	r0, r0, r9
 80136c0:	1080      	asrs	r0, r0, #2
 80136c2:	0146      	lsls	r6, r0, #5
 80136c4:	6120      	str	r0, [r4, #16]
 80136c6:	4618      	mov	r0, r3
 80136c8:	f000 fbae 	bl	8013e28 <__hi0bits>
 80136cc:	1a30      	subs	r0, r6, r0
 80136ce:	f8d8 6000 	ldr.w	r6, [r8]
 80136d2:	42b0      	cmp	r0, r6
 80136d4:	dd63      	ble.n	801379e <__gethex+0x286>
 80136d6:	1b87      	subs	r7, r0, r6
 80136d8:	4639      	mov	r1, r7
 80136da:	4620      	mov	r0, r4
 80136dc:	f000 ff49 	bl	8014572 <__any_on>
 80136e0:	4682      	mov	sl, r0
 80136e2:	b1a8      	cbz	r0, 8013710 <__gethex+0x1f8>
 80136e4:	1e7b      	subs	r3, r7, #1
 80136e6:	1159      	asrs	r1, r3, #5
 80136e8:	f003 021f 	and.w	r2, r3, #31
 80136ec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80136f0:	f04f 0a01 	mov.w	sl, #1
 80136f4:	fa0a f202 	lsl.w	r2, sl, r2
 80136f8:	420a      	tst	r2, r1
 80136fa:	d009      	beq.n	8013710 <__gethex+0x1f8>
 80136fc:	4553      	cmp	r3, sl
 80136fe:	dd05      	ble.n	801370c <__gethex+0x1f4>
 8013700:	1eb9      	subs	r1, r7, #2
 8013702:	4620      	mov	r0, r4
 8013704:	f000 ff35 	bl	8014572 <__any_on>
 8013708:	2800      	cmp	r0, #0
 801370a:	d145      	bne.n	8013798 <__gethex+0x280>
 801370c:	f04f 0a02 	mov.w	sl, #2
 8013710:	4639      	mov	r1, r7
 8013712:	4620      	mov	r0, r4
 8013714:	f7ff fe99 	bl	801344a <rshift>
 8013718:	443d      	add	r5, r7
 801371a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801371e:	42ab      	cmp	r3, r5
 8013720:	da4c      	bge.n	80137bc <__gethex+0x2a4>
 8013722:	ee18 0a10 	vmov	r0, s16
 8013726:	4621      	mov	r1, r4
 8013728:	f000 fac8 	bl	8013cbc <_Bfree>
 801372c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801372e:	2300      	movs	r3, #0
 8013730:	6013      	str	r3, [r2, #0]
 8013732:	27a3      	movs	r7, #163	; 0xa3
 8013734:	e785      	b.n	8013642 <__gethex+0x12a>
 8013736:	1e73      	subs	r3, r6, #1
 8013738:	9a05      	ldr	r2, [sp, #20]
 801373a:	9303      	str	r3, [sp, #12]
 801373c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013740:	4293      	cmp	r3, r2
 8013742:	d019      	beq.n	8013778 <__gethex+0x260>
 8013744:	f1bb 0f20 	cmp.w	fp, #32
 8013748:	d107      	bne.n	801375a <__gethex+0x242>
 801374a:	9b02      	ldr	r3, [sp, #8]
 801374c:	9a00      	ldr	r2, [sp, #0]
 801374e:	f843 2b04 	str.w	r2, [r3], #4
 8013752:	9302      	str	r3, [sp, #8]
 8013754:	2300      	movs	r3, #0
 8013756:	9300      	str	r3, [sp, #0]
 8013758:	469b      	mov	fp, r3
 801375a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801375e:	f7ff fec6 	bl	80134ee <__hexdig_fun>
 8013762:	9b00      	ldr	r3, [sp, #0]
 8013764:	f000 000f 	and.w	r0, r0, #15
 8013768:	fa00 f00b 	lsl.w	r0, r0, fp
 801376c:	4303      	orrs	r3, r0
 801376e:	9300      	str	r3, [sp, #0]
 8013770:	f10b 0b04 	add.w	fp, fp, #4
 8013774:	9b03      	ldr	r3, [sp, #12]
 8013776:	e00d      	b.n	8013794 <__gethex+0x27c>
 8013778:	9b03      	ldr	r3, [sp, #12]
 801377a:	9a06      	ldr	r2, [sp, #24]
 801377c:	4413      	add	r3, r2
 801377e:	42bb      	cmp	r3, r7
 8013780:	d3e0      	bcc.n	8013744 <__gethex+0x22c>
 8013782:	4618      	mov	r0, r3
 8013784:	9901      	ldr	r1, [sp, #4]
 8013786:	9307      	str	r3, [sp, #28]
 8013788:	4652      	mov	r2, sl
 801378a:	f7fd ff2f 	bl	80115ec <strncmp>
 801378e:	9b07      	ldr	r3, [sp, #28]
 8013790:	2800      	cmp	r0, #0
 8013792:	d1d7      	bne.n	8013744 <__gethex+0x22c>
 8013794:	461e      	mov	r6, r3
 8013796:	e78b      	b.n	80136b0 <__gethex+0x198>
 8013798:	f04f 0a03 	mov.w	sl, #3
 801379c:	e7b8      	b.n	8013710 <__gethex+0x1f8>
 801379e:	da0a      	bge.n	80137b6 <__gethex+0x29e>
 80137a0:	1a37      	subs	r7, r6, r0
 80137a2:	4621      	mov	r1, r4
 80137a4:	ee18 0a10 	vmov	r0, s16
 80137a8:	463a      	mov	r2, r7
 80137aa:	f000 fca3 	bl	80140f4 <__lshift>
 80137ae:	1bed      	subs	r5, r5, r7
 80137b0:	4604      	mov	r4, r0
 80137b2:	f100 0914 	add.w	r9, r0, #20
 80137b6:	f04f 0a00 	mov.w	sl, #0
 80137ba:	e7ae      	b.n	801371a <__gethex+0x202>
 80137bc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80137c0:	42a8      	cmp	r0, r5
 80137c2:	dd72      	ble.n	80138aa <__gethex+0x392>
 80137c4:	1b45      	subs	r5, r0, r5
 80137c6:	42ae      	cmp	r6, r5
 80137c8:	dc36      	bgt.n	8013838 <__gethex+0x320>
 80137ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80137ce:	2b02      	cmp	r3, #2
 80137d0:	d02a      	beq.n	8013828 <__gethex+0x310>
 80137d2:	2b03      	cmp	r3, #3
 80137d4:	d02c      	beq.n	8013830 <__gethex+0x318>
 80137d6:	2b01      	cmp	r3, #1
 80137d8:	d115      	bne.n	8013806 <__gethex+0x2ee>
 80137da:	42ae      	cmp	r6, r5
 80137dc:	d113      	bne.n	8013806 <__gethex+0x2ee>
 80137de:	2e01      	cmp	r6, #1
 80137e0:	d10b      	bne.n	80137fa <__gethex+0x2e2>
 80137e2:	9a04      	ldr	r2, [sp, #16]
 80137e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80137e8:	6013      	str	r3, [r2, #0]
 80137ea:	2301      	movs	r3, #1
 80137ec:	6123      	str	r3, [r4, #16]
 80137ee:	f8c9 3000 	str.w	r3, [r9]
 80137f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80137f4:	2762      	movs	r7, #98	; 0x62
 80137f6:	601c      	str	r4, [r3, #0]
 80137f8:	e723      	b.n	8013642 <__gethex+0x12a>
 80137fa:	1e71      	subs	r1, r6, #1
 80137fc:	4620      	mov	r0, r4
 80137fe:	f000 feb8 	bl	8014572 <__any_on>
 8013802:	2800      	cmp	r0, #0
 8013804:	d1ed      	bne.n	80137e2 <__gethex+0x2ca>
 8013806:	ee18 0a10 	vmov	r0, s16
 801380a:	4621      	mov	r1, r4
 801380c:	f000 fa56 	bl	8013cbc <_Bfree>
 8013810:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013812:	2300      	movs	r3, #0
 8013814:	6013      	str	r3, [r2, #0]
 8013816:	2750      	movs	r7, #80	; 0x50
 8013818:	e713      	b.n	8013642 <__gethex+0x12a>
 801381a:	bf00      	nop
 801381c:	0801df9c 	.word	0x0801df9c
 8013820:	0801debc 	.word	0x0801debc
 8013824:	0801df30 	.word	0x0801df30
 8013828:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801382a:	2b00      	cmp	r3, #0
 801382c:	d1eb      	bne.n	8013806 <__gethex+0x2ee>
 801382e:	e7d8      	b.n	80137e2 <__gethex+0x2ca>
 8013830:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013832:	2b00      	cmp	r3, #0
 8013834:	d1d5      	bne.n	80137e2 <__gethex+0x2ca>
 8013836:	e7e6      	b.n	8013806 <__gethex+0x2ee>
 8013838:	1e6f      	subs	r7, r5, #1
 801383a:	f1ba 0f00 	cmp.w	sl, #0
 801383e:	d131      	bne.n	80138a4 <__gethex+0x38c>
 8013840:	b127      	cbz	r7, 801384c <__gethex+0x334>
 8013842:	4639      	mov	r1, r7
 8013844:	4620      	mov	r0, r4
 8013846:	f000 fe94 	bl	8014572 <__any_on>
 801384a:	4682      	mov	sl, r0
 801384c:	117b      	asrs	r3, r7, #5
 801384e:	2101      	movs	r1, #1
 8013850:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8013854:	f007 071f 	and.w	r7, r7, #31
 8013858:	fa01 f707 	lsl.w	r7, r1, r7
 801385c:	421f      	tst	r7, r3
 801385e:	4629      	mov	r1, r5
 8013860:	4620      	mov	r0, r4
 8013862:	bf18      	it	ne
 8013864:	f04a 0a02 	orrne.w	sl, sl, #2
 8013868:	1b76      	subs	r6, r6, r5
 801386a:	f7ff fdee 	bl	801344a <rshift>
 801386e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013872:	2702      	movs	r7, #2
 8013874:	f1ba 0f00 	cmp.w	sl, #0
 8013878:	d048      	beq.n	801390c <__gethex+0x3f4>
 801387a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801387e:	2b02      	cmp	r3, #2
 8013880:	d015      	beq.n	80138ae <__gethex+0x396>
 8013882:	2b03      	cmp	r3, #3
 8013884:	d017      	beq.n	80138b6 <__gethex+0x39e>
 8013886:	2b01      	cmp	r3, #1
 8013888:	d109      	bne.n	801389e <__gethex+0x386>
 801388a:	f01a 0f02 	tst.w	sl, #2
 801388e:	d006      	beq.n	801389e <__gethex+0x386>
 8013890:	f8d9 0000 	ldr.w	r0, [r9]
 8013894:	ea4a 0a00 	orr.w	sl, sl, r0
 8013898:	f01a 0f01 	tst.w	sl, #1
 801389c:	d10e      	bne.n	80138bc <__gethex+0x3a4>
 801389e:	f047 0710 	orr.w	r7, r7, #16
 80138a2:	e033      	b.n	801390c <__gethex+0x3f4>
 80138a4:	f04f 0a01 	mov.w	sl, #1
 80138a8:	e7d0      	b.n	801384c <__gethex+0x334>
 80138aa:	2701      	movs	r7, #1
 80138ac:	e7e2      	b.n	8013874 <__gethex+0x35c>
 80138ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80138b0:	f1c3 0301 	rsb	r3, r3, #1
 80138b4:	9315      	str	r3, [sp, #84]	; 0x54
 80138b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d0f0      	beq.n	801389e <__gethex+0x386>
 80138bc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80138c0:	f104 0314 	add.w	r3, r4, #20
 80138c4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80138c8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80138cc:	f04f 0c00 	mov.w	ip, #0
 80138d0:	4618      	mov	r0, r3
 80138d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80138d6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80138da:	d01c      	beq.n	8013916 <__gethex+0x3fe>
 80138dc:	3201      	adds	r2, #1
 80138de:	6002      	str	r2, [r0, #0]
 80138e0:	2f02      	cmp	r7, #2
 80138e2:	f104 0314 	add.w	r3, r4, #20
 80138e6:	d13f      	bne.n	8013968 <__gethex+0x450>
 80138e8:	f8d8 2000 	ldr.w	r2, [r8]
 80138ec:	3a01      	subs	r2, #1
 80138ee:	42b2      	cmp	r2, r6
 80138f0:	d10a      	bne.n	8013908 <__gethex+0x3f0>
 80138f2:	1171      	asrs	r1, r6, #5
 80138f4:	2201      	movs	r2, #1
 80138f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80138fa:	f006 061f 	and.w	r6, r6, #31
 80138fe:	fa02 f606 	lsl.w	r6, r2, r6
 8013902:	421e      	tst	r6, r3
 8013904:	bf18      	it	ne
 8013906:	4617      	movne	r7, r2
 8013908:	f047 0720 	orr.w	r7, r7, #32
 801390c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801390e:	601c      	str	r4, [r3, #0]
 8013910:	9b04      	ldr	r3, [sp, #16]
 8013912:	601d      	str	r5, [r3, #0]
 8013914:	e695      	b.n	8013642 <__gethex+0x12a>
 8013916:	4299      	cmp	r1, r3
 8013918:	f843 cc04 	str.w	ip, [r3, #-4]
 801391c:	d8d8      	bhi.n	80138d0 <__gethex+0x3b8>
 801391e:	68a3      	ldr	r3, [r4, #8]
 8013920:	459b      	cmp	fp, r3
 8013922:	db19      	blt.n	8013958 <__gethex+0x440>
 8013924:	6861      	ldr	r1, [r4, #4]
 8013926:	ee18 0a10 	vmov	r0, s16
 801392a:	3101      	adds	r1, #1
 801392c:	f000 f986 	bl	8013c3c <_Balloc>
 8013930:	4681      	mov	r9, r0
 8013932:	b918      	cbnz	r0, 801393c <__gethex+0x424>
 8013934:	4b1a      	ldr	r3, [pc, #104]	; (80139a0 <__gethex+0x488>)
 8013936:	4602      	mov	r2, r0
 8013938:	2184      	movs	r1, #132	; 0x84
 801393a:	e6a8      	b.n	801368e <__gethex+0x176>
 801393c:	6922      	ldr	r2, [r4, #16]
 801393e:	3202      	adds	r2, #2
 8013940:	f104 010c 	add.w	r1, r4, #12
 8013944:	0092      	lsls	r2, r2, #2
 8013946:	300c      	adds	r0, #12
 8013948:	f7fc fcdc 	bl	8010304 <memcpy>
 801394c:	4621      	mov	r1, r4
 801394e:	ee18 0a10 	vmov	r0, s16
 8013952:	f000 f9b3 	bl	8013cbc <_Bfree>
 8013956:	464c      	mov	r4, r9
 8013958:	6923      	ldr	r3, [r4, #16]
 801395a:	1c5a      	adds	r2, r3, #1
 801395c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013960:	6122      	str	r2, [r4, #16]
 8013962:	2201      	movs	r2, #1
 8013964:	615a      	str	r2, [r3, #20]
 8013966:	e7bb      	b.n	80138e0 <__gethex+0x3c8>
 8013968:	6922      	ldr	r2, [r4, #16]
 801396a:	455a      	cmp	r2, fp
 801396c:	dd0b      	ble.n	8013986 <__gethex+0x46e>
 801396e:	2101      	movs	r1, #1
 8013970:	4620      	mov	r0, r4
 8013972:	f7ff fd6a 	bl	801344a <rshift>
 8013976:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801397a:	3501      	adds	r5, #1
 801397c:	42ab      	cmp	r3, r5
 801397e:	f6ff aed0 	blt.w	8013722 <__gethex+0x20a>
 8013982:	2701      	movs	r7, #1
 8013984:	e7c0      	b.n	8013908 <__gethex+0x3f0>
 8013986:	f016 061f 	ands.w	r6, r6, #31
 801398a:	d0fa      	beq.n	8013982 <__gethex+0x46a>
 801398c:	449a      	add	sl, r3
 801398e:	f1c6 0620 	rsb	r6, r6, #32
 8013992:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8013996:	f000 fa47 	bl	8013e28 <__hi0bits>
 801399a:	42b0      	cmp	r0, r6
 801399c:	dbe7      	blt.n	801396e <__gethex+0x456>
 801399e:	e7f0      	b.n	8013982 <__gethex+0x46a>
 80139a0:	0801debc 	.word	0x0801debc

080139a4 <L_shift>:
 80139a4:	f1c2 0208 	rsb	r2, r2, #8
 80139a8:	0092      	lsls	r2, r2, #2
 80139aa:	b570      	push	{r4, r5, r6, lr}
 80139ac:	f1c2 0620 	rsb	r6, r2, #32
 80139b0:	6843      	ldr	r3, [r0, #4]
 80139b2:	6804      	ldr	r4, [r0, #0]
 80139b4:	fa03 f506 	lsl.w	r5, r3, r6
 80139b8:	432c      	orrs	r4, r5
 80139ba:	40d3      	lsrs	r3, r2
 80139bc:	6004      	str	r4, [r0, #0]
 80139be:	f840 3f04 	str.w	r3, [r0, #4]!
 80139c2:	4288      	cmp	r0, r1
 80139c4:	d3f4      	bcc.n	80139b0 <L_shift+0xc>
 80139c6:	bd70      	pop	{r4, r5, r6, pc}

080139c8 <__match>:
 80139c8:	b530      	push	{r4, r5, lr}
 80139ca:	6803      	ldr	r3, [r0, #0]
 80139cc:	3301      	adds	r3, #1
 80139ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80139d2:	b914      	cbnz	r4, 80139da <__match+0x12>
 80139d4:	6003      	str	r3, [r0, #0]
 80139d6:	2001      	movs	r0, #1
 80139d8:	bd30      	pop	{r4, r5, pc}
 80139da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80139de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80139e2:	2d19      	cmp	r5, #25
 80139e4:	bf98      	it	ls
 80139e6:	3220      	addls	r2, #32
 80139e8:	42a2      	cmp	r2, r4
 80139ea:	d0f0      	beq.n	80139ce <__match+0x6>
 80139ec:	2000      	movs	r0, #0
 80139ee:	e7f3      	b.n	80139d8 <__match+0x10>

080139f0 <__hexnan>:
 80139f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139f4:	680b      	ldr	r3, [r1, #0]
 80139f6:	6801      	ldr	r1, [r0, #0]
 80139f8:	115e      	asrs	r6, r3, #5
 80139fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80139fe:	f013 031f 	ands.w	r3, r3, #31
 8013a02:	b087      	sub	sp, #28
 8013a04:	bf18      	it	ne
 8013a06:	3604      	addne	r6, #4
 8013a08:	2500      	movs	r5, #0
 8013a0a:	1f37      	subs	r7, r6, #4
 8013a0c:	4682      	mov	sl, r0
 8013a0e:	4690      	mov	r8, r2
 8013a10:	9301      	str	r3, [sp, #4]
 8013a12:	f846 5c04 	str.w	r5, [r6, #-4]
 8013a16:	46b9      	mov	r9, r7
 8013a18:	463c      	mov	r4, r7
 8013a1a:	9502      	str	r5, [sp, #8]
 8013a1c:	46ab      	mov	fp, r5
 8013a1e:	784a      	ldrb	r2, [r1, #1]
 8013a20:	1c4b      	adds	r3, r1, #1
 8013a22:	9303      	str	r3, [sp, #12]
 8013a24:	b342      	cbz	r2, 8013a78 <__hexnan+0x88>
 8013a26:	4610      	mov	r0, r2
 8013a28:	9105      	str	r1, [sp, #20]
 8013a2a:	9204      	str	r2, [sp, #16]
 8013a2c:	f7ff fd5f 	bl	80134ee <__hexdig_fun>
 8013a30:	2800      	cmp	r0, #0
 8013a32:	d14f      	bne.n	8013ad4 <__hexnan+0xe4>
 8013a34:	9a04      	ldr	r2, [sp, #16]
 8013a36:	9905      	ldr	r1, [sp, #20]
 8013a38:	2a20      	cmp	r2, #32
 8013a3a:	d818      	bhi.n	8013a6e <__hexnan+0x7e>
 8013a3c:	9b02      	ldr	r3, [sp, #8]
 8013a3e:	459b      	cmp	fp, r3
 8013a40:	dd13      	ble.n	8013a6a <__hexnan+0x7a>
 8013a42:	454c      	cmp	r4, r9
 8013a44:	d206      	bcs.n	8013a54 <__hexnan+0x64>
 8013a46:	2d07      	cmp	r5, #7
 8013a48:	dc04      	bgt.n	8013a54 <__hexnan+0x64>
 8013a4a:	462a      	mov	r2, r5
 8013a4c:	4649      	mov	r1, r9
 8013a4e:	4620      	mov	r0, r4
 8013a50:	f7ff ffa8 	bl	80139a4 <L_shift>
 8013a54:	4544      	cmp	r4, r8
 8013a56:	d950      	bls.n	8013afa <__hexnan+0x10a>
 8013a58:	2300      	movs	r3, #0
 8013a5a:	f1a4 0904 	sub.w	r9, r4, #4
 8013a5e:	f844 3c04 	str.w	r3, [r4, #-4]
 8013a62:	f8cd b008 	str.w	fp, [sp, #8]
 8013a66:	464c      	mov	r4, r9
 8013a68:	461d      	mov	r5, r3
 8013a6a:	9903      	ldr	r1, [sp, #12]
 8013a6c:	e7d7      	b.n	8013a1e <__hexnan+0x2e>
 8013a6e:	2a29      	cmp	r2, #41	; 0x29
 8013a70:	d156      	bne.n	8013b20 <__hexnan+0x130>
 8013a72:	3102      	adds	r1, #2
 8013a74:	f8ca 1000 	str.w	r1, [sl]
 8013a78:	f1bb 0f00 	cmp.w	fp, #0
 8013a7c:	d050      	beq.n	8013b20 <__hexnan+0x130>
 8013a7e:	454c      	cmp	r4, r9
 8013a80:	d206      	bcs.n	8013a90 <__hexnan+0xa0>
 8013a82:	2d07      	cmp	r5, #7
 8013a84:	dc04      	bgt.n	8013a90 <__hexnan+0xa0>
 8013a86:	462a      	mov	r2, r5
 8013a88:	4649      	mov	r1, r9
 8013a8a:	4620      	mov	r0, r4
 8013a8c:	f7ff ff8a 	bl	80139a4 <L_shift>
 8013a90:	4544      	cmp	r4, r8
 8013a92:	d934      	bls.n	8013afe <__hexnan+0x10e>
 8013a94:	f1a8 0204 	sub.w	r2, r8, #4
 8013a98:	4623      	mov	r3, r4
 8013a9a:	f853 1b04 	ldr.w	r1, [r3], #4
 8013a9e:	f842 1f04 	str.w	r1, [r2, #4]!
 8013aa2:	429f      	cmp	r7, r3
 8013aa4:	d2f9      	bcs.n	8013a9a <__hexnan+0xaa>
 8013aa6:	1b3b      	subs	r3, r7, r4
 8013aa8:	f023 0303 	bic.w	r3, r3, #3
 8013aac:	3304      	adds	r3, #4
 8013aae:	3401      	adds	r4, #1
 8013ab0:	3e03      	subs	r6, #3
 8013ab2:	42b4      	cmp	r4, r6
 8013ab4:	bf88      	it	hi
 8013ab6:	2304      	movhi	r3, #4
 8013ab8:	4443      	add	r3, r8
 8013aba:	2200      	movs	r2, #0
 8013abc:	f843 2b04 	str.w	r2, [r3], #4
 8013ac0:	429f      	cmp	r7, r3
 8013ac2:	d2fb      	bcs.n	8013abc <__hexnan+0xcc>
 8013ac4:	683b      	ldr	r3, [r7, #0]
 8013ac6:	b91b      	cbnz	r3, 8013ad0 <__hexnan+0xe0>
 8013ac8:	4547      	cmp	r7, r8
 8013aca:	d127      	bne.n	8013b1c <__hexnan+0x12c>
 8013acc:	2301      	movs	r3, #1
 8013ace:	603b      	str	r3, [r7, #0]
 8013ad0:	2005      	movs	r0, #5
 8013ad2:	e026      	b.n	8013b22 <__hexnan+0x132>
 8013ad4:	3501      	adds	r5, #1
 8013ad6:	2d08      	cmp	r5, #8
 8013ad8:	f10b 0b01 	add.w	fp, fp, #1
 8013adc:	dd06      	ble.n	8013aec <__hexnan+0xfc>
 8013ade:	4544      	cmp	r4, r8
 8013ae0:	d9c3      	bls.n	8013a6a <__hexnan+0x7a>
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	f844 3c04 	str.w	r3, [r4, #-4]
 8013ae8:	2501      	movs	r5, #1
 8013aea:	3c04      	subs	r4, #4
 8013aec:	6822      	ldr	r2, [r4, #0]
 8013aee:	f000 000f 	and.w	r0, r0, #15
 8013af2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8013af6:	6022      	str	r2, [r4, #0]
 8013af8:	e7b7      	b.n	8013a6a <__hexnan+0x7a>
 8013afa:	2508      	movs	r5, #8
 8013afc:	e7b5      	b.n	8013a6a <__hexnan+0x7a>
 8013afe:	9b01      	ldr	r3, [sp, #4]
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d0df      	beq.n	8013ac4 <__hexnan+0xd4>
 8013b04:	f04f 32ff 	mov.w	r2, #4294967295
 8013b08:	f1c3 0320 	rsb	r3, r3, #32
 8013b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8013b10:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013b14:	401a      	ands	r2, r3
 8013b16:	f846 2c04 	str.w	r2, [r6, #-4]
 8013b1a:	e7d3      	b.n	8013ac4 <__hexnan+0xd4>
 8013b1c:	3f04      	subs	r7, #4
 8013b1e:	e7d1      	b.n	8013ac4 <__hexnan+0xd4>
 8013b20:	2004      	movs	r0, #4
 8013b22:	b007      	add	sp, #28
 8013b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013b28 <_localeconv_r>:
 8013b28:	4800      	ldr	r0, [pc, #0]	; (8013b2c <_localeconv_r+0x4>)
 8013b2a:	4770      	bx	lr
 8013b2c:	2400a248 	.word	0x2400a248

08013b30 <__retarget_lock_init_recursive>:
 8013b30:	4770      	bx	lr

08013b32 <__retarget_lock_acquire_recursive>:
 8013b32:	4770      	bx	lr

08013b34 <__retarget_lock_release_recursive>:
 8013b34:	4770      	bx	lr

08013b36 <__swhatbuf_r>:
 8013b36:	b570      	push	{r4, r5, r6, lr}
 8013b38:	460e      	mov	r6, r1
 8013b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b3e:	2900      	cmp	r1, #0
 8013b40:	b096      	sub	sp, #88	; 0x58
 8013b42:	4614      	mov	r4, r2
 8013b44:	461d      	mov	r5, r3
 8013b46:	da07      	bge.n	8013b58 <__swhatbuf_r+0x22>
 8013b48:	2300      	movs	r3, #0
 8013b4a:	602b      	str	r3, [r5, #0]
 8013b4c:	89b3      	ldrh	r3, [r6, #12]
 8013b4e:	061a      	lsls	r2, r3, #24
 8013b50:	d410      	bmi.n	8013b74 <__swhatbuf_r+0x3e>
 8013b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013b56:	e00e      	b.n	8013b76 <__swhatbuf_r+0x40>
 8013b58:	466a      	mov	r2, sp
 8013b5a:	f000 ff7b 	bl	8014a54 <_fstat_r>
 8013b5e:	2800      	cmp	r0, #0
 8013b60:	dbf2      	blt.n	8013b48 <__swhatbuf_r+0x12>
 8013b62:	9a01      	ldr	r2, [sp, #4]
 8013b64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013b68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013b6c:	425a      	negs	r2, r3
 8013b6e:	415a      	adcs	r2, r3
 8013b70:	602a      	str	r2, [r5, #0]
 8013b72:	e7ee      	b.n	8013b52 <__swhatbuf_r+0x1c>
 8013b74:	2340      	movs	r3, #64	; 0x40
 8013b76:	2000      	movs	r0, #0
 8013b78:	6023      	str	r3, [r4, #0]
 8013b7a:	b016      	add	sp, #88	; 0x58
 8013b7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08013b80 <__smakebuf_r>:
 8013b80:	898b      	ldrh	r3, [r1, #12]
 8013b82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013b84:	079d      	lsls	r5, r3, #30
 8013b86:	4606      	mov	r6, r0
 8013b88:	460c      	mov	r4, r1
 8013b8a:	d507      	bpl.n	8013b9c <__smakebuf_r+0x1c>
 8013b8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013b90:	6023      	str	r3, [r4, #0]
 8013b92:	6123      	str	r3, [r4, #16]
 8013b94:	2301      	movs	r3, #1
 8013b96:	6163      	str	r3, [r4, #20]
 8013b98:	b002      	add	sp, #8
 8013b9a:	bd70      	pop	{r4, r5, r6, pc}
 8013b9c:	ab01      	add	r3, sp, #4
 8013b9e:	466a      	mov	r2, sp
 8013ba0:	f7ff ffc9 	bl	8013b36 <__swhatbuf_r>
 8013ba4:	9900      	ldr	r1, [sp, #0]
 8013ba6:	4605      	mov	r5, r0
 8013ba8:	4630      	mov	r0, r6
 8013baa:	f7fc fc2b 	bl	8010404 <_malloc_r>
 8013bae:	b948      	cbnz	r0, 8013bc4 <__smakebuf_r+0x44>
 8013bb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013bb4:	059a      	lsls	r2, r3, #22
 8013bb6:	d4ef      	bmi.n	8013b98 <__smakebuf_r+0x18>
 8013bb8:	f023 0303 	bic.w	r3, r3, #3
 8013bbc:	f043 0302 	orr.w	r3, r3, #2
 8013bc0:	81a3      	strh	r3, [r4, #12]
 8013bc2:	e7e3      	b.n	8013b8c <__smakebuf_r+0xc>
 8013bc4:	4b0d      	ldr	r3, [pc, #52]	; (8013bfc <__smakebuf_r+0x7c>)
 8013bc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8013bc8:	89a3      	ldrh	r3, [r4, #12]
 8013bca:	6020      	str	r0, [r4, #0]
 8013bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013bd0:	81a3      	strh	r3, [r4, #12]
 8013bd2:	9b00      	ldr	r3, [sp, #0]
 8013bd4:	6163      	str	r3, [r4, #20]
 8013bd6:	9b01      	ldr	r3, [sp, #4]
 8013bd8:	6120      	str	r0, [r4, #16]
 8013bda:	b15b      	cbz	r3, 8013bf4 <__smakebuf_r+0x74>
 8013bdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013be0:	4630      	mov	r0, r6
 8013be2:	f000 ff49 	bl	8014a78 <_isatty_r>
 8013be6:	b128      	cbz	r0, 8013bf4 <__smakebuf_r+0x74>
 8013be8:	89a3      	ldrh	r3, [r4, #12]
 8013bea:	f023 0303 	bic.w	r3, r3, #3
 8013bee:	f043 0301 	orr.w	r3, r3, #1
 8013bf2:	81a3      	strh	r3, [r4, #12]
 8013bf4:	89a0      	ldrh	r0, [r4, #12]
 8013bf6:	4305      	orrs	r5, r0
 8013bf8:	81a5      	strh	r5, [r4, #12]
 8013bfa:	e7cd      	b.n	8013b98 <__smakebuf_r+0x18>
 8013bfc:	080132a9 	.word	0x080132a9

08013c00 <__ascii_mbtowc>:
 8013c00:	b082      	sub	sp, #8
 8013c02:	b901      	cbnz	r1, 8013c06 <__ascii_mbtowc+0x6>
 8013c04:	a901      	add	r1, sp, #4
 8013c06:	b142      	cbz	r2, 8013c1a <__ascii_mbtowc+0x1a>
 8013c08:	b14b      	cbz	r3, 8013c1e <__ascii_mbtowc+0x1e>
 8013c0a:	7813      	ldrb	r3, [r2, #0]
 8013c0c:	600b      	str	r3, [r1, #0]
 8013c0e:	7812      	ldrb	r2, [r2, #0]
 8013c10:	1e10      	subs	r0, r2, #0
 8013c12:	bf18      	it	ne
 8013c14:	2001      	movne	r0, #1
 8013c16:	b002      	add	sp, #8
 8013c18:	4770      	bx	lr
 8013c1a:	4610      	mov	r0, r2
 8013c1c:	e7fb      	b.n	8013c16 <__ascii_mbtowc+0x16>
 8013c1e:	f06f 0001 	mvn.w	r0, #1
 8013c22:	e7f8      	b.n	8013c16 <__ascii_mbtowc+0x16>

08013c24 <__malloc_lock>:
 8013c24:	4801      	ldr	r0, [pc, #4]	; (8013c2c <__malloc_lock+0x8>)
 8013c26:	f7ff bf84 	b.w	8013b32 <__retarget_lock_acquire_recursive>
 8013c2a:	bf00      	nop
 8013c2c:	2400f6a4 	.word	0x2400f6a4

08013c30 <__malloc_unlock>:
 8013c30:	4801      	ldr	r0, [pc, #4]	; (8013c38 <__malloc_unlock+0x8>)
 8013c32:	f7ff bf7f 	b.w	8013b34 <__retarget_lock_release_recursive>
 8013c36:	bf00      	nop
 8013c38:	2400f6a4 	.word	0x2400f6a4

08013c3c <_Balloc>:
 8013c3c:	b570      	push	{r4, r5, r6, lr}
 8013c3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013c40:	4604      	mov	r4, r0
 8013c42:	460d      	mov	r5, r1
 8013c44:	b976      	cbnz	r6, 8013c64 <_Balloc+0x28>
 8013c46:	2010      	movs	r0, #16
 8013c48:	f7fc fb4c 	bl	80102e4 <malloc>
 8013c4c:	4602      	mov	r2, r0
 8013c4e:	6260      	str	r0, [r4, #36]	; 0x24
 8013c50:	b920      	cbnz	r0, 8013c5c <_Balloc+0x20>
 8013c52:	4b18      	ldr	r3, [pc, #96]	; (8013cb4 <_Balloc+0x78>)
 8013c54:	4818      	ldr	r0, [pc, #96]	; (8013cb8 <_Balloc+0x7c>)
 8013c56:	2166      	movs	r1, #102	; 0x66
 8013c58:	f7fc faea 	bl	8010230 <__assert_func>
 8013c5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013c60:	6006      	str	r6, [r0, #0]
 8013c62:	60c6      	str	r6, [r0, #12]
 8013c64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013c66:	68f3      	ldr	r3, [r6, #12]
 8013c68:	b183      	cbz	r3, 8013c8c <_Balloc+0x50>
 8013c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013c6c:	68db      	ldr	r3, [r3, #12]
 8013c6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013c72:	b9b8      	cbnz	r0, 8013ca4 <_Balloc+0x68>
 8013c74:	2101      	movs	r1, #1
 8013c76:	fa01 f605 	lsl.w	r6, r1, r5
 8013c7a:	1d72      	adds	r2, r6, #5
 8013c7c:	0092      	lsls	r2, r2, #2
 8013c7e:	4620      	mov	r0, r4
 8013c80:	f000 fc98 	bl	80145b4 <_calloc_r>
 8013c84:	b160      	cbz	r0, 8013ca0 <_Balloc+0x64>
 8013c86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013c8a:	e00e      	b.n	8013caa <_Balloc+0x6e>
 8013c8c:	2221      	movs	r2, #33	; 0x21
 8013c8e:	2104      	movs	r1, #4
 8013c90:	4620      	mov	r0, r4
 8013c92:	f000 fc8f 	bl	80145b4 <_calloc_r>
 8013c96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013c98:	60f0      	str	r0, [r6, #12]
 8013c9a:	68db      	ldr	r3, [r3, #12]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d1e4      	bne.n	8013c6a <_Balloc+0x2e>
 8013ca0:	2000      	movs	r0, #0
 8013ca2:	bd70      	pop	{r4, r5, r6, pc}
 8013ca4:	6802      	ldr	r2, [r0, #0]
 8013ca6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013caa:	2300      	movs	r3, #0
 8013cac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013cb0:	e7f7      	b.n	8013ca2 <_Balloc+0x66>
 8013cb2:	bf00      	nop
 8013cb4:	0801de46 	.word	0x0801de46
 8013cb8:	0801dfb0 	.word	0x0801dfb0

08013cbc <_Bfree>:
 8013cbc:	b570      	push	{r4, r5, r6, lr}
 8013cbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013cc0:	4605      	mov	r5, r0
 8013cc2:	460c      	mov	r4, r1
 8013cc4:	b976      	cbnz	r6, 8013ce4 <_Bfree+0x28>
 8013cc6:	2010      	movs	r0, #16
 8013cc8:	f7fc fb0c 	bl	80102e4 <malloc>
 8013ccc:	4602      	mov	r2, r0
 8013cce:	6268      	str	r0, [r5, #36]	; 0x24
 8013cd0:	b920      	cbnz	r0, 8013cdc <_Bfree+0x20>
 8013cd2:	4b09      	ldr	r3, [pc, #36]	; (8013cf8 <_Bfree+0x3c>)
 8013cd4:	4809      	ldr	r0, [pc, #36]	; (8013cfc <_Bfree+0x40>)
 8013cd6:	218a      	movs	r1, #138	; 0x8a
 8013cd8:	f7fc faaa 	bl	8010230 <__assert_func>
 8013cdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013ce0:	6006      	str	r6, [r0, #0]
 8013ce2:	60c6      	str	r6, [r0, #12]
 8013ce4:	b13c      	cbz	r4, 8013cf6 <_Bfree+0x3a>
 8013ce6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013ce8:	6862      	ldr	r2, [r4, #4]
 8013cea:	68db      	ldr	r3, [r3, #12]
 8013cec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013cf0:	6021      	str	r1, [r4, #0]
 8013cf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013cf6:	bd70      	pop	{r4, r5, r6, pc}
 8013cf8:	0801de46 	.word	0x0801de46
 8013cfc:	0801dfb0 	.word	0x0801dfb0

08013d00 <__multadd>:
 8013d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d04:	690e      	ldr	r6, [r1, #16]
 8013d06:	4607      	mov	r7, r0
 8013d08:	4698      	mov	r8, r3
 8013d0a:	460c      	mov	r4, r1
 8013d0c:	f101 0014 	add.w	r0, r1, #20
 8013d10:	2300      	movs	r3, #0
 8013d12:	6805      	ldr	r5, [r0, #0]
 8013d14:	b2a9      	uxth	r1, r5
 8013d16:	fb02 8101 	mla	r1, r2, r1, r8
 8013d1a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8013d1e:	0c2d      	lsrs	r5, r5, #16
 8013d20:	fb02 c505 	mla	r5, r2, r5, ip
 8013d24:	b289      	uxth	r1, r1
 8013d26:	3301      	adds	r3, #1
 8013d28:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8013d2c:	429e      	cmp	r6, r3
 8013d2e:	f840 1b04 	str.w	r1, [r0], #4
 8013d32:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8013d36:	dcec      	bgt.n	8013d12 <__multadd+0x12>
 8013d38:	f1b8 0f00 	cmp.w	r8, #0
 8013d3c:	d022      	beq.n	8013d84 <__multadd+0x84>
 8013d3e:	68a3      	ldr	r3, [r4, #8]
 8013d40:	42b3      	cmp	r3, r6
 8013d42:	dc19      	bgt.n	8013d78 <__multadd+0x78>
 8013d44:	6861      	ldr	r1, [r4, #4]
 8013d46:	4638      	mov	r0, r7
 8013d48:	3101      	adds	r1, #1
 8013d4a:	f7ff ff77 	bl	8013c3c <_Balloc>
 8013d4e:	4605      	mov	r5, r0
 8013d50:	b928      	cbnz	r0, 8013d5e <__multadd+0x5e>
 8013d52:	4602      	mov	r2, r0
 8013d54:	4b0d      	ldr	r3, [pc, #52]	; (8013d8c <__multadd+0x8c>)
 8013d56:	480e      	ldr	r0, [pc, #56]	; (8013d90 <__multadd+0x90>)
 8013d58:	21b5      	movs	r1, #181	; 0xb5
 8013d5a:	f7fc fa69 	bl	8010230 <__assert_func>
 8013d5e:	6922      	ldr	r2, [r4, #16]
 8013d60:	3202      	adds	r2, #2
 8013d62:	f104 010c 	add.w	r1, r4, #12
 8013d66:	0092      	lsls	r2, r2, #2
 8013d68:	300c      	adds	r0, #12
 8013d6a:	f7fc facb 	bl	8010304 <memcpy>
 8013d6e:	4621      	mov	r1, r4
 8013d70:	4638      	mov	r0, r7
 8013d72:	f7ff ffa3 	bl	8013cbc <_Bfree>
 8013d76:	462c      	mov	r4, r5
 8013d78:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8013d7c:	3601      	adds	r6, #1
 8013d7e:	f8c3 8014 	str.w	r8, [r3, #20]
 8013d82:	6126      	str	r6, [r4, #16]
 8013d84:	4620      	mov	r0, r4
 8013d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d8a:	bf00      	nop
 8013d8c:	0801debc 	.word	0x0801debc
 8013d90:	0801dfb0 	.word	0x0801dfb0

08013d94 <__s2b>:
 8013d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d98:	460c      	mov	r4, r1
 8013d9a:	4615      	mov	r5, r2
 8013d9c:	461f      	mov	r7, r3
 8013d9e:	2209      	movs	r2, #9
 8013da0:	3308      	adds	r3, #8
 8013da2:	4606      	mov	r6, r0
 8013da4:	fb93 f3f2 	sdiv	r3, r3, r2
 8013da8:	2100      	movs	r1, #0
 8013daa:	2201      	movs	r2, #1
 8013dac:	429a      	cmp	r2, r3
 8013dae:	db09      	blt.n	8013dc4 <__s2b+0x30>
 8013db0:	4630      	mov	r0, r6
 8013db2:	f7ff ff43 	bl	8013c3c <_Balloc>
 8013db6:	b940      	cbnz	r0, 8013dca <__s2b+0x36>
 8013db8:	4602      	mov	r2, r0
 8013dba:	4b19      	ldr	r3, [pc, #100]	; (8013e20 <__s2b+0x8c>)
 8013dbc:	4819      	ldr	r0, [pc, #100]	; (8013e24 <__s2b+0x90>)
 8013dbe:	21ce      	movs	r1, #206	; 0xce
 8013dc0:	f7fc fa36 	bl	8010230 <__assert_func>
 8013dc4:	0052      	lsls	r2, r2, #1
 8013dc6:	3101      	adds	r1, #1
 8013dc8:	e7f0      	b.n	8013dac <__s2b+0x18>
 8013dca:	9b08      	ldr	r3, [sp, #32]
 8013dcc:	6143      	str	r3, [r0, #20]
 8013dce:	2d09      	cmp	r5, #9
 8013dd0:	f04f 0301 	mov.w	r3, #1
 8013dd4:	6103      	str	r3, [r0, #16]
 8013dd6:	dd16      	ble.n	8013e06 <__s2b+0x72>
 8013dd8:	f104 0909 	add.w	r9, r4, #9
 8013ddc:	46c8      	mov	r8, r9
 8013dde:	442c      	add	r4, r5
 8013de0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013de4:	4601      	mov	r1, r0
 8013de6:	3b30      	subs	r3, #48	; 0x30
 8013de8:	220a      	movs	r2, #10
 8013dea:	4630      	mov	r0, r6
 8013dec:	f7ff ff88 	bl	8013d00 <__multadd>
 8013df0:	45a0      	cmp	r8, r4
 8013df2:	d1f5      	bne.n	8013de0 <__s2b+0x4c>
 8013df4:	f1a5 0408 	sub.w	r4, r5, #8
 8013df8:	444c      	add	r4, r9
 8013dfa:	1b2d      	subs	r5, r5, r4
 8013dfc:	1963      	adds	r3, r4, r5
 8013dfe:	42bb      	cmp	r3, r7
 8013e00:	db04      	blt.n	8013e0c <__s2b+0x78>
 8013e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e06:	340a      	adds	r4, #10
 8013e08:	2509      	movs	r5, #9
 8013e0a:	e7f6      	b.n	8013dfa <__s2b+0x66>
 8013e0c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013e10:	4601      	mov	r1, r0
 8013e12:	3b30      	subs	r3, #48	; 0x30
 8013e14:	220a      	movs	r2, #10
 8013e16:	4630      	mov	r0, r6
 8013e18:	f7ff ff72 	bl	8013d00 <__multadd>
 8013e1c:	e7ee      	b.n	8013dfc <__s2b+0x68>
 8013e1e:	bf00      	nop
 8013e20:	0801debc 	.word	0x0801debc
 8013e24:	0801dfb0 	.word	0x0801dfb0

08013e28 <__hi0bits>:
 8013e28:	0c03      	lsrs	r3, r0, #16
 8013e2a:	041b      	lsls	r3, r3, #16
 8013e2c:	b9d3      	cbnz	r3, 8013e64 <__hi0bits+0x3c>
 8013e2e:	0400      	lsls	r0, r0, #16
 8013e30:	2310      	movs	r3, #16
 8013e32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013e36:	bf04      	itt	eq
 8013e38:	0200      	lsleq	r0, r0, #8
 8013e3a:	3308      	addeq	r3, #8
 8013e3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013e40:	bf04      	itt	eq
 8013e42:	0100      	lsleq	r0, r0, #4
 8013e44:	3304      	addeq	r3, #4
 8013e46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013e4a:	bf04      	itt	eq
 8013e4c:	0080      	lsleq	r0, r0, #2
 8013e4e:	3302      	addeq	r3, #2
 8013e50:	2800      	cmp	r0, #0
 8013e52:	db05      	blt.n	8013e60 <__hi0bits+0x38>
 8013e54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013e58:	f103 0301 	add.w	r3, r3, #1
 8013e5c:	bf08      	it	eq
 8013e5e:	2320      	moveq	r3, #32
 8013e60:	4618      	mov	r0, r3
 8013e62:	4770      	bx	lr
 8013e64:	2300      	movs	r3, #0
 8013e66:	e7e4      	b.n	8013e32 <__hi0bits+0xa>

08013e68 <__lo0bits>:
 8013e68:	6803      	ldr	r3, [r0, #0]
 8013e6a:	f013 0207 	ands.w	r2, r3, #7
 8013e6e:	4601      	mov	r1, r0
 8013e70:	d00b      	beq.n	8013e8a <__lo0bits+0x22>
 8013e72:	07da      	lsls	r2, r3, #31
 8013e74:	d424      	bmi.n	8013ec0 <__lo0bits+0x58>
 8013e76:	0798      	lsls	r0, r3, #30
 8013e78:	bf49      	itett	mi
 8013e7a:	085b      	lsrmi	r3, r3, #1
 8013e7c:	089b      	lsrpl	r3, r3, #2
 8013e7e:	2001      	movmi	r0, #1
 8013e80:	600b      	strmi	r3, [r1, #0]
 8013e82:	bf5c      	itt	pl
 8013e84:	600b      	strpl	r3, [r1, #0]
 8013e86:	2002      	movpl	r0, #2
 8013e88:	4770      	bx	lr
 8013e8a:	b298      	uxth	r0, r3
 8013e8c:	b9b0      	cbnz	r0, 8013ebc <__lo0bits+0x54>
 8013e8e:	0c1b      	lsrs	r3, r3, #16
 8013e90:	2010      	movs	r0, #16
 8013e92:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013e96:	bf04      	itt	eq
 8013e98:	0a1b      	lsreq	r3, r3, #8
 8013e9a:	3008      	addeq	r0, #8
 8013e9c:	071a      	lsls	r2, r3, #28
 8013e9e:	bf04      	itt	eq
 8013ea0:	091b      	lsreq	r3, r3, #4
 8013ea2:	3004      	addeq	r0, #4
 8013ea4:	079a      	lsls	r2, r3, #30
 8013ea6:	bf04      	itt	eq
 8013ea8:	089b      	lsreq	r3, r3, #2
 8013eaa:	3002      	addeq	r0, #2
 8013eac:	07da      	lsls	r2, r3, #31
 8013eae:	d403      	bmi.n	8013eb8 <__lo0bits+0x50>
 8013eb0:	085b      	lsrs	r3, r3, #1
 8013eb2:	f100 0001 	add.w	r0, r0, #1
 8013eb6:	d005      	beq.n	8013ec4 <__lo0bits+0x5c>
 8013eb8:	600b      	str	r3, [r1, #0]
 8013eba:	4770      	bx	lr
 8013ebc:	4610      	mov	r0, r2
 8013ebe:	e7e8      	b.n	8013e92 <__lo0bits+0x2a>
 8013ec0:	2000      	movs	r0, #0
 8013ec2:	4770      	bx	lr
 8013ec4:	2020      	movs	r0, #32
 8013ec6:	4770      	bx	lr

08013ec8 <__i2b>:
 8013ec8:	b510      	push	{r4, lr}
 8013eca:	460c      	mov	r4, r1
 8013ecc:	2101      	movs	r1, #1
 8013ece:	f7ff feb5 	bl	8013c3c <_Balloc>
 8013ed2:	4602      	mov	r2, r0
 8013ed4:	b928      	cbnz	r0, 8013ee2 <__i2b+0x1a>
 8013ed6:	4b05      	ldr	r3, [pc, #20]	; (8013eec <__i2b+0x24>)
 8013ed8:	4805      	ldr	r0, [pc, #20]	; (8013ef0 <__i2b+0x28>)
 8013eda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013ede:	f7fc f9a7 	bl	8010230 <__assert_func>
 8013ee2:	2301      	movs	r3, #1
 8013ee4:	6144      	str	r4, [r0, #20]
 8013ee6:	6103      	str	r3, [r0, #16]
 8013ee8:	bd10      	pop	{r4, pc}
 8013eea:	bf00      	nop
 8013eec:	0801debc 	.word	0x0801debc
 8013ef0:	0801dfb0 	.word	0x0801dfb0

08013ef4 <__multiply>:
 8013ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ef8:	4614      	mov	r4, r2
 8013efa:	690a      	ldr	r2, [r1, #16]
 8013efc:	6923      	ldr	r3, [r4, #16]
 8013efe:	429a      	cmp	r2, r3
 8013f00:	bfb8      	it	lt
 8013f02:	460b      	movlt	r3, r1
 8013f04:	460d      	mov	r5, r1
 8013f06:	bfbc      	itt	lt
 8013f08:	4625      	movlt	r5, r4
 8013f0a:	461c      	movlt	r4, r3
 8013f0c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8013f10:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013f14:	68ab      	ldr	r3, [r5, #8]
 8013f16:	6869      	ldr	r1, [r5, #4]
 8013f18:	eb0a 0709 	add.w	r7, sl, r9
 8013f1c:	42bb      	cmp	r3, r7
 8013f1e:	b085      	sub	sp, #20
 8013f20:	bfb8      	it	lt
 8013f22:	3101      	addlt	r1, #1
 8013f24:	f7ff fe8a 	bl	8013c3c <_Balloc>
 8013f28:	b930      	cbnz	r0, 8013f38 <__multiply+0x44>
 8013f2a:	4602      	mov	r2, r0
 8013f2c:	4b42      	ldr	r3, [pc, #264]	; (8014038 <__multiply+0x144>)
 8013f2e:	4843      	ldr	r0, [pc, #268]	; (801403c <__multiply+0x148>)
 8013f30:	f240 115d 	movw	r1, #349	; 0x15d
 8013f34:	f7fc f97c 	bl	8010230 <__assert_func>
 8013f38:	f100 0614 	add.w	r6, r0, #20
 8013f3c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8013f40:	4633      	mov	r3, r6
 8013f42:	2200      	movs	r2, #0
 8013f44:	4543      	cmp	r3, r8
 8013f46:	d31e      	bcc.n	8013f86 <__multiply+0x92>
 8013f48:	f105 0c14 	add.w	ip, r5, #20
 8013f4c:	f104 0314 	add.w	r3, r4, #20
 8013f50:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8013f54:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8013f58:	9202      	str	r2, [sp, #8]
 8013f5a:	ebac 0205 	sub.w	r2, ip, r5
 8013f5e:	3a15      	subs	r2, #21
 8013f60:	f022 0203 	bic.w	r2, r2, #3
 8013f64:	3204      	adds	r2, #4
 8013f66:	f105 0115 	add.w	r1, r5, #21
 8013f6a:	458c      	cmp	ip, r1
 8013f6c:	bf38      	it	cc
 8013f6e:	2204      	movcc	r2, #4
 8013f70:	9201      	str	r2, [sp, #4]
 8013f72:	9a02      	ldr	r2, [sp, #8]
 8013f74:	9303      	str	r3, [sp, #12]
 8013f76:	429a      	cmp	r2, r3
 8013f78:	d808      	bhi.n	8013f8c <__multiply+0x98>
 8013f7a:	2f00      	cmp	r7, #0
 8013f7c:	dc55      	bgt.n	801402a <__multiply+0x136>
 8013f7e:	6107      	str	r7, [r0, #16]
 8013f80:	b005      	add	sp, #20
 8013f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f86:	f843 2b04 	str.w	r2, [r3], #4
 8013f8a:	e7db      	b.n	8013f44 <__multiply+0x50>
 8013f8c:	f8b3 a000 	ldrh.w	sl, [r3]
 8013f90:	f1ba 0f00 	cmp.w	sl, #0
 8013f94:	d020      	beq.n	8013fd8 <__multiply+0xe4>
 8013f96:	f105 0e14 	add.w	lr, r5, #20
 8013f9a:	46b1      	mov	r9, r6
 8013f9c:	2200      	movs	r2, #0
 8013f9e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8013fa2:	f8d9 b000 	ldr.w	fp, [r9]
 8013fa6:	b2a1      	uxth	r1, r4
 8013fa8:	fa1f fb8b 	uxth.w	fp, fp
 8013fac:	fb0a b101 	mla	r1, sl, r1, fp
 8013fb0:	4411      	add	r1, r2
 8013fb2:	f8d9 2000 	ldr.w	r2, [r9]
 8013fb6:	0c24      	lsrs	r4, r4, #16
 8013fb8:	0c12      	lsrs	r2, r2, #16
 8013fba:	fb0a 2404 	mla	r4, sl, r4, r2
 8013fbe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8013fc2:	b289      	uxth	r1, r1
 8013fc4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013fc8:	45f4      	cmp	ip, lr
 8013fca:	f849 1b04 	str.w	r1, [r9], #4
 8013fce:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8013fd2:	d8e4      	bhi.n	8013f9e <__multiply+0xaa>
 8013fd4:	9901      	ldr	r1, [sp, #4]
 8013fd6:	5072      	str	r2, [r6, r1]
 8013fd8:	9a03      	ldr	r2, [sp, #12]
 8013fda:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013fde:	3304      	adds	r3, #4
 8013fe0:	f1b9 0f00 	cmp.w	r9, #0
 8013fe4:	d01f      	beq.n	8014026 <__multiply+0x132>
 8013fe6:	6834      	ldr	r4, [r6, #0]
 8013fe8:	f105 0114 	add.w	r1, r5, #20
 8013fec:	46b6      	mov	lr, r6
 8013fee:	f04f 0a00 	mov.w	sl, #0
 8013ff2:	880a      	ldrh	r2, [r1, #0]
 8013ff4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8013ff8:	fb09 b202 	mla	r2, r9, r2, fp
 8013ffc:	4492      	add	sl, r2
 8013ffe:	b2a4      	uxth	r4, r4
 8014000:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8014004:	f84e 4b04 	str.w	r4, [lr], #4
 8014008:	f851 4b04 	ldr.w	r4, [r1], #4
 801400c:	f8be 2000 	ldrh.w	r2, [lr]
 8014010:	0c24      	lsrs	r4, r4, #16
 8014012:	fb09 2404 	mla	r4, r9, r4, r2
 8014016:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801401a:	458c      	cmp	ip, r1
 801401c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014020:	d8e7      	bhi.n	8013ff2 <__multiply+0xfe>
 8014022:	9a01      	ldr	r2, [sp, #4]
 8014024:	50b4      	str	r4, [r6, r2]
 8014026:	3604      	adds	r6, #4
 8014028:	e7a3      	b.n	8013f72 <__multiply+0x7e>
 801402a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801402e:	2b00      	cmp	r3, #0
 8014030:	d1a5      	bne.n	8013f7e <__multiply+0x8a>
 8014032:	3f01      	subs	r7, #1
 8014034:	e7a1      	b.n	8013f7a <__multiply+0x86>
 8014036:	bf00      	nop
 8014038:	0801debc 	.word	0x0801debc
 801403c:	0801dfb0 	.word	0x0801dfb0

08014040 <__pow5mult>:
 8014040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014044:	4615      	mov	r5, r2
 8014046:	f012 0203 	ands.w	r2, r2, #3
 801404a:	4606      	mov	r6, r0
 801404c:	460f      	mov	r7, r1
 801404e:	d007      	beq.n	8014060 <__pow5mult+0x20>
 8014050:	4c25      	ldr	r4, [pc, #148]	; (80140e8 <__pow5mult+0xa8>)
 8014052:	3a01      	subs	r2, #1
 8014054:	2300      	movs	r3, #0
 8014056:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801405a:	f7ff fe51 	bl	8013d00 <__multadd>
 801405e:	4607      	mov	r7, r0
 8014060:	10ad      	asrs	r5, r5, #2
 8014062:	d03d      	beq.n	80140e0 <__pow5mult+0xa0>
 8014064:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014066:	b97c      	cbnz	r4, 8014088 <__pow5mult+0x48>
 8014068:	2010      	movs	r0, #16
 801406a:	f7fc f93b 	bl	80102e4 <malloc>
 801406e:	4602      	mov	r2, r0
 8014070:	6270      	str	r0, [r6, #36]	; 0x24
 8014072:	b928      	cbnz	r0, 8014080 <__pow5mult+0x40>
 8014074:	4b1d      	ldr	r3, [pc, #116]	; (80140ec <__pow5mult+0xac>)
 8014076:	481e      	ldr	r0, [pc, #120]	; (80140f0 <__pow5mult+0xb0>)
 8014078:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801407c:	f7fc f8d8 	bl	8010230 <__assert_func>
 8014080:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014084:	6004      	str	r4, [r0, #0]
 8014086:	60c4      	str	r4, [r0, #12]
 8014088:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801408c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014090:	b94c      	cbnz	r4, 80140a6 <__pow5mult+0x66>
 8014092:	f240 2171 	movw	r1, #625	; 0x271
 8014096:	4630      	mov	r0, r6
 8014098:	f7ff ff16 	bl	8013ec8 <__i2b>
 801409c:	2300      	movs	r3, #0
 801409e:	f8c8 0008 	str.w	r0, [r8, #8]
 80140a2:	4604      	mov	r4, r0
 80140a4:	6003      	str	r3, [r0, #0]
 80140a6:	f04f 0900 	mov.w	r9, #0
 80140aa:	07eb      	lsls	r3, r5, #31
 80140ac:	d50a      	bpl.n	80140c4 <__pow5mult+0x84>
 80140ae:	4639      	mov	r1, r7
 80140b0:	4622      	mov	r2, r4
 80140b2:	4630      	mov	r0, r6
 80140b4:	f7ff ff1e 	bl	8013ef4 <__multiply>
 80140b8:	4639      	mov	r1, r7
 80140ba:	4680      	mov	r8, r0
 80140bc:	4630      	mov	r0, r6
 80140be:	f7ff fdfd 	bl	8013cbc <_Bfree>
 80140c2:	4647      	mov	r7, r8
 80140c4:	106d      	asrs	r5, r5, #1
 80140c6:	d00b      	beq.n	80140e0 <__pow5mult+0xa0>
 80140c8:	6820      	ldr	r0, [r4, #0]
 80140ca:	b938      	cbnz	r0, 80140dc <__pow5mult+0x9c>
 80140cc:	4622      	mov	r2, r4
 80140ce:	4621      	mov	r1, r4
 80140d0:	4630      	mov	r0, r6
 80140d2:	f7ff ff0f 	bl	8013ef4 <__multiply>
 80140d6:	6020      	str	r0, [r4, #0]
 80140d8:	f8c0 9000 	str.w	r9, [r0]
 80140dc:	4604      	mov	r4, r0
 80140de:	e7e4      	b.n	80140aa <__pow5mult+0x6a>
 80140e0:	4638      	mov	r0, r7
 80140e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80140e6:	bf00      	nop
 80140e8:	0801e100 	.word	0x0801e100
 80140ec:	0801de46 	.word	0x0801de46
 80140f0:	0801dfb0 	.word	0x0801dfb0

080140f4 <__lshift>:
 80140f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80140f8:	460c      	mov	r4, r1
 80140fa:	6849      	ldr	r1, [r1, #4]
 80140fc:	6923      	ldr	r3, [r4, #16]
 80140fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014102:	68a3      	ldr	r3, [r4, #8]
 8014104:	4607      	mov	r7, r0
 8014106:	4691      	mov	r9, r2
 8014108:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801410c:	f108 0601 	add.w	r6, r8, #1
 8014110:	42b3      	cmp	r3, r6
 8014112:	db0b      	blt.n	801412c <__lshift+0x38>
 8014114:	4638      	mov	r0, r7
 8014116:	f7ff fd91 	bl	8013c3c <_Balloc>
 801411a:	4605      	mov	r5, r0
 801411c:	b948      	cbnz	r0, 8014132 <__lshift+0x3e>
 801411e:	4602      	mov	r2, r0
 8014120:	4b28      	ldr	r3, [pc, #160]	; (80141c4 <__lshift+0xd0>)
 8014122:	4829      	ldr	r0, [pc, #164]	; (80141c8 <__lshift+0xd4>)
 8014124:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014128:	f7fc f882 	bl	8010230 <__assert_func>
 801412c:	3101      	adds	r1, #1
 801412e:	005b      	lsls	r3, r3, #1
 8014130:	e7ee      	b.n	8014110 <__lshift+0x1c>
 8014132:	2300      	movs	r3, #0
 8014134:	f100 0114 	add.w	r1, r0, #20
 8014138:	f100 0210 	add.w	r2, r0, #16
 801413c:	4618      	mov	r0, r3
 801413e:	4553      	cmp	r3, sl
 8014140:	db33      	blt.n	80141aa <__lshift+0xb6>
 8014142:	6920      	ldr	r0, [r4, #16]
 8014144:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014148:	f104 0314 	add.w	r3, r4, #20
 801414c:	f019 091f 	ands.w	r9, r9, #31
 8014150:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014154:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014158:	d02b      	beq.n	80141b2 <__lshift+0xbe>
 801415a:	f1c9 0e20 	rsb	lr, r9, #32
 801415e:	468a      	mov	sl, r1
 8014160:	2200      	movs	r2, #0
 8014162:	6818      	ldr	r0, [r3, #0]
 8014164:	fa00 f009 	lsl.w	r0, r0, r9
 8014168:	4302      	orrs	r2, r0
 801416a:	f84a 2b04 	str.w	r2, [sl], #4
 801416e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014172:	459c      	cmp	ip, r3
 8014174:	fa22 f20e 	lsr.w	r2, r2, lr
 8014178:	d8f3      	bhi.n	8014162 <__lshift+0x6e>
 801417a:	ebac 0304 	sub.w	r3, ip, r4
 801417e:	3b15      	subs	r3, #21
 8014180:	f023 0303 	bic.w	r3, r3, #3
 8014184:	3304      	adds	r3, #4
 8014186:	f104 0015 	add.w	r0, r4, #21
 801418a:	4584      	cmp	ip, r0
 801418c:	bf38      	it	cc
 801418e:	2304      	movcc	r3, #4
 8014190:	50ca      	str	r2, [r1, r3]
 8014192:	b10a      	cbz	r2, 8014198 <__lshift+0xa4>
 8014194:	f108 0602 	add.w	r6, r8, #2
 8014198:	3e01      	subs	r6, #1
 801419a:	4638      	mov	r0, r7
 801419c:	612e      	str	r6, [r5, #16]
 801419e:	4621      	mov	r1, r4
 80141a0:	f7ff fd8c 	bl	8013cbc <_Bfree>
 80141a4:	4628      	mov	r0, r5
 80141a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80141ae:	3301      	adds	r3, #1
 80141b0:	e7c5      	b.n	801413e <__lshift+0x4a>
 80141b2:	3904      	subs	r1, #4
 80141b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80141b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80141bc:	459c      	cmp	ip, r3
 80141be:	d8f9      	bhi.n	80141b4 <__lshift+0xc0>
 80141c0:	e7ea      	b.n	8014198 <__lshift+0xa4>
 80141c2:	bf00      	nop
 80141c4:	0801debc 	.word	0x0801debc
 80141c8:	0801dfb0 	.word	0x0801dfb0

080141cc <__mcmp>:
 80141cc:	b530      	push	{r4, r5, lr}
 80141ce:	6902      	ldr	r2, [r0, #16]
 80141d0:	690c      	ldr	r4, [r1, #16]
 80141d2:	1b12      	subs	r2, r2, r4
 80141d4:	d10e      	bne.n	80141f4 <__mcmp+0x28>
 80141d6:	f100 0314 	add.w	r3, r0, #20
 80141da:	3114      	adds	r1, #20
 80141dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80141e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80141e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80141e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80141ec:	42a5      	cmp	r5, r4
 80141ee:	d003      	beq.n	80141f8 <__mcmp+0x2c>
 80141f0:	d305      	bcc.n	80141fe <__mcmp+0x32>
 80141f2:	2201      	movs	r2, #1
 80141f4:	4610      	mov	r0, r2
 80141f6:	bd30      	pop	{r4, r5, pc}
 80141f8:	4283      	cmp	r3, r0
 80141fa:	d3f3      	bcc.n	80141e4 <__mcmp+0x18>
 80141fc:	e7fa      	b.n	80141f4 <__mcmp+0x28>
 80141fe:	f04f 32ff 	mov.w	r2, #4294967295
 8014202:	e7f7      	b.n	80141f4 <__mcmp+0x28>

08014204 <__mdiff>:
 8014204:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014208:	460c      	mov	r4, r1
 801420a:	4606      	mov	r6, r0
 801420c:	4611      	mov	r1, r2
 801420e:	4620      	mov	r0, r4
 8014210:	4617      	mov	r7, r2
 8014212:	f7ff ffdb 	bl	80141cc <__mcmp>
 8014216:	1e05      	subs	r5, r0, #0
 8014218:	d110      	bne.n	801423c <__mdiff+0x38>
 801421a:	4629      	mov	r1, r5
 801421c:	4630      	mov	r0, r6
 801421e:	f7ff fd0d 	bl	8013c3c <_Balloc>
 8014222:	b930      	cbnz	r0, 8014232 <__mdiff+0x2e>
 8014224:	4b39      	ldr	r3, [pc, #228]	; (801430c <__mdiff+0x108>)
 8014226:	4602      	mov	r2, r0
 8014228:	f240 2132 	movw	r1, #562	; 0x232
 801422c:	4838      	ldr	r0, [pc, #224]	; (8014310 <__mdiff+0x10c>)
 801422e:	f7fb ffff 	bl	8010230 <__assert_func>
 8014232:	2301      	movs	r3, #1
 8014234:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014238:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801423c:	bfa4      	itt	ge
 801423e:	463b      	movge	r3, r7
 8014240:	4627      	movge	r7, r4
 8014242:	4630      	mov	r0, r6
 8014244:	6879      	ldr	r1, [r7, #4]
 8014246:	bfa6      	itte	ge
 8014248:	461c      	movge	r4, r3
 801424a:	2500      	movge	r5, #0
 801424c:	2501      	movlt	r5, #1
 801424e:	f7ff fcf5 	bl	8013c3c <_Balloc>
 8014252:	b920      	cbnz	r0, 801425e <__mdiff+0x5a>
 8014254:	4b2d      	ldr	r3, [pc, #180]	; (801430c <__mdiff+0x108>)
 8014256:	4602      	mov	r2, r0
 8014258:	f44f 7110 	mov.w	r1, #576	; 0x240
 801425c:	e7e6      	b.n	801422c <__mdiff+0x28>
 801425e:	693e      	ldr	r6, [r7, #16]
 8014260:	60c5      	str	r5, [r0, #12]
 8014262:	6925      	ldr	r5, [r4, #16]
 8014264:	f107 0114 	add.w	r1, r7, #20
 8014268:	f104 0914 	add.w	r9, r4, #20
 801426c:	f100 0e14 	add.w	lr, r0, #20
 8014270:	f107 0210 	add.w	r2, r7, #16
 8014274:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8014278:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801427c:	46f2      	mov	sl, lr
 801427e:	2700      	movs	r7, #0
 8014280:	f859 3b04 	ldr.w	r3, [r9], #4
 8014284:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014288:	fa1f f883 	uxth.w	r8, r3
 801428c:	fa17 f78b 	uxtah	r7, r7, fp
 8014290:	0c1b      	lsrs	r3, r3, #16
 8014292:	eba7 0808 	sub.w	r8, r7, r8
 8014296:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801429a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801429e:	fa1f f888 	uxth.w	r8, r8
 80142a2:	141f      	asrs	r7, r3, #16
 80142a4:	454d      	cmp	r5, r9
 80142a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80142aa:	f84a 3b04 	str.w	r3, [sl], #4
 80142ae:	d8e7      	bhi.n	8014280 <__mdiff+0x7c>
 80142b0:	1b2b      	subs	r3, r5, r4
 80142b2:	3b15      	subs	r3, #21
 80142b4:	f023 0303 	bic.w	r3, r3, #3
 80142b8:	3304      	adds	r3, #4
 80142ba:	3415      	adds	r4, #21
 80142bc:	42a5      	cmp	r5, r4
 80142be:	bf38      	it	cc
 80142c0:	2304      	movcc	r3, #4
 80142c2:	4419      	add	r1, r3
 80142c4:	4473      	add	r3, lr
 80142c6:	469e      	mov	lr, r3
 80142c8:	460d      	mov	r5, r1
 80142ca:	4565      	cmp	r5, ip
 80142cc:	d30e      	bcc.n	80142ec <__mdiff+0xe8>
 80142ce:	f10c 0203 	add.w	r2, ip, #3
 80142d2:	1a52      	subs	r2, r2, r1
 80142d4:	f022 0203 	bic.w	r2, r2, #3
 80142d8:	3903      	subs	r1, #3
 80142da:	458c      	cmp	ip, r1
 80142dc:	bf38      	it	cc
 80142de:	2200      	movcc	r2, #0
 80142e0:	441a      	add	r2, r3
 80142e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80142e6:	b17b      	cbz	r3, 8014308 <__mdiff+0x104>
 80142e8:	6106      	str	r6, [r0, #16]
 80142ea:	e7a5      	b.n	8014238 <__mdiff+0x34>
 80142ec:	f855 8b04 	ldr.w	r8, [r5], #4
 80142f0:	fa17 f488 	uxtah	r4, r7, r8
 80142f4:	1422      	asrs	r2, r4, #16
 80142f6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80142fa:	b2a4      	uxth	r4, r4
 80142fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8014300:	f84e 4b04 	str.w	r4, [lr], #4
 8014304:	1417      	asrs	r7, r2, #16
 8014306:	e7e0      	b.n	80142ca <__mdiff+0xc6>
 8014308:	3e01      	subs	r6, #1
 801430a:	e7ea      	b.n	80142e2 <__mdiff+0xde>
 801430c:	0801debc 	.word	0x0801debc
 8014310:	0801dfb0 	.word	0x0801dfb0

08014314 <__ulp>:
 8014314:	b082      	sub	sp, #8
 8014316:	ed8d 0b00 	vstr	d0, [sp]
 801431a:	9b01      	ldr	r3, [sp, #4]
 801431c:	4912      	ldr	r1, [pc, #72]	; (8014368 <__ulp+0x54>)
 801431e:	4019      	ands	r1, r3
 8014320:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8014324:	2900      	cmp	r1, #0
 8014326:	dd05      	ble.n	8014334 <__ulp+0x20>
 8014328:	2200      	movs	r2, #0
 801432a:	460b      	mov	r3, r1
 801432c:	ec43 2b10 	vmov	d0, r2, r3
 8014330:	b002      	add	sp, #8
 8014332:	4770      	bx	lr
 8014334:	4249      	negs	r1, r1
 8014336:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801433a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801433e:	f04f 0200 	mov.w	r2, #0
 8014342:	f04f 0300 	mov.w	r3, #0
 8014346:	da04      	bge.n	8014352 <__ulp+0x3e>
 8014348:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801434c:	fa41 f300 	asr.w	r3, r1, r0
 8014350:	e7ec      	b.n	801432c <__ulp+0x18>
 8014352:	f1a0 0114 	sub.w	r1, r0, #20
 8014356:	291e      	cmp	r1, #30
 8014358:	bfda      	itte	le
 801435a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801435e:	fa20 f101 	lsrle.w	r1, r0, r1
 8014362:	2101      	movgt	r1, #1
 8014364:	460a      	mov	r2, r1
 8014366:	e7e1      	b.n	801432c <__ulp+0x18>
 8014368:	7ff00000 	.word	0x7ff00000

0801436c <__b2d>:
 801436c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801436e:	6905      	ldr	r5, [r0, #16]
 8014370:	f100 0714 	add.w	r7, r0, #20
 8014374:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8014378:	1f2e      	subs	r6, r5, #4
 801437a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801437e:	4620      	mov	r0, r4
 8014380:	f7ff fd52 	bl	8013e28 <__hi0bits>
 8014384:	f1c0 0320 	rsb	r3, r0, #32
 8014388:	280a      	cmp	r0, #10
 801438a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8014408 <__b2d+0x9c>
 801438e:	600b      	str	r3, [r1, #0]
 8014390:	dc14      	bgt.n	80143bc <__b2d+0x50>
 8014392:	f1c0 0e0b 	rsb	lr, r0, #11
 8014396:	fa24 f10e 	lsr.w	r1, r4, lr
 801439a:	42b7      	cmp	r7, r6
 801439c:	ea41 030c 	orr.w	r3, r1, ip
 80143a0:	bf34      	ite	cc
 80143a2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80143a6:	2100      	movcs	r1, #0
 80143a8:	3015      	adds	r0, #21
 80143aa:	fa04 f000 	lsl.w	r0, r4, r0
 80143ae:	fa21 f10e 	lsr.w	r1, r1, lr
 80143b2:	ea40 0201 	orr.w	r2, r0, r1
 80143b6:	ec43 2b10 	vmov	d0, r2, r3
 80143ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143bc:	42b7      	cmp	r7, r6
 80143be:	bf3a      	itte	cc
 80143c0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80143c4:	f1a5 0608 	subcc.w	r6, r5, #8
 80143c8:	2100      	movcs	r1, #0
 80143ca:	380b      	subs	r0, #11
 80143cc:	d017      	beq.n	80143fe <__b2d+0x92>
 80143ce:	f1c0 0c20 	rsb	ip, r0, #32
 80143d2:	fa04 f500 	lsl.w	r5, r4, r0
 80143d6:	42be      	cmp	r6, r7
 80143d8:	fa21 f40c 	lsr.w	r4, r1, ip
 80143dc:	ea45 0504 	orr.w	r5, r5, r4
 80143e0:	bf8c      	ite	hi
 80143e2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80143e6:	2400      	movls	r4, #0
 80143e8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80143ec:	fa01 f000 	lsl.w	r0, r1, r0
 80143f0:	fa24 f40c 	lsr.w	r4, r4, ip
 80143f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80143f8:	ea40 0204 	orr.w	r2, r0, r4
 80143fc:	e7db      	b.n	80143b6 <__b2d+0x4a>
 80143fe:	ea44 030c 	orr.w	r3, r4, ip
 8014402:	460a      	mov	r2, r1
 8014404:	e7d7      	b.n	80143b6 <__b2d+0x4a>
 8014406:	bf00      	nop
 8014408:	3ff00000 	.word	0x3ff00000

0801440c <__d2b>:
 801440c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014410:	4689      	mov	r9, r1
 8014412:	2101      	movs	r1, #1
 8014414:	ec57 6b10 	vmov	r6, r7, d0
 8014418:	4690      	mov	r8, r2
 801441a:	f7ff fc0f 	bl	8013c3c <_Balloc>
 801441e:	4604      	mov	r4, r0
 8014420:	b930      	cbnz	r0, 8014430 <__d2b+0x24>
 8014422:	4602      	mov	r2, r0
 8014424:	4b25      	ldr	r3, [pc, #148]	; (80144bc <__d2b+0xb0>)
 8014426:	4826      	ldr	r0, [pc, #152]	; (80144c0 <__d2b+0xb4>)
 8014428:	f240 310a 	movw	r1, #778	; 0x30a
 801442c:	f7fb ff00 	bl	8010230 <__assert_func>
 8014430:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014434:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014438:	bb35      	cbnz	r5, 8014488 <__d2b+0x7c>
 801443a:	2e00      	cmp	r6, #0
 801443c:	9301      	str	r3, [sp, #4]
 801443e:	d028      	beq.n	8014492 <__d2b+0x86>
 8014440:	4668      	mov	r0, sp
 8014442:	9600      	str	r6, [sp, #0]
 8014444:	f7ff fd10 	bl	8013e68 <__lo0bits>
 8014448:	9900      	ldr	r1, [sp, #0]
 801444a:	b300      	cbz	r0, 801448e <__d2b+0x82>
 801444c:	9a01      	ldr	r2, [sp, #4]
 801444e:	f1c0 0320 	rsb	r3, r0, #32
 8014452:	fa02 f303 	lsl.w	r3, r2, r3
 8014456:	430b      	orrs	r3, r1
 8014458:	40c2      	lsrs	r2, r0
 801445a:	6163      	str	r3, [r4, #20]
 801445c:	9201      	str	r2, [sp, #4]
 801445e:	9b01      	ldr	r3, [sp, #4]
 8014460:	61a3      	str	r3, [r4, #24]
 8014462:	2b00      	cmp	r3, #0
 8014464:	bf14      	ite	ne
 8014466:	2202      	movne	r2, #2
 8014468:	2201      	moveq	r2, #1
 801446a:	6122      	str	r2, [r4, #16]
 801446c:	b1d5      	cbz	r5, 80144a4 <__d2b+0x98>
 801446e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014472:	4405      	add	r5, r0
 8014474:	f8c9 5000 	str.w	r5, [r9]
 8014478:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801447c:	f8c8 0000 	str.w	r0, [r8]
 8014480:	4620      	mov	r0, r4
 8014482:	b003      	add	sp, #12
 8014484:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014488:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801448c:	e7d5      	b.n	801443a <__d2b+0x2e>
 801448e:	6161      	str	r1, [r4, #20]
 8014490:	e7e5      	b.n	801445e <__d2b+0x52>
 8014492:	a801      	add	r0, sp, #4
 8014494:	f7ff fce8 	bl	8013e68 <__lo0bits>
 8014498:	9b01      	ldr	r3, [sp, #4]
 801449a:	6163      	str	r3, [r4, #20]
 801449c:	2201      	movs	r2, #1
 801449e:	6122      	str	r2, [r4, #16]
 80144a0:	3020      	adds	r0, #32
 80144a2:	e7e3      	b.n	801446c <__d2b+0x60>
 80144a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80144a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80144ac:	f8c9 0000 	str.w	r0, [r9]
 80144b0:	6918      	ldr	r0, [r3, #16]
 80144b2:	f7ff fcb9 	bl	8013e28 <__hi0bits>
 80144b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80144ba:	e7df      	b.n	801447c <__d2b+0x70>
 80144bc:	0801debc 	.word	0x0801debc
 80144c0:	0801dfb0 	.word	0x0801dfb0

080144c4 <__ratio>:
 80144c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144c8:	468a      	mov	sl, r1
 80144ca:	4669      	mov	r1, sp
 80144cc:	4683      	mov	fp, r0
 80144ce:	f7ff ff4d 	bl	801436c <__b2d>
 80144d2:	a901      	add	r1, sp, #4
 80144d4:	4650      	mov	r0, sl
 80144d6:	ec59 8b10 	vmov	r8, r9, d0
 80144da:	ee10 6a10 	vmov	r6, s0
 80144de:	f7ff ff45 	bl	801436c <__b2d>
 80144e2:	f8db 3010 	ldr.w	r3, [fp, #16]
 80144e6:	f8da 2010 	ldr.w	r2, [sl, #16]
 80144ea:	eba3 0c02 	sub.w	ip, r3, r2
 80144ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 80144f2:	1a9b      	subs	r3, r3, r2
 80144f4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80144f8:	ec55 4b10 	vmov	r4, r5, d0
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	ee10 0a10 	vmov	r0, s0
 8014502:	bfce      	itee	gt
 8014504:	464a      	movgt	r2, r9
 8014506:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801450a:	462a      	movle	r2, r5
 801450c:	464f      	mov	r7, r9
 801450e:	4629      	mov	r1, r5
 8014510:	bfcc      	ite	gt
 8014512:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8014516:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801451a:	ec47 6b17 	vmov	d7, r6, r7
 801451e:	ec41 0b16 	vmov	d6, r0, r1
 8014522:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8014526:	b003      	add	sp, #12
 8014528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801452c <__copybits>:
 801452c:	3901      	subs	r1, #1
 801452e:	b570      	push	{r4, r5, r6, lr}
 8014530:	1149      	asrs	r1, r1, #5
 8014532:	6914      	ldr	r4, [r2, #16]
 8014534:	3101      	adds	r1, #1
 8014536:	f102 0314 	add.w	r3, r2, #20
 801453a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801453e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014542:	1f05      	subs	r5, r0, #4
 8014544:	42a3      	cmp	r3, r4
 8014546:	d30c      	bcc.n	8014562 <__copybits+0x36>
 8014548:	1aa3      	subs	r3, r4, r2
 801454a:	3b11      	subs	r3, #17
 801454c:	f023 0303 	bic.w	r3, r3, #3
 8014550:	3211      	adds	r2, #17
 8014552:	42a2      	cmp	r2, r4
 8014554:	bf88      	it	hi
 8014556:	2300      	movhi	r3, #0
 8014558:	4418      	add	r0, r3
 801455a:	2300      	movs	r3, #0
 801455c:	4288      	cmp	r0, r1
 801455e:	d305      	bcc.n	801456c <__copybits+0x40>
 8014560:	bd70      	pop	{r4, r5, r6, pc}
 8014562:	f853 6b04 	ldr.w	r6, [r3], #4
 8014566:	f845 6f04 	str.w	r6, [r5, #4]!
 801456a:	e7eb      	b.n	8014544 <__copybits+0x18>
 801456c:	f840 3b04 	str.w	r3, [r0], #4
 8014570:	e7f4      	b.n	801455c <__copybits+0x30>

08014572 <__any_on>:
 8014572:	f100 0214 	add.w	r2, r0, #20
 8014576:	6900      	ldr	r0, [r0, #16]
 8014578:	114b      	asrs	r3, r1, #5
 801457a:	4298      	cmp	r0, r3
 801457c:	b510      	push	{r4, lr}
 801457e:	db11      	blt.n	80145a4 <__any_on+0x32>
 8014580:	dd0a      	ble.n	8014598 <__any_on+0x26>
 8014582:	f011 011f 	ands.w	r1, r1, #31
 8014586:	d007      	beq.n	8014598 <__any_on+0x26>
 8014588:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801458c:	fa24 f001 	lsr.w	r0, r4, r1
 8014590:	fa00 f101 	lsl.w	r1, r0, r1
 8014594:	428c      	cmp	r4, r1
 8014596:	d10b      	bne.n	80145b0 <__any_on+0x3e>
 8014598:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801459c:	4293      	cmp	r3, r2
 801459e:	d803      	bhi.n	80145a8 <__any_on+0x36>
 80145a0:	2000      	movs	r0, #0
 80145a2:	bd10      	pop	{r4, pc}
 80145a4:	4603      	mov	r3, r0
 80145a6:	e7f7      	b.n	8014598 <__any_on+0x26>
 80145a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80145ac:	2900      	cmp	r1, #0
 80145ae:	d0f5      	beq.n	801459c <__any_on+0x2a>
 80145b0:	2001      	movs	r0, #1
 80145b2:	e7f6      	b.n	80145a2 <__any_on+0x30>

080145b4 <_calloc_r>:
 80145b4:	b513      	push	{r0, r1, r4, lr}
 80145b6:	434a      	muls	r2, r1
 80145b8:	4611      	mov	r1, r2
 80145ba:	9201      	str	r2, [sp, #4]
 80145bc:	f7fb ff22 	bl	8010404 <_malloc_r>
 80145c0:	4604      	mov	r4, r0
 80145c2:	b118      	cbz	r0, 80145cc <_calloc_r+0x18>
 80145c4:	9a01      	ldr	r2, [sp, #4]
 80145c6:	2100      	movs	r1, #0
 80145c8:	f7fb fec4 	bl	8010354 <memset>
 80145cc:	4620      	mov	r0, r4
 80145ce:	b002      	add	sp, #8
 80145d0:	bd10      	pop	{r4, pc}

080145d2 <_realloc_r>:
 80145d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145d4:	4607      	mov	r7, r0
 80145d6:	4614      	mov	r4, r2
 80145d8:	460e      	mov	r6, r1
 80145da:	b921      	cbnz	r1, 80145e6 <_realloc_r+0x14>
 80145dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80145e0:	4611      	mov	r1, r2
 80145e2:	f7fb bf0f 	b.w	8010404 <_malloc_r>
 80145e6:	b922      	cbnz	r2, 80145f2 <_realloc_r+0x20>
 80145e8:	f7fb febc 	bl	8010364 <_free_r>
 80145ec:	4625      	mov	r5, r4
 80145ee:	4628      	mov	r0, r5
 80145f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145f2:	f000 fa63 	bl	8014abc <_malloc_usable_size_r>
 80145f6:	42a0      	cmp	r0, r4
 80145f8:	d20f      	bcs.n	801461a <_realloc_r+0x48>
 80145fa:	4621      	mov	r1, r4
 80145fc:	4638      	mov	r0, r7
 80145fe:	f7fb ff01 	bl	8010404 <_malloc_r>
 8014602:	4605      	mov	r5, r0
 8014604:	2800      	cmp	r0, #0
 8014606:	d0f2      	beq.n	80145ee <_realloc_r+0x1c>
 8014608:	4631      	mov	r1, r6
 801460a:	4622      	mov	r2, r4
 801460c:	f7fb fe7a 	bl	8010304 <memcpy>
 8014610:	4631      	mov	r1, r6
 8014612:	4638      	mov	r0, r7
 8014614:	f7fb fea6 	bl	8010364 <_free_r>
 8014618:	e7e9      	b.n	80145ee <_realloc_r+0x1c>
 801461a:	4635      	mov	r5, r6
 801461c:	e7e7      	b.n	80145ee <_realloc_r+0x1c>

0801461e <__ssputs_r>:
 801461e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014622:	688e      	ldr	r6, [r1, #8]
 8014624:	429e      	cmp	r6, r3
 8014626:	4682      	mov	sl, r0
 8014628:	460c      	mov	r4, r1
 801462a:	4690      	mov	r8, r2
 801462c:	461f      	mov	r7, r3
 801462e:	d838      	bhi.n	80146a2 <__ssputs_r+0x84>
 8014630:	898a      	ldrh	r2, [r1, #12]
 8014632:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014636:	d032      	beq.n	801469e <__ssputs_r+0x80>
 8014638:	6825      	ldr	r5, [r4, #0]
 801463a:	6909      	ldr	r1, [r1, #16]
 801463c:	eba5 0901 	sub.w	r9, r5, r1
 8014640:	6965      	ldr	r5, [r4, #20]
 8014642:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014646:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801464a:	3301      	adds	r3, #1
 801464c:	444b      	add	r3, r9
 801464e:	106d      	asrs	r5, r5, #1
 8014650:	429d      	cmp	r5, r3
 8014652:	bf38      	it	cc
 8014654:	461d      	movcc	r5, r3
 8014656:	0553      	lsls	r3, r2, #21
 8014658:	d531      	bpl.n	80146be <__ssputs_r+0xa0>
 801465a:	4629      	mov	r1, r5
 801465c:	f7fb fed2 	bl	8010404 <_malloc_r>
 8014660:	4606      	mov	r6, r0
 8014662:	b950      	cbnz	r0, 801467a <__ssputs_r+0x5c>
 8014664:	230c      	movs	r3, #12
 8014666:	f8ca 3000 	str.w	r3, [sl]
 801466a:	89a3      	ldrh	r3, [r4, #12]
 801466c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014670:	81a3      	strh	r3, [r4, #12]
 8014672:	f04f 30ff 	mov.w	r0, #4294967295
 8014676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801467a:	6921      	ldr	r1, [r4, #16]
 801467c:	464a      	mov	r2, r9
 801467e:	f7fb fe41 	bl	8010304 <memcpy>
 8014682:	89a3      	ldrh	r3, [r4, #12]
 8014684:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801468c:	81a3      	strh	r3, [r4, #12]
 801468e:	6126      	str	r6, [r4, #16]
 8014690:	6165      	str	r5, [r4, #20]
 8014692:	444e      	add	r6, r9
 8014694:	eba5 0509 	sub.w	r5, r5, r9
 8014698:	6026      	str	r6, [r4, #0]
 801469a:	60a5      	str	r5, [r4, #8]
 801469c:	463e      	mov	r6, r7
 801469e:	42be      	cmp	r6, r7
 80146a0:	d900      	bls.n	80146a4 <__ssputs_r+0x86>
 80146a2:	463e      	mov	r6, r7
 80146a4:	4632      	mov	r2, r6
 80146a6:	6820      	ldr	r0, [r4, #0]
 80146a8:	4641      	mov	r1, r8
 80146aa:	f7fb fe39 	bl	8010320 <memmove>
 80146ae:	68a3      	ldr	r3, [r4, #8]
 80146b0:	6822      	ldr	r2, [r4, #0]
 80146b2:	1b9b      	subs	r3, r3, r6
 80146b4:	4432      	add	r2, r6
 80146b6:	60a3      	str	r3, [r4, #8]
 80146b8:	6022      	str	r2, [r4, #0]
 80146ba:	2000      	movs	r0, #0
 80146bc:	e7db      	b.n	8014676 <__ssputs_r+0x58>
 80146be:	462a      	mov	r2, r5
 80146c0:	f7ff ff87 	bl	80145d2 <_realloc_r>
 80146c4:	4606      	mov	r6, r0
 80146c6:	2800      	cmp	r0, #0
 80146c8:	d1e1      	bne.n	801468e <__ssputs_r+0x70>
 80146ca:	6921      	ldr	r1, [r4, #16]
 80146cc:	4650      	mov	r0, sl
 80146ce:	f7fb fe49 	bl	8010364 <_free_r>
 80146d2:	e7c7      	b.n	8014664 <__ssputs_r+0x46>

080146d4 <_svfiprintf_r>:
 80146d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146d8:	4698      	mov	r8, r3
 80146da:	898b      	ldrh	r3, [r1, #12]
 80146dc:	061b      	lsls	r3, r3, #24
 80146de:	b09d      	sub	sp, #116	; 0x74
 80146e0:	4607      	mov	r7, r0
 80146e2:	460d      	mov	r5, r1
 80146e4:	4614      	mov	r4, r2
 80146e6:	d50e      	bpl.n	8014706 <_svfiprintf_r+0x32>
 80146e8:	690b      	ldr	r3, [r1, #16]
 80146ea:	b963      	cbnz	r3, 8014706 <_svfiprintf_r+0x32>
 80146ec:	2140      	movs	r1, #64	; 0x40
 80146ee:	f7fb fe89 	bl	8010404 <_malloc_r>
 80146f2:	6028      	str	r0, [r5, #0]
 80146f4:	6128      	str	r0, [r5, #16]
 80146f6:	b920      	cbnz	r0, 8014702 <_svfiprintf_r+0x2e>
 80146f8:	230c      	movs	r3, #12
 80146fa:	603b      	str	r3, [r7, #0]
 80146fc:	f04f 30ff 	mov.w	r0, #4294967295
 8014700:	e0d1      	b.n	80148a6 <_svfiprintf_r+0x1d2>
 8014702:	2340      	movs	r3, #64	; 0x40
 8014704:	616b      	str	r3, [r5, #20]
 8014706:	2300      	movs	r3, #0
 8014708:	9309      	str	r3, [sp, #36]	; 0x24
 801470a:	2320      	movs	r3, #32
 801470c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014710:	f8cd 800c 	str.w	r8, [sp, #12]
 8014714:	2330      	movs	r3, #48	; 0x30
 8014716:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80148c0 <_svfiprintf_r+0x1ec>
 801471a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801471e:	f04f 0901 	mov.w	r9, #1
 8014722:	4623      	mov	r3, r4
 8014724:	469a      	mov	sl, r3
 8014726:	f813 2b01 	ldrb.w	r2, [r3], #1
 801472a:	b10a      	cbz	r2, 8014730 <_svfiprintf_r+0x5c>
 801472c:	2a25      	cmp	r2, #37	; 0x25
 801472e:	d1f9      	bne.n	8014724 <_svfiprintf_r+0x50>
 8014730:	ebba 0b04 	subs.w	fp, sl, r4
 8014734:	d00b      	beq.n	801474e <_svfiprintf_r+0x7a>
 8014736:	465b      	mov	r3, fp
 8014738:	4622      	mov	r2, r4
 801473a:	4629      	mov	r1, r5
 801473c:	4638      	mov	r0, r7
 801473e:	f7ff ff6e 	bl	801461e <__ssputs_r>
 8014742:	3001      	adds	r0, #1
 8014744:	f000 80aa 	beq.w	801489c <_svfiprintf_r+0x1c8>
 8014748:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801474a:	445a      	add	r2, fp
 801474c:	9209      	str	r2, [sp, #36]	; 0x24
 801474e:	f89a 3000 	ldrb.w	r3, [sl]
 8014752:	2b00      	cmp	r3, #0
 8014754:	f000 80a2 	beq.w	801489c <_svfiprintf_r+0x1c8>
 8014758:	2300      	movs	r3, #0
 801475a:	f04f 32ff 	mov.w	r2, #4294967295
 801475e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014762:	f10a 0a01 	add.w	sl, sl, #1
 8014766:	9304      	str	r3, [sp, #16]
 8014768:	9307      	str	r3, [sp, #28]
 801476a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801476e:	931a      	str	r3, [sp, #104]	; 0x68
 8014770:	4654      	mov	r4, sl
 8014772:	2205      	movs	r2, #5
 8014774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014778:	4851      	ldr	r0, [pc, #324]	; (80148c0 <_svfiprintf_r+0x1ec>)
 801477a:	f7eb fdc9 	bl	8000310 <memchr>
 801477e:	9a04      	ldr	r2, [sp, #16]
 8014780:	b9d8      	cbnz	r0, 80147ba <_svfiprintf_r+0xe6>
 8014782:	06d0      	lsls	r0, r2, #27
 8014784:	bf44      	itt	mi
 8014786:	2320      	movmi	r3, #32
 8014788:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801478c:	0711      	lsls	r1, r2, #28
 801478e:	bf44      	itt	mi
 8014790:	232b      	movmi	r3, #43	; 0x2b
 8014792:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014796:	f89a 3000 	ldrb.w	r3, [sl]
 801479a:	2b2a      	cmp	r3, #42	; 0x2a
 801479c:	d015      	beq.n	80147ca <_svfiprintf_r+0xf6>
 801479e:	9a07      	ldr	r2, [sp, #28]
 80147a0:	4654      	mov	r4, sl
 80147a2:	2000      	movs	r0, #0
 80147a4:	f04f 0c0a 	mov.w	ip, #10
 80147a8:	4621      	mov	r1, r4
 80147aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80147ae:	3b30      	subs	r3, #48	; 0x30
 80147b0:	2b09      	cmp	r3, #9
 80147b2:	d94e      	bls.n	8014852 <_svfiprintf_r+0x17e>
 80147b4:	b1b0      	cbz	r0, 80147e4 <_svfiprintf_r+0x110>
 80147b6:	9207      	str	r2, [sp, #28]
 80147b8:	e014      	b.n	80147e4 <_svfiprintf_r+0x110>
 80147ba:	eba0 0308 	sub.w	r3, r0, r8
 80147be:	fa09 f303 	lsl.w	r3, r9, r3
 80147c2:	4313      	orrs	r3, r2
 80147c4:	9304      	str	r3, [sp, #16]
 80147c6:	46a2      	mov	sl, r4
 80147c8:	e7d2      	b.n	8014770 <_svfiprintf_r+0x9c>
 80147ca:	9b03      	ldr	r3, [sp, #12]
 80147cc:	1d19      	adds	r1, r3, #4
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	9103      	str	r1, [sp, #12]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	bfbb      	ittet	lt
 80147d6:	425b      	neglt	r3, r3
 80147d8:	f042 0202 	orrlt.w	r2, r2, #2
 80147dc:	9307      	strge	r3, [sp, #28]
 80147de:	9307      	strlt	r3, [sp, #28]
 80147e0:	bfb8      	it	lt
 80147e2:	9204      	strlt	r2, [sp, #16]
 80147e4:	7823      	ldrb	r3, [r4, #0]
 80147e6:	2b2e      	cmp	r3, #46	; 0x2e
 80147e8:	d10c      	bne.n	8014804 <_svfiprintf_r+0x130>
 80147ea:	7863      	ldrb	r3, [r4, #1]
 80147ec:	2b2a      	cmp	r3, #42	; 0x2a
 80147ee:	d135      	bne.n	801485c <_svfiprintf_r+0x188>
 80147f0:	9b03      	ldr	r3, [sp, #12]
 80147f2:	1d1a      	adds	r2, r3, #4
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	9203      	str	r2, [sp, #12]
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	bfb8      	it	lt
 80147fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8014800:	3402      	adds	r4, #2
 8014802:	9305      	str	r3, [sp, #20]
 8014804:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80148d0 <_svfiprintf_r+0x1fc>
 8014808:	7821      	ldrb	r1, [r4, #0]
 801480a:	2203      	movs	r2, #3
 801480c:	4650      	mov	r0, sl
 801480e:	f7eb fd7f 	bl	8000310 <memchr>
 8014812:	b140      	cbz	r0, 8014826 <_svfiprintf_r+0x152>
 8014814:	2340      	movs	r3, #64	; 0x40
 8014816:	eba0 000a 	sub.w	r0, r0, sl
 801481a:	fa03 f000 	lsl.w	r0, r3, r0
 801481e:	9b04      	ldr	r3, [sp, #16]
 8014820:	4303      	orrs	r3, r0
 8014822:	3401      	adds	r4, #1
 8014824:	9304      	str	r3, [sp, #16]
 8014826:	f814 1b01 	ldrb.w	r1, [r4], #1
 801482a:	4826      	ldr	r0, [pc, #152]	; (80148c4 <_svfiprintf_r+0x1f0>)
 801482c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014830:	2206      	movs	r2, #6
 8014832:	f7eb fd6d 	bl	8000310 <memchr>
 8014836:	2800      	cmp	r0, #0
 8014838:	d038      	beq.n	80148ac <_svfiprintf_r+0x1d8>
 801483a:	4b23      	ldr	r3, [pc, #140]	; (80148c8 <_svfiprintf_r+0x1f4>)
 801483c:	bb1b      	cbnz	r3, 8014886 <_svfiprintf_r+0x1b2>
 801483e:	9b03      	ldr	r3, [sp, #12]
 8014840:	3307      	adds	r3, #7
 8014842:	f023 0307 	bic.w	r3, r3, #7
 8014846:	3308      	adds	r3, #8
 8014848:	9303      	str	r3, [sp, #12]
 801484a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801484c:	4433      	add	r3, r6
 801484e:	9309      	str	r3, [sp, #36]	; 0x24
 8014850:	e767      	b.n	8014722 <_svfiprintf_r+0x4e>
 8014852:	fb0c 3202 	mla	r2, ip, r2, r3
 8014856:	460c      	mov	r4, r1
 8014858:	2001      	movs	r0, #1
 801485a:	e7a5      	b.n	80147a8 <_svfiprintf_r+0xd4>
 801485c:	2300      	movs	r3, #0
 801485e:	3401      	adds	r4, #1
 8014860:	9305      	str	r3, [sp, #20]
 8014862:	4619      	mov	r1, r3
 8014864:	f04f 0c0a 	mov.w	ip, #10
 8014868:	4620      	mov	r0, r4
 801486a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801486e:	3a30      	subs	r2, #48	; 0x30
 8014870:	2a09      	cmp	r2, #9
 8014872:	d903      	bls.n	801487c <_svfiprintf_r+0x1a8>
 8014874:	2b00      	cmp	r3, #0
 8014876:	d0c5      	beq.n	8014804 <_svfiprintf_r+0x130>
 8014878:	9105      	str	r1, [sp, #20]
 801487a:	e7c3      	b.n	8014804 <_svfiprintf_r+0x130>
 801487c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014880:	4604      	mov	r4, r0
 8014882:	2301      	movs	r3, #1
 8014884:	e7f0      	b.n	8014868 <_svfiprintf_r+0x194>
 8014886:	ab03      	add	r3, sp, #12
 8014888:	9300      	str	r3, [sp, #0]
 801488a:	462a      	mov	r2, r5
 801488c:	4b0f      	ldr	r3, [pc, #60]	; (80148cc <_svfiprintf_r+0x1f8>)
 801488e:	a904      	add	r1, sp, #16
 8014890:	4638      	mov	r0, r7
 8014892:	f7fb fffd 	bl	8010890 <_printf_float>
 8014896:	1c42      	adds	r2, r0, #1
 8014898:	4606      	mov	r6, r0
 801489a:	d1d6      	bne.n	801484a <_svfiprintf_r+0x176>
 801489c:	89ab      	ldrh	r3, [r5, #12]
 801489e:	065b      	lsls	r3, r3, #25
 80148a0:	f53f af2c 	bmi.w	80146fc <_svfiprintf_r+0x28>
 80148a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80148a6:	b01d      	add	sp, #116	; 0x74
 80148a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148ac:	ab03      	add	r3, sp, #12
 80148ae:	9300      	str	r3, [sp, #0]
 80148b0:	462a      	mov	r2, r5
 80148b2:	4b06      	ldr	r3, [pc, #24]	; (80148cc <_svfiprintf_r+0x1f8>)
 80148b4:	a904      	add	r1, sp, #16
 80148b6:	4638      	mov	r0, r7
 80148b8:	f7fc fa76 	bl	8010da8 <_printf_i>
 80148bc:	e7eb      	b.n	8014896 <_svfiprintf_r+0x1c2>
 80148be:	bf00      	nop
 80148c0:	0801dc98 	.word	0x0801dc98
 80148c4:	0801dca2 	.word	0x0801dca2
 80148c8:	08010891 	.word	0x08010891
 80148cc:	0801461f 	.word	0x0801461f
 80148d0:	0801dc9e 	.word	0x0801dc9e
 80148d4:	00000000 	.word	0x00000000

080148d8 <nan>:
 80148d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80148e0 <nan+0x8>
 80148dc:	4770      	bx	lr
 80148de:	bf00      	nop
 80148e0:	00000000 	.word	0x00000000
 80148e4:	7ff80000 	.word	0x7ff80000

080148e8 <_raise_r>:
 80148e8:	291f      	cmp	r1, #31
 80148ea:	b538      	push	{r3, r4, r5, lr}
 80148ec:	4604      	mov	r4, r0
 80148ee:	460d      	mov	r5, r1
 80148f0:	d904      	bls.n	80148fc <_raise_r+0x14>
 80148f2:	2316      	movs	r3, #22
 80148f4:	6003      	str	r3, [r0, #0]
 80148f6:	f04f 30ff 	mov.w	r0, #4294967295
 80148fa:	bd38      	pop	{r3, r4, r5, pc}
 80148fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80148fe:	b112      	cbz	r2, 8014906 <_raise_r+0x1e>
 8014900:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014904:	b94b      	cbnz	r3, 801491a <_raise_r+0x32>
 8014906:	4620      	mov	r0, r4
 8014908:	f000 f830 	bl	801496c <_getpid_r>
 801490c:	462a      	mov	r2, r5
 801490e:	4601      	mov	r1, r0
 8014910:	4620      	mov	r0, r4
 8014912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014916:	f000 b817 	b.w	8014948 <_kill_r>
 801491a:	2b01      	cmp	r3, #1
 801491c:	d00a      	beq.n	8014934 <_raise_r+0x4c>
 801491e:	1c59      	adds	r1, r3, #1
 8014920:	d103      	bne.n	801492a <_raise_r+0x42>
 8014922:	2316      	movs	r3, #22
 8014924:	6003      	str	r3, [r0, #0]
 8014926:	2001      	movs	r0, #1
 8014928:	e7e7      	b.n	80148fa <_raise_r+0x12>
 801492a:	2400      	movs	r4, #0
 801492c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014930:	4628      	mov	r0, r5
 8014932:	4798      	blx	r3
 8014934:	2000      	movs	r0, #0
 8014936:	e7e0      	b.n	80148fa <_raise_r+0x12>

08014938 <raise>:
 8014938:	4b02      	ldr	r3, [pc, #8]	; (8014944 <raise+0xc>)
 801493a:	4601      	mov	r1, r0
 801493c:	6818      	ldr	r0, [r3, #0]
 801493e:	f7ff bfd3 	b.w	80148e8 <_raise_r>
 8014942:	bf00      	nop
 8014944:	2400a0f0 	.word	0x2400a0f0

08014948 <_kill_r>:
 8014948:	b538      	push	{r3, r4, r5, lr}
 801494a:	4d07      	ldr	r5, [pc, #28]	; (8014968 <_kill_r+0x20>)
 801494c:	2300      	movs	r3, #0
 801494e:	4604      	mov	r4, r0
 8014950:	4608      	mov	r0, r1
 8014952:	4611      	mov	r1, r2
 8014954:	602b      	str	r3, [r5, #0]
 8014956:	f7ec ffa5 	bl	80018a4 <_kill>
 801495a:	1c43      	adds	r3, r0, #1
 801495c:	d102      	bne.n	8014964 <_kill_r+0x1c>
 801495e:	682b      	ldr	r3, [r5, #0]
 8014960:	b103      	cbz	r3, 8014964 <_kill_r+0x1c>
 8014962:	6023      	str	r3, [r4, #0]
 8014964:	bd38      	pop	{r3, r4, r5, pc}
 8014966:	bf00      	nop
 8014968:	2400f6ac 	.word	0x2400f6ac

0801496c <_getpid_r>:
 801496c:	f7ec bf92 	b.w	8001894 <_getpid>

08014970 <__sread>:
 8014970:	b510      	push	{r4, lr}
 8014972:	460c      	mov	r4, r1
 8014974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014978:	f000 f8a8 	bl	8014acc <_read_r>
 801497c:	2800      	cmp	r0, #0
 801497e:	bfab      	itete	ge
 8014980:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014982:	89a3      	ldrhlt	r3, [r4, #12]
 8014984:	181b      	addge	r3, r3, r0
 8014986:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801498a:	bfac      	ite	ge
 801498c:	6563      	strge	r3, [r4, #84]	; 0x54
 801498e:	81a3      	strhlt	r3, [r4, #12]
 8014990:	bd10      	pop	{r4, pc}

08014992 <__swrite>:
 8014992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014996:	461f      	mov	r7, r3
 8014998:	898b      	ldrh	r3, [r1, #12]
 801499a:	05db      	lsls	r3, r3, #23
 801499c:	4605      	mov	r5, r0
 801499e:	460c      	mov	r4, r1
 80149a0:	4616      	mov	r6, r2
 80149a2:	d505      	bpl.n	80149b0 <__swrite+0x1e>
 80149a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149a8:	2302      	movs	r3, #2
 80149aa:	2200      	movs	r2, #0
 80149ac:	f000 f874 	bl	8014a98 <_lseek_r>
 80149b0:	89a3      	ldrh	r3, [r4, #12]
 80149b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80149b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80149ba:	81a3      	strh	r3, [r4, #12]
 80149bc:	4632      	mov	r2, r6
 80149be:	463b      	mov	r3, r7
 80149c0:	4628      	mov	r0, r5
 80149c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80149c6:	f000 b823 	b.w	8014a10 <_write_r>

080149ca <__sseek>:
 80149ca:	b510      	push	{r4, lr}
 80149cc:	460c      	mov	r4, r1
 80149ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149d2:	f000 f861 	bl	8014a98 <_lseek_r>
 80149d6:	1c43      	adds	r3, r0, #1
 80149d8:	89a3      	ldrh	r3, [r4, #12]
 80149da:	bf15      	itete	ne
 80149dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80149de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80149e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80149e6:	81a3      	strheq	r3, [r4, #12]
 80149e8:	bf18      	it	ne
 80149ea:	81a3      	strhne	r3, [r4, #12]
 80149ec:	bd10      	pop	{r4, pc}

080149ee <__sclose>:
 80149ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149f2:	f000 b81f 	b.w	8014a34 <_close_r>

080149f6 <__ascii_wctomb>:
 80149f6:	b149      	cbz	r1, 8014a0c <__ascii_wctomb+0x16>
 80149f8:	2aff      	cmp	r2, #255	; 0xff
 80149fa:	bf85      	ittet	hi
 80149fc:	238a      	movhi	r3, #138	; 0x8a
 80149fe:	6003      	strhi	r3, [r0, #0]
 8014a00:	700a      	strbls	r2, [r1, #0]
 8014a02:	f04f 30ff 	movhi.w	r0, #4294967295
 8014a06:	bf98      	it	ls
 8014a08:	2001      	movls	r0, #1
 8014a0a:	4770      	bx	lr
 8014a0c:	4608      	mov	r0, r1
 8014a0e:	4770      	bx	lr

08014a10 <_write_r>:
 8014a10:	b538      	push	{r3, r4, r5, lr}
 8014a12:	4d07      	ldr	r5, [pc, #28]	; (8014a30 <_write_r+0x20>)
 8014a14:	4604      	mov	r4, r0
 8014a16:	4608      	mov	r0, r1
 8014a18:	4611      	mov	r1, r2
 8014a1a:	2200      	movs	r2, #0
 8014a1c:	602a      	str	r2, [r5, #0]
 8014a1e:	461a      	mov	r2, r3
 8014a20:	f7ec ff77 	bl	8001912 <_write>
 8014a24:	1c43      	adds	r3, r0, #1
 8014a26:	d102      	bne.n	8014a2e <_write_r+0x1e>
 8014a28:	682b      	ldr	r3, [r5, #0]
 8014a2a:	b103      	cbz	r3, 8014a2e <_write_r+0x1e>
 8014a2c:	6023      	str	r3, [r4, #0]
 8014a2e:	bd38      	pop	{r3, r4, r5, pc}
 8014a30:	2400f6ac 	.word	0x2400f6ac

08014a34 <_close_r>:
 8014a34:	b538      	push	{r3, r4, r5, lr}
 8014a36:	4d06      	ldr	r5, [pc, #24]	; (8014a50 <_close_r+0x1c>)
 8014a38:	2300      	movs	r3, #0
 8014a3a:	4604      	mov	r4, r0
 8014a3c:	4608      	mov	r0, r1
 8014a3e:	602b      	str	r3, [r5, #0]
 8014a40:	f7ec ff83 	bl	800194a <_close>
 8014a44:	1c43      	adds	r3, r0, #1
 8014a46:	d102      	bne.n	8014a4e <_close_r+0x1a>
 8014a48:	682b      	ldr	r3, [r5, #0]
 8014a4a:	b103      	cbz	r3, 8014a4e <_close_r+0x1a>
 8014a4c:	6023      	str	r3, [r4, #0]
 8014a4e:	bd38      	pop	{r3, r4, r5, pc}
 8014a50:	2400f6ac 	.word	0x2400f6ac

08014a54 <_fstat_r>:
 8014a54:	b538      	push	{r3, r4, r5, lr}
 8014a56:	4d07      	ldr	r5, [pc, #28]	; (8014a74 <_fstat_r+0x20>)
 8014a58:	2300      	movs	r3, #0
 8014a5a:	4604      	mov	r4, r0
 8014a5c:	4608      	mov	r0, r1
 8014a5e:	4611      	mov	r1, r2
 8014a60:	602b      	str	r3, [r5, #0]
 8014a62:	f7ec ff7e 	bl	8001962 <_fstat>
 8014a66:	1c43      	adds	r3, r0, #1
 8014a68:	d102      	bne.n	8014a70 <_fstat_r+0x1c>
 8014a6a:	682b      	ldr	r3, [r5, #0]
 8014a6c:	b103      	cbz	r3, 8014a70 <_fstat_r+0x1c>
 8014a6e:	6023      	str	r3, [r4, #0]
 8014a70:	bd38      	pop	{r3, r4, r5, pc}
 8014a72:	bf00      	nop
 8014a74:	2400f6ac 	.word	0x2400f6ac

08014a78 <_isatty_r>:
 8014a78:	b538      	push	{r3, r4, r5, lr}
 8014a7a:	4d06      	ldr	r5, [pc, #24]	; (8014a94 <_isatty_r+0x1c>)
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	4604      	mov	r4, r0
 8014a80:	4608      	mov	r0, r1
 8014a82:	602b      	str	r3, [r5, #0]
 8014a84:	f7ec ff7d 	bl	8001982 <_isatty>
 8014a88:	1c43      	adds	r3, r0, #1
 8014a8a:	d102      	bne.n	8014a92 <_isatty_r+0x1a>
 8014a8c:	682b      	ldr	r3, [r5, #0]
 8014a8e:	b103      	cbz	r3, 8014a92 <_isatty_r+0x1a>
 8014a90:	6023      	str	r3, [r4, #0]
 8014a92:	bd38      	pop	{r3, r4, r5, pc}
 8014a94:	2400f6ac 	.word	0x2400f6ac

08014a98 <_lseek_r>:
 8014a98:	b538      	push	{r3, r4, r5, lr}
 8014a9a:	4d07      	ldr	r5, [pc, #28]	; (8014ab8 <_lseek_r+0x20>)
 8014a9c:	4604      	mov	r4, r0
 8014a9e:	4608      	mov	r0, r1
 8014aa0:	4611      	mov	r1, r2
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	602a      	str	r2, [r5, #0]
 8014aa6:	461a      	mov	r2, r3
 8014aa8:	f7ec ff76 	bl	8001998 <_lseek>
 8014aac:	1c43      	adds	r3, r0, #1
 8014aae:	d102      	bne.n	8014ab6 <_lseek_r+0x1e>
 8014ab0:	682b      	ldr	r3, [r5, #0]
 8014ab2:	b103      	cbz	r3, 8014ab6 <_lseek_r+0x1e>
 8014ab4:	6023      	str	r3, [r4, #0]
 8014ab6:	bd38      	pop	{r3, r4, r5, pc}
 8014ab8:	2400f6ac 	.word	0x2400f6ac

08014abc <_malloc_usable_size_r>:
 8014abc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014ac0:	1f18      	subs	r0, r3, #4
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	bfbc      	itt	lt
 8014ac6:	580b      	ldrlt	r3, [r1, r0]
 8014ac8:	18c0      	addlt	r0, r0, r3
 8014aca:	4770      	bx	lr

08014acc <_read_r>:
 8014acc:	b538      	push	{r3, r4, r5, lr}
 8014ace:	4d07      	ldr	r5, [pc, #28]	; (8014aec <_read_r+0x20>)
 8014ad0:	4604      	mov	r4, r0
 8014ad2:	4608      	mov	r0, r1
 8014ad4:	4611      	mov	r1, r2
 8014ad6:	2200      	movs	r2, #0
 8014ad8:	602a      	str	r2, [r5, #0]
 8014ada:	461a      	mov	r2, r3
 8014adc:	f7ec fefc 	bl	80018d8 <_read>
 8014ae0:	1c43      	adds	r3, r0, #1
 8014ae2:	d102      	bne.n	8014aea <_read_r+0x1e>
 8014ae4:	682b      	ldr	r3, [r5, #0]
 8014ae6:	b103      	cbz	r3, 8014aea <_read_r+0x1e>
 8014ae8:	6023      	str	r3, [r4, #0]
 8014aea:	bd38      	pop	{r3, r4, r5, pc}
 8014aec:	2400f6ac 	.word	0x2400f6ac

08014af0 <sinf_poly>:
 8014af0:	07cb      	lsls	r3, r1, #31
 8014af2:	d412      	bmi.n	8014b1a <sinf_poly+0x2a>
 8014af4:	ee21 6b00 	vmul.f64	d6, d1, d0
 8014af8:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 8014afc:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 8014b00:	eea5 7b01 	vfma.f64	d7, d5, d1
 8014b04:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 8014b08:	ee21 1b06 	vmul.f64	d1, d1, d6
 8014b0c:	eea5 0b06 	vfma.f64	d0, d5, d6
 8014b10:	eea7 0b01 	vfma.f64	d0, d7, d1
 8014b14:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8014b18:	4770      	bx	lr
 8014b1a:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 8014b1e:	ee21 6b01 	vmul.f64	d6, d1, d1
 8014b22:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 8014b26:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 8014b2a:	eea1 7b05 	vfma.f64	d7, d1, d5
 8014b2e:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 8014b32:	eea1 0b05 	vfma.f64	d0, d1, d5
 8014b36:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 8014b3a:	ee21 1b06 	vmul.f64	d1, d1, d6
 8014b3e:	eea6 0b05 	vfma.f64	d0, d6, d5
 8014b42:	e7e5      	b.n	8014b10 <sinf_poly+0x20>
 8014b44:	0000      	movs	r0, r0
	...

08014b48 <cosf>:
 8014b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b4a:	ee10 4a10 	vmov	r4, s0
 8014b4e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8014b52:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8014b56:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8014b5a:	d20c      	bcs.n	8014b76 <cosf+0x2e>
 8014b5c:	ee26 1b06 	vmul.f64	d1, d6, d6
 8014b60:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 8014b64:	d378      	bcc.n	8014c58 <cosf+0x110>
 8014b66:	eeb0 0b46 	vmov.f64	d0, d6
 8014b6a:	483f      	ldr	r0, [pc, #252]	; (8014c68 <cosf+0x120>)
 8014b6c:	2101      	movs	r1, #1
 8014b6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014b72:	f7ff bfbd 	b.w	8014af0 <sinf_poly>
 8014b76:	f240 422e 	movw	r2, #1070	; 0x42e
 8014b7a:	4293      	cmp	r3, r2
 8014b7c:	d826      	bhi.n	8014bcc <cosf+0x84>
 8014b7e:	4b3a      	ldr	r3, [pc, #232]	; (8014c68 <cosf+0x120>)
 8014b80:	ed93 7b08 	vldr	d7, [r3, #32]
 8014b84:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014b88:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8014b8c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8014b90:	ee17 1a90 	vmov	r1, s15
 8014b94:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 8014b98:	1609      	asrs	r1, r1, #24
 8014b9a:	ee07 1a90 	vmov	s15, r1
 8014b9e:	f001 0203 	and.w	r2, r1, #3
 8014ba2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8014ba6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8014baa:	ed92 0b00 	vldr	d0, [r2]
 8014bae:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8014bb2:	f011 0f02 	tst.w	r1, #2
 8014bb6:	eea5 6b47 	vfms.f64	d6, d5, d7
 8014bba:	f081 0101 	eor.w	r1, r1, #1
 8014bbe:	bf08      	it	eq
 8014bc0:	4618      	moveq	r0, r3
 8014bc2:	ee26 1b06 	vmul.f64	d1, d6, d6
 8014bc6:	ee20 0b06 	vmul.f64	d0, d0, d6
 8014bca:	e7d0      	b.n	8014b6e <cosf+0x26>
 8014bcc:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8014bd0:	d23e      	bcs.n	8014c50 <cosf+0x108>
 8014bd2:	4b26      	ldr	r3, [pc, #152]	; (8014c6c <cosf+0x124>)
 8014bd4:	f3c4 6283 	ubfx	r2, r4, #26, #4
 8014bd8:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8014bdc:	f3c4 0116 	ubfx	r1, r4, #0, #23
 8014be0:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8014be4:	6a06      	ldr	r6, [r0, #32]
 8014be6:	6900      	ldr	r0, [r0, #16]
 8014be8:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8014bec:	40a9      	lsls	r1, r5
 8014bee:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8014bf2:	fba1 6706 	umull	r6, r7, r1, r6
 8014bf6:	fb05 f301 	mul.w	r3, r5, r1
 8014bfa:	463a      	mov	r2, r7
 8014bfc:	fbe0 2301 	umlal	r2, r3, r0, r1
 8014c00:	1c11      	adds	r1, r2, #0
 8014c02:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 8014c06:	2000      	movs	r0, #0
 8014c08:	1a10      	subs	r0, r2, r0
 8014c0a:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 8014c0e:	eb63 0101 	sbc.w	r1, r3, r1
 8014c12:	f7eb fd5b 	bl	80006cc <__aeabi_l2d>
 8014c16:	0fb5      	lsrs	r5, r6, #30
 8014c18:	4b13      	ldr	r3, [pc, #76]	; (8014c68 <cosf+0x120>)
 8014c1a:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8014c1e:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8014c60 <cosf+0x118>
 8014c22:	ec41 0b17 	vmov	d7, r0, r1
 8014c26:	f004 0203 	and.w	r2, r4, #3
 8014c2a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8014c2e:	ee27 0b00 	vmul.f64	d0, d7, d0
 8014c32:	ed92 7b00 	vldr	d7, [r2]
 8014c36:	ee20 1b00 	vmul.f64	d1, d0, d0
 8014c3a:	f014 0f02 	tst.w	r4, #2
 8014c3e:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8014c42:	f085 0101 	eor.w	r1, r5, #1
 8014c46:	bf08      	it	eq
 8014c48:	4618      	moveq	r0, r3
 8014c4a:	ee27 0b00 	vmul.f64	d0, d7, d0
 8014c4e:	e78e      	b.n	8014b6e <cosf+0x26>
 8014c50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014c54:	f000 b817 	b.w	8014c86 <__math_invalidf>
 8014c58:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c5e:	bf00      	nop
 8014c60:	54442d18 	.word	0x54442d18
 8014c64:	3c1921fb 	.word	0x3c1921fb
 8014c68:	0801e170 	.word	0x0801e170
 8014c6c:	0801e10c 	.word	0x0801e10c

08014c70 <with_errnof>:
 8014c70:	b513      	push	{r0, r1, r4, lr}
 8014c72:	4604      	mov	r4, r0
 8014c74:	ed8d 0a01 	vstr	s0, [sp, #4]
 8014c78:	f7fb faf8 	bl	801026c <__errno>
 8014c7c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8014c80:	6004      	str	r4, [r0, #0]
 8014c82:	b002      	add	sp, #8
 8014c84:	bd10      	pop	{r4, pc}

08014c86 <__math_invalidf>:
 8014c86:	eef0 7a40 	vmov.f32	s15, s0
 8014c8a:	ee30 7a40 	vsub.f32	s14, s0, s0
 8014c8e:	eef4 7a67 	vcmp.f32	s15, s15
 8014c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c96:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8014c9a:	d602      	bvs.n	8014ca2 <__math_invalidf+0x1c>
 8014c9c:	2021      	movs	r0, #33	; 0x21
 8014c9e:	f7ff bfe7 	b.w	8014c70 <with_errnof>
 8014ca2:	4770      	bx	lr

08014ca4 <fmax>:
 8014ca4:	b508      	push	{r3, lr}
 8014ca6:	ed2d 8b04 	vpush	{d8-d9}
 8014caa:	eeb0 8b40 	vmov.f64	d8, d0
 8014cae:	eeb0 9b41 	vmov.f64	d9, d1
 8014cb2:	f000 f82d 	bl	8014d10 <__fpclassifyd>
 8014cb6:	b148      	cbz	r0, 8014ccc <fmax+0x28>
 8014cb8:	eeb0 0b49 	vmov.f64	d0, d9
 8014cbc:	f000 f828 	bl	8014d10 <__fpclassifyd>
 8014cc0:	b130      	cbz	r0, 8014cd0 <fmax+0x2c>
 8014cc2:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8014cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cca:	dc01      	bgt.n	8014cd0 <fmax+0x2c>
 8014ccc:	eeb0 8b49 	vmov.f64	d8, d9
 8014cd0:	eeb0 0b48 	vmov.f64	d0, d8
 8014cd4:	ecbd 8b04 	vpop	{d8-d9}
 8014cd8:	bd08      	pop	{r3, pc}

08014cda <fmin>:
 8014cda:	b508      	push	{r3, lr}
 8014cdc:	ed2d 8b04 	vpush	{d8-d9}
 8014ce0:	eeb0 8b40 	vmov.f64	d8, d0
 8014ce4:	eeb0 9b41 	vmov.f64	d9, d1
 8014ce8:	f000 f812 	bl	8014d10 <__fpclassifyd>
 8014cec:	b148      	cbz	r0, 8014d02 <fmin+0x28>
 8014cee:	eeb0 0b49 	vmov.f64	d0, d9
 8014cf2:	f000 f80d 	bl	8014d10 <__fpclassifyd>
 8014cf6:	b130      	cbz	r0, 8014d06 <fmin+0x2c>
 8014cf8:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8014cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d00:	d401      	bmi.n	8014d06 <fmin+0x2c>
 8014d02:	eeb0 8b49 	vmov.f64	d8, d9
 8014d06:	eeb0 0b48 	vmov.f64	d0, d8
 8014d0a:	ecbd 8b04 	vpop	{d8-d9}
 8014d0e:	bd08      	pop	{r3, pc}

08014d10 <__fpclassifyd>:
 8014d10:	ec51 0b10 	vmov	r0, r1, d0
 8014d14:	b510      	push	{r4, lr}
 8014d16:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8014d1a:	460b      	mov	r3, r1
 8014d1c:	d019      	beq.n	8014d52 <__fpclassifyd+0x42>
 8014d1e:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 8014d22:	490e      	ldr	r1, [pc, #56]	; (8014d5c <__fpclassifyd+0x4c>)
 8014d24:	428a      	cmp	r2, r1
 8014d26:	d90e      	bls.n	8014d46 <__fpclassifyd+0x36>
 8014d28:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8014d2c:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8014d30:	428a      	cmp	r2, r1
 8014d32:	d908      	bls.n	8014d46 <__fpclassifyd+0x36>
 8014d34:	4a0a      	ldr	r2, [pc, #40]	; (8014d60 <__fpclassifyd+0x50>)
 8014d36:	4213      	tst	r3, r2
 8014d38:	d007      	beq.n	8014d4a <__fpclassifyd+0x3a>
 8014d3a:	4294      	cmp	r4, r2
 8014d3c:	d107      	bne.n	8014d4e <__fpclassifyd+0x3e>
 8014d3e:	fab0 f080 	clz	r0, r0
 8014d42:	0940      	lsrs	r0, r0, #5
 8014d44:	bd10      	pop	{r4, pc}
 8014d46:	2004      	movs	r0, #4
 8014d48:	e7fc      	b.n	8014d44 <__fpclassifyd+0x34>
 8014d4a:	2003      	movs	r0, #3
 8014d4c:	e7fa      	b.n	8014d44 <__fpclassifyd+0x34>
 8014d4e:	2000      	movs	r0, #0
 8014d50:	e7f8      	b.n	8014d44 <__fpclassifyd+0x34>
 8014d52:	2800      	cmp	r0, #0
 8014d54:	d1ee      	bne.n	8014d34 <__fpclassifyd+0x24>
 8014d56:	2002      	movs	r0, #2
 8014d58:	e7f4      	b.n	8014d44 <__fpclassifyd+0x34>
 8014d5a:	bf00      	nop
 8014d5c:	7fdfffff 	.word	0x7fdfffff
 8014d60:	7ff00000 	.word	0x7ff00000

08014d64 <sinf_poly>:
 8014d64:	07cb      	lsls	r3, r1, #31
 8014d66:	d412      	bmi.n	8014d8e <sinf_poly+0x2a>
 8014d68:	ee21 6b00 	vmul.f64	d6, d1, d0
 8014d6c:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 8014d70:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 8014d74:	eea5 7b01 	vfma.f64	d7, d5, d1
 8014d78:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 8014d7c:	ee21 1b06 	vmul.f64	d1, d1, d6
 8014d80:	eea5 0b06 	vfma.f64	d0, d5, d6
 8014d84:	eea7 0b01 	vfma.f64	d0, d7, d1
 8014d88:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8014d8c:	4770      	bx	lr
 8014d8e:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 8014d92:	ee21 6b01 	vmul.f64	d6, d1, d1
 8014d96:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 8014d9a:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 8014d9e:	eea1 7b05 	vfma.f64	d7, d1, d5
 8014da2:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 8014da6:	eea1 0b05 	vfma.f64	d0, d1, d5
 8014daa:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 8014dae:	ee21 1b06 	vmul.f64	d1, d1, d6
 8014db2:	eea6 0b05 	vfma.f64	d0, d6, d5
 8014db6:	e7e5      	b.n	8014d84 <sinf_poly+0x20>

08014db8 <sinf>:
 8014db8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014dba:	ee10 4a10 	vmov	r4, s0
 8014dbe:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8014dc2:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8014dc6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8014dca:	eef0 7a40 	vmov.f32	s15, s0
 8014dce:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8014dd2:	d218      	bcs.n	8014e06 <sinf+0x4e>
 8014dd4:	ee26 1b06 	vmul.f64	d1, d6, d6
 8014dd8:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 8014ddc:	d20a      	bcs.n	8014df4 <sinf+0x3c>
 8014dde:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 8014de2:	d103      	bne.n	8014dec <sinf+0x34>
 8014de4:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8014de8:	ed8d 1a01 	vstr	s2, [sp, #4]
 8014dec:	eeb0 0a67 	vmov.f32	s0, s15
 8014df0:	b003      	add	sp, #12
 8014df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014df4:	483e      	ldr	r0, [pc, #248]	; (8014ef0 <sinf+0x138>)
 8014df6:	eeb0 0b46 	vmov.f64	d0, d6
 8014dfa:	2100      	movs	r1, #0
 8014dfc:	b003      	add	sp, #12
 8014dfe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014e02:	f7ff bfaf 	b.w	8014d64 <sinf_poly>
 8014e06:	f240 422e 	movw	r2, #1070	; 0x42e
 8014e0a:	4293      	cmp	r3, r2
 8014e0c:	d824      	bhi.n	8014e58 <sinf+0xa0>
 8014e0e:	4b38      	ldr	r3, [pc, #224]	; (8014ef0 <sinf+0x138>)
 8014e10:	ed93 7b08 	vldr	d7, [r3, #32]
 8014e14:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014e18:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8014e1c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8014e20:	ee17 1a90 	vmov	r1, s15
 8014e24:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 8014e28:	1609      	asrs	r1, r1, #24
 8014e2a:	ee07 1a90 	vmov	s15, r1
 8014e2e:	f001 0203 	and.w	r2, r1, #3
 8014e32:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8014e36:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8014e3a:	ed92 0b00 	vldr	d0, [r2]
 8014e3e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8014e42:	f011 0f02 	tst.w	r1, #2
 8014e46:	eea5 6b47 	vfms.f64	d6, d5, d7
 8014e4a:	bf08      	it	eq
 8014e4c:	4618      	moveq	r0, r3
 8014e4e:	ee26 1b06 	vmul.f64	d1, d6, d6
 8014e52:	ee20 0b06 	vmul.f64	d0, d0, d6
 8014e56:	e7d1      	b.n	8014dfc <sinf+0x44>
 8014e58:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8014e5c:	d23d      	bcs.n	8014eda <sinf+0x122>
 8014e5e:	4b25      	ldr	r3, [pc, #148]	; (8014ef4 <sinf+0x13c>)
 8014e60:	f3c4 6283 	ubfx	r2, r4, #26, #4
 8014e64:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8014e68:	f3c4 0116 	ubfx	r1, r4, #0, #23
 8014e6c:	6a06      	ldr	r6, [r0, #32]
 8014e6e:	6900      	ldr	r0, [r0, #16]
 8014e70:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8014e74:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8014e78:	40a9      	lsls	r1, r5
 8014e7a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8014e7e:	fba1 6706 	umull	r6, r7, r1, r6
 8014e82:	fb05 f301 	mul.w	r3, r5, r1
 8014e86:	463a      	mov	r2, r7
 8014e88:	fbe0 2301 	umlal	r2, r3, r0, r1
 8014e8c:	1c11      	adds	r1, r2, #0
 8014e8e:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 8014e92:	2000      	movs	r0, #0
 8014e94:	1a10      	subs	r0, r2, r0
 8014e96:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 8014e9a:	eb63 0101 	sbc.w	r1, r3, r1
 8014e9e:	f7eb fc15 	bl	80006cc <__aeabi_l2d>
 8014ea2:	0fb5      	lsrs	r5, r6, #30
 8014ea4:	4a12      	ldr	r2, [pc, #72]	; (8014ef0 <sinf+0x138>)
 8014ea6:	eb05 73d4 	add.w	r3, r5, r4, lsr #31
 8014eaa:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8014ee8 <sinf+0x130>
 8014eae:	ec41 0b17 	vmov	d7, r0, r1
 8014eb2:	f003 0103 	and.w	r1, r3, #3
 8014eb6:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8014eba:	ee27 0b00 	vmul.f64	d0, d7, d0
 8014ebe:	ed91 7b00 	vldr	d7, [r1]
 8014ec2:	ee20 1b00 	vmul.f64	d1, d0, d0
 8014ec6:	f013 0f02 	tst.w	r3, #2
 8014eca:	f102 0070 	add.w	r0, r2, #112	; 0x70
 8014ece:	4629      	mov	r1, r5
 8014ed0:	bf08      	it	eq
 8014ed2:	4610      	moveq	r0, r2
 8014ed4:	ee27 0b00 	vmul.f64	d0, d7, d0
 8014ed8:	e790      	b.n	8014dfc <sinf+0x44>
 8014eda:	b003      	add	sp, #12
 8014edc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014ee0:	f7ff bed1 	b.w	8014c86 <__math_invalidf>
 8014ee4:	f3af 8000 	nop.w
 8014ee8:	54442d18 	.word	0x54442d18
 8014eec:	3c1921fb 	.word	0x3c1921fb
 8014ef0:	0801e170 	.word	0x0801e170
 8014ef4:	0801e10c 	.word	0x0801e10c

08014ef8 <_init>:
 8014ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014efa:	bf00      	nop
 8014efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014efe:	bc08      	pop	{r3}
 8014f00:	469e      	mov	lr, r3
 8014f02:	4770      	bx	lr

08014f04 <_fini>:
 8014f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f06:	bf00      	nop
 8014f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f0a:	bc08      	pop	{r3}
 8014f0c:	469e      	mov	lr, r3
 8014f0e:	4770      	bx	lr
