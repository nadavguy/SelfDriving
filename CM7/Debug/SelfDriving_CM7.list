
SelfDriving_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000210d0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009978  08021370  08021370  00031370  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802ace8  0802ace8  0004a364  2**0
                  CONTENTS
  4 .ARM          00000008  0802ace8  0802ace8  0003ace8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802acf0  0802acf0  0004a364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802acf0  0802acf0  0003acf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802acf4  0802acf4  0003acf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000a364  24000000  0802acf8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a490  2400a364  0803505c  0004a364  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240147f4  0803505c  000547f4  2**0
                  ALLOC
 11 .data_RAM_D2  00000000  30000000  30000000  0004a364  2**0
                  CONTENTS
 12 .bss_RAM_D2   00000000  30000000  30000000  0004a364  2**0
                  CONTENTS
 13 .openamp_section 0000008c  38000000  0803505c  00050000  2**2
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  0004a364  2**0
                  CONTENTS, READONLY
 15 .debug_info   000a9ee9  00000000  00000000  0004a392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000ddb2  00000000  00000000  000f427b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002e28  00000000  00000000  00102030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002980  00000000  00000000  00104e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000538e3  00000000  00000000  001077d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0005eec5  00000000  00000000  0015b0bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00199a60  00000000  00000000  001b9f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000053  00000000  00000000  003539e0  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000d0d8  00000000  00000000  00353a34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400a364 	.word	0x2400a364
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08021358 	.word	0x08021358

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400a368 	.word	0x2400a368
 80002dc:	08021358 	.word	0x08021358

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b9a6 	b.w	8000a8c <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9d08      	ldr	r5, [sp, #32]
 80007ce:	4604      	mov	r4, r0
 80007d0:	468c      	mov	ip, r1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	f040 8083 	bne.w	80008de <__udivmoddi4+0x116>
 80007d8:	428a      	cmp	r2, r1
 80007da:	4617      	mov	r7, r2
 80007dc:	d947      	bls.n	800086e <__udivmoddi4+0xa6>
 80007de:	fab2 f282 	clz	r2, r2
 80007e2:	b142      	cbz	r2, 80007f6 <__udivmoddi4+0x2e>
 80007e4:	f1c2 0020 	rsb	r0, r2, #32
 80007e8:	fa24 f000 	lsr.w	r0, r4, r0
 80007ec:	4091      	lsls	r1, r2
 80007ee:	4097      	lsls	r7, r2
 80007f0:	ea40 0c01 	orr.w	ip, r0, r1
 80007f4:	4094      	lsls	r4, r2
 80007f6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007fa:	0c23      	lsrs	r3, r4, #16
 80007fc:	fbbc f6f8 	udiv	r6, ip, r8
 8000800:	fa1f fe87 	uxth.w	lr, r7
 8000804:	fb08 c116 	mls	r1, r8, r6, ip
 8000808:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800080c:	fb06 f10e 	mul.w	r1, r6, lr
 8000810:	4299      	cmp	r1, r3
 8000812:	d909      	bls.n	8000828 <__udivmoddi4+0x60>
 8000814:	18fb      	adds	r3, r7, r3
 8000816:	f106 30ff 	add.w	r0, r6, #4294967295
 800081a:	f080 8119 	bcs.w	8000a50 <__udivmoddi4+0x288>
 800081e:	4299      	cmp	r1, r3
 8000820:	f240 8116 	bls.w	8000a50 <__udivmoddi4+0x288>
 8000824:	3e02      	subs	r6, #2
 8000826:	443b      	add	r3, r7
 8000828:	1a5b      	subs	r3, r3, r1
 800082a:	b2a4      	uxth	r4, r4
 800082c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000830:	fb08 3310 	mls	r3, r8, r0, r3
 8000834:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000838:	fb00 fe0e 	mul.w	lr, r0, lr
 800083c:	45a6      	cmp	lr, r4
 800083e:	d909      	bls.n	8000854 <__udivmoddi4+0x8c>
 8000840:	193c      	adds	r4, r7, r4
 8000842:	f100 33ff 	add.w	r3, r0, #4294967295
 8000846:	f080 8105 	bcs.w	8000a54 <__udivmoddi4+0x28c>
 800084a:	45a6      	cmp	lr, r4
 800084c:	f240 8102 	bls.w	8000a54 <__udivmoddi4+0x28c>
 8000850:	3802      	subs	r0, #2
 8000852:	443c      	add	r4, r7
 8000854:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000858:	eba4 040e 	sub.w	r4, r4, lr
 800085c:	2600      	movs	r6, #0
 800085e:	b11d      	cbz	r5, 8000868 <__udivmoddi4+0xa0>
 8000860:	40d4      	lsrs	r4, r2
 8000862:	2300      	movs	r3, #0
 8000864:	e9c5 4300 	strd	r4, r3, [r5]
 8000868:	4631      	mov	r1, r6
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	b902      	cbnz	r2, 8000872 <__udivmoddi4+0xaa>
 8000870:	deff      	udf	#255	; 0xff
 8000872:	fab2 f282 	clz	r2, r2
 8000876:	2a00      	cmp	r2, #0
 8000878:	d150      	bne.n	800091c <__udivmoddi4+0x154>
 800087a:	1bcb      	subs	r3, r1, r7
 800087c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000880:	fa1f f887 	uxth.w	r8, r7
 8000884:	2601      	movs	r6, #1
 8000886:	fbb3 fcfe 	udiv	ip, r3, lr
 800088a:	0c21      	lsrs	r1, r4, #16
 800088c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000890:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000894:	fb08 f30c 	mul.w	r3, r8, ip
 8000898:	428b      	cmp	r3, r1
 800089a:	d907      	bls.n	80008ac <__udivmoddi4+0xe4>
 800089c:	1879      	adds	r1, r7, r1
 800089e:	f10c 30ff 	add.w	r0, ip, #4294967295
 80008a2:	d202      	bcs.n	80008aa <__udivmoddi4+0xe2>
 80008a4:	428b      	cmp	r3, r1
 80008a6:	f200 80e9 	bhi.w	8000a7c <__udivmoddi4+0x2b4>
 80008aa:	4684      	mov	ip, r0
 80008ac:	1ac9      	subs	r1, r1, r3
 80008ae:	b2a3      	uxth	r3, r4
 80008b0:	fbb1 f0fe 	udiv	r0, r1, lr
 80008b4:	fb0e 1110 	mls	r1, lr, r0, r1
 80008b8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80008bc:	fb08 f800 	mul.w	r8, r8, r0
 80008c0:	45a0      	cmp	r8, r4
 80008c2:	d907      	bls.n	80008d4 <__udivmoddi4+0x10c>
 80008c4:	193c      	adds	r4, r7, r4
 80008c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x10a>
 80008cc:	45a0      	cmp	r8, r4
 80008ce:	f200 80d9 	bhi.w	8000a84 <__udivmoddi4+0x2bc>
 80008d2:	4618      	mov	r0, r3
 80008d4:	eba4 0408 	sub.w	r4, r4, r8
 80008d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008dc:	e7bf      	b.n	800085e <__udivmoddi4+0x96>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d909      	bls.n	80008f6 <__udivmoddi4+0x12e>
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	f000 80b1 	beq.w	8000a4a <__udivmoddi4+0x282>
 80008e8:	2600      	movs	r6, #0
 80008ea:	e9c5 0100 	strd	r0, r1, [r5]
 80008ee:	4630      	mov	r0, r6
 80008f0:	4631      	mov	r1, r6
 80008f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f6:	fab3 f683 	clz	r6, r3
 80008fa:	2e00      	cmp	r6, #0
 80008fc:	d14a      	bne.n	8000994 <__udivmoddi4+0x1cc>
 80008fe:	428b      	cmp	r3, r1
 8000900:	d302      	bcc.n	8000908 <__udivmoddi4+0x140>
 8000902:	4282      	cmp	r2, r0
 8000904:	f200 80b8 	bhi.w	8000a78 <__udivmoddi4+0x2b0>
 8000908:	1a84      	subs	r4, r0, r2
 800090a:	eb61 0103 	sbc.w	r1, r1, r3
 800090e:	2001      	movs	r0, #1
 8000910:	468c      	mov	ip, r1
 8000912:	2d00      	cmp	r5, #0
 8000914:	d0a8      	beq.n	8000868 <__udivmoddi4+0xa0>
 8000916:	e9c5 4c00 	strd	r4, ip, [r5]
 800091a:	e7a5      	b.n	8000868 <__udivmoddi4+0xa0>
 800091c:	f1c2 0320 	rsb	r3, r2, #32
 8000920:	fa20 f603 	lsr.w	r6, r0, r3
 8000924:	4097      	lsls	r7, r2
 8000926:	fa01 f002 	lsl.w	r0, r1, r2
 800092a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800092e:	40d9      	lsrs	r1, r3
 8000930:	4330      	orrs	r0, r6
 8000932:	0c03      	lsrs	r3, r0, #16
 8000934:	fbb1 f6fe 	udiv	r6, r1, lr
 8000938:	fa1f f887 	uxth.w	r8, r7
 800093c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000940:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000944:	fb06 f108 	mul.w	r1, r6, r8
 8000948:	4299      	cmp	r1, r3
 800094a:	fa04 f402 	lsl.w	r4, r4, r2
 800094e:	d909      	bls.n	8000964 <__udivmoddi4+0x19c>
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	f106 3cff 	add.w	ip, r6, #4294967295
 8000956:	f080 808d 	bcs.w	8000a74 <__udivmoddi4+0x2ac>
 800095a:	4299      	cmp	r1, r3
 800095c:	f240 808a 	bls.w	8000a74 <__udivmoddi4+0x2ac>
 8000960:	3e02      	subs	r6, #2
 8000962:	443b      	add	r3, r7
 8000964:	1a5b      	subs	r3, r3, r1
 8000966:	b281      	uxth	r1, r0
 8000968:	fbb3 f0fe 	udiv	r0, r3, lr
 800096c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000970:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000974:	fb00 f308 	mul.w	r3, r0, r8
 8000978:	428b      	cmp	r3, r1
 800097a:	d907      	bls.n	800098c <__udivmoddi4+0x1c4>
 800097c:	1879      	adds	r1, r7, r1
 800097e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000982:	d273      	bcs.n	8000a6c <__udivmoddi4+0x2a4>
 8000984:	428b      	cmp	r3, r1
 8000986:	d971      	bls.n	8000a6c <__udivmoddi4+0x2a4>
 8000988:	3802      	subs	r0, #2
 800098a:	4439      	add	r1, r7
 800098c:	1acb      	subs	r3, r1, r3
 800098e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000992:	e778      	b.n	8000886 <__udivmoddi4+0xbe>
 8000994:	f1c6 0c20 	rsb	ip, r6, #32
 8000998:	fa03 f406 	lsl.w	r4, r3, r6
 800099c:	fa22 f30c 	lsr.w	r3, r2, ip
 80009a0:	431c      	orrs	r4, r3
 80009a2:	fa20 f70c 	lsr.w	r7, r0, ip
 80009a6:	fa01 f306 	lsl.w	r3, r1, r6
 80009aa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80009ae:	fa21 f10c 	lsr.w	r1, r1, ip
 80009b2:	431f      	orrs	r7, r3
 80009b4:	0c3b      	lsrs	r3, r7, #16
 80009b6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009ba:	fa1f f884 	uxth.w	r8, r4
 80009be:	fb0e 1119 	mls	r1, lr, r9, r1
 80009c2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009c6:	fb09 fa08 	mul.w	sl, r9, r8
 80009ca:	458a      	cmp	sl, r1
 80009cc:	fa02 f206 	lsl.w	r2, r2, r6
 80009d0:	fa00 f306 	lsl.w	r3, r0, r6
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x220>
 80009d6:	1861      	adds	r1, r4, r1
 80009d8:	f109 30ff 	add.w	r0, r9, #4294967295
 80009dc:	d248      	bcs.n	8000a70 <__udivmoddi4+0x2a8>
 80009de:	458a      	cmp	sl, r1
 80009e0:	d946      	bls.n	8000a70 <__udivmoddi4+0x2a8>
 80009e2:	f1a9 0902 	sub.w	r9, r9, #2
 80009e6:	4421      	add	r1, r4
 80009e8:	eba1 010a 	sub.w	r1, r1, sl
 80009ec:	b2bf      	uxth	r7, r7
 80009ee:	fbb1 f0fe 	udiv	r0, r1, lr
 80009f2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009f6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009fa:	fb00 f808 	mul.w	r8, r0, r8
 80009fe:	45b8      	cmp	r8, r7
 8000a00:	d907      	bls.n	8000a12 <__udivmoddi4+0x24a>
 8000a02:	19e7      	adds	r7, r4, r7
 8000a04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a08:	d22e      	bcs.n	8000a68 <__udivmoddi4+0x2a0>
 8000a0a:	45b8      	cmp	r8, r7
 8000a0c:	d92c      	bls.n	8000a68 <__udivmoddi4+0x2a0>
 8000a0e:	3802      	subs	r0, #2
 8000a10:	4427      	add	r7, r4
 8000a12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a16:	eba7 0708 	sub.w	r7, r7, r8
 8000a1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000a1e:	454f      	cmp	r7, r9
 8000a20:	46c6      	mov	lr, r8
 8000a22:	4649      	mov	r1, r9
 8000a24:	d31a      	bcc.n	8000a5c <__udivmoddi4+0x294>
 8000a26:	d017      	beq.n	8000a58 <__udivmoddi4+0x290>
 8000a28:	b15d      	cbz	r5, 8000a42 <__udivmoddi4+0x27a>
 8000a2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a36:	40f2      	lsrs	r2, r6
 8000a38:	ea4c 0202 	orr.w	r2, ip, r2
 8000a3c:	40f7      	lsrs	r7, r6
 8000a3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a42:	2600      	movs	r6, #0
 8000a44:	4631      	mov	r1, r6
 8000a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4a:	462e      	mov	r6, r5
 8000a4c:	4628      	mov	r0, r5
 8000a4e:	e70b      	b.n	8000868 <__udivmoddi4+0xa0>
 8000a50:	4606      	mov	r6, r0
 8000a52:	e6e9      	b.n	8000828 <__udivmoddi4+0x60>
 8000a54:	4618      	mov	r0, r3
 8000a56:	e6fd      	b.n	8000854 <__udivmoddi4+0x8c>
 8000a58:	4543      	cmp	r3, r8
 8000a5a:	d2e5      	bcs.n	8000a28 <__udivmoddi4+0x260>
 8000a5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a60:	eb69 0104 	sbc.w	r1, r9, r4
 8000a64:	3801      	subs	r0, #1
 8000a66:	e7df      	b.n	8000a28 <__udivmoddi4+0x260>
 8000a68:	4608      	mov	r0, r1
 8000a6a:	e7d2      	b.n	8000a12 <__udivmoddi4+0x24a>
 8000a6c:	4660      	mov	r0, ip
 8000a6e:	e78d      	b.n	800098c <__udivmoddi4+0x1c4>
 8000a70:	4681      	mov	r9, r0
 8000a72:	e7b9      	b.n	80009e8 <__udivmoddi4+0x220>
 8000a74:	4666      	mov	r6, ip
 8000a76:	e775      	b.n	8000964 <__udivmoddi4+0x19c>
 8000a78:	4630      	mov	r0, r6
 8000a7a:	e74a      	b.n	8000912 <__udivmoddi4+0x14a>
 8000a7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a80:	4439      	add	r1, r7
 8000a82:	e713      	b.n	80008ac <__udivmoddi4+0xe4>
 8000a84:	3802      	subs	r0, #2
 8000a86:	443c      	add	r4, r7
 8000a88:	e724      	b.n	80008d4 <__udivmoddi4+0x10c>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_idiv0>:
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <rpmsg_recv_callback>:

uint32_t receivedDataPointer = 0;

int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data,
		size_t len, uint32_t src, void *priv)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
 8000a9c:	603b      	str	r3, [r7, #0]
	received_data = *((unsigned int *) data);
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <rpmsg_recv_callback+0x38>)
 8000aa4:	6013      	str	r3, [r2, #0]
	receivedDataPointer = (uint32_t)((unsigned int *) data);
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	4a08      	ldr	r2, [pc, #32]	; (8000acc <rpmsg_recv_callback+0x3c>)
 8000aaa:	6013      	str	r3, [r2, #0]
	message_received=1;
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <rpmsg_recv_callback+0x40>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	601a      	str	r2, [r3, #0]
	parseRecievedMessages((uint8_t)received_data);
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <rpmsg_recv_callback+0x38>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 f853 	bl	8000b64 <parseRecievedMessages>
	return 0;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2400af80 	.word	0x2400af80
 8000acc:	2400a380 	.word	0x2400a380
 8000ad0:	2400afc8 	.word	0x2400afc8

08000ad4 <receive_message>:
}
#endif

#ifdef CORE_CM7
unsigned int receive_message(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	while (message_received == 0 && service_created == 1)
 8000ad8:	e001      	b.n	8000ade <receive_message+0xa>
	{
		OPENAMP_check_for_message();
 8000ada:	f018 fc49 	bl	8019370 <OPENAMP_check_for_message>
	while (message_received == 0 && service_created == 1)
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <receive_message+0x28>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d103      	bne.n	8000aee <receive_message+0x1a>
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <receive_message+0x2c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d0f5      	beq.n	8000ada <receive_message+0x6>
	}
	message_received = 0;
 8000aee:	4b03      	ldr	r3, [pc, #12]	; (8000afc <receive_message+0x28>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]

	return received_data;
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <receive_message+0x30>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2400afc8 	.word	0x2400afc8
 8000b00:	2400af84 	.word	0x2400af84
 8000b04:	2400af80 	.word	0x2400af80

08000b08 <service_destroy_cb>:
void service_destroy_cb(struct rpmsg_endpoint *ept)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	/* this function is called while remote endpoint as been destroyed, the
	 * service is no more available
	 */
	service_created = 0;
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <service_destroy_cb+0x1c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	2400af84 	.word	0x2400af84

08000b28 <new_service_cb>:

void new_service_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
	/* create a endpoint for rmpsg communication */
	OPENAMP_create_endpoint(&rp_endpoint, name, dest, rpmsg_recv_callback,
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <new_service_cb+0x2c>)
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <new_service_cb+0x30>)
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	4807      	ldr	r0, [pc, #28]	; (8000b5c <new_service_cb+0x34>)
 8000b40:	f018 fbf8 	bl	8019334 <OPENAMP_create_endpoint>
			service_destroy_cb);
	service_created = 1;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <new_service_cb+0x38>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	601a      	str	r2, [r3, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	08000b09 	.word	0x08000b09
 8000b58:	08000a91 	.word	0x08000a91
 8000b5c:	2400af88 	.word	0x2400af88
 8000b60:	2400af84 	.word	0x2400af84

08000b64 <parseRecievedMessages>:
#ifdef CORE_CM7
#include "GUI_Paint.h"
#endif

void parseRecievedMessages(uint8_t opCode)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
	switch (opCode)
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d108      	bne.n	8000b86 <parseRecievedMessages+0x22>
	{
#ifdef CORE_CM7
		case (1):
		{
			memcpy(receivedAnglesData, (uint32_t *)receivedDataPointer, sizeof(tANGLESMESSAGES));
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <parseRecievedMessages+0x2c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <parseRecievedMessages+0x30>)
 8000b7a:	6812      	ldr	r2, [r2, #0]
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	221c      	movs	r2, #28
 8000b80:	4618      	mov	r0, r3
 8000b82:	f01b fdd9 	bl	801c738 <memcpy>
		default:
		{

		}
	}
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2400af7c 	.word	0x2400af7c
 8000b94:	2400a380 	.word	0x2400a380

08000b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b3f      	ldr	r3, [pc, #252]	; (8000c9c <SystemInit+0x104>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a3e      	ldr	r2, [pc, #248]	; (8000c9c <SystemInit+0x104>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000bac:	4b3b      	ldr	r3, [pc, #236]	; (8000c9c <SystemInit+0x104>)
 8000bae:	691b      	ldr	r3, [r3, #16]
 8000bb0:	4a3a      	ldr	r2, [pc, #232]	; (8000c9c <SystemInit+0x104>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bb8:	4b39      	ldr	r3, [pc, #228]	; (8000ca0 <SystemInit+0x108>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f003 030f 	and.w	r3, r3, #15
 8000bc0:	2b06      	cmp	r3, #6
 8000bc2:	d807      	bhi.n	8000bd4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bc4:	4b36      	ldr	r3, [pc, #216]	; (8000ca0 <SystemInit+0x108>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f023 030f 	bic.w	r3, r3, #15
 8000bcc:	4a34      	ldr	r2, [pc, #208]	; (8000ca0 <SystemInit+0x108>)
 8000bce:	f043 0307 	orr.w	r3, r3, #7
 8000bd2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bd4:	4b33      	ldr	r3, [pc, #204]	; (8000ca4 <SystemInit+0x10c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a32      	ldr	r2, [pc, #200]	; (8000ca4 <SystemInit+0x10c>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000be0:	4b30      	ldr	r3, [pc, #192]	; (8000ca4 <SystemInit+0x10c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000be6:	4b2f      	ldr	r3, [pc, #188]	; (8000ca4 <SystemInit+0x10c>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	492e      	ldr	r1, [pc, #184]	; (8000ca4 <SystemInit+0x10c>)
 8000bec:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <SystemInit+0x110>)
 8000bee:	4013      	ands	r3, r2
 8000bf0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bf2:	4b2b      	ldr	r3, [pc, #172]	; (8000ca0 <SystemInit+0x108>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d007      	beq.n	8000c0e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bfe:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <SystemInit+0x108>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f023 030f 	bic.w	r3, r3, #15
 8000c06:	4a26      	ldr	r2, [pc, #152]	; (8000ca0 <SystemInit+0x108>)
 8000c08:	f043 0307 	orr.w	r3, r3, #7
 8000c0c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c0e:	4b25      	ldr	r3, [pc, #148]	; (8000ca4 <SystemInit+0x10c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c14:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <SystemInit+0x10c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c1a:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <SystemInit+0x10c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c20:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <SystemInit+0x10c>)
 8000c22:	4a22      	ldr	r2, [pc, #136]	; (8000cac <SystemInit+0x114>)
 8000c24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <SystemInit+0x10c>)
 8000c28:	4a21      	ldr	r2, [pc, #132]	; (8000cb0 <SystemInit+0x118>)
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <SystemInit+0x10c>)
 8000c2e:	4a21      	ldr	r2, [pc, #132]	; (8000cb4 <SystemInit+0x11c>)
 8000c30:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <SystemInit+0x10c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <SystemInit+0x10c>)
 8000c3a:	4a1e      	ldr	r2, [pc, #120]	; (8000cb4 <SystemInit+0x11c>)
 8000c3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <SystemInit+0x10c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <SystemInit+0x10c>)
 8000c46:	4a1b      	ldr	r2, [pc, #108]	; (8000cb4 <SystemInit+0x11c>)
 8000c48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <SystemInit+0x10c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <SystemInit+0x10c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a13      	ldr	r2, [pc, #76]	; (8000ca4 <SystemInit+0x10c>)
 8000c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <SystemInit+0x10c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <SystemInit+0x120>)
 8000c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c66:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <SystemInit+0x120>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <SystemInit+0x124>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <SystemInit+0x128>)
 8000c74:	4013      	ands	r3, r2
 8000c76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c7a:	d202      	bcs.n	8000c82 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <SystemInit+0x12c>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <SystemInit+0x130>)
 8000c84:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c88:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000c8a:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <SystemInit+0x104>)
 8000c8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c90:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00
 8000ca0:	52002000 	.word	0x52002000
 8000ca4:	58024400 	.word	0x58024400
 8000ca8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cac:	02020200 	.word	0x02020200
 8000cb0:	01ff0000 	.word	0x01ff0000
 8000cb4:	01010280 	.word	0x01010280
 8000cb8:	580000c0 	.word	0x580000c0
 8000cbc:	5c001000 	.word	0x5c001000
 8000cc0:	ffff0000 	.word	0xffff0000
 8000cc4:	51008108 	.word	0x51008108
 8000cc8:	52004000 	.word	0x52004000

08000ccc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_DMA_Init+0x4c>)
 8000cd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cd8:	4a0f      	ldr	r2, [pc, #60]	; (8000d18 <MX_DMA_Init+0x4c>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <MX_DMA_Init+0x4c>)
 8000ce4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	200b      	movs	r0, #11
 8000cf6:	f001 fd3c 	bl	8002772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cfa:	200b      	movs	r0, #11
 8000cfc:	f001 fd53 	bl	80027a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2100      	movs	r1, #0
 8000d04:	200c      	movs	r0, #12
 8000d06:	f001 fd34 	bl	8002772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d0a:	200c      	movs	r0, #12
 8000d0c:	f001 fd4b 	bl	80027a6 <HAL_NVIC_EnableIRQ>

}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	58024400 	.word	0x58024400

08000d1c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08e      	sub	sp, #56	; 0x38
 8000d20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d32:	4b93      	ldr	r3, [pc, #588]	; (8000f80 <MX_GPIO_Init+0x264>)
 8000d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d38:	4a91      	ldr	r2, [pc, #580]	; (8000f80 <MX_GPIO_Init+0x264>)
 8000d3a:	f043 0304 	orr.w	r3, r3, #4
 8000d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d42:	4b8f      	ldr	r3, [pc, #572]	; (8000f80 <MX_GPIO_Init+0x264>)
 8000d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d48:	f003 0304 	and.w	r3, r3, #4
 8000d4c:	623b      	str	r3, [r7, #32]
 8000d4e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d50:	4b8b      	ldr	r3, [pc, #556]	; (8000f80 <MX_GPIO_Init+0x264>)
 8000d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d56:	4a8a      	ldr	r2, [pc, #552]	; (8000f80 <MX_GPIO_Init+0x264>)
 8000d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d60:	4b87      	ldr	r3, [pc, #540]	; (8000f80 <MX_GPIO_Init+0x264>)
 8000d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d6a:	61fb      	str	r3, [r7, #28]
 8000d6c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	4b84      	ldr	r3, [pc, #528]	; (8000f80 <MX_GPIO_Init+0x264>)
 8000d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d74:	4a82      	ldr	r2, [pc, #520]	; (8000f80 <MX_GPIO_Init+0x264>)
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d7e:	4b80      	ldr	r3, [pc, #512]	; (8000f80 <MX_GPIO_Init+0x264>)
 8000d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	61bb      	str	r3, [r7, #24]
 8000d8a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8c:	4b7c      	ldr	r3, [pc, #496]	; (8000f80 <MX_GPIO_Init+0x264>)
 8000d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d92:	4a7b      	ldr	r2, [pc, #492]	; (8000f80 <MX_GPIO_Init+0x264>)
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9c:	4b78      	ldr	r3, [pc, #480]	; (8000f80 <MX_GPIO_Init+0x264>)
 8000d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000daa:	4b75      	ldr	r3, [pc, #468]	; (8000f80 <MX_GPIO_Init+0x264>)
 8000dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db0:	4a73      	ldr	r2, [pc, #460]	; (8000f80 <MX_GPIO_Init+0x264>)
 8000db2:	f043 0320 	orr.w	r3, r3, #32
 8000db6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dba:	4b71      	ldr	r3, [pc, #452]	; (8000f80 <MX_GPIO_Init+0x264>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc0:	f003 0320 	and.w	r3, r3, #32
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dc8:	4b6d      	ldr	r3, [pc, #436]	; (8000f80 <MX_GPIO_Init+0x264>)
 8000dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dce:	4a6c      	ldr	r2, [pc, #432]	; (8000f80 <MX_GPIO_Init+0x264>)
 8000dd0:	f043 0310 	orr.w	r3, r3, #16
 8000dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd8:	4b69      	ldr	r3, [pc, #420]	; (8000f80 <MX_GPIO_Init+0x264>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dde:	f003 0310 	and.w	r3, r3, #16
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de6:	4b66      	ldr	r3, [pc, #408]	; (8000f80 <MX_GPIO_Init+0x264>)
 8000de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dec:	4a64      	ldr	r2, [pc, #400]	; (8000f80 <MX_GPIO_Init+0x264>)
 8000dee:	f043 0308 	orr.w	r3, r3, #8
 8000df2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df6:	4b62      	ldr	r3, [pc, #392]	; (8000f80 <MX_GPIO_Init+0x264>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfc:	f003 0308 	and.w	r3, r3, #8
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e04:	4b5e      	ldr	r3, [pc, #376]	; (8000f80 <MX_GPIO_Init+0x264>)
 8000e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0a:	4a5d      	ldr	r2, [pc, #372]	; (8000f80 <MX_GPIO_Init+0x264>)
 8000e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e14:	4b5a      	ldr	r3, [pc, #360]	; (8000f80 <MX_GPIO_Init+0x264>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	f244 0101 	movw	r1, #16385	; 0x4001
 8000e28:	4856      	ldr	r0, [pc, #344]	; (8000f84 <MX_GPIO_Init+0x268>)
 8000e2a:	f004 fd55 	bl	80058d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RBMotor___In1_GPIO_Port, RBMotor___In1_Pin, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e34:	4854      	ldr	r0, [pc, #336]	; (8000f88 <MX_GPIO_Init+0x26c>)
 8000e36:	f004 fd4f 	bl	80058d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e40:	4852      	ldr	r0, [pc, #328]	; (8000f8c <MX_GPIO_Init+0x270>)
 8000e42:	f004 fd49 	bl	80058d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO___LCD_CS_Pin|GPIO___LCD_DC_Pin, GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000e4c:	4850      	ldr	r0, [pc, #320]	; (8000f90 <MX_GPIO_Init+0x274>)
 8000e4e:	f004 fd43 	bl	80058d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RBMotor___In2_GPIO_Port, RBMotor___In2_Pin, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e58:	484e      	ldr	r0, [pc, #312]	; (8000f94 <MX_GPIO_Init+0x278>)
 8000e5a:	f004 fd3d 	bl	80058d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_SD_CS_GPIO_Port, GPIO_SD_CS_Pin, GPIO_PIN_SET);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	2110      	movs	r1, #16
 8000e62:	484a      	ldr	r0, [pc, #296]	; (8000f8c <MX_GPIO_Init+0x270>)
 8000e64:	f004 fd38 	bl	80058d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2102      	movs	r1, #2
 8000e6c:	484a      	ldr	r0, [pc, #296]	; (8000f98 <MX_GPIO_Init+0x27c>)
 8000e6e:	f004 fd33 	bl	80058d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000e72:	f244 0301 	movw	r3, #16385	; 0x4001
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e88:	4619      	mov	r1, r3
 8000e8a:	483e      	ldr	r0, [pc, #248]	; (8000f84 <MX_GPIO_Init+0x268>)
 8000e8c:	f004 fb5c 	bl	8005548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RBMotor___In1_Pin;
 8000e90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e96:	2301      	movs	r3, #1
 8000e98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RBMotor___In1_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4837      	ldr	r0, [pc, #220]	; (8000f88 <MX_GPIO_Init+0x26c>)
 8000eaa:	f004 fb4d 	bl	8005548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4831      	ldr	r0, [pc, #196]	; (8000f8c <MX_GPIO_Init+0x270>)
 8000ec8:	f004 fb3e 	bl	8005548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = GPIO___LCD_CS_Pin|GPIO___LCD_DC_Pin;
 8000ecc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	482a      	ldr	r0, [pc, #168]	; (8000f90 <MX_GPIO_Init+0x274>)
 8000ee6:	f004 fb2f 	bl	8005548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RBMotor___In2_Pin;
 8000eea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RBMotor___In2_GPIO_Port, &GPIO_InitStruct);
 8000efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f00:	4619      	mov	r1, r3
 8000f02:	4824      	ldr	r0, [pc, #144]	; (8000f94 <MX_GPIO_Init+0x278>)
 8000f04:	f004 fb20 	bl	8005548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = EXTI0___Motor1_Pin|EXTI1___Motor1_Pin;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f0c:	4b23      	ldr	r3, [pc, #140]	; (8000f9c <MX_GPIO_Init+0x280>)
 8000f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f18:	4619      	mov	r1, r3
 8000f1a:	481c      	ldr	r0, [pc, #112]	; (8000f8c <MX_GPIO_Init+0x270>)
 8000f1c:	f004 fb14 	bl	8005548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_SD_CS_Pin;
 8000f20:	2310      	movs	r3, #16
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIO_SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f34:	4619      	mov	r1, r3
 8000f36:	4815      	ldr	r0, [pc, #84]	; (8000f8c <MX_GPIO_Init+0x270>)
 8000f38:	f004 fb06 	bl	8005548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f50:	4619      	mov	r1, r3
 8000f52:	4811      	ldr	r0, [pc, #68]	; (8000f98 <MX_GPIO_Init+0x27c>)
 8000f54:	f004 faf8 	bl	8005548 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	2006      	movs	r0, #6
 8000f5e:	f001 fc08 	bl	8002772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f62:	2006      	movs	r0, #6
 8000f64:	f001 fc1f 	bl	80027a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	2007      	movs	r0, #7
 8000f6e:	f001 fc00 	bl	8002772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000f72:	2007      	movs	r0, #7
 8000f74:	f001 fc17 	bl	80027a6 <HAL_NVIC_EnableIRQ>

}
 8000f78:	bf00      	nop
 8000f7a:	3738      	adds	r7, #56	; 0x38
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	58024400 	.word	0x58024400
 8000f84:	58020400 	.word	0x58020400
 8000f88:	58021400 	.word	0x58021400
 8000f8c:	58020c00 	.word	0x58020c00
 8000f90:	58021800 	.word	0x58021800
 8000f94:	58020000 	.word	0x58020000
 8000f98:	58021000 	.word	0x58021000
 8000f9c:	11310000 	.word	0x11310000

08000fa0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fa6:	4a1c      	ldr	r2, [pc, #112]	; (8001018 <MX_I2C1_Init+0x78>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301242;
 8000faa:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fac:	4a1b      	ldr	r2, [pc, #108]	; (800101c <MX_I2C1_Init+0x7c>)
 8000fae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fb0:	4b18      	ldr	r3, [pc, #96]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb6:	4b17      	ldr	r3, [pc, #92]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fbc:	4b15      	ldr	r3, [pc, #84]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fc2:	4b14      	ldr	r3, [pc, #80]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fda:	480e      	ldr	r0, [pc, #56]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fdc:	f006 fa52 	bl	8007484 <HAL_I2C_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fe6:	f000 faba 	bl	800155e <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fea:	2100      	movs	r1, #0
 8000fec:	4809      	ldr	r0, [pc, #36]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fee:	f006 faf3 	bl	80075d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ff8:	f000 fab1 	bl	800155e <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <MX_I2C1_Init+0x74>)
 8001000:	f006 fb35 	bl	800766e <HAL_I2CEx_ConfigDigitalFilter>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800100a:	f000 faa8 	bl	800155e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	2400af30 	.word	0x2400af30
 8001018:	40005400 	.word	0x40005400
 800101c:	00301242 	.word	0x00301242

08001020 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b0b8      	sub	sp, #224	; 0xe0
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	22bc      	movs	r2, #188	; 0xbc
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f01b fba1 	bl	801c788 <memset>
  if(i2cHandle->Instance==I2C1)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a29      	ldr	r2, [pc, #164]	; (80010f0 <HAL_I2C_MspInit+0xd0>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d14a      	bne.n	80010e6 <HAL_I2C_MspInit+0xc6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001050:	2308      	movs	r3, #8
 8001052:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001054:	2300      	movs	r3, #0
 8001056:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800105a:	f107 0310 	add.w	r3, r7, #16
 800105e:	4618      	mov	r0, r3
 8001060:	f007 fb58 	bl	8008714 <HAL_RCCEx_PeriphCLKConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800106a:	f000 fa78 	bl	800155e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <HAL_I2C_MspInit+0xd4>)
 8001070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001074:	4a1f      	ldr	r2, [pc, #124]	; (80010f4 <HAL_I2C_MspInit+0xd4>)
 8001076:	f043 0302 	orr.w	r3, r3, #2
 800107a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800107e:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <HAL_I2C_MspInit+0xd4>)
 8001080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA___ChassisMPU_Pin|I2C1_SCL___ChassisMPU_Pin;
 800108c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001090:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001094:	2312      	movs	r3, #18
 8001096:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800109a:	2301      	movs	r3, #1
 800109c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010a6:	2304      	movs	r3, #4
 80010a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010b0:	4619      	mov	r1, r3
 80010b2:	4811      	ldr	r0, [pc, #68]	; (80010f8 <HAL_I2C_MspInit+0xd8>)
 80010b4:	f004 fa48 	bl	8005548 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010b8:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <HAL_I2C_MspInit+0xd4>)
 80010ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010be:	4a0d      	ldr	r2, [pc, #52]	; (80010f4 <HAL_I2C_MspInit+0xd4>)
 80010c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010c4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <HAL_I2C_MspInit+0xd4>)
 80010ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 4, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2104      	movs	r1, #4
 80010da:	201f      	movs	r0, #31
 80010dc:	f001 fb49 	bl	8002772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80010e0:	201f      	movs	r0, #31
 80010e2:	f001 fb60 	bl	80027a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010e6:	bf00      	nop
 80010e8:	37e0      	adds	r7, #224	; 0xe0
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40005400 	.word	0x40005400
 80010f4:	58024400 	.word	0x58024400
 80010f8:	58020400 	.word	0x58020400

080010fc <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af02      	add	r7, sp, #8
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001110:	d101      	bne.n	8001116 <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <rpmsg_send+0x3c>)
 8001114:	e00c      	b.n	8001130 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800111e:	2301      	movs	r3, #1
 8001120:	9301      	str	r3, [sp, #4]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	68f8      	ldr	r0, [r7, #12]
 800112a:	f015 f80b 	bl	8016144 <rpmsg_send_offchannel_raw>
 800112e:	4603      	mov	r3, r0
					 len, true);
}
 8001130:	4618      	mov	r0, r3
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	fffff829 	.word	0xfffff829

0800113c <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
 8001148:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2220      	movs	r2, #32
 800114e:	68b9      	ldr	r1, [r7, #8]
 8001150:	4618      	mov	r0, r3
 8001152:	f01c fc75 	bl	801da40 <strncpy>
	ept->addr = src;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	683a      	ldr	r2, [r7, #0]
 8001160:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	69fa      	ldr	r2, [r7, #28]
 800116c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af02      	add	r7, sp, #8
/* USER CODE BEGIN Boot_Mode_Sequence_0 */

/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	MPU_Config();
 800117e:	f000 f9c7 	bl	8001510 <MPU_Config>
	CPU_CACHE_Enable();
 8001182:	f000 f957 	bl	8001434 <CPU_CACHE_Enable>
//	timeout = 0xFFFF;
	while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 8001186:	e000      	b.n	800118a <main+0x12>
	{
		asm("nop");
 8001188:	bf00      	nop
	while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 800118a:	4b5c      	ldr	r3, [pc, #368]	; (80012fc <main+0x184>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1f8      	bne.n	8001188 <main+0x10>
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001196:	f001 f94f 	bl	8002438 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800119a:	f000 f8c3 	bl	8001324 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 800119e:	4b57      	ldr	r3, [pc, #348]	; (80012fc <main+0x184>)
 80011a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a4:	4a55      	ldr	r2, [pc, #340]	; (80012fc <main+0x184>)
 80011a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ae:	4b53      	ldr	r3, [pc, #332]	; (80012fc <main+0x184>)
 80011b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 80011bc:	2000      	movs	r0, #0
 80011be:	f006 f907 	bl	80073d0 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 80011c2:	2100      	movs	r1, #0
 80011c4:	2000      	movs	r0, #0
 80011c6:	f006 f91d 	bl	8007404 <HAL_HSEM_Release>


/* USER CODE END Boot_Mode_Sequence_2 */

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_D2SRAM1_CLK_ENABLE();
 80011ca:	4b4c      	ldr	r3, [pc, #304]	; (80012fc <main+0x184>)
 80011cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80011d0:	4a4a      	ldr	r2, [pc, #296]	; (80012fc <main+0x184>)
 80011d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011d6:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80011da:	4b48      	ldr	r3, [pc, #288]	; (80012fc <main+0x184>)
 80011dc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80011e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
//  __HAL_RCC_AHBSRAM1_CLK_ENABLE();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e8:	f7ff fd98 	bl	8000d1c <MX_GPIO_Init>
  MX_DMA_Init();
 80011ec:	f7ff fd6e 	bl	8000ccc <MX_DMA_Init>
  MX_USART3_UART_Init();
 80011f0:	f000 ff58 	bl	80020a4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80011f4:	f7ff fed4 	bl	8000fa0 <MX_I2C1_Init>
  MX_SPI3_Init();
 80011f8:	f000 fa0c 	bl	8001614 <MX_SPI3_Init>
  MX_TIM1_Init();
 80011fc:	f000 fd0a 	bl	8001c14 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001200:	f000 ff04 	bl	800200c <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 8001204:	f01a ff30 	bl	801c068 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 8001208:	f00d f8d0 	bl	800e3ac <MX_FATFS_Init>
  MX_SPI2_Init();
 800120c:	f000 f9ac 	bl	8001568 <MX_SPI2_Init>
  MX_TIM3_Init();
 8001210:	f000 fd9e 	bl	8001d50 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  MAILBOX_Init();
 8001214:	f017 fede 	bl	8018fd4 <MAILBOX_Init>
  HAL_UART_Receive_DMA(&huart1, bleRXArray, 64);
 8001218:	2240      	movs	r2, #64	; 0x40
 800121a:	4939      	ldr	r1, [pc, #228]	; (8001300 <main+0x188>)
 800121c:	4839      	ldr	r0, [pc, #228]	; (8001304 <main+0x18c>)
 800121e:	f00a fc8d 	bl	800bb3c <HAL_UART_Receive_DMA>
  
	uint8_t initRes = initSDCard();
 8001222:	f016 f997 	bl	8017554 <initSDCard>
 8001226:	4603      	mov	r3, r0
 8001228:	75fb      	strb	r3, [r7, #23]
	if (initRes == (uint8_t)FR_OK)
 800122a:	7dfb      	ldrb	r3, [r7, #23]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <main+0xbc>
	{
		createNewLogFile();
 8001230:	f016 f9da 	bl	80175e8 <createNewLogFile>
	}
	sprintf(terminalBuffer,"Test terminal");
 8001234:	4934      	ldr	r1, [pc, #208]	; (8001308 <main+0x190>)
 8001236:	4835      	ldr	r0, [pc, #212]	; (800130c <main+0x194>)
 8001238:	f01c fbd0 	bl	801d9dc <siprintf>
	logData(terminalBuffer, false, false, false);
 800123c:	2300      	movs	r3, #0
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	4832      	ldr	r0, [pc, #200]	; (800130c <main+0x194>)
 8001244:	f016 fb28 	bl	8017898 <logData>

	/* Initialize the rpmsg endpoint to set default addresses to RPMSG_ADDR_ANY */
	rpmsg_init_ept(&rp_endpoint, RPMSG_CHAN_NAME, RPMSG_ADDR_ANY, RPMSG_ADDR_ANY,
 8001248:	2300      	movs	r3, #0
 800124a:	9301      	str	r3, [sp, #4]
 800124c:	2300      	movs	r3, #0
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	f04f 33ff 	mov.w	r3, #4294967295
 8001254:	f04f 32ff 	mov.w	r2, #4294967295
 8001258:	492d      	ldr	r1, [pc, #180]	; (8001310 <main+0x198>)
 800125a:	482e      	ldr	r0, [pc, #184]	; (8001314 <main+0x19c>)
 800125c:	f7ff ff6e 	bl	800113c <rpmsg_init_ept>
			NULL, NULL);
	/* Initialize OpenAmp and libmetal libraries */
	if (MX_OPENAMP_Init(RPMSG_MASTER, new_service_cb)!= HAL_OK)
 8001260:	492d      	ldr	r1, [pc, #180]	; (8001318 <main+0x1a0>)
 8001262:	2000      	movs	r0, #0
 8001264:	f017 ffd0 	bl	8019208 <MX_OPENAMP_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <main+0xfa>
	{
		Error_Handler();
 800126e:	f000 f976 	bl	800155e <Error_Handler>
	/*
	 * The rpmsg service is initiate by the remote processor, on A7 new_service_cb
	 * callback is received on service creation. Wait for the callback
	 */
//	HAL_Delay(2000);
	OPENAMP_Wait_EndPointready(&rp_endpoint);
 8001272:	4828      	ldr	r0, [pc, #160]	; (8001314 <main+0x19c>)
 8001274:	f018 f888 	bl	8019388 <OPENAMP_Wait_EndPointready>

	/* Send the massage to the remote CPU */
	int32_t status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 8001278:	2204      	movs	r2, #4
 800127a:	4928      	ldr	r1, [pc, #160]	; (800131c <main+0x1a4>)
 800127c:	4825      	ldr	r0, [pc, #148]	; (8001314 <main+0x19c>)
 800127e:	f7ff ff3d 	bl	80010fc <rpmsg_send>
 8001282:	6138      	str	r0, [r7, #16]

	if (status < 0)
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	2b00      	cmp	r3, #0
 8001288:	da01      	bge.n	800128e <main+0x116>
	{
		Error_Handler();
 800128a:	f000 f968 	bl	800155e <Error_Handler>

	//	ssd1306_TestAll();
//	ssd1306_Init();
//	ssd1306_TestBorder();

	uint8_t message = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	73fb      	strb	r3, [r7, #15]
	while (message < 100)
 8001292:	e011      	b.n	80012b8 <main+0x140>
	{
		/* Receive the massage from the remote CPU */
		message = receive_message();
 8001294:	f7ff fc1e 	bl	8000ad4 <receive_message>
 8001298:	4603      	mov	r3, r0
 800129a:	b2db      	uxtb	r3, r3
 800129c:	73fb      	strb	r3, [r7, #15]
		status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 800129e:	f107 030f 	add.w	r3, r7, #15
 80012a2:	2201      	movs	r2, #1
 80012a4:	4619      	mov	r1, r3
 80012a6:	481b      	ldr	r0, [pc, #108]	; (8001314 <main+0x19c>)
 80012a8:	f7ff ff28 	bl	80010fc <rpmsg_send>
 80012ac:	6138      	str	r0, [r7, #16]
		if (status < 0)
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	da01      	bge.n	80012b8 <main+0x140>
		{
			Error_Handler();
 80012b4:	f000 f953 	bl	800155e <Error_Handler>
	while (message < 100)
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	2b63      	cmp	r3, #99	; 0x63
 80012bc:	d9ea      	bls.n	8001294 <main+0x11c>
	}



	//	isPortrait = true;
	screenInit();
 80012be:	f016 fb8b 	bl	80179d8 <screenInit>
	screenClear();
 80012c2:	f016 fc65 	bl	8017b90 <screenClear>
	renderCompleteFrame = true;
 80012c6:	4b16      	ldr	r3, [pc, #88]	; (8001320 <main+0x1a8>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		message = receive_message();
 80012cc:	f7ff fc02 	bl	8000ad4 <receive_message>
 80012d0:	4603      	mov	r3, r0
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	73fb      	strb	r3, [r7, #15]
		screenUpdate(true);
 80012d6:	2001      	movs	r0, #1
 80012d8:	f016 fe7c 	bl	8017fd4 <screenUpdate>
		displayNextFrame();
 80012dc:	f018 f8f8 	bl	80194d0 <displayNextFrame>
		message = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	73fb      	strb	r3, [r7, #15]

		monitorLogSize();
 80012e4:	f016 faac 	bl	8017840 <monitorLogSize>

//		sprintf(terminalBuffer,"Test terminal");
//		logData(terminalBuffer, false, false, false);

		HAL_UART_Receive_DMA(&huart1, bleRXArray, 64);
 80012e8:	2240      	movs	r2, #64	; 0x40
 80012ea:	4905      	ldr	r1, [pc, #20]	; (8001300 <main+0x188>)
 80012ec:	4805      	ldr	r0, [pc, #20]	; (8001304 <main+0x18c>)
 80012ee:	f00a fc25 	bl	800bb3c <HAL_UART_Receive_DMA>
		parse((char *)bleRXArray);
 80012f2:	4803      	ldr	r0, [pc, #12]	; (8001300 <main+0x188>)
 80012f4:	f017 fdbe 	bl	8018e74 <parse>
		message = receive_message();
 80012f8:	e7e8      	b.n	80012cc <main+0x154>
 80012fa:	bf00      	nop
 80012fc:	58024400 	.word	0x58024400
 8001300:	2400a38c 	.word	0x2400a38c
 8001304:	2400b308 	.word	0x2400b308
 8001308:	08021370 	.word	0x08021370
 800130c:	2400aa50 	.word	0x2400aa50
 8001310:	08021380 	.word	0x08021380
 8001314:	2400af88 	.word	0x2400af88
 8001318:	08000b29 	.word	0x08000b29
 800131c:	2400a384 	.word	0x2400a384
 8001320:	2400ae58 	.word	0x2400ae58

08001324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b09c      	sub	sp, #112	; 0x70
 8001328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132e:	224c      	movs	r2, #76	; 0x4c
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f01b fa28 	bl	801c788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2220      	movs	r2, #32
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f01b fa22 	bl	801c788 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001344:	2004      	movs	r0, #4
 8001346:	f006 f9df 	bl	8007708 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800134a:	2300      	movs	r3, #0
 800134c:	603b      	str	r3, [r7, #0]
 800134e:	4b36      	ldr	r3, [pc, #216]	; (8001428 <SystemClock_Config+0x104>)
 8001350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001352:	4a35      	ldr	r2, [pc, #212]	; (8001428 <SystemClock_Config+0x104>)
 8001354:	f023 0301 	bic.w	r3, r3, #1
 8001358:	62d3      	str	r3, [r2, #44]	; 0x2c
 800135a:	4b33      	ldr	r3, [pc, #204]	; (8001428 <SystemClock_Config+0x104>)
 800135c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	4b31      	ldr	r3, [pc, #196]	; (800142c <SystemClock_Config+0x108>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800136c:	4a2f      	ldr	r2, [pc, #188]	; (800142c <SystemClock_Config+0x108>)
 800136e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001372:	6193      	str	r3, [r2, #24]
 8001374:	4b2d      	ldr	r3, [pc, #180]	; (800142c <SystemClock_Config+0x108>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800137c:	603b      	str	r3, [r7, #0]
 800137e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001380:	bf00      	nop
 8001382:	4b2a      	ldr	r3, [pc, #168]	; (800142c <SystemClock_Config+0x108>)
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800138a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800138e:	d1f8      	bne.n	8001382 <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001390:	4b27      	ldr	r3, [pc, #156]	; (8001430 <SystemClock_Config+0x10c>)
 8001392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001394:	f023 0303 	bic.w	r3, r3, #3
 8001398:	4a25      	ldr	r2, [pc, #148]	; (8001430 <SystemClock_Config+0x10c>)
 800139a:	f043 0302 	orr.w	r3, r3, #2
 800139e:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013a0:	2301      	movs	r3, #1
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80013a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013aa:	2302      	movs	r3, #2
 80013ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ae:	2302      	movs	r3, #2
 80013b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013b2:	2301      	movs	r3, #1
 80013b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 80013b6:	2312      	movs	r3, #18
 80013b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013ba:	2302      	movs	r3, #2
 80013bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013be:	2302      	movs	r3, #2
 80013c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013c2:	2302      	movs	r3, #2
 80013c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80013c6:	230c      	movs	r3, #12
 80013c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80013ca:	2302      	movs	r3, #2
 80013cc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 80013ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80013d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d8:	4618      	mov	r0, r3
 80013da:	f006 f9ff 	bl	80077dc <HAL_RCC_OscConfig>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80013e4:	f000 f8bb 	bl	800155e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e8:	233f      	movs	r3, #63	; 0x3f
 80013ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ec:	2303      	movs	r3, #3
 80013ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80013fc:	2340      	movs	r3, #64	; 0x40
 80013fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001400:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001404:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001406:	2300      	movs	r3, #0
 8001408:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2101      	movs	r1, #1
 800140e:	4618      	mov	r0, r3
 8001410:	f006 fdf4 	bl	8007ffc <HAL_RCC_ClockConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800141a:	f000 f8a0 	bl	800155e <Error_Handler>
  }
}
 800141e:	bf00      	nop
 8001420:	3770      	adds	r7, #112	; 0x70
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	58000400 	.word	0x58000400
 800142c:	58024800 	.word	0x58024800
 8001430:	58024400 	.word	0x58024400

08001434 <CPU_CACHE_Enable>:
 * @brief  CPU L1-Cache enable.
 * @param  None
 * @retval None
 */
static void CPU_CACHE_Enable(void)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800143a:	4b34      	ldr	r3, [pc, #208]	; (800150c <CPU_CACHE_Enable+0xd8>)
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d11b      	bne.n	800147e <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001446:	f3bf 8f4f 	dsb	sy
}
 800144a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800144c:	f3bf 8f6f 	isb	sy
}
 8001450:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001452:	4b2e      	ldr	r3, [pc, #184]	; (800150c <CPU_CACHE_Enable+0xd8>)
 8001454:	2200      	movs	r2, #0
 8001456:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800145a:	f3bf 8f4f 	dsb	sy
}
 800145e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001460:	f3bf 8f6f 	isb	sy
}
 8001464:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001466:	4b29      	ldr	r3, [pc, #164]	; (800150c <CPU_CACHE_Enable+0xd8>)
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	4a28      	ldr	r2, [pc, #160]	; (800150c <CPU_CACHE_Enable+0xd8>)
 800146c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001470:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001472:	f3bf 8f4f 	dsb	sy
}
 8001476:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001478:	f3bf 8f6f 	isb	sy
}
 800147c:	e000      	b.n	8001480 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800147e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001480:	4b22      	ldr	r3, [pc, #136]	; (800150c <CPU_CACHE_Enable+0xd8>)
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d138      	bne.n	80014fe <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800148c:	4b1f      	ldr	r3, [pc, #124]	; (800150c <CPU_CACHE_Enable+0xd8>)
 800148e:	2200      	movs	r2, #0
 8001490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001494:	f3bf 8f4f 	dsb	sy
}
 8001498:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800149a:	4b1c      	ldr	r3, [pc, #112]	; (800150c <CPU_CACHE_Enable+0xd8>)
 800149c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014a0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	0b5b      	lsrs	r3, r3, #13
 80014a6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80014aa:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	08db      	lsrs	r3, r3, #3
 80014b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014b4:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	015a      	lsls	r2, r3, #5
 80014ba:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80014be:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80014c4:	4911      	ldr	r1, [pc, #68]	; (800150c <CPU_CACHE_Enable+0xd8>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	1e5a      	subs	r2, r3, #1
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1ef      	bne.n	80014b6 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	1e5a      	subs	r2, r3, #1
 80014da:	60ba      	str	r2, [r7, #8]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1e5      	bne.n	80014ac <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80014e0:	f3bf 8f4f 	dsb	sy
}
 80014e4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <CPU_CACHE_Enable+0xd8>)
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	4a08      	ldr	r2, [pc, #32]	; (800150c <CPU_CACHE_Enable+0xd8>)
 80014ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80014f2:	f3bf 8f4f 	dsb	sy
}
 80014f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014f8:	f3bf 8f6f 	isb	sy
}
 80014fc:	e000      	b.n	8001500 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80014fe:	bf00      	nop
	/* Enable I-Cache */
	SCB_EnableICache();

	/* Enable D-Cache */
	SCB_EnableDCache();
}
 8001500:	bf00      	nop
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <MPU_Config>:
 *         The Region Size is 64KB.
 * @param  None
 * @retval None
 */
static void MPU_Config(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct;

	/* Disable the MPU */
	HAL_MPU_Disable();
 8001516:	f001 f961 	bl	80027dc <HAL_MPU_Disable>

	/* Configure the MPU attributes as WT for SDRAM */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800151a:	2301      	movs	r3, #1
 800151c:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = D3_SRAM_BASE;
 800151e:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001522:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8001524:	230f      	movs	r3, #15
 8001526:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001528:	2303      	movs	r3, #3
 800152a:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001534:	2301      	movs	r3, #1
 8001536:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001538:	2300      	movs	r3, #0
 800153a:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800153c:	2300      	movs	r3, #0
 800153e:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8001540:	2300      	movs	r3, #0
 8001542:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	733b      	strb	r3, [r7, #12]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001548:	463b      	mov	r3, r7
 800154a:	4618      	mov	r0, r3
 800154c:	f001 f97e 	bl	800284c <HAL_MPU_ConfigRegion>

	/* Enable the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001550:	2004      	movs	r0, #4
 8001552:	f001 f95b 	bl	800280c <HAL_MPU_Enable>
}
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001562:	b672      	cpsid	i
}
 8001564:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001566:	e7fe      	b.n	8001566 <Error_Handler+0x8>

08001568 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800156c:	4b27      	ldr	r3, [pc, #156]	; (800160c <MX_SPI2_Init+0xa4>)
 800156e:	4a28      	ldr	r2, [pc, #160]	; (8001610 <MX_SPI2_Init+0xa8>)
 8001570:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001572:	4b26      	ldr	r3, [pc, #152]	; (800160c <MX_SPI2_Init+0xa4>)
 8001574:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001578:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800157a:	4b24      	ldr	r3, [pc, #144]	; (800160c <MX_SPI2_Init+0xa4>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001580:	4b22      	ldr	r3, [pc, #136]	; (800160c <MX_SPI2_Init+0xa4>)
 8001582:	2207      	movs	r2, #7
 8001584:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001586:	4b21      	ldr	r3, [pc, #132]	; (800160c <MX_SPI2_Init+0xa4>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800158c:	4b1f      	ldr	r3, [pc, #124]	; (800160c <MX_SPI2_Init+0xa4>)
 800158e:	2200      	movs	r2, #0
 8001590:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001592:	4b1e      	ldr	r3, [pc, #120]	; (800160c <MX_SPI2_Init+0xa4>)
 8001594:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001598:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800159a:	4b1c      	ldr	r3, [pc, #112]	; (800160c <MX_SPI2_Init+0xa4>)
 800159c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80015a0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015a2:	4b1a      	ldr	r3, [pc, #104]	; (800160c <MX_SPI2_Init+0xa4>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015a8:	4b18      	ldr	r3, [pc, #96]	; (800160c <MX_SPI2_Init+0xa4>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ae:	4b17      	ldr	r3, [pc, #92]	; (800160c <MX_SPI2_Init+0xa4>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80015b4:	4b15      	ldr	r3, [pc, #84]	; (800160c <MX_SPI2_Init+0xa4>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015ba:	4b14      	ldr	r3, [pc, #80]	; (800160c <MX_SPI2_Init+0xa4>)
 80015bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015c0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80015c2:	4b12      	ldr	r3, [pc, #72]	; (800160c <MX_SPI2_Init+0xa4>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015c8:	4b10      	ldr	r3, [pc, #64]	; (800160c <MX_SPI2_Init+0xa4>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <MX_SPI2_Init+0xa4>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015d4:	4b0d      	ldr	r3, [pc, #52]	; (800160c <MX_SPI2_Init+0xa4>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <MX_SPI2_Init+0xa4>)
 80015dc:	2200      	movs	r2, #0
 80015de:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80015e0:	4b0a      	ldr	r3, [pc, #40]	; (800160c <MX_SPI2_Init+0xa4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <MX_SPI2_Init+0xa4>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80015ec:	4b07      	ldr	r3, [pc, #28]	; (800160c <MX_SPI2_Init+0xa4>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <MX_SPI2_Init+0xa4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015f8:	4804      	ldr	r0, [pc, #16]	; (800160c <MX_SPI2_Init+0xa4>)
 80015fa:	f008 fbed 	bl	8009dd8 <HAL_SPI_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001604:	f7ff ffab 	bl	800155e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	2400afdc 	.word	0x2400afdc
 8001610:	40003800 	.word	0x40003800

08001614 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001618:	4b28      	ldr	r3, [pc, #160]	; (80016bc <MX_SPI3_Init+0xa8>)
 800161a:	4a29      	ldr	r2, [pc, #164]	; (80016c0 <MX_SPI3_Init+0xac>)
 800161c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800161e:	4b27      	ldr	r3, [pc, #156]	; (80016bc <MX_SPI3_Init+0xa8>)
 8001620:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001624:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8001626:	4b25      	ldr	r3, [pc, #148]	; (80016bc <MX_SPI3_Init+0xa8>)
 8001628:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800162c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800162e:	4b23      	ldr	r3, [pc, #140]	; (80016bc <MX_SPI3_Init+0xa8>)
 8001630:	2207      	movs	r2, #7
 8001632:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001634:	4b21      	ldr	r3, [pc, #132]	; (80016bc <MX_SPI3_Init+0xa8>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800163a:	4b20      	ldr	r3, [pc, #128]	; (80016bc <MX_SPI3_Init+0xa8>)
 800163c:	2200      	movs	r2, #0
 800163e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001640:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <MX_SPI3_Init+0xa8>)
 8001642:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001646:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001648:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <MX_SPI3_Init+0xa8>)
 800164a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800164e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001650:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <MX_SPI3_Init+0xa8>)
 8001652:	2200      	movs	r2, #0
 8001654:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001656:	4b19      	ldr	r3, [pc, #100]	; (80016bc <MX_SPI3_Init+0xa8>)
 8001658:	2200      	movs	r2, #0
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800165c:	4b17      	ldr	r3, [pc, #92]	; (80016bc <MX_SPI3_Init+0xa8>)
 800165e:	2200      	movs	r2, #0
 8001660:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001662:	4b16      	ldr	r3, [pc, #88]	; (80016bc <MX_SPI3_Init+0xa8>)
 8001664:	2200      	movs	r2, #0
 8001666:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001668:	4b14      	ldr	r3, [pc, #80]	; (80016bc <MX_SPI3_Init+0xa8>)
 800166a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800166e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <MX_SPI3_Init+0xa8>)
 8001672:	2200      	movs	r2, #0
 8001674:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <MX_SPI3_Init+0xa8>)
 8001678:	2200      	movs	r2, #0
 800167a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <MX_SPI3_Init+0xa8>)
 800167e:	2200      	movs	r2, #0
 8001680:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <MX_SPI3_Init+0xa8>)
 8001684:	2200      	movs	r2, #0
 8001686:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <MX_SPI3_Init+0xa8>)
 800168a:	2200      	movs	r2, #0
 800168c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <MX_SPI3_Init+0xa8>)
 8001690:	2200      	movs	r2, #0
 8001692:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <MX_SPI3_Init+0xa8>)
 8001696:	2200      	movs	r2, #0
 8001698:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <MX_SPI3_Init+0xa8>)
 800169c:	2200      	movs	r2, #0
 800169e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <MX_SPI3_Init+0xa8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <MX_SPI3_Init+0xa8>)
 80016a8:	f008 fb96 	bl	8009dd8 <HAL_SPI_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 80016b2:	f7ff ff54 	bl	800155e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2400b064 	.word	0x2400b064
 80016c0:	40003c00 	.word	0x40003c00

080016c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b0bc      	sub	sp, #240	; 0xf0
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016dc:	f107 0320 	add.w	r3, r7, #32
 80016e0:	22bc      	movs	r2, #188	; 0xbc
 80016e2:	2100      	movs	r1, #0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f01b f84f 	bl	801c788 <memset>
  if(spiHandle->Instance==SPI2)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a6d      	ldr	r2, [pc, #436]	; (80018a4 <HAL_SPI_MspInit+0x1e0>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d166      	bne.n	80017c2 <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80016f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016fe:	f107 0320 	add.w	r3, r7, #32
 8001702:	4618      	mov	r0, r3
 8001704:	f007 f806 	bl	8008714 <HAL_RCCEx_PeriphCLKConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800170e:	f7ff ff26 	bl	800155e <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001712:	4b65      	ldr	r3, [pc, #404]	; (80018a8 <HAL_SPI_MspInit+0x1e4>)
 8001714:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001718:	4a63      	ldr	r2, [pc, #396]	; (80018a8 <HAL_SPI_MspInit+0x1e4>)
 800171a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800171e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001722:	4b61      	ldr	r3, [pc, #388]	; (80018a8 <HAL_SPI_MspInit+0x1e4>)
 8001724:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172c:	61fb      	str	r3, [r7, #28]
 800172e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001730:	4b5d      	ldr	r3, [pc, #372]	; (80018a8 <HAL_SPI_MspInit+0x1e4>)
 8001732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001736:	4a5c      	ldr	r2, [pc, #368]	; (80018a8 <HAL_SPI_MspInit+0x1e4>)
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001740:	4b59      	ldr	r3, [pc, #356]	; (80018a8 <HAL_SPI_MspInit+0x1e4>)
 8001742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	61bb      	str	r3, [r7, #24]
 800174c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800174e:	4b56      	ldr	r3, [pc, #344]	; (80018a8 <HAL_SPI_MspInit+0x1e4>)
 8001750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001754:	4a54      	ldr	r2, [pc, #336]	; (80018a8 <HAL_SPI_MspInit+0x1e4>)
 8001756:	f043 0308 	orr.w	r3, r3, #8
 800175a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800175e:	4b52      	ldr	r3, [pc, #328]	; (80018a8 <HAL_SPI_MspInit+0x1e4>)
 8001760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001764:	f003 0308 	and.w	r3, r3, #8
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PC2_C     ------> SPI2_MISO
    PC3_C     ------> SPI2_MOSI
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800176c:	230c      	movs	r3, #12
 800176e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001784:	2305      	movs	r3, #5
 8001786:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800178a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800178e:	4619      	mov	r1, r3
 8001790:	4846      	ldr	r0, [pc, #280]	; (80018ac <HAL_SPI_MspInit+0x1e8>)
 8001792:	f003 fed9 	bl	8005548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001796:	2308      	movs	r3, #8
 8001798:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017ae:	2305      	movs	r3, #5
 80017b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017b8:	4619      	mov	r1, r3
 80017ba:	483d      	ldr	r0, [pc, #244]	; (80018b0 <HAL_SPI_MspInit+0x1ec>)
 80017bc:	f003 fec4 	bl	8005548 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80017c0:	e06b      	b.n	800189a <HAL_SPI_MspInit+0x1d6>
  else if(spiHandle->Instance==SPI3)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a3b      	ldr	r2, [pc, #236]	; (80018b4 <HAL_SPI_MspInit+0x1f0>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d166      	bne.n	800189a <HAL_SPI_MspInit+0x1d6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80017cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017d6:	f107 0320 	add.w	r3, r7, #32
 80017da:	4618      	mov	r0, r3
 80017dc:	f006 ff9a 	bl	8008714 <HAL_RCCEx_PeriphCLKConfig>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_SPI_MspInit+0x126>
      Error_Handler();
 80017e6:	f7ff feba 	bl	800155e <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017ea:	4b2f      	ldr	r3, [pc, #188]	; (80018a8 <HAL_SPI_MspInit+0x1e4>)
 80017ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017f0:	4a2d      	ldr	r2, [pc, #180]	; (80018a8 <HAL_SPI_MspInit+0x1e4>)
 80017f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017fa:	4b2b      	ldr	r3, [pc, #172]	; (80018a8 <HAL_SPI_MspInit+0x1e4>)
 80017fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001800:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001808:	4b27      	ldr	r3, [pc, #156]	; (80018a8 <HAL_SPI_MspInit+0x1e4>)
 800180a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800180e:	4a26      	ldr	r2, [pc, #152]	; (80018a8 <HAL_SPI_MspInit+0x1e4>)
 8001810:	f043 0302 	orr.w	r3, r3, #2
 8001814:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001818:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <HAL_SPI_MspInit+0x1e4>)
 800181a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001826:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <HAL_SPI_MspInit+0x1e4>)
 8001828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800182c:	4a1e      	ldr	r2, [pc, #120]	; (80018a8 <HAL_SPI_MspInit+0x1e4>)
 800182e:	f043 0304 	orr.w	r3, r3, #4
 8001832:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001836:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <HAL_SPI_MspInit+0x1e4>)
 8001838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI3_MOSI___LCD_Pin;
 8001844:	2304      	movs	r3, #4
 8001846:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800185c:	2307      	movs	r3, #7
 800185e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(SPI3_MOSI___LCD_GPIO_Port, &GPIO_InitStruct);
 8001862:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001866:	4619      	mov	r1, r3
 8001868:	4813      	ldr	r0, [pc, #76]	; (80018b8 <HAL_SPI_MspInit+0x1f4>)
 800186a:	f003 fe6d 	bl	8005548 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI3_SCK___LCD_Pin;
 800186e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001872:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2300      	movs	r3, #0
 8001884:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001888:	2306      	movs	r3, #6
 800188a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(SPI3_SCK___LCD_GPIO_Port, &GPIO_InitStruct);
 800188e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001892:	4619      	mov	r1, r3
 8001894:	4805      	ldr	r0, [pc, #20]	; (80018ac <HAL_SPI_MspInit+0x1e8>)
 8001896:	f003 fe57 	bl	8005548 <HAL_GPIO_Init>
}
 800189a:	bf00      	nop
 800189c:	37f0      	adds	r7, #240	; 0xf0
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40003800 	.word	0x40003800
 80018a8:	58024400 	.word	0x58024400
 80018ac:	58020800 	.word	0x58020800
 80018b0:	58020c00 	.word	0x58020c00
 80018b4:	40003c00 	.word	0x40003c00
 80018b8:	58020400 	.word	0x58020400

080018bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <HAL_MspInit+0x5c>)
 80018c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018c8:	4a13      	ldr	r2, [pc, #76]	; (8001918 <HAL_MspInit+0x5c>)
 80018ca:	f043 0302 	orr.w	r3, r3, #2
 80018ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80018d2:	4b11      	ldr	r3, [pc, #68]	; (8001918 <HAL_MspInit+0x5c>)
 80018d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* CM4_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM4_SEV_IRQn, 4, 0);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2104      	movs	r1, #4
 80018e4:	2041      	movs	r0, #65	; 0x41
 80018e6:	f000 ff44 	bl	8002772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM4_SEV_IRQn);
 80018ea:	2041      	movs	r0, #65	; 0x41
 80018ec:	f000 ff5b 	bl	80027a6 <HAL_NVIC_EnableIRQ>
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 4, 0);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2104      	movs	r1, #4
 80018f4:	207d      	movs	r0, #125	; 0x7d
 80018f6:	f000 ff3c 	bl	8002772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 80018fa:	207d      	movs	r0, #125	; 0x7d
 80018fc:	f000 ff53 	bl	80027a6 <HAL_NVIC_EnableIRQ>
  /* HOLD_CORE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HOLD_CORE_IRQn, 4, 0);
 8001900:	2200      	movs	r2, #0
 8001902:	2104      	movs	r1, #4
 8001904:	2094      	movs	r0, #148	; 0x94
 8001906:	f000 ff34 	bl	8002772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HOLD_CORE_IRQn);
 800190a:	2094      	movs	r0, #148	; 0x94
 800190c:	f000 ff4b 	bl	80027a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	58024400 	.word	0x58024400

0800191c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <NMI_Handler+0x4>

08001922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001926:	e7fe      	b.n	8001926 <HardFault_Handler+0x4>

08001928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800192c:	e7fe      	b.n	800192c <MemManage_Handler+0x4>

0800192e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001932:	e7fe      	b.n	8001932 <BusFault_Handler+0x4>

08001934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <UsageFault_Handler+0x4>

0800193a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001968:	f000 fdd8 	bl	800251c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001974:	2001      	movs	r0, #1
 8001976:	f003 ffc8 	bl	800590a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}

0800197e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001982:	2002      	movs	r0, #2
 8001984:	f003 ffc1 	bl	800590a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}

0800198c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001990:	4802      	ldr	r0, [pc, #8]	; (800199c <DMA1_Stream0_IRQHandler+0x10>)
 8001992:	f002 fac7 	bl	8003f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	2400b290 	.word	0x2400b290

080019a0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80019a4:	4802      	ldr	r0, [pc, #8]	; (80019b0 <DMA1_Stream1_IRQHandler+0x10>)
 80019a6:	f002 fabd 	bl	8003f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2400b188 	.word	0x2400b188

080019b4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80019b8:	4802      	ldr	r0, [pc, #8]	; (80019c4 <I2C1_EV_IRQHandler+0x10>)
 80019ba:	f005 fdf3 	bl	80075a4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	2400af30 	.word	0x2400af30

080019c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019cc:	4802      	ldr	r0, [pc, #8]	; (80019d8 <USART1_IRQHandler+0x10>)
 80019ce:	f00a f8fb 	bl	800bbc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	2400b308 	.word	0x2400b308

080019dc <CM4_SEV_IRQHandler>:

/**
  * @brief This function handles CM4 send event interrupt for CM7.
  */
void CM4_SEV_IRQHandler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0

  /* USER CODE END CM4_SEV_IRQn 0 */
  /* USER CODE BEGIN CM4_SEV_IRQn 1 */

  /* USER CODE END CM4_SEV_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <OTG_FS_IRQHandler+0x10>)
 80019f2:	f004 fa0f 	bl	8005e14 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	240144e0 	.word	0x240144e0

08001a00 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001a04:	f005 fd24 	bl	8007450 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HOLD_CORE_IRQHandler>:

/**
  * @brief This function handles Hold core interrupt.
  */
void HOLD_CORE_IRQHandler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0

  /* USER CODE END HOLD_CORE_IRQn 0 */
  /* USER CODE BEGIN HOLD_CORE_IRQn 1 */

  /* USER CODE END HOLD_CORE_IRQn 1 */
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0)
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d109      	bne.n	8001a40 <HAL_GPIO_EXTI_Callback+0x24>
	{
		channelARightBack = HAL_GPIO_ReadPin(GPIOD, GPIO_Pin);
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4811      	ldr	r0, [pc, #68]	; (8001a78 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001a32:	f003 ff39 	bl	80058a8 <HAL_GPIO_ReadPin>
 8001a36:	4603      	mov	r3, r0
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x60>)
 8001a3c:	701a      	strb	r2, [r3, #0]
 8001a3e:	e00b      	b.n	8001a58 <HAL_GPIO_EXTI_Callback+0x3c>
	}
	else if (GPIO_Pin == GPIO_PIN_1)
 8001a40:	88fb      	ldrh	r3, [r7, #6]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d108      	bne.n	8001a58 <HAL_GPIO_EXTI_Callback+0x3c>
	{
		channelBRightBack = HAL_GPIO_ReadPin(GPIOD, GPIO_Pin);
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	480b      	ldr	r0, [pc, #44]	; (8001a78 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001a4c:	f003 ff2c 	bl	80058a8 <HAL_GPIO_ReadPin>
 8001a50:	4603      	mov	r3, r0
 8001a52:	461a      	mov	r2, r3
 8001a54:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <HAL_GPIO_EXTI_Callback+0x64>)
 8001a56:	701a      	strb	r2, [r3, #0]
	}
	currentAggregatedRBMotor = 0x10 * channelARightBack + channelBRightBack;
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x60>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	011b      	lsls	r3, r3, #4
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <HAL_GPIO_EXTI_Callback+0x64>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4413      	add	r3, r2
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_GPIO_EXTI_Callback+0x68>)
 8001a6a:	701a      	strb	r2, [r3, #0]
	int a = 1;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
}
 8001a70:	bf00      	nop
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	58020c00 	.word	0x58020c00
 8001a7c:	2400b0ed 	.word	0x2400b0ed
 8001a80:	2400b0ec 	.word	0x2400b0ec
 8001a84:	2400ae50 	.word	0x2400ae50

08001a88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
	return 1;
 8001a8c:	2301      	movs	r3, #1
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <_kill>:

int _kill(int pid, int sig)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001aa2:	f01a fdfd 	bl	801c6a0 <__errno>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2216      	movs	r2, #22
 8001aaa:	601a      	str	r2, [r3, #0]
	return -1;
 8001aac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <_exit>:

void _exit (int status)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ffe7 	bl	8001a98 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001aca:	e7fe      	b.n	8001aca <_exit+0x12>

08001acc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	e00a      	b.n	8001af4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ade:	f3af 8000 	nop.w
 8001ae2:	4601      	mov	r1, r0
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	1c5a      	adds	r2, r3, #1
 8001ae8:	60ba      	str	r2, [r7, #8]
 8001aea:	b2ca      	uxtb	r2, r1
 8001aec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	3301      	adds	r3, #1
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	dbf0      	blt.n	8001ade <_read+0x12>
	}

return len;
 8001afc:	687b      	ldr	r3, [r7, #4]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	60f8      	str	r0, [r7, #12]
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	e009      	b.n	8001b2c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	60ba      	str	r2, [r7, #8]
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	dbf1      	blt.n	8001b18 <_write+0x12>
	}
	return len;
 8001b34:	687b      	ldr	r3, [r7, #4]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <_close>:

int _close(int file)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
	return -1;
 8001b46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b66:	605a      	str	r2, [r3, #4]
	return 0;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <_isatty>:

int _isatty(int file)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
	return 1;
 8001b7e:	2301      	movs	r3, #1
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
	return 0;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb0:	4a14      	ldr	r2, [pc, #80]	; (8001c04 <_sbrk+0x5c>)
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <_sbrk+0x60>)
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bbc:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <_sbrk+0x64>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d102      	bne.n	8001bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <_sbrk+0x64>)
 8001bc6:	4a12      	ldr	r2, [pc, #72]	; (8001c10 <_sbrk+0x68>)
 8001bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <_sbrk+0x64>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d207      	bcs.n	8001be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bd8:	f01a fd62 	bl	801c6a0 <__errno>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	220c      	movs	r2, #12
 8001be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001be2:	f04f 33ff 	mov.w	r3, #4294967295
 8001be6:	e009      	b.n	8001bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <_sbrk+0x64>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bee:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <_sbrk+0x64>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	4a05      	ldr	r2, [pc, #20]	; (8001c0c <_sbrk+0x64>)
 8001bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	24040000 	.word	0x24040000
 8001c08:	00000400 	.word	0x00000400
 8001c0c:	2400a388 	.word	0x2400a388
 8001c10:	240147f8 	.word	0x240147f8

08001c14 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b096      	sub	sp, #88	; 0x58
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	605a      	str	r2, [r3, #4]
 8001c24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
 8001c32:	60da      	str	r2, [r3, #12]
 8001c34:	611a      	str	r2, [r3, #16]
 8001c36:	615a      	str	r2, [r3, #20]
 8001c38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	222c      	movs	r2, #44	; 0x2c
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f01a fda1 	bl	801c788 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c46:	4b40      	ldr	r3, [pc, #256]	; (8001d48 <MX_TIM1_Init+0x134>)
 8001c48:	4a40      	ldr	r2, [pc, #256]	; (8001d4c <MX_TIM1_Init+0x138>)
 8001c4a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75;
 8001c4c:	4b3e      	ldr	r3, [pc, #248]	; (8001d48 <MX_TIM1_Init+0x134>)
 8001c4e:	224b      	movs	r2, #75	; 0x4b
 8001c50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c52:	4b3d      	ldr	r3, [pc, #244]	; (8001d48 <MX_TIM1_Init+0x134>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001c58:	4b3b      	ldr	r3, [pc, #236]	; (8001d48 <MX_TIM1_Init+0x134>)
 8001c5a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001c5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c60:	4b39      	ldr	r3, [pc, #228]	; (8001d48 <MX_TIM1_Init+0x134>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c66:	4b38      	ldr	r3, [pc, #224]	; (8001d48 <MX_TIM1_Init+0x134>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c6c:	4b36      	ldr	r3, [pc, #216]	; (8001d48 <MX_TIM1_Init+0x134>)
 8001c6e:	2280      	movs	r2, #128	; 0x80
 8001c70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c72:	4835      	ldr	r0, [pc, #212]	; (8001d48 <MX_TIM1_Init+0x134>)
 8001c74:	f008 ff79 	bl	800ab6a <HAL_TIM_PWM_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001c7e:	f7ff fc6e 	bl	800155e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c86:	2300      	movs	r3, #0
 8001c88:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c92:	4619      	mov	r1, r3
 8001c94:	482c      	ldr	r0, [pc, #176]	; (8001d48 <MX_TIM1_Init+0x134>)
 8001c96:	f009 fd65 	bl	800b764 <HAL_TIMEx_MasterConfigSynchronization>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001ca0:	f7ff fc5d 	bl	800155e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ca4:	2360      	movs	r3, #96	; 0x60
 8001ca6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 8001ca8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	4619      	mov	r1, r3
 8001cca:	481f      	ldr	r0, [pc, #124]	; (8001d48 <MX_TIM1_Init+0x134>)
 8001ccc:	f009 f8ac 	bl	800ae28 <HAL_TIM_PWM_ConfigChannel>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001cd6:	f7ff fc42 	bl	800155e <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ce2:	2204      	movs	r2, #4
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4818      	ldr	r0, [pc, #96]	; (8001d48 <MX_TIM1_Init+0x134>)
 8001ce8:	f009 f89e 	bl	800ae28 <HAL_TIM_PWM_ConfigChannel>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 8001cf2:	f7ff fc34 	bl	800155e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d0e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d26:	1d3b      	adds	r3, r7, #4
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4807      	ldr	r0, [pc, #28]	; (8001d48 <MX_TIM1_Init+0x134>)
 8001d2c:	f009 fda2 	bl	800b874 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001d36:	f7ff fc12 	bl	800155e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d3a:	4803      	ldr	r0, [pc, #12]	; (8001d48 <MX_TIM1_Init+0x134>)
 8001d3c:	f000 f8be 	bl	8001ebc <HAL_TIM_MspPostInit>

}
 8001d40:	bf00      	nop
 8001d42:	3758      	adds	r7, #88	; 0x58
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	2400b13c 	.word	0x2400b13c
 8001d4c:	40010000 	.word	0x40010000

08001d50 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	; 0x28
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d56:	f107 031c 	add.w	r3, r7, #28
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d62:	463b      	mov	r3, r7
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
 8001d70:	615a      	str	r2, [r3, #20]
 8001d72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d74:	4b32      	ldr	r3, [pc, #200]	; (8001e40 <MX_TIM3_Init+0xf0>)
 8001d76:	4a33      	ldr	r2, [pc, #204]	; (8001e44 <MX_TIM3_Init+0xf4>)
 8001d78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7500;
 8001d7a:	4b31      	ldr	r3, [pc, #196]	; (8001e40 <MX_TIM3_Init+0xf0>)
 8001d7c:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8001d80:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d82:	4b2f      	ldr	r3, [pc, #188]	; (8001e40 <MX_TIM3_Init+0xf0>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001d88:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <MX_TIM3_Init+0xf0>)
 8001d8a:	f242 7210 	movw	r2, #10000	; 0x2710
 8001d8e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d90:	4b2b      	ldr	r3, [pc, #172]	; (8001e40 <MX_TIM3_Init+0xf0>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d96:	4b2a      	ldr	r3, [pc, #168]	; (8001e40 <MX_TIM3_Init+0xf0>)
 8001d98:	2280      	movs	r2, #128	; 0x80
 8001d9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d9c:	4828      	ldr	r0, [pc, #160]	; (8001e40 <MX_TIM3_Init+0xf0>)
 8001d9e:	f008 fee4 	bl	800ab6a <HAL_TIM_PWM_Init>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8001da8:	f7ff fbd9 	bl	800155e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001db4:	f107 031c 	add.w	r3, r7, #28
 8001db8:	4619      	mov	r1, r3
 8001dba:	4821      	ldr	r0, [pc, #132]	; (8001e40 <MX_TIM3_Init+0xf0>)
 8001dbc:	f009 fcd2 	bl	800b764 <HAL_TIMEx_MasterConfigSynchronization>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001dc6:	f7ff fbca 	bl	800155e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dca:	2360      	movs	r3, #96	; 0x60
 8001dcc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dda:	463b      	mov	r3, r7
 8001ddc:	2200      	movs	r2, #0
 8001dde:	4619      	mov	r1, r3
 8001de0:	4817      	ldr	r0, [pc, #92]	; (8001e40 <MX_TIM3_Init+0xf0>)
 8001de2:	f009 f821 	bl	800ae28 <HAL_TIM_PWM_ConfigChannel>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001dec:	f7ff fbb7 	bl	800155e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001df0:	463b      	mov	r3, r7
 8001df2:	2204      	movs	r2, #4
 8001df4:	4619      	mov	r1, r3
 8001df6:	4812      	ldr	r0, [pc, #72]	; (8001e40 <MX_TIM3_Init+0xf0>)
 8001df8:	f009 f816 	bl	800ae28 <HAL_TIM_PWM_ConfigChannel>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8001e02:	f7ff fbac 	bl	800155e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e06:	463b      	mov	r3, r7
 8001e08:	2208      	movs	r2, #8
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	480c      	ldr	r0, [pc, #48]	; (8001e40 <MX_TIM3_Init+0xf0>)
 8001e0e:	f009 f80b 	bl	800ae28 <HAL_TIM_PWM_ConfigChannel>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8001e18:	f7ff fba1 	bl	800155e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e1c:	463b      	mov	r3, r7
 8001e1e:	220c      	movs	r2, #12
 8001e20:	4619      	mov	r1, r3
 8001e22:	4807      	ldr	r0, [pc, #28]	; (8001e40 <MX_TIM3_Init+0xf0>)
 8001e24:	f009 f800 	bl	800ae28 <HAL_TIM_PWM_ConfigChannel>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 8001e2e:	f7ff fb96 	bl	800155e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e32:	4803      	ldr	r0, [pc, #12]	; (8001e40 <MX_TIM3_Init+0xf0>)
 8001e34:	f000 f842 	bl	8001ebc <HAL_TIM_MspPostInit>

}
 8001e38:	bf00      	nop
 8001e3a:	3728      	adds	r7, #40	; 0x28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	2400b0f0 	.word	0x2400b0f0
 8001e44:	40000400 	.word	0x40000400

08001e48 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a16      	ldr	r2, [pc, #88]	; (8001eb0 <HAL_TIM_PWM_MspInit+0x68>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d10f      	bne.n	8001e7a <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e5a:	4b16      	ldr	r3, [pc, #88]	; (8001eb4 <HAL_TIM_PWM_MspInit+0x6c>)
 8001e5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e60:	4a14      	ldr	r2, [pc, #80]	; (8001eb4 <HAL_TIM_PWM_MspInit+0x6c>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e6a:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_TIM_PWM_MspInit+0x6c>)
 8001e6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001e78:	e013      	b.n	8001ea2 <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM3)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a0e      	ldr	r2, [pc, #56]	; (8001eb8 <HAL_TIM_PWM_MspInit+0x70>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d10e      	bne.n	8001ea2 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_TIM_PWM_MspInit+0x6c>)
 8001e86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e8a:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <HAL_TIM_PWM_MspInit+0x6c>)
 8001e8c:	f043 0302 	orr.w	r3, r3, #2
 8001e90:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e94:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <HAL_TIM_PWM_MspInit+0x6c>)
 8001e96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
}
 8001ea2:	bf00      	nop
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40010000 	.word	0x40010000
 8001eb4:	58024400 	.word	0x58024400
 8001eb8:	40000400 	.word	0x40000400

08001ebc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08c      	sub	sp, #48	; 0x30
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 031c 	add.w	r3, r7, #28
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a45      	ldr	r2, [pc, #276]	; (8001ff0 <HAL_TIM_MspPostInit+0x134>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d120      	bne.n	8001f20 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ede:	4b45      	ldr	r3, [pc, #276]	; (8001ff4 <HAL_TIM_MspPostInit+0x138>)
 8001ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee4:	4a43      	ldr	r2, [pc, #268]	; (8001ff4 <HAL_TIM_MspPostInit+0x138>)
 8001ee6:	f043 0310 	orr.w	r3, r3, #16
 8001eea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eee:	4b41      	ldr	r3, [pc, #260]	; (8001ff4 <HAL_TIM_MspPostInit+0x138>)
 8001ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	61bb      	str	r3, [r7, #24]
 8001efa:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM1_CH1___LCD_Brightness_Pin|TIM1_CH2___LIDAR_motor_ctrl_Pin;
 8001efc:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f12:	f107 031c 	add.w	r3, r7, #28
 8001f16:	4619      	mov	r1, r3
 8001f18:	4837      	ldr	r0, [pc, #220]	; (8001ff8 <HAL_TIM_MspPostInit+0x13c>)
 8001f1a:	f003 fb15 	bl	8005548 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f1e:	e062      	b.n	8001fe6 <HAL_TIM_MspPostInit+0x12a>
  else if(timHandle->Instance==TIM3)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a35      	ldr	r2, [pc, #212]	; (8001ffc <HAL_TIM_MspPostInit+0x140>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d15d      	bne.n	8001fe6 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2a:	4b32      	ldr	r3, [pc, #200]	; (8001ff4 <HAL_TIM_MspPostInit+0x138>)
 8001f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f30:	4a30      	ldr	r2, [pc, #192]	; (8001ff4 <HAL_TIM_MspPostInit+0x138>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f3a:	4b2e      	ldr	r3, [pc, #184]	; (8001ff4 <HAL_TIM_MspPostInit+0x138>)
 8001f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f48:	4b2a      	ldr	r3, [pc, #168]	; (8001ff4 <HAL_TIM_MspPostInit+0x138>)
 8001f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f4e:	4a29      	ldr	r2, [pc, #164]	; (8001ff4 <HAL_TIM_MspPostInit+0x138>)
 8001f50:	f043 0302 	orr.w	r3, r3, #2
 8001f54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f58:	4b26      	ldr	r3, [pc, #152]	; (8001ff4 <HAL_TIM_MspPostInit+0x138>)
 8001f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f66:	4b23      	ldr	r3, [pc, #140]	; (8001ff4 <HAL_TIM_MspPostInit+0x138>)
 8001f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f6c:	4a21      	ldr	r2, [pc, #132]	; (8001ff4 <HAL_TIM_MspPostInit+0x138>)
 8001f6e:	f043 0304 	orr.w	r3, r3, #4
 8001f72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f76:	4b1f      	ldr	r3, [pc, #124]	; (8001ff4 <HAL_TIM_MspPostInit+0x138>)
 8001f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH1___Motor_Speed_Pin|TIM3_CH2___Motor_Speed_Pin;
 8001f84:	23c0      	movs	r3, #192	; 0xc0
 8001f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2300      	movs	r3, #0
 8001f92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f94:	2302      	movs	r3, #2
 8001f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f98:	f107 031c 	add.w	r3, r7, #28
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4818      	ldr	r0, [pc, #96]	; (8002000 <HAL_TIM_MspPostInit+0x144>)
 8001fa0:	f003 fad2 	bl	8005548 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM3_CH4___Motor_Speed_Pin;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM3_CH4___Motor_Speed_GPIO_Port, &GPIO_InitStruct);
 8001fb8:	f107 031c 	add.w	r3, r7, #28
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4811      	ldr	r0, [pc, #68]	; (8002004 <HAL_TIM_MspPostInit+0x148>)
 8001fc0:	f003 fac2 	bl	8005548 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM3_CH3___Motor_Speed_Pin;
 8001fc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM3_CH3___Motor_Speed_GPIO_Port, &GPIO_InitStruct);
 8001fda:	f107 031c 	add.w	r3, r7, #28
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4809      	ldr	r0, [pc, #36]	; (8002008 <HAL_TIM_MspPostInit+0x14c>)
 8001fe2:	f003 fab1 	bl	8005548 <HAL_GPIO_Init>
}
 8001fe6:	bf00      	nop
 8001fe8:	3730      	adds	r7, #48	; 0x30
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40010000 	.word	0x40010000
 8001ff4:	58024400 	.word	0x58024400
 8001ff8:	58021000 	.word	0x58021000
 8001ffc:	40000400 	.word	0x40000400
 8002000:	58020000 	.word	0x58020000
 8002004:	58020400 	.word	0x58020400
 8002008:	58020800 	.word	0x58020800

0800200c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002010:	4b22      	ldr	r3, [pc, #136]	; (800209c <MX_USART1_UART_Init+0x90>)
 8002012:	4a23      	ldr	r2, [pc, #140]	; (80020a0 <MX_USART1_UART_Init+0x94>)
 8002014:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002016:	4b21      	ldr	r3, [pc, #132]	; (800209c <MX_USART1_UART_Init+0x90>)
 8002018:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800201c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800201e:	4b1f      	ldr	r3, [pc, #124]	; (800209c <MX_USART1_UART_Init+0x90>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002024:	4b1d      	ldr	r3, [pc, #116]	; (800209c <MX_USART1_UART_Init+0x90>)
 8002026:	2200      	movs	r2, #0
 8002028:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800202a:	4b1c      	ldr	r3, [pc, #112]	; (800209c <MX_USART1_UART_Init+0x90>)
 800202c:	2200      	movs	r2, #0
 800202e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002030:	4b1a      	ldr	r3, [pc, #104]	; (800209c <MX_USART1_UART_Init+0x90>)
 8002032:	220c      	movs	r2, #12
 8002034:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002036:	4b19      	ldr	r3, [pc, #100]	; (800209c <MX_USART1_UART_Init+0x90>)
 8002038:	2200      	movs	r2, #0
 800203a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800203c:	4b17      	ldr	r3, [pc, #92]	; (800209c <MX_USART1_UART_Init+0x90>)
 800203e:	2200      	movs	r2, #0
 8002040:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002042:	4b16      	ldr	r3, [pc, #88]	; (800209c <MX_USART1_UART_Init+0x90>)
 8002044:	2200      	movs	r2, #0
 8002046:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002048:	4b14      	ldr	r3, [pc, #80]	; (800209c <MX_USART1_UART_Init+0x90>)
 800204a:	2200      	movs	r2, #0
 800204c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800204e:	4b13      	ldr	r3, [pc, #76]	; (800209c <MX_USART1_UART_Init+0x90>)
 8002050:	2200      	movs	r2, #0
 8002052:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002054:	4811      	ldr	r0, [pc, #68]	; (800209c <MX_USART1_UART_Init+0x90>)
 8002056:	f009 fc8b 	bl	800b970 <HAL_UART_Init>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002060:	f7ff fa7d 	bl	800155e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002064:	2100      	movs	r1, #0
 8002066:	480d      	ldr	r0, [pc, #52]	; (800209c <MX_USART1_UART_Init+0x90>)
 8002068:	f00b f956 	bl	800d318 <HAL_UARTEx_SetTxFifoThreshold>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002072:	f7ff fa74 	bl	800155e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002076:	2100      	movs	r1, #0
 8002078:	4808      	ldr	r0, [pc, #32]	; (800209c <MX_USART1_UART_Init+0x90>)
 800207a:	f00b f98b 	bl	800d394 <HAL_UARTEx_SetRxFifoThreshold>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002084:	f7ff fa6b 	bl	800155e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002088:	4804      	ldr	r0, [pc, #16]	; (800209c <MX_USART1_UART_Init+0x90>)
 800208a:	f00b f90c 	bl	800d2a6 <HAL_UARTEx_DisableFifoMode>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002094:	f7ff fa63 	bl	800155e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}
 800209c:	2400b308 	.word	0x2400b308
 80020a0:	40011000 	.word	0x40011000

080020a4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020a8:	4b22      	ldr	r3, [pc, #136]	; (8002134 <MX_USART3_UART_Init+0x90>)
 80020aa:	4a23      	ldr	r2, [pc, #140]	; (8002138 <MX_USART3_UART_Init+0x94>)
 80020ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80020ae:	4b21      	ldr	r3, [pc, #132]	; (8002134 <MX_USART3_UART_Init+0x90>)
 80020b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020b6:	4b1f      	ldr	r3, [pc, #124]	; (8002134 <MX_USART3_UART_Init+0x90>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020bc:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <MX_USART3_UART_Init+0x90>)
 80020be:	2200      	movs	r2, #0
 80020c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020c2:	4b1c      	ldr	r3, [pc, #112]	; (8002134 <MX_USART3_UART_Init+0x90>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020c8:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <MX_USART3_UART_Init+0x90>)
 80020ca:	220c      	movs	r2, #12
 80020cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ce:	4b19      	ldr	r3, [pc, #100]	; (8002134 <MX_USART3_UART_Init+0x90>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d4:	4b17      	ldr	r3, [pc, #92]	; (8002134 <MX_USART3_UART_Init+0x90>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020da:	4b16      	ldr	r3, [pc, #88]	; (8002134 <MX_USART3_UART_Init+0x90>)
 80020dc:	2200      	movs	r2, #0
 80020de:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020e0:	4b14      	ldr	r3, [pc, #80]	; (8002134 <MX_USART3_UART_Init+0x90>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020e6:	4b13      	ldr	r3, [pc, #76]	; (8002134 <MX_USART3_UART_Init+0x90>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020ec:	4811      	ldr	r0, [pc, #68]	; (8002134 <MX_USART3_UART_Init+0x90>)
 80020ee:	f009 fc3f 	bl	800b970 <HAL_UART_Init>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80020f8:	f7ff fa31 	bl	800155e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020fc:	2100      	movs	r1, #0
 80020fe:	480d      	ldr	r0, [pc, #52]	; (8002134 <MX_USART3_UART_Init+0x90>)
 8002100:	f00b f90a 	bl	800d318 <HAL_UARTEx_SetTxFifoThreshold>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800210a:	f7ff fa28 	bl	800155e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800210e:	2100      	movs	r1, #0
 8002110:	4808      	ldr	r0, [pc, #32]	; (8002134 <MX_USART3_UART_Init+0x90>)
 8002112:	f00b f93f 	bl	800d394 <HAL_UARTEx_SetRxFifoThreshold>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800211c:	f7ff fa1f 	bl	800155e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002120:	4804      	ldr	r0, [pc, #16]	; (8002134 <MX_USART3_UART_Init+0x90>)
 8002122:	f00b f8c0 	bl	800d2a6 <HAL_UARTEx_DisableFifoMode>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800212c:	f7ff fa17 	bl	800155e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}
 8002134:	2400b200 	.word	0x2400b200
 8002138:	40004800 	.word	0x40004800

0800213c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b0ba      	sub	sp, #232	; 0xe8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002154:	f107 0318 	add.w	r3, r7, #24
 8002158:	22bc      	movs	r2, #188	; 0xbc
 800215a:	2100      	movs	r1, #0
 800215c:	4618      	mov	r0, r3
 800215e:	f01a fb13 	bl	801c788 <memset>
  if(uartHandle->Instance==USART1)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a87      	ldr	r2, [pc, #540]	; (8002384 <HAL_UART_MspInit+0x248>)
 8002168:	4293      	cmp	r3, r2
 800216a:	f040 8090 	bne.w	800228e <HAL_UART_MspInit+0x152>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800216e:	2301      	movs	r3, #1
 8002170:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002172:	2300      	movs	r3, #0
 8002174:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002178:	f107 0318 	add.w	r3, r7, #24
 800217c:	4618      	mov	r0, r3
 800217e:	f006 fac9 	bl	8008714 <HAL_RCCEx_PeriphCLKConfig>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002188:	f7ff f9e9 	bl	800155e <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800218c:	4b7e      	ldr	r3, [pc, #504]	; (8002388 <HAL_UART_MspInit+0x24c>)
 800218e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002192:	4a7d      	ldr	r2, [pc, #500]	; (8002388 <HAL_UART_MspInit+0x24c>)
 8002194:	f043 0310 	orr.w	r3, r3, #16
 8002198:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800219c:	4b7a      	ldr	r3, [pc, #488]	; (8002388 <HAL_UART_MspInit+0x24c>)
 800219e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021a2:	f003 0310 	and.w	r3, r3, #16
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021aa:	4b77      	ldr	r3, [pc, #476]	; (8002388 <HAL_UART_MspInit+0x24c>)
 80021ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b0:	4a75      	ldr	r2, [pc, #468]	; (8002388 <HAL_UART_MspInit+0x24c>)
 80021b2:	f043 0302 	orr.w	r3, r3, #2
 80021b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021ba:	4b73      	ldr	r3, [pc, #460]	; (8002388 <HAL_UART_MspInit+0x24c>)
 80021bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USART1_RX___BLE_Pin;
 80021c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80021e2:	2304      	movs	r3, #4
 80021e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(USART1_RX___BLE_GPIO_Port, &GPIO_InitStruct);
 80021e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021ec:	4619      	mov	r1, r3
 80021ee:	4867      	ldr	r0, [pc, #412]	; (800238c <HAL_UART_MspInit+0x250>)
 80021f0:	f003 f9aa 	bl	8005548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_TX___BLE_Pin;
 80021f4:	2340      	movs	r3, #64	; 0x40
 80021f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2300      	movs	r3, #0
 8002208:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800220c:	2307      	movs	r3, #7
 800220e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(USART1_TX___BLE_GPIO_Port, &GPIO_InitStruct);
 8002212:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002216:	4619      	mov	r1, r3
 8002218:	485c      	ldr	r0, [pc, #368]	; (800238c <HAL_UART_MspInit+0x250>)
 800221a:	f003 f995 	bl	8005548 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 800221e:	4b5c      	ldr	r3, [pc, #368]	; (8002390 <HAL_UART_MspInit+0x254>)
 8002220:	4a5c      	ldr	r2, [pc, #368]	; (8002394 <HAL_UART_MspInit+0x258>)
 8002222:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002224:	4b5a      	ldr	r3, [pc, #360]	; (8002390 <HAL_UART_MspInit+0x254>)
 8002226:	2229      	movs	r2, #41	; 0x29
 8002228:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800222a:	4b59      	ldr	r3, [pc, #356]	; (8002390 <HAL_UART_MspInit+0x254>)
 800222c:	2200      	movs	r2, #0
 800222e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002230:	4b57      	ldr	r3, [pc, #348]	; (8002390 <HAL_UART_MspInit+0x254>)
 8002232:	2200      	movs	r2, #0
 8002234:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002236:	4b56      	ldr	r3, [pc, #344]	; (8002390 <HAL_UART_MspInit+0x254>)
 8002238:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800223c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800223e:	4b54      	ldr	r3, [pc, #336]	; (8002390 <HAL_UART_MspInit+0x254>)
 8002240:	2200      	movs	r2, #0
 8002242:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002244:	4b52      	ldr	r3, [pc, #328]	; (8002390 <HAL_UART_MspInit+0x254>)
 8002246:	2200      	movs	r2, #0
 8002248:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800224a:	4b51      	ldr	r3, [pc, #324]	; (8002390 <HAL_UART_MspInit+0x254>)
 800224c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002250:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002252:	4b4f      	ldr	r3, [pc, #316]	; (8002390 <HAL_UART_MspInit+0x254>)
 8002254:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002258:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800225a:	4b4d      	ldr	r3, [pc, #308]	; (8002390 <HAL_UART_MspInit+0x254>)
 800225c:	2200      	movs	r2, #0
 800225e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002260:	484b      	ldr	r0, [pc, #300]	; (8002390 <HAL_UART_MspInit+0x254>)
 8002262:	f000 fb37 	bl	80028d4 <HAL_DMA_Init>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 800226c:	f7ff f977 	bl	800155e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a47      	ldr	r2, [pc, #284]	; (8002390 <HAL_UART_MspInit+0x254>)
 8002274:	67da      	str	r2, [r3, #124]	; 0x7c
 8002276:	4a46      	ldr	r2, [pc, #280]	; (8002390 <HAL_UART_MspInit+0x254>)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800227c:	2200      	movs	r2, #0
 800227e:	2100      	movs	r1, #0
 8002280:	2025      	movs	r0, #37	; 0x25
 8002282:	f000 fa76 	bl	8002772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002286:	2025      	movs	r0, #37	; 0x25
 8002288:	f000 fa8d 	bl	80027a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800228c:	e075      	b.n	800237a <HAL_UART_MspInit+0x23e>
  else if(uartHandle->Instance==USART3)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a41      	ldr	r2, [pc, #260]	; (8002398 <HAL_UART_MspInit+0x25c>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d170      	bne.n	800237a <HAL_UART_MspInit+0x23e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002298:	2302      	movs	r3, #2
 800229a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800229c:	2300      	movs	r3, #0
 800229e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022a2:	f107 0318 	add.w	r3, r7, #24
 80022a6:	4618      	mov	r0, r3
 80022a8:	f006 fa34 	bl	8008714 <HAL_RCCEx_PeriphCLKConfig>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_UART_MspInit+0x17a>
      Error_Handler();
 80022b2:	f7ff f954 	bl	800155e <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022b6:	4b34      	ldr	r3, [pc, #208]	; (8002388 <HAL_UART_MspInit+0x24c>)
 80022b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022bc:	4a32      	ldr	r2, [pc, #200]	; (8002388 <HAL_UART_MspInit+0x24c>)
 80022be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022c6:	4b30      	ldr	r3, [pc, #192]	; (8002388 <HAL_UART_MspInit+0x24c>)
 80022c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022d4:	4b2c      	ldr	r3, [pc, #176]	; (8002388 <HAL_UART_MspInit+0x24c>)
 80022d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022da:	4a2b      	ldr	r2, [pc, #172]	; (8002388 <HAL_UART_MspInit+0x24c>)
 80022dc:	f043 0308 	orr.w	r3, r3, #8
 80022e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022e4:	4b28      	ldr	r3, [pc, #160]	; (8002388 <HAL_UART_MspInit+0x24c>)
 80022e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	60bb      	str	r3, [r7, #8]
 80022f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80022f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fa:	2302      	movs	r3, #2
 80022fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002306:	2300      	movs	r3, #0
 8002308:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800230c:	2307      	movs	r3, #7
 800230e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002312:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002316:	4619      	mov	r1, r3
 8002318:	4820      	ldr	r0, [pc, #128]	; (800239c <HAL_UART_MspInit+0x260>)
 800231a:	f003 f915 	bl	8005548 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800231e:	4b20      	ldr	r3, [pc, #128]	; (80023a0 <HAL_UART_MspInit+0x264>)
 8002320:	4a20      	ldr	r2, [pc, #128]	; (80023a4 <HAL_UART_MspInit+0x268>)
 8002322:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002324:	4b1e      	ldr	r3, [pc, #120]	; (80023a0 <HAL_UART_MspInit+0x264>)
 8002326:	222d      	movs	r2, #45	; 0x2d
 8002328:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800232a:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <HAL_UART_MspInit+0x264>)
 800232c:	2200      	movs	r2, #0
 800232e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002330:	4b1b      	ldr	r3, [pc, #108]	; (80023a0 <HAL_UART_MspInit+0x264>)
 8002332:	2200      	movs	r2, #0
 8002334:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002336:	4b1a      	ldr	r3, [pc, #104]	; (80023a0 <HAL_UART_MspInit+0x264>)
 8002338:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800233c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800233e:	4b18      	ldr	r3, [pc, #96]	; (80023a0 <HAL_UART_MspInit+0x264>)
 8002340:	2200      	movs	r2, #0
 8002342:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002344:	4b16      	ldr	r3, [pc, #88]	; (80023a0 <HAL_UART_MspInit+0x264>)
 8002346:	2200      	movs	r2, #0
 8002348:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800234a:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <HAL_UART_MspInit+0x264>)
 800234c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002350:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002352:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <HAL_UART_MspInit+0x264>)
 8002354:	2200      	movs	r2, #0
 8002356:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002358:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <HAL_UART_MspInit+0x264>)
 800235a:	2200      	movs	r2, #0
 800235c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800235e:	4810      	ldr	r0, [pc, #64]	; (80023a0 <HAL_UART_MspInit+0x264>)
 8002360:	f000 fab8 	bl	80028d4 <HAL_DMA_Init>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_UART_MspInit+0x232>
      Error_Handler();
 800236a:	f7ff f8f8 	bl	800155e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a0b      	ldr	r2, [pc, #44]	; (80023a0 <HAL_UART_MspInit+0x264>)
 8002372:	67da      	str	r2, [r3, #124]	; 0x7c
 8002374:	4a0a      	ldr	r2, [pc, #40]	; (80023a0 <HAL_UART_MspInit+0x264>)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6393      	str	r3, [r2, #56]	; 0x38
}
 800237a:	bf00      	nop
 800237c:	37e8      	adds	r7, #232	; 0xe8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40011000 	.word	0x40011000
 8002388:	58024400 	.word	0x58024400
 800238c:	58020400 	.word	0x58020400
 8002390:	2400b290 	.word	0x2400b290
 8002394:	40020010 	.word	0x40020010
 8002398:	40004800 	.word	0x40004800
 800239c:	58020c00 	.word	0x58020c00
 80023a0:	2400b188 	.word	0x2400b188
 80023a4:	40020028 	.word	0x40020028

080023a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80023a8:	f8df d05c 	ldr.w	sp, [pc, #92]	; 8002408 <LoopFillZerobss_RAM_D2+0x12>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80023ac:	f7fe fbf4 	bl	8000b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023b0:	4816      	ldr	r0, [pc, #88]	; (800240c <LoopFillZerobss_RAM_D2+0x16>)
  ldr r1, =_edata
 80023b2:	4917      	ldr	r1, [pc, #92]	; (8002410 <LoopFillZerobss_RAM_D2+0x1a>)
  ldr r2, =_sidata
 80023b4:	4a17      	ldr	r2, [pc, #92]	; (8002414 <LoopFillZerobss_RAM_D2+0x1e>)
  movs r3, #0
 80023b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023b8:	e002      	b.n	80023c0 <LoopCopyDataInit>

080023ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023be:	3304      	adds	r3, #4

080023c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023c4:	d3f9      	bcc.n	80023ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023c6:	4a14      	ldr	r2, [pc, #80]	; (8002418 <LoopFillZerobss_RAM_D2+0x22>)
  ldr r4, =_ebss
 80023c8:	4c14      	ldr	r4, [pc, #80]	; (800241c <LoopFillZerobss_RAM_D2+0x26>)
  movs r3, #0
 80023ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023cc:	e001      	b.n	80023d2 <LoopFillZerobss>

080023ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023d0:	3204      	adds	r2, #4

080023d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023d4:	d3fb      	bcc.n	80023ce <FillZerobss>

  /* Copy the data segment initializers from flash to RAM_D2 */
  movs  r1, #0
 80023d6:	2100      	movs	r1, #0
  b  LoopCopyDataInit_RAM_D2
 80023d8:	e003      	b.n	80023e2 <LoopCopyDataInit_RAM_D2>

080023da <CopyDataInit_RAM_D2>:

CopyDataInit_RAM_D2:
  ldr  r3, =_siRAM_D2
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <LoopFillZerobss_RAM_D2+0x2a>)
  ldr  r3, [r3, r1]
 80023dc:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80023de:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80023e0:	3104      	adds	r1, #4

080023e2 <LoopCopyDataInit_RAM_D2>:

LoopCopyDataInit_RAM_D2:
  ldr  r0, =_sRAM_D2
 80023e2:	4810      	ldr	r0, [pc, #64]	; (8002424 <LoopFillZerobss_RAM_D2+0x2e>)
  ldr  r3, =_eRAM_D2
 80023e4:	4b10      	ldr	r3, [pc, #64]	; (8002428 <LoopFillZerobss_RAM_D2+0x32>)
  adds  r2, r0, r1
 80023e6:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80023e8:	429a      	cmp	r2, r3
  bcc  CopyDataInit_RAM_D2
 80023ea:	d3f6      	bcc.n	80023da <CopyDataInit_RAM_D2>
  ldr  r2, =_sbss_RAM_D2
 80023ec:	4a0f      	ldr	r2, [pc, #60]	; (800242c <LoopFillZerobss_RAM_D2+0x36>)
  b  LoopFillZerobss_RAM_D2
 80023ee:	e002      	b.n	80023f6 <LoopFillZerobss_RAM_D2>

080023f0 <FillZerobss_RAM_D2>:


/* Zero fill the bss segment. */
FillZerobss_RAM_D2:
  movs  r3, #0
 80023f0:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80023f2:	f842 3b04 	str.w	r3, [r2], #4

080023f6 <LoopFillZerobss_RAM_D2>:

LoopFillZerobss_RAM_D2:
  ldr  r3, = _ebss_RAM_D2
 80023f6:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <LoopFillZerobss_RAM_D2+0x3a>)
  cmp  r2, r3
 80023f8:	429a      	cmp	r2, r3
  bcc  FillZerobss_RAM_D2
 80023fa:	d3f9      	bcc.n	80023f0 <FillZerobss_RAM_D2>

/* Call static constructors */
    bl __libc_init_array
 80023fc:	f01a f968 	bl	801c6d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002400:	f7fe feba 	bl	8001178 <main>
  bx  lr
 8002404:	4770      	bx	lr
 8002406:	0000      	.short	0x0000
  ldr   sp, =_estack      /* set stack pointer */
 8002408:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 800240c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002410:	2400a364 	.word	0x2400a364
  ldr r2, =_sidata
 8002414:	0802acf8 	.word	0x0802acf8
  ldr r2, =_sbss
 8002418:	2400a364 	.word	0x2400a364
  ldr r4, =_ebss
 800241c:	240147f4 	.word	0x240147f4
  ldr  r3, =_siRAM_D2
 8002420:	0803505c 	.word	0x0803505c
  ldr  r0, =_sRAM_D2
 8002424:	30000000 	.word	0x30000000
  ldr  r3, =_eRAM_D2
 8002428:	30000000 	.word	0x30000000
  ldr  r2, =_sbss_RAM_D2
 800242c:	30000000 	.word	0x30000000
  ldr  r3, = _ebss_RAM_D2
 8002430:	30000000 	.word	0x30000000

08002434 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002434:	e7fe      	b.n	8002434 <ADC3_IRQHandler>
	...

08002438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800243e:	2003      	movs	r0, #3
 8002440:	f000 f98c 	bl	800275c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002444:	f005 ff90 	bl	8008368 <HAL_RCC_GetSysClockFreq>
 8002448:	4602      	mov	r2, r0
 800244a:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <HAL_Init+0x68>)
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	0a1b      	lsrs	r3, r3, #8
 8002450:	f003 030f 	and.w	r3, r3, #15
 8002454:	4913      	ldr	r1, [pc, #76]	; (80024a4 <HAL_Init+0x6c>)
 8002456:	5ccb      	ldrb	r3, [r1, r3]
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	fa22 f303 	lsr.w	r3, r2, r3
 8002460:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002462:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <HAL_Init+0x68>)
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	4a0e      	ldr	r2, [pc, #56]	; (80024a4 <HAL_Init+0x6c>)
 800246c:	5cd3      	ldrb	r3, [r2, r3]
 800246e:	f003 031f 	and.w	r3, r3, #31
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	fa22 f303 	lsr.w	r3, r2, r3
 8002478:	4a0b      	ldr	r2, [pc, #44]	; (80024a8 <HAL_Init+0x70>)
 800247a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800247c:	4a0b      	ldr	r2, [pc, #44]	; (80024ac <HAL_Init+0x74>)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002482:	2000      	movs	r0, #0
 8002484:	f000 f814 	bl	80024b0 <HAL_InitTick>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e002      	b.n	8002498 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002492:	f7ff fa13 	bl	80018bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	58024400 	.word	0x58024400
 80024a4:	08021aa0 	.word	0x08021aa0
 80024a8:	24000004 	.word	0x24000004
 80024ac:	24000000 	.word	0x24000000

080024b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80024b8:	4b15      	ldr	r3, [pc, #84]	; (8002510 <HAL_InitTick+0x60>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e021      	b.n	8002508 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80024c4:	4b13      	ldr	r3, [pc, #76]	; (8002514 <HAL_InitTick+0x64>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <HAL_InitTick+0x60>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	4619      	mov	r1, r3
 80024ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 f971 	bl	80027c2 <HAL_SYSTICK_Config>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e00e      	b.n	8002508 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b0f      	cmp	r3, #15
 80024ee:	d80a      	bhi.n	8002506 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024f0:	2200      	movs	r2, #0
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	f04f 30ff 	mov.w	r0, #4294967295
 80024f8:	f000 f93b 	bl	8002772 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024fc:	4a06      	ldr	r2, [pc, #24]	; (8002518 <HAL_InitTick+0x68>)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	e000      	b.n	8002508 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
}
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	24000014 	.word	0x24000014
 8002514:	24000000 	.word	0x24000000
 8002518:	24000010 	.word	0x24000010

0800251c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <HAL_IncTick+0x20>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	461a      	mov	r2, r3
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_IncTick+0x24>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4413      	add	r3, r2
 800252c:	4a04      	ldr	r2, [pc, #16]	; (8002540 <HAL_IncTick+0x24>)
 800252e:	6013      	str	r3, [r2, #0]
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	24000014 	.word	0x24000014
 8002540:	2400b398 	.word	0x2400b398

08002544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return uwTick;
 8002548:	4b03      	ldr	r3, [pc, #12]	; (8002558 <HAL_GetTick+0x14>)
 800254a:	681b      	ldr	r3, [r3, #0]
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	2400b398 	.word	0x2400b398

0800255c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002564:	f7ff ffee 	bl	8002544 <HAL_GetTick>
 8002568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002574:	d005      	beq.n	8002582 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002576:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <HAL_Delay+0x44>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	461a      	mov	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4413      	add	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002582:	bf00      	nop
 8002584:	f7ff ffde 	bl	8002544 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	429a      	cmp	r2, r3
 8002592:	d8f7      	bhi.n	8002584 <HAL_Delay+0x28>
  {
  }
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	24000014 	.word	0x24000014

080025a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <HAL_GetREVID+0x14>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	0c1b      	lsrs	r3, r3, #16
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	5c001000 	.word	0x5c001000

080025bc <__NVIC_SetPriorityGrouping>:
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <__NVIC_SetPriorityGrouping+0x40>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025d8:	4013      	ands	r3, r2
 80025da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80025e4:	4b06      	ldr	r3, [pc, #24]	; (8002600 <__NVIC_SetPriorityGrouping+0x44>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ea:	4a04      	ldr	r2, [pc, #16]	; (80025fc <__NVIC_SetPriorityGrouping+0x40>)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	60d3      	str	r3, [r2, #12]
}
 80025f0:	bf00      	nop
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	e000ed00 	.word	0xe000ed00
 8002600:	05fa0000 	.word	0x05fa0000

08002604 <__NVIC_GetPriorityGrouping>:
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002608:	4b04      	ldr	r3, [pc, #16]	; (800261c <__NVIC_GetPriorityGrouping+0x18>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	0a1b      	lsrs	r3, r3, #8
 800260e:	f003 0307 	and.w	r3, r3, #7
}
 8002612:	4618      	mov	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <__NVIC_EnableIRQ>:
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800262a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800262e:	2b00      	cmp	r3, #0
 8002630:	db0b      	blt.n	800264a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	f003 021f 	and.w	r2, r3, #31
 8002638:	4907      	ldr	r1, [pc, #28]	; (8002658 <__NVIC_EnableIRQ+0x38>)
 800263a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	2001      	movs	r0, #1
 8002642:	fa00 f202 	lsl.w	r2, r0, r2
 8002646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	e000e100 	.word	0xe000e100

0800265c <__NVIC_SetPriority>:
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	6039      	str	r1, [r7, #0]
 8002666:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002668:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800266c:	2b00      	cmp	r3, #0
 800266e:	db0a      	blt.n	8002686 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	b2da      	uxtb	r2, r3
 8002674:	490c      	ldr	r1, [pc, #48]	; (80026a8 <__NVIC_SetPriority+0x4c>)
 8002676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800267a:	0112      	lsls	r2, r2, #4
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	440b      	add	r3, r1
 8002680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002684:	e00a      	b.n	800269c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	b2da      	uxtb	r2, r3
 800268a:	4908      	ldr	r1, [pc, #32]	; (80026ac <__NVIC_SetPriority+0x50>)
 800268c:	88fb      	ldrh	r3, [r7, #6]
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	3b04      	subs	r3, #4
 8002694:	0112      	lsls	r2, r2, #4
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	440b      	add	r3, r1
 800269a:	761a      	strb	r2, [r3, #24]
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000e100 	.word	0xe000e100
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <NVIC_EncodePriority>:
{
 80026b0:	b480      	push	{r7}
 80026b2:	b089      	sub	sp, #36	; 0x24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f1c3 0307 	rsb	r3, r3, #7
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	bf28      	it	cs
 80026ce:	2304      	movcs	r3, #4
 80026d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3304      	adds	r3, #4
 80026d6:	2b06      	cmp	r3, #6
 80026d8:	d902      	bls.n	80026e0 <NVIC_EncodePriority+0x30>
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3b03      	subs	r3, #3
 80026de:	e000      	b.n	80026e2 <NVIC_EncodePriority+0x32>
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e4:	f04f 32ff 	mov.w	r2, #4294967295
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43da      	mvns	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	401a      	ands	r2, r3
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026f8:	f04f 31ff 	mov.w	r1, #4294967295
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002702:	43d9      	mvns	r1, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002708:	4313      	orrs	r3, r2
}
 800270a:	4618      	mov	r0, r3
 800270c:	3724      	adds	r7, #36	; 0x24
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3b01      	subs	r3, #1
 8002724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002728:	d301      	bcc.n	800272e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800272a:	2301      	movs	r3, #1
 800272c:	e00f      	b.n	800274e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800272e:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <SysTick_Config+0x40>)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3b01      	subs	r3, #1
 8002734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002736:	210f      	movs	r1, #15
 8002738:	f04f 30ff 	mov.w	r0, #4294967295
 800273c:	f7ff ff8e 	bl	800265c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <SysTick_Config+0x40>)
 8002742:	2200      	movs	r2, #0
 8002744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002746:	4b04      	ldr	r3, [pc, #16]	; (8002758 <SysTick_Config+0x40>)
 8002748:	2207      	movs	r2, #7
 800274a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	e000e010 	.word	0xe000e010

0800275c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7ff ff29 	bl	80025bc <__NVIC_SetPriorityGrouping>
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b086      	sub	sp, #24
 8002776:	af00      	add	r7, sp, #0
 8002778:	4603      	mov	r3, r0
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	607a      	str	r2, [r7, #4]
 800277e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002780:	f7ff ff40 	bl	8002604 <__NVIC_GetPriorityGrouping>
 8002784:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	68b9      	ldr	r1, [r7, #8]
 800278a:	6978      	ldr	r0, [r7, #20]
 800278c:	f7ff ff90 	bl	80026b0 <NVIC_EncodePriority>
 8002790:	4602      	mov	r2, r0
 8002792:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002796:	4611      	mov	r1, r2
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff ff5f 	bl	800265c <__NVIC_SetPriority>
}
 800279e:	bf00      	nop
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b082      	sub	sp, #8
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	4603      	mov	r3, r0
 80027ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff ff33 	bl	8002620 <__NVIC_EnableIRQ>
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff ffa4 	bl	8002718 <SysTick_Config>
 80027d0:	4603      	mov	r3, r0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80027e0:	f3bf 8f5f 	dmb	sy
}
 80027e4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80027e6:	4b07      	ldr	r3, [pc, #28]	; (8002804 <HAL_MPU_Disable+0x28>)
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	4a06      	ldr	r2, [pc, #24]	; (8002804 <HAL_MPU_Disable+0x28>)
 80027ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80027f2:	4b05      	ldr	r3, [pc, #20]	; (8002808 <HAL_MPU_Disable+0x2c>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	605a      	str	r2, [r3, #4]
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	e000ed00 	.word	0xe000ed00
 8002808:	e000ed90 	.word	0xe000ed90

0800280c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002814:	4a0b      	ldr	r2, [pc, #44]	; (8002844 <HAL_MPU_Enable+0x38>)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800281e:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <HAL_MPU_Enable+0x3c>)
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	4a09      	ldr	r2, [pc, #36]	; (8002848 <HAL_MPU_Enable+0x3c>)
 8002824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002828:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800282a:	f3bf 8f4f 	dsb	sy
}
 800282e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002830:	f3bf 8f6f 	isb	sy
}
 8002834:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	e000ed90 	.word	0xe000ed90
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	785a      	ldrb	r2, [r3, #1]
 8002858:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <HAL_MPU_ConfigRegion+0x84>)
 800285a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d029      	beq.n	80028b8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002864:	4a1a      	ldr	r2, [pc, #104]	; (80028d0 <HAL_MPU_ConfigRegion+0x84>)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	7b1b      	ldrb	r3, [r3, #12]
 8002870:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	7adb      	ldrb	r3, [r3, #11]
 8002876:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002878:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	7a9b      	ldrb	r3, [r3, #10]
 800287e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002880:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	7b5b      	ldrb	r3, [r3, #13]
 8002886:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002888:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	7b9b      	ldrb	r3, [r3, #14]
 800288e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002890:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	7bdb      	ldrb	r3, [r3, #15]
 8002896:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002898:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	7a5b      	ldrb	r3, [r3, #9]
 800289e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80028a0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	7a1b      	ldrb	r3, [r3, #8]
 80028a6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80028a8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	7812      	ldrb	r2, [r2, #0]
 80028ae:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80028b0:	4a07      	ldr	r2, [pc, #28]	; (80028d0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80028b2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80028b4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80028b6:	e005      	b.n	80028c4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80028b8:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <HAL_MPU_ConfigRegion+0x84>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80028be:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <HAL_MPU_ConfigRegion+0x84>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	611a      	str	r2, [r3, #16]
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	e000ed90 	.word	0xe000ed90

080028d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80028dc:	f7ff fe32 	bl	8002544 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e316      	b.n	8002f1a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a66      	ldr	r2, [pc, #408]	; (8002a8c <HAL_DMA_Init+0x1b8>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d04a      	beq.n	800298c <HAL_DMA_Init+0xb8>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a65      	ldr	r2, [pc, #404]	; (8002a90 <HAL_DMA_Init+0x1bc>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d045      	beq.n	800298c <HAL_DMA_Init+0xb8>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a63      	ldr	r2, [pc, #396]	; (8002a94 <HAL_DMA_Init+0x1c0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d040      	beq.n	800298c <HAL_DMA_Init+0xb8>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a62      	ldr	r2, [pc, #392]	; (8002a98 <HAL_DMA_Init+0x1c4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d03b      	beq.n	800298c <HAL_DMA_Init+0xb8>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a60      	ldr	r2, [pc, #384]	; (8002a9c <HAL_DMA_Init+0x1c8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d036      	beq.n	800298c <HAL_DMA_Init+0xb8>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a5f      	ldr	r2, [pc, #380]	; (8002aa0 <HAL_DMA_Init+0x1cc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d031      	beq.n	800298c <HAL_DMA_Init+0xb8>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a5d      	ldr	r2, [pc, #372]	; (8002aa4 <HAL_DMA_Init+0x1d0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d02c      	beq.n	800298c <HAL_DMA_Init+0xb8>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a5c      	ldr	r2, [pc, #368]	; (8002aa8 <HAL_DMA_Init+0x1d4>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d027      	beq.n	800298c <HAL_DMA_Init+0xb8>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a5a      	ldr	r2, [pc, #360]	; (8002aac <HAL_DMA_Init+0x1d8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d022      	beq.n	800298c <HAL_DMA_Init+0xb8>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a59      	ldr	r2, [pc, #356]	; (8002ab0 <HAL_DMA_Init+0x1dc>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d01d      	beq.n	800298c <HAL_DMA_Init+0xb8>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a57      	ldr	r2, [pc, #348]	; (8002ab4 <HAL_DMA_Init+0x1e0>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d018      	beq.n	800298c <HAL_DMA_Init+0xb8>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a56      	ldr	r2, [pc, #344]	; (8002ab8 <HAL_DMA_Init+0x1e4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d013      	beq.n	800298c <HAL_DMA_Init+0xb8>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a54      	ldr	r2, [pc, #336]	; (8002abc <HAL_DMA_Init+0x1e8>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d00e      	beq.n	800298c <HAL_DMA_Init+0xb8>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a53      	ldr	r2, [pc, #332]	; (8002ac0 <HAL_DMA_Init+0x1ec>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d009      	beq.n	800298c <HAL_DMA_Init+0xb8>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a51      	ldr	r2, [pc, #324]	; (8002ac4 <HAL_DMA_Init+0x1f0>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d004      	beq.n	800298c <HAL_DMA_Init+0xb8>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a50      	ldr	r2, [pc, #320]	; (8002ac8 <HAL_DMA_Init+0x1f4>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d101      	bne.n	8002990 <HAL_DMA_Init+0xbc>
 800298c:	2301      	movs	r3, #1
 800298e:	e000      	b.n	8002992 <HAL_DMA_Init+0xbe>
 8002990:	2300      	movs	r3, #0
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 813b 	beq.w	8002c0e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a37      	ldr	r2, [pc, #220]	; (8002a8c <HAL_DMA_Init+0x1b8>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d04a      	beq.n	8002a48 <HAL_DMA_Init+0x174>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a36      	ldr	r2, [pc, #216]	; (8002a90 <HAL_DMA_Init+0x1bc>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d045      	beq.n	8002a48 <HAL_DMA_Init+0x174>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a34      	ldr	r2, [pc, #208]	; (8002a94 <HAL_DMA_Init+0x1c0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d040      	beq.n	8002a48 <HAL_DMA_Init+0x174>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a33      	ldr	r2, [pc, #204]	; (8002a98 <HAL_DMA_Init+0x1c4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d03b      	beq.n	8002a48 <HAL_DMA_Init+0x174>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a31      	ldr	r2, [pc, #196]	; (8002a9c <HAL_DMA_Init+0x1c8>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d036      	beq.n	8002a48 <HAL_DMA_Init+0x174>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a30      	ldr	r2, [pc, #192]	; (8002aa0 <HAL_DMA_Init+0x1cc>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d031      	beq.n	8002a48 <HAL_DMA_Init+0x174>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a2e      	ldr	r2, [pc, #184]	; (8002aa4 <HAL_DMA_Init+0x1d0>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d02c      	beq.n	8002a48 <HAL_DMA_Init+0x174>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a2d      	ldr	r2, [pc, #180]	; (8002aa8 <HAL_DMA_Init+0x1d4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d027      	beq.n	8002a48 <HAL_DMA_Init+0x174>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a2b      	ldr	r2, [pc, #172]	; (8002aac <HAL_DMA_Init+0x1d8>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d022      	beq.n	8002a48 <HAL_DMA_Init+0x174>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a2a      	ldr	r2, [pc, #168]	; (8002ab0 <HAL_DMA_Init+0x1dc>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d01d      	beq.n	8002a48 <HAL_DMA_Init+0x174>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a28      	ldr	r2, [pc, #160]	; (8002ab4 <HAL_DMA_Init+0x1e0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d018      	beq.n	8002a48 <HAL_DMA_Init+0x174>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a27      	ldr	r2, [pc, #156]	; (8002ab8 <HAL_DMA_Init+0x1e4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d013      	beq.n	8002a48 <HAL_DMA_Init+0x174>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a25      	ldr	r2, [pc, #148]	; (8002abc <HAL_DMA_Init+0x1e8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d00e      	beq.n	8002a48 <HAL_DMA_Init+0x174>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a24      	ldr	r2, [pc, #144]	; (8002ac0 <HAL_DMA_Init+0x1ec>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d009      	beq.n	8002a48 <HAL_DMA_Init+0x174>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a22      	ldr	r2, [pc, #136]	; (8002ac4 <HAL_DMA_Init+0x1f0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d004      	beq.n	8002a48 <HAL_DMA_Init+0x174>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a21      	ldr	r2, [pc, #132]	; (8002ac8 <HAL_DMA_Init+0x1f4>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d108      	bne.n	8002a5a <HAL_DMA_Init+0x186>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0201 	bic.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	e007      	b.n	8002a6a <HAL_DMA_Init+0x196>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0201 	bic.w	r2, r2, #1
 8002a68:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a6a:	e02f      	b.n	8002acc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a6c:	f7ff fd6a 	bl	8002544 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b05      	cmp	r3, #5
 8002a78:	d928      	bls.n	8002acc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2203      	movs	r2, #3
 8002a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e246      	b.n	8002f1a <HAL_DMA_Init+0x646>
 8002a8c:	40020010 	.word	0x40020010
 8002a90:	40020028 	.word	0x40020028
 8002a94:	40020040 	.word	0x40020040
 8002a98:	40020058 	.word	0x40020058
 8002a9c:	40020070 	.word	0x40020070
 8002aa0:	40020088 	.word	0x40020088
 8002aa4:	400200a0 	.word	0x400200a0
 8002aa8:	400200b8 	.word	0x400200b8
 8002aac:	40020410 	.word	0x40020410
 8002ab0:	40020428 	.word	0x40020428
 8002ab4:	40020440 	.word	0x40020440
 8002ab8:	40020458 	.word	0x40020458
 8002abc:	40020470 	.word	0x40020470
 8002ac0:	40020488 	.word	0x40020488
 8002ac4:	400204a0 	.word	0x400204a0
 8002ac8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1c8      	bne.n	8002a6c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4b83      	ldr	r3, [pc, #524]	; (8002cf4 <HAL_DMA_Init+0x420>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002af2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002afe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b0a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d107      	bne.n	8002b30 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002b30:	4b71      	ldr	r3, [pc, #452]	; (8002cf8 <HAL_DMA_Init+0x424>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	4b71      	ldr	r3, [pc, #452]	; (8002cfc <HAL_DMA_Init+0x428>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b3c:	d328      	bcc.n	8002b90 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b28      	cmp	r3, #40	; 0x28
 8002b44:	d903      	bls.n	8002b4e <HAL_DMA_Init+0x27a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b2e      	cmp	r3, #46	; 0x2e
 8002b4c:	d917      	bls.n	8002b7e <HAL_DMA_Init+0x2aa>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b3e      	cmp	r3, #62	; 0x3e
 8002b54:	d903      	bls.n	8002b5e <HAL_DMA_Init+0x28a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b42      	cmp	r3, #66	; 0x42
 8002b5c:	d90f      	bls.n	8002b7e <HAL_DMA_Init+0x2aa>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b46      	cmp	r3, #70	; 0x46
 8002b64:	d903      	bls.n	8002b6e <HAL_DMA_Init+0x29a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b48      	cmp	r3, #72	; 0x48
 8002b6c:	d907      	bls.n	8002b7e <HAL_DMA_Init+0x2aa>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b4e      	cmp	r3, #78	; 0x4e
 8002b74:	d905      	bls.n	8002b82 <HAL_DMA_Init+0x2ae>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b52      	cmp	r3, #82	; 0x52
 8002b7c:	d801      	bhi.n	8002b82 <HAL_DMA_Init+0x2ae>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <HAL_DMA_Init+0x2b0>
 8002b82:	2300      	movs	r3, #0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b8e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f023 0307 	bic.w	r3, r3, #7
 8002ba6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d117      	bne.n	8002bea <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00e      	beq.n	8002bea <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f002 fb31 	bl	8005234 <DMA_CheckFifoParam>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d008      	beq.n	8002bea <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2240      	movs	r2, #64	; 0x40
 8002bdc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e197      	b.n	8002f1a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f002 fa6c 	bl	80050d0 <DMA_CalcBaseAndBitshift>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c00:	f003 031f 	and.w	r3, r3, #31
 8002c04:	223f      	movs	r2, #63	; 0x3f
 8002c06:	409a      	lsls	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	e0cd      	b.n	8002daa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a3b      	ldr	r2, [pc, #236]	; (8002d00 <HAL_DMA_Init+0x42c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d022      	beq.n	8002c5e <HAL_DMA_Init+0x38a>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a39      	ldr	r2, [pc, #228]	; (8002d04 <HAL_DMA_Init+0x430>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d01d      	beq.n	8002c5e <HAL_DMA_Init+0x38a>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a38      	ldr	r2, [pc, #224]	; (8002d08 <HAL_DMA_Init+0x434>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d018      	beq.n	8002c5e <HAL_DMA_Init+0x38a>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a36      	ldr	r2, [pc, #216]	; (8002d0c <HAL_DMA_Init+0x438>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d013      	beq.n	8002c5e <HAL_DMA_Init+0x38a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a35      	ldr	r2, [pc, #212]	; (8002d10 <HAL_DMA_Init+0x43c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d00e      	beq.n	8002c5e <HAL_DMA_Init+0x38a>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a33      	ldr	r2, [pc, #204]	; (8002d14 <HAL_DMA_Init+0x440>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d009      	beq.n	8002c5e <HAL_DMA_Init+0x38a>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a32      	ldr	r2, [pc, #200]	; (8002d18 <HAL_DMA_Init+0x444>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d004      	beq.n	8002c5e <HAL_DMA_Init+0x38a>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a30      	ldr	r2, [pc, #192]	; (8002d1c <HAL_DMA_Init+0x448>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d101      	bne.n	8002c62 <HAL_DMA_Init+0x38e>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <HAL_DMA_Init+0x390>
 8002c62:	2300      	movs	r3, #0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 8097 	beq.w	8002d98 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a24      	ldr	r2, [pc, #144]	; (8002d00 <HAL_DMA_Init+0x42c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d021      	beq.n	8002cb8 <HAL_DMA_Init+0x3e4>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a22      	ldr	r2, [pc, #136]	; (8002d04 <HAL_DMA_Init+0x430>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d01c      	beq.n	8002cb8 <HAL_DMA_Init+0x3e4>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a21      	ldr	r2, [pc, #132]	; (8002d08 <HAL_DMA_Init+0x434>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d017      	beq.n	8002cb8 <HAL_DMA_Init+0x3e4>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a1f      	ldr	r2, [pc, #124]	; (8002d0c <HAL_DMA_Init+0x438>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d012      	beq.n	8002cb8 <HAL_DMA_Init+0x3e4>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a1e      	ldr	r2, [pc, #120]	; (8002d10 <HAL_DMA_Init+0x43c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d00d      	beq.n	8002cb8 <HAL_DMA_Init+0x3e4>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a1c      	ldr	r2, [pc, #112]	; (8002d14 <HAL_DMA_Init+0x440>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d008      	beq.n	8002cb8 <HAL_DMA_Init+0x3e4>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a1b      	ldr	r2, [pc, #108]	; (8002d18 <HAL_DMA_Init+0x444>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d003      	beq.n	8002cb8 <HAL_DMA_Init+0x3e4>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a19      	ldr	r2, [pc, #100]	; (8002d1c <HAL_DMA_Init+0x448>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_DMA_Init+0x44c>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b40      	cmp	r3, #64	; 0x40
 8002ce0:	d020      	beq.n	8002d24 <HAL_DMA_Init+0x450>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b80      	cmp	r3, #128	; 0x80
 8002ce8:	d102      	bne.n	8002cf0 <HAL_DMA_Init+0x41c>
 8002cea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cee:	e01a      	b.n	8002d26 <HAL_DMA_Init+0x452>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	e018      	b.n	8002d26 <HAL_DMA_Init+0x452>
 8002cf4:	fe10803f 	.word	0xfe10803f
 8002cf8:	5c001000 	.word	0x5c001000
 8002cfc:	ffff0000 	.word	0xffff0000
 8002d00:	58025408 	.word	0x58025408
 8002d04:	5802541c 	.word	0x5802541c
 8002d08:	58025430 	.word	0x58025430
 8002d0c:	58025444 	.word	0x58025444
 8002d10:	58025458 	.word	0x58025458
 8002d14:	5802546c 	.word	0x5802546c
 8002d18:	58025480 	.word	0x58025480
 8002d1c:	58025494 	.word	0x58025494
 8002d20:	fffe000f 	.word	0xfffe000f
 8002d24:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	68d2      	ldr	r2, [r2, #12]
 8002d2a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002d44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002d4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002d54:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4b6e      	ldr	r3, [pc, #440]	; (8002f24 <HAL_DMA_Init+0x650>)
 8002d6c:	4413      	add	r3, r2
 8002d6e:	4a6e      	ldr	r2, [pc, #440]	; (8002f28 <HAL_DMA_Init+0x654>)
 8002d70:	fba2 2303 	umull	r2, r3, r2, r3
 8002d74:	091b      	lsrs	r3, r3, #4
 8002d76:	009a      	lsls	r2, r3, #2
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f002 f9a7 	bl	80050d0 <DMA_CalcBaseAndBitshift>
 8002d82:	4603      	mov	r3, r0
 8002d84:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8a:	f003 031f 	and.w	r3, r3, #31
 8002d8e:	2201      	movs	r2, #1
 8002d90:	409a      	lsls	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	e008      	b.n	8002daa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2240      	movs	r2, #64	; 0x40
 8002d9c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2203      	movs	r2, #3
 8002da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e0b7      	b.n	8002f1a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a5f      	ldr	r2, [pc, #380]	; (8002f2c <HAL_DMA_Init+0x658>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d072      	beq.n	8002e9a <HAL_DMA_Init+0x5c6>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a5d      	ldr	r2, [pc, #372]	; (8002f30 <HAL_DMA_Init+0x65c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d06d      	beq.n	8002e9a <HAL_DMA_Init+0x5c6>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a5c      	ldr	r2, [pc, #368]	; (8002f34 <HAL_DMA_Init+0x660>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d068      	beq.n	8002e9a <HAL_DMA_Init+0x5c6>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a5a      	ldr	r2, [pc, #360]	; (8002f38 <HAL_DMA_Init+0x664>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d063      	beq.n	8002e9a <HAL_DMA_Init+0x5c6>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a59      	ldr	r2, [pc, #356]	; (8002f3c <HAL_DMA_Init+0x668>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d05e      	beq.n	8002e9a <HAL_DMA_Init+0x5c6>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a57      	ldr	r2, [pc, #348]	; (8002f40 <HAL_DMA_Init+0x66c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d059      	beq.n	8002e9a <HAL_DMA_Init+0x5c6>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a56      	ldr	r2, [pc, #344]	; (8002f44 <HAL_DMA_Init+0x670>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d054      	beq.n	8002e9a <HAL_DMA_Init+0x5c6>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a54      	ldr	r2, [pc, #336]	; (8002f48 <HAL_DMA_Init+0x674>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d04f      	beq.n	8002e9a <HAL_DMA_Init+0x5c6>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a53      	ldr	r2, [pc, #332]	; (8002f4c <HAL_DMA_Init+0x678>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d04a      	beq.n	8002e9a <HAL_DMA_Init+0x5c6>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a51      	ldr	r2, [pc, #324]	; (8002f50 <HAL_DMA_Init+0x67c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d045      	beq.n	8002e9a <HAL_DMA_Init+0x5c6>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a50      	ldr	r2, [pc, #320]	; (8002f54 <HAL_DMA_Init+0x680>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d040      	beq.n	8002e9a <HAL_DMA_Init+0x5c6>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a4e      	ldr	r2, [pc, #312]	; (8002f58 <HAL_DMA_Init+0x684>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d03b      	beq.n	8002e9a <HAL_DMA_Init+0x5c6>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a4d      	ldr	r2, [pc, #308]	; (8002f5c <HAL_DMA_Init+0x688>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d036      	beq.n	8002e9a <HAL_DMA_Init+0x5c6>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a4b      	ldr	r2, [pc, #300]	; (8002f60 <HAL_DMA_Init+0x68c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d031      	beq.n	8002e9a <HAL_DMA_Init+0x5c6>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a4a      	ldr	r2, [pc, #296]	; (8002f64 <HAL_DMA_Init+0x690>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d02c      	beq.n	8002e9a <HAL_DMA_Init+0x5c6>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a48      	ldr	r2, [pc, #288]	; (8002f68 <HAL_DMA_Init+0x694>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d027      	beq.n	8002e9a <HAL_DMA_Init+0x5c6>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a47      	ldr	r2, [pc, #284]	; (8002f6c <HAL_DMA_Init+0x698>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d022      	beq.n	8002e9a <HAL_DMA_Init+0x5c6>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a45      	ldr	r2, [pc, #276]	; (8002f70 <HAL_DMA_Init+0x69c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d01d      	beq.n	8002e9a <HAL_DMA_Init+0x5c6>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a44      	ldr	r2, [pc, #272]	; (8002f74 <HAL_DMA_Init+0x6a0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d018      	beq.n	8002e9a <HAL_DMA_Init+0x5c6>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a42      	ldr	r2, [pc, #264]	; (8002f78 <HAL_DMA_Init+0x6a4>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d013      	beq.n	8002e9a <HAL_DMA_Init+0x5c6>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a41      	ldr	r2, [pc, #260]	; (8002f7c <HAL_DMA_Init+0x6a8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d00e      	beq.n	8002e9a <HAL_DMA_Init+0x5c6>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a3f      	ldr	r2, [pc, #252]	; (8002f80 <HAL_DMA_Init+0x6ac>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d009      	beq.n	8002e9a <HAL_DMA_Init+0x5c6>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a3e      	ldr	r2, [pc, #248]	; (8002f84 <HAL_DMA_Init+0x6b0>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d004      	beq.n	8002e9a <HAL_DMA_Init+0x5c6>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a3c      	ldr	r2, [pc, #240]	; (8002f88 <HAL_DMA_Init+0x6b4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d101      	bne.n	8002e9e <HAL_DMA_Init+0x5ca>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <HAL_DMA_Init+0x5cc>
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d032      	beq.n	8002f0a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f002 fa41 	bl	800532c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	2b80      	cmp	r3, #128	; 0x80
 8002eb0:	d102      	bne.n	8002eb8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec0:	b2d2      	uxtb	r2, r2
 8002ec2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ecc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d010      	beq.n	8002ef8 <HAL_DMA_Init+0x624>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d80c      	bhi.n	8002ef8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f002 fabe 	bl	8005460 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002ef4:	605a      	str	r2, [r3, #4]
 8002ef6:	e008      	b.n	8002f0a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	a7fdabf8 	.word	0xa7fdabf8
 8002f28:	cccccccd 	.word	0xcccccccd
 8002f2c:	40020010 	.word	0x40020010
 8002f30:	40020028 	.word	0x40020028
 8002f34:	40020040 	.word	0x40020040
 8002f38:	40020058 	.word	0x40020058
 8002f3c:	40020070 	.word	0x40020070
 8002f40:	40020088 	.word	0x40020088
 8002f44:	400200a0 	.word	0x400200a0
 8002f48:	400200b8 	.word	0x400200b8
 8002f4c:	40020410 	.word	0x40020410
 8002f50:	40020428 	.word	0x40020428
 8002f54:	40020440 	.word	0x40020440
 8002f58:	40020458 	.word	0x40020458
 8002f5c:	40020470 	.word	0x40020470
 8002f60:	40020488 	.word	0x40020488
 8002f64:	400204a0 	.word	0x400204a0
 8002f68:	400204b8 	.word	0x400204b8
 8002f6c:	58025408 	.word	0x58025408
 8002f70:	5802541c 	.word	0x5802541c
 8002f74:	58025430 	.word	0x58025430
 8002f78:	58025444 	.word	0x58025444
 8002f7c:	58025458 	.word	0x58025458
 8002f80:	5802546c 	.word	0x5802546c
 8002f84:	58025480 	.word	0x58025480
 8002f88:	58025494 	.word	0x58025494

08002f8c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
 8002f98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e226      	b.n	80033f6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_DMA_Start_IT+0x2a>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e21f      	b.n	80033f6 <HAL_DMA_Start_IT+0x46a>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	f040 820a 	bne.w	80033e0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a68      	ldr	r2, [pc, #416]	; (8003180 <HAL_DMA_Start_IT+0x1f4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d04a      	beq.n	800307a <HAL_DMA_Start_IT+0xee>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a66      	ldr	r2, [pc, #408]	; (8003184 <HAL_DMA_Start_IT+0x1f8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d045      	beq.n	800307a <HAL_DMA_Start_IT+0xee>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a65      	ldr	r2, [pc, #404]	; (8003188 <HAL_DMA_Start_IT+0x1fc>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d040      	beq.n	800307a <HAL_DMA_Start_IT+0xee>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a63      	ldr	r2, [pc, #396]	; (800318c <HAL_DMA_Start_IT+0x200>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d03b      	beq.n	800307a <HAL_DMA_Start_IT+0xee>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a62      	ldr	r2, [pc, #392]	; (8003190 <HAL_DMA_Start_IT+0x204>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d036      	beq.n	800307a <HAL_DMA_Start_IT+0xee>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a60      	ldr	r2, [pc, #384]	; (8003194 <HAL_DMA_Start_IT+0x208>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d031      	beq.n	800307a <HAL_DMA_Start_IT+0xee>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a5f      	ldr	r2, [pc, #380]	; (8003198 <HAL_DMA_Start_IT+0x20c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d02c      	beq.n	800307a <HAL_DMA_Start_IT+0xee>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a5d      	ldr	r2, [pc, #372]	; (800319c <HAL_DMA_Start_IT+0x210>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d027      	beq.n	800307a <HAL_DMA_Start_IT+0xee>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a5c      	ldr	r2, [pc, #368]	; (80031a0 <HAL_DMA_Start_IT+0x214>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d022      	beq.n	800307a <HAL_DMA_Start_IT+0xee>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a5a      	ldr	r2, [pc, #360]	; (80031a4 <HAL_DMA_Start_IT+0x218>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d01d      	beq.n	800307a <HAL_DMA_Start_IT+0xee>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a59      	ldr	r2, [pc, #356]	; (80031a8 <HAL_DMA_Start_IT+0x21c>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d018      	beq.n	800307a <HAL_DMA_Start_IT+0xee>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a57      	ldr	r2, [pc, #348]	; (80031ac <HAL_DMA_Start_IT+0x220>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d013      	beq.n	800307a <HAL_DMA_Start_IT+0xee>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a56      	ldr	r2, [pc, #344]	; (80031b0 <HAL_DMA_Start_IT+0x224>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d00e      	beq.n	800307a <HAL_DMA_Start_IT+0xee>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a54      	ldr	r2, [pc, #336]	; (80031b4 <HAL_DMA_Start_IT+0x228>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d009      	beq.n	800307a <HAL_DMA_Start_IT+0xee>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a53      	ldr	r2, [pc, #332]	; (80031b8 <HAL_DMA_Start_IT+0x22c>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d004      	beq.n	800307a <HAL_DMA_Start_IT+0xee>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a51      	ldr	r2, [pc, #324]	; (80031bc <HAL_DMA_Start_IT+0x230>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d108      	bne.n	800308c <HAL_DMA_Start_IT+0x100>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0201 	bic.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	e007      	b.n	800309c <HAL_DMA_Start_IT+0x110>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0201 	bic.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	68b9      	ldr	r1, [r7, #8]
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f001 fe68 	bl	8004d78 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a34      	ldr	r2, [pc, #208]	; (8003180 <HAL_DMA_Start_IT+0x1f4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d04a      	beq.n	8003148 <HAL_DMA_Start_IT+0x1bc>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a33      	ldr	r2, [pc, #204]	; (8003184 <HAL_DMA_Start_IT+0x1f8>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d045      	beq.n	8003148 <HAL_DMA_Start_IT+0x1bc>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a31      	ldr	r2, [pc, #196]	; (8003188 <HAL_DMA_Start_IT+0x1fc>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d040      	beq.n	8003148 <HAL_DMA_Start_IT+0x1bc>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a30      	ldr	r2, [pc, #192]	; (800318c <HAL_DMA_Start_IT+0x200>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d03b      	beq.n	8003148 <HAL_DMA_Start_IT+0x1bc>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a2e      	ldr	r2, [pc, #184]	; (8003190 <HAL_DMA_Start_IT+0x204>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d036      	beq.n	8003148 <HAL_DMA_Start_IT+0x1bc>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a2d      	ldr	r2, [pc, #180]	; (8003194 <HAL_DMA_Start_IT+0x208>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d031      	beq.n	8003148 <HAL_DMA_Start_IT+0x1bc>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a2b      	ldr	r2, [pc, #172]	; (8003198 <HAL_DMA_Start_IT+0x20c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d02c      	beq.n	8003148 <HAL_DMA_Start_IT+0x1bc>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a2a      	ldr	r2, [pc, #168]	; (800319c <HAL_DMA_Start_IT+0x210>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d027      	beq.n	8003148 <HAL_DMA_Start_IT+0x1bc>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a28      	ldr	r2, [pc, #160]	; (80031a0 <HAL_DMA_Start_IT+0x214>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d022      	beq.n	8003148 <HAL_DMA_Start_IT+0x1bc>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a27      	ldr	r2, [pc, #156]	; (80031a4 <HAL_DMA_Start_IT+0x218>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d01d      	beq.n	8003148 <HAL_DMA_Start_IT+0x1bc>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a25      	ldr	r2, [pc, #148]	; (80031a8 <HAL_DMA_Start_IT+0x21c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d018      	beq.n	8003148 <HAL_DMA_Start_IT+0x1bc>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a24      	ldr	r2, [pc, #144]	; (80031ac <HAL_DMA_Start_IT+0x220>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d013      	beq.n	8003148 <HAL_DMA_Start_IT+0x1bc>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a22      	ldr	r2, [pc, #136]	; (80031b0 <HAL_DMA_Start_IT+0x224>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00e      	beq.n	8003148 <HAL_DMA_Start_IT+0x1bc>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a21      	ldr	r2, [pc, #132]	; (80031b4 <HAL_DMA_Start_IT+0x228>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d009      	beq.n	8003148 <HAL_DMA_Start_IT+0x1bc>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a1f      	ldr	r2, [pc, #124]	; (80031b8 <HAL_DMA_Start_IT+0x22c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d004      	beq.n	8003148 <HAL_DMA_Start_IT+0x1bc>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a1e      	ldr	r2, [pc, #120]	; (80031bc <HAL_DMA_Start_IT+0x230>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d101      	bne.n	800314c <HAL_DMA_Start_IT+0x1c0>
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <HAL_DMA_Start_IT+0x1c2>
 800314c:	2300      	movs	r3, #0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d036      	beq.n	80031c0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f023 021e 	bic.w	r2, r3, #30
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f042 0216 	orr.w	r2, r2, #22
 8003164:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	d03e      	beq.n	80031ec <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f042 0208 	orr.w	r2, r2, #8
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	e035      	b.n	80031ec <HAL_DMA_Start_IT+0x260>
 8003180:	40020010 	.word	0x40020010
 8003184:	40020028 	.word	0x40020028
 8003188:	40020040 	.word	0x40020040
 800318c:	40020058 	.word	0x40020058
 8003190:	40020070 	.word	0x40020070
 8003194:	40020088 	.word	0x40020088
 8003198:	400200a0 	.word	0x400200a0
 800319c:	400200b8 	.word	0x400200b8
 80031a0:	40020410 	.word	0x40020410
 80031a4:	40020428 	.word	0x40020428
 80031a8:	40020440 	.word	0x40020440
 80031ac:	40020458 	.word	0x40020458
 80031b0:	40020470 	.word	0x40020470
 80031b4:	40020488 	.word	0x40020488
 80031b8:	400204a0 	.word	0x400204a0
 80031bc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f023 020e 	bic.w	r2, r3, #14
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 020a 	orr.w	r2, r2, #10
 80031d2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d007      	beq.n	80031ec <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0204 	orr.w	r2, r2, #4
 80031ea:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a83      	ldr	r2, [pc, #524]	; (8003400 <HAL_DMA_Start_IT+0x474>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d072      	beq.n	80032dc <HAL_DMA_Start_IT+0x350>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a82      	ldr	r2, [pc, #520]	; (8003404 <HAL_DMA_Start_IT+0x478>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d06d      	beq.n	80032dc <HAL_DMA_Start_IT+0x350>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a80      	ldr	r2, [pc, #512]	; (8003408 <HAL_DMA_Start_IT+0x47c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d068      	beq.n	80032dc <HAL_DMA_Start_IT+0x350>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a7f      	ldr	r2, [pc, #508]	; (800340c <HAL_DMA_Start_IT+0x480>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d063      	beq.n	80032dc <HAL_DMA_Start_IT+0x350>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a7d      	ldr	r2, [pc, #500]	; (8003410 <HAL_DMA_Start_IT+0x484>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d05e      	beq.n	80032dc <HAL_DMA_Start_IT+0x350>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a7c      	ldr	r2, [pc, #496]	; (8003414 <HAL_DMA_Start_IT+0x488>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d059      	beq.n	80032dc <HAL_DMA_Start_IT+0x350>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a7a      	ldr	r2, [pc, #488]	; (8003418 <HAL_DMA_Start_IT+0x48c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d054      	beq.n	80032dc <HAL_DMA_Start_IT+0x350>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a79      	ldr	r2, [pc, #484]	; (800341c <HAL_DMA_Start_IT+0x490>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d04f      	beq.n	80032dc <HAL_DMA_Start_IT+0x350>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a77      	ldr	r2, [pc, #476]	; (8003420 <HAL_DMA_Start_IT+0x494>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d04a      	beq.n	80032dc <HAL_DMA_Start_IT+0x350>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a76      	ldr	r2, [pc, #472]	; (8003424 <HAL_DMA_Start_IT+0x498>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d045      	beq.n	80032dc <HAL_DMA_Start_IT+0x350>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a74      	ldr	r2, [pc, #464]	; (8003428 <HAL_DMA_Start_IT+0x49c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d040      	beq.n	80032dc <HAL_DMA_Start_IT+0x350>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a73      	ldr	r2, [pc, #460]	; (800342c <HAL_DMA_Start_IT+0x4a0>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d03b      	beq.n	80032dc <HAL_DMA_Start_IT+0x350>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a71      	ldr	r2, [pc, #452]	; (8003430 <HAL_DMA_Start_IT+0x4a4>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d036      	beq.n	80032dc <HAL_DMA_Start_IT+0x350>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a70      	ldr	r2, [pc, #448]	; (8003434 <HAL_DMA_Start_IT+0x4a8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d031      	beq.n	80032dc <HAL_DMA_Start_IT+0x350>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a6e      	ldr	r2, [pc, #440]	; (8003438 <HAL_DMA_Start_IT+0x4ac>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d02c      	beq.n	80032dc <HAL_DMA_Start_IT+0x350>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a6d      	ldr	r2, [pc, #436]	; (800343c <HAL_DMA_Start_IT+0x4b0>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d027      	beq.n	80032dc <HAL_DMA_Start_IT+0x350>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a6b      	ldr	r2, [pc, #428]	; (8003440 <HAL_DMA_Start_IT+0x4b4>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d022      	beq.n	80032dc <HAL_DMA_Start_IT+0x350>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a6a      	ldr	r2, [pc, #424]	; (8003444 <HAL_DMA_Start_IT+0x4b8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d01d      	beq.n	80032dc <HAL_DMA_Start_IT+0x350>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a68      	ldr	r2, [pc, #416]	; (8003448 <HAL_DMA_Start_IT+0x4bc>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d018      	beq.n	80032dc <HAL_DMA_Start_IT+0x350>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a67      	ldr	r2, [pc, #412]	; (800344c <HAL_DMA_Start_IT+0x4c0>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d013      	beq.n	80032dc <HAL_DMA_Start_IT+0x350>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a65      	ldr	r2, [pc, #404]	; (8003450 <HAL_DMA_Start_IT+0x4c4>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d00e      	beq.n	80032dc <HAL_DMA_Start_IT+0x350>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a64      	ldr	r2, [pc, #400]	; (8003454 <HAL_DMA_Start_IT+0x4c8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d009      	beq.n	80032dc <HAL_DMA_Start_IT+0x350>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a62      	ldr	r2, [pc, #392]	; (8003458 <HAL_DMA_Start_IT+0x4cc>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d004      	beq.n	80032dc <HAL_DMA_Start_IT+0x350>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a61      	ldr	r2, [pc, #388]	; (800345c <HAL_DMA_Start_IT+0x4d0>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d101      	bne.n	80032e0 <HAL_DMA_Start_IT+0x354>
 80032dc:	2301      	movs	r3, #1
 80032de:	e000      	b.n	80032e2 <HAL_DMA_Start_IT+0x356>
 80032e0:	2300      	movs	r3, #0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d01a      	beq.n	800331c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d007      	beq.n	8003304 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003302:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003308:	2b00      	cmp	r3, #0
 800330a:	d007      	beq.n	800331c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003316:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800331a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a37      	ldr	r2, [pc, #220]	; (8003400 <HAL_DMA_Start_IT+0x474>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d04a      	beq.n	80033bc <HAL_DMA_Start_IT+0x430>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a36      	ldr	r2, [pc, #216]	; (8003404 <HAL_DMA_Start_IT+0x478>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d045      	beq.n	80033bc <HAL_DMA_Start_IT+0x430>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a34      	ldr	r2, [pc, #208]	; (8003408 <HAL_DMA_Start_IT+0x47c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d040      	beq.n	80033bc <HAL_DMA_Start_IT+0x430>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a33      	ldr	r2, [pc, #204]	; (800340c <HAL_DMA_Start_IT+0x480>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d03b      	beq.n	80033bc <HAL_DMA_Start_IT+0x430>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a31      	ldr	r2, [pc, #196]	; (8003410 <HAL_DMA_Start_IT+0x484>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d036      	beq.n	80033bc <HAL_DMA_Start_IT+0x430>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a30      	ldr	r2, [pc, #192]	; (8003414 <HAL_DMA_Start_IT+0x488>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d031      	beq.n	80033bc <HAL_DMA_Start_IT+0x430>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a2e      	ldr	r2, [pc, #184]	; (8003418 <HAL_DMA_Start_IT+0x48c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d02c      	beq.n	80033bc <HAL_DMA_Start_IT+0x430>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a2d      	ldr	r2, [pc, #180]	; (800341c <HAL_DMA_Start_IT+0x490>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d027      	beq.n	80033bc <HAL_DMA_Start_IT+0x430>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a2b      	ldr	r2, [pc, #172]	; (8003420 <HAL_DMA_Start_IT+0x494>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d022      	beq.n	80033bc <HAL_DMA_Start_IT+0x430>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a2a      	ldr	r2, [pc, #168]	; (8003424 <HAL_DMA_Start_IT+0x498>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d01d      	beq.n	80033bc <HAL_DMA_Start_IT+0x430>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a28      	ldr	r2, [pc, #160]	; (8003428 <HAL_DMA_Start_IT+0x49c>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d018      	beq.n	80033bc <HAL_DMA_Start_IT+0x430>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a27      	ldr	r2, [pc, #156]	; (800342c <HAL_DMA_Start_IT+0x4a0>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d013      	beq.n	80033bc <HAL_DMA_Start_IT+0x430>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a25      	ldr	r2, [pc, #148]	; (8003430 <HAL_DMA_Start_IT+0x4a4>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d00e      	beq.n	80033bc <HAL_DMA_Start_IT+0x430>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a24      	ldr	r2, [pc, #144]	; (8003434 <HAL_DMA_Start_IT+0x4a8>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d009      	beq.n	80033bc <HAL_DMA_Start_IT+0x430>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a22      	ldr	r2, [pc, #136]	; (8003438 <HAL_DMA_Start_IT+0x4ac>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d004      	beq.n	80033bc <HAL_DMA_Start_IT+0x430>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a21      	ldr	r2, [pc, #132]	; (800343c <HAL_DMA_Start_IT+0x4b0>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d108      	bne.n	80033ce <HAL_DMA_Start_IT+0x442>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0201 	orr.w	r2, r2, #1
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	e012      	b.n	80033f4 <HAL_DMA_Start_IT+0x468>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f042 0201 	orr.w	r2, r2, #1
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	e009      	b.n	80033f4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80033f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40020010 	.word	0x40020010
 8003404:	40020028 	.word	0x40020028
 8003408:	40020040 	.word	0x40020040
 800340c:	40020058 	.word	0x40020058
 8003410:	40020070 	.word	0x40020070
 8003414:	40020088 	.word	0x40020088
 8003418:	400200a0 	.word	0x400200a0
 800341c:	400200b8 	.word	0x400200b8
 8003420:	40020410 	.word	0x40020410
 8003424:	40020428 	.word	0x40020428
 8003428:	40020440 	.word	0x40020440
 800342c:	40020458 	.word	0x40020458
 8003430:	40020470 	.word	0x40020470
 8003434:	40020488 	.word	0x40020488
 8003438:	400204a0 	.word	0x400204a0
 800343c:	400204b8 	.word	0x400204b8
 8003440:	58025408 	.word	0x58025408
 8003444:	5802541c 	.word	0x5802541c
 8003448:	58025430 	.word	0x58025430
 800344c:	58025444 	.word	0x58025444
 8003450:	58025458 	.word	0x58025458
 8003454:	5802546c 	.word	0x5802546c
 8003458:	58025480 	.word	0x58025480
 800345c:	58025494 	.word	0x58025494

08003460 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003468:	f7ff f86c 	bl	8002544 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e2dc      	b.n	8003a32 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d008      	beq.n	8003496 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2280      	movs	r2, #128	; 0x80
 8003488:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e2cd      	b.n	8003a32 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a76      	ldr	r2, [pc, #472]	; (8003674 <HAL_DMA_Abort+0x214>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d04a      	beq.n	8003536 <HAL_DMA_Abort+0xd6>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a74      	ldr	r2, [pc, #464]	; (8003678 <HAL_DMA_Abort+0x218>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d045      	beq.n	8003536 <HAL_DMA_Abort+0xd6>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a73      	ldr	r2, [pc, #460]	; (800367c <HAL_DMA_Abort+0x21c>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d040      	beq.n	8003536 <HAL_DMA_Abort+0xd6>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a71      	ldr	r2, [pc, #452]	; (8003680 <HAL_DMA_Abort+0x220>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d03b      	beq.n	8003536 <HAL_DMA_Abort+0xd6>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a70      	ldr	r2, [pc, #448]	; (8003684 <HAL_DMA_Abort+0x224>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d036      	beq.n	8003536 <HAL_DMA_Abort+0xd6>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a6e      	ldr	r2, [pc, #440]	; (8003688 <HAL_DMA_Abort+0x228>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d031      	beq.n	8003536 <HAL_DMA_Abort+0xd6>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a6d      	ldr	r2, [pc, #436]	; (800368c <HAL_DMA_Abort+0x22c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d02c      	beq.n	8003536 <HAL_DMA_Abort+0xd6>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a6b      	ldr	r2, [pc, #428]	; (8003690 <HAL_DMA_Abort+0x230>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d027      	beq.n	8003536 <HAL_DMA_Abort+0xd6>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a6a      	ldr	r2, [pc, #424]	; (8003694 <HAL_DMA_Abort+0x234>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d022      	beq.n	8003536 <HAL_DMA_Abort+0xd6>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a68      	ldr	r2, [pc, #416]	; (8003698 <HAL_DMA_Abort+0x238>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d01d      	beq.n	8003536 <HAL_DMA_Abort+0xd6>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a67      	ldr	r2, [pc, #412]	; (800369c <HAL_DMA_Abort+0x23c>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d018      	beq.n	8003536 <HAL_DMA_Abort+0xd6>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a65      	ldr	r2, [pc, #404]	; (80036a0 <HAL_DMA_Abort+0x240>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d013      	beq.n	8003536 <HAL_DMA_Abort+0xd6>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a64      	ldr	r2, [pc, #400]	; (80036a4 <HAL_DMA_Abort+0x244>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d00e      	beq.n	8003536 <HAL_DMA_Abort+0xd6>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a62      	ldr	r2, [pc, #392]	; (80036a8 <HAL_DMA_Abort+0x248>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d009      	beq.n	8003536 <HAL_DMA_Abort+0xd6>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a61      	ldr	r2, [pc, #388]	; (80036ac <HAL_DMA_Abort+0x24c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d004      	beq.n	8003536 <HAL_DMA_Abort+0xd6>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a5f      	ldr	r2, [pc, #380]	; (80036b0 <HAL_DMA_Abort+0x250>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d101      	bne.n	800353a <HAL_DMA_Abort+0xda>
 8003536:	2301      	movs	r3, #1
 8003538:	e000      	b.n	800353c <HAL_DMA_Abort+0xdc>
 800353a:	2300      	movs	r3, #0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d013      	beq.n	8003568 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 021e 	bic.w	r2, r2, #30
 800354e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800355e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	e00a      	b.n	800357e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 020e 	bic.w	r2, r2, #14
 8003576:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a3c      	ldr	r2, [pc, #240]	; (8003674 <HAL_DMA_Abort+0x214>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d072      	beq.n	800366e <HAL_DMA_Abort+0x20e>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a3a      	ldr	r2, [pc, #232]	; (8003678 <HAL_DMA_Abort+0x218>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d06d      	beq.n	800366e <HAL_DMA_Abort+0x20e>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a39      	ldr	r2, [pc, #228]	; (800367c <HAL_DMA_Abort+0x21c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d068      	beq.n	800366e <HAL_DMA_Abort+0x20e>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a37      	ldr	r2, [pc, #220]	; (8003680 <HAL_DMA_Abort+0x220>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d063      	beq.n	800366e <HAL_DMA_Abort+0x20e>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a36      	ldr	r2, [pc, #216]	; (8003684 <HAL_DMA_Abort+0x224>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d05e      	beq.n	800366e <HAL_DMA_Abort+0x20e>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a34      	ldr	r2, [pc, #208]	; (8003688 <HAL_DMA_Abort+0x228>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d059      	beq.n	800366e <HAL_DMA_Abort+0x20e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a33      	ldr	r2, [pc, #204]	; (800368c <HAL_DMA_Abort+0x22c>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d054      	beq.n	800366e <HAL_DMA_Abort+0x20e>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a31      	ldr	r2, [pc, #196]	; (8003690 <HAL_DMA_Abort+0x230>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d04f      	beq.n	800366e <HAL_DMA_Abort+0x20e>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a30      	ldr	r2, [pc, #192]	; (8003694 <HAL_DMA_Abort+0x234>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d04a      	beq.n	800366e <HAL_DMA_Abort+0x20e>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a2e      	ldr	r2, [pc, #184]	; (8003698 <HAL_DMA_Abort+0x238>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d045      	beq.n	800366e <HAL_DMA_Abort+0x20e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a2d      	ldr	r2, [pc, #180]	; (800369c <HAL_DMA_Abort+0x23c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d040      	beq.n	800366e <HAL_DMA_Abort+0x20e>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a2b      	ldr	r2, [pc, #172]	; (80036a0 <HAL_DMA_Abort+0x240>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d03b      	beq.n	800366e <HAL_DMA_Abort+0x20e>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a2a      	ldr	r2, [pc, #168]	; (80036a4 <HAL_DMA_Abort+0x244>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d036      	beq.n	800366e <HAL_DMA_Abort+0x20e>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a28      	ldr	r2, [pc, #160]	; (80036a8 <HAL_DMA_Abort+0x248>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d031      	beq.n	800366e <HAL_DMA_Abort+0x20e>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a27      	ldr	r2, [pc, #156]	; (80036ac <HAL_DMA_Abort+0x24c>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d02c      	beq.n	800366e <HAL_DMA_Abort+0x20e>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a25      	ldr	r2, [pc, #148]	; (80036b0 <HAL_DMA_Abort+0x250>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d027      	beq.n	800366e <HAL_DMA_Abort+0x20e>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a24      	ldr	r2, [pc, #144]	; (80036b4 <HAL_DMA_Abort+0x254>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d022      	beq.n	800366e <HAL_DMA_Abort+0x20e>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a22      	ldr	r2, [pc, #136]	; (80036b8 <HAL_DMA_Abort+0x258>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d01d      	beq.n	800366e <HAL_DMA_Abort+0x20e>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a21      	ldr	r2, [pc, #132]	; (80036bc <HAL_DMA_Abort+0x25c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d018      	beq.n	800366e <HAL_DMA_Abort+0x20e>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a1f      	ldr	r2, [pc, #124]	; (80036c0 <HAL_DMA_Abort+0x260>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d013      	beq.n	800366e <HAL_DMA_Abort+0x20e>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a1e      	ldr	r2, [pc, #120]	; (80036c4 <HAL_DMA_Abort+0x264>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d00e      	beq.n	800366e <HAL_DMA_Abort+0x20e>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a1c      	ldr	r2, [pc, #112]	; (80036c8 <HAL_DMA_Abort+0x268>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d009      	beq.n	800366e <HAL_DMA_Abort+0x20e>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a1b      	ldr	r2, [pc, #108]	; (80036cc <HAL_DMA_Abort+0x26c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d004      	beq.n	800366e <HAL_DMA_Abort+0x20e>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a19      	ldr	r2, [pc, #100]	; (80036d0 <HAL_DMA_Abort+0x270>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d132      	bne.n	80036d4 <HAL_DMA_Abort+0x274>
 800366e:	2301      	movs	r3, #1
 8003670:	e031      	b.n	80036d6 <HAL_DMA_Abort+0x276>
 8003672:	bf00      	nop
 8003674:	40020010 	.word	0x40020010
 8003678:	40020028 	.word	0x40020028
 800367c:	40020040 	.word	0x40020040
 8003680:	40020058 	.word	0x40020058
 8003684:	40020070 	.word	0x40020070
 8003688:	40020088 	.word	0x40020088
 800368c:	400200a0 	.word	0x400200a0
 8003690:	400200b8 	.word	0x400200b8
 8003694:	40020410 	.word	0x40020410
 8003698:	40020428 	.word	0x40020428
 800369c:	40020440 	.word	0x40020440
 80036a0:	40020458 	.word	0x40020458
 80036a4:	40020470 	.word	0x40020470
 80036a8:	40020488 	.word	0x40020488
 80036ac:	400204a0 	.word	0x400204a0
 80036b0:	400204b8 	.word	0x400204b8
 80036b4:	58025408 	.word	0x58025408
 80036b8:	5802541c 	.word	0x5802541c
 80036bc:	58025430 	.word	0x58025430
 80036c0:	58025444 	.word	0x58025444
 80036c4:	58025458 	.word	0x58025458
 80036c8:	5802546c 	.word	0x5802546c
 80036cc:	58025480 	.word	0x58025480
 80036d0:	58025494 	.word	0x58025494
 80036d4:	2300      	movs	r3, #0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d007      	beq.n	80036ea <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a6d      	ldr	r2, [pc, #436]	; (80038a4 <HAL_DMA_Abort+0x444>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d04a      	beq.n	800378a <HAL_DMA_Abort+0x32a>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a6b      	ldr	r2, [pc, #428]	; (80038a8 <HAL_DMA_Abort+0x448>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d045      	beq.n	800378a <HAL_DMA_Abort+0x32a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a6a      	ldr	r2, [pc, #424]	; (80038ac <HAL_DMA_Abort+0x44c>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d040      	beq.n	800378a <HAL_DMA_Abort+0x32a>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a68      	ldr	r2, [pc, #416]	; (80038b0 <HAL_DMA_Abort+0x450>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d03b      	beq.n	800378a <HAL_DMA_Abort+0x32a>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a67      	ldr	r2, [pc, #412]	; (80038b4 <HAL_DMA_Abort+0x454>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d036      	beq.n	800378a <HAL_DMA_Abort+0x32a>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a65      	ldr	r2, [pc, #404]	; (80038b8 <HAL_DMA_Abort+0x458>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d031      	beq.n	800378a <HAL_DMA_Abort+0x32a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a64      	ldr	r2, [pc, #400]	; (80038bc <HAL_DMA_Abort+0x45c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d02c      	beq.n	800378a <HAL_DMA_Abort+0x32a>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a62      	ldr	r2, [pc, #392]	; (80038c0 <HAL_DMA_Abort+0x460>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d027      	beq.n	800378a <HAL_DMA_Abort+0x32a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a61      	ldr	r2, [pc, #388]	; (80038c4 <HAL_DMA_Abort+0x464>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d022      	beq.n	800378a <HAL_DMA_Abort+0x32a>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a5f      	ldr	r2, [pc, #380]	; (80038c8 <HAL_DMA_Abort+0x468>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d01d      	beq.n	800378a <HAL_DMA_Abort+0x32a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a5e      	ldr	r2, [pc, #376]	; (80038cc <HAL_DMA_Abort+0x46c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d018      	beq.n	800378a <HAL_DMA_Abort+0x32a>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a5c      	ldr	r2, [pc, #368]	; (80038d0 <HAL_DMA_Abort+0x470>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d013      	beq.n	800378a <HAL_DMA_Abort+0x32a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a5b      	ldr	r2, [pc, #364]	; (80038d4 <HAL_DMA_Abort+0x474>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d00e      	beq.n	800378a <HAL_DMA_Abort+0x32a>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a59      	ldr	r2, [pc, #356]	; (80038d8 <HAL_DMA_Abort+0x478>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d009      	beq.n	800378a <HAL_DMA_Abort+0x32a>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a58      	ldr	r2, [pc, #352]	; (80038dc <HAL_DMA_Abort+0x47c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d004      	beq.n	800378a <HAL_DMA_Abort+0x32a>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a56      	ldr	r2, [pc, #344]	; (80038e0 <HAL_DMA_Abort+0x480>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d108      	bne.n	800379c <HAL_DMA_Abort+0x33c>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0201 	bic.w	r2, r2, #1
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	e007      	b.n	80037ac <HAL_DMA_Abort+0x34c>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0201 	bic.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80037ac:	e013      	b.n	80037d6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037ae:	f7fe fec9 	bl	8002544 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b05      	cmp	r3, #5
 80037ba:	d90c      	bls.n	80037d6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2220      	movs	r2, #32
 80037c0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2203      	movs	r2, #3
 80037ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e12d      	b.n	8003a32 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1e5      	bne.n	80037ae <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a2f      	ldr	r2, [pc, #188]	; (80038a4 <HAL_DMA_Abort+0x444>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d04a      	beq.n	8003882 <HAL_DMA_Abort+0x422>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a2d      	ldr	r2, [pc, #180]	; (80038a8 <HAL_DMA_Abort+0x448>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d045      	beq.n	8003882 <HAL_DMA_Abort+0x422>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a2c      	ldr	r2, [pc, #176]	; (80038ac <HAL_DMA_Abort+0x44c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d040      	beq.n	8003882 <HAL_DMA_Abort+0x422>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a2a      	ldr	r2, [pc, #168]	; (80038b0 <HAL_DMA_Abort+0x450>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d03b      	beq.n	8003882 <HAL_DMA_Abort+0x422>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a29      	ldr	r2, [pc, #164]	; (80038b4 <HAL_DMA_Abort+0x454>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d036      	beq.n	8003882 <HAL_DMA_Abort+0x422>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a27      	ldr	r2, [pc, #156]	; (80038b8 <HAL_DMA_Abort+0x458>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d031      	beq.n	8003882 <HAL_DMA_Abort+0x422>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a26      	ldr	r2, [pc, #152]	; (80038bc <HAL_DMA_Abort+0x45c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d02c      	beq.n	8003882 <HAL_DMA_Abort+0x422>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a24      	ldr	r2, [pc, #144]	; (80038c0 <HAL_DMA_Abort+0x460>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d027      	beq.n	8003882 <HAL_DMA_Abort+0x422>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a23      	ldr	r2, [pc, #140]	; (80038c4 <HAL_DMA_Abort+0x464>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d022      	beq.n	8003882 <HAL_DMA_Abort+0x422>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a21      	ldr	r2, [pc, #132]	; (80038c8 <HAL_DMA_Abort+0x468>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d01d      	beq.n	8003882 <HAL_DMA_Abort+0x422>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a20      	ldr	r2, [pc, #128]	; (80038cc <HAL_DMA_Abort+0x46c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d018      	beq.n	8003882 <HAL_DMA_Abort+0x422>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a1e      	ldr	r2, [pc, #120]	; (80038d0 <HAL_DMA_Abort+0x470>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d013      	beq.n	8003882 <HAL_DMA_Abort+0x422>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a1d      	ldr	r2, [pc, #116]	; (80038d4 <HAL_DMA_Abort+0x474>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d00e      	beq.n	8003882 <HAL_DMA_Abort+0x422>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a1b      	ldr	r2, [pc, #108]	; (80038d8 <HAL_DMA_Abort+0x478>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d009      	beq.n	8003882 <HAL_DMA_Abort+0x422>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a1a      	ldr	r2, [pc, #104]	; (80038dc <HAL_DMA_Abort+0x47c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d004      	beq.n	8003882 <HAL_DMA_Abort+0x422>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a18      	ldr	r2, [pc, #96]	; (80038e0 <HAL_DMA_Abort+0x480>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d101      	bne.n	8003886 <HAL_DMA_Abort+0x426>
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <HAL_DMA_Abort+0x428>
 8003886:	2300      	movs	r3, #0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d02b      	beq.n	80038e4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003890:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003896:	f003 031f 	and.w	r3, r3, #31
 800389a:	223f      	movs	r2, #63	; 0x3f
 800389c:	409a      	lsls	r2, r3
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	609a      	str	r2, [r3, #8]
 80038a2:	e02a      	b.n	80038fa <HAL_DMA_Abort+0x49a>
 80038a4:	40020010 	.word	0x40020010
 80038a8:	40020028 	.word	0x40020028
 80038ac:	40020040 	.word	0x40020040
 80038b0:	40020058 	.word	0x40020058
 80038b4:	40020070 	.word	0x40020070
 80038b8:	40020088 	.word	0x40020088
 80038bc:	400200a0 	.word	0x400200a0
 80038c0:	400200b8 	.word	0x400200b8
 80038c4:	40020410 	.word	0x40020410
 80038c8:	40020428 	.word	0x40020428
 80038cc:	40020440 	.word	0x40020440
 80038d0:	40020458 	.word	0x40020458
 80038d4:	40020470 	.word	0x40020470
 80038d8:	40020488 	.word	0x40020488
 80038dc:	400204a0 	.word	0x400204a0
 80038e0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ee:	f003 031f 	and.w	r3, r3, #31
 80038f2:	2201      	movs	r2, #1
 80038f4:	409a      	lsls	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a4f      	ldr	r2, [pc, #316]	; (8003a3c <HAL_DMA_Abort+0x5dc>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d072      	beq.n	80039ea <HAL_DMA_Abort+0x58a>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a4d      	ldr	r2, [pc, #308]	; (8003a40 <HAL_DMA_Abort+0x5e0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d06d      	beq.n	80039ea <HAL_DMA_Abort+0x58a>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a4c      	ldr	r2, [pc, #304]	; (8003a44 <HAL_DMA_Abort+0x5e4>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d068      	beq.n	80039ea <HAL_DMA_Abort+0x58a>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a4a      	ldr	r2, [pc, #296]	; (8003a48 <HAL_DMA_Abort+0x5e8>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d063      	beq.n	80039ea <HAL_DMA_Abort+0x58a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a49      	ldr	r2, [pc, #292]	; (8003a4c <HAL_DMA_Abort+0x5ec>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d05e      	beq.n	80039ea <HAL_DMA_Abort+0x58a>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a47      	ldr	r2, [pc, #284]	; (8003a50 <HAL_DMA_Abort+0x5f0>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d059      	beq.n	80039ea <HAL_DMA_Abort+0x58a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a46      	ldr	r2, [pc, #280]	; (8003a54 <HAL_DMA_Abort+0x5f4>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d054      	beq.n	80039ea <HAL_DMA_Abort+0x58a>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a44      	ldr	r2, [pc, #272]	; (8003a58 <HAL_DMA_Abort+0x5f8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d04f      	beq.n	80039ea <HAL_DMA_Abort+0x58a>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a43      	ldr	r2, [pc, #268]	; (8003a5c <HAL_DMA_Abort+0x5fc>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d04a      	beq.n	80039ea <HAL_DMA_Abort+0x58a>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a41      	ldr	r2, [pc, #260]	; (8003a60 <HAL_DMA_Abort+0x600>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d045      	beq.n	80039ea <HAL_DMA_Abort+0x58a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a40      	ldr	r2, [pc, #256]	; (8003a64 <HAL_DMA_Abort+0x604>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d040      	beq.n	80039ea <HAL_DMA_Abort+0x58a>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a3e      	ldr	r2, [pc, #248]	; (8003a68 <HAL_DMA_Abort+0x608>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d03b      	beq.n	80039ea <HAL_DMA_Abort+0x58a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a3d      	ldr	r2, [pc, #244]	; (8003a6c <HAL_DMA_Abort+0x60c>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d036      	beq.n	80039ea <HAL_DMA_Abort+0x58a>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a3b      	ldr	r2, [pc, #236]	; (8003a70 <HAL_DMA_Abort+0x610>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d031      	beq.n	80039ea <HAL_DMA_Abort+0x58a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a3a      	ldr	r2, [pc, #232]	; (8003a74 <HAL_DMA_Abort+0x614>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d02c      	beq.n	80039ea <HAL_DMA_Abort+0x58a>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a38      	ldr	r2, [pc, #224]	; (8003a78 <HAL_DMA_Abort+0x618>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d027      	beq.n	80039ea <HAL_DMA_Abort+0x58a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a37      	ldr	r2, [pc, #220]	; (8003a7c <HAL_DMA_Abort+0x61c>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d022      	beq.n	80039ea <HAL_DMA_Abort+0x58a>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a35      	ldr	r2, [pc, #212]	; (8003a80 <HAL_DMA_Abort+0x620>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d01d      	beq.n	80039ea <HAL_DMA_Abort+0x58a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a34      	ldr	r2, [pc, #208]	; (8003a84 <HAL_DMA_Abort+0x624>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d018      	beq.n	80039ea <HAL_DMA_Abort+0x58a>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a32      	ldr	r2, [pc, #200]	; (8003a88 <HAL_DMA_Abort+0x628>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d013      	beq.n	80039ea <HAL_DMA_Abort+0x58a>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a31      	ldr	r2, [pc, #196]	; (8003a8c <HAL_DMA_Abort+0x62c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d00e      	beq.n	80039ea <HAL_DMA_Abort+0x58a>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a2f      	ldr	r2, [pc, #188]	; (8003a90 <HAL_DMA_Abort+0x630>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d009      	beq.n	80039ea <HAL_DMA_Abort+0x58a>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a2e      	ldr	r2, [pc, #184]	; (8003a94 <HAL_DMA_Abort+0x634>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d004      	beq.n	80039ea <HAL_DMA_Abort+0x58a>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a2c      	ldr	r2, [pc, #176]	; (8003a98 <HAL_DMA_Abort+0x638>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d101      	bne.n	80039ee <HAL_DMA_Abort+0x58e>
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <HAL_DMA_Abort+0x590>
 80039ee:	2300      	movs	r3, #0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d015      	beq.n	8003a20 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80039fc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00c      	beq.n	8003a20 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a14:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003a1e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40020010 	.word	0x40020010
 8003a40:	40020028 	.word	0x40020028
 8003a44:	40020040 	.word	0x40020040
 8003a48:	40020058 	.word	0x40020058
 8003a4c:	40020070 	.word	0x40020070
 8003a50:	40020088 	.word	0x40020088
 8003a54:	400200a0 	.word	0x400200a0
 8003a58:	400200b8 	.word	0x400200b8
 8003a5c:	40020410 	.word	0x40020410
 8003a60:	40020428 	.word	0x40020428
 8003a64:	40020440 	.word	0x40020440
 8003a68:	40020458 	.word	0x40020458
 8003a6c:	40020470 	.word	0x40020470
 8003a70:	40020488 	.word	0x40020488
 8003a74:	400204a0 	.word	0x400204a0
 8003a78:	400204b8 	.word	0x400204b8
 8003a7c:	58025408 	.word	0x58025408
 8003a80:	5802541c 	.word	0x5802541c
 8003a84:	58025430 	.word	0x58025430
 8003a88:	58025444 	.word	0x58025444
 8003a8c:	58025458 	.word	0x58025458
 8003a90:	5802546c 	.word	0x5802546c
 8003a94:	58025480 	.word	0x58025480
 8003a98:	58025494 	.word	0x58025494

08003a9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e205      	b.n	8003eba <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d004      	beq.n	8003ac4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2280      	movs	r2, #128	; 0x80
 8003abe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e1fa      	b.n	8003eba <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a8c      	ldr	r2, [pc, #560]	; (8003cfc <HAL_DMA_Abort_IT+0x260>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d04a      	beq.n	8003b64 <HAL_DMA_Abort_IT+0xc8>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a8b      	ldr	r2, [pc, #556]	; (8003d00 <HAL_DMA_Abort_IT+0x264>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d045      	beq.n	8003b64 <HAL_DMA_Abort_IT+0xc8>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a89      	ldr	r2, [pc, #548]	; (8003d04 <HAL_DMA_Abort_IT+0x268>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d040      	beq.n	8003b64 <HAL_DMA_Abort_IT+0xc8>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a88      	ldr	r2, [pc, #544]	; (8003d08 <HAL_DMA_Abort_IT+0x26c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d03b      	beq.n	8003b64 <HAL_DMA_Abort_IT+0xc8>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a86      	ldr	r2, [pc, #536]	; (8003d0c <HAL_DMA_Abort_IT+0x270>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d036      	beq.n	8003b64 <HAL_DMA_Abort_IT+0xc8>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a85      	ldr	r2, [pc, #532]	; (8003d10 <HAL_DMA_Abort_IT+0x274>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d031      	beq.n	8003b64 <HAL_DMA_Abort_IT+0xc8>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a83      	ldr	r2, [pc, #524]	; (8003d14 <HAL_DMA_Abort_IT+0x278>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d02c      	beq.n	8003b64 <HAL_DMA_Abort_IT+0xc8>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a82      	ldr	r2, [pc, #520]	; (8003d18 <HAL_DMA_Abort_IT+0x27c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d027      	beq.n	8003b64 <HAL_DMA_Abort_IT+0xc8>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a80      	ldr	r2, [pc, #512]	; (8003d1c <HAL_DMA_Abort_IT+0x280>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d022      	beq.n	8003b64 <HAL_DMA_Abort_IT+0xc8>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a7f      	ldr	r2, [pc, #508]	; (8003d20 <HAL_DMA_Abort_IT+0x284>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d01d      	beq.n	8003b64 <HAL_DMA_Abort_IT+0xc8>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a7d      	ldr	r2, [pc, #500]	; (8003d24 <HAL_DMA_Abort_IT+0x288>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d018      	beq.n	8003b64 <HAL_DMA_Abort_IT+0xc8>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a7c      	ldr	r2, [pc, #496]	; (8003d28 <HAL_DMA_Abort_IT+0x28c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d013      	beq.n	8003b64 <HAL_DMA_Abort_IT+0xc8>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a7a      	ldr	r2, [pc, #488]	; (8003d2c <HAL_DMA_Abort_IT+0x290>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d00e      	beq.n	8003b64 <HAL_DMA_Abort_IT+0xc8>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a79      	ldr	r2, [pc, #484]	; (8003d30 <HAL_DMA_Abort_IT+0x294>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d009      	beq.n	8003b64 <HAL_DMA_Abort_IT+0xc8>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a77      	ldr	r2, [pc, #476]	; (8003d34 <HAL_DMA_Abort_IT+0x298>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d004      	beq.n	8003b64 <HAL_DMA_Abort_IT+0xc8>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a76      	ldr	r2, [pc, #472]	; (8003d38 <HAL_DMA_Abort_IT+0x29c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d101      	bne.n	8003b68 <HAL_DMA_Abort_IT+0xcc>
 8003b64:	2301      	movs	r3, #1
 8003b66:	e000      	b.n	8003b6a <HAL_DMA_Abort_IT+0xce>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d065      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2204      	movs	r2, #4
 8003b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a60      	ldr	r2, [pc, #384]	; (8003cfc <HAL_DMA_Abort_IT+0x260>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d04a      	beq.n	8003c16 <HAL_DMA_Abort_IT+0x17a>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a5e      	ldr	r2, [pc, #376]	; (8003d00 <HAL_DMA_Abort_IT+0x264>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d045      	beq.n	8003c16 <HAL_DMA_Abort_IT+0x17a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a5d      	ldr	r2, [pc, #372]	; (8003d04 <HAL_DMA_Abort_IT+0x268>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d040      	beq.n	8003c16 <HAL_DMA_Abort_IT+0x17a>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a5b      	ldr	r2, [pc, #364]	; (8003d08 <HAL_DMA_Abort_IT+0x26c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d03b      	beq.n	8003c16 <HAL_DMA_Abort_IT+0x17a>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a5a      	ldr	r2, [pc, #360]	; (8003d0c <HAL_DMA_Abort_IT+0x270>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d036      	beq.n	8003c16 <HAL_DMA_Abort_IT+0x17a>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a58      	ldr	r2, [pc, #352]	; (8003d10 <HAL_DMA_Abort_IT+0x274>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d031      	beq.n	8003c16 <HAL_DMA_Abort_IT+0x17a>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a57      	ldr	r2, [pc, #348]	; (8003d14 <HAL_DMA_Abort_IT+0x278>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d02c      	beq.n	8003c16 <HAL_DMA_Abort_IT+0x17a>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a55      	ldr	r2, [pc, #340]	; (8003d18 <HAL_DMA_Abort_IT+0x27c>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d027      	beq.n	8003c16 <HAL_DMA_Abort_IT+0x17a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a54      	ldr	r2, [pc, #336]	; (8003d1c <HAL_DMA_Abort_IT+0x280>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d022      	beq.n	8003c16 <HAL_DMA_Abort_IT+0x17a>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a52      	ldr	r2, [pc, #328]	; (8003d20 <HAL_DMA_Abort_IT+0x284>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d01d      	beq.n	8003c16 <HAL_DMA_Abort_IT+0x17a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a51      	ldr	r2, [pc, #324]	; (8003d24 <HAL_DMA_Abort_IT+0x288>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d018      	beq.n	8003c16 <HAL_DMA_Abort_IT+0x17a>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a4f      	ldr	r2, [pc, #316]	; (8003d28 <HAL_DMA_Abort_IT+0x28c>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d013      	beq.n	8003c16 <HAL_DMA_Abort_IT+0x17a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a4e      	ldr	r2, [pc, #312]	; (8003d2c <HAL_DMA_Abort_IT+0x290>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d00e      	beq.n	8003c16 <HAL_DMA_Abort_IT+0x17a>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a4c      	ldr	r2, [pc, #304]	; (8003d30 <HAL_DMA_Abort_IT+0x294>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d009      	beq.n	8003c16 <HAL_DMA_Abort_IT+0x17a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a4b      	ldr	r2, [pc, #300]	; (8003d34 <HAL_DMA_Abort_IT+0x298>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d004      	beq.n	8003c16 <HAL_DMA_Abort_IT+0x17a>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a49      	ldr	r2, [pc, #292]	; (8003d38 <HAL_DMA_Abort_IT+0x29c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d108      	bne.n	8003c28 <HAL_DMA_Abort_IT+0x18c>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0201 	bic.w	r2, r2, #1
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	e147      	b.n	8003eb8 <HAL_DMA_Abort_IT+0x41c>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0201 	bic.w	r2, r2, #1
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	e13e      	b.n	8003eb8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 020e 	bic.w	r2, r2, #14
 8003c48:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a2b      	ldr	r2, [pc, #172]	; (8003cfc <HAL_DMA_Abort_IT+0x260>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d04a      	beq.n	8003cea <HAL_DMA_Abort_IT+0x24e>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a29      	ldr	r2, [pc, #164]	; (8003d00 <HAL_DMA_Abort_IT+0x264>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d045      	beq.n	8003cea <HAL_DMA_Abort_IT+0x24e>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a28      	ldr	r2, [pc, #160]	; (8003d04 <HAL_DMA_Abort_IT+0x268>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d040      	beq.n	8003cea <HAL_DMA_Abort_IT+0x24e>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a26      	ldr	r2, [pc, #152]	; (8003d08 <HAL_DMA_Abort_IT+0x26c>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d03b      	beq.n	8003cea <HAL_DMA_Abort_IT+0x24e>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a25      	ldr	r2, [pc, #148]	; (8003d0c <HAL_DMA_Abort_IT+0x270>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d036      	beq.n	8003cea <HAL_DMA_Abort_IT+0x24e>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a23      	ldr	r2, [pc, #140]	; (8003d10 <HAL_DMA_Abort_IT+0x274>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d031      	beq.n	8003cea <HAL_DMA_Abort_IT+0x24e>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a22      	ldr	r2, [pc, #136]	; (8003d14 <HAL_DMA_Abort_IT+0x278>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d02c      	beq.n	8003cea <HAL_DMA_Abort_IT+0x24e>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a20      	ldr	r2, [pc, #128]	; (8003d18 <HAL_DMA_Abort_IT+0x27c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d027      	beq.n	8003cea <HAL_DMA_Abort_IT+0x24e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a1f      	ldr	r2, [pc, #124]	; (8003d1c <HAL_DMA_Abort_IT+0x280>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d022      	beq.n	8003cea <HAL_DMA_Abort_IT+0x24e>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a1d      	ldr	r2, [pc, #116]	; (8003d20 <HAL_DMA_Abort_IT+0x284>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d01d      	beq.n	8003cea <HAL_DMA_Abort_IT+0x24e>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a1c      	ldr	r2, [pc, #112]	; (8003d24 <HAL_DMA_Abort_IT+0x288>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d018      	beq.n	8003cea <HAL_DMA_Abort_IT+0x24e>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a1a      	ldr	r2, [pc, #104]	; (8003d28 <HAL_DMA_Abort_IT+0x28c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d013      	beq.n	8003cea <HAL_DMA_Abort_IT+0x24e>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a19      	ldr	r2, [pc, #100]	; (8003d2c <HAL_DMA_Abort_IT+0x290>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d00e      	beq.n	8003cea <HAL_DMA_Abort_IT+0x24e>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a17      	ldr	r2, [pc, #92]	; (8003d30 <HAL_DMA_Abort_IT+0x294>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d009      	beq.n	8003cea <HAL_DMA_Abort_IT+0x24e>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a16      	ldr	r2, [pc, #88]	; (8003d34 <HAL_DMA_Abort_IT+0x298>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d004      	beq.n	8003cea <HAL_DMA_Abort_IT+0x24e>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a14      	ldr	r2, [pc, #80]	; (8003d38 <HAL_DMA_Abort_IT+0x29c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d128      	bne.n	8003d3c <HAL_DMA_Abort_IT+0x2a0>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0201 	bic.w	r2, r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	e027      	b.n	8003d4c <HAL_DMA_Abort_IT+0x2b0>
 8003cfc:	40020010 	.word	0x40020010
 8003d00:	40020028 	.word	0x40020028
 8003d04:	40020040 	.word	0x40020040
 8003d08:	40020058 	.word	0x40020058
 8003d0c:	40020070 	.word	0x40020070
 8003d10:	40020088 	.word	0x40020088
 8003d14:	400200a0 	.word	0x400200a0
 8003d18:	400200b8 	.word	0x400200b8
 8003d1c:	40020410 	.word	0x40020410
 8003d20:	40020428 	.word	0x40020428
 8003d24:	40020440 	.word	0x40020440
 8003d28:	40020458 	.word	0x40020458
 8003d2c:	40020470 	.word	0x40020470
 8003d30:	40020488 	.word	0x40020488
 8003d34:	400204a0 	.word	0x400204a0
 8003d38:	400204b8 	.word	0x400204b8
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0201 	bic.w	r2, r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a5c      	ldr	r2, [pc, #368]	; (8003ec4 <HAL_DMA_Abort_IT+0x428>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d072      	beq.n	8003e3c <HAL_DMA_Abort_IT+0x3a0>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a5b      	ldr	r2, [pc, #364]	; (8003ec8 <HAL_DMA_Abort_IT+0x42c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d06d      	beq.n	8003e3c <HAL_DMA_Abort_IT+0x3a0>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a59      	ldr	r2, [pc, #356]	; (8003ecc <HAL_DMA_Abort_IT+0x430>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d068      	beq.n	8003e3c <HAL_DMA_Abort_IT+0x3a0>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a58      	ldr	r2, [pc, #352]	; (8003ed0 <HAL_DMA_Abort_IT+0x434>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d063      	beq.n	8003e3c <HAL_DMA_Abort_IT+0x3a0>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a56      	ldr	r2, [pc, #344]	; (8003ed4 <HAL_DMA_Abort_IT+0x438>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d05e      	beq.n	8003e3c <HAL_DMA_Abort_IT+0x3a0>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a55      	ldr	r2, [pc, #340]	; (8003ed8 <HAL_DMA_Abort_IT+0x43c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d059      	beq.n	8003e3c <HAL_DMA_Abort_IT+0x3a0>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a53      	ldr	r2, [pc, #332]	; (8003edc <HAL_DMA_Abort_IT+0x440>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d054      	beq.n	8003e3c <HAL_DMA_Abort_IT+0x3a0>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a52      	ldr	r2, [pc, #328]	; (8003ee0 <HAL_DMA_Abort_IT+0x444>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d04f      	beq.n	8003e3c <HAL_DMA_Abort_IT+0x3a0>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a50      	ldr	r2, [pc, #320]	; (8003ee4 <HAL_DMA_Abort_IT+0x448>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d04a      	beq.n	8003e3c <HAL_DMA_Abort_IT+0x3a0>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a4f      	ldr	r2, [pc, #316]	; (8003ee8 <HAL_DMA_Abort_IT+0x44c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d045      	beq.n	8003e3c <HAL_DMA_Abort_IT+0x3a0>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a4d      	ldr	r2, [pc, #308]	; (8003eec <HAL_DMA_Abort_IT+0x450>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d040      	beq.n	8003e3c <HAL_DMA_Abort_IT+0x3a0>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a4c      	ldr	r2, [pc, #304]	; (8003ef0 <HAL_DMA_Abort_IT+0x454>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d03b      	beq.n	8003e3c <HAL_DMA_Abort_IT+0x3a0>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a4a      	ldr	r2, [pc, #296]	; (8003ef4 <HAL_DMA_Abort_IT+0x458>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d036      	beq.n	8003e3c <HAL_DMA_Abort_IT+0x3a0>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a49      	ldr	r2, [pc, #292]	; (8003ef8 <HAL_DMA_Abort_IT+0x45c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d031      	beq.n	8003e3c <HAL_DMA_Abort_IT+0x3a0>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a47      	ldr	r2, [pc, #284]	; (8003efc <HAL_DMA_Abort_IT+0x460>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d02c      	beq.n	8003e3c <HAL_DMA_Abort_IT+0x3a0>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a46      	ldr	r2, [pc, #280]	; (8003f00 <HAL_DMA_Abort_IT+0x464>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d027      	beq.n	8003e3c <HAL_DMA_Abort_IT+0x3a0>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a44      	ldr	r2, [pc, #272]	; (8003f04 <HAL_DMA_Abort_IT+0x468>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d022      	beq.n	8003e3c <HAL_DMA_Abort_IT+0x3a0>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a43      	ldr	r2, [pc, #268]	; (8003f08 <HAL_DMA_Abort_IT+0x46c>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d01d      	beq.n	8003e3c <HAL_DMA_Abort_IT+0x3a0>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a41      	ldr	r2, [pc, #260]	; (8003f0c <HAL_DMA_Abort_IT+0x470>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d018      	beq.n	8003e3c <HAL_DMA_Abort_IT+0x3a0>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a40      	ldr	r2, [pc, #256]	; (8003f10 <HAL_DMA_Abort_IT+0x474>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d013      	beq.n	8003e3c <HAL_DMA_Abort_IT+0x3a0>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a3e      	ldr	r2, [pc, #248]	; (8003f14 <HAL_DMA_Abort_IT+0x478>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d00e      	beq.n	8003e3c <HAL_DMA_Abort_IT+0x3a0>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a3d      	ldr	r2, [pc, #244]	; (8003f18 <HAL_DMA_Abort_IT+0x47c>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d009      	beq.n	8003e3c <HAL_DMA_Abort_IT+0x3a0>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a3b      	ldr	r2, [pc, #236]	; (8003f1c <HAL_DMA_Abort_IT+0x480>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d004      	beq.n	8003e3c <HAL_DMA_Abort_IT+0x3a0>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a3a      	ldr	r2, [pc, #232]	; (8003f20 <HAL_DMA_Abort_IT+0x484>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d101      	bne.n	8003e40 <HAL_DMA_Abort_IT+0x3a4>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <HAL_DMA_Abort_IT+0x3a6>
 8003e40:	2300      	movs	r3, #0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d028      	beq.n	8003e98 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e54:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e60:	f003 031f 	and.w	r3, r3, #31
 8003e64:	2201      	movs	r2, #1
 8003e66:	409a      	lsls	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003e74:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00c      	beq.n	8003e98 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e8c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e96:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40020010 	.word	0x40020010
 8003ec8:	40020028 	.word	0x40020028
 8003ecc:	40020040 	.word	0x40020040
 8003ed0:	40020058 	.word	0x40020058
 8003ed4:	40020070 	.word	0x40020070
 8003ed8:	40020088 	.word	0x40020088
 8003edc:	400200a0 	.word	0x400200a0
 8003ee0:	400200b8 	.word	0x400200b8
 8003ee4:	40020410 	.word	0x40020410
 8003ee8:	40020428 	.word	0x40020428
 8003eec:	40020440 	.word	0x40020440
 8003ef0:	40020458 	.word	0x40020458
 8003ef4:	40020470 	.word	0x40020470
 8003ef8:	40020488 	.word	0x40020488
 8003efc:	400204a0 	.word	0x400204a0
 8003f00:	400204b8 	.word	0x400204b8
 8003f04:	58025408 	.word	0x58025408
 8003f08:	5802541c 	.word	0x5802541c
 8003f0c:	58025430 	.word	0x58025430
 8003f10:	58025444 	.word	0x58025444
 8003f14:	58025458 	.word	0x58025458
 8003f18:	5802546c 	.word	0x5802546c
 8003f1c:	58025480 	.word	0x58025480
 8003f20:	58025494 	.word	0x58025494

08003f24 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08a      	sub	sp, #40	; 0x28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f30:	4b67      	ldr	r3, [pc, #412]	; (80040d0 <HAL_DMA_IRQHandler+0x1ac>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a67      	ldr	r2, [pc, #412]	; (80040d4 <HAL_DMA_IRQHandler+0x1b0>)
 8003f36:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3a:	0a9b      	lsrs	r3, r3, #10
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f42:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f48:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a5f      	ldr	r2, [pc, #380]	; (80040d8 <HAL_DMA_IRQHandler+0x1b4>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d04a      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xd2>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a5d      	ldr	r2, [pc, #372]	; (80040dc <HAL_DMA_IRQHandler+0x1b8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d045      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xd2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a5c      	ldr	r2, [pc, #368]	; (80040e0 <HAL_DMA_IRQHandler+0x1bc>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d040      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xd2>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a5a      	ldr	r2, [pc, #360]	; (80040e4 <HAL_DMA_IRQHandler+0x1c0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d03b      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xd2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a59      	ldr	r2, [pc, #356]	; (80040e8 <HAL_DMA_IRQHandler+0x1c4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d036      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xd2>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a57      	ldr	r2, [pc, #348]	; (80040ec <HAL_DMA_IRQHandler+0x1c8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d031      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xd2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a56      	ldr	r2, [pc, #344]	; (80040f0 <HAL_DMA_IRQHandler+0x1cc>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d02c      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xd2>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a54      	ldr	r2, [pc, #336]	; (80040f4 <HAL_DMA_IRQHandler+0x1d0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d027      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xd2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a53      	ldr	r2, [pc, #332]	; (80040f8 <HAL_DMA_IRQHandler+0x1d4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d022      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xd2>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a51      	ldr	r2, [pc, #324]	; (80040fc <HAL_DMA_IRQHandler+0x1d8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d01d      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xd2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a50      	ldr	r2, [pc, #320]	; (8004100 <HAL_DMA_IRQHandler+0x1dc>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d018      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xd2>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a4e      	ldr	r2, [pc, #312]	; (8004104 <HAL_DMA_IRQHandler+0x1e0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d013      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xd2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a4d      	ldr	r2, [pc, #308]	; (8004108 <HAL_DMA_IRQHandler+0x1e4>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00e      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xd2>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a4b      	ldr	r2, [pc, #300]	; (800410c <HAL_DMA_IRQHandler+0x1e8>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d009      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xd2>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a4a      	ldr	r2, [pc, #296]	; (8004110 <HAL_DMA_IRQHandler+0x1ec>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d004      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xd2>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a48      	ldr	r2, [pc, #288]	; (8004114 <HAL_DMA_IRQHandler+0x1f0>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d101      	bne.n	8003ffa <HAL_DMA_IRQHandler+0xd6>
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e000      	b.n	8003ffc <HAL_DMA_IRQHandler+0xd8>
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 842b 	beq.w	8004858 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004006:	f003 031f 	and.w	r3, r3, #31
 800400a:	2208      	movs	r2, #8
 800400c:	409a      	lsls	r2, r3
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	4013      	ands	r3, r2
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 80a2 	beq.w	800415c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a2e      	ldr	r2, [pc, #184]	; (80040d8 <HAL_DMA_IRQHandler+0x1b4>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d04a      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x194>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a2d      	ldr	r2, [pc, #180]	; (80040dc <HAL_DMA_IRQHandler+0x1b8>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d045      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x194>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a2b      	ldr	r2, [pc, #172]	; (80040e0 <HAL_DMA_IRQHandler+0x1bc>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d040      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x194>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a2a      	ldr	r2, [pc, #168]	; (80040e4 <HAL_DMA_IRQHandler+0x1c0>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d03b      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x194>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a28      	ldr	r2, [pc, #160]	; (80040e8 <HAL_DMA_IRQHandler+0x1c4>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d036      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x194>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a27      	ldr	r2, [pc, #156]	; (80040ec <HAL_DMA_IRQHandler+0x1c8>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d031      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x194>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a25      	ldr	r2, [pc, #148]	; (80040f0 <HAL_DMA_IRQHandler+0x1cc>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d02c      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x194>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a24      	ldr	r2, [pc, #144]	; (80040f4 <HAL_DMA_IRQHandler+0x1d0>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d027      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x194>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a22      	ldr	r2, [pc, #136]	; (80040f8 <HAL_DMA_IRQHandler+0x1d4>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d022      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x194>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a21      	ldr	r2, [pc, #132]	; (80040fc <HAL_DMA_IRQHandler+0x1d8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d01d      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x194>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a1f      	ldr	r2, [pc, #124]	; (8004100 <HAL_DMA_IRQHandler+0x1dc>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d018      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x194>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a1e      	ldr	r2, [pc, #120]	; (8004104 <HAL_DMA_IRQHandler+0x1e0>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d013      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x194>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a1c      	ldr	r2, [pc, #112]	; (8004108 <HAL_DMA_IRQHandler+0x1e4>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d00e      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x194>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a1b      	ldr	r2, [pc, #108]	; (800410c <HAL_DMA_IRQHandler+0x1e8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d009      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x194>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a19      	ldr	r2, [pc, #100]	; (8004110 <HAL_DMA_IRQHandler+0x1ec>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d004      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x194>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a18      	ldr	r2, [pc, #96]	; (8004114 <HAL_DMA_IRQHandler+0x1f0>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d12f      	bne.n	8004118 <HAL_DMA_IRQHandler+0x1f4>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0304 	and.w	r3, r3, #4
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	bf14      	ite	ne
 80040c6:	2301      	movne	r3, #1
 80040c8:	2300      	moveq	r3, #0
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	e02e      	b.n	800412c <HAL_DMA_IRQHandler+0x208>
 80040ce:	bf00      	nop
 80040d0:	24000000 	.word	0x24000000
 80040d4:	1b4e81b5 	.word	0x1b4e81b5
 80040d8:	40020010 	.word	0x40020010
 80040dc:	40020028 	.word	0x40020028
 80040e0:	40020040 	.word	0x40020040
 80040e4:	40020058 	.word	0x40020058
 80040e8:	40020070 	.word	0x40020070
 80040ec:	40020088 	.word	0x40020088
 80040f0:	400200a0 	.word	0x400200a0
 80040f4:	400200b8 	.word	0x400200b8
 80040f8:	40020410 	.word	0x40020410
 80040fc:	40020428 	.word	0x40020428
 8004100:	40020440 	.word	0x40020440
 8004104:	40020458 	.word	0x40020458
 8004108:	40020470 	.word	0x40020470
 800410c:	40020488 	.word	0x40020488
 8004110:	400204a0 	.word	0x400204a0
 8004114:	400204b8 	.word	0x400204b8
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0308 	and.w	r3, r3, #8
 8004122:	2b00      	cmp	r3, #0
 8004124:	bf14      	ite	ne
 8004126:	2301      	movne	r3, #1
 8004128:	2300      	moveq	r3, #0
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	d015      	beq.n	800415c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0204 	bic.w	r2, r2, #4
 800413e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004144:	f003 031f 	and.w	r3, r3, #31
 8004148:	2208      	movs	r2, #8
 800414a:	409a      	lsls	r2, r3
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004154:	f043 0201 	orr.w	r2, r3, #1
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004160:	f003 031f 	and.w	r3, r3, #31
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	fa22 f303 	lsr.w	r3, r2, r3
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d06e      	beq.n	8004250 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a69      	ldr	r2, [pc, #420]	; (800431c <HAL_DMA_IRQHandler+0x3f8>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d04a      	beq.n	8004212 <HAL_DMA_IRQHandler+0x2ee>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a67      	ldr	r2, [pc, #412]	; (8004320 <HAL_DMA_IRQHandler+0x3fc>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d045      	beq.n	8004212 <HAL_DMA_IRQHandler+0x2ee>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a66      	ldr	r2, [pc, #408]	; (8004324 <HAL_DMA_IRQHandler+0x400>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d040      	beq.n	8004212 <HAL_DMA_IRQHandler+0x2ee>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a64      	ldr	r2, [pc, #400]	; (8004328 <HAL_DMA_IRQHandler+0x404>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d03b      	beq.n	8004212 <HAL_DMA_IRQHandler+0x2ee>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a63      	ldr	r2, [pc, #396]	; (800432c <HAL_DMA_IRQHandler+0x408>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d036      	beq.n	8004212 <HAL_DMA_IRQHandler+0x2ee>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a61      	ldr	r2, [pc, #388]	; (8004330 <HAL_DMA_IRQHandler+0x40c>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d031      	beq.n	8004212 <HAL_DMA_IRQHandler+0x2ee>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a60      	ldr	r2, [pc, #384]	; (8004334 <HAL_DMA_IRQHandler+0x410>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d02c      	beq.n	8004212 <HAL_DMA_IRQHandler+0x2ee>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a5e      	ldr	r2, [pc, #376]	; (8004338 <HAL_DMA_IRQHandler+0x414>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d027      	beq.n	8004212 <HAL_DMA_IRQHandler+0x2ee>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a5d      	ldr	r2, [pc, #372]	; (800433c <HAL_DMA_IRQHandler+0x418>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d022      	beq.n	8004212 <HAL_DMA_IRQHandler+0x2ee>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a5b      	ldr	r2, [pc, #364]	; (8004340 <HAL_DMA_IRQHandler+0x41c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d01d      	beq.n	8004212 <HAL_DMA_IRQHandler+0x2ee>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a5a      	ldr	r2, [pc, #360]	; (8004344 <HAL_DMA_IRQHandler+0x420>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d018      	beq.n	8004212 <HAL_DMA_IRQHandler+0x2ee>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a58      	ldr	r2, [pc, #352]	; (8004348 <HAL_DMA_IRQHandler+0x424>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d013      	beq.n	8004212 <HAL_DMA_IRQHandler+0x2ee>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a57      	ldr	r2, [pc, #348]	; (800434c <HAL_DMA_IRQHandler+0x428>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d00e      	beq.n	8004212 <HAL_DMA_IRQHandler+0x2ee>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a55      	ldr	r2, [pc, #340]	; (8004350 <HAL_DMA_IRQHandler+0x42c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d009      	beq.n	8004212 <HAL_DMA_IRQHandler+0x2ee>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a54      	ldr	r2, [pc, #336]	; (8004354 <HAL_DMA_IRQHandler+0x430>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d004      	beq.n	8004212 <HAL_DMA_IRQHandler+0x2ee>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a52      	ldr	r2, [pc, #328]	; (8004358 <HAL_DMA_IRQHandler+0x434>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d10a      	bne.n	8004228 <HAL_DMA_IRQHandler+0x304>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421c:	2b00      	cmp	r3, #0
 800421e:	bf14      	ite	ne
 8004220:	2301      	movne	r3, #1
 8004222:	2300      	moveq	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	e003      	b.n	8004230 <HAL_DMA_IRQHandler+0x30c>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2300      	movs	r3, #0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00d      	beq.n	8004250 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004238:	f003 031f 	and.w	r3, r3, #31
 800423c:	2201      	movs	r2, #1
 800423e:	409a      	lsls	r2, r3
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004248:	f043 0202 	orr.w	r2, r3, #2
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004254:	f003 031f 	and.w	r3, r3, #31
 8004258:	2204      	movs	r2, #4
 800425a:	409a      	lsls	r2, r3
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	4013      	ands	r3, r2
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 808f 	beq.w	8004384 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a2c      	ldr	r2, [pc, #176]	; (800431c <HAL_DMA_IRQHandler+0x3f8>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d04a      	beq.n	8004306 <HAL_DMA_IRQHandler+0x3e2>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a2a      	ldr	r2, [pc, #168]	; (8004320 <HAL_DMA_IRQHandler+0x3fc>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d045      	beq.n	8004306 <HAL_DMA_IRQHandler+0x3e2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a29      	ldr	r2, [pc, #164]	; (8004324 <HAL_DMA_IRQHandler+0x400>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d040      	beq.n	8004306 <HAL_DMA_IRQHandler+0x3e2>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a27      	ldr	r2, [pc, #156]	; (8004328 <HAL_DMA_IRQHandler+0x404>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d03b      	beq.n	8004306 <HAL_DMA_IRQHandler+0x3e2>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a26      	ldr	r2, [pc, #152]	; (800432c <HAL_DMA_IRQHandler+0x408>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d036      	beq.n	8004306 <HAL_DMA_IRQHandler+0x3e2>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a24      	ldr	r2, [pc, #144]	; (8004330 <HAL_DMA_IRQHandler+0x40c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d031      	beq.n	8004306 <HAL_DMA_IRQHandler+0x3e2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a23      	ldr	r2, [pc, #140]	; (8004334 <HAL_DMA_IRQHandler+0x410>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d02c      	beq.n	8004306 <HAL_DMA_IRQHandler+0x3e2>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a21      	ldr	r2, [pc, #132]	; (8004338 <HAL_DMA_IRQHandler+0x414>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d027      	beq.n	8004306 <HAL_DMA_IRQHandler+0x3e2>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a20      	ldr	r2, [pc, #128]	; (800433c <HAL_DMA_IRQHandler+0x418>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d022      	beq.n	8004306 <HAL_DMA_IRQHandler+0x3e2>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a1e      	ldr	r2, [pc, #120]	; (8004340 <HAL_DMA_IRQHandler+0x41c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d01d      	beq.n	8004306 <HAL_DMA_IRQHandler+0x3e2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a1d      	ldr	r2, [pc, #116]	; (8004344 <HAL_DMA_IRQHandler+0x420>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d018      	beq.n	8004306 <HAL_DMA_IRQHandler+0x3e2>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a1b      	ldr	r2, [pc, #108]	; (8004348 <HAL_DMA_IRQHandler+0x424>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d013      	beq.n	8004306 <HAL_DMA_IRQHandler+0x3e2>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a1a      	ldr	r2, [pc, #104]	; (800434c <HAL_DMA_IRQHandler+0x428>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d00e      	beq.n	8004306 <HAL_DMA_IRQHandler+0x3e2>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a18      	ldr	r2, [pc, #96]	; (8004350 <HAL_DMA_IRQHandler+0x42c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d009      	beq.n	8004306 <HAL_DMA_IRQHandler+0x3e2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a17      	ldr	r2, [pc, #92]	; (8004354 <HAL_DMA_IRQHandler+0x430>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d004      	beq.n	8004306 <HAL_DMA_IRQHandler+0x3e2>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a15      	ldr	r2, [pc, #84]	; (8004358 <HAL_DMA_IRQHandler+0x434>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d12a      	bne.n	800435c <HAL_DMA_IRQHandler+0x438>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	bf14      	ite	ne
 8004314:	2301      	movne	r3, #1
 8004316:	2300      	moveq	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	e023      	b.n	8004364 <HAL_DMA_IRQHandler+0x440>
 800431c:	40020010 	.word	0x40020010
 8004320:	40020028 	.word	0x40020028
 8004324:	40020040 	.word	0x40020040
 8004328:	40020058 	.word	0x40020058
 800432c:	40020070 	.word	0x40020070
 8004330:	40020088 	.word	0x40020088
 8004334:	400200a0 	.word	0x400200a0
 8004338:	400200b8 	.word	0x400200b8
 800433c:	40020410 	.word	0x40020410
 8004340:	40020428 	.word	0x40020428
 8004344:	40020440 	.word	0x40020440
 8004348:	40020458 	.word	0x40020458
 800434c:	40020470 	.word	0x40020470
 8004350:	40020488 	.word	0x40020488
 8004354:	400204a0 	.word	0x400204a0
 8004358:	400204b8 	.word	0x400204b8
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2300      	movs	r3, #0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00d      	beq.n	8004384 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800436c:	f003 031f 	and.w	r3, r3, #31
 8004370:	2204      	movs	r2, #4
 8004372:	409a      	lsls	r2, r3
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437c:	f043 0204 	orr.w	r2, r3, #4
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004388:	f003 031f 	and.w	r3, r3, #31
 800438c:	2210      	movs	r2, #16
 800438e:	409a      	lsls	r2, r3
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	4013      	ands	r3, r2
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 80a6 	beq.w	80044e6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a85      	ldr	r2, [pc, #532]	; (80045b4 <HAL_DMA_IRQHandler+0x690>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d04a      	beq.n	800443a <HAL_DMA_IRQHandler+0x516>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a83      	ldr	r2, [pc, #524]	; (80045b8 <HAL_DMA_IRQHandler+0x694>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d045      	beq.n	800443a <HAL_DMA_IRQHandler+0x516>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a82      	ldr	r2, [pc, #520]	; (80045bc <HAL_DMA_IRQHandler+0x698>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d040      	beq.n	800443a <HAL_DMA_IRQHandler+0x516>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a80      	ldr	r2, [pc, #512]	; (80045c0 <HAL_DMA_IRQHandler+0x69c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d03b      	beq.n	800443a <HAL_DMA_IRQHandler+0x516>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a7f      	ldr	r2, [pc, #508]	; (80045c4 <HAL_DMA_IRQHandler+0x6a0>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d036      	beq.n	800443a <HAL_DMA_IRQHandler+0x516>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a7d      	ldr	r2, [pc, #500]	; (80045c8 <HAL_DMA_IRQHandler+0x6a4>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d031      	beq.n	800443a <HAL_DMA_IRQHandler+0x516>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a7c      	ldr	r2, [pc, #496]	; (80045cc <HAL_DMA_IRQHandler+0x6a8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d02c      	beq.n	800443a <HAL_DMA_IRQHandler+0x516>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a7a      	ldr	r2, [pc, #488]	; (80045d0 <HAL_DMA_IRQHandler+0x6ac>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d027      	beq.n	800443a <HAL_DMA_IRQHandler+0x516>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a79      	ldr	r2, [pc, #484]	; (80045d4 <HAL_DMA_IRQHandler+0x6b0>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d022      	beq.n	800443a <HAL_DMA_IRQHandler+0x516>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a77      	ldr	r2, [pc, #476]	; (80045d8 <HAL_DMA_IRQHandler+0x6b4>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d01d      	beq.n	800443a <HAL_DMA_IRQHandler+0x516>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a76      	ldr	r2, [pc, #472]	; (80045dc <HAL_DMA_IRQHandler+0x6b8>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d018      	beq.n	800443a <HAL_DMA_IRQHandler+0x516>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a74      	ldr	r2, [pc, #464]	; (80045e0 <HAL_DMA_IRQHandler+0x6bc>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d013      	beq.n	800443a <HAL_DMA_IRQHandler+0x516>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a73      	ldr	r2, [pc, #460]	; (80045e4 <HAL_DMA_IRQHandler+0x6c0>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d00e      	beq.n	800443a <HAL_DMA_IRQHandler+0x516>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a71      	ldr	r2, [pc, #452]	; (80045e8 <HAL_DMA_IRQHandler+0x6c4>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d009      	beq.n	800443a <HAL_DMA_IRQHandler+0x516>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a70      	ldr	r2, [pc, #448]	; (80045ec <HAL_DMA_IRQHandler+0x6c8>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d004      	beq.n	800443a <HAL_DMA_IRQHandler+0x516>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a6e      	ldr	r2, [pc, #440]	; (80045f0 <HAL_DMA_IRQHandler+0x6cc>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d10a      	bne.n	8004450 <HAL_DMA_IRQHandler+0x52c>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0308 	and.w	r3, r3, #8
 8004444:	2b00      	cmp	r3, #0
 8004446:	bf14      	ite	ne
 8004448:	2301      	movne	r3, #1
 800444a:	2300      	moveq	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	e009      	b.n	8004464 <HAL_DMA_IRQHandler+0x540>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b00      	cmp	r3, #0
 800445c:	bf14      	ite	ne
 800445e:	2301      	movne	r3, #1
 8004460:	2300      	moveq	r3, #0
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d03e      	beq.n	80044e6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446c:	f003 031f 	and.w	r3, r3, #31
 8004470:	2210      	movs	r2, #16
 8004472:	409a      	lsls	r2, r3
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d018      	beq.n	80044b8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d108      	bne.n	80044a6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	2b00      	cmp	r3, #0
 800449a:	d024      	beq.n	80044e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	4798      	blx	r3
 80044a4:	e01f      	b.n	80044e6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d01b      	beq.n	80044e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	4798      	blx	r3
 80044b6:	e016      	b.n	80044e6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d107      	bne.n	80044d6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 0208 	bic.w	r2, r2, #8
 80044d4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ea:	f003 031f 	and.w	r3, r3, #31
 80044ee:	2220      	movs	r2, #32
 80044f0:	409a      	lsls	r2, r3
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	4013      	ands	r3, r2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 8110 	beq.w	800471c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a2c      	ldr	r2, [pc, #176]	; (80045b4 <HAL_DMA_IRQHandler+0x690>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d04a      	beq.n	800459c <HAL_DMA_IRQHandler+0x678>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a2b      	ldr	r2, [pc, #172]	; (80045b8 <HAL_DMA_IRQHandler+0x694>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d045      	beq.n	800459c <HAL_DMA_IRQHandler+0x678>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a29      	ldr	r2, [pc, #164]	; (80045bc <HAL_DMA_IRQHandler+0x698>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d040      	beq.n	800459c <HAL_DMA_IRQHandler+0x678>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a28      	ldr	r2, [pc, #160]	; (80045c0 <HAL_DMA_IRQHandler+0x69c>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d03b      	beq.n	800459c <HAL_DMA_IRQHandler+0x678>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a26      	ldr	r2, [pc, #152]	; (80045c4 <HAL_DMA_IRQHandler+0x6a0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d036      	beq.n	800459c <HAL_DMA_IRQHandler+0x678>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a25      	ldr	r2, [pc, #148]	; (80045c8 <HAL_DMA_IRQHandler+0x6a4>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d031      	beq.n	800459c <HAL_DMA_IRQHandler+0x678>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a23      	ldr	r2, [pc, #140]	; (80045cc <HAL_DMA_IRQHandler+0x6a8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d02c      	beq.n	800459c <HAL_DMA_IRQHandler+0x678>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a22      	ldr	r2, [pc, #136]	; (80045d0 <HAL_DMA_IRQHandler+0x6ac>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d027      	beq.n	800459c <HAL_DMA_IRQHandler+0x678>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a20      	ldr	r2, [pc, #128]	; (80045d4 <HAL_DMA_IRQHandler+0x6b0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d022      	beq.n	800459c <HAL_DMA_IRQHandler+0x678>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1f      	ldr	r2, [pc, #124]	; (80045d8 <HAL_DMA_IRQHandler+0x6b4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d01d      	beq.n	800459c <HAL_DMA_IRQHandler+0x678>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a1d      	ldr	r2, [pc, #116]	; (80045dc <HAL_DMA_IRQHandler+0x6b8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d018      	beq.n	800459c <HAL_DMA_IRQHandler+0x678>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1c      	ldr	r2, [pc, #112]	; (80045e0 <HAL_DMA_IRQHandler+0x6bc>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d013      	beq.n	800459c <HAL_DMA_IRQHandler+0x678>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a1a      	ldr	r2, [pc, #104]	; (80045e4 <HAL_DMA_IRQHandler+0x6c0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d00e      	beq.n	800459c <HAL_DMA_IRQHandler+0x678>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a19      	ldr	r2, [pc, #100]	; (80045e8 <HAL_DMA_IRQHandler+0x6c4>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d009      	beq.n	800459c <HAL_DMA_IRQHandler+0x678>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a17      	ldr	r2, [pc, #92]	; (80045ec <HAL_DMA_IRQHandler+0x6c8>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d004      	beq.n	800459c <HAL_DMA_IRQHandler+0x678>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a16      	ldr	r2, [pc, #88]	; (80045f0 <HAL_DMA_IRQHandler+0x6cc>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d12b      	bne.n	80045f4 <HAL_DMA_IRQHandler+0x6d0>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0310 	and.w	r3, r3, #16
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	bf14      	ite	ne
 80045aa:	2301      	movne	r3, #1
 80045ac:	2300      	moveq	r3, #0
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	e02a      	b.n	8004608 <HAL_DMA_IRQHandler+0x6e4>
 80045b2:	bf00      	nop
 80045b4:	40020010 	.word	0x40020010
 80045b8:	40020028 	.word	0x40020028
 80045bc:	40020040 	.word	0x40020040
 80045c0:	40020058 	.word	0x40020058
 80045c4:	40020070 	.word	0x40020070
 80045c8:	40020088 	.word	0x40020088
 80045cc:	400200a0 	.word	0x400200a0
 80045d0:	400200b8 	.word	0x400200b8
 80045d4:	40020410 	.word	0x40020410
 80045d8:	40020428 	.word	0x40020428
 80045dc:	40020440 	.word	0x40020440
 80045e0:	40020458 	.word	0x40020458
 80045e4:	40020470 	.word	0x40020470
 80045e8:	40020488 	.word	0x40020488
 80045ec:	400204a0 	.word	0x400204a0
 80045f0:	400204b8 	.word	0x400204b8
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	bf14      	ite	ne
 8004602:	2301      	movne	r3, #1
 8004604:	2300      	moveq	r3, #0
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 8087 	beq.w	800471c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004612:	f003 031f 	and.w	r3, r3, #31
 8004616:	2220      	movs	r2, #32
 8004618:	409a      	lsls	r2, r3
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b04      	cmp	r3, #4
 8004628:	d139      	bne.n	800469e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 0216 	bic.w	r2, r2, #22
 8004638:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695a      	ldr	r2, [r3, #20]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004648:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	2b00      	cmp	r3, #0
 8004650:	d103      	bne.n	800465a <HAL_DMA_IRQHandler+0x736>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004656:	2b00      	cmp	r3, #0
 8004658:	d007      	beq.n	800466a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 0208 	bic.w	r2, r2, #8
 8004668:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466e:	f003 031f 	and.w	r3, r3, #31
 8004672:	223f      	movs	r2, #63	; 0x3f
 8004674:	409a      	lsls	r2, r3
 8004676:	6a3b      	ldr	r3, [r7, #32]
 8004678:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 834a 	beq.w	8004d28 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	4798      	blx	r3
          }
          return;
 800469c:	e344      	b.n	8004d28 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d018      	beq.n	80046de <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d108      	bne.n	80046cc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d02c      	beq.n	800471c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	4798      	blx	r3
 80046ca:	e027      	b.n	800471c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d023      	beq.n	800471c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	4798      	blx	r3
 80046dc:	e01e      	b.n	800471c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10f      	bne.n	800470c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0210 	bic.w	r2, r2, #16
 80046fa:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 8306 	beq.w	8004d32 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 8088 	beq.w	8004844 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2204      	movs	r2, #4
 8004738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a7a      	ldr	r2, [pc, #488]	; (800492c <HAL_DMA_IRQHandler+0xa08>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d04a      	beq.n	80047dc <HAL_DMA_IRQHandler+0x8b8>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a79      	ldr	r2, [pc, #484]	; (8004930 <HAL_DMA_IRQHandler+0xa0c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d045      	beq.n	80047dc <HAL_DMA_IRQHandler+0x8b8>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a77      	ldr	r2, [pc, #476]	; (8004934 <HAL_DMA_IRQHandler+0xa10>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d040      	beq.n	80047dc <HAL_DMA_IRQHandler+0x8b8>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a76      	ldr	r2, [pc, #472]	; (8004938 <HAL_DMA_IRQHandler+0xa14>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d03b      	beq.n	80047dc <HAL_DMA_IRQHandler+0x8b8>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a74      	ldr	r2, [pc, #464]	; (800493c <HAL_DMA_IRQHandler+0xa18>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d036      	beq.n	80047dc <HAL_DMA_IRQHandler+0x8b8>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a73      	ldr	r2, [pc, #460]	; (8004940 <HAL_DMA_IRQHandler+0xa1c>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d031      	beq.n	80047dc <HAL_DMA_IRQHandler+0x8b8>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a71      	ldr	r2, [pc, #452]	; (8004944 <HAL_DMA_IRQHandler+0xa20>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d02c      	beq.n	80047dc <HAL_DMA_IRQHandler+0x8b8>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a70      	ldr	r2, [pc, #448]	; (8004948 <HAL_DMA_IRQHandler+0xa24>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d027      	beq.n	80047dc <HAL_DMA_IRQHandler+0x8b8>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a6e      	ldr	r2, [pc, #440]	; (800494c <HAL_DMA_IRQHandler+0xa28>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d022      	beq.n	80047dc <HAL_DMA_IRQHandler+0x8b8>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a6d      	ldr	r2, [pc, #436]	; (8004950 <HAL_DMA_IRQHandler+0xa2c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d01d      	beq.n	80047dc <HAL_DMA_IRQHandler+0x8b8>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a6b      	ldr	r2, [pc, #428]	; (8004954 <HAL_DMA_IRQHandler+0xa30>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d018      	beq.n	80047dc <HAL_DMA_IRQHandler+0x8b8>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a6a      	ldr	r2, [pc, #424]	; (8004958 <HAL_DMA_IRQHandler+0xa34>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d013      	beq.n	80047dc <HAL_DMA_IRQHandler+0x8b8>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a68      	ldr	r2, [pc, #416]	; (800495c <HAL_DMA_IRQHandler+0xa38>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00e      	beq.n	80047dc <HAL_DMA_IRQHandler+0x8b8>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a67      	ldr	r2, [pc, #412]	; (8004960 <HAL_DMA_IRQHandler+0xa3c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d009      	beq.n	80047dc <HAL_DMA_IRQHandler+0x8b8>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a65      	ldr	r2, [pc, #404]	; (8004964 <HAL_DMA_IRQHandler+0xa40>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d004      	beq.n	80047dc <HAL_DMA_IRQHandler+0x8b8>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a64      	ldr	r2, [pc, #400]	; (8004968 <HAL_DMA_IRQHandler+0xa44>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d108      	bne.n	80047ee <HAL_DMA_IRQHandler+0x8ca>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0201 	bic.w	r2, r2, #1
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	e007      	b.n	80047fe <HAL_DMA_IRQHandler+0x8da>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0201 	bic.w	r2, r2, #1
 80047fc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	3301      	adds	r3, #1
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004806:	429a      	cmp	r2, r3
 8004808:	d307      	bcc.n	800481a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1f2      	bne.n	80047fe <HAL_DMA_IRQHandler+0x8da>
 8004818:	e000      	b.n	800481c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800481a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d004      	beq.n	800483c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2203      	movs	r2, #3
 8004836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800483a:	e003      	b.n	8004844 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 8272 	beq.w	8004d32 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	4798      	blx	r3
 8004856:	e26c      	b.n	8004d32 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a43      	ldr	r2, [pc, #268]	; (800496c <HAL_DMA_IRQHandler+0xa48>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d022      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x984>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a42      	ldr	r2, [pc, #264]	; (8004970 <HAL_DMA_IRQHandler+0xa4c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d01d      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x984>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a40      	ldr	r2, [pc, #256]	; (8004974 <HAL_DMA_IRQHandler+0xa50>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d018      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x984>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a3f      	ldr	r2, [pc, #252]	; (8004978 <HAL_DMA_IRQHandler+0xa54>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d013      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x984>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a3d      	ldr	r2, [pc, #244]	; (800497c <HAL_DMA_IRQHandler+0xa58>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d00e      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x984>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a3c      	ldr	r2, [pc, #240]	; (8004980 <HAL_DMA_IRQHandler+0xa5c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d009      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x984>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a3a      	ldr	r2, [pc, #232]	; (8004984 <HAL_DMA_IRQHandler+0xa60>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d004      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x984>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a39      	ldr	r2, [pc, #228]	; (8004988 <HAL_DMA_IRQHandler+0xa64>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d101      	bne.n	80048ac <HAL_DMA_IRQHandler+0x988>
 80048a8:	2301      	movs	r3, #1
 80048aa:	e000      	b.n	80048ae <HAL_DMA_IRQHandler+0x98a>
 80048ac:	2300      	movs	r3, #0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 823f 	beq.w	8004d32 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c0:	f003 031f 	and.w	r3, r3, #31
 80048c4:	2204      	movs	r2, #4
 80048c6:	409a      	lsls	r2, r3
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	4013      	ands	r3, r2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 80cd 	beq.w	8004a6c <HAL_DMA_IRQHandler+0xb48>
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 80c7 	beq.w	8004a6c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e2:	f003 031f 	and.w	r3, r3, #31
 80048e6:	2204      	movs	r2, #4
 80048e8:	409a      	lsls	r2, r3
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d049      	beq.n	800498c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d109      	bne.n	8004916 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 8210 	beq.w	8004d2c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004914:	e20a      	b.n	8004d2c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 8206 	beq.w	8004d2c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004928:	e200      	b.n	8004d2c <HAL_DMA_IRQHandler+0xe08>
 800492a:	bf00      	nop
 800492c:	40020010 	.word	0x40020010
 8004930:	40020028 	.word	0x40020028
 8004934:	40020040 	.word	0x40020040
 8004938:	40020058 	.word	0x40020058
 800493c:	40020070 	.word	0x40020070
 8004940:	40020088 	.word	0x40020088
 8004944:	400200a0 	.word	0x400200a0
 8004948:	400200b8 	.word	0x400200b8
 800494c:	40020410 	.word	0x40020410
 8004950:	40020428 	.word	0x40020428
 8004954:	40020440 	.word	0x40020440
 8004958:	40020458 	.word	0x40020458
 800495c:	40020470 	.word	0x40020470
 8004960:	40020488 	.word	0x40020488
 8004964:	400204a0 	.word	0x400204a0
 8004968:	400204b8 	.word	0x400204b8
 800496c:	58025408 	.word	0x58025408
 8004970:	5802541c 	.word	0x5802541c
 8004974:	58025430 	.word	0x58025430
 8004978:	58025444 	.word	0x58025444
 800497c:	58025458 	.word	0x58025458
 8004980:	5802546c 	.word	0x5802546c
 8004984:	58025480 	.word	0x58025480
 8004988:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f003 0320 	and.w	r3, r3, #32
 8004992:	2b00      	cmp	r3, #0
 8004994:	d160      	bne.n	8004a58 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a8c      	ldr	r2, [pc, #560]	; (8004bcc <HAL_DMA_IRQHandler+0xca8>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d04a      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xb12>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a8a      	ldr	r2, [pc, #552]	; (8004bd0 <HAL_DMA_IRQHandler+0xcac>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d045      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xb12>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a89      	ldr	r2, [pc, #548]	; (8004bd4 <HAL_DMA_IRQHandler+0xcb0>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d040      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xb12>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a87      	ldr	r2, [pc, #540]	; (8004bd8 <HAL_DMA_IRQHandler+0xcb4>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d03b      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xb12>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a86      	ldr	r2, [pc, #536]	; (8004bdc <HAL_DMA_IRQHandler+0xcb8>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d036      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xb12>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a84      	ldr	r2, [pc, #528]	; (8004be0 <HAL_DMA_IRQHandler+0xcbc>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d031      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xb12>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a83      	ldr	r2, [pc, #524]	; (8004be4 <HAL_DMA_IRQHandler+0xcc0>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d02c      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xb12>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a81      	ldr	r2, [pc, #516]	; (8004be8 <HAL_DMA_IRQHandler+0xcc4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d027      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xb12>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a80      	ldr	r2, [pc, #512]	; (8004bec <HAL_DMA_IRQHandler+0xcc8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d022      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xb12>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a7e      	ldr	r2, [pc, #504]	; (8004bf0 <HAL_DMA_IRQHandler+0xccc>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d01d      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xb12>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a7d      	ldr	r2, [pc, #500]	; (8004bf4 <HAL_DMA_IRQHandler+0xcd0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d018      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xb12>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a7b      	ldr	r2, [pc, #492]	; (8004bf8 <HAL_DMA_IRQHandler+0xcd4>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d013      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xb12>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a7a      	ldr	r2, [pc, #488]	; (8004bfc <HAL_DMA_IRQHandler+0xcd8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d00e      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xb12>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a78      	ldr	r2, [pc, #480]	; (8004c00 <HAL_DMA_IRQHandler+0xcdc>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d009      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xb12>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a77      	ldr	r2, [pc, #476]	; (8004c04 <HAL_DMA_IRQHandler+0xce0>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d004      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xb12>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a75      	ldr	r2, [pc, #468]	; (8004c08 <HAL_DMA_IRQHandler+0xce4>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d108      	bne.n	8004a48 <HAL_DMA_IRQHandler+0xb24>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 0208 	bic.w	r2, r2, #8
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	e007      	b.n	8004a58 <HAL_DMA_IRQHandler+0xb34>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0204 	bic.w	r2, r2, #4
 8004a56:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 8165 	beq.w	8004d2c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a6a:	e15f      	b.n	8004d2c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a70:	f003 031f 	and.w	r3, r3, #31
 8004a74:	2202      	movs	r2, #2
 8004a76:	409a      	lsls	r2, r3
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 80c5 	beq.w	8004c0c <HAL_DMA_IRQHandler+0xce8>
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 80bf 	beq.w	8004c0c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a92:	f003 031f 	and.w	r3, r3, #31
 8004a96:	2202      	movs	r2, #2
 8004a98:	409a      	lsls	r2, r3
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d018      	beq.n	8004ada <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d109      	bne.n	8004ac6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 813a 	beq.w	8004d30 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ac4:	e134      	b.n	8004d30 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 8130 	beq.w	8004d30 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ad8:	e12a      	b.n	8004d30 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f003 0320 	and.w	r3, r3, #32
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d168      	bne.n	8004bb6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a38      	ldr	r2, [pc, #224]	; (8004bcc <HAL_DMA_IRQHandler+0xca8>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d04a      	beq.n	8004b84 <HAL_DMA_IRQHandler+0xc60>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a37      	ldr	r2, [pc, #220]	; (8004bd0 <HAL_DMA_IRQHandler+0xcac>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d045      	beq.n	8004b84 <HAL_DMA_IRQHandler+0xc60>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a35      	ldr	r2, [pc, #212]	; (8004bd4 <HAL_DMA_IRQHandler+0xcb0>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d040      	beq.n	8004b84 <HAL_DMA_IRQHandler+0xc60>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a34      	ldr	r2, [pc, #208]	; (8004bd8 <HAL_DMA_IRQHandler+0xcb4>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d03b      	beq.n	8004b84 <HAL_DMA_IRQHandler+0xc60>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a32      	ldr	r2, [pc, #200]	; (8004bdc <HAL_DMA_IRQHandler+0xcb8>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d036      	beq.n	8004b84 <HAL_DMA_IRQHandler+0xc60>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a31      	ldr	r2, [pc, #196]	; (8004be0 <HAL_DMA_IRQHandler+0xcbc>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d031      	beq.n	8004b84 <HAL_DMA_IRQHandler+0xc60>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a2f      	ldr	r2, [pc, #188]	; (8004be4 <HAL_DMA_IRQHandler+0xcc0>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d02c      	beq.n	8004b84 <HAL_DMA_IRQHandler+0xc60>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a2e      	ldr	r2, [pc, #184]	; (8004be8 <HAL_DMA_IRQHandler+0xcc4>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d027      	beq.n	8004b84 <HAL_DMA_IRQHandler+0xc60>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a2c      	ldr	r2, [pc, #176]	; (8004bec <HAL_DMA_IRQHandler+0xcc8>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d022      	beq.n	8004b84 <HAL_DMA_IRQHandler+0xc60>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a2b      	ldr	r2, [pc, #172]	; (8004bf0 <HAL_DMA_IRQHandler+0xccc>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d01d      	beq.n	8004b84 <HAL_DMA_IRQHandler+0xc60>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a29      	ldr	r2, [pc, #164]	; (8004bf4 <HAL_DMA_IRQHandler+0xcd0>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d018      	beq.n	8004b84 <HAL_DMA_IRQHandler+0xc60>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a28      	ldr	r2, [pc, #160]	; (8004bf8 <HAL_DMA_IRQHandler+0xcd4>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d013      	beq.n	8004b84 <HAL_DMA_IRQHandler+0xc60>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a26      	ldr	r2, [pc, #152]	; (8004bfc <HAL_DMA_IRQHandler+0xcd8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d00e      	beq.n	8004b84 <HAL_DMA_IRQHandler+0xc60>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a25      	ldr	r2, [pc, #148]	; (8004c00 <HAL_DMA_IRQHandler+0xcdc>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d009      	beq.n	8004b84 <HAL_DMA_IRQHandler+0xc60>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a23      	ldr	r2, [pc, #140]	; (8004c04 <HAL_DMA_IRQHandler+0xce0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d004      	beq.n	8004b84 <HAL_DMA_IRQHandler+0xc60>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a22      	ldr	r2, [pc, #136]	; (8004c08 <HAL_DMA_IRQHandler+0xce4>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d108      	bne.n	8004b96 <HAL_DMA_IRQHandler+0xc72>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0214 	bic.w	r2, r2, #20
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	e007      	b.n	8004ba6 <HAL_DMA_IRQHandler+0xc82>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 020a 	bic.w	r2, r2, #10
 8004ba4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 80b8 	beq.w	8004d30 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bc8:	e0b2      	b.n	8004d30 <HAL_DMA_IRQHandler+0xe0c>
 8004bca:	bf00      	nop
 8004bcc:	40020010 	.word	0x40020010
 8004bd0:	40020028 	.word	0x40020028
 8004bd4:	40020040 	.word	0x40020040
 8004bd8:	40020058 	.word	0x40020058
 8004bdc:	40020070 	.word	0x40020070
 8004be0:	40020088 	.word	0x40020088
 8004be4:	400200a0 	.word	0x400200a0
 8004be8:	400200b8 	.word	0x400200b8
 8004bec:	40020410 	.word	0x40020410
 8004bf0:	40020428 	.word	0x40020428
 8004bf4:	40020440 	.word	0x40020440
 8004bf8:	40020458 	.word	0x40020458
 8004bfc:	40020470 	.word	0x40020470
 8004c00:	40020488 	.word	0x40020488
 8004c04:	400204a0 	.word	0x400204a0
 8004c08:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c10:	f003 031f 	and.w	r3, r3, #31
 8004c14:	2208      	movs	r2, #8
 8004c16:	409a      	lsls	r2, r3
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 8088 	beq.w	8004d32 <HAL_DMA_IRQHandler+0xe0e>
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f003 0308 	and.w	r3, r3, #8
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 8082 	beq.w	8004d32 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a41      	ldr	r2, [pc, #260]	; (8004d38 <HAL_DMA_IRQHandler+0xe14>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d04a      	beq.n	8004cce <HAL_DMA_IRQHandler+0xdaa>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a3f      	ldr	r2, [pc, #252]	; (8004d3c <HAL_DMA_IRQHandler+0xe18>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d045      	beq.n	8004cce <HAL_DMA_IRQHandler+0xdaa>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a3e      	ldr	r2, [pc, #248]	; (8004d40 <HAL_DMA_IRQHandler+0xe1c>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d040      	beq.n	8004cce <HAL_DMA_IRQHandler+0xdaa>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a3c      	ldr	r2, [pc, #240]	; (8004d44 <HAL_DMA_IRQHandler+0xe20>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d03b      	beq.n	8004cce <HAL_DMA_IRQHandler+0xdaa>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a3b      	ldr	r2, [pc, #236]	; (8004d48 <HAL_DMA_IRQHandler+0xe24>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d036      	beq.n	8004cce <HAL_DMA_IRQHandler+0xdaa>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a39      	ldr	r2, [pc, #228]	; (8004d4c <HAL_DMA_IRQHandler+0xe28>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d031      	beq.n	8004cce <HAL_DMA_IRQHandler+0xdaa>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a38      	ldr	r2, [pc, #224]	; (8004d50 <HAL_DMA_IRQHandler+0xe2c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d02c      	beq.n	8004cce <HAL_DMA_IRQHandler+0xdaa>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a36      	ldr	r2, [pc, #216]	; (8004d54 <HAL_DMA_IRQHandler+0xe30>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d027      	beq.n	8004cce <HAL_DMA_IRQHandler+0xdaa>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a35      	ldr	r2, [pc, #212]	; (8004d58 <HAL_DMA_IRQHandler+0xe34>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d022      	beq.n	8004cce <HAL_DMA_IRQHandler+0xdaa>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a33      	ldr	r2, [pc, #204]	; (8004d5c <HAL_DMA_IRQHandler+0xe38>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d01d      	beq.n	8004cce <HAL_DMA_IRQHandler+0xdaa>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a32      	ldr	r2, [pc, #200]	; (8004d60 <HAL_DMA_IRQHandler+0xe3c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d018      	beq.n	8004cce <HAL_DMA_IRQHandler+0xdaa>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a30      	ldr	r2, [pc, #192]	; (8004d64 <HAL_DMA_IRQHandler+0xe40>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d013      	beq.n	8004cce <HAL_DMA_IRQHandler+0xdaa>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a2f      	ldr	r2, [pc, #188]	; (8004d68 <HAL_DMA_IRQHandler+0xe44>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d00e      	beq.n	8004cce <HAL_DMA_IRQHandler+0xdaa>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a2d      	ldr	r2, [pc, #180]	; (8004d6c <HAL_DMA_IRQHandler+0xe48>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d009      	beq.n	8004cce <HAL_DMA_IRQHandler+0xdaa>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a2c      	ldr	r2, [pc, #176]	; (8004d70 <HAL_DMA_IRQHandler+0xe4c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d004      	beq.n	8004cce <HAL_DMA_IRQHandler+0xdaa>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a2a      	ldr	r2, [pc, #168]	; (8004d74 <HAL_DMA_IRQHandler+0xe50>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d108      	bne.n	8004ce0 <HAL_DMA_IRQHandler+0xdbc>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 021c 	bic.w	r2, r2, #28
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	e007      	b.n	8004cf0 <HAL_DMA_IRQHandler+0xdcc>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 020e 	bic.w	r2, r2, #14
 8004cee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf4:	f003 031f 	and.w	r3, r3, #31
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	409a      	lsls	r2, r3
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d009      	beq.n	8004d32 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	4798      	blx	r3
 8004d26:	e004      	b.n	8004d32 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004d28:	bf00      	nop
 8004d2a:	e002      	b.n	8004d32 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d2c:	bf00      	nop
 8004d2e:	e000      	b.n	8004d32 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d30:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004d32:	3728      	adds	r7, #40	; 0x28
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	40020010 	.word	0x40020010
 8004d3c:	40020028 	.word	0x40020028
 8004d40:	40020040 	.word	0x40020040
 8004d44:	40020058 	.word	0x40020058
 8004d48:	40020070 	.word	0x40020070
 8004d4c:	40020088 	.word	0x40020088
 8004d50:	400200a0 	.word	0x400200a0
 8004d54:	400200b8 	.word	0x400200b8
 8004d58:	40020410 	.word	0x40020410
 8004d5c:	40020428 	.word	0x40020428
 8004d60:	40020440 	.word	0x40020440
 8004d64:	40020458 	.word	0x40020458
 8004d68:	40020470 	.word	0x40020470
 8004d6c:	40020488 	.word	0x40020488
 8004d70:	400204a0 	.word	0x400204a0
 8004d74:	400204b8 	.word	0x400204b8

08004d78 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b087      	sub	sp, #28
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
 8004d84:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d90:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a84      	ldr	r2, [pc, #528]	; (8004fa8 <DMA_SetConfig+0x230>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d072      	beq.n	8004e82 <DMA_SetConfig+0x10a>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a82      	ldr	r2, [pc, #520]	; (8004fac <DMA_SetConfig+0x234>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d06d      	beq.n	8004e82 <DMA_SetConfig+0x10a>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a81      	ldr	r2, [pc, #516]	; (8004fb0 <DMA_SetConfig+0x238>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d068      	beq.n	8004e82 <DMA_SetConfig+0x10a>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a7f      	ldr	r2, [pc, #508]	; (8004fb4 <DMA_SetConfig+0x23c>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d063      	beq.n	8004e82 <DMA_SetConfig+0x10a>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a7e      	ldr	r2, [pc, #504]	; (8004fb8 <DMA_SetConfig+0x240>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d05e      	beq.n	8004e82 <DMA_SetConfig+0x10a>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a7c      	ldr	r2, [pc, #496]	; (8004fbc <DMA_SetConfig+0x244>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d059      	beq.n	8004e82 <DMA_SetConfig+0x10a>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a7b      	ldr	r2, [pc, #492]	; (8004fc0 <DMA_SetConfig+0x248>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d054      	beq.n	8004e82 <DMA_SetConfig+0x10a>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a79      	ldr	r2, [pc, #484]	; (8004fc4 <DMA_SetConfig+0x24c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d04f      	beq.n	8004e82 <DMA_SetConfig+0x10a>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a78      	ldr	r2, [pc, #480]	; (8004fc8 <DMA_SetConfig+0x250>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d04a      	beq.n	8004e82 <DMA_SetConfig+0x10a>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a76      	ldr	r2, [pc, #472]	; (8004fcc <DMA_SetConfig+0x254>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d045      	beq.n	8004e82 <DMA_SetConfig+0x10a>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a75      	ldr	r2, [pc, #468]	; (8004fd0 <DMA_SetConfig+0x258>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d040      	beq.n	8004e82 <DMA_SetConfig+0x10a>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a73      	ldr	r2, [pc, #460]	; (8004fd4 <DMA_SetConfig+0x25c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d03b      	beq.n	8004e82 <DMA_SetConfig+0x10a>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a72      	ldr	r2, [pc, #456]	; (8004fd8 <DMA_SetConfig+0x260>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d036      	beq.n	8004e82 <DMA_SetConfig+0x10a>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a70      	ldr	r2, [pc, #448]	; (8004fdc <DMA_SetConfig+0x264>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d031      	beq.n	8004e82 <DMA_SetConfig+0x10a>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a6f      	ldr	r2, [pc, #444]	; (8004fe0 <DMA_SetConfig+0x268>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d02c      	beq.n	8004e82 <DMA_SetConfig+0x10a>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a6d      	ldr	r2, [pc, #436]	; (8004fe4 <DMA_SetConfig+0x26c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d027      	beq.n	8004e82 <DMA_SetConfig+0x10a>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a6c      	ldr	r2, [pc, #432]	; (8004fe8 <DMA_SetConfig+0x270>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d022      	beq.n	8004e82 <DMA_SetConfig+0x10a>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a6a      	ldr	r2, [pc, #424]	; (8004fec <DMA_SetConfig+0x274>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d01d      	beq.n	8004e82 <DMA_SetConfig+0x10a>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a69      	ldr	r2, [pc, #420]	; (8004ff0 <DMA_SetConfig+0x278>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d018      	beq.n	8004e82 <DMA_SetConfig+0x10a>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a67      	ldr	r2, [pc, #412]	; (8004ff4 <DMA_SetConfig+0x27c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d013      	beq.n	8004e82 <DMA_SetConfig+0x10a>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a66      	ldr	r2, [pc, #408]	; (8004ff8 <DMA_SetConfig+0x280>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d00e      	beq.n	8004e82 <DMA_SetConfig+0x10a>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a64      	ldr	r2, [pc, #400]	; (8004ffc <DMA_SetConfig+0x284>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d009      	beq.n	8004e82 <DMA_SetConfig+0x10a>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a63      	ldr	r2, [pc, #396]	; (8005000 <DMA_SetConfig+0x288>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d004      	beq.n	8004e82 <DMA_SetConfig+0x10a>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a61      	ldr	r2, [pc, #388]	; (8005004 <DMA_SetConfig+0x28c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d101      	bne.n	8004e86 <DMA_SetConfig+0x10e>
 8004e82:	2301      	movs	r3, #1
 8004e84:	e000      	b.n	8004e88 <DMA_SetConfig+0x110>
 8004e86:	2300      	movs	r3, #0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00d      	beq.n	8004ea8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e94:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d004      	beq.n	8004ea8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004ea6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a3e      	ldr	r2, [pc, #248]	; (8004fa8 <DMA_SetConfig+0x230>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d04a      	beq.n	8004f48 <DMA_SetConfig+0x1d0>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a3d      	ldr	r2, [pc, #244]	; (8004fac <DMA_SetConfig+0x234>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d045      	beq.n	8004f48 <DMA_SetConfig+0x1d0>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a3b      	ldr	r2, [pc, #236]	; (8004fb0 <DMA_SetConfig+0x238>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d040      	beq.n	8004f48 <DMA_SetConfig+0x1d0>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a3a      	ldr	r2, [pc, #232]	; (8004fb4 <DMA_SetConfig+0x23c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d03b      	beq.n	8004f48 <DMA_SetConfig+0x1d0>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a38      	ldr	r2, [pc, #224]	; (8004fb8 <DMA_SetConfig+0x240>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d036      	beq.n	8004f48 <DMA_SetConfig+0x1d0>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a37      	ldr	r2, [pc, #220]	; (8004fbc <DMA_SetConfig+0x244>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d031      	beq.n	8004f48 <DMA_SetConfig+0x1d0>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a35      	ldr	r2, [pc, #212]	; (8004fc0 <DMA_SetConfig+0x248>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d02c      	beq.n	8004f48 <DMA_SetConfig+0x1d0>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a34      	ldr	r2, [pc, #208]	; (8004fc4 <DMA_SetConfig+0x24c>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d027      	beq.n	8004f48 <DMA_SetConfig+0x1d0>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a32      	ldr	r2, [pc, #200]	; (8004fc8 <DMA_SetConfig+0x250>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d022      	beq.n	8004f48 <DMA_SetConfig+0x1d0>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a31      	ldr	r2, [pc, #196]	; (8004fcc <DMA_SetConfig+0x254>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d01d      	beq.n	8004f48 <DMA_SetConfig+0x1d0>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a2f      	ldr	r2, [pc, #188]	; (8004fd0 <DMA_SetConfig+0x258>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d018      	beq.n	8004f48 <DMA_SetConfig+0x1d0>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a2e      	ldr	r2, [pc, #184]	; (8004fd4 <DMA_SetConfig+0x25c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d013      	beq.n	8004f48 <DMA_SetConfig+0x1d0>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a2c      	ldr	r2, [pc, #176]	; (8004fd8 <DMA_SetConfig+0x260>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d00e      	beq.n	8004f48 <DMA_SetConfig+0x1d0>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a2b      	ldr	r2, [pc, #172]	; (8004fdc <DMA_SetConfig+0x264>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d009      	beq.n	8004f48 <DMA_SetConfig+0x1d0>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a29      	ldr	r2, [pc, #164]	; (8004fe0 <DMA_SetConfig+0x268>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d004      	beq.n	8004f48 <DMA_SetConfig+0x1d0>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a28      	ldr	r2, [pc, #160]	; (8004fe4 <DMA_SetConfig+0x26c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d101      	bne.n	8004f4c <DMA_SetConfig+0x1d4>
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e000      	b.n	8004f4e <DMA_SetConfig+0x1d6>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d05a      	beq.n	8005008 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f56:	f003 031f 	and.w	r3, r3, #31
 8004f5a:	223f      	movs	r2, #63	; 0x3f
 8004f5c:	409a      	lsls	r2, r3
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f70:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	2b40      	cmp	r3, #64	; 0x40
 8004f80:	d108      	bne.n	8004f94 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004f92:	e087      	b.n	80050a4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	60da      	str	r2, [r3, #12]
}
 8004fa4:	e07e      	b.n	80050a4 <DMA_SetConfig+0x32c>
 8004fa6:	bf00      	nop
 8004fa8:	40020010 	.word	0x40020010
 8004fac:	40020028 	.word	0x40020028
 8004fb0:	40020040 	.word	0x40020040
 8004fb4:	40020058 	.word	0x40020058
 8004fb8:	40020070 	.word	0x40020070
 8004fbc:	40020088 	.word	0x40020088
 8004fc0:	400200a0 	.word	0x400200a0
 8004fc4:	400200b8 	.word	0x400200b8
 8004fc8:	40020410 	.word	0x40020410
 8004fcc:	40020428 	.word	0x40020428
 8004fd0:	40020440 	.word	0x40020440
 8004fd4:	40020458 	.word	0x40020458
 8004fd8:	40020470 	.word	0x40020470
 8004fdc:	40020488 	.word	0x40020488
 8004fe0:	400204a0 	.word	0x400204a0
 8004fe4:	400204b8 	.word	0x400204b8
 8004fe8:	58025408 	.word	0x58025408
 8004fec:	5802541c 	.word	0x5802541c
 8004ff0:	58025430 	.word	0x58025430
 8004ff4:	58025444 	.word	0x58025444
 8004ff8:	58025458 	.word	0x58025458
 8004ffc:	5802546c 	.word	0x5802546c
 8005000:	58025480 	.word	0x58025480
 8005004:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a28      	ldr	r2, [pc, #160]	; (80050b0 <DMA_SetConfig+0x338>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d022      	beq.n	8005058 <DMA_SetConfig+0x2e0>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a27      	ldr	r2, [pc, #156]	; (80050b4 <DMA_SetConfig+0x33c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d01d      	beq.n	8005058 <DMA_SetConfig+0x2e0>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a25      	ldr	r2, [pc, #148]	; (80050b8 <DMA_SetConfig+0x340>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d018      	beq.n	8005058 <DMA_SetConfig+0x2e0>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a24      	ldr	r2, [pc, #144]	; (80050bc <DMA_SetConfig+0x344>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d013      	beq.n	8005058 <DMA_SetConfig+0x2e0>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a22      	ldr	r2, [pc, #136]	; (80050c0 <DMA_SetConfig+0x348>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00e      	beq.n	8005058 <DMA_SetConfig+0x2e0>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a21      	ldr	r2, [pc, #132]	; (80050c4 <DMA_SetConfig+0x34c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d009      	beq.n	8005058 <DMA_SetConfig+0x2e0>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a1f      	ldr	r2, [pc, #124]	; (80050c8 <DMA_SetConfig+0x350>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d004      	beq.n	8005058 <DMA_SetConfig+0x2e0>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a1e      	ldr	r2, [pc, #120]	; (80050cc <DMA_SetConfig+0x354>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d101      	bne.n	800505c <DMA_SetConfig+0x2e4>
 8005058:	2301      	movs	r3, #1
 800505a:	e000      	b.n	800505e <DMA_SetConfig+0x2e6>
 800505c:	2300      	movs	r3, #0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d020      	beq.n	80050a4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005066:	f003 031f 	and.w	r3, r3, #31
 800506a:	2201      	movs	r2, #1
 800506c:	409a      	lsls	r2, r3
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	2b40      	cmp	r3, #64	; 0x40
 8005080:	d108      	bne.n	8005094 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	60da      	str	r2, [r3, #12]
}
 8005092:	e007      	b.n	80050a4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	60da      	str	r2, [r3, #12]
}
 80050a4:	bf00      	nop
 80050a6:	371c      	adds	r7, #28
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr
 80050b0:	58025408 	.word	0x58025408
 80050b4:	5802541c 	.word	0x5802541c
 80050b8:	58025430 	.word	0x58025430
 80050bc:	58025444 	.word	0x58025444
 80050c0:	58025458 	.word	0x58025458
 80050c4:	5802546c 	.word	0x5802546c
 80050c8:	58025480 	.word	0x58025480
 80050cc:	58025494 	.word	0x58025494

080050d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a42      	ldr	r2, [pc, #264]	; (80051e8 <DMA_CalcBaseAndBitshift+0x118>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d04a      	beq.n	8005178 <DMA_CalcBaseAndBitshift+0xa8>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a41      	ldr	r2, [pc, #260]	; (80051ec <DMA_CalcBaseAndBitshift+0x11c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d045      	beq.n	8005178 <DMA_CalcBaseAndBitshift+0xa8>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a3f      	ldr	r2, [pc, #252]	; (80051f0 <DMA_CalcBaseAndBitshift+0x120>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d040      	beq.n	8005178 <DMA_CalcBaseAndBitshift+0xa8>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a3e      	ldr	r2, [pc, #248]	; (80051f4 <DMA_CalcBaseAndBitshift+0x124>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d03b      	beq.n	8005178 <DMA_CalcBaseAndBitshift+0xa8>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a3c      	ldr	r2, [pc, #240]	; (80051f8 <DMA_CalcBaseAndBitshift+0x128>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d036      	beq.n	8005178 <DMA_CalcBaseAndBitshift+0xa8>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a3b      	ldr	r2, [pc, #236]	; (80051fc <DMA_CalcBaseAndBitshift+0x12c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d031      	beq.n	8005178 <DMA_CalcBaseAndBitshift+0xa8>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a39      	ldr	r2, [pc, #228]	; (8005200 <DMA_CalcBaseAndBitshift+0x130>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d02c      	beq.n	8005178 <DMA_CalcBaseAndBitshift+0xa8>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a38      	ldr	r2, [pc, #224]	; (8005204 <DMA_CalcBaseAndBitshift+0x134>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d027      	beq.n	8005178 <DMA_CalcBaseAndBitshift+0xa8>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a36      	ldr	r2, [pc, #216]	; (8005208 <DMA_CalcBaseAndBitshift+0x138>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d022      	beq.n	8005178 <DMA_CalcBaseAndBitshift+0xa8>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a35      	ldr	r2, [pc, #212]	; (800520c <DMA_CalcBaseAndBitshift+0x13c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d01d      	beq.n	8005178 <DMA_CalcBaseAndBitshift+0xa8>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a33      	ldr	r2, [pc, #204]	; (8005210 <DMA_CalcBaseAndBitshift+0x140>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d018      	beq.n	8005178 <DMA_CalcBaseAndBitshift+0xa8>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a32      	ldr	r2, [pc, #200]	; (8005214 <DMA_CalcBaseAndBitshift+0x144>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d013      	beq.n	8005178 <DMA_CalcBaseAndBitshift+0xa8>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a30      	ldr	r2, [pc, #192]	; (8005218 <DMA_CalcBaseAndBitshift+0x148>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d00e      	beq.n	8005178 <DMA_CalcBaseAndBitshift+0xa8>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a2f      	ldr	r2, [pc, #188]	; (800521c <DMA_CalcBaseAndBitshift+0x14c>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d009      	beq.n	8005178 <DMA_CalcBaseAndBitshift+0xa8>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a2d      	ldr	r2, [pc, #180]	; (8005220 <DMA_CalcBaseAndBitshift+0x150>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d004      	beq.n	8005178 <DMA_CalcBaseAndBitshift+0xa8>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a2c      	ldr	r2, [pc, #176]	; (8005224 <DMA_CalcBaseAndBitshift+0x154>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d101      	bne.n	800517c <DMA_CalcBaseAndBitshift+0xac>
 8005178:	2301      	movs	r3, #1
 800517a:	e000      	b.n	800517e <DMA_CalcBaseAndBitshift+0xae>
 800517c:	2300      	movs	r3, #0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d024      	beq.n	80051cc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	b2db      	uxtb	r3, r3
 8005188:	3b10      	subs	r3, #16
 800518a:	4a27      	ldr	r2, [pc, #156]	; (8005228 <DMA_CalcBaseAndBitshift+0x158>)
 800518c:	fba2 2303 	umull	r2, r3, r2, r3
 8005190:	091b      	lsrs	r3, r3, #4
 8005192:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f003 0307 	and.w	r3, r3, #7
 800519a:	4a24      	ldr	r2, [pc, #144]	; (800522c <DMA_CalcBaseAndBitshift+0x15c>)
 800519c:	5cd3      	ldrb	r3, [r2, r3]
 800519e:	461a      	mov	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2b03      	cmp	r3, #3
 80051a8:	d908      	bls.n	80051bc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	4b1f      	ldr	r3, [pc, #124]	; (8005230 <DMA_CalcBaseAndBitshift+0x160>)
 80051b2:	4013      	ands	r3, r2
 80051b4:	1d1a      	adds	r2, r3, #4
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	659a      	str	r2, [r3, #88]	; 0x58
 80051ba:	e00d      	b.n	80051d8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	461a      	mov	r2, r3
 80051c2:	4b1b      	ldr	r3, [pc, #108]	; (8005230 <DMA_CalcBaseAndBitshift+0x160>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	6593      	str	r3, [r2, #88]	; 0x58
 80051ca:	e005      	b.n	80051d8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	40020010 	.word	0x40020010
 80051ec:	40020028 	.word	0x40020028
 80051f0:	40020040 	.word	0x40020040
 80051f4:	40020058 	.word	0x40020058
 80051f8:	40020070 	.word	0x40020070
 80051fc:	40020088 	.word	0x40020088
 8005200:	400200a0 	.word	0x400200a0
 8005204:	400200b8 	.word	0x400200b8
 8005208:	40020410 	.word	0x40020410
 800520c:	40020428 	.word	0x40020428
 8005210:	40020440 	.word	0x40020440
 8005214:	40020458 	.word	0x40020458
 8005218:	40020470 	.word	0x40020470
 800521c:	40020488 	.word	0x40020488
 8005220:	400204a0 	.word	0x400204a0
 8005224:	400204b8 	.word	0x400204b8
 8005228:	aaaaaaab 	.word	0xaaaaaaab
 800522c:	08021ab0 	.word	0x08021ab0
 8005230:	fffffc00 	.word	0xfffffc00

08005234 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800523c:	2300      	movs	r3, #0
 800523e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d120      	bne.n	800528a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524c:	2b03      	cmp	r3, #3
 800524e:	d858      	bhi.n	8005302 <DMA_CheckFifoParam+0xce>
 8005250:	a201      	add	r2, pc, #4	; (adr r2, 8005258 <DMA_CheckFifoParam+0x24>)
 8005252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005256:	bf00      	nop
 8005258:	08005269 	.word	0x08005269
 800525c:	0800527b 	.word	0x0800527b
 8005260:	08005269 	.word	0x08005269
 8005264:	08005303 	.word	0x08005303
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d048      	beq.n	8005306 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005278:	e045      	b.n	8005306 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005282:	d142      	bne.n	800530a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005288:	e03f      	b.n	800530a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005292:	d123      	bne.n	80052dc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005298:	2b03      	cmp	r3, #3
 800529a:	d838      	bhi.n	800530e <DMA_CheckFifoParam+0xda>
 800529c:	a201      	add	r2, pc, #4	; (adr r2, 80052a4 <DMA_CheckFifoParam+0x70>)
 800529e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a2:	bf00      	nop
 80052a4:	080052b5 	.word	0x080052b5
 80052a8:	080052bb 	.word	0x080052bb
 80052ac:	080052b5 	.word	0x080052b5
 80052b0:	080052cd 	.word	0x080052cd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	73fb      	strb	r3, [r7, #15]
        break;
 80052b8:	e030      	b.n	800531c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d025      	beq.n	8005312 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052ca:	e022      	b.n	8005312 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052d4:	d11f      	bne.n	8005316 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052da:	e01c      	b.n	8005316 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d902      	bls.n	80052ea <DMA_CheckFifoParam+0xb6>
 80052e4:	2b03      	cmp	r3, #3
 80052e6:	d003      	beq.n	80052f0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80052e8:	e018      	b.n	800531c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	73fb      	strb	r3, [r7, #15]
        break;
 80052ee:	e015      	b.n	800531c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00e      	beq.n	800531a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	73fb      	strb	r3, [r7, #15]
    break;
 8005300:	e00b      	b.n	800531a <DMA_CheckFifoParam+0xe6>
        break;
 8005302:	bf00      	nop
 8005304:	e00a      	b.n	800531c <DMA_CheckFifoParam+0xe8>
        break;
 8005306:	bf00      	nop
 8005308:	e008      	b.n	800531c <DMA_CheckFifoParam+0xe8>
        break;
 800530a:	bf00      	nop
 800530c:	e006      	b.n	800531c <DMA_CheckFifoParam+0xe8>
        break;
 800530e:	bf00      	nop
 8005310:	e004      	b.n	800531c <DMA_CheckFifoParam+0xe8>
        break;
 8005312:	bf00      	nop
 8005314:	e002      	b.n	800531c <DMA_CheckFifoParam+0xe8>
        break;
 8005316:	bf00      	nop
 8005318:	e000      	b.n	800531c <DMA_CheckFifoParam+0xe8>
    break;
 800531a:	bf00      	nop
    }
  }

  return status;
 800531c:	7bfb      	ldrb	r3, [r7, #15]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop

0800532c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a38      	ldr	r2, [pc, #224]	; (8005420 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d022      	beq.n	800538a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a36      	ldr	r2, [pc, #216]	; (8005424 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d01d      	beq.n	800538a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a35      	ldr	r2, [pc, #212]	; (8005428 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d018      	beq.n	800538a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a33      	ldr	r2, [pc, #204]	; (800542c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d013      	beq.n	800538a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a32      	ldr	r2, [pc, #200]	; (8005430 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d00e      	beq.n	800538a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a30      	ldr	r2, [pc, #192]	; (8005434 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d009      	beq.n	800538a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a2f      	ldr	r2, [pc, #188]	; (8005438 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d004      	beq.n	800538a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a2d      	ldr	r2, [pc, #180]	; (800543c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d101      	bne.n	800538e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800538a:	2301      	movs	r3, #1
 800538c:	e000      	b.n	8005390 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800538e:	2300      	movs	r3, #0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d01a      	beq.n	80053ca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	b2db      	uxtb	r3, r3
 800539a:	3b08      	subs	r3, #8
 800539c:	4a28      	ldr	r2, [pc, #160]	; (8005440 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800539e:	fba2 2303 	umull	r2, r3, r2, r3
 80053a2:	091b      	lsrs	r3, r3, #4
 80053a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4b26      	ldr	r3, [pc, #152]	; (8005444 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80053aa:	4413      	add	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	461a      	mov	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a24      	ldr	r2, [pc, #144]	; (8005448 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80053b8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f003 031f 	and.w	r3, r3, #31
 80053c0:	2201      	movs	r2, #1
 80053c2:	409a      	lsls	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80053c8:	e024      	b.n	8005414 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	3b10      	subs	r3, #16
 80053d2:	4a1e      	ldr	r2, [pc, #120]	; (800544c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80053d4:	fba2 2303 	umull	r2, r3, r2, r3
 80053d8:	091b      	lsrs	r3, r3, #4
 80053da:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	4a1c      	ldr	r2, [pc, #112]	; (8005450 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d806      	bhi.n	80053f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	4a1b      	ldr	r2, [pc, #108]	; (8005454 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d902      	bls.n	80053f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	3308      	adds	r3, #8
 80053f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	4b18      	ldr	r3, [pc, #96]	; (8005458 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80053f6:	4413      	add	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	461a      	mov	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a16      	ldr	r2, [pc, #88]	; (800545c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005404:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f003 031f 	and.w	r3, r3, #31
 800540c:	2201      	movs	r2, #1
 800540e:	409a      	lsls	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005414:	bf00      	nop
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	58025408 	.word	0x58025408
 8005424:	5802541c 	.word	0x5802541c
 8005428:	58025430 	.word	0x58025430
 800542c:	58025444 	.word	0x58025444
 8005430:	58025458 	.word	0x58025458
 8005434:	5802546c 	.word	0x5802546c
 8005438:	58025480 	.word	0x58025480
 800543c:	58025494 	.word	0x58025494
 8005440:	cccccccd 	.word	0xcccccccd
 8005444:	16009600 	.word	0x16009600
 8005448:	58025880 	.word	0x58025880
 800544c:	aaaaaaab 	.word	0xaaaaaaab
 8005450:	400204b8 	.word	0x400204b8
 8005454:	4002040f 	.word	0x4002040f
 8005458:	10008200 	.word	0x10008200
 800545c:	40020880 	.word	0x40020880

08005460 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	b2db      	uxtb	r3, r3
 800546e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d04a      	beq.n	800550c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2b08      	cmp	r3, #8
 800547a:	d847      	bhi.n	800550c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a25      	ldr	r2, [pc, #148]	; (8005518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d022      	beq.n	80054cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a24      	ldr	r2, [pc, #144]	; (800551c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d01d      	beq.n	80054cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a22      	ldr	r2, [pc, #136]	; (8005520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d018      	beq.n	80054cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a21      	ldr	r2, [pc, #132]	; (8005524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d013      	beq.n	80054cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a1f      	ldr	r2, [pc, #124]	; (8005528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d00e      	beq.n	80054cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a1e      	ldr	r2, [pc, #120]	; (800552c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d009      	beq.n	80054cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a1c      	ldr	r2, [pc, #112]	; (8005530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d004      	beq.n	80054cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a1b      	ldr	r2, [pc, #108]	; (8005534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d101      	bne.n	80054d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80054cc:	2301      	movs	r3, #1
 80054ce:	e000      	b.n	80054d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80054d0:	2300      	movs	r3, #0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00a      	beq.n	80054ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	4b17      	ldr	r3, [pc, #92]	; (8005538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80054da:	4413      	add	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	461a      	mov	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a15      	ldr	r2, [pc, #84]	; (800553c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80054e8:	671a      	str	r2, [r3, #112]	; 0x70
 80054ea:	e009      	b.n	8005500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	4b14      	ldr	r3, [pc, #80]	; (8005540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80054f0:	4413      	add	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	461a      	mov	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a11      	ldr	r2, [pc, #68]	; (8005544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80054fe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	3b01      	subs	r3, #1
 8005504:	2201      	movs	r2, #1
 8005506:	409a      	lsls	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800550c:	bf00      	nop
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	58025408 	.word	0x58025408
 800551c:	5802541c 	.word	0x5802541c
 8005520:	58025430 	.word	0x58025430
 8005524:	58025444 	.word	0x58025444
 8005528:	58025458 	.word	0x58025458
 800552c:	5802546c 	.word	0x5802546c
 8005530:	58025480 	.word	0x58025480
 8005534:	58025494 	.word	0x58025494
 8005538:	1600963f 	.word	0x1600963f
 800553c:	58025940 	.word	0x58025940
 8005540:	1000823f 	.word	0x1000823f
 8005544:	40020940 	.word	0x40020940

08005548 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005548:	b480      	push	{r7}
 800554a:	b089      	sub	sp, #36	; 0x24
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005552:	2300      	movs	r3, #0
 8005554:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005556:	4b89      	ldr	r3, [pc, #548]	; (800577c <HAL_GPIO_Init+0x234>)
 8005558:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800555a:	e194      	b.n	8005886 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	2101      	movs	r1, #1
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	fa01 f303 	lsl.w	r3, r1, r3
 8005568:	4013      	ands	r3, r2
 800556a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	2b00      	cmp	r3, #0
 8005570:	f000 8186 	beq.w	8005880 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d00b      	beq.n	8005594 <HAL_GPIO_Init+0x4c>
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	2b02      	cmp	r3, #2
 8005582:	d007      	beq.n	8005594 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005588:	2b11      	cmp	r3, #17
 800558a:	d003      	beq.n	8005594 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2b12      	cmp	r3, #18
 8005592:	d130      	bne.n	80055f6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	2203      	movs	r2, #3
 80055a0:	fa02 f303 	lsl.w	r3, r2, r3
 80055a4:	43db      	mvns	r3, r3
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	4013      	ands	r3, r2
 80055aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	68da      	ldr	r2, [r3, #12]
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	fa02 f303 	lsl.w	r3, r2, r3
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055ca:	2201      	movs	r2, #1
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	fa02 f303 	lsl.w	r3, r2, r3
 80055d2:	43db      	mvns	r3, r3
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	4013      	ands	r3, r2
 80055d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	091b      	lsrs	r3, r3, #4
 80055e0:	f003 0201 	and.w	r2, r3, #1
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	005b      	lsls	r3, r3, #1
 8005600:	2203      	movs	r2, #3
 8005602:	fa02 f303 	lsl.w	r3, r2, r3
 8005606:	43db      	mvns	r3, r3
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	4013      	ands	r3, r2
 800560c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	689a      	ldr	r2, [r3, #8]
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	fa02 f303 	lsl.w	r3, r2, r3
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	4313      	orrs	r3, r2
 800561e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	2b02      	cmp	r3, #2
 800562c:	d003      	beq.n	8005636 <HAL_GPIO_Init+0xee>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	2b12      	cmp	r3, #18
 8005634:	d123      	bne.n	800567e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	08da      	lsrs	r2, r3, #3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	3208      	adds	r2, #8
 800563e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005642:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	220f      	movs	r2, #15
 800564e:	fa02 f303 	lsl.w	r3, r2, r3
 8005652:	43db      	mvns	r3, r3
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	4013      	ands	r3, r2
 8005658:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	691a      	ldr	r2, [r3, #16]
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	fa02 f303 	lsl.w	r3, r2, r3
 800566a:	69ba      	ldr	r2, [r7, #24]
 800566c:	4313      	orrs	r3, r2
 800566e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	08da      	lsrs	r2, r3, #3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	3208      	adds	r2, #8
 8005678:	69b9      	ldr	r1, [r7, #24]
 800567a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	005b      	lsls	r3, r3, #1
 8005688:	2203      	movs	r2, #3
 800568a:	fa02 f303 	lsl.w	r3, r2, r3
 800568e:	43db      	mvns	r3, r3
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	4013      	ands	r3, r2
 8005694:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f003 0203 	and.w	r2, r3, #3
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	fa02 f303 	lsl.w	r3, r2, r3
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 80e0 	beq.w	8005880 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056c0:	4b2f      	ldr	r3, [pc, #188]	; (8005780 <HAL_GPIO_Init+0x238>)
 80056c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056c6:	4a2e      	ldr	r2, [pc, #184]	; (8005780 <HAL_GPIO_Init+0x238>)
 80056c8:	f043 0302 	orr.w	r3, r3, #2
 80056cc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80056d0:	4b2b      	ldr	r3, [pc, #172]	; (8005780 <HAL_GPIO_Init+0x238>)
 80056d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056de:	4a29      	ldr	r2, [pc, #164]	; (8005784 <HAL_GPIO_Init+0x23c>)
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	089b      	lsrs	r3, r3, #2
 80056e4:	3302      	adds	r3, #2
 80056e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	f003 0303 	and.w	r3, r3, #3
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	220f      	movs	r2, #15
 80056f6:	fa02 f303 	lsl.w	r3, r2, r3
 80056fa:	43db      	mvns	r3, r3
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	4013      	ands	r3, r2
 8005700:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a20      	ldr	r2, [pc, #128]	; (8005788 <HAL_GPIO_Init+0x240>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d052      	beq.n	80057b0 <HAL_GPIO_Init+0x268>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a1f      	ldr	r2, [pc, #124]	; (800578c <HAL_GPIO_Init+0x244>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d031      	beq.n	8005776 <HAL_GPIO_Init+0x22e>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a1e      	ldr	r2, [pc, #120]	; (8005790 <HAL_GPIO_Init+0x248>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d02b      	beq.n	8005772 <HAL_GPIO_Init+0x22a>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a1d      	ldr	r2, [pc, #116]	; (8005794 <HAL_GPIO_Init+0x24c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d025      	beq.n	800576e <HAL_GPIO_Init+0x226>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a1c      	ldr	r2, [pc, #112]	; (8005798 <HAL_GPIO_Init+0x250>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d01f      	beq.n	800576a <HAL_GPIO_Init+0x222>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a1b      	ldr	r2, [pc, #108]	; (800579c <HAL_GPIO_Init+0x254>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d019      	beq.n	8005766 <HAL_GPIO_Init+0x21e>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a1a      	ldr	r2, [pc, #104]	; (80057a0 <HAL_GPIO_Init+0x258>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d013      	beq.n	8005762 <HAL_GPIO_Init+0x21a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a19      	ldr	r2, [pc, #100]	; (80057a4 <HAL_GPIO_Init+0x25c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d00d      	beq.n	800575e <HAL_GPIO_Init+0x216>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a18      	ldr	r2, [pc, #96]	; (80057a8 <HAL_GPIO_Init+0x260>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d007      	beq.n	800575a <HAL_GPIO_Init+0x212>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a17      	ldr	r2, [pc, #92]	; (80057ac <HAL_GPIO_Init+0x264>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d101      	bne.n	8005756 <HAL_GPIO_Init+0x20e>
 8005752:	2309      	movs	r3, #9
 8005754:	e02d      	b.n	80057b2 <HAL_GPIO_Init+0x26a>
 8005756:	230a      	movs	r3, #10
 8005758:	e02b      	b.n	80057b2 <HAL_GPIO_Init+0x26a>
 800575a:	2308      	movs	r3, #8
 800575c:	e029      	b.n	80057b2 <HAL_GPIO_Init+0x26a>
 800575e:	2307      	movs	r3, #7
 8005760:	e027      	b.n	80057b2 <HAL_GPIO_Init+0x26a>
 8005762:	2306      	movs	r3, #6
 8005764:	e025      	b.n	80057b2 <HAL_GPIO_Init+0x26a>
 8005766:	2305      	movs	r3, #5
 8005768:	e023      	b.n	80057b2 <HAL_GPIO_Init+0x26a>
 800576a:	2304      	movs	r3, #4
 800576c:	e021      	b.n	80057b2 <HAL_GPIO_Init+0x26a>
 800576e:	2303      	movs	r3, #3
 8005770:	e01f      	b.n	80057b2 <HAL_GPIO_Init+0x26a>
 8005772:	2302      	movs	r3, #2
 8005774:	e01d      	b.n	80057b2 <HAL_GPIO_Init+0x26a>
 8005776:	2301      	movs	r3, #1
 8005778:	e01b      	b.n	80057b2 <HAL_GPIO_Init+0x26a>
 800577a:	bf00      	nop
 800577c:	58000080 	.word	0x58000080
 8005780:	58024400 	.word	0x58024400
 8005784:	58000400 	.word	0x58000400
 8005788:	58020000 	.word	0x58020000
 800578c:	58020400 	.word	0x58020400
 8005790:	58020800 	.word	0x58020800
 8005794:	58020c00 	.word	0x58020c00
 8005798:	58021000 	.word	0x58021000
 800579c:	58021400 	.word	0x58021400
 80057a0:	58021800 	.word	0x58021800
 80057a4:	58021c00 	.word	0x58021c00
 80057a8:	58022000 	.word	0x58022000
 80057ac:	58022400 	.word	0x58022400
 80057b0:	2300      	movs	r3, #0
 80057b2:	69fa      	ldr	r2, [r7, #28]
 80057b4:	f002 0203 	and.w	r2, r2, #3
 80057b8:	0092      	lsls	r2, r2, #2
 80057ba:	4093      	lsls	r3, r2
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	4313      	orrs	r3, r2
 80057c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057c2:	4938      	ldr	r1, [pc, #224]	; (80058a4 <HAL_GPIO_Init+0x35c>)
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	089b      	lsrs	r3, r3, #2
 80057c8:	3302      	adds	r3, #2
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	43db      	mvns	r3, r3
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	4013      	ands	r3, r2
 80057de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	43db      	mvns	r3, r3
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	4013      	ands	r3, r2
 8005808:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	4313      	orrs	r3, r2
 800581c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	43db      	mvns	r3, r3
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	4013      	ands	r3, r2
 8005834:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	4313      	orrs	r3, r2
 8005848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800584a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	43db      	mvns	r3, r3
 800585e:	69ba      	ldr	r2, [r7, #24]
 8005860:	4013      	ands	r3, r2
 8005862:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d003      	beq.n	8005878 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	4313      	orrs	r3, r2
 8005876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005878:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	3301      	adds	r3, #1
 8005884:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	fa22 f303 	lsr.w	r3, r2, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	f47f ae63 	bne.w	800555c <HAL_GPIO_Init+0x14>
  }
}
 8005896:	bf00      	nop
 8005898:	bf00      	nop
 800589a:	3724      	adds	r7, #36	; 0x24
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	58000400 	.word	0x58000400

080058a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	460b      	mov	r3, r1
 80058b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	691a      	ldr	r2, [r3, #16]
 80058b8:	887b      	ldrh	r3, [r7, #2]
 80058ba:	4013      	ands	r3, r2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d002      	beq.n	80058c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80058c0:	2301      	movs	r3, #1
 80058c2:	73fb      	strb	r3, [r7, #15]
 80058c4:	e001      	b.n	80058ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80058c6:	2300      	movs	r3, #0
 80058c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	460b      	mov	r3, r1
 80058e2:	807b      	strh	r3, [r7, #2]
 80058e4:	4613      	mov	r3, r2
 80058e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058e8:	787b      	ldrb	r3, [r7, #1]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058ee:	887a      	ldrh	r2, [r7, #2]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80058f4:	e003      	b.n	80058fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80058f6:	887b      	ldrh	r3, [r7, #2]
 80058f8:	041a      	lsls	r2, r3, #16
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	619a      	str	r2, [r3, #24]
}
 80058fe:	bf00      	nop
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b082      	sub	sp, #8
 800590e:	af00      	add	r7, sp, #0
 8005910:	4603      	mov	r3, r0
 8005912:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005918:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800591c:	88fb      	ldrh	r3, [r7, #6]
 800591e:	4013      	ands	r3, r2
 8005920:	2b00      	cmp	r3, #0
 8005922:	d008      	beq.n	8005936 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005924:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005928:	88fb      	ldrh	r3, [r7, #6]
 800592a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800592e:	88fb      	ldrh	r3, [r7, #6]
 8005930:	4618      	mov	r0, r3
 8005932:	f7fc f873 	bl	8001a1c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005936:	bf00      	nop
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800593e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005940:	b08f      	sub	sp, #60	; 0x3c
 8005942:	af0a      	add	r7, sp, #40	; 0x28
 8005944:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e054      	b.n	80059fa <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d106      	bne.n	8005970 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f016 fbd0 	bl	801c110 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2203      	movs	r2, #3
 8005974:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005980:	2b00      	cmp	r3, #0
 8005982:	d102      	bne.n	800598a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4618      	mov	r0, r3
 8005990:	f007 fe0b 	bl	800d5aa <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	603b      	str	r3, [r7, #0]
 800599a:	687e      	ldr	r6, [r7, #4]
 800599c:	466d      	mov	r5, sp
 800599e:	f106 0410 	add.w	r4, r6, #16
 80059a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80059ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80059b2:	1d33      	adds	r3, r6, #4
 80059b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059b6:	6838      	ldr	r0, [r7, #0]
 80059b8:	f007 fd78 	bl	800d4ac <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2101      	movs	r1, #1
 80059c2:	4618      	mov	r0, r3
 80059c4:	f007 fe02 	bl	800d5cc <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	603b      	str	r3, [r7, #0]
 80059ce:	687e      	ldr	r6, [r7, #4]
 80059d0:	466d      	mov	r5, sp
 80059d2:	f106 0410 	add.w	r4, r6, #16
 80059d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80059e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80059e6:	1d33      	adds	r3, r6, #4
 80059e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059ea:	6838      	ldr	r0, [r7, #0]
 80059ec:	f007 ff4c 	bl	800d888 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a02 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8005a02:	b590      	push	{r4, r7, lr}
 8005a04:	b089      	sub	sp, #36	; 0x24
 8005a06:	af04      	add	r7, sp, #16
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	4608      	mov	r0, r1
 8005a0c:	4611      	mov	r1, r2
 8005a0e:	461a      	mov	r2, r3
 8005a10:	4603      	mov	r3, r0
 8005a12:	70fb      	strb	r3, [r7, #3]
 8005a14:	460b      	mov	r3, r1
 8005a16:	70bb      	strb	r3, [r7, #2]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d101      	bne.n	8005a2a <HAL_HCD_HC_Init+0x28>
 8005a26:	2302      	movs	r3, #2
 8005a28:	e076      	b.n	8005b18 <HAL_HCD_HC_Init+0x116>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8005a32:	78fb      	ldrb	r3, [r7, #3]
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	212c      	movs	r1, #44	; 0x2c
 8005a38:	fb01 f303 	mul.w	r3, r1, r3
 8005a3c:	4413      	add	r3, r2
 8005a3e:	333d      	adds	r3, #61	; 0x3d
 8005a40:	2200      	movs	r2, #0
 8005a42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005a44:	78fb      	ldrb	r3, [r7, #3]
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	212c      	movs	r1, #44	; 0x2c
 8005a4a:	fb01 f303 	mul.w	r3, r1, r3
 8005a4e:	4413      	add	r3, r2
 8005a50:	3338      	adds	r3, #56	; 0x38
 8005a52:	787a      	ldrb	r2, [r7, #1]
 8005a54:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8005a56:	78fb      	ldrb	r3, [r7, #3]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	212c      	movs	r1, #44	; 0x2c
 8005a5c:	fb01 f303 	mul.w	r3, r1, r3
 8005a60:	4413      	add	r3, r2
 8005a62:	3340      	adds	r3, #64	; 0x40
 8005a64:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005a66:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005a68:	78fb      	ldrb	r3, [r7, #3]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	212c      	movs	r1, #44	; 0x2c
 8005a6e:	fb01 f303 	mul.w	r3, r1, r3
 8005a72:	4413      	add	r3, r2
 8005a74:	3339      	adds	r3, #57	; 0x39
 8005a76:	78fa      	ldrb	r2, [r7, #3]
 8005a78:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8005a7a:	78fb      	ldrb	r3, [r7, #3]
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	212c      	movs	r1, #44	; 0x2c
 8005a80:	fb01 f303 	mul.w	r3, r1, r3
 8005a84:	4413      	add	r3, r2
 8005a86:	333f      	adds	r3, #63	; 0x3f
 8005a88:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005a8c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005a8e:	78fb      	ldrb	r3, [r7, #3]
 8005a90:	78ba      	ldrb	r2, [r7, #2]
 8005a92:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a96:	b2d0      	uxtb	r0, r2
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	212c      	movs	r1, #44	; 0x2c
 8005a9c:	fb01 f303 	mul.w	r3, r1, r3
 8005aa0:	4413      	add	r3, r2
 8005aa2:	333a      	adds	r3, #58	; 0x3a
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8005aa8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	da09      	bge.n	8005ac4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005ab0:	78fb      	ldrb	r3, [r7, #3]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	212c      	movs	r1, #44	; 0x2c
 8005ab6:	fb01 f303 	mul.w	r3, r1, r3
 8005aba:	4413      	add	r3, r2
 8005abc:	333b      	adds	r3, #59	; 0x3b
 8005abe:	2201      	movs	r2, #1
 8005ac0:	701a      	strb	r2, [r3, #0]
 8005ac2:	e008      	b.n	8005ad6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005ac4:	78fb      	ldrb	r3, [r7, #3]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	212c      	movs	r1, #44	; 0x2c
 8005aca:	fb01 f303 	mul.w	r3, r1, r3
 8005ace:	4413      	add	r3, r2
 8005ad0:	333b      	adds	r3, #59	; 0x3b
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8005ad6:	78fb      	ldrb	r3, [r7, #3]
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	212c      	movs	r1, #44	; 0x2c
 8005adc:	fb01 f303 	mul.w	r3, r1, r3
 8005ae0:	4413      	add	r3, r2
 8005ae2:	333c      	adds	r3, #60	; 0x3c
 8005ae4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005ae8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6818      	ldr	r0, [r3, #0]
 8005aee:	787c      	ldrb	r4, [r7, #1]
 8005af0:	78ba      	ldrb	r2, [r7, #2]
 8005af2:	78f9      	ldrb	r1, [r7, #3]
 8005af4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005af6:	9302      	str	r3, [sp, #8]
 8005af8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005afc:	9301      	str	r3, [sp, #4]
 8005afe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	4623      	mov	r3, r4
 8005b06:	f008 f811 	bl	800db2c <USB_HC_Init>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd90      	pop	{r4, r7, pc}

08005b20 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	460b      	mov	r3, r1
 8005b2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d101      	bne.n	8005b3e <HAL_HCD_HC_Halt+0x1e>
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	e00f      	b.n	8005b5e <HAL_HCD_HC_Halt+0x3e>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	78fa      	ldrb	r2, [r7, #3]
 8005b4c:	4611      	mov	r1, r2
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f008 fa4d 	bl	800dfee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
	...

08005b68 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	4608      	mov	r0, r1
 8005b72:	4611      	mov	r1, r2
 8005b74:	461a      	mov	r2, r3
 8005b76:	4603      	mov	r3, r0
 8005b78:	70fb      	strb	r3, [r7, #3]
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	70bb      	strb	r3, [r7, #2]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005b82:	78fb      	ldrb	r3, [r7, #3]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	212c      	movs	r1, #44	; 0x2c
 8005b88:	fb01 f303 	mul.w	r3, r1, r3
 8005b8c:	4413      	add	r3, r2
 8005b8e:	333b      	adds	r3, #59	; 0x3b
 8005b90:	78ba      	ldrb	r2, [r7, #2]
 8005b92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005b94:	78fb      	ldrb	r3, [r7, #3]
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	212c      	movs	r1, #44	; 0x2c
 8005b9a:	fb01 f303 	mul.w	r3, r1, r3
 8005b9e:	4413      	add	r3, r2
 8005ba0:	333f      	adds	r3, #63	; 0x3f
 8005ba2:	787a      	ldrb	r2, [r7, #1]
 8005ba4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005ba6:	7c3b      	ldrb	r3, [r7, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d112      	bne.n	8005bd2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005bac:	78fb      	ldrb	r3, [r7, #3]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	212c      	movs	r1, #44	; 0x2c
 8005bb2:	fb01 f303 	mul.w	r3, r1, r3
 8005bb6:	4413      	add	r3, r2
 8005bb8:	3342      	adds	r3, #66	; 0x42
 8005bba:	2203      	movs	r2, #3
 8005bbc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005bbe:	78fb      	ldrb	r3, [r7, #3]
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	212c      	movs	r1, #44	; 0x2c
 8005bc4:	fb01 f303 	mul.w	r3, r1, r3
 8005bc8:	4413      	add	r3, r2
 8005bca:	333d      	adds	r3, #61	; 0x3d
 8005bcc:	7f3a      	ldrb	r2, [r7, #28]
 8005bce:	701a      	strb	r2, [r3, #0]
 8005bd0:	e008      	b.n	8005be4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005bd2:	78fb      	ldrb	r3, [r7, #3]
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	212c      	movs	r1, #44	; 0x2c
 8005bd8:	fb01 f303 	mul.w	r3, r1, r3
 8005bdc:	4413      	add	r3, r2
 8005bde:	3342      	adds	r3, #66	; 0x42
 8005be0:	2202      	movs	r2, #2
 8005be2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005be4:	787b      	ldrb	r3, [r7, #1]
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	f200 80c6 	bhi.w	8005d78 <HAL_HCD_HC_SubmitRequest+0x210>
 8005bec:	a201      	add	r2, pc, #4	; (adr r2, 8005bf4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8005bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf2:	bf00      	nop
 8005bf4:	08005c05 	.word	0x08005c05
 8005bf8:	08005d65 	.word	0x08005d65
 8005bfc:	08005c69 	.word	0x08005c69
 8005c00:	08005ce7 	.word	0x08005ce7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005c04:	7c3b      	ldrb	r3, [r7, #16]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	f040 80b8 	bne.w	8005d7c <HAL_HCD_HC_SubmitRequest+0x214>
 8005c0c:	78bb      	ldrb	r3, [r7, #2]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f040 80b4 	bne.w	8005d7c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8005c14:	8b3b      	ldrh	r3, [r7, #24]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d108      	bne.n	8005c2c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8005c1a:	78fb      	ldrb	r3, [r7, #3]
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	212c      	movs	r1, #44	; 0x2c
 8005c20:	fb01 f303 	mul.w	r3, r1, r3
 8005c24:	4413      	add	r3, r2
 8005c26:	3355      	adds	r3, #85	; 0x55
 8005c28:	2201      	movs	r2, #1
 8005c2a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005c2c:	78fb      	ldrb	r3, [r7, #3]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	212c      	movs	r1, #44	; 0x2c
 8005c32:	fb01 f303 	mul.w	r3, r1, r3
 8005c36:	4413      	add	r3, r2
 8005c38:	3355      	adds	r3, #85	; 0x55
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d109      	bne.n	8005c54 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005c40:	78fb      	ldrb	r3, [r7, #3]
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	212c      	movs	r1, #44	; 0x2c
 8005c46:	fb01 f303 	mul.w	r3, r1, r3
 8005c4a:	4413      	add	r3, r2
 8005c4c:	3342      	adds	r3, #66	; 0x42
 8005c4e:	2200      	movs	r2, #0
 8005c50:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005c52:	e093      	b.n	8005d7c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005c54:	78fb      	ldrb	r3, [r7, #3]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	212c      	movs	r1, #44	; 0x2c
 8005c5a:	fb01 f303 	mul.w	r3, r1, r3
 8005c5e:	4413      	add	r3, r2
 8005c60:	3342      	adds	r3, #66	; 0x42
 8005c62:	2202      	movs	r2, #2
 8005c64:	701a      	strb	r2, [r3, #0]
      break;
 8005c66:	e089      	b.n	8005d7c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005c68:	78bb      	ldrb	r3, [r7, #2]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d11d      	bne.n	8005caa <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005c6e:	78fb      	ldrb	r3, [r7, #3]
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	212c      	movs	r1, #44	; 0x2c
 8005c74:	fb01 f303 	mul.w	r3, r1, r3
 8005c78:	4413      	add	r3, r2
 8005c7a:	3355      	adds	r3, #85	; 0x55
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d109      	bne.n	8005c96 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005c82:	78fb      	ldrb	r3, [r7, #3]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	212c      	movs	r1, #44	; 0x2c
 8005c88:	fb01 f303 	mul.w	r3, r1, r3
 8005c8c:	4413      	add	r3, r2
 8005c8e:	3342      	adds	r3, #66	; 0x42
 8005c90:	2200      	movs	r2, #0
 8005c92:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005c94:	e073      	b.n	8005d7e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005c96:	78fb      	ldrb	r3, [r7, #3]
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	212c      	movs	r1, #44	; 0x2c
 8005c9c:	fb01 f303 	mul.w	r3, r1, r3
 8005ca0:	4413      	add	r3, r2
 8005ca2:	3342      	adds	r3, #66	; 0x42
 8005ca4:	2202      	movs	r2, #2
 8005ca6:	701a      	strb	r2, [r3, #0]
      break;
 8005ca8:	e069      	b.n	8005d7e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005caa:	78fb      	ldrb	r3, [r7, #3]
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	212c      	movs	r1, #44	; 0x2c
 8005cb0:	fb01 f303 	mul.w	r3, r1, r3
 8005cb4:	4413      	add	r3, r2
 8005cb6:	3354      	adds	r3, #84	; 0x54
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d109      	bne.n	8005cd2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005cbe:	78fb      	ldrb	r3, [r7, #3]
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	212c      	movs	r1, #44	; 0x2c
 8005cc4:	fb01 f303 	mul.w	r3, r1, r3
 8005cc8:	4413      	add	r3, r2
 8005cca:	3342      	adds	r3, #66	; 0x42
 8005ccc:	2200      	movs	r2, #0
 8005cce:	701a      	strb	r2, [r3, #0]
      break;
 8005cd0:	e055      	b.n	8005d7e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005cd2:	78fb      	ldrb	r3, [r7, #3]
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	212c      	movs	r1, #44	; 0x2c
 8005cd8:	fb01 f303 	mul.w	r3, r1, r3
 8005cdc:	4413      	add	r3, r2
 8005cde:	3342      	adds	r3, #66	; 0x42
 8005ce0:	2202      	movs	r2, #2
 8005ce2:	701a      	strb	r2, [r3, #0]
      break;
 8005ce4:	e04b      	b.n	8005d7e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005ce6:	78bb      	ldrb	r3, [r7, #2]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d11d      	bne.n	8005d28 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	212c      	movs	r1, #44	; 0x2c
 8005cf2:	fb01 f303 	mul.w	r3, r1, r3
 8005cf6:	4413      	add	r3, r2
 8005cf8:	3355      	adds	r3, #85	; 0x55
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d109      	bne.n	8005d14 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005d00:	78fb      	ldrb	r3, [r7, #3]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	212c      	movs	r1, #44	; 0x2c
 8005d06:	fb01 f303 	mul.w	r3, r1, r3
 8005d0a:	4413      	add	r3, r2
 8005d0c:	3342      	adds	r3, #66	; 0x42
 8005d0e:	2200      	movs	r2, #0
 8005d10:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005d12:	e034      	b.n	8005d7e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005d14:	78fb      	ldrb	r3, [r7, #3]
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	212c      	movs	r1, #44	; 0x2c
 8005d1a:	fb01 f303 	mul.w	r3, r1, r3
 8005d1e:	4413      	add	r3, r2
 8005d20:	3342      	adds	r3, #66	; 0x42
 8005d22:	2202      	movs	r2, #2
 8005d24:	701a      	strb	r2, [r3, #0]
      break;
 8005d26:	e02a      	b.n	8005d7e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005d28:	78fb      	ldrb	r3, [r7, #3]
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	212c      	movs	r1, #44	; 0x2c
 8005d2e:	fb01 f303 	mul.w	r3, r1, r3
 8005d32:	4413      	add	r3, r2
 8005d34:	3354      	adds	r3, #84	; 0x54
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d109      	bne.n	8005d50 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005d3c:	78fb      	ldrb	r3, [r7, #3]
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	212c      	movs	r1, #44	; 0x2c
 8005d42:	fb01 f303 	mul.w	r3, r1, r3
 8005d46:	4413      	add	r3, r2
 8005d48:	3342      	adds	r3, #66	; 0x42
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	701a      	strb	r2, [r3, #0]
      break;
 8005d4e:	e016      	b.n	8005d7e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005d50:	78fb      	ldrb	r3, [r7, #3]
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	212c      	movs	r1, #44	; 0x2c
 8005d56:	fb01 f303 	mul.w	r3, r1, r3
 8005d5a:	4413      	add	r3, r2
 8005d5c:	3342      	adds	r3, #66	; 0x42
 8005d5e:	2202      	movs	r2, #2
 8005d60:	701a      	strb	r2, [r3, #0]
      break;
 8005d62:	e00c      	b.n	8005d7e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005d64:	78fb      	ldrb	r3, [r7, #3]
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	212c      	movs	r1, #44	; 0x2c
 8005d6a:	fb01 f303 	mul.w	r3, r1, r3
 8005d6e:	4413      	add	r3, r2
 8005d70:	3342      	adds	r3, #66	; 0x42
 8005d72:	2200      	movs	r2, #0
 8005d74:	701a      	strb	r2, [r3, #0]
      break;
 8005d76:	e002      	b.n	8005d7e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8005d78:	bf00      	nop
 8005d7a:	e000      	b.n	8005d7e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8005d7c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005d7e:	78fb      	ldrb	r3, [r7, #3]
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	212c      	movs	r1, #44	; 0x2c
 8005d84:	fb01 f303 	mul.w	r3, r1, r3
 8005d88:	4413      	add	r3, r2
 8005d8a:	3344      	adds	r3, #68	; 0x44
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005d90:	78fb      	ldrb	r3, [r7, #3]
 8005d92:	8b3a      	ldrh	r2, [r7, #24]
 8005d94:	6879      	ldr	r1, [r7, #4]
 8005d96:	202c      	movs	r0, #44	; 0x2c
 8005d98:	fb00 f303 	mul.w	r3, r0, r3
 8005d9c:	440b      	add	r3, r1
 8005d9e:	334c      	adds	r3, #76	; 0x4c
 8005da0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005da2:	78fb      	ldrb	r3, [r7, #3]
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	212c      	movs	r1, #44	; 0x2c
 8005da8:	fb01 f303 	mul.w	r3, r1, r3
 8005dac:	4413      	add	r3, r2
 8005dae:	3360      	adds	r3, #96	; 0x60
 8005db0:	2200      	movs	r2, #0
 8005db2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005db4:	78fb      	ldrb	r3, [r7, #3]
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	212c      	movs	r1, #44	; 0x2c
 8005dba:	fb01 f303 	mul.w	r3, r1, r3
 8005dbe:	4413      	add	r3, r2
 8005dc0:	3350      	adds	r3, #80	; 0x50
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005dc6:	78fb      	ldrb	r3, [r7, #3]
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	212c      	movs	r1, #44	; 0x2c
 8005dcc:	fb01 f303 	mul.w	r3, r1, r3
 8005dd0:	4413      	add	r3, r2
 8005dd2:	3339      	adds	r3, #57	; 0x39
 8005dd4:	78fa      	ldrb	r2, [r7, #3]
 8005dd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005dd8:	78fb      	ldrb	r3, [r7, #3]
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	212c      	movs	r1, #44	; 0x2c
 8005dde:	fb01 f303 	mul.w	r3, r1, r3
 8005de2:	4413      	add	r3, r2
 8005de4:	3361      	adds	r3, #97	; 0x61
 8005de6:	2200      	movs	r2, #0
 8005de8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6818      	ldr	r0, [r3, #0]
 8005dee:	78fb      	ldrb	r3, [r7, #3]
 8005df0:	222c      	movs	r2, #44	; 0x2c
 8005df2:	fb02 f303 	mul.w	r3, r2, r3
 8005df6:	3338      	adds	r3, #56	; 0x38
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	18d1      	adds	r1, r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	461a      	mov	r2, r3
 8005e04:	f007 ffa0 	bl	800dd48 <USB_HC_StartXfer>
 8005e08:	4603      	mov	r3, r0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3708      	adds	r7, #8
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop

08005e14 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f007 fce9 	bl	800d802 <USB_GetMode>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	f040 80ef 	bne.w	8006016 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f007 fccd 	bl	800d7dc <USB_ReadInterrupts>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 80e5 	beq.w	8006014 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f007 fcc4 	bl	800d7dc <USB_ReadInterrupts>
 8005e54:	4603      	mov	r3, r0
 8005e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e5e:	d104      	bne.n	8005e6a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005e68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f007 fcb4 	bl	800d7dc <USB_ReadInterrupts>
 8005e74:	4603      	mov	r3, r0
 8005e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e7e:	d104      	bne.n	8005e8a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005e88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f007 fca4 	bl	800d7dc <USB_ReadInterrupts>
 8005e94:	4603      	mov	r3, r0
 8005e96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e9e:	d104      	bne.n	8005eaa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005ea8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f007 fc94 	bl	800d7dc <USB_ReadInterrupts>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d103      	bne.n	8005ec6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f007 fc86 	bl	800d7dc <USB_ReadInterrupts>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ed6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eda:	d115      	bne.n	8005f08 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005ee4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d108      	bne.n	8005f08 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f016 f9b8 	bl	801c26c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2101      	movs	r1, #1
 8005f02:	4618      	mov	r0, r3
 8005f04:	f007 fd76 	bl	800d9f4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f007 fc65 	bl	800d7dc <USB_ReadInterrupts>
 8005f12:	4603      	mov	r3, r0
 8005f14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f1c:	d102      	bne.n	8005f24 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f001 f9e3 	bl	80072ea <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f007 fc57 	bl	800d7dc <USB_ReadInterrupts>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	f003 0308 	and.w	r3, r3, #8
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	d106      	bne.n	8005f46 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f016 f97b 	bl	801c234 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2208      	movs	r2, #8
 8005f44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f007 fc46 	bl	800d7dc <USB_ReadInterrupts>
 8005f50:	4603      	mov	r3, r0
 8005f52:	f003 0310 	and.w	r3, r3, #16
 8005f56:	2b10      	cmp	r3, #16
 8005f58:	d101      	bne.n	8005f5e <HAL_HCD_IRQHandler+0x14a>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e000      	b.n	8005f60 <HAL_HCD_IRQHandler+0x14c>
 8005f5e:	2300      	movs	r3, #0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d012      	beq.n	8005f8a <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	699a      	ldr	r2, [r3, #24]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f022 0210 	bic.w	r2, r2, #16
 8005f72:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f001 f8e6 	bl	8007146 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	699a      	ldr	r2, [r3, #24]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f042 0210 	orr.w	r2, r2, #16
 8005f88:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f007 fc24 	bl	800d7dc <USB_ReadInterrupts>
 8005f94:	4603      	mov	r3, r0
 8005f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f9e:	d13a      	bne.n	8006016 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f008 f811 	bl	800dfcc <USB_HC_ReadInterrupt>
 8005faa:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005fac:	2300      	movs	r3, #0
 8005fae:	617b      	str	r3, [r7, #20]
 8005fb0:	e025      	b.n	8005ffe <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f003 030f 	and.w	r3, r3, #15
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	fa22 f303 	lsr.w	r3, r2, r3
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d018      	beq.n	8005ff8 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fdc:	d106      	bne.n	8005fec <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f88f 	bl	8006108 <HCD_HC_IN_IRQHandler>
 8005fea:	e005      	b.n	8005ff8 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fcaa 	bl	800694c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	617b      	str	r3, [r7, #20]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	429a      	cmp	r2, r3
 8006006:	d3d4      	bcc.n	8005fb2 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006010:	615a      	str	r2, [r3, #20]
 8006012:	e000      	b.n	8006016 <HAL_HCD_IRQHandler+0x202>
      return;
 8006014:	bf00      	nop
    }
  }
}
 8006016:	3718      	adds	r7, #24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800602a:	2b01      	cmp	r3, #1
 800602c:	d101      	bne.n	8006032 <HAL_HCD_Start+0x16>
 800602e:	2302      	movs	r3, #2
 8006030:	e013      	b.n	800605a <HAL_HCD_Start+0x3e>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4618      	mov	r0, r3
 8006040:	f007 faa2 	bl	800d588 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2101      	movs	r1, #1
 800604a:	4618      	mov	r0, r3
 800604c:	f007 fd0c 	bl	800da68 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b082      	sub	sp, #8
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006070:	2b01      	cmp	r3, #1
 8006072:	d101      	bne.n	8006078 <HAL_HCD_Stop+0x16>
 8006074:	2302      	movs	r3, #2
 8006076:	e00d      	b.n	8006094 <HAL_HCD_Stop+0x32>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4618      	mov	r0, r3
 8006086:	f008 f90b 	bl	800e2a0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	460b      	mov	r3, r1
 80060a6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80060a8:	78fb      	ldrb	r3, [r7, #3]
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	212c      	movs	r1, #44	; 0x2c
 80060ae:	fb01 f303 	mul.w	r3, r1, r3
 80060b2:	4413      	add	r3, r2
 80060b4:	3360      	adds	r3, #96	; 0x60
 80060b6:	781b      	ldrb	r3, [r3, #0]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	460b      	mov	r3, r1
 80060ce:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80060d0:	78fb      	ldrb	r3, [r7, #3]
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	212c      	movs	r1, #44	; 0x2c
 80060d6:	fb01 f303 	mul.w	r3, r1, r3
 80060da:	4413      	add	r3, r2
 80060dc:	3350      	adds	r3, #80	; 0x50
 80060de:	681b      	ldr	r3, [r3, #0]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4618      	mov	r0, r3
 80060fa:	f007 fd05 	bl	800db08 <USB_GetCurrentFrame>
 80060fe:	4603      	mov	r3, r0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	460b      	mov	r3, r1
 8006112:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800611e:	78fb      	ldrb	r3, [r7, #3]
 8006120:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	4413      	add	r3, r2
 800612a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f003 0304 	and.w	r3, r3, #4
 8006134:	2b04      	cmp	r3, #4
 8006136:	d119      	bne.n	800616c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	4413      	add	r3, r2
 8006140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006144:	461a      	mov	r2, r3
 8006146:	2304      	movs	r3, #4
 8006148:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	4413      	add	r3, r2
 8006152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	0151      	lsls	r1, r2, #5
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	440a      	add	r2, r1
 8006160:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006164:	f043 0302 	orr.w	r3, r3, #2
 8006168:	60d3      	str	r3, [r2, #12]
 800616a:	e101      	b.n	8006370 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	4413      	add	r3, r2
 8006174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800617e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006182:	d12b      	bne.n	80061dc <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	4413      	add	r3, r2
 800618c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006190:	461a      	mov	r2, r3
 8006192:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006196:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	212c      	movs	r1, #44	; 0x2c
 800619e:	fb01 f303 	mul.w	r3, r1, r3
 80061a2:	4413      	add	r3, r2
 80061a4:	3361      	adds	r3, #97	; 0x61
 80061a6:	2207      	movs	r2, #7
 80061a8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	0151      	lsls	r1, r2, #5
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	440a      	add	r2, r1
 80061c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061c4:	f043 0302 	orr.w	r3, r3, #2
 80061c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	b2d2      	uxtb	r2, r2
 80061d2:	4611      	mov	r1, r2
 80061d4:	4618      	mov	r0, r3
 80061d6:	f007 ff0a 	bl	800dfee <USB_HC_Halt>
 80061da:	e0c9      	b.n	8006370 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f003 0320 	and.w	r3, r3, #32
 80061ee:	2b20      	cmp	r3, #32
 80061f0:	d109      	bne.n	8006206 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061fe:	461a      	mov	r2, r3
 8006200:	2320      	movs	r3, #32
 8006202:	6093      	str	r3, [r2, #8]
 8006204:	e0b4      	b.n	8006370 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	4413      	add	r3, r2
 800620e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f003 0308 	and.w	r3, r3, #8
 8006218:	2b08      	cmp	r3, #8
 800621a:	d133      	bne.n	8006284 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	4413      	add	r3, r2
 8006224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	0151      	lsls	r1, r2, #5
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	440a      	add	r2, r1
 8006232:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006236:	f043 0302 	orr.w	r3, r3, #2
 800623a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	212c      	movs	r1, #44	; 0x2c
 8006242:	fb01 f303 	mul.w	r3, r1, r3
 8006246:	4413      	add	r3, r2
 8006248:	3361      	adds	r3, #97	; 0x61
 800624a:	2205      	movs	r2, #5
 800624c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	4413      	add	r3, r2
 8006256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800625a:	461a      	mov	r2, r3
 800625c:	2310      	movs	r3, #16
 800625e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	4413      	add	r3, r2
 8006268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800626c:	461a      	mov	r2, r3
 800626e:	2308      	movs	r3, #8
 8006270:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	b2d2      	uxtb	r2, r2
 800627a:	4611      	mov	r1, r2
 800627c:	4618      	mov	r0, r3
 800627e:	f007 feb6 	bl	800dfee <USB_HC_Halt>
 8006282:	e075      	b.n	8006370 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	4413      	add	r3, r2
 800628c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800629a:	d134      	bne.n	8006306 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	0151      	lsls	r1, r2, #5
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	440a      	add	r2, r1
 80062b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062b6:	f043 0302 	orr.w	r3, r3, #2
 80062ba:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	212c      	movs	r1, #44	; 0x2c
 80062c2:	fb01 f303 	mul.w	r3, r1, r3
 80062c6:	4413      	add	r3, r2
 80062c8:	3361      	adds	r3, #97	; 0x61
 80062ca:	2208      	movs	r2, #8
 80062cc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	015a      	lsls	r2, r3, #5
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	4413      	add	r3, r2
 80062d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062da:	461a      	mov	r2, r3
 80062dc:	2310      	movs	r3, #16
 80062de:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ec:	461a      	mov	r2, r3
 80062ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062f2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	b2d2      	uxtb	r2, r2
 80062fc:	4611      	mov	r1, r2
 80062fe:	4618      	mov	r0, r3
 8006300:	f007 fe75 	bl	800dfee <USB_HC_Halt>
 8006304:	e034      	b.n	8006370 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	4413      	add	r3, r2
 800630e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006318:	2b80      	cmp	r3, #128	; 0x80
 800631a:	d129      	bne.n	8006370 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	4413      	add	r3, r2
 8006324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	0151      	lsls	r1, r2, #5
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	440a      	add	r2, r1
 8006332:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006336:	f043 0302 	orr.w	r3, r3, #2
 800633a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	212c      	movs	r1, #44	; 0x2c
 8006342:	fb01 f303 	mul.w	r3, r1, r3
 8006346:	4413      	add	r3, r2
 8006348:	3361      	adds	r3, #97	; 0x61
 800634a:	2206      	movs	r2, #6
 800634c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	b2d2      	uxtb	r2, r2
 8006356:	4611      	mov	r1, r2
 8006358:	4618      	mov	r0, r3
 800635a:	f007 fe48 	bl	800dfee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	4413      	add	r3, r2
 8006366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636a:	461a      	mov	r2, r3
 800636c:	2380      	movs	r3, #128	; 0x80
 800636e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	4413      	add	r3, r2
 8006378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006386:	d122      	bne.n	80063ce <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	4413      	add	r3, r2
 8006390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	0151      	lsls	r1, r2, #5
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	440a      	add	r2, r1
 800639e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063a2:	f043 0302 	orr.w	r3, r3, #2
 80063a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	b2d2      	uxtb	r2, r2
 80063b0:	4611      	mov	r1, r2
 80063b2:	4618      	mov	r0, r3
 80063b4:	f007 fe1b 	bl	800dfee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c4:	461a      	mov	r2, r3
 80063c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063ca:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80063cc:	e2ba      	b.n	8006944 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	f040 811b 	bne.w	800661c <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d019      	beq.n	8006422 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	212c      	movs	r1, #44	; 0x2c
 80063f4:	fb01 f303 	mul.w	r3, r1, r3
 80063f8:	4413      	add	r3, r2
 80063fa:	3348      	adds	r3, #72	; 0x48
 80063fc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	0159      	lsls	r1, r3, #5
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	440b      	add	r3, r1
 8006406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006410:	1ad2      	subs	r2, r2, r3
 8006412:	6879      	ldr	r1, [r7, #4]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	202c      	movs	r0, #44	; 0x2c
 8006418:	fb00 f303 	mul.w	r3, r0, r3
 800641c:	440b      	add	r3, r1
 800641e:	3350      	adds	r3, #80	; 0x50
 8006420:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	212c      	movs	r1, #44	; 0x2c
 8006428:	fb01 f303 	mul.w	r3, r1, r3
 800642c:	4413      	add	r3, r2
 800642e:	3361      	adds	r3, #97	; 0x61
 8006430:	2201      	movs	r2, #1
 8006432:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	212c      	movs	r1, #44	; 0x2c
 800643a:	fb01 f303 	mul.w	r3, r1, r3
 800643e:	4413      	add	r3, r2
 8006440:	335c      	adds	r3, #92	; 0x5c
 8006442:	2200      	movs	r2, #0
 8006444:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	4413      	add	r3, r2
 800644e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006452:	461a      	mov	r2, r3
 8006454:	2301      	movs	r3, #1
 8006456:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	212c      	movs	r1, #44	; 0x2c
 800645e:	fb01 f303 	mul.w	r3, r1, r3
 8006462:	4413      	add	r3, r2
 8006464:	333f      	adds	r3, #63	; 0x3f
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d009      	beq.n	8006480 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	212c      	movs	r1, #44	; 0x2c
 8006472:	fb01 f303 	mul.w	r3, r1, r3
 8006476:	4413      	add	r3, r2
 8006478:	333f      	adds	r3, #63	; 0x3f
 800647a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800647c:	2b02      	cmp	r3, #2
 800647e:	d121      	bne.n	80064c4 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	4413      	add	r3, r2
 8006488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	0151      	lsls	r1, r2, #5
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	440a      	add	r2, r1
 8006496:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800649a:	f043 0302 	orr.w	r3, r3, #2
 800649e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	b2d2      	uxtb	r2, r2
 80064a8:	4611      	mov	r1, r2
 80064aa:	4618      	mov	r0, r3
 80064ac:	f007 fd9f 	bl	800dfee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064bc:	461a      	mov	r2, r3
 80064be:	2310      	movs	r3, #16
 80064c0:	6093      	str	r3, [r2, #8]
 80064c2:	e066      	b.n	8006592 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	212c      	movs	r1, #44	; 0x2c
 80064ca:	fb01 f303 	mul.w	r3, r1, r3
 80064ce:	4413      	add	r3, r2
 80064d0:	333f      	adds	r3, #63	; 0x3f
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	2b03      	cmp	r3, #3
 80064d6:	d127      	bne.n	8006528 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	0151      	lsls	r1, r2, #5
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	440a      	add	r2, r1
 80064ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064f6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	212c      	movs	r1, #44	; 0x2c
 80064fe:	fb01 f303 	mul.w	r3, r1, r3
 8006502:	4413      	add	r3, r2
 8006504:	3360      	adds	r3, #96	; 0x60
 8006506:	2201      	movs	r2, #1
 8006508:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	b2d9      	uxtb	r1, r3
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	202c      	movs	r0, #44	; 0x2c
 8006514:	fb00 f303 	mul.w	r3, r0, r3
 8006518:	4413      	add	r3, r2
 800651a:	3360      	adds	r3, #96	; 0x60
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	461a      	mov	r2, r3
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f015 feb1 	bl	801c288 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006526:	e034      	b.n	8006592 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	212c      	movs	r1, #44	; 0x2c
 800652e:	fb01 f303 	mul.w	r3, r1, r3
 8006532:	4413      	add	r3, r2
 8006534:	333f      	adds	r3, #63	; 0x3f
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d12a      	bne.n	8006592 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	212c      	movs	r1, #44	; 0x2c
 8006542:	fb01 f303 	mul.w	r3, r1, r3
 8006546:	4413      	add	r3, r2
 8006548:	3360      	adds	r3, #96	; 0x60
 800654a:	2201      	movs	r2, #1
 800654c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	212c      	movs	r1, #44	; 0x2c
 8006554:	fb01 f303 	mul.w	r3, r1, r3
 8006558:	4413      	add	r3, r2
 800655a:	3354      	adds	r3, #84	; 0x54
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	f083 0301 	eor.w	r3, r3, #1
 8006562:	b2d8      	uxtb	r0, r3
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	212c      	movs	r1, #44	; 0x2c
 800656a:	fb01 f303 	mul.w	r3, r1, r3
 800656e:	4413      	add	r3, r2
 8006570:	3354      	adds	r3, #84	; 0x54
 8006572:	4602      	mov	r2, r0
 8006574:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	b2d9      	uxtb	r1, r3
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	202c      	movs	r0, #44	; 0x2c
 8006580:	fb00 f303 	mul.w	r3, r0, r3
 8006584:	4413      	add	r3, r2
 8006586:	3360      	adds	r3, #96	; 0x60
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	461a      	mov	r2, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f015 fe7b 	bl	801c288 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d12b      	bne.n	80065f2 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	212c      	movs	r1, #44	; 0x2c
 80065a0:	fb01 f303 	mul.w	r3, r1, r3
 80065a4:	4413      	add	r3, r2
 80065a6:	3348      	adds	r3, #72	; 0x48
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6879      	ldr	r1, [r7, #4]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	202c      	movs	r0, #44	; 0x2c
 80065b0:	fb00 f202 	mul.w	r2, r0, r2
 80065b4:	440a      	add	r2, r1
 80065b6:	3240      	adds	r2, #64	; 0x40
 80065b8:	8812      	ldrh	r2, [r2, #0]
 80065ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f000 81be 	beq.w	8006944 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	212c      	movs	r1, #44	; 0x2c
 80065ce:	fb01 f303 	mul.w	r3, r1, r3
 80065d2:	4413      	add	r3, r2
 80065d4:	3354      	adds	r3, #84	; 0x54
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	f083 0301 	eor.w	r3, r3, #1
 80065dc:	b2d8      	uxtb	r0, r3
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	212c      	movs	r1, #44	; 0x2c
 80065e4:	fb01 f303 	mul.w	r3, r1, r3
 80065e8:	4413      	add	r3, r2
 80065ea:	3354      	adds	r3, #84	; 0x54
 80065ec:	4602      	mov	r2, r0
 80065ee:	701a      	strb	r2, [r3, #0]
}
 80065f0:	e1a8      	b.n	8006944 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	212c      	movs	r1, #44	; 0x2c
 80065f8:	fb01 f303 	mul.w	r3, r1, r3
 80065fc:	4413      	add	r3, r2
 80065fe:	3354      	adds	r3, #84	; 0x54
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	f083 0301 	eor.w	r3, r3, #1
 8006606:	b2d8      	uxtb	r0, r3
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	212c      	movs	r1, #44	; 0x2c
 800660e:	fb01 f303 	mul.w	r3, r1, r3
 8006612:	4413      	add	r3, r2
 8006614:	3354      	adds	r3, #84	; 0x54
 8006616:	4602      	mov	r2, r0
 8006618:	701a      	strb	r2, [r3, #0]
}
 800661a:	e193      	b.n	8006944 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	4413      	add	r3, r2
 8006624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b02      	cmp	r3, #2
 8006630:	f040 8106 	bne.w	8006840 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	4413      	add	r3, r2
 800663c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	0151      	lsls	r1, r2, #5
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	440a      	add	r2, r1
 800664a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800664e:	f023 0302 	bic.w	r3, r3, #2
 8006652:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	212c      	movs	r1, #44	; 0x2c
 800665a:	fb01 f303 	mul.w	r3, r1, r3
 800665e:	4413      	add	r3, r2
 8006660:	3361      	adds	r3, #97	; 0x61
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d109      	bne.n	800667c <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	212c      	movs	r1, #44	; 0x2c
 800666e:	fb01 f303 	mul.w	r3, r1, r3
 8006672:	4413      	add	r3, r2
 8006674:	3360      	adds	r3, #96	; 0x60
 8006676:	2201      	movs	r2, #1
 8006678:	701a      	strb	r2, [r3, #0]
 800667a:	e0c9      	b.n	8006810 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	212c      	movs	r1, #44	; 0x2c
 8006682:	fb01 f303 	mul.w	r3, r1, r3
 8006686:	4413      	add	r3, r2
 8006688:	3361      	adds	r3, #97	; 0x61
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	2b05      	cmp	r3, #5
 800668e:	d109      	bne.n	80066a4 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	212c      	movs	r1, #44	; 0x2c
 8006696:	fb01 f303 	mul.w	r3, r1, r3
 800669a:	4413      	add	r3, r2
 800669c:	3360      	adds	r3, #96	; 0x60
 800669e:	2205      	movs	r2, #5
 80066a0:	701a      	strb	r2, [r3, #0]
 80066a2:	e0b5      	b.n	8006810 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	212c      	movs	r1, #44	; 0x2c
 80066aa:	fb01 f303 	mul.w	r3, r1, r3
 80066ae:	4413      	add	r3, r2
 80066b0:	3361      	adds	r3, #97	; 0x61
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	2b06      	cmp	r3, #6
 80066b6:	d009      	beq.n	80066cc <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	212c      	movs	r1, #44	; 0x2c
 80066be:	fb01 f303 	mul.w	r3, r1, r3
 80066c2:	4413      	add	r3, r2
 80066c4:	3361      	adds	r3, #97	; 0x61
 80066c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80066c8:	2b08      	cmp	r3, #8
 80066ca:	d150      	bne.n	800676e <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	212c      	movs	r1, #44	; 0x2c
 80066d2:	fb01 f303 	mul.w	r3, r1, r3
 80066d6:	4413      	add	r3, r2
 80066d8:	335c      	adds	r3, #92	; 0x5c
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	1c5a      	adds	r2, r3, #1
 80066de:	6879      	ldr	r1, [r7, #4]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	202c      	movs	r0, #44	; 0x2c
 80066e4:	fb00 f303 	mul.w	r3, r0, r3
 80066e8:	440b      	add	r3, r1
 80066ea:	335c      	adds	r3, #92	; 0x5c
 80066ec:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	212c      	movs	r1, #44	; 0x2c
 80066f4:	fb01 f303 	mul.w	r3, r1, r3
 80066f8:	4413      	add	r3, r2
 80066fa:	335c      	adds	r3, #92	; 0x5c
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d912      	bls.n	8006728 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	212c      	movs	r1, #44	; 0x2c
 8006708:	fb01 f303 	mul.w	r3, r1, r3
 800670c:	4413      	add	r3, r2
 800670e:	335c      	adds	r3, #92	; 0x5c
 8006710:	2200      	movs	r2, #0
 8006712:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	212c      	movs	r1, #44	; 0x2c
 800671a:	fb01 f303 	mul.w	r3, r1, r3
 800671e:	4413      	add	r3, r2
 8006720:	3360      	adds	r3, #96	; 0x60
 8006722:	2204      	movs	r2, #4
 8006724:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006726:	e073      	b.n	8006810 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	212c      	movs	r1, #44	; 0x2c
 800672e:	fb01 f303 	mul.w	r3, r1, r3
 8006732:	4413      	add	r3, r2
 8006734:	3360      	adds	r3, #96	; 0x60
 8006736:	2202      	movs	r2, #2
 8006738:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	4413      	add	r3, r2
 8006742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006750:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006758:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	4413      	add	r3, r2
 8006762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006766:	461a      	mov	r2, r3
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800676c:	e050      	b.n	8006810 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	212c      	movs	r1, #44	; 0x2c
 8006774:	fb01 f303 	mul.w	r3, r1, r3
 8006778:	4413      	add	r3, r2
 800677a:	3361      	adds	r3, #97	; 0x61
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	2b03      	cmp	r3, #3
 8006780:	d122      	bne.n	80067c8 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	212c      	movs	r1, #44	; 0x2c
 8006788:	fb01 f303 	mul.w	r3, r1, r3
 800678c:	4413      	add	r3, r2
 800678e:	3360      	adds	r3, #96	; 0x60
 8006790:	2202      	movs	r2, #2
 8006792:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	4413      	add	r3, r2
 800679c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80067aa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067b2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	015a      	lsls	r2, r3, #5
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	4413      	add	r3, r2
 80067bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c0:	461a      	mov	r2, r3
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	6013      	str	r3, [r2, #0]
 80067c6:	e023      	b.n	8006810 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	212c      	movs	r1, #44	; 0x2c
 80067ce:	fb01 f303 	mul.w	r3, r1, r3
 80067d2:	4413      	add	r3, r2
 80067d4:	3361      	adds	r3, #97	; 0x61
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	2b07      	cmp	r3, #7
 80067da:	d119      	bne.n	8006810 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	212c      	movs	r1, #44	; 0x2c
 80067e2:	fb01 f303 	mul.w	r3, r1, r3
 80067e6:	4413      	add	r3, r2
 80067e8:	335c      	adds	r3, #92	; 0x5c
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	1c5a      	adds	r2, r3, #1
 80067ee:	6879      	ldr	r1, [r7, #4]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	202c      	movs	r0, #44	; 0x2c
 80067f4:	fb00 f303 	mul.w	r3, r0, r3
 80067f8:	440b      	add	r3, r1
 80067fa:	335c      	adds	r3, #92	; 0x5c
 80067fc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	212c      	movs	r1, #44	; 0x2c
 8006804:	fb01 f303 	mul.w	r3, r1, r3
 8006808:	4413      	add	r3, r2
 800680a:	3360      	adds	r3, #96	; 0x60
 800680c:	2204      	movs	r2, #4
 800680e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	4413      	add	r3, r2
 8006818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800681c:	461a      	mov	r2, r3
 800681e:	2302      	movs	r3, #2
 8006820:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	b2d9      	uxtb	r1, r3
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	202c      	movs	r0, #44	; 0x2c
 800682c:	fb00 f303 	mul.w	r3, r0, r3
 8006830:	4413      	add	r3, r2
 8006832:	3360      	adds	r3, #96	; 0x60
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	461a      	mov	r2, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f015 fd25 	bl	801c288 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800683e:	e081      	b.n	8006944 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	015a      	lsls	r2, r3, #5
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	4413      	add	r3, r2
 8006848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f003 0310 	and.w	r3, r3, #16
 8006852:	2b10      	cmp	r3, #16
 8006854:	d176      	bne.n	8006944 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	212c      	movs	r1, #44	; 0x2c
 800685c:	fb01 f303 	mul.w	r3, r1, r3
 8006860:	4413      	add	r3, r2
 8006862:	333f      	adds	r3, #63	; 0x3f
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	2b03      	cmp	r3, #3
 8006868:	d121      	bne.n	80068ae <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	212c      	movs	r1, #44	; 0x2c
 8006870:	fb01 f303 	mul.w	r3, r1, r3
 8006874:	4413      	add	r3, r2
 8006876:	335c      	adds	r3, #92	; 0x5c
 8006878:	2200      	movs	r2, #0
 800687a:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	4413      	add	r3, r2
 8006884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	0151      	lsls	r1, r2, #5
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	440a      	add	r2, r1
 8006892:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006896:	f043 0302 	orr.w	r3, r3, #2
 800689a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	b2d2      	uxtb	r2, r2
 80068a4:	4611      	mov	r1, r2
 80068a6:	4618      	mov	r0, r3
 80068a8:	f007 fba1 	bl	800dfee <USB_HC_Halt>
 80068ac:	e041      	b.n	8006932 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	212c      	movs	r1, #44	; 0x2c
 80068b4:	fb01 f303 	mul.w	r3, r1, r3
 80068b8:	4413      	add	r3, r2
 80068ba:	333f      	adds	r3, #63	; 0x3f
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d009      	beq.n	80068d6 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	212c      	movs	r1, #44	; 0x2c
 80068c8:	fb01 f303 	mul.w	r3, r1, r3
 80068cc:	4413      	add	r3, r2
 80068ce:	333f      	adds	r3, #63	; 0x3f
 80068d0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d12d      	bne.n	8006932 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	212c      	movs	r1, #44	; 0x2c
 80068dc:	fb01 f303 	mul.w	r3, r1, r3
 80068e0:	4413      	add	r3, r2
 80068e2:	335c      	adds	r3, #92	; 0x5c
 80068e4:	2200      	movs	r2, #0
 80068e6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d120      	bne.n	8006932 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	212c      	movs	r1, #44	; 0x2c
 80068f6:	fb01 f303 	mul.w	r3, r1, r3
 80068fa:	4413      	add	r3, r2
 80068fc:	3361      	adds	r3, #97	; 0x61
 80068fe:	2203      	movs	r2, #3
 8006900:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	4413      	add	r3, r2
 800690a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	0151      	lsls	r1, r2, #5
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	440a      	add	r2, r1
 8006918:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800691c:	f043 0302 	orr.w	r3, r3, #2
 8006920:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	b2d2      	uxtb	r2, r2
 800692a:	4611      	mov	r1, r2
 800692c:	4618      	mov	r0, r3
 800692e:	f007 fb5e 	bl	800dfee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	4413      	add	r3, r2
 800693a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800693e:	461a      	mov	r2, r3
 8006940:	2310      	movs	r3, #16
 8006942:	6093      	str	r3, [r2, #8]
}
 8006944:	bf00      	nop
 8006946:	3718      	adds	r7, #24
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b088      	sub	sp, #32
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	460b      	mov	r3, r1
 8006956:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8006962:	78fb      	ldrb	r3, [r7, #3]
 8006964:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	015a      	lsls	r2, r3, #5
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	4413      	add	r3, r2
 800696e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b04      	cmp	r3, #4
 800697a:	d119      	bne.n	80069b0 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	4413      	add	r3, r2
 8006984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006988:	461a      	mov	r2, r3
 800698a:	2304      	movs	r3, #4
 800698c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	015a      	lsls	r2, r3, #5
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	4413      	add	r3, r2
 8006996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	0151      	lsls	r1, r2, #5
 80069a0:	69ba      	ldr	r2, [r7, #24]
 80069a2:	440a      	add	r2, r1
 80069a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069a8:	f043 0302 	orr.w	r3, r3, #2
 80069ac:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80069ae:	e3c6      	b.n	800713e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f003 0320 	and.w	r3, r3, #32
 80069c2:	2b20      	cmp	r3, #32
 80069c4:	d13e      	bne.n	8006a44 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069d2:	461a      	mov	r2, r3
 80069d4:	2320      	movs	r3, #32
 80069d6:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	212c      	movs	r1, #44	; 0x2c
 80069de:	fb01 f303 	mul.w	r3, r1, r3
 80069e2:	4413      	add	r3, r2
 80069e4:	333d      	adds	r3, #61	; 0x3d
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	f040 83a8 	bne.w	800713e <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	212c      	movs	r1, #44	; 0x2c
 80069f4:	fb01 f303 	mul.w	r3, r1, r3
 80069f8:	4413      	add	r3, r2
 80069fa:	333d      	adds	r3, #61	; 0x3d
 80069fc:	2200      	movs	r2, #0
 80069fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	212c      	movs	r1, #44	; 0x2c
 8006a06:	fb01 f303 	mul.w	r3, r1, r3
 8006a0a:	4413      	add	r3, r2
 8006a0c:	3360      	adds	r3, #96	; 0x60
 8006a0e:	2202      	movs	r2, #2
 8006a10:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	015a      	lsls	r2, r3, #5
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	4413      	add	r3, r2
 8006a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	0151      	lsls	r1, r2, #5
 8006a24:	69ba      	ldr	r2, [r7, #24]
 8006a26:	440a      	add	r2, r1
 8006a28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a2c:	f043 0302 	orr.w	r3, r3, #2
 8006a30:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	b2d2      	uxtb	r2, r2
 8006a3a:	4611      	mov	r1, r2
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f007 fad6 	bl	800dfee <USB_HC_Halt>
}
 8006a42:	e37c      	b.n	800713e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	015a      	lsls	r2, r3, #5
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a5a:	d122      	bne.n	8006aa2 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	0151      	lsls	r1, r2, #5
 8006a6e:	69ba      	ldr	r2, [r7, #24]
 8006a70:	440a      	add	r2, r1
 8006a72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a76:	f043 0302 	orr.w	r3, r3, #2
 8006a7a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	b2d2      	uxtb	r2, r2
 8006a84:	4611      	mov	r1, r2
 8006a86:	4618      	mov	r0, r3
 8006a88:	f007 fab1 	bl	800dfee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	015a      	lsls	r2, r3, #5
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	4413      	add	r3, r2
 8006a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a98:	461a      	mov	r2, r3
 8006a9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a9e:	6093      	str	r3, [r2, #8]
}
 8006aa0:	e34d      	b.n	800713e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	015a      	lsls	r2, r3, #5
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f003 0301 	and.w	r3, r3, #1
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d150      	bne.n	8006b5a <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	212c      	movs	r1, #44	; 0x2c
 8006abe:	fb01 f303 	mul.w	r3, r1, r3
 8006ac2:	4413      	add	r3, r2
 8006ac4:	335c      	adds	r3, #92	; 0x5c
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	015a      	lsls	r2, r3, #5
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006adc:	2b40      	cmp	r3, #64	; 0x40
 8006ade:	d111      	bne.n	8006b04 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	212c      	movs	r1, #44	; 0x2c
 8006ae6:	fb01 f303 	mul.w	r3, r1, r3
 8006aea:	4413      	add	r3, r2
 8006aec:	333d      	adds	r3, #61	; 0x3d
 8006aee:	2201      	movs	r2, #1
 8006af0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	015a      	lsls	r2, r3, #5
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	4413      	add	r3, r2
 8006afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006afe:	461a      	mov	r2, r3
 8006b00:	2340      	movs	r3, #64	; 0x40
 8006b02:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	015a      	lsls	r2, r3, #5
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	0151      	lsls	r1, r2, #5
 8006b16:	69ba      	ldr	r2, [r7, #24]
 8006b18:	440a      	add	r2, r1
 8006b1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b1e:	f043 0302 	orr.w	r3, r3, #2
 8006b22:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	b2d2      	uxtb	r2, r2
 8006b2c:	4611      	mov	r1, r2
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f007 fa5d 	bl	800dfee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	015a      	lsls	r2, r3, #5
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b40:	461a      	mov	r2, r3
 8006b42:	2301      	movs	r3, #1
 8006b44:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	212c      	movs	r1, #44	; 0x2c
 8006b4c:	fb01 f303 	mul.w	r3, r1, r3
 8006b50:	4413      	add	r3, r2
 8006b52:	3361      	adds	r3, #97	; 0x61
 8006b54:	2201      	movs	r2, #1
 8006b56:	701a      	strb	r2, [r3, #0]
}
 8006b58:	e2f1      	b.n	800713e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	015a      	lsls	r2, r3, #5
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b6c:	2b40      	cmp	r3, #64	; 0x40
 8006b6e:	d13c      	bne.n	8006bea <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	212c      	movs	r1, #44	; 0x2c
 8006b76:	fb01 f303 	mul.w	r3, r1, r3
 8006b7a:	4413      	add	r3, r2
 8006b7c:	3361      	adds	r3, #97	; 0x61
 8006b7e:	2204      	movs	r2, #4
 8006b80:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	212c      	movs	r1, #44	; 0x2c
 8006b88:	fb01 f303 	mul.w	r3, r1, r3
 8006b8c:	4413      	add	r3, r2
 8006b8e:	333d      	adds	r3, #61	; 0x3d
 8006b90:	2201      	movs	r2, #1
 8006b92:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	212c      	movs	r1, #44	; 0x2c
 8006b9a:	fb01 f303 	mul.w	r3, r1, r3
 8006b9e:	4413      	add	r3, r2
 8006ba0:	335c      	adds	r3, #92	; 0x5c
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	015a      	lsls	r2, r3, #5
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	4413      	add	r3, r2
 8006bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	0151      	lsls	r1, r2, #5
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	440a      	add	r2, r1
 8006bbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bc0:	f043 0302 	orr.w	r3, r3, #2
 8006bc4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	697a      	ldr	r2, [r7, #20]
 8006bcc:	b2d2      	uxtb	r2, r2
 8006bce:	4611      	mov	r1, r2
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f007 fa0c 	bl	800dfee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	015a      	lsls	r2, r3, #5
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be2:	461a      	mov	r2, r3
 8006be4:	2340      	movs	r3, #64	; 0x40
 8006be6:	6093      	str	r3, [r2, #8]
}
 8006be8:	e2a9      	b.n	800713e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	015a      	lsls	r2, r3, #5
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f003 0308 	and.w	r3, r3, #8
 8006bfc:	2b08      	cmp	r3, #8
 8006bfe:	d12a      	bne.n	8006c56 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	015a      	lsls	r2, r3, #5
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	2308      	movs	r3, #8
 8006c10:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	015a      	lsls	r2, r3, #5
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	4413      	add	r3, r2
 8006c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	0151      	lsls	r1, r2, #5
 8006c24:	69ba      	ldr	r2, [r7, #24]
 8006c26:	440a      	add	r2, r1
 8006c28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c2c:	f043 0302 	orr.w	r3, r3, #2
 8006c30:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	b2d2      	uxtb	r2, r2
 8006c3a:	4611      	mov	r1, r2
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f007 f9d6 	bl	800dfee <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	212c      	movs	r1, #44	; 0x2c
 8006c48:	fb01 f303 	mul.w	r3, r1, r3
 8006c4c:	4413      	add	r3, r2
 8006c4e:	3361      	adds	r3, #97	; 0x61
 8006c50:	2205      	movs	r2, #5
 8006c52:	701a      	strb	r2, [r3, #0]
}
 8006c54:	e273      	b.n	800713e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	015a      	lsls	r2, r3, #5
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f003 0310 	and.w	r3, r3, #16
 8006c68:	2b10      	cmp	r3, #16
 8006c6a:	d150      	bne.n	8006d0e <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	212c      	movs	r1, #44	; 0x2c
 8006c72:	fb01 f303 	mul.w	r3, r1, r3
 8006c76:	4413      	add	r3, r2
 8006c78:	335c      	adds	r3, #92	; 0x5c
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	212c      	movs	r1, #44	; 0x2c
 8006c84:	fb01 f303 	mul.w	r3, r1, r3
 8006c88:	4413      	add	r3, r2
 8006c8a:	3361      	adds	r3, #97	; 0x61
 8006c8c:	2203      	movs	r2, #3
 8006c8e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	212c      	movs	r1, #44	; 0x2c
 8006c96:	fb01 f303 	mul.w	r3, r1, r3
 8006c9a:	4413      	add	r3, r2
 8006c9c:	333d      	adds	r3, #61	; 0x3d
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d112      	bne.n	8006cca <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	212c      	movs	r1, #44	; 0x2c
 8006caa:	fb01 f303 	mul.w	r3, r1, r3
 8006cae:	4413      	add	r3, r2
 8006cb0:	333c      	adds	r3, #60	; 0x3c
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d108      	bne.n	8006cca <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	212c      	movs	r1, #44	; 0x2c
 8006cbe:	fb01 f303 	mul.w	r3, r1, r3
 8006cc2:	4413      	add	r3, r2
 8006cc4:	333d      	adds	r3, #61	; 0x3d
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	697a      	ldr	r2, [r7, #20]
 8006cda:	0151      	lsls	r1, r2, #5
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	440a      	add	r2, r1
 8006ce0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ce4:	f043 0302 	orr.w	r3, r3, #2
 8006ce8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	b2d2      	uxtb	r2, r2
 8006cf2:	4611      	mov	r1, r2
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f007 f97a 	bl	800dfee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d06:	461a      	mov	r2, r3
 8006d08:	2310      	movs	r3, #16
 8006d0a:	6093      	str	r3, [r2, #8]
}
 8006d0c:	e217      	b.n	800713e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	015a      	lsls	r2, r3, #5
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	4413      	add	r3, r2
 8006d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d20:	2b80      	cmp	r3, #128	; 0x80
 8006d22:	d174      	bne.n	8006e0e <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d121      	bne.n	8006d70 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	212c      	movs	r1, #44	; 0x2c
 8006d32:	fb01 f303 	mul.w	r3, r1, r3
 8006d36:	4413      	add	r3, r2
 8006d38:	3361      	adds	r3, #97	; 0x61
 8006d3a:	2206      	movs	r2, #6
 8006d3c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	015a      	lsls	r2, r3, #5
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	4413      	add	r3, r2
 8006d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	697a      	ldr	r2, [r7, #20]
 8006d4e:	0151      	lsls	r1, r2, #5
 8006d50:	69ba      	ldr	r2, [r7, #24]
 8006d52:	440a      	add	r2, r1
 8006d54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d58:	f043 0302 	orr.w	r3, r3, #2
 8006d5c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	b2d2      	uxtb	r2, r2
 8006d66:	4611      	mov	r1, r2
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f007 f940 	bl	800dfee <USB_HC_Halt>
 8006d6e:	e044      	b.n	8006dfa <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	212c      	movs	r1, #44	; 0x2c
 8006d76:	fb01 f303 	mul.w	r3, r1, r3
 8006d7a:	4413      	add	r3, r2
 8006d7c:	335c      	adds	r3, #92	; 0x5c
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	1c5a      	adds	r2, r3, #1
 8006d82:	6879      	ldr	r1, [r7, #4]
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	202c      	movs	r0, #44	; 0x2c
 8006d88:	fb00 f303 	mul.w	r3, r0, r3
 8006d8c:	440b      	add	r3, r1
 8006d8e:	335c      	adds	r3, #92	; 0x5c
 8006d90:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	212c      	movs	r1, #44	; 0x2c
 8006d98:	fb01 f303 	mul.w	r3, r1, r3
 8006d9c:	4413      	add	r3, r2
 8006d9e:	335c      	adds	r3, #92	; 0x5c
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d920      	bls.n	8006de8 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	212c      	movs	r1, #44	; 0x2c
 8006dac:	fb01 f303 	mul.w	r3, r1, r3
 8006db0:	4413      	add	r3, r2
 8006db2:	335c      	adds	r3, #92	; 0x5c
 8006db4:	2200      	movs	r2, #0
 8006db6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	212c      	movs	r1, #44	; 0x2c
 8006dbe:	fb01 f303 	mul.w	r3, r1, r3
 8006dc2:	4413      	add	r3, r2
 8006dc4:	3360      	adds	r3, #96	; 0x60
 8006dc6:	2204      	movs	r2, #4
 8006dc8:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	b2d9      	uxtb	r1, r3
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	202c      	movs	r0, #44	; 0x2c
 8006dd4:	fb00 f303 	mul.w	r3, r0, r3
 8006dd8:	4413      	add	r3, r2
 8006dda:	3360      	adds	r3, #96	; 0x60
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	461a      	mov	r2, r3
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f015 fa51 	bl	801c288 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006de6:	e008      	b.n	8006dfa <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	212c      	movs	r1, #44	; 0x2c
 8006dee:	fb01 f303 	mul.w	r3, r1, r3
 8006df2:	4413      	add	r3, r2
 8006df4:	3360      	adds	r3, #96	; 0x60
 8006df6:	2202      	movs	r2, #2
 8006df8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e06:	461a      	mov	r2, r3
 8006e08:	2380      	movs	r3, #128	; 0x80
 8006e0a:	6093      	str	r3, [r2, #8]
}
 8006e0c:	e197      	b.n	800713e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	015a      	lsls	r2, r3, #5
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e24:	d134      	bne.n	8006e90 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	015a      	lsls	r2, r3, #5
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	0151      	lsls	r1, r2, #5
 8006e38:	69ba      	ldr	r2, [r7, #24]
 8006e3a:	440a      	add	r2, r1
 8006e3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e40:	f043 0302 	orr.w	r3, r3, #2
 8006e44:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	b2d2      	uxtb	r2, r2
 8006e4e:	4611      	mov	r1, r2
 8006e50:	4618      	mov	r0, r3
 8006e52:	f007 f8cc 	bl	800dfee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	015a      	lsls	r2, r3, #5
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e62:	461a      	mov	r2, r3
 8006e64:	2310      	movs	r3, #16
 8006e66:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	015a      	lsls	r2, r3, #5
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	4413      	add	r3, r2
 8006e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e74:	461a      	mov	r2, r3
 8006e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	212c      	movs	r1, #44	; 0x2c
 8006e82:	fb01 f303 	mul.w	r3, r1, r3
 8006e86:	4413      	add	r3, r2
 8006e88:	3361      	adds	r3, #97	; 0x61
 8006e8a:	2208      	movs	r2, #8
 8006e8c:	701a      	strb	r2, [r3, #0]
}
 8006e8e:	e156      	b.n	800713e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	f040 814b 	bne.w	800713e <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	015a      	lsls	r2, r3, #5
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	4413      	add	r3, r2
 8006eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	0151      	lsls	r1, r2, #5
 8006eba:	69ba      	ldr	r2, [r7, #24]
 8006ebc:	440a      	add	r2, r1
 8006ebe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ec2:	f023 0302 	bic.w	r3, r3, #2
 8006ec6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	212c      	movs	r1, #44	; 0x2c
 8006ece:	fb01 f303 	mul.w	r3, r1, r3
 8006ed2:	4413      	add	r3, r2
 8006ed4:	3361      	adds	r3, #97	; 0x61
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d179      	bne.n	8006fd0 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	212c      	movs	r1, #44	; 0x2c
 8006ee2:	fb01 f303 	mul.w	r3, r1, r3
 8006ee6:	4413      	add	r3, r2
 8006ee8:	3360      	adds	r3, #96	; 0x60
 8006eea:	2201      	movs	r2, #1
 8006eec:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	212c      	movs	r1, #44	; 0x2c
 8006ef4:	fb01 f303 	mul.w	r3, r1, r3
 8006ef8:	4413      	add	r3, r2
 8006efa:	333f      	adds	r3, #63	; 0x3f
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d00a      	beq.n	8006f18 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	212c      	movs	r1, #44	; 0x2c
 8006f08:	fb01 f303 	mul.w	r3, r1, r3
 8006f0c:	4413      	add	r3, r2
 8006f0e:	333f      	adds	r3, #63	; 0x3f
 8006f10:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006f12:	2b03      	cmp	r3, #3
 8006f14:	f040 80fc 	bne.w	8007110 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d142      	bne.n	8006fa6 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	212c      	movs	r1, #44	; 0x2c
 8006f26:	fb01 f303 	mul.w	r3, r1, r3
 8006f2a:	4413      	add	r3, r2
 8006f2c:	334c      	adds	r3, #76	; 0x4c
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f000 80ed 	beq.w	8007110 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	212c      	movs	r1, #44	; 0x2c
 8006f3c:	fb01 f303 	mul.w	r3, r1, r3
 8006f40:	4413      	add	r3, r2
 8006f42:	334c      	adds	r3, #76	; 0x4c
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	6879      	ldr	r1, [r7, #4]
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	202c      	movs	r0, #44	; 0x2c
 8006f4c:	fb00 f202 	mul.w	r2, r0, r2
 8006f50:	440a      	add	r2, r1
 8006f52:	3240      	adds	r2, #64	; 0x40
 8006f54:	8812      	ldrh	r2, [r2, #0]
 8006f56:	4413      	add	r3, r2
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	6879      	ldr	r1, [r7, #4]
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	202c      	movs	r0, #44	; 0x2c
 8006f60:	fb00 f202 	mul.w	r2, r0, r2
 8006f64:	440a      	add	r2, r1
 8006f66:	3240      	adds	r2, #64	; 0x40
 8006f68:	8812      	ldrh	r2, [r2, #0]
 8006f6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f6e:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f000 80ca 	beq.w	8007110 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	212c      	movs	r1, #44	; 0x2c
 8006f82:	fb01 f303 	mul.w	r3, r1, r3
 8006f86:	4413      	add	r3, r2
 8006f88:	3355      	adds	r3, #85	; 0x55
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	f083 0301 	eor.w	r3, r3, #1
 8006f90:	b2d8      	uxtb	r0, r3
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	212c      	movs	r1, #44	; 0x2c
 8006f98:	fb01 f303 	mul.w	r3, r1, r3
 8006f9c:	4413      	add	r3, r2
 8006f9e:	3355      	adds	r3, #85	; 0x55
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	701a      	strb	r2, [r3, #0]
 8006fa4:	e0b4      	b.n	8007110 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	212c      	movs	r1, #44	; 0x2c
 8006fac:	fb01 f303 	mul.w	r3, r1, r3
 8006fb0:	4413      	add	r3, r2
 8006fb2:	3355      	adds	r3, #85	; 0x55
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	f083 0301 	eor.w	r3, r3, #1
 8006fba:	b2d8      	uxtb	r0, r3
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	212c      	movs	r1, #44	; 0x2c
 8006fc2:	fb01 f303 	mul.w	r3, r1, r3
 8006fc6:	4413      	add	r3, r2
 8006fc8:	3355      	adds	r3, #85	; 0x55
 8006fca:	4602      	mov	r2, r0
 8006fcc:	701a      	strb	r2, [r3, #0]
 8006fce:	e09f      	b.n	8007110 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	212c      	movs	r1, #44	; 0x2c
 8006fd6:	fb01 f303 	mul.w	r3, r1, r3
 8006fda:	4413      	add	r3, r2
 8006fdc:	3361      	adds	r3, #97	; 0x61
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	2b03      	cmp	r3, #3
 8006fe2:	d109      	bne.n	8006ff8 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	212c      	movs	r1, #44	; 0x2c
 8006fea:	fb01 f303 	mul.w	r3, r1, r3
 8006fee:	4413      	add	r3, r2
 8006ff0:	3360      	adds	r3, #96	; 0x60
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	701a      	strb	r2, [r3, #0]
 8006ff6:	e08b      	b.n	8007110 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	212c      	movs	r1, #44	; 0x2c
 8006ffe:	fb01 f303 	mul.w	r3, r1, r3
 8007002:	4413      	add	r3, r2
 8007004:	3361      	adds	r3, #97	; 0x61
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	2b04      	cmp	r3, #4
 800700a:	d109      	bne.n	8007020 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	212c      	movs	r1, #44	; 0x2c
 8007012:	fb01 f303 	mul.w	r3, r1, r3
 8007016:	4413      	add	r3, r2
 8007018:	3360      	adds	r3, #96	; 0x60
 800701a:	2202      	movs	r2, #2
 800701c:	701a      	strb	r2, [r3, #0]
 800701e:	e077      	b.n	8007110 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	212c      	movs	r1, #44	; 0x2c
 8007026:	fb01 f303 	mul.w	r3, r1, r3
 800702a:	4413      	add	r3, r2
 800702c:	3361      	adds	r3, #97	; 0x61
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	2b05      	cmp	r3, #5
 8007032:	d109      	bne.n	8007048 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	212c      	movs	r1, #44	; 0x2c
 800703a:	fb01 f303 	mul.w	r3, r1, r3
 800703e:	4413      	add	r3, r2
 8007040:	3360      	adds	r3, #96	; 0x60
 8007042:	2205      	movs	r2, #5
 8007044:	701a      	strb	r2, [r3, #0]
 8007046:	e063      	b.n	8007110 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	212c      	movs	r1, #44	; 0x2c
 800704e:	fb01 f303 	mul.w	r3, r1, r3
 8007052:	4413      	add	r3, r2
 8007054:	3361      	adds	r3, #97	; 0x61
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	2b06      	cmp	r3, #6
 800705a:	d009      	beq.n	8007070 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	212c      	movs	r1, #44	; 0x2c
 8007062:	fb01 f303 	mul.w	r3, r1, r3
 8007066:	4413      	add	r3, r2
 8007068:	3361      	adds	r3, #97	; 0x61
 800706a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800706c:	2b08      	cmp	r3, #8
 800706e:	d14f      	bne.n	8007110 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	212c      	movs	r1, #44	; 0x2c
 8007076:	fb01 f303 	mul.w	r3, r1, r3
 800707a:	4413      	add	r3, r2
 800707c:	335c      	adds	r3, #92	; 0x5c
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	1c5a      	adds	r2, r3, #1
 8007082:	6879      	ldr	r1, [r7, #4]
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	202c      	movs	r0, #44	; 0x2c
 8007088:	fb00 f303 	mul.w	r3, r0, r3
 800708c:	440b      	add	r3, r1
 800708e:	335c      	adds	r3, #92	; 0x5c
 8007090:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	212c      	movs	r1, #44	; 0x2c
 8007098:	fb01 f303 	mul.w	r3, r1, r3
 800709c:	4413      	add	r3, r2
 800709e:	335c      	adds	r3, #92	; 0x5c
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d912      	bls.n	80070cc <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	212c      	movs	r1, #44	; 0x2c
 80070ac:	fb01 f303 	mul.w	r3, r1, r3
 80070b0:	4413      	add	r3, r2
 80070b2:	335c      	adds	r3, #92	; 0x5c
 80070b4:	2200      	movs	r2, #0
 80070b6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	212c      	movs	r1, #44	; 0x2c
 80070be:	fb01 f303 	mul.w	r3, r1, r3
 80070c2:	4413      	add	r3, r2
 80070c4:	3360      	adds	r3, #96	; 0x60
 80070c6:	2204      	movs	r2, #4
 80070c8:	701a      	strb	r2, [r3, #0]
 80070ca:	e021      	b.n	8007110 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	212c      	movs	r1, #44	; 0x2c
 80070d2:	fb01 f303 	mul.w	r3, r1, r3
 80070d6:	4413      	add	r3, r2
 80070d8:	3360      	adds	r3, #96	; 0x60
 80070da:	2202      	movs	r2, #2
 80070dc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	015a      	lsls	r2, r3, #5
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80070f4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070fc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	4413      	add	r3, r2
 8007106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800710a:	461a      	mov	r2, r3
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	4413      	add	r3, r2
 8007118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800711c:	461a      	mov	r2, r3
 800711e:	2302      	movs	r3, #2
 8007120:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	b2d9      	uxtb	r1, r3
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	202c      	movs	r0, #44	; 0x2c
 800712c:	fb00 f303 	mul.w	r3, r0, r3
 8007130:	4413      	add	r3, r2
 8007132:	3360      	adds	r3, #96	; 0x60
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	461a      	mov	r2, r3
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f015 f8a5 	bl	801c288 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800713e:	bf00      	nop
 8007140:	3720      	adds	r7, #32
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b08a      	sub	sp, #40	; 0x28
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	f003 030f 	and.w	r3, r3, #15
 8007166:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	0c5b      	lsrs	r3, r3, #17
 800716c:	f003 030f 	and.w	r3, r3, #15
 8007170:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	091b      	lsrs	r3, r3, #4
 8007176:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800717a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	2b02      	cmp	r3, #2
 8007180:	d004      	beq.n	800718c <HCD_RXQLVL_IRQHandler+0x46>
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	2b05      	cmp	r3, #5
 8007186:	f000 80a9 	beq.w	80072dc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800718a:	e0aa      	b.n	80072e2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	2b00      	cmp	r3, #0
 8007190:	f000 80a6 	beq.w	80072e0 <HCD_RXQLVL_IRQHandler+0x19a>
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	212c      	movs	r1, #44	; 0x2c
 800719a:	fb01 f303 	mul.w	r3, r1, r3
 800719e:	4413      	add	r3, r2
 80071a0:	3344      	adds	r3, #68	; 0x44
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f000 809b 	beq.w	80072e0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	212c      	movs	r1, #44	; 0x2c
 80071b0:	fb01 f303 	mul.w	r3, r1, r3
 80071b4:	4413      	add	r3, r2
 80071b6:	3350      	adds	r3, #80	; 0x50
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	441a      	add	r2, r3
 80071be:	6879      	ldr	r1, [r7, #4]
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	202c      	movs	r0, #44	; 0x2c
 80071c4:	fb00 f303 	mul.w	r3, r0, r3
 80071c8:	440b      	add	r3, r1
 80071ca:	334c      	adds	r3, #76	; 0x4c
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d87a      	bhi.n	80072c8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6818      	ldr	r0, [r3, #0]
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	212c      	movs	r1, #44	; 0x2c
 80071dc:	fb01 f303 	mul.w	r3, r1, r3
 80071e0:	4413      	add	r3, r2
 80071e2:	3344      	adds	r3, #68	; 0x44
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	693a      	ldr	r2, [r7, #16]
 80071e8:	b292      	uxth	r2, r2
 80071ea:	4619      	mov	r1, r3
 80071ec:	f006 fa9e 	bl	800d72c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	212c      	movs	r1, #44	; 0x2c
 80071f6:	fb01 f303 	mul.w	r3, r1, r3
 80071fa:	4413      	add	r3, r2
 80071fc:	3344      	adds	r3, #68	; 0x44
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	441a      	add	r2, r3
 8007204:	6879      	ldr	r1, [r7, #4]
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	202c      	movs	r0, #44	; 0x2c
 800720a:	fb00 f303 	mul.w	r3, r0, r3
 800720e:	440b      	add	r3, r1
 8007210:	3344      	adds	r3, #68	; 0x44
 8007212:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	212c      	movs	r1, #44	; 0x2c
 800721a:	fb01 f303 	mul.w	r3, r1, r3
 800721e:	4413      	add	r3, r2
 8007220:	3350      	adds	r3, #80	; 0x50
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	441a      	add	r2, r3
 8007228:	6879      	ldr	r1, [r7, #4]
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	202c      	movs	r0, #44	; 0x2c
 800722e:	fb00 f303 	mul.w	r3, r0, r3
 8007232:	440b      	add	r3, r1
 8007234:	3350      	adds	r3, #80	; 0x50
 8007236:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	015a      	lsls	r2, r3, #5
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	4413      	add	r3, r2
 8007240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	0cdb      	lsrs	r3, r3, #19
 8007248:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800724c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	212c      	movs	r1, #44	; 0x2c
 8007254:	fb01 f303 	mul.w	r3, r1, r3
 8007258:	4413      	add	r3, r2
 800725a:	3340      	adds	r3, #64	; 0x40
 800725c:	881b      	ldrh	r3, [r3, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	4293      	cmp	r3, r2
 8007264:	d13c      	bne.n	80072e0 <HCD_RXQLVL_IRQHandler+0x19a>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d039      	beq.n	80072e0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	015a      	lsls	r2, r3, #5
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	4413      	add	r3, r2
 8007274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007282:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800728a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	015a      	lsls	r2, r3, #5
 8007290:	6a3b      	ldr	r3, [r7, #32]
 8007292:	4413      	add	r3, r2
 8007294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007298:	461a      	mov	r2, r3
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	212c      	movs	r1, #44	; 0x2c
 80072a4:	fb01 f303 	mul.w	r3, r1, r3
 80072a8:	4413      	add	r3, r2
 80072aa:	3354      	adds	r3, #84	; 0x54
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	f083 0301 	eor.w	r3, r3, #1
 80072b2:	b2d8      	uxtb	r0, r3
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	212c      	movs	r1, #44	; 0x2c
 80072ba:	fb01 f303 	mul.w	r3, r1, r3
 80072be:	4413      	add	r3, r2
 80072c0:	3354      	adds	r3, #84	; 0x54
 80072c2:	4602      	mov	r2, r0
 80072c4:	701a      	strb	r2, [r3, #0]
      break;
 80072c6:	e00b      	b.n	80072e0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	212c      	movs	r1, #44	; 0x2c
 80072ce:	fb01 f303 	mul.w	r3, r1, r3
 80072d2:	4413      	add	r3, r2
 80072d4:	3360      	adds	r3, #96	; 0x60
 80072d6:	2204      	movs	r2, #4
 80072d8:	701a      	strb	r2, [r3, #0]
      break;
 80072da:	e001      	b.n	80072e0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80072dc:	bf00      	nop
 80072de:	e000      	b.n	80072e2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80072e0:	bf00      	nop
  }
}
 80072e2:	bf00      	nop
 80072e4:	3728      	adds	r7, #40	; 0x28
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b086      	sub	sp, #24
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007316:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f003 0302 	and.w	r3, r3, #2
 800731e:	2b02      	cmp	r3, #2
 8007320:	d10b      	bne.n	800733a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f003 0301 	and.w	r3, r3, #1
 8007328:	2b01      	cmp	r3, #1
 800732a:	d102      	bne.n	8007332 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f014 ff8f 	bl	801c250 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	f043 0302 	orr.w	r3, r3, #2
 8007338:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f003 0308 	and.w	r3, r3, #8
 8007340:	2b08      	cmp	r3, #8
 8007342:	d132      	bne.n	80073aa <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	f043 0308 	orr.w	r3, r3, #8
 800734a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f003 0304 	and.w	r3, r3, #4
 8007352:	2b04      	cmp	r3, #4
 8007354:	d126      	bne.n	80073a4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	2b02      	cmp	r3, #2
 800735c:	d113      	bne.n	8007386 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007364:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007368:	d106      	bne.n	8007378 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2102      	movs	r1, #2
 8007370:	4618      	mov	r0, r3
 8007372:	f006 fb3f 	bl	800d9f4 <USB_InitFSLSPClkSel>
 8007376:	e011      	b.n	800739c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2101      	movs	r1, #1
 800737e:	4618      	mov	r0, r3
 8007380:	f006 fb38 	bl	800d9f4 <USB_InitFSLSPClkSel>
 8007384:	e00a      	b.n	800739c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d106      	bne.n	800739c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007394:	461a      	mov	r2, r3
 8007396:	f64e 2360 	movw	r3, #60000	; 0xea60
 800739a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f014 ff81 	bl	801c2a4 <HAL_HCD_PortEnabled_Callback>
 80073a2:	e002      	b.n	80073aa <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f014 ff8b 	bl	801c2c0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f003 0320 	and.w	r3, r3, #32
 80073b0:	2b20      	cmp	r3, #32
 80073b2:	d103      	bne.n	80073bc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	f043 0320 	orr.w	r3, r3, #32
 80073ba:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80073c2:	461a      	mov	r2, r3
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	6013      	str	r3, [r2, #0]
}
 80073c8:	bf00      	nop
 80073ca:	3718      	adds	r7, #24
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80073d8:	4a08      	ldr	r2, [pc, #32]	; (80073fc <HAL_HSEM_FastTake+0x2c>)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	3320      	adds	r3, #32
 80073de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073e2:	4a07      	ldr	r2, [pc, #28]	; (8007400 <HAL_HSEM_FastTake+0x30>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d101      	bne.n	80073ec <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	e000      	b.n	80073ee <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	58026400 	.word	0x58026400
 8007400:	80000300 	.word	0x80000300

08007404 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800740e:	4906      	ldr	r1, [pc, #24]	; (8007428 <HAL_HSEM_Release+0x24>)
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr
 8007428:	58026400 	.word	0x58026400

0800742c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8007434:	4b05      	ldr	r3, [pc, #20]	; (800744c <HAL_HSEM_ActivateNotification+0x20>)
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	4904      	ldr	r1, [pc, #16]	; (800744c <HAL_HSEM_ActivateNotification+0x20>)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4313      	orrs	r3, r2
 800743e:	600b      	str	r3, [r1, #0]
#endif
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr
 800744c:	58026500 	.word	0x58026500

08007450 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8007456:	4b0a      	ldr	r3, [pc, #40]	; (8007480 <HAL_HSEM_IRQHandler+0x30>)
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800745c:	4b08      	ldr	r3, [pc, #32]	; (8007480 <HAL_HSEM_IRQHandler+0x30>)
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	43db      	mvns	r3, r3
 8007464:	4906      	ldr	r1, [pc, #24]	; (8007480 <HAL_HSEM_IRQHandler+0x30>)
 8007466:	4013      	ands	r3, r2
 8007468:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800746a:	4a05      	ldr	r2, [pc, #20]	; (8007480 <HAL_HSEM_IRQHandler+0x30>)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f011 fd9f 	bl	8018fb4 <HAL_HSEM_FreeCallback>
}
 8007476:	bf00      	nop
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	58026500 	.word	0x58026500

08007484 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e07f      	b.n	8007596 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d106      	bne.n	80074b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7f9 fdb8 	bl	8001020 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2224      	movs	r2, #36	; 0x24
 80074b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f022 0201 	bic.w	r2, r2, #1
 80074c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80074d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	689a      	ldr	r2, [r3, #8]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d107      	bne.n	80074fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	689a      	ldr	r2, [r3, #8]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074fa:	609a      	str	r2, [r3, #8]
 80074fc:	e006      	b.n	800750c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	689a      	ldr	r2, [r3, #8]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800750a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	2b02      	cmp	r3, #2
 8007512:	d104      	bne.n	800751e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800751c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6859      	ldr	r1, [r3, #4]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	4b1d      	ldr	r3, [pc, #116]	; (80075a0 <HAL_I2C_Init+0x11c>)
 800752a:	430b      	orrs	r3, r1
 800752c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68da      	ldr	r2, [r3, #12]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800753c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	691a      	ldr	r2, [r3, #16]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	ea42 0103 	orr.w	r1, r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	021a      	lsls	r2, r3, #8
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	430a      	orrs	r2, r1
 8007556:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	69d9      	ldr	r1, [r3, #28]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a1a      	ldr	r2, [r3, #32]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	430a      	orrs	r2, r1
 8007566:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f042 0201 	orr.w	r2, r2, #1
 8007576:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2220      	movs	r2, #32
 8007582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	02008000 	.word	0x02008000

080075a4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	699b      	ldr	r3, [r3, #24]
 80075b2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d005      	beq.n	80075d0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	68f9      	ldr	r1, [r7, #12]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	4798      	blx	r3
  }
}
 80075d0:	bf00      	nop
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b20      	cmp	r3, #32
 80075ec:	d138      	bne.n	8007660 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d101      	bne.n	80075fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80075f8:	2302      	movs	r3, #2
 80075fa:	e032      	b.n	8007662 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2224      	movs	r2, #36	; 0x24
 8007608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f022 0201 	bic.w	r2, r2, #1
 800761a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800762a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6819      	ldr	r1, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	683a      	ldr	r2, [r7, #0]
 8007638:	430a      	orrs	r2, r1
 800763a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f042 0201 	orr.w	r2, r2, #1
 800764a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2220      	movs	r2, #32
 8007650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800765c:	2300      	movs	r3, #0
 800765e:	e000      	b.n	8007662 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007660:	2302      	movs	r3, #2
  }
}
 8007662:	4618      	mov	r0, r3
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800766e:	b480      	push	{r7}
 8007670:	b085      	sub	sp, #20
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800767e:	b2db      	uxtb	r3, r3
 8007680:	2b20      	cmp	r3, #32
 8007682:	d139      	bne.n	80076f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800768a:	2b01      	cmp	r3, #1
 800768c:	d101      	bne.n	8007692 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800768e:	2302      	movs	r3, #2
 8007690:	e033      	b.n	80076fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2201      	movs	r2, #1
 8007696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2224      	movs	r2, #36	; 0x24
 800769e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f022 0201 	bic.w	r2, r2, #1
 80076b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80076c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	021b      	lsls	r3, r3, #8
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f042 0201 	orr.w	r2, r2, #1
 80076e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2220      	movs	r2, #32
 80076e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80076f4:	2300      	movs	r3, #0
 80076f6:	e000      	b.n	80076fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80076f8:	2302      	movs	r3, #2
  }
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3714      	adds	r7, #20
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
	...

08007708 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007710:	4b29      	ldr	r3, [pc, #164]	; (80077b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	f003 0307 	and.w	r3, r3, #7
 8007718:	2b06      	cmp	r3, #6
 800771a:	d00a      	beq.n	8007732 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800771c:	4b26      	ldr	r3, [pc, #152]	; (80077b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	429a      	cmp	r2, r3
 8007728:	d001      	beq.n	800772e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e040      	b.n	80077b0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800772e:	2300      	movs	r3, #0
 8007730:	e03e      	b.n	80077b0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007732:	4b21      	ldr	r3, [pc, #132]	; (80077b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800773a:	491f      	ldr	r1, [pc, #124]	; (80077b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4313      	orrs	r3, r2
 8007740:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007742:	f7fa feff 	bl	8002544 <HAL_GetTick>
 8007746:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007748:	e009      	b.n	800775e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800774a:	f7fa fefb 	bl	8002544 <HAL_GetTick>
 800774e:	4602      	mov	r2, r0
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007758:	d901      	bls.n	800775e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e028      	b.n	80077b0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800775e:	4b16      	ldr	r3, [pc, #88]	; (80077b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800776a:	d1ee      	bne.n	800774a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2b1e      	cmp	r3, #30
 8007770:	d008      	beq.n	8007784 <HAL_PWREx_ConfigSupply+0x7c>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b2e      	cmp	r3, #46	; 0x2e
 8007776:	d005      	beq.n	8007784 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2b1d      	cmp	r3, #29
 800777c:	d002      	beq.n	8007784 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2b2d      	cmp	r3, #45	; 0x2d
 8007782:	d114      	bne.n	80077ae <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007784:	f7fa fede 	bl	8002544 <HAL_GetTick>
 8007788:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800778a:	e009      	b.n	80077a0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800778c:	f7fa feda 	bl	8002544 <HAL_GetTick>
 8007790:	4602      	mov	r2, r0
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800779a:	d901      	bls.n	80077a0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e007      	b.n	80077b0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80077a0:	4b05      	ldr	r3, [pc, #20]	; (80077b8 <HAL_PWREx_ConfigSupply+0xb0>)
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077ac:	d1ee      	bne.n	800778c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	58024800 	.word	0x58024800

080077bc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80077bc:	b480      	push	{r7}
 80077be:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80077c0:	4b05      	ldr	r3, [pc, #20]	; (80077d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	4a04      	ldr	r2, [pc, #16]	; (80077d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80077c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077ca:	60d3      	str	r3, [r2, #12]
}
 80077cc:	bf00      	nop
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	58024800 	.word	0x58024800

080077dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b08c      	sub	sp, #48	; 0x30
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d101      	bne.n	80077ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e3ff      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f000 8087 	beq.w	800790a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077fc:	4b99      	ldr	r3, [pc, #612]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007804:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007806:	4b97      	ldr	r3, [pc, #604]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800780c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780e:	2b10      	cmp	r3, #16
 8007810:	d007      	beq.n	8007822 <HAL_RCC_OscConfig+0x46>
 8007812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007814:	2b18      	cmp	r3, #24
 8007816:	d110      	bne.n	800783a <HAL_RCC_OscConfig+0x5e>
 8007818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781a:	f003 0303 	and.w	r3, r3, #3
 800781e:	2b02      	cmp	r3, #2
 8007820:	d10b      	bne.n	800783a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007822:	4b90      	ldr	r3, [pc, #576]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d06c      	beq.n	8007908 <HAL_RCC_OscConfig+0x12c>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d168      	bne.n	8007908 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e3d9      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007842:	d106      	bne.n	8007852 <HAL_RCC_OscConfig+0x76>
 8007844:	4b87      	ldr	r3, [pc, #540]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a86      	ldr	r2, [pc, #536]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 800784a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800784e:	6013      	str	r3, [r2, #0]
 8007850:	e02e      	b.n	80078b0 <HAL_RCC_OscConfig+0xd4>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10c      	bne.n	8007874 <HAL_RCC_OscConfig+0x98>
 800785a:	4b82      	ldr	r3, [pc, #520]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a81      	ldr	r2, [pc, #516]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007864:	6013      	str	r3, [r2, #0]
 8007866:	4b7f      	ldr	r3, [pc, #508]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a7e      	ldr	r2, [pc, #504]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 800786c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007870:	6013      	str	r3, [r2, #0]
 8007872:	e01d      	b.n	80078b0 <HAL_RCC_OscConfig+0xd4>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800787c:	d10c      	bne.n	8007898 <HAL_RCC_OscConfig+0xbc>
 800787e:	4b79      	ldr	r3, [pc, #484]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a78      	ldr	r2, [pc, #480]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007888:	6013      	str	r3, [r2, #0]
 800788a:	4b76      	ldr	r3, [pc, #472]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a75      	ldr	r2, [pc, #468]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007894:	6013      	str	r3, [r2, #0]
 8007896:	e00b      	b.n	80078b0 <HAL_RCC_OscConfig+0xd4>
 8007898:	4b72      	ldr	r3, [pc, #456]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a71      	ldr	r2, [pc, #452]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 800789e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078a2:	6013      	str	r3, [r2, #0]
 80078a4:	4b6f      	ldr	r3, [pc, #444]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a6e      	ldr	r2, [pc, #440]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 80078aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d013      	beq.n	80078e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078b8:	f7fa fe44 	bl	8002544 <HAL_GetTick>
 80078bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80078be:	e008      	b.n	80078d2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078c0:	f7fa fe40 	bl	8002544 <HAL_GetTick>
 80078c4:	4602      	mov	r2, r0
 80078c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	2b64      	cmp	r3, #100	; 0x64
 80078cc:	d901      	bls.n	80078d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e38d      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80078d2:	4b64      	ldr	r3, [pc, #400]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d0f0      	beq.n	80078c0 <HAL_RCC_OscConfig+0xe4>
 80078de:	e014      	b.n	800790a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078e0:	f7fa fe30 	bl	8002544 <HAL_GetTick>
 80078e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80078e6:	e008      	b.n	80078fa <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078e8:	f7fa fe2c 	bl	8002544 <HAL_GetTick>
 80078ec:	4602      	mov	r2, r0
 80078ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	2b64      	cmp	r3, #100	; 0x64
 80078f4:	d901      	bls.n	80078fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e379      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80078fa:	4b5a      	ldr	r3, [pc, #360]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1f0      	bne.n	80078e8 <HAL_RCC_OscConfig+0x10c>
 8007906:	e000      	b.n	800790a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0302 	and.w	r3, r3, #2
 8007912:	2b00      	cmp	r3, #0
 8007914:	f000 80ae 	beq.w	8007a74 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007918:	4b52      	ldr	r3, [pc, #328]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007920:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007922:	4b50      	ldr	r3, [pc, #320]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007926:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d007      	beq.n	800793e <HAL_RCC_OscConfig+0x162>
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	2b18      	cmp	r3, #24
 8007932:	d13a      	bne.n	80079aa <HAL_RCC_OscConfig+0x1ce>
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	f003 0303 	and.w	r3, r3, #3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d135      	bne.n	80079aa <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800793e:	4b49      	ldr	r3, [pc, #292]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 0304 	and.w	r3, r3, #4
 8007946:	2b00      	cmp	r3, #0
 8007948:	d005      	beq.n	8007956 <HAL_RCC_OscConfig+0x17a>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d101      	bne.n	8007956 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e34b      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007956:	f7fa fe25 	bl	80025a4 <HAL_GetREVID>
 800795a:	4603      	mov	r3, r0
 800795c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007960:	4293      	cmp	r3, r2
 8007962:	d817      	bhi.n	8007994 <HAL_RCC_OscConfig+0x1b8>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	2b40      	cmp	r3, #64	; 0x40
 800796a:	d108      	bne.n	800797e <HAL_RCC_OscConfig+0x1a2>
 800796c:	4b3d      	ldr	r3, [pc, #244]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007974:	4a3b      	ldr	r2, [pc, #236]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800797a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800797c:	e07a      	b.n	8007a74 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800797e:	4b39      	ldr	r3, [pc, #228]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	031b      	lsls	r3, r3, #12
 800798c:	4935      	ldr	r1, [pc, #212]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 800798e:	4313      	orrs	r3, r2
 8007990:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007992:	e06f      	b.n	8007a74 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007994:	4b33      	ldr	r3, [pc, #204]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	061b      	lsls	r3, r3, #24
 80079a2:	4930      	ldr	r1, [pc, #192]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 80079a4:	4313      	orrs	r3, r2
 80079a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80079a8:	e064      	b.n	8007a74 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d045      	beq.n	8007a3e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80079b2:	4b2c      	ldr	r3, [pc, #176]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f023 0219 	bic.w	r2, r3, #25
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	4929      	ldr	r1, [pc, #164]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 80079c0:	4313      	orrs	r3, r2
 80079c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079c4:	f7fa fdbe 	bl	8002544 <HAL_GetTick>
 80079c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079ca:	e008      	b.n	80079de <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079cc:	f7fa fdba 	bl	8002544 <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d901      	bls.n	80079de <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e307      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079de:	4b21      	ldr	r3, [pc, #132]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 0304 	and.w	r3, r3, #4
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d0f0      	beq.n	80079cc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079ea:	f7fa fddb 	bl	80025a4 <HAL_GetREVID>
 80079ee:	4603      	mov	r3, r0
 80079f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d817      	bhi.n	8007a28 <HAL_RCC_OscConfig+0x24c>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	2b40      	cmp	r3, #64	; 0x40
 80079fe:	d108      	bne.n	8007a12 <HAL_RCC_OscConfig+0x236>
 8007a00:	4b18      	ldr	r3, [pc, #96]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007a08:	4a16      	ldr	r2, [pc, #88]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a0e:	6053      	str	r3, [r2, #4]
 8007a10:	e030      	b.n	8007a74 <HAL_RCC_OscConfig+0x298>
 8007a12:	4b14      	ldr	r3, [pc, #80]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	031b      	lsls	r3, r3, #12
 8007a20:	4910      	ldr	r1, [pc, #64]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007a22:	4313      	orrs	r3, r2
 8007a24:	604b      	str	r3, [r1, #4]
 8007a26:	e025      	b.n	8007a74 <HAL_RCC_OscConfig+0x298>
 8007a28:	4b0e      	ldr	r3, [pc, #56]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	061b      	lsls	r3, r3, #24
 8007a36:	490b      	ldr	r1, [pc, #44]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	604b      	str	r3, [r1, #4]
 8007a3c:	e01a      	b.n	8007a74 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a3e:	4b09      	ldr	r3, [pc, #36]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a08      	ldr	r2, [pc, #32]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007a44:	f023 0301 	bic.w	r3, r3, #1
 8007a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a4a:	f7fa fd7b 	bl	8002544 <HAL_GetTick>
 8007a4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007a50:	e00a      	b.n	8007a68 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a52:	f7fa fd77 	bl	8002544 <HAL_GetTick>
 8007a56:	4602      	mov	r2, r0
 8007a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d903      	bls.n	8007a68 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e2c4      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
 8007a64:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007a68:	4ba4      	ldr	r3, [pc, #656]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 0304 	and.w	r3, r3, #4
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1ee      	bne.n	8007a52 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0310 	and.w	r3, r3, #16
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 80a9 	beq.w	8007bd4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a82:	4b9e      	ldr	r3, [pc, #632]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a8a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a8c:	4b9b      	ldr	r3, [pc, #620]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a90:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	2b08      	cmp	r3, #8
 8007a96:	d007      	beq.n	8007aa8 <HAL_RCC_OscConfig+0x2cc>
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	2b18      	cmp	r3, #24
 8007a9c:	d13a      	bne.n	8007b14 <HAL_RCC_OscConfig+0x338>
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	f003 0303 	and.w	r3, r3, #3
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d135      	bne.n	8007b14 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007aa8:	4b94      	ldr	r3, [pc, #592]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d005      	beq.n	8007ac0 <HAL_RCC_OscConfig+0x2e4>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	69db      	ldr	r3, [r3, #28]
 8007ab8:	2b80      	cmp	r3, #128	; 0x80
 8007aba:	d001      	beq.n	8007ac0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e296      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ac0:	f7fa fd70 	bl	80025a4 <HAL_GetREVID>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	f241 0203 	movw	r2, #4099	; 0x1003
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d817      	bhi.n	8007afe <HAL_RCC_OscConfig+0x322>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
 8007ad2:	2b20      	cmp	r3, #32
 8007ad4:	d108      	bne.n	8007ae8 <HAL_RCC_OscConfig+0x30c>
 8007ad6:	4b89      	ldr	r3, [pc, #548]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007ade:	4a87      	ldr	r2, [pc, #540]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007ae0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ae4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007ae6:	e075      	b.n	8007bd4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ae8:	4b84      	ldr	r3, [pc, #528]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a1b      	ldr	r3, [r3, #32]
 8007af4:	069b      	lsls	r3, r3, #26
 8007af6:	4981      	ldr	r1, [pc, #516]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007af8:	4313      	orrs	r3, r2
 8007afa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007afc:	e06a      	b.n	8007bd4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007afe:	4b7f      	ldr	r3, [pc, #508]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	061b      	lsls	r3, r3, #24
 8007b0c:	497b      	ldr	r1, [pc, #492]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b12:	e05f      	b.n	8007bd4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	69db      	ldr	r3, [r3, #28]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d042      	beq.n	8007ba2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007b1c:	4b77      	ldr	r3, [pc, #476]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a76      	ldr	r2, [pc, #472]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b28:	f7fa fd0c 	bl	8002544 <HAL_GetTick>
 8007b2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b2e:	e008      	b.n	8007b42 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007b30:	f7fa fd08 	bl	8002544 <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	d901      	bls.n	8007b42 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e255      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b42:	4b6e      	ldr	r3, [pc, #440]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0f0      	beq.n	8007b30 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007b4e:	f7fa fd29 	bl	80025a4 <HAL_GetREVID>
 8007b52:	4603      	mov	r3, r0
 8007b54:	f241 0203 	movw	r2, #4099	; 0x1003
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d817      	bhi.n	8007b8c <HAL_RCC_OscConfig+0x3b0>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a1b      	ldr	r3, [r3, #32]
 8007b60:	2b20      	cmp	r3, #32
 8007b62:	d108      	bne.n	8007b76 <HAL_RCC_OscConfig+0x39a>
 8007b64:	4b65      	ldr	r3, [pc, #404]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007b6c:	4a63      	ldr	r2, [pc, #396]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007b6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b72:	6053      	str	r3, [r2, #4]
 8007b74:	e02e      	b.n	8007bd4 <HAL_RCC_OscConfig+0x3f8>
 8007b76:	4b61      	ldr	r3, [pc, #388]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	069b      	lsls	r3, r3, #26
 8007b84:	495d      	ldr	r1, [pc, #372]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	604b      	str	r3, [r1, #4]
 8007b8a:	e023      	b.n	8007bd4 <HAL_RCC_OscConfig+0x3f8>
 8007b8c:	4b5b      	ldr	r3, [pc, #364]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6a1b      	ldr	r3, [r3, #32]
 8007b98:	061b      	lsls	r3, r3, #24
 8007b9a:	4958      	ldr	r1, [pc, #352]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	60cb      	str	r3, [r1, #12]
 8007ba0:	e018      	b.n	8007bd4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007ba2:	4b56      	ldr	r3, [pc, #344]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a55      	ldr	r2, [pc, #340]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bae:	f7fa fcc9 	bl	8002544 <HAL_GetTick>
 8007bb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007bb4:	e008      	b.n	8007bc8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007bb6:	f7fa fcc5 	bl	8002544 <HAL_GetTick>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d901      	bls.n	8007bc8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e212      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007bc8:	4b4c      	ldr	r3, [pc, #304]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1f0      	bne.n	8007bb6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 0308 	and.w	r3, r3, #8
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d036      	beq.n	8007c4e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	695b      	ldr	r3, [r3, #20]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d019      	beq.n	8007c1c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007be8:	4b44      	ldr	r3, [pc, #272]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bec:	4a43      	ldr	r2, [pc, #268]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007bee:	f043 0301 	orr.w	r3, r3, #1
 8007bf2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bf4:	f7fa fca6 	bl	8002544 <HAL_GetTick>
 8007bf8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007bfa:	e008      	b.n	8007c0e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007bfc:	f7fa fca2 	bl	8002544 <HAL_GetTick>
 8007c00:	4602      	mov	r2, r0
 8007c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d901      	bls.n	8007c0e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e1ef      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007c0e:	4b3b      	ldr	r3, [pc, #236]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c12:	f003 0302 	and.w	r3, r3, #2
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d0f0      	beq.n	8007bfc <HAL_RCC_OscConfig+0x420>
 8007c1a:	e018      	b.n	8007c4e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c1c:	4b37      	ldr	r3, [pc, #220]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c20:	4a36      	ldr	r2, [pc, #216]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007c22:	f023 0301 	bic.w	r3, r3, #1
 8007c26:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c28:	f7fa fc8c 	bl	8002544 <HAL_GetTick>
 8007c2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007c2e:	e008      	b.n	8007c42 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c30:	f7fa fc88 	bl	8002544 <HAL_GetTick>
 8007c34:	4602      	mov	r2, r0
 8007c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d901      	bls.n	8007c42 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e1d5      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007c42:	4b2e      	ldr	r3, [pc, #184]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c46:	f003 0302 	and.w	r3, r3, #2
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1f0      	bne.n	8007c30 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 0320 	and.w	r3, r3, #32
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d036      	beq.n	8007cc8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d019      	beq.n	8007c96 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007c62:	4b26      	ldr	r3, [pc, #152]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a25      	ldr	r2, [pc, #148]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007c68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007c6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007c6e:	f7fa fc69 	bl	8002544 <HAL_GetTick>
 8007c72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007c74:	e008      	b.n	8007c88 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007c76:	f7fa fc65 	bl	8002544 <HAL_GetTick>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	1ad3      	subs	r3, r2, r3
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d901      	bls.n	8007c88 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007c84:	2303      	movs	r3, #3
 8007c86:	e1b2      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007c88:	4b1c      	ldr	r3, [pc, #112]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d0f0      	beq.n	8007c76 <HAL_RCC_OscConfig+0x49a>
 8007c94:	e018      	b.n	8007cc8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007c96:	4b19      	ldr	r3, [pc, #100]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a18      	ldr	r2, [pc, #96]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007c9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ca0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007ca2:	f7fa fc4f 	bl	8002544 <HAL_GetTick>
 8007ca6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007ca8:	e008      	b.n	8007cbc <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007caa:	f7fa fc4b 	bl	8002544 <HAL_GetTick>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d901      	bls.n	8007cbc <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e198      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007cbc:	4b0f      	ldr	r3, [pc, #60]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1f0      	bne.n	8007caa <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 0304 	and.w	r3, r3, #4
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f000 8085 	beq.w	8007de0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007cd6:	4b0a      	ldr	r3, [pc, #40]	; (8007d00 <HAL_RCC_OscConfig+0x524>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a09      	ldr	r2, [pc, #36]	; (8007d00 <HAL_RCC_OscConfig+0x524>)
 8007cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ce0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ce2:	f7fa fc2f 	bl	8002544 <HAL_GetTick>
 8007ce6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ce8:	e00c      	b.n	8007d04 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007cea:	f7fa fc2b 	bl	8002544 <HAL_GetTick>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	2b64      	cmp	r3, #100	; 0x64
 8007cf6:	d905      	bls.n	8007d04 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e178      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
 8007cfc:	58024400 	.word	0x58024400
 8007d00:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d04:	4b96      	ldr	r3, [pc, #600]	; (8007f60 <HAL_RCC_OscConfig+0x784>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d0ec      	beq.n	8007cea <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d106      	bne.n	8007d26 <HAL_RCC_OscConfig+0x54a>
 8007d18:	4b92      	ldr	r3, [pc, #584]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d1c:	4a91      	ldr	r2, [pc, #580]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007d1e:	f043 0301 	orr.w	r3, r3, #1
 8007d22:	6713      	str	r3, [r2, #112]	; 0x70
 8007d24:	e02d      	b.n	8007d82 <HAL_RCC_OscConfig+0x5a6>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10c      	bne.n	8007d48 <HAL_RCC_OscConfig+0x56c>
 8007d2e:	4b8d      	ldr	r3, [pc, #564]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d32:	4a8c      	ldr	r2, [pc, #560]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007d34:	f023 0301 	bic.w	r3, r3, #1
 8007d38:	6713      	str	r3, [r2, #112]	; 0x70
 8007d3a:	4b8a      	ldr	r3, [pc, #552]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d3e:	4a89      	ldr	r2, [pc, #548]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007d40:	f023 0304 	bic.w	r3, r3, #4
 8007d44:	6713      	str	r3, [r2, #112]	; 0x70
 8007d46:	e01c      	b.n	8007d82 <HAL_RCC_OscConfig+0x5a6>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	2b05      	cmp	r3, #5
 8007d4e:	d10c      	bne.n	8007d6a <HAL_RCC_OscConfig+0x58e>
 8007d50:	4b84      	ldr	r3, [pc, #528]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d54:	4a83      	ldr	r2, [pc, #524]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007d56:	f043 0304 	orr.w	r3, r3, #4
 8007d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8007d5c:	4b81      	ldr	r3, [pc, #516]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d60:	4a80      	ldr	r2, [pc, #512]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007d62:	f043 0301 	orr.w	r3, r3, #1
 8007d66:	6713      	str	r3, [r2, #112]	; 0x70
 8007d68:	e00b      	b.n	8007d82 <HAL_RCC_OscConfig+0x5a6>
 8007d6a:	4b7e      	ldr	r3, [pc, #504]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d6e:	4a7d      	ldr	r2, [pc, #500]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007d70:	f023 0301 	bic.w	r3, r3, #1
 8007d74:	6713      	str	r3, [r2, #112]	; 0x70
 8007d76:	4b7b      	ldr	r3, [pc, #492]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d7a:	4a7a      	ldr	r2, [pc, #488]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007d7c:	f023 0304 	bic.w	r3, r3, #4
 8007d80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d015      	beq.n	8007db6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d8a:	f7fa fbdb 	bl	8002544 <HAL_GetTick>
 8007d8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d90:	e00a      	b.n	8007da8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d92:	f7fa fbd7 	bl	8002544 <HAL_GetTick>
 8007d96:	4602      	mov	r2, r0
 8007d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d901      	bls.n	8007da8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007da4:	2303      	movs	r3, #3
 8007da6:	e122      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007da8:	4b6e      	ldr	r3, [pc, #440]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dac:	f003 0302 	and.w	r3, r3, #2
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d0ee      	beq.n	8007d92 <HAL_RCC_OscConfig+0x5b6>
 8007db4:	e014      	b.n	8007de0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007db6:	f7fa fbc5 	bl	8002544 <HAL_GetTick>
 8007dba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007dbc:	e00a      	b.n	8007dd4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007dbe:	f7fa fbc1 	bl	8002544 <HAL_GetTick>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d901      	bls.n	8007dd4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	e10c      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007dd4:	4b63      	ldr	r3, [pc, #396]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dd8:	f003 0302 	and.w	r3, r3, #2
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1ee      	bne.n	8007dbe <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 8101 	beq.w	8007fec <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007dea:	4b5e      	ldr	r3, [pc, #376]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007df2:	2b18      	cmp	r3, #24
 8007df4:	f000 80bc 	beq.w	8007f70 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	f040 8095 	bne.w	8007f2c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e02:	4b58      	ldr	r3, [pc, #352]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a57      	ldr	r2, [pc, #348]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007e08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e0e:	f7fa fb99 	bl	8002544 <HAL_GetTick>
 8007e12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e14:	e008      	b.n	8007e28 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e16:	f7fa fb95 	bl	8002544 <HAL_GetTick>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1e:	1ad3      	subs	r3, r2, r3
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d901      	bls.n	8007e28 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e0e2      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e28:	4b4e      	ldr	r3, [pc, #312]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1f0      	bne.n	8007e16 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e34:	4b4b      	ldr	r3, [pc, #300]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007e36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e38:	4b4b      	ldr	r3, [pc, #300]	; (8007f68 <HAL_RCC_OscConfig+0x78c>)
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007e44:	0112      	lsls	r2, r2, #4
 8007e46:	430a      	orrs	r2, r1
 8007e48:	4946      	ldr	r1, [pc, #280]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	628b      	str	r3, [r1, #40]	; 0x28
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e52:	3b01      	subs	r3, #1
 8007e54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	025b      	lsls	r3, r3, #9
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	431a      	orrs	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	041b      	lsls	r3, r3, #16
 8007e6c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007e70:	431a      	orrs	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e76:	3b01      	subs	r3, #1
 8007e78:	061b      	lsls	r3, r3, #24
 8007e7a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e7e:	4939      	ldr	r1, [pc, #228]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007e80:	4313      	orrs	r3, r2
 8007e82:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007e84:	4b37      	ldr	r3, [pc, #220]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e88:	4a36      	ldr	r2, [pc, #216]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007e8a:	f023 0301 	bic.w	r3, r3, #1
 8007e8e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007e90:	4b34      	ldr	r3, [pc, #208]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007e92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e94:	4b35      	ldr	r3, [pc, #212]	; (8007f6c <HAL_RCC_OscConfig+0x790>)
 8007e96:	4013      	ands	r3, r2
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007e9c:	00d2      	lsls	r2, r2, #3
 8007e9e:	4931      	ldr	r1, [pc, #196]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007ea4:	4b2f      	ldr	r3, [pc, #188]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea8:	f023 020c 	bic.w	r2, r3, #12
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb0:	492c      	ldr	r1, [pc, #176]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007eb6:	4b2b      	ldr	r3, [pc, #172]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eba:	f023 0202 	bic.w	r2, r3, #2
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ec2:	4928      	ldr	r1, [pc, #160]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007ec8:	4b26      	ldr	r3, [pc, #152]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ecc:	4a25      	ldr	r2, [pc, #148]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ed2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ed4:	4b23      	ldr	r3, [pc, #140]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed8:	4a22      	ldr	r2, [pc, #136]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ede:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007ee0:	4b20      	ldr	r3, [pc, #128]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee4:	4a1f      	ldr	r2, [pc, #124]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007ee6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007eea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007eec:	4b1d      	ldr	r3, [pc, #116]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef0:	4a1c      	ldr	r2, [pc, #112]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007ef2:	f043 0301 	orr.w	r3, r3, #1
 8007ef6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ef8:	4b1a      	ldr	r3, [pc, #104]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a19      	ldr	r2, [pc, #100]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007efe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f04:	f7fa fb1e 	bl	8002544 <HAL_GetTick>
 8007f08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f0a:	e008      	b.n	8007f1e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f0c:	f7fa fb1a 	bl	8002544 <HAL_GetTick>
 8007f10:	4602      	mov	r2, r0
 8007f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d901      	bls.n	8007f1e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e067      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f1e:	4b11      	ldr	r3, [pc, #68]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d0f0      	beq.n	8007f0c <HAL_RCC_OscConfig+0x730>
 8007f2a:	e05f      	b.n	8007fec <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f2c:	4b0d      	ldr	r3, [pc, #52]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a0c      	ldr	r2, [pc, #48]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007f32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f38:	f7fa fb04 	bl	8002544 <HAL_GetTick>
 8007f3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f3e:	e008      	b.n	8007f52 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f40:	f7fa fb00 	bl	8002544 <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d901      	bls.n	8007f52 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e04d      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f52:	4b04      	ldr	r3, [pc, #16]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1f0      	bne.n	8007f40 <HAL_RCC_OscConfig+0x764>
 8007f5e:	e045      	b.n	8007fec <HAL_RCC_OscConfig+0x810>
 8007f60:	58024800 	.word	0x58024800
 8007f64:	58024400 	.word	0x58024400
 8007f68:	fffffc0c 	.word	0xfffffc0c
 8007f6c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007f70:	4b21      	ldr	r3, [pc, #132]	; (8007ff8 <HAL_RCC_OscConfig+0x81c>)
 8007f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f74:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007f76:	4b20      	ldr	r3, [pc, #128]	; (8007ff8 <HAL_RCC_OscConfig+0x81c>)
 8007f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f7a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d031      	beq.n	8007fe8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	f003 0203 	and.w	r2, r3, #3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d12a      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	091b      	lsrs	r3, r3, #4
 8007f96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d122      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fac:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d11a      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	0a5b      	lsrs	r3, r3, #9
 8007fb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fbe:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d111      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	0c1b      	lsrs	r3, r3, #16
 8007fc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d108      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	0e1b      	lsrs	r3, r3, #24
 8007fda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fe2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d001      	beq.n	8007fec <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e000      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3730      	adds	r7, #48	; 0x30
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	58024400 	.word	0x58024400

08007ffc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b086      	sub	sp, #24
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d101      	bne.n	8008010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e19c      	b.n	800834a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008010:	4b8a      	ldr	r3, [pc, #552]	; (800823c <HAL_RCC_ClockConfig+0x240>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 030f 	and.w	r3, r3, #15
 8008018:	683a      	ldr	r2, [r7, #0]
 800801a:	429a      	cmp	r2, r3
 800801c:	d910      	bls.n	8008040 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800801e:	4b87      	ldr	r3, [pc, #540]	; (800823c <HAL_RCC_ClockConfig+0x240>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f023 020f 	bic.w	r2, r3, #15
 8008026:	4985      	ldr	r1, [pc, #532]	; (800823c <HAL_RCC_ClockConfig+0x240>)
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	4313      	orrs	r3, r2
 800802c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800802e:	4b83      	ldr	r3, [pc, #524]	; (800823c <HAL_RCC_ClockConfig+0x240>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 030f 	and.w	r3, r3, #15
 8008036:	683a      	ldr	r2, [r7, #0]
 8008038:	429a      	cmp	r2, r3
 800803a:	d001      	beq.n	8008040 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e184      	b.n	800834a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 0304 	and.w	r3, r3, #4
 8008048:	2b00      	cmp	r3, #0
 800804a:	d010      	beq.n	800806e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	691a      	ldr	r2, [r3, #16]
 8008050:	4b7b      	ldr	r3, [pc, #492]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 8008052:	699b      	ldr	r3, [r3, #24]
 8008054:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008058:	429a      	cmp	r2, r3
 800805a:	d908      	bls.n	800806e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800805c:	4b78      	ldr	r3, [pc, #480]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	4975      	ldr	r1, [pc, #468]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 800806a:	4313      	orrs	r3, r2
 800806c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 0308 	and.w	r3, r3, #8
 8008076:	2b00      	cmp	r3, #0
 8008078:	d010      	beq.n	800809c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	695a      	ldr	r2, [r3, #20]
 800807e:	4b70      	ldr	r3, [pc, #448]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 8008080:	69db      	ldr	r3, [r3, #28]
 8008082:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008086:	429a      	cmp	r2, r3
 8008088:	d908      	bls.n	800809c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800808a:	4b6d      	ldr	r3, [pc, #436]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 800808c:	69db      	ldr	r3, [r3, #28]
 800808e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	496a      	ldr	r1, [pc, #424]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 8008098:	4313      	orrs	r3, r2
 800809a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f003 0310 	and.w	r3, r3, #16
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d010      	beq.n	80080ca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	699a      	ldr	r2, [r3, #24]
 80080ac:	4b64      	ldr	r3, [pc, #400]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 80080ae:	69db      	ldr	r3, [r3, #28]
 80080b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d908      	bls.n	80080ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80080b8:	4b61      	ldr	r3, [pc, #388]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 80080ba:	69db      	ldr	r3, [r3, #28]
 80080bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	699b      	ldr	r3, [r3, #24]
 80080c4:	495e      	ldr	r1, [pc, #376]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 80080c6:	4313      	orrs	r3, r2
 80080c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 0320 	and.w	r3, r3, #32
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d010      	beq.n	80080f8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	69da      	ldr	r2, [r3, #28]
 80080da:	4b59      	ldr	r3, [pc, #356]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 80080dc:	6a1b      	ldr	r3, [r3, #32]
 80080de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d908      	bls.n	80080f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80080e6:	4b56      	ldr	r3, [pc, #344]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 80080e8:	6a1b      	ldr	r3, [r3, #32]
 80080ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	69db      	ldr	r3, [r3, #28]
 80080f2:	4953      	ldr	r1, [pc, #332]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 80080f4:	4313      	orrs	r3, r2
 80080f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 0302 	and.w	r3, r3, #2
 8008100:	2b00      	cmp	r3, #0
 8008102:	d010      	beq.n	8008126 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	68da      	ldr	r2, [r3, #12]
 8008108:	4b4d      	ldr	r3, [pc, #308]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 800810a:	699b      	ldr	r3, [r3, #24]
 800810c:	f003 030f 	and.w	r3, r3, #15
 8008110:	429a      	cmp	r2, r3
 8008112:	d908      	bls.n	8008126 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008114:	4b4a      	ldr	r3, [pc, #296]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	f023 020f 	bic.w	r2, r3, #15
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	4947      	ldr	r1, [pc, #284]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 8008122:	4313      	orrs	r3, r2
 8008124:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	2b00      	cmp	r3, #0
 8008130:	d055      	beq.n	80081de <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008132:	4b43      	ldr	r3, [pc, #268]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 8008134:	699b      	ldr	r3, [r3, #24]
 8008136:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	4940      	ldr	r1, [pc, #256]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 8008140:	4313      	orrs	r3, r2
 8008142:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	2b02      	cmp	r3, #2
 800814a:	d107      	bne.n	800815c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800814c:	4b3c      	ldr	r3, [pc, #240]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008154:	2b00      	cmp	r3, #0
 8008156:	d121      	bne.n	800819c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e0f6      	b.n	800834a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	2b03      	cmp	r3, #3
 8008162:	d107      	bne.n	8008174 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008164:	4b36      	ldr	r3, [pc, #216]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800816c:	2b00      	cmp	r3, #0
 800816e:	d115      	bne.n	800819c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	e0ea      	b.n	800834a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d107      	bne.n	800818c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800817c:	4b30      	ldr	r3, [pc, #192]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008184:	2b00      	cmp	r3, #0
 8008186:	d109      	bne.n	800819c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e0de      	b.n	800834a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800818c:	4b2c      	ldr	r3, [pc, #176]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 0304 	and.w	r3, r3, #4
 8008194:	2b00      	cmp	r3, #0
 8008196:	d101      	bne.n	800819c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	e0d6      	b.n	800834a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800819c:	4b28      	ldr	r3, [pc, #160]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 800819e:	691b      	ldr	r3, [r3, #16]
 80081a0:	f023 0207 	bic.w	r2, r3, #7
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	4925      	ldr	r1, [pc, #148]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 80081aa:	4313      	orrs	r3, r2
 80081ac:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081ae:	f7fa f9c9 	bl	8002544 <HAL_GetTick>
 80081b2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081b4:	e00a      	b.n	80081cc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081b6:	f7fa f9c5 	bl	8002544 <HAL_GetTick>
 80081ba:	4602      	mov	r2, r0
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d901      	bls.n	80081cc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80081c8:	2303      	movs	r3, #3
 80081ca:	e0be      	b.n	800834a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081cc:	4b1c      	ldr	r3, [pc, #112]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	00db      	lsls	r3, r3, #3
 80081da:	429a      	cmp	r2, r3
 80081dc:	d1eb      	bne.n	80081b6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 0302 	and.w	r3, r3, #2
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d010      	beq.n	800820c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	68da      	ldr	r2, [r3, #12]
 80081ee:	4b14      	ldr	r3, [pc, #80]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	f003 030f 	and.w	r3, r3, #15
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d208      	bcs.n	800820c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081fa:	4b11      	ldr	r3, [pc, #68]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	f023 020f 	bic.w	r2, r3, #15
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	490e      	ldr	r1, [pc, #56]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 8008208:	4313      	orrs	r3, r2
 800820a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800820c:	4b0b      	ldr	r3, [pc, #44]	; (800823c <HAL_RCC_ClockConfig+0x240>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 030f 	and.w	r3, r3, #15
 8008214:	683a      	ldr	r2, [r7, #0]
 8008216:	429a      	cmp	r2, r3
 8008218:	d214      	bcs.n	8008244 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800821a:	4b08      	ldr	r3, [pc, #32]	; (800823c <HAL_RCC_ClockConfig+0x240>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f023 020f 	bic.w	r2, r3, #15
 8008222:	4906      	ldr	r1, [pc, #24]	; (800823c <HAL_RCC_ClockConfig+0x240>)
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	4313      	orrs	r3, r2
 8008228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800822a:	4b04      	ldr	r3, [pc, #16]	; (800823c <HAL_RCC_ClockConfig+0x240>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 030f 	and.w	r3, r3, #15
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	429a      	cmp	r2, r3
 8008236:	d005      	beq.n	8008244 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	e086      	b.n	800834a <HAL_RCC_ClockConfig+0x34e>
 800823c:	52002000 	.word	0x52002000
 8008240:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 0304 	and.w	r3, r3, #4
 800824c:	2b00      	cmp	r3, #0
 800824e:	d010      	beq.n	8008272 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	691a      	ldr	r2, [r3, #16]
 8008254:	4b3f      	ldr	r3, [pc, #252]	; (8008354 <HAL_RCC_ClockConfig+0x358>)
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800825c:	429a      	cmp	r2, r3
 800825e:	d208      	bcs.n	8008272 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008260:	4b3c      	ldr	r3, [pc, #240]	; (8008354 <HAL_RCC_ClockConfig+0x358>)
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	4939      	ldr	r1, [pc, #228]	; (8008354 <HAL_RCC_ClockConfig+0x358>)
 800826e:	4313      	orrs	r3, r2
 8008270:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f003 0308 	and.w	r3, r3, #8
 800827a:	2b00      	cmp	r3, #0
 800827c:	d010      	beq.n	80082a0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	695a      	ldr	r2, [r3, #20]
 8008282:	4b34      	ldr	r3, [pc, #208]	; (8008354 <HAL_RCC_ClockConfig+0x358>)
 8008284:	69db      	ldr	r3, [r3, #28]
 8008286:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800828a:	429a      	cmp	r2, r3
 800828c:	d208      	bcs.n	80082a0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800828e:	4b31      	ldr	r3, [pc, #196]	; (8008354 <HAL_RCC_ClockConfig+0x358>)
 8008290:	69db      	ldr	r3, [r3, #28]
 8008292:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	695b      	ldr	r3, [r3, #20]
 800829a:	492e      	ldr	r1, [pc, #184]	; (8008354 <HAL_RCC_ClockConfig+0x358>)
 800829c:	4313      	orrs	r3, r2
 800829e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 0310 	and.w	r3, r3, #16
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d010      	beq.n	80082ce <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	699a      	ldr	r2, [r3, #24]
 80082b0:	4b28      	ldr	r3, [pc, #160]	; (8008354 <HAL_RCC_ClockConfig+0x358>)
 80082b2:	69db      	ldr	r3, [r3, #28]
 80082b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d208      	bcs.n	80082ce <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80082bc:	4b25      	ldr	r3, [pc, #148]	; (8008354 <HAL_RCC_ClockConfig+0x358>)
 80082be:	69db      	ldr	r3, [r3, #28]
 80082c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	699b      	ldr	r3, [r3, #24]
 80082c8:	4922      	ldr	r1, [pc, #136]	; (8008354 <HAL_RCC_ClockConfig+0x358>)
 80082ca:	4313      	orrs	r3, r2
 80082cc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 0320 	and.w	r3, r3, #32
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d010      	beq.n	80082fc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	69da      	ldr	r2, [r3, #28]
 80082de:	4b1d      	ldr	r3, [pc, #116]	; (8008354 <HAL_RCC_ClockConfig+0x358>)
 80082e0:	6a1b      	ldr	r3, [r3, #32]
 80082e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d208      	bcs.n	80082fc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80082ea:	4b1a      	ldr	r3, [pc, #104]	; (8008354 <HAL_RCC_ClockConfig+0x358>)
 80082ec:	6a1b      	ldr	r3, [r3, #32]
 80082ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	69db      	ldr	r3, [r3, #28]
 80082f6:	4917      	ldr	r1, [pc, #92]	; (8008354 <HAL_RCC_ClockConfig+0x358>)
 80082f8:	4313      	orrs	r3, r2
 80082fa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80082fc:	f000 f834 	bl	8008368 <HAL_RCC_GetSysClockFreq>
 8008300:	4602      	mov	r2, r0
 8008302:	4b14      	ldr	r3, [pc, #80]	; (8008354 <HAL_RCC_ClockConfig+0x358>)
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	0a1b      	lsrs	r3, r3, #8
 8008308:	f003 030f 	and.w	r3, r3, #15
 800830c:	4912      	ldr	r1, [pc, #72]	; (8008358 <HAL_RCC_ClockConfig+0x35c>)
 800830e:	5ccb      	ldrb	r3, [r1, r3]
 8008310:	f003 031f 	and.w	r3, r3, #31
 8008314:	fa22 f303 	lsr.w	r3, r2, r3
 8008318:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800831a:	4b0e      	ldr	r3, [pc, #56]	; (8008354 <HAL_RCC_ClockConfig+0x358>)
 800831c:	699b      	ldr	r3, [r3, #24]
 800831e:	f003 030f 	and.w	r3, r3, #15
 8008322:	4a0d      	ldr	r2, [pc, #52]	; (8008358 <HAL_RCC_ClockConfig+0x35c>)
 8008324:	5cd3      	ldrb	r3, [r2, r3]
 8008326:	f003 031f 	and.w	r3, r3, #31
 800832a:	693a      	ldr	r2, [r7, #16]
 800832c:	fa22 f303 	lsr.w	r3, r2, r3
 8008330:	4a0a      	ldr	r2, [pc, #40]	; (800835c <HAL_RCC_ClockConfig+0x360>)
 8008332:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008334:	4a0a      	ldr	r2, [pc, #40]	; (8008360 <HAL_RCC_ClockConfig+0x364>)
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800833a:	4b0a      	ldr	r3, [pc, #40]	; (8008364 <HAL_RCC_ClockConfig+0x368>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4618      	mov	r0, r3
 8008340:	f7fa f8b6 	bl	80024b0 <HAL_InitTick>
 8008344:	4603      	mov	r3, r0
 8008346:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008348:	7bfb      	ldrb	r3, [r7, #15]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3718      	adds	r7, #24
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	58024400 	.word	0x58024400
 8008358:	08021aa0 	.word	0x08021aa0
 800835c:	24000004 	.word	0x24000004
 8008360:	24000000 	.word	0x24000000
 8008364:	24000010 	.word	0x24000010

08008368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008368:	b480      	push	{r7}
 800836a:	b089      	sub	sp, #36	; 0x24
 800836c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800836e:	4bb3      	ldr	r3, [pc, #716]	; (800863c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008376:	2b18      	cmp	r3, #24
 8008378:	f200 8155 	bhi.w	8008626 <HAL_RCC_GetSysClockFreq+0x2be>
 800837c:	a201      	add	r2, pc, #4	; (adr r2, 8008384 <HAL_RCC_GetSysClockFreq+0x1c>)
 800837e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008382:	bf00      	nop
 8008384:	080083e9 	.word	0x080083e9
 8008388:	08008627 	.word	0x08008627
 800838c:	08008627 	.word	0x08008627
 8008390:	08008627 	.word	0x08008627
 8008394:	08008627 	.word	0x08008627
 8008398:	08008627 	.word	0x08008627
 800839c:	08008627 	.word	0x08008627
 80083a0:	08008627 	.word	0x08008627
 80083a4:	0800840f 	.word	0x0800840f
 80083a8:	08008627 	.word	0x08008627
 80083ac:	08008627 	.word	0x08008627
 80083b0:	08008627 	.word	0x08008627
 80083b4:	08008627 	.word	0x08008627
 80083b8:	08008627 	.word	0x08008627
 80083bc:	08008627 	.word	0x08008627
 80083c0:	08008627 	.word	0x08008627
 80083c4:	08008415 	.word	0x08008415
 80083c8:	08008627 	.word	0x08008627
 80083cc:	08008627 	.word	0x08008627
 80083d0:	08008627 	.word	0x08008627
 80083d4:	08008627 	.word	0x08008627
 80083d8:	08008627 	.word	0x08008627
 80083dc:	08008627 	.word	0x08008627
 80083e0:	08008627 	.word	0x08008627
 80083e4:	0800841b 	.word	0x0800841b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083e8:	4b94      	ldr	r3, [pc, #592]	; (800863c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 0320 	and.w	r3, r3, #32
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d009      	beq.n	8008408 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80083f4:	4b91      	ldr	r3, [pc, #580]	; (800863c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	08db      	lsrs	r3, r3, #3
 80083fa:	f003 0303 	and.w	r3, r3, #3
 80083fe:	4a90      	ldr	r2, [pc, #576]	; (8008640 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008400:	fa22 f303 	lsr.w	r3, r2, r3
 8008404:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008406:	e111      	b.n	800862c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008408:	4b8d      	ldr	r3, [pc, #564]	; (8008640 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800840a:	61bb      	str	r3, [r7, #24]
    break;
 800840c:	e10e      	b.n	800862c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800840e:	4b8d      	ldr	r3, [pc, #564]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008410:	61bb      	str	r3, [r7, #24]
    break;
 8008412:	e10b      	b.n	800862c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008414:	4b8c      	ldr	r3, [pc, #560]	; (8008648 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008416:	61bb      	str	r3, [r7, #24]
    break;
 8008418:	e108      	b.n	800862c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800841a:	4b88      	ldr	r3, [pc, #544]	; (800863c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800841c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800841e:	f003 0303 	and.w	r3, r3, #3
 8008422:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008424:	4b85      	ldr	r3, [pc, #532]	; (800863c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008428:	091b      	lsrs	r3, r3, #4
 800842a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800842e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008430:	4b82      	ldr	r3, [pc, #520]	; (800863c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008434:	f003 0301 	and.w	r3, r3, #1
 8008438:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800843a:	4b80      	ldr	r3, [pc, #512]	; (800863c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800843c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800843e:	08db      	lsrs	r3, r3, #3
 8008440:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	fb02 f303 	mul.w	r3, r2, r3
 800844a:	ee07 3a90 	vmov	s15, r3
 800844e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008452:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	2b00      	cmp	r3, #0
 800845a:	f000 80e1 	beq.w	8008620 <HAL_RCC_GetSysClockFreq+0x2b8>
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	2b02      	cmp	r3, #2
 8008462:	f000 8083 	beq.w	800856c <HAL_RCC_GetSysClockFreq+0x204>
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	2b02      	cmp	r3, #2
 800846a:	f200 80a1 	bhi.w	80085b0 <HAL_RCC_GetSysClockFreq+0x248>
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d003      	beq.n	800847c <HAL_RCC_GetSysClockFreq+0x114>
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d056      	beq.n	8008528 <HAL_RCC_GetSysClockFreq+0x1c0>
 800847a:	e099      	b.n	80085b0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800847c:	4b6f      	ldr	r3, [pc, #444]	; (800863c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 0320 	and.w	r3, r3, #32
 8008484:	2b00      	cmp	r3, #0
 8008486:	d02d      	beq.n	80084e4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008488:	4b6c      	ldr	r3, [pc, #432]	; (800863c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	08db      	lsrs	r3, r3, #3
 800848e:	f003 0303 	and.w	r3, r3, #3
 8008492:	4a6b      	ldr	r2, [pc, #428]	; (8008640 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008494:	fa22 f303 	lsr.w	r3, r2, r3
 8008498:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	ee07 3a90 	vmov	s15, r3
 80084a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	ee07 3a90 	vmov	s15, r3
 80084aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084b2:	4b62      	ldr	r3, [pc, #392]	; (800863c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ba:	ee07 3a90 	vmov	s15, r3
 80084be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80084c6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800864c <HAL_RCC_GetSysClockFreq+0x2e4>
 80084ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80084e2:	e087      	b.n	80085f4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	ee07 3a90 	vmov	s15, r3
 80084ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008650 <HAL_RCC_GetSysClockFreq+0x2e8>
 80084f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084f6:	4b51      	ldr	r3, [pc, #324]	; (800863c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084fe:	ee07 3a90 	vmov	s15, r3
 8008502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008506:	ed97 6a02 	vldr	s12, [r7, #8]
 800850a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800864c <HAL_RCC_GetSysClockFreq+0x2e4>
 800850e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800851a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800851e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008522:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008526:	e065      	b.n	80085f4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	ee07 3a90 	vmov	s15, r3
 800852e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008532:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008654 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800853a:	4b40      	ldr	r3, [pc, #256]	; (800863c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800853c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800853e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008542:	ee07 3a90 	vmov	s15, r3
 8008546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800854a:	ed97 6a02 	vldr	s12, [r7, #8]
 800854e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800864c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800855a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800855e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008566:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800856a:	e043      	b.n	80085f4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	ee07 3a90 	vmov	s15, r3
 8008572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008576:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008658 <HAL_RCC_GetSysClockFreq+0x2f0>
 800857a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800857e:	4b2f      	ldr	r3, [pc, #188]	; (800863c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008586:	ee07 3a90 	vmov	s15, r3
 800858a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800858e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008592:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800864c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800859a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800859e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085ae:	e021      	b.n	80085f4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	ee07 3a90 	vmov	s15, r3
 80085b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008654 <HAL_RCC_GetSysClockFreq+0x2ec>
 80085be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085c2:	4b1e      	ldr	r3, [pc, #120]	; (800863c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ca:	ee07 3a90 	vmov	s15, r3
 80085ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80085d6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800864c <HAL_RCC_GetSysClockFreq+0x2e4>
 80085da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085f2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80085f4:	4b11      	ldr	r3, [pc, #68]	; (800863c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f8:	0a5b      	lsrs	r3, r3, #9
 80085fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085fe:	3301      	adds	r3, #1
 8008600:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	ee07 3a90 	vmov	s15, r3
 8008608:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800860c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008610:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008614:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008618:	ee17 3a90 	vmov	r3, s15
 800861c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800861e:	e005      	b.n	800862c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008620:	2300      	movs	r3, #0
 8008622:	61bb      	str	r3, [r7, #24]
    break;
 8008624:	e002      	b.n	800862c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008626:	4b07      	ldr	r3, [pc, #28]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008628:	61bb      	str	r3, [r7, #24]
    break;
 800862a:	bf00      	nop
  }

  return sysclockfreq;
 800862c:	69bb      	ldr	r3, [r7, #24]
}
 800862e:	4618      	mov	r0, r3
 8008630:	3724      	adds	r7, #36	; 0x24
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	58024400 	.word	0x58024400
 8008640:	03d09000 	.word	0x03d09000
 8008644:	003d0900 	.word	0x003d0900
 8008648:	007a1200 	.word	0x007a1200
 800864c:	46000000 	.word	0x46000000
 8008650:	4c742400 	.word	0x4c742400
 8008654:	4a742400 	.word	0x4a742400
 8008658:	4af42400 	.word	0x4af42400

0800865c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008662:	f7ff fe81 	bl	8008368 <HAL_RCC_GetSysClockFreq>
 8008666:	4602      	mov	r2, r0
 8008668:	4b10      	ldr	r3, [pc, #64]	; (80086ac <HAL_RCC_GetHCLKFreq+0x50>)
 800866a:	699b      	ldr	r3, [r3, #24]
 800866c:	0a1b      	lsrs	r3, r3, #8
 800866e:	f003 030f 	and.w	r3, r3, #15
 8008672:	490f      	ldr	r1, [pc, #60]	; (80086b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008674:	5ccb      	ldrb	r3, [r1, r3]
 8008676:	f003 031f 	and.w	r3, r3, #31
 800867a:	fa22 f303 	lsr.w	r3, r2, r3
 800867e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008680:	4b0a      	ldr	r3, [pc, #40]	; (80086ac <HAL_RCC_GetHCLKFreq+0x50>)
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	f003 030f 	and.w	r3, r3, #15
 8008688:	4a09      	ldr	r2, [pc, #36]	; (80086b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800868a:	5cd3      	ldrb	r3, [r2, r3]
 800868c:	f003 031f 	and.w	r3, r3, #31
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	fa22 f303 	lsr.w	r3, r2, r3
 8008696:	4a07      	ldr	r2, [pc, #28]	; (80086b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008698:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800869a:	4a07      	ldr	r2, [pc, #28]	; (80086b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80086a0:	4b04      	ldr	r3, [pc, #16]	; (80086b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80086a2:	681b      	ldr	r3, [r3, #0]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	58024400 	.word	0x58024400
 80086b0:	08021aa0 	.word	0x08021aa0
 80086b4:	24000004 	.word	0x24000004
 80086b8:	24000000 	.word	0x24000000

080086bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80086c0:	f7ff ffcc 	bl	800865c <HAL_RCC_GetHCLKFreq>
 80086c4:	4602      	mov	r2, r0
 80086c6:	4b06      	ldr	r3, [pc, #24]	; (80086e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80086c8:	69db      	ldr	r3, [r3, #28]
 80086ca:	091b      	lsrs	r3, r3, #4
 80086cc:	f003 0307 	and.w	r3, r3, #7
 80086d0:	4904      	ldr	r1, [pc, #16]	; (80086e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80086d2:	5ccb      	ldrb	r3, [r1, r3]
 80086d4:	f003 031f 	and.w	r3, r3, #31
 80086d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80086dc:	4618      	mov	r0, r3
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	58024400 	.word	0x58024400
 80086e4:	08021aa0 	.word	0x08021aa0

080086e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80086ec:	f7ff ffb6 	bl	800865c <HAL_RCC_GetHCLKFreq>
 80086f0:	4602      	mov	r2, r0
 80086f2:	4b06      	ldr	r3, [pc, #24]	; (800870c <HAL_RCC_GetPCLK2Freq+0x24>)
 80086f4:	69db      	ldr	r3, [r3, #28]
 80086f6:	0a1b      	lsrs	r3, r3, #8
 80086f8:	f003 0307 	and.w	r3, r3, #7
 80086fc:	4904      	ldr	r1, [pc, #16]	; (8008710 <HAL_RCC_GetPCLK2Freq+0x28>)
 80086fe:	5ccb      	ldrb	r3, [r1, r3]
 8008700:	f003 031f 	and.w	r3, r3, #31
 8008704:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008708:	4618      	mov	r0, r3
 800870a:	bd80      	pop	{r7, pc}
 800870c:	58024400 	.word	0x58024400
 8008710:	08021aa0 	.word	0x08021aa0

08008714 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b086      	sub	sp, #24
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800871c:	2300      	movs	r3, #0
 800871e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008720:	2300      	movs	r3, #0
 8008722:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800872c:	2b00      	cmp	r3, #0
 800872e:	d03f      	beq.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008734:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008738:	d02a      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800873a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800873e:	d824      	bhi.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008740:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008744:	d018      	beq.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008746:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800874a:	d81e      	bhi.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800874c:	2b00      	cmp	r3, #0
 800874e:	d003      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008750:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008754:	d007      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008756:	e018      	b.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008758:	4bab      	ldr	r3, [pc, #684]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800875a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875c:	4aaa      	ldr	r2, [pc, #680]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800875e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008762:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008764:	e015      	b.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	3304      	adds	r3, #4
 800876a:	2102      	movs	r1, #2
 800876c:	4618      	mov	r0, r3
 800876e:	f001 f9cf 	bl	8009b10 <RCCEx_PLL2_Config>
 8008772:	4603      	mov	r3, r0
 8008774:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008776:	e00c      	b.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	3324      	adds	r3, #36	; 0x24
 800877c:	2102      	movs	r1, #2
 800877e:	4618      	mov	r0, r3
 8008780:	f001 fa78 	bl	8009c74 <RCCEx_PLL3_Config>
 8008784:	4603      	mov	r3, r0
 8008786:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008788:	e003      	b.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	75fb      	strb	r3, [r7, #23]
      break;
 800878e:	e000      	b.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008790:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008792:	7dfb      	ldrb	r3, [r7, #23]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d109      	bne.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008798:	4b9b      	ldr	r3, [pc, #620]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800879a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800879c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087a4:	4998      	ldr	r1, [pc, #608]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80087a6:	4313      	orrs	r3, r2
 80087a8:	650b      	str	r3, [r1, #80]	; 0x50
 80087aa:	e001      	b.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ac:	7dfb      	ldrb	r3, [r7, #23]
 80087ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d03d      	beq.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c0:	2b04      	cmp	r3, #4
 80087c2:	d826      	bhi.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80087c4:	a201      	add	r2, pc, #4	; (adr r2, 80087cc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80087c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ca:	bf00      	nop
 80087cc:	080087e1 	.word	0x080087e1
 80087d0:	080087ef 	.word	0x080087ef
 80087d4:	08008801 	.word	0x08008801
 80087d8:	08008819 	.word	0x08008819
 80087dc:	08008819 	.word	0x08008819
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087e0:	4b89      	ldr	r3, [pc, #548]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80087e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e4:	4a88      	ldr	r2, [pc, #544]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80087e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80087ec:	e015      	b.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	3304      	adds	r3, #4
 80087f2:	2100      	movs	r1, #0
 80087f4:	4618      	mov	r0, r3
 80087f6:	f001 f98b 	bl	8009b10 <RCCEx_PLL2_Config>
 80087fa:	4603      	mov	r3, r0
 80087fc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80087fe:	e00c      	b.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	3324      	adds	r3, #36	; 0x24
 8008804:	2100      	movs	r1, #0
 8008806:	4618      	mov	r0, r3
 8008808:	f001 fa34 	bl	8009c74 <RCCEx_PLL3_Config>
 800880c:	4603      	mov	r3, r0
 800880e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008810:	e003      	b.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	75fb      	strb	r3, [r7, #23]
      break;
 8008816:	e000      	b.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008818:	bf00      	nop
    }

    if(ret == HAL_OK)
 800881a:	7dfb      	ldrb	r3, [r7, #23]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d109      	bne.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008820:	4b79      	ldr	r3, [pc, #484]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008824:	f023 0207 	bic.w	r2, r3, #7
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800882c:	4976      	ldr	r1, [pc, #472]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800882e:	4313      	orrs	r3, r2
 8008830:	650b      	str	r3, [r1, #80]	; 0x50
 8008832:	e001      	b.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008834:	7dfb      	ldrb	r3, [r7, #23]
 8008836:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008840:	2b00      	cmp	r3, #0
 8008842:	d042      	beq.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008848:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800884c:	d02b      	beq.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800884e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008852:	d825      	bhi.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008854:	2bc0      	cmp	r3, #192	; 0xc0
 8008856:	d028      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008858:	2bc0      	cmp	r3, #192	; 0xc0
 800885a:	d821      	bhi.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800885c:	2b80      	cmp	r3, #128	; 0x80
 800885e:	d016      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008860:	2b80      	cmp	r3, #128	; 0x80
 8008862:	d81d      	bhi.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008868:	2b40      	cmp	r3, #64	; 0x40
 800886a:	d007      	beq.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800886c:	e018      	b.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800886e:	4b66      	ldr	r3, [pc, #408]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008872:	4a65      	ldr	r2, [pc, #404]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008878:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800887a:	e017      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	3304      	adds	r3, #4
 8008880:	2100      	movs	r1, #0
 8008882:	4618      	mov	r0, r3
 8008884:	f001 f944 	bl	8009b10 <RCCEx_PLL2_Config>
 8008888:	4603      	mov	r3, r0
 800888a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800888c:	e00e      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	3324      	adds	r3, #36	; 0x24
 8008892:	2100      	movs	r1, #0
 8008894:	4618      	mov	r0, r3
 8008896:	f001 f9ed 	bl	8009c74 <RCCEx_PLL3_Config>
 800889a:	4603      	mov	r3, r0
 800889c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800889e:	e005      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	75fb      	strb	r3, [r7, #23]
      break;
 80088a4:	e002      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80088a6:	bf00      	nop
 80088a8:	e000      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80088aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088ac:	7dfb      	ldrb	r3, [r7, #23]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d109      	bne.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80088b2:	4b55      	ldr	r3, [pc, #340]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80088b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088b6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088be:	4952      	ldr	r1, [pc, #328]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80088c0:	4313      	orrs	r3, r2
 80088c2:	650b      	str	r3, [r1, #80]	; 0x50
 80088c4:	e001      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088c6:	7dfb      	ldrb	r3, [r7, #23]
 80088c8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d049      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80088dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80088e0:	d030      	beq.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80088e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80088e6:	d82a      	bhi.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80088e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80088ec:	d02c      	beq.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80088ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80088f2:	d824      	bhi.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80088f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088f8:	d018      	beq.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x218>
 80088fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088fe:	d81e      	bhi.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008900:	2b00      	cmp	r3, #0
 8008902:	d003      	beq.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008904:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008908:	d007      	beq.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800890a:	e018      	b.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800890c:	4b3e      	ldr	r3, [pc, #248]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800890e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008910:	4a3d      	ldr	r2, [pc, #244]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008916:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008918:	e017      	b.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	3304      	adds	r3, #4
 800891e:	2100      	movs	r1, #0
 8008920:	4618      	mov	r0, r3
 8008922:	f001 f8f5 	bl	8009b10 <RCCEx_PLL2_Config>
 8008926:	4603      	mov	r3, r0
 8008928:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800892a:	e00e      	b.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	3324      	adds	r3, #36	; 0x24
 8008930:	2100      	movs	r1, #0
 8008932:	4618      	mov	r0, r3
 8008934:	f001 f99e 	bl	8009c74 <RCCEx_PLL3_Config>
 8008938:	4603      	mov	r3, r0
 800893a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800893c:	e005      	b.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	75fb      	strb	r3, [r7, #23]
      break;
 8008942:	e002      	b.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008944:	bf00      	nop
 8008946:	e000      	b.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008948:	bf00      	nop
    }

    if(ret == HAL_OK)
 800894a:	7dfb      	ldrb	r3, [r7, #23]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d10a      	bne.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008950:	4b2d      	ldr	r3, [pc, #180]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008954:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800895e:	492a      	ldr	r1, [pc, #168]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008960:	4313      	orrs	r3, r2
 8008962:	658b      	str	r3, [r1, #88]	; 0x58
 8008964:	e001      	b.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008966:	7dfb      	ldrb	r3, [r7, #23]
 8008968:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008972:	2b00      	cmp	r3, #0
 8008974:	d04c      	beq.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800897c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008980:	d030      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008982:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008986:	d82a      	bhi.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008988:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800898c:	d02c      	beq.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800898e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008992:	d824      	bhi.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008994:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008998:	d018      	beq.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800899a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800899e:	d81e      	bhi.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d003      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x298>
 80089a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80089a8:	d007      	beq.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80089aa:	e018      	b.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089ac:	4b16      	ldr	r3, [pc, #88]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80089ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b0:	4a15      	ldr	r2, [pc, #84]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80089b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80089b8:	e017      	b.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	3304      	adds	r3, #4
 80089be:	2100      	movs	r1, #0
 80089c0:	4618      	mov	r0, r3
 80089c2:	f001 f8a5 	bl	8009b10 <RCCEx_PLL2_Config>
 80089c6:	4603      	mov	r3, r0
 80089c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80089ca:	e00e      	b.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	3324      	adds	r3, #36	; 0x24
 80089d0:	2100      	movs	r1, #0
 80089d2:	4618      	mov	r0, r3
 80089d4:	f001 f94e 	bl	8009c74 <RCCEx_PLL3_Config>
 80089d8:	4603      	mov	r3, r0
 80089da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80089dc:	e005      	b.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	75fb      	strb	r3, [r7, #23]
      break;
 80089e2:	e002      	b.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80089e4:	bf00      	nop
 80089e6:	e000      	b.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80089e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089ea:	7dfb      	ldrb	r3, [r7, #23]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10d      	bne.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80089f0:	4b05      	ldr	r3, [pc, #20]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80089f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089f4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80089fe:	4902      	ldr	r1, [pc, #8]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008a00:	4313      	orrs	r3, r2
 8008a02:	658b      	str	r3, [r1, #88]	; 0x58
 8008a04:	e004      	b.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008a06:	bf00      	nop
 8008a08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a0c:	7dfb      	ldrb	r3, [r7, #23]
 8008a0e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d032      	beq.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a20:	2b30      	cmp	r3, #48	; 0x30
 8008a22:	d01c      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008a24:	2b30      	cmp	r3, #48	; 0x30
 8008a26:	d817      	bhi.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008a28:	2b20      	cmp	r3, #32
 8008a2a:	d00c      	beq.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008a2c:	2b20      	cmp	r3, #32
 8008a2e:	d813      	bhi.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d016      	beq.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008a34:	2b10      	cmp	r3, #16
 8008a36:	d10f      	bne.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a38:	4baf      	ldr	r3, [pc, #700]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3c:	4aae      	ldr	r2, [pc, #696]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008a44:	e00e      	b.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	3304      	adds	r3, #4
 8008a4a:	2102      	movs	r1, #2
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f001 f85f 	bl	8009b10 <RCCEx_PLL2_Config>
 8008a52:	4603      	mov	r3, r0
 8008a54:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008a56:	e005      	b.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8008a5c:	e002      	b.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008a5e:	bf00      	nop
 8008a60:	e000      	b.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008a62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a64:	7dfb      	ldrb	r3, [r7, #23]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d109      	bne.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008a6a:	4ba3      	ldr	r3, [pc, #652]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a6e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a76:	49a0      	ldr	r1, [pc, #640]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008a7c:	e001      	b.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a7e:	7dfb      	ldrb	r3, [r7, #23]
 8008a80:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d047      	beq.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a96:	d030      	beq.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008a98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a9c:	d82a      	bhi.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008a9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008aa2:	d02c      	beq.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8008aa4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008aa8:	d824      	bhi.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008aae:	d018      	beq.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8008ab0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ab4:	d81e      	bhi.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d003      	beq.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8008aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008abe:	d007      	beq.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008ac0:	e018      	b.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ac2:	4b8d      	ldr	r3, [pc, #564]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac6:	4a8c      	ldr	r2, [pc, #560]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008acc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008ace:	e017      	b.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	3304      	adds	r3, #4
 8008ad4:	2100      	movs	r1, #0
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f001 f81a 	bl	8009b10 <RCCEx_PLL2_Config>
 8008adc:	4603      	mov	r3, r0
 8008ade:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008ae0:	e00e      	b.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	3324      	adds	r3, #36	; 0x24
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f001 f8c3 	bl	8009c74 <RCCEx_PLL3_Config>
 8008aee:	4603      	mov	r3, r0
 8008af0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008af2:	e005      	b.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	75fb      	strb	r3, [r7, #23]
      break;
 8008af8:	e002      	b.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008afa:	bf00      	nop
 8008afc:	e000      	b.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008afe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b00:	7dfb      	ldrb	r3, [r7, #23]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d109      	bne.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008b06:	4b7c      	ldr	r3, [pc, #496]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b0a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b12:	4979      	ldr	r1, [pc, #484]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008b14:	4313      	orrs	r3, r2
 8008b16:	650b      	str	r3, [r1, #80]	; 0x50
 8008b18:	e001      	b.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b1a:	7dfb      	ldrb	r3, [r7, #23]
 8008b1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d049      	beq.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b32:	d02e      	beq.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8008b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b38:	d828      	bhi.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008b3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b3e:	d02a      	beq.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8008b40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b44:	d822      	bhi.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008b46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008b4a:	d026      	beq.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8008b4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008b50:	d81c      	bhi.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008b52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b56:	d010      	beq.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8008b58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b5c:	d816      	bhi.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d01d      	beq.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8008b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b66:	d111      	bne.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	3304      	adds	r3, #4
 8008b6c:	2101      	movs	r1, #1
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f000 ffce 	bl	8009b10 <RCCEx_PLL2_Config>
 8008b74:	4603      	mov	r3, r0
 8008b76:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008b78:	e012      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	3324      	adds	r3, #36	; 0x24
 8008b7e:	2101      	movs	r1, #1
 8008b80:	4618      	mov	r0, r3
 8008b82:	f001 f877 	bl	8009c74 <RCCEx_PLL3_Config>
 8008b86:	4603      	mov	r3, r0
 8008b88:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008b8a:	e009      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8008b90:	e006      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008b92:	bf00      	nop
 8008b94:	e004      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008b96:	bf00      	nop
 8008b98:	e002      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008b9a:	bf00      	nop
 8008b9c:	e000      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008b9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ba0:	7dfb      	ldrb	r3, [r7, #23]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d109      	bne.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008ba6:	4b54      	ldr	r3, [pc, #336]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008baa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bb2:	4951      	ldr	r1, [pc, #324]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	650b      	str	r3, [r1, #80]	; 0x50
 8008bb8:	e001      	b.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bba:	7dfb      	ldrb	r3, [r7, #23]
 8008bbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d04b      	beq.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008bd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bd4:	d02e      	beq.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8008bd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bda:	d828      	bhi.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008be0:	d02a      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8008be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008be6:	d822      	bhi.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008be8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008bec:	d026      	beq.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8008bee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008bf2:	d81c      	bhi.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008bf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bf8:	d010      	beq.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8008bfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bfe:	d816      	bhi.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d01d      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8008c04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c08:	d111      	bne.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	3304      	adds	r3, #4
 8008c0e:	2101      	movs	r1, #1
 8008c10:	4618      	mov	r0, r3
 8008c12:	f000 ff7d 	bl	8009b10 <RCCEx_PLL2_Config>
 8008c16:	4603      	mov	r3, r0
 8008c18:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008c1a:	e012      	b.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	3324      	adds	r3, #36	; 0x24
 8008c20:	2101      	movs	r1, #1
 8008c22:	4618      	mov	r0, r3
 8008c24:	f001 f826 	bl	8009c74 <RCCEx_PLL3_Config>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008c2c:	e009      	b.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	75fb      	strb	r3, [r7, #23]
      break;
 8008c32:	e006      	b.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008c34:	bf00      	nop
 8008c36:	e004      	b.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008c38:	bf00      	nop
 8008c3a:	e002      	b.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008c3c:	bf00      	nop
 8008c3e:	e000      	b.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008c40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c42:	7dfb      	ldrb	r3, [r7, #23]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d10a      	bne.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008c48:	4b2b      	ldr	r3, [pc, #172]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c4c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008c56:	4928      	ldr	r1, [pc, #160]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	658b      	str	r3, [r1, #88]	; 0x58
 8008c5c:	e001      	b.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c5e:	7dfb      	ldrb	r3, [r7, #23]
 8008c60:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d02f      	beq.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c76:	d00e      	beq.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008c78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c7c:	d814      	bhi.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d015      	beq.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008c82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c86:	d10f      	bne.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c88:	4b1b      	ldr	r3, [pc, #108]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8c:	4a1a      	ldr	r2, [pc, #104]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008c94:	e00c      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	3304      	adds	r3, #4
 8008c9a:	2101      	movs	r1, #1
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f000 ff37 	bl	8009b10 <RCCEx_PLL2_Config>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008ca6:	e003      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	75fb      	strb	r3, [r7, #23]
      break;
 8008cac:	e000      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8008cae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cb0:	7dfb      	ldrb	r3, [r7, #23]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d109      	bne.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008cb6:	4b10      	ldr	r3, [pc, #64]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cc2:	490d      	ldr	r1, [pc, #52]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	650b      	str	r3, [r1, #80]	; 0x50
 8008cc8:	e001      	b.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cca:	7dfb      	ldrb	r3, [r7, #23]
 8008ccc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d033      	beq.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cde:	2b03      	cmp	r3, #3
 8008ce0:	d81c      	bhi.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008ce2:	a201      	add	r2, pc, #4	; (adr r2, 8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8008ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce8:	08008d23 	.word	0x08008d23
 8008cec:	08008cfd 	.word	0x08008cfd
 8008cf0:	08008d0b 	.word	0x08008d0b
 8008cf4:	08008d23 	.word	0x08008d23
 8008cf8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cfc:	4bb8      	ldr	r3, [pc, #736]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d00:	4ab7      	ldr	r2, [pc, #732]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008d08:	e00c      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	3304      	adds	r3, #4
 8008d0e:	2102      	movs	r1, #2
 8008d10:	4618      	mov	r0, r3
 8008d12:	f000 fefd 	bl	8009b10 <RCCEx_PLL2_Config>
 8008d16:	4603      	mov	r3, r0
 8008d18:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008d1a:	e003      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8008d20:	e000      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008d22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d24:	7dfb      	ldrb	r3, [r7, #23]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d109      	bne.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008d2a:	4bad      	ldr	r3, [pc, #692]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d2e:	f023 0203 	bic.w	r2, r3, #3
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d36:	49aa      	ldr	r1, [pc, #680]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008d3c:	e001      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d3e:	7dfb      	ldrb	r3, [r7, #23]
 8008d40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	f000 8086 	beq.w	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d50:	4ba4      	ldr	r3, [pc, #656]	; (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4aa3      	ldr	r2, [pc, #652]	; (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d5c:	f7f9 fbf2 	bl	8002544 <HAL_GetTick>
 8008d60:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d62:	e009      	b.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d64:	f7f9 fbee 	bl	8002544 <HAL_GetTick>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	2b64      	cmp	r3, #100	; 0x64
 8008d70:	d902      	bls.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008d72:	2303      	movs	r3, #3
 8008d74:	75fb      	strb	r3, [r7, #23]
        break;
 8008d76:	e005      	b.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d78:	4b9a      	ldr	r3, [pc, #616]	; (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d0ef      	beq.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008d84:	7dfb      	ldrb	r3, [r7, #23]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d166      	bne.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008d8a:	4b95      	ldr	r3, [pc, #596]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008d8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d94:	4053      	eors	r3, r2
 8008d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d013      	beq.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008d9e:	4b90      	ldr	r3, [pc, #576]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008da6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008da8:	4b8d      	ldr	r3, [pc, #564]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dac:	4a8c      	ldr	r2, [pc, #560]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008db2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008db4:	4b8a      	ldr	r3, [pc, #552]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db8:	4a89      	ldr	r2, [pc, #548]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dbe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008dc0:	4a87      	ldr	r2, [pc, #540]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008dcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dd0:	d115      	bne.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dd2:	f7f9 fbb7 	bl	8002544 <HAL_GetTick>
 8008dd6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008dd8:	e00b      	b.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dda:	f7f9 fbb3 	bl	8002544 <HAL_GetTick>
 8008dde:	4602      	mov	r2, r0
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	1ad3      	subs	r3, r2, r3
 8008de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d902      	bls.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008dec:	2303      	movs	r3, #3
 8008dee:	75fb      	strb	r3, [r7, #23]
            break;
 8008df0:	e005      	b.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008df2:	4b7b      	ldr	r3, [pc, #492]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008df6:	f003 0302 	and.w	r3, r3, #2
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d0ed      	beq.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008dfe:	7dfb      	ldrb	r3, [r7, #23]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d126      	bne.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e12:	d10d      	bne.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008e14:	4b72      	ldr	r3, [pc, #456]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008e16:	691b      	ldr	r3, [r3, #16]
 8008e18:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e22:	0919      	lsrs	r1, r3, #4
 8008e24:	4b70      	ldr	r3, [pc, #448]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8008e26:	400b      	ands	r3, r1
 8008e28:	496d      	ldr	r1, [pc, #436]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	610b      	str	r3, [r1, #16]
 8008e2e:	e005      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008e30:	4b6b      	ldr	r3, [pc, #428]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	4a6a      	ldr	r2, [pc, #424]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008e36:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008e3a:	6113      	str	r3, [r2, #16]
 8008e3c:	4b68      	ldr	r3, [pc, #416]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008e3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e4a:	4965      	ldr	r1, [pc, #404]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	670b      	str	r3, [r1, #112]	; 0x70
 8008e50:	e004      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008e52:	7dfb      	ldrb	r3, [r7, #23]
 8008e54:	75bb      	strb	r3, [r7, #22]
 8008e56:	e001      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e58:	7dfb      	ldrb	r3, [r7, #23]
 8008e5a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f003 0301 	and.w	r3, r3, #1
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d07e      	beq.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e6c:	2b28      	cmp	r3, #40	; 0x28
 8008e6e:	d867      	bhi.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008e70:	a201      	add	r2, pc, #4	; (adr r2, 8008e78 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e76:	bf00      	nop
 8008e78:	08008f47 	.word	0x08008f47
 8008e7c:	08008f41 	.word	0x08008f41
 8008e80:	08008f41 	.word	0x08008f41
 8008e84:	08008f41 	.word	0x08008f41
 8008e88:	08008f41 	.word	0x08008f41
 8008e8c:	08008f41 	.word	0x08008f41
 8008e90:	08008f41 	.word	0x08008f41
 8008e94:	08008f41 	.word	0x08008f41
 8008e98:	08008f1d 	.word	0x08008f1d
 8008e9c:	08008f41 	.word	0x08008f41
 8008ea0:	08008f41 	.word	0x08008f41
 8008ea4:	08008f41 	.word	0x08008f41
 8008ea8:	08008f41 	.word	0x08008f41
 8008eac:	08008f41 	.word	0x08008f41
 8008eb0:	08008f41 	.word	0x08008f41
 8008eb4:	08008f41 	.word	0x08008f41
 8008eb8:	08008f2f 	.word	0x08008f2f
 8008ebc:	08008f41 	.word	0x08008f41
 8008ec0:	08008f41 	.word	0x08008f41
 8008ec4:	08008f41 	.word	0x08008f41
 8008ec8:	08008f41 	.word	0x08008f41
 8008ecc:	08008f41 	.word	0x08008f41
 8008ed0:	08008f41 	.word	0x08008f41
 8008ed4:	08008f41 	.word	0x08008f41
 8008ed8:	08008f47 	.word	0x08008f47
 8008edc:	08008f41 	.word	0x08008f41
 8008ee0:	08008f41 	.word	0x08008f41
 8008ee4:	08008f41 	.word	0x08008f41
 8008ee8:	08008f41 	.word	0x08008f41
 8008eec:	08008f41 	.word	0x08008f41
 8008ef0:	08008f41 	.word	0x08008f41
 8008ef4:	08008f41 	.word	0x08008f41
 8008ef8:	08008f47 	.word	0x08008f47
 8008efc:	08008f41 	.word	0x08008f41
 8008f00:	08008f41 	.word	0x08008f41
 8008f04:	08008f41 	.word	0x08008f41
 8008f08:	08008f41 	.word	0x08008f41
 8008f0c:	08008f41 	.word	0x08008f41
 8008f10:	08008f41 	.word	0x08008f41
 8008f14:	08008f41 	.word	0x08008f41
 8008f18:	08008f47 	.word	0x08008f47
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	3304      	adds	r3, #4
 8008f20:	2101      	movs	r1, #1
 8008f22:	4618      	mov	r0, r3
 8008f24:	f000 fdf4 	bl	8009b10 <RCCEx_PLL2_Config>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008f2c:	e00c      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	3324      	adds	r3, #36	; 0x24
 8008f32:	2101      	movs	r1, #1
 8008f34:	4618      	mov	r0, r3
 8008f36:	f000 fe9d 	bl	8009c74 <RCCEx_PLL3_Config>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008f3e:	e003      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	75fb      	strb	r3, [r7, #23]
      break;
 8008f44:	e000      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8008f46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f48:	7dfb      	ldrb	r3, [r7, #23]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d109      	bne.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008f4e:	4b24      	ldr	r3, [pc, #144]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f52:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f5a:	4921      	ldr	r1, [pc, #132]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	654b      	str	r3, [r1, #84]	; 0x54
 8008f60:	e001      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f62:	7dfb      	ldrb	r3, [r7, #23]
 8008f64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f003 0302 	and.w	r3, r3, #2
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d03e      	beq.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f76:	2b05      	cmp	r3, #5
 8008f78:	d820      	bhi.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8008f7a:	a201      	add	r2, pc, #4	; (adr r2, 8008f80 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8008f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f80:	08008fc3 	.word	0x08008fc3
 8008f84:	08008f99 	.word	0x08008f99
 8008f88:	08008fab 	.word	0x08008fab
 8008f8c:	08008fc3 	.word	0x08008fc3
 8008f90:	08008fc3 	.word	0x08008fc3
 8008f94:	08008fc3 	.word	0x08008fc3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	3304      	adds	r3, #4
 8008f9c:	2101      	movs	r1, #1
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f000 fdb6 	bl	8009b10 <RCCEx_PLL2_Config>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008fa8:	e00c      	b.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	3324      	adds	r3, #36	; 0x24
 8008fae:	2101      	movs	r1, #1
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f000 fe5f 	bl	8009c74 <RCCEx_PLL3_Config>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008fba:	e003      	b.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	75fb      	strb	r3, [r7, #23]
      break;
 8008fc0:	e000      	b.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8008fc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fc4:	7dfb      	ldrb	r3, [r7, #23]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d110      	bne.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008fca:	4b05      	ldr	r3, [pc, #20]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fce:	f023 0207 	bic.w	r2, r3, #7
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fd6:	4902      	ldr	r1, [pc, #8]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	654b      	str	r3, [r1, #84]	; 0x54
 8008fdc:	e008      	b.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8008fde:	bf00      	nop
 8008fe0:	58024400 	.word	0x58024400
 8008fe4:	58024800 	.word	0x58024800
 8008fe8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fec:	7dfb      	ldrb	r3, [r7, #23]
 8008fee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f003 0304 	and.w	r3, r3, #4
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d039      	beq.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009002:	2b05      	cmp	r3, #5
 8009004:	d820      	bhi.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8009006:	a201      	add	r2, pc, #4	; (adr r2, 800900c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8009008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900c:	0800904f 	.word	0x0800904f
 8009010:	08009025 	.word	0x08009025
 8009014:	08009037 	.word	0x08009037
 8009018:	0800904f 	.word	0x0800904f
 800901c:	0800904f 	.word	0x0800904f
 8009020:	0800904f 	.word	0x0800904f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	3304      	adds	r3, #4
 8009028:	2101      	movs	r1, #1
 800902a:	4618      	mov	r0, r3
 800902c:	f000 fd70 	bl	8009b10 <RCCEx_PLL2_Config>
 8009030:	4603      	mov	r3, r0
 8009032:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009034:	e00c      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	3324      	adds	r3, #36	; 0x24
 800903a:	2101      	movs	r1, #1
 800903c:	4618      	mov	r0, r3
 800903e:	f000 fe19 	bl	8009c74 <RCCEx_PLL3_Config>
 8009042:	4603      	mov	r3, r0
 8009044:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009046:	e003      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	75fb      	strb	r3, [r7, #23]
      break;
 800904c:	e000      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800904e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009050:	7dfb      	ldrb	r3, [r7, #23]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d10a      	bne.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009056:	4bb7      	ldr	r3, [pc, #732]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800905a:	f023 0207 	bic.w	r2, r3, #7
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009064:	49b3      	ldr	r1, [pc, #716]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009066:	4313      	orrs	r3, r2
 8009068:	658b      	str	r3, [r1, #88]	; 0x58
 800906a:	e001      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800906c:	7dfb      	ldrb	r3, [r7, #23]
 800906e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 0320 	and.w	r3, r3, #32
 8009078:	2b00      	cmp	r3, #0
 800907a:	d04b      	beq.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009082:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009086:	d02e      	beq.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8009088:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800908c:	d828      	bhi.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800908e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009092:	d02a      	beq.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009098:	d822      	bhi.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800909a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800909e:	d026      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80090a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090a4:	d81c      	bhi.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80090a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090aa:	d010      	beq.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80090ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090b0:	d816      	bhi.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d01d      	beq.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80090b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090ba:	d111      	bne.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	3304      	adds	r3, #4
 80090c0:	2100      	movs	r1, #0
 80090c2:	4618      	mov	r0, r3
 80090c4:	f000 fd24 	bl	8009b10 <RCCEx_PLL2_Config>
 80090c8:	4603      	mov	r3, r0
 80090ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80090cc:	e012      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	3324      	adds	r3, #36	; 0x24
 80090d2:	2102      	movs	r1, #2
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 fdcd 	bl	8009c74 <RCCEx_PLL3_Config>
 80090da:	4603      	mov	r3, r0
 80090dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80090de:	e009      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090e0:	2301      	movs	r3, #1
 80090e2:	75fb      	strb	r3, [r7, #23]
      break;
 80090e4:	e006      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80090e6:	bf00      	nop
 80090e8:	e004      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80090ea:	bf00      	nop
 80090ec:	e002      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80090ee:	bf00      	nop
 80090f0:	e000      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80090f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090f4:	7dfb      	ldrb	r3, [r7, #23]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d10a      	bne.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80090fa:	4b8e      	ldr	r3, [pc, #568]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80090fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090fe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009108:	498a      	ldr	r1, [pc, #552]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800910a:	4313      	orrs	r3, r2
 800910c:	654b      	str	r3, [r1, #84]	; 0x54
 800910e:	e001      	b.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009110:	7dfb      	ldrb	r3, [r7, #23]
 8009112:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800911c:	2b00      	cmp	r3, #0
 800911e:	d04b      	beq.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009126:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800912a:	d02e      	beq.n	800918a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800912c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009130:	d828      	bhi.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009136:	d02a      	beq.n	800918e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800913c:	d822      	bhi.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800913e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009142:	d026      	beq.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009144:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009148:	d81c      	bhi.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800914a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800914e:	d010      	beq.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8009150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009154:	d816      	bhi.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009156:	2b00      	cmp	r3, #0
 8009158:	d01d      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800915a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800915e:	d111      	bne.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	3304      	adds	r3, #4
 8009164:	2100      	movs	r1, #0
 8009166:	4618      	mov	r0, r3
 8009168:	f000 fcd2 	bl	8009b10 <RCCEx_PLL2_Config>
 800916c:	4603      	mov	r3, r0
 800916e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009170:	e012      	b.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	3324      	adds	r3, #36	; 0x24
 8009176:	2102      	movs	r1, #2
 8009178:	4618      	mov	r0, r3
 800917a:	f000 fd7b 	bl	8009c74 <RCCEx_PLL3_Config>
 800917e:	4603      	mov	r3, r0
 8009180:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009182:	e009      	b.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	75fb      	strb	r3, [r7, #23]
      break;
 8009188:	e006      	b.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800918a:	bf00      	nop
 800918c:	e004      	b.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800918e:	bf00      	nop
 8009190:	e002      	b.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009192:	bf00      	nop
 8009194:	e000      	b.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009196:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009198:	7dfb      	ldrb	r3, [r7, #23]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d10a      	bne.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800919e:	4b65      	ldr	r3, [pc, #404]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80091a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091a2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80091ac:	4961      	ldr	r1, [pc, #388]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80091ae:	4313      	orrs	r3, r2
 80091b0:	658b      	str	r3, [r1, #88]	; 0x58
 80091b2:	e001      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b4:	7dfb      	ldrb	r3, [r7, #23]
 80091b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d04b      	beq.n	800925c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80091ca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80091ce:	d02e      	beq.n	800922e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80091d0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80091d4:	d828      	bhi.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80091d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091da:	d02a      	beq.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80091dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091e0:	d822      	bhi.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80091e2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80091e6:	d026      	beq.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80091e8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80091ec:	d81c      	bhi.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80091ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091f2:	d010      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80091f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091f8:	d816      	bhi.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d01d      	beq.n	800923a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80091fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009202:	d111      	bne.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	3304      	adds	r3, #4
 8009208:	2100      	movs	r1, #0
 800920a:	4618      	mov	r0, r3
 800920c:	f000 fc80 	bl	8009b10 <RCCEx_PLL2_Config>
 8009210:	4603      	mov	r3, r0
 8009212:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009214:	e012      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	3324      	adds	r3, #36	; 0x24
 800921a:	2102      	movs	r1, #2
 800921c:	4618      	mov	r0, r3
 800921e:	f000 fd29 	bl	8009c74 <RCCEx_PLL3_Config>
 8009222:	4603      	mov	r3, r0
 8009224:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009226:	e009      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009228:	2301      	movs	r3, #1
 800922a:	75fb      	strb	r3, [r7, #23]
      break;
 800922c:	e006      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800922e:	bf00      	nop
 8009230:	e004      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009232:	bf00      	nop
 8009234:	e002      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009236:	bf00      	nop
 8009238:	e000      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800923a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800923c:	7dfb      	ldrb	r3, [r7, #23]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d10a      	bne.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009242:	4b3c      	ldr	r3, [pc, #240]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009246:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009250:	4938      	ldr	r1, [pc, #224]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009252:	4313      	orrs	r3, r2
 8009254:	658b      	str	r3, [r1, #88]	; 0x58
 8009256:	e001      	b.n	800925c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009258:	7dfb      	ldrb	r3, [r7, #23]
 800925a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f003 0308 	and.w	r3, r3, #8
 8009264:	2b00      	cmp	r3, #0
 8009266:	d01a      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800926e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009272:	d10a      	bne.n	800928a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	3324      	adds	r3, #36	; 0x24
 8009278:	2102      	movs	r1, #2
 800927a:	4618      	mov	r0, r3
 800927c:	f000 fcfa 	bl	8009c74 <RCCEx_PLL3_Config>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d001      	beq.n	800928a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800928a:	4b2a      	ldr	r3, [pc, #168]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800928c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800928e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009298:	4926      	ldr	r1, [pc, #152]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800929a:	4313      	orrs	r3, r2
 800929c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f003 0310 	and.w	r3, r3, #16
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d01a      	beq.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092b4:	d10a      	bne.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	3324      	adds	r3, #36	; 0x24
 80092ba:	2102      	movs	r1, #2
 80092bc:	4618      	mov	r0, r3
 80092be:	f000 fcd9 	bl	8009c74 <RCCEx_PLL3_Config>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d001      	beq.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80092c8:	2301      	movs	r3, #1
 80092ca:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80092cc:	4b19      	ldr	r3, [pc, #100]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80092ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092da:	4916      	ldr	r1, [pc, #88]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80092dc:	4313      	orrs	r3, r2
 80092de:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d036      	beq.n	800935a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80092f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092f6:	d01f      	beq.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80092f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092fc:	d817      	bhi.n	800932e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d003      	beq.n	800930a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8009302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009306:	d009      	beq.n	800931c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8009308:	e011      	b.n	800932e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	3304      	adds	r3, #4
 800930e:	2100      	movs	r1, #0
 8009310:	4618      	mov	r0, r3
 8009312:	f000 fbfd 	bl	8009b10 <RCCEx_PLL2_Config>
 8009316:	4603      	mov	r3, r0
 8009318:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800931a:	e00e      	b.n	800933a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	3324      	adds	r3, #36	; 0x24
 8009320:	2102      	movs	r1, #2
 8009322:	4618      	mov	r0, r3
 8009324:	f000 fca6 	bl	8009c74 <RCCEx_PLL3_Config>
 8009328:	4603      	mov	r3, r0
 800932a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800932c:	e005      	b.n	800933a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800932e:	2301      	movs	r3, #1
 8009330:	75fb      	strb	r3, [r7, #23]
      break;
 8009332:	e002      	b.n	800933a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8009334:	58024400 	.word	0x58024400
      break;
 8009338:	bf00      	nop
    }

    if(ret == HAL_OK)
 800933a:	7dfb      	ldrb	r3, [r7, #23]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d10a      	bne.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009340:	4b93      	ldr	r3, [pc, #588]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009344:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800934e:	4990      	ldr	r1, [pc, #576]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009350:	4313      	orrs	r3, r2
 8009352:	658b      	str	r3, [r1, #88]	; 0x58
 8009354:	e001      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009356:	7dfb      	ldrb	r3, [r7, #23]
 8009358:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009362:	2b00      	cmp	r3, #0
 8009364:	d033      	beq.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800936c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009370:	d01c      	beq.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8009372:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009376:	d816      	bhi.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8009378:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800937c:	d003      	beq.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800937e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009382:	d007      	beq.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8009384:	e00f      	b.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009386:	4b82      	ldr	r3, [pc, #520]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800938a:	4a81      	ldr	r2, [pc, #516]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800938c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009390:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009392:	e00c      	b.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	3324      	adds	r3, #36	; 0x24
 8009398:	2101      	movs	r1, #1
 800939a:	4618      	mov	r0, r3
 800939c:	f000 fc6a 	bl	8009c74 <RCCEx_PLL3_Config>
 80093a0:	4603      	mov	r3, r0
 80093a2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80093a4:	e003      	b.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	75fb      	strb	r3, [r7, #23]
      break;
 80093aa:	e000      	b.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80093ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093ae:	7dfb      	ldrb	r3, [r7, #23]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d10a      	bne.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80093b4:	4b76      	ldr	r3, [pc, #472]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80093b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093c2:	4973      	ldr	r1, [pc, #460]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80093c4:	4313      	orrs	r3, r2
 80093c6:	654b      	str	r3, [r1, #84]	; 0x54
 80093c8:	e001      	b.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093ca:	7dfb      	ldrb	r3, [r7, #23]
 80093cc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d029      	beq.n	800942e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d003      	beq.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80093e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093e6:	d007      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80093e8:	e00f      	b.n	800940a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093ea:	4b69      	ldr	r3, [pc, #420]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80093ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ee:	4a68      	ldr	r2, [pc, #416]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80093f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80093f6:	e00b      	b.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	3304      	adds	r3, #4
 80093fc:	2102      	movs	r1, #2
 80093fe:	4618      	mov	r0, r3
 8009400:	f000 fb86 	bl	8009b10 <RCCEx_PLL2_Config>
 8009404:	4603      	mov	r3, r0
 8009406:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009408:	e002      	b.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	75fb      	strb	r3, [r7, #23]
      break;
 800940e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009410:	7dfb      	ldrb	r3, [r7, #23]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d109      	bne.n	800942a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009416:	4b5e      	ldr	r3, [pc, #376]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800941a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009422:	495b      	ldr	r1, [pc, #364]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009424:	4313      	orrs	r3, r2
 8009426:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009428:	e001      	b.n	800942e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800942a:	7dfb      	ldrb	r3, [r7, #23]
 800942c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00a      	beq.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	3324      	adds	r3, #36	; 0x24
 800943e:	2102      	movs	r1, #2
 8009440:	4618      	mov	r0, r3
 8009442:	f000 fc17 	bl	8009c74 <RCCEx_PLL3_Config>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d001      	beq.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009458:	2b00      	cmp	r3, #0
 800945a:	d030      	beq.n	80094be <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009460:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009464:	d017      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8009466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800946a:	d811      	bhi.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800946c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009470:	d013      	beq.n	800949a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009476:	d80b      	bhi.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009478:	2b00      	cmp	r3, #0
 800947a:	d010      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800947c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009480:	d106      	bne.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009482:	4b43      	ldr	r3, [pc, #268]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009486:	4a42      	ldr	r2, [pc, #264]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800948c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800948e:	e007      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	75fb      	strb	r3, [r7, #23]
      break;
 8009494:	e004      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009496:	bf00      	nop
 8009498:	e002      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800949a:	bf00      	nop
 800949c:	e000      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800949e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094a0:	7dfb      	ldrb	r3, [r7, #23]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d109      	bne.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80094a6:	4b3a      	ldr	r3, [pc, #232]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80094a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094b2:	4937      	ldr	r1, [pc, #220]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80094b4:	4313      	orrs	r3, r2
 80094b6:	654b      	str	r3, [r1, #84]	; 0x54
 80094b8:	e001      	b.n	80094be <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094ba:	7dfb      	ldrb	r3, [r7, #23]
 80094bc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d008      	beq.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80094ca:	4b31      	ldr	r3, [pc, #196]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80094cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094d6:	492e      	ldr	r1, [pc, #184]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80094d8:	4313      	orrs	r3, r2
 80094da:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d009      	beq.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80094e8:	4b29      	ldr	r3, [pc, #164]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80094f6:	4926      	ldr	r1, [pc, #152]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80094f8:	4313      	orrs	r3, r2
 80094fa:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009504:	2b00      	cmp	r3, #0
 8009506:	d008      	beq.n	800951a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009508:	4b21      	ldr	r3, [pc, #132]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800950a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800950c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009514:	491e      	ldr	r1, [pc, #120]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009516:	4313      	orrs	r3, r2
 8009518:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00d      	beq.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009526:	4b1a      	ldr	r3, [pc, #104]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	4a19      	ldr	r2, [pc, #100]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800952c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009530:	6113      	str	r3, [r2, #16]
 8009532:	4b17      	ldr	r3, [pc, #92]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009534:	691a      	ldr	r2, [r3, #16]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800953c:	4914      	ldr	r1, [pc, #80]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800953e:	4313      	orrs	r3, r2
 8009540:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2b00      	cmp	r3, #0
 8009548:	da08      	bge.n	800955c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800954a:	4b11      	ldr	r3, [pc, #68]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800954c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800954e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009556:	490e      	ldr	r1, [pc, #56]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009558:	4313      	orrs	r3, r2
 800955a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009564:	2b00      	cmp	r3, #0
 8009566:	d009      	beq.n	800957c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009568:	4b09      	ldr	r3, [pc, #36]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800956a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800956c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009576:	4906      	ldr	r1, [pc, #24]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009578:	4313      	orrs	r3, r2
 800957a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800957c:	7dbb      	ldrb	r3, [r7, #22]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d101      	bne.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8009582:	2300      	movs	r3, #0
 8009584:	e000      	b.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8009586:	2301      	movs	r3, #1
}
 8009588:	4618      	mov	r0, r3
 800958a:	3718      	adds	r7, #24
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}
 8009590:	58024400 	.word	0x58024400

08009594 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009598:	f7ff f860 	bl	800865c <HAL_RCC_GetHCLKFreq>
 800959c:	4602      	mov	r2, r0
 800959e:	4b06      	ldr	r3, [pc, #24]	; (80095b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80095a0:	6a1b      	ldr	r3, [r3, #32]
 80095a2:	091b      	lsrs	r3, r3, #4
 80095a4:	f003 0307 	and.w	r3, r3, #7
 80095a8:	4904      	ldr	r1, [pc, #16]	; (80095bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80095aa:	5ccb      	ldrb	r3, [r1, r3]
 80095ac:	f003 031f 	and.w	r3, r3, #31
 80095b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	58024400 	.word	0x58024400
 80095bc:	08021aa0 	.word	0x08021aa0

080095c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b089      	sub	sp, #36	; 0x24
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80095c8:	4ba1      	ldr	r3, [pc, #644]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095cc:	f003 0303 	and.w	r3, r3, #3
 80095d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80095d2:	4b9f      	ldr	r3, [pc, #636]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d6:	0b1b      	lsrs	r3, r3, #12
 80095d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80095de:	4b9c      	ldr	r3, [pc, #624]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e2:	091b      	lsrs	r3, r3, #4
 80095e4:	f003 0301 	and.w	r3, r3, #1
 80095e8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80095ea:	4b99      	ldr	r3, [pc, #612]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ee:	08db      	lsrs	r3, r3, #3
 80095f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095f4:	693a      	ldr	r2, [r7, #16]
 80095f6:	fb02 f303 	mul.w	r3, r2, r3
 80095fa:	ee07 3a90 	vmov	s15, r3
 80095fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009602:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	2b00      	cmp	r3, #0
 800960a:	f000 8111 	beq.w	8009830 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800960e:	69bb      	ldr	r3, [r7, #24]
 8009610:	2b02      	cmp	r3, #2
 8009612:	f000 8083 	beq.w	800971c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	2b02      	cmp	r3, #2
 800961a:	f200 80a1 	bhi.w	8009760 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800961e:	69bb      	ldr	r3, [r7, #24]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d003      	beq.n	800962c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	2b01      	cmp	r3, #1
 8009628:	d056      	beq.n	80096d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800962a:	e099      	b.n	8009760 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800962c:	4b88      	ldr	r3, [pc, #544]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 0320 	and.w	r3, r3, #32
 8009634:	2b00      	cmp	r3, #0
 8009636:	d02d      	beq.n	8009694 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009638:	4b85      	ldr	r3, [pc, #532]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	08db      	lsrs	r3, r3, #3
 800963e:	f003 0303 	and.w	r3, r3, #3
 8009642:	4a84      	ldr	r2, [pc, #528]	; (8009854 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009644:	fa22 f303 	lsr.w	r3, r2, r3
 8009648:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	ee07 3a90 	vmov	s15, r3
 8009650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	ee07 3a90 	vmov	s15, r3
 800965a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800965e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009662:	4b7b      	ldr	r3, [pc, #492]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800966a:	ee07 3a90 	vmov	s15, r3
 800966e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009672:	ed97 6a03 	vldr	s12, [r7, #12]
 8009676:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009858 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800967a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800967e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800968a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800968e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009692:	e087      	b.n	80097a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	ee07 3a90 	vmov	s15, r3
 800969a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800969e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800985c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80096a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096a6:	4b6a      	ldr	r3, [pc, #424]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ae:	ee07 3a90 	vmov	s15, r3
 80096b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80096ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009858 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096d6:	e065      	b.n	80097a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	ee07 3a90 	vmov	s15, r3
 80096de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009860 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80096e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096ea:	4b59      	ldr	r3, [pc, #356]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096f2:	ee07 3a90 	vmov	s15, r3
 80096f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80096fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009858 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800970a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800970e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009716:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800971a:	e043      	b.n	80097a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	ee07 3a90 	vmov	s15, r3
 8009722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009726:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800972a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800972e:	4b48      	ldr	r3, [pc, #288]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009736:	ee07 3a90 	vmov	s15, r3
 800973a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800973e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009742:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009858 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800974a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800974e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800975a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800975e:	e021      	b.n	80097a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	ee07 3a90 	vmov	s15, r3
 8009766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800976a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009860 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800976e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009772:	4b37      	ldr	r3, [pc, #220]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800977a:	ee07 3a90 	vmov	s15, r3
 800977e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009782:	ed97 6a03 	vldr	s12, [r7, #12]
 8009786:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009858 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800978a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800978e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800979a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800979e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80097a4:	4b2a      	ldr	r3, [pc, #168]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a8:	0a5b      	lsrs	r3, r3, #9
 80097aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097ae:	ee07 3a90 	vmov	s15, r3
 80097b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097be:	edd7 6a07 	vldr	s13, [r7, #28]
 80097c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097ca:	ee17 2a90 	vmov	r2, s15
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80097d2:	4b1f      	ldr	r3, [pc, #124]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d6:	0c1b      	lsrs	r3, r3, #16
 80097d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097dc:	ee07 3a90 	vmov	s15, r3
 80097e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80097f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097f8:	ee17 2a90 	vmov	r2, s15
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009800:	4b13      	ldr	r3, [pc, #76]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009804:	0e1b      	lsrs	r3, r3, #24
 8009806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800980a:	ee07 3a90 	vmov	s15, r3
 800980e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009812:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009816:	ee37 7a87 	vadd.f32	s14, s15, s14
 800981a:	edd7 6a07 	vldr	s13, [r7, #28]
 800981e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009822:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009826:	ee17 2a90 	vmov	r2, s15
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800982e:	e008      	b.n	8009842 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	609a      	str	r2, [r3, #8]
}
 8009842:	bf00      	nop
 8009844:	3724      	adds	r7, #36	; 0x24
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr
 800984e:	bf00      	nop
 8009850:	58024400 	.word	0x58024400
 8009854:	03d09000 	.word	0x03d09000
 8009858:	46000000 	.word	0x46000000
 800985c:	4c742400 	.word	0x4c742400
 8009860:	4a742400 	.word	0x4a742400
 8009864:	4af42400 	.word	0x4af42400

08009868 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009868:	b480      	push	{r7}
 800986a:	b089      	sub	sp, #36	; 0x24
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009870:	4ba1      	ldr	r3, [pc, #644]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009874:	f003 0303 	and.w	r3, r3, #3
 8009878:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800987a:	4b9f      	ldr	r3, [pc, #636]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800987c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800987e:	0d1b      	lsrs	r3, r3, #20
 8009880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009884:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009886:	4b9c      	ldr	r3, [pc, #624]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988a:	0a1b      	lsrs	r3, r3, #8
 800988c:	f003 0301 	and.w	r3, r3, #1
 8009890:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009892:	4b99      	ldr	r3, [pc, #612]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009896:	08db      	lsrs	r3, r3, #3
 8009898:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800989c:	693a      	ldr	r2, [r7, #16]
 800989e:	fb02 f303 	mul.w	r3, r2, r3
 80098a2:	ee07 3a90 	vmov	s15, r3
 80098a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f000 8111 	beq.w	8009ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	f000 8083 	beq.w	80099c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	f200 80a1 	bhi.w	8009a08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80098c6:	69bb      	ldr	r3, [r7, #24]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d003      	beq.n	80098d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80098cc:	69bb      	ldr	r3, [r7, #24]
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d056      	beq.n	8009980 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80098d2:	e099      	b.n	8009a08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098d4:	4b88      	ldr	r3, [pc, #544]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f003 0320 	and.w	r3, r3, #32
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d02d      	beq.n	800993c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80098e0:	4b85      	ldr	r3, [pc, #532]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	08db      	lsrs	r3, r3, #3
 80098e6:	f003 0303 	and.w	r3, r3, #3
 80098ea:	4a84      	ldr	r2, [pc, #528]	; (8009afc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80098ec:	fa22 f303 	lsr.w	r3, r2, r3
 80098f0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	ee07 3a90 	vmov	s15, r3
 80098f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	ee07 3a90 	vmov	s15, r3
 8009902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800990a:	4b7b      	ldr	r3, [pc, #492]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800990c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800990e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009912:	ee07 3a90 	vmov	s15, r3
 8009916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800991a:	ed97 6a03 	vldr	s12, [r7, #12]
 800991e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009b00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800992a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800992e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009936:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800993a:	e087      	b.n	8009a4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	ee07 3a90 	vmov	s15, r3
 8009942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009946:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009b04 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800994a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800994e:	4b6a      	ldr	r3, [pc, #424]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009956:	ee07 3a90 	vmov	s15, r3
 800995a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800995e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009962:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009b00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800996a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800996e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800997a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800997e:	e065      	b.n	8009a4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	ee07 3a90 	vmov	s15, r3
 8009986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800998a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009b08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800998e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009992:	4b59      	ldr	r3, [pc, #356]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800999a:	ee07 3a90 	vmov	s15, r3
 800999e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80099a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009b00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099c2:	e043      	b.n	8009a4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	ee07 3a90 	vmov	s15, r3
 80099ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80099d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099d6:	4b48      	ldr	r3, [pc, #288]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099de:	ee07 3a90 	vmov	s15, r3
 80099e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80099ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009b00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a06:	e021      	b.n	8009a4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	ee07 3a90 	vmov	s15, r3
 8009a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009b08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a1a:	4b37      	ldr	r3, [pc, #220]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a22:	ee07 3a90 	vmov	s15, r3
 8009a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009b00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a4a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009a4c:	4b2a      	ldr	r3, [pc, #168]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a50:	0a5b      	lsrs	r3, r3, #9
 8009a52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a56:	ee07 3a90 	vmov	s15, r3
 8009a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a66:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a72:	ee17 2a90 	vmov	r2, s15
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009a7a:	4b1f      	ldr	r3, [pc, #124]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7e:	0c1b      	lsrs	r3, r3, #16
 8009a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a84:	ee07 3a90 	vmov	s15, r3
 8009a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a94:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009aa0:	ee17 2a90 	vmov	r2, s15
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009aa8:	4b13      	ldr	r3, [pc, #76]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aac:	0e1b      	lsrs	r3, r3, #24
 8009aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ab2:	ee07 3a90 	vmov	s15, r3
 8009ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009abe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ac2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ace:	ee17 2a90 	vmov	r2, s15
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009ad6:	e008      	b.n	8009aea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	609a      	str	r2, [r3, #8]
}
 8009aea:	bf00      	nop
 8009aec:	3724      	adds	r7, #36	; 0x24
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr
 8009af6:	bf00      	nop
 8009af8:	58024400 	.word	0x58024400
 8009afc:	03d09000 	.word	0x03d09000
 8009b00:	46000000 	.word	0x46000000
 8009b04:	4c742400 	.word	0x4c742400
 8009b08:	4a742400 	.word	0x4a742400
 8009b0c:	4af42400 	.word	0x4af42400

08009b10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009b1e:	4b53      	ldr	r3, [pc, #332]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b22:	f003 0303 	and.w	r3, r3, #3
 8009b26:	2b03      	cmp	r3, #3
 8009b28:	d101      	bne.n	8009b2e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e099      	b.n	8009c62 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009b2e:	4b4f      	ldr	r3, [pc, #316]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a4e      	ldr	r2, [pc, #312]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009b34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009b38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b3a:	f7f8 fd03 	bl	8002544 <HAL_GetTick>
 8009b3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009b40:	e008      	b.n	8009b54 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009b42:	f7f8 fcff 	bl	8002544 <HAL_GetTick>
 8009b46:	4602      	mov	r2, r0
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	1ad3      	subs	r3, r2, r3
 8009b4c:	2b02      	cmp	r3, #2
 8009b4e:	d901      	bls.n	8009b54 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009b50:	2303      	movs	r3, #3
 8009b52:	e086      	b.n	8009c62 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009b54:	4b45      	ldr	r3, [pc, #276]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d1f0      	bne.n	8009b42 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009b60:	4b42      	ldr	r3, [pc, #264]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b64:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	031b      	lsls	r3, r3, #12
 8009b6e:	493f      	ldr	r1, [pc, #252]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009b70:	4313      	orrs	r3, r2
 8009b72:	628b      	str	r3, [r1, #40]	; 0x28
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	3b01      	subs	r3, #1
 8009b7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	3b01      	subs	r3, #1
 8009b84:	025b      	lsls	r3, r3, #9
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	431a      	orrs	r2, r3
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	68db      	ldr	r3, [r3, #12]
 8009b8e:	3b01      	subs	r3, #1
 8009b90:	041b      	lsls	r3, r3, #16
 8009b92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009b96:	431a      	orrs	r2, r3
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	061b      	lsls	r3, r3, #24
 8009ba0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009ba4:	4931      	ldr	r1, [pc, #196]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009baa:	4b30      	ldr	r3, [pc, #192]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	695b      	ldr	r3, [r3, #20]
 8009bb6:	492d      	ldr	r1, [pc, #180]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009bbc:	4b2b      	ldr	r3, [pc, #172]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc0:	f023 0220 	bic.w	r2, r3, #32
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	699b      	ldr	r3, [r3, #24]
 8009bc8:	4928      	ldr	r1, [pc, #160]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009bce:	4b27      	ldr	r3, [pc, #156]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd2:	4a26      	ldr	r2, [pc, #152]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009bd4:	f023 0310 	bic.w	r3, r3, #16
 8009bd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009bda:	4b24      	ldr	r3, [pc, #144]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009bdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009bde:	4b24      	ldr	r3, [pc, #144]	; (8009c70 <RCCEx_PLL2_Config+0x160>)
 8009be0:	4013      	ands	r3, r2
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	69d2      	ldr	r2, [r2, #28]
 8009be6:	00d2      	lsls	r2, r2, #3
 8009be8:	4920      	ldr	r1, [pc, #128]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009bea:	4313      	orrs	r3, r2
 8009bec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009bee:	4b1f      	ldr	r3, [pc, #124]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf2:	4a1e      	ldr	r2, [pc, #120]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009bf4:	f043 0310 	orr.w	r3, r3, #16
 8009bf8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d106      	bne.n	8009c0e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009c00:	4b1a      	ldr	r3, [pc, #104]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c04:	4a19      	ldr	r2, [pc, #100]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009c06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c0c:	e00f      	b.n	8009c2e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d106      	bne.n	8009c22 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009c14:	4b15      	ldr	r3, [pc, #84]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c18:	4a14      	ldr	r2, [pc, #80]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009c1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c20:	e005      	b.n	8009c2e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009c22:	4b12      	ldr	r3, [pc, #72]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c26:	4a11      	ldr	r2, [pc, #68]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009c28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009c2e:	4b0f      	ldr	r3, [pc, #60]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a0e      	ldr	r2, [pc, #56]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009c34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009c38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c3a:	f7f8 fc83 	bl	8002544 <HAL_GetTick>
 8009c3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009c40:	e008      	b.n	8009c54 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009c42:	f7f8 fc7f 	bl	8002544 <HAL_GetTick>
 8009c46:	4602      	mov	r2, r0
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	1ad3      	subs	r3, r2, r3
 8009c4c:	2b02      	cmp	r3, #2
 8009c4e:	d901      	bls.n	8009c54 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009c50:	2303      	movs	r3, #3
 8009c52:	e006      	b.n	8009c62 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009c54:	4b05      	ldr	r3, [pc, #20]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d0f0      	beq.n	8009c42 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	58024400 	.word	0x58024400
 8009c70:	ffff0007 	.word	0xffff0007

08009c74 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009c82:	4b53      	ldr	r3, [pc, #332]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c86:	f003 0303 	and.w	r3, r3, #3
 8009c8a:	2b03      	cmp	r3, #3
 8009c8c:	d101      	bne.n	8009c92 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e099      	b.n	8009dc6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009c92:	4b4f      	ldr	r3, [pc, #316]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a4e      	ldr	r2, [pc, #312]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009c98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c9e:	f7f8 fc51 	bl	8002544 <HAL_GetTick>
 8009ca2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ca4:	e008      	b.n	8009cb8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009ca6:	f7f8 fc4d 	bl	8002544 <HAL_GetTick>
 8009caa:	4602      	mov	r2, r0
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	1ad3      	subs	r3, r2, r3
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	d901      	bls.n	8009cb8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009cb4:	2303      	movs	r3, #3
 8009cb6:	e086      	b.n	8009dc6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009cb8:	4b45      	ldr	r3, [pc, #276]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d1f0      	bne.n	8009ca6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009cc4:	4b42      	ldr	r3, [pc, #264]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cc8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	051b      	lsls	r3, r3, #20
 8009cd2:	493f      	ldr	r1, [pc, #252]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	628b      	str	r3, [r1, #40]	; 0x28
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	3b01      	subs	r3, #1
 8009ce8:	025b      	lsls	r3, r3, #9
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	431a      	orrs	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	041b      	lsls	r3, r3, #16
 8009cf6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009cfa:	431a      	orrs	r2, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	691b      	ldr	r3, [r3, #16]
 8009d00:	3b01      	subs	r3, #1
 8009d02:	061b      	lsls	r3, r3, #24
 8009d04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009d08:	4931      	ldr	r1, [pc, #196]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009d0e:	4b30      	ldr	r3, [pc, #192]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	695b      	ldr	r3, [r3, #20]
 8009d1a:	492d      	ldr	r1, [pc, #180]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009d20:	4b2b      	ldr	r3, [pc, #172]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d24:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	699b      	ldr	r3, [r3, #24]
 8009d2c:	4928      	ldr	r1, [pc, #160]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009d32:	4b27      	ldr	r3, [pc, #156]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d36:	4a26      	ldr	r2, [pc, #152]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009d3e:	4b24      	ldr	r3, [pc, #144]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d42:	4b24      	ldr	r3, [pc, #144]	; (8009dd4 <RCCEx_PLL3_Config+0x160>)
 8009d44:	4013      	ands	r3, r2
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	69d2      	ldr	r2, [r2, #28]
 8009d4a:	00d2      	lsls	r2, r2, #3
 8009d4c:	4920      	ldr	r1, [pc, #128]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009d52:	4b1f      	ldr	r3, [pc, #124]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d56:	4a1e      	ldr	r2, [pc, #120]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d106      	bne.n	8009d72 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009d64:	4b1a      	ldr	r3, [pc, #104]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d68:	4a19      	ldr	r2, [pc, #100]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009d6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009d70:	e00f      	b.n	8009d92 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d106      	bne.n	8009d86 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009d78:	4b15      	ldr	r3, [pc, #84]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d7c:	4a14      	ldr	r2, [pc, #80]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009d82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009d84:	e005      	b.n	8009d92 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009d86:	4b12      	ldr	r3, [pc, #72]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d8a:	4a11      	ldr	r2, [pc, #68]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009d90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009d92:	4b0f      	ldr	r3, [pc, #60]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a0e      	ldr	r2, [pc, #56]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d9e:	f7f8 fbd1 	bl	8002544 <HAL_GetTick>
 8009da2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009da4:	e008      	b.n	8009db8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009da6:	f7f8 fbcd 	bl	8002544 <HAL_GetTick>
 8009daa:	4602      	mov	r2, r0
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	1ad3      	subs	r3, r2, r3
 8009db0:	2b02      	cmp	r3, #2
 8009db2:	d901      	bls.n	8009db8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009db4:	2303      	movs	r3, #3
 8009db6:	e006      	b.n	8009dc6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009db8:	4b05      	ldr	r3, [pc, #20]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d0f0      	beq.n	8009da6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	58024400 	.word	0x58024400
 8009dd4:	ffff0007 	.word	0xffff0007

08009dd8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8009de0:	2300      	movs	r3, #0
 8009de2:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d101      	bne.n	8009dee <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	e0eb      	b.n	8009fc6 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2200      	movs	r2, #0
 8009df2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4a75      	ldr	r2, [pc, #468]	; (8009fd0 <HAL_SPI_Init+0x1f8>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d00f      	beq.n	8009e1e <HAL_SPI_Init+0x46>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a74      	ldr	r2, [pc, #464]	; (8009fd4 <HAL_SPI_Init+0x1fc>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d00a      	beq.n	8009e1e <HAL_SPI_Init+0x46>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a72      	ldr	r2, [pc, #456]	; (8009fd8 <HAL_SPI_Init+0x200>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d005      	beq.n	8009e1e <HAL_SPI_Init+0x46>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	68db      	ldr	r3, [r3, #12]
 8009e16:	2b0f      	cmp	r3, #15
 8009e18:	d901      	bls.n	8009e1e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e0d3      	b.n	8009fc6 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 fe88 	bl	800ab34 <SPI_GetPacketSize>
 8009e24:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a69      	ldr	r2, [pc, #420]	; (8009fd0 <HAL_SPI_Init+0x1f8>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d00c      	beq.n	8009e4a <HAL_SPI_Init+0x72>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a67      	ldr	r2, [pc, #412]	; (8009fd4 <HAL_SPI_Init+0x1fc>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d007      	beq.n	8009e4a <HAL_SPI_Init+0x72>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a66      	ldr	r2, [pc, #408]	; (8009fd8 <HAL_SPI_Init+0x200>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d002      	beq.n	8009e4a <HAL_SPI_Init+0x72>
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	2b08      	cmp	r3, #8
 8009e48:	d811      	bhi.n	8009e6e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009e4e:	4a60      	ldr	r2, [pc, #384]	; (8009fd0 <HAL_SPI_Init+0x1f8>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d009      	beq.n	8009e68 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a5e      	ldr	r2, [pc, #376]	; (8009fd4 <HAL_SPI_Init+0x1fc>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d004      	beq.n	8009e68 <HAL_SPI_Init+0x90>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a5d      	ldr	r2, [pc, #372]	; (8009fd8 <HAL_SPI_Init+0x200>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d104      	bne.n	8009e72 <HAL_SPI_Init+0x9a>
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	2b10      	cmp	r3, #16
 8009e6c:	d901      	bls.n	8009e72 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e0a9      	b.n	8009fc6 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d106      	bne.n	8009e8c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f7f7 fc1c 	bl	80016c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2202      	movs	r2, #2
 8009e90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f022 0201 	bic.w	r2, r2, #1
 8009ea2:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	699b      	ldr	r3, [r3, #24]
 8009ea8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009eac:	d119      	bne.n	8009ee2 <HAL_SPI_Init+0x10a>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009eb6:	d103      	bne.n	8009ec0 <HAL_SPI_Init+0xe8>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d008      	beq.n	8009ed2 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d10c      	bne.n	8009ee2 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ecc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ed0:	d107      	bne.n	8009ee2 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009ee0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	69da      	ldr	r2, [r3, #28]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eea:	431a      	orrs	r2, r3
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	431a      	orrs	r2, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ef4:	ea42 0103 	orr.w	r1, r2, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	68da      	ldr	r2, [r3, #12]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	430a      	orrs	r2, r1
 8009f02:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0c:	431a      	orrs	r2, r3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f12:	431a      	orrs	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	699b      	ldr	r3, [r3, #24]
 8009f18:	431a      	orrs	r2, r3
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	691b      	ldr	r3, [r3, #16]
 8009f1e:	431a      	orrs	r2, r3
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	695b      	ldr	r3, [r3, #20]
 8009f24:	431a      	orrs	r2, r3
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6a1b      	ldr	r3, [r3, #32]
 8009f2a:	431a      	orrs	r2, r3
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	431a      	orrs	r2, r3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f36:	431a      	orrs	r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	431a      	orrs	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f42:	ea42 0103 	orr.w	r1, r2, r3
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	430a      	orrs	r2, r1
 8009f50:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d113      	bne.n	8009f82 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f6c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009f80:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f022 0201 	bic.w	r2, r2, #1
 8009f90:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d00a      	beq.n	8009fb4 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	430a      	orrs	r2, r1
 8009fb2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	40013000 	.word	0x40013000
 8009fd4:	40003800 	.word	0x40003800
 8009fd8:	40003c00 	.word	0x40003c00

08009fdc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b08a      	sub	sp, #40	; 0x28
 8009fe0:	af02      	add	r7, sp, #8
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	603b      	str	r3, [r7, #0]
 8009fe8:	4613      	mov	r3, r2
 8009fea:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	3320      	adds	r3, #32
 8009ff2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d101      	bne.n	800a006 <HAL_SPI_Transmit+0x2a>
 800a002:	2302      	movs	r3, #2
 800a004:	e1d7      	b.n	800a3b6 <HAL_SPI_Transmit+0x3da>
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2201      	movs	r2, #1
 800a00a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a00e:	f7f8 fa99 	bl	8002544 <HAL_GetTick>
 800a012:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d007      	beq.n	800a030 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800a020:	2302      	movs	r3, #2
 800a022:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2200      	movs	r2, #0
 800a028:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a02c:	7efb      	ldrb	r3, [r7, #27]
 800a02e:	e1c2      	b.n	800a3b6 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d002      	beq.n	800a03c <HAL_SPI_Transmit+0x60>
 800a036:	88fb      	ldrh	r3, [r7, #6]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d107      	bne.n	800a04c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2200      	movs	r2, #0
 800a044:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a048:	7efb      	ldrb	r3, [r7, #27]
 800a04a:	e1b4      	b.n	800a3b6 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2203      	movs	r2, #3
 800a050:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2200      	movs	r2, #0
 800a058:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	68ba      	ldr	r2, [r7, #8]
 800a060:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	88fa      	ldrh	r2, [r7, #6]
 800a066:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	88fa      	ldrh	r2, [r7, #6]
 800a06e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2200      	movs	r2, #0
 800a076:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2200      	movs	r2, #0
 800a07c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2200      	movs	r2, #0
 800a084:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2200      	movs	r2, #0
 800a092:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a09c:	d107      	bne.n	800a0ae <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	685a      	ldr	r2, [r3, #4]
 800a0b4:	4b96      	ldr	r3, [pc, #600]	; (800a310 <HAL_SPI_Transmit+0x334>)
 800a0b6:	4013      	ands	r3, r2
 800a0b8:	88f9      	ldrh	r1, [r7, #6]
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	6812      	ldr	r2, [r2, #0]
 800a0be:	430b      	orrs	r3, r1
 800a0c0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f042 0201 	orr.w	r2, r2, #1
 800a0d0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a0da:	d107      	bne.n	800a0ec <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	681a      	ldr	r2, [r3, #0]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	2b0f      	cmp	r3, #15
 800a0f2:	d947      	bls.n	800a184 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a0f4:	e03f      	b.n	800a176 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	695b      	ldr	r3, [r3, #20]
 800a0fc:	f003 0302 	and.w	r3, r3, #2
 800a100:	2b02      	cmp	r3, #2
 800a102:	d114      	bne.n	800a12e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	6812      	ldr	r2, [r2, #0]
 800a10e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a114:	1d1a      	adds	r2, r3, #4
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a120:	b29b      	uxth	r3, r3
 800a122:	3b01      	subs	r3, #1
 800a124:	b29a      	uxth	r2, r3
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a12c:	e023      	b.n	800a176 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a12e:	f7f8 fa09 	bl	8002544 <HAL_GetTick>
 800a132:	4602      	mov	r2, r0
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	1ad3      	subs	r3, r2, r3
 800a138:	683a      	ldr	r2, [r7, #0]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d803      	bhi.n	800a146 <HAL_SPI_Transmit+0x16a>
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a144:	d102      	bne.n	800a14c <HAL_SPI_Transmit+0x170>
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d114      	bne.n	800a176 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	f000 fc23 	bl	800a998 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2200      	movs	r2, #0
 800a156:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a160:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2201      	movs	r2, #1
 800a16e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800a172:	2301      	movs	r3, #1
 800a174:	e11f      	b.n	800a3b6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1b9      	bne.n	800a0f6 <HAL_SPI_Transmit+0x11a>
 800a182:	e0f2      	b.n	800a36a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	2b07      	cmp	r3, #7
 800a18a:	f240 80e7 	bls.w	800a35c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a18e:	e05d      	b.n	800a24c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	695b      	ldr	r3, [r3, #20]
 800a196:	f003 0302 	and.w	r3, r3, #2
 800a19a:	2b02      	cmp	r3, #2
 800a19c:	d132      	bne.n	800a204 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d918      	bls.n	800a1dc <HAL_SPI_Transmit+0x200>
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d014      	beq.n	800a1dc <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	6812      	ldr	r2, [r2, #0]
 800a1bc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1c2:	1d1a      	adds	r2, r3, #4
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	3b02      	subs	r3, #2
 800a1d2:	b29a      	uxth	r2, r3
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a1da:	e037      	b.n	800a24c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1e0:	881a      	ldrh	r2, [r3, #0]
 800a1e2:	69fb      	ldr	r3, [r7, #28]
 800a1e4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1ea:	1c9a      	adds	r2, r3, #2
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	3b01      	subs	r3, #1
 800a1fa:	b29a      	uxth	r2, r3
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a202:	e023      	b.n	800a24c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a204:	f7f8 f99e 	bl	8002544 <HAL_GetTick>
 800a208:	4602      	mov	r2, r0
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	1ad3      	subs	r3, r2, r3
 800a20e:	683a      	ldr	r2, [r7, #0]
 800a210:	429a      	cmp	r2, r3
 800a212:	d803      	bhi.n	800a21c <HAL_SPI_Transmit+0x240>
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a21a:	d102      	bne.n	800a222 <HAL_SPI_Transmit+0x246>
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d114      	bne.n	800a24c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a222:	68f8      	ldr	r0, [r7, #12]
 800a224:	f000 fbb8 	bl	800a998 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2200      	movs	r2, #0
 800a22c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a236:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2201      	movs	r2, #1
 800a244:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800a248:	2301      	movs	r3, #1
 800a24a:	e0b4      	b.n	800a3b6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a252:	b29b      	uxth	r3, r3
 800a254:	2b00      	cmp	r3, #0
 800a256:	d19b      	bne.n	800a190 <HAL_SPI_Transmit+0x1b4>
 800a258:	e087      	b.n	800a36a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	695b      	ldr	r3, [r3, #20]
 800a260:	f003 0302 	and.w	r3, r3, #2
 800a264:	2b02      	cmp	r3, #2
 800a266:	d155      	bne.n	800a314 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a26e:	b29b      	uxth	r3, r3
 800a270:	2b03      	cmp	r3, #3
 800a272:	d918      	bls.n	800a2a6 <HAL_SPI_Transmit+0x2ca>
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a278:	2b40      	cmp	r3, #64	; 0x40
 800a27a:	d914      	bls.n	800a2a6 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	6812      	ldr	r2, [r2, #0]
 800a286:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a28c:	1d1a      	adds	r2, r3, #4
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a298:	b29b      	uxth	r3, r3
 800a29a:	3b04      	subs	r3, #4
 800a29c:	b29a      	uxth	r2, r3
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a2a4:	e05a      	b.n	800a35c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d917      	bls.n	800a2e2 <HAL_SPI_Transmit+0x306>
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d013      	beq.n	800a2e2 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2be:	881a      	ldrh	r2, [r3, #0]
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2c8:	1c9a      	adds	r2, r3, #2
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	3b02      	subs	r3, #2
 800a2d8:	b29a      	uxth	r2, r3
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a2e0:	e03c      	b.n	800a35c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	3320      	adds	r3, #32
 800a2ec:	7812      	ldrb	r2, [r2, #0]
 800a2ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2f4:	1c5a      	adds	r2, r3, #1
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a300:	b29b      	uxth	r3, r3
 800a302:	3b01      	subs	r3, #1
 800a304:	b29a      	uxth	r2, r3
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a30c:	e026      	b.n	800a35c <HAL_SPI_Transmit+0x380>
 800a30e:	bf00      	nop
 800a310:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a314:	f7f8 f916 	bl	8002544 <HAL_GetTick>
 800a318:	4602      	mov	r2, r0
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	1ad3      	subs	r3, r2, r3
 800a31e:	683a      	ldr	r2, [r7, #0]
 800a320:	429a      	cmp	r2, r3
 800a322:	d803      	bhi.n	800a32c <HAL_SPI_Transmit+0x350>
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a32a:	d102      	bne.n	800a332 <HAL_SPI_Transmit+0x356>
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d114      	bne.n	800a35c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	f000 fb30 	bl	800a998 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2200      	movs	r2, #0
 800a33c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a346:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2201      	movs	r2, #1
 800a354:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800a358:	2301      	movs	r3, #1
 800a35a:	e02c      	b.n	800a3b6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a362:	b29b      	uxth	r3, r3
 800a364:	2b00      	cmp	r3, #0
 800a366:	f47f af78 	bne.w	800a25a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	9300      	str	r3, [sp, #0]
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	2200      	movs	r2, #0
 800a372:	2108      	movs	r1, #8
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	f000 fbaf 	bl	800aad8 <SPI_WaitOnFlagUntilTimeout>
 800a37a:	4603      	mov	r3, r0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d007      	beq.n	800a390 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a386:	f043 0220 	orr.w	r2, r3, #32
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a390:	68f8      	ldr	r0, [r7, #12]
 800a392:	f000 fb01 	bl	800a998 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2200      	movs	r2, #0
 800a39a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d001      	beq.n	800a3b4 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	e000      	b.n	800a3b6 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800a3b4:	7efb      	ldrb	r3, [r7, #27]
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3720      	adds	r7, #32
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop

0800a3c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b08e      	sub	sp, #56	; 0x38
 800a3c4:	af02      	add	r7, sp, #8
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	60b9      	str	r1, [r7, #8]
 800a3ca:	607a      	str	r2, [r7, #4]
 800a3cc:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	3320      	adds	r3, #32
 800a3da:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	3330      	adds	r3, #48	; 0x30
 800a3e2:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d101      	bne.n	800a3f2 <HAL_SPI_TransmitReceive+0x32>
 800a3ee:	2302      	movs	r3, #2
 800a3f0:	e2ce      	b.n	800a990 <HAL_SPI_TransmitReceive+0x5d0>
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a3fa:	f7f8 f8a3 	bl	8002544 <HAL_GetTick>
 800a3fe:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800a400:	887b      	ldrh	r3, [r7, #2]
 800a402:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800a404:	887b      	ldrh	r3, [r7, #2]
 800a406:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a40e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a416:	7efb      	ldrb	r3, [r7, #27]
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d014      	beq.n	800a446 <HAL_SPI_TransmitReceive+0x86>
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a422:	d106      	bne.n	800a432 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d102      	bne.n	800a432 <HAL_SPI_TransmitReceive+0x72>
 800a42c:	7efb      	ldrb	r3, [r7, #27]
 800a42e:	2b04      	cmp	r3, #4
 800a430:	d009      	beq.n	800a446 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800a432:	2302      	movs	r3, #2
 800a434:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2200      	movs	r2, #0
 800a43c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a440:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a444:	e2a4      	b.n	800a990 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d005      	beq.n	800a458 <HAL_SPI_TransmitReceive+0x98>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d002      	beq.n	800a458 <HAL_SPI_TransmitReceive+0x98>
 800a452:	887b      	ldrh	r3, [r7, #2]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d109      	bne.n	800a46c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2200      	movs	r2, #0
 800a462:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a466:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a46a:	e291      	b.n	800a990 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a472:	b2db      	uxtb	r3, r3
 800a474:	2b04      	cmp	r3, #4
 800a476:	d003      	beq.n	800a480 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2205      	movs	r2, #5
 800a47c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2200      	movs	r2, #0
 800a484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	887a      	ldrh	r2, [r7, #2]
 800a492:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	887a      	ldrh	r2, [r7, #2]
 800a49a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	68ba      	ldr	r2, [r7, #8]
 800a4a2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	887a      	ldrh	r2, [r7, #2]
 800a4a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	887a      	ldrh	r2, [r7, #2]
 800a4b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	685a      	ldr	r2, [r3, #4]
 800a4c6:	4b9f      	ldr	r3, [pc, #636]	; (800a744 <HAL_SPI_TransmitReceive+0x384>)
 800a4c8:	4013      	ands	r3, r2
 800a4ca:	8879      	ldrh	r1, [r7, #2]
 800a4cc:	68fa      	ldr	r2, [r7, #12]
 800a4ce:	6812      	ldr	r2, [r2, #0]
 800a4d0:	430b      	orrs	r3, r1
 800a4d2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f042 0201 	orr.w	r2, r2, #1
 800a4e2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a4ec:	d107      	bne.n	800a4fe <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	681a      	ldr	r2, [r3, #0]
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	68db      	ldr	r3, [r3, #12]
 800a502:	2b0f      	cmp	r3, #15
 800a504:	d970      	bls.n	800a5e8 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a506:	e068      	b.n	800a5da <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	695b      	ldr	r3, [r3, #20]
 800a50e:	f003 0302 	and.w	r3, r3, #2
 800a512:	2b02      	cmp	r3, #2
 800a514:	d11a      	bne.n	800a54c <HAL_SPI_TransmitReceive+0x18c>
 800a516:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d017      	beq.n	800a54c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	6812      	ldr	r2, [r2, #0]
 800a526:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a52c:	1d1a      	adds	r2, r3, #4
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a538:	b29b      	uxth	r3, r3
 800a53a:	3b01      	subs	r3, #1
 800a53c:	b29a      	uxth	r2, r3
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a54a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	695a      	ldr	r2, [r3, #20]
 800a552:	f248 0308 	movw	r3, #32776	; 0x8008
 800a556:	4013      	ands	r3, r2
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d01a      	beq.n	800a592 <HAL_SPI_TransmitReceive+0x1d2>
 800a55c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d017      	beq.n	800a592 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a56a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a56c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a572:	1d1a      	adds	r2, r3, #4
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a57e:	b29b      	uxth	r3, r3
 800a580:	3b01      	subs	r3, #1
 800a582:	b29a      	uxth	r2, r3
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a590:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a592:	f7f7 ffd7 	bl	8002544 <HAL_GetTick>
 800a596:	4602      	mov	r2, r0
 800a598:	69fb      	ldr	r3, [r7, #28]
 800a59a:	1ad3      	subs	r3, r2, r3
 800a59c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d803      	bhi.n	800a5aa <HAL_SPI_TransmitReceive+0x1ea>
 800a5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5a8:	d102      	bne.n	800a5b0 <HAL_SPI_TransmitReceive+0x1f0>
 800a5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d114      	bne.n	800a5da <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	f000 f9f1 	bl	800a998 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	e1da      	b.n	800a990 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a5da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d193      	bne.n	800a508 <HAL_SPI_TransmitReceive+0x148>
 800a5e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d190      	bne.n	800a508 <HAL_SPI_TransmitReceive+0x148>
 800a5e6:	e1ac      	b.n	800a942 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	68db      	ldr	r3, [r3, #12]
 800a5ec:	2b07      	cmp	r3, #7
 800a5ee:	f240 81a0 	bls.w	800a932 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a5f2:	e0a9      	b.n	800a748 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	695b      	ldr	r3, [r3, #20]
 800a5fa:	f003 0302 	and.w	r3, r3, #2
 800a5fe:	2b02      	cmp	r3, #2
 800a600:	d139      	bne.n	800a676 <HAL_SPI_TransmitReceive+0x2b6>
 800a602:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a604:	2b00      	cmp	r3, #0
 800a606:	d036      	beq.n	800a676 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a608:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d91c      	bls.n	800a648 <HAL_SPI_TransmitReceive+0x288>
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a612:	2b00      	cmp	r3, #0
 800a614:	d018      	beq.n	800a648 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	6812      	ldr	r2, [r2, #0]
 800a620:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a626:	1d1a      	adds	r2, r3, #4
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a632:	b29b      	uxth	r3, r3
 800a634:	3b02      	subs	r3, #2
 800a636:	b29a      	uxth	r2, r3
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a644:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a646:	e016      	b.n	800a676 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a64c:	881a      	ldrh	r2, [r3, #0]
 800a64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a650:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a656:	1c9a      	adds	r2, r3, #2
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a662:	b29b      	uxth	r3, r3
 800a664:	3b01      	subs	r3, #1
 800a666:	b29a      	uxth	r2, r3
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a674:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	695b      	ldr	r3, [r3, #20]
 800a67c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a680:	2b00      	cmp	r3, #0
 800a682:	d03a      	beq.n	800a6fa <HAL_SPI_TransmitReceive+0x33a>
 800a684:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a686:	2b00      	cmp	r3, #0
 800a688:	d037      	beq.n	800a6fa <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	695b      	ldr	r3, [r3, #20]
 800a690:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a694:	2b00      	cmp	r3, #0
 800a696:	d018      	beq.n	800a6ca <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a6a2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6a8:	1d1a      	adds	r2, r3, #4
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	3b02      	subs	r3, #2
 800a6b8:	b29a      	uxth	r2, r3
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a6c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a6c8:	e017      	b.n	800a6fa <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6ce:	6a3a      	ldr	r2, [r7, #32]
 800a6d0:	8812      	ldrh	r2, [r2, #0]
 800a6d2:	b292      	uxth	r2, r2
 800a6d4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6da:	1c9a      	adds	r2, r3, #2
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	b29a      	uxth	r2, r3
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a6f8:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a6fa:	f7f7 ff23 	bl	8002544 <HAL_GetTick>
 800a6fe:	4602      	mov	r2, r0
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	1ad3      	subs	r3, r2, r3
 800a704:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a706:	429a      	cmp	r2, r3
 800a708:	d803      	bhi.n	800a712 <HAL_SPI_TransmitReceive+0x352>
 800a70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a70c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a710:	d102      	bne.n	800a718 <HAL_SPI_TransmitReceive+0x358>
 800a712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a714:	2b00      	cmp	r3, #0
 800a716:	d117      	bne.n	800a748 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f000 f93d 	bl	800a998 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2200      	movs	r2, #0
 800a722:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a72c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2201      	movs	r2, #1
 800a73a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	e126      	b.n	800a990 <HAL_SPI_TransmitReceive+0x5d0>
 800a742:	bf00      	nop
 800a744:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a748:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	f47f af52 	bne.w	800a5f4 <HAL_SPI_TransmitReceive+0x234>
 800a750:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a752:	2b00      	cmp	r3, #0
 800a754:	f47f af4e 	bne.w	800a5f4 <HAL_SPI_TransmitReceive+0x234>
 800a758:	e0f3      	b.n	800a942 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	695b      	ldr	r3, [r3, #20]
 800a760:	f003 0302 	and.w	r3, r3, #2
 800a764:	2b02      	cmp	r3, #2
 800a766:	d15a      	bne.n	800a81e <HAL_SPI_TransmitReceive+0x45e>
 800a768:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d057      	beq.n	800a81e <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a76e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a770:	2b03      	cmp	r3, #3
 800a772:	d91c      	bls.n	800a7ae <HAL_SPI_TransmitReceive+0x3ee>
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a778:	2b40      	cmp	r3, #64	; 0x40
 800a77a:	d918      	bls.n	800a7ae <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	6812      	ldr	r2, [r2, #0]
 800a786:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a78c:	1d1a      	adds	r2, r3, #4
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a798:	b29b      	uxth	r3, r3
 800a79a:	3b04      	subs	r3, #4
 800a79c:	b29a      	uxth	r2, r3
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a7aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a7ac:	e037      	b.n	800a81e <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a7ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d91b      	bls.n	800a7ec <HAL_SPI_TransmitReceive+0x42c>
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d017      	beq.n	800a7ec <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7c0:	881a      	ldrh	r2, [r3, #0]
 800a7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7ca:	1c9a      	adds	r2, r3, #2
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	3b02      	subs	r3, #2
 800a7da:	b29a      	uxth	r2, r3
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a7e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a7ea:	e018      	b.n	800a81e <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	3320      	adds	r3, #32
 800a7f6:	7812      	ldrb	r2, [r2, #0]
 800a7f8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7fe:	1c5a      	adds	r2, r3, #1
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	3b01      	subs	r3, #1
 800a80e:	b29a      	uxth	r2, r3
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a81c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	695b      	ldr	r3, [r3, #20]
 800a824:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d05e      	beq.n	800a8ea <HAL_SPI_TransmitReceive+0x52a>
 800a82c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d05b      	beq.n	800a8ea <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	695b      	ldr	r3, [r3, #20]
 800a838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d018      	beq.n	800a872 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a848:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a84a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a850:	1d1a      	adds	r2, r3, #4
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	3b04      	subs	r3, #4
 800a860:	b29a      	uxth	r2, r3
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a86e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a870:	e03b      	b.n	800a8ea <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	695b      	ldr	r3, [r3, #20]
 800a878:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800a87c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a880:	d918      	bls.n	800a8b4 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a886:	6a3a      	ldr	r2, [r7, #32]
 800a888:	8812      	ldrh	r2, [r2, #0]
 800a88a:	b292      	uxth	r2, r2
 800a88c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a892:	1c9a      	adds	r2, r3, #2
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	3b02      	subs	r3, #2
 800a8a2:	b29a      	uxth	r2, r3
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a8b0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a8b2:	e01a      	b.n	800a8ea <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8c0:	7812      	ldrb	r2, [r2, #0]
 800a8c2:	b2d2      	uxtb	r2, r2
 800a8c4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8ca:	1c5a      	adds	r2, r3, #1
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	b29a      	uxth	r2, r3
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a8e8:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8ea:	f7f7 fe2b 	bl	8002544 <HAL_GetTick>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	69fb      	ldr	r3, [r7, #28]
 800a8f2:	1ad3      	subs	r3, r2, r3
 800a8f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d803      	bhi.n	800a902 <HAL_SPI_TransmitReceive+0x542>
 800a8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a900:	d102      	bne.n	800a908 <HAL_SPI_TransmitReceive+0x548>
 800a902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a904:	2b00      	cmp	r3, #0
 800a906:	d114      	bne.n	800a932 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a908:	68f8      	ldr	r0, [r7, #12]
 800a90a:	f000 f845 	bl	800a998 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2200      	movs	r2, #0
 800a912:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a91c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2201      	movs	r2, #1
 800a92a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800a92e:	2301      	movs	r3, #1
 800a930:	e02e      	b.n	800a990 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a932:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a934:	2b00      	cmp	r3, #0
 800a936:	f47f af10 	bne.w	800a75a <HAL_SPI_TransmitReceive+0x39a>
 800a93a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	f47f af0c 	bne.w	800a75a <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800a942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a944:	9300      	str	r3, [sp, #0]
 800a946:	69fb      	ldr	r3, [r7, #28]
 800a948:	2200      	movs	r2, #0
 800a94a:	2108      	movs	r1, #8
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	f000 f8c3 	bl	800aad8 <SPI_WaitOnFlagUntilTimeout>
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d007      	beq.n	800a968 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a95e:	f043 0220 	orr.w	r2, r3, #32
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a968:	68f8      	ldr	r0, [r7, #12]
 800a96a:	f000 f815 	bl	800a998 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2200      	movs	r2, #0
 800a972:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2201      	movs	r2, #1
 800a97a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a984:	2b00      	cmp	r3, #0
 800a986:	d001      	beq.n	800a98c <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800a988:	2301      	movs	r3, #1
 800a98a:	e001      	b.n	800a990 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800a98c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a990:	4618      	mov	r0, r3
 800a992:	3730      	adds	r7, #48	; 0x30
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a998:	b480      	push	{r7}
 800a99a:	b085      	sub	sp, #20
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	695b      	ldr	r3, [r3, #20]
 800a9a6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	699a      	ldr	r2, [r3, #24]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f042 0208 	orr.w	r2, r2, #8
 800a9b6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	699a      	ldr	r2, [r3, #24]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f042 0210 	orr.w	r2, r2, #16
 800a9c6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f022 0201 	bic.w	r2, r2, #1
 800a9d6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	6919      	ldr	r1, [r3, #16]
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	4b3c      	ldr	r3, [pc, #240]	; (800aad4 <SPI_CloseTransfer+0x13c>)
 800a9e4:	400b      	ands	r3, r1
 800a9e6:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	689a      	ldr	r2, [r3, #8]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a9f6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	2b04      	cmp	r3, #4
 800aa02:	d014      	beq.n	800aa2e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f003 0320 	and.w	r3, r3, #32
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00f      	beq.n	800aa2e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	699a      	ldr	r2, [r3, #24]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f042 0220 	orr.w	r2, r2, #32
 800aa2c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	2b03      	cmp	r3, #3
 800aa38:	d014      	beq.n	800aa64 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d00f      	beq.n	800aa64 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa4a:	f043 0204 	orr.w	r2, r3, #4
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	699a      	ldr	r2, [r3, #24]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa62:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00f      	beq.n	800aa8e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa74:	f043 0201 	orr.w	r2, r3, #1
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	699a      	ldr	r2, [r3, #24]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa8c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d00f      	beq.n	800aab8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa9e:	f043 0208 	orr.w	r2, r3, #8
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	699a      	ldr	r2, [r3, #24]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aab6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2200      	movs	r2, #0
 800aabc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2200      	movs	r2, #0
 800aac4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800aac8:	bf00      	nop
 800aaca:	3714      	adds	r7, #20
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr
 800aad4:	fffffc90 	.word	0xfffffc90

0800aad8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	603b      	str	r3, [r7, #0]
 800aae4:	4613      	mov	r3, r2
 800aae6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800aae8:	e010      	b.n	800ab0c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aaea:	f7f7 fd2b 	bl	8002544 <HAL_GetTick>
 800aaee:	4602      	mov	r2, r0
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	1ad3      	subs	r3, r2, r3
 800aaf4:	69ba      	ldr	r2, [r7, #24]
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d803      	bhi.n	800ab02 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800aafa:	69bb      	ldr	r3, [r7, #24]
 800aafc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab00:	d102      	bne.n	800ab08 <SPI_WaitOnFlagUntilTimeout+0x30>
 800ab02:	69bb      	ldr	r3, [r7, #24]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d101      	bne.n	800ab0c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800ab08:	2303      	movs	r3, #3
 800ab0a:	e00f      	b.n	800ab2c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	695a      	ldr	r2, [r3, #20]
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	4013      	ands	r3, r2
 800ab16:	68ba      	ldr	r2, [r7, #8]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	bf0c      	ite	eq
 800ab1c:	2301      	moveq	r3, #1
 800ab1e:	2300      	movne	r3, #0
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	461a      	mov	r2, r3
 800ab24:	79fb      	ldrb	r3, [r7, #7]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d0df      	beq.n	800aaea <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3710      	adds	r7, #16
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b085      	sub	sp, #20
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab40:	095b      	lsrs	r3, r3, #5
 800ab42:	3301      	adds	r3, #1
 800ab44:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	68db      	ldr	r3, [r3, #12]
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	3307      	adds	r3, #7
 800ab52:	08db      	lsrs	r3, r3, #3
 800ab54:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	68fa      	ldr	r2, [r7, #12]
 800ab5a:	fb02 f303 	mul.w	r3, r2, r3
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3714      	adds	r7, #20
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr

0800ab6a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab6a:	b580      	push	{r7, lr}
 800ab6c:	b082      	sub	sp, #8
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d101      	bne.n	800ab7c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	e049      	b.n	800ac10 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d106      	bne.n	800ab96 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f7f7 f959 	bl	8001e48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2202      	movs	r2, #2
 800ab9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681a      	ldr	r2, [r3, #0]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	3304      	adds	r3, #4
 800aba6:	4619      	mov	r1, r3
 800aba8:	4610      	mov	r0, r2
 800abaa:	f000 fa4d 	bl	800b048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2201      	movs	r2, #1
 800abb2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2201      	movs	r2, #1
 800abba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2201      	movs	r2, #1
 800abc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2201      	movs	r2, #1
 800abca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2201      	movs	r2, #1
 800abd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2201      	movs	r2, #1
 800abda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2201      	movs	r2, #1
 800abe2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2201      	movs	r2, #1
 800abea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2201      	movs	r2, #1
 800abf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2201      	movs	r2, #1
 800abfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2201      	movs	r2, #1
 800ac02:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ac0e:	2300      	movs	r3, #0
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3708      	adds	r7, #8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d109      	bne.n	800ac3c <HAL_TIM_PWM_Start+0x24>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	2b01      	cmp	r3, #1
 800ac32:	bf14      	ite	ne
 800ac34:	2301      	movne	r3, #1
 800ac36:	2300      	moveq	r3, #0
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	e03c      	b.n	800acb6 <HAL_TIM_PWM_Start+0x9e>
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	2b04      	cmp	r3, #4
 800ac40:	d109      	bne.n	800ac56 <HAL_TIM_PWM_Start+0x3e>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	bf14      	ite	ne
 800ac4e:	2301      	movne	r3, #1
 800ac50:	2300      	moveq	r3, #0
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	e02f      	b.n	800acb6 <HAL_TIM_PWM_Start+0x9e>
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	2b08      	cmp	r3, #8
 800ac5a:	d109      	bne.n	800ac70 <HAL_TIM_PWM_Start+0x58>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	bf14      	ite	ne
 800ac68:	2301      	movne	r3, #1
 800ac6a:	2300      	moveq	r3, #0
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	e022      	b.n	800acb6 <HAL_TIM_PWM_Start+0x9e>
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	2b0c      	cmp	r3, #12
 800ac74:	d109      	bne.n	800ac8a <HAL_TIM_PWM_Start+0x72>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	bf14      	ite	ne
 800ac82:	2301      	movne	r3, #1
 800ac84:	2300      	moveq	r3, #0
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	e015      	b.n	800acb6 <HAL_TIM_PWM_Start+0x9e>
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	2b10      	cmp	r3, #16
 800ac8e:	d109      	bne.n	800aca4 <HAL_TIM_PWM_Start+0x8c>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	bf14      	ite	ne
 800ac9c:	2301      	movne	r3, #1
 800ac9e:	2300      	moveq	r3, #0
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	e008      	b.n	800acb6 <HAL_TIM_PWM_Start+0x9e>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800acaa:	b2db      	uxtb	r3, r3
 800acac:	2b01      	cmp	r3, #1
 800acae:	bf14      	ite	ne
 800acb0:	2301      	movne	r3, #1
 800acb2:	2300      	moveq	r3, #0
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d001      	beq.n	800acbe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800acba:	2301      	movs	r3, #1
 800acbc:	e09c      	b.n	800adf8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d104      	bne.n	800acce <HAL_TIM_PWM_Start+0xb6>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2202      	movs	r2, #2
 800acc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800accc:	e023      	b.n	800ad16 <HAL_TIM_PWM_Start+0xfe>
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	2b04      	cmp	r3, #4
 800acd2:	d104      	bne.n	800acde <HAL_TIM_PWM_Start+0xc6>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2202      	movs	r2, #2
 800acd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800acdc:	e01b      	b.n	800ad16 <HAL_TIM_PWM_Start+0xfe>
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	2b08      	cmp	r3, #8
 800ace2:	d104      	bne.n	800acee <HAL_TIM_PWM_Start+0xd6>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2202      	movs	r2, #2
 800ace8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800acec:	e013      	b.n	800ad16 <HAL_TIM_PWM_Start+0xfe>
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	2b0c      	cmp	r3, #12
 800acf2:	d104      	bne.n	800acfe <HAL_TIM_PWM_Start+0xe6>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2202      	movs	r2, #2
 800acf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800acfc:	e00b      	b.n	800ad16 <HAL_TIM_PWM_Start+0xfe>
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	2b10      	cmp	r3, #16
 800ad02:	d104      	bne.n	800ad0e <HAL_TIM_PWM_Start+0xf6>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2202      	movs	r2, #2
 800ad08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad0c:	e003      	b.n	800ad16 <HAL_TIM_PWM_Start+0xfe>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2202      	movs	r2, #2
 800ad12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	6839      	ldr	r1, [r7, #0]
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f000 fcfa 	bl	800b718 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a35      	ldr	r2, [pc, #212]	; (800ae00 <HAL_TIM_PWM_Start+0x1e8>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d013      	beq.n	800ad56 <HAL_TIM_PWM_Start+0x13e>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	4a34      	ldr	r2, [pc, #208]	; (800ae04 <HAL_TIM_PWM_Start+0x1ec>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d00e      	beq.n	800ad56 <HAL_TIM_PWM_Start+0x13e>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a32      	ldr	r2, [pc, #200]	; (800ae08 <HAL_TIM_PWM_Start+0x1f0>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d009      	beq.n	800ad56 <HAL_TIM_PWM_Start+0x13e>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	4a31      	ldr	r2, [pc, #196]	; (800ae0c <HAL_TIM_PWM_Start+0x1f4>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d004      	beq.n	800ad56 <HAL_TIM_PWM_Start+0x13e>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a2f      	ldr	r2, [pc, #188]	; (800ae10 <HAL_TIM_PWM_Start+0x1f8>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d101      	bne.n	800ad5a <HAL_TIM_PWM_Start+0x142>
 800ad56:	2301      	movs	r3, #1
 800ad58:	e000      	b.n	800ad5c <HAL_TIM_PWM_Start+0x144>
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d007      	beq.n	800ad70 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad6e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a22      	ldr	r2, [pc, #136]	; (800ae00 <HAL_TIM_PWM_Start+0x1e8>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d01d      	beq.n	800adb6 <HAL_TIM_PWM_Start+0x19e>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad82:	d018      	beq.n	800adb6 <HAL_TIM_PWM_Start+0x19e>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a22      	ldr	r2, [pc, #136]	; (800ae14 <HAL_TIM_PWM_Start+0x1fc>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d013      	beq.n	800adb6 <HAL_TIM_PWM_Start+0x19e>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a21      	ldr	r2, [pc, #132]	; (800ae18 <HAL_TIM_PWM_Start+0x200>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d00e      	beq.n	800adb6 <HAL_TIM_PWM_Start+0x19e>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4a1f      	ldr	r2, [pc, #124]	; (800ae1c <HAL_TIM_PWM_Start+0x204>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d009      	beq.n	800adb6 <HAL_TIM_PWM_Start+0x19e>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4a17      	ldr	r2, [pc, #92]	; (800ae04 <HAL_TIM_PWM_Start+0x1ec>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d004      	beq.n	800adb6 <HAL_TIM_PWM_Start+0x19e>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a1b      	ldr	r2, [pc, #108]	; (800ae20 <HAL_TIM_PWM_Start+0x208>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d115      	bne.n	800ade2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	689a      	ldr	r2, [r3, #8]
 800adbc:	4b19      	ldr	r3, [pc, #100]	; (800ae24 <HAL_TIM_PWM_Start+0x20c>)
 800adbe:	4013      	ands	r3, r2
 800adc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	2b06      	cmp	r3, #6
 800adc6:	d015      	beq.n	800adf4 <HAL_TIM_PWM_Start+0x1dc>
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adce:	d011      	beq.n	800adf4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	681a      	ldr	r2, [r3, #0]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f042 0201 	orr.w	r2, r2, #1
 800adde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ade0:	e008      	b.n	800adf4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	681a      	ldr	r2, [r3, #0]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f042 0201 	orr.w	r2, r2, #1
 800adf0:	601a      	str	r2, [r3, #0]
 800adf2:	e000      	b.n	800adf6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adf4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800adf6:	2300      	movs	r3, #0
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3710      	adds	r7, #16
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}
 800ae00:	40010000 	.word	0x40010000
 800ae04:	40010400 	.word	0x40010400
 800ae08:	40014000 	.word	0x40014000
 800ae0c:	40014400 	.word	0x40014400
 800ae10:	40014800 	.word	0x40014800
 800ae14:	40000400 	.word	0x40000400
 800ae18:	40000800 	.word	0x40000800
 800ae1c:	40000c00 	.word	0x40000c00
 800ae20:	40001800 	.word	0x40001800
 800ae24:	00010007 	.word	0x00010007

0800ae28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	60b9      	str	r1, [r7, #8]
 800ae32:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d101      	bne.n	800ae42 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ae3e:	2302      	movs	r3, #2
 800ae40:	e0fd      	b.n	800b03e <HAL_TIM_PWM_ConfigChannel+0x216>
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2201      	movs	r2, #1
 800ae46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2b14      	cmp	r3, #20
 800ae4e:	f200 80f0 	bhi.w	800b032 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800ae52:	a201      	add	r2, pc, #4	; (adr r2, 800ae58 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800ae54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae58:	0800aead 	.word	0x0800aead
 800ae5c:	0800b033 	.word	0x0800b033
 800ae60:	0800b033 	.word	0x0800b033
 800ae64:	0800b033 	.word	0x0800b033
 800ae68:	0800aeed 	.word	0x0800aeed
 800ae6c:	0800b033 	.word	0x0800b033
 800ae70:	0800b033 	.word	0x0800b033
 800ae74:	0800b033 	.word	0x0800b033
 800ae78:	0800af2f 	.word	0x0800af2f
 800ae7c:	0800b033 	.word	0x0800b033
 800ae80:	0800b033 	.word	0x0800b033
 800ae84:	0800b033 	.word	0x0800b033
 800ae88:	0800af6f 	.word	0x0800af6f
 800ae8c:	0800b033 	.word	0x0800b033
 800ae90:	0800b033 	.word	0x0800b033
 800ae94:	0800b033 	.word	0x0800b033
 800ae98:	0800afb1 	.word	0x0800afb1
 800ae9c:	0800b033 	.word	0x0800b033
 800aea0:	0800b033 	.word	0x0800b033
 800aea4:	0800b033 	.word	0x0800b033
 800aea8:	0800aff1 	.word	0x0800aff1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	68b9      	ldr	r1, [r7, #8]
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f000 f962 	bl	800b17c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	699a      	ldr	r2, [r3, #24]
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f042 0208 	orr.w	r2, r2, #8
 800aec6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	699a      	ldr	r2, [r3, #24]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f022 0204 	bic.w	r2, r2, #4
 800aed6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	6999      	ldr	r1, [r3, #24]
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	691a      	ldr	r2, [r3, #16]
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	430a      	orrs	r2, r1
 800aee8:	619a      	str	r2, [r3, #24]
      break;
 800aeea:	e0a3      	b.n	800b034 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	68b9      	ldr	r1, [r7, #8]
 800aef2:	4618      	mov	r0, r3
 800aef4:	f000 f9d2 	bl	800b29c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	699a      	ldr	r2, [r3, #24]
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	699a      	ldr	r2, [r3, #24]
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	6999      	ldr	r1, [r3, #24]
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	691b      	ldr	r3, [r3, #16]
 800af22:	021a      	lsls	r2, r3, #8
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	430a      	orrs	r2, r1
 800af2a:	619a      	str	r2, [r3, #24]
      break;
 800af2c:	e082      	b.n	800b034 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	68b9      	ldr	r1, [r7, #8]
 800af34:	4618      	mov	r0, r3
 800af36:	f000 fa3b 	bl	800b3b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	69da      	ldr	r2, [r3, #28]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f042 0208 	orr.w	r2, r2, #8
 800af48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	69da      	ldr	r2, [r3, #28]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f022 0204 	bic.w	r2, r2, #4
 800af58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	69d9      	ldr	r1, [r3, #28]
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	691a      	ldr	r2, [r3, #16]
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	430a      	orrs	r2, r1
 800af6a:	61da      	str	r2, [r3, #28]
      break;
 800af6c:	e062      	b.n	800b034 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	68b9      	ldr	r1, [r7, #8]
 800af74:	4618      	mov	r0, r3
 800af76:	f000 faa1 	bl	800b4bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	69da      	ldr	r2, [r3, #28]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	69da      	ldr	r2, [r3, #28]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	69d9      	ldr	r1, [r3, #28]
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	691b      	ldr	r3, [r3, #16]
 800afa4:	021a      	lsls	r2, r3, #8
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	430a      	orrs	r2, r1
 800afac:	61da      	str	r2, [r3, #28]
      break;
 800afae:	e041      	b.n	800b034 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	68b9      	ldr	r1, [r7, #8]
 800afb6:	4618      	mov	r0, r3
 800afb8:	f000 fae8 	bl	800b58c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f042 0208 	orr.w	r2, r2, #8
 800afca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f022 0204 	bic.w	r2, r2, #4
 800afda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	691a      	ldr	r2, [r3, #16]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	430a      	orrs	r2, r1
 800afec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800afee:	e021      	b.n	800b034 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	68b9      	ldr	r1, [r7, #8]
 800aff6:	4618      	mov	r0, r3
 800aff8:	f000 fb2a 	bl	800b650 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b00a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b01a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	691b      	ldr	r3, [r3, #16]
 800b026:	021a      	lsls	r2, r3, #8
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	430a      	orrs	r2, r1
 800b02e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b030:	e000      	b.n	800b034 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800b032:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2200      	movs	r2, #0
 800b038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b03c:	2300      	movs	r3, #0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop

0800b048 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b048:	b480      	push	{r7}
 800b04a:	b085      	sub	sp, #20
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	4a40      	ldr	r2, [pc, #256]	; (800b15c <TIM_Base_SetConfig+0x114>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d013      	beq.n	800b088 <TIM_Base_SetConfig+0x40>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b066:	d00f      	beq.n	800b088 <TIM_Base_SetConfig+0x40>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	4a3d      	ldr	r2, [pc, #244]	; (800b160 <TIM_Base_SetConfig+0x118>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d00b      	beq.n	800b088 <TIM_Base_SetConfig+0x40>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	4a3c      	ldr	r2, [pc, #240]	; (800b164 <TIM_Base_SetConfig+0x11c>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d007      	beq.n	800b088 <TIM_Base_SetConfig+0x40>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	4a3b      	ldr	r2, [pc, #236]	; (800b168 <TIM_Base_SetConfig+0x120>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d003      	beq.n	800b088 <TIM_Base_SetConfig+0x40>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	4a3a      	ldr	r2, [pc, #232]	; (800b16c <TIM_Base_SetConfig+0x124>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d108      	bne.n	800b09a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b08e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	68fa      	ldr	r2, [r7, #12]
 800b096:	4313      	orrs	r3, r2
 800b098:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	4a2f      	ldr	r2, [pc, #188]	; (800b15c <TIM_Base_SetConfig+0x114>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d01f      	beq.n	800b0e2 <TIM_Base_SetConfig+0x9a>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0a8:	d01b      	beq.n	800b0e2 <TIM_Base_SetConfig+0x9a>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	4a2c      	ldr	r2, [pc, #176]	; (800b160 <TIM_Base_SetConfig+0x118>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d017      	beq.n	800b0e2 <TIM_Base_SetConfig+0x9a>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	4a2b      	ldr	r2, [pc, #172]	; (800b164 <TIM_Base_SetConfig+0x11c>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d013      	beq.n	800b0e2 <TIM_Base_SetConfig+0x9a>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	4a2a      	ldr	r2, [pc, #168]	; (800b168 <TIM_Base_SetConfig+0x120>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d00f      	beq.n	800b0e2 <TIM_Base_SetConfig+0x9a>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	4a29      	ldr	r2, [pc, #164]	; (800b16c <TIM_Base_SetConfig+0x124>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d00b      	beq.n	800b0e2 <TIM_Base_SetConfig+0x9a>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	4a28      	ldr	r2, [pc, #160]	; (800b170 <TIM_Base_SetConfig+0x128>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d007      	beq.n	800b0e2 <TIM_Base_SetConfig+0x9a>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	4a27      	ldr	r2, [pc, #156]	; (800b174 <TIM_Base_SetConfig+0x12c>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d003      	beq.n	800b0e2 <TIM_Base_SetConfig+0x9a>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	4a26      	ldr	r2, [pc, #152]	; (800b178 <TIM_Base_SetConfig+0x130>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d108      	bne.n	800b0f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	68db      	ldr	r3, [r3, #12]
 800b0ee:	68fa      	ldr	r2, [r7, #12]
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	695b      	ldr	r3, [r3, #20]
 800b0fe:	4313      	orrs	r3, r2
 800b100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	689a      	ldr	r2, [r3, #8]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	681a      	ldr	r2, [r3, #0]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	4a10      	ldr	r2, [pc, #64]	; (800b15c <TIM_Base_SetConfig+0x114>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d00f      	beq.n	800b140 <TIM_Base_SetConfig+0xf8>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	4a12      	ldr	r2, [pc, #72]	; (800b16c <TIM_Base_SetConfig+0x124>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d00b      	beq.n	800b140 <TIM_Base_SetConfig+0xf8>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	4a11      	ldr	r2, [pc, #68]	; (800b170 <TIM_Base_SetConfig+0x128>)
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d007      	beq.n	800b140 <TIM_Base_SetConfig+0xf8>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	4a10      	ldr	r2, [pc, #64]	; (800b174 <TIM_Base_SetConfig+0x12c>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d003      	beq.n	800b140 <TIM_Base_SetConfig+0xf8>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	4a0f      	ldr	r2, [pc, #60]	; (800b178 <TIM_Base_SetConfig+0x130>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d103      	bne.n	800b148 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	691a      	ldr	r2, [r3, #16]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2201      	movs	r2, #1
 800b14c:	615a      	str	r2, [r3, #20]
}
 800b14e:	bf00      	nop
 800b150:	3714      	adds	r7, #20
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr
 800b15a:	bf00      	nop
 800b15c:	40010000 	.word	0x40010000
 800b160:	40000400 	.word	0x40000400
 800b164:	40000800 	.word	0x40000800
 800b168:	40000c00 	.word	0x40000c00
 800b16c:	40010400 	.word	0x40010400
 800b170:	40014000 	.word	0x40014000
 800b174:	40014400 	.word	0x40014400
 800b178:	40014800 	.word	0x40014800

0800b17c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b087      	sub	sp, #28
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6a1b      	ldr	r3, [r3, #32]
 800b18a:	f023 0201 	bic.w	r2, r3, #1
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6a1b      	ldr	r3, [r3, #32]
 800b196:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	699b      	ldr	r3, [r3, #24]
 800b1a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b1a4:	68fa      	ldr	r2, [r7, #12]
 800b1a6:	4b37      	ldr	r3, [pc, #220]	; (800b284 <TIM_OC1_SetConfig+0x108>)
 800b1a8:	4013      	ands	r3, r2
 800b1aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f023 0303 	bic.w	r3, r3, #3
 800b1b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	68fa      	ldr	r2, [r7, #12]
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	f023 0302 	bic.w	r3, r3, #2
 800b1c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	689b      	ldr	r3, [r3, #8]
 800b1ca:	697a      	ldr	r2, [r7, #20]
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	4a2d      	ldr	r2, [pc, #180]	; (800b288 <TIM_OC1_SetConfig+0x10c>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d00f      	beq.n	800b1f8 <TIM_OC1_SetConfig+0x7c>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	4a2c      	ldr	r2, [pc, #176]	; (800b28c <TIM_OC1_SetConfig+0x110>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d00b      	beq.n	800b1f8 <TIM_OC1_SetConfig+0x7c>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	4a2b      	ldr	r2, [pc, #172]	; (800b290 <TIM_OC1_SetConfig+0x114>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d007      	beq.n	800b1f8 <TIM_OC1_SetConfig+0x7c>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	4a2a      	ldr	r2, [pc, #168]	; (800b294 <TIM_OC1_SetConfig+0x118>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d003      	beq.n	800b1f8 <TIM_OC1_SetConfig+0x7c>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	4a29      	ldr	r2, [pc, #164]	; (800b298 <TIM_OC1_SetConfig+0x11c>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d10c      	bne.n	800b212 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	f023 0308 	bic.w	r3, r3, #8
 800b1fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	697a      	ldr	r2, [r7, #20]
 800b206:	4313      	orrs	r3, r2
 800b208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	f023 0304 	bic.w	r3, r3, #4
 800b210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4a1c      	ldr	r2, [pc, #112]	; (800b288 <TIM_OC1_SetConfig+0x10c>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d00f      	beq.n	800b23a <TIM_OC1_SetConfig+0xbe>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4a1b      	ldr	r2, [pc, #108]	; (800b28c <TIM_OC1_SetConfig+0x110>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d00b      	beq.n	800b23a <TIM_OC1_SetConfig+0xbe>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	4a1a      	ldr	r2, [pc, #104]	; (800b290 <TIM_OC1_SetConfig+0x114>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d007      	beq.n	800b23a <TIM_OC1_SetConfig+0xbe>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	4a19      	ldr	r2, [pc, #100]	; (800b294 <TIM_OC1_SetConfig+0x118>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d003      	beq.n	800b23a <TIM_OC1_SetConfig+0xbe>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	4a18      	ldr	r2, [pc, #96]	; (800b298 <TIM_OC1_SetConfig+0x11c>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d111      	bne.n	800b25e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	695b      	ldr	r3, [r3, #20]
 800b24e:	693a      	ldr	r2, [r7, #16]
 800b250:	4313      	orrs	r3, r2
 800b252:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	699b      	ldr	r3, [r3, #24]
 800b258:	693a      	ldr	r2, [r7, #16]
 800b25a:	4313      	orrs	r3, r2
 800b25c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	693a      	ldr	r2, [r7, #16]
 800b262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	68fa      	ldr	r2, [r7, #12]
 800b268:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	685a      	ldr	r2, [r3, #4]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	697a      	ldr	r2, [r7, #20]
 800b276:	621a      	str	r2, [r3, #32]
}
 800b278:	bf00      	nop
 800b27a:	371c      	adds	r7, #28
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr
 800b284:	fffeff8f 	.word	0xfffeff8f
 800b288:	40010000 	.word	0x40010000
 800b28c:	40010400 	.word	0x40010400
 800b290:	40014000 	.word	0x40014000
 800b294:	40014400 	.word	0x40014400
 800b298:	40014800 	.word	0x40014800

0800b29c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b087      	sub	sp, #28
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6a1b      	ldr	r3, [r3, #32]
 800b2aa:	f023 0210 	bic.w	r2, r3, #16
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6a1b      	ldr	r3, [r3, #32]
 800b2b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	699b      	ldr	r3, [r3, #24]
 800b2c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b2c4:	68fa      	ldr	r2, [r7, #12]
 800b2c6:	4b34      	ldr	r3, [pc, #208]	; (800b398 <TIM_OC2_SetConfig+0xfc>)
 800b2c8:	4013      	ands	r3, r2
 800b2ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	021b      	lsls	r3, r3, #8
 800b2da:	68fa      	ldr	r2, [r7, #12]
 800b2dc:	4313      	orrs	r3, r2
 800b2de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	f023 0320 	bic.w	r3, r3, #32
 800b2e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	689b      	ldr	r3, [r3, #8]
 800b2ec:	011b      	lsls	r3, r3, #4
 800b2ee:	697a      	ldr	r2, [r7, #20]
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	4a29      	ldr	r2, [pc, #164]	; (800b39c <TIM_OC2_SetConfig+0x100>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d003      	beq.n	800b304 <TIM_OC2_SetConfig+0x68>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	4a28      	ldr	r2, [pc, #160]	; (800b3a0 <TIM_OC2_SetConfig+0x104>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d10d      	bne.n	800b320 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b30a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	68db      	ldr	r3, [r3, #12]
 800b310:	011b      	lsls	r3, r3, #4
 800b312:	697a      	ldr	r2, [r7, #20]
 800b314:	4313      	orrs	r3, r2
 800b316:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b31e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	4a1e      	ldr	r2, [pc, #120]	; (800b39c <TIM_OC2_SetConfig+0x100>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d00f      	beq.n	800b348 <TIM_OC2_SetConfig+0xac>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	4a1d      	ldr	r2, [pc, #116]	; (800b3a0 <TIM_OC2_SetConfig+0x104>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d00b      	beq.n	800b348 <TIM_OC2_SetConfig+0xac>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	4a1c      	ldr	r2, [pc, #112]	; (800b3a4 <TIM_OC2_SetConfig+0x108>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d007      	beq.n	800b348 <TIM_OC2_SetConfig+0xac>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	4a1b      	ldr	r2, [pc, #108]	; (800b3a8 <TIM_OC2_SetConfig+0x10c>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d003      	beq.n	800b348 <TIM_OC2_SetConfig+0xac>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	4a1a      	ldr	r2, [pc, #104]	; (800b3ac <TIM_OC2_SetConfig+0x110>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d113      	bne.n	800b370 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b34e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b356:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	695b      	ldr	r3, [r3, #20]
 800b35c:	009b      	lsls	r3, r3, #2
 800b35e:	693a      	ldr	r2, [r7, #16]
 800b360:	4313      	orrs	r3, r2
 800b362:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	699b      	ldr	r3, [r3, #24]
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	693a      	ldr	r2, [r7, #16]
 800b36c:	4313      	orrs	r3, r2
 800b36e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	693a      	ldr	r2, [r7, #16]
 800b374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	68fa      	ldr	r2, [r7, #12]
 800b37a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	685a      	ldr	r2, [r3, #4]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	697a      	ldr	r2, [r7, #20]
 800b388:	621a      	str	r2, [r3, #32]
}
 800b38a:	bf00      	nop
 800b38c:	371c      	adds	r7, #28
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr
 800b396:	bf00      	nop
 800b398:	feff8fff 	.word	0xfeff8fff
 800b39c:	40010000 	.word	0x40010000
 800b3a0:	40010400 	.word	0x40010400
 800b3a4:	40014000 	.word	0x40014000
 800b3a8:	40014400 	.word	0x40014400
 800b3ac:	40014800 	.word	0x40014800

0800b3b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b087      	sub	sp, #28
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6a1b      	ldr	r3, [r3, #32]
 800b3be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6a1b      	ldr	r3, [r3, #32]
 800b3ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	69db      	ldr	r3, [r3, #28]
 800b3d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f023 0303 	bic.w	r3, r3, #3
 800b3e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	68fa      	ldr	r2, [r7, #12]
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b3f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	689b      	ldr	r3, [r3, #8]
 800b3fe:	021b      	lsls	r3, r3, #8
 800b400:	697a      	ldr	r2, [r7, #20]
 800b402:	4313      	orrs	r3, r2
 800b404:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	4a27      	ldr	r2, [pc, #156]	; (800b4a8 <TIM_OC3_SetConfig+0xf8>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d003      	beq.n	800b416 <TIM_OC3_SetConfig+0x66>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	4a26      	ldr	r2, [pc, #152]	; (800b4ac <TIM_OC3_SetConfig+0xfc>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d10d      	bne.n	800b432 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b41c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	021b      	lsls	r3, r3, #8
 800b424:	697a      	ldr	r2, [r7, #20]
 800b426:	4313      	orrs	r3, r2
 800b428:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b430:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	4a1c      	ldr	r2, [pc, #112]	; (800b4a8 <TIM_OC3_SetConfig+0xf8>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d00f      	beq.n	800b45a <TIM_OC3_SetConfig+0xaa>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	4a1b      	ldr	r2, [pc, #108]	; (800b4ac <TIM_OC3_SetConfig+0xfc>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d00b      	beq.n	800b45a <TIM_OC3_SetConfig+0xaa>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	4a1a      	ldr	r2, [pc, #104]	; (800b4b0 <TIM_OC3_SetConfig+0x100>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d007      	beq.n	800b45a <TIM_OC3_SetConfig+0xaa>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	4a19      	ldr	r2, [pc, #100]	; (800b4b4 <TIM_OC3_SetConfig+0x104>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d003      	beq.n	800b45a <TIM_OC3_SetConfig+0xaa>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	4a18      	ldr	r2, [pc, #96]	; (800b4b8 <TIM_OC3_SetConfig+0x108>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d113      	bne.n	800b482 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b460:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b468:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	695b      	ldr	r3, [r3, #20]
 800b46e:	011b      	lsls	r3, r3, #4
 800b470:	693a      	ldr	r2, [r7, #16]
 800b472:	4313      	orrs	r3, r2
 800b474:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	699b      	ldr	r3, [r3, #24]
 800b47a:	011b      	lsls	r3, r3, #4
 800b47c:	693a      	ldr	r2, [r7, #16]
 800b47e:	4313      	orrs	r3, r2
 800b480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	693a      	ldr	r2, [r7, #16]
 800b486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	68fa      	ldr	r2, [r7, #12]
 800b48c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	685a      	ldr	r2, [r3, #4]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	697a      	ldr	r2, [r7, #20]
 800b49a:	621a      	str	r2, [r3, #32]
}
 800b49c:	bf00      	nop
 800b49e:	371c      	adds	r7, #28
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr
 800b4a8:	40010000 	.word	0x40010000
 800b4ac:	40010400 	.word	0x40010400
 800b4b0:	40014000 	.word	0x40014000
 800b4b4:	40014400 	.word	0x40014400
 800b4b8:	40014800 	.word	0x40014800

0800b4bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b087      	sub	sp, #28
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6a1b      	ldr	r3, [r3, #32]
 800b4ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6a1b      	ldr	r3, [r3, #32]
 800b4d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	685b      	ldr	r3, [r3, #4]
 800b4dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	69db      	ldr	r3, [r3, #28]
 800b4e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	021b      	lsls	r3, r3, #8
 800b4fa:	68fa      	ldr	r2, [r7, #12]
 800b4fc:	4313      	orrs	r3, r2
 800b4fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b506:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	689b      	ldr	r3, [r3, #8]
 800b50c:	031b      	lsls	r3, r3, #12
 800b50e:	693a      	ldr	r2, [r7, #16]
 800b510:	4313      	orrs	r3, r2
 800b512:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	4a18      	ldr	r2, [pc, #96]	; (800b578 <TIM_OC4_SetConfig+0xbc>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d00f      	beq.n	800b53c <TIM_OC4_SetConfig+0x80>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	4a17      	ldr	r2, [pc, #92]	; (800b57c <TIM_OC4_SetConfig+0xc0>)
 800b520:	4293      	cmp	r3, r2
 800b522:	d00b      	beq.n	800b53c <TIM_OC4_SetConfig+0x80>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	4a16      	ldr	r2, [pc, #88]	; (800b580 <TIM_OC4_SetConfig+0xc4>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d007      	beq.n	800b53c <TIM_OC4_SetConfig+0x80>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	4a15      	ldr	r2, [pc, #84]	; (800b584 <TIM_OC4_SetConfig+0xc8>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d003      	beq.n	800b53c <TIM_OC4_SetConfig+0x80>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	4a14      	ldr	r2, [pc, #80]	; (800b588 <TIM_OC4_SetConfig+0xcc>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d109      	bne.n	800b550 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b542:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	695b      	ldr	r3, [r3, #20]
 800b548:	019b      	lsls	r3, r3, #6
 800b54a:	697a      	ldr	r2, [r7, #20]
 800b54c:	4313      	orrs	r3, r2
 800b54e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	697a      	ldr	r2, [r7, #20]
 800b554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	68fa      	ldr	r2, [r7, #12]
 800b55a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	685a      	ldr	r2, [r3, #4]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	693a      	ldr	r2, [r7, #16]
 800b568:	621a      	str	r2, [r3, #32]
}
 800b56a:	bf00      	nop
 800b56c:	371c      	adds	r7, #28
 800b56e:	46bd      	mov	sp, r7
 800b570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b574:	4770      	bx	lr
 800b576:	bf00      	nop
 800b578:	40010000 	.word	0x40010000
 800b57c:	40010400 	.word	0x40010400
 800b580:	40014000 	.word	0x40014000
 800b584:	40014400 	.word	0x40014400
 800b588:	40014800 	.word	0x40014800

0800b58c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b087      	sub	sp, #28
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6a1b      	ldr	r3, [r3, #32]
 800b59a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6a1b      	ldr	r3, [r3, #32]
 800b5a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	685b      	ldr	r3, [r3, #4]
 800b5ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	68fa      	ldr	r2, [r7, #12]
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b5cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	041b      	lsls	r3, r3, #16
 800b5d4:	693a      	ldr	r2, [r7, #16]
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	4a17      	ldr	r2, [pc, #92]	; (800b63c <TIM_OC5_SetConfig+0xb0>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d00f      	beq.n	800b602 <TIM_OC5_SetConfig+0x76>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	4a16      	ldr	r2, [pc, #88]	; (800b640 <TIM_OC5_SetConfig+0xb4>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d00b      	beq.n	800b602 <TIM_OC5_SetConfig+0x76>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	4a15      	ldr	r2, [pc, #84]	; (800b644 <TIM_OC5_SetConfig+0xb8>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d007      	beq.n	800b602 <TIM_OC5_SetConfig+0x76>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	4a14      	ldr	r2, [pc, #80]	; (800b648 <TIM_OC5_SetConfig+0xbc>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d003      	beq.n	800b602 <TIM_OC5_SetConfig+0x76>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	4a13      	ldr	r2, [pc, #76]	; (800b64c <TIM_OC5_SetConfig+0xc0>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d109      	bne.n	800b616 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b608:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	695b      	ldr	r3, [r3, #20]
 800b60e:	021b      	lsls	r3, r3, #8
 800b610:	697a      	ldr	r2, [r7, #20]
 800b612:	4313      	orrs	r3, r2
 800b614:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	697a      	ldr	r2, [r7, #20]
 800b61a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	68fa      	ldr	r2, [r7, #12]
 800b620:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	685a      	ldr	r2, [r3, #4]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	693a      	ldr	r2, [r7, #16]
 800b62e:	621a      	str	r2, [r3, #32]
}
 800b630:	bf00      	nop
 800b632:	371c      	adds	r7, #28
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr
 800b63c:	40010000 	.word	0x40010000
 800b640:	40010400 	.word	0x40010400
 800b644:	40014000 	.word	0x40014000
 800b648:	40014400 	.word	0x40014400
 800b64c:	40014800 	.word	0x40014800

0800b650 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b650:	b480      	push	{r7}
 800b652:	b087      	sub	sp, #28
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6a1b      	ldr	r3, [r3, #32]
 800b65e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6a1b      	ldr	r3, [r3, #32]
 800b66a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b67e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	021b      	lsls	r3, r3, #8
 800b686:	68fa      	ldr	r2, [r7, #12]
 800b688:	4313      	orrs	r3, r2
 800b68a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b692:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	689b      	ldr	r3, [r3, #8]
 800b698:	051b      	lsls	r3, r3, #20
 800b69a:	693a      	ldr	r2, [r7, #16]
 800b69c:	4313      	orrs	r3, r2
 800b69e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	4a18      	ldr	r2, [pc, #96]	; (800b704 <TIM_OC6_SetConfig+0xb4>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d00f      	beq.n	800b6c8 <TIM_OC6_SetConfig+0x78>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	4a17      	ldr	r2, [pc, #92]	; (800b708 <TIM_OC6_SetConfig+0xb8>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d00b      	beq.n	800b6c8 <TIM_OC6_SetConfig+0x78>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	4a16      	ldr	r2, [pc, #88]	; (800b70c <TIM_OC6_SetConfig+0xbc>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d007      	beq.n	800b6c8 <TIM_OC6_SetConfig+0x78>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	4a15      	ldr	r2, [pc, #84]	; (800b710 <TIM_OC6_SetConfig+0xc0>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d003      	beq.n	800b6c8 <TIM_OC6_SetConfig+0x78>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	4a14      	ldr	r2, [pc, #80]	; (800b714 <TIM_OC6_SetConfig+0xc4>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d109      	bne.n	800b6dc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b6ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	695b      	ldr	r3, [r3, #20]
 800b6d4:	029b      	lsls	r3, r3, #10
 800b6d6:	697a      	ldr	r2, [r7, #20]
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	697a      	ldr	r2, [r7, #20]
 800b6e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	68fa      	ldr	r2, [r7, #12]
 800b6e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	685a      	ldr	r2, [r3, #4]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	693a      	ldr	r2, [r7, #16]
 800b6f4:	621a      	str	r2, [r3, #32]
}
 800b6f6:	bf00      	nop
 800b6f8:	371c      	adds	r7, #28
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	40010000 	.word	0x40010000
 800b708:	40010400 	.word	0x40010400
 800b70c:	40014000 	.word	0x40014000
 800b710:	40014400 	.word	0x40014400
 800b714:	40014800 	.word	0x40014800

0800b718 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b718:	b480      	push	{r7}
 800b71a:	b087      	sub	sp, #28
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	60b9      	str	r1, [r7, #8]
 800b722:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	f003 031f 	and.w	r3, r3, #31
 800b72a:	2201      	movs	r2, #1
 800b72c:	fa02 f303 	lsl.w	r3, r2, r3
 800b730:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	6a1a      	ldr	r2, [r3, #32]
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	43db      	mvns	r3, r3
 800b73a:	401a      	ands	r2, r3
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	6a1a      	ldr	r2, [r3, #32]
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	f003 031f 	and.w	r3, r3, #31
 800b74a:	6879      	ldr	r1, [r7, #4]
 800b74c:	fa01 f303 	lsl.w	r3, r1, r3
 800b750:	431a      	orrs	r2, r3
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	621a      	str	r2, [r3, #32]
}
 800b756:	bf00      	nop
 800b758:	371c      	adds	r7, #28
 800b75a:	46bd      	mov	sp, r7
 800b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b760:	4770      	bx	lr
	...

0800b764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b764:	b480      	push	{r7}
 800b766:	b085      	sub	sp, #20
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b774:	2b01      	cmp	r3, #1
 800b776:	d101      	bne.n	800b77c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b778:	2302      	movs	r3, #2
 800b77a:	e068      	b.n	800b84e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2201      	movs	r2, #1
 800b780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2202      	movs	r2, #2
 800b788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	689b      	ldr	r3, [r3, #8]
 800b79a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4a2e      	ldr	r2, [pc, #184]	; (800b85c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d004      	beq.n	800b7b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4a2d      	ldr	r2, [pc, #180]	; (800b860 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d108      	bne.n	800b7c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b7b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	68fa      	ldr	r2, [r7, #12]
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	68fa      	ldr	r2, [r7, #12]
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	68fa      	ldr	r2, [r7, #12]
 800b7da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a1e      	ldr	r2, [pc, #120]	; (800b85c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d01d      	beq.n	800b822 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7ee:	d018      	beq.n	800b822 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	4a1b      	ldr	r2, [pc, #108]	; (800b864 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d013      	beq.n	800b822 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4a1a      	ldr	r2, [pc, #104]	; (800b868 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d00e      	beq.n	800b822 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4a18      	ldr	r2, [pc, #96]	; (800b86c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d009      	beq.n	800b822 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4a13      	ldr	r2, [pc, #76]	; (800b860 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d004      	beq.n	800b822 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	4a14      	ldr	r2, [pc, #80]	; (800b870 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d10c      	bne.n	800b83c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b828:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	689b      	ldr	r3, [r3, #8]
 800b82e:	68ba      	ldr	r2, [r7, #8]
 800b830:	4313      	orrs	r3, r2
 800b832:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	68ba      	ldr	r2, [r7, #8]
 800b83a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2201      	movs	r2, #1
 800b840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b84c:	2300      	movs	r3, #0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3714      	adds	r7, #20
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr
 800b85a:	bf00      	nop
 800b85c:	40010000 	.word	0x40010000
 800b860:	40010400 	.word	0x40010400
 800b864:	40000400 	.word	0x40000400
 800b868:	40000800 	.word	0x40000800
 800b86c:	40000c00 	.word	0x40000c00
 800b870:	40001800 	.word	0x40001800

0800b874 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b874:	b480      	push	{r7}
 800b876:	b085      	sub	sp, #20
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b87e:	2300      	movs	r3, #0
 800b880:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b888:	2b01      	cmp	r3, #1
 800b88a:	d101      	bne.n	800b890 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b88c:	2302      	movs	r3, #2
 800b88e:	e065      	b.n	800b95c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2201      	movs	r2, #1
 800b894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	68db      	ldr	r3, [r3, #12]
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	689b      	ldr	r3, [r3, #8]
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	691b      	ldr	r3, [r3, #16]
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	695b      	ldr	r3, [r3, #20]
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	699b      	ldr	r3, [r3, #24]
 800b904:	041b      	lsls	r3, r3, #16
 800b906:	4313      	orrs	r3, r2
 800b908:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	4a16      	ldr	r2, [pc, #88]	; (800b968 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b910:	4293      	cmp	r3, r2
 800b912:	d004      	beq.n	800b91e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a14      	ldr	r2, [pc, #80]	; (800b96c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d115      	bne.n	800b94a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b928:	051b      	lsls	r3, r3, #20
 800b92a:	4313      	orrs	r3, r2
 800b92c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	69db      	ldr	r3, [r3, #28]
 800b938:	4313      	orrs	r3, r2
 800b93a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	6a1b      	ldr	r3, [r3, #32]
 800b946:	4313      	orrs	r3, r2
 800b948:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	68fa      	ldr	r2, [r7, #12]
 800b950:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2200      	movs	r2, #0
 800b956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b95a:	2300      	movs	r3, #0
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3714      	adds	r7, #20
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr
 800b968:	40010000 	.word	0x40010000
 800b96c:	40010400 	.word	0x40010400

0800b970 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d101      	bne.n	800b982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b97e:	2301      	movs	r3, #1
 800b980:	e042      	b.n	800ba08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d106      	bne.n	800b99a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2200      	movs	r2, #0
 800b990:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f7f6 fbd1 	bl	800213c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2224      	movs	r2, #36	; 0x24
 800b99e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	681a      	ldr	r2, [r3, #0]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f022 0201 	bic.w	r2, r2, #1
 800b9b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 fbf6 	bl	800c1a4 <UART_SetConfig>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d101      	bne.n	800b9c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e022      	b.n	800ba08 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d002      	beq.n	800b9d0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f001 f94a 	bl	800cc64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	685a      	ldr	r2, [r3, #4]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b9de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	689a      	ldr	r2, [r3, #8]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b9ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	681a      	ldr	r2, [r3, #0]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f042 0201 	orr.w	r2, r2, #1
 800b9fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f001 f9d1 	bl	800cda8 <UART_CheckIdleState>
 800ba06:	4603      	mov	r3, r0
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3708      	adds	r7, #8
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b08a      	sub	sp, #40	; 0x28
 800ba14:	af02      	add	r7, sp, #8
 800ba16:	60f8      	str	r0, [r7, #12]
 800ba18:	60b9      	str	r1, [r7, #8]
 800ba1a:	603b      	str	r3, [r7, #0]
 800ba1c:	4613      	mov	r3, r2
 800ba1e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba26:	2b20      	cmp	r3, #32
 800ba28:	f040 8083 	bne.w	800bb32 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d002      	beq.n	800ba38 <HAL_UART_Transmit+0x28>
 800ba32:	88fb      	ldrh	r3, [r7, #6]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d101      	bne.n	800ba3c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	e07b      	b.n	800bb34 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d101      	bne.n	800ba4a <HAL_UART_Transmit+0x3a>
 800ba46:	2302      	movs	r3, #2
 800ba48:	e074      	b.n	800bb34 <HAL_UART_Transmit+0x124>
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2200      	movs	r2, #0
 800ba56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2221      	movs	r2, #33	; 0x21
 800ba5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ba62:	f7f6 fd6f 	bl	8002544 <HAL_GetTick>
 800ba66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	88fa      	ldrh	r2, [r7, #6]
 800ba6c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	88fa      	ldrh	r2, [r7, #6]
 800ba74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	689b      	ldr	r3, [r3, #8]
 800ba7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba80:	d108      	bne.n	800ba94 <HAL_UART_Transmit+0x84>
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	691b      	ldr	r3, [r3, #16]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d104      	bne.n	800ba94 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	61bb      	str	r3, [r7, #24]
 800ba92:	e003      	b.n	800ba9c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800baa4:	e02c      	b.n	800bb00 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	9300      	str	r3, [sp, #0]
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	2200      	movs	r2, #0
 800baae:	2180      	movs	r1, #128	; 0x80
 800bab0:	68f8      	ldr	r0, [r7, #12]
 800bab2:	f001 f9c4 	bl	800ce3e <UART_WaitOnFlagUntilTimeout>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d001      	beq.n	800bac0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800babc:	2303      	movs	r3, #3
 800babe:	e039      	b.n	800bb34 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800bac0:	69fb      	ldr	r3, [r7, #28]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d10b      	bne.n	800bade <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bac6:	69bb      	ldr	r3, [r7, #24]
 800bac8:	881b      	ldrh	r3, [r3, #0]
 800baca:	461a      	mov	r2, r3
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bad4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bad6:	69bb      	ldr	r3, [r7, #24]
 800bad8:	3302      	adds	r3, #2
 800bada:	61bb      	str	r3, [r7, #24]
 800badc:	e007      	b.n	800baee <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bade:	69fb      	ldr	r3, [r7, #28]
 800bae0:	781a      	ldrb	r2, [r3, #0]
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bae8:	69fb      	ldr	r3, [r7, #28]
 800baea:	3301      	adds	r3, #1
 800baec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	3b01      	subs	r3, #1
 800baf8:	b29a      	uxth	r2, r3
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bb06:	b29b      	uxth	r3, r3
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d1cc      	bne.n	800baa6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	9300      	str	r3, [sp, #0]
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	2200      	movs	r2, #0
 800bb14:	2140      	movs	r1, #64	; 0x40
 800bb16:	68f8      	ldr	r0, [r7, #12]
 800bb18:	f001 f991 	bl	800ce3e <UART_WaitOnFlagUntilTimeout>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d001      	beq.n	800bb26 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800bb22:	2303      	movs	r3, #3
 800bb24:	e006      	b.n	800bb34 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	2220      	movs	r2, #32
 800bb2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	e000      	b.n	800bb34 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800bb32:	2302      	movs	r3, #2
  }
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3720      	adds	r7, #32
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	60f8      	str	r0, [r7, #12]
 800bb44:	60b9      	str	r1, [r7, #8]
 800bb46:	4613      	mov	r3, r2
 800bb48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb50:	2b20      	cmp	r3, #32
 800bb52:	d131      	bne.n	800bbb8 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d002      	beq.n	800bb60 <HAL_UART_Receive_DMA+0x24>
 800bb5a:	88fb      	ldrh	r3, [r7, #6]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d101      	bne.n	800bb64 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bb60:	2301      	movs	r3, #1
 800bb62:	e02a      	b.n	800bbba <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bb6a:	2b01      	cmp	r3, #1
 800bb6c:	d101      	bne.n	800bb72 <HAL_UART_Receive_DMA+0x36>
 800bb6e:	2302      	movs	r3, #2
 800bb70:	e023      	b.n	800bbba <HAL_UART_Receive_DMA+0x7e>
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2201      	movs	r2, #1
 800bb76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	4a0f      	ldr	r2, [pc, #60]	; (800bbc4 <HAL_UART_Receive_DMA+0x88>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d00e      	beq.n	800bba8 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d007      	beq.n	800bba8 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	681a      	ldr	r2, [r3, #0]
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800bba6:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bba8:	88fb      	ldrh	r3, [r7, #6]
 800bbaa:	461a      	mov	r2, r3
 800bbac:	68b9      	ldr	r1, [r7, #8]
 800bbae:	68f8      	ldr	r0, [r7, #12]
 800bbb0:	f001 f9c6 	bl	800cf40 <UART_Start_Receive_DMA>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	e000      	b.n	800bbba <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800bbb8:	2302      	movs	r3, #2
  }
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3710      	adds	r7, #16
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	58000c00 	.word	0x58000c00

0800bbc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b088      	sub	sp, #32
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	69db      	ldr	r3, [r3, #28]
 800bbd6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	689b      	ldr	r3, [r3, #8]
 800bbe6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bbe8:	69fa      	ldr	r2, [r7, #28]
 800bbea:	f640 030f 	movw	r3, #2063	; 0x80f
 800bbee:	4013      	ands	r3, r2
 800bbf0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d118      	bne.n	800bc2a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bbf8:	69fb      	ldr	r3, [r7, #28]
 800bbfa:	f003 0320 	and.w	r3, r3, #32
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d013      	beq.n	800bc2a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bc02:	69bb      	ldr	r3, [r7, #24]
 800bc04:	f003 0320 	and.w	r3, r3, #32
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d104      	bne.n	800bc16 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d009      	beq.n	800bc2a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	f000 8282 	beq.w	800c124 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	4798      	blx	r3
      }
      return;
 800bc28:	e27c      	b.n	800c124 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	f000 80ef 	beq.w	800be10 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bc32:	697a      	ldr	r2, [r7, #20]
 800bc34:	4b73      	ldr	r3, [pc, #460]	; (800be04 <HAL_UART_IRQHandler+0x23c>)
 800bc36:	4013      	ands	r3, r2
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d105      	bne.n	800bc48 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bc3c:	69ba      	ldr	r2, [r7, #24]
 800bc3e:	4b72      	ldr	r3, [pc, #456]	; (800be08 <HAL_UART_IRQHandler+0x240>)
 800bc40:	4013      	ands	r3, r2
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	f000 80e4 	beq.w	800be10 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bc48:	69fb      	ldr	r3, [r7, #28]
 800bc4a:	f003 0301 	and.w	r3, r3, #1
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d010      	beq.n	800bc74 <HAL_UART_IRQHandler+0xac>
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d00b      	beq.n	800bc74 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	2201      	movs	r2, #1
 800bc62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc6a:	f043 0201 	orr.w	r2, r3, #1
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc74:	69fb      	ldr	r3, [r7, #28]
 800bc76:	f003 0302 	and.w	r3, r3, #2
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d010      	beq.n	800bca0 <HAL_UART_IRQHandler+0xd8>
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	f003 0301 	and.w	r3, r3, #1
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d00b      	beq.n	800bca0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2202      	movs	r2, #2
 800bc8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc96:	f043 0204 	orr.w	r2, r3, #4
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bca0:	69fb      	ldr	r3, [r7, #28]
 800bca2:	f003 0304 	and.w	r3, r3, #4
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d010      	beq.n	800bccc <HAL_UART_IRQHandler+0x104>
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	f003 0301 	and.w	r3, r3, #1
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d00b      	beq.n	800bccc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	2204      	movs	r2, #4
 800bcba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcc2:	f043 0202 	orr.w	r2, r3, #2
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bccc:	69fb      	ldr	r3, [r7, #28]
 800bcce:	f003 0308 	and.w	r3, r3, #8
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d015      	beq.n	800bd02 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bcd6:	69bb      	ldr	r3, [r7, #24]
 800bcd8:	f003 0320 	and.w	r3, r3, #32
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d104      	bne.n	800bcea <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bce0:	697a      	ldr	r2, [r7, #20]
 800bce2:	4b48      	ldr	r3, [pc, #288]	; (800be04 <HAL_UART_IRQHandler+0x23c>)
 800bce4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d00b      	beq.n	800bd02 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	2208      	movs	r2, #8
 800bcf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcf8:	f043 0208 	orr.w	r2, r3, #8
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bd02:	69fb      	ldr	r3, [r7, #28]
 800bd04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d011      	beq.n	800bd30 <HAL_UART_IRQHandler+0x168>
 800bd0c:	69bb      	ldr	r3, [r7, #24]
 800bd0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d00c      	beq.n	800bd30 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bd1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd26:	f043 0220 	orr.w	r2, r3, #32
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	f000 81f6 	beq.w	800c128 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bd3c:	69fb      	ldr	r3, [r7, #28]
 800bd3e:	f003 0320 	and.w	r3, r3, #32
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d011      	beq.n	800bd6a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bd46:	69bb      	ldr	r3, [r7, #24]
 800bd48:	f003 0320 	and.w	r3, r3, #32
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d104      	bne.n	800bd5a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d007      	beq.n	800bd6a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d003      	beq.n	800bd6a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd70:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	689b      	ldr	r3, [r3, #8]
 800bd78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd7c:	2b40      	cmp	r3, #64	; 0x40
 800bd7e:	d004      	beq.n	800bd8a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d031      	beq.n	800bdee <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f001 f964 	bl	800d058 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd9a:	2b40      	cmp	r3, #64	; 0x40
 800bd9c:	d123      	bne.n	800bde6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	689a      	ldr	r2, [r3, #8]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bdac:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d013      	beq.n	800bdde <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdba:	4a14      	ldr	r2, [pc, #80]	; (800be0c <HAL_UART_IRQHandler+0x244>)
 800bdbc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f7f7 fe6a 	bl	8003a9c <HAL_DMA_Abort_IT>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d017      	beq.n	800bdfe <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800bdd8:	4610      	mov	r0, r2
 800bdda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bddc:	e00f      	b.n	800bdfe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 f9ca 	bl	800c178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bde4:	e00b      	b.n	800bdfe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f000 f9c6 	bl	800c178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdec:	e007      	b.n	800bdfe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f000 f9c2 	bl	800c178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800bdfc:	e194      	b.n	800c128 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdfe:	bf00      	nop
    return;
 800be00:	e192      	b.n	800c128 <HAL_UART_IRQHandler+0x560>
 800be02:	bf00      	nop
 800be04:	10000001 	.word	0x10000001
 800be08:	04000120 	.word	0x04000120
 800be0c:	0800d20b 	.word	0x0800d20b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be14:	2b01      	cmp	r3, #1
 800be16:	f040 810f 	bne.w	800c038 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800be1a:	69fb      	ldr	r3, [r7, #28]
 800be1c:	f003 0310 	and.w	r3, r3, #16
 800be20:	2b00      	cmp	r3, #0
 800be22:	f000 8109 	beq.w	800c038 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800be26:	69bb      	ldr	r3, [r7, #24]
 800be28:	f003 0310 	and.w	r3, r3, #16
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	f000 8103 	beq.w	800c038 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	2210      	movs	r2, #16
 800be38:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	689b      	ldr	r3, [r3, #8]
 800be40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be44:	2b40      	cmp	r3, #64	; 0x40
 800be46:	f040 80bb 	bne.w	800bfc0 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4a96      	ldr	r2, [pc, #600]	; (800c0ac <HAL_UART_IRQHandler+0x4e4>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d059      	beq.n	800bf0a <HAL_UART_IRQHandler+0x342>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4a94      	ldr	r2, [pc, #592]	; (800c0b0 <HAL_UART_IRQHandler+0x4e8>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d053      	beq.n	800bf0a <HAL_UART_IRQHandler+0x342>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a92      	ldr	r2, [pc, #584]	; (800c0b4 <HAL_UART_IRQHandler+0x4ec>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d04d      	beq.n	800bf0a <HAL_UART_IRQHandler+0x342>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4a90      	ldr	r2, [pc, #576]	; (800c0b8 <HAL_UART_IRQHandler+0x4f0>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d047      	beq.n	800bf0a <HAL_UART_IRQHandler+0x342>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4a8e      	ldr	r2, [pc, #568]	; (800c0bc <HAL_UART_IRQHandler+0x4f4>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d041      	beq.n	800bf0a <HAL_UART_IRQHandler+0x342>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4a8c      	ldr	r2, [pc, #560]	; (800c0c0 <HAL_UART_IRQHandler+0x4f8>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d03b      	beq.n	800bf0a <HAL_UART_IRQHandler+0x342>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	4a8a      	ldr	r2, [pc, #552]	; (800c0c4 <HAL_UART_IRQHandler+0x4fc>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d035      	beq.n	800bf0a <HAL_UART_IRQHandler+0x342>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	4a88      	ldr	r2, [pc, #544]	; (800c0c8 <HAL_UART_IRQHandler+0x500>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d02f      	beq.n	800bf0a <HAL_UART_IRQHandler+0x342>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4a86      	ldr	r2, [pc, #536]	; (800c0cc <HAL_UART_IRQHandler+0x504>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d029      	beq.n	800bf0a <HAL_UART_IRQHandler+0x342>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4a84      	ldr	r2, [pc, #528]	; (800c0d0 <HAL_UART_IRQHandler+0x508>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d023      	beq.n	800bf0a <HAL_UART_IRQHandler+0x342>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4a82      	ldr	r2, [pc, #520]	; (800c0d4 <HAL_UART_IRQHandler+0x50c>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d01d      	beq.n	800bf0a <HAL_UART_IRQHandler+0x342>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	4a80      	ldr	r2, [pc, #512]	; (800c0d8 <HAL_UART_IRQHandler+0x510>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d017      	beq.n	800bf0a <HAL_UART_IRQHandler+0x342>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	4a7e      	ldr	r2, [pc, #504]	; (800c0dc <HAL_UART_IRQHandler+0x514>)
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d011      	beq.n	800bf0a <HAL_UART_IRQHandler+0x342>
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4a7c      	ldr	r2, [pc, #496]	; (800c0e0 <HAL_UART_IRQHandler+0x518>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d00b      	beq.n	800bf0a <HAL_UART_IRQHandler+0x342>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4a7a      	ldr	r2, [pc, #488]	; (800c0e4 <HAL_UART_IRQHandler+0x51c>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d005      	beq.n	800bf0a <HAL_UART_IRQHandler+0x342>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4a78      	ldr	r2, [pc, #480]	; (800c0e8 <HAL_UART_IRQHandler+0x520>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d105      	bne.n	800bf16 <HAL_UART_IRQHandler+0x34e>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	e004      	b.n	800bf20 <HAL_UART_IRQHandler+0x358>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	b29b      	uxth	r3, r3
 800bf20:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800bf22:	893b      	ldrh	r3, [r7, #8]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	f000 8101 	beq.w	800c12c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bf30:	893a      	ldrh	r2, [r7, #8]
 800bf32:	429a      	cmp	r2, r3
 800bf34:	f080 80fa 	bcs.w	800c12c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	893a      	ldrh	r2, [r7, #8]
 800bf3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf44:	69db      	ldr	r3, [r3, #28]
 800bf46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf4a:	d02b      	beq.n	800bfa4 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	681a      	ldr	r2, [r3, #0]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bf5a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	689a      	ldr	r2, [r3, #8]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f022 0201 	bic.w	r2, r2, #1
 800bf6a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	689a      	ldr	r2, [r3, #8]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf7a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2220      	movs	r2, #32
 800bf80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2200      	movs	r2, #0
 800bf88:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	681a      	ldr	r2, [r3, #0]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f022 0210 	bic.w	r2, r2, #16
 800bf98:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7f7 fa5e 	bl	8003460 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bfb0:	b29b      	uxth	r3, r3
 800bfb2:	1ad3      	subs	r3, r2, r3
 800bfb4:	b29b      	uxth	r3, r3
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 f8e7 	bl	800c18c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bfbe:	e0b5      	b.n	800c12c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bfcc:	b29b      	uxth	r3, r3
 800bfce:	1ad3      	subs	r3, r2, r3
 800bfd0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bfd8:	b29b      	uxth	r3, r3
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	f000 80a8 	beq.w	800c130 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800bfe0:	897b      	ldrh	r3, [r7, #10]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	f000 80a4 	beq.w	800c130 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	681a      	ldr	r2, [r3, #0]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bff6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	6899      	ldr	r1, [r3, #8]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	4b3a      	ldr	r3, [pc, #232]	; (800c0ec <HAL_UART_IRQHandler+0x524>)
 800c004:	400b      	ands	r3, r1
 800c006:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2220      	movs	r2, #32
 800c00c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2200      	movs	r2, #0
 800c014:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2200      	movs	r2, #0
 800c01a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f022 0210 	bic.w	r2, r2, #16
 800c02a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c02c:	897b      	ldrh	r3, [r7, #10]
 800c02e:	4619      	mov	r1, r3
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f000 f8ab 	bl	800c18c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c036:	e07b      	b.n	800c130 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c038:	69fb      	ldr	r3, [r7, #28]
 800c03a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d00d      	beq.n	800c05e <HAL_UART_IRQHandler+0x496>
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d008      	beq.n	800c05e <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c054:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f001 f907 	bl	800d26a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c05c:	e06b      	b.n	800c136 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c05e:	69fb      	ldr	r3, [r7, #28]
 800c060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c064:	2b00      	cmp	r3, #0
 800c066:	d012      	beq.n	800c08e <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c068:	69bb      	ldr	r3, [r7, #24]
 800c06a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d104      	bne.n	800c07c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d008      	beq.n	800c08e <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c080:	2b00      	cmp	r3, #0
 800c082:	d057      	beq.n	800c134 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	4798      	blx	r3
    }
    return;
 800c08c:	e052      	b.n	800c134 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c08e:	69fb      	ldr	r3, [r7, #28]
 800c090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c094:	2b00      	cmp	r3, #0
 800c096:	d02b      	beq.n	800c0f0 <HAL_UART_IRQHandler+0x528>
 800c098:	69bb      	ldr	r3, [r7, #24]
 800c09a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d026      	beq.n	800c0f0 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f001 f8c7 	bl	800d236 <UART_EndTransmit_IT>
    return;
 800c0a8:	e045      	b.n	800c136 <HAL_UART_IRQHandler+0x56e>
 800c0aa:	bf00      	nop
 800c0ac:	40020010 	.word	0x40020010
 800c0b0:	40020028 	.word	0x40020028
 800c0b4:	40020040 	.word	0x40020040
 800c0b8:	40020058 	.word	0x40020058
 800c0bc:	40020070 	.word	0x40020070
 800c0c0:	40020088 	.word	0x40020088
 800c0c4:	400200a0 	.word	0x400200a0
 800c0c8:	400200b8 	.word	0x400200b8
 800c0cc:	40020410 	.word	0x40020410
 800c0d0:	40020428 	.word	0x40020428
 800c0d4:	40020440 	.word	0x40020440
 800c0d8:	40020458 	.word	0x40020458
 800c0dc:	40020470 	.word	0x40020470
 800c0e0:	40020488 	.word	0x40020488
 800c0e4:	400204a0 	.word	0x400204a0
 800c0e8:	400204b8 	.word	0x400204b8
 800c0ec:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c0f0:	69fb      	ldr	r3, [r7, #28]
 800c0f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d008      	beq.n	800c10c <HAL_UART_IRQHandler+0x544>
 800c0fa:	69bb      	ldr	r3, [r7, #24]
 800c0fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c100:	2b00      	cmp	r3, #0
 800c102:	d003      	beq.n	800c10c <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f001 f8c4 	bl	800d292 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c10a:	e014      	b.n	800c136 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c10c:	69fb      	ldr	r3, [r7, #28]
 800c10e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c112:	2b00      	cmp	r3, #0
 800c114:	d00f      	beq.n	800c136 <HAL_UART_IRQHandler+0x56e>
 800c116:	69bb      	ldr	r3, [r7, #24]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	da0c      	bge.n	800c136 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f001 f8ae 	bl	800d27e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c122:	e008      	b.n	800c136 <HAL_UART_IRQHandler+0x56e>
      return;
 800c124:	bf00      	nop
 800c126:	e006      	b.n	800c136 <HAL_UART_IRQHandler+0x56e>
    return;
 800c128:	bf00      	nop
 800c12a:	e004      	b.n	800c136 <HAL_UART_IRQHandler+0x56e>
      return;
 800c12c:	bf00      	nop
 800c12e:	e002      	b.n	800c136 <HAL_UART_IRQHandler+0x56e>
      return;
 800c130:	bf00      	nop
 800c132:	e000      	b.n	800c136 <HAL_UART_IRQHandler+0x56e>
    return;
 800c134:	bf00      	nop
  }
}
 800c136:	3720      	adds	r7, #32
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c13c:	b480      	push	{r7}
 800c13e:	b083      	sub	sp, #12
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c144:	bf00      	nop
 800c146:	370c      	adds	r7, #12
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr

0800c150 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c150:	b480      	push	{r7}
 800c152:	b083      	sub	sp, #12
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800c158:	bf00      	nop
 800c15a:	370c      	adds	r7, #12
 800c15c:	46bd      	mov	sp, r7
 800c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c162:	4770      	bx	lr

0800c164 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c164:	b480      	push	{r7}
 800c166:	b083      	sub	sp, #12
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c16c:	bf00      	nop
 800c16e:	370c      	adds	r7, #12
 800c170:	46bd      	mov	sp, r7
 800c172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c176:	4770      	bx	lr

0800c178 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c178:	b480      	push	{r7}
 800c17a:	b083      	sub	sp, #12
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c180:	bf00      	nop
 800c182:	370c      	adds	r7, #12
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr

0800c18c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b083      	sub	sp, #12
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	460b      	mov	r3, r1
 800c196:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c198:	bf00      	nop
 800c19a:	370c      	adds	r7, #12
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr

0800c1a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c1a4:	b5b0      	push	{r4, r5, r7, lr}
 800c1a6:	b08e      	sub	sp, #56	; 0x38
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	689a      	ldr	r2, [r3, #8]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	691b      	ldr	r3, [r3, #16]
 800c1ba:	431a      	orrs	r2, r3
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	695b      	ldr	r3, [r3, #20]
 800c1c0:	431a      	orrs	r2, r3
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	69db      	ldr	r3, [r3, #28]
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	681a      	ldr	r2, [r3, #0]
 800c1d0:	4bbf      	ldr	r3, [pc, #764]	; (800c4d0 <UART_SetConfig+0x32c>)
 800c1d2:	4013      	ands	r3, r2
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	6812      	ldr	r2, [r2, #0]
 800c1d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c1da:	430b      	orrs	r3, r1
 800c1dc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	68da      	ldr	r2, [r3, #12]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	430a      	orrs	r2, r1
 800c1f2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	699b      	ldr	r3, [r3, #24]
 800c1f8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	4ab5      	ldr	r2, [pc, #724]	; (800c4d4 <UART_SetConfig+0x330>)
 800c200:	4293      	cmp	r3, r2
 800c202:	d004      	beq.n	800c20e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6a1b      	ldr	r3, [r3, #32]
 800c208:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c20a:	4313      	orrs	r3, r2
 800c20c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	689a      	ldr	r2, [r3, #8]
 800c214:	4bb0      	ldr	r3, [pc, #704]	; (800c4d8 <UART_SetConfig+0x334>)
 800c216:	4013      	ands	r3, r2
 800c218:	687a      	ldr	r2, [r7, #4]
 800c21a:	6812      	ldr	r2, [r2, #0]
 800c21c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c21e:	430b      	orrs	r3, r1
 800c220:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c228:	f023 010f 	bic.w	r1, r3, #15
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	430a      	orrs	r2, r1
 800c236:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4aa7      	ldr	r2, [pc, #668]	; (800c4dc <UART_SetConfig+0x338>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d176      	bne.n	800c330 <UART_SetConfig+0x18c>
 800c242:	4ba7      	ldr	r3, [pc, #668]	; (800c4e0 <UART_SetConfig+0x33c>)
 800c244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c246:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c24a:	2b28      	cmp	r3, #40	; 0x28
 800c24c:	d86c      	bhi.n	800c328 <UART_SetConfig+0x184>
 800c24e:	a201      	add	r2, pc, #4	; (adr r2, 800c254 <UART_SetConfig+0xb0>)
 800c250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c254:	0800c2f9 	.word	0x0800c2f9
 800c258:	0800c329 	.word	0x0800c329
 800c25c:	0800c329 	.word	0x0800c329
 800c260:	0800c329 	.word	0x0800c329
 800c264:	0800c329 	.word	0x0800c329
 800c268:	0800c329 	.word	0x0800c329
 800c26c:	0800c329 	.word	0x0800c329
 800c270:	0800c329 	.word	0x0800c329
 800c274:	0800c301 	.word	0x0800c301
 800c278:	0800c329 	.word	0x0800c329
 800c27c:	0800c329 	.word	0x0800c329
 800c280:	0800c329 	.word	0x0800c329
 800c284:	0800c329 	.word	0x0800c329
 800c288:	0800c329 	.word	0x0800c329
 800c28c:	0800c329 	.word	0x0800c329
 800c290:	0800c329 	.word	0x0800c329
 800c294:	0800c309 	.word	0x0800c309
 800c298:	0800c329 	.word	0x0800c329
 800c29c:	0800c329 	.word	0x0800c329
 800c2a0:	0800c329 	.word	0x0800c329
 800c2a4:	0800c329 	.word	0x0800c329
 800c2a8:	0800c329 	.word	0x0800c329
 800c2ac:	0800c329 	.word	0x0800c329
 800c2b0:	0800c329 	.word	0x0800c329
 800c2b4:	0800c311 	.word	0x0800c311
 800c2b8:	0800c329 	.word	0x0800c329
 800c2bc:	0800c329 	.word	0x0800c329
 800c2c0:	0800c329 	.word	0x0800c329
 800c2c4:	0800c329 	.word	0x0800c329
 800c2c8:	0800c329 	.word	0x0800c329
 800c2cc:	0800c329 	.word	0x0800c329
 800c2d0:	0800c329 	.word	0x0800c329
 800c2d4:	0800c319 	.word	0x0800c319
 800c2d8:	0800c329 	.word	0x0800c329
 800c2dc:	0800c329 	.word	0x0800c329
 800c2e0:	0800c329 	.word	0x0800c329
 800c2e4:	0800c329 	.word	0x0800c329
 800c2e8:	0800c329 	.word	0x0800c329
 800c2ec:	0800c329 	.word	0x0800c329
 800c2f0:	0800c329 	.word	0x0800c329
 800c2f4:	0800c321 	.word	0x0800c321
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2fe:	e222      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c300:	2304      	movs	r3, #4
 800c302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c306:	e21e      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c308:	2308      	movs	r3, #8
 800c30a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c30e:	e21a      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c310:	2310      	movs	r3, #16
 800c312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c316:	e216      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c318:	2320      	movs	r3, #32
 800c31a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c31e:	e212      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c320:	2340      	movs	r3, #64	; 0x40
 800c322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c326:	e20e      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c328:	2380      	movs	r3, #128	; 0x80
 800c32a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c32e:	e20a      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	4a6b      	ldr	r2, [pc, #428]	; (800c4e4 <UART_SetConfig+0x340>)
 800c336:	4293      	cmp	r3, r2
 800c338:	d130      	bne.n	800c39c <UART_SetConfig+0x1f8>
 800c33a:	4b69      	ldr	r3, [pc, #420]	; (800c4e0 <UART_SetConfig+0x33c>)
 800c33c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c33e:	f003 0307 	and.w	r3, r3, #7
 800c342:	2b05      	cmp	r3, #5
 800c344:	d826      	bhi.n	800c394 <UART_SetConfig+0x1f0>
 800c346:	a201      	add	r2, pc, #4	; (adr r2, 800c34c <UART_SetConfig+0x1a8>)
 800c348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c34c:	0800c365 	.word	0x0800c365
 800c350:	0800c36d 	.word	0x0800c36d
 800c354:	0800c375 	.word	0x0800c375
 800c358:	0800c37d 	.word	0x0800c37d
 800c35c:	0800c385 	.word	0x0800c385
 800c360:	0800c38d 	.word	0x0800c38d
 800c364:	2300      	movs	r3, #0
 800c366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c36a:	e1ec      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c36c:	2304      	movs	r3, #4
 800c36e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c372:	e1e8      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c374:	2308      	movs	r3, #8
 800c376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c37a:	e1e4      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c37c:	2310      	movs	r3, #16
 800c37e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c382:	e1e0      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c384:	2320      	movs	r3, #32
 800c386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c38a:	e1dc      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c38c:	2340      	movs	r3, #64	; 0x40
 800c38e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c392:	e1d8      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c394:	2380      	movs	r3, #128	; 0x80
 800c396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c39a:	e1d4      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4a51      	ldr	r2, [pc, #324]	; (800c4e8 <UART_SetConfig+0x344>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d130      	bne.n	800c408 <UART_SetConfig+0x264>
 800c3a6:	4b4e      	ldr	r3, [pc, #312]	; (800c4e0 <UART_SetConfig+0x33c>)
 800c3a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3aa:	f003 0307 	and.w	r3, r3, #7
 800c3ae:	2b05      	cmp	r3, #5
 800c3b0:	d826      	bhi.n	800c400 <UART_SetConfig+0x25c>
 800c3b2:	a201      	add	r2, pc, #4	; (adr r2, 800c3b8 <UART_SetConfig+0x214>)
 800c3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3b8:	0800c3d1 	.word	0x0800c3d1
 800c3bc:	0800c3d9 	.word	0x0800c3d9
 800c3c0:	0800c3e1 	.word	0x0800c3e1
 800c3c4:	0800c3e9 	.word	0x0800c3e9
 800c3c8:	0800c3f1 	.word	0x0800c3f1
 800c3cc:	0800c3f9 	.word	0x0800c3f9
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3d6:	e1b6      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c3d8:	2304      	movs	r3, #4
 800c3da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3de:	e1b2      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c3e0:	2308      	movs	r3, #8
 800c3e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3e6:	e1ae      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c3e8:	2310      	movs	r3, #16
 800c3ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3ee:	e1aa      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c3f0:	2320      	movs	r3, #32
 800c3f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3f6:	e1a6      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c3f8:	2340      	movs	r3, #64	; 0x40
 800c3fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3fe:	e1a2      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c400:	2380      	movs	r3, #128	; 0x80
 800c402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c406:	e19e      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	4a37      	ldr	r2, [pc, #220]	; (800c4ec <UART_SetConfig+0x348>)
 800c40e:	4293      	cmp	r3, r2
 800c410:	d130      	bne.n	800c474 <UART_SetConfig+0x2d0>
 800c412:	4b33      	ldr	r3, [pc, #204]	; (800c4e0 <UART_SetConfig+0x33c>)
 800c414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c416:	f003 0307 	and.w	r3, r3, #7
 800c41a:	2b05      	cmp	r3, #5
 800c41c:	d826      	bhi.n	800c46c <UART_SetConfig+0x2c8>
 800c41e:	a201      	add	r2, pc, #4	; (adr r2, 800c424 <UART_SetConfig+0x280>)
 800c420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c424:	0800c43d 	.word	0x0800c43d
 800c428:	0800c445 	.word	0x0800c445
 800c42c:	0800c44d 	.word	0x0800c44d
 800c430:	0800c455 	.word	0x0800c455
 800c434:	0800c45d 	.word	0x0800c45d
 800c438:	0800c465 	.word	0x0800c465
 800c43c:	2300      	movs	r3, #0
 800c43e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c442:	e180      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c444:	2304      	movs	r3, #4
 800c446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c44a:	e17c      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c44c:	2308      	movs	r3, #8
 800c44e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c452:	e178      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c454:	2310      	movs	r3, #16
 800c456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c45a:	e174      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c45c:	2320      	movs	r3, #32
 800c45e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c462:	e170      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c464:	2340      	movs	r3, #64	; 0x40
 800c466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c46a:	e16c      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c46c:	2380      	movs	r3, #128	; 0x80
 800c46e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c472:	e168      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4a1d      	ldr	r2, [pc, #116]	; (800c4f0 <UART_SetConfig+0x34c>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d142      	bne.n	800c504 <UART_SetConfig+0x360>
 800c47e:	4b18      	ldr	r3, [pc, #96]	; (800c4e0 <UART_SetConfig+0x33c>)
 800c480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c482:	f003 0307 	and.w	r3, r3, #7
 800c486:	2b05      	cmp	r3, #5
 800c488:	d838      	bhi.n	800c4fc <UART_SetConfig+0x358>
 800c48a:	a201      	add	r2, pc, #4	; (adr r2, 800c490 <UART_SetConfig+0x2ec>)
 800c48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c490:	0800c4a9 	.word	0x0800c4a9
 800c494:	0800c4b1 	.word	0x0800c4b1
 800c498:	0800c4b9 	.word	0x0800c4b9
 800c49c:	0800c4c1 	.word	0x0800c4c1
 800c4a0:	0800c4c9 	.word	0x0800c4c9
 800c4a4:	0800c4f5 	.word	0x0800c4f5
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4ae:	e14a      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c4b0:	2304      	movs	r3, #4
 800c4b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4b6:	e146      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c4b8:	2308      	movs	r3, #8
 800c4ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4be:	e142      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c4c0:	2310      	movs	r3, #16
 800c4c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4c6:	e13e      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c4c8:	2320      	movs	r3, #32
 800c4ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4ce:	e13a      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c4d0:	cfff69f3 	.word	0xcfff69f3
 800c4d4:	58000c00 	.word	0x58000c00
 800c4d8:	11fff4ff 	.word	0x11fff4ff
 800c4dc:	40011000 	.word	0x40011000
 800c4e0:	58024400 	.word	0x58024400
 800c4e4:	40004400 	.word	0x40004400
 800c4e8:	40004800 	.word	0x40004800
 800c4ec:	40004c00 	.word	0x40004c00
 800c4f0:	40005000 	.word	0x40005000
 800c4f4:	2340      	movs	r3, #64	; 0x40
 800c4f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4fa:	e124      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c4fc:	2380      	movs	r3, #128	; 0x80
 800c4fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c502:	e120      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	4acc      	ldr	r2, [pc, #816]	; (800c83c <UART_SetConfig+0x698>)
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d176      	bne.n	800c5fc <UART_SetConfig+0x458>
 800c50e:	4bcc      	ldr	r3, [pc, #816]	; (800c840 <UART_SetConfig+0x69c>)
 800c510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c512:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c516:	2b28      	cmp	r3, #40	; 0x28
 800c518:	d86c      	bhi.n	800c5f4 <UART_SetConfig+0x450>
 800c51a:	a201      	add	r2, pc, #4	; (adr r2, 800c520 <UART_SetConfig+0x37c>)
 800c51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c520:	0800c5c5 	.word	0x0800c5c5
 800c524:	0800c5f5 	.word	0x0800c5f5
 800c528:	0800c5f5 	.word	0x0800c5f5
 800c52c:	0800c5f5 	.word	0x0800c5f5
 800c530:	0800c5f5 	.word	0x0800c5f5
 800c534:	0800c5f5 	.word	0x0800c5f5
 800c538:	0800c5f5 	.word	0x0800c5f5
 800c53c:	0800c5f5 	.word	0x0800c5f5
 800c540:	0800c5cd 	.word	0x0800c5cd
 800c544:	0800c5f5 	.word	0x0800c5f5
 800c548:	0800c5f5 	.word	0x0800c5f5
 800c54c:	0800c5f5 	.word	0x0800c5f5
 800c550:	0800c5f5 	.word	0x0800c5f5
 800c554:	0800c5f5 	.word	0x0800c5f5
 800c558:	0800c5f5 	.word	0x0800c5f5
 800c55c:	0800c5f5 	.word	0x0800c5f5
 800c560:	0800c5d5 	.word	0x0800c5d5
 800c564:	0800c5f5 	.word	0x0800c5f5
 800c568:	0800c5f5 	.word	0x0800c5f5
 800c56c:	0800c5f5 	.word	0x0800c5f5
 800c570:	0800c5f5 	.word	0x0800c5f5
 800c574:	0800c5f5 	.word	0x0800c5f5
 800c578:	0800c5f5 	.word	0x0800c5f5
 800c57c:	0800c5f5 	.word	0x0800c5f5
 800c580:	0800c5dd 	.word	0x0800c5dd
 800c584:	0800c5f5 	.word	0x0800c5f5
 800c588:	0800c5f5 	.word	0x0800c5f5
 800c58c:	0800c5f5 	.word	0x0800c5f5
 800c590:	0800c5f5 	.word	0x0800c5f5
 800c594:	0800c5f5 	.word	0x0800c5f5
 800c598:	0800c5f5 	.word	0x0800c5f5
 800c59c:	0800c5f5 	.word	0x0800c5f5
 800c5a0:	0800c5e5 	.word	0x0800c5e5
 800c5a4:	0800c5f5 	.word	0x0800c5f5
 800c5a8:	0800c5f5 	.word	0x0800c5f5
 800c5ac:	0800c5f5 	.word	0x0800c5f5
 800c5b0:	0800c5f5 	.word	0x0800c5f5
 800c5b4:	0800c5f5 	.word	0x0800c5f5
 800c5b8:	0800c5f5 	.word	0x0800c5f5
 800c5bc:	0800c5f5 	.word	0x0800c5f5
 800c5c0:	0800c5ed 	.word	0x0800c5ed
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5ca:	e0bc      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c5cc:	2304      	movs	r3, #4
 800c5ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5d2:	e0b8      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c5d4:	2308      	movs	r3, #8
 800c5d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5da:	e0b4      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c5dc:	2310      	movs	r3, #16
 800c5de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5e2:	e0b0      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c5e4:	2320      	movs	r3, #32
 800c5e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5ea:	e0ac      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c5ec:	2340      	movs	r3, #64	; 0x40
 800c5ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5f2:	e0a8      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c5f4:	2380      	movs	r3, #128	; 0x80
 800c5f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5fa:	e0a4      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	4a90      	ldr	r2, [pc, #576]	; (800c844 <UART_SetConfig+0x6a0>)
 800c602:	4293      	cmp	r3, r2
 800c604:	d130      	bne.n	800c668 <UART_SetConfig+0x4c4>
 800c606:	4b8e      	ldr	r3, [pc, #568]	; (800c840 <UART_SetConfig+0x69c>)
 800c608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c60a:	f003 0307 	and.w	r3, r3, #7
 800c60e:	2b05      	cmp	r3, #5
 800c610:	d826      	bhi.n	800c660 <UART_SetConfig+0x4bc>
 800c612:	a201      	add	r2, pc, #4	; (adr r2, 800c618 <UART_SetConfig+0x474>)
 800c614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c618:	0800c631 	.word	0x0800c631
 800c61c:	0800c639 	.word	0x0800c639
 800c620:	0800c641 	.word	0x0800c641
 800c624:	0800c649 	.word	0x0800c649
 800c628:	0800c651 	.word	0x0800c651
 800c62c:	0800c659 	.word	0x0800c659
 800c630:	2300      	movs	r3, #0
 800c632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c636:	e086      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c638:	2304      	movs	r3, #4
 800c63a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c63e:	e082      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c640:	2308      	movs	r3, #8
 800c642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c646:	e07e      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c648:	2310      	movs	r3, #16
 800c64a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c64e:	e07a      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c650:	2320      	movs	r3, #32
 800c652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c656:	e076      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c658:	2340      	movs	r3, #64	; 0x40
 800c65a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c65e:	e072      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c660:	2380      	movs	r3, #128	; 0x80
 800c662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c666:	e06e      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	4a76      	ldr	r2, [pc, #472]	; (800c848 <UART_SetConfig+0x6a4>)
 800c66e:	4293      	cmp	r3, r2
 800c670:	d130      	bne.n	800c6d4 <UART_SetConfig+0x530>
 800c672:	4b73      	ldr	r3, [pc, #460]	; (800c840 <UART_SetConfig+0x69c>)
 800c674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c676:	f003 0307 	and.w	r3, r3, #7
 800c67a:	2b05      	cmp	r3, #5
 800c67c:	d826      	bhi.n	800c6cc <UART_SetConfig+0x528>
 800c67e:	a201      	add	r2, pc, #4	; (adr r2, 800c684 <UART_SetConfig+0x4e0>)
 800c680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c684:	0800c69d 	.word	0x0800c69d
 800c688:	0800c6a5 	.word	0x0800c6a5
 800c68c:	0800c6ad 	.word	0x0800c6ad
 800c690:	0800c6b5 	.word	0x0800c6b5
 800c694:	0800c6bd 	.word	0x0800c6bd
 800c698:	0800c6c5 	.word	0x0800c6c5
 800c69c:	2300      	movs	r3, #0
 800c69e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6a2:	e050      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c6a4:	2304      	movs	r3, #4
 800c6a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6aa:	e04c      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c6ac:	2308      	movs	r3, #8
 800c6ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6b2:	e048      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c6b4:	2310      	movs	r3, #16
 800c6b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6ba:	e044      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c6bc:	2320      	movs	r3, #32
 800c6be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6c2:	e040      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c6c4:	2340      	movs	r3, #64	; 0x40
 800c6c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6ca:	e03c      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c6cc:	2380      	movs	r3, #128	; 0x80
 800c6ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6d2:	e038      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4a5c      	ldr	r2, [pc, #368]	; (800c84c <UART_SetConfig+0x6a8>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d130      	bne.n	800c740 <UART_SetConfig+0x59c>
 800c6de:	4b58      	ldr	r3, [pc, #352]	; (800c840 <UART_SetConfig+0x69c>)
 800c6e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6e2:	f003 0307 	and.w	r3, r3, #7
 800c6e6:	2b05      	cmp	r3, #5
 800c6e8:	d826      	bhi.n	800c738 <UART_SetConfig+0x594>
 800c6ea:	a201      	add	r2, pc, #4	; (adr r2, 800c6f0 <UART_SetConfig+0x54c>)
 800c6ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6f0:	0800c709 	.word	0x0800c709
 800c6f4:	0800c711 	.word	0x0800c711
 800c6f8:	0800c719 	.word	0x0800c719
 800c6fc:	0800c721 	.word	0x0800c721
 800c700:	0800c729 	.word	0x0800c729
 800c704:	0800c731 	.word	0x0800c731
 800c708:	2302      	movs	r3, #2
 800c70a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c70e:	e01a      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c710:	2304      	movs	r3, #4
 800c712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c716:	e016      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c718:	2308      	movs	r3, #8
 800c71a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c71e:	e012      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c720:	2310      	movs	r3, #16
 800c722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c726:	e00e      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c728:	2320      	movs	r3, #32
 800c72a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c72e:	e00a      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c730:	2340      	movs	r3, #64	; 0x40
 800c732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c736:	e006      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c738:	2380      	movs	r3, #128	; 0x80
 800c73a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c73e:	e002      	b.n	800c746 <UART_SetConfig+0x5a2>
 800c740:	2380      	movs	r3, #128	; 0x80
 800c742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	4a40      	ldr	r2, [pc, #256]	; (800c84c <UART_SetConfig+0x6a8>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	f040 80ef 	bne.w	800c930 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c752:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c756:	2b20      	cmp	r3, #32
 800c758:	dc46      	bgt.n	800c7e8 <UART_SetConfig+0x644>
 800c75a:	2b02      	cmp	r3, #2
 800c75c:	f2c0 8081 	blt.w	800c862 <UART_SetConfig+0x6be>
 800c760:	3b02      	subs	r3, #2
 800c762:	2b1e      	cmp	r3, #30
 800c764:	d87d      	bhi.n	800c862 <UART_SetConfig+0x6be>
 800c766:	a201      	add	r2, pc, #4	; (adr r2, 800c76c <UART_SetConfig+0x5c8>)
 800c768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c76c:	0800c7ef 	.word	0x0800c7ef
 800c770:	0800c863 	.word	0x0800c863
 800c774:	0800c7f7 	.word	0x0800c7f7
 800c778:	0800c863 	.word	0x0800c863
 800c77c:	0800c863 	.word	0x0800c863
 800c780:	0800c863 	.word	0x0800c863
 800c784:	0800c807 	.word	0x0800c807
 800c788:	0800c863 	.word	0x0800c863
 800c78c:	0800c863 	.word	0x0800c863
 800c790:	0800c863 	.word	0x0800c863
 800c794:	0800c863 	.word	0x0800c863
 800c798:	0800c863 	.word	0x0800c863
 800c79c:	0800c863 	.word	0x0800c863
 800c7a0:	0800c863 	.word	0x0800c863
 800c7a4:	0800c817 	.word	0x0800c817
 800c7a8:	0800c863 	.word	0x0800c863
 800c7ac:	0800c863 	.word	0x0800c863
 800c7b0:	0800c863 	.word	0x0800c863
 800c7b4:	0800c863 	.word	0x0800c863
 800c7b8:	0800c863 	.word	0x0800c863
 800c7bc:	0800c863 	.word	0x0800c863
 800c7c0:	0800c863 	.word	0x0800c863
 800c7c4:	0800c863 	.word	0x0800c863
 800c7c8:	0800c863 	.word	0x0800c863
 800c7cc:	0800c863 	.word	0x0800c863
 800c7d0:	0800c863 	.word	0x0800c863
 800c7d4:	0800c863 	.word	0x0800c863
 800c7d8:	0800c863 	.word	0x0800c863
 800c7dc:	0800c863 	.word	0x0800c863
 800c7e0:	0800c863 	.word	0x0800c863
 800c7e4:	0800c855 	.word	0x0800c855
 800c7e8:	2b40      	cmp	r3, #64	; 0x40
 800c7ea:	d036      	beq.n	800c85a <UART_SetConfig+0x6b6>
 800c7ec:	e039      	b.n	800c862 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c7ee:	f7fc fed1 	bl	8009594 <HAL_RCCEx_GetD3PCLK1Freq>
 800c7f2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c7f4:	e03b      	b.n	800c86e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7f6:	f107 0314 	add.w	r3, r7, #20
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f7fc fee0 	bl	80095c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c800:	69bb      	ldr	r3, [r7, #24]
 800c802:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c804:	e033      	b.n	800c86e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c806:	f107 0308 	add.w	r3, r7, #8
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7fd f82c 	bl	8009868 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c814:	e02b      	b.n	800c86e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c816:	4b0a      	ldr	r3, [pc, #40]	; (800c840 <UART_SetConfig+0x69c>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f003 0320 	and.w	r3, r3, #32
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d009      	beq.n	800c836 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c822:	4b07      	ldr	r3, [pc, #28]	; (800c840 <UART_SetConfig+0x69c>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	08db      	lsrs	r3, r3, #3
 800c828:	f003 0303 	and.w	r3, r3, #3
 800c82c:	4a08      	ldr	r2, [pc, #32]	; (800c850 <UART_SetConfig+0x6ac>)
 800c82e:	fa22 f303 	lsr.w	r3, r2, r3
 800c832:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c834:	e01b      	b.n	800c86e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800c836:	4b06      	ldr	r3, [pc, #24]	; (800c850 <UART_SetConfig+0x6ac>)
 800c838:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c83a:	e018      	b.n	800c86e <UART_SetConfig+0x6ca>
 800c83c:	40011400 	.word	0x40011400
 800c840:	58024400 	.word	0x58024400
 800c844:	40007800 	.word	0x40007800
 800c848:	40007c00 	.word	0x40007c00
 800c84c:	58000c00 	.word	0x58000c00
 800c850:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c854:	4bc4      	ldr	r3, [pc, #784]	; (800cb68 <UART_SetConfig+0x9c4>)
 800c856:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c858:	e009      	b.n	800c86e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c85a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c85e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c860:	e005      	b.n	800c86e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800c862:	2300      	movs	r3, #0
 800c864:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c866:	2301      	movs	r3, #1
 800c868:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c86c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c870:	2b00      	cmp	r3, #0
 800c872:	f000 81da 	beq.w	800cc2a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c87a:	4abc      	ldr	r2, [pc, #752]	; (800cb6c <UART_SetConfig+0x9c8>)
 800c87c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c880:	461a      	mov	r2, r3
 800c882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c884:	fbb3 f3f2 	udiv	r3, r3, r2
 800c888:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	685a      	ldr	r2, [r3, #4]
 800c88e:	4613      	mov	r3, r2
 800c890:	005b      	lsls	r3, r3, #1
 800c892:	4413      	add	r3, r2
 800c894:	6a3a      	ldr	r2, [r7, #32]
 800c896:	429a      	cmp	r2, r3
 800c898:	d305      	bcc.n	800c8a6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	685b      	ldr	r3, [r3, #4]
 800c89e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c8a0:	6a3a      	ldr	r2, [r7, #32]
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d903      	bls.n	800c8ae <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c8ac:	e1bd      	b.n	800cc2a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f04f 0100 	mov.w	r1, #0
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ba:	4aac      	ldr	r2, [pc, #688]	; (800cb6c <UART_SetConfig+0x9c8>)
 800c8bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8c0:	b29a      	uxth	r2, r3
 800c8c2:	f04f 0300 	mov.w	r3, #0
 800c8c6:	f7f3 ff2f 	bl	8000728 <__aeabi_uldivmod>
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	4610      	mov	r0, r2
 800c8d0:	4619      	mov	r1, r3
 800c8d2:	f04f 0200 	mov.w	r2, #0
 800c8d6:	f04f 0300 	mov.w	r3, #0
 800c8da:	020b      	lsls	r3, r1, #8
 800c8dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c8e0:	0202      	lsls	r2, r0, #8
 800c8e2:	6879      	ldr	r1, [r7, #4]
 800c8e4:	6849      	ldr	r1, [r1, #4]
 800c8e6:	0849      	lsrs	r1, r1, #1
 800c8e8:	4608      	mov	r0, r1
 800c8ea:	f04f 0100 	mov.w	r1, #0
 800c8ee:	1814      	adds	r4, r2, r0
 800c8f0:	eb43 0501 	adc.w	r5, r3, r1
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	f04f 0300 	mov.w	r3, #0
 800c8fe:	4620      	mov	r0, r4
 800c900:	4629      	mov	r1, r5
 800c902:	f7f3 ff11 	bl	8000728 <__aeabi_uldivmod>
 800c906:	4602      	mov	r2, r0
 800c908:	460b      	mov	r3, r1
 800c90a:	4613      	mov	r3, r2
 800c90c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c910:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c914:	d308      	bcc.n	800c928 <UART_SetConfig+0x784>
 800c916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c918:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c91c:	d204      	bcs.n	800c928 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c924:	60da      	str	r2, [r3, #12]
 800c926:	e180      	b.n	800cc2a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800c928:	2301      	movs	r3, #1
 800c92a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c92e:	e17c      	b.n	800cc2a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	69db      	ldr	r3, [r3, #28]
 800c934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c938:	f040 80bf 	bne.w	800caba <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800c93c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c940:	2b20      	cmp	r3, #32
 800c942:	dc49      	bgt.n	800c9d8 <UART_SetConfig+0x834>
 800c944:	2b00      	cmp	r3, #0
 800c946:	db7c      	blt.n	800ca42 <UART_SetConfig+0x89e>
 800c948:	2b20      	cmp	r3, #32
 800c94a:	d87a      	bhi.n	800ca42 <UART_SetConfig+0x89e>
 800c94c:	a201      	add	r2, pc, #4	; (adr r2, 800c954 <UART_SetConfig+0x7b0>)
 800c94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c952:	bf00      	nop
 800c954:	0800c9df 	.word	0x0800c9df
 800c958:	0800c9e7 	.word	0x0800c9e7
 800c95c:	0800ca43 	.word	0x0800ca43
 800c960:	0800ca43 	.word	0x0800ca43
 800c964:	0800c9ef 	.word	0x0800c9ef
 800c968:	0800ca43 	.word	0x0800ca43
 800c96c:	0800ca43 	.word	0x0800ca43
 800c970:	0800ca43 	.word	0x0800ca43
 800c974:	0800c9ff 	.word	0x0800c9ff
 800c978:	0800ca43 	.word	0x0800ca43
 800c97c:	0800ca43 	.word	0x0800ca43
 800c980:	0800ca43 	.word	0x0800ca43
 800c984:	0800ca43 	.word	0x0800ca43
 800c988:	0800ca43 	.word	0x0800ca43
 800c98c:	0800ca43 	.word	0x0800ca43
 800c990:	0800ca43 	.word	0x0800ca43
 800c994:	0800ca0f 	.word	0x0800ca0f
 800c998:	0800ca43 	.word	0x0800ca43
 800c99c:	0800ca43 	.word	0x0800ca43
 800c9a0:	0800ca43 	.word	0x0800ca43
 800c9a4:	0800ca43 	.word	0x0800ca43
 800c9a8:	0800ca43 	.word	0x0800ca43
 800c9ac:	0800ca43 	.word	0x0800ca43
 800c9b0:	0800ca43 	.word	0x0800ca43
 800c9b4:	0800ca43 	.word	0x0800ca43
 800c9b8:	0800ca43 	.word	0x0800ca43
 800c9bc:	0800ca43 	.word	0x0800ca43
 800c9c0:	0800ca43 	.word	0x0800ca43
 800c9c4:	0800ca43 	.word	0x0800ca43
 800c9c8:	0800ca43 	.word	0x0800ca43
 800c9cc:	0800ca43 	.word	0x0800ca43
 800c9d0:	0800ca43 	.word	0x0800ca43
 800c9d4:	0800ca35 	.word	0x0800ca35
 800c9d8:	2b40      	cmp	r3, #64	; 0x40
 800c9da:	d02e      	beq.n	800ca3a <UART_SetConfig+0x896>
 800c9dc:	e031      	b.n	800ca42 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c9de:	f7fb fe6d 	bl	80086bc <HAL_RCC_GetPCLK1Freq>
 800c9e2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c9e4:	e033      	b.n	800ca4e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c9e6:	f7fb fe7f 	bl	80086e8 <HAL_RCC_GetPCLK2Freq>
 800c9ea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c9ec:	e02f      	b.n	800ca4e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9ee:	f107 0314 	add.w	r3, r7, #20
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f7fc fde4 	bl	80095c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c9f8:	69bb      	ldr	r3, [r7, #24]
 800c9fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c9fc:	e027      	b.n	800ca4e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9fe:	f107 0308 	add.w	r3, r7, #8
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7fc ff30 	bl	8009868 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ca0c:	e01f      	b.n	800ca4e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca0e:	4b58      	ldr	r3, [pc, #352]	; (800cb70 <UART_SetConfig+0x9cc>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f003 0320 	and.w	r3, r3, #32
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d009      	beq.n	800ca2e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ca1a:	4b55      	ldr	r3, [pc, #340]	; (800cb70 <UART_SetConfig+0x9cc>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	08db      	lsrs	r3, r3, #3
 800ca20:	f003 0303 	and.w	r3, r3, #3
 800ca24:	4a53      	ldr	r2, [pc, #332]	; (800cb74 <UART_SetConfig+0x9d0>)
 800ca26:	fa22 f303 	lsr.w	r3, r2, r3
 800ca2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ca2c:	e00f      	b.n	800ca4e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800ca2e:	4b51      	ldr	r3, [pc, #324]	; (800cb74 <UART_SetConfig+0x9d0>)
 800ca30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ca32:	e00c      	b.n	800ca4e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ca34:	4b4c      	ldr	r3, [pc, #304]	; (800cb68 <UART_SetConfig+0x9c4>)
 800ca36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ca38:	e009      	b.n	800ca4e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ca40:	e005      	b.n	800ca4e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800ca42:	2300      	movs	r3, #0
 800ca44:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ca46:	2301      	movs	r3, #1
 800ca48:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ca4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ca4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	f000 80ea 	beq.w	800cc2a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca5a:	4a44      	ldr	r2, [pc, #272]	; (800cb6c <UART_SetConfig+0x9c8>)
 800ca5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca60:	461a      	mov	r2, r3
 800ca62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca64:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca68:	005a      	lsls	r2, r3, #1
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	685b      	ldr	r3, [r3, #4]
 800ca6e:	085b      	lsrs	r3, r3, #1
 800ca70:	441a      	add	r2, r3
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	685b      	ldr	r3, [r3, #4]
 800ca76:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca7a:	b29b      	uxth	r3, r3
 800ca7c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca80:	2b0f      	cmp	r3, #15
 800ca82:	d916      	bls.n	800cab2 <UART_SetConfig+0x90e>
 800ca84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca8a:	d212      	bcs.n	800cab2 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ca8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8e:	b29b      	uxth	r3, r3
 800ca90:	f023 030f 	bic.w	r3, r3, #15
 800ca94:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ca96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca98:	085b      	lsrs	r3, r3, #1
 800ca9a:	b29b      	uxth	r3, r3
 800ca9c:	f003 0307 	and.w	r3, r3, #7
 800caa0:	b29a      	uxth	r2, r3
 800caa2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800caa4:	4313      	orrs	r3, r2
 800caa6:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800caae:	60da      	str	r2, [r3, #12]
 800cab0:	e0bb      	b.n	800cc2a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800cab2:	2301      	movs	r3, #1
 800cab4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cab8:	e0b7      	b.n	800cc2a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800caba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cabe:	2b20      	cmp	r3, #32
 800cac0:	dc4a      	bgt.n	800cb58 <UART_SetConfig+0x9b4>
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	f2c0 8086 	blt.w	800cbd4 <UART_SetConfig+0xa30>
 800cac8:	2b20      	cmp	r3, #32
 800caca:	f200 8083 	bhi.w	800cbd4 <UART_SetConfig+0xa30>
 800cace:	a201      	add	r2, pc, #4	; (adr r2, 800cad4 <UART_SetConfig+0x930>)
 800cad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cad4:	0800cb5f 	.word	0x0800cb5f
 800cad8:	0800cb79 	.word	0x0800cb79
 800cadc:	0800cbd5 	.word	0x0800cbd5
 800cae0:	0800cbd5 	.word	0x0800cbd5
 800cae4:	0800cb81 	.word	0x0800cb81
 800cae8:	0800cbd5 	.word	0x0800cbd5
 800caec:	0800cbd5 	.word	0x0800cbd5
 800caf0:	0800cbd5 	.word	0x0800cbd5
 800caf4:	0800cb91 	.word	0x0800cb91
 800caf8:	0800cbd5 	.word	0x0800cbd5
 800cafc:	0800cbd5 	.word	0x0800cbd5
 800cb00:	0800cbd5 	.word	0x0800cbd5
 800cb04:	0800cbd5 	.word	0x0800cbd5
 800cb08:	0800cbd5 	.word	0x0800cbd5
 800cb0c:	0800cbd5 	.word	0x0800cbd5
 800cb10:	0800cbd5 	.word	0x0800cbd5
 800cb14:	0800cba1 	.word	0x0800cba1
 800cb18:	0800cbd5 	.word	0x0800cbd5
 800cb1c:	0800cbd5 	.word	0x0800cbd5
 800cb20:	0800cbd5 	.word	0x0800cbd5
 800cb24:	0800cbd5 	.word	0x0800cbd5
 800cb28:	0800cbd5 	.word	0x0800cbd5
 800cb2c:	0800cbd5 	.word	0x0800cbd5
 800cb30:	0800cbd5 	.word	0x0800cbd5
 800cb34:	0800cbd5 	.word	0x0800cbd5
 800cb38:	0800cbd5 	.word	0x0800cbd5
 800cb3c:	0800cbd5 	.word	0x0800cbd5
 800cb40:	0800cbd5 	.word	0x0800cbd5
 800cb44:	0800cbd5 	.word	0x0800cbd5
 800cb48:	0800cbd5 	.word	0x0800cbd5
 800cb4c:	0800cbd5 	.word	0x0800cbd5
 800cb50:	0800cbd5 	.word	0x0800cbd5
 800cb54:	0800cbc7 	.word	0x0800cbc7
 800cb58:	2b40      	cmp	r3, #64	; 0x40
 800cb5a:	d037      	beq.n	800cbcc <UART_SetConfig+0xa28>
 800cb5c:	e03a      	b.n	800cbd4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb5e:	f7fb fdad 	bl	80086bc <HAL_RCC_GetPCLK1Freq>
 800cb62:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cb64:	e03c      	b.n	800cbe0 <UART_SetConfig+0xa3c>
 800cb66:	bf00      	nop
 800cb68:	003d0900 	.word	0x003d0900
 800cb6c:	08021ab8 	.word	0x08021ab8
 800cb70:	58024400 	.word	0x58024400
 800cb74:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb78:	f7fb fdb6 	bl	80086e8 <HAL_RCC_GetPCLK2Freq>
 800cb7c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cb7e:	e02f      	b.n	800cbe0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb80:	f107 0314 	add.w	r3, r7, #20
 800cb84:	4618      	mov	r0, r3
 800cb86:	f7fc fd1b 	bl	80095c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cb8a:	69bb      	ldr	r3, [r7, #24]
 800cb8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cb8e:	e027      	b.n	800cbe0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb90:	f107 0308 	add.w	r3, r7, #8
 800cb94:	4618      	mov	r0, r3
 800cb96:	f7fc fe67 	bl	8009868 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cb9e:	e01f      	b.n	800cbe0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cba0:	4b2c      	ldr	r3, [pc, #176]	; (800cc54 <UART_SetConfig+0xab0>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	f003 0320 	and.w	r3, r3, #32
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d009      	beq.n	800cbc0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cbac:	4b29      	ldr	r3, [pc, #164]	; (800cc54 <UART_SetConfig+0xab0>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	08db      	lsrs	r3, r3, #3
 800cbb2:	f003 0303 	and.w	r3, r3, #3
 800cbb6:	4a28      	ldr	r2, [pc, #160]	; (800cc58 <UART_SetConfig+0xab4>)
 800cbb8:	fa22 f303 	lsr.w	r3, r2, r3
 800cbbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cbbe:	e00f      	b.n	800cbe0 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800cbc0:	4b25      	ldr	r3, [pc, #148]	; (800cc58 <UART_SetConfig+0xab4>)
 800cbc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cbc4:	e00c      	b.n	800cbe0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cbc6:	4b25      	ldr	r3, [pc, #148]	; (800cc5c <UART_SetConfig+0xab8>)
 800cbc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cbca:	e009      	b.n	800cbe0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cbd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cbd2:	e005      	b.n	800cbe0 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cbd8:	2301      	movs	r3, #1
 800cbda:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cbde:	bf00      	nop
    }

    if (pclk != 0U)
 800cbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d021      	beq.n	800cc2a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbea:	4a1d      	ldr	r2, [pc, #116]	; (800cc60 <UART_SetConfig+0xabc>)
 800cbec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf4:	fbb3 f2f2 	udiv	r2, r3, r2
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	085b      	lsrs	r3, r3, #1
 800cbfe:	441a      	add	r2, r3
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc08:	b29b      	uxth	r3, r3
 800cc0a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc0e:	2b0f      	cmp	r3, #15
 800cc10:	d908      	bls.n	800cc24 <UART_SetConfig+0xa80>
 800cc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc18:	d204      	bcs.n	800cc24 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc20:	60da      	str	r2, [r3, #12]
 800cc22:	e002      	b.n	800cc2a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800cc24:	2301      	movs	r3, #1
 800cc26:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2201      	movs	r2, #1
 800cc2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2201      	movs	r2, #1
 800cc36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2200      	movs	r2, #0
 800cc44:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cc46:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3738      	adds	r7, #56	; 0x38
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bdb0      	pop	{r4, r5, r7, pc}
 800cc52:	bf00      	nop
 800cc54:	58024400 	.word	0x58024400
 800cc58:	03d09000 	.word	0x03d09000
 800cc5c:	003d0900 	.word	0x003d0900
 800cc60:	08021ab8 	.word	0x08021ab8

0800cc64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b083      	sub	sp, #12
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc70:	f003 0301 	and.w	r3, r3, #1
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d00a      	beq.n	800cc8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	685b      	ldr	r3, [r3, #4]
 800cc7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	430a      	orrs	r2, r1
 800cc8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc92:	f003 0302 	and.w	r3, r3, #2
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d00a      	beq.n	800ccb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	685b      	ldr	r3, [r3, #4]
 800cca0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	430a      	orrs	r2, r1
 800ccae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccb4:	f003 0304 	and.w	r3, r3, #4
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d00a      	beq.n	800ccd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	685b      	ldr	r3, [r3, #4]
 800ccc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	430a      	orrs	r2, r1
 800ccd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccd6:	f003 0308 	and.w	r3, r3, #8
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d00a      	beq.n	800ccf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	430a      	orrs	r2, r1
 800ccf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccf8:	f003 0310 	and.w	r3, r3, #16
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d00a      	beq.n	800cd16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	689b      	ldr	r3, [r3, #8]
 800cd06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	430a      	orrs	r2, r1
 800cd14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd1a:	f003 0320 	and.w	r3, r3, #32
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d00a      	beq.n	800cd38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	689b      	ldr	r3, [r3, #8]
 800cd28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	430a      	orrs	r2, r1
 800cd36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d01a      	beq.n	800cd7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	430a      	orrs	r2, r1
 800cd58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd62:	d10a      	bne.n	800cd7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	685b      	ldr	r3, [r3, #4]
 800cd6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	430a      	orrs	r2, r1
 800cd78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d00a      	beq.n	800cd9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	430a      	orrs	r2, r1
 800cd9a:	605a      	str	r2, [r3, #4]
  }
}
 800cd9c:	bf00      	nop
 800cd9e:	370c      	adds	r7, #12
 800cda0:	46bd      	mov	sp, r7
 800cda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda6:	4770      	bx	lr

0800cda8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b086      	sub	sp, #24
 800cdac:	af02      	add	r7, sp, #8
 800cdae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cdb8:	f7f5 fbc4 	bl	8002544 <HAL_GetTick>
 800cdbc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f003 0308 	and.w	r3, r3, #8
 800cdc8:	2b08      	cmp	r3, #8
 800cdca:	d10e      	bne.n	800cdea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cdcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cdd0:	9300      	str	r3, [sp, #0]
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f000 f82f 	bl	800ce3e <UART_WaitOnFlagUntilTimeout>
 800cde0:	4603      	mov	r3, r0
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d001      	beq.n	800cdea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cde6:	2303      	movs	r3, #3
 800cde8:	e025      	b.n	800ce36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f003 0304 	and.w	r3, r3, #4
 800cdf4:	2b04      	cmp	r3, #4
 800cdf6:	d10e      	bne.n	800ce16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cdf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cdfc:	9300      	str	r3, [sp, #0]
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	2200      	movs	r2, #0
 800ce02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f000 f819 	bl	800ce3e <UART_WaitOnFlagUntilTimeout>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d001      	beq.n	800ce16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce12:	2303      	movs	r3, #3
 800ce14:	e00f      	b.n	800ce36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2220      	movs	r2, #32
 800ce1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2220      	movs	r2, #32
 800ce22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ce34:	2300      	movs	r3, #0
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3710      	adds	r7, #16
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}

0800ce3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ce3e:	b580      	push	{r7, lr}
 800ce40:	b084      	sub	sp, #16
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	60f8      	str	r0, [r7, #12]
 800ce46:	60b9      	str	r1, [r7, #8]
 800ce48:	603b      	str	r3, [r7, #0]
 800ce4a:	4613      	mov	r3, r2
 800ce4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce4e:	e062      	b.n	800cf16 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce50:	69bb      	ldr	r3, [r7, #24]
 800ce52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce56:	d05e      	beq.n	800cf16 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce58:	f7f5 fb74 	bl	8002544 <HAL_GetTick>
 800ce5c:	4602      	mov	r2, r0
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	1ad3      	subs	r3, r2, r3
 800ce62:	69ba      	ldr	r2, [r7, #24]
 800ce64:	429a      	cmp	r2, r3
 800ce66:	d302      	bcc.n	800ce6e <UART_WaitOnFlagUntilTimeout+0x30>
 800ce68:	69bb      	ldr	r3, [r7, #24]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d11d      	bne.n	800ceaa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	681a      	ldr	r2, [r3, #0]
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ce7c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	689a      	ldr	r2, [r3, #8]
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f022 0201 	bic.w	r2, r2, #1
 800ce8c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	2220      	movs	r2, #32
 800ce92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	2220      	movs	r2, #32
 800ce9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	2200      	movs	r2, #0
 800cea2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800cea6:	2303      	movs	r3, #3
 800cea8:	e045      	b.n	800cf36 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	f003 0304 	and.w	r3, r3, #4
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d02e      	beq.n	800cf16 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	69db      	ldr	r3, [r3, #28]
 800cebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cec2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cec6:	d126      	bne.n	800cf16 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ced0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	681a      	ldr	r2, [r3, #0]
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cee0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	689a      	ldr	r2, [r3, #8]
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f022 0201 	bic.w	r2, r2, #1
 800cef0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	2220      	movs	r2, #32
 800cef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	2220      	movs	r2, #32
 800cefe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	2220      	movs	r2, #32
 800cf06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cf12:	2303      	movs	r3, #3
 800cf14:	e00f      	b.n	800cf36 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	69da      	ldr	r2, [r3, #28]
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	4013      	ands	r3, r2
 800cf20:	68ba      	ldr	r2, [r7, #8]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	bf0c      	ite	eq
 800cf26:	2301      	moveq	r3, #1
 800cf28:	2300      	movne	r3, #0
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	461a      	mov	r2, r3
 800cf2e:	79fb      	ldrb	r3, [r7, #7]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d08d      	beq.n	800ce50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cf34:	2300      	movs	r3, #0
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3710      	adds	r7, #16
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}
	...

0800cf40 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b084      	sub	sp, #16
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	60f8      	str	r0, [r7, #12]
 800cf48:	60b9      	str	r1, [r7, #8]
 800cf4a:	4613      	mov	r3, r2
 800cf4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	68ba      	ldr	r2, [r7, #8]
 800cf52:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	88fa      	ldrh	r2, [r7, #6]
 800cf58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	2222      	movs	r2, #34	; 0x22
 800cf68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d02c      	beq.n	800cfce <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf78:	4a25      	ldr	r2, [pc, #148]	; (800d010 <UART_Start_Receive_DMA+0xd0>)
 800cf7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf80:	4a24      	ldr	r2, [pc, #144]	; (800d014 <UART_Start_Receive_DMA+0xd4>)
 800cf82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf88:	4a23      	ldr	r2, [pc, #140]	; (800d018 <UART_Start_Receive_DMA+0xd8>)
 800cf8a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf90:	2200      	movs	r2, #0
 800cf92:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	3324      	adds	r3, #36	; 0x24
 800cf9e:	4619      	mov	r1, r3
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfa4:	461a      	mov	r2, r3
 800cfa6:	88fb      	ldrh	r3, [r7, #6]
 800cfa8:	f7f5 fff0 	bl	8002f8c <HAL_DMA_Start_IT>
 800cfac:	4603      	mov	r3, r0
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d00d      	beq.n	800cfce <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	2210      	movs	r2, #16
 800cfb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	2220      	movs	r2, #32
 800cfc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800cfca:	2301      	movs	r3, #1
 800cfcc:	e01c      	b.n	800d008 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	681a      	ldr	r2, [r3, #0]
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cfe4:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	689a      	ldr	r2, [r3, #8]
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f042 0201 	orr.w	r2, r2, #1
 800cff4:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	689a      	ldr	r2, [r3, #8]
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d004:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800d006:	2300      	movs	r3, #0
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3710      	adds	r7, #16
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}
 800d010:	0800d0bd 	.word	0x0800d0bd
 800d014:	0800d153 	.word	0x0800d153
 800d018:	0800d18b 	.word	0x0800d18b

0800d01c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d01c:	b480      	push	{r7}
 800d01e:	b083      	sub	sp, #12
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	681a      	ldr	r2, [r3, #0]
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800d032:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	689a      	ldr	r2, [r3, #8]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800d042:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2220      	movs	r2, #32
 800d048:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d04c:	bf00      	nop
 800d04e:	370c      	adds	r7, #12
 800d050:	46bd      	mov	sp, r7
 800d052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d056:	4770      	bx	lr

0800d058 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d058:	b480      	push	{r7}
 800d05a:	b083      	sub	sp, #12
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	681a      	ldr	r2, [r3, #0]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d06e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	6899      	ldr	r1, [r3, #8]
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681a      	ldr	r2, [r3, #0]
 800d07a:	4b0f      	ldr	r3, [pc, #60]	; (800d0b8 <UART_EndRxTransfer+0x60>)
 800d07c:	400b      	ands	r3, r1
 800d07e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d084:	2b01      	cmp	r3, #1
 800d086:	d107      	bne.n	800d098 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f022 0210 	bic.w	r2, r2, #16
 800d096:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2220      	movs	r2, #32
 800d09c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d0ac:	bf00      	nop
 800d0ae:	370c      	adds	r7, #12
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b6:	4770      	bx	lr
 800d0b8:	effffffe 	.word	0xeffffffe

0800d0bc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b084      	sub	sp, #16
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0c8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	69db      	ldr	r3, [r3, #28]
 800d0ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0d2:	d02b      	beq.n	800d12c <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d0ea:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	689a      	ldr	r2, [r3, #8]
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f022 0201 	bic.w	r2, r2, #1
 800d0fa:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	689a      	ldr	r2, [r3, #8]
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d10a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	2220      	movs	r2, #32
 800d110:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d118:	2b01      	cmp	r3, #1
 800d11a:	d107      	bne.n	800d12c <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	681a      	ldr	r2, [r3, #0]
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f022 0210 	bic.w	r2, r2, #16
 800d12a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d130:	2b01      	cmp	r3, #1
 800d132:	d107      	bne.n	800d144 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d13a:	4619      	mov	r1, r3
 800d13c:	68f8      	ldr	r0, [r7, #12]
 800d13e:	f7ff f825 	bl	800c18c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d142:	e002      	b.n	800d14a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800d144:	68f8      	ldr	r0, [r7, #12]
 800d146:	f7ff f803 	bl	800c150 <HAL_UART_RxCpltCallback>
}
 800d14a:	bf00      	nop
 800d14c:	3710      	adds	r7, #16
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}

0800d152 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d152:	b580      	push	{r7, lr}
 800d154:	b084      	sub	sp, #16
 800d156:	af00      	add	r7, sp, #0
 800d158:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d15e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d164:	2b01      	cmp	r3, #1
 800d166:	d109      	bne.n	800d17c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d16e:	085b      	lsrs	r3, r3, #1
 800d170:	b29b      	uxth	r3, r3
 800d172:	4619      	mov	r1, r3
 800d174:	68f8      	ldr	r0, [r7, #12]
 800d176:	f7ff f809 	bl	800c18c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d17a:	e002      	b.n	800d182 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800d17c:	68f8      	ldr	r0, [r7, #12]
 800d17e:	f7fe fff1 	bl	800c164 <HAL_UART_RxHalfCpltCallback>
}
 800d182:	bf00      	nop
 800d184:	3710      	adds	r7, #16
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}

0800d18a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d18a:	b580      	push	{r7, lr}
 800d18c:	b086      	sub	sp, #24
 800d18e:	af00      	add	r7, sp, #0
 800d190:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d196:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d19e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1a6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	689b      	ldr	r3, [r3, #8]
 800d1ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1b2:	2b80      	cmp	r3, #128	; 0x80
 800d1b4:	d109      	bne.n	800d1ca <UART_DMAError+0x40>
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	2b21      	cmp	r3, #33	; 0x21
 800d1ba:	d106      	bne.n	800d1ca <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d1c4:	6978      	ldr	r0, [r7, #20]
 800d1c6:	f7ff ff29 	bl	800d01c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	689b      	ldr	r3, [r3, #8]
 800d1d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1d4:	2b40      	cmp	r3, #64	; 0x40
 800d1d6:	d109      	bne.n	800d1ec <UART_DMAError+0x62>
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	2b22      	cmp	r3, #34	; 0x22
 800d1dc:	d106      	bne.n	800d1ec <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d1e6:	6978      	ldr	r0, [r7, #20]
 800d1e8:	f7ff ff36 	bl	800d058 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d1f2:	f043 0210 	orr.w	r2, r3, #16
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d1fc:	6978      	ldr	r0, [r7, #20]
 800d1fe:	f7fe ffbb 	bl	800c178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d202:	bf00      	nop
 800d204:	3718      	adds	r7, #24
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}

0800d20a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d20a:	b580      	push	{r7, lr}
 800d20c:	b084      	sub	sp, #16
 800d20e:	af00      	add	r7, sp, #0
 800d210:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d216:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	2200      	movs	r2, #0
 800d21c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2200      	movs	r2, #0
 800d224:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d228:	68f8      	ldr	r0, [r7, #12]
 800d22a:	f7fe ffa5 	bl	800c178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d22e:	bf00      	nop
 800d230:	3710      	adds	r7, #16
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}

0800d236 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d236:	b580      	push	{r7, lr}
 800d238:	b082      	sub	sp, #8
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	681a      	ldr	r2, [r3, #0]
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d24c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2220      	movs	r2, #32
 800d252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2200      	movs	r2, #0
 800d25a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f7fe ff6d 	bl	800c13c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d262:	bf00      	nop
 800d264:	3708      	adds	r7, #8
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}

0800d26a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d26a:	b480      	push	{r7}
 800d26c:	b083      	sub	sp, #12
 800d26e:	af00      	add	r7, sp, #0
 800d270:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d272:	bf00      	nop
 800d274:	370c      	adds	r7, #12
 800d276:	46bd      	mov	sp, r7
 800d278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27c:	4770      	bx	lr

0800d27e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d27e:	b480      	push	{r7}
 800d280:	b083      	sub	sp, #12
 800d282:	af00      	add	r7, sp, #0
 800d284:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d286:	bf00      	nop
 800d288:	370c      	adds	r7, #12
 800d28a:	46bd      	mov	sp, r7
 800d28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d290:	4770      	bx	lr

0800d292 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d292:	b480      	push	{r7}
 800d294:	b083      	sub	sp, #12
 800d296:	af00      	add	r7, sp, #0
 800d298:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d29a:	bf00      	nop
 800d29c:	370c      	adds	r7, #12
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a4:	4770      	bx	lr

0800d2a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d2a6:	b480      	push	{r7}
 800d2a8:	b085      	sub	sp, #20
 800d2aa:	af00      	add	r7, sp, #0
 800d2ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d2b4:	2b01      	cmp	r3, #1
 800d2b6:	d101      	bne.n	800d2bc <HAL_UARTEx_DisableFifoMode+0x16>
 800d2b8:	2302      	movs	r3, #2
 800d2ba:	e027      	b.n	800d30c <HAL_UARTEx_DisableFifoMode+0x66>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2201      	movs	r2, #1
 800d2c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2224      	movs	r2, #36	; 0x24
 800d2c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	681a      	ldr	r2, [r3, #0]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	f022 0201 	bic.w	r2, r2, #1
 800d2e2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d2ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	68fa      	ldr	r2, [r7, #12]
 800d2f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2220      	movs	r2, #32
 800d2fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2200      	movs	r2, #0
 800d306:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d30a:	2300      	movs	r3, #0
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	3714      	adds	r7, #20
 800d310:	46bd      	mov	sp, r7
 800d312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d316:	4770      	bx	lr

0800d318 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b084      	sub	sp, #16
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
 800d320:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d101      	bne.n	800d330 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d32c:	2302      	movs	r3, #2
 800d32e:	e02d      	b.n	800d38c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2201      	movs	r2, #1
 800d334:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2224      	movs	r2, #36	; 0x24
 800d33c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	681a      	ldr	r2, [r3, #0]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f022 0201 	bic.w	r2, r2, #1
 800d356:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	689b      	ldr	r3, [r3, #8]
 800d35e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	683a      	ldr	r2, [r7, #0]
 800d368:	430a      	orrs	r2, r1
 800d36a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f000 f84f 	bl	800d410 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	68fa      	ldr	r2, [r7, #12]
 800d378:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2220      	movs	r2, #32
 800d37e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2200      	movs	r2, #0
 800d386:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d38a:	2300      	movs	r3, #0
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3710      	adds	r7, #16
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}

0800d394 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b084      	sub	sp, #16
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d3a4:	2b01      	cmp	r3, #1
 800d3a6:	d101      	bne.n	800d3ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d3a8:	2302      	movs	r3, #2
 800d3aa:	e02d      	b.n	800d408 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2224      	movs	r2, #36	; 0x24
 800d3b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	f022 0201 	bic.w	r2, r2, #1
 800d3d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	689b      	ldr	r3, [r3, #8]
 800d3da:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	683a      	ldr	r2, [r7, #0]
 800d3e4:	430a      	orrs	r2, r1
 800d3e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f000 f811 	bl	800d410 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	68fa      	ldr	r2, [r7, #12]
 800d3f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2220      	movs	r2, #32
 800d3fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2200      	movs	r2, #0
 800d402:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d406:	2300      	movs	r3, #0
}
 800d408:	4618      	mov	r0, r3
 800d40a:	3710      	adds	r7, #16
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d410:	b480      	push	{r7}
 800d412:	b085      	sub	sp, #20
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d108      	bne.n	800d432 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2201      	movs	r2, #1
 800d424:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2201      	movs	r2, #1
 800d42c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d430:	e031      	b.n	800d496 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d432:	2310      	movs	r3, #16
 800d434:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d436:	2310      	movs	r3, #16
 800d438:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	689b      	ldr	r3, [r3, #8]
 800d440:	0e5b      	lsrs	r3, r3, #25
 800d442:	b2db      	uxtb	r3, r3
 800d444:	f003 0307 	and.w	r3, r3, #7
 800d448:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	689b      	ldr	r3, [r3, #8]
 800d450:	0f5b      	lsrs	r3, r3, #29
 800d452:	b2db      	uxtb	r3, r3
 800d454:	f003 0307 	and.w	r3, r3, #7
 800d458:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d45a:	7bbb      	ldrb	r3, [r7, #14]
 800d45c:	7b3a      	ldrb	r2, [r7, #12]
 800d45e:	4911      	ldr	r1, [pc, #68]	; (800d4a4 <UARTEx_SetNbDataToProcess+0x94>)
 800d460:	5c8a      	ldrb	r2, [r1, r2]
 800d462:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d466:	7b3a      	ldrb	r2, [r7, #12]
 800d468:	490f      	ldr	r1, [pc, #60]	; (800d4a8 <UARTEx_SetNbDataToProcess+0x98>)
 800d46a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d46c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d470:	b29a      	uxth	r2, r3
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d478:	7bfb      	ldrb	r3, [r7, #15]
 800d47a:	7b7a      	ldrb	r2, [r7, #13]
 800d47c:	4909      	ldr	r1, [pc, #36]	; (800d4a4 <UARTEx_SetNbDataToProcess+0x94>)
 800d47e:	5c8a      	ldrb	r2, [r1, r2]
 800d480:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d484:	7b7a      	ldrb	r2, [r7, #13]
 800d486:	4908      	ldr	r1, [pc, #32]	; (800d4a8 <UARTEx_SetNbDataToProcess+0x98>)
 800d488:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d48a:	fb93 f3f2 	sdiv	r3, r3, r2
 800d48e:	b29a      	uxth	r2, r3
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d496:	bf00      	nop
 800d498:	3714      	adds	r7, #20
 800d49a:	46bd      	mov	sp, r7
 800d49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a0:	4770      	bx	lr
 800d4a2:	bf00      	nop
 800d4a4:	08021ad0 	.word	0x08021ad0
 800d4a8:	08021ad8 	.word	0x08021ad8

0800d4ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d4ac:	b084      	sub	sp, #16
 800d4ae:	b580      	push	{r7, lr}
 800d4b0:	b084      	sub	sp, #16
 800d4b2:	af00      	add	r7, sp, #0
 800d4b4:	6078      	str	r0, [r7, #4]
 800d4b6:	f107 001c 	add.w	r0, r7, #28
 800d4ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c0:	2b01      	cmp	r3, #1
 800d4c2:	d120      	bne.n	800d506 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	68da      	ldr	r2, [r3, #12]
 800d4d4:	4b2a      	ldr	r3, [pc, #168]	; (800d580 <USB_CoreInit+0xd4>)
 800d4d6:	4013      	ands	r3, r2
 800d4d8:	687a      	ldr	r2, [r7, #4]
 800d4da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	68db      	ldr	r3, [r3, #12]
 800d4e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d4e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4ea:	2b01      	cmp	r3, #1
 800d4ec:	d105      	bne.n	800d4fa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	68db      	ldr	r3, [r3, #12]
 800d4f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f000 f990 	bl	800d820 <USB_CoreReset>
 800d500:	4603      	mov	r3, r0
 800d502:	73fb      	strb	r3, [r7, #15]
 800d504:	e01a      	b.n	800d53c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	68db      	ldr	r3, [r3, #12]
 800d50a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f000 f984 	bl	800d820 <USB_CoreReset>
 800d518:	4603      	mov	r3, r0
 800d51a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d51c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d106      	bne.n	800d530 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d526:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	639a      	str	r2, [r3, #56]	; 0x38
 800d52e:	e005      	b.n	800d53c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d534:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d53e:	2b01      	cmp	r3, #1
 800d540:	d116      	bne.n	800d570 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d546:	b29a      	uxth	r2, r3
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d550:	4b0c      	ldr	r3, [pc, #48]	; (800d584 <USB_CoreInit+0xd8>)
 800d552:	4313      	orrs	r3, r2
 800d554:	687a      	ldr	r2, [r7, #4]
 800d556:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	689b      	ldr	r3, [r3, #8]
 800d55c:	f043 0206 	orr.w	r2, r3, #6
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	689b      	ldr	r3, [r3, #8]
 800d568:	f043 0220 	orr.w	r2, r3, #32
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d570:	7bfb      	ldrb	r3, [r7, #15]
}
 800d572:	4618      	mov	r0, r3
 800d574:	3710      	adds	r7, #16
 800d576:	46bd      	mov	sp, r7
 800d578:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d57c:	b004      	add	sp, #16
 800d57e:	4770      	bx	lr
 800d580:	ffbdffbf 	.word	0xffbdffbf
 800d584:	03ee0000 	.word	0x03ee0000

0800d588 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d588:	b480      	push	{r7}
 800d58a:	b083      	sub	sp, #12
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	689b      	ldr	r3, [r3, #8]
 800d594:	f043 0201 	orr.w	r2, r3, #1
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d59c:	2300      	movs	r3, #0
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	370c      	adds	r7, #12
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a8:	4770      	bx	lr

0800d5aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d5aa:	b480      	push	{r7}
 800d5ac:	b083      	sub	sp, #12
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	689b      	ldr	r3, [r3, #8]
 800d5b6:	f023 0201 	bic.w	r2, r3, #1
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d5be:	2300      	movs	r3, #0
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	370c      	adds	r7, #12
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr

0800d5cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b082      	sub	sp, #8
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	68db      	ldr	r3, [r3, #12]
 800d5dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d5e4:	78fb      	ldrb	r3, [r7, #3]
 800d5e6:	2b01      	cmp	r3, #1
 800d5e8:	d106      	bne.n	800d5f8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	68db      	ldr	r3, [r3, #12]
 800d5ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	60da      	str	r2, [r3, #12]
 800d5f6:	e00b      	b.n	800d610 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d5f8:	78fb      	ldrb	r3, [r7, #3]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d106      	bne.n	800d60c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	68db      	ldr	r3, [r3, #12]
 800d602:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	60da      	str	r2, [r3, #12]
 800d60a:	e001      	b.n	800d610 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d60c:	2301      	movs	r3, #1
 800d60e:	e003      	b.n	800d618 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d610:	2032      	movs	r0, #50	; 0x32
 800d612:	f7f4 ffa3 	bl	800255c <HAL_Delay>

  return HAL_OK;
 800d616:	2300      	movs	r3, #0
}
 800d618:	4618      	mov	r0, r3
 800d61a:	3708      	adds	r7, #8
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}

0800d620 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d620:	b480      	push	{r7}
 800d622:	b085      	sub	sp, #20
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d62a:	2300      	movs	r3, #0
 800d62c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	019b      	lsls	r3, r3, #6
 800d632:	f043 0220 	orr.w	r2, r3, #32
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	3301      	adds	r3, #1
 800d63e:	60fb      	str	r3, [r7, #12]
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	4a09      	ldr	r2, [pc, #36]	; (800d668 <USB_FlushTxFifo+0x48>)
 800d644:	4293      	cmp	r3, r2
 800d646:	d901      	bls.n	800d64c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d648:	2303      	movs	r3, #3
 800d64a:	e006      	b.n	800d65a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	691b      	ldr	r3, [r3, #16]
 800d650:	f003 0320 	and.w	r3, r3, #32
 800d654:	2b20      	cmp	r3, #32
 800d656:	d0f0      	beq.n	800d63a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d658:	2300      	movs	r3, #0
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3714      	adds	r7, #20
 800d65e:	46bd      	mov	sp, r7
 800d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d664:	4770      	bx	lr
 800d666:	bf00      	nop
 800d668:	00030d40 	.word	0x00030d40

0800d66c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b085      	sub	sp, #20
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d674:	2300      	movs	r3, #0
 800d676:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2210      	movs	r2, #16
 800d67c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	3301      	adds	r3, #1
 800d682:	60fb      	str	r3, [r7, #12]
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	4a09      	ldr	r2, [pc, #36]	; (800d6ac <USB_FlushRxFifo+0x40>)
 800d688:	4293      	cmp	r3, r2
 800d68a:	d901      	bls.n	800d690 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d68c:	2303      	movs	r3, #3
 800d68e:	e006      	b.n	800d69e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	691b      	ldr	r3, [r3, #16]
 800d694:	f003 0310 	and.w	r3, r3, #16
 800d698:	2b10      	cmp	r3, #16
 800d69a:	d0f0      	beq.n	800d67e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d69c:	2300      	movs	r3, #0
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3714      	adds	r7, #20
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a8:	4770      	bx	lr
 800d6aa:	bf00      	nop
 800d6ac:	00030d40 	.word	0x00030d40

0800d6b0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b089      	sub	sp, #36	; 0x24
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	60f8      	str	r0, [r7, #12]
 800d6b8:	60b9      	str	r1, [r7, #8]
 800d6ba:	4611      	mov	r1, r2
 800d6bc:	461a      	mov	r2, r3
 800d6be:	460b      	mov	r3, r1
 800d6c0:	71fb      	strb	r3, [r7, #7]
 800d6c2:	4613      	mov	r3, r2
 800d6c4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d6ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d123      	bne.n	800d71e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d6d6:	88bb      	ldrh	r3, [r7, #4]
 800d6d8:	3303      	adds	r3, #3
 800d6da:	089b      	lsrs	r3, r3, #2
 800d6dc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d6de:	2300      	movs	r3, #0
 800d6e0:	61bb      	str	r3, [r7, #24]
 800d6e2:	e018      	b.n	800d716 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d6e4:	79fb      	ldrb	r3, [r7, #7]
 800d6e6:	031a      	lsls	r2, r3, #12
 800d6e8:	697b      	ldr	r3, [r7, #20]
 800d6ea:	4413      	add	r3, r2
 800d6ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6f0:	461a      	mov	r2, r3
 800d6f2:	69fb      	ldr	r3, [r7, #28]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d6f8:	69fb      	ldr	r3, [r7, #28]
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d6fe:	69fb      	ldr	r3, [r7, #28]
 800d700:	3301      	adds	r3, #1
 800d702:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d704:	69fb      	ldr	r3, [r7, #28]
 800d706:	3301      	adds	r3, #1
 800d708:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d70a:	69fb      	ldr	r3, [r7, #28]
 800d70c:	3301      	adds	r3, #1
 800d70e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d710:	69bb      	ldr	r3, [r7, #24]
 800d712:	3301      	adds	r3, #1
 800d714:	61bb      	str	r3, [r7, #24]
 800d716:	69ba      	ldr	r2, [r7, #24]
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	429a      	cmp	r2, r3
 800d71c:	d3e2      	bcc.n	800d6e4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d71e:	2300      	movs	r3, #0
}
 800d720:	4618      	mov	r0, r3
 800d722:	3724      	adds	r7, #36	; 0x24
 800d724:	46bd      	mov	sp, r7
 800d726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72a:	4770      	bx	lr

0800d72c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b08b      	sub	sp, #44	; 0x2c
 800d730:	af00      	add	r7, sp, #0
 800d732:	60f8      	str	r0, [r7, #12]
 800d734:	60b9      	str	r1, [r7, #8]
 800d736:	4613      	mov	r3, r2
 800d738:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d742:	88fb      	ldrh	r3, [r7, #6]
 800d744:	089b      	lsrs	r3, r3, #2
 800d746:	b29b      	uxth	r3, r3
 800d748:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d74a:	88fb      	ldrh	r3, [r7, #6]
 800d74c:	f003 0303 	and.w	r3, r3, #3
 800d750:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d752:	2300      	movs	r3, #0
 800d754:	623b      	str	r3, [r7, #32]
 800d756:	e014      	b.n	800d782 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d758:	69bb      	ldr	r3, [r7, #24]
 800d75a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d75e:	681a      	ldr	r2, [r3, #0]
 800d760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d762:	601a      	str	r2, [r3, #0]
    pDest++;
 800d764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d766:	3301      	adds	r3, #1
 800d768:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d76c:	3301      	adds	r3, #1
 800d76e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d772:	3301      	adds	r3, #1
 800d774:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d778:	3301      	adds	r3, #1
 800d77a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800d77c:	6a3b      	ldr	r3, [r7, #32]
 800d77e:	3301      	adds	r3, #1
 800d780:	623b      	str	r3, [r7, #32]
 800d782:	6a3a      	ldr	r2, [r7, #32]
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	429a      	cmp	r2, r3
 800d788:	d3e6      	bcc.n	800d758 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d78a:	8bfb      	ldrh	r3, [r7, #30]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d01e      	beq.n	800d7ce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d790:	2300      	movs	r3, #0
 800d792:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d794:	69bb      	ldr	r3, [r7, #24]
 800d796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d79a:	461a      	mov	r2, r3
 800d79c:	f107 0310 	add.w	r3, r7, #16
 800d7a0:	6812      	ldr	r2, [r2, #0]
 800d7a2:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d7a4:	693a      	ldr	r2, [r7, #16]
 800d7a6:	6a3b      	ldr	r3, [r7, #32]
 800d7a8:	b2db      	uxtb	r3, r3
 800d7aa:	00db      	lsls	r3, r3, #3
 800d7ac:	fa22 f303 	lsr.w	r3, r2, r3
 800d7b0:	b2da      	uxtb	r2, r3
 800d7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b4:	701a      	strb	r2, [r3, #0]
      i++;
 800d7b6:	6a3b      	ldr	r3, [r7, #32]
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	623b      	str	r3, [r7, #32]
      pDest++;
 800d7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7be:	3301      	adds	r3, #1
 800d7c0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d7c2:	8bfb      	ldrh	r3, [r7, #30]
 800d7c4:	3b01      	subs	r3, #1
 800d7c6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d7c8:	8bfb      	ldrh	r3, [r7, #30]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d1ea      	bne.n	800d7a4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	372c      	adds	r7, #44	; 0x2c
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7da:	4770      	bx	lr

0800d7dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b085      	sub	sp, #20
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	695b      	ldr	r3, [r3, #20]
 800d7e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	699b      	ldr	r3, [r3, #24]
 800d7ee:	68fa      	ldr	r2, [r7, #12]
 800d7f0:	4013      	ands	r3, r2
 800d7f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3714      	adds	r7, #20
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d800:	4770      	bx	lr

0800d802 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d802:	b480      	push	{r7}
 800d804:	b083      	sub	sp, #12
 800d806:	af00      	add	r7, sp, #0
 800d808:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	695b      	ldr	r3, [r3, #20]
 800d80e:	f003 0301 	and.w	r3, r3, #1
}
 800d812:	4618      	mov	r0, r3
 800d814:	370c      	adds	r7, #12
 800d816:	46bd      	mov	sp, r7
 800d818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81c:	4770      	bx	lr
	...

0800d820 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d820:	b480      	push	{r7}
 800d822:	b085      	sub	sp, #20
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d828:	2300      	movs	r3, #0
 800d82a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	3301      	adds	r3, #1
 800d830:	60fb      	str	r3, [r7, #12]
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	4a13      	ldr	r2, [pc, #76]	; (800d884 <USB_CoreReset+0x64>)
 800d836:	4293      	cmp	r3, r2
 800d838:	d901      	bls.n	800d83e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d83a:	2303      	movs	r3, #3
 800d83c:	e01b      	b.n	800d876 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	691b      	ldr	r3, [r3, #16]
 800d842:	2b00      	cmp	r3, #0
 800d844:	daf2      	bge.n	800d82c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d846:	2300      	movs	r3, #0
 800d848:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	691b      	ldr	r3, [r3, #16]
 800d84e:	f043 0201 	orr.w	r2, r3, #1
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	3301      	adds	r3, #1
 800d85a:	60fb      	str	r3, [r7, #12]
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	4a09      	ldr	r2, [pc, #36]	; (800d884 <USB_CoreReset+0x64>)
 800d860:	4293      	cmp	r3, r2
 800d862:	d901      	bls.n	800d868 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d864:	2303      	movs	r3, #3
 800d866:	e006      	b.n	800d876 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	691b      	ldr	r3, [r3, #16]
 800d86c:	f003 0301 	and.w	r3, r3, #1
 800d870:	2b01      	cmp	r3, #1
 800d872:	d0f0      	beq.n	800d856 <USB_CoreReset+0x36>

  return HAL_OK;
 800d874:	2300      	movs	r3, #0
}
 800d876:	4618      	mov	r0, r3
 800d878:	3714      	adds	r7, #20
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr
 800d882:	bf00      	nop
 800d884:	00030d40 	.word	0x00030d40

0800d888 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d888:	b084      	sub	sp, #16
 800d88a:	b580      	push	{r7, lr}
 800d88c:	b084      	sub	sp, #16
 800d88e:	af00      	add	r7, sp, #0
 800d890:	6078      	str	r0, [r7, #4]
 800d892:	f107 001c 	add.w	r0, r7, #28
 800d896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d8a4:	461a      	mov	r2, r3
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d018      	beq.n	800d900 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800d8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d0:	2b01      	cmp	r3, #1
 800d8d2:	d10a      	bne.n	800d8ea <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	68ba      	ldr	r2, [r7, #8]
 800d8de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d8e2:	f043 0304 	orr.w	r3, r3, #4
 800d8e6:	6013      	str	r3, [r2, #0]
 800d8e8:	e014      	b.n	800d914 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	68ba      	ldr	r2, [r7, #8]
 800d8f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d8f8:	f023 0304 	bic.w	r3, r3, #4
 800d8fc:	6013      	str	r3, [r2, #0]
 800d8fe:	e009      	b.n	800d914 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	68ba      	ldr	r2, [r7, #8]
 800d90a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d90e:	f023 0304 	bic.w	r3, r3, #4
 800d912:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800d914:	2110      	movs	r1, #16
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f7ff fe82 	bl	800d620 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f7ff fea5 	bl	800d66c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800d922:	2300      	movs	r3, #0
 800d924:	60fb      	str	r3, [r7, #12]
 800d926:	e015      	b.n	800d954 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	015a      	lsls	r2, r3, #5
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	4413      	add	r3, r2
 800d930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d934:	461a      	mov	r2, r3
 800d936:	f04f 33ff 	mov.w	r3, #4294967295
 800d93a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	015a      	lsls	r2, r3, #5
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	4413      	add	r3, r2
 800d944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d948:	461a      	mov	r2, r3
 800d94a:	2300      	movs	r3, #0
 800d94c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	3301      	adds	r3, #1
 800d952:	60fb      	str	r3, [r7, #12]
 800d954:	6a3b      	ldr	r3, [r7, #32]
 800d956:	68fa      	ldr	r2, [r7, #12]
 800d958:	429a      	cmp	r2, r3
 800d95a:	d3e5      	bcc.n	800d928 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800d95c:	2101      	movs	r1, #1
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f000 f882 	bl	800da68 <USB_DriveVbus>

  HAL_Delay(200U);
 800d964:	20c8      	movs	r0, #200	; 0xc8
 800d966:	f7f4 fdf9 	bl	800255c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2200      	movs	r2, #0
 800d96e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f04f 32ff 	mov.w	r2, #4294967295
 800d976:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d97c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d980:	2b00      	cmp	r3, #0
 800d982:	d00b      	beq.n	800d99c <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d98a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	4a14      	ldr	r2, [pc, #80]	; (800d9e0 <USB_HostInit+0x158>)
 800d990:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	4a13      	ldr	r2, [pc, #76]	; (800d9e4 <USB_HostInit+0x15c>)
 800d996:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800d99a:	e009      	b.n	800d9b0 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2280      	movs	r2, #128	; 0x80
 800d9a0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	4a10      	ldr	r2, [pc, #64]	; (800d9e8 <USB_HostInit+0x160>)
 800d9a6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	4a10      	ldr	r2, [pc, #64]	; (800d9ec <USB_HostInit+0x164>)
 800d9ac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d105      	bne.n	800d9c2 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	699b      	ldr	r3, [r3, #24]
 800d9ba:	f043 0210 	orr.w	r2, r3, #16
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	699a      	ldr	r2, [r3, #24]
 800d9c6:	4b0a      	ldr	r3, [pc, #40]	; (800d9f0 <USB_HostInit+0x168>)
 800d9c8:	4313      	orrs	r3, r2
 800d9ca:	687a      	ldr	r2, [r7, #4]
 800d9cc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800d9ce:	2300      	movs	r3, #0
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3710      	adds	r7, #16
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d9da:	b004      	add	sp, #16
 800d9dc:	4770      	bx	lr
 800d9de:	bf00      	nop
 800d9e0:	01000200 	.word	0x01000200
 800d9e4:	00e00300 	.word	0x00e00300
 800d9e8:	00600080 	.word	0x00600080
 800d9ec:	004000e0 	.word	0x004000e0
 800d9f0:	a3200008 	.word	0xa3200008

0800d9f4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b085      	sub	sp, #20
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	460b      	mov	r3, r1
 800d9fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	68fa      	ldr	r2, [r7, #12]
 800da0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800da12:	f023 0303 	bic.w	r3, r3, #3
 800da16:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da1e:	681a      	ldr	r2, [r3, #0]
 800da20:	78fb      	ldrb	r3, [r7, #3]
 800da22:	f003 0303 	and.w	r3, r3, #3
 800da26:	68f9      	ldr	r1, [r7, #12]
 800da28:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800da2c:	4313      	orrs	r3, r2
 800da2e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800da30:	78fb      	ldrb	r3, [r7, #3]
 800da32:	2b01      	cmp	r3, #1
 800da34:	d107      	bne.n	800da46 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da3c:	461a      	mov	r2, r3
 800da3e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800da42:	6053      	str	r3, [r2, #4]
 800da44:	e009      	b.n	800da5a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800da46:	78fb      	ldrb	r3, [r7, #3]
 800da48:	2b02      	cmp	r3, #2
 800da4a:	d106      	bne.n	800da5a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da52:	461a      	mov	r2, r3
 800da54:	f241 7370 	movw	r3, #6000	; 0x1770
 800da58:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800da5a:	2300      	movs	r3, #0
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	3714      	adds	r7, #20
 800da60:	46bd      	mov	sp, r7
 800da62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da66:	4770      	bx	lr

0800da68 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800da68:	b480      	push	{r7}
 800da6a:	b085      	sub	sp, #20
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	460b      	mov	r3, r1
 800da72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800da78:	2300      	movs	r3, #0
 800da7a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800da8c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800da94:	2b00      	cmp	r3, #0
 800da96:	d109      	bne.n	800daac <USB_DriveVbus+0x44>
 800da98:	78fb      	ldrb	r3, [r7, #3]
 800da9a:	2b01      	cmp	r3, #1
 800da9c:	d106      	bne.n	800daac <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	68fa      	ldr	r2, [r7, #12]
 800daa2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800daa6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800daaa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dab6:	d109      	bne.n	800dacc <USB_DriveVbus+0x64>
 800dab8:	78fb      	ldrb	r3, [r7, #3]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d106      	bne.n	800dacc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	68fa      	ldr	r2, [r7, #12]
 800dac2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800dac6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800daca:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800dacc:	2300      	movs	r3, #0
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3714      	adds	r7, #20
 800dad2:	46bd      	mov	sp, r7
 800dad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad8:	4770      	bx	lr

0800dada <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800dada:	b480      	push	{r7}
 800dadc:	b085      	sub	sp, #20
 800dade:	af00      	add	r7, sp, #0
 800dae0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800dae6:	2300      	movs	r3, #0
 800dae8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	0c5b      	lsrs	r3, r3, #17
 800daf8:	f003 0303 	and.w	r3, r3, #3
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3714      	adds	r7, #20
 800db00:	46bd      	mov	sp, r7
 800db02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db06:	4770      	bx	lr

0800db08 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800db08:	b480      	push	{r7}
 800db0a:	b085      	sub	sp, #20
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800db1a:	689b      	ldr	r3, [r3, #8]
 800db1c:	b29b      	uxth	r3, r3
}
 800db1e:	4618      	mov	r0, r3
 800db20:	3714      	adds	r7, #20
 800db22:	46bd      	mov	sp, r7
 800db24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db28:	4770      	bx	lr
	...

0800db2c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b088      	sub	sp, #32
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
 800db34:	4608      	mov	r0, r1
 800db36:	4611      	mov	r1, r2
 800db38:	461a      	mov	r2, r3
 800db3a:	4603      	mov	r3, r0
 800db3c:	70fb      	strb	r3, [r7, #3]
 800db3e:	460b      	mov	r3, r1
 800db40:	70bb      	strb	r3, [r7, #2]
 800db42:	4613      	mov	r3, r2
 800db44:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800db46:	2300      	movs	r3, #0
 800db48:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800db4e:	78fb      	ldrb	r3, [r7, #3]
 800db50:	015a      	lsls	r2, r3, #5
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	4413      	add	r3, r2
 800db56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db5a:	461a      	mov	r2, r3
 800db5c:	f04f 33ff 	mov.w	r3, #4294967295
 800db60:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800db62:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800db66:	2b03      	cmp	r3, #3
 800db68:	d87e      	bhi.n	800dc68 <USB_HC_Init+0x13c>
 800db6a:	a201      	add	r2, pc, #4	; (adr r2, 800db70 <USB_HC_Init+0x44>)
 800db6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db70:	0800db81 	.word	0x0800db81
 800db74:	0800dc2b 	.word	0x0800dc2b
 800db78:	0800db81 	.word	0x0800db81
 800db7c:	0800dbed 	.word	0x0800dbed
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800db80:	78fb      	ldrb	r3, [r7, #3]
 800db82:	015a      	lsls	r2, r3, #5
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	4413      	add	r3, r2
 800db88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db8c:	461a      	mov	r2, r3
 800db8e:	f240 439d 	movw	r3, #1181	; 0x49d
 800db92:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800db94:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	da10      	bge.n	800dbbe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800db9c:	78fb      	ldrb	r3, [r7, #3]
 800db9e:	015a      	lsls	r2, r3, #5
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	4413      	add	r3, r2
 800dba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dba8:	68db      	ldr	r3, [r3, #12]
 800dbaa:	78fa      	ldrb	r2, [r7, #3]
 800dbac:	0151      	lsls	r1, r2, #5
 800dbae:	693a      	ldr	r2, [r7, #16]
 800dbb0:	440a      	add	r2, r1
 800dbb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dbb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dbba:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800dbbc:	e057      	b.n	800dc6e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d051      	beq.n	800dc6e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800dbca:	78fb      	ldrb	r3, [r7, #3]
 800dbcc:	015a      	lsls	r2, r3, #5
 800dbce:	693b      	ldr	r3, [r7, #16]
 800dbd0:	4413      	add	r3, r2
 800dbd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbd6:	68db      	ldr	r3, [r3, #12]
 800dbd8:	78fa      	ldrb	r2, [r7, #3]
 800dbda:	0151      	lsls	r1, r2, #5
 800dbdc:	693a      	ldr	r2, [r7, #16]
 800dbde:	440a      	add	r2, r1
 800dbe0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dbe4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800dbe8:	60d3      	str	r3, [r2, #12]
      break;
 800dbea:	e040      	b.n	800dc6e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800dbec:	78fb      	ldrb	r3, [r7, #3]
 800dbee:	015a      	lsls	r2, r3, #5
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	4413      	add	r3, r2
 800dbf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbf8:	461a      	mov	r2, r3
 800dbfa:	f240 639d 	movw	r3, #1693	; 0x69d
 800dbfe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800dc00:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	da34      	bge.n	800dc72 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800dc08:	78fb      	ldrb	r3, [r7, #3]
 800dc0a:	015a      	lsls	r2, r3, #5
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	4413      	add	r3, r2
 800dc10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc14:	68db      	ldr	r3, [r3, #12]
 800dc16:	78fa      	ldrb	r2, [r7, #3]
 800dc18:	0151      	lsls	r1, r2, #5
 800dc1a:	693a      	ldr	r2, [r7, #16]
 800dc1c:	440a      	add	r2, r1
 800dc1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dc22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dc26:	60d3      	str	r3, [r2, #12]
      }

      break;
 800dc28:	e023      	b.n	800dc72 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800dc2a:	78fb      	ldrb	r3, [r7, #3]
 800dc2c:	015a      	lsls	r2, r3, #5
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	4413      	add	r3, r2
 800dc32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc36:	461a      	mov	r2, r3
 800dc38:	f240 2325 	movw	r3, #549	; 0x225
 800dc3c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800dc3e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	da17      	bge.n	800dc76 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800dc46:	78fb      	ldrb	r3, [r7, #3]
 800dc48:	015a      	lsls	r2, r3, #5
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc52:	68db      	ldr	r3, [r3, #12]
 800dc54:	78fa      	ldrb	r2, [r7, #3]
 800dc56:	0151      	lsls	r1, r2, #5
 800dc58:	693a      	ldr	r2, [r7, #16]
 800dc5a:	440a      	add	r2, r1
 800dc5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dc60:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800dc64:	60d3      	str	r3, [r2, #12]
      }
      break;
 800dc66:	e006      	b.n	800dc76 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800dc68:	2301      	movs	r3, #1
 800dc6a:	77fb      	strb	r3, [r7, #31]
      break;
 800dc6c:	e004      	b.n	800dc78 <USB_HC_Init+0x14c>
      break;
 800dc6e:	bf00      	nop
 800dc70:	e002      	b.n	800dc78 <USB_HC_Init+0x14c>
      break;
 800dc72:	bf00      	nop
 800dc74:	e000      	b.n	800dc78 <USB_HC_Init+0x14c>
      break;
 800dc76:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800dc78:	693b      	ldr	r3, [r7, #16]
 800dc7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dc7e:	699a      	ldr	r2, [r3, #24]
 800dc80:	78fb      	ldrb	r3, [r7, #3]
 800dc82:	f003 030f 	and.w	r3, r3, #15
 800dc86:	2101      	movs	r1, #1
 800dc88:	fa01 f303 	lsl.w	r3, r1, r3
 800dc8c:	6939      	ldr	r1, [r7, #16]
 800dc8e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800dc92:	4313      	orrs	r3, r2
 800dc94:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	699b      	ldr	r3, [r3, #24]
 800dc9a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800dca2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	da03      	bge.n	800dcb2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800dcaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dcae:	61bb      	str	r3, [r7, #24]
 800dcb0:	e001      	b.n	800dcb6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f7ff ff0f 	bl	800dada <USB_GetHostSpeed>
 800dcbc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800dcbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dcc2:	2b02      	cmp	r3, #2
 800dcc4:	d106      	bne.n	800dcd4 <USB_HC_Init+0x1a8>
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2b02      	cmp	r3, #2
 800dcca:	d003      	beq.n	800dcd4 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800dccc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800dcd0:	617b      	str	r3, [r7, #20]
 800dcd2:	e001      	b.n	800dcd8 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dcd8:	787b      	ldrb	r3, [r7, #1]
 800dcda:	059b      	lsls	r3, r3, #22
 800dcdc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800dce0:	78bb      	ldrb	r3, [r7, #2]
 800dce2:	02db      	lsls	r3, r3, #11
 800dce4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dce8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800dcea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dcee:	049b      	lsls	r3, r3, #18
 800dcf0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800dcf4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800dcf6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800dcf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800dcfc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800dcfe:	69bb      	ldr	r3, [r7, #24]
 800dd00:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dd02:	78fb      	ldrb	r3, [r7, #3]
 800dd04:	0159      	lsls	r1, r3, #5
 800dd06:	693b      	ldr	r3, [r7, #16]
 800dd08:	440b      	add	r3, r1
 800dd0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd0e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800dd10:	697b      	ldr	r3, [r7, #20]
 800dd12:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dd14:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800dd16:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dd1a:	2b03      	cmp	r3, #3
 800dd1c:	d10f      	bne.n	800dd3e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800dd1e:	78fb      	ldrb	r3, [r7, #3]
 800dd20:	015a      	lsls	r2, r3, #5
 800dd22:	693b      	ldr	r3, [r7, #16]
 800dd24:	4413      	add	r3, r2
 800dd26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	78fa      	ldrb	r2, [r7, #3]
 800dd2e:	0151      	lsls	r1, r2, #5
 800dd30:	693a      	ldr	r2, [r7, #16]
 800dd32:	440a      	add	r2, r1
 800dd34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dd38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dd3c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800dd3e:	7ffb      	ldrb	r3, [r7, #31]
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3720      	adds	r7, #32
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}

0800dd48 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b08c      	sub	sp, #48	; 0x30
 800dd4c:	af02      	add	r7, sp, #8
 800dd4e:	60f8      	str	r0, [r7, #12]
 800dd50:	60b9      	str	r1, [r7, #8]
 800dd52:	4613      	mov	r3, r2
 800dd54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	785b      	ldrb	r3, [r3, #1]
 800dd5e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800dd60:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd64:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d02d      	beq.n	800ddce <USB_HC_StartXfer+0x86>
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	791b      	ldrb	r3, [r3, #4]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d129      	bne.n	800ddce <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800dd7a:	79fb      	ldrb	r3, [r7, #7]
 800dd7c:	2b01      	cmp	r3, #1
 800dd7e:	d117      	bne.n	800ddb0 <USB_HC_StartXfer+0x68>
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	79db      	ldrb	r3, [r3, #7]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d003      	beq.n	800dd90 <USB_HC_StartXfer+0x48>
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	79db      	ldrb	r3, [r3, #7]
 800dd8c:	2b02      	cmp	r3, #2
 800dd8e:	d10f      	bne.n	800ddb0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800dd90:	69fb      	ldr	r3, [r7, #28]
 800dd92:	015a      	lsls	r2, r3, #5
 800dd94:	6a3b      	ldr	r3, [r7, #32]
 800dd96:	4413      	add	r3, r2
 800dd98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd9c:	68db      	ldr	r3, [r3, #12]
 800dd9e:	69fa      	ldr	r2, [r7, #28]
 800dda0:	0151      	lsls	r1, r2, #5
 800dda2:	6a3a      	ldr	r2, [r7, #32]
 800dda4:	440a      	add	r2, r1
 800dda6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ddaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ddae:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800ddb0:	79fb      	ldrb	r3, [r7, #7]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d10b      	bne.n	800ddce <USB_HC_StartXfer+0x86>
 800ddb6:	68bb      	ldr	r3, [r7, #8]
 800ddb8:	795b      	ldrb	r3, [r3, #5]
 800ddba:	2b01      	cmp	r3, #1
 800ddbc:	d107      	bne.n	800ddce <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	785b      	ldrb	r3, [r3, #1]
 800ddc2:	4619      	mov	r1, r3
 800ddc4:	68f8      	ldr	r0, [r7, #12]
 800ddc6:	f000 fa2f 	bl	800e228 <USB_DoPing>
      return HAL_OK;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	e0f8      	b.n	800dfc0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	695b      	ldr	r3, [r3, #20]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d018      	beq.n	800de08 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	695b      	ldr	r3, [r3, #20]
 800ddda:	68ba      	ldr	r2, [r7, #8]
 800dddc:	8912      	ldrh	r2, [r2, #8]
 800ddde:	4413      	add	r3, r2
 800dde0:	3b01      	subs	r3, #1
 800dde2:	68ba      	ldr	r2, [r7, #8]
 800dde4:	8912      	ldrh	r2, [r2, #8]
 800dde6:	fbb3 f3f2 	udiv	r3, r3, r2
 800ddea:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800ddec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ddee:	8b7b      	ldrh	r3, [r7, #26]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d90b      	bls.n	800de0c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800ddf4:	8b7b      	ldrh	r3, [r7, #26]
 800ddf6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ddf8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ddfa:	68ba      	ldr	r2, [r7, #8]
 800ddfc:	8912      	ldrh	r2, [r2, #8]
 800ddfe:	fb02 f203 	mul.w	r2, r2, r3
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	611a      	str	r2, [r3, #16]
 800de06:	e001      	b.n	800de0c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800de08:	2301      	movs	r3, #1
 800de0a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800de0c:	68bb      	ldr	r3, [r7, #8]
 800de0e:	78db      	ldrb	r3, [r3, #3]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d007      	beq.n	800de24 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800de14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800de16:	68ba      	ldr	r2, [r7, #8]
 800de18:	8912      	ldrh	r2, [r2, #8]
 800de1a:	fb02 f203 	mul.w	r2, r2, r3
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	611a      	str	r2, [r3, #16]
 800de22:	e003      	b.n	800de2c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	695a      	ldr	r2, [r3, #20]
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	691b      	ldr	r3, [r3, #16]
 800de30:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800de34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800de36:	04d9      	lsls	r1, r3, #19
 800de38:	4b63      	ldr	r3, [pc, #396]	; (800dfc8 <USB_HC_StartXfer+0x280>)
 800de3a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800de3c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	7a9b      	ldrb	r3, [r3, #10]
 800de42:	075b      	lsls	r3, r3, #29
 800de44:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800de48:	69f9      	ldr	r1, [r7, #28]
 800de4a:	0148      	lsls	r0, r1, #5
 800de4c:	6a39      	ldr	r1, [r7, #32]
 800de4e:	4401      	add	r1, r0
 800de50:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800de54:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800de56:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800de58:	79fb      	ldrb	r3, [r7, #7]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d009      	beq.n	800de72 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	68d9      	ldr	r1, [r3, #12]
 800de62:	69fb      	ldr	r3, [r7, #28]
 800de64:	015a      	lsls	r2, r3, #5
 800de66:	6a3b      	ldr	r3, [r7, #32]
 800de68:	4413      	add	r3, r2
 800de6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de6e:	460a      	mov	r2, r1
 800de70:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800de72:	6a3b      	ldr	r3, [r7, #32]
 800de74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800de78:	689b      	ldr	r3, [r3, #8]
 800de7a:	f003 0301 	and.w	r3, r3, #1
 800de7e:	2b00      	cmp	r3, #0
 800de80:	bf0c      	ite	eq
 800de82:	2301      	moveq	r3, #1
 800de84:	2300      	movne	r3, #0
 800de86:	b2db      	uxtb	r3, r3
 800de88:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800de8a:	69fb      	ldr	r3, [r7, #28]
 800de8c:	015a      	lsls	r2, r3, #5
 800de8e:	6a3b      	ldr	r3, [r7, #32]
 800de90:	4413      	add	r3, r2
 800de92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	69fa      	ldr	r2, [r7, #28]
 800de9a:	0151      	lsls	r1, r2, #5
 800de9c:	6a3a      	ldr	r2, [r7, #32]
 800de9e:	440a      	add	r2, r1
 800dea0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dea4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dea8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800deaa:	69fb      	ldr	r3, [r7, #28]
 800deac:	015a      	lsls	r2, r3, #5
 800deae:	6a3b      	ldr	r3, [r7, #32]
 800deb0:	4413      	add	r3, r2
 800deb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800deb6:	681a      	ldr	r2, [r3, #0]
 800deb8:	7e7b      	ldrb	r3, [r7, #25]
 800deba:	075b      	lsls	r3, r3, #29
 800debc:	69f9      	ldr	r1, [r7, #28]
 800debe:	0148      	lsls	r0, r1, #5
 800dec0:	6a39      	ldr	r1, [r7, #32]
 800dec2:	4401      	add	r1, r0
 800dec4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800dec8:	4313      	orrs	r3, r2
 800deca:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800decc:	69fb      	ldr	r3, [r7, #28]
 800dece:	015a      	lsls	r2, r3, #5
 800ded0:	6a3b      	ldr	r3, [r7, #32]
 800ded2:	4413      	add	r3, r2
 800ded4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800dedc:	693b      	ldr	r3, [r7, #16]
 800dede:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dee2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	78db      	ldrb	r3, [r3, #3]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d004      	beq.n	800def6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800deec:	693b      	ldr	r3, [r7, #16]
 800deee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800def2:	613b      	str	r3, [r7, #16]
 800def4:	e003      	b.n	800defe <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800defc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800df04:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800df06:	69fb      	ldr	r3, [r7, #28]
 800df08:	015a      	lsls	r2, r3, #5
 800df0a:	6a3b      	ldr	r3, [r7, #32]
 800df0c:	4413      	add	r3, r2
 800df0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df12:	461a      	mov	r2, r3
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800df18:	79fb      	ldrb	r3, [r7, #7]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d001      	beq.n	800df22 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800df1e:	2300      	movs	r3, #0
 800df20:	e04e      	b.n	800dfc0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	78db      	ldrb	r3, [r3, #3]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d149      	bne.n	800dfbe <USB_HC_StartXfer+0x276>
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	695b      	ldr	r3, [r3, #20]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d045      	beq.n	800dfbe <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	79db      	ldrb	r3, [r3, #7]
 800df36:	2b03      	cmp	r3, #3
 800df38:	d830      	bhi.n	800df9c <USB_HC_StartXfer+0x254>
 800df3a:	a201      	add	r2, pc, #4	; (adr r2, 800df40 <USB_HC_StartXfer+0x1f8>)
 800df3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df40:	0800df51 	.word	0x0800df51
 800df44:	0800df75 	.word	0x0800df75
 800df48:	0800df51 	.word	0x0800df51
 800df4c:	0800df75 	.word	0x0800df75
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	695b      	ldr	r3, [r3, #20]
 800df54:	3303      	adds	r3, #3
 800df56:	089b      	lsrs	r3, r3, #2
 800df58:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800df5a:	8afa      	ldrh	r2, [r7, #22]
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df60:	b29b      	uxth	r3, r3
 800df62:	429a      	cmp	r2, r3
 800df64:	d91c      	bls.n	800dfa0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	699b      	ldr	r3, [r3, #24]
 800df6a:	f043 0220 	orr.w	r2, r3, #32
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	619a      	str	r2, [r3, #24]
        }
        break;
 800df72:	e015      	b.n	800dfa0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	695b      	ldr	r3, [r3, #20]
 800df78:	3303      	adds	r3, #3
 800df7a:	089b      	lsrs	r3, r3, #2
 800df7c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800df7e:	8afa      	ldrh	r2, [r7, #22]
 800df80:	6a3b      	ldr	r3, [r7, #32]
 800df82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800df86:	691b      	ldr	r3, [r3, #16]
 800df88:	b29b      	uxth	r3, r3
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d90a      	bls.n	800dfa4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	699b      	ldr	r3, [r3, #24]
 800df92:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	619a      	str	r2, [r3, #24]
        }
        break;
 800df9a:	e003      	b.n	800dfa4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800df9c:	bf00      	nop
 800df9e:	e002      	b.n	800dfa6 <USB_HC_StartXfer+0x25e>
        break;
 800dfa0:	bf00      	nop
 800dfa2:	e000      	b.n	800dfa6 <USB_HC_StartXfer+0x25e>
        break;
 800dfa4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	68d9      	ldr	r1, [r3, #12]
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	785a      	ldrb	r2, [r3, #1]
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	695b      	ldr	r3, [r3, #20]
 800dfb2:	b29b      	uxth	r3, r3
 800dfb4:	2000      	movs	r0, #0
 800dfb6:	9000      	str	r0, [sp, #0]
 800dfb8:	68f8      	ldr	r0, [r7, #12]
 800dfba:	f7ff fb79 	bl	800d6b0 <USB_WritePacket>
  }

  return HAL_OK;
 800dfbe:	2300      	movs	r3, #0
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3728      	adds	r7, #40	; 0x28
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}
 800dfc8:	1ff80000 	.word	0x1ff80000

0800dfcc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dfcc:	b480      	push	{r7}
 800dfce:	b085      	sub	sp, #20
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dfde:	695b      	ldr	r3, [r3, #20]
 800dfe0:	b29b      	uxth	r3, r3
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	3714      	adds	r7, #20
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfec:	4770      	bx	lr

0800dfee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800dfee:	b480      	push	{r7}
 800dff0:	b089      	sub	sp, #36	; 0x24
 800dff2:	af00      	add	r7, sp, #0
 800dff4:	6078      	str	r0, [r7, #4]
 800dff6:	460b      	mov	r3, r1
 800dff8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800dffe:	78fb      	ldrb	r3, [r7, #3]
 800e000:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800e002:	2300      	movs	r3, #0
 800e004:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	015a      	lsls	r2, r3, #5
 800e00a:	69bb      	ldr	r3, [r7, #24]
 800e00c:	4413      	add	r3, r2
 800e00e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	0c9b      	lsrs	r3, r3, #18
 800e016:	f003 0303 	and.w	r3, r3, #3
 800e01a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800e01c:	697b      	ldr	r3, [r7, #20]
 800e01e:	015a      	lsls	r2, r3, #5
 800e020:	69bb      	ldr	r3, [r7, #24]
 800e022:	4413      	add	r3, r2
 800e024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	0fdb      	lsrs	r3, r3, #31
 800e02c:	f003 0301 	and.w	r3, r3, #1
 800e030:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	689b      	ldr	r3, [r3, #8]
 800e036:	f003 0320 	and.w	r3, r3, #32
 800e03a:	2b20      	cmp	r3, #32
 800e03c:	d104      	bne.n	800e048 <USB_HC_Halt+0x5a>
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d101      	bne.n	800e048 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800e044:	2300      	movs	r3, #0
 800e046:	e0e8      	b.n	800e21a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800e048:	693b      	ldr	r3, [r7, #16]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d002      	beq.n	800e054 <USB_HC_Halt+0x66>
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	2b02      	cmp	r3, #2
 800e052:	d173      	bne.n	800e13c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	015a      	lsls	r2, r3, #5
 800e058:	69bb      	ldr	r3, [r7, #24]
 800e05a:	4413      	add	r3, r2
 800e05c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	697a      	ldr	r2, [r7, #20]
 800e064:	0151      	lsls	r1, r2, #5
 800e066:	69ba      	ldr	r2, [r7, #24]
 800e068:	440a      	add	r2, r1
 800e06a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e06e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e072:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	689b      	ldr	r3, [r3, #8]
 800e078:	f003 0320 	and.w	r3, r3, #32
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	f040 80cb 	bne.w	800e218 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e086:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d143      	bne.n	800e116 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	015a      	lsls	r2, r3, #5
 800e092:	69bb      	ldr	r3, [r7, #24]
 800e094:	4413      	add	r3, r2
 800e096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	697a      	ldr	r2, [r7, #20]
 800e09e:	0151      	lsls	r1, r2, #5
 800e0a0:	69ba      	ldr	r2, [r7, #24]
 800e0a2:	440a      	add	r2, r1
 800e0a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e0a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e0ac:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e0ae:	697b      	ldr	r3, [r7, #20]
 800e0b0:	015a      	lsls	r2, r3, #5
 800e0b2:	69bb      	ldr	r3, [r7, #24]
 800e0b4:	4413      	add	r3, r2
 800e0b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	697a      	ldr	r2, [r7, #20]
 800e0be:	0151      	lsls	r1, r2, #5
 800e0c0:	69ba      	ldr	r2, [r7, #24]
 800e0c2:	440a      	add	r2, r1
 800e0c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e0c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e0cc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800e0ce:	697b      	ldr	r3, [r7, #20]
 800e0d0:	015a      	lsls	r2, r3, #5
 800e0d2:	69bb      	ldr	r3, [r7, #24]
 800e0d4:	4413      	add	r3, r2
 800e0d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	697a      	ldr	r2, [r7, #20]
 800e0de:	0151      	lsls	r1, r2, #5
 800e0e0:	69ba      	ldr	r2, [r7, #24]
 800e0e2:	440a      	add	r2, r1
 800e0e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e0e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e0ec:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800e0ee:	69fb      	ldr	r3, [r7, #28]
 800e0f0:	3301      	adds	r3, #1
 800e0f2:	61fb      	str	r3, [r7, #28]
 800e0f4:	69fb      	ldr	r3, [r7, #28]
 800e0f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e0fa:	d81d      	bhi.n	800e138 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	015a      	lsls	r2, r3, #5
 800e100:	69bb      	ldr	r3, [r7, #24]
 800e102:	4413      	add	r3, r2
 800e104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e10e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e112:	d0ec      	beq.n	800e0ee <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e114:	e080      	b.n	800e218 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	015a      	lsls	r2, r3, #5
 800e11a:	69bb      	ldr	r3, [r7, #24]
 800e11c:	4413      	add	r3, r2
 800e11e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	697a      	ldr	r2, [r7, #20]
 800e126:	0151      	lsls	r1, r2, #5
 800e128:	69ba      	ldr	r2, [r7, #24]
 800e12a:	440a      	add	r2, r1
 800e12c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e130:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e134:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e136:	e06f      	b.n	800e218 <USB_HC_Halt+0x22a>
            break;
 800e138:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e13a:	e06d      	b.n	800e218 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	015a      	lsls	r2, r3, #5
 800e140:	69bb      	ldr	r3, [r7, #24]
 800e142:	4413      	add	r3, r2
 800e144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	697a      	ldr	r2, [r7, #20]
 800e14c:	0151      	lsls	r1, r2, #5
 800e14e:	69ba      	ldr	r2, [r7, #24]
 800e150:	440a      	add	r2, r1
 800e152:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e156:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e15a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800e15c:	69bb      	ldr	r3, [r7, #24]
 800e15e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e162:	691b      	ldr	r3, [r3, #16]
 800e164:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d143      	bne.n	800e1f4 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	015a      	lsls	r2, r3, #5
 800e170:	69bb      	ldr	r3, [r7, #24]
 800e172:	4413      	add	r3, r2
 800e174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	697a      	ldr	r2, [r7, #20]
 800e17c:	0151      	lsls	r1, r2, #5
 800e17e:	69ba      	ldr	r2, [r7, #24]
 800e180:	440a      	add	r2, r1
 800e182:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e186:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e18a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	015a      	lsls	r2, r3, #5
 800e190:	69bb      	ldr	r3, [r7, #24]
 800e192:	4413      	add	r3, r2
 800e194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	697a      	ldr	r2, [r7, #20]
 800e19c:	0151      	lsls	r1, r2, #5
 800e19e:	69ba      	ldr	r2, [r7, #24]
 800e1a0:	440a      	add	r2, r1
 800e1a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e1a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e1aa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	015a      	lsls	r2, r3, #5
 800e1b0:	69bb      	ldr	r3, [r7, #24]
 800e1b2:	4413      	add	r3, r2
 800e1b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	697a      	ldr	r2, [r7, #20]
 800e1bc:	0151      	lsls	r1, r2, #5
 800e1be:	69ba      	ldr	r2, [r7, #24]
 800e1c0:	440a      	add	r2, r1
 800e1c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e1c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e1ca:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800e1cc:	69fb      	ldr	r3, [r7, #28]
 800e1ce:	3301      	adds	r3, #1
 800e1d0:	61fb      	str	r3, [r7, #28]
 800e1d2:	69fb      	ldr	r3, [r7, #28]
 800e1d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e1d8:	d81d      	bhi.n	800e216 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	015a      	lsls	r2, r3, #5
 800e1de:	69bb      	ldr	r3, [r7, #24]
 800e1e0:	4413      	add	r3, r2
 800e1e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e1ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e1f0:	d0ec      	beq.n	800e1cc <USB_HC_Halt+0x1de>
 800e1f2:	e011      	b.n	800e218 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e1f4:	697b      	ldr	r3, [r7, #20]
 800e1f6:	015a      	lsls	r2, r3, #5
 800e1f8:	69bb      	ldr	r3, [r7, #24]
 800e1fa:	4413      	add	r3, r2
 800e1fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	697a      	ldr	r2, [r7, #20]
 800e204:	0151      	lsls	r1, r2, #5
 800e206:	69ba      	ldr	r2, [r7, #24]
 800e208:	440a      	add	r2, r1
 800e20a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e20e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e212:	6013      	str	r3, [r2, #0]
 800e214:	e000      	b.n	800e218 <USB_HC_Halt+0x22a>
          break;
 800e216:	bf00      	nop
    }
  }

  return HAL_OK;
 800e218:	2300      	movs	r3, #0
}
 800e21a:	4618      	mov	r0, r3
 800e21c:	3724      	adds	r7, #36	; 0x24
 800e21e:	46bd      	mov	sp, r7
 800e220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e224:	4770      	bx	lr
	...

0800e228 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800e228:	b480      	push	{r7}
 800e22a:	b087      	sub	sp, #28
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	460b      	mov	r3, r1
 800e232:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800e238:	78fb      	ldrb	r3, [r7, #3]
 800e23a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800e23c:	2301      	movs	r3, #1
 800e23e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	04da      	lsls	r2, r3, #19
 800e244:	4b15      	ldr	r3, [pc, #84]	; (800e29c <USB_DoPing+0x74>)
 800e246:	4013      	ands	r3, r2
 800e248:	693a      	ldr	r2, [r7, #16]
 800e24a:	0151      	lsls	r1, r2, #5
 800e24c:	697a      	ldr	r2, [r7, #20]
 800e24e:	440a      	add	r2, r1
 800e250:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e254:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e258:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800e25a:	693b      	ldr	r3, [r7, #16]
 800e25c:	015a      	lsls	r2, r3, #5
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	4413      	add	r3, r2
 800e262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e270:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e278:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	015a      	lsls	r2, r3, #5
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	4413      	add	r3, r2
 800e282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e286:	461a      	mov	r2, r3
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800e28c:	2300      	movs	r3, #0
}
 800e28e:	4618      	mov	r0, r3
 800e290:	371c      	adds	r7, #28
 800e292:	46bd      	mov	sp, r7
 800e294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e298:	4770      	bx	lr
 800e29a:	bf00      	nop
 800e29c:	1ff80000 	.word	0x1ff80000

0800e2a0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b086      	sub	sp, #24
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f7ff f97a 	bl	800d5aa <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800e2b6:	2110      	movs	r1, #16
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f7ff f9b1 	bl	800d620 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800e2be:	6878      	ldr	r0, [r7, #4]
 800e2c0:	f7ff f9d4 	bl	800d66c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	613b      	str	r3, [r7, #16]
 800e2c8:	e01f      	b.n	800e30a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800e2ca:	693b      	ldr	r3, [r7, #16]
 800e2cc:	015a      	lsls	r2, r3, #5
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	4413      	add	r3, r2
 800e2d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800e2da:	68bb      	ldr	r3, [r7, #8]
 800e2dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e2e0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e2e8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e2f0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800e2f2:	693b      	ldr	r3, [r7, #16]
 800e2f4:	015a      	lsls	r2, r3, #5
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	4413      	add	r3, r2
 800e2fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e2fe:	461a      	mov	r2, r3
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	3301      	adds	r3, #1
 800e308:	613b      	str	r3, [r7, #16]
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	2b0f      	cmp	r3, #15
 800e30e:	d9dc      	bls.n	800e2ca <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800e310:	2300      	movs	r3, #0
 800e312:	613b      	str	r3, [r7, #16]
 800e314:	e034      	b.n	800e380 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800e316:	693b      	ldr	r3, [r7, #16]
 800e318:	015a      	lsls	r2, r3, #5
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	4413      	add	r3, r2
 800e31e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e32c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800e32e:	68bb      	ldr	r3, [r7, #8]
 800e330:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e334:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e33c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800e33e:	693b      	ldr	r3, [r7, #16]
 800e340:	015a      	lsls	r2, r3, #5
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	4413      	add	r3, r2
 800e346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e34a:	461a      	mov	r2, r3
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800e350:	697b      	ldr	r3, [r7, #20]
 800e352:	3301      	adds	r3, #1
 800e354:	617b      	str	r3, [r7, #20]
 800e356:	697b      	ldr	r3, [r7, #20]
 800e358:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e35c:	d80c      	bhi.n	800e378 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e35e:	693b      	ldr	r3, [r7, #16]
 800e360:	015a      	lsls	r2, r3, #5
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	4413      	add	r3, r2
 800e366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e370:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e374:	d0ec      	beq.n	800e350 <USB_StopHost+0xb0>
 800e376:	e000      	b.n	800e37a <USB_StopHost+0xda>
        break;
 800e378:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	3301      	adds	r3, #1
 800e37e:	613b      	str	r3, [r7, #16]
 800e380:	693b      	ldr	r3, [r7, #16]
 800e382:	2b0f      	cmp	r3, #15
 800e384:	d9c7      	bls.n	800e316 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e38c:	461a      	mov	r2, r3
 800e38e:	f04f 33ff 	mov.w	r3, #4294967295
 800e392:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f04f 32ff 	mov.w	r2, #4294967295
 800e39a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	f7ff f8f3 	bl	800d588 <USB_EnableGlobalInt>

  return HAL_OK;
 800e3a2:	2300      	movs	r3, #0
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	3718      	adds	r7, #24
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}

0800e3ac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800e3b0:	4904      	ldr	r1, [pc, #16]	; (800e3c4 <MX_FATFS_Init+0x18>)
 800e3b2:	4805      	ldr	r0, [pc, #20]	; (800e3c8 <MX_FATFS_Init+0x1c>)
 800e3b4:	f006 fd1a 	bl	8014dec <FATFS_LinkDriver>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	4b03      	ldr	r3, [pc, #12]	; (800e3cc <MX_FATFS_Init+0x20>)
 800e3be:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e3c0:	bf00      	nop
 800e3c2:	bd80      	pop	{r7, pc}
 800e3c4:	2400b39c 	.word	0x2400b39c
 800e3c8:	24000018 	.word	0x24000018
 800e3cc:	2400b3a0 	.word	0x2400b3a0

0800e3d0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e3d4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3de:	4770      	bx	lr

0800e3e0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b082      	sub	sp, #8
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800e3ea:	79fb      	ldrb	r3, [r7, #7]
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f000 f9d9 	bl	800e7a4 <USER_SPI_initialize>
 800e3f2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	3708      	adds	r7, #8
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}

0800e3fc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b082      	sub	sp, #8
 800e400:	af00      	add	r7, sp, #0
 800e402:	4603      	mov	r3, r0
 800e404:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */

	return USER_SPI_status(pdrv); //ADD THIS LINE
 800e406:	79fb      	ldrb	r3, [r7, #7]
 800e408:	4618      	mov	r0, r3
 800e40a:	f000 fab5 	bl	800e978 <USER_SPI_status>
 800e40e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800e410:	4618      	mov	r0, r3
 800e412:	3708      	adds	r7, #8
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}

0800e418 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b084      	sub	sp, #16
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	60b9      	str	r1, [r7, #8]
 800e420:	607a      	str	r2, [r7, #4]
 800e422:	603b      	str	r3, [r7, #0]
 800e424:	4603      	mov	r3, r0
 800e426:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 800e428:	7bf8      	ldrb	r0, [r7, #15]
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	687a      	ldr	r2, [r7, #4]
 800e42e:	68b9      	ldr	r1, [r7, #8]
 800e430:	f000 fab8 	bl	800e9a4 <USER_SPI_read>
 800e434:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800e436:	4618      	mov	r0, r3
 800e438:	3710      	adds	r7, #16
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}

0800e43e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800e43e:	b580      	push	{r7, lr}
 800e440:	b084      	sub	sp, #16
 800e442:	af00      	add	r7, sp, #0
 800e444:	60b9      	str	r1, [r7, #8]
 800e446:	607a      	str	r2, [r7, #4]
 800e448:	603b      	str	r3, [r7, #0]
 800e44a:	4603      	mov	r3, r0
 800e44c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 800e44e:	7bf8      	ldrb	r0, [r7, #15]
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	687a      	ldr	r2, [r7, #4]
 800e454:	68b9      	ldr	r1, [r7, #8]
 800e456:	f000 fb0b 	bl	800ea70 <USER_SPI_write>
 800e45a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	3710      	adds	r7, #16
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}

0800e464 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b082      	sub	sp, #8
 800e468:	af00      	add	r7, sp, #0
 800e46a:	4603      	mov	r3, r0
 800e46c:	603a      	str	r2, [r7, #0]
 800e46e:	71fb      	strb	r3, [r7, #7]
 800e470:	460b      	mov	r3, r1
 800e472:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 800e474:	79b9      	ldrb	r1, [r7, #6]
 800e476:	79fb      	ldrb	r3, [r7, #7]
 800e478:	683a      	ldr	r2, [r7, #0]
 800e47a:	4618      	mov	r0, r3
 800e47c:	f000 fb74 	bl	800eb68 <USER_SPI_ioctl>
 800e480:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800e482:	4618      	mov	r0, r3
 800e484:	3708      	adds	r7, #8
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
	...

0800e48c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b082      	sub	sp, #8
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800e494:	f7f4 f856 	bl	8002544 <HAL_GetTick>
 800e498:	4603      	mov	r3, r0
 800e49a:	4a04      	ldr	r2, [pc, #16]	; (800e4ac <SPI_Timer_On+0x20>)
 800e49c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800e49e:	4a04      	ldr	r2, [pc, #16]	; (800e4b0 <SPI_Timer_On+0x24>)
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	6013      	str	r3, [r2, #0]
}
 800e4a4:	bf00      	nop
 800e4a6:	3708      	adds	r7, #8
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}
 800e4ac:	2400b808 	.word	0x2400b808
 800e4b0:	2400b80c 	.word	0x2400b80c

0800e4b4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800e4b8:	f7f4 f844 	bl	8002544 <HAL_GetTick>
 800e4bc:	4602      	mov	r2, r0
 800e4be:	4b06      	ldr	r3, [pc, #24]	; (800e4d8 <SPI_Timer_Status+0x24>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	1ad2      	subs	r2, r2, r3
 800e4c4:	4b05      	ldr	r3, [pc, #20]	; (800e4dc <SPI_Timer_Status+0x28>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	bf34      	ite	cc
 800e4cc:	2301      	movcc	r3, #1
 800e4ce:	2300      	movcs	r3, #0
 800e4d0:	b2db      	uxtb	r3, r3
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	bd80      	pop	{r7, pc}
 800e4d6:	bf00      	nop
 800e4d8:	2400b808 	.word	0x2400b808
 800e4dc:	2400b80c 	.word	0x2400b80c

0800e4e0 <xchg_spi>:
/* SPI controls (Platform dependent)                                     */
/*-----------------------------------------------------------------------*/

/* Exchange a byte */
static BYTE xchg_spi (BYTE dat	/* Data to send */)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b086      	sub	sp, #24
 800e4e4:	af02      	add	r7, sp, #8
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800e4ea:	f107 020f 	add.w	r2, r7, #15
 800e4ee:	1df9      	adds	r1, r7, #7
 800e4f0:	2332      	movs	r3, #50	; 0x32
 800e4f2:	9300      	str	r3, [sp, #0]
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	4804      	ldr	r0, [pc, #16]	; (800e508 <xchg_spi+0x28>)
 800e4f8:	f7fb ff62 	bl	800a3c0 <HAL_SPI_TransmitReceive>
    return rxDat;
 800e4fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4fe:	4618      	mov	r0, r3
 800e500:	3710      	adds	r7, #16
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}
 800e506:	bf00      	nop
 800e508:	2400afdc 	.word	0x2400afdc

0800e50c <rcvr_spi_multi>:


/* Receive multiple byte */
static void rcvr_spi_multi (BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */)
{
 800e50c:	b590      	push	{r4, r7, lr}
 800e50e:	b085      	sub	sp, #20
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
 800e514:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++)
 800e516:	2300      	movs	r3, #0
 800e518:	60fb      	str	r3, [r7, #12]
 800e51a:	e00a      	b.n	800e532 <rcvr_spi_multi+0x26>
	{
		*(buff+i) = xchg_spi(0xFF);
 800e51c:	687a      	ldr	r2, [r7, #4]
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	18d4      	adds	r4, r2, r3
 800e522:	20ff      	movs	r0, #255	; 0xff
 800e524:	f7ff ffdc 	bl	800e4e0 <xchg_spi>
 800e528:	4603      	mov	r3, r0
 800e52a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++)
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	3301      	adds	r3, #1
 800e530:	60fb      	str	r3, [r7, #12]
 800e532:	68fa      	ldr	r2, [r7, #12]
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	429a      	cmp	r2, r3
 800e538:	d3f0      	bcc.n	800e51c <rcvr_spi_multi+0x10>
	}
}
 800e53a:	bf00      	nop
 800e53c:	bf00      	nop
 800e53e:	3714      	adds	r7, #20
 800e540:	46bd      	mov	sp, r7
 800e542:	bd90      	pop	{r4, r7, pc}

0800e544 <xmit_spi_multi>:

#if _USE_WRITE
/* Send multiple byte */
static void xmit_spi_multi (const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b084      	sub	sp, #16
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
 800e54c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++)
 800e54e:	2300      	movs	r3, #0
 800e550:	60fb      	str	r3, [r7, #12]
 800e552:	e009      	b.n	800e568 <xmit_spi_multi+0x24>
	{
		xchg_spi(*(buff+i));
 800e554:	687a      	ldr	r2, [r7, #4]
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	4413      	add	r3, r2
 800e55a:	781b      	ldrb	r3, [r3, #0]
 800e55c:	4618      	mov	r0, r3
 800e55e:	f7ff ffbf 	bl	800e4e0 <xchg_spi>
	for(UINT i=0; i<btx; i++)
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	3301      	adds	r3, #1
 800e566:	60fb      	str	r3, [r7, #12]
 800e568:	68fa      	ldr	r2, [r7, #12]
 800e56a:	683b      	ldr	r3, [r7, #0]
 800e56c:	429a      	cmp	r2, r3
 800e56e:	d3f1      	bcc.n	800e554 <xmit_spi_multi+0x10>
	}
}
 800e570:	bf00      	nop
 800e572:	bf00      	nop
 800e574:	3710      	adds	r7, #16
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}

0800e57a <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */)
{
 800e57a:	b580      	push	{r7, lr}
 800e57c:	b086      	sub	sp, #24
 800e57e:	af00      	add	r7, sp, #0
 800e580:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800e582:	f7f3 ffdf 	bl	8002544 <HAL_GetTick>
 800e586:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800e58c:	20ff      	movs	r0, #255	; 0xff
 800e58e:	f7ff ffa7 	bl	800e4e0 <xchg_spi>
 800e592:	4603      	mov	r3, r0
 800e594:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800e596:	7bfb      	ldrb	r3, [r7, #15]
 800e598:	2bff      	cmp	r3, #255	; 0xff
 800e59a:	d007      	beq.n	800e5ac <wait_ready+0x32>
 800e59c:	f7f3 ffd2 	bl	8002544 <HAL_GetTick>
 800e5a0:	4602      	mov	r2, r0
 800e5a2:	697b      	ldr	r3, [r7, #20]
 800e5a4:	1ad3      	subs	r3, r2, r3
 800e5a6:	693a      	ldr	r2, [r7, #16]
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d8ef      	bhi.n	800e58c <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800e5ac:	7bfb      	ldrb	r3, [r7, #15]
 800e5ae:	2bff      	cmp	r3, #255	; 0xff
 800e5b0:	bf0c      	ite	eq
 800e5b2:	2301      	moveq	r3, #1
 800e5b4:	2300      	movne	r3, #0
 800e5b6:	b2db      	uxtb	r3, r3
}
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	3718      	adds	r7, #24
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}

0800e5c0 <despiselect>:
/*-----------------------------------------------------------------------*/
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static void despiselect (void)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800e5c4:	2201      	movs	r2, #1
 800e5c6:	2110      	movs	r1, #16
 800e5c8:	4803      	ldr	r0, [pc, #12]	; (800e5d8 <despiselect+0x18>)
 800e5ca:	f7f7 f985 	bl	80058d8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800e5ce:	20ff      	movs	r0, #255	; 0xff
 800e5d0:	f7ff ff86 	bl	800e4e0 <xchg_spi>

}
 800e5d4:	bf00      	nop
 800e5d6:	bd80      	pop	{r7, pc}
 800e5d8:	58020c00 	.word	0x58020c00

0800e5dc <spiselect>:
/*-----------------------------------------------------------------------*/
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	2110      	movs	r1, #16
 800e5e4:	4809      	ldr	r0, [pc, #36]	; (800e60c <spiselect+0x30>)
 800e5e6:	f7f7 f977 	bl	80058d8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800e5ea:	20ff      	movs	r0, #255	; 0xff
 800e5ec:	f7ff ff78 	bl	800e4e0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800e5f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e5f4:	f7ff ffc1 	bl	800e57a <wait_ready>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d001      	beq.n	800e602 <spiselect+0x26>
 800e5fe:	2301      	movs	r3, #1
 800e600:	e002      	b.n	800e608 <spiselect+0x2c>

	despiselect();
 800e602:	f7ff ffdd 	bl	800e5c0 <despiselect>
	return 0;	/* Timeout */
 800e606:	2300      	movs	r3, #0
}
 800e608:	4618      	mov	r0, r3
 800e60a:	bd80      	pop	{r7, pc}
 800e60c:	58020c00 	.word	0x58020c00

0800e610 <rcvr_datablock>:
/*-----------------------------------------------------------------------*/

static int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b084      	sub	sp, #16
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800e61a:	20c8      	movs	r0, #200	; 0xc8
 800e61c:	f7ff ff36 	bl	800e48c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800e620:	20ff      	movs	r0, #255	; 0xff
 800e622:	f7ff ff5d 	bl	800e4e0 <xchg_spi>
 800e626:	4603      	mov	r3, r0
 800e628:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800e62a:	7bfb      	ldrb	r3, [r7, #15]
 800e62c:	2bff      	cmp	r3, #255	; 0xff
 800e62e:	d104      	bne.n	800e63a <rcvr_datablock+0x2a>
 800e630:	f7ff ff40 	bl	800e4b4 <SPI_Timer_Status>
 800e634:	4603      	mov	r3, r0
 800e636:	2b00      	cmp	r3, #0
 800e638:	d1f2      	bne.n	800e620 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800e63a:	7bfb      	ldrb	r3, [r7, #15]
 800e63c:	2bfe      	cmp	r3, #254	; 0xfe
 800e63e:	d001      	beq.n	800e644 <rcvr_datablock+0x34>
 800e640:	2300      	movs	r3, #0
 800e642:	e00a      	b.n	800e65a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800e644:	6839      	ldr	r1, [r7, #0]
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f7ff ff60 	bl	800e50c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800e64c:	20ff      	movs	r0, #255	; 0xff
 800e64e:	f7ff ff47 	bl	800e4e0 <xchg_spi>
 800e652:	20ff      	movs	r0, #255	; 0xff
 800e654:	f7ff ff44 	bl	800e4e0 <xchg_spi>

	return 1;						/* Function succeeded */
 800e658:	2301      	movs	r3, #1
}
 800e65a:	4618      	mov	r0, r3
 800e65c:	3710      	adds	r7, #16
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd80      	pop	{r7, pc}

0800e662 <xmit_datablock>:

#if _USE_WRITE
static int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */)
{
 800e662:	b580      	push	{r7, lr}
 800e664:	b084      	sub	sp, #16
 800e666:	af00      	add	r7, sp, #0
 800e668:	6078      	str	r0, [r7, #4]
 800e66a:	460b      	mov	r3, r1
 800e66c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800e66e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e672:	f7ff ff82 	bl	800e57a <wait_ready>
 800e676:	4603      	mov	r3, r0
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d101      	bne.n	800e680 <xmit_datablock+0x1e>
 800e67c:	2300      	movs	r3, #0
 800e67e:	e01e      	b.n	800e6be <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800e680:	78fb      	ldrb	r3, [r7, #3]
 800e682:	4618      	mov	r0, r3
 800e684:	f7ff ff2c 	bl	800e4e0 <xchg_spi>
	if (token != 0xFD)
 800e688:	78fb      	ldrb	r3, [r7, #3]
 800e68a:	2bfd      	cmp	r3, #253	; 0xfd
 800e68c:	d016      	beq.n	800e6bc <xmit_datablock+0x5a>
	{				/* Send data if token is other than StopTran */
		xmit_spi_multi(buff, 512);		/* Data */
 800e68e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f7ff ff56 	bl	800e544 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800e698:	20ff      	movs	r0, #255	; 0xff
 800e69a:	f7ff ff21 	bl	800e4e0 <xchg_spi>
 800e69e:	20ff      	movs	r0, #255	; 0xff
 800e6a0:	f7ff ff1e 	bl	800e4e0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800e6a4:	20ff      	movs	r0, #255	; 0xff
 800e6a6:	f7ff ff1b 	bl	800e4e0 <xchg_spi>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800e6ae:	7bfb      	ldrb	r3, [r7, #15]
 800e6b0:	f003 031f 	and.w	r3, r3, #31
 800e6b4:	2b05      	cmp	r3, #5
 800e6b6:	d001      	beq.n	800e6bc <xmit_datablock+0x5a>
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	e000      	b.n	800e6be <xmit_datablock+0x5c>
	}
	return 1;
 800e6bc:	2301      	movs	r3, #1
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3710      	adds	r7, #16
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}

0800e6c6 <send_cmd>:
/*-----------------------------------------------------------------------*/

static BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */)
{
 800e6c6:	b580      	push	{r7, lr}
 800e6c8:	b084      	sub	sp, #16
 800e6ca:	af00      	add	r7, sp, #0
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	6039      	str	r1, [r7, #0]
 800e6d0:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80)
 800e6d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	da0e      	bge.n	800e6f8 <send_cmd+0x32>
	{	/* Send a CMD55 prior to ACMD<n> */
		cmd &= 0x7F;
 800e6da:	79fb      	ldrb	r3, [r7, #7]
 800e6dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e6e0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800e6e2:	2100      	movs	r1, #0
 800e6e4:	2037      	movs	r0, #55	; 0x37
 800e6e6:	f7ff ffee 	bl	800e6c6 <send_cmd>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800e6ee:	7bbb      	ldrb	r3, [r7, #14]
 800e6f0:	2b01      	cmp	r3, #1
 800e6f2:	d901      	bls.n	800e6f8 <send_cmd+0x32>
 800e6f4:	7bbb      	ldrb	r3, [r7, #14]
 800e6f6:	e051      	b.n	800e79c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12)
 800e6f8:	79fb      	ldrb	r3, [r7, #7]
 800e6fa:	2b0c      	cmp	r3, #12
 800e6fc:	d008      	beq.n	800e710 <send_cmd+0x4a>
	{
		despiselect();
 800e6fe:	f7ff ff5f 	bl	800e5c0 <despiselect>
		if (!spiselect()) return 0xFF;
 800e702:	f7ff ff6b 	bl	800e5dc <spiselect>
 800e706:	4603      	mov	r3, r0
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d101      	bne.n	800e710 <send_cmd+0x4a>
 800e70c:	23ff      	movs	r3, #255	; 0xff
 800e70e:	e045      	b.n	800e79c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800e710:	79fb      	ldrb	r3, [r7, #7]
 800e712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e716:	b2db      	uxtb	r3, r3
 800e718:	4618      	mov	r0, r3
 800e71a:	f7ff fee1 	bl	800e4e0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	0e1b      	lsrs	r3, r3, #24
 800e722:	b2db      	uxtb	r3, r3
 800e724:	4618      	mov	r0, r3
 800e726:	f7ff fedb 	bl	800e4e0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	0c1b      	lsrs	r3, r3, #16
 800e72e:	b2db      	uxtb	r3, r3
 800e730:	4618      	mov	r0, r3
 800e732:	f7ff fed5 	bl	800e4e0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	0a1b      	lsrs	r3, r3, #8
 800e73a:	b2db      	uxtb	r3, r3
 800e73c:	4618      	mov	r0, r3
 800e73e:	f7ff fecf 	bl	800e4e0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	b2db      	uxtb	r3, r3
 800e746:	4618      	mov	r0, r3
 800e748:	f7ff feca 	bl	800e4e0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800e74c:	2301      	movs	r3, #1
 800e74e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800e750:	79fb      	ldrb	r3, [r7, #7]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d101      	bne.n	800e75a <send_cmd+0x94>
 800e756:	2395      	movs	r3, #149	; 0x95
 800e758:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800e75a:	79fb      	ldrb	r3, [r7, #7]
 800e75c:	2b08      	cmp	r3, #8
 800e75e:	d101      	bne.n	800e764 <send_cmd+0x9e>
 800e760:	2387      	movs	r3, #135	; 0x87
 800e762:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800e764:	7bfb      	ldrb	r3, [r7, #15]
 800e766:	4618      	mov	r0, r3
 800e768:	f7ff feba 	bl	800e4e0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800e76c:	79fb      	ldrb	r3, [r7, #7]
 800e76e:	2b0c      	cmp	r3, #12
 800e770:	d102      	bne.n	800e778 <send_cmd+0xb2>
 800e772:	20ff      	movs	r0, #255	; 0xff
 800e774:	f7ff feb4 	bl	800e4e0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800e778:	230a      	movs	r3, #10
 800e77a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800e77c:	20ff      	movs	r0, #255	; 0xff
 800e77e:	f7ff feaf 	bl	800e4e0 <xchg_spi>
 800e782:	4603      	mov	r3, r0
 800e784:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800e786:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	da05      	bge.n	800e79a <send_cmd+0xd4>
 800e78e:	7bfb      	ldrb	r3, [r7, #15]
 800e790:	3b01      	subs	r3, #1
 800e792:	73fb      	strb	r3, [r7, #15]
 800e794:	7bfb      	ldrb	r3, [r7, #15]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d1f0      	bne.n	800e77c <send_cmd+0xb6>

	return res;							/* Return received response */
 800e79a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e79c:	4618      	mov	r0, r3
 800e79e:	3710      	adds	r7, #16
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}

0800e7a4 <USER_SPI_initialize>:
/* Initialize disk drive                                                 */
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */)
{
 800e7a4:	b590      	push	{r4, r7, lr}
 800e7a6:	b085      	sub	sp, #20
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800e7ae:	79fb      	ldrb	r3, [r7, #7]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d001      	beq.n	800e7b8 <USER_SPI_initialize+0x14>
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	e0d4      	b.n	800e962 <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800e7b8:	4b6c      	ldr	r3, [pc, #432]	; (800e96c <USER_SPI_initialize+0x1c8>)
 800e7ba:	781b      	ldrb	r3, [r3, #0]
 800e7bc:	b2db      	uxtb	r3, r3
 800e7be:	f003 0302 	and.w	r3, r3, #2
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d003      	beq.n	800e7ce <USER_SPI_initialize+0x2a>
 800e7c6:	4b69      	ldr	r3, [pc, #420]	; (800e96c <USER_SPI_initialize+0x1c8>)
 800e7c8:	781b      	ldrb	r3, [r3, #0]
 800e7ca:	b2db      	uxtb	r3, r3
 800e7cc:	e0c9      	b.n	800e962 <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800e7ce:	4b68      	ldr	r3, [pc, #416]	; (800e970 <USER_SPI_initialize+0x1cc>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	681a      	ldr	r2, [r3, #0]
 800e7d4:	4b66      	ldr	r3, [pc, #408]	; (800e970 <USER_SPI_initialize+0x1cc>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f042 42e0 	orr.w	r2, r2, #1879048192	; 0x70000000
 800e7dc:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800e7de:	230a      	movs	r3, #10
 800e7e0:	73fb      	strb	r3, [r7, #15]
 800e7e2:	e005      	b.n	800e7f0 <USER_SPI_initialize+0x4c>
 800e7e4:	20ff      	movs	r0, #255	; 0xff
 800e7e6:	f7ff fe7b 	bl	800e4e0 <xchg_spi>
 800e7ea:	7bfb      	ldrb	r3, [r7, #15]
 800e7ec:	3b01      	subs	r3, #1
 800e7ee:	73fb      	strb	r3, [r7, #15]
 800e7f0:	7bfb      	ldrb	r3, [r7, #15]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d1f6      	bne.n	800e7e4 <USER_SPI_initialize+0x40>

	ty = 0;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800e7fa:	2100      	movs	r1, #0
 800e7fc:	2000      	movs	r0, #0
 800e7fe:	f7ff ff62 	bl	800e6c6 <send_cmd>
 800e802:	4603      	mov	r3, r0
 800e804:	2b01      	cmp	r3, #1
 800e806:	f040 808b 	bne.w	800e920 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800e80a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e80e:	f7ff fe3d 	bl	800e48c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800e812:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e816:	2008      	movs	r0, #8
 800e818:	f7ff ff55 	bl	800e6c6 <send_cmd>
 800e81c:	4603      	mov	r3, r0
 800e81e:	2b01      	cmp	r3, #1
 800e820:	d151      	bne.n	800e8c6 <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800e822:	2300      	movs	r3, #0
 800e824:	73fb      	strb	r3, [r7, #15]
 800e826:	e00d      	b.n	800e844 <USER_SPI_initialize+0xa0>
 800e828:	7bfc      	ldrb	r4, [r7, #15]
 800e82a:	20ff      	movs	r0, #255	; 0xff
 800e82c:	f7ff fe58 	bl	800e4e0 <xchg_spi>
 800e830:	4603      	mov	r3, r0
 800e832:	461a      	mov	r2, r3
 800e834:	f107 0310 	add.w	r3, r7, #16
 800e838:	4423      	add	r3, r4
 800e83a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800e83e:	7bfb      	ldrb	r3, [r7, #15]
 800e840:	3301      	adds	r3, #1
 800e842:	73fb      	strb	r3, [r7, #15]
 800e844:	7bfb      	ldrb	r3, [r7, #15]
 800e846:	2b03      	cmp	r3, #3
 800e848:	d9ee      	bls.n	800e828 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800e84a:	7abb      	ldrb	r3, [r7, #10]
 800e84c:	2b01      	cmp	r3, #1
 800e84e:	d167      	bne.n	800e920 <USER_SPI_initialize+0x17c>
 800e850:	7afb      	ldrb	r3, [r7, #11]
 800e852:	2baa      	cmp	r3, #170	; 0xaa
 800e854:	d164      	bne.n	800e920 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800e856:	bf00      	nop
 800e858:	f7ff fe2c 	bl	800e4b4 <SPI_Timer_Status>
 800e85c:	4603      	mov	r3, r0
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d007      	beq.n	800e872 <USER_SPI_initialize+0xce>
 800e862:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800e866:	20a9      	movs	r0, #169	; 0xa9
 800e868:	f7ff ff2d 	bl	800e6c6 <send_cmd>
 800e86c:	4603      	mov	r3, r0
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d1f2      	bne.n	800e858 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800e872:	f7ff fe1f 	bl	800e4b4 <SPI_Timer_Status>
 800e876:	4603      	mov	r3, r0
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d051      	beq.n	800e920 <USER_SPI_initialize+0x17c>
 800e87c:	2100      	movs	r1, #0
 800e87e:	203a      	movs	r0, #58	; 0x3a
 800e880:	f7ff ff21 	bl	800e6c6 <send_cmd>
 800e884:	4603      	mov	r3, r0
 800e886:	2b00      	cmp	r3, #0
 800e888:	d14a      	bne.n	800e920 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800e88a:	2300      	movs	r3, #0
 800e88c:	73fb      	strb	r3, [r7, #15]
 800e88e:	e00d      	b.n	800e8ac <USER_SPI_initialize+0x108>
 800e890:	7bfc      	ldrb	r4, [r7, #15]
 800e892:	20ff      	movs	r0, #255	; 0xff
 800e894:	f7ff fe24 	bl	800e4e0 <xchg_spi>
 800e898:	4603      	mov	r3, r0
 800e89a:	461a      	mov	r2, r3
 800e89c:	f107 0310 	add.w	r3, r7, #16
 800e8a0:	4423      	add	r3, r4
 800e8a2:	f803 2c08 	strb.w	r2, [r3, #-8]
 800e8a6:	7bfb      	ldrb	r3, [r7, #15]
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	73fb      	strb	r3, [r7, #15]
 800e8ac:	7bfb      	ldrb	r3, [r7, #15]
 800e8ae:	2b03      	cmp	r3, #3
 800e8b0:	d9ee      	bls.n	800e890 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800e8b2:	7a3b      	ldrb	r3, [r7, #8]
 800e8b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d001      	beq.n	800e8c0 <USER_SPI_initialize+0x11c>
 800e8bc:	230c      	movs	r3, #12
 800e8be:	e000      	b.n	800e8c2 <USER_SPI_initialize+0x11e>
 800e8c0:	2304      	movs	r3, #4
 800e8c2:	737b      	strb	r3, [r7, #13]
 800e8c4:	e02c      	b.n	800e920 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800e8c6:	2100      	movs	r1, #0
 800e8c8:	20a9      	movs	r0, #169	; 0xa9
 800e8ca:	f7ff fefc 	bl	800e6c6 <send_cmd>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	2b01      	cmp	r3, #1
 800e8d2:	d804      	bhi.n	800e8de <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800e8d4:	2302      	movs	r3, #2
 800e8d6:	737b      	strb	r3, [r7, #13]
 800e8d8:	23a9      	movs	r3, #169	; 0xa9
 800e8da:	73bb      	strb	r3, [r7, #14]
 800e8dc:	e003      	b.n	800e8e6 <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800e8de:	2301      	movs	r3, #1
 800e8e0:	737b      	strb	r3, [r7, #13]
 800e8e2:	2301      	movs	r3, #1
 800e8e4:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800e8e6:	bf00      	nop
 800e8e8:	f7ff fde4 	bl	800e4b4 <SPI_Timer_Status>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d007      	beq.n	800e902 <USER_SPI_initialize+0x15e>
 800e8f2:	7bbb      	ldrb	r3, [r7, #14]
 800e8f4:	2100      	movs	r1, #0
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f7ff fee5 	bl	800e6c6 <send_cmd>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d1f2      	bne.n	800e8e8 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800e902:	f7ff fdd7 	bl	800e4b4 <SPI_Timer_Status>
 800e906:	4603      	mov	r3, r0
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d007      	beq.n	800e91c <USER_SPI_initialize+0x178>
 800e90c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e910:	2010      	movs	r0, #16
 800e912:	f7ff fed8 	bl	800e6c6 <send_cmd>
 800e916:	4603      	mov	r3, r0
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d001      	beq.n	800e920 <USER_SPI_initialize+0x17c>
				ty = 0;
 800e91c:	2300      	movs	r3, #0
 800e91e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800e920:	4a14      	ldr	r2, [pc, #80]	; (800e974 <USER_SPI_initialize+0x1d0>)
 800e922:	7b7b      	ldrb	r3, [r7, #13]
 800e924:	7013      	strb	r3, [r2, #0]
	despiselect();
 800e926:	f7ff fe4b 	bl	800e5c0 <despiselect>

	if (ty) {			/* OK */
 800e92a:	7b7b      	ldrb	r3, [r7, #13]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d012      	beq.n	800e956 <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 800e930:	4b0f      	ldr	r3, [pc, #60]	; (800e970 <USER_SPI_initialize+0x1cc>)
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800e93a:	4b0d      	ldr	r3, [pc, #52]	; (800e970 <USER_SPI_initialize+0x1cc>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800e942:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800e944:	4b09      	ldr	r3, [pc, #36]	; (800e96c <USER_SPI_initialize+0x1c8>)
 800e946:	781b      	ldrb	r3, [r3, #0]
 800e948:	b2db      	uxtb	r3, r3
 800e94a:	f023 0301 	bic.w	r3, r3, #1
 800e94e:	b2da      	uxtb	r2, r3
 800e950:	4b06      	ldr	r3, [pc, #24]	; (800e96c <USER_SPI_initialize+0x1c8>)
 800e952:	701a      	strb	r2, [r3, #0]
 800e954:	e002      	b.n	800e95c <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800e956:	4b05      	ldr	r3, [pc, #20]	; (800e96c <USER_SPI_initialize+0x1c8>)
 800e958:	2201      	movs	r2, #1
 800e95a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800e95c:	4b03      	ldr	r3, [pc, #12]	; (800e96c <USER_SPI_initialize+0x1c8>)
 800e95e:	781b      	ldrb	r3, [r3, #0]
 800e960:	b2db      	uxtb	r3, r3
}
 800e962:	4618      	mov	r0, r3
 800e964:	3714      	adds	r7, #20
 800e966:	46bd      	mov	sp, r7
 800e968:	bd90      	pop	{r4, r7, pc}
 800e96a:	bf00      	nop
 800e96c:	2400002c 	.word	0x2400002c
 800e970:	2400afdc 	.word	0x2400afdc
 800e974:	2400a3cc 	.word	0x2400a3cc

0800e978 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800e978:	b480      	push	{r7}
 800e97a:	b083      	sub	sp, #12
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	4603      	mov	r3, r0
 800e980:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800e982:	79fb      	ldrb	r3, [r7, #7]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d001      	beq.n	800e98c <USER_SPI_status+0x14>
 800e988:	2301      	movs	r3, #1
 800e98a:	e002      	b.n	800e992 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800e98c:	4b04      	ldr	r3, [pc, #16]	; (800e9a0 <USER_SPI_status+0x28>)
 800e98e:	781b      	ldrb	r3, [r3, #0]
 800e990:	b2db      	uxtb	r3, r3
}
 800e992:	4618      	mov	r0, r3
 800e994:	370c      	adds	r7, #12
 800e996:	46bd      	mov	sp, r7
 800e998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99c:	4770      	bx	lr
 800e99e:	bf00      	nop
 800e9a0:	2400002c 	.word	0x2400002c

0800e9a4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b084      	sub	sp, #16
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	60b9      	str	r1, [r7, #8]
 800e9ac:	607a      	str	r2, [r7, #4]
 800e9ae:	603b      	str	r3, [r7, #0]
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800e9b4:	7bfb      	ldrb	r3, [r7, #15]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d102      	bne.n	800e9c0 <USER_SPI_read+0x1c>
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d101      	bne.n	800e9c4 <USER_SPI_read+0x20>
 800e9c0:	2304      	movs	r3, #4
 800e9c2:	e04d      	b.n	800ea60 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800e9c4:	4b28      	ldr	r3, [pc, #160]	; (800ea68 <USER_SPI_read+0xc4>)
 800e9c6:	781b      	ldrb	r3, [r3, #0]
 800e9c8:	b2db      	uxtb	r3, r3
 800e9ca:	f003 0301 	and.w	r3, r3, #1
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d001      	beq.n	800e9d6 <USER_SPI_read+0x32>
 800e9d2:	2303      	movs	r3, #3
 800e9d4:	e044      	b.n	800ea60 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800e9d6:	4b25      	ldr	r3, [pc, #148]	; (800ea6c <USER_SPI_read+0xc8>)
 800e9d8:	781b      	ldrb	r3, [r3, #0]
 800e9da:	f003 0308 	and.w	r3, r3, #8
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d102      	bne.n	800e9e8 <USER_SPI_read+0x44>
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	025b      	lsls	r3, r3, #9
 800e9e6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	2b01      	cmp	r3, #1
 800e9ec:	d111      	bne.n	800ea12 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800e9ee:	6879      	ldr	r1, [r7, #4]
 800e9f0:	2011      	movs	r0, #17
 800e9f2:	f7ff fe68 	bl	800e6c6 <send_cmd>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d129      	bne.n	800ea50 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800e9fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ea00:	68b8      	ldr	r0, [r7, #8]
 800ea02:	f7ff fe05 	bl	800e610 <rcvr_datablock>
 800ea06:	4603      	mov	r3, r0
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d021      	beq.n	800ea50 <USER_SPI_read+0xac>
			count = 0;
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	603b      	str	r3, [r7, #0]
 800ea10:	e01e      	b.n	800ea50 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800ea12:	6879      	ldr	r1, [r7, #4]
 800ea14:	2012      	movs	r0, #18
 800ea16:	f7ff fe56 	bl	800e6c6 <send_cmd>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d117      	bne.n	800ea50 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800ea20:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ea24:	68b8      	ldr	r0, [r7, #8]
 800ea26:	f7ff fdf3 	bl	800e610 <rcvr_datablock>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d00a      	beq.n	800ea46 <USER_SPI_read+0xa2>
				buff += 512;
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ea36:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	3b01      	subs	r3, #1
 800ea3c:	603b      	str	r3, [r7, #0]
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d1ed      	bne.n	800ea20 <USER_SPI_read+0x7c>
 800ea44:	e000      	b.n	800ea48 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800ea46:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800ea48:	2100      	movs	r1, #0
 800ea4a:	200c      	movs	r0, #12
 800ea4c:	f7ff fe3b 	bl	800e6c6 <send_cmd>
		}
	}
	despiselect();
 800ea50:	f7ff fdb6 	bl	800e5c0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	bf14      	ite	ne
 800ea5a:	2301      	movne	r3, #1
 800ea5c:	2300      	moveq	r3, #0
 800ea5e:	b2db      	uxtb	r3, r3
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	3710      	adds	r7, #16
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}
 800ea68:	2400002c 	.word	0x2400002c
 800ea6c:	2400a3cc 	.word	0x2400a3cc

0800ea70 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b084      	sub	sp, #16
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	60b9      	str	r1, [r7, #8]
 800ea78:	607a      	str	r2, [r7, #4]
 800ea7a:	603b      	str	r3, [r7, #0]
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800ea80:	7bfb      	ldrb	r3, [r7, #15]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d102      	bne.n	800ea8c <USER_SPI_write+0x1c>
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d101      	bne.n	800ea90 <USER_SPI_write+0x20>
 800ea8c:	2304      	movs	r3, #4
 800ea8e:	e063      	b.n	800eb58 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800ea90:	4b33      	ldr	r3, [pc, #204]	; (800eb60 <USER_SPI_write+0xf0>)
 800ea92:	781b      	ldrb	r3, [r3, #0]
 800ea94:	b2db      	uxtb	r3, r3
 800ea96:	f003 0301 	and.w	r3, r3, #1
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d001      	beq.n	800eaa2 <USER_SPI_write+0x32>
 800ea9e:	2303      	movs	r3, #3
 800eaa0:	e05a      	b.n	800eb58 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800eaa2:	4b2f      	ldr	r3, [pc, #188]	; (800eb60 <USER_SPI_write+0xf0>)
 800eaa4:	781b      	ldrb	r3, [r3, #0]
 800eaa6:	b2db      	uxtb	r3, r3
 800eaa8:	f003 0304 	and.w	r3, r3, #4
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d001      	beq.n	800eab4 <USER_SPI_write+0x44>
 800eab0:	2302      	movs	r3, #2
 800eab2:	e051      	b.n	800eb58 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800eab4:	4b2b      	ldr	r3, [pc, #172]	; (800eb64 <USER_SPI_write+0xf4>)
 800eab6:	781b      	ldrb	r3, [r3, #0]
 800eab8:	f003 0308 	and.w	r3, r3, #8
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d102      	bne.n	800eac6 <USER_SPI_write+0x56>
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	025b      	lsls	r3, r3, #9
 800eac4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	2b01      	cmp	r3, #1
 800eaca:	d110      	bne.n	800eaee <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800eacc:	6879      	ldr	r1, [r7, #4]
 800eace:	2018      	movs	r0, #24
 800ead0:	f7ff fdf9 	bl	800e6c6 <send_cmd>
 800ead4:	4603      	mov	r3, r0
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d136      	bne.n	800eb48 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800eada:	21fe      	movs	r1, #254	; 0xfe
 800eadc:	68b8      	ldr	r0, [r7, #8]
 800eade:	f7ff fdc0 	bl	800e662 <xmit_datablock>
 800eae2:	4603      	mov	r3, r0
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d02f      	beq.n	800eb48 <USER_SPI_write+0xd8>
			count = 0;
 800eae8:	2300      	movs	r3, #0
 800eaea:	603b      	str	r3, [r7, #0]
 800eaec:	e02c      	b.n	800eb48 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800eaee:	4b1d      	ldr	r3, [pc, #116]	; (800eb64 <USER_SPI_write+0xf4>)
 800eaf0:	781b      	ldrb	r3, [r3, #0]
 800eaf2:	f003 0306 	and.w	r3, r3, #6
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d003      	beq.n	800eb02 <USER_SPI_write+0x92>
 800eafa:	6839      	ldr	r1, [r7, #0]
 800eafc:	2097      	movs	r0, #151	; 0x97
 800eafe:	f7ff fde2 	bl	800e6c6 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800eb02:	6879      	ldr	r1, [r7, #4]
 800eb04:	2019      	movs	r0, #25
 800eb06:	f7ff fdde 	bl	800e6c6 <send_cmd>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d11b      	bne.n	800eb48 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800eb10:	21fc      	movs	r1, #252	; 0xfc
 800eb12:	68b8      	ldr	r0, [r7, #8]
 800eb14:	f7ff fda5 	bl	800e662 <xmit_datablock>
 800eb18:	4603      	mov	r3, r0
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d00a      	beq.n	800eb34 <USER_SPI_write+0xc4>
				buff += 512;
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800eb24:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	3b01      	subs	r3, #1
 800eb2a:	603b      	str	r3, [r7, #0]
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d1ee      	bne.n	800eb10 <USER_SPI_write+0xa0>
 800eb32:	e000      	b.n	800eb36 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800eb34:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800eb36:	21fd      	movs	r1, #253	; 0xfd
 800eb38:	2000      	movs	r0, #0
 800eb3a:	f7ff fd92 	bl	800e662 <xmit_datablock>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d101      	bne.n	800eb48 <USER_SPI_write+0xd8>
 800eb44:	2301      	movs	r3, #1
 800eb46:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800eb48:	f7ff fd3a 	bl	800e5c0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	bf14      	ite	ne
 800eb52:	2301      	movne	r3, #1
 800eb54:	2300      	moveq	r3, #0
 800eb56:	b2db      	uxtb	r3, r3
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3710      	adds	r7, #16
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}
 800eb60:	2400002c 	.word	0x2400002c
 800eb64:	2400a3cc 	.word	0x2400a3cc

0800eb68 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b08c      	sub	sp, #48	; 0x30
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	4603      	mov	r3, r0
 800eb70:	603a      	str	r2, [r7, #0]
 800eb72:	71fb      	strb	r3, [r7, #7]
 800eb74:	460b      	mov	r3, r1
 800eb76:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800eb78:	79fb      	ldrb	r3, [r7, #7]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d001      	beq.n	800eb82 <USER_SPI_ioctl+0x1a>
 800eb7e:	2304      	movs	r3, #4
 800eb80:	e15a      	b.n	800ee38 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800eb82:	4baf      	ldr	r3, [pc, #700]	; (800ee40 <USER_SPI_ioctl+0x2d8>)
 800eb84:	781b      	ldrb	r3, [r3, #0]
 800eb86:	b2db      	uxtb	r3, r3
 800eb88:	f003 0301 	and.w	r3, r3, #1
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d001      	beq.n	800eb94 <USER_SPI_ioctl+0x2c>
 800eb90:	2303      	movs	r3, #3
 800eb92:	e151      	b.n	800ee38 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800eb94:	2301      	movs	r3, #1
 800eb96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800eb9a:	79bb      	ldrb	r3, [r7, #6]
 800eb9c:	2b04      	cmp	r3, #4
 800eb9e:	f200 8136 	bhi.w	800ee0e <USER_SPI_ioctl+0x2a6>
 800eba2:	a201      	add	r2, pc, #4	; (adr r2, 800eba8 <USER_SPI_ioctl+0x40>)
 800eba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eba8:	0800ebbd 	.word	0x0800ebbd
 800ebac:	0800ebd1 	.word	0x0800ebd1
 800ebb0:	0800ee0f 	.word	0x0800ee0f
 800ebb4:	0800ec7d 	.word	0x0800ec7d
 800ebb8:	0800ed73 	.word	0x0800ed73
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800ebbc:	f7ff fd0e 	bl	800e5dc <spiselect>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	f000 8127 	beq.w	800ee16 <USER_SPI_ioctl+0x2ae>
 800ebc8:	2300      	movs	r3, #0
 800ebca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800ebce:	e122      	b.n	800ee16 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800ebd0:	2100      	movs	r1, #0
 800ebd2:	2009      	movs	r0, #9
 800ebd4:	f7ff fd77 	bl	800e6c6 <send_cmd>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	f040 811d 	bne.w	800ee1a <USER_SPI_ioctl+0x2b2>
 800ebe0:	f107 030c 	add.w	r3, r7, #12
 800ebe4:	2110      	movs	r1, #16
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7ff fd12 	bl	800e610 <rcvr_datablock>
 800ebec:	4603      	mov	r3, r0
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	f000 8113 	beq.w	800ee1a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800ebf4:	7b3b      	ldrb	r3, [r7, #12]
 800ebf6:	099b      	lsrs	r3, r3, #6
 800ebf8:	b2db      	uxtb	r3, r3
 800ebfa:	2b01      	cmp	r3, #1
 800ebfc:	d111      	bne.n	800ec22 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800ebfe:	7d7b      	ldrb	r3, [r7, #21]
 800ec00:	461a      	mov	r2, r3
 800ec02:	7d3b      	ldrb	r3, [r7, #20]
 800ec04:	021b      	lsls	r3, r3, #8
 800ec06:	4413      	add	r3, r2
 800ec08:	461a      	mov	r2, r3
 800ec0a:	7cfb      	ldrb	r3, [r7, #19]
 800ec0c:	041b      	lsls	r3, r3, #16
 800ec0e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800ec12:	4413      	add	r3, r2
 800ec14:	3301      	adds	r3, #1
 800ec16:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800ec18:	69fb      	ldr	r3, [r7, #28]
 800ec1a:	029a      	lsls	r2, r3, #10
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	601a      	str	r2, [r3, #0]
 800ec20:	e028      	b.n	800ec74 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800ec22:	7c7b      	ldrb	r3, [r7, #17]
 800ec24:	f003 030f 	and.w	r3, r3, #15
 800ec28:	b2da      	uxtb	r2, r3
 800ec2a:	7dbb      	ldrb	r3, [r7, #22]
 800ec2c:	09db      	lsrs	r3, r3, #7
 800ec2e:	b2db      	uxtb	r3, r3
 800ec30:	4413      	add	r3, r2
 800ec32:	b2da      	uxtb	r2, r3
 800ec34:	7d7b      	ldrb	r3, [r7, #21]
 800ec36:	005b      	lsls	r3, r3, #1
 800ec38:	b2db      	uxtb	r3, r3
 800ec3a:	f003 0306 	and.w	r3, r3, #6
 800ec3e:	b2db      	uxtb	r3, r3
 800ec40:	4413      	add	r3, r2
 800ec42:	b2db      	uxtb	r3, r3
 800ec44:	3302      	adds	r3, #2
 800ec46:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800ec4a:	7d3b      	ldrb	r3, [r7, #20]
 800ec4c:	099b      	lsrs	r3, r3, #6
 800ec4e:	b2db      	uxtb	r3, r3
 800ec50:	461a      	mov	r2, r3
 800ec52:	7cfb      	ldrb	r3, [r7, #19]
 800ec54:	009b      	lsls	r3, r3, #2
 800ec56:	441a      	add	r2, r3
 800ec58:	7cbb      	ldrb	r3, [r7, #18]
 800ec5a:	029b      	lsls	r3, r3, #10
 800ec5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ec60:	4413      	add	r3, r2
 800ec62:	3301      	adds	r3, #1
 800ec64:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800ec66:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ec6a:	3b09      	subs	r3, #9
 800ec6c:	69fa      	ldr	r2, [r7, #28]
 800ec6e:	409a      	lsls	r2, r3
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800ec74:	2300      	movs	r3, #0
 800ec76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800ec7a:	e0ce      	b.n	800ee1a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800ec7c:	4b71      	ldr	r3, [pc, #452]	; (800ee44 <USER_SPI_ioctl+0x2dc>)
 800ec7e:	781b      	ldrb	r3, [r3, #0]
 800ec80:	f003 0304 	and.w	r3, r3, #4
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d031      	beq.n	800ecec <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800ec88:	2100      	movs	r1, #0
 800ec8a:	208d      	movs	r0, #141	; 0x8d
 800ec8c:	f7ff fd1b 	bl	800e6c6 <send_cmd>
 800ec90:	4603      	mov	r3, r0
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	f040 80c3 	bne.w	800ee1e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800ec98:	20ff      	movs	r0, #255	; 0xff
 800ec9a:	f7ff fc21 	bl	800e4e0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800ec9e:	f107 030c 	add.w	r3, r7, #12
 800eca2:	2110      	movs	r1, #16
 800eca4:	4618      	mov	r0, r3
 800eca6:	f7ff fcb3 	bl	800e610 <rcvr_datablock>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	f000 80b6 	beq.w	800ee1e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800ecb2:	2330      	movs	r3, #48	; 0x30
 800ecb4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800ecb8:	e007      	b.n	800ecca <USER_SPI_ioctl+0x162>
 800ecba:	20ff      	movs	r0, #255	; 0xff
 800ecbc:	f7ff fc10 	bl	800e4e0 <xchg_spi>
 800ecc0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ecc4:	3b01      	subs	r3, #1
 800ecc6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800ecca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d1f3      	bne.n	800ecba <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800ecd2:	7dbb      	ldrb	r3, [r7, #22]
 800ecd4:	091b      	lsrs	r3, r3, #4
 800ecd6:	b2db      	uxtb	r3, r3
 800ecd8:	461a      	mov	r2, r3
 800ecda:	2310      	movs	r3, #16
 800ecdc:	fa03 f202 	lsl.w	r2, r3, r2
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800ece4:	2300      	movs	r3, #0
 800ece6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800ecea:	e098      	b.n	800ee1e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800ecec:	2100      	movs	r1, #0
 800ecee:	2009      	movs	r0, #9
 800ecf0:	f7ff fce9 	bl	800e6c6 <send_cmd>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	f040 8091 	bne.w	800ee1e <USER_SPI_ioctl+0x2b6>
 800ecfc:	f107 030c 	add.w	r3, r7, #12
 800ed00:	2110      	movs	r1, #16
 800ed02:	4618      	mov	r0, r3
 800ed04:	f7ff fc84 	bl	800e610 <rcvr_datablock>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	f000 8087 	beq.w	800ee1e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800ed10:	4b4c      	ldr	r3, [pc, #304]	; (800ee44 <USER_SPI_ioctl+0x2dc>)
 800ed12:	781b      	ldrb	r3, [r3, #0]
 800ed14:	f003 0302 	and.w	r3, r3, #2
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d012      	beq.n	800ed42 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800ed1c:	7dbb      	ldrb	r3, [r7, #22]
 800ed1e:	005b      	lsls	r3, r3, #1
 800ed20:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800ed24:	7dfa      	ldrb	r2, [r7, #23]
 800ed26:	09d2      	lsrs	r2, r2, #7
 800ed28:	b2d2      	uxtb	r2, r2
 800ed2a:	4413      	add	r3, r2
 800ed2c:	1c5a      	adds	r2, r3, #1
 800ed2e:	7e7b      	ldrb	r3, [r7, #25]
 800ed30:	099b      	lsrs	r3, r3, #6
 800ed32:	b2db      	uxtb	r3, r3
 800ed34:	3b01      	subs	r3, #1
 800ed36:	fa02 f303 	lsl.w	r3, r2, r3
 800ed3a:	461a      	mov	r2, r3
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	601a      	str	r2, [r3, #0]
 800ed40:	e013      	b.n	800ed6a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800ed42:	7dbb      	ldrb	r3, [r7, #22]
 800ed44:	109b      	asrs	r3, r3, #2
 800ed46:	b29b      	uxth	r3, r3
 800ed48:	f003 031f 	and.w	r3, r3, #31
 800ed4c:	3301      	adds	r3, #1
 800ed4e:	7dfa      	ldrb	r2, [r7, #23]
 800ed50:	00d2      	lsls	r2, r2, #3
 800ed52:	f002 0218 	and.w	r2, r2, #24
 800ed56:	7df9      	ldrb	r1, [r7, #23]
 800ed58:	0949      	lsrs	r1, r1, #5
 800ed5a:	b2c9      	uxtb	r1, r1
 800ed5c:	440a      	add	r2, r1
 800ed5e:	3201      	adds	r2, #1
 800ed60:	fb02 f303 	mul.w	r3, r2, r3
 800ed64:	461a      	mov	r2, r3
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800ed70:	e055      	b.n	800ee1e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800ed72:	4b34      	ldr	r3, [pc, #208]	; (800ee44 <USER_SPI_ioctl+0x2dc>)
 800ed74:	781b      	ldrb	r3, [r3, #0]
 800ed76:	f003 0306 	and.w	r3, r3, #6
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d051      	beq.n	800ee22 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800ed7e:	f107 020c 	add.w	r2, r7, #12
 800ed82:	79fb      	ldrb	r3, [r7, #7]
 800ed84:	210b      	movs	r1, #11
 800ed86:	4618      	mov	r0, r3
 800ed88:	f7ff feee 	bl	800eb68 <USER_SPI_ioctl>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d149      	bne.n	800ee26 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800ed92:	7b3b      	ldrb	r3, [r7, #12]
 800ed94:	099b      	lsrs	r3, r3, #6
 800ed96:	b2db      	uxtb	r3, r3
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d104      	bne.n	800eda6 <USER_SPI_ioctl+0x23e>
 800ed9c:	7dbb      	ldrb	r3, [r7, #22]
 800ed9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d041      	beq.n	800ee2a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	623b      	str	r3, [r7, #32]
 800edaa:	6a3b      	ldr	r3, [r7, #32]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	62bb      	str	r3, [r7, #40]	; 0x28
 800edb0:	6a3b      	ldr	r3, [r7, #32]
 800edb2:	685b      	ldr	r3, [r3, #4]
 800edb4:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800edb6:	4b23      	ldr	r3, [pc, #140]	; (800ee44 <USER_SPI_ioctl+0x2dc>)
 800edb8:	781b      	ldrb	r3, [r3, #0]
 800edba:	f003 0308 	and.w	r3, r3, #8
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d105      	bne.n	800edce <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800edc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc4:	025b      	lsls	r3, r3, #9
 800edc6:	62bb      	str	r3, [r7, #40]	; 0x28
 800edc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edca:	025b      	lsls	r3, r3, #9
 800edcc:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800edce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800edd0:	2020      	movs	r0, #32
 800edd2:	f7ff fc78 	bl	800e6c6 <send_cmd>
 800edd6:	4603      	mov	r3, r0
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d128      	bne.n	800ee2e <USER_SPI_ioctl+0x2c6>
 800eddc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800edde:	2021      	movs	r0, #33	; 0x21
 800ede0:	f7ff fc71 	bl	800e6c6 <send_cmd>
 800ede4:	4603      	mov	r3, r0
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d121      	bne.n	800ee2e <USER_SPI_ioctl+0x2c6>
 800edea:	2100      	movs	r1, #0
 800edec:	2026      	movs	r0, #38	; 0x26
 800edee:	f7ff fc6a 	bl	800e6c6 <send_cmd>
 800edf2:	4603      	mov	r3, r0
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d11a      	bne.n	800ee2e <USER_SPI_ioctl+0x2c6>
 800edf8:	f247 5030 	movw	r0, #30000	; 0x7530
 800edfc:	f7ff fbbd 	bl	800e57a <wait_ready>
 800ee00:	4603      	mov	r3, r0
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d013      	beq.n	800ee2e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800ee06:	2300      	movs	r3, #0
 800ee08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800ee0c:	e00f      	b.n	800ee2e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800ee0e:	2304      	movs	r3, #4
 800ee10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ee14:	e00c      	b.n	800ee30 <USER_SPI_ioctl+0x2c8>
		break;
 800ee16:	bf00      	nop
 800ee18:	e00a      	b.n	800ee30 <USER_SPI_ioctl+0x2c8>
		break;
 800ee1a:	bf00      	nop
 800ee1c:	e008      	b.n	800ee30 <USER_SPI_ioctl+0x2c8>
		break;
 800ee1e:	bf00      	nop
 800ee20:	e006      	b.n	800ee30 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800ee22:	bf00      	nop
 800ee24:	e004      	b.n	800ee30 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800ee26:	bf00      	nop
 800ee28:	e002      	b.n	800ee30 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800ee2a:	bf00      	nop
 800ee2c:	e000      	b.n	800ee30 <USER_SPI_ioctl+0x2c8>
		break;
 800ee2e:	bf00      	nop
	}

	despiselect();
 800ee30:	f7ff fbc6 	bl	800e5c0 <despiselect>

	return res;
 800ee34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3730      	adds	r7, #48	; 0x30
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}
 800ee40:	2400002c 	.word	0x2400002c
 800ee44:	2400a3cc 	.word	0x2400a3cc

0800ee48 <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b082      	sub	sp, #8
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	4603      	mov	r3, r0
 800ee50:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&DEV_SPI, (uint8_t *)&_dat, 1, 500);
 800ee52:	1df9      	adds	r1, r7, #7
 800ee54:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800ee58:	2201      	movs	r2, #1
 800ee5a:	4803      	ldr	r0, [pc, #12]	; (800ee68 <DEV_SPI_WRite+0x20>)
 800ee5c:	f7fb f8be 	bl	8009fdc <HAL_SPI_Transmit>
}
 800ee60:	bf00      	nop
 800ee62:	3708      	adds	r7, #8
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bd80      	pop	{r7, pc}
 800ee68:	2400b064 	.word	0x2400b064

0800ee6c <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 800ee70:	2201      	movs	r2, #1
 800ee72:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ee76:	480a      	ldr	r0, [pc, #40]	; (800eea0 <DEV_Module_Init+0x34>)
 800ee78:	f7f6 fd2e 	bl	80058d8 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 800ee7c:	2201      	movs	r2, #1
 800ee7e:	2140      	movs	r1, #64	; 0x40
 800ee80:	4807      	ldr	r0, [pc, #28]	; (800eea0 <DEV_Module_Init+0x34>)
 800ee82:	f7f6 fd29 	bl	80058d8 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 800ee86:	2201      	movs	r2, #1
 800ee88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ee8c:	4805      	ldr	r0, [pc, #20]	; (800eea4 <DEV_Module_Init+0x38>)
 800ee8e:	f7f6 fd23 	bl	80058d8 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&DEV_BL_TIM, DEV_BL_CH);
 800ee92:	2100      	movs	r1, #0
 800ee94:	4804      	ldr	r0, [pc, #16]	; (800eea8 <DEV_Module_Init+0x3c>)
 800ee96:	f7fb febf 	bl	800ac18 <HAL_TIM_PWM_Start>
		return 0;
 800ee9a:	2300      	movs	r3, #0
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	bd80      	pop	{r7, pc}
 800eea0:	58021800 	.word	0x58021800
 800eea4:	58021400 	.word	0x58021400
 800eea8:	2400b13c 	.word	0x2400b13c

0800eeac <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 800eeac:	b590      	push	{r4, r7, lr}
 800eeae:	b083      	sub	sp, #12
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	4604      	mov	r4, r0
 800eeb4:	4608      	mov	r0, r1
 800eeb6:	4611      	mov	r1, r2
 800eeb8:	461a      	mov	r2, r3
 800eeba:	4623      	mov	r3, r4
 800eebc:	80fb      	strh	r3, [r7, #6]
 800eebe:	4603      	mov	r3, r0
 800eec0:	80bb      	strh	r3, [r7, #4]
 800eec2:	460b      	mov	r3, r1
 800eec4:	807b      	strh	r3, [r7, #2]
 800eec6:	4613      	mov	r3, r2
 800eec8:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 800eeca:	4a1c      	ldr	r2, [pc, #112]	; (800ef3c <Paint_NewImage+0x90>)
 800eecc:	88fb      	ldrh	r3, [r7, #6]
 800eece:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 800eed0:	4a1a      	ldr	r2, [pc, #104]	; (800ef3c <Paint_NewImage+0x90>)
 800eed2:	88bb      	ldrh	r3, [r7, #4]
 800eed4:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 800eed6:	4a19      	ldr	r2, [pc, #100]	; (800ef3c <Paint_NewImage+0x90>)
 800eed8:	883b      	ldrh	r3, [r7, #0]
 800eeda:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 800eedc:	4a17      	ldr	r2, [pc, #92]	; (800ef3c <Paint_NewImage+0x90>)
 800eede:	88fb      	ldrh	r3, [r7, #6]
 800eee0:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 800eee2:	4a16      	ldr	r2, [pc, #88]	; (800ef3c <Paint_NewImage+0x90>)
 800eee4:	88bb      	ldrh	r3, [r7, #4]
 800eee6:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 800eee8:	4b14      	ldr	r3, [pc, #80]	; (800ef3c <Paint_NewImage+0x90>)
 800eeea:	8a5b      	ldrh	r3, [r3, #18]
 800eeec:	b29b      	uxth	r3, r3
 800eeee:	4619      	mov	r1, r3
 800eef0:	4b12      	ldr	r3, [pc, #72]	; (800ef3c <Paint_NewImage+0x90>)
 800eef2:	8a9b      	ldrh	r3, [r3, #20]
 800eef4:	b29b      	uxth	r3, r3
 800eef6:	461a      	mov	r2, r3
 800eef8:	4811      	ldr	r0, [pc, #68]	; (800ef40 <Paint_NewImage+0x94>)
 800eefa:	f00e fc97 	bl	801d82c <iprintf>
   
    Paint.Rotate = Rotate;
 800eefe:	4a0f      	ldr	r2, [pc, #60]	; (800ef3c <Paint_NewImage+0x90>)
 800ef00:	887b      	ldrh	r3, [r7, #2]
 800ef02:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 800ef04:	4b0d      	ldr	r3, [pc, #52]	; (800ef3c <Paint_NewImage+0x90>)
 800ef06:	2200      	movs	r2, #0
 800ef08:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800ef0a:	887b      	ldrh	r3, [r7, #2]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d002      	beq.n	800ef16 <Paint_NewImage+0x6a>
 800ef10:	887b      	ldrh	r3, [r7, #2]
 800ef12:	2bb4      	cmp	r3, #180	; 0xb4
 800ef14:	d106      	bne.n	800ef24 <Paint_NewImage+0x78>
        Paint.Width = Width;
 800ef16:	4a09      	ldr	r2, [pc, #36]	; (800ef3c <Paint_NewImage+0x90>)
 800ef18:	88fb      	ldrh	r3, [r7, #6]
 800ef1a:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 800ef1c:	4a07      	ldr	r2, [pc, #28]	; (800ef3c <Paint_NewImage+0x90>)
 800ef1e:	88bb      	ldrh	r3, [r7, #4]
 800ef20:	80d3      	strh	r3, [r2, #6]
 800ef22:	e006      	b.n	800ef32 <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 800ef24:	4a05      	ldr	r2, [pc, #20]	; (800ef3c <Paint_NewImage+0x90>)
 800ef26:	88bb      	ldrh	r3, [r7, #4]
 800ef28:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800ef2a:	4a04      	ldr	r2, [pc, #16]	; (800ef3c <Paint_NewImage+0x90>)
 800ef2c:	88fb      	ldrh	r3, [r7, #6]
 800ef2e:	80d3      	strh	r3, [r2, #6]
    }
}
 800ef30:	bf00      	nop
 800ef32:	bf00      	nop
 800ef34:	370c      	adds	r7, #12
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd90      	pop	{r4, r7, pc}
 800ef3a:	bf00      	nop
 800ef3c:	2400b814 	.word	0x2400b814
 800ef40:	08021398 	.word	0x08021398

0800ef44 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 800ef44:	b480      	push	{r7}
 800ef46:	b083      	sub	sp, #12
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 800ef4c:	4a04      	ldr	r2, [pc, #16]	; (800ef60 <Paint_SetClearFuntion+0x1c>)
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6013      	str	r3, [r2, #0]
}
 800ef52:	bf00      	nop
 800ef54:	370c      	adds	r7, #12
 800ef56:	46bd      	mov	sp, r7
 800ef58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5c:	4770      	bx	lr
 800ef5e:	bf00      	nop
 800ef60:	2400b82c 	.word	0x2400b82c

0800ef64 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 800ef64:	b480      	push	{r7}
 800ef66:	b083      	sub	sp, #12
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 800ef6c:	4a04      	ldr	r2, [pc, #16]	; (800ef80 <Paint_SetDisplayFuntion+0x1c>)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	6013      	str	r3, [r2, #0]
}
 800ef72:	bf00      	nop
 800ef74:	370c      	adds	r7, #12
 800ef76:	46bd      	mov	sp, r7
 800ef78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7c:	4770      	bx	lr
 800ef7e:	bf00      	nop
 800ef80:	2400b810 	.word	0x2400b810

0800ef84 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b084      	sub	sp, #16
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	80fb      	strh	r3, [r7, #6]
 800ef8e:	460b      	mov	r3, r1
 800ef90:	80bb      	strh	r3, [r7, #4]
 800ef92:	4613      	mov	r3, r2
 800ef94:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 800ef96:	4b50      	ldr	r3, [pc, #320]	; (800f0d8 <Paint_SetPixel+0x154>)
 800ef98:	889b      	ldrh	r3, [r3, #4]
 800ef9a:	b29b      	uxth	r3, r3
 800ef9c:	88fa      	ldrh	r2, [r7, #6]
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	d805      	bhi.n	800efae <Paint_SetPixel+0x2a>
 800efa2:	4b4d      	ldr	r3, [pc, #308]	; (800f0d8 <Paint_SetPixel+0x154>)
 800efa4:	88db      	ldrh	r3, [r3, #6]
 800efa6:	b29b      	uxth	r3, r3
 800efa8:	88ba      	ldrh	r2, [r7, #4]
 800efaa:	429a      	cmp	r2, r3
 800efac:	d903      	bls.n	800efb6 <Paint_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 800efae:	484b      	ldr	r0, [pc, #300]	; (800f0dc <Paint_SetPixel+0x158>)
 800efb0:	f00e fcc2 	bl	801d938 <puts>
        return;
 800efb4:	e08c      	b.n	800f0d0 <Paint_SetPixel+0x14c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 800efb6:	4b48      	ldr	r3, [pc, #288]	; (800f0d8 <Paint_SetPixel+0x154>)
 800efb8:	89db      	ldrh	r3, [r3, #14]
 800efba:	b29b      	uxth	r3, r3
 800efbc:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800efc0:	d02d      	beq.n	800f01e <Paint_SetPixel+0x9a>
 800efc2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800efc6:	f300 8080 	bgt.w	800f0ca <Paint_SetPixel+0x146>
 800efca:	2bb4      	cmp	r3, #180	; 0xb4
 800efcc:	d016      	beq.n	800effc <Paint_SetPixel+0x78>
 800efce:	2bb4      	cmp	r3, #180	; 0xb4
 800efd0:	dc7b      	bgt.n	800f0ca <Paint_SetPixel+0x146>
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d002      	beq.n	800efdc <Paint_SetPixel+0x58>
 800efd6:	2b5a      	cmp	r3, #90	; 0x5a
 800efd8:	d005      	beq.n	800efe6 <Paint_SetPixel+0x62>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 800efda:	e076      	b.n	800f0ca <Paint_SetPixel+0x146>
        X = Xpoint;
 800efdc:	88fb      	ldrh	r3, [r7, #6]
 800efde:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 800efe0:	88bb      	ldrh	r3, [r7, #4]
 800efe2:	81bb      	strh	r3, [r7, #12]
        break;
 800efe4:	e026      	b.n	800f034 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Ypoint - 1;
 800efe6:	4b3c      	ldr	r3, [pc, #240]	; (800f0d8 <Paint_SetPixel+0x154>)
 800efe8:	891b      	ldrh	r3, [r3, #8]
 800efea:	b29a      	uxth	r2, r3
 800efec:	88bb      	ldrh	r3, [r7, #4]
 800efee:	1ad3      	subs	r3, r2, r3
 800eff0:	b29b      	uxth	r3, r3
 800eff2:	3b01      	subs	r3, #1
 800eff4:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 800eff6:	88fb      	ldrh	r3, [r7, #6]
 800eff8:	81bb      	strh	r3, [r7, #12]
        break;
 800effa:	e01b      	b.n	800f034 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Xpoint - 1;
 800effc:	4b36      	ldr	r3, [pc, #216]	; (800f0d8 <Paint_SetPixel+0x154>)
 800effe:	891b      	ldrh	r3, [r3, #8]
 800f000:	b29a      	uxth	r2, r3
 800f002:	88fb      	ldrh	r3, [r7, #6]
 800f004:	1ad3      	subs	r3, r2, r3
 800f006:	b29b      	uxth	r3, r3
 800f008:	3b01      	subs	r3, #1
 800f00a:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 800f00c:	4b32      	ldr	r3, [pc, #200]	; (800f0d8 <Paint_SetPixel+0x154>)
 800f00e:	895b      	ldrh	r3, [r3, #10]
 800f010:	b29a      	uxth	r2, r3
 800f012:	88bb      	ldrh	r3, [r7, #4]
 800f014:	1ad3      	subs	r3, r2, r3
 800f016:	b29b      	uxth	r3, r3
 800f018:	3b01      	subs	r3, #1
 800f01a:	81bb      	strh	r3, [r7, #12]
        break;
 800f01c:	e00a      	b.n	800f034 <Paint_SetPixel+0xb0>
        X = Ypoint;
 800f01e:	88bb      	ldrh	r3, [r7, #4]
 800f020:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 800f022:	4b2d      	ldr	r3, [pc, #180]	; (800f0d8 <Paint_SetPixel+0x154>)
 800f024:	895b      	ldrh	r3, [r3, #10]
 800f026:	b29a      	uxth	r2, r3
 800f028:	88fb      	ldrh	r3, [r7, #6]
 800f02a:	1ad3      	subs	r3, r2, r3
 800f02c:	b29b      	uxth	r3, r3
 800f02e:	3b01      	subs	r3, #1
 800f030:	81bb      	strh	r3, [r7, #12]
        break;
 800f032:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 800f034:	4b28      	ldr	r3, [pc, #160]	; (800f0d8 <Paint_SetPixel+0x154>)
 800f036:	8a1b      	ldrh	r3, [r3, #16]
 800f038:	b29b      	uxth	r3, r3
 800f03a:	2b03      	cmp	r3, #3
 800f03c:	d847      	bhi.n	800f0ce <Paint_SetPixel+0x14a>
 800f03e:	a201      	add	r2, pc, #4	; (adr r2, 800f044 <Paint_SetPixel+0xc0>)
 800f040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f044:	0800f09b 	.word	0x0800f09b
 800f048:	0800f055 	.word	0x0800f055
 800f04c:	0800f067 	.word	0x0800f067
 800f050:	0800f079 	.word	0x0800f079
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 800f054:	4b20      	ldr	r3, [pc, #128]	; (800f0d8 <Paint_SetPixel+0x154>)
 800f056:	891b      	ldrh	r3, [r3, #8]
 800f058:	b29a      	uxth	r2, r3
 800f05a:	89fb      	ldrh	r3, [r7, #14]
 800f05c:	1ad3      	subs	r3, r2, r3
 800f05e:	b29b      	uxth	r3, r3
 800f060:	3b01      	subs	r3, #1
 800f062:	81fb      	strh	r3, [r7, #14]
        break;
 800f064:	e01a      	b.n	800f09c <Paint_SetPixel+0x118>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 800f066:	4b1c      	ldr	r3, [pc, #112]	; (800f0d8 <Paint_SetPixel+0x154>)
 800f068:	895b      	ldrh	r3, [r3, #10]
 800f06a:	b29a      	uxth	r2, r3
 800f06c:	89bb      	ldrh	r3, [r7, #12]
 800f06e:	1ad3      	subs	r3, r2, r3
 800f070:	b29b      	uxth	r3, r3
 800f072:	3b01      	subs	r3, #1
 800f074:	81bb      	strh	r3, [r7, #12]
        break;
 800f076:	e011      	b.n	800f09c <Paint_SetPixel+0x118>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 800f078:	4b17      	ldr	r3, [pc, #92]	; (800f0d8 <Paint_SetPixel+0x154>)
 800f07a:	891b      	ldrh	r3, [r3, #8]
 800f07c:	b29a      	uxth	r2, r3
 800f07e:	89fb      	ldrh	r3, [r7, #14]
 800f080:	1ad3      	subs	r3, r2, r3
 800f082:	b29b      	uxth	r3, r3
 800f084:	3b01      	subs	r3, #1
 800f086:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 800f088:	4b13      	ldr	r3, [pc, #76]	; (800f0d8 <Paint_SetPixel+0x154>)
 800f08a:	895b      	ldrh	r3, [r3, #10]
 800f08c:	b29a      	uxth	r2, r3
 800f08e:	89bb      	ldrh	r3, [r7, #12]
 800f090:	1ad3      	subs	r3, r2, r3
 800f092:	b29b      	uxth	r3, r3
 800f094:	3b01      	subs	r3, #1
 800f096:	81bb      	strh	r3, [r7, #12]
        break;
 800f098:	e000      	b.n	800f09c <Paint_SetPixel+0x118>
        break;
 800f09a:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 800f09c:	4b0e      	ldr	r3, [pc, #56]	; (800f0d8 <Paint_SetPixel+0x154>)
 800f09e:	891b      	ldrh	r3, [r3, #8]
 800f0a0:	b29b      	uxth	r3, r3
 800f0a2:	89fa      	ldrh	r2, [r7, #14]
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	d805      	bhi.n	800f0b4 <Paint_SetPixel+0x130>
 800f0a8:	4b0b      	ldr	r3, [pc, #44]	; (800f0d8 <Paint_SetPixel+0x154>)
 800f0aa:	895b      	ldrh	r3, [r3, #10]
 800f0ac:	b29b      	uxth	r3, r3
 800f0ae:	89ba      	ldrh	r2, [r7, #12]
 800f0b0:	429a      	cmp	r2, r3
 800f0b2:	d903      	bls.n	800f0bc <Paint_SetPixel+0x138>
        Debug("Exceeding display boundaries\r\n");
 800f0b4:	4809      	ldr	r0, [pc, #36]	; (800f0dc <Paint_SetPixel+0x158>)
 800f0b6:	f00e fc3f 	bl	801d938 <puts>
        return;
 800f0ba:	e009      	b.n	800f0d0 <Paint_SetPixel+0x14c>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 800f0bc:	4b08      	ldr	r3, [pc, #32]	; (800f0e0 <Paint_SetPixel+0x15c>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	887a      	ldrh	r2, [r7, #2]
 800f0c2:	89b9      	ldrh	r1, [r7, #12]
 800f0c4:	89f8      	ldrh	r0, [r7, #14]
 800f0c6:	4798      	blx	r3
 800f0c8:	e002      	b.n	800f0d0 <Paint_SetPixel+0x14c>
        return;
 800f0ca:	bf00      	nop
 800f0cc:	e000      	b.n	800f0d0 <Paint_SetPixel+0x14c>
        return;
 800f0ce:	bf00      	nop
}
 800f0d0:	3710      	adds	r7, #16
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}
 800f0d6:	bf00      	nop
 800f0d8:	2400b814 	.word	0x2400b814
 800f0dc:	08021498 	.word	0x08021498
 800f0e0:	2400b810 	.word	0x2400b810

0800f0e4 <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b082      	sub	sp, #8
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 800f0ee:	4b04      	ldr	r3, [pc, #16]	; (800f100 <Paint_Clear+0x1c>)
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	88fa      	ldrh	r2, [r7, #6]
 800f0f4:	4610      	mov	r0, r2
 800f0f6:	4798      	blx	r3
}
 800f0f8:	bf00      	nop
 800f0fa:	3708      	adds	r7, #8
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd80      	pop	{r7, pc}
 800f100:	2400b82c 	.word	0x2400b82c

0800f104 <Paint_ClearWindows>:
    Ystart :   Y starting point
    Xend   :   x end point
    Yend   :   y end point
******************************************************************************/
void Paint_ClearWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, UWORD Color)
{
 800f104:	b590      	push	{r4, r7, lr}
 800f106:	b085      	sub	sp, #20
 800f108:	af00      	add	r7, sp, #0
 800f10a:	4604      	mov	r4, r0
 800f10c:	4608      	mov	r0, r1
 800f10e:	4611      	mov	r1, r2
 800f110:	461a      	mov	r2, r3
 800f112:	4623      	mov	r3, r4
 800f114:	80fb      	strh	r3, [r7, #6]
 800f116:	4603      	mov	r3, r0
 800f118:	80bb      	strh	r3, [r7, #4]
 800f11a:	460b      	mov	r3, r1
 800f11c:	807b      	strh	r3, [r7, #2]
 800f11e:	4613      	mov	r3, r2
 800f120:	803b      	strh	r3, [r7, #0]
    UWORD X, Y;
    for (Y = Ystart; Y < Yend; Y++)
 800f122:	88bb      	ldrh	r3, [r7, #4]
 800f124:	81bb      	strh	r3, [r7, #12]
 800f126:	e012      	b.n	800f14e <Paint_ClearWindows+0x4a>
    {
        for (X = Xstart; X < Xend; X++)
 800f128:	88fb      	ldrh	r3, [r7, #6]
 800f12a:	81fb      	strh	r3, [r7, #14]
 800f12c:	e008      	b.n	800f140 <Paint_ClearWindows+0x3c>
        {//8 pixel =  1 byte
            Paint_SetPixel(X, Y, Color);
 800f12e:	8c3a      	ldrh	r2, [r7, #32]
 800f130:	89b9      	ldrh	r1, [r7, #12]
 800f132:	89fb      	ldrh	r3, [r7, #14]
 800f134:	4618      	mov	r0, r3
 800f136:	f7ff ff25 	bl	800ef84 <Paint_SetPixel>
        for (X = Xstart; X < Xend; X++)
 800f13a:	89fb      	ldrh	r3, [r7, #14]
 800f13c:	3301      	adds	r3, #1
 800f13e:	81fb      	strh	r3, [r7, #14]
 800f140:	89fa      	ldrh	r2, [r7, #14]
 800f142:	887b      	ldrh	r3, [r7, #2]
 800f144:	429a      	cmp	r2, r3
 800f146:	d3f2      	bcc.n	800f12e <Paint_ClearWindows+0x2a>
    for (Y = Ystart; Y < Yend; Y++)
 800f148:	89bb      	ldrh	r3, [r7, #12]
 800f14a:	3301      	adds	r3, #1
 800f14c:	81bb      	strh	r3, [r7, #12]
 800f14e:	89ba      	ldrh	r2, [r7, #12]
 800f150:	883b      	ldrh	r3, [r7, #0]
 800f152:	429a      	cmp	r2, r3
 800f154:	d3e8      	bcc.n	800f128 <Paint_ClearWindows+0x24>
        }
    }
}
 800f156:	bf00      	nop
 800f158:	bf00      	nop
 800f15a:	3714      	adds	r7, #20
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd90      	pop	{r4, r7, pc}

0800f160 <Paint_DrawPoint>:
    Color		:   Set color
    Dot_Pixel	:	point size
******************************************************************************/
void Paint_DrawPoint( UWORD Xpoint,       UWORD Ypoint, UWORD Color,
                      DOT_PIXEL Dot_Pixel,DOT_STYLE Dot_FillWay)
{
 800f160:	b590      	push	{r4, r7, lr}
 800f162:	b085      	sub	sp, #20
 800f164:	af00      	add	r7, sp, #0
 800f166:	4604      	mov	r4, r0
 800f168:	4608      	mov	r0, r1
 800f16a:	4611      	mov	r1, r2
 800f16c:	461a      	mov	r2, r3
 800f16e:	4623      	mov	r3, r4
 800f170:	80fb      	strh	r3, [r7, #6]
 800f172:	4603      	mov	r3, r0
 800f174:	80bb      	strh	r3, [r7, #4]
 800f176:	460b      	mov	r3, r1
 800f178:	807b      	strh	r3, [r7, #2]
 800f17a:	4613      	mov	r3, r2
 800f17c:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800f17e:	4b44      	ldr	r3, [pc, #272]	; (800f290 <Paint_DrawPoint+0x130>)
 800f180:	889b      	ldrh	r3, [r3, #4]
 800f182:	b29b      	uxth	r3, r3
 800f184:	88fa      	ldrh	r2, [r7, #6]
 800f186:	429a      	cmp	r2, r3
 800f188:	d805      	bhi.n	800f196 <Paint_DrawPoint+0x36>
 800f18a:	4b41      	ldr	r3, [pc, #260]	; (800f290 <Paint_DrawPoint+0x130>)
 800f18c:	88db      	ldrh	r3, [r3, #6]
 800f18e:	b29b      	uxth	r3, r3
 800f190:	88ba      	ldrh	r2, [r7, #4]
 800f192:	429a      	cmp	r2, r3
 800f194:	d903      	bls.n	800f19e <Paint_DrawPoint+0x3e>
    {
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 800f196:	483f      	ldr	r0, [pc, #252]	; (800f294 <Paint_DrawPoint+0x134>)
 800f198:	f00e fbce 	bl	801d938 <puts>
        return;
 800f19c:	e074      	b.n	800f288 <Paint_DrawPoint+0x128>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_FillWay == DOT_FILL_AROUND)
 800f19e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f1a2:	2b01      	cmp	r3, #1
 800f1a4:	d144      	bne.n	800f230 <Paint_DrawPoint+0xd0>
    {
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++)
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	81fb      	strh	r3, [r7, #14]
 800f1aa:	e039      	b.n	800f220 <Paint_DrawPoint+0xc0>
        {
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++)
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	81bb      	strh	r3, [r7, #12]
 800f1b0:	e029      	b.n	800f206 <Paint_DrawPoint+0xa6>
            {
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800f1b2:	88fa      	ldrh	r2, [r7, #6]
 800f1b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f1b8:	441a      	add	r2, r3
 800f1ba:	787b      	ldrb	r3, [r7, #1]
 800f1bc:	1ad3      	subs	r3, r2, r3
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	db28      	blt.n	800f214 <Paint_DrawPoint+0xb4>
 800f1c2:	88ba      	ldrh	r2, [r7, #4]
 800f1c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f1c8:	441a      	add	r2, r3
 800f1ca:	787b      	ldrb	r3, [r7, #1]
 800f1cc:	1ad3      	subs	r3, r2, r3
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	db20      	blt.n	800f214 <Paint_DrawPoint+0xb4>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 800f1d2:	89fa      	ldrh	r2, [r7, #14]
 800f1d4:	88fb      	ldrh	r3, [r7, #6]
 800f1d6:	4413      	add	r3, r2
 800f1d8:	b29a      	uxth	r2, r3
 800f1da:	787b      	ldrb	r3, [r7, #1]
 800f1dc:	b29b      	uxth	r3, r3
 800f1de:	1ad3      	subs	r3, r2, r3
 800f1e0:	b298      	uxth	r0, r3
 800f1e2:	89ba      	ldrh	r2, [r7, #12]
 800f1e4:	88bb      	ldrh	r3, [r7, #4]
 800f1e6:	4413      	add	r3, r2
 800f1e8:	b29a      	uxth	r2, r3
 800f1ea:	787b      	ldrb	r3, [r7, #1]
 800f1ec:	b29b      	uxth	r3, r3
 800f1ee:	1ad3      	subs	r3, r2, r3
 800f1f0:	b29b      	uxth	r3, r3
 800f1f2:	887a      	ldrh	r2, [r7, #2]
 800f1f4:	4619      	mov	r1, r3
 800f1f6:	f7ff fec5 	bl	800ef84 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++)
 800f1fa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f1fe:	b29b      	uxth	r3, r3
 800f200:	3301      	adds	r3, #1
 800f202:	b29b      	uxth	r3, r3
 800f204:	81bb      	strh	r3, [r7, #12]
 800f206:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800f20a:	787b      	ldrb	r3, [r7, #1]
 800f20c:	005b      	lsls	r3, r3, #1
 800f20e:	3b01      	subs	r3, #1
 800f210:	429a      	cmp	r2, r3
 800f212:	dbce      	blt.n	800f1b2 <Paint_DrawPoint+0x52>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++)
 800f214:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f218:	b29b      	uxth	r3, r3
 800f21a:	3301      	adds	r3, #1
 800f21c:	b29b      	uxth	r3, r3
 800f21e:	81fb      	strh	r3, [r7, #14]
 800f220:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f224:	787b      	ldrb	r3, [r7, #1]
 800f226:	005b      	lsls	r3, r3, #1
 800f228:	3b01      	subs	r3, #1
 800f22a:	429a      	cmp	r2, r3
 800f22c:	dbbe      	blt.n	800f1ac <Paint_DrawPoint+0x4c>
 800f22e:	e02b      	b.n	800f288 <Paint_DrawPoint+0x128>
            }
        }
    }
    else
    {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++)
 800f230:	2300      	movs	r3, #0
 800f232:	81fb      	strh	r3, [r7, #14]
 800f234:	e023      	b.n	800f27e <Paint_DrawPoint+0x11e>
        {
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++)
 800f236:	2300      	movs	r3, #0
 800f238:	81bb      	strh	r3, [r7, #12]
 800f23a:	e015      	b.n	800f268 <Paint_DrawPoint+0x108>
            {
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 800f23c:	89fa      	ldrh	r2, [r7, #14]
 800f23e:	88fb      	ldrh	r3, [r7, #6]
 800f240:	4413      	add	r3, r2
 800f242:	b29b      	uxth	r3, r3
 800f244:	3b01      	subs	r3, #1
 800f246:	b298      	uxth	r0, r3
 800f248:	89ba      	ldrh	r2, [r7, #12]
 800f24a:	88bb      	ldrh	r3, [r7, #4]
 800f24c:	4413      	add	r3, r2
 800f24e:	b29b      	uxth	r3, r3
 800f250:	3b01      	subs	r3, #1
 800f252:	b29b      	uxth	r3, r3
 800f254:	887a      	ldrh	r2, [r7, #2]
 800f256:	4619      	mov	r1, r3
 800f258:	f7ff fe94 	bl	800ef84 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++)
 800f25c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f260:	b29b      	uxth	r3, r3
 800f262:	3301      	adds	r3, #1
 800f264:	b29b      	uxth	r3, r3
 800f266:	81bb      	strh	r3, [r7, #12]
 800f268:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800f26c:	787b      	ldrb	r3, [r7, #1]
 800f26e:	429a      	cmp	r2, r3
 800f270:	dbe4      	blt.n	800f23c <Paint_DrawPoint+0xdc>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++)
 800f272:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f276:	b29b      	uxth	r3, r3
 800f278:	3301      	adds	r3, #1
 800f27a:	b29b      	uxth	r3, r3
 800f27c:	81fb      	strh	r3, [r7, #14]
 800f27e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f282:	787b      	ldrb	r3, [r7, #1]
 800f284:	429a      	cmp	r2, r3
 800f286:	dbd6      	blt.n	800f236 <Paint_DrawPoint+0xd6>
            }
        }
    }
}
 800f288:	3714      	adds	r7, #20
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd90      	pop	{r4, r7, pc}
 800f28e:	bf00      	nop
 800f290:	2400b814 	.word	0x2400b814
 800f294:	080214c0 	.word	0x080214c0

0800f298 <Paint_DrawLine>:
    Yend   ：End point Ypoint coordinate
    Color  ：The color of the line segment
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 800f298:	b590      	push	{r4, r7, lr}
 800f29a:	b08d      	sub	sp, #52	; 0x34
 800f29c:	af02      	add	r7, sp, #8
 800f29e:	4604      	mov	r4, r0
 800f2a0:	4608      	mov	r0, r1
 800f2a2:	4611      	mov	r1, r2
 800f2a4:	461a      	mov	r2, r3
 800f2a6:	4623      	mov	r3, r4
 800f2a8:	80fb      	strh	r3, [r7, #6]
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	80bb      	strh	r3, [r7, #4]
 800f2ae:	460b      	mov	r3, r1
 800f2b0:	807b      	strh	r3, [r7, #2]
 800f2b2:	4613      	mov	r3, r2
 800f2b4:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800f2b6:	4b4d      	ldr	r3, [pc, #308]	; (800f3ec <Paint_DrawLine+0x154>)
 800f2b8:	889b      	ldrh	r3, [r3, #4]
 800f2ba:	b29b      	uxth	r3, r3
 800f2bc:	88fa      	ldrh	r2, [r7, #6]
 800f2be:	429a      	cmp	r2, r3
 800f2c0:	d811      	bhi.n	800f2e6 <Paint_DrawLine+0x4e>
 800f2c2:	4b4a      	ldr	r3, [pc, #296]	; (800f3ec <Paint_DrawLine+0x154>)
 800f2c4:	88db      	ldrh	r3, [r3, #6]
 800f2c6:	b29b      	uxth	r3, r3
 800f2c8:	88ba      	ldrh	r2, [r7, #4]
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d80b      	bhi.n	800f2e6 <Paint_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 800f2ce:	4b47      	ldr	r3, [pc, #284]	; (800f3ec <Paint_DrawLine+0x154>)
 800f2d0:	889b      	ldrh	r3, [r3, #4]
 800f2d2:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800f2d4:	887a      	ldrh	r2, [r7, #2]
 800f2d6:	429a      	cmp	r2, r3
 800f2d8:	d805      	bhi.n	800f2e6 <Paint_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 800f2da:	4b44      	ldr	r3, [pc, #272]	; (800f3ec <Paint_DrawLine+0x154>)
 800f2dc:	88db      	ldrh	r3, [r3, #6]
 800f2de:	b29b      	uxth	r3, r3
 800f2e0:	883a      	ldrh	r2, [r7, #0]
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d903      	bls.n	800f2ee <Paint_DrawLine+0x56>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 800f2e6:	4842      	ldr	r0, [pc, #264]	; (800f3f0 <Paint_DrawLine+0x158>)
 800f2e8:	f00e fb26 	bl	801d938 <puts>
        return;
 800f2ec:	e07b      	b.n	800f3e6 <Paint_DrawLine+0x14e>
    }

    UWORD Xpoint = Xstart;
 800f2ee:	88fb      	ldrh	r3, [r7, #6]
 800f2f0:	84fb      	strh	r3, [r7, #38]	; 0x26
    UWORD Ypoint = Ystart;
 800f2f2:	88bb      	ldrh	r3, [r7, #4]
 800f2f4:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 800f2f6:	887a      	ldrh	r2, [r7, #2]
 800f2f8:	88fb      	ldrh	r3, [r7, #6]
 800f2fa:	1ad3      	subs	r3, r2, r3
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	bfb8      	it	lt
 800f300:	425b      	neglt	r3, r3
 800f302:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 800f304:	883a      	ldrh	r2, [r7, #0]
 800f306:	88bb      	ldrh	r3, [r7, #4]
 800f308:	1ad3      	subs	r3, r2, r3
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	bfb8      	it	lt
 800f30e:	425b      	neglt	r3, r3
 800f310:	425b      	negs	r3, r3
 800f312:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 800f314:	88fa      	ldrh	r2, [r7, #6]
 800f316:	887b      	ldrh	r3, [r7, #2]
 800f318:	429a      	cmp	r2, r3
 800f31a:	d201      	bcs.n	800f320 <Paint_DrawLine+0x88>
 800f31c:	2301      	movs	r3, #1
 800f31e:	e001      	b.n	800f324 <Paint_DrawLine+0x8c>
 800f320:	f04f 33ff 	mov.w	r3, #4294967295
 800f324:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 800f326:	88ba      	ldrh	r2, [r7, #4]
 800f328:	883b      	ldrh	r3, [r7, #0]
 800f32a:	429a      	cmp	r2, r3
 800f32c:	d201      	bcs.n	800f332 <Paint_DrawLine+0x9a>
 800f32e:	2301      	movs	r3, #1
 800f330:	e001      	b.n	800f336 <Paint_DrawLine+0x9e>
 800f332:	f04f 33ff 	mov.w	r3, #4294967295
 800f336:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 800f338:	69ba      	ldr	r2, [r7, #24]
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	4413      	add	r3, r2
 800f33e:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 800f340:	2300      	movs	r3, #0
 800f342:	77fb      	strb	r3, [r7, #31]

    for (;;)
    {
        Dotted_Len++;
 800f344:	7ffb      	ldrb	r3, [r7, #31]
 800f346:	3301      	adds	r3, #1
 800f348:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0)
 800f34a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800f34e:	2b01      	cmp	r3, #1
 800f350:	d118      	bne.n	800f384 <Paint_DrawLine+0xec>
 800f352:	7ffa      	ldrb	r2, [r7, #31]
 800f354:	4b27      	ldr	r3, [pc, #156]	; (800f3f4 <Paint_DrawLine+0x15c>)
 800f356:	fba3 1302 	umull	r1, r3, r3, r2
 800f35a:	0859      	lsrs	r1, r3, #1
 800f35c:	460b      	mov	r3, r1
 800f35e:	005b      	lsls	r3, r3, #1
 800f360:	440b      	add	r3, r1
 800f362:	1ad3      	subs	r3, r2, r3
 800f364:	b2db      	uxtb	r3, r3
 800f366:	2b00      	cmp	r3, #0
 800f368:	d10c      	bne.n	800f384 <Paint_DrawLine+0xec>
        {
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 800f36a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f36e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800f370:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800f372:	2201      	movs	r2, #1
 800f374:	9200      	str	r2, [sp, #0]
 800f376:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f37a:	f7ff fef1 	bl	800f160 <Paint_DrawPoint>
            Dotted_Len = 0;
 800f37e:	2300      	movs	r3, #0
 800f380:	77fb      	strb	r3, [r7, #31]
 800f382:	e008      	b.n	800f396 <Paint_DrawLine+0xfe>
        }
        else
        {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 800f384:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f388:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800f38a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800f38c:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800f38e:	2401      	movs	r4, #1
 800f390:	9400      	str	r4, [sp, #0]
 800f392:	f7ff fee5 	bl	800f160 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy)
 800f396:	6a3b      	ldr	r3, [r7, #32]
 800f398:	005b      	lsls	r3, r3, #1
 800f39a:	697a      	ldr	r2, [r7, #20]
 800f39c:	429a      	cmp	r2, r3
 800f39e:	dc0c      	bgt.n	800f3ba <Paint_DrawLine+0x122>
        {
            if (Xpoint == Xend)
 800f3a0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f3a2:	887b      	ldrh	r3, [r7, #2]
 800f3a4:	429a      	cmp	r2, r3
 800f3a6:	d01b      	beq.n	800f3e0 <Paint_DrawLine+0x148>
                break;
            Esp += dy;
 800f3a8:	6a3a      	ldr	r2, [r7, #32]
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	4413      	add	r3, r2
 800f3ae:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 800f3b0:	693b      	ldr	r3, [r7, #16]
 800f3b2:	b29a      	uxth	r2, r3
 800f3b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f3b6:	4413      	add	r3, r2
 800f3b8:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx)
 800f3ba:	6a3b      	ldr	r3, [r7, #32]
 800f3bc:	005b      	lsls	r3, r3, #1
 800f3be:	69ba      	ldr	r2, [r7, #24]
 800f3c0:	429a      	cmp	r2, r3
 800f3c2:	dbbf      	blt.n	800f344 <Paint_DrawLine+0xac>
        {
            if (Ypoint == Yend)
 800f3c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f3c6:	883b      	ldrh	r3, [r7, #0]
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d00b      	beq.n	800f3e4 <Paint_DrawLine+0x14c>
                break;
            Esp += dx;
 800f3cc:	6a3a      	ldr	r2, [r7, #32]
 800f3ce:	69bb      	ldr	r3, [r7, #24]
 800f3d0:	4413      	add	r3, r2
 800f3d2:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	b29a      	uxth	r2, r3
 800f3d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f3da:	4413      	add	r3, r2
 800f3dc:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 800f3de:	e7b1      	b.n	800f344 <Paint_DrawLine+0xac>
                break;
 800f3e0:	bf00      	nop
 800f3e2:	e000      	b.n	800f3e6 <Paint_DrawLine+0x14e>
                break;
 800f3e4:	bf00      	nop
        }
    }
}
 800f3e6:	372c      	adds	r7, #44	; 0x2c
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd90      	pop	{r4, r7, pc}
 800f3ec:	2400b814 	.word	0x2400b814
 800f3f0:	08021500 	.word	0x08021500
 800f3f4:	aaaaaaab 	.word	0xaaaaaaab

0800f3f8 <Paint_DrawRectangle>:
    Color  ：The color of the Rectangular segment
    Filled : Whether it is filled--- 1 solid 0：empty
******************************************************************************/
void Paint_DrawRectangle( UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                          UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Filled )
{
 800f3f8:	b590      	push	{r4, r7, lr}
 800f3fa:	b089      	sub	sp, #36	; 0x24
 800f3fc:	af04      	add	r7, sp, #16
 800f3fe:	4604      	mov	r4, r0
 800f400:	4608      	mov	r0, r1
 800f402:	4611      	mov	r1, r2
 800f404:	461a      	mov	r2, r3
 800f406:	4623      	mov	r3, r4
 800f408:	80fb      	strh	r3, [r7, #6]
 800f40a:	4603      	mov	r3, r0
 800f40c:	80bb      	strh	r3, [r7, #4]
 800f40e:	460b      	mov	r3, r1
 800f410:	807b      	strh	r3, [r7, #2]
 800f412:	4613      	mov	r3, r2
 800f414:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800f416:	4b3a      	ldr	r3, [pc, #232]	; (800f500 <Paint_DrawRectangle+0x108>)
 800f418:	889b      	ldrh	r3, [r3, #4]
 800f41a:	b29b      	uxth	r3, r3
 800f41c:	88fa      	ldrh	r2, [r7, #6]
 800f41e:	429a      	cmp	r2, r3
 800f420:	d811      	bhi.n	800f446 <Paint_DrawRectangle+0x4e>
 800f422:	4b37      	ldr	r3, [pc, #220]	; (800f500 <Paint_DrawRectangle+0x108>)
 800f424:	88db      	ldrh	r3, [r3, #6]
 800f426:	b29b      	uxth	r3, r3
 800f428:	88ba      	ldrh	r2, [r7, #4]
 800f42a:	429a      	cmp	r2, r3
 800f42c:	d80b      	bhi.n	800f446 <Paint_DrawRectangle+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 800f42e:	4b34      	ldr	r3, [pc, #208]	; (800f500 <Paint_DrawRectangle+0x108>)
 800f430:	889b      	ldrh	r3, [r3, #4]
 800f432:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800f434:	887a      	ldrh	r2, [r7, #2]
 800f436:	429a      	cmp	r2, r3
 800f438:	d805      	bhi.n	800f446 <Paint_DrawRectangle+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 800f43a:	4b31      	ldr	r3, [pc, #196]	; (800f500 <Paint_DrawRectangle+0x108>)
 800f43c:	88db      	ldrh	r3, [r3, #6]
 800f43e:	b29b      	uxth	r3, r3
 800f440:	883a      	ldrh	r2, [r7, #0]
 800f442:	429a      	cmp	r2, r3
 800f444:	d903      	bls.n	800f44e <Paint_DrawRectangle+0x56>
        Debug("Input exceeds the normal display range\r\n");
 800f446:	482f      	ldr	r0, [pc, #188]	; (800f504 <Paint_DrawRectangle+0x10c>)
 800f448:	f00e fa76 	bl	801d938 <puts>
        return;
 800f44c:	e054      	b.n	800f4f8 <Paint_DrawRectangle+0x100>
    }

    if (Filled )
 800f44e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f452:	2b00      	cmp	r3, #0
 800f454:	d018      	beq.n	800f488 <Paint_DrawRectangle+0x90>
    {
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++)
 800f456:	88bb      	ldrh	r3, [r7, #4]
 800f458:	81fb      	strh	r3, [r7, #14]
 800f45a:	e010      	b.n	800f47e <Paint_DrawRectangle+0x86>
        {
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color ,Line_width, LINE_STYLE_SOLID);
 800f45c:	89fc      	ldrh	r4, [r7, #14]
 800f45e:	887a      	ldrh	r2, [r7, #2]
 800f460:	89f9      	ldrh	r1, [r7, #14]
 800f462:	88f8      	ldrh	r0, [r7, #6]
 800f464:	2300      	movs	r3, #0
 800f466:	9302      	str	r3, [sp, #8]
 800f468:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f46c:	9301      	str	r3, [sp, #4]
 800f46e:	8c3b      	ldrh	r3, [r7, #32]
 800f470:	9300      	str	r3, [sp, #0]
 800f472:	4623      	mov	r3, r4
 800f474:	f7ff ff10 	bl	800f298 <Paint_DrawLine>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++)
 800f478:	89fb      	ldrh	r3, [r7, #14]
 800f47a:	3301      	adds	r3, #1
 800f47c:	81fb      	strh	r3, [r7, #14]
 800f47e:	89fa      	ldrh	r2, [r7, #14]
 800f480:	883b      	ldrh	r3, [r7, #0]
 800f482:	429a      	cmp	r2, r3
 800f484:	d3ea      	bcc.n	800f45c <Paint_DrawRectangle+0x64>
 800f486:	e037      	b.n	800f4f8 <Paint_DrawRectangle+0x100>
        }
    }
    else
    {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color ,Line_width, LINE_STYLE_SOLID);
 800f488:	88bc      	ldrh	r4, [r7, #4]
 800f48a:	887a      	ldrh	r2, [r7, #2]
 800f48c:	88b9      	ldrh	r1, [r7, #4]
 800f48e:	88f8      	ldrh	r0, [r7, #6]
 800f490:	2300      	movs	r3, #0
 800f492:	9302      	str	r3, [sp, #8]
 800f494:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f498:	9301      	str	r3, [sp, #4]
 800f49a:	8c3b      	ldrh	r3, [r7, #32]
 800f49c:	9300      	str	r3, [sp, #0]
 800f49e:	4623      	mov	r3, r4
 800f4a0:	f7ff fefa 	bl	800f298 <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color ,Line_width, LINE_STYLE_SOLID);
 800f4a4:	883c      	ldrh	r4, [r7, #0]
 800f4a6:	88fa      	ldrh	r2, [r7, #6]
 800f4a8:	88b9      	ldrh	r1, [r7, #4]
 800f4aa:	88f8      	ldrh	r0, [r7, #6]
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	9302      	str	r3, [sp, #8]
 800f4b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f4b4:	9301      	str	r3, [sp, #4]
 800f4b6:	8c3b      	ldrh	r3, [r7, #32]
 800f4b8:	9300      	str	r3, [sp, #0]
 800f4ba:	4623      	mov	r3, r4
 800f4bc:	f7ff feec 	bl	800f298 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color ,Line_width, LINE_STYLE_SOLID);
 800f4c0:	88bc      	ldrh	r4, [r7, #4]
 800f4c2:	887a      	ldrh	r2, [r7, #2]
 800f4c4:	8839      	ldrh	r1, [r7, #0]
 800f4c6:	8878      	ldrh	r0, [r7, #2]
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	9302      	str	r3, [sp, #8]
 800f4cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f4d0:	9301      	str	r3, [sp, #4]
 800f4d2:	8c3b      	ldrh	r3, [r7, #32]
 800f4d4:	9300      	str	r3, [sp, #0]
 800f4d6:	4623      	mov	r3, r4
 800f4d8:	f7ff fede 	bl	800f298 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color ,Line_width, LINE_STYLE_SOLID);
 800f4dc:	883c      	ldrh	r4, [r7, #0]
 800f4de:	88fa      	ldrh	r2, [r7, #6]
 800f4e0:	8839      	ldrh	r1, [r7, #0]
 800f4e2:	8878      	ldrh	r0, [r7, #2]
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	9302      	str	r3, [sp, #8]
 800f4e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f4ec:	9301      	str	r3, [sp, #4]
 800f4ee:	8c3b      	ldrh	r3, [r7, #32]
 800f4f0:	9300      	str	r3, [sp, #0]
 800f4f2:	4623      	mov	r3, r4
 800f4f4:	f7ff fed0 	bl	800f298 <Paint_DrawLine>
    }
}
 800f4f8:	3714      	adds	r7, #20
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd90      	pop	{r4, r7, pc}
 800f4fe:	bf00      	nop
 800f500:	2400b814 	.word	0x2400b814
 800f504:	08021540 	.word	0x08021540

0800f508 <Paint_DrawCircle>:
    Color     ：The color of the ：circle segment
    Filled    : Whether it is filled: 1 filling 0：Do not
******************************************************************************/
void Paint_DrawCircle(  UWORD X_Center, UWORD Y_Center, UWORD Radius, 
                        UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill )
{
 800f508:	b590      	push	{r4, r7, lr}
 800f50a:	b087      	sub	sp, #28
 800f50c:	af02      	add	r7, sp, #8
 800f50e:	4604      	mov	r4, r0
 800f510:	4608      	mov	r0, r1
 800f512:	4611      	mov	r1, r2
 800f514:	461a      	mov	r2, r3
 800f516:	4623      	mov	r3, r4
 800f518:	80fb      	strh	r3, [r7, #6]
 800f51a:	4603      	mov	r3, r0
 800f51c:	80bb      	strh	r3, [r7, #4]
 800f51e:	460b      	mov	r3, r1
 800f520:	807b      	strh	r3, [r7, #2]
 800f522:	4613      	mov	r3, r2
 800f524:	803b      	strh	r3, [r7, #0]
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 800f526:	4b68      	ldr	r3, [pc, #416]	; (800f6c8 <Paint_DrawCircle+0x1c0>)
 800f528:	889b      	ldrh	r3, [r3, #4]
 800f52a:	b29b      	uxth	r3, r3
 800f52c:	88fa      	ldrh	r2, [r7, #6]
 800f52e:	429a      	cmp	r2, r3
 800f530:	d805      	bhi.n	800f53e <Paint_DrawCircle+0x36>
 800f532:	4b65      	ldr	r3, [pc, #404]	; (800f6c8 <Paint_DrawCircle+0x1c0>)
 800f534:	88db      	ldrh	r3, [r3, #6]
 800f536:	b29b      	uxth	r3, r3
 800f538:	88ba      	ldrh	r2, [r7, #4]
 800f53a:	429a      	cmp	r2, r3
 800f53c:	d303      	bcc.n	800f546 <Paint_DrawCircle+0x3e>
        Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 800f53e:	4863      	ldr	r0, [pc, #396]	; (800f6cc <Paint_DrawCircle+0x1c4>)
 800f540:	f00e f9fa 	bl	801d938 <puts>
        return;
 800f544:	e16b      	b.n	800f81e <Paint_DrawCircle+0x316>
    }

    //Draw a circle from(0, R) as a starting point
    int16_t XCurrent, YCurrent;
    XCurrent = 0;
 800f546:	2300      	movs	r3, #0
 800f548:	81fb      	strh	r3, [r7, #14]
    YCurrent = Radius;
 800f54a:	887b      	ldrh	r3, [r7, #2]
 800f54c:	81bb      	strh	r3, [r7, #12]

    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );
 800f54e:	887b      	ldrh	r3, [r7, #2]
 800f550:	005b      	lsls	r3, r3, #1
 800f552:	b29b      	uxth	r3, r3
 800f554:	f1c3 0303 	rsb	r3, r3, #3
 800f558:	b29b      	uxth	r3, r3
 800f55a:	817b      	strh	r3, [r7, #10]

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
 800f55c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f560:	2b01      	cmp	r3, #1
 800f562:	f040 8155 	bne.w	800f810 <Paint_DrawCircle+0x308>
        while (XCurrent <= YCurrent ) { //Realistic circles
 800f566:	e0a6      	b.n	800f6b6 <Paint_DrawCircle+0x1ae>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 800f568:	89fb      	ldrh	r3, [r7, #14]
 800f56a:	813b      	strh	r3, [r7, #8]
 800f56c:	e075      	b.n	800f65a <Paint_DrawCircle+0x152>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//1
 800f56e:	89fa      	ldrh	r2, [r7, #14]
 800f570:	88fb      	ldrh	r3, [r7, #6]
 800f572:	4413      	add	r3, r2
 800f574:	b298      	uxth	r0, r3
 800f576:	893a      	ldrh	r2, [r7, #8]
 800f578:	88bb      	ldrh	r3, [r7, #4]
 800f57a:	4413      	add	r3, r2
 800f57c:	b299      	uxth	r1, r3
 800f57e:	883a      	ldrh	r2, [r7, #0]
 800f580:	2301      	movs	r3, #1
 800f582:	9300      	str	r3, [sp, #0]
 800f584:	2301      	movs	r3, #1
 800f586:	f7ff fdeb 	bl	800f160 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//2
 800f58a:	89fb      	ldrh	r3, [r7, #14]
 800f58c:	88fa      	ldrh	r2, [r7, #6]
 800f58e:	1ad3      	subs	r3, r2, r3
 800f590:	b298      	uxth	r0, r3
 800f592:	893a      	ldrh	r2, [r7, #8]
 800f594:	88bb      	ldrh	r3, [r7, #4]
 800f596:	4413      	add	r3, r2
 800f598:	b299      	uxth	r1, r3
 800f59a:	883a      	ldrh	r2, [r7, #0]
 800f59c:	2301      	movs	r3, #1
 800f59e:	9300      	str	r3, [sp, #0]
 800f5a0:	2301      	movs	r3, #1
 800f5a2:	f7ff fddd 	bl	800f160 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//3
 800f5a6:	893b      	ldrh	r3, [r7, #8]
 800f5a8:	88fa      	ldrh	r2, [r7, #6]
 800f5aa:	1ad3      	subs	r3, r2, r3
 800f5ac:	b298      	uxth	r0, r3
 800f5ae:	89fa      	ldrh	r2, [r7, #14]
 800f5b0:	88bb      	ldrh	r3, [r7, #4]
 800f5b2:	4413      	add	r3, r2
 800f5b4:	b299      	uxth	r1, r3
 800f5b6:	883a      	ldrh	r2, [r7, #0]
 800f5b8:	2301      	movs	r3, #1
 800f5ba:	9300      	str	r3, [sp, #0]
 800f5bc:	2301      	movs	r3, #1
 800f5be:	f7ff fdcf 	bl	800f160 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//4
 800f5c2:	893b      	ldrh	r3, [r7, #8]
 800f5c4:	88fa      	ldrh	r2, [r7, #6]
 800f5c6:	1ad3      	subs	r3, r2, r3
 800f5c8:	b298      	uxth	r0, r3
 800f5ca:	89fb      	ldrh	r3, [r7, #14]
 800f5cc:	88ba      	ldrh	r2, [r7, #4]
 800f5ce:	1ad3      	subs	r3, r2, r3
 800f5d0:	b299      	uxth	r1, r3
 800f5d2:	883a      	ldrh	r2, [r7, #0]
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	9300      	str	r3, [sp, #0]
 800f5d8:	2301      	movs	r3, #1
 800f5da:	f7ff fdc1 	bl	800f160 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
 800f5de:	89fb      	ldrh	r3, [r7, #14]
 800f5e0:	88fa      	ldrh	r2, [r7, #6]
 800f5e2:	1ad3      	subs	r3, r2, r3
 800f5e4:	b298      	uxth	r0, r3
 800f5e6:	893b      	ldrh	r3, [r7, #8]
 800f5e8:	88ba      	ldrh	r2, [r7, #4]
 800f5ea:	1ad3      	subs	r3, r2, r3
 800f5ec:	b299      	uxth	r1, r3
 800f5ee:	883a      	ldrh	r2, [r7, #0]
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	9300      	str	r3, [sp, #0]
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	f7ff fdb3 	bl	800f160 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
 800f5fa:	89fa      	ldrh	r2, [r7, #14]
 800f5fc:	88fb      	ldrh	r3, [r7, #6]
 800f5fe:	4413      	add	r3, r2
 800f600:	b298      	uxth	r0, r3
 800f602:	893b      	ldrh	r3, [r7, #8]
 800f604:	88ba      	ldrh	r2, [r7, #4]
 800f606:	1ad3      	subs	r3, r2, r3
 800f608:	b299      	uxth	r1, r3
 800f60a:	883a      	ldrh	r2, [r7, #0]
 800f60c:	2301      	movs	r3, #1
 800f60e:	9300      	str	r3, [sp, #0]
 800f610:	2301      	movs	r3, #1
 800f612:	f7ff fda5 	bl	800f160 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
 800f616:	893a      	ldrh	r2, [r7, #8]
 800f618:	88fb      	ldrh	r3, [r7, #6]
 800f61a:	4413      	add	r3, r2
 800f61c:	b298      	uxth	r0, r3
 800f61e:	89fb      	ldrh	r3, [r7, #14]
 800f620:	88ba      	ldrh	r2, [r7, #4]
 800f622:	1ad3      	subs	r3, r2, r3
 800f624:	b299      	uxth	r1, r3
 800f626:	883a      	ldrh	r2, [r7, #0]
 800f628:	2301      	movs	r3, #1
 800f62a:	9300      	str	r3, [sp, #0]
 800f62c:	2301      	movs	r3, #1
 800f62e:	f7ff fd97 	bl	800f160 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 800f632:	893a      	ldrh	r2, [r7, #8]
 800f634:	88fb      	ldrh	r3, [r7, #6]
 800f636:	4413      	add	r3, r2
 800f638:	b298      	uxth	r0, r3
 800f63a:	89fa      	ldrh	r2, [r7, #14]
 800f63c:	88bb      	ldrh	r3, [r7, #4]
 800f63e:	4413      	add	r3, r2
 800f640:	b299      	uxth	r1, r3
 800f642:	883a      	ldrh	r2, [r7, #0]
 800f644:	2301      	movs	r3, #1
 800f646:	9300      	str	r3, [sp, #0]
 800f648:	2301      	movs	r3, #1
 800f64a:	f7ff fd89 	bl	800f160 <Paint_DrawPoint>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 800f64e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800f652:	b29b      	uxth	r3, r3
 800f654:	3301      	adds	r3, #1
 800f656:	b29b      	uxth	r3, r3
 800f658:	813b      	strh	r3, [r7, #8]
 800f65a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800f65e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f662:	429a      	cmp	r2, r3
 800f664:	dd83      	ble.n	800f56e <Paint_DrawCircle+0x66>
            }
            if (Esp < 0 )
 800f666:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	da09      	bge.n	800f682 <Paint_DrawCircle+0x17a>
                Esp += 4 * XCurrent + 6;
 800f66e:	89fb      	ldrh	r3, [r7, #14]
 800f670:	009b      	lsls	r3, r3, #2
 800f672:	b29a      	uxth	r2, r3
 800f674:	897b      	ldrh	r3, [r7, #10]
 800f676:	4413      	add	r3, r2
 800f678:	b29b      	uxth	r3, r3
 800f67a:	3306      	adds	r3, #6
 800f67c:	b29b      	uxth	r3, r3
 800f67e:	817b      	strh	r3, [r7, #10]
 800f680:	e013      	b.n	800f6aa <Paint_DrawCircle+0x1a2>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 800f682:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f686:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f68a:	1ad3      	subs	r3, r2, r3
 800f68c:	b29b      	uxth	r3, r3
 800f68e:	009b      	lsls	r3, r3, #2
 800f690:	b29a      	uxth	r2, r3
 800f692:	897b      	ldrh	r3, [r7, #10]
 800f694:	4413      	add	r3, r2
 800f696:	b29b      	uxth	r3, r3
 800f698:	330a      	adds	r3, #10
 800f69a:	b29b      	uxth	r3, r3
 800f69c:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 800f69e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f6a2:	b29b      	uxth	r3, r3
 800f6a4:	3b01      	subs	r3, #1
 800f6a6:	b29b      	uxth	r3, r3
 800f6a8:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 800f6aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f6ae:	b29b      	uxth	r3, r3
 800f6b0:	3301      	adds	r3, #1
 800f6b2:	b29b      	uxth	r3, r3
 800f6b4:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) { //Realistic circles
 800f6b6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f6ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f6be:	429a      	cmp	r2, r3
 800f6c0:	f77f af52 	ble.w	800f568 <Paint_DrawCircle+0x60>
 800f6c4:	e0ab      	b.n	800f81e <Paint_DrawCircle+0x316>
 800f6c6:	bf00      	nop
 800f6c8:	2400b814 	.word	0x2400b814
 800f6cc:	08021570 	.word	0x08021570
        }
    } else { //Draw a hollow circle
        while (XCurrent <= YCurrent ) {
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
 800f6d0:	89fa      	ldrh	r2, [r7, #14]
 800f6d2:	88fb      	ldrh	r3, [r7, #6]
 800f6d4:	4413      	add	r3, r2
 800f6d6:	b298      	uxth	r0, r3
 800f6d8:	89ba      	ldrh	r2, [r7, #12]
 800f6da:	88bb      	ldrh	r3, [r7, #4]
 800f6dc:	4413      	add	r3, r2
 800f6de:	b299      	uxth	r1, r3
 800f6e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f6e4:	883a      	ldrh	r2, [r7, #0]
 800f6e6:	2401      	movs	r4, #1
 800f6e8:	9400      	str	r4, [sp, #0]
 800f6ea:	f7ff fd39 	bl	800f160 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//2
 800f6ee:	89fb      	ldrh	r3, [r7, #14]
 800f6f0:	88fa      	ldrh	r2, [r7, #6]
 800f6f2:	1ad3      	subs	r3, r2, r3
 800f6f4:	b298      	uxth	r0, r3
 800f6f6:	89ba      	ldrh	r2, [r7, #12]
 800f6f8:	88bb      	ldrh	r3, [r7, #4]
 800f6fa:	4413      	add	r3, r2
 800f6fc:	b299      	uxth	r1, r3
 800f6fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f702:	883a      	ldrh	r2, [r7, #0]
 800f704:	2401      	movs	r4, #1
 800f706:	9400      	str	r4, [sp, #0]
 800f708:	f7ff fd2a 	bl	800f160 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//3
 800f70c:	89bb      	ldrh	r3, [r7, #12]
 800f70e:	88fa      	ldrh	r2, [r7, #6]
 800f710:	1ad3      	subs	r3, r2, r3
 800f712:	b298      	uxth	r0, r3
 800f714:	89fa      	ldrh	r2, [r7, #14]
 800f716:	88bb      	ldrh	r3, [r7, #4]
 800f718:	4413      	add	r3, r2
 800f71a:	b299      	uxth	r1, r3
 800f71c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f720:	883a      	ldrh	r2, [r7, #0]
 800f722:	2401      	movs	r4, #1
 800f724:	9400      	str	r4, [sp, #0]
 800f726:	f7ff fd1b 	bl	800f160 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//4
 800f72a:	89bb      	ldrh	r3, [r7, #12]
 800f72c:	88fa      	ldrh	r2, [r7, #6]
 800f72e:	1ad3      	subs	r3, r2, r3
 800f730:	b298      	uxth	r0, r3
 800f732:	89fb      	ldrh	r3, [r7, #14]
 800f734:	88ba      	ldrh	r2, [r7, #4]
 800f736:	1ad3      	subs	r3, r2, r3
 800f738:	b299      	uxth	r1, r3
 800f73a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f73e:	883a      	ldrh	r2, [r7, #0]
 800f740:	2401      	movs	r4, #1
 800f742:	9400      	str	r4, [sp, #0]
 800f744:	f7ff fd0c 	bl	800f160 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//5
 800f748:	89fb      	ldrh	r3, [r7, #14]
 800f74a:	88fa      	ldrh	r2, [r7, #6]
 800f74c:	1ad3      	subs	r3, r2, r3
 800f74e:	b298      	uxth	r0, r3
 800f750:	89bb      	ldrh	r3, [r7, #12]
 800f752:	88ba      	ldrh	r2, [r7, #4]
 800f754:	1ad3      	subs	r3, r2, r3
 800f756:	b299      	uxth	r1, r3
 800f758:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f75c:	883a      	ldrh	r2, [r7, #0]
 800f75e:	2401      	movs	r4, #1
 800f760:	9400      	str	r4, [sp, #0]
 800f762:	f7ff fcfd 	bl	800f160 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//6
 800f766:	89fa      	ldrh	r2, [r7, #14]
 800f768:	88fb      	ldrh	r3, [r7, #6]
 800f76a:	4413      	add	r3, r2
 800f76c:	b298      	uxth	r0, r3
 800f76e:	89bb      	ldrh	r3, [r7, #12]
 800f770:	88ba      	ldrh	r2, [r7, #4]
 800f772:	1ad3      	subs	r3, r2, r3
 800f774:	b299      	uxth	r1, r3
 800f776:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f77a:	883a      	ldrh	r2, [r7, #0]
 800f77c:	2401      	movs	r4, #1
 800f77e:	9400      	str	r4, [sp, #0]
 800f780:	f7ff fcee 	bl	800f160 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//7
 800f784:	89ba      	ldrh	r2, [r7, #12]
 800f786:	88fb      	ldrh	r3, [r7, #6]
 800f788:	4413      	add	r3, r2
 800f78a:	b298      	uxth	r0, r3
 800f78c:	89fb      	ldrh	r3, [r7, #14]
 800f78e:	88ba      	ldrh	r2, [r7, #4]
 800f790:	1ad3      	subs	r3, r2, r3
 800f792:	b299      	uxth	r1, r3
 800f794:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f798:	883a      	ldrh	r2, [r7, #0]
 800f79a:	2401      	movs	r4, #1
 800f79c:	9400      	str	r4, [sp, #0]
 800f79e:	f7ff fcdf 	bl	800f160 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//0
 800f7a2:	89ba      	ldrh	r2, [r7, #12]
 800f7a4:	88fb      	ldrh	r3, [r7, #6]
 800f7a6:	4413      	add	r3, r2
 800f7a8:	b298      	uxth	r0, r3
 800f7aa:	89fa      	ldrh	r2, [r7, #14]
 800f7ac:	88bb      	ldrh	r3, [r7, #4]
 800f7ae:	4413      	add	r3, r2
 800f7b0:	b299      	uxth	r1, r3
 800f7b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f7b6:	883a      	ldrh	r2, [r7, #0]
 800f7b8:	2401      	movs	r4, #1
 800f7ba:	9400      	str	r4, [sp, #0]
 800f7bc:	f7ff fcd0 	bl	800f160 <Paint_DrawPoint>

            if (Esp < 0 )
 800f7c0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	da09      	bge.n	800f7dc <Paint_DrawCircle+0x2d4>
                Esp += 4 * XCurrent + 6;
 800f7c8:	89fb      	ldrh	r3, [r7, #14]
 800f7ca:	009b      	lsls	r3, r3, #2
 800f7cc:	b29a      	uxth	r2, r3
 800f7ce:	897b      	ldrh	r3, [r7, #10]
 800f7d0:	4413      	add	r3, r2
 800f7d2:	b29b      	uxth	r3, r3
 800f7d4:	3306      	adds	r3, #6
 800f7d6:	b29b      	uxth	r3, r3
 800f7d8:	817b      	strh	r3, [r7, #10]
 800f7da:	e013      	b.n	800f804 <Paint_DrawCircle+0x2fc>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 800f7dc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f7e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f7e4:	1ad3      	subs	r3, r2, r3
 800f7e6:	b29b      	uxth	r3, r3
 800f7e8:	009b      	lsls	r3, r3, #2
 800f7ea:	b29a      	uxth	r2, r3
 800f7ec:	897b      	ldrh	r3, [r7, #10]
 800f7ee:	4413      	add	r3, r2
 800f7f0:	b29b      	uxth	r3, r3
 800f7f2:	330a      	adds	r3, #10
 800f7f4:	b29b      	uxth	r3, r3
 800f7f6:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 800f7f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f7fc:	b29b      	uxth	r3, r3
 800f7fe:	3b01      	subs	r3, #1
 800f800:	b29b      	uxth	r3, r3
 800f802:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 800f804:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f808:	b29b      	uxth	r3, r3
 800f80a:	3301      	adds	r3, #1
 800f80c:	b29b      	uxth	r3, r3
 800f80e:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) {
 800f810:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f814:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f818:	429a      	cmp	r2, r3
 800f81a:	f77f af59 	ble.w	800f6d0 <Paint_DrawCircle+0x1c8>
        }
    }
}
 800f81e:	3714      	adds	r7, #20
 800f820:	46bd      	mov	sp, r7
 800f822:	bd90      	pop	{r4, r7, pc}

0800f824 <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b088      	sub	sp, #32
 800f828:	af00      	add	r7, sp, #0
 800f82a:	607b      	str	r3, [r7, #4]
 800f82c:	4603      	mov	r3, r0
 800f82e:	81fb      	strh	r3, [r7, #14]
 800f830:	460b      	mov	r3, r1
 800f832:	81bb      	strh	r3, [r7, #12]
 800f834:	4613      	mov	r3, r2
 800f836:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800f838:	4b3f      	ldr	r3, [pc, #252]	; (800f938 <Paint_DrawChar+0x114>)
 800f83a:	889b      	ldrh	r3, [r3, #4]
 800f83c:	b29b      	uxth	r3, r3
 800f83e:	89fa      	ldrh	r2, [r7, #14]
 800f840:	429a      	cmp	r2, r3
 800f842:	d805      	bhi.n	800f850 <Paint_DrawChar+0x2c>
 800f844:	4b3c      	ldr	r3, [pc, #240]	; (800f938 <Paint_DrawChar+0x114>)
 800f846:	88db      	ldrh	r3, [r3, #6]
 800f848:	b29b      	uxth	r3, r3
 800f84a:	89ba      	ldrh	r2, [r7, #12]
 800f84c:	429a      	cmp	r2, r3
 800f84e:	d903      	bls.n	800f858 <Paint_DrawChar+0x34>
    {
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 800f850:	483a      	ldr	r0, [pc, #232]	; (800f93c <Paint_DrawChar+0x118>)
 800f852:	f00e f871 	bl	801d938 <puts>
        return;
 800f856:	e06b      	b.n	800f930 <Paint_DrawChar+0x10c>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 800f858:	7afb      	ldrb	r3, [r7, #11]
 800f85a:	3b20      	subs	r3, #32
 800f85c:	687a      	ldr	r2, [r7, #4]
 800f85e:	88d2      	ldrh	r2, [r2, #6]
 800f860:	fb02 f303 	mul.w	r3, r2, r3
 800f864:	687a      	ldr	r2, [r7, #4]
 800f866:	8892      	ldrh	r2, [r2, #4]
 800f868:	08d2      	lsrs	r2, r2, #3
 800f86a:	b292      	uxth	r2, r2
 800f86c:	4611      	mov	r1, r2
 800f86e:	687a      	ldr	r2, [r7, #4]
 800f870:	8892      	ldrh	r2, [r2, #4]
 800f872:	f002 0207 	and.w	r2, r2, #7
 800f876:	b292      	uxth	r2, r2
 800f878:	2a00      	cmp	r2, #0
 800f87a:	bf14      	ite	ne
 800f87c:	2201      	movne	r2, #1
 800f87e:	2200      	moveq	r2, #0
 800f880:	b2d2      	uxtb	r2, r2
 800f882:	440a      	add	r2, r1
 800f884:	fb02 f303 	mul.w	r3, r2, r3
 800f888:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681a      	ldr	r2, [r3, #0]
 800f88e:	697b      	ldr	r3, [r7, #20]
 800f890:	4413      	add	r3, r2
 800f892:	61fb      	str	r3, [r7, #28]

    for (Page = 0; Page < Font->Height; Page ++ )
 800f894:	2300      	movs	r3, #0
 800f896:	837b      	strh	r3, [r7, #26]
 800f898:	e045      	b.n	800f926 <Paint_DrawChar+0x102>
    {
        for (Column = 0; Column < Font->Width; Column ++ )
 800f89a:	2300      	movs	r3, #0
 800f89c:	833b      	strh	r3, [r7, #24]
 800f89e:	e030      	b.n	800f902 <Paint_DrawChar+0xde>
                }
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            }
            else
            {
                if (*ptr & (0x80 >> (Column % 8)))
 800f8a0:	69fb      	ldr	r3, [r7, #28]
 800f8a2:	781b      	ldrb	r3, [r3, #0]
 800f8a4:	4619      	mov	r1, r3
 800f8a6:	8b3b      	ldrh	r3, [r7, #24]
 800f8a8:	f003 0307 	and.w	r3, r3, #7
 800f8ac:	2280      	movs	r2, #128	; 0x80
 800f8ae:	fa42 f303 	asr.w	r3, r2, r3
 800f8b2:	400b      	ands	r3, r1
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d00c      	beq.n	800f8d2 <Paint_DrawChar+0xae>
                {

//                    if (!renderCompleteFrame)
//                    {
                    	Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800f8b8:	89fa      	ldrh	r2, [r7, #14]
 800f8ba:	8b3b      	ldrh	r3, [r7, #24]
 800f8bc:	4413      	add	r3, r2
 800f8be:	b298      	uxth	r0, r3
 800f8c0:	89ba      	ldrh	r2, [r7, #12]
 800f8c2:	8b7b      	ldrh	r3, [r7, #26]
 800f8c4:	4413      	add	r3, r2
 800f8c6:	b29b      	uxth	r3, r3
 800f8c8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800f8ca:	4619      	mov	r1, r3
 800f8cc:	f7ff fb5a 	bl	800ef84 <Paint_SetPixel>
 800f8d0:	e00b      	b.n	800f8ea <Paint_DrawChar+0xc6>
                }
                else
                {
//                	if (!renderCompleteFrame)
//                	{
                		Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800f8d2:	89fa      	ldrh	r2, [r7, #14]
 800f8d4:	8b3b      	ldrh	r3, [r7, #24]
 800f8d6:	4413      	add	r3, r2
 800f8d8:	b298      	uxth	r0, r3
 800f8da:	89ba      	ldrh	r2, [r7, #12]
 800f8dc:	8b7b      	ldrh	r3, [r7, #26]
 800f8de:	4413      	add	r3, r2
 800f8e0:	b29b      	uxth	r3, r3
 800f8e2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f8e4:	4619      	mov	r1, r3
 800f8e6:	f7ff fb4d 	bl	800ef84 <Paint_SetPixel>
//                	}
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 800f8ea:	8b3b      	ldrh	r3, [r7, #24]
 800f8ec:	f003 0307 	and.w	r3, r3, #7
 800f8f0:	b29b      	uxth	r3, r3
 800f8f2:	2b07      	cmp	r3, #7
 800f8f4:	d102      	bne.n	800f8fc <Paint_DrawChar+0xd8>
            {
                ptr++;
 800f8f6:	69fb      	ldr	r3, [r7, #28]
 800f8f8:	3301      	adds	r3, #1
 800f8fa:	61fb      	str	r3, [r7, #28]
        for (Column = 0; Column < Font->Width; Column ++ )
 800f8fc:	8b3b      	ldrh	r3, [r7, #24]
 800f8fe:	3301      	adds	r3, #1
 800f900:	833b      	strh	r3, [r7, #24]
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	889b      	ldrh	r3, [r3, #4]
 800f906:	8b3a      	ldrh	r2, [r7, #24]
 800f908:	429a      	cmp	r2, r3
 800f90a:	d3c9      	bcc.n	800f8a0 <Paint_DrawChar+0x7c>
            }
        }// Write a line
        if (Font->Width % 8 != 0)
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	889b      	ldrh	r3, [r3, #4]
 800f910:	f003 0307 	and.w	r3, r3, #7
 800f914:	b29b      	uxth	r3, r3
 800f916:	2b00      	cmp	r3, #0
 800f918:	d002      	beq.n	800f920 <Paint_DrawChar+0xfc>
        {
            ptr++;
 800f91a:	69fb      	ldr	r3, [r7, #28]
 800f91c:	3301      	adds	r3, #1
 800f91e:	61fb      	str	r3, [r7, #28]
    for (Page = 0; Page < Font->Height; Page ++ )
 800f920:	8b7b      	ldrh	r3, [r7, #26]
 800f922:	3301      	adds	r3, #1
 800f924:	837b      	strh	r3, [r7, #26]
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	88db      	ldrh	r3, [r3, #6]
 800f92a:	8b7a      	ldrh	r2, [r7, #26]
 800f92c:	429a      	cmp	r2, r3
 800f92e:	d3b4      	bcc.n	800f89a <Paint_DrawChar+0x76>
        }
    }// Write all
}
 800f930:	3720      	adds	r7, #32
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}
 800f936:	bf00      	nop
 800f938:	2400b814 	.word	0x2400b814
 800f93c:	080215b4 	.word	0x080215b4

0800f940 <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b088      	sub	sp, #32
 800f944:	af02      	add	r7, sp, #8
 800f946:	60ba      	str	r2, [r7, #8]
 800f948:	607b      	str	r3, [r7, #4]
 800f94a:	4603      	mov	r3, r0
 800f94c:	81fb      	strh	r3, [r7, #14]
 800f94e:	460b      	mov	r3, r1
 800f950:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 800f952:	89fb      	ldrh	r3, [r7, #14]
 800f954:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 800f956:	89bb      	ldrh	r3, [r7, #12]
 800f958:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 800f95a:	4b23      	ldr	r3, [pc, #140]	; (800f9e8 <Paint_DrawString_EN+0xa8>)
 800f95c:	889b      	ldrh	r3, [r3, #4]
 800f95e:	b29b      	uxth	r3, r3
 800f960:	89fa      	ldrh	r2, [r7, #14]
 800f962:	429a      	cmp	r2, r3
 800f964:	d805      	bhi.n	800f972 <Paint_DrawString_EN+0x32>
 800f966:	4b20      	ldr	r3, [pc, #128]	; (800f9e8 <Paint_DrawString_EN+0xa8>)
 800f968:	88db      	ldrh	r3, [r3, #6]
 800f96a:	b29b      	uxth	r3, r3
 800f96c:	89ba      	ldrh	r2, [r7, #12]
 800f96e:	429a      	cmp	r2, r3
 800f970:	d933      	bls.n	800f9da <Paint_DrawString_EN+0x9a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 800f972:	481e      	ldr	r0, [pc, #120]	; (800f9ec <Paint_DrawString_EN+0xac>)
 800f974:	f00d ffe0 	bl	801d938 <puts>
        return;
 800f978:	e033      	b.n	800f9e2 <Paint_DrawString_EN+0xa2>
    }

    while (* pString != '\0')
    {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width )
 800f97a:	8afb      	ldrh	r3, [r7, #22]
 800f97c:	687a      	ldr	r2, [r7, #4]
 800f97e:	8892      	ldrh	r2, [r2, #4]
 800f980:	4413      	add	r3, r2
 800f982:	4a19      	ldr	r2, [pc, #100]	; (800f9e8 <Paint_DrawString_EN+0xa8>)
 800f984:	8892      	ldrh	r2, [r2, #4]
 800f986:	b292      	uxth	r2, r2
 800f988:	4293      	cmp	r3, r2
 800f98a:	dd06      	ble.n	800f99a <Paint_DrawString_EN+0x5a>
        {
            Xpoint = Xstart;
 800f98c:	89fb      	ldrh	r3, [r7, #14]
 800f98e:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	88da      	ldrh	r2, [r3, #6]
 800f994:	8abb      	ldrh	r3, [r7, #20]
 800f996:	4413      	add	r3, r2
 800f998:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height )
 800f99a:	8abb      	ldrh	r3, [r7, #20]
 800f99c:	687a      	ldr	r2, [r7, #4]
 800f99e:	88d2      	ldrh	r2, [r2, #6]
 800f9a0:	4413      	add	r3, r2
 800f9a2:	4a11      	ldr	r2, [pc, #68]	; (800f9e8 <Paint_DrawString_EN+0xa8>)
 800f9a4:	88d2      	ldrh	r2, [r2, #6]
 800f9a6:	b292      	uxth	r2, r2
 800f9a8:	4293      	cmp	r3, r2
 800f9aa:	dd03      	ble.n	800f9b4 <Paint_DrawString_EN+0x74>
        {
            Xpoint = Xstart;
 800f9ac:	89fb      	ldrh	r3, [r7, #14]
 800f9ae:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 800f9b0:	89bb      	ldrh	r3, [r7, #12]
 800f9b2:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 800f9b4:	68bb      	ldr	r3, [r7, #8]
 800f9b6:	781a      	ldrb	r2, [r3, #0]
 800f9b8:	8ab9      	ldrh	r1, [r7, #20]
 800f9ba:	8af8      	ldrh	r0, [r7, #22]
 800f9bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9be:	9301      	str	r3, [sp, #4]
 800f9c0:	8c3b      	ldrh	r3, [r7, #32]
 800f9c2:	9300      	str	r3, [sp, #0]
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f7ff ff2d 	bl	800f824 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	3301      	adds	r3, #1
 800f9ce:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	889a      	ldrh	r2, [r3, #4]
 800f9d4:	8afb      	ldrh	r3, [r7, #22]
 800f9d6:	4413      	add	r3, r2
 800f9d8:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0')
 800f9da:	68bb      	ldr	r3, [r7, #8]
 800f9dc:	781b      	ldrb	r3, [r3, #0]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d1cb      	bne.n	800f97a <Paint_DrawString_EN+0x3a>
    }
}
 800f9e2:	3718      	adds	r7, #24
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}
 800f9e8:	2400b814 	.word	0x2400b814
 800f9ec:	080215f4 	.word	0x080215f4

0800f9f0 <Paint_DrawFloatNum>:
    Font             ：A structure pointer that displays a character size
    Color            : Select the background color of the English character
******************************************************************************/
void Paint_DrawFloatNum(UWORD Xpoint, UWORD Ypoint, double Nummber,  UBYTE Decimal_Point, 
                        sFONT* Font,  UWORD Color_Background, UWORD Color_Foreground)
{
 800f9f0:	b590      	push	{r4, r7, lr}
 800f9f2:	b0cb      	sub	sp, #300	; 0x12c
 800f9f4:	af02      	add	r7, sp, #8
 800f9f6:	4604      	mov	r4, r0
 800f9f8:	4608      	mov	r0, r1
 800f9fa:	f107 0108 	add.w	r1, r7, #8
 800f9fe:	ed81 0b00 	vstr	d0, [r1]
 800fa02:	4611      	mov	r1, r2
 800fa04:	1d3a      	adds	r2, r7, #4
 800fa06:	6013      	str	r3, [r2, #0]
 800fa08:	f107 0316 	add.w	r3, r7, #22
 800fa0c:	4622      	mov	r2, r4
 800fa0e:	801a      	strh	r2, [r3, #0]
 800fa10:	f107 0314 	add.w	r3, r7, #20
 800fa14:	4602      	mov	r2, r0
 800fa16:	801a      	strh	r2, [r3, #0]
 800fa18:	f107 0313 	add.w	r3, r7, #19
 800fa1c:	460a      	mov	r2, r1
 800fa1e:	701a      	strb	r2, [r3, #0]
    char Str[ARRAY_LEN] = "";
 800fa20:	f107 031c 	add.w	r3, r7, #28
 800fa24:	2200      	movs	r2, #0
 800fa26:	601a      	str	r2, [r3, #0]
 800fa28:	3304      	adds	r3, #4
 800fa2a:	22fb      	movs	r2, #251	; 0xfb
 800fa2c:	2100      	movs	r1, #0
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f00c feaa 	bl	801c788 <memset>
    sprintf(Str,"%.*lf",Decimal_Point+2,Nummber);
 800fa34:	f107 0313 	add.w	r3, r7, #19
 800fa38:	781b      	ldrb	r3, [r3, #0]
 800fa3a:	1c99      	adds	r1, r3, #2
 800fa3c:	f107 001c 	add.w	r0, r7, #28
 800fa40:	f107 0308 	add.w	r3, r7, #8
 800fa44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa48:	e9cd 2300 	strd	r2, r3, [sp]
 800fa4c:	460a      	mov	r2, r1
 800fa4e:	4930      	ldr	r1, [pc, #192]	; (800fb10 <Paint_DrawFloatNum+0x120>)
 800fa50:	f00d ffc4 	bl	801d9dc <siprintf>
    char * pStr= (char *)malloc((strlen(Str))*sizeof(char));
 800fa54:	f107 031c 	add.w	r3, r7, #28
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f7f0 fc4b 	bl	80002f4 <strlen>
 800fa5e:	4603      	mov	r3, r0
 800fa60:	4618      	mov	r0, r3
 800fa62:	f00c fe59 	bl	801c718 <malloc>
 800fa66:	4603      	mov	r3, r0
 800fa68:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    memcpy(pStr,Str,(strlen(Str)-2));
 800fa6c:	f107 031c 	add.w	r3, r7, #28
 800fa70:	4618      	mov	r0, r3
 800fa72:	f7f0 fc3f 	bl	80002f4 <strlen>
 800fa76:	4603      	mov	r3, r0
 800fa78:	1e9a      	subs	r2, r3, #2
 800fa7a:	f107 031c 	add.w	r3, r7, #28
 800fa7e:	4619      	mov	r1, r3
 800fa80:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800fa84:	f00c fe58 	bl	801c738 <memcpy>
    * (pStr+strlen(Str)-2)='\0';
 800fa88:	f107 031c 	add.w	r3, r7, #28
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	f7f0 fc31 	bl	80002f4 <strlen>
 800fa92:	4603      	mov	r3, r0
 800fa94:	3b02      	subs	r3, #2
 800fa96:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800fa9a:	4413      	add	r3, r2
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	701a      	strb	r2, [r3, #0]
    if((*(pStr+strlen(Str)-3))=='.')
 800faa0:	f107 031c 	add.w	r3, r7, #28
 800faa4:	4618      	mov	r0, r3
 800faa6:	f7f0 fc25 	bl	80002f4 <strlen>
 800faaa:	4603      	mov	r3, r0
 800faac:	3b03      	subs	r3, #3
 800faae:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800fab2:	4413      	add	r3, r2
 800fab4:	781b      	ldrb	r3, [r3, #0]
 800fab6:	2b2e      	cmp	r3, #46	; 0x2e
 800fab8:	d10b      	bne.n	800fad2 <Paint_DrawFloatNum+0xe2>
    {
      *(pStr+strlen(Str)-3)='\0';
 800faba:	f107 031c 	add.w	r3, r7, #28
 800fabe:	4618      	mov	r0, r3
 800fac0:	f7f0 fc18 	bl	80002f4 <strlen>
 800fac4:	4603      	mov	r3, r0
 800fac6:	3b03      	subs	r3, #3
 800fac8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800facc:	4413      	add	r3, r2
 800face:	2200      	movs	r2, #0
 800fad0:	701a      	strb	r2, [r3, #0]
    }
    //show
    Paint_DrawString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Foreground, Color_Background);
 800fad2:	1d3b      	adds	r3, r7, #4
 800fad4:	f107 0214 	add.w	r2, r7, #20
 800fad8:	8811      	ldrh	r1, [r2, #0]
 800fada:	f107 0216 	add.w	r2, r7, #22
 800fade:	8810      	ldrh	r0, [r2, #0]
 800fae0:	f8b7 2130 	ldrh.w	r2, [r7, #304]	; 0x130
 800fae4:	9201      	str	r2, [sp, #4]
 800fae6:	f8b7 2134 	ldrh.w	r2, [r7, #308]	; 0x134
 800faea:	9200      	str	r2, [sp, #0]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800faf2:	f7ff ff25 	bl	800f940 <Paint_DrawString_EN>
    free(pStr);
 800faf6:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800fafa:	f00c fe15 	bl	801c728 <free>
    pStr=NULL;
 800fafe:	2300      	movs	r3, #0
 800fb00:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
}
 800fb04:	bf00      	nop
 800fb06:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd90      	pop	{r4, r7, pc}
 800fb0e:	bf00      	nop
 800fb10:	08021678 	.word	0x08021678

0800fb14 <Paint_DrawImage>:
    yStart           : Y starting coordinates
    xEnd             ：Image width
    yEnd             : Image height
******************************************************************************/
void Paint_DrawImage(const unsigned char *image, UWORD xStart, UWORD yStart, UWORD W_Image, UWORD H_Image) 
{
 800fb14:	b590      	push	{r4, r7, lr}
 800fb16:	b087      	sub	sp, #28
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	60f8      	str	r0, [r7, #12]
 800fb1c:	4608      	mov	r0, r1
 800fb1e:	4611      	mov	r1, r2
 800fb20:	461a      	mov	r2, r3
 800fb22:	4603      	mov	r3, r0
 800fb24:	817b      	strh	r3, [r7, #10]
 800fb26:	460b      	mov	r3, r1
 800fb28:	813b      	strh	r3, [r7, #8]
 800fb2a:	4613      	mov	r3, r2
 800fb2c:	80fb      	strh	r3, [r7, #6]
	int i,j;
	for(j = 0; j < H_Image; j++)
 800fb2e:	2300      	movs	r3, #0
 800fb30:	613b      	str	r3, [r7, #16]
 800fb32:	e049      	b.n	800fbc8 <Paint_DrawImage+0xb4>
	{
		for(i = 0; i < W_Image; i++)
 800fb34:	2300      	movs	r3, #0
 800fb36:	617b      	str	r3, [r7, #20]
 800fb38:	e03f      	b.n	800fbba <Paint_DrawImage+0xa6>
		{
			if(xStart+i < Paint.WidthMemory  &&  yStart+j < Paint.HeightMemory)//Exceeded part does not display
 800fb3a:	897a      	ldrh	r2, [r7, #10]
 800fb3c:	697b      	ldr	r3, [r7, #20]
 800fb3e:	4413      	add	r3, r2
 800fb40:	4a26      	ldr	r2, [pc, #152]	; (800fbdc <Paint_DrawImage+0xc8>)
 800fb42:	8912      	ldrh	r2, [r2, #8]
 800fb44:	b292      	uxth	r2, r2
 800fb46:	4293      	cmp	r3, r2
 800fb48:	da34      	bge.n	800fbb4 <Paint_DrawImage+0xa0>
 800fb4a:	893a      	ldrh	r2, [r7, #8]
 800fb4c:	693b      	ldr	r3, [r7, #16]
 800fb4e:	4413      	add	r3, r2
 800fb50:	4a22      	ldr	r2, [pc, #136]	; (800fbdc <Paint_DrawImage+0xc8>)
 800fb52:	8952      	ldrh	r2, [r2, #10]
 800fb54:	b292      	uxth	r2, r2
 800fb56:	4293      	cmp	r3, r2
 800fb58:	da2c      	bge.n	800fbb4 <Paint_DrawImage+0xa0>
			{
				Paint_SetPixel(xStart + i, yStart + j, (*(image + j*W_Image*2 + i*2+1))<<8 | (*(image + j*W_Image*2 + i*2)));
 800fb5a:	697b      	ldr	r3, [r7, #20]
 800fb5c:	b29a      	uxth	r2, r3
 800fb5e:	897b      	ldrh	r3, [r7, #10]
 800fb60:	4413      	add	r3, r2
 800fb62:	b298      	uxth	r0, r3
 800fb64:	693b      	ldr	r3, [r7, #16]
 800fb66:	b29a      	uxth	r2, r3
 800fb68:	893b      	ldrh	r3, [r7, #8]
 800fb6a:	4413      	add	r3, r2
 800fb6c:	b29c      	uxth	r4, r3
 800fb6e:	88fb      	ldrh	r3, [r7, #6]
 800fb70:	693a      	ldr	r2, [r7, #16]
 800fb72:	fb02 f303 	mul.w	r3, r2, r3
 800fb76:	005b      	lsls	r3, r3, #1
 800fb78:	461a      	mov	r2, r3
 800fb7a:	697b      	ldr	r3, [r7, #20]
 800fb7c:	005b      	lsls	r3, r3, #1
 800fb7e:	4413      	add	r3, r2
 800fb80:	3301      	adds	r3, #1
 800fb82:	68fa      	ldr	r2, [r7, #12]
 800fb84:	4413      	add	r3, r2
 800fb86:	781b      	ldrb	r3, [r3, #0]
 800fb88:	021b      	lsls	r3, r3, #8
 800fb8a:	b21a      	sxth	r2, r3
 800fb8c:	88fb      	ldrh	r3, [r7, #6]
 800fb8e:	6939      	ldr	r1, [r7, #16]
 800fb90:	fb01 f303 	mul.w	r3, r1, r3
 800fb94:	005b      	lsls	r3, r3, #1
 800fb96:	4619      	mov	r1, r3
 800fb98:	697b      	ldr	r3, [r7, #20]
 800fb9a:	005b      	lsls	r3, r3, #1
 800fb9c:	440b      	add	r3, r1
 800fb9e:	68f9      	ldr	r1, [r7, #12]
 800fba0:	440b      	add	r3, r1
 800fba2:	781b      	ldrb	r3, [r3, #0]
 800fba4:	b21b      	sxth	r3, r3
 800fba6:	4313      	orrs	r3, r2
 800fba8:	b21b      	sxth	r3, r3
 800fbaa:	b29b      	uxth	r3, r3
 800fbac:	461a      	mov	r2, r3
 800fbae:	4621      	mov	r1, r4
 800fbb0:	f7ff f9e8 	bl	800ef84 <Paint_SetPixel>
		for(i = 0; i < W_Image; i++)
 800fbb4:	697b      	ldr	r3, [r7, #20]
 800fbb6:	3301      	adds	r3, #1
 800fbb8:	617b      	str	r3, [r7, #20]
 800fbba:	88fb      	ldrh	r3, [r7, #6]
 800fbbc:	697a      	ldr	r2, [r7, #20]
 800fbbe:	429a      	cmp	r2, r3
 800fbc0:	dbbb      	blt.n	800fb3a <Paint_DrawImage+0x26>
	for(j = 0; j < H_Image; j++)
 800fbc2:	693b      	ldr	r3, [r7, #16]
 800fbc4:	3301      	adds	r3, #1
 800fbc6:	613b      	str	r3, [r7, #16]
 800fbc8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fbca:	693a      	ldr	r2, [r7, #16]
 800fbcc:	429a      	cmp	r2, r3
 800fbce:	dbb1      	blt.n	800fb34 <Paint_DrawImage+0x20>
			//Using arrays is a property of sequential storage, accessing the original array by algorithm
			//j*W_Image*2 			   Y offset
			//i*2              	   X offset
		}
	}
}
 800fbd0:	bf00      	nop
 800fbd2:	bf00      	nop
 800fbd4:	371c      	adds	r7, #28
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd90      	pop	{r4, r7, pc}
 800fbda:	bf00      	nop
 800fbdc:	2400b814 	.word	0x2400b814

0800fbe0 <LCD_1IN8_Reset>:
/*******************************************************************************
function:
			Hardware reset
*******************************************************************************/
static void LCD_1IN8_Reset(void)
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	af00      	add	r7, sp, #0
    LCD_1IN8_RST_1;
 800fbe4:	2201      	movs	r2, #1
 800fbe6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fbea:	480d      	ldr	r0, [pc, #52]	; (800fc20 <LCD_1IN8_Reset+0x40>)
 800fbec:	f7f5 fe74 	bl	80058d8 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800fbf0:	2064      	movs	r0, #100	; 0x64
 800fbf2:	f7f2 fcb3 	bl	800255c <HAL_Delay>
    LCD_1IN8_RST_0;
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fbfc:	4808      	ldr	r0, [pc, #32]	; (800fc20 <LCD_1IN8_Reset+0x40>)
 800fbfe:	f7f5 fe6b 	bl	80058d8 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800fc02:	2064      	movs	r0, #100	; 0x64
 800fc04:	f7f2 fcaa 	bl	800255c <HAL_Delay>
    LCD_1IN8_RST_1;
 800fc08:	2201      	movs	r2, #1
 800fc0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fc0e:	4804      	ldr	r0, [pc, #16]	; (800fc20 <LCD_1IN8_Reset+0x40>)
 800fc10:	f7f5 fe62 	bl	80058d8 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800fc14:	2064      	movs	r0, #100	; 0x64
 800fc16:	f7f2 fca1 	bl	800255c <HAL_Delay>
}
 800fc1a:	bf00      	nop
 800fc1c:	bd80      	pop	{r7, pc}
 800fc1e:	bf00      	nop
 800fc20:	58021400 	.word	0x58021400

0800fc24 <LCD_1IN8_WriteReg>:
/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
static void LCD_1IN8_WriteReg(uint8_t Reg)
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b082      	sub	sp, #8
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	71fb      	strb	r3, [r7, #7]
    LCD_1IN8_DC_0;
 800fc2e:	2200      	movs	r2, #0
 800fc30:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fc34:	4807      	ldr	r0, [pc, #28]	; (800fc54 <LCD_1IN8_WriteReg+0x30>)
 800fc36:	f7f5 fe4f 	bl	80058d8 <HAL_GPIO_WritePin>
    LCD_1IN8_CS_0;
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	2140      	movs	r1, #64	; 0x40
 800fc3e:	4805      	ldr	r0, [pc, #20]	; (800fc54 <LCD_1IN8_WriteReg+0x30>)
 800fc40:	f7f5 fe4a 	bl	80058d8 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Reg);
 800fc44:	79fb      	ldrb	r3, [r7, #7]
 800fc46:	4618      	mov	r0, r3
 800fc48:	f7ff f8fe 	bl	800ee48 <DEV_SPI_WRite>
    //LCD_1IN8_CS_1;
}
 800fc4c:	bf00      	nop
 800fc4e:	3708      	adds	r7, #8
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}
 800fc54:	58021800 	.word	0x58021800

0800fc58 <LCD_1IN8_WriteData_8Bit>:

static void LCD_1IN8_WriteData_8Bit(uint8_t Data)
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b082      	sub	sp, #8
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	4603      	mov	r3, r0
 800fc60:	71fb      	strb	r3, [r7, #7]
    LCD_1IN8_DC_1;
 800fc62:	2201      	movs	r2, #1
 800fc64:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fc68:	480a      	ldr	r0, [pc, #40]	; (800fc94 <LCD_1IN8_WriteData_8Bit+0x3c>)
 800fc6a:	f7f5 fe35 	bl	80058d8 <HAL_GPIO_WritePin>
    LCD_1IN8_CS_0;
 800fc6e:	2200      	movs	r2, #0
 800fc70:	2140      	movs	r1, #64	; 0x40
 800fc72:	4808      	ldr	r0, [pc, #32]	; (800fc94 <LCD_1IN8_WriteData_8Bit+0x3c>)
 800fc74:	f7f5 fe30 	bl	80058d8 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data);
 800fc78:	79fb      	ldrb	r3, [r7, #7]
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	f7ff f8e4 	bl	800ee48 <DEV_SPI_WRite>
    LCD_1IN8_CS_1;
 800fc80:	2201      	movs	r2, #1
 800fc82:	2140      	movs	r1, #64	; 0x40
 800fc84:	4803      	ldr	r0, [pc, #12]	; (800fc94 <LCD_1IN8_WriteData_8Bit+0x3c>)
 800fc86:	f7f5 fe27 	bl	80058d8 <HAL_GPIO_WritePin>
}
 800fc8a:	bf00      	nop
 800fc8c:	3708      	adds	r7, #8
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}
 800fc92:	bf00      	nop
 800fc94:	58021800 	.word	0x58021800

0800fc98 <LCD_1IN8_WriteData_NLen16Bit>:
    DEV_SPI_WRITE(Data & 0XFF);
    //LCD_1IN8_CS_1;
}*/

void LCD_1IN8_WriteData_NLen16Bit(uint16_t Data,uint32_t DataLen)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b084      	sub	sp, #16
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	4603      	mov	r3, r0
 800fca0:	6039      	str	r1, [r7, #0]
 800fca2:	80fb      	strh	r3, [r7, #6]
    uint32_t i;
    LCD_1IN8_DC_1;
 800fca4:	2201      	movs	r2, #1
 800fca6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fcaa:	480f      	ldr	r0, [pc, #60]	; (800fce8 <LCD_1IN8_WriteData_NLen16Bit+0x50>)
 800fcac:	f7f5 fe14 	bl	80058d8 <HAL_GPIO_WritePin>
    //LCD_1IN8_CS_0;
    for(i = 0; i < DataLen; i++) {
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	60fb      	str	r3, [r7, #12]
 800fcb4:	e00e      	b.n	800fcd4 <LCD_1IN8_WriteData_NLen16Bit+0x3c>
        DEV_SPI_WRITE( (uint8_t)(Data >> 8) );
 800fcb6:	88fb      	ldrh	r3, [r7, #6]
 800fcb8:	0a1b      	lsrs	r3, r3, #8
 800fcba:	b29b      	uxth	r3, r3
 800fcbc:	b2db      	uxtb	r3, r3
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f7ff f8c2 	bl	800ee48 <DEV_SPI_WRite>
        DEV_SPI_WRITE( (uint8_t)(Data & 0XFF) );
 800fcc4:	88fb      	ldrh	r3, [r7, #6]
 800fcc6:	b2db      	uxtb	r3, r3
 800fcc8:	4618      	mov	r0, r3
 800fcca:	f7ff f8bd 	bl	800ee48 <DEV_SPI_WRite>
    for(i = 0; i < DataLen; i++) {
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	3301      	adds	r3, #1
 800fcd2:	60fb      	str	r3, [r7, #12]
 800fcd4:	68fa      	ldr	r2, [r7, #12]
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	429a      	cmp	r2, r3
 800fcda:	d3ec      	bcc.n	800fcb6 <LCD_1IN8_WriteData_NLen16Bit+0x1e>
    }
    //LCD_1IN8_CS_1;
}
 800fcdc:	bf00      	nop
 800fcde:	bf00      	nop
 800fce0:	3710      	adds	r7, #16
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd80      	pop	{r7, pc}
 800fce6:	bf00      	nop
 800fce8:	58021800 	.word	0x58021800

0800fcec <LCD_1IN8_InitReg>:
/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_1IN8_InitReg(void)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	af00      	add	r7, sp, #0
    //ST7735R Frame Rate
    LCD_1IN8_WriteReg(0xB1);
 800fcf0:	20b1      	movs	r0, #177	; 0xb1
 800fcf2:	f7ff ff97 	bl	800fc24 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 800fcf6:	2001      	movs	r0, #1
 800fcf8:	f7ff ffae 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 800fcfc:	202c      	movs	r0, #44	; 0x2c
 800fcfe:	f7ff ffab 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 800fd02:	202d      	movs	r0, #45	; 0x2d
 800fd04:	f7ff ffa8 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB2);
 800fd08:	20b2      	movs	r0, #178	; 0xb2
 800fd0a:	f7ff ff8b 	bl	800fc24 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 800fd0e:	2001      	movs	r0, #1
 800fd10:	f7ff ffa2 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 800fd14:	202c      	movs	r0, #44	; 0x2c
 800fd16:	f7ff ff9f 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 800fd1a:	202d      	movs	r0, #45	; 0x2d
 800fd1c:	f7ff ff9c 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB3);
 800fd20:	20b3      	movs	r0, #179	; 0xb3
 800fd22:	f7ff ff7f 	bl	800fc24 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 800fd26:	2001      	movs	r0, #1
 800fd28:	f7ff ff96 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 800fd2c:	202c      	movs	r0, #44	; 0x2c
 800fd2e:	f7ff ff93 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 800fd32:	202d      	movs	r0, #45	; 0x2d
 800fd34:	f7ff ff90 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x01);
 800fd38:	2001      	movs	r0, #1
 800fd3a:	f7ff ff8d 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 800fd3e:	202c      	movs	r0, #44	; 0x2c
 800fd40:	f7ff ff8a 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 800fd44:	202d      	movs	r0, #45	; 0x2d
 800fd46:	f7ff ff87 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB4); //Column inversion
 800fd4a:	20b4      	movs	r0, #180	; 0xb4
 800fd4c:	f7ff ff6a 	bl	800fc24 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x07);
 800fd50:	2007      	movs	r0, #7
 800fd52:	f7ff ff81 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>

    //ST7735R Power Sequence
    LCD_1IN8_WriteReg(0xC0);
 800fd56:	20c0      	movs	r0, #192	; 0xc0
 800fd58:	f7ff ff64 	bl	800fc24 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0xA2);
 800fd5c:	20a2      	movs	r0, #162	; 0xa2
 800fd5e:	f7ff ff7b 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x02);
 800fd62:	2002      	movs	r0, #2
 800fd64:	f7ff ff78 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x84);
 800fd68:	2084      	movs	r0, #132	; 0x84
 800fd6a:	f7ff ff75 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteReg(0xC1);
 800fd6e:	20c1      	movs	r0, #193	; 0xc1
 800fd70:	f7ff ff58 	bl	800fc24 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0xC5);
 800fd74:	20c5      	movs	r0, #197	; 0xc5
 800fd76:	f7ff ff6f 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC2);
 800fd7a:	20c2      	movs	r0, #194	; 0xc2
 800fd7c:	f7ff ff52 	bl	800fc24 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0A);
 800fd80:	200a      	movs	r0, #10
 800fd82:	f7ff ff69 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 800fd86:	2000      	movs	r0, #0
 800fd88:	f7ff ff66 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC3);
 800fd8c:	20c3      	movs	r0, #195	; 0xc3
 800fd8e:	f7ff ff49 	bl	800fc24 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x8A);
 800fd92:	208a      	movs	r0, #138	; 0x8a
 800fd94:	f7ff ff60 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2A);
 800fd98:	202a      	movs	r0, #42	; 0x2a
 800fd9a:	f7ff ff5d 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteReg(0xC4);
 800fd9e:	20c4      	movs	r0, #196	; 0xc4
 800fda0:	f7ff ff40 	bl	800fc24 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x8A);
 800fda4:	208a      	movs	r0, #138	; 0x8a
 800fda6:	f7ff ff57 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0xEE);
 800fdaa:	20ee      	movs	r0, #238	; 0xee
 800fdac:	f7ff ff54 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC5); //VCOM
 800fdb0:	20c5      	movs	r0, #197	; 0xc5
 800fdb2:	f7ff ff37 	bl	800fc24 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0E);
 800fdb6:	200e      	movs	r0, #14
 800fdb8:	f7ff ff4e 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>

    //ST7735R Gamma Sequence
    LCD_1IN8_WriteReg(0xe0);
 800fdbc:	20e0      	movs	r0, #224	; 0xe0
 800fdbe:	f7ff ff31 	bl	800fc24 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0f);
 800fdc2:	200f      	movs	r0, #15
 800fdc4:	f7ff ff48 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1a);
 800fdc8:	201a      	movs	r0, #26
 800fdca:	f7ff ff45 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x0f);
 800fdce:	200f      	movs	r0, #15
 800fdd0:	f7ff ff42 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x18);
 800fdd4:	2018      	movs	r0, #24
 800fdd6:	f7ff ff3f 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2f);
 800fdda:	202f      	movs	r0, #47	; 0x2f
 800fddc:	f7ff ff3c 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x28);
 800fde0:	2028      	movs	r0, #40	; 0x28
 800fde2:	f7ff ff39 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x20);
 800fde6:	2020      	movs	r0, #32
 800fde8:	f7ff ff36 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x22);
 800fdec:	2022      	movs	r0, #34	; 0x22
 800fdee:	f7ff ff33 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1f);
 800fdf2:	201f      	movs	r0, #31
 800fdf4:	f7ff ff30 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1b);
 800fdf8:	201b      	movs	r0, #27
 800fdfa:	f7ff ff2d 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x23);
 800fdfe:	2023      	movs	r0, #35	; 0x23
 800fe00:	f7ff ff2a 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x37);
 800fe04:	2037      	movs	r0, #55	; 0x37
 800fe06:	f7ff ff27 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 800fe0a:	2000      	movs	r0, #0
 800fe0c:	f7ff ff24 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x07);
 800fe10:	2007      	movs	r0, #7
 800fe12:	f7ff ff21 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x02);
 800fe16:	2002      	movs	r0, #2
 800fe18:	f7ff ff1e 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x10);
 800fe1c:	2010      	movs	r0, #16
 800fe1e:	f7ff ff1b 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xe1);
 800fe22:	20e1      	movs	r0, #225	; 0xe1
 800fe24:	f7ff fefe 	bl	800fc24 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0f);
 800fe28:	200f      	movs	r0, #15
 800fe2a:	f7ff ff15 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1b);
 800fe2e:	201b      	movs	r0, #27
 800fe30:	f7ff ff12 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x0f);
 800fe34:	200f      	movs	r0, #15
 800fe36:	f7ff ff0f 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x17);
 800fe3a:	2017      	movs	r0, #23
 800fe3c:	f7ff ff0c 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x33);
 800fe40:	2033      	movs	r0, #51	; 0x33
 800fe42:	f7ff ff09 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2c);
 800fe46:	202c      	movs	r0, #44	; 0x2c
 800fe48:	f7ff ff06 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x29);
 800fe4c:	2029      	movs	r0, #41	; 0x29
 800fe4e:	f7ff ff03 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2e);
 800fe52:	202e      	movs	r0, #46	; 0x2e
 800fe54:	f7ff ff00 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x30);
 800fe58:	2030      	movs	r0, #48	; 0x30
 800fe5a:	f7ff fefd 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x30);
 800fe5e:	2030      	movs	r0, #48	; 0x30
 800fe60:	f7ff fefa 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x39);
 800fe64:	2039      	movs	r0, #57	; 0x39
 800fe66:	f7ff fef7 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x3f);
 800fe6a:	203f      	movs	r0, #63	; 0x3f
 800fe6c:	f7ff fef4 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 800fe70:	2000      	movs	r0, #0
 800fe72:	f7ff fef1 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x07);
 800fe76:	2007      	movs	r0, #7
 800fe78:	f7ff feee 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x03);
 800fe7c:	2003      	movs	r0, #3
 800fe7e:	f7ff feeb 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x10);
 800fe82:	2010      	movs	r0, #16
 800fe84:	f7ff fee8 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xF0); //Enable test command
 800fe88:	20f0      	movs	r0, #240	; 0xf0
 800fe8a:	f7ff fecb 	bl	800fc24 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 800fe8e:	2001      	movs	r0, #1
 800fe90:	f7ff fee2 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xF6); //Disable ram power save mode
 800fe94:	20f6      	movs	r0, #246	; 0xf6
 800fe96:	f7ff fec5 	bl	800fc24 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x00);
 800fe9a:	2000      	movs	r0, #0
 800fe9c:	f7ff fedc 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0x3A); //65k mode
 800fea0:	203a      	movs	r0, #58	; 0x3a
 800fea2:	f7ff febf 	bl	800fc24 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x05);
 800fea6:	2005      	movs	r0, #5
 800fea8:	f7ff fed6 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>

}
 800feac:	bf00      	nop
 800feae:	bd80      	pop	{r7, pc}

0800feb0 <LCD_1IN8_SetGramScanWay>:
parameter:
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_1IN8_SetGramScanWay(LCD_1IN8_SCAN_DIR Scan_dir)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b084      	sub	sp, #16
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	4603      	mov	r3, r0
 800feb8:	71fb      	strb	r3, [r7, #7]
    //Get the screen scan direction
    sLCD_1IN8_DIS.LCD_1IN8_Scan_Dir = Scan_dir;
 800feba:	4a34      	ldr	r2, [pc, #208]	; (800ff8c <LCD_1IN8_SetGramScanWay+0xdc>)
 800febc:	79fb      	ldrb	r3, [r7, #7]
 800febe:	7113      	strb	r3, [r2, #4]

	//Get GRAM and LCD width and height
	if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U)
 800fec0:	79fb      	ldrb	r3, [r7, #7]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d008      	beq.n	800fed8 <LCD_1IN8_SetGramScanWay+0x28>
 800fec6:	79fb      	ldrb	r3, [r7, #7]
 800fec8:	2b01      	cmp	r3, #1
 800feca:	d005      	beq.n	800fed8 <LCD_1IN8_SetGramScanWay+0x28>
 800fecc:	79fb      	ldrb	r3, [r7, #7]
 800fece:	2b02      	cmp	r3, #2
 800fed0:	d002      	beq.n	800fed8 <LCD_1IN8_SetGramScanWay+0x28>
 800fed2:	79fb      	ldrb	r3, [r7, #7]
 800fed4:	2b03      	cmp	r3, #3
 800fed6:	d10c      	bne.n	800fef2 <LCD_1IN8_SetGramScanWay+0x42>
	{
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Column	= LCD_1IN8_HEIGHT ;
 800fed8:	4b2c      	ldr	r3, [pc, #176]	; (800ff8c <LCD_1IN8_SetGramScanWay+0xdc>)
 800feda:	2280      	movs	r2, #128	; 0x80
 800fedc:	801a      	strh	r2, [r3, #0]
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Page = LCD_1IN8_WIDTH ;
 800fede:	4b2b      	ldr	r3, [pc, #172]	; (800ff8c <LCD_1IN8_SetGramScanWay+0xdc>)
 800fee0:	22a0      	movs	r2, #160	; 0xa0
 800fee2:	805a      	strh	r2, [r3, #2]
		sLCD_1IN8_DIS.LCD_1IN8_X_Adjust = LCD_1IN8_X;
 800fee4:	4b29      	ldr	r3, [pc, #164]	; (800ff8c <LCD_1IN8_SetGramScanWay+0xdc>)
 800fee6:	2202      	movs	r2, #2
 800fee8:	80da      	strh	r2, [r3, #6]
		sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust = LCD_1IN8_Y;
 800feea:	4b28      	ldr	r3, [pc, #160]	; (800ff8c <LCD_1IN8_SetGramScanWay+0xdc>)
 800feec:	2201      	movs	r2, #1
 800feee:	811a      	strh	r2, [r3, #8]
 800fef0:	e00b      	b.n	800ff0a <LCD_1IN8_SetGramScanWay+0x5a>
	}
	else
	{
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Column	= LCD_1IN8_WIDTH ;
 800fef2:	4b26      	ldr	r3, [pc, #152]	; (800ff8c <LCD_1IN8_SetGramScanWay+0xdc>)
 800fef4:	22a0      	movs	r2, #160	; 0xa0
 800fef6:	801a      	strh	r2, [r3, #0]
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Page = LCD_1IN8_HEIGHT ;	
 800fef8:	4b24      	ldr	r3, [pc, #144]	; (800ff8c <LCD_1IN8_SetGramScanWay+0xdc>)
 800fefa:	2280      	movs	r2, #128	; 0x80
 800fefc:	805a      	strh	r2, [r3, #2]
		sLCD_1IN8_DIS.LCD_1IN8_X_Adjust = LCD_1IN8_Y;
 800fefe:	4b23      	ldr	r3, [pc, #140]	; (800ff8c <LCD_1IN8_SetGramScanWay+0xdc>)
 800ff00:	2201      	movs	r2, #1
 800ff02:	80da      	strh	r2, [r3, #6]
		sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust = LCD_1IN8_X;
 800ff04:	4b21      	ldr	r3, [pc, #132]	; (800ff8c <LCD_1IN8_SetGramScanWay+0xdc>)
 800ff06:	2202      	movs	r2, #2
 800ff08:	811a      	strh	r2, [r3, #8]
	}

    // Gets the scan direction of GRAM
    uint16_t MemoryAccessReg_Data=0;  //0x36
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	81fb      	strh	r3, [r7, #14]
    switch (Scan_dir) {
 800ff0e:	79fb      	ldrb	r3, [r7, #7]
 800ff10:	2b07      	cmp	r3, #7
 800ff12:	d82b      	bhi.n	800ff6c <LCD_1IN8_SetGramScanWay+0xbc>
 800ff14:	a201      	add	r2, pc, #4	; (adr r2, 800ff1c <LCD_1IN8_SetGramScanWay+0x6c>)
 800ff16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff1a:	bf00      	nop
 800ff1c:	0800ff3d 	.word	0x0800ff3d
 800ff20:	0800ff43 	.word	0x0800ff43
 800ff24:	0800ff49 	.word	0x0800ff49
 800ff28:	0800ff4f 	.word	0x0800ff4f
 800ff2c:	0800ff55 	.word	0x0800ff55
 800ff30:	0800ff5b 	.word	0x0800ff5b
 800ff34:	0800ff61 	.word	0x0800ff61
 800ff38:	0800ff67 	.word	0x0800ff67
    case L2R_U2D:
        MemoryAccessReg_Data = 0X00 | 0x00;//x Scan direction | y Scan direction
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	81fb      	strh	r3, [r7, #14]
        break;
 800ff40:	e014      	b.n	800ff6c <LCD_1IN8_SetGramScanWay+0xbc>
    case L2R_D2U:
        MemoryAccessReg_Data = 0x00 | 0x80;//0xC8 | 0X10
 800ff42:	2380      	movs	r3, #128	; 0x80
 800ff44:	81fb      	strh	r3, [r7, #14]
        break;
 800ff46:	e011      	b.n	800ff6c <LCD_1IN8_SetGramScanWay+0xbc>
    case R2L_U2D:	//0X04
        MemoryAccessReg_Data = 0x40 | 0x00;
 800ff48:	2340      	movs	r3, #64	; 0x40
 800ff4a:	81fb      	strh	r3, [r7, #14]
        break;
 800ff4c:	e00e      	b.n	800ff6c <LCD_1IN8_SetGramScanWay+0xbc>
    case R2L_D2U:	//0X0C
        MemoryAccessReg_Data = 0x40 | 0x80;
 800ff4e:	23c0      	movs	r3, #192	; 0xc0
 800ff50:	81fb      	strh	r3, [r7, #14]
        break;
 800ff52:	e00b      	b.n	800ff6c <LCD_1IN8_SetGramScanWay+0xbc>
    case U2D_L2R:	//0X02
        MemoryAccessReg_Data = 0X00 | 0X00 | 0x20;
 800ff54:	2320      	movs	r3, #32
 800ff56:	81fb      	strh	r3, [r7, #14]
        break;
 800ff58:	e008      	b.n	800ff6c <LCD_1IN8_SetGramScanWay+0xbc>
    case U2D_R2L:	//0X06
        MemoryAccessReg_Data = 0x00 | 0X40 | 0x20;
 800ff5a:	2360      	movs	r3, #96	; 0x60
 800ff5c:	81fb      	strh	r3, [r7, #14]
        break;
 800ff5e:	e005      	b.n	800ff6c <LCD_1IN8_SetGramScanWay+0xbc>
    case D2U_L2R:	//0X0A
        MemoryAccessReg_Data = 0x80 | 0x00 | 0x20;
 800ff60:	23a0      	movs	r3, #160	; 0xa0
 800ff62:	81fb      	strh	r3, [r7, #14]
        break;
 800ff64:	e002      	b.n	800ff6c <LCD_1IN8_SetGramScanWay+0xbc>
    case D2U_R2L:	//0X0E
        MemoryAccessReg_Data = 0x40 | 0x80 | 0x20;
 800ff66:	23e0      	movs	r3, #224	; 0xe0
 800ff68:	81fb      	strh	r3, [r7, #14]
        break;
 800ff6a:	bf00      	nop
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN8_WriteReg(0x36); //MX, MY, RGB mode
 800ff6c:	2036      	movs	r0, #54	; 0x36
 800ff6e:	f7ff fe59 	bl	800fc24 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit( MemoryAccessReg_Data & 0xf7);	//RGB color filter panel
 800ff72:	89fb      	ldrh	r3, [r7, #14]
 800ff74:	b2db      	uxtb	r3, r3
 800ff76:	f023 0308 	bic.w	r3, r3, #8
 800ff7a:	b2db      	uxtb	r3, r3
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f7ff fe6b 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>

}
 800ff82:	bf00      	nop
 800ff84:	3710      	adds	r7, #16
 800ff86:	46bd      	mov	sp, r7
 800ff88:	bd80      	pop	{r7, pc}
 800ff8a:	bf00      	nop
 800ff8c:	2400b830 	.word	0x2400b830

0800ff90 <LCD_1IN8_Init>:
/********************************************************************************
function:
			initialization
********************************************************************************/
void LCD_1IN8_Init( LCD_1IN8_SCAN_DIR LCD_1IN8_ScanDir )
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b082      	sub	sp, #8
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	4603      	mov	r3, r0
 800ff98:	71fb      	strb	r3, [r7, #7]

    //Hardware reset
    LCD_1IN8_Reset();
 800ff9a:	f7ff fe21 	bl	800fbe0 <LCD_1IN8_Reset>

    //Set the initialization register
    LCD_1IN8_InitReg();
 800ff9e:	f7ff fea5 	bl	800fcec <LCD_1IN8_InitReg>

    //Set the display scan and color transfer modes
    LCD_1IN8_SetGramScanWay( LCD_1IN8_ScanDir );
 800ffa2:	79fb      	ldrb	r3, [r7, #7]
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	f7ff ff83 	bl	800feb0 <LCD_1IN8_SetGramScanWay>
    DEV_Delay_ms(200);
 800ffaa:	20c8      	movs	r0, #200	; 0xc8
 800ffac:	f7f2 fad6 	bl	800255c <HAL_Delay>

    //sleep out
    LCD_1IN8_WriteReg(0x11);
 800ffb0:	2011      	movs	r0, #17
 800ffb2:	f7ff fe37 	bl	800fc24 <LCD_1IN8_WriteReg>
    DEV_Delay_ms(120);
 800ffb6:	2078      	movs	r0, #120	; 0x78
 800ffb8:	f7f2 fad0 	bl	800255c <HAL_Delay>

    //Turn on the LCD display
    LCD_1IN8_WriteReg(0x29);
 800ffbc:	2029      	movs	r0, #41	; 0x29
 800ffbe:	f7ff fe31 	bl	800fc24 <LCD_1IN8_WriteReg>
}
 800ffc2:	bf00      	nop
 800ffc4:	3708      	adds	r7, #8
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}
	...

0800ffcc <LCD_1IN8_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN8_SetWindows( POINT Xstart, POINT Ystart, POINT Xend, POINT Yend )
{
 800ffcc:	b590      	push	{r4, r7, lr}
 800ffce:	b083      	sub	sp, #12
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	4604      	mov	r4, r0
 800ffd4:	4608      	mov	r0, r1
 800ffd6:	4611      	mov	r1, r2
 800ffd8:	461a      	mov	r2, r3
 800ffda:	4623      	mov	r3, r4
 800ffdc:	80fb      	strh	r3, [r7, #6]
 800ffde:	4603      	mov	r3, r0
 800ffe0:	80bb      	strh	r3, [r7, #4]
 800ffe2:	460b      	mov	r3, r1
 800ffe4:	807b      	strh	r3, [r7, #2]
 800ffe6:	4613      	mov	r3, r2
 800ffe8:	803b      	strh	r3, [r7, #0]

    //set the X coordinates
    LCD_1IN8_WriteReg ( 0x2A );
 800ffea:	202a      	movs	r0, #42	; 0x2a
 800ffec:	f7ff fe1a 	bl	800fc24 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit ( 0x00 );						//Set the horizontal starting point to the high octet
 800fff0:	2000      	movs	r0, #0
 800fff2:	f7ff fe31 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (Xstart & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_X_Adjust);			//Set the horizontal starting point to the low octet
 800fff6:	88fb      	ldrh	r3, [r7, #6]
 800fff8:	b2da      	uxtb	r2, r3
 800fffa:	4b1e      	ldr	r3, [pc, #120]	; (8010074 <LCD_1IN8_SetWindows+0xa8>)
 800fffc:	88db      	ldrh	r3, [r3, #6]
 800fffe:	b2db      	uxtb	r3, r3
 8010000:	4413      	add	r3, r2
 8010002:	b2db      	uxtb	r3, r3
 8010004:	4618      	mov	r0, r3
 8010006:	f7ff fe27 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( 0x00 );				//Set the horizontal end to the high octet
 801000a:	2000      	movs	r0, #0
 801000c:	f7ff fe24 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (( Xend - 1 ) & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_X_Adjust);	//Set the horizontal end to the low octet
 8010010:	887b      	ldrh	r3, [r7, #2]
 8010012:	b2da      	uxtb	r2, r3
 8010014:	4b17      	ldr	r3, [pc, #92]	; (8010074 <LCD_1IN8_SetWindows+0xa8>)
 8010016:	88db      	ldrh	r3, [r3, #6]
 8010018:	b2db      	uxtb	r3, r3
 801001a:	4413      	add	r3, r2
 801001c:	b2db      	uxtb	r3, r3
 801001e:	3b01      	subs	r3, #1
 8010020:	b2db      	uxtb	r3, r3
 8010022:	4618      	mov	r0, r3
 8010024:	f7ff fe18 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>

    //set the Y coordinates
    LCD_1IN8_WriteReg ( 0x2B );
 8010028:	202b      	movs	r0, #43	; 0x2b
 801002a:	f7ff fdfb 	bl	800fc24 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit ( 0x00 );
 801002e:	2000      	movs	r0, #0
 8010030:	f7ff fe12 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (Ystart & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust);
 8010034:	88bb      	ldrh	r3, [r7, #4]
 8010036:	b2da      	uxtb	r2, r3
 8010038:	4b0e      	ldr	r3, [pc, #56]	; (8010074 <LCD_1IN8_SetWindows+0xa8>)
 801003a:	891b      	ldrh	r3, [r3, #8]
 801003c:	b2db      	uxtb	r3, r3
 801003e:	4413      	add	r3, r2
 8010040:	b2db      	uxtb	r3, r3
 8010042:	4618      	mov	r0, r3
 8010044:	f7ff fe08 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( 0x00 );
 8010048:	2000      	movs	r0, #0
 801004a:	f7ff fe05 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( ( (Yend - 1) & 0xff )+ sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust);
 801004e:	883b      	ldrh	r3, [r7, #0]
 8010050:	b2da      	uxtb	r2, r3
 8010052:	4b08      	ldr	r3, [pc, #32]	; (8010074 <LCD_1IN8_SetWindows+0xa8>)
 8010054:	891b      	ldrh	r3, [r3, #8]
 8010056:	b2db      	uxtb	r3, r3
 8010058:	4413      	add	r3, r2
 801005a:	b2db      	uxtb	r3, r3
 801005c:	3b01      	subs	r3, #1
 801005e:	b2db      	uxtb	r3, r3
 8010060:	4618      	mov	r0, r3
 8010062:	f7ff fdf9 	bl	800fc58 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0x2C);
 8010066:	202c      	movs	r0, #44	; 0x2c
 8010068:	f7ff fddc 	bl	800fc24 <LCD_1IN8_WriteReg>

}
 801006c:	bf00      	nop
 801006e:	370c      	adds	r7, #12
 8010070:	46bd      	mov	sp, r7
 8010072:	bd90      	pop	{r4, r7, pc}
 8010074:	2400b830 	.word	0x2400b830

08010078 <LCD_1IN8_SetCursor>:
parameter:
		xStart :   X direction Start coordinates
		xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_1IN8_SetCursor ( POINT Xpoint, POINT Ypoint )
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b082      	sub	sp, #8
 801007c:	af00      	add	r7, sp, #0
 801007e:	4603      	mov	r3, r0
 8010080:	460a      	mov	r2, r1
 8010082:	80fb      	strh	r3, [r7, #6]
 8010084:	4613      	mov	r3, r2
 8010086:	80bb      	strh	r3, [r7, #4]
    LCD_1IN8_SetWindows ( Xpoint, Ypoint, Xpoint , Ypoint );
 8010088:	88bb      	ldrh	r3, [r7, #4]
 801008a:	88fa      	ldrh	r2, [r7, #6]
 801008c:	88b9      	ldrh	r1, [r7, #4]
 801008e:	88f8      	ldrh	r0, [r7, #6]
 8010090:	f7ff ff9c 	bl	800ffcc <LCD_1IN8_SetWindows>
}
 8010094:	bf00      	nop
 8010096:	3708      	adds	r7, #8
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}

0801009c <LCD_1IN8_SetColor>:
parameter:
		Color  :   Set show color
********************************************************************************/
//static void LCD_1IN8_SetColor( LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_1IN8_SetColor( COLOR Color ,POINT Xpoint, POINT Ypoint)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b082      	sub	sp, #8
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	4603      	mov	r3, r0
 80100a4:	80fb      	strh	r3, [r7, #6]
 80100a6:	460b      	mov	r3, r1
 80100a8:	80bb      	strh	r3, [r7, #4]
 80100aa:	4613      	mov	r3, r2
 80100ac:	807b      	strh	r3, [r7, #2]
    LCD_1IN8_WriteData_NLen16Bit(Color ,(uint32_t)Xpoint * (uint32_t)Ypoint);
 80100ae:	88bb      	ldrh	r3, [r7, #4]
 80100b0:	887a      	ldrh	r2, [r7, #2]
 80100b2:	fb02 f203 	mul.w	r2, r2, r3
 80100b6:	88fb      	ldrh	r3, [r7, #6]
 80100b8:	4611      	mov	r1, r2
 80100ba:	4618      	mov	r0, r3
 80100bc:	f7ff fdec 	bl	800fc98 <LCD_1IN8_WriteData_NLen16Bit>
}
 80100c0:	bf00      	nop
 80100c2:	3708      	adds	r7, #8
 80100c4:	46bd      	mov	sp, r7
 80100c6:	bd80      	pop	{r7, pc}

080100c8 <LCD_1IN8_DrawPaint>:
		Xpoint :   The x coordinate of the point
		Ypoint :   The y coordinate of the point
		Color  :   Set the color
********************************************************************************/
void LCD_1IN8_DrawPaint ( POINT Xpoint, POINT Ypoint, COLOR Color )
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b082      	sub	sp, #8
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	4603      	mov	r3, r0
 80100d0:	80fb      	strh	r3, [r7, #6]
 80100d2:	460b      	mov	r3, r1
 80100d4:	80bb      	strh	r3, [r7, #4]
 80100d6:	4613      	mov	r3, r2
 80100d8:	807b      	strh	r3, [r7, #2]
    if ( ( Xpoint <= sLCD_1IN8_DIS.LCD_1IN8_Dis_Column ) && ( Ypoint <= sLCD_1IN8_DIS.LCD_1IN8_Dis_Page ) )
 80100da:	4b1b      	ldr	r3, [pc, #108]	; (8010148 <LCD_1IN8_DrawPaint+0x80>)
 80100dc:	881b      	ldrh	r3, [r3, #0]
 80100de:	88fa      	ldrh	r2, [r7, #6]
 80100e0:	429a      	cmp	r2, r3
 80100e2:	d82d      	bhi.n	8010140 <LCD_1IN8_DrawPaint+0x78>
 80100e4:	4b18      	ldr	r3, [pc, #96]	; (8010148 <LCD_1IN8_DrawPaint+0x80>)
 80100e6:	885b      	ldrh	r3, [r3, #2]
 80100e8:	88ba      	ldrh	r2, [r7, #4]
 80100ea:	429a      	cmp	r2, r3
 80100ec:	d828      	bhi.n	8010140 <LCD_1IN8_DrawPaint+0x78>
    {
    	if (!renderCompleteFrame)
 80100ee:	4b17      	ldr	r3, [pc, #92]	; (801014c <LCD_1IN8_DrawPaint+0x84>)
 80100f0:	781b      	ldrb	r3, [r3, #0]
 80100f2:	f083 0301 	eor.w	r3, r3, #1
 80100f6:	b2db      	uxtb	r3, r3
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d00c      	beq.n	8010116 <LCD_1IN8_DrawPaint+0x4e>
    	{
    		LCD_1IN8_SetCursor (Xpoint, Ypoint);
 80100fc:	88ba      	ldrh	r2, [r7, #4]
 80100fe:	88fb      	ldrh	r3, [r7, #6]
 8010100:	4611      	mov	r1, r2
 8010102:	4618      	mov	r0, r3
 8010104:	f7ff ffb8 	bl	8010078 <LCD_1IN8_SetCursor>
    		LCD_1IN8_SetColor ( Color , 1 , 1);
 8010108:	887b      	ldrh	r3, [r7, #2]
 801010a:	2201      	movs	r2, #1
 801010c:	2101      	movs	r1, #1
 801010e:	4618      	mov	r0, r3
 8010110:	f7ff ffc4 	bl	801009c <LCD_1IN8_SetColor>
    	{
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2] = (uint8_t)((Color & 0xFF00) >> 8 );
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2 + 1] = (uint8_t)((Color & 0x00FF));
    	}
    }
}
 8010114:	e014      	b.n	8010140 <LCD_1IN8_DrawPaint+0x78>
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2] = (uint8_t)((Color & 0xFF00) >> 8 );
 8010116:	887b      	ldrh	r3, [r7, #2]
 8010118:	0a1b      	lsrs	r3, r3, #8
 801011a:	b299      	uxth	r1, r3
 801011c:	88bb      	ldrh	r3, [r7, #4]
 801011e:	01da      	lsls	r2, r3, #7
 8010120:	88fb      	ldrh	r3, [r7, #6]
 8010122:	4413      	add	r3, r2
 8010124:	005b      	lsls	r3, r3, #1
 8010126:	b2c9      	uxtb	r1, r1
 8010128:	4a09      	ldr	r2, [pc, #36]	; (8010150 <LCD_1IN8_DrawPaint+0x88>)
 801012a:	54d1      	strb	r1, [r2, r3]
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2 + 1] = (uint8_t)((Color & 0x00FF));
 801012c:	88bb      	ldrh	r3, [r7, #4]
 801012e:	01da      	lsls	r2, r3, #7
 8010130:	88fb      	ldrh	r3, [r7, #6]
 8010132:	4413      	add	r3, r2
 8010134:	005b      	lsls	r3, r3, #1
 8010136:	3301      	adds	r3, #1
 8010138:	887a      	ldrh	r2, [r7, #2]
 801013a:	b2d1      	uxtb	r1, r2
 801013c:	4a04      	ldr	r2, [pc, #16]	; (8010150 <LCD_1IN8_DrawPaint+0x88>)
 801013e:	54d1      	strb	r1, [r2, r3]
}
 8010140:	bf00      	nop
 8010142:	3708      	adds	r7, #8
 8010144:	46bd      	mov	sp, r7
 8010146:	bd80      	pop	{r7, pc}
 8010148:	2400b830 	.word	0x2400b830
 801014c:	2400ae58 	.word	0x2400ae58
 8010150:	24000090 	.word	0x24000090

08010154 <LCD_1IN8_Clear>:
/********************************************************************************
function:
			Clear screen
********************************************************************************/
void LCD_1IN8_Clear(COLOR  Color)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b084      	sub	sp, #16
 8010158:	af00      	add	r7, sp, #0
 801015a:	4603      	mov	r3, r0
 801015c:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_1IN8_SetWindows(0, 0, sLCD_1IN8_DIS.LCD_1IN8_Dis_Column, sLCD_1IN8_DIS.LCD_1IN8_Dis_Page);
 801015e:	4b1a      	ldr	r3, [pc, #104]	; (80101c8 <LCD_1IN8_Clear+0x74>)
 8010160:	881a      	ldrh	r2, [r3, #0]
 8010162:	4b19      	ldr	r3, [pc, #100]	; (80101c8 <LCD_1IN8_Clear+0x74>)
 8010164:	885b      	ldrh	r3, [r3, #2]
 8010166:	2100      	movs	r1, #0
 8010168:	2000      	movs	r0, #0
 801016a:	f7ff ff2f 	bl	800ffcc <LCD_1IN8_SetWindows>
    LCD_1IN8_DC_1;
 801016e:	2201      	movs	r2, #1
 8010170:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010174:	4815      	ldr	r0, [pc, #84]	; (80101cc <LCD_1IN8_Clear+0x78>)
 8010176:	f7f5 fbaf 	bl	80058d8 <HAL_GPIO_WritePin>
    for(i=0;i<sLCD_1IN8_DIS.LCD_1IN8_Dis_Column;i++)
 801017a:	2300      	movs	r3, #0
 801017c:	81fb      	strh	r3, [r7, #14]
 801017e:	e019      	b.n	80101b4 <LCD_1IN8_Clear+0x60>
	{
		for(j=0;j<sLCD_1IN8_DIS.LCD_1IN8_Dis_Page;j++)
 8010180:	2300      	movs	r3, #0
 8010182:	81bb      	strh	r3, [r7, #12]
 8010184:	e00e      	b.n	80101a4 <LCD_1IN8_Clear+0x50>
		{
			//LCD_1IN8_WriteData_NLen16Bit(Image[i*LCD_1IN8_WIDTH+j],1);
			DEV_SPI_WRITE( (uint8_t)(Color & 0XFF) );
 8010186:	88fb      	ldrh	r3, [r7, #6]
 8010188:	b2db      	uxtb	r3, r3
 801018a:	4618      	mov	r0, r3
 801018c:	f7fe fe5c 	bl	800ee48 <DEV_SPI_WRite>
			DEV_SPI_WRITE( (uint8_t)(Color >> 8) );
 8010190:	88fb      	ldrh	r3, [r7, #6]
 8010192:	0a1b      	lsrs	r3, r3, #8
 8010194:	b29b      	uxth	r3, r3
 8010196:	b2db      	uxtb	r3, r3
 8010198:	4618      	mov	r0, r3
 801019a:	f7fe fe55 	bl	800ee48 <DEV_SPI_WRite>
		for(j=0;j<sLCD_1IN8_DIS.LCD_1IN8_Dis_Page;j++)
 801019e:	89bb      	ldrh	r3, [r7, #12]
 80101a0:	3301      	adds	r3, #1
 80101a2:	81bb      	strh	r3, [r7, #12]
 80101a4:	4b08      	ldr	r3, [pc, #32]	; (80101c8 <LCD_1IN8_Clear+0x74>)
 80101a6:	885b      	ldrh	r3, [r3, #2]
 80101a8:	89ba      	ldrh	r2, [r7, #12]
 80101aa:	429a      	cmp	r2, r3
 80101ac:	d3eb      	bcc.n	8010186 <LCD_1IN8_Clear+0x32>
    for(i=0;i<sLCD_1IN8_DIS.LCD_1IN8_Dis_Column;i++)
 80101ae:	89fb      	ldrh	r3, [r7, #14]
 80101b0:	3301      	adds	r3, #1
 80101b2:	81fb      	strh	r3, [r7, #14]
 80101b4:	4b04      	ldr	r3, [pc, #16]	; (80101c8 <LCD_1IN8_Clear+0x74>)
 80101b6:	881b      	ldrh	r3, [r3, #0]
 80101b8:	89fa      	ldrh	r2, [r7, #14]
 80101ba:	429a      	cmp	r2, r3
 80101bc:	d3e0      	bcc.n	8010180 <LCD_1IN8_Clear+0x2c>
			
		}
	}
}
 80101be:	bf00      	nop
 80101c0:	bf00      	nop
 80101c2:	3710      	adds	r7, #16
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bd80      	pop	{r7, pc}
 80101c8:	2400b830 	.word	0x2400b830
 80101cc:	58021800 	.word	0x58021800

080101d0 <LCD_1IN8_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_1IN8_SetBackLight(UWORD Value)
{
 80101d0:	b480      	push	{r7}
 80101d2:	b083      	sub	sp, #12
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	4603      	mov	r3, r0
 80101d8:	80fb      	strh	r3, [r7, #6]
	 DEV_Set_PWM(Value);
 80101da:	4a04      	ldr	r2, [pc, #16]	; (80101ec <LCD_1IN8_SetBackLight+0x1c>)
 80101dc:	88fb      	ldrh	r3, [r7, #6]
 80101de:	6353      	str	r3, [r2, #52]	; 0x34
}
 80101e0:	bf00      	nop
 80101e2:	370c      	adds	r7, #12
 80101e4:	46bd      	mov	sp, r7
 80101e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ea:	4770      	bx	lr
 80101ec:	40010000 	.word	0x40010000

080101f0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80101f0:	b590      	push	{r4, r7, lr}
 80101f2:	b089      	sub	sp, #36	; 0x24
 80101f4:	af04      	add	r7, sp, #16
 80101f6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80101f8:	2301      	movs	r3, #1
 80101fa:	2202      	movs	r2, #2
 80101fc:	2102      	movs	r1, #2
 80101fe:	6878      	ldr	r0, [r7, #4]
 8010200:	f000 fcb8 	bl	8010b74 <USBH_FindInterface>
 8010204:	4603      	mov	r3, r0
 8010206:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8010208:	7bfb      	ldrb	r3, [r7, #15]
 801020a:	2bff      	cmp	r3, #255	; 0xff
 801020c:	d002      	beq.n	8010214 <USBH_CDC_InterfaceInit+0x24>
 801020e:	7bfb      	ldrb	r3, [r7, #15]
 8010210:	2b01      	cmp	r3, #1
 8010212:	d901      	bls.n	8010218 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8010214:	2302      	movs	r3, #2
 8010216:	e15a      	b.n	80104ce <USBH_CDC_InterfaceInit+0x2de>
  }

  status = USBH_SelectInterface(phost, interface);
 8010218:	7bfb      	ldrb	r3, [r7, #15]
 801021a:	4619      	mov	r1, r3
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	f000 fc89 	bl	8010b34 <USBH_SelectInterface>
 8010222:	4603      	mov	r3, r0
 8010224:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8010226:	7bbb      	ldrb	r3, [r7, #14]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d001      	beq.n	8010230 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 801022c:	2302      	movs	r3, #2
 801022e:	e14e      	b.n	80104ce <USBH_CDC_InterfaceInit+0x2de>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8010230:	687a      	ldr	r2, [r7, #4]
 8010232:	f643 13bc 	movw	r3, #14780	; 0x39bc
 8010236:	4413      	add	r3, r2
 8010238:	681c      	ldr	r4, [r3, #0]
 801023a:	2050      	movs	r0, #80	; 0x50
 801023c:	f00c fa6c 	bl	801c718 <malloc>
 8010240:	4603      	mov	r3, r0
 8010242:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010244:	687a      	ldr	r2, [r7, #4]
 8010246:	f643 13bc 	movw	r3, #14780	; 0x39bc
 801024a:	4413      	add	r3, r2
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	69db      	ldr	r3, [r3, #28]
 8010250:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8010252:	68bb      	ldr	r3, [r7, #8]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d101      	bne.n	801025c <USBH_CDC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8010258:	2302      	movs	r3, #2
 801025a:	e138      	b.n	80104ce <USBH_CDC_InterfaceInit+0x2de>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 801025c:	2250      	movs	r2, #80	; 0x50
 801025e:	2100      	movs	r1, #0
 8010260:	68b8      	ldr	r0, [r7, #8]
 8010262:	f00c fa91 	bl	801c788 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8010266:	7bfb      	ldrb	r3, [r7, #15]
 8010268:	687a      	ldr	r2, [r7, #4]
 801026a:	211a      	movs	r1, #26
 801026c:	fb01 f303 	mul.w	r3, r1, r3
 8010270:	441a      	add	r2, r3
 8010272:	f643 138e 	movw	r3, #14734	; 0x398e
 8010276:	4413      	add	r3, r2
 8010278:	781b      	ldrb	r3, [r3, #0]
 801027a:	b25b      	sxtb	r3, r3
 801027c:	2b00      	cmp	r3, #0
 801027e:	da17      	bge.n	80102b0 <USBH_CDC_InterfaceInit+0xc0>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8010280:	7bfb      	ldrb	r3, [r7, #15]
 8010282:	687a      	ldr	r2, [r7, #4]
 8010284:	211a      	movs	r1, #26
 8010286:	fb01 f303 	mul.w	r3, r1, r3
 801028a:	441a      	add	r2, r3
 801028c:	f643 138e 	movw	r3, #14734	; 0x398e
 8010290:	4413      	add	r3, r2
 8010292:	781a      	ldrb	r2, [r3, #0]
 8010294:	68bb      	ldr	r3, [r7, #8]
 8010296:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8010298:	7bfb      	ldrb	r3, [r7, #15]
 801029a:	687a      	ldr	r2, [r7, #4]
 801029c:	211a      	movs	r1, #26
 801029e:	fb01 f303 	mul.w	r3, r1, r3
 80102a2:	441a      	add	r2, r3
 80102a4:	f643 1390 	movw	r3, #14736	; 0x3990
 80102a8:	4413      	add	r3, r2
 80102aa:	881a      	ldrh	r2, [r3, #0]
 80102ac:	68bb      	ldr	r3, [r7, #8]
 80102ae:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80102b0:	68bb      	ldr	r3, [r7, #8]
 80102b2:	785b      	ldrb	r3, [r3, #1]
 80102b4:	4619      	mov	r1, r3
 80102b6:	6878      	ldr	r0, [r7, #4]
 80102b8:	f001 f80f 	bl	80112da <USBH_AllocPipe>
 80102bc:	4603      	mov	r3, r0
 80102be:	461a      	mov	r2, r3
 80102c0:	68bb      	ldr	r3, [r7, #8]
 80102c2:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80102c4:	68bb      	ldr	r3, [r7, #8]
 80102c6:	7819      	ldrb	r1, [r3, #0]
 80102c8:	68bb      	ldr	r3, [r7, #8]
 80102ca:	7858      	ldrb	r0, [r3, #1]
 80102cc:	687a      	ldr	r2, [r7, #4]
 80102ce:	f643 135c 	movw	r3, #14684	; 0x395c
 80102d2:	4413      	add	r3, r2
 80102d4:	781c      	ldrb	r4, [r3, #0]
 80102d6:	687a      	ldr	r2, [r7, #4]
 80102d8:	f643 135d 	movw	r3, #14685	; 0x395d
 80102dc:	4413      	add	r3, r2
 80102de:	781b      	ldrb	r3, [r3, #0]
 80102e0:	68ba      	ldr	r2, [r7, #8]
 80102e2:	8952      	ldrh	r2, [r2, #10]
 80102e4:	9202      	str	r2, [sp, #8]
 80102e6:	2203      	movs	r2, #3
 80102e8:	9201      	str	r2, [sp, #4]
 80102ea:	9300      	str	r3, [sp, #0]
 80102ec:	4623      	mov	r3, r4
 80102ee:	4602      	mov	r2, r0
 80102f0:	6878      	ldr	r0, [r7, #4]
 80102f2:	f000 ffc3 	bl	801127c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80102f6:	68bb      	ldr	r3, [r7, #8]
 80102f8:	781b      	ldrb	r3, [r3, #0]
 80102fa:	2200      	movs	r2, #0
 80102fc:	4619      	mov	r1, r3
 80102fe:	6878      	ldr	r0, [r7, #4]
 8010300:	f00c f92e 	bl	801c560 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8010304:	2300      	movs	r3, #0
 8010306:	2200      	movs	r2, #0
 8010308:	210a      	movs	r1, #10
 801030a:	6878      	ldr	r0, [r7, #4]
 801030c:	f000 fc32 	bl	8010b74 <USBH_FindInterface>
 8010310:	4603      	mov	r3, r0
 8010312:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8010314:	7bfb      	ldrb	r3, [r7, #15]
 8010316:	2bff      	cmp	r3, #255	; 0xff
 8010318:	d002      	beq.n	8010320 <USBH_CDC_InterfaceInit+0x130>
 801031a:	7bfb      	ldrb	r3, [r7, #15]
 801031c:	2b01      	cmp	r3, #1
 801031e:	d901      	bls.n	8010324 <USBH_CDC_InterfaceInit+0x134>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8010320:	2302      	movs	r3, #2
 8010322:	e0d4      	b.n	80104ce <USBH_CDC_InterfaceInit+0x2de>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8010324:	7bfb      	ldrb	r3, [r7, #15]
 8010326:	687a      	ldr	r2, [r7, #4]
 8010328:	211a      	movs	r1, #26
 801032a:	fb01 f303 	mul.w	r3, r1, r3
 801032e:	441a      	add	r2, r3
 8010330:	f643 138e 	movw	r3, #14734	; 0x398e
 8010334:	4413      	add	r3, r2
 8010336:	781b      	ldrb	r3, [r3, #0]
 8010338:	b25b      	sxtb	r3, r3
 801033a:	2b00      	cmp	r3, #0
 801033c:	da18      	bge.n	8010370 <USBH_CDC_InterfaceInit+0x180>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 801033e:	7bfb      	ldrb	r3, [r7, #15]
 8010340:	687a      	ldr	r2, [r7, #4]
 8010342:	211a      	movs	r1, #26
 8010344:	fb01 f303 	mul.w	r3, r1, r3
 8010348:	441a      	add	r2, r3
 801034a:	f643 138e 	movw	r3, #14734	; 0x398e
 801034e:	4413      	add	r3, r2
 8010350:	781a      	ldrb	r2, [r3, #0]
 8010352:	68bb      	ldr	r3, [r7, #8]
 8010354:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8010356:	7bfb      	ldrb	r3, [r7, #15]
 8010358:	687a      	ldr	r2, [r7, #4]
 801035a:	211a      	movs	r1, #26
 801035c:	fb01 f303 	mul.w	r3, r1, r3
 8010360:	441a      	add	r2, r3
 8010362:	f643 1390 	movw	r3, #14736	; 0x3990
 8010366:	4413      	add	r3, r2
 8010368:	881a      	ldrh	r2, [r3, #0]
 801036a:	68bb      	ldr	r3, [r7, #8]
 801036c:	835a      	strh	r2, [r3, #26]
 801036e:	e017      	b.n	80103a0 <USBH_CDC_InterfaceInit+0x1b0>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8010370:	7bfb      	ldrb	r3, [r7, #15]
 8010372:	687a      	ldr	r2, [r7, #4]
 8010374:	211a      	movs	r1, #26
 8010376:	fb01 f303 	mul.w	r3, r1, r3
 801037a:	441a      	add	r2, r3
 801037c:	f643 138e 	movw	r3, #14734	; 0x398e
 8010380:	4413      	add	r3, r2
 8010382:	781a      	ldrb	r2, [r3, #0]
 8010384:	68bb      	ldr	r3, [r7, #8]
 8010386:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8010388:	7bfb      	ldrb	r3, [r7, #15]
 801038a:	687a      	ldr	r2, [r7, #4]
 801038c:	211a      	movs	r1, #26
 801038e:	fb01 f303 	mul.w	r3, r1, r3
 8010392:	441a      	add	r2, r3
 8010394:	f643 1390 	movw	r3, #14736	; 0x3990
 8010398:	4413      	add	r3, r2
 801039a:	881a      	ldrh	r2, [r3, #0]
 801039c:	68bb      	ldr	r3, [r7, #8]
 801039e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80103a0:	7bfb      	ldrb	r3, [r7, #15]
 80103a2:	687a      	ldr	r2, [r7, #4]
 80103a4:	211a      	movs	r1, #26
 80103a6:	fb01 f303 	mul.w	r3, r1, r3
 80103aa:	441a      	add	r2, r3
 80103ac:	f643 1396 	movw	r3, #14742	; 0x3996
 80103b0:	4413      	add	r3, r2
 80103b2:	781b      	ldrb	r3, [r3, #0]
 80103b4:	b25b      	sxtb	r3, r3
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	da18      	bge.n	80103ec <USBH_CDC_InterfaceInit+0x1fc>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80103ba:	7bfb      	ldrb	r3, [r7, #15]
 80103bc:	687a      	ldr	r2, [r7, #4]
 80103be:	211a      	movs	r1, #26
 80103c0:	fb01 f303 	mul.w	r3, r1, r3
 80103c4:	441a      	add	r2, r3
 80103c6:	f643 1396 	movw	r3, #14742	; 0x3996
 80103ca:	4413      	add	r3, r2
 80103cc:	781a      	ldrb	r2, [r3, #0]
 80103ce:	68bb      	ldr	r3, [r7, #8]
 80103d0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80103d2:	7bfb      	ldrb	r3, [r7, #15]
 80103d4:	687a      	ldr	r2, [r7, #4]
 80103d6:	211a      	movs	r1, #26
 80103d8:	fb01 f303 	mul.w	r3, r1, r3
 80103dc:	441a      	add	r2, r3
 80103de:	f643 1398 	movw	r3, #14744	; 0x3998
 80103e2:	4413      	add	r3, r2
 80103e4:	881a      	ldrh	r2, [r3, #0]
 80103e6:	68bb      	ldr	r3, [r7, #8]
 80103e8:	835a      	strh	r2, [r3, #26]
 80103ea:	e017      	b.n	801041c <USBH_CDC_InterfaceInit+0x22c>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80103ec:	7bfb      	ldrb	r3, [r7, #15]
 80103ee:	687a      	ldr	r2, [r7, #4]
 80103f0:	211a      	movs	r1, #26
 80103f2:	fb01 f303 	mul.w	r3, r1, r3
 80103f6:	441a      	add	r2, r3
 80103f8:	f643 1396 	movw	r3, #14742	; 0x3996
 80103fc:	4413      	add	r3, r2
 80103fe:	781a      	ldrb	r2, [r3, #0]
 8010400:	68bb      	ldr	r3, [r7, #8]
 8010402:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8010404:	7bfb      	ldrb	r3, [r7, #15]
 8010406:	687a      	ldr	r2, [r7, #4]
 8010408:	211a      	movs	r1, #26
 801040a:	fb01 f303 	mul.w	r3, r1, r3
 801040e:	441a      	add	r2, r3
 8010410:	f643 1398 	movw	r3, #14744	; 0x3998
 8010414:	4413      	add	r3, r2
 8010416:	881a      	ldrh	r2, [r3, #0]
 8010418:	68bb      	ldr	r3, [r7, #8]
 801041a:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	7b9b      	ldrb	r3, [r3, #14]
 8010420:	4619      	mov	r1, r3
 8010422:	6878      	ldr	r0, [r7, #4]
 8010424:	f000 ff59 	bl	80112da <USBH_AllocPipe>
 8010428:	4603      	mov	r3, r0
 801042a:	461a      	mov	r2, r3
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8010430:	68bb      	ldr	r3, [r7, #8]
 8010432:	7bdb      	ldrb	r3, [r3, #15]
 8010434:	4619      	mov	r1, r3
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	f000 ff4f 	bl	80112da <USBH_AllocPipe>
 801043c:	4603      	mov	r3, r0
 801043e:	461a      	mov	r2, r3
 8010440:	68bb      	ldr	r3, [r7, #8]
 8010442:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	7b59      	ldrb	r1, [r3, #13]
 8010448:	68bb      	ldr	r3, [r7, #8]
 801044a:	7b98      	ldrb	r0, [r3, #14]
 801044c:	687a      	ldr	r2, [r7, #4]
 801044e:	f643 135c 	movw	r3, #14684	; 0x395c
 8010452:	4413      	add	r3, r2
 8010454:	781c      	ldrb	r4, [r3, #0]
 8010456:	687a      	ldr	r2, [r7, #4]
 8010458:	f643 135d 	movw	r3, #14685	; 0x395d
 801045c:	4413      	add	r3, r2
 801045e:	781b      	ldrb	r3, [r3, #0]
 8010460:	68ba      	ldr	r2, [r7, #8]
 8010462:	8b12      	ldrh	r2, [r2, #24]
 8010464:	9202      	str	r2, [sp, #8]
 8010466:	2202      	movs	r2, #2
 8010468:	9201      	str	r2, [sp, #4]
 801046a:	9300      	str	r3, [sp, #0]
 801046c:	4623      	mov	r3, r4
 801046e:	4602      	mov	r2, r0
 8010470:	6878      	ldr	r0, [r7, #4]
 8010472:	f000 ff03 	bl	801127c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8010476:	68bb      	ldr	r3, [r7, #8]
 8010478:	7b19      	ldrb	r1, [r3, #12]
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	7bd8      	ldrb	r0, [r3, #15]
 801047e:	687a      	ldr	r2, [r7, #4]
 8010480:	f643 135c 	movw	r3, #14684	; 0x395c
 8010484:	4413      	add	r3, r2
 8010486:	781c      	ldrb	r4, [r3, #0]
 8010488:	687a      	ldr	r2, [r7, #4]
 801048a:	f643 135d 	movw	r3, #14685	; 0x395d
 801048e:	4413      	add	r3, r2
 8010490:	781b      	ldrb	r3, [r3, #0]
 8010492:	68ba      	ldr	r2, [r7, #8]
 8010494:	8b52      	ldrh	r2, [r2, #26]
 8010496:	9202      	str	r2, [sp, #8]
 8010498:	2202      	movs	r2, #2
 801049a:	9201      	str	r2, [sp, #4]
 801049c:	9300      	str	r3, [sp, #0]
 801049e:	4623      	mov	r3, r4
 80104a0:	4602      	mov	r2, r0
 80104a2:	6878      	ldr	r0, [r7, #4]
 80104a4:	f000 feea 	bl	801127c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80104a8:	68bb      	ldr	r3, [r7, #8]
 80104aa:	2200      	movs	r2, #0
 80104ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80104b0:	68bb      	ldr	r3, [r7, #8]
 80104b2:	7b5b      	ldrb	r3, [r3, #13]
 80104b4:	2200      	movs	r2, #0
 80104b6:	4619      	mov	r1, r3
 80104b8:	6878      	ldr	r0, [r7, #4]
 80104ba:	f00c f851 	bl	801c560 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80104be:	68bb      	ldr	r3, [r7, #8]
 80104c0:	7b1b      	ldrb	r3, [r3, #12]
 80104c2:	2200      	movs	r2, #0
 80104c4:	4619      	mov	r1, r3
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	f00c f84a 	bl	801c560 <USBH_LL_SetToggle>

  return USBH_OK;
 80104cc:	2300      	movs	r3, #0
}
 80104ce:	4618      	mov	r0, r3
 80104d0:	3714      	adds	r7, #20
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd90      	pop	{r4, r7, pc}

080104d6 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80104d6:	b580      	push	{r7, lr}
 80104d8:	b084      	sub	sp, #16
 80104da:	af00      	add	r7, sp, #0
 80104dc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80104de:	687a      	ldr	r2, [r7, #4]
 80104e0:	f643 13bc 	movw	r3, #14780	; 0x39bc
 80104e4:	4413      	add	r3, r2
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	69db      	ldr	r3, [r3, #28]
 80104ea:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	781b      	ldrb	r3, [r3, #0]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d00e      	beq.n	8010512 <USBH_CDC_InterfaceDeInit+0x3c>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	781b      	ldrb	r3, [r3, #0]
 80104f8:	4619      	mov	r1, r3
 80104fa:	6878      	ldr	r0, [r7, #4]
 80104fc:	f000 fedd 	bl	80112ba <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	781b      	ldrb	r3, [r3, #0]
 8010504:	4619      	mov	r1, r3
 8010506:	6878      	ldr	r0, [r7, #4]
 8010508:	f000 ff09 	bl	801131e <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	2200      	movs	r2, #0
 8010510:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	7b1b      	ldrb	r3, [r3, #12]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d00e      	beq.n	8010538 <USBH_CDC_InterfaceDeInit+0x62>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	7b1b      	ldrb	r3, [r3, #12]
 801051e:	4619      	mov	r1, r3
 8010520:	6878      	ldr	r0, [r7, #4]
 8010522:	f000 feca 	bl	80112ba <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	7b1b      	ldrb	r3, [r3, #12]
 801052a:	4619      	mov	r1, r3
 801052c:	6878      	ldr	r0, [r7, #4]
 801052e:	f000 fef6 	bl	801131e <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	2200      	movs	r2, #0
 8010536:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	7b5b      	ldrb	r3, [r3, #13]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d00e      	beq.n	801055e <USBH_CDC_InterfaceDeInit+0x88>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	7b5b      	ldrb	r3, [r3, #13]
 8010544:	4619      	mov	r1, r3
 8010546:	6878      	ldr	r0, [r7, #4]
 8010548:	f000 feb7 	bl	80112ba <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	7b5b      	ldrb	r3, [r3, #13]
 8010550:	4619      	mov	r1, r3
 8010552:	6878      	ldr	r0, [r7, #4]
 8010554:	f000 fee3 	bl	801131e <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	2200      	movs	r2, #0
 801055c:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 801055e:	687a      	ldr	r2, [r7, #4]
 8010560:	f643 13bc 	movw	r3, #14780	; 0x39bc
 8010564:	4413      	add	r3, r2
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	69db      	ldr	r3, [r3, #28]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d00f      	beq.n	801058e <USBH_CDC_InterfaceDeInit+0xb8>
  {
    USBH_free(phost->pActiveClass->pData);
 801056e:	687a      	ldr	r2, [r7, #4]
 8010570:	f643 13bc 	movw	r3, #14780	; 0x39bc
 8010574:	4413      	add	r3, r2
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	69db      	ldr	r3, [r3, #28]
 801057a:	4618      	mov	r0, r3
 801057c:	f00c f8d4 	bl	801c728 <free>
    phost->pActiveClass->pData = 0U;
 8010580:	687a      	ldr	r2, [r7, #4]
 8010582:	f643 13bc 	movw	r3, #14780	; 0x39bc
 8010586:	4413      	add	r3, r2
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	2200      	movs	r2, #0
 801058c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 801058e:	2300      	movs	r3, #0
}
 8010590:	4618      	mov	r0, r3
 8010592:	3710      	adds	r7, #16
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}

08010598 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b084      	sub	sp, #16
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80105a0:	687a      	ldr	r2, [r7, #4]
 80105a2:	f643 13bc 	movw	r3, #14780	; 0x39bc
 80105a6:	4413      	add	r3, r2
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	69db      	ldr	r3, [r3, #28]
 80105ac:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	3340      	adds	r3, #64	; 0x40
 80105b2:	4619      	mov	r1, r3
 80105b4:	6878      	ldr	r0, [r7, #4]
 80105b6:	f000 f8b6 	bl	8010726 <GetLineCoding>
 80105ba:	4603      	mov	r3, r0
 80105bc:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80105be:	7afb      	ldrb	r3, [r7, #11]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d107      	bne.n	80105d4 <USBH_CDC_ClassRequest+0x3c>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80105c4:	687a      	ldr	r2, [r7, #4]
 80105c6:	f643 2314 	movw	r3, #14868	; 0x3a14
 80105ca:	4413      	add	r3, r2
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	2102      	movs	r1, #2
 80105d0:	6878      	ldr	r0, [r7, #4]
 80105d2:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80105d4:	7afb      	ldrb	r3, [r7, #11]
}
 80105d6:	4618      	mov	r0, r3
 80105d8:	3710      	adds	r7, #16
 80105da:	46bd      	mov	sp, r7
 80105dc:	bd80      	pop	{r7, pc}
	...

080105e0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b084      	sub	sp, #16
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80105e8:	2301      	movs	r3, #1
 80105ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80105ec:	2300      	movs	r3, #0
 80105ee:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80105f0:	687a      	ldr	r2, [r7, #4]
 80105f2:	f643 13bc 	movw	r3, #14780	; 0x39bc
 80105f6:	4413      	add	r3, r2
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	69db      	ldr	r3, [r3, #28]
 80105fc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80105fe:	68bb      	ldr	r3, [r7, #8]
 8010600:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8010604:	2b04      	cmp	r3, #4
 8010606:	d877      	bhi.n	80106f8 <USBH_CDC_Process+0x118>
 8010608:	a201      	add	r2, pc, #4	; (adr r2, 8010610 <USBH_CDC_Process+0x30>)
 801060a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801060e:	bf00      	nop
 8010610:	08010625 	.word	0x08010625
 8010614:	0801062b 	.word	0x0801062b
 8010618:	0801065b 	.word	0x0801065b
 801061c:	080106cf 	.word	0x080106cf
 8010620:	080106dd 	.word	0x080106dd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8010624:	2300      	movs	r3, #0
 8010626:	73fb      	strb	r3, [r7, #15]
      break;
 8010628:	e06d      	b.n	8010706 <USBH_CDC_Process+0x126>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 801062a:	68bb      	ldr	r3, [r7, #8]
 801062c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801062e:	4619      	mov	r1, r3
 8010630:	6878      	ldr	r0, [r7, #4]
 8010632:	f000 f897 	bl	8010764 <SetLineCoding>
 8010636:	4603      	mov	r3, r0
 8010638:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801063a:	7bbb      	ldrb	r3, [r7, #14]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d104      	bne.n	801064a <USBH_CDC_Process+0x6a>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	2202      	movs	r2, #2
 8010644:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8010648:	e058      	b.n	80106fc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 801064a:	7bbb      	ldrb	r3, [r7, #14]
 801064c:	2b01      	cmp	r3, #1
 801064e:	d055      	beq.n	80106fc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8010650:	68bb      	ldr	r3, [r7, #8]
 8010652:	2204      	movs	r2, #4
 8010654:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8010658:	e050      	b.n	80106fc <USBH_CDC_Process+0x11c>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	3340      	adds	r3, #64	; 0x40
 801065e:	4619      	mov	r1, r3
 8010660:	6878      	ldr	r0, [r7, #4]
 8010662:	f000 f860 	bl	8010726 <GetLineCoding>
 8010666:	4603      	mov	r3, r0
 8010668:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801066a:	7bbb      	ldrb	r3, [r7, #14]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d126      	bne.n	80106be <USBH_CDC_Process+0xde>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8010670:	68bb      	ldr	r3, [r7, #8]
 8010672:	2200      	movs	r2, #0
 8010674:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 801067e:	68bb      	ldr	r3, [r7, #8]
 8010680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010682:	791b      	ldrb	r3, [r3, #4]
 8010684:	429a      	cmp	r2, r3
 8010686:	d13b      	bne.n	8010700 <USBH_CDC_Process+0x120>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8010688:	68bb      	ldr	r3, [r7, #8]
 801068a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010692:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8010694:	429a      	cmp	r2, r3
 8010696:	d133      	bne.n	8010700 <USBH_CDC_Process+0x120>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8010698:	68bb      	ldr	r3, [r7, #8]
 801069a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 801069e:	68bb      	ldr	r3, [r7, #8]
 80106a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80106a2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80106a4:	429a      	cmp	r2, r3
 80106a6:	d12b      	bne.n	8010700 <USBH_CDC_Process+0x120>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80106a8:	68bb      	ldr	r3, [r7, #8]
 80106aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80106ac:	68bb      	ldr	r3, [r7, #8]
 80106ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80106b0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80106b2:	429a      	cmp	r2, r3
 80106b4:	d124      	bne.n	8010700 <USBH_CDC_Process+0x120>
        {
          USBH_CDC_LineCodingChanged(phost);
 80106b6:	6878      	ldr	r0, [r7, #4]
 80106b8:	f000 f95c 	bl	8010974 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80106bc:	e020      	b.n	8010700 <USBH_CDC_Process+0x120>
        if (req_status != USBH_BUSY)
 80106be:	7bbb      	ldrb	r3, [r7, #14]
 80106c0:	2b01      	cmp	r3, #1
 80106c2:	d01d      	beq.n	8010700 <USBH_CDC_Process+0x120>
          CDC_Handle->state = CDC_ERROR_STATE;
 80106c4:	68bb      	ldr	r3, [r7, #8]
 80106c6:	2204      	movs	r2, #4
 80106c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80106cc:	e018      	b.n	8010700 <USBH_CDC_Process+0x120>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80106ce:	6878      	ldr	r0, [r7, #4]
 80106d0:	f000 f867 	bl	80107a2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80106d4:	6878      	ldr	r0, [r7, #4]
 80106d6:	f000 f8dc 	bl	8010892 <CDC_ProcessReception>
      break;
 80106da:	e014      	b.n	8010706 <USBH_CDC_Process+0x126>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80106dc:	2100      	movs	r1, #0
 80106de:	6878      	ldr	r0, [r7, #4]
 80106e0:	f000 fb49 	bl	8010d76 <USBH_ClrFeature>
 80106e4:	4603      	mov	r3, r0
 80106e6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80106e8:	7bbb      	ldrb	r3, [r7, #14]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d10a      	bne.n	8010704 <USBH_CDC_Process+0x124>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80106ee:	68bb      	ldr	r3, [r7, #8]
 80106f0:	2200      	movs	r2, #0
 80106f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80106f6:	e005      	b.n	8010704 <USBH_CDC_Process+0x124>

    default:
      break;
 80106f8:	bf00      	nop
 80106fa:	e004      	b.n	8010706 <USBH_CDC_Process+0x126>
      break;
 80106fc:	bf00      	nop
 80106fe:	e002      	b.n	8010706 <USBH_CDC_Process+0x126>
      break;
 8010700:	bf00      	nop
 8010702:	e000      	b.n	8010706 <USBH_CDC_Process+0x126>
      break;
 8010704:	bf00      	nop

  }

  return status;
 8010706:	7bfb      	ldrb	r3, [r7, #15]
}
 8010708:	4618      	mov	r0, r3
 801070a:	3710      	adds	r7, #16
 801070c:	46bd      	mov	sp, r7
 801070e:	bd80      	pop	{r7, pc}

08010710 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8010710:	b480      	push	{r7}
 8010712:	b083      	sub	sp, #12
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8010718:	2300      	movs	r3, #0
}
 801071a:	4618      	mov	r0, r3
 801071c:	370c      	adds	r7, #12
 801071e:	46bd      	mov	sp, r7
 8010720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010724:	4770      	bx	lr

08010726 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8010726:	b580      	push	{r7, lr}
 8010728:	b082      	sub	sp, #8
 801072a:	af00      	add	r7, sp, #0
 801072c:	6078      	str	r0, [r7, #4]
 801072e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	22a1      	movs	r2, #161	; 0xa1
 8010734:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	2221      	movs	r2, #33	; 0x21
 801073a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2200      	movs	r2, #0
 8010740:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	2200      	movs	r2, #0
 8010746:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2207      	movs	r2, #7
 801074c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	2207      	movs	r2, #7
 8010752:	4619      	mov	r1, r3
 8010754:	6878      	ldr	r0, [r7, #4]
 8010756:	f000 fb32 	bl	8010dbe <USBH_CtlReq>
 801075a:	4603      	mov	r3, r0
}
 801075c:	4618      	mov	r0, r3
 801075e:	3708      	adds	r7, #8
 8010760:	46bd      	mov	sp, r7
 8010762:	bd80      	pop	{r7, pc}

08010764 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b082      	sub	sp, #8
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
 801076c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	2221      	movs	r2, #33	; 0x21
 8010772:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	2220      	movs	r2, #32
 8010778:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	2200      	movs	r2, #0
 801077e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	2200      	movs	r2, #0
 8010784:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	2207      	movs	r2, #7
 801078a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	2207      	movs	r2, #7
 8010790:	4619      	mov	r1, r3
 8010792:	6878      	ldr	r0, [r7, #4]
 8010794:	f000 fb13 	bl	8010dbe <USBH_CtlReq>
 8010798:	4603      	mov	r3, r0
}
 801079a:	4618      	mov	r0, r3
 801079c:	3708      	adds	r7, #8
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd80      	pop	{r7, pc}

080107a2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80107a2:	b580      	push	{r7, lr}
 80107a4:	b086      	sub	sp, #24
 80107a6:	af02      	add	r7, sp, #8
 80107a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80107aa:	687a      	ldr	r2, [r7, #4]
 80107ac:	f643 13bc 	movw	r3, #14780	; 0x39bc
 80107b0:	4413      	add	r3, r2
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	69db      	ldr	r3, [r3, #28]
 80107b6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80107b8:	2300      	movs	r3, #0
 80107ba:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80107c2:	2b01      	cmp	r3, #1
 80107c4:	d002      	beq.n	80107cc <CDC_ProcessTransmission+0x2a>
 80107c6:	2b02      	cmp	r3, #2
 80107c8:	d023      	beq.n	8010812 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 80107ca:	e05e      	b.n	801088a <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107d0:	68fa      	ldr	r2, [r7, #12]
 80107d2:	8b12      	ldrh	r2, [r2, #24]
 80107d4:	4293      	cmp	r3, r2
 80107d6:	d90b      	bls.n	80107f0 <CDC_ProcessTransmission+0x4e>
        USBH_BulkSendData(phost,
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	69d9      	ldr	r1, [r3, #28]
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	8b1a      	ldrh	r2, [r3, #24]
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	7b5b      	ldrb	r3, [r3, #13]
 80107e4:	2001      	movs	r0, #1
 80107e6:	9000      	str	r0, [sp, #0]
 80107e8:	6878      	ldr	r0, [r7, #4]
 80107ea:	f000 fd02 	bl	80111f2 <USBH_BulkSendData>
 80107ee:	e00b      	b.n	8010808 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80107f8:	b29a      	uxth	r2, r3
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	7b5b      	ldrb	r3, [r3, #13]
 80107fe:	2001      	movs	r0, #1
 8010800:	9000      	str	r0, [sp, #0]
 8010802:	6878      	ldr	r0, [r7, #4]
 8010804:	f000 fcf5 	bl	80111f2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	2202      	movs	r2, #2
 801080c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8010810:	e03b      	b.n	801088a <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	7b5b      	ldrb	r3, [r3, #13]
 8010816:	4619      	mov	r1, r3
 8010818:	6878      	ldr	r0, [r7, #4]
 801081a:	f00b fe73 	bl	801c504 <USBH_LL_GetURBState>
 801081e:	4603      	mov	r3, r0
 8010820:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8010822:	7afb      	ldrb	r3, [r7, #11]
 8010824:	2b01      	cmp	r3, #1
 8010826:	d128      	bne.n	801087a <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801082c:	68fa      	ldr	r2, [r7, #12]
 801082e:	8b12      	ldrh	r2, [r2, #24]
 8010830:	4293      	cmp	r3, r2
 8010832:	d90e      	bls.n	8010852 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010838:	68fa      	ldr	r2, [r7, #12]
 801083a:	8b12      	ldrh	r2, [r2, #24]
 801083c:	1a9a      	subs	r2, r3, r2
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	69db      	ldr	r3, [r3, #28]
 8010846:	68fa      	ldr	r2, [r7, #12]
 8010848:	8b12      	ldrh	r2, [r2, #24]
 801084a:	441a      	add	r2, r3
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	61da      	str	r2, [r3, #28]
 8010850:	e002      	b.n	8010858 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	2200      	movs	r2, #0
 8010856:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801085c:	2b00      	cmp	r3, #0
 801085e:	d004      	beq.n	801086a <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	2201      	movs	r2, #1
 8010864:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8010868:	e00e      	b.n	8010888 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	2200      	movs	r2, #0
 801086e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8010872:	6878      	ldr	r0, [r7, #4]
 8010874:	f000 f86a 	bl	801094c <USBH_CDC_TransmitCallback>
      break;
 8010878:	e006      	b.n	8010888 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 801087a:	7afb      	ldrb	r3, [r7, #11]
 801087c:	2b02      	cmp	r3, #2
 801087e:	d103      	bne.n	8010888 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	2201      	movs	r2, #1
 8010884:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8010888:	bf00      	nop
  }
}
 801088a:	bf00      	nop
 801088c:	3710      	adds	r7, #16
 801088e:	46bd      	mov	sp, r7
 8010890:	bd80      	pop	{r7, pc}

08010892 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8010892:	b580      	push	{r7, lr}
 8010894:	b086      	sub	sp, #24
 8010896:	af00      	add	r7, sp, #0
 8010898:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801089a:	687a      	ldr	r2, [r7, #4]
 801089c:	f643 13bc 	movw	r3, #14780	; 0x39bc
 80108a0:	4413      	add	r3, r2
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	69db      	ldr	r3, [r3, #28]
 80108a6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80108a8:	2300      	movs	r3, #0
 80108aa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80108ac:	697b      	ldr	r3, [r7, #20]
 80108ae:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80108b2:	2b03      	cmp	r3, #3
 80108b4:	d002      	beq.n	80108bc <CDC_ProcessReception+0x2a>
 80108b6:	2b04      	cmp	r3, #4
 80108b8:	d00e      	beq.n	80108d8 <CDC_ProcessReception+0x46>
#endif
      }
      break;

    default:
      break;
 80108ba:	e043      	b.n	8010944 <CDC_ProcessReception+0xb2>
      USBH_BulkReceiveData(phost,
 80108bc:	697b      	ldr	r3, [r7, #20]
 80108be:	6a19      	ldr	r1, [r3, #32]
 80108c0:	697b      	ldr	r3, [r7, #20]
 80108c2:	8b5a      	ldrh	r2, [r3, #26]
 80108c4:	697b      	ldr	r3, [r7, #20]
 80108c6:	7b1b      	ldrb	r3, [r3, #12]
 80108c8:	6878      	ldr	r0, [r7, #4]
 80108ca:	f000 fcb9 	bl	8011240 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80108ce:	697b      	ldr	r3, [r7, #20]
 80108d0:	2204      	movs	r2, #4
 80108d2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80108d6:	e035      	b.n	8010944 <CDC_ProcessReception+0xb2>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80108d8:	697b      	ldr	r3, [r7, #20]
 80108da:	7b1b      	ldrb	r3, [r3, #12]
 80108dc:	4619      	mov	r1, r3
 80108de:	6878      	ldr	r0, [r7, #4]
 80108e0:	f00b fe10 	bl	801c504 <USBH_LL_GetURBState>
 80108e4:	4603      	mov	r3, r0
 80108e6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80108e8:	7cfb      	ldrb	r3, [r7, #19]
 80108ea:	2b01      	cmp	r3, #1
 80108ec:	d129      	bne.n	8010942 <CDC_ProcessReception+0xb0>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80108ee:	697b      	ldr	r3, [r7, #20]
 80108f0:	7b1b      	ldrb	r3, [r3, #12]
 80108f2:	4619      	mov	r1, r3
 80108f4:	6878      	ldr	r0, [r7, #4]
 80108f6:	f00b fd6b 	bl	801c3d0 <USBH_LL_GetLastXferSize>
 80108fa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80108fc:	697b      	ldr	r3, [r7, #20]
 80108fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010900:	68fa      	ldr	r2, [r7, #12]
 8010902:	429a      	cmp	r2, r3
 8010904:	d016      	beq.n	8010934 <CDC_ProcessReception+0xa2>
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	8b5b      	ldrh	r3, [r3, #26]
 801090a:	461a      	mov	r2, r3
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	4293      	cmp	r3, r2
 8010910:	d910      	bls.n	8010934 <CDC_ProcessReception+0xa2>
          CDC_Handle->RxDataLength -= length ;
 8010912:	697b      	ldr	r3, [r7, #20]
 8010914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	1ad2      	subs	r2, r2, r3
 801091a:	697b      	ldr	r3, [r7, #20]
 801091c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	6a1a      	ldr	r2, [r3, #32]
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	441a      	add	r2, r3
 8010926:	697b      	ldr	r3, [r7, #20]
 8010928:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 801092a:	697b      	ldr	r3, [r7, #20]
 801092c:	2203      	movs	r2, #3
 801092e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8010932:	e006      	b.n	8010942 <CDC_ProcessReception+0xb0>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8010934:	697b      	ldr	r3, [r7, #20]
 8010936:	2200      	movs	r2, #0
 8010938:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 801093c:	6878      	ldr	r0, [r7, #4]
 801093e:	f000 f80f 	bl	8010960 <USBH_CDC_ReceiveCallback>
      break;
 8010942:	bf00      	nop
  }
}
 8010944:	bf00      	nop
 8010946:	3718      	adds	r7, #24
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}

0801094c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 801094c:	b480      	push	{r7}
 801094e:	b083      	sub	sp, #12
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8010954:	bf00      	nop
 8010956:	370c      	adds	r7, #12
 8010958:	46bd      	mov	sp, r7
 801095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095e:	4770      	bx	lr

08010960 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8010960:	b480      	push	{r7}
 8010962:	b083      	sub	sp, #12
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8010968:	bf00      	nop
 801096a:	370c      	adds	r7, #12
 801096c:	46bd      	mov	sp, r7
 801096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010972:	4770      	bx	lr

08010974 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8010974:	b480      	push	{r7}
 8010976:	b083      	sub	sp, #12
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 801097c:	bf00      	nop
 801097e:	370c      	adds	r7, #12
 8010980:	46bd      	mov	sp, r7
 8010982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010986:	4770      	bx	lr

08010988 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b084      	sub	sp, #16
 801098c:	af00      	add	r7, sp, #0
 801098e:	60f8      	str	r0, [r7, #12]
 8010990:	60b9      	str	r1, [r7, #8]
 8010992:	4613      	mov	r3, r2
 8010994:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d101      	bne.n	80109a0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 801099c:	2302      	movs	r3, #2
 801099e:	e038      	b.n	8010a12 <USBH_Init+0x8a>
  }

  /* Set DRiver ID */
  phost->id = id;
 80109a0:	68fa      	ldr	r2, [r7, #12]
 80109a2:	f643 230c 	movw	r3, #14860	; 0x3a0c
 80109a6:	4413      	add	r3, r2
 80109a8:	79fa      	ldrb	r2, [r7, #7]
 80109aa:	701a      	strb	r2, [r3, #0]

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80109ac:	68fa      	ldr	r2, [r7, #12]
 80109ae:	f643 13bc 	movw	r3, #14780	; 0x39bc
 80109b2:	4413      	add	r3, r2
 80109b4:	2200      	movs	r2, #0
 80109b6:	601a      	str	r2, [r3, #0]
  phost->ClassNumber = 0U;
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	f503 5367 	add.w	r3, r3, #14784	; 0x39c0
 80109be:	2200      	movs	r2, #0
 80109c0:	601a      	str	r2, [r3, #0]

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80109c2:	68f8      	ldr	r0, [r7, #12]
 80109c4:	f000 f829 	bl	8010a1a <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80109c8:	68fa      	ldr	r2, [r7, #12]
 80109ca:	f643 1363 	movw	r3, #14691	; 0x3963
 80109ce:	4413      	add	r3, r2
 80109d0:	2200      	movs	r2, #0
 80109d2:	701a      	strb	r2, [r3, #0]
  phost->device.is_connected = 0U;
 80109d4:	68fa      	ldr	r2, [r7, #12]
 80109d6:	f643 1360 	movw	r3, #14688	; 0x3960
 80109da:	4413      	add	r3, r2
 80109dc:	2200      	movs	r2, #0
 80109de:	701a      	strb	r2, [r3, #0]
  phost->device.is_disconnected = 0U;
 80109e0:	68fa      	ldr	r2, [r7, #12]
 80109e2:	f643 1361 	movw	r3, #14689	; 0x3961
 80109e6:	4413      	add	r3, r2
 80109e8:	2200      	movs	r2, #0
 80109ea:	701a      	strb	r2, [r3, #0]
  phost->device.is_ReEnumerated = 0U;
 80109ec:	68fa      	ldr	r2, [r7, #12]
 80109ee:	f643 1362 	movw	r3, #14690	; 0x3962
 80109f2:	4413      	add	r3, r2
 80109f4:	2200      	movs	r2, #0
 80109f6:	701a      	strb	r2, [r3, #0]

  /* Assign User process */
  if (pUsrFunc != NULL)
 80109f8:	68bb      	ldr	r3, [r7, #8]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d005      	beq.n	8010a0a <USBH_Init+0x82>
  {
    phost->pUser = pUsrFunc;
 80109fe:	68fa      	ldr	r2, [r7, #12]
 8010a00:	f643 2314 	movw	r3, #14868	; 0x3a14
 8010a04:	4413      	add	r3, r2
 8010a06:	68ba      	ldr	r2, [r7, #8]
 8010a08:	601a      	str	r2, [r3, #0]

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8010a0a:	68f8      	ldr	r0, [r7, #12]
 8010a0c:	f00b fc66 	bl	801c2dc <USBH_LL_Init>

  return USBH_OK;
 8010a10:	2300      	movs	r3, #0
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	3710      	adds	r7, #16
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}

08010a1a <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8010a1a:	b480      	push	{r7}
 8010a1c:	b085      	sub	sp, #20
 8010a1e:	af00      	add	r7, sp, #0
 8010a20:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8010a22:	2300      	movs	r3, #0
 8010a24:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8010a26:	2300      	movs	r3, #0
 8010a28:	60fb      	str	r3, [r7, #12]
 8010a2a:	e00a      	b.n	8010a42 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 8010a2c:	687a      	ldr	r2, [r7, #4]
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 8010a34:	009b      	lsls	r3, r3, #2
 8010a36:	4413      	add	r3, r2
 8010a38:	2200      	movs	r2, #0
 8010a3a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	3301      	adds	r3, #1
 8010a40:	60fb      	str	r3, [r7, #12]
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	2b0e      	cmp	r3, #14
 8010a46:	d9f1      	bls.n	8010a2c <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8010a48:	2300      	movs	r3, #0
 8010a4a:	60fb      	str	r3, [r7, #12]
 8010a4c:	e009      	b.n	8010a62 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 8010a4e:	687a      	ldr	r2, [r7, #4]
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	4413      	add	r3, r2
 8010a54:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8010a58:	2200      	movs	r2, #0
 8010a5a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	3301      	adds	r3, #1
 8010a60:	60fb      	str	r3, [r7, #12]
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
 8010a68:	d3f1      	bcc.n	8010a4e <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	2200      	movs	r2, #0
 8010a74:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	2201      	movs	r2, #1
 8010a7a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8010a7c:	687a      	ldr	r2, [r7, #4]
 8010a7e:	f643 2304 	movw	r3, #14852	; 0x3a04
 8010a82:	4413      	add	r3, r2
 8010a84:	2200      	movs	r2, #0
 8010a86:	601a      	str	r2, [r3, #0]

  phost->Control.state = CTRL_SETUP;
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	2201      	movs	r2, #1
 8010a8c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	2240      	movs	r2, #64	; 0x40
 8010a92:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	2200      	movs	r2, #0
 8010a98:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8010a9a:	687a      	ldr	r2, [r7, #4]
 8010a9c:	f643 135c 	movw	r3, #14684	; 0x395c
 8010aa0:	4413      	add	r3, r2
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	701a      	strb	r2, [r3, #0]
  phost->device.speed = USBH_SPEED_FULL;
 8010aa6:	687a      	ldr	r2, [r7, #4]
 8010aa8:	f643 135d 	movw	r3, #14685	; 0x395d
 8010aac:	4413      	add	r3, r2
 8010aae:	2201      	movs	r2, #1
 8010ab0:	701a      	strb	r2, [r3, #0]
  phost->device.RstCnt = 0U;
 8010ab2:	687a      	ldr	r2, [r7, #4]
 8010ab4:	f643 135f 	movw	r3, #14687	; 0x395f
 8010ab8:	4413      	add	r3, r2
 8010aba:	2200      	movs	r2, #0
 8010abc:	701a      	strb	r2, [r3, #0]
  phost->device.EnumCnt = 0U;
 8010abe:	687a      	ldr	r2, [r7, #4]
 8010ac0:	f643 135e 	movw	r3, #14686	; 0x395e
 8010ac4:	4413      	add	r3, r2
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	701a      	strb	r2, [r3, #0]

  return USBH_OK;
 8010aca:	2300      	movs	r3, #0
}
 8010acc:	4618      	mov	r0, r3
 8010ace:	3714      	adds	r7, #20
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad6:	4770      	bx	lr

08010ad8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8010ad8:	b480      	push	{r7}
 8010ada:	b085      	sub	sp, #20
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
 8010ae0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d01a      	beq.n	8010b22 <USBH_RegisterClass+0x4a>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	f503 5367 	add.w	r3, r3, #14784	; 0x39c0
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d111      	bne.n	8010b1c <USBH_RegisterClass+0x44>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	f503 5367 	add.w	r3, r3, #14784	; 0x39c0
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	1c59      	adds	r1, r3, #1
 8010b02:	687a      	ldr	r2, [r7, #4]
 8010b04:	f502 5267 	add.w	r2, r2, #14784	; 0x39c0
 8010b08:	6011      	str	r1, [r2, #0]
 8010b0a:	687a      	ldr	r2, [r7, #4]
 8010b0c:	f603 636e 	addw	r3, r3, #3694	; 0xe6e
 8010b10:	6839      	ldr	r1, [r7, #0]
 8010b12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8010b16:	2300      	movs	r3, #0
 8010b18:	73fb      	strb	r3, [r7, #15]
 8010b1a:	e004      	b.n	8010b26 <USBH_RegisterClass+0x4e>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8010b1c:	2302      	movs	r3, #2
 8010b1e:	73fb      	strb	r3, [r7, #15]
 8010b20:	e001      	b.n	8010b26 <USBH_RegisterClass+0x4e>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8010b22:	2302      	movs	r3, #2
 8010b24:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b28:	4618      	mov	r0, r3
 8010b2a:	3714      	adds	r7, #20
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b32:	4770      	bx	lr

08010b34 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8010b34:	b480      	push	{r7}
 8010b36:	b085      	sub	sp, #20
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	6078      	str	r0, [r7, #4]
 8010b3c:	460b      	mov	r3, r1
 8010b3e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8010b40:	2300      	movs	r3, #0
 8010b42:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8010b44:	687a      	ldr	r2, [r7, #4]
 8010b46:	f643 137c 	movw	r3, #14716	; 0x397c
 8010b4a:	4413      	add	r3, r2
 8010b4c:	781b      	ldrb	r3, [r3, #0]
 8010b4e:	78fa      	ldrb	r2, [r7, #3]
 8010b50:	429a      	cmp	r2, r3
 8010b52:	d206      	bcs.n	8010b62 <USBH_SelectInterface+0x2e>
  {
    phost->device.current_interface = interface;
 8010b54:	687a      	ldr	r2, [r7, #4]
 8010b56:	f643 1364 	movw	r3, #14692	; 0x3964
 8010b5a:	4413      	add	r3, r2
 8010b5c:	78fa      	ldrb	r2, [r7, #3]
 8010b5e:	701a      	strb	r2, [r3, #0]
 8010b60:	e001      	b.n	8010b66 <USBH_SelectInterface+0x32>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8010b62:	2302      	movs	r3, #2
 8010b64:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3714      	adds	r7, #20
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b72:	4770      	bx	lr

08010b74 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8010b74:	b480      	push	{r7}
 8010b76:	b087      	sub	sp, #28
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
 8010b7c:	4608      	mov	r0, r1
 8010b7e:	4611      	mov	r1, r2
 8010b80:	461a      	mov	r2, r3
 8010b82:	4603      	mov	r3, r0
 8010b84:	70fb      	strb	r3, [r7, #3]
 8010b86:	460b      	mov	r3, r1
 8010b88:	70bb      	strb	r3, [r7, #2]
 8010b8a:	4613      	mov	r3, r2
 8010b8c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8010b8e:	2300      	movs	r3, #0
 8010b90:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8010b92:	2300      	movs	r3, #0
 8010b94:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8010b96:	687a      	ldr	r2, [r7, #4]
 8010b98:	f643 1378 	movw	r3, #14712	; 0x3978
 8010b9c:	4413      	add	r3, r2
 8010b9e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8010ba0:	e025      	b.n	8010bee <USBH_FindInterface+0x7a>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8010ba2:	7dfb      	ldrb	r3, [r7, #23]
 8010ba4:	221a      	movs	r2, #26
 8010ba6:	fb02 f303 	mul.w	r3, r2, r3
 8010baa:	3308      	adds	r3, #8
 8010bac:	68fa      	ldr	r2, [r7, #12]
 8010bae:	4413      	add	r3, r2
 8010bb0:	3302      	adds	r3, #2
 8010bb2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8010bb4:	693b      	ldr	r3, [r7, #16]
 8010bb6:	795b      	ldrb	r3, [r3, #5]
 8010bb8:	78fa      	ldrb	r2, [r7, #3]
 8010bba:	429a      	cmp	r2, r3
 8010bbc:	d002      	beq.n	8010bc4 <USBH_FindInterface+0x50>
 8010bbe:	78fb      	ldrb	r3, [r7, #3]
 8010bc0:	2bff      	cmp	r3, #255	; 0xff
 8010bc2:	d111      	bne.n	8010be8 <USBH_FindInterface+0x74>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010bc4:	693b      	ldr	r3, [r7, #16]
 8010bc6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8010bc8:	78ba      	ldrb	r2, [r7, #2]
 8010bca:	429a      	cmp	r2, r3
 8010bcc:	d002      	beq.n	8010bd4 <USBH_FindInterface+0x60>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010bce:	78bb      	ldrb	r3, [r7, #2]
 8010bd0:	2bff      	cmp	r3, #255	; 0xff
 8010bd2:	d109      	bne.n	8010be8 <USBH_FindInterface+0x74>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8010bd4:	693b      	ldr	r3, [r7, #16]
 8010bd6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010bd8:	787a      	ldrb	r2, [r7, #1]
 8010bda:	429a      	cmp	r2, r3
 8010bdc:	d002      	beq.n	8010be4 <USBH_FindInterface+0x70>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8010bde:	787b      	ldrb	r3, [r7, #1]
 8010be0:	2bff      	cmp	r3, #255	; 0xff
 8010be2:	d101      	bne.n	8010be8 <USBH_FindInterface+0x74>
    {
      return  if_ix;
 8010be4:	7dfb      	ldrb	r3, [r7, #23]
 8010be6:	e006      	b.n	8010bf6 <USBH_FindInterface+0x82>
    }
    if_ix++;
 8010be8:	7dfb      	ldrb	r3, [r7, #23]
 8010bea:	3301      	adds	r3, #1
 8010bec:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8010bee:	7dfb      	ldrb	r3, [r7, #23]
 8010bf0:	2b01      	cmp	r3, #1
 8010bf2:	d9d6      	bls.n	8010ba2 <USBH_FindInterface+0x2e>
  }
  return 0xFFU;
 8010bf4:	23ff      	movs	r3, #255	; 0xff
}
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	371c      	adds	r7, #28
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c00:	4770      	bx	lr

08010c02 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8010c02:	b580      	push	{r7, lr}
 8010c04:	b082      	sub	sp, #8
 8010c06:	af00      	add	r7, sp, #0
 8010c08:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8010c0a:	6878      	ldr	r0, [r7, #4]
 8010c0c:	f00b fba6 	bl	801c35c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8010c10:	2101      	movs	r1, #1
 8010c12:	6878      	ldr	r0, [r7, #4]
 8010c14:	f00b fc8b 	bl	801c52e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8010c18:	2300      	movs	r3, #0
}
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	3708      	adds	r7, #8
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}

08010c22 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8010c22:	b480      	push	{r7}
 8010c24:	b083      	sub	sp, #12
 8010c26:	af00      	add	r7, sp, #0
 8010c28:	6078      	str	r0, [r7, #4]
 8010c2a:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8010c2c:	687a      	ldr	r2, [r7, #4]
 8010c2e:	f643 2304 	movw	r3, #14852	; 0x3a04
 8010c32:	4413      	add	r3, r2
 8010c34:	683a      	ldr	r2, [r7, #0]
 8010c36:	601a      	str	r2, [r3, #0]
}
 8010c38:	bf00      	nop
 8010c3a:	370c      	adds	r7, #12
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c42:	4770      	bx	lr

08010c44 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b082      	sub	sp, #8
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8010c4c:	687a      	ldr	r2, [r7, #4]
 8010c4e:	f643 2304 	movw	r3, #14852	; 0x3a04
 8010c52:	4413      	add	r3, r2
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	1c5a      	adds	r2, r3, #1
 8010c58:	6879      	ldr	r1, [r7, #4]
 8010c5a:	f643 2304 	movw	r3, #14852	; 0x3a04
 8010c5e:	440b      	add	r3, r1
 8010c60:	601a      	str	r2, [r3, #0]
  USBH_HandleSof(phost);
 8010c62:	6878      	ldr	r0, [r7, #4]
 8010c64:	f000 f804 	bl	8010c70 <USBH_HandleSof>
}
 8010c68:	bf00      	nop
 8010c6a:	3708      	adds	r7, #8
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}

08010c70 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b082      	sub	sp, #8
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	781b      	ldrb	r3, [r3, #0]
 8010c7c:	b2db      	uxtb	r3, r3
 8010c7e:	2b0b      	cmp	r3, #11
 8010c80:	d10e      	bne.n	8010ca0 <USBH_HandleSof+0x30>
 8010c82:	687a      	ldr	r2, [r7, #4]
 8010c84:	f643 13bc 	movw	r3, #14780	; 0x39bc
 8010c88:	4413      	add	r3, r2
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d007      	beq.n	8010ca0 <USBH_HandleSof+0x30>
  {
    phost->pActiveClass->SOFProcess(phost);
 8010c90:	687a      	ldr	r2, [r7, #4]
 8010c92:	f643 13bc 	movw	r3, #14780	; 0x39bc
 8010c96:	4413      	add	r3, r2
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	699b      	ldr	r3, [r3, #24]
 8010c9c:	6878      	ldr	r0, [r7, #4]
 8010c9e:	4798      	blx	r3
  }
}
 8010ca0:	bf00      	nop
 8010ca2:	3708      	adds	r7, #8
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd80      	pop	{r7, pc}

08010ca8 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8010ca8:	b480      	push	{r7}
 8010caa:	b083      	sub	sp, #12
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8010cb0:	687a      	ldr	r2, [r7, #4]
 8010cb2:	f643 1363 	movw	r3, #14691	; 0x3963
 8010cb6:	4413      	add	r3, r2
 8010cb8:	2201      	movs	r2, #1
 8010cba:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8010cbc:	bf00      	nop
}
 8010cbe:	370c      	adds	r7, #12
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc6:	4770      	bx	lr

08010cc8 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8010cc8:	b480      	push	{r7}
 8010cca:	b083      	sub	sp, #12
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8010cd0:	687a      	ldr	r2, [r7, #4]
 8010cd2:	f643 1363 	movw	r3, #14691	; 0x3963
 8010cd6:	4413      	add	r3, r2
 8010cd8:	2200      	movs	r2, #0
 8010cda:	701a      	strb	r2, [r3, #0]

  return;
 8010cdc:	bf00      	nop
}
 8010cde:	370c      	adds	r7, #12
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce6:	4770      	bx	lr

08010ce8 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8010ce8:	b480      	push	{r7}
 8010cea:	b083      	sub	sp, #12
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8010cf0:	687a      	ldr	r2, [r7, #4]
 8010cf2:	f643 1360 	movw	r3, #14688	; 0x3960
 8010cf6:	4413      	add	r3, r2
 8010cf8:	2201      	movs	r2, #1
 8010cfa:	701a      	strb	r2, [r3, #0]
  phost->device.is_disconnected = 0U;
 8010cfc:	687a      	ldr	r2, [r7, #4]
 8010cfe:	f643 1361 	movw	r3, #14689	; 0x3961
 8010d02:	4413      	add	r3, r2
 8010d04:	2200      	movs	r2, #0
 8010d06:	701a      	strb	r2, [r3, #0]
  phost->device.is_ReEnumerated = 0U;
 8010d08:	687a      	ldr	r2, [r7, #4]
 8010d0a:	f643 1362 	movw	r3, #14690	; 0x3962
 8010d0e:	4413      	add	r3, r2
 8010d10:	2200      	movs	r2, #0
 8010d12:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8010d14:	2300      	movs	r3, #0
}
 8010d16:	4618      	mov	r0, r3
 8010d18:	370c      	adds	r7, #12
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d20:	4770      	bx	lr

08010d22 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8010d22:	b580      	push	{r7, lr}
 8010d24:	b082      	sub	sp, #8
 8010d26:	af00      	add	r7, sp, #0
 8010d28:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8010d2a:	687a      	ldr	r2, [r7, #4]
 8010d2c:	f643 1361 	movw	r3, #14689	; 0x3961
 8010d30:	4413      	add	r3, r2
 8010d32:	2201      	movs	r2, #1
 8010d34:	701a      	strb	r2, [r3, #0]
  phost->device.is_connected = 0U;
 8010d36:	687a      	ldr	r2, [r7, #4]
 8010d38:	f643 1360 	movw	r3, #14688	; 0x3960
 8010d3c:	4413      	add	r3, r2
 8010d3e:	2200      	movs	r2, #0
 8010d40:	701a      	strb	r2, [r3, #0]
  phost->device.PortEnabled = 0U;
 8010d42:	687a      	ldr	r2, [r7, #4]
 8010d44:	f643 1363 	movw	r3, #14691	; 0x3963
 8010d48:	4413      	add	r3, r2
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	701a      	strb	r2, [r3, #0]

  /* Stop Host */
  USBH_LL_Stop(phost);
 8010d4e:	6878      	ldr	r0, [r7, #4]
 8010d50:	f00b fb21 	bl	801c396 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	791b      	ldrb	r3, [r3, #4]
 8010d58:	4619      	mov	r1, r3
 8010d5a:	6878      	ldr	r0, [r7, #4]
 8010d5c:	f000 fadf 	bl	801131e <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	795b      	ldrb	r3, [r3, #5]
 8010d64:	4619      	mov	r1, r3
 8010d66:	6878      	ldr	r0, [r7, #4]
 8010d68:	f000 fad9 	bl	801131e <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8010d6c:	2300      	movs	r3, #0
}
 8010d6e:	4618      	mov	r0, r3
 8010d70:	3708      	adds	r7, #8
 8010d72:	46bd      	mov	sp, r7
 8010d74:	bd80      	pop	{r7, pc}

08010d76 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8010d76:	b580      	push	{r7, lr}
 8010d78:	b082      	sub	sp, #8
 8010d7a:	af00      	add	r7, sp, #0
 8010d7c:	6078      	str	r0, [r7, #4]
 8010d7e:	460b      	mov	r3, r1
 8010d80:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	789b      	ldrb	r3, [r3, #2]
 8010d86:	2b01      	cmp	r3, #1
 8010d88:	d10f      	bne.n	8010daa <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	2202      	movs	r2, #2
 8010d8e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	2201      	movs	r2, #1
 8010d94:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	2200      	movs	r2, #0
 8010d9a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8010d9c:	78fb      	ldrb	r3, [r7, #3]
 8010d9e:	b29a      	uxth	r2, r3
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	2200      	movs	r2, #0
 8010da8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8010daa:	2200      	movs	r2, #0
 8010dac:	2100      	movs	r1, #0
 8010dae:	6878      	ldr	r0, [r7, #4]
 8010db0:	f000 f805 	bl	8010dbe <USBH_CtlReq>
 8010db4:	4603      	mov	r3, r0
}
 8010db6:	4618      	mov	r0, r3
 8010db8:	3708      	adds	r7, #8
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	bd80      	pop	{r7, pc}

08010dbe <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8010dbe:	b580      	push	{r7, lr}
 8010dc0:	b086      	sub	sp, #24
 8010dc2:	af00      	add	r7, sp, #0
 8010dc4:	60f8      	str	r0, [r7, #12]
 8010dc6:	60b9      	str	r1, [r7, #8]
 8010dc8:	4613      	mov	r3, r2
 8010dca:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8010dcc:	2301      	movs	r3, #1
 8010dce:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	789b      	ldrb	r3, [r3, #2]
 8010dd4:	2b01      	cmp	r3, #1
 8010dd6:	d002      	beq.n	8010dde <USBH_CtlReq+0x20>
 8010dd8:	2b02      	cmp	r3, #2
 8010dda:	d00f      	beq.n	8010dfc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8010ddc:	e027      	b.n	8010e2e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	68ba      	ldr	r2, [r7, #8]
 8010de2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	88fa      	ldrh	r2, [r7, #6]
 8010de8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	2201      	movs	r2, #1
 8010dee:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	2202      	movs	r2, #2
 8010df4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8010df6:	2301      	movs	r3, #1
 8010df8:	75fb      	strb	r3, [r7, #23]
      break;
 8010dfa:	e018      	b.n	8010e2e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8010dfc:	68f8      	ldr	r0, [r7, #12]
 8010dfe:	f000 f81b 	bl	8010e38 <USBH_HandleControl>
 8010e02:	4603      	mov	r3, r0
 8010e04:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8010e06:	7dfb      	ldrb	r3, [r7, #23]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d002      	beq.n	8010e12 <USBH_CtlReq+0x54>
 8010e0c:	7dfb      	ldrb	r3, [r7, #23]
 8010e0e:	2b03      	cmp	r3, #3
 8010e10:	d106      	bne.n	8010e20 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	2201      	movs	r2, #1
 8010e16:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	761a      	strb	r2, [r3, #24]
      break;
 8010e1e:	e005      	b.n	8010e2c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8010e20:	7dfb      	ldrb	r3, [r7, #23]
 8010e22:	2b02      	cmp	r3, #2
 8010e24:	d102      	bne.n	8010e2c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	2201      	movs	r2, #1
 8010e2a:	709a      	strb	r2, [r3, #2]
      break;
 8010e2c:	bf00      	nop
  }
  return status;
 8010e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e30:	4618      	mov	r0, r3
 8010e32:	3718      	adds	r7, #24
 8010e34:	46bd      	mov	sp, r7
 8010e36:	bd80      	pop	{r7, pc}

08010e38 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	b086      	sub	sp, #24
 8010e3c:	af02      	add	r7, sp, #8
 8010e3e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8010e40:	2301      	movs	r3, #1
 8010e42:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010e44:	2300      	movs	r3, #0
 8010e46:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	7e1b      	ldrb	r3, [r3, #24]
 8010e4c:	3b01      	subs	r3, #1
 8010e4e:	2b0a      	cmp	r3, #10
 8010e50:	f200 8160 	bhi.w	8011114 <USBH_HandleControl+0x2dc>
 8010e54:	a201      	add	r2, pc, #4	; (adr r2, 8010e5c <USBH_HandleControl+0x24>)
 8010e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e5a:	bf00      	nop
 8010e5c:	08010e89 	.word	0x08010e89
 8010e60:	08010ea3 	.word	0x08010ea3
 8010e64:	08010f0d 	.word	0x08010f0d
 8010e68:	08010f37 	.word	0x08010f37
 8010e6c:	08010f6f 	.word	0x08010f6f
 8010e70:	08010f9d 	.word	0x08010f9d
 8010e74:	08010fef 	.word	0x08010fef
 8010e78:	08011015 	.word	0x08011015
 8010e7c:	08011051 	.word	0x08011051
 8010e80:	0801107b 	.word	0x0801107b
 8010e84:	080110b9 	.word	0x080110b9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	f103 0110 	add.w	r1, r3, #16
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	795b      	ldrb	r3, [r3, #5]
 8010e92:	461a      	mov	r2, r3
 8010e94:	6878      	ldr	r0, [r7, #4]
 8010e96:	f000 f94d 	bl	8011134 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	2202      	movs	r2, #2
 8010e9e:	761a      	strb	r2, [r3, #24]
      break;
 8010ea0:	e143      	b.n	801112a <USBH_HandleControl+0x2f2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	795b      	ldrb	r3, [r3, #5]
 8010ea6:	4619      	mov	r1, r3
 8010ea8:	6878      	ldr	r0, [r7, #4]
 8010eaa:	f00b fb2b 	bl	801c504 <USBH_LL_GetURBState>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8010eb2:	7bbb      	ldrb	r3, [r7, #14]
 8010eb4:	2b01      	cmp	r3, #1
 8010eb6:	d11e      	bne.n	8010ef6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	7c1b      	ldrb	r3, [r3, #16]
 8010ebc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010ec0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	8adb      	ldrh	r3, [r3, #22]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d00a      	beq.n	8010ee0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8010eca:	7b7b      	ldrb	r3, [r7, #13]
 8010ecc:	2b80      	cmp	r3, #128	; 0x80
 8010ece:	d103      	bne.n	8010ed8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	2203      	movs	r2, #3
 8010ed4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8010ed6:	e11f      	b.n	8011118 <USBH_HandleControl+0x2e0>
            phost->Control.state = CTRL_DATA_OUT;
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	2205      	movs	r2, #5
 8010edc:	761a      	strb	r2, [r3, #24]
      break;
 8010ede:	e11b      	b.n	8011118 <USBH_HandleControl+0x2e0>
          if (direction == USB_D2H)
 8010ee0:	7b7b      	ldrb	r3, [r7, #13]
 8010ee2:	2b80      	cmp	r3, #128	; 0x80
 8010ee4:	d103      	bne.n	8010eee <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	2209      	movs	r2, #9
 8010eea:	761a      	strb	r2, [r3, #24]
      break;
 8010eec:	e114      	b.n	8011118 <USBH_HandleControl+0x2e0>
            phost->Control.state = CTRL_STATUS_IN;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	2207      	movs	r2, #7
 8010ef2:	761a      	strb	r2, [r3, #24]
      break;
 8010ef4:	e110      	b.n	8011118 <USBH_HandleControl+0x2e0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8010ef6:	7bbb      	ldrb	r3, [r7, #14]
 8010ef8:	2b04      	cmp	r3, #4
 8010efa:	d003      	beq.n	8010f04 <USBH_HandleControl+0xcc>
 8010efc:	7bbb      	ldrb	r3, [r7, #14]
 8010efe:	2b02      	cmp	r3, #2
 8010f00:	f040 810a 	bne.w	8011118 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	220b      	movs	r2, #11
 8010f08:	761a      	strb	r2, [r3, #24]
      break;
 8010f0a:	e105      	b.n	8011118 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8010f0c:	687a      	ldr	r2, [r7, #4]
 8010f0e:	f643 2304 	movw	r3, #14852	; 0x3a04
 8010f12:	4413      	add	r3, r2
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	b29a      	uxth	r2, r3
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	6899      	ldr	r1, [r3, #8]
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	899a      	ldrh	r2, [r3, #12]
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	791b      	ldrb	r3, [r3, #4]
 8010f28:	6878      	ldr	r0, [r7, #4]
 8010f2a:	f000 f944 	bl	80111b6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	2204      	movs	r2, #4
 8010f32:	761a      	strb	r2, [r3, #24]
      break;
 8010f34:	e0f9      	b.n	801112a <USBH_HandleControl+0x2f2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	791b      	ldrb	r3, [r3, #4]
 8010f3a:	4619      	mov	r1, r3
 8010f3c:	6878      	ldr	r0, [r7, #4]
 8010f3e:	f00b fae1 	bl	801c504 <USBH_LL_GetURBState>
 8010f42:	4603      	mov	r3, r0
 8010f44:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8010f46:	7bbb      	ldrb	r3, [r7, #14]
 8010f48:	2b01      	cmp	r3, #1
 8010f4a:	d102      	bne.n	8010f52 <USBH_HandleControl+0x11a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	2209      	movs	r2, #9
 8010f50:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8010f52:	7bbb      	ldrb	r3, [r7, #14]
 8010f54:	2b05      	cmp	r3, #5
 8010f56:	d102      	bne.n	8010f5e <USBH_HandleControl+0x126>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8010f58:	2303      	movs	r3, #3
 8010f5a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8010f5c:	e0de      	b.n	801111c <USBH_HandleControl+0x2e4>
        if (URB_Status == USBH_URB_ERROR)
 8010f5e:	7bbb      	ldrb	r3, [r7, #14]
 8010f60:	2b04      	cmp	r3, #4
 8010f62:	f040 80db 	bne.w	801111c <USBH_HandleControl+0x2e4>
          phost->Control.state = CTRL_ERROR;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	220b      	movs	r2, #11
 8010f6a:	761a      	strb	r2, [r3, #24]
      break;
 8010f6c:	e0d6      	b.n	801111c <USBH_HandleControl+0x2e4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	6899      	ldr	r1, [r3, #8]
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	899a      	ldrh	r2, [r3, #12]
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	795b      	ldrb	r3, [r3, #5]
 8010f7a:	2001      	movs	r0, #1
 8010f7c:	9000      	str	r0, [sp, #0]
 8010f7e:	6878      	ldr	r0, [r7, #4]
 8010f80:	f000 f8f2 	bl	8011168 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8010f84:	687a      	ldr	r2, [r7, #4]
 8010f86:	f643 2304 	movw	r3, #14852	; 0x3a04
 8010f8a:	4413      	add	r3, r2
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	b29a      	uxth	r2, r3
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	2206      	movs	r2, #6
 8010f98:	761a      	strb	r2, [r3, #24]
      break;
 8010f9a:	e0c6      	b.n	801112a <USBH_HandleControl+0x2f2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	795b      	ldrb	r3, [r3, #5]
 8010fa0:	4619      	mov	r1, r3
 8010fa2:	6878      	ldr	r0, [r7, #4]
 8010fa4:	f00b faae 	bl	801c504 <USBH_LL_GetURBState>
 8010fa8:	4603      	mov	r3, r0
 8010faa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010fac:	7bbb      	ldrb	r3, [r7, #14]
 8010fae:	2b01      	cmp	r3, #1
 8010fb0:	d103      	bne.n	8010fba <USBH_HandleControl+0x182>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	2207      	movs	r2, #7
 8010fb6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8010fb8:	e0b2      	b.n	8011120 <USBH_HandleControl+0x2e8>
      else if (URB_Status == USBH_URB_STALL)
 8010fba:	7bbb      	ldrb	r3, [r7, #14]
 8010fbc:	2b05      	cmp	r3, #5
 8010fbe:	d105      	bne.n	8010fcc <USBH_HandleControl+0x194>
        phost->Control.state = CTRL_STALLED;
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	220c      	movs	r2, #12
 8010fc4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8010fc6:	2303      	movs	r3, #3
 8010fc8:	73fb      	strb	r3, [r7, #15]
      break;
 8010fca:	e0a9      	b.n	8011120 <USBH_HandleControl+0x2e8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010fcc:	7bbb      	ldrb	r3, [r7, #14]
 8010fce:	2b02      	cmp	r3, #2
 8010fd0:	d103      	bne.n	8010fda <USBH_HandleControl+0x1a2>
        phost->Control.state = CTRL_DATA_OUT;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	2205      	movs	r2, #5
 8010fd6:	761a      	strb	r2, [r3, #24]
      break;
 8010fd8:	e0a2      	b.n	8011120 <USBH_HandleControl+0x2e8>
        if (URB_Status == USBH_URB_ERROR)
 8010fda:	7bbb      	ldrb	r3, [r7, #14]
 8010fdc:	2b04      	cmp	r3, #4
 8010fde:	f040 809f 	bne.w	8011120 <USBH_HandleControl+0x2e8>
          phost->Control.state = CTRL_ERROR;
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	220b      	movs	r2, #11
 8010fe6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8010fe8:	2302      	movs	r3, #2
 8010fea:	73fb      	strb	r3, [r7, #15]
      break;
 8010fec:	e098      	b.n	8011120 <USBH_HandleControl+0x2e8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	791b      	ldrb	r3, [r3, #4]
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	2100      	movs	r1, #0
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	f000 f8dd 	bl	80111b6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010ffc:	687a      	ldr	r2, [r7, #4]
 8010ffe:	f643 2304 	movw	r3, #14852	; 0x3a04
 8011002:	4413      	add	r3, r2
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	b29a      	uxth	r2, r3
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	2208      	movs	r2, #8
 8011010:	761a      	strb	r2, [r3, #24]

      break;
 8011012:	e08a      	b.n	801112a <USBH_HandleControl+0x2f2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	791b      	ldrb	r3, [r3, #4]
 8011018:	4619      	mov	r1, r3
 801101a:	6878      	ldr	r0, [r7, #4]
 801101c:	f00b fa72 	bl	801c504 <USBH_LL_GetURBState>
 8011020:	4603      	mov	r3, r0
 8011022:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8011024:	7bbb      	ldrb	r3, [r7, #14]
 8011026:	2b01      	cmp	r3, #1
 8011028:	d105      	bne.n	8011036 <USBH_HandleControl+0x1fe>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	220d      	movs	r2, #13
 801102e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8011030:	2300      	movs	r3, #0
 8011032:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8011034:	e076      	b.n	8011124 <USBH_HandleControl+0x2ec>
      else if (URB_Status == USBH_URB_ERROR)
 8011036:	7bbb      	ldrb	r3, [r7, #14]
 8011038:	2b04      	cmp	r3, #4
 801103a:	d103      	bne.n	8011044 <USBH_HandleControl+0x20c>
        phost->Control.state = CTRL_ERROR;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	220b      	movs	r2, #11
 8011040:	761a      	strb	r2, [r3, #24]
      break;
 8011042:	e06f      	b.n	8011124 <USBH_HandleControl+0x2ec>
        if (URB_Status == USBH_URB_STALL)
 8011044:	7bbb      	ldrb	r3, [r7, #14]
 8011046:	2b05      	cmp	r3, #5
 8011048:	d16c      	bne.n	8011124 <USBH_HandleControl+0x2ec>
          status = USBH_NOT_SUPPORTED;
 801104a:	2303      	movs	r3, #3
 801104c:	73fb      	strb	r3, [r7, #15]
      break;
 801104e:	e069      	b.n	8011124 <USBH_HandleControl+0x2ec>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	795b      	ldrb	r3, [r3, #5]
 8011054:	2201      	movs	r2, #1
 8011056:	9200      	str	r2, [sp, #0]
 8011058:	2200      	movs	r2, #0
 801105a:	2100      	movs	r1, #0
 801105c:	6878      	ldr	r0, [r7, #4]
 801105e:	f000 f883 	bl	8011168 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8011062:	687a      	ldr	r2, [r7, #4]
 8011064:	f643 2304 	movw	r3, #14852	; 0x3a04
 8011068:	4413      	add	r3, r2
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	b29a      	uxth	r2, r3
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	220a      	movs	r2, #10
 8011076:	761a      	strb	r2, [r3, #24]
      break;
 8011078:	e057      	b.n	801112a <USBH_HandleControl+0x2f2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	795b      	ldrb	r3, [r3, #5]
 801107e:	4619      	mov	r1, r3
 8011080:	6878      	ldr	r0, [r7, #4]
 8011082:	f00b fa3f 	bl	801c504 <USBH_LL_GetURBState>
 8011086:	4603      	mov	r3, r0
 8011088:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 801108a:	7bbb      	ldrb	r3, [r7, #14]
 801108c:	2b01      	cmp	r3, #1
 801108e:	d105      	bne.n	801109c <USBH_HandleControl+0x264>
      {
        status = USBH_OK;
 8011090:	2300      	movs	r3, #0
 8011092:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	220d      	movs	r2, #13
 8011098:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801109a:	e045      	b.n	8011128 <USBH_HandleControl+0x2f0>
      else if (URB_Status == USBH_URB_NOTREADY)
 801109c:	7bbb      	ldrb	r3, [r7, #14]
 801109e:	2b02      	cmp	r3, #2
 80110a0:	d103      	bne.n	80110aa <USBH_HandleControl+0x272>
        phost->Control.state = CTRL_STATUS_OUT;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	2209      	movs	r2, #9
 80110a6:	761a      	strb	r2, [r3, #24]
      break;
 80110a8:	e03e      	b.n	8011128 <USBH_HandleControl+0x2f0>
        if (URB_Status == USBH_URB_ERROR)
 80110aa:	7bbb      	ldrb	r3, [r7, #14]
 80110ac:	2b04      	cmp	r3, #4
 80110ae:	d13b      	bne.n	8011128 <USBH_HandleControl+0x2f0>
          phost->Control.state = CTRL_ERROR;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	220b      	movs	r2, #11
 80110b4:	761a      	strb	r2, [r3, #24]
      break;
 80110b6:	e037      	b.n	8011128 <USBH_HandleControl+0x2f0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	7e5b      	ldrb	r3, [r3, #25]
 80110bc:	3301      	adds	r3, #1
 80110be:	b2da      	uxtb	r2, r3
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	765a      	strb	r2, [r3, #25]
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	7e5b      	ldrb	r3, [r3, #25]
 80110c8:	2b02      	cmp	r3, #2
 80110ca:	d806      	bhi.n	80110da <USBH_HandleControl+0x2a2>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	2201      	movs	r2, #1
 80110d0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	2201      	movs	r2, #1
 80110d6:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80110d8:	e027      	b.n	801112a <USBH_HandleControl+0x2f2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80110da:	687a      	ldr	r2, [r7, #4]
 80110dc:	f643 2314 	movw	r3, #14868	; 0x3a14
 80110e0:	4413      	add	r3, r2
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	2106      	movs	r1, #6
 80110e6:	6878      	ldr	r0, [r7, #4]
 80110e8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	2200      	movs	r2, #0
 80110ee:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	795b      	ldrb	r3, [r3, #5]
 80110f4:	4619      	mov	r1, r3
 80110f6:	6878      	ldr	r0, [r7, #4]
 80110f8:	f000 f911 	bl	801131e <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	791b      	ldrb	r3, [r3, #4]
 8011100:	4619      	mov	r1, r3
 8011102:	6878      	ldr	r0, [r7, #4]
 8011104:	f000 f90b 	bl	801131e <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	2200      	movs	r2, #0
 801110c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 801110e:	2302      	movs	r3, #2
 8011110:	73fb      	strb	r3, [r7, #15]
      break;
 8011112:	e00a      	b.n	801112a <USBH_HandleControl+0x2f2>

    default:
      break;
 8011114:	bf00      	nop
 8011116:	e008      	b.n	801112a <USBH_HandleControl+0x2f2>
      break;
 8011118:	bf00      	nop
 801111a:	e006      	b.n	801112a <USBH_HandleControl+0x2f2>
      break;
 801111c:	bf00      	nop
 801111e:	e004      	b.n	801112a <USBH_HandleControl+0x2f2>
      break;
 8011120:	bf00      	nop
 8011122:	e002      	b.n	801112a <USBH_HandleControl+0x2f2>
      break;
 8011124:	bf00      	nop
 8011126:	e000      	b.n	801112a <USBH_HandleControl+0x2f2>
      break;
 8011128:	bf00      	nop
  }

  return status;
 801112a:	7bfb      	ldrb	r3, [r7, #15]
}
 801112c:	4618      	mov	r0, r3
 801112e:	3710      	adds	r7, #16
 8011130:	46bd      	mov	sp, r7
 8011132:	bd80      	pop	{r7, pc}

08011134 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8011134:	b580      	push	{r7, lr}
 8011136:	b088      	sub	sp, #32
 8011138:	af04      	add	r7, sp, #16
 801113a:	60f8      	str	r0, [r7, #12]
 801113c:	60b9      	str	r1, [r7, #8]
 801113e:	4613      	mov	r3, r2
 8011140:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8011142:	79f9      	ldrb	r1, [r7, #7]
 8011144:	2300      	movs	r3, #0
 8011146:	9303      	str	r3, [sp, #12]
 8011148:	2308      	movs	r3, #8
 801114a:	9302      	str	r3, [sp, #8]
 801114c:	68bb      	ldr	r3, [r7, #8]
 801114e:	9301      	str	r3, [sp, #4]
 8011150:	2300      	movs	r3, #0
 8011152:	9300      	str	r3, [sp, #0]
 8011154:	2300      	movs	r3, #0
 8011156:	2200      	movs	r2, #0
 8011158:	68f8      	ldr	r0, [r7, #12]
 801115a:	f00b f9a0 	bl	801c49e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 801115e:	2300      	movs	r3, #0
}
 8011160:	4618      	mov	r0, r3
 8011162:	3710      	adds	r7, #16
 8011164:	46bd      	mov	sp, r7
 8011166:	bd80      	pop	{r7, pc}

08011168 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b088      	sub	sp, #32
 801116c:	af04      	add	r7, sp, #16
 801116e:	60f8      	str	r0, [r7, #12]
 8011170:	60b9      	str	r1, [r7, #8]
 8011172:	4611      	mov	r1, r2
 8011174:	461a      	mov	r2, r3
 8011176:	460b      	mov	r3, r1
 8011178:	80fb      	strh	r3, [r7, #6]
 801117a:	4613      	mov	r3, r2
 801117c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801117e:	68fa      	ldr	r2, [r7, #12]
 8011180:	f643 135d 	movw	r3, #14685	; 0x395d
 8011184:	4413      	add	r3, r2
 8011186:	781b      	ldrb	r3, [r3, #0]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d001      	beq.n	8011190 <USBH_CtlSendData+0x28>
  {
    do_ping = 0U;
 801118c:	2300      	movs	r3, #0
 801118e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8011190:	7979      	ldrb	r1, [r7, #5]
 8011192:	7e3b      	ldrb	r3, [r7, #24]
 8011194:	9303      	str	r3, [sp, #12]
 8011196:	88fb      	ldrh	r3, [r7, #6]
 8011198:	9302      	str	r3, [sp, #8]
 801119a:	68bb      	ldr	r3, [r7, #8]
 801119c:	9301      	str	r3, [sp, #4]
 801119e:	2301      	movs	r3, #1
 80111a0:	9300      	str	r3, [sp, #0]
 80111a2:	2300      	movs	r3, #0
 80111a4:	2200      	movs	r2, #0
 80111a6:	68f8      	ldr	r0, [r7, #12]
 80111a8:	f00b f979 	bl	801c49e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80111ac:	2300      	movs	r3, #0
}
 80111ae:	4618      	mov	r0, r3
 80111b0:	3710      	adds	r7, #16
 80111b2:	46bd      	mov	sp, r7
 80111b4:	bd80      	pop	{r7, pc}

080111b6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80111b6:	b580      	push	{r7, lr}
 80111b8:	b088      	sub	sp, #32
 80111ba:	af04      	add	r7, sp, #16
 80111bc:	60f8      	str	r0, [r7, #12]
 80111be:	60b9      	str	r1, [r7, #8]
 80111c0:	4611      	mov	r1, r2
 80111c2:	461a      	mov	r2, r3
 80111c4:	460b      	mov	r3, r1
 80111c6:	80fb      	strh	r3, [r7, #6]
 80111c8:	4613      	mov	r3, r2
 80111ca:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80111cc:	7979      	ldrb	r1, [r7, #5]
 80111ce:	2300      	movs	r3, #0
 80111d0:	9303      	str	r3, [sp, #12]
 80111d2:	88fb      	ldrh	r3, [r7, #6]
 80111d4:	9302      	str	r3, [sp, #8]
 80111d6:	68bb      	ldr	r3, [r7, #8]
 80111d8:	9301      	str	r3, [sp, #4]
 80111da:	2301      	movs	r3, #1
 80111dc:	9300      	str	r3, [sp, #0]
 80111de:	2300      	movs	r3, #0
 80111e0:	2201      	movs	r2, #1
 80111e2:	68f8      	ldr	r0, [r7, #12]
 80111e4:	f00b f95b 	bl	801c49e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80111e8:	2300      	movs	r3, #0

}
 80111ea:	4618      	mov	r0, r3
 80111ec:	3710      	adds	r7, #16
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}

080111f2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80111f2:	b580      	push	{r7, lr}
 80111f4:	b088      	sub	sp, #32
 80111f6:	af04      	add	r7, sp, #16
 80111f8:	60f8      	str	r0, [r7, #12]
 80111fa:	60b9      	str	r1, [r7, #8]
 80111fc:	4611      	mov	r1, r2
 80111fe:	461a      	mov	r2, r3
 8011200:	460b      	mov	r3, r1
 8011202:	80fb      	strh	r3, [r7, #6]
 8011204:	4613      	mov	r3, r2
 8011206:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8011208:	68fa      	ldr	r2, [r7, #12]
 801120a:	f643 135d 	movw	r3, #14685	; 0x395d
 801120e:	4413      	add	r3, r2
 8011210:	781b      	ldrb	r3, [r3, #0]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d001      	beq.n	801121a <USBH_BulkSendData+0x28>
  {
    do_ping = 0U;
 8011216:	2300      	movs	r3, #0
 8011218:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801121a:	7979      	ldrb	r1, [r7, #5]
 801121c:	7e3b      	ldrb	r3, [r7, #24]
 801121e:	9303      	str	r3, [sp, #12]
 8011220:	88fb      	ldrh	r3, [r7, #6]
 8011222:	9302      	str	r3, [sp, #8]
 8011224:	68bb      	ldr	r3, [r7, #8]
 8011226:	9301      	str	r3, [sp, #4]
 8011228:	2301      	movs	r3, #1
 801122a:	9300      	str	r3, [sp, #0]
 801122c:	2302      	movs	r3, #2
 801122e:	2200      	movs	r2, #0
 8011230:	68f8      	ldr	r0, [r7, #12]
 8011232:	f00b f934 	bl	801c49e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8011236:	2300      	movs	r3, #0
}
 8011238:	4618      	mov	r0, r3
 801123a:	3710      	adds	r7, #16
 801123c:	46bd      	mov	sp, r7
 801123e:	bd80      	pop	{r7, pc}

08011240 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b088      	sub	sp, #32
 8011244:	af04      	add	r7, sp, #16
 8011246:	60f8      	str	r0, [r7, #12]
 8011248:	60b9      	str	r1, [r7, #8]
 801124a:	4611      	mov	r1, r2
 801124c:	461a      	mov	r2, r3
 801124e:	460b      	mov	r3, r1
 8011250:	80fb      	strh	r3, [r7, #6]
 8011252:	4613      	mov	r3, r2
 8011254:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8011256:	7979      	ldrb	r1, [r7, #5]
 8011258:	2300      	movs	r3, #0
 801125a:	9303      	str	r3, [sp, #12]
 801125c:	88fb      	ldrh	r3, [r7, #6]
 801125e:	9302      	str	r3, [sp, #8]
 8011260:	68bb      	ldr	r3, [r7, #8]
 8011262:	9301      	str	r3, [sp, #4]
 8011264:	2301      	movs	r3, #1
 8011266:	9300      	str	r3, [sp, #0]
 8011268:	2302      	movs	r3, #2
 801126a:	2201      	movs	r2, #1
 801126c:	68f8      	ldr	r0, [r7, #12]
 801126e:	f00b f916 	bl	801c49e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8011272:	2300      	movs	r3, #0
}
 8011274:	4618      	mov	r0, r3
 8011276:	3710      	adds	r7, #16
 8011278:	46bd      	mov	sp, r7
 801127a:	bd80      	pop	{r7, pc}

0801127c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b086      	sub	sp, #24
 8011280:	af04      	add	r7, sp, #16
 8011282:	6078      	str	r0, [r7, #4]
 8011284:	4608      	mov	r0, r1
 8011286:	4611      	mov	r1, r2
 8011288:	461a      	mov	r2, r3
 801128a:	4603      	mov	r3, r0
 801128c:	70fb      	strb	r3, [r7, #3]
 801128e:	460b      	mov	r3, r1
 8011290:	70bb      	strb	r3, [r7, #2]
 8011292:	4613      	mov	r3, r2
 8011294:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8011296:	7878      	ldrb	r0, [r7, #1]
 8011298:	78ba      	ldrb	r2, [r7, #2]
 801129a:	78f9      	ldrb	r1, [r7, #3]
 801129c:	8b3b      	ldrh	r3, [r7, #24]
 801129e:	9302      	str	r3, [sp, #8]
 80112a0:	7d3b      	ldrb	r3, [r7, #20]
 80112a2:	9301      	str	r3, [sp, #4]
 80112a4:	7c3b      	ldrb	r3, [r7, #16]
 80112a6:	9300      	str	r3, [sp, #0]
 80112a8:	4603      	mov	r3, r0
 80112aa:	6878      	ldr	r0, [r7, #4]
 80112ac:	f00b f8a5 	bl	801c3fa <USBH_LL_OpenPipe>

  return USBH_OK;
 80112b0:	2300      	movs	r3, #0
}
 80112b2:	4618      	mov	r0, r3
 80112b4:	3708      	adds	r7, #8
 80112b6:	46bd      	mov	sp, r7
 80112b8:	bd80      	pop	{r7, pc}

080112ba <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80112ba:	b580      	push	{r7, lr}
 80112bc:	b082      	sub	sp, #8
 80112be:	af00      	add	r7, sp, #0
 80112c0:	6078      	str	r0, [r7, #4]
 80112c2:	460b      	mov	r3, r1
 80112c4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80112c6:	78fb      	ldrb	r3, [r7, #3]
 80112c8:	4619      	mov	r1, r3
 80112ca:	6878      	ldr	r0, [r7, #4]
 80112cc:	f00b f8c6 	bl	801c45c <USBH_LL_ClosePipe>

  return USBH_OK;
 80112d0:	2300      	movs	r3, #0
}
 80112d2:	4618      	mov	r0, r3
 80112d4:	3708      	adds	r7, #8
 80112d6:	46bd      	mov	sp, r7
 80112d8:	bd80      	pop	{r7, pc}

080112da <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80112da:	b580      	push	{r7, lr}
 80112dc:	b084      	sub	sp, #16
 80112de:	af00      	add	r7, sp, #0
 80112e0:	6078      	str	r0, [r7, #4]
 80112e2:	460b      	mov	r3, r1
 80112e4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80112e6:	6878      	ldr	r0, [r7, #4]
 80112e8:	f000 f839 	bl	801135e <USBH_GetFreePipe>
 80112ec:	4603      	mov	r3, r0
 80112ee:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80112f0:	89fb      	ldrh	r3, [r7, #14]
 80112f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80112f6:	4293      	cmp	r3, r2
 80112f8:	d00b      	beq.n	8011312 <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80112fa:	78fa      	ldrb	r2, [r7, #3]
 80112fc:	89fb      	ldrh	r3, [r7, #14]
 80112fe:	f003 030f 	and.w	r3, r3, #15
 8011302:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011306:	6879      	ldr	r1, [r7, #4]
 8011308:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 801130c:	009b      	lsls	r3, r3, #2
 801130e:	440b      	add	r3, r1
 8011310:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8011312:	89fb      	ldrh	r3, [r7, #14]
 8011314:	b2db      	uxtb	r3, r3
}
 8011316:	4618      	mov	r0, r3
 8011318:	3710      	adds	r7, #16
 801131a:	46bd      	mov	sp, r7
 801131c:	bd80      	pop	{r7, pc}

0801131e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 801131e:	b480      	push	{r7}
 8011320:	b083      	sub	sp, #12
 8011322:	af00      	add	r7, sp, #0
 8011324:	6078      	str	r0, [r7, #4]
 8011326:	460b      	mov	r3, r1
 8011328:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 801132a:	78fb      	ldrb	r3, [r7, #3]
 801132c:	2b0a      	cmp	r3, #10
 801132e:	d80f      	bhi.n	8011350 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8011330:	78fb      	ldrb	r3, [r7, #3]
 8011332:	687a      	ldr	r2, [r7, #4]
 8011334:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 8011338:	009b      	lsls	r3, r3, #2
 801133a:	4413      	add	r3, r2
 801133c:	685a      	ldr	r2, [r3, #4]
 801133e:	78fb      	ldrb	r3, [r7, #3]
 8011340:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8011344:	6879      	ldr	r1, [r7, #4]
 8011346:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 801134a:	009b      	lsls	r3, r3, #2
 801134c:	440b      	add	r3, r1
 801134e:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8011350:	2300      	movs	r3, #0
}
 8011352:	4618      	mov	r0, r3
 8011354:	370c      	adds	r7, #12
 8011356:	46bd      	mov	sp, r7
 8011358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135c:	4770      	bx	lr

0801135e <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 801135e:	b480      	push	{r7}
 8011360:	b085      	sub	sp, #20
 8011362:	af00      	add	r7, sp, #0
 8011364:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8011366:	2300      	movs	r3, #0
 8011368:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 801136a:	2300      	movs	r3, #0
 801136c:	73fb      	strb	r3, [r7, #15]
 801136e:	e010      	b.n	8011392 <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8011370:	7bfb      	ldrb	r3, [r7, #15]
 8011372:	687a      	ldr	r2, [r7, #4]
 8011374:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 8011378:	009b      	lsls	r3, r3, #2
 801137a:	4413      	add	r3, r2
 801137c:	685b      	ldr	r3, [r3, #4]
 801137e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011382:	2b00      	cmp	r3, #0
 8011384:	d102      	bne.n	801138c <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 8011386:	7bfb      	ldrb	r3, [r7, #15]
 8011388:	b29b      	uxth	r3, r3
 801138a:	e007      	b.n	801139c <USBH_GetFreePipe+0x3e>
  for (idx = 0U ; idx < 11U ; idx++)
 801138c:	7bfb      	ldrb	r3, [r7, #15]
 801138e:	3301      	adds	r3, #1
 8011390:	73fb      	strb	r3, [r7, #15]
 8011392:	7bfb      	ldrb	r3, [r7, #15]
 8011394:	2b0a      	cmp	r3, #10
 8011396:	d9eb      	bls.n	8011370 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8011398:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 801139c:	4618      	mov	r0, r3
 801139e:	3714      	adds	r7, #20
 80113a0:	46bd      	mov	sp, r7
 80113a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a6:	4770      	bx	lr

080113a8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80113a8:	b480      	push	{r7}
 80113aa:	b085      	sub	sp, #20
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	4603      	mov	r3, r0
 80113b0:	6039      	str	r1, [r7, #0]
 80113b2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80113b4:	88fb      	ldrh	r3, [r7, #6]
 80113b6:	2b7f      	cmp	r3, #127	; 0x7f
 80113b8:	d802      	bhi.n	80113c0 <ff_convert+0x18>
		c = chr;
 80113ba:	88fb      	ldrh	r3, [r7, #6]
 80113bc:	81fb      	strh	r3, [r7, #14]
 80113be:	e025      	b.n	801140c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d00b      	beq.n	80113de <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80113c6:	88fb      	ldrh	r3, [r7, #6]
 80113c8:	2bff      	cmp	r3, #255	; 0xff
 80113ca:	d805      	bhi.n	80113d8 <ff_convert+0x30>
 80113cc:	88fb      	ldrh	r3, [r7, #6]
 80113ce:	3b80      	subs	r3, #128	; 0x80
 80113d0:	4a12      	ldr	r2, [pc, #72]	; (801141c <ff_convert+0x74>)
 80113d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80113d6:	e000      	b.n	80113da <ff_convert+0x32>
 80113d8:	2300      	movs	r3, #0
 80113da:	81fb      	strh	r3, [r7, #14]
 80113dc:	e016      	b.n	801140c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80113de:	2300      	movs	r3, #0
 80113e0:	81fb      	strh	r3, [r7, #14]
 80113e2:	e009      	b.n	80113f8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80113e4:	89fb      	ldrh	r3, [r7, #14]
 80113e6:	4a0d      	ldr	r2, [pc, #52]	; (801141c <ff_convert+0x74>)
 80113e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80113ec:	88fa      	ldrh	r2, [r7, #6]
 80113ee:	429a      	cmp	r2, r3
 80113f0:	d006      	beq.n	8011400 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80113f2:	89fb      	ldrh	r3, [r7, #14]
 80113f4:	3301      	adds	r3, #1
 80113f6:	81fb      	strh	r3, [r7, #14]
 80113f8:	89fb      	ldrh	r3, [r7, #14]
 80113fa:	2b7f      	cmp	r3, #127	; 0x7f
 80113fc:	d9f2      	bls.n	80113e4 <ff_convert+0x3c>
 80113fe:	e000      	b.n	8011402 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8011400:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8011402:	89fb      	ldrh	r3, [r7, #14]
 8011404:	3380      	adds	r3, #128	; 0x80
 8011406:	b29b      	uxth	r3, r3
 8011408:	b2db      	uxtb	r3, r3
 801140a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801140c:	89fb      	ldrh	r3, [r7, #14]
}
 801140e:	4618      	mov	r0, r3
 8011410:	3714      	adds	r7, #20
 8011412:	46bd      	mov	sp, r7
 8011414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011418:	4770      	bx	lr
 801141a:	bf00      	nop
 801141c:	0802a24c 	.word	0x0802a24c

08011420 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8011420:	b480      	push	{r7}
 8011422:	b087      	sub	sp, #28
 8011424:	af00      	add	r7, sp, #0
 8011426:	4603      	mov	r3, r0
 8011428:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801142a:	88fb      	ldrh	r3, [r7, #6]
 801142c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011430:	d201      	bcs.n	8011436 <ff_wtoupper+0x16>
 8011432:	4b3e      	ldr	r3, [pc, #248]	; (801152c <ff_wtoupper+0x10c>)
 8011434:	e000      	b.n	8011438 <ff_wtoupper+0x18>
 8011436:	4b3e      	ldr	r3, [pc, #248]	; (8011530 <ff_wtoupper+0x110>)
 8011438:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801143a:	697b      	ldr	r3, [r7, #20]
 801143c:	1c9a      	adds	r2, r3, #2
 801143e:	617a      	str	r2, [r7, #20]
 8011440:	881b      	ldrh	r3, [r3, #0]
 8011442:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8011444:	8a7b      	ldrh	r3, [r7, #18]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d068      	beq.n	801151c <ff_wtoupper+0xfc>
 801144a:	88fa      	ldrh	r2, [r7, #6]
 801144c:	8a7b      	ldrh	r3, [r7, #18]
 801144e:	429a      	cmp	r2, r3
 8011450:	d364      	bcc.n	801151c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8011452:	697b      	ldr	r3, [r7, #20]
 8011454:	1c9a      	adds	r2, r3, #2
 8011456:	617a      	str	r2, [r7, #20]
 8011458:	881b      	ldrh	r3, [r3, #0]
 801145a:	823b      	strh	r3, [r7, #16]
 801145c:	8a3b      	ldrh	r3, [r7, #16]
 801145e:	0a1b      	lsrs	r3, r3, #8
 8011460:	81fb      	strh	r3, [r7, #14]
 8011462:	8a3b      	ldrh	r3, [r7, #16]
 8011464:	b2db      	uxtb	r3, r3
 8011466:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8011468:	88fa      	ldrh	r2, [r7, #6]
 801146a:	8a79      	ldrh	r1, [r7, #18]
 801146c:	8a3b      	ldrh	r3, [r7, #16]
 801146e:	440b      	add	r3, r1
 8011470:	429a      	cmp	r2, r3
 8011472:	da49      	bge.n	8011508 <ff_wtoupper+0xe8>
			switch (cmd) {
 8011474:	89fb      	ldrh	r3, [r7, #14]
 8011476:	2b08      	cmp	r3, #8
 8011478:	d84f      	bhi.n	801151a <ff_wtoupper+0xfa>
 801147a:	a201      	add	r2, pc, #4	; (adr r2, 8011480 <ff_wtoupper+0x60>)
 801147c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011480:	080114a5 	.word	0x080114a5
 8011484:	080114b7 	.word	0x080114b7
 8011488:	080114cd 	.word	0x080114cd
 801148c:	080114d5 	.word	0x080114d5
 8011490:	080114dd 	.word	0x080114dd
 8011494:	080114e5 	.word	0x080114e5
 8011498:	080114ed 	.word	0x080114ed
 801149c:	080114f5 	.word	0x080114f5
 80114a0:	080114fd 	.word	0x080114fd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80114a4:	88fa      	ldrh	r2, [r7, #6]
 80114a6:	8a7b      	ldrh	r3, [r7, #18]
 80114a8:	1ad3      	subs	r3, r2, r3
 80114aa:	005b      	lsls	r3, r3, #1
 80114ac:	697a      	ldr	r2, [r7, #20]
 80114ae:	4413      	add	r3, r2
 80114b0:	881b      	ldrh	r3, [r3, #0]
 80114b2:	80fb      	strh	r3, [r7, #6]
 80114b4:	e027      	b.n	8011506 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80114b6:	88fa      	ldrh	r2, [r7, #6]
 80114b8:	8a7b      	ldrh	r3, [r7, #18]
 80114ba:	1ad3      	subs	r3, r2, r3
 80114bc:	b29b      	uxth	r3, r3
 80114be:	f003 0301 	and.w	r3, r3, #1
 80114c2:	b29b      	uxth	r3, r3
 80114c4:	88fa      	ldrh	r2, [r7, #6]
 80114c6:	1ad3      	subs	r3, r2, r3
 80114c8:	80fb      	strh	r3, [r7, #6]
 80114ca:	e01c      	b.n	8011506 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80114cc:	88fb      	ldrh	r3, [r7, #6]
 80114ce:	3b10      	subs	r3, #16
 80114d0:	80fb      	strh	r3, [r7, #6]
 80114d2:	e018      	b.n	8011506 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80114d4:	88fb      	ldrh	r3, [r7, #6]
 80114d6:	3b20      	subs	r3, #32
 80114d8:	80fb      	strh	r3, [r7, #6]
 80114da:	e014      	b.n	8011506 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80114dc:	88fb      	ldrh	r3, [r7, #6]
 80114de:	3b30      	subs	r3, #48	; 0x30
 80114e0:	80fb      	strh	r3, [r7, #6]
 80114e2:	e010      	b.n	8011506 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80114e4:	88fb      	ldrh	r3, [r7, #6]
 80114e6:	3b1a      	subs	r3, #26
 80114e8:	80fb      	strh	r3, [r7, #6]
 80114ea:	e00c      	b.n	8011506 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80114ec:	88fb      	ldrh	r3, [r7, #6]
 80114ee:	3308      	adds	r3, #8
 80114f0:	80fb      	strh	r3, [r7, #6]
 80114f2:	e008      	b.n	8011506 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80114f4:	88fb      	ldrh	r3, [r7, #6]
 80114f6:	3b50      	subs	r3, #80	; 0x50
 80114f8:	80fb      	strh	r3, [r7, #6]
 80114fa:	e004      	b.n	8011506 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80114fc:	88fb      	ldrh	r3, [r7, #6]
 80114fe:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8011502:	80fb      	strh	r3, [r7, #6]
 8011504:	bf00      	nop
			}
			break;
 8011506:	e008      	b.n	801151a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8011508:	89fb      	ldrh	r3, [r7, #14]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d195      	bne.n	801143a <ff_wtoupper+0x1a>
 801150e:	8a3b      	ldrh	r3, [r7, #16]
 8011510:	005b      	lsls	r3, r3, #1
 8011512:	697a      	ldr	r2, [r7, #20]
 8011514:	4413      	add	r3, r2
 8011516:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8011518:	e78f      	b.n	801143a <ff_wtoupper+0x1a>
			break;
 801151a:	bf00      	nop
	}

	return chr;
 801151c:	88fb      	ldrh	r3, [r7, #6]
}
 801151e:	4618      	mov	r0, r3
 8011520:	371c      	adds	r7, #28
 8011522:	46bd      	mov	sp, r7
 8011524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011528:	4770      	bx	lr
 801152a:	bf00      	nop
 801152c:	0802a34c 	.word	0x0802a34c
 8011530:	0802a540 	.word	0x0802a540

08011534 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011534:	b580      	push	{r7, lr}
 8011536:	b084      	sub	sp, #16
 8011538:	af00      	add	r7, sp, #0
 801153a:	4603      	mov	r3, r0
 801153c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801153e:	79fb      	ldrb	r3, [r7, #7]
 8011540:	4a08      	ldr	r2, [pc, #32]	; (8011564 <disk_status+0x30>)
 8011542:	009b      	lsls	r3, r3, #2
 8011544:	4413      	add	r3, r2
 8011546:	685b      	ldr	r3, [r3, #4]
 8011548:	685b      	ldr	r3, [r3, #4]
 801154a:	79fa      	ldrb	r2, [r7, #7]
 801154c:	4905      	ldr	r1, [pc, #20]	; (8011564 <disk_status+0x30>)
 801154e:	440a      	add	r2, r1
 8011550:	7a12      	ldrb	r2, [r2, #8]
 8011552:	4610      	mov	r0, r2
 8011554:	4798      	blx	r3
 8011556:	4603      	mov	r3, r0
 8011558:	73fb      	strb	r3, [r7, #15]
  return stat;
 801155a:	7bfb      	ldrb	r3, [r7, #15]
}
 801155c:	4618      	mov	r0, r3
 801155e:	3710      	adds	r7, #16
 8011560:	46bd      	mov	sp, r7
 8011562:	bd80      	pop	{r7, pc}
 8011564:	2400a5f8 	.word	0x2400a5f8

08011568 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b084      	sub	sp, #16
 801156c:	af00      	add	r7, sp, #0
 801156e:	4603      	mov	r3, r0
 8011570:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011572:	2300      	movs	r3, #0
 8011574:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011576:	79fb      	ldrb	r3, [r7, #7]
 8011578:	4a0d      	ldr	r2, [pc, #52]	; (80115b0 <disk_initialize+0x48>)
 801157a:	5cd3      	ldrb	r3, [r2, r3]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d111      	bne.n	80115a4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011580:	79fb      	ldrb	r3, [r7, #7]
 8011582:	4a0b      	ldr	r2, [pc, #44]	; (80115b0 <disk_initialize+0x48>)
 8011584:	2101      	movs	r1, #1
 8011586:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011588:	79fb      	ldrb	r3, [r7, #7]
 801158a:	4a09      	ldr	r2, [pc, #36]	; (80115b0 <disk_initialize+0x48>)
 801158c:	009b      	lsls	r3, r3, #2
 801158e:	4413      	add	r3, r2
 8011590:	685b      	ldr	r3, [r3, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	79fa      	ldrb	r2, [r7, #7]
 8011596:	4906      	ldr	r1, [pc, #24]	; (80115b0 <disk_initialize+0x48>)
 8011598:	440a      	add	r2, r1
 801159a:	7a12      	ldrb	r2, [r2, #8]
 801159c:	4610      	mov	r0, r2
 801159e:	4798      	blx	r3
 80115a0:	4603      	mov	r3, r0
 80115a2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80115a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80115a6:	4618      	mov	r0, r3
 80115a8:	3710      	adds	r7, #16
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bd80      	pop	{r7, pc}
 80115ae:	bf00      	nop
 80115b0:	2400a5f8 	.word	0x2400a5f8

080115b4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80115b4:	b590      	push	{r4, r7, lr}
 80115b6:	b087      	sub	sp, #28
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	60b9      	str	r1, [r7, #8]
 80115bc:	607a      	str	r2, [r7, #4]
 80115be:	603b      	str	r3, [r7, #0]
 80115c0:	4603      	mov	r3, r0
 80115c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80115c4:	7bfb      	ldrb	r3, [r7, #15]
 80115c6:	4a0a      	ldr	r2, [pc, #40]	; (80115f0 <disk_read+0x3c>)
 80115c8:	009b      	lsls	r3, r3, #2
 80115ca:	4413      	add	r3, r2
 80115cc:	685b      	ldr	r3, [r3, #4]
 80115ce:	689c      	ldr	r4, [r3, #8]
 80115d0:	7bfb      	ldrb	r3, [r7, #15]
 80115d2:	4a07      	ldr	r2, [pc, #28]	; (80115f0 <disk_read+0x3c>)
 80115d4:	4413      	add	r3, r2
 80115d6:	7a18      	ldrb	r0, [r3, #8]
 80115d8:	683b      	ldr	r3, [r7, #0]
 80115da:	687a      	ldr	r2, [r7, #4]
 80115dc:	68b9      	ldr	r1, [r7, #8]
 80115de:	47a0      	blx	r4
 80115e0:	4603      	mov	r3, r0
 80115e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80115e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80115e6:	4618      	mov	r0, r3
 80115e8:	371c      	adds	r7, #28
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bd90      	pop	{r4, r7, pc}
 80115ee:	bf00      	nop
 80115f0:	2400a5f8 	.word	0x2400a5f8

080115f4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80115f4:	b590      	push	{r4, r7, lr}
 80115f6:	b087      	sub	sp, #28
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	60b9      	str	r1, [r7, #8]
 80115fc:	607a      	str	r2, [r7, #4]
 80115fe:	603b      	str	r3, [r7, #0]
 8011600:	4603      	mov	r3, r0
 8011602:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011604:	7bfb      	ldrb	r3, [r7, #15]
 8011606:	4a0a      	ldr	r2, [pc, #40]	; (8011630 <disk_write+0x3c>)
 8011608:	009b      	lsls	r3, r3, #2
 801160a:	4413      	add	r3, r2
 801160c:	685b      	ldr	r3, [r3, #4]
 801160e:	68dc      	ldr	r4, [r3, #12]
 8011610:	7bfb      	ldrb	r3, [r7, #15]
 8011612:	4a07      	ldr	r2, [pc, #28]	; (8011630 <disk_write+0x3c>)
 8011614:	4413      	add	r3, r2
 8011616:	7a18      	ldrb	r0, [r3, #8]
 8011618:	683b      	ldr	r3, [r7, #0]
 801161a:	687a      	ldr	r2, [r7, #4]
 801161c:	68b9      	ldr	r1, [r7, #8]
 801161e:	47a0      	blx	r4
 8011620:	4603      	mov	r3, r0
 8011622:	75fb      	strb	r3, [r7, #23]
  return res;
 8011624:	7dfb      	ldrb	r3, [r7, #23]
}
 8011626:	4618      	mov	r0, r3
 8011628:	371c      	adds	r7, #28
 801162a:	46bd      	mov	sp, r7
 801162c:	bd90      	pop	{r4, r7, pc}
 801162e:	bf00      	nop
 8011630:	2400a5f8 	.word	0x2400a5f8

08011634 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b084      	sub	sp, #16
 8011638:	af00      	add	r7, sp, #0
 801163a:	4603      	mov	r3, r0
 801163c:	603a      	str	r2, [r7, #0]
 801163e:	71fb      	strb	r3, [r7, #7]
 8011640:	460b      	mov	r3, r1
 8011642:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011644:	79fb      	ldrb	r3, [r7, #7]
 8011646:	4a09      	ldr	r2, [pc, #36]	; (801166c <disk_ioctl+0x38>)
 8011648:	009b      	lsls	r3, r3, #2
 801164a:	4413      	add	r3, r2
 801164c:	685b      	ldr	r3, [r3, #4]
 801164e:	691b      	ldr	r3, [r3, #16]
 8011650:	79fa      	ldrb	r2, [r7, #7]
 8011652:	4906      	ldr	r1, [pc, #24]	; (801166c <disk_ioctl+0x38>)
 8011654:	440a      	add	r2, r1
 8011656:	7a10      	ldrb	r0, [r2, #8]
 8011658:	79b9      	ldrb	r1, [r7, #6]
 801165a:	683a      	ldr	r2, [r7, #0]
 801165c:	4798      	blx	r3
 801165e:	4603      	mov	r3, r0
 8011660:	73fb      	strb	r3, [r7, #15]
  return res;
 8011662:	7bfb      	ldrb	r3, [r7, #15]
}
 8011664:	4618      	mov	r0, r3
 8011666:	3710      	adds	r7, #16
 8011668:	46bd      	mov	sp, r7
 801166a:	bd80      	pop	{r7, pc}
 801166c:	2400a5f8 	.word	0x2400a5f8

08011670 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011670:	b480      	push	{r7}
 8011672:	b085      	sub	sp, #20
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	3301      	adds	r3, #1
 801167c:	781b      	ldrb	r3, [r3, #0]
 801167e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011680:	89fb      	ldrh	r3, [r7, #14]
 8011682:	021b      	lsls	r3, r3, #8
 8011684:	b21a      	sxth	r2, r3
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	781b      	ldrb	r3, [r3, #0]
 801168a:	b21b      	sxth	r3, r3
 801168c:	4313      	orrs	r3, r2
 801168e:	b21b      	sxth	r3, r3
 8011690:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011692:	89fb      	ldrh	r3, [r7, #14]
}
 8011694:	4618      	mov	r0, r3
 8011696:	3714      	adds	r7, #20
 8011698:	46bd      	mov	sp, r7
 801169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169e:	4770      	bx	lr

080116a0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80116a0:	b480      	push	{r7}
 80116a2:	b085      	sub	sp, #20
 80116a4:	af00      	add	r7, sp, #0
 80116a6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	3303      	adds	r3, #3
 80116ac:	781b      	ldrb	r3, [r3, #0]
 80116ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	021b      	lsls	r3, r3, #8
 80116b4:	687a      	ldr	r2, [r7, #4]
 80116b6:	3202      	adds	r2, #2
 80116b8:	7812      	ldrb	r2, [r2, #0]
 80116ba:	4313      	orrs	r3, r2
 80116bc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	021b      	lsls	r3, r3, #8
 80116c2:	687a      	ldr	r2, [r7, #4]
 80116c4:	3201      	adds	r2, #1
 80116c6:	7812      	ldrb	r2, [r2, #0]
 80116c8:	4313      	orrs	r3, r2
 80116ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	021b      	lsls	r3, r3, #8
 80116d0:	687a      	ldr	r2, [r7, #4]
 80116d2:	7812      	ldrb	r2, [r2, #0]
 80116d4:	4313      	orrs	r3, r2
 80116d6:	60fb      	str	r3, [r7, #12]
	return rv;
 80116d8:	68fb      	ldr	r3, [r7, #12]
}
 80116da:	4618      	mov	r0, r3
 80116dc:	3714      	adds	r7, #20
 80116de:	46bd      	mov	sp, r7
 80116e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e4:	4770      	bx	lr

080116e6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80116e6:	b480      	push	{r7}
 80116e8:	b083      	sub	sp, #12
 80116ea:	af00      	add	r7, sp, #0
 80116ec:	6078      	str	r0, [r7, #4]
 80116ee:	460b      	mov	r3, r1
 80116f0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	1c5a      	adds	r2, r3, #1
 80116f6:	607a      	str	r2, [r7, #4]
 80116f8:	887a      	ldrh	r2, [r7, #2]
 80116fa:	b2d2      	uxtb	r2, r2
 80116fc:	701a      	strb	r2, [r3, #0]
 80116fe:	887b      	ldrh	r3, [r7, #2]
 8011700:	0a1b      	lsrs	r3, r3, #8
 8011702:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	1c5a      	adds	r2, r3, #1
 8011708:	607a      	str	r2, [r7, #4]
 801170a:	887a      	ldrh	r2, [r7, #2]
 801170c:	b2d2      	uxtb	r2, r2
 801170e:	701a      	strb	r2, [r3, #0]
}
 8011710:	bf00      	nop
 8011712:	370c      	adds	r7, #12
 8011714:	46bd      	mov	sp, r7
 8011716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171a:	4770      	bx	lr

0801171c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801171c:	b480      	push	{r7}
 801171e:	b083      	sub	sp, #12
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
 8011724:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	1c5a      	adds	r2, r3, #1
 801172a:	607a      	str	r2, [r7, #4]
 801172c:	683a      	ldr	r2, [r7, #0]
 801172e:	b2d2      	uxtb	r2, r2
 8011730:	701a      	strb	r2, [r3, #0]
 8011732:	683b      	ldr	r3, [r7, #0]
 8011734:	0a1b      	lsrs	r3, r3, #8
 8011736:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	1c5a      	adds	r2, r3, #1
 801173c:	607a      	str	r2, [r7, #4]
 801173e:	683a      	ldr	r2, [r7, #0]
 8011740:	b2d2      	uxtb	r2, r2
 8011742:	701a      	strb	r2, [r3, #0]
 8011744:	683b      	ldr	r3, [r7, #0]
 8011746:	0a1b      	lsrs	r3, r3, #8
 8011748:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	1c5a      	adds	r2, r3, #1
 801174e:	607a      	str	r2, [r7, #4]
 8011750:	683a      	ldr	r2, [r7, #0]
 8011752:	b2d2      	uxtb	r2, r2
 8011754:	701a      	strb	r2, [r3, #0]
 8011756:	683b      	ldr	r3, [r7, #0]
 8011758:	0a1b      	lsrs	r3, r3, #8
 801175a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	1c5a      	adds	r2, r3, #1
 8011760:	607a      	str	r2, [r7, #4]
 8011762:	683a      	ldr	r2, [r7, #0]
 8011764:	b2d2      	uxtb	r2, r2
 8011766:	701a      	strb	r2, [r3, #0]
}
 8011768:	bf00      	nop
 801176a:	370c      	adds	r7, #12
 801176c:	46bd      	mov	sp, r7
 801176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011772:	4770      	bx	lr

08011774 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011774:	b480      	push	{r7}
 8011776:	b087      	sub	sp, #28
 8011778:	af00      	add	r7, sp, #0
 801177a:	60f8      	str	r0, [r7, #12]
 801177c:	60b9      	str	r1, [r7, #8]
 801177e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011784:	68bb      	ldr	r3, [r7, #8]
 8011786:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d00d      	beq.n	80117aa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801178e:	693a      	ldr	r2, [r7, #16]
 8011790:	1c53      	adds	r3, r2, #1
 8011792:	613b      	str	r3, [r7, #16]
 8011794:	697b      	ldr	r3, [r7, #20]
 8011796:	1c59      	adds	r1, r3, #1
 8011798:	6179      	str	r1, [r7, #20]
 801179a:	7812      	ldrb	r2, [r2, #0]
 801179c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	3b01      	subs	r3, #1
 80117a2:	607b      	str	r3, [r7, #4]
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d1f1      	bne.n	801178e <mem_cpy+0x1a>
	}
}
 80117aa:	bf00      	nop
 80117ac:	371c      	adds	r7, #28
 80117ae:	46bd      	mov	sp, r7
 80117b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b4:	4770      	bx	lr

080117b6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80117b6:	b480      	push	{r7}
 80117b8:	b087      	sub	sp, #28
 80117ba:	af00      	add	r7, sp, #0
 80117bc:	60f8      	str	r0, [r7, #12]
 80117be:	60b9      	str	r1, [r7, #8]
 80117c0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80117c6:	697b      	ldr	r3, [r7, #20]
 80117c8:	1c5a      	adds	r2, r3, #1
 80117ca:	617a      	str	r2, [r7, #20]
 80117cc:	68ba      	ldr	r2, [r7, #8]
 80117ce:	b2d2      	uxtb	r2, r2
 80117d0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	3b01      	subs	r3, #1
 80117d6:	607b      	str	r3, [r7, #4]
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d1f3      	bne.n	80117c6 <mem_set+0x10>
}
 80117de:	bf00      	nop
 80117e0:	bf00      	nop
 80117e2:	371c      	adds	r7, #28
 80117e4:	46bd      	mov	sp, r7
 80117e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ea:	4770      	bx	lr

080117ec <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80117ec:	b480      	push	{r7}
 80117ee:	b089      	sub	sp, #36	; 0x24
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	60f8      	str	r0, [r7, #12]
 80117f4:	60b9      	str	r1, [r7, #8]
 80117f6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	61fb      	str	r3, [r7, #28]
 80117fc:	68bb      	ldr	r3, [r7, #8]
 80117fe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011800:	2300      	movs	r3, #0
 8011802:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011804:	69fb      	ldr	r3, [r7, #28]
 8011806:	1c5a      	adds	r2, r3, #1
 8011808:	61fa      	str	r2, [r7, #28]
 801180a:	781b      	ldrb	r3, [r3, #0]
 801180c:	4619      	mov	r1, r3
 801180e:	69bb      	ldr	r3, [r7, #24]
 8011810:	1c5a      	adds	r2, r3, #1
 8011812:	61ba      	str	r2, [r7, #24]
 8011814:	781b      	ldrb	r3, [r3, #0]
 8011816:	1acb      	subs	r3, r1, r3
 8011818:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	3b01      	subs	r3, #1
 801181e:	607b      	str	r3, [r7, #4]
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d002      	beq.n	801182c <mem_cmp+0x40>
 8011826:	697b      	ldr	r3, [r7, #20]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d0eb      	beq.n	8011804 <mem_cmp+0x18>

	return r;
 801182c:	697b      	ldr	r3, [r7, #20]
}
 801182e:	4618      	mov	r0, r3
 8011830:	3724      	adds	r7, #36	; 0x24
 8011832:	46bd      	mov	sp, r7
 8011834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011838:	4770      	bx	lr

0801183a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801183a:	b480      	push	{r7}
 801183c:	b083      	sub	sp, #12
 801183e:	af00      	add	r7, sp, #0
 8011840:	6078      	str	r0, [r7, #4]
 8011842:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011844:	e002      	b.n	801184c <chk_chr+0x12>
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	3301      	adds	r3, #1
 801184a:	607b      	str	r3, [r7, #4]
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	781b      	ldrb	r3, [r3, #0]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d005      	beq.n	8011860 <chk_chr+0x26>
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	781b      	ldrb	r3, [r3, #0]
 8011858:	461a      	mov	r2, r3
 801185a:	683b      	ldr	r3, [r7, #0]
 801185c:	4293      	cmp	r3, r2
 801185e:	d1f2      	bne.n	8011846 <chk_chr+0xc>
	return *str;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	781b      	ldrb	r3, [r3, #0]
}
 8011864:	4618      	mov	r0, r3
 8011866:	370c      	adds	r7, #12
 8011868:	46bd      	mov	sp, r7
 801186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186e:	4770      	bx	lr

08011870 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011870:	b480      	push	{r7}
 8011872:	b085      	sub	sp, #20
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
 8011878:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801187a:	2300      	movs	r3, #0
 801187c:	60bb      	str	r3, [r7, #8]
 801187e:	68bb      	ldr	r3, [r7, #8]
 8011880:	60fb      	str	r3, [r7, #12]
 8011882:	e029      	b.n	80118d8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011884:	4a27      	ldr	r2, [pc, #156]	; (8011924 <chk_lock+0xb4>)
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	011b      	lsls	r3, r3, #4
 801188a:	4413      	add	r3, r2
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d01d      	beq.n	80118ce <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011892:	4a24      	ldr	r2, [pc, #144]	; (8011924 <chk_lock+0xb4>)
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	011b      	lsls	r3, r3, #4
 8011898:	4413      	add	r3, r2
 801189a:	681a      	ldr	r2, [r3, #0]
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	429a      	cmp	r2, r3
 80118a2:	d116      	bne.n	80118d2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80118a4:	4a1f      	ldr	r2, [pc, #124]	; (8011924 <chk_lock+0xb4>)
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	011b      	lsls	r3, r3, #4
 80118aa:	4413      	add	r3, r2
 80118ac:	3304      	adds	r3, #4
 80118ae:	681a      	ldr	r2, [r3, #0]
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80118b4:	429a      	cmp	r2, r3
 80118b6:	d10c      	bne.n	80118d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80118b8:	4a1a      	ldr	r2, [pc, #104]	; (8011924 <chk_lock+0xb4>)
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	011b      	lsls	r3, r3, #4
 80118be:	4413      	add	r3, r2
 80118c0:	3308      	adds	r3, #8
 80118c2:	681a      	ldr	r2, [r3, #0]
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80118c8:	429a      	cmp	r2, r3
 80118ca:	d102      	bne.n	80118d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80118cc:	e007      	b.n	80118de <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80118ce:	2301      	movs	r3, #1
 80118d0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	3301      	adds	r3, #1
 80118d6:	60fb      	str	r3, [r7, #12]
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	2b01      	cmp	r3, #1
 80118dc:	d9d2      	bls.n	8011884 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	2b02      	cmp	r3, #2
 80118e2:	d109      	bne.n	80118f8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80118e4:	68bb      	ldr	r3, [r7, #8]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d102      	bne.n	80118f0 <chk_lock+0x80>
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	2b02      	cmp	r3, #2
 80118ee:	d101      	bne.n	80118f4 <chk_lock+0x84>
 80118f0:	2300      	movs	r3, #0
 80118f2:	e010      	b.n	8011916 <chk_lock+0xa6>
 80118f4:	2312      	movs	r3, #18
 80118f6:	e00e      	b.n	8011916 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80118f8:	683b      	ldr	r3, [r7, #0]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d108      	bne.n	8011910 <chk_lock+0xa0>
 80118fe:	4a09      	ldr	r2, [pc, #36]	; (8011924 <chk_lock+0xb4>)
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	011b      	lsls	r3, r3, #4
 8011904:	4413      	add	r3, r2
 8011906:	330c      	adds	r3, #12
 8011908:	881b      	ldrh	r3, [r3, #0]
 801190a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801190e:	d101      	bne.n	8011914 <chk_lock+0xa4>
 8011910:	2310      	movs	r3, #16
 8011912:	e000      	b.n	8011916 <chk_lock+0xa6>
 8011914:	2300      	movs	r3, #0
}
 8011916:	4618      	mov	r0, r3
 8011918:	3714      	adds	r7, #20
 801191a:	46bd      	mov	sp, r7
 801191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011920:	4770      	bx	lr
 8011922:	bf00      	nop
 8011924:	2400a3d8 	.word	0x2400a3d8

08011928 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011928:	b480      	push	{r7}
 801192a:	b083      	sub	sp, #12
 801192c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801192e:	2300      	movs	r3, #0
 8011930:	607b      	str	r3, [r7, #4]
 8011932:	e002      	b.n	801193a <enq_lock+0x12>
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	3301      	adds	r3, #1
 8011938:	607b      	str	r3, [r7, #4]
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	2b01      	cmp	r3, #1
 801193e:	d806      	bhi.n	801194e <enq_lock+0x26>
 8011940:	4a09      	ldr	r2, [pc, #36]	; (8011968 <enq_lock+0x40>)
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	011b      	lsls	r3, r3, #4
 8011946:	4413      	add	r3, r2
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d1f2      	bne.n	8011934 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	2b02      	cmp	r3, #2
 8011952:	bf14      	ite	ne
 8011954:	2301      	movne	r3, #1
 8011956:	2300      	moveq	r3, #0
 8011958:	b2db      	uxtb	r3, r3
}
 801195a:	4618      	mov	r0, r3
 801195c:	370c      	adds	r7, #12
 801195e:	46bd      	mov	sp, r7
 8011960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011964:	4770      	bx	lr
 8011966:	bf00      	nop
 8011968:	2400a3d8 	.word	0x2400a3d8

0801196c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801196c:	b480      	push	{r7}
 801196e:	b085      	sub	sp, #20
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
 8011974:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011976:	2300      	movs	r3, #0
 8011978:	60fb      	str	r3, [r7, #12]
 801197a:	e01f      	b.n	80119bc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801197c:	4a41      	ldr	r2, [pc, #260]	; (8011a84 <inc_lock+0x118>)
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	011b      	lsls	r3, r3, #4
 8011982:	4413      	add	r3, r2
 8011984:	681a      	ldr	r2, [r3, #0]
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	429a      	cmp	r2, r3
 801198c:	d113      	bne.n	80119b6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801198e:	4a3d      	ldr	r2, [pc, #244]	; (8011a84 <inc_lock+0x118>)
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	011b      	lsls	r3, r3, #4
 8011994:	4413      	add	r3, r2
 8011996:	3304      	adds	r3, #4
 8011998:	681a      	ldr	r2, [r3, #0]
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801199e:	429a      	cmp	r2, r3
 80119a0:	d109      	bne.n	80119b6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80119a2:	4a38      	ldr	r2, [pc, #224]	; (8011a84 <inc_lock+0x118>)
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	011b      	lsls	r3, r3, #4
 80119a8:	4413      	add	r3, r2
 80119aa:	3308      	adds	r3, #8
 80119ac:	681a      	ldr	r2, [r3, #0]
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80119b2:	429a      	cmp	r2, r3
 80119b4:	d006      	beq.n	80119c4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	3301      	adds	r3, #1
 80119ba:	60fb      	str	r3, [r7, #12]
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	2b01      	cmp	r3, #1
 80119c0:	d9dc      	bls.n	801197c <inc_lock+0x10>
 80119c2:	e000      	b.n	80119c6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80119c4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	2b02      	cmp	r3, #2
 80119ca:	d132      	bne.n	8011a32 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80119cc:	2300      	movs	r3, #0
 80119ce:	60fb      	str	r3, [r7, #12]
 80119d0:	e002      	b.n	80119d8 <inc_lock+0x6c>
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	3301      	adds	r3, #1
 80119d6:	60fb      	str	r3, [r7, #12]
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	2b01      	cmp	r3, #1
 80119dc:	d806      	bhi.n	80119ec <inc_lock+0x80>
 80119de:	4a29      	ldr	r2, [pc, #164]	; (8011a84 <inc_lock+0x118>)
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	011b      	lsls	r3, r3, #4
 80119e4:	4413      	add	r3, r2
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d1f2      	bne.n	80119d2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	2b02      	cmp	r3, #2
 80119f0:	d101      	bne.n	80119f6 <inc_lock+0x8a>
 80119f2:	2300      	movs	r3, #0
 80119f4:	e040      	b.n	8011a78 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681a      	ldr	r2, [r3, #0]
 80119fa:	4922      	ldr	r1, [pc, #136]	; (8011a84 <inc_lock+0x118>)
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	011b      	lsls	r3, r3, #4
 8011a00:	440b      	add	r3, r1
 8011a02:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	689a      	ldr	r2, [r3, #8]
 8011a08:	491e      	ldr	r1, [pc, #120]	; (8011a84 <inc_lock+0x118>)
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	011b      	lsls	r3, r3, #4
 8011a0e:	440b      	add	r3, r1
 8011a10:	3304      	adds	r3, #4
 8011a12:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	695a      	ldr	r2, [r3, #20]
 8011a18:	491a      	ldr	r1, [pc, #104]	; (8011a84 <inc_lock+0x118>)
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	011b      	lsls	r3, r3, #4
 8011a1e:	440b      	add	r3, r1
 8011a20:	3308      	adds	r3, #8
 8011a22:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011a24:	4a17      	ldr	r2, [pc, #92]	; (8011a84 <inc_lock+0x118>)
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	011b      	lsls	r3, r3, #4
 8011a2a:	4413      	add	r3, r2
 8011a2c:	330c      	adds	r3, #12
 8011a2e:	2200      	movs	r2, #0
 8011a30:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011a32:	683b      	ldr	r3, [r7, #0]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d009      	beq.n	8011a4c <inc_lock+0xe0>
 8011a38:	4a12      	ldr	r2, [pc, #72]	; (8011a84 <inc_lock+0x118>)
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	011b      	lsls	r3, r3, #4
 8011a3e:	4413      	add	r3, r2
 8011a40:	330c      	adds	r3, #12
 8011a42:	881b      	ldrh	r3, [r3, #0]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d001      	beq.n	8011a4c <inc_lock+0xe0>
 8011a48:	2300      	movs	r3, #0
 8011a4a:	e015      	b.n	8011a78 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011a4c:	683b      	ldr	r3, [r7, #0]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d108      	bne.n	8011a64 <inc_lock+0xf8>
 8011a52:	4a0c      	ldr	r2, [pc, #48]	; (8011a84 <inc_lock+0x118>)
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	011b      	lsls	r3, r3, #4
 8011a58:	4413      	add	r3, r2
 8011a5a:	330c      	adds	r3, #12
 8011a5c:	881b      	ldrh	r3, [r3, #0]
 8011a5e:	3301      	adds	r3, #1
 8011a60:	b29a      	uxth	r2, r3
 8011a62:	e001      	b.n	8011a68 <inc_lock+0xfc>
 8011a64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011a68:	4906      	ldr	r1, [pc, #24]	; (8011a84 <inc_lock+0x118>)
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	011b      	lsls	r3, r3, #4
 8011a6e:	440b      	add	r3, r1
 8011a70:	330c      	adds	r3, #12
 8011a72:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	3301      	adds	r3, #1
}
 8011a78:	4618      	mov	r0, r3
 8011a7a:	3714      	adds	r7, #20
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a82:	4770      	bx	lr
 8011a84:	2400a3d8 	.word	0x2400a3d8

08011a88 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011a88:	b480      	push	{r7}
 8011a8a:	b085      	sub	sp, #20
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	3b01      	subs	r3, #1
 8011a94:	607b      	str	r3, [r7, #4]
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	2b01      	cmp	r3, #1
 8011a9a:	d825      	bhi.n	8011ae8 <dec_lock+0x60>
		n = Files[i].ctr;
 8011a9c:	4a17      	ldr	r2, [pc, #92]	; (8011afc <dec_lock+0x74>)
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	011b      	lsls	r3, r3, #4
 8011aa2:	4413      	add	r3, r2
 8011aa4:	330c      	adds	r3, #12
 8011aa6:	881b      	ldrh	r3, [r3, #0]
 8011aa8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011aaa:	89fb      	ldrh	r3, [r7, #14]
 8011aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011ab0:	d101      	bne.n	8011ab6 <dec_lock+0x2e>
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011ab6:	89fb      	ldrh	r3, [r7, #14]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d002      	beq.n	8011ac2 <dec_lock+0x3a>
 8011abc:	89fb      	ldrh	r3, [r7, #14]
 8011abe:	3b01      	subs	r3, #1
 8011ac0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011ac2:	4a0e      	ldr	r2, [pc, #56]	; (8011afc <dec_lock+0x74>)
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	011b      	lsls	r3, r3, #4
 8011ac8:	4413      	add	r3, r2
 8011aca:	330c      	adds	r3, #12
 8011acc:	89fa      	ldrh	r2, [r7, #14]
 8011ace:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011ad0:	89fb      	ldrh	r3, [r7, #14]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d105      	bne.n	8011ae2 <dec_lock+0x5a>
 8011ad6:	4a09      	ldr	r2, [pc, #36]	; (8011afc <dec_lock+0x74>)
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	011b      	lsls	r3, r3, #4
 8011adc:	4413      	add	r3, r2
 8011ade:	2200      	movs	r2, #0
 8011ae0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	737b      	strb	r3, [r7, #13]
 8011ae6:	e001      	b.n	8011aec <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011ae8:	2302      	movs	r3, #2
 8011aea:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011aec:	7b7b      	ldrb	r3, [r7, #13]
}
 8011aee:	4618      	mov	r0, r3
 8011af0:	3714      	adds	r7, #20
 8011af2:	46bd      	mov	sp, r7
 8011af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af8:	4770      	bx	lr
 8011afa:	bf00      	nop
 8011afc:	2400a3d8 	.word	0x2400a3d8

08011b00 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011b00:	b480      	push	{r7}
 8011b02:	b085      	sub	sp, #20
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011b08:	2300      	movs	r3, #0
 8011b0a:	60fb      	str	r3, [r7, #12]
 8011b0c:	e010      	b.n	8011b30 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011b0e:	4a0d      	ldr	r2, [pc, #52]	; (8011b44 <clear_lock+0x44>)
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	011b      	lsls	r3, r3, #4
 8011b14:	4413      	add	r3, r2
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	687a      	ldr	r2, [r7, #4]
 8011b1a:	429a      	cmp	r2, r3
 8011b1c:	d105      	bne.n	8011b2a <clear_lock+0x2a>
 8011b1e:	4a09      	ldr	r2, [pc, #36]	; (8011b44 <clear_lock+0x44>)
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	011b      	lsls	r3, r3, #4
 8011b24:	4413      	add	r3, r2
 8011b26:	2200      	movs	r2, #0
 8011b28:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	3301      	adds	r3, #1
 8011b2e:	60fb      	str	r3, [r7, #12]
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	2b01      	cmp	r3, #1
 8011b34:	d9eb      	bls.n	8011b0e <clear_lock+0xe>
	}
}
 8011b36:	bf00      	nop
 8011b38:	bf00      	nop
 8011b3a:	3714      	adds	r7, #20
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b42:	4770      	bx	lr
 8011b44:	2400a3d8 	.word	0x2400a3d8

08011b48 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b086      	sub	sp, #24
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011b50:	2300      	movs	r3, #0
 8011b52:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	78db      	ldrb	r3, [r3, #3]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d034      	beq.n	8011bc6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b60:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	7858      	ldrb	r0, [r3, #1]
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011b6c:	2301      	movs	r3, #1
 8011b6e:	697a      	ldr	r2, [r7, #20]
 8011b70:	f7ff fd40 	bl	80115f4 <disk_write>
 8011b74:	4603      	mov	r3, r0
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d002      	beq.n	8011b80 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011b7a:	2301      	movs	r3, #1
 8011b7c:	73fb      	strb	r3, [r7, #15]
 8011b7e:	e022      	b.n	8011bc6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	2200      	movs	r2, #0
 8011b84:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b8a:	697a      	ldr	r2, [r7, #20]
 8011b8c:	1ad2      	subs	r2, r2, r3
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	69db      	ldr	r3, [r3, #28]
 8011b92:	429a      	cmp	r2, r3
 8011b94:	d217      	bcs.n	8011bc6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	789b      	ldrb	r3, [r3, #2]
 8011b9a:	613b      	str	r3, [r7, #16]
 8011b9c:	e010      	b.n	8011bc0 <sync_window+0x78>
					wsect += fs->fsize;
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	69db      	ldr	r3, [r3, #28]
 8011ba2:	697a      	ldr	r2, [r7, #20]
 8011ba4:	4413      	add	r3, r2
 8011ba6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	7858      	ldrb	r0, [r3, #1]
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011bb2:	2301      	movs	r3, #1
 8011bb4:	697a      	ldr	r2, [r7, #20]
 8011bb6:	f7ff fd1d 	bl	80115f4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011bba:	693b      	ldr	r3, [r7, #16]
 8011bbc:	3b01      	subs	r3, #1
 8011bbe:	613b      	str	r3, [r7, #16]
 8011bc0:	693b      	ldr	r3, [r7, #16]
 8011bc2:	2b01      	cmp	r3, #1
 8011bc4:	d8eb      	bhi.n	8011b9e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bc8:	4618      	mov	r0, r3
 8011bca:	3718      	adds	r7, #24
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	bd80      	pop	{r7, pc}

08011bd0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b084      	sub	sp, #16
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
 8011bd8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011bda:	2300      	movs	r3, #0
 8011bdc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011be2:	683a      	ldr	r2, [r7, #0]
 8011be4:	429a      	cmp	r2, r3
 8011be6:	d01b      	beq.n	8011c20 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011be8:	6878      	ldr	r0, [r7, #4]
 8011bea:	f7ff ffad 	bl	8011b48 <sync_window>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011bf2:	7bfb      	ldrb	r3, [r7, #15]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d113      	bne.n	8011c20 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	7858      	ldrb	r0, [r3, #1]
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011c02:	2301      	movs	r3, #1
 8011c04:	683a      	ldr	r2, [r7, #0]
 8011c06:	f7ff fcd5 	bl	80115b4 <disk_read>
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d004      	beq.n	8011c1a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011c10:	f04f 33ff 	mov.w	r3, #4294967295
 8011c14:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011c16:	2301      	movs	r3, #1
 8011c18:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	683a      	ldr	r2, [r7, #0]
 8011c1e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8011c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c22:	4618      	mov	r0, r3
 8011c24:	3710      	adds	r7, #16
 8011c26:	46bd      	mov	sp, r7
 8011c28:	bd80      	pop	{r7, pc}
	...

08011c2c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b084      	sub	sp, #16
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011c34:	6878      	ldr	r0, [r7, #4]
 8011c36:	f7ff ff87 	bl	8011b48 <sync_window>
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011c3e:	7bfb      	ldrb	r3, [r7, #15]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d158      	bne.n	8011cf6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	781b      	ldrb	r3, [r3, #0]
 8011c48:	2b03      	cmp	r3, #3
 8011c4a:	d148      	bne.n	8011cde <sync_fs+0xb2>
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	791b      	ldrb	r3, [r3, #4]
 8011c50:	2b01      	cmp	r3, #1
 8011c52:	d144      	bne.n	8011cde <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	3334      	adds	r3, #52	; 0x34
 8011c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011c5c:	2100      	movs	r1, #0
 8011c5e:	4618      	mov	r0, r3
 8011c60:	f7ff fda9 	bl	80117b6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	3334      	adds	r3, #52	; 0x34
 8011c68:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011c6c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011c70:	4618      	mov	r0, r3
 8011c72:	f7ff fd38 	bl	80116e6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	3334      	adds	r3, #52	; 0x34
 8011c7a:	4921      	ldr	r1, [pc, #132]	; (8011d00 <sync_fs+0xd4>)
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	f7ff fd4d 	bl	801171c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	3334      	adds	r3, #52	; 0x34
 8011c86:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011c8a:	491e      	ldr	r1, [pc, #120]	; (8011d04 <sync_fs+0xd8>)
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	f7ff fd45 	bl	801171c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	3334      	adds	r3, #52	; 0x34
 8011c96:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	695b      	ldr	r3, [r3, #20]
 8011c9e:	4619      	mov	r1, r3
 8011ca0:	4610      	mov	r0, r2
 8011ca2:	f7ff fd3b 	bl	801171c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	3334      	adds	r3, #52	; 0x34
 8011caa:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	691b      	ldr	r3, [r3, #16]
 8011cb2:	4619      	mov	r1, r3
 8011cb4:	4610      	mov	r0, r2
 8011cb6:	f7ff fd31 	bl	801171c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	6a1b      	ldr	r3, [r3, #32]
 8011cbe:	1c5a      	adds	r2, r3, #1
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	7858      	ldrb	r0, [r3, #1]
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011cd2:	2301      	movs	r3, #1
 8011cd4:	f7ff fc8e 	bl	80115f4 <disk_write>
			fs->fsi_flag = 0;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	2200      	movs	r2, #0
 8011cdc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	785b      	ldrb	r3, [r3, #1]
 8011ce2:	2200      	movs	r2, #0
 8011ce4:	2100      	movs	r1, #0
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	f7ff fca4 	bl	8011634 <disk_ioctl>
 8011cec:	4603      	mov	r3, r0
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d001      	beq.n	8011cf6 <sync_fs+0xca>
 8011cf2:	2301      	movs	r3, #1
 8011cf4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	3710      	adds	r7, #16
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd80      	pop	{r7, pc}
 8011d00:	41615252 	.word	0x41615252
 8011d04:	61417272 	.word	0x61417272

08011d08 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011d08:	b480      	push	{r7}
 8011d0a:	b083      	sub	sp, #12
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
 8011d10:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011d12:	683b      	ldr	r3, [r7, #0]
 8011d14:	3b02      	subs	r3, #2
 8011d16:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	699b      	ldr	r3, [r3, #24]
 8011d1c:	3b02      	subs	r3, #2
 8011d1e:	683a      	ldr	r2, [r7, #0]
 8011d20:	429a      	cmp	r2, r3
 8011d22:	d301      	bcc.n	8011d28 <clust2sect+0x20>
 8011d24:	2300      	movs	r3, #0
 8011d26:	e008      	b.n	8011d3a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	895b      	ldrh	r3, [r3, #10]
 8011d2c:	461a      	mov	r2, r3
 8011d2e:	683b      	ldr	r3, [r7, #0]
 8011d30:	fb03 f202 	mul.w	r2, r3, r2
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d38:	4413      	add	r3, r2
}
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	370c      	adds	r7, #12
 8011d3e:	46bd      	mov	sp, r7
 8011d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d44:	4770      	bx	lr

08011d46 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011d46:	b580      	push	{r7, lr}
 8011d48:	b086      	sub	sp, #24
 8011d4a:	af00      	add	r7, sp, #0
 8011d4c:	6078      	str	r0, [r7, #4]
 8011d4e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011d56:	683b      	ldr	r3, [r7, #0]
 8011d58:	2b01      	cmp	r3, #1
 8011d5a:	d904      	bls.n	8011d66 <get_fat+0x20>
 8011d5c:	693b      	ldr	r3, [r7, #16]
 8011d5e:	699b      	ldr	r3, [r3, #24]
 8011d60:	683a      	ldr	r2, [r7, #0]
 8011d62:	429a      	cmp	r2, r3
 8011d64:	d302      	bcc.n	8011d6c <get_fat+0x26>
		val = 1;	/* Internal error */
 8011d66:	2301      	movs	r3, #1
 8011d68:	617b      	str	r3, [r7, #20]
 8011d6a:	e08f      	b.n	8011e8c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8011d70:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011d72:	693b      	ldr	r3, [r7, #16]
 8011d74:	781b      	ldrb	r3, [r3, #0]
 8011d76:	2b03      	cmp	r3, #3
 8011d78:	d062      	beq.n	8011e40 <get_fat+0xfa>
 8011d7a:	2b03      	cmp	r3, #3
 8011d7c:	dc7c      	bgt.n	8011e78 <get_fat+0x132>
 8011d7e:	2b01      	cmp	r3, #1
 8011d80:	d002      	beq.n	8011d88 <get_fat+0x42>
 8011d82:	2b02      	cmp	r3, #2
 8011d84:	d042      	beq.n	8011e0c <get_fat+0xc6>
 8011d86:	e077      	b.n	8011e78 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011d88:	683b      	ldr	r3, [r7, #0]
 8011d8a:	60fb      	str	r3, [r7, #12]
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	085b      	lsrs	r3, r3, #1
 8011d90:	68fa      	ldr	r2, [r7, #12]
 8011d92:	4413      	add	r3, r2
 8011d94:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011d96:	693b      	ldr	r3, [r7, #16]
 8011d98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	0a5b      	lsrs	r3, r3, #9
 8011d9e:	4413      	add	r3, r2
 8011da0:	4619      	mov	r1, r3
 8011da2:	6938      	ldr	r0, [r7, #16]
 8011da4:	f7ff ff14 	bl	8011bd0 <move_window>
 8011da8:	4603      	mov	r3, r0
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d167      	bne.n	8011e7e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	1c5a      	adds	r2, r3, #1
 8011db2:	60fa      	str	r2, [r7, #12]
 8011db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011db8:	693a      	ldr	r2, [r7, #16]
 8011dba:	4413      	add	r3, r2
 8011dbc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011dc0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011dc2:	693b      	ldr	r3, [r7, #16]
 8011dc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	0a5b      	lsrs	r3, r3, #9
 8011dca:	4413      	add	r3, r2
 8011dcc:	4619      	mov	r1, r3
 8011dce:	6938      	ldr	r0, [r7, #16]
 8011dd0:	f7ff fefe 	bl	8011bd0 <move_window>
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d153      	bne.n	8011e82 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011de0:	693a      	ldr	r2, [r7, #16]
 8011de2:	4413      	add	r3, r2
 8011de4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011de8:	021b      	lsls	r3, r3, #8
 8011dea:	461a      	mov	r2, r3
 8011dec:	68bb      	ldr	r3, [r7, #8]
 8011dee:	4313      	orrs	r3, r2
 8011df0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	f003 0301 	and.w	r3, r3, #1
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d002      	beq.n	8011e02 <get_fat+0xbc>
 8011dfc:	68bb      	ldr	r3, [r7, #8]
 8011dfe:	091b      	lsrs	r3, r3, #4
 8011e00:	e002      	b.n	8011e08 <get_fat+0xc2>
 8011e02:	68bb      	ldr	r3, [r7, #8]
 8011e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011e08:	617b      	str	r3, [r7, #20]
			break;
 8011e0a:	e03f      	b.n	8011e8c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011e0c:	693b      	ldr	r3, [r7, #16]
 8011e0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011e10:	683b      	ldr	r3, [r7, #0]
 8011e12:	0a1b      	lsrs	r3, r3, #8
 8011e14:	4413      	add	r3, r2
 8011e16:	4619      	mov	r1, r3
 8011e18:	6938      	ldr	r0, [r7, #16]
 8011e1a:	f7ff fed9 	bl	8011bd0 <move_window>
 8011e1e:	4603      	mov	r3, r0
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d130      	bne.n	8011e86 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011e24:	693b      	ldr	r3, [r7, #16]
 8011e26:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011e2a:	683b      	ldr	r3, [r7, #0]
 8011e2c:	005b      	lsls	r3, r3, #1
 8011e2e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8011e32:	4413      	add	r3, r2
 8011e34:	4618      	mov	r0, r3
 8011e36:	f7ff fc1b 	bl	8011670 <ld_word>
 8011e3a:	4603      	mov	r3, r0
 8011e3c:	617b      	str	r3, [r7, #20]
			break;
 8011e3e:	e025      	b.n	8011e8c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011e40:	693b      	ldr	r3, [r7, #16]
 8011e42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011e44:	683b      	ldr	r3, [r7, #0]
 8011e46:	09db      	lsrs	r3, r3, #7
 8011e48:	4413      	add	r3, r2
 8011e4a:	4619      	mov	r1, r3
 8011e4c:	6938      	ldr	r0, [r7, #16]
 8011e4e:	f7ff febf 	bl	8011bd0 <move_window>
 8011e52:	4603      	mov	r3, r0
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d118      	bne.n	8011e8a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011e58:	693b      	ldr	r3, [r7, #16]
 8011e5a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011e5e:	683b      	ldr	r3, [r7, #0]
 8011e60:	009b      	lsls	r3, r3, #2
 8011e62:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011e66:	4413      	add	r3, r2
 8011e68:	4618      	mov	r0, r3
 8011e6a:	f7ff fc19 	bl	80116a0 <ld_dword>
 8011e6e:	4603      	mov	r3, r0
 8011e70:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011e74:	617b      	str	r3, [r7, #20]
			break;
 8011e76:	e009      	b.n	8011e8c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011e78:	2301      	movs	r3, #1
 8011e7a:	617b      	str	r3, [r7, #20]
 8011e7c:	e006      	b.n	8011e8c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011e7e:	bf00      	nop
 8011e80:	e004      	b.n	8011e8c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011e82:	bf00      	nop
 8011e84:	e002      	b.n	8011e8c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011e86:	bf00      	nop
 8011e88:	e000      	b.n	8011e8c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011e8a:	bf00      	nop
		}
	}

	return val;
 8011e8c:	697b      	ldr	r3, [r7, #20]
}
 8011e8e:	4618      	mov	r0, r3
 8011e90:	3718      	adds	r7, #24
 8011e92:	46bd      	mov	sp, r7
 8011e94:	bd80      	pop	{r7, pc}

08011e96 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011e96:	b590      	push	{r4, r7, lr}
 8011e98:	b089      	sub	sp, #36	; 0x24
 8011e9a:	af00      	add	r7, sp, #0
 8011e9c:	60f8      	str	r0, [r7, #12]
 8011e9e:	60b9      	str	r1, [r7, #8]
 8011ea0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011ea2:	2302      	movs	r3, #2
 8011ea4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011ea6:	68bb      	ldr	r3, [r7, #8]
 8011ea8:	2b01      	cmp	r3, #1
 8011eaa:	f240 80d2 	bls.w	8012052 <put_fat+0x1bc>
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	699b      	ldr	r3, [r3, #24]
 8011eb2:	68ba      	ldr	r2, [r7, #8]
 8011eb4:	429a      	cmp	r2, r3
 8011eb6:	f080 80cc 	bcs.w	8012052 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	781b      	ldrb	r3, [r3, #0]
 8011ebe:	2b03      	cmp	r3, #3
 8011ec0:	f000 8096 	beq.w	8011ff0 <put_fat+0x15a>
 8011ec4:	2b03      	cmp	r3, #3
 8011ec6:	f300 80cd 	bgt.w	8012064 <put_fat+0x1ce>
 8011eca:	2b01      	cmp	r3, #1
 8011ecc:	d002      	beq.n	8011ed4 <put_fat+0x3e>
 8011ece:	2b02      	cmp	r3, #2
 8011ed0:	d06e      	beq.n	8011fb0 <put_fat+0x11a>
 8011ed2:	e0c7      	b.n	8012064 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011ed4:	68bb      	ldr	r3, [r7, #8]
 8011ed6:	61bb      	str	r3, [r7, #24]
 8011ed8:	69bb      	ldr	r3, [r7, #24]
 8011eda:	085b      	lsrs	r3, r3, #1
 8011edc:	69ba      	ldr	r2, [r7, #24]
 8011ede:	4413      	add	r3, r2
 8011ee0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011ee6:	69bb      	ldr	r3, [r7, #24]
 8011ee8:	0a5b      	lsrs	r3, r3, #9
 8011eea:	4413      	add	r3, r2
 8011eec:	4619      	mov	r1, r3
 8011eee:	68f8      	ldr	r0, [r7, #12]
 8011ef0:	f7ff fe6e 	bl	8011bd0 <move_window>
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011ef8:	7ffb      	ldrb	r3, [r7, #31]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	f040 80ab 	bne.w	8012056 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011f06:	69bb      	ldr	r3, [r7, #24]
 8011f08:	1c59      	adds	r1, r3, #1
 8011f0a:	61b9      	str	r1, [r7, #24]
 8011f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f10:	4413      	add	r3, r2
 8011f12:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011f14:	68bb      	ldr	r3, [r7, #8]
 8011f16:	f003 0301 	and.w	r3, r3, #1
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d00d      	beq.n	8011f3a <put_fat+0xa4>
 8011f1e:	697b      	ldr	r3, [r7, #20]
 8011f20:	781b      	ldrb	r3, [r3, #0]
 8011f22:	b25b      	sxtb	r3, r3
 8011f24:	f003 030f 	and.w	r3, r3, #15
 8011f28:	b25a      	sxtb	r2, r3
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	b2db      	uxtb	r3, r3
 8011f2e:	011b      	lsls	r3, r3, #4
 8011f30:	b25b      	sxtb	r3, r3
 8011f32:	4313      	orrs	r3, r2
 8011f34:	b25b      	sxtb	r3, r3
 8011f36:	b2db      	uxtb	r3, r3
 8011f38:	e001      	b.n	8011f3e <put_fat+0xa8>
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	b2db      	uxtb	r3, r3
 8011f3e:	697a      	ldr	r2, [r7, #20]
 8011f40:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	2201      	movs	r2, #1
 8011f46:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011f4c:	69bb      	ldr	r3, [r7, #24]
 8011f4e:	0a5b      	lsrs	r3, r3, #9
 8011f50:	4413      	add	r3, r2
 8011f52:	4619      	mov	r1, r3
 8011f54:	68f8      	ldr	r0, [r7, #12]
 8011f56:	f7ff fe3b 	bl	8011bd0 <move_window>
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011f5e:	7ffb      	ldrb	r3, [r7, #31]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d17a      	bne.n	801205a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011f6a:	69bb      	ldr	r3, [r7, #24]
 8011f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f70:	4413      	add	r3, r2
 8011f72:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011f74:	68bb      	ldr	r3, [r7, #8]
 8011f76:	f003 0301 	and.w	r3, r3, #1
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d003      	beq.n	8011f86 <put_fat+0xf0>
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	091b      	lsrs	r3, r3, #4
 8011f82:	b2db      	uxtb	r3, r3
 8011f84:	e00e      	b.n	8011fa4 <put_fat+0x10e>
 8011f86:	697b      	ldr	r3, [r7, #20]
 8011f88:	781b      	ldrb	r3, [r3, #0]
 8011f8a:	b25b      	sxtb	r3, r3
 8011f8c:	f023 030f 	bic.w	r3, r3, #15
 8011f90:	b25a      	sxtb	r2, r3
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	0a1b      	lsrs	r3, r3, #8
 8011f96:	b25b      	sxtb	r3, r3
 8011f98:	f003 030f 	and.w	r3, r3, #15
 8011f9c:	b25b      	sxtb	r3, r3
 8011f9e:	4313      	orrs	r3, r2
 8011fa0:	b25b      	sxtb	r3, r3
 8011fa2:	b2db      	uxtb	r3, r3
 8011fa4:	697a      	ldr	r2, [r7, #20]
 8011fa6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	2201      	movs	r2, #1
 8011fac:	70da      	strb	r2, [r3, #3]
			break;
 8011fae:	e059      	b.n	8012064 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011fb4:	68bb      	ldr	r3, [r7, #8]
 8011fb6:	0a1b      	lsrs	r3, r3, #8
 8011fb8:	4413      	add	r3, r2
 8011fba:	4619      	mov	r1, r3
 8011fbc:	68f8      	ldr	r0, [r7, #12]
 8011fbe:	f7ff fe07 	bl	8011bd0 <move_window>
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011fc6:	7ffb      	ldrb	r3, [r7, #31]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d148      	bne.n	801205e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011fd2:	68bb      	ldr	r3, [r7, #8]
 8011fd4:	005b      	lsls	r3, r3, #1
 8011fd6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8011fda:	4413      	add	r3, r2
 8011fdc:	687a      	ldr	r2, [r7, #4]
 8011fde:	b292      	uxth	r2, r2
 8011fe0:	4611      	mov	r1, r2
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	f7ff fb7f 	bl	80116e6 <st_word>
			fs->wflag = 1;
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	2201      	movs	r2, #1
 8011fec:	70da      	strb	r2, [r3, #3]
			break;
 8011fee:	e039      	b.n	8012064 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011ff4:	68bb      	ldr	r3, [r7, #8]
 8011ff6:	09db      	lsrs	r3, r3, #7
 8011ff8:	4413      	add	r3, r2
 8011ffa:	4619      	mov	r1, r3
 8011ffc:	68f8      	ldr	r0, [r7, #12]
 8011ffe:	f7ff fde7 	bl	8011bd0 <move_window>
 8012002:	4603      	mov	r3, r0
 8012004:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012006:	7ffb      	ldrb	r3, [r7, #31]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d12a      	bne.n	8012062 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012018:	68bb      	ldr	r3, [r7, #8]
 801201a:	009b      	lsls	r3, r3, #2
 801201c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012020:	4413      	add	r3, r2
 8012022:	4618      	mov	r0, r3
 8012024:	f7ff fb3c 	bl	80116a0 <ld_dword>
 8012028:	4603      	mov	r3, r0
 801202a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801202e:	4323      	orrs	r3, r4
 8012030:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012038:	68bb      	ldr	r3, [r7, #8]
 801203a:	009b      	lsls	r3, r3, #2
 801203c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012040:	4413      	add	r3, r2
 8012042:	6879      	ldr	r1, [r7, #4]
 8012044:	4618      	mov	r0, r3
 8012046:	f7ff fb69 	bl	801171c <st_dword>
			fs->wflag = 1;
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	2201      	movs	r2, #1
 801204e:	70da      	strb	r2, [r3, #3]
			break;
 8012050:	e008      	b.n	8012064 <put_fat+0x1ce>
		}
	}
 8012052:	bf00      	nop
 8012054:	e006      	b.n	8012064 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012056:	bf00      	nop
 8012058:	e004      	b.n	8012064 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801205a:	bf00      	nop
 801205c:	e002      	b.n	8012064 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801205e:	bf00      	nop
 8012060:	e000      	b.n	8012064 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012062:	bf00      	nop
	return res;
 8012064:	7ffb      	ldrb	r3, [r7, #31]
}
 8012066:	4618      	mov	r0, r3
 8012068:	3724      	adds	r7, #36	; 0x24
 801206a:	46bd      	mov	sp, r7
 801206c:	bd90      	pop	{r4, r7, pc}

0801206e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801206e:	b580      	push	{r7, lr}
 8012070:	b088      	sub	sp, #32
 8012072:	af00      	add	r7, sp, #0
 8012074:	60f8      	str	r0, [r7, #12]
 8012076:	60b9      	str	r1, [r7, #8]
 8012078:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801207a:	2300      	movs	r3, #0
 801207c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012084:	68bb      	ldr	r3, [r7, #8]
 8012086:	2b01      	cmp	r3, #1
 8012088:	d904      	bls.n	8012094 <remove_chain+0x26>
 801208a:	69bb      	ldr	r3, [r7, #24]
 801208c:	699b      	ldr	r3, [r3, #24]
 801208e:	68ba      	ldr	r2, [r7, #8]
 8012090:	429a      	cmp	r2, r3
 8012092:	d301      	bcc.n	8012098 <remove_chain+0x2a>
 8012094:	2302      	movs	r3, #2
 8012096:	e04b      	b.n	8012130 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d00c      	beq.n	80120b8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801209e:	f04f 32ff 	mov.w	r2, #4294967295
 80120a2:	6879      	ldr	r1, [r7, #4]
 80120a4:	69b8      	ldr	r0, [r7, #24]
 80120a6:	f7ff fef6 	bl	8011e96 <put_fat>
 80120aa:	4603      	mov	r3, r0
 80120ac:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80120ae:	7ffb      	ldrb	r3, [r7, #31]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d001      	beq.n	80120b8 <remove_chain+0x4a>
 80120b4:	7ffb      	ldrb	r3, [r7, #31]
 80120b6:	e03b      	b.n	8012130 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80120b8:	68b9      	ldr	r1, [r7, #8]
 80120ba:	68f8      	ldr	r0, [r7, #12]
 80120bc:	f7ff fe43 	bl	8011d46 <get_fat>
 80120c0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80120c2:	697b      	ldr	r3, [r7, #20]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d031      	beq.n	801212c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80120c8:	697b      	ldr	r3, [r7, #20]
 80120ca:	2b01      	cmp	r3, #1
 80120cc:	d101      	bne.n	80120d2 <remove_chain+0x64>
 80120ce:	2302      	movs	r3, #2
 80120d0:	e02e      	b.n	8012130 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80120d2:	697b      	ldr	r3, [r7, #20]
 80120d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120d8:	d101      	bne.n	80120de <remove_chain+0x70>
 80120da:	2301      	movs	r3, #1
 80120dc:	e028      	b.n	8012130 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80120de:	2200      	movs	r2, #0
 80120e0:	68b9      	ldr	r1, [r7, #8]
 80120e2:	69b8      	ldr	r0, [r7, #24]
 80120e4:	f7ff fed7 	bl	8011e96 <put_fat>
 80120e8:	4603      	mov	r3, r0
 80120ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80120ec:	7ffb      	ldrb	r3, [r7, #31]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d001      	beq.n	80120f6 <remove_chain+0x88>
 80120f2:	7ffb      	ldrb	r3, [r7, #31]
 80120f4:	e01c      	b.n	8012130 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80120f6:	69bb      	ldr	r3, [r7, #24]
 80120f8:	695a      	ldr	r2, [r3, #20]
 80120fa:	69bb      	ldr	r3, [r7, #24]
 80120fc:	699b      	ldr	r3, [r3, #24]
 80120fe:	3b02      	subs	r3, #2
 8012100:	429a      	cmp	r2, r3
 8012102:	d20b      	bcs.n	801211c <remove_chain+0xae>
			fs->free_clst++;
 8012104:	69bb      	ldr	r3, [r7, #24]
 8012106:	695b      	ldr	r3, [r3, #20]
 8012108:	1c5a      	adds	r2, r3, #1
 801210a:	69bb      	ldr	r3, [r7, #24]
 801210c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 801210e:	69bb      	ldr	r3, [r7, #24]
 8012110:	791b      	ldrb	r3, [r3, #4]
 8012112:	f043 0301 	orr.w	r3, r3, #1
 8012116:	b2da      	uxtb	r2, r3
 8012118:	69bb      	ldr	r3, [r7, #24]
 801211a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801211c:	697b      	ldr	r3, [r7, #20]
 801211e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012120:	69bb      	ldr	r3, [r7, #24]
 8012122:	699b      	ldr	r3, [r3, #24]
 8012124:	68ba      	ldr	r2, [r7, #8]
 8012126:	429a      	cmp	r2, r3
 8012128:	d3c6      	bcc.n	80120b8 <remove_chain+0x4a>
 801212a:	e000      	b.n	801212e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801212c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801212e:	2300      	movs	r3, #0
}
 8012130:	4618      	mov	r0, r3
 8012132:	3720      	adds	r7, #32
 8012134:	46bd      	mov	sp, r7
 8012136:	bd80      	pop	{r7, pc}

08012138 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b088      	sub	sp, #32
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
 8012140:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012148:	683b      	ldr	r3, [r7, #0]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d10d      	bne.n	801216a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801214e:	693b      	ldr	r3, [r7, #16]
 8012150:	691b      	ldr	r3, [r3, #16]
 8012152:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012154:	69bb      	ldr	r3, [r7, #24]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d004      	beq.n	8012164 <create_chain+0x2c>
 801215a:	693b      	ldr	r3, [r7, #16]
 801215c:	699b      	ldr	r3, [r3, #24]
 801215e:	69ba      	ldr	r2, [r7, #24]
 8012160:	429a      	cmp	r2, r3
 8012162:	d31b      	bcc.n	801219c <create_chain+0x64>
 8012164:	2301      	movs	r3, #1
 8012166:	61bb      	str	r3, [r7, #24]
 8012168:	e018      	b.n	801219c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801216a:	6839      	ldr	r1, [r7, #0]
 801216c:	6878      	ldr	r0, [r7, #4]
 801216e:	f7ff fdea 	bl	8011d46 <get_fat>
 8012172:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	2b01      	cmp	r3, #1
 8012178:	d801      	bhi.n	801217e <create_chain+0x46>
 801217a:	2301      	movs	r3, #1
 801217c:	e070      	b.n	8012260 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012184:	d101      	bne.n	801218a <create_chain+0x52>
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	e06a      	b.n	8012260 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801218a:	693b      	ldr	r3, [r7, #16]
 801218c:	699b      	ldr	r3, [r3, #24]
 801218e:	68fa      	ldr	r2, [r7, #12]
 8012190:	429a      	cmp	r2, r3
 8012192:	d201      	bcs.n	8012198 <create_chain+0x60>
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	e063      	b.n	8012260 <create_chain+0x128>
		scl = clst;
 8012198:	683b      	ldr	r3, [r7, #0]
 801219a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801219c:	69bb      	ldr	r3, [r7, #24]
 801219e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80121a0:	69fb      	ldr	r3, [r7, #28]
 80121a2:	3301      	adds	r3, #1
 80121a4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80121a6:	693b      	ldr	r3, [r7, #16]
 80121a8:	699b      	ldr	r3, [r3, #24]
 80121aa:	69fa      	ldr	r2, [r7, #28]
 80121ac:	429a      	cmp	r2, r3
 80121ae:	d307      	bcc.n	80121c0 <create_chain+0x88>
				ncl = 2;
 80121b0:	2302      	movs	r3, #2
 80121b2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80121b4:	69fa      	ldr	r2, [r7, #28]
 80121b6:	69bb      	ldr	r3, [r7, #24]
 80121b8:	429a      	cmp	r2, r3
 80121ba:	d901      	bls.n	80121c0 <create_chain+0x88>
 80121bc:	2300      	movs	r3, #0
 80121be:	e04f      	b.n	8012260 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80121c0:	69f9      	ldr	r1, [r7, #28]
 80121c2:	6878      	ldr	r0, [r7, #4]
 80121c4:	f7ff fdbf 	bl	8011d46 <get_fat>
 80121c8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d00e      	beq.n	80121ee <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	2b01      	cmp	r3, #1
 80121d4:	d003      	beq.n	80121de <create_chain+0xa6>
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121dc:	d101      	bne.n	80121e2 <create_chain+0xaa>
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	e03e      	b.n	8012260 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80121e2:	69fa      	ldr	r2, [r7, #28]
 80121e4:	69bb      	ldr	r3, [r7, #24]
 80121e6:	429a      	cmp	r2, r3
 80121e8:	d1da      	bne.n	80121a0 <create_chain+0x68>
 80121ea:	2300      	movs	r3, #0
 80121ec:	e038      	b.n	8012260 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80121ee:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80121f0:	f04f 32ff 	mov.w	r2, #4294967295
 80121f4:	69f9      	ldr	r1, [r7, #28]
 80121f6:	6938      	ldr	r0, [r7, #16]
 80121f8:	f7ff fe4d 	bl	8011e96 <put_fat>
 80121fc:	4603      	mov	r3, r0
 80121fe:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012200:	7dfb      	ldrb	r3, [r7, #23]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d109      	bne.n	801221a <create_chain+0xe2>
 8012206:	683b      	ldr	r3, [r7, #0]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d006      	beq.n	801221a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801220c:	69fa      	ldr	r2, [r7, #28]
 801220e:	6839      	ldr	r1, [r7, #0]
 8012210:	6938      	ldr	r0, [r7, #16]
 8012212:	f7ff fe40 	bl	8011e96 <put_fat>
 8012216:	4603      	mov	r3, r0
 8012218:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801221a:	7dfb      	ldrb	r3, [r7, #23]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d116      	bne.n	801224e <create_chain+0x116>
		fs->last_clst = ncl;
 8012220:	693b      	ldr	r3, [r7, #16]
 8012222:	69fa      	ldr	r2, [r7, #28]
 8012224:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012226:	693b      	ldr	r3, [r7, #16]
 8012228:	695a      	ldr	r2, [r3, #20]
 801222a:	693b      	ldr	r3, [r7, #16]
 801222c:	699b      	ldr	r3, [r3, #24]
 801222e:	3b02      	subs	r3, #2
 8012230:	429a      	cmp	r2, r3
 8012232:	d804      	bhi.n	801223e <create_chain+0x106>
 8012234:	693b      	ldr	r3, [r7, #16]
 8012236:	695b      	ldr	r3, [r3, #20]
 8012238:	1e5a      	subs	r2, r3, #1
 801223a:	693b      	ldr	r3, [r7, #16]
 801223c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 801223e:	693b      	ldr	r3, [r7, #16]
 8012240:	791b      	ldrb	r3, [r3, #4]
 8012242:	f043 0301 	orr.w	r3, r3, #1
 8012246:	b2da      	uxtb	r2, r3
 8012248:	693b      	ldr	r3, [r7, #16]
 801224a:	711a      	strb	r2, [r3, #4]
 801224c:	e007      	b.n	801225e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801224e:	7dfb      	ldrb	r3, [r7, #23]
 8012250:	2b01      	cmp	r3, #1
 8012252:	d102      	bne.n	801225a <create_chain+0x122>
 8012254:	f04f 33ff 	mov.w	r3, #4294967295
 8012258:	e000      	b.n	801225c <create_chain+0x124>
 801225a:	2301      	movs	r3, #1
 801225c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801225e:	69fb      	ldr	r3, [r7, #28]
}
 8012260:	4618      	mov	r0, r3
 8012262:	3720      	adds	r7, #32
 8012264:	46bd      	mov	sp, r7
 8012266:	bd80      	pop	{r7, pc}

08012268 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012268:	b480      	push	{r7}
 801226a:	b087      	sub	sp, #28
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
 8012270:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801227c:	3304      	adds	r3, #4
 801227e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012280:	683b      	ldr	r3, [r7, #0]
 8012282:	0a5b      	lsrs	r3, r3, #9
 8012284:	68fa      	ldr	r2, [r7, #12]
 8012286:	8952      	ldrh	r2, [r2, #10]
 8012288:	fbb3 f3f2 	udiv	r3, r3, r2
 801228c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801228e:	693b      	ldr	r3, [r7, #16]
 8012290:	1d1a      	adds	r2, r3, #4
 8012292:	613a      	str	r2, [r7, #16]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012298:	68bb      	ldr	r3, [r7, #8]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d101      	bne.n	80122a2 <clmt_clust+0x3a>
 801229e:	2300      	movs	r3, #0
 80122a0:	e010      	b.n	80122c4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80122a2:	697a      	ldr	r2, [r7, #20]
 80122a4:	68bb      	ldr	r3, [r7, #8]
 80122a6:	429a      	cmp	r2, r3
 80122a8:	d307      	bcc.n	80122ba <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80122aa:	697a      	ldr	r2, [r7, #20]
 80122ac:	68bb      	ldr	r3, [r7, #8]
 80122ae:	1ad3      	subs	r3, r2, r3
 80122b0:	617b      	str	r3, [r7, #20]
 80122b2:	693b      	ldr	r3, [r7, #16]
 80122b4:	3304      	adds	r3, #4
 80122b6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80122b8:	e7e9      	b.n	801228e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80122ba:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80122bc:	693b      	ldr	r3, [r7, #16]
 80122be:	681a      	ldr	r2, [r3, #0]
 80122c0:	697b      	ldr	r3, [r7, #20]
 80122c2:	4413      	add	r3, r2
}
 80122c4:	4618      	mov	r0, r3
 80122c6:	371c      	adds	r7, #28
 80122c8:	46bd      	mov	sp, r7
 80122ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ce:	4770      	bx	lr

080122d0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b086      	sub	sp, #24
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
 80122d8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80122e0:	683b      	ldr	r3, [r7, #0]
 80122e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80122e6:	d204      	bcs.n	80122f2 <dir_sdi+0x22>
 80122e8:	683b      	ldr	r3, [r7, #0]
 80122ea:	f003 031f 	and.w	r3, r3, #31
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d001      	beq.n	80122f6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80122f2:	2302      	movs	r3, #2
 80122f4:	e063      	b.n	80123be <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	683a      	ldr	r2, [r7, #0]
 80122fa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	689b      	ldr	r3, [r3, #8]
 8012300:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012302:	697b      	ldr	r3, [r7, #20]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d106      	bne.n	8012316 <dir_sdi+0x46>
 8012308:	693b      	ldr	r3, [r7, #16]
 801230a:	781b      	ldrb	r3, [r3, #0]
 801230c:	2b02      	cmp	r3, #2
 801230e:	d902      	bls.n	8012316 <dir_sdi+0x46>
		clst = fs->dirbase;
 8012310:	693b      	ldr	r3, [r7, #16]
 8012312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012314:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012316:	697b      	ldr	r3, [r7, #20]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d10c      	bne.n	8012336 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801231c:	683b      	ldr	r3, [r7, #0]
 801231e:	095b      	lsrs	r3, r3, #5
 8012320:	693a      	ldr	r2, [r7, #16]
 8012322:	8912      	ldrh	r2, [r2, #8]
 8012324:	4293      	cmp	r3, r2
 8012326:	d301      	bcc.n	801232c <dir_sdi+0x5c>
 8012328:	2302      	movs	r3, #2
 801232a:	e048      	b.n	80123be <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801232c:	693b      	ldr	r3, [r7, #16]
 801232e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	61da      	str	r2, [r3, #28]
 8012334:	e029      	b.n	801238a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012336:	693b      	ldr	r3, [r7, #16]
 8012338:	895b      	ldrh	r3, [r3, #10]
 801233a:	025b      	lsls	r3, r3, #9
 801233c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801233e:	e019      	b.n	8012374 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	6979      	ldr	r1, [r7, #20]
 8012344:	4618      	mov	r0, r3
 8012346:	f7ff fcfe 	bl	8011d46 <get_fat>
 801234a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801234c:	697b      	ldr	r3, [r7, #20]
 801234e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012352:	d101      	bne.n	8012358 <dir_sdi+0x88>
 8012354:	2301      	movs	r3, #1
 8012356:	e032      	b.n	80123be <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012358:	697b      	ldr	r3, [r7, #20]
 801235a:	2b01      	cmp	r3, #1
 801235c:	d904      	bls.n	8012368 <dir_sdi+0x98>
 801235e:	693b      	ldr	r3, [r7, #16]
 8012360:	699b      	ldr	r3, [r3, #24]
 8012362:	697a      	ldr	r2, [r7, #20]
 8012364:	429a      	cmp	r2, r3
 8012366:	d301      	bcc.n	801236c <dir_sdi+0x9c>
 8012368:	2302      	movs	r3, #2
 801236a:	e028      	b.n	80123be <dir_sdi+0xee>
			ofs -= csz;
 801236c:	683a      	ldr	r2, [r7, #0]
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	1ad3      	subs	r3, r2, r3
 8012372:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012374:	683a      	ldr	r2, [r7, #0]
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	429a      	cmp	r2, r3
 801237a:	d2e1      	bcs.n	8012340 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801237c:	6979      	ldr	r1, [r7, #20]
 801237e:	6938      	ldr	r0, [r7, #16]
 8012380:	f7ff fcc2 	bl	8011d08 <clust2sect>
 8012384:	4602      	mov	r2, r0
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	697a      	ldr	r2, [r7, #20]
 801238e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	69db      	ldr	r3, [r3, #28]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d101      	bne.n	801239c <dir_sdi+0xcc>
 8012398:	2302      	movs	r3, #2
 801239a:	e010      	b.n	80123be <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	69da      	ldr	r2, [r3, #28]
 80123a0:	683b      	ldr	r3, [r7, #0]
 80123a2:	0a5b      	lsrs	r3, r3, #9
 80123a4:	441a      	add	r2, r3
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80123aa:	693b      	ldr	r3, [r7, #16]
 80123ac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80123b0:	683b      	ldr	r3, [r7, #0]
 80123b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80123b6:	441a      	add	r2, r3
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80123bc:	2300      	movs	r3, #0
}
 80123be:	4618      	mov	r0, r3
 80123c0:	3718      	adds	r7, #24
 80123c2:	46bd      	mov	sp, r7
 80123c4:	bd80      	pop	{r7, pc}

080123c6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80123c6:	b580      	push	{r7, lr}
 80123c8:	b086      	sub	sp, #24
 80123ca:	af00      	add	r7, sp, #0
 80123cc:	6078      	str	r0, [r7, #4]
 80123ce:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	695b      	ldr	r3, [r3, #20]
 80123da:	3320      	adds	r3, #32
 80123dc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	69db      	ldr	r3, [r3, #28]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d003      	beq.n	80123ee <dir_next+0x28>
 80123e6:	68bb      	ldr	r3, [r7, #8]
 80123e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80123ec:	d301      	bcc.n	80123f2 <dir_next+0x2c>
 80123ee:	2304      	movs	r3, #4
 80123f0:	e0aa      	b.n	8012548 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80123f2:	68bb      	ldr	r3, [r7, #8]
 80123f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	f040 8098 	bne.w	801252e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	69db      	ldr	r3, [r3, #28]
 8012402:	1c5a      	adds	r2, r3, #1
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	699b      	ldr	r3, [r3, #24]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d10b      	bne.n	8012428 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	095b      	lsrs	r3, r3, #5
 8012414:	68fa      	ldr	r2, [r7, #12]
 8012416:	8912      	ldrh	r2, [r2, #8]
 8012418:	4293      	cmp	r3, r2
 801241a:	f0c0 8088 	bcc.w	801252e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	2200      	movs	r2, #0
 8012422:	61da      	str	r2, [r3, #28]
 8012424:	2304      	movs	r3, #4
 8012426:	e08f      	b.n	8012548 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012428:	68bb      	ldr	r3, [r7, #8]
 801242a:	0a5b      	lsrs	r3, r3, #9
 801242c:	68fa      	ldr	r2, [r7, #12]
 801242e:	8952      	ldrh	r2, [r2, #10]
 8012430:	3a01      	subs	r2, #1
 8012432:	4013      	ands	r3, r2
 8012434:	2b00      	cmp	r3, #0
 8012436:	d17a      	bne.n	801252e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012438:	687a      	ldr	r2, [r7, #4]
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	699b      	ldr	r3, [r3, #24]
 801243e:	4619      	mov	r1, r3
 8012440:	4610      	mov	r0, r2
 8012442:	f7ff fc80 	bl	8011d46 <get_fat>
 8012446:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012448:	697b      	ldr	r3, [r7, #20]
 801244a:	2b01      	cmp	r3, #1
 801244c:	d801      	bhi.n	8012452 <dir_next+0x8c>
 801244e:	2302      	movs	r3, #2
 8012450:	e07a      	b.n	8012548 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012452:	697b      	ldr	r3, [r7, #20]
 8012454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012458:	d101      	bne.n	801245e <dir_next+0x98>
 801245a:	2301      	movs	r3, #1
 801245c:	e074      	b.n	8012548 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	699b      	ldr	r3, [r3, #24]
 8012462:	697a      	ldr	r2, [r7, #20]
 8012464:	429a      	cmp	r2, r3
 8012466:	d358      	bcc.n	801251a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012468:	683b      	ldr	r3, [r7, #0]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d104      	bne.n	8012478 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	2200      	movs	r2, #0
 8012472:	61da      	str	r2, [r3, #28]
 8012474:	2304      	movs	r3, #4
 8012476:	e067      	b.n	8012548 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012478:	687a      	ldr	r2, [r7, #4]
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	699b      	ldr	r3, [r3, #24]
 801247e:	4619      	mov	r1, r3
 8012480:	4610      	mov	r0, r2
 8012482:	f7ff fe59 	bl	8012138 <create_chain>
 8012486:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012488:	697b      	ldr	r3, [r7, #20]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d101      	bne.n	8012492 <dir_next+0xcc>
 801248e:	2307      	movs	r3, #7
 8012490:	e05a      	b.n	8012548 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012492:	697b      	ldr	r3, [r7, #20]
 8012494:	2b01      	cmp	r3, #1
 8012496:	d101      	bne.n	801249c <dir_next+0xd6>
 8012498:	2302      	movs	r3, #2
 801249a:	e055      	b.n	8012548 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801249c:	697b      	ldr	r3, [r7, #20]
 801249e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124a2:	d101      	bne.n	80124a8 <dir_next+0xe2>
 80124a4:	2301      	movs	r3, #1
 80124a6:	e04f      	b.n	8012548 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80124a8:	68f8      	ldr	r0, [r7, #12]
 80124aa:	f7ff fb4d 	bl	8011b48 <sync_window>
 80124ae:	4603      	mov	r3, r0
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d001      	beq.n	80124b8 <dir_next+0xf2>
 80124b4:	2301      	movs	r3, #1
 80124b6:	e047      	b.n	8012548 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	3334      	adds	r3, #52	; 0x34
 80124bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80124c0:	2100      	movs	r1, #0
 80124c2:	4618      	mov	r0, r3
 80124c4:	f7ff f977 	bl	80117b6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80124c8:	2300      	movs	r3, #0
 80124ca:	613b      	str	r3, [r7, #16]
 80124cc:	6979      	ldr	r1, [r7, #20]
 80124ce:	68f8      	ldr	r0, [r7, #12]
 80124d0:	f7ff fc1a 	bl	8011d08 <clust2sect>
 80124d4:	4602      	mov	r2, r0
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	631a      	str	r2, [r3, #48]	; 0x30
 80124da:	e012      	b.n	8012502 <dir_next+0x13c>
						fs->wflag = 1;
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	2201      	movs	r2, #1
 80124e0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80124e2:	68f8      	ldr	r0, [r7, #12]
 80124e4:	f7ff fb30 	bl	8011b48 <sync_window>
 80124e8:	4603      	mov	r3, r0
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d001      	beq.n	80124f2 <dir_next+0x12c>
 80124ee:	2301      	movs	r3, #1
 80124f0:	e02a      	b.n	8012548 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80124f2:	693b      	ldr	r3, [r7, #16]
 80124f4:	3301      	adds	r3, #1
 80124f6:	613b      	str	r3, [r7, #16]
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124fc:	1c5a      	adds	r2, r3, #1
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	631a      	str	r2, [r3, #48]	; 0x30
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	895b      	ldrh	r3, [r3, #10]
 8012506:	461a      	mov	r2, r3
 8012508:	693b      	ldr	r3, [r7, #16]
 801250a:	4293      	cmp	r3, r2
 801250c:	d3e6      	bcc.n	80124dc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012512:	693b      	ldr	r3, [r7, #16]
 8012514:	1ad2      	subs	r2, r2, r3
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	697a      	ldr	r2, [r7, #20]
 801251e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012520:	6979      	ldr	r1, [r7, #20]
 8012522:	68f8      	ldr	r0, [r7, #12]
 8012524:	f7ff fbf0 	bl	8011d08 <clust2sect>
 8012528:	4602      	mov	r2, r0
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	68ba      	ldr	r2, [r7, #8]
 8012532:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801253a:	68bb      	ldr	r3, [r7, #8]
 801253c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012540:	441a      	add	r2, r3
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012546:	2300      	movs	r3, #0
}
 8012548:	4618      	mov	r0, r3
 801254a:	3718      	adds	r7, #24
 801254c:	46bd      	mov	sp, r7
 801254e:	bd80      	pop	{r7, pc}

08012550 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012550:	b580      	push	{r7, lr}
 8012552:	b086      	sub	sp, #24
 8012554:	af00      	add	r7, sp, #0
 8012556:	6078      	str	r0, [r7, #4]
 8012558:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012560:	2100      	movs	r1, #0
 8012562:	6878      	ldr	r0, [r7, #4]
 8012564:	f7ff feb4 	bl	80122d0 <dir_sdi>
 8012568:	4603      	mov	r3, r0
 801256a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801256c:	7dfb      	ldrb	r3, [r7, #23]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d12b      	bne.n	80125ca <dir_alloc+0x7a>
		n = 0;
 8012572:	2300      	movs	r3, #0
 8012574:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	69db      	ldr	r3, [r3, #28]
 801257a:	4619      	mov	r1, r3
 801257c:	68f8      	ldr	r0, [r7, #12]
 801257e:	f7ff fb27 	bl	8011bd0 <move_window>
 8012582:	4603      	mov	r3, r0
 8012584:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012586:	7dfb      	ldrb	r3, [r7, #23]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d11d      	bne.n	80125c8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	6a1b      	ldr	r3, [r3, #32]
 8012590:	781b      	ldrb	r3, [r3, #0]
 8012592:	2be5      	cmp	r3, #229	; 0xe5
 8012594:	d004      	beq.n	80125a0 <dir_alloc+0x50>
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	6a1b      	ldr	r3, [r3, #32]
 801259a:	781b      	ldrb	r3, [r3, #0]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d107      	bne.n	80125b0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80125a0:	693b      	ldr	r3, [r7, #16]
 80125a2:	3301      	adds	r3, #1
 80125a4:	613b      	str	r3, [r7, #16]
 80125a6:	693a      	ldr	r2, [r7, #16]
 80125a8:	683b      	ldr	r3, [r7, #0]
 80125aa:	429a      	cmp	r2, r3
 80125ac:	d102      	bne.n	80125b4 <dir_alloc+0x64>
 80125ae:	e00c      	b.n	80125ca <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80125b0:	2300      	movs	r3, #0
 80125b2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80125b4:	2101      	movs	r1, #1
 80125b6:	6878      	ldr	r0, [r7, #4]
 80125b8:	f7ff ff05 	bl	80123c6 <dir_next>
 80125bc:	4603      	mov	r3, r0
 80125be:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80125c0:	7dfb      	ldrb	r3, [r7, #23]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d0d7      	beq.n	8012576 <dir_alloc+0x26>
 80125c6:	e000      	b.n	80125ca <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80125c8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80125ca:	7dfb      	ldrb	r3, [r7, #23]
 80125cc:	2b04      	cmp	r3, #4
 80125ce:	d101      	bne.n	80125d4 <dir_alloc+0x84>
 80125d0:	2307      	movs	r3, #7
 80125d2:	75fb      	strb	r3, [r7, #23]
	return res;
 80125d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80125d6:	4618      	mov	r0, r3
 80125d8:	3718      	adds	r7, #24
 80125da:	46bd      	mov	sp, r7
 80125dc:	bd80      	pop	{r7, pc}

080125de <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80125de:	b580      	push	{r7, lr}
 80125e0:	b084      	sub	sp, #16
 80125e2:	af00      	add	r7, sp, #0
 80125e4:	6078      	str	r0, [r7, #4]
 80125e6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80125e8:	683b      	ldr	r3, [r7, #0]
 80125ea:	331a      	adds	r3, #26
 80125ec:	4618      	mov	r0, r3
 80125ee:	f7ff f83f 	bl	8011670 <ld_word>
 80125f2:	4603      	mov	r3, r0
 80125f4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	781b      	ldrb	r3, [r3, #0]
 80125fa:	2b03      	cmp	r3, #3
 80125fc:	d109      	bne.n	8012612 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80125fe:	683b      	ldr	r3, [r7, #0]
 8012600:	3314      	adds	r3, #20
 8012602:	4618      	mov	r0, r3
 8012604:	f7ff f834 	bl	8011670 <ld_word>
 8012608:	4603      	mov	r3, r0
 801260a:	041b      	lsls	r3, r3, #16
 801260c:	68fa      	ldr	r2, [r7, #12]
 801260e:	4313      	orrs	r3, r2
 8012610:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012612:	68fb      	ldr	r3, [r7, #12]
}
 8012614:	4618      	mov	r0, r3
 8012616:	3710      	adds	r7, #16
 8012618:	46bd      	mov	sp, r7
 801261a:	bd80      	pop	{r7, pc}

0801261c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801261c:	b580      	push	{r7, lr}
 801261e:	b084      	sub	sp, #16
 8012620:	af00      	add	r7, sp, #0
 8012622:	60f8      	str	r0, [r7, #12]
 8012624:	60b9      	str	r1, [r7, #8]
 8012626:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012628:	68bb      	ldr	r3, [r7, #8]
 801262a:	331a      	adds	r3, #26
 801262c:	687a      	ldr	r2, [r7, #4]
 801262e:	b292      	uxth	r2, r2
 8012630:	4611      	mov	r1, r2
 8012632:	4618      	mov	r0, r3
 8012634:	f7ff f857 	bl	80116e6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	781b      	ldrb	r3, [r3, #0]
 801263c:	2b03      	cmp	r3, #3
 801263e:	d109      	bne.n	8012654 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012640:	68bb      	ldr	r3, [r7, #8]
 8012642:	f103 0214 	add.w	r2, r3, #20
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	0c1b      	lsrs	r3, r3, #16
 801264a:	b29b      	uxth	r3, r3
 801264c:	4619      	mov	r1, r3
 801264e:	4610      	mov	r0, r2
 8012650:	f7ff f849 	bl	80116e6 <st_word>
	}
}
 8012654:	bf00      	nop
 8012656:	3710      	adds	r7, #16
 8012658:	46bd      	mov	sp, r7
 801265a:	bd80      	pop	{r7, pc}

0801265c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801265c:	b590      	push	{r4, r7, lr}
 801265e:	b087      	sub	sp, #28
 8012660:	af00      	add	r7, sp, #0
 8012662:	6078      	str	r0, [r7, #4]
 8012664:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8012666:	683b      	ldr	r3, [r7, #0]
 8012668:	331a      	adds	r3, #26
 801266a:	4618      	mov	r0, r3
 801266c:	f7ff f800 	bl	8011670 <ld_word>
 8012670:	4603      	mov	r3, r0
 8012672:	2b00      	cmp	r3, #0
 8012674:	d001      	beq.n	801267a <cmp_lfn+0x1e>
 8012676:	2300      	movs	r3, #0
 8012678:	e059      	b.n	801272e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801267a:	683b      	ldr	r3, [r7, #0]
 801267c:	781b      	ldrb	r3, [r3, #0]
 801267e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012682:	1e5a      	subs	r2, r3, #1
 8012684:	4613      	mov	r3, r2
 8012686:	005b      	lsls	r3, r3, #1
 8012688:	4413      	add	r3, r2
 801268a:	009b      	lsls	r3, r3, #2
 801268c:	4413      	add	r3, r2
 801268e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012690:	2301      	movs	r3, #1
 8012692:	81fb      	strh	r3, [r7, #14]
 8012694:	2300      	movs	r3, #0
 8012696:	613b      	str	r3, [r7, #16]
 8012698:	e033      	b.n	8012702 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801269a:	4a27      	ldr	r2, [pc, #156]	; (8012738 <cmp_lfn+0xdc>)
 801269c:	693b      	ldr	r3, [r7, #16]
 801269e:	4413      	add	r3, r2
 80126a0:	781b      	ldrb	r3, [r3, #0]
 80126a2:	461a      	mov	r2, r3
 80126a4:	683b      	ldr	r3, [r7, #0]
 80126a6:	4413      	add	r3, r2
 80126a8:	4618      	mov	r0, r3
 80126aa:	f7fe ffe1 	bl	8011670 <ld_word>
 80126ae:	4603      	mov	r3, r0
 80126b0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80126b2:	89fb      	ldrh	r3, [r7, #14]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d01a      	beq.n	80126ee <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80126b8:	697b      	ldr	r3, [r7, #20]
 80126ba:	2bfe      	cmp	r3, #254	; 0xfe
 80126bc:	d812      	bhi.n	80126e4 <cmp_lfn+0x88>
 80126be:	89bb      	ldrh	r3, [r7, #12]
 80126c0:	4618      	mov	r0, r3
 80126c2:	f7fe fead 	bl	8011420 <ff_wtoupper>
 80126c6:	4603      	mov	r3, r0
 80126c8:	461c      	mov	r4, r3
 80126ca:	697b      	ldr	r3, [r7, #20]
 80126cc:	1c5a      	adds	r2, r3, #1
 80126ce:	617a      	str	r2, [r7, #20]
 80126d0:	005b      	lsls	r3, r3, #1
 80126d2:	687a      	ldr	r2, [r7, #4]
 80126d4:	4413      	add	r3, r2
 80126d6:	881b      	ldrh	r3, [r3, #0]
 80126d8:	4618      	mov	r0, r3
 80126da:	f7fe fea1 	bl	8011420 <ff_wtoupper>
 80126de:	4603      	mov	r3, r0
 80126e0:	429c      	cmp	r4, r3
 80126e2:	d001      	beq.n	80126e8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80126e4:	2300      	movs	r3, #0
 80126e6:	e022      	b.n	801272e <cmp_lfn+0xd2>
			}
			wc = uc;
 80126e8:	89bb      	ldrh	r3, [r7, #12]
 80126ea:	81fb      	strh	r3, [r7, #14]
 80126ec:	e006      	b.n	80126fc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80126ee:	89bb      	ldrh	r3, [r7, #12]
 80126f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80126f4:	4293      	cmp	r3, r2
 80126f6:	d001      	beq.n	80126fc <cmp_lfn+0xa0>
 80126f8:	2300      	movs	r3, #0
 80126fa:	e018      	b.n	801272e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80126fc:	693b      	ldr	r3, [r7, #16]
 80126fe:	3301      	adds	r3, #1
 8012700:	613b      	str	r3, [r7, #16]
 8012702:	693b      	ldr	r3, [r7, #16]
 8012704:	2b0c      	cmp	r3, #12
 8012706:	d9c8      	bls.n	801269a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	781b      	ldrb	r3, [r3, #0]
 801270c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012710:	2b00      	cmp	r3, #0
 8012712:	d00b      	beq.n	801272c <cmp_lfn+0xd0>
 8012714:	89fb      	ldrh	r3, [r7, #14]
 8012716:	2b00      	cmp	r3, #0
 8012718:	d008      	beq.n	801272c <cmp_lfn+0xd0>
 801271a:	697b      	ldr	r3, [r7, #20]
 801271c:	005b      	lsls	r3, r3, #1
 801271e:	687a      	ldr	r2, [r7, #4]
 8012720:	4413      	add	r3, r2
 8012722:	881b      	ldrh	r3, [r3, #0]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d001      	beq.n	801272c <cmp_lfn+0xd0>
 8012728:	2300      	movs	r3, #0
 801272a:	e000      	b.n	801272e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801272c:	2301      	movs	r3, #1
}
 801272e:	4618      	mov	r0, r3
 8012730:	371c      	adds	r7, #28
 8012732:	46bd      	mov	sp, r7
 8012734:	bd90      	pop	{r4, r7, pc}
 8012736:	bf00      	nop
 8012738:	0802a67c 	.word	0x0802a67c

0801273c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801273c:	b580      	push	{r7, lr}
 801273e:	b086      	sub	sp, #24
 8012740:	af00      	add	r7, sp, #0
 8012742:	6078      	str	r0, [r7, #4]
 8012744:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8012746:	683b      	ldr	r3, [r7, #0]
 8012748:	331a      	adds	r3, #26
 801274a:	4618      	mov	r0, r3
 801274c:	f7fe ff90 	bl	8011670 <ld_word>
 8012750:	4603      	mov	r3, r0
 8012752:	2b00      	cmp	r3, #0
 8012754:	d001      	beq.n	801275a <pick_lfn+0x1e>
 8012756:	2300      	movs	r3, #0
 8012758:	e04d      	b.n	80127f6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801275a:	683b      	ldr	r3, [r7, #0]
 801275c:	781b      	ldrb	r3, [r3, #0]
 801275e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012762:	1e5a      	subs	r2, r3, #1
 8012764:	4613      	mov	r3, r2
 8012766:	005b      	lsls	r3, r3, #1
 8012768:	4413      	add	r3, r2
 801276a:	009b      	lsls	r3, r3, #2
 801276c:	4413      	add	r3, r2
 801276e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012770:	2301      	movs	r3, #1
 8012772:	81fb      	strh	r3, [r7, #14]
 8012774:	2300      	movs	r3, #0
 8012776:	613b      	str	r3, [r7, #16]
 8012778:	e028      	b.n	80127cc <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801277a:	4a21      	ldr	r2, [pc, #132]	; (8012800 <pick_lfn+0xc4>)
 801277c:	693b      	ldr	r3, [r7, #16]
 801277e:	4413      	add	r3, r2
 8012780:	781b      	ldrb	r3, [r3, #0]
 8012782:	461a      	mov	r2, r3
 8012784:	683b      	ldr	r3, [r7, #0]
 8012786:	4413      	add	r3, r2
 8012788:	4618      	mov	r0, r3
 801278a:	f7fe ff71 	bl	8011670 <ld_word>
 801278e:	4603      	mov	r3, r0
 8012790:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8012792:	89fb      	ldrh	r3, [r7, #14]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d00f      	beq.n	80127b8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8012798:	697b      	ldr	r3, [r7, #20]
 801279a:	2bfe      	cmp	r3, #254	; 0xfe
 801279c:	d901      	bls.n	80127a2 <pick_lfn+0x66>
 801279e:	2300      	movs	r3, #0
 80127a0:	e029      	b.n	80127f6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80127a2:	89bb      	ldrh	r3, [r7, #12]
 80127a4:	81fb      	strh	r3, [r7, #14]
 80127a6:	697b      	ldr	r3, [r7, #20]
 80127a8:	1c5a      	adds	r2, r3, #1
 80127aa:	617a      	str	r2, [r7, #20]
 80127ac:	005b      	lsls	r3, r3, #1
 80127ae:	687a      	ldr	r2, [r7, #4]
 80127b0:	4413      	add	r3, r2
 80127b2:	89fa      	ldrh	r2, [r7, #14]
 80127b4:	801a      	strh	r2, [r3, #0]
 80127b6:	e006      	b.n	80127c6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80127b8:	89bb      	ldrh	r3, [r7, #12]
 80127ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80127be:	4293      	cmp	r3, r2
 80127c0:	d001      	beq.n	80127c6 <pick_lfn+0x8a>
 80127c2:	2300      	movs	r3, #0
 80127c4:	e017      	b.n	80127f6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80127c6:	693b      	ldr	r3, [r7, #16]
 80127c8:	3301      	adds	r3, #1
 80127ca:	613b      	str	r3, [r7, #16]
 80127cc:	693b      	ldr	r3, [r7, #16]
 80127ce:	2b0c      	cmp	r3, #12
 80127d0:	d9d3      	bls.n	801277a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80127d2:	683b      	ldr	r3, [r7, #0]
 80127d4:	781b      	ldrb	r3, [r3, #0]
 80127d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d00a      	beq.n	80127f4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80127de:	697b      	ldr	r3, [r7, #20]
 80127e0:	2bfe      	cmp	r3, #254	; 0xfe
 80127e2:	d901      	bls.n	80127e8 <pick_lfn+0xac>
 80127e4:	2300      	movs	r3, #0
 80127e6:	e006      	b.n	80127f6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80127e8:	697b      	ldr	r3, [r7, #20]
 80127ea:	005b      	lsls	r3, r3, #1
 80127ec:	687a      	ldr	r2, [r7, #4]
 80127ee:	4413      	add	r3, r2
 80127f0:	2200      	movs	r2, #0
 80127f2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80127f4:	2301      	movs	r3, #1
}
 80127f6:	4618      	mov	r0, r3
 80127f8:	3718      	adds	r7, #24
 80127fa:	46bd      	mov	sp, r7
 80127fc:	bd80      	pop	{r7, pc}
 80127fe:	bf00      	nop
 8012800:	0802a67c 	.word	0x0802a67c

08012804 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8012804:	b580      	push	{r7, lr}
 8012806:	b088      	sub	sp, #32
 8012808:	af00      	add	r7, sp, #0
 801280a:	60f8      	str	r0, [r7, #12]
 801280c:	60b9      	str	r1, [r7, #8]
 801280e:	4611      	mov	r1, r2
 8012810:	461a      	mov	r2, r3
 8012812:	460b      	mov	r3, r1
 8012814:	71fb      	strb	r3, [r7, #7]
 8012816:	4613      	mov	r3, r2
 8012818:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801281a:	68bb      	ldr	r3, [r7, #8]
 801281c:	330d      	adds	r3, #13
 801281e:	79ba      	ldrb	r2, [r7, #6]
 8012820:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8012822:	68bb      	ldr	r3, [r7, #8]
 8012824:	330b      	adds	r3, #11
 8012826:	220f      	movs	r2, #15
 8012828:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801282a:	68bb      	ldr	r3, [r7, #8]
 801282c:	330c      	adds	r3, #12
 801282e:	2200      	movs	r2, #0
 8012830:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8012832:	68bb      	ldr	r3, [r7, #8]
 8012834:	331a      	adds	r3, #26
 8012836:	2100      	movs	r1, #0
 8012838:	4618      	mov	r0, r3
 801283a:	f7fe ff54 	bl	80116e6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801283e:	79fb      	ldrb	r3, [r7, #7]
 8012840:	1e5a      	subs	r2, r3, #1
 8012842:	4613      	mov	r3, r2
 8012844:	005b      	lsls	r3, r3, #1
 8012846:	4413      	add	r3, r2
 8012848:	009b      	lsls	r3, r3, #2
 801284a:	4413      	add	r3, r2
 801284c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801284e:	2300      	movs	r3, #0
 8012850:	82fb      	strh	r3, [r7, #22]
 8012852:	2300      	movs	r3, #0
 8012854:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012856:	8afb      	ldrh	r3, [r7, #22]
 8012858:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801285c:	4293      	cmp	r3, r2
 801285e:	d007      	beq.n	8012870 <put_lfn+0x6c>
 8012860:	69fb      	ldr	r3, [r7, #28]
 8012862:	1c5a      	adds	r2, r3, #1
 8012864:	61fa      	str	r2, [r7, #28]
 8012866:	005b      	lsls	r3, r3, #1
 8012868:	68fa      	ldr	r2, [r7, #12]
 801286a:	4413      	add	r3, r2
 801286c:	881b      	ldrh	r3, [r3, #0]
 801286e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8012870:	4a17      	ldr	r2, [pc, #92]	; (80128d0 <put_lfn+0xcc>)
 8012872:	69bb      	ldr	r3, [r7, #24]
 8012874:	4413      	add	r3, r2
 8012876:	781b      	ldrb	r3, [r3, #0]
 8012878:	461a      	mov	r2, r3
 801287a:	68bb      	ldr	r3, [r7, #8]
 801287c:	4413      	add	r3, r2
 801287e:	8afa      	ldrh	r2, [r7, #22]
 8012880:	4611      	mov	r1, r2
 8012882:	4618      	mov	r0, r3
 8012884:	f7fe ff2f 	bl	80116e6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012888:	8afb      	ldrh	r3, [r7, #22]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d102      	bne.n	8012894 <put_lfn+0x90>
 801288e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012892:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8012894:	69bb      	ldr	r3, [r7, #24]
 8012896:	3301      	adds	r3, #1
 8012898:	61bb      	str	r3, [r7, #24]
 801289a:	69bb      	ldr	r3, [r7, #24]
 801289c:	2b0c      	cmp	r3, #12
 801289e:	d9da      	bls.n	8012856 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80128a0:	8afb      	ldrh	r3, [r7, #22]
 80128a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80128a6:	4293      	cmp	r3, r2
 80128a8:	d006      	beq.n	80128b8 <put_lfn+0xb4>
 80128aa:	69fb      	ldr	r3, [r7, #28]
 80128ac:	005b      	lsls	r3, r3, #1
 80128ae:	68fa      	ldr	r2, [r7, #12]
 80128b0:	4413      	add	r3, r2
 80128b2:	881b      	ldrh	r3, [r3, #0]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d103      	bne.n	80128c0 <put_lfn+0xbc>
 80128b8:	79fb      	ldrb	r3, [r7, #7]
 80128ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80128be:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80128c0:	68bb      	ldr	r3, [r7, #8]
 80128c2:	79fa      	ldrb	r2, [r7, #7]
 80128c4:	701a      	strb	r2, [r3, #0]
}
 80128c6:	bf00      	nop
 80128c8:	3720      	adds	r7, #32
 80128ca:	46bd      	mov	sp, r7
 80128cc:	bd80      	pop	{r7, pc}
 80128ce:	bf00      	nop
 80128d0:	0802a67c 	.word	0x0802a67c

080128d4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b08c      	sub	sp, #48	; 0x30
 80128d8:	af00      	add	r7, sp, #0
 80128da:	60f8      	str	r0, [r7, #12]
 80128dc:	60b9      	str	r1, [r7, #8]
 80128de:	607a      	str	r2, [r7, #4]
 80128e0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80128e2:	220b      	movs	r2, #11
 80128e4:	68b9      	ldr	r1, [r7, #8]
 80128e6:	68f8      	ldr	r0, [r7, #12]
 80128e8:	f7fe ff44 	bl	8011774 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80128ec:	683b      	ldr	r3, [r7, #0]
 80128ee:	2b05      	cmp	r3, #5
 80128f0:	d929      	bls.n	8012946 <gen_numname+0x72>
		sr = seq;
 80128f2:	683b      	ldr	r3, [r7, #0]
 80128f4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80128f6:	e020      	b.n	801293a <gen_numname+0x66>
			wc = *lfn++;
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	1c9a      	adds	r2, r3, #2
 80128fc:	607a      	str	r2, [r7, #4]
 80128fe:	881b      	ldrh	r3, [r3, #0]
 8012900:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8012902:	2300      	movs	r3, #0
 8012904:	62bb      	str	r3, [r7, #40]	; 0x28
 8012906:	e015      	b.n	8012934 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8012908:	69fb      	ldr	r3, [r7, #28]
 801290a:	005a      	lsls	r2, r3, #1
 801290c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801290e:	f003 0301 	and.w	r3, r3, #1
 8012912:	4413      	add	r3, r2
 8012914:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8012916:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012918:	085b      	lsrs	r3, r3, #1
 801291a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801291c:	69fb      	ldr	r3, [r7, #28]
 801291e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012922:	2b00      	cmp	r3, #0
 8012924:	d003      	beq.n	801292e <gen_numname+0x5a>
 8012926:	69fa      	ldr	r2, [r7, #28]
 8012928:	4b31      	ldr	r3, [pc, #196]	; (80129f0 <gen_numname+0x11c>)
 801292a:	4053      	eors	r3, r2
 801292c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801292e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012930:	3301      	adds	r3, #1
 8012932:	62bb      	str	r3, [r7, #40]	; 0x28
 8012934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012936:	2b0f      	cmp	r3, #15
 8012938:	d9e6      	bls.n	8012908 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	881b      	ldrh	r3, [r3, #0]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d1da      	bne.n	80128f8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8012942:	69fb      	ldr	r3, [r7, #28]
 8012944:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8012946:	2307      	movs	r3, #7
 8012948:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801294a:	683b      	ldr	r3, [r7, #0]
 801294c:	b2db      	uxtb	r3, r3
 801294e:	f003 030f 	and.w	r3, r3, #15
 8012952:	b2db      	uxtb	r3, r3
 8012954:	3330      	adds	r3, #48	; 0x30
 8012956:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 801295a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801295e:	2b39      	cmp	r3, #57	; 0x39
 8012960:	d904      	bls.n	801296c <gen_numname+0x98>
 8012962:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012966:	3307      	adds	r3, #7
 8012968:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 801296c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801296e:	1e5a      	subs	r2, r3, #1
 8012970:	62ba      	str	r2, [r7, #40]	; 0x28
 8012972:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012976:	4413      	add	r3, r2
 8012978:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801297c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8012980:	683b      	ldr	r3, [r7, #0]
 8012982:	091b      	lsrs	r3, r3, #4
 8012984:	603b      	str	r3, [r7, #0]
	} while (seq);
 8012986:	683b      	ldr	r3, [r7, #0]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d1de      	bne.n	801294a <gen_numname+0x76>
	ns[i] = '~';
 801298c:	f107 0214 	add.w	r2, r7, #20
 8012990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012992:	4413      	add	r3, r2
 8012994:	227e      	movs	r2, #126	; 0x7e
 8012996:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8012998:	2300      	movs	r3, #0
 801299a:	627b      	str	r3, [r7, #36]	; 0x24
 801299c:	e002      	b.n	80129a4 <gen_numname+0xd0>
 801299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129a0:	3301      	adds	r3, #1
 80129a2:	627b      	str	r3, [r7, #36]	; 0x24
 80129a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129a8:	429a      	cmp	r2, r3
 80129aa:	d205      	bcs.n	80129b8 <gen_numname+0xe4>
 80129ac:	68fa      	ldr	r2, [r7, #12]
 80129ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129b0:	4413      	add	r3, r2
 80129b2:	781b      	ldrb	r3, [r3, #0]
 80129b4:	2b20      	cmp	r3, #32
 80129b6:	d1f2      	bne.n	801299e <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80129b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129ba:	2b07      	cmp	r3, #7
 80129bc:	d808      	bhi.n	80129d0 <gen_numname+0xfc>
 80129be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129c0:	1c5a      	adds	r2, r3, #1
 80129c2:	62ba      	str	r2, [r7, #40]	; 0x28
 80129c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80129c8:	4413      	add	r3, r2
 80129ca:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80129ce:	e000      	b.n	80129d2 <gen_numname+0xfe>
 80129d0:	2120      	movs	r1, #32
 80129d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129d4:	1c5a      	adds	r2, r3, #1
 80129d6:	627a      	str	r2, [r7, #36]	; 0x24
 80129d8:	68fa      	ldr	r2, [r7, #12]
 80129da:	4413      	add	r3, r2
 80129dc:	460a      	mov	r2, r1
 80129de:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80129e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129e2:	2b07      	cmp	r3, #7
 80129e4:	d9e8      	bls.n	80129b8 <gen_numname+0xe4>
}
 80129e6:	bf00      	nop
 80129e8:	bf00      	nop
 80129ea:	3730      	adds	r7, #48	; 0x30
 80129ec:	46bd      	mov	sp, r7
 80129ee:	bd80      	pop	{r7, pc}
 80129f0:	00011021 	.word	0x00011021

080129f4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80129f4:	b480      	push	{r7}
 80129f6:	b085      	sub	sp, #20
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80129fc:	2300      	movs	r3, #0
 80129fe:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8012a00:	230b      	movs	r3, #11
 8012a02:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8012a04:	7bfb      	ldrb	r3, [r7, #15]
 8012a06:	b2da      	uxtb	r2, r3
 8012a08:	0852      	lsrs	r2, r2, #1
 8012a0a:	01db      	lsls	r3, r3, #7
 8012a0c:	4313      	orrs	r3, r2
 8012a0e:	b2da      	uxtb	r2, r3
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	1c59      	adds	r1, r3, #1
 8012a14:	6079      	str	r1, [r7, #4]
 8012a16:	781b      	ldrb	r3, [r3, #0]
 8012a18:	4413      	add	r3, r2
 8012a1a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8012a1c:	68bb      	ldr	r3, [r7, #8]
 8012a1e:	3b01      	subs	r3, #1
 8012a20:	60bb      	str	r3, [r7, #8]
 8012a22:	68bb      	ldr	r3, [r7, #8]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d1ed      	bne.n	8012a04 <sum_sfn+0x10>
	return sum;
 8012a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	3714      	adds	r7, #20
 8012a2e:	46bd      	mov	sp, r7
 8012a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a34:	4770      	bx	lr

08012a36 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012a36:	b580      	push	{r7, lr}
 8012a38:	b086      	sub	sp, #24
 8012a3a:	af00      	add	r7, sp, #0
 8012a3c:	6078      	str	r0, [r7, #4]
 8012a3e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012a40:	2304      	movs	r3, #4
 8012a42:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8012a4a:	23ff      	movs	r3, #255	; 0xff
 8012a4c:	757b      	strb	r3, [r7, #21]
 8012a4e:	23ff      	movs	r3, #255	; 0xff
 8012a50:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8012a52:	e081      	b.n	8012b58 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	69db      	ldr	r3, [r3, #28]
 8012a58:	4619      	mov	r1, r3
 8012a5a:	6938      	ldr	r0, [r7, #16]
 8012a5c:	f7ff f8b8 	bl	8011bd0 <move_window>
 8012a60:	4603      	mov	r3, r0
 8012a62:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012a64:	7dfb      	ldrb	r3, [r7, #23]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d17c      	bne.n	8012b64 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	6a1b      	ldr	r3, [r3, #32]
 8012a6e:	781b      	ldrb	r3, [r3, #0]
 8012a70:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8012a72:	7dbb      	ldrb	r3, [r7, #22]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d102      	bne.n	8012a7e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012a78:	2304      	movs	r3, #4
 8012a7a:	75fb      	strb	r3, [r7, #23]
 8012a7c:	e077      	b.n	8012b6e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	6a1b      	ldr	r3, [r3, #32]
 8012a82:	330b      	adds	r3, #11
 8012a84:	781b      	ldrb	r3, [r3, #0]
 8012a86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012a8a:	73fb      	strb	r3, [r7, #15]
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	7bfa      	ldrb	r2, [r7, #15]
 8012a90:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8012a92:	7dbb      	ldrb	r3, [r7, #22]
 8012a94:	2be5      	cmp	r3, #229	; 0xe5
 8012a96:	d00e      	beq.n	8012ab6 <dir_read+0x80>
 8012a98:	7dbb      	ldrb	r3, [r7, #22]
 8012a9a:	2b2e      	cmp	r3, #46	; 0x2e
 8012a9c:	d00b      	beq.n	8012ab6 <dir_read+0x80>
 8012a9e:	7bfb      	ldrb	r3, [r7, #15]
 8012aa0:	f023 0320 	bic.w	r3, r3, #32
 8012aa4:	2b08      	cmp	r3, #8
 8012aa6:	bf0c      	ite	eq
 8012aa8:	2301      	moveq	r3, #1
 8012aaa:	2300      	movne	r3, #0
 8012aac:	b2db      	uxtb	r3, r3
 8012aae:	461a      	mov	r2, r3
 8012ab0:	683b      	ldr	r3, [r7, #0]
 8012ab2:	4293      	cmp	r3, r2
 8012ab4:	d002      	beq.n	8012abc <dir_read+0x86>
				ord = 0xFF;
 8012ab6:	23ff      	movs	r3, #255	; 0xff
 8012ab8:	757b      	strb	r3, [r7, #21]
 8012aba:	e044      	b.n	8012b46 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8012abc:	7bfb      	ldrb	r3, [r7, #15]
 8012abe:	2b0f      	cmp	r3, #15
 8012ac0:	d12f      	bne.n	8012b22 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8012ac2:	7dbb      	ldrb	r3, [r7, #22]
 8012ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d00d      	beq.n	8012ae8 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	6a1b      	ldr	r3, [r3, #32]
 8012ad0:	7b5b      	ldrb	r3, [r3, #13]
 8012ad2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8012ad4:	7dbb      	ldrb	r3, [r7, #22]
 8012ad6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012ada:	75bb      	strb	r3, [r7, #22]
 8012adc:	7dbb      	ldrb	r3, [r7, #22]
 8012ade:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	695a      	ldr	r2, [r3, #20]
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012ae8:	7dba      	ldrb	r2, [r7, #22]
 8012aea:	7d7b      	ldrb	r3, [r7, #21]
 8012aec:	429a      	cmp	r2, r3
 8012aee:	d115      	bne.n	8012b1c <dir_read+0xe6>
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	6a1b      	ldr	r3, [r3, #32]
 8012af4:	330d      	adds	r3, #13
 8012af6:	781b      	ldrb	r3, [r3, #0]
 8012af8:	7d3a      	ldrb	r2, [r7, #20]
 8012afa:	429a      	cmp	r2, r3
 8012afc:	d10e      	bne.n	8012b1c <dir_read+0xe6>
 8012afe:	693b      	ldr	r3, [r7, #16]
 8012b00:	68da      	ldr	r2, [r3, #12]
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	6a1b      	ldr	r3, [r3, #32]
 8012b06:	4619      	mov	r1, r3
 8012b08:	4610      	mov	r0, r2
 8012b0a:	f7ff fe17 	bl	801273c <pick_lfn>
 8012b0e:	4603      	mov	r3, r0
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d003      	beq.n	8012b1c <dir_read+0xe6>
 8012b14:	7d7b      	ldrb	r3, [r7, #21]
 8012b16:	3b01      	subs	r3, #1
 8012b18:	b2db      	uxtb	r3, r3
 8012b1a:	e000      	b.n	8012b1e <dir_read+0xe8>
 8012b1c:	23ff      	movs	r3, #255	; 0xff
 8012b1e:	757b      	strb	r3, [r7, #21]
 8012b20:	e011      	b.n	8012b46 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8012b22:	7d7b      	ldrb	r3, [r7, #21]
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d109      	bne.n	8012b3c <dir_read+0x106>
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	6a1b      	ldr	r3, [r3, #32]
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	f7ff ff61 	bl	80129f4 <sum_sfn>
 8012b32:	4603      	mov	r3, r0
 8012b34:	461a      	mov	r2, r3
 8012b36:	7d3b      	ldrb	r3, [r7, #20]
 8012b38:	4293      	cmp	r3, r2
 8012b3a:	d015      	beq.n	8012b68 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8012b42:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8012b44:	e010      	b.n	8012b68 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8012b46:	2100      	movs	r1, #0
 8012b48:	6878      	ldr	r0, [r7, #4]
 8012b4a:	f7ff fc3c 	bl	80123c6 <dir_next>
 8012b4e:	4603      	mov	r3, r0
 8012b50:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012b52:	7dfb      	ldrb	r3, [r7, #23]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d109      	bne.n	8012b6c <dir_read+0x136>
	while (dp->sect) {
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	69db      	ldr	r3, [r3, #28]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	f47f af79 	bne.w	8012a54 <dir_read+0x1e>
 8012b62:	e004      	b.n	8012b6e <dir_read+0x138>
		if (res != FR_OK) break;
 8012b64:	bf00      	nop
 8012b66:	e002      	b.n	8012b6e <dir_read+0x138>
					break;
 8012b68:	bf00      	nop
 8012b6a:	e000      	b.n	8012b6e <dir_read+0x138>
		if (res != FR_OK) break;
 8012b6c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012b6e:	7dfb      	ldrb	r3, [r7, #23]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d002      	beq.n	8012b7a <dir_read+0x144>
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	2200      	movs	r2, #0
 8012b78:	61da      	str	r2, [r3, #28]
	return res;
 8012b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	3718      	adds	r7, #24
 8012b80:	46bd      	mov	sp, r7
 8012b82:	bd80      	pop	{r7, pc}

08012b84 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b086      	sub	sp, #24
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012b92:	2100      	movs	r1, #0
 8012b94:	6878      	ldr	r0, [r7, #4]
 8012b96:	f7ff fb9b 	bl	80122d0 <dir_sdi>
 8012b9a:	4603      	mov	r3, r0
 8012b9c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012b9e:	7dfb      	ldrb	r3, [r7, #23]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d001      	beq.n	8012ba8 <dir_find+0x24>
 8012ba4:	7dfb      	ldrb	r3, [r7, #23]
 8012ba6:	e0a9      	b.n	8012cfc <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012ba8:	23ff      	movs	r3, #255	; 0xff
 8012baa:	753b      	strb	r3, [r7, #20]
 8012bac:	7d3b      	ldrb	r3, [r7, #20]
 8012bae:	757b      	strb	r3, [r7, #21]
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8012bb6:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	69db      	ldr	r3, [r3, #28]
 8012bbc:	4619      	mov	r1, r3
 8012bbe:	6938      	ldr	r0, [r7, #16]
 8012bc0:	f7ff f806 	bl	8011bd0 <move_window>
 8012bc4:	4603      	mov	r3, r0
 8012bc6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012bc8:	7dfb      	ldrb	r3, [r7, #23]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	f040 8090 	bne.w	8012cf0 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	6a1b      	ldr	r3, [r3, #32]
 8012bd4:	781b      	ldrb	r3, [r3, #0]
 8012bd6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012bd8:	7dbb      	ldrb	r3, [r7, #22]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d102      	bne.n	8012be4 <dir_find+0x60>
 8012bde:	2304      	movs	r3, #4
 8012be0:	75fb      	strb	r3, [r7, #23]
 8012be2:	e08a      	b.n	8012cfa <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	6a1b      	ldr	r3, [r3, #32]
 8012be8:	330b      	adds	r3, #11
 8012bea:	781b      	ldrb	r3, [r3, #0]
 8012bec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012bf0:	73fb      	strb	r3, [r7, #15]
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	7bfa      	ldrb	r2, [r7, #15]
 8012bf6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8012bf8:	7dbb      	ldrb	r3, [r7, #22]
 8012bfa:	2be5      	cmp	r3, #229	; 0xe5
 8012bfc:	d007      	beq.n	8012c0e <dir_find+0x8a>
 8012bfe:	7bfb      	ldrb	r3, [r7, #15]
 8012c00:	f003 0308 	and.w	r3, r3, #8
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d009      	beq.n	8012c1c <dir_find+0x98>
 8012c08:	7bfb      	ldrb	r3, [r7, #15]
 8012c0a:	2b0f      	cmp	r3, #15
 8012c0c:	d006      	beq.n	8012c1c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012c0e:	23ff      	movs	r3, #255	; 0xff
 8012c10:	757b      	strb	r3, [r7, #21]
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	f04f 32ff 	mov.w	r2, #4294967295
 8012c18:	631a      	str	r2, [r3, #48]	; 0x30
 8012c1a:	e05e      	b.n	8012cda <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8012c1c:	7bfb      	ldrb	r3, [r7, #15]
 8012c1e:	2b0f      	cmp	r3, #15
 8012c20:	d136      	bne.n	8012c90 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d154      	bne.n	8012cda <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8012c30:	7dbb      	ldrb	r3, [r7, #22]
 8012c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d00d      	beq.n	8012c56 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	6a1b      	ldr	r3, [r3, #32]
 8012c3e:	7b5b      	ldrb	r3, [r3, #13]
 8012c40:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8012c42:	7dbb      	ldrb	r3, [r7, #22]
 8012c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012c48:	75bb      	strb	r3, [r7, #22]
 8012c4a:	7dbb      	ldrb	r3, [r7, #22]
 8012c4c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	695a      	ldr	r2, [r3, #20]
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012c56:	7dba      	ldrb	r2, [r7, #22]
 8012c58:	7d7b      	ldrb	r3, [r7, #21]
 8012c5a:	429a      	cmp	r2, r3
 8012c5c:	d115      	bne.n	8012c8a <dir_find+0x106>
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	6a1b      	ldr	r3, [r3, #32]
 8012c62:	330d      	adds	r3, #13
 8012c64:	781b      	ldrb	r3, [r3, #0]
 8012c66:	7d3a      	ldrb	r2, [r7, #20]
 8012c68:	429a      	cmp	r2, r3
 8012c6a:	d10e      	bne.n	8012c8a <dir_find+0x106>
 8012c6c:	693b      	ldr	r3, [r7, #16]
 8012c6e:	68da      	ldr	r2, [r3, #12]
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	6a1b      	ldr	r3, [r3, #32]
 8012c74:	4619      	mov	r1, r3
 8012c76:	4610      	mov	r0, r2
 8012c78:	f7ff fcf0 	bl	801265c <cmp_lfn>
 8012c7c:	4603      	mov	r3, r0
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d003      	beq.n	8012c8a <dir_find+0x106>
 8012c82:	7d7b      	ldrb	r3, [r7, #21]
 8012c84:	3b01      	subs	r3, #1
 8012c86:	b2db      	uxtb	r3, r3
 8012c88:	e000      	b.n	8012c8c <dir_find+0x108>
 8012c8a:	23ff      	movs	r3, #255	; 0xff
 8012c8c:	757b      	strb	r3, [r7, #21]
 8012c8e:	e024      	b.n	8012cda <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012c90:	7d7b      	ldrb	r3, [r7, #21]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d109      	bne.n	8012caa <dir_find+0x126>
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	6a1b      	ldr	r3, [r3, #32]
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f7ff feaa 	bl	80129f4 <sum_sfn>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	461a      	mov	r2, r3
 8012ca4:	7d3b      	ldrb	r3, [r7, #20]
 8012ca6:	4293      	cmp	r3, r2
 8012ca8:	d024      	beq.n	8012cf4 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012cb0:	f003 0301 	and.w	r3, r3, #1
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d10a      	bne.n	8012cce <dir_find+0x14a>
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	6a18      	ldr	r0, [r3, #32]
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	3324      	adds	r3, #36	; 0x24
 8012cc0:	220b      	movs	r2, #11
 8012cc2:	4619      	mov	r1, r3
 8012cc4:	f7fe fd92 	bl	80117ec <mem_cmp>
 8012cc8:	4603      	mov	r3, r0
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d014      	beq.n	8012cf8 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012cce:	23ff      	movs	r3, #255	; 0xff
 8012cd0:	757b      	strb	r3, [r7, #21]
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8012cd8:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012cda:	2100      	movs	r1, #0
 8012cdc:	6878      	ldr	r0, [r7, #4]
 8012cde:	f7ff fb72 	bl	80123c6 <dir_next>
 8012ce2:	4603      	mov	r3, r0
 8012ce4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012ce6:	7dfb      	ldrb	r3, [r7, #23]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	f43f af65 	beq.w	8012bb8 <dir_find+0x34>
 8012cee:	e004      	b.n	8012cfa <dir_find+0x176>
		if (res != FR_OK) break;
 8012cf0:	bf00      	nop
 8012cf2:	e002      	b.n	8012cfa <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012cf4:	bf00      	nop
 8012cf6:	e000      	b.n	8012cfa <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8012cf8:	bf00      	nop

	return res;
 8012cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	3718      	adds	r7, #24
 8012d00:	46bd      	mov	sp, r7
 8012d02:	bd80      	pop	{r7, pc}

08012d04 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012d04:	b580      	push	{r7, lr}
 8012d06:	b08c      	sub	sp, #48	; 0x30
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012d18:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d001      	beq.n	8012d24 <dir_register+0x20>
 8012d20:	2306      	movs	r3, #6
 8012d22:	e0e0      	b.n	8012ee6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8012d24:	2300      	movs	r3, #0
 8012d26:	627b      	str	r3, [r7, #36]	; 0x24
 8012d28:	e002      	b.n	8012d30 <dir_register+0x2c>
 8012d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d2c:	3301      	adds	r3, #1
 8012d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8012d30:	69fb      	ldr	r3, [r7, #28]
 8012d32:	68da      	ldr	r2, [r3, #12]
 8012d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d36:	005b      	lsls	r3, r3, #1
 8012d38:	4413      	add	r3, r2
 8012d3a:	881b      	ldrh	r3, [r3, #0]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d1f4      	bne.n	8012d2a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8012d46:	f107 030c 	add.w	r3, r7, #12
 8012d4a:	220c      	movs	r2, #12
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	f7fe fd11 	bl	8011774 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8012d52:	7dfb      	ldrb	r3, [r7, #23]
 8012d54:	f003 0301 	and.w	r3, r3, #1
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d032      	beq.n	8012dc2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	2240      	movs	r2, #64	; 0x40
 8012d60:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8012d64:	2301      	movs	r3, #1
 8012d66:	62bb      	str	r3, [r7, #40]	; 0x28
 8012d68:	e016      	b.n	8012d98 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8012d70:	69fb      	ldr	r3, [r7, #28]
 8012d72:	68da      	ldr	r2, [r3, #12]
 8012d74:	f107 010c 	add.w	r1, r7, #12
 8012d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d7a:	f7ff fdab 	bl	80128d4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8012d7e:	6878      	ldr	r0, [r7, #4]
 8012d80:	f7ff ff00 	bl	8012b84 <dir_find>
 8012d84:	4603      	mov	r3, r0
 8012d86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8012d8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d106      	bne.n	8012da0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8012d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d94:	3301      	adds	r3, #1
 8012d96:	62bb      	str	r3, [r7, #40]	; 0x28
 8012d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d9a:	2b63      	cmp	r3, #99	; 0x63
 8012d9c:	d9e5      	bls.n	8012d6a <dir_register+0x66>
 8012d9e:	e000      	b.n	8012da2 <dir_register+0x9e>
			if (res != FR_OK) break;
 8012da0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8012da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012da4:	2b64      	cmp	r3, #100	; 0x64
 8012da6:	d101      	bne.n	8012dac <dir_register+0xa8>
 8012da8:	2307      	movs	r3, #7
 8012daa:	e09c      	b.n	8012ee6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8012dac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012db0:	2b04      	cmp	r3, #4
 8012db2:	d002      	beq.n	8012dba <dir_register+0xb6>
 8012db4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012db8:	e095      	b.n	8012ee6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8012dba:	7dfa      	ldrb	r2, [r7, #23]
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8012dc2:	7dfb      	ldrb	r3, [r7, #23]
 8012dc4:	f003 0302 	and.w	r3, r3, #2
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d007      	beq.n	8012ddc <dir_register+0xd8>
 8012dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dce:	330c      	adds	r3, #12
 8012dd0:	4a47      	ldr	r2, [pc, #284]	; (8012ef0 <dir_register+0x1ec>)
 8012dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8012dd6:	089b      	lsrs	r3, r3, #2
 8012dd8:	3301      	adds	r3, #1
 8012dda:	e000      	b.n	8012dde <dir_register+0xda>
 8012ddc:	2301      	movs	r3, #1
 8012dde:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8012de0:	6a39      	ldr	r1, [r7, #32]
 8012de2:	6878      	ldr	r0, [r7, #4]
 8012de4:	f7ff fbb4 	bl	8012550 <dir_alloc>
 8012de8:	4603      	mov	r3, r0
 8012dea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8012dee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d148      	bne.n	8012e88 <dir_register+0x184>
 8012df6:	6a3b      	ldr	r3, [r7, #32]
 8012df8:	3b01      	subs	r3, #1
 8012dfa:	623b      	str	r3, [r7, #32]
 8012dfc:	6a3b      	ldr	r3, [r7, #32]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d042      	beq.n	8012e88 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	695a      	ldr	r2, [r3, #20]
 8012e06:	6a3b      	ldr	r3, [r7, #32]
 8012e08:	015b      	lsls	r3, r3, #5
 8012e0a:	1ad3      	subs	r3, r2, r3
 8012e0c:	4619      	mov	r1, r3
 8012e0e:	6878      	ldr	r0, [r7, #4]
 8012e10:	f7ff fa5e 	bl	80122d0 <dir_sdi>
 8012e14:	4603      	mov	r3, r0
 8012e16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8012e1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d132      	bne.n	8012e88 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	3324      	adds	r3, #36	; 0x24
 8012e26:	4618      	mov	r0, r3
 8012e28:	f7ff fde4 	bl	80129f4 <sum_sfn>
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	69db      	ldr	r3, [r3, #28]
 8012e34:	4619      	mov	r1, r3
 8012e36:	69f8      	ldr	r0, [r7, #28]
 8012e38:	f7fe feca 	bl	8011bd0 <move_window>
 8012e3c:	4603      	mov	r3, r0
 8012e3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8012e42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d11d      	bne.n	8012e86 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8012e4a:	69fb      	ldr	r3, [r7, #28]
 8012e4c:	68d8      	ldr	r0, [r3, #12]
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	6a19      	ldr	r1, [r3, #32]
 8012e52:	6a3b      	ldr	r3, [r7, #32]
 8012e54:	b2da      	uxtb	r2, r3
 8012e56:	7efb      	ldrb	r3, [r7, #27]
 8012e58:	f7ff fcd4 	bl	8012804 <put_lfn>
				fs->wflag = 1;
 8012e5c:	69fb      	ldr	r3, [r7, #28]
 8012e5e:	2201      	movs	r2, #1
 8012e60:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8012e62:	2100      	movs	r1, #0
 8012e64:	6878      	ldr	r0, [r7, #4]
 8012e66:	f7ff faae 	bl	80123c6 <dir_next>
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8012e70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d107      	bne.n	8012e88 <dir_register+0x184>
 8012e78:	6a3b      	ldr	r3, [r7, #32]
 8012e7a:	3b01      	subs	r3, #1
 8012e7c:	623b      	str	r3, [r7, #32]
 8012e7e:	6a3b      	ldr	r3, [r7, #32]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d1d5      	bne.n	8012e30 <dir_register+0x12c>
 8012e84:	e000      	b.n	8012e88 <dir_register+0x184>
				if (res != FR_OK) break;
 8012e86:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012e88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d128      	bne.n	8012ee2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	69db      	ldr	r3, [r3, #28]
 8012e94:	4619      	mov	r1, r3
 8012e96:	69f8      	ldr	r0, [r7, #28]
 8012e98:	f7fe fe9a 	bl	8011bd0 <move_window>
 8012e9c:	4603      	mov	r3, r0
 8012e9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8012ea2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d11b      	bne.n	8012ee2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	6a1b      	ldr	r3, [r3, #32]
 8012eae:	2220      	movs	r2, #32
 8012eb0:	2100      	movs	r1, #0
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	f7fe fc7f 	bl	80117b6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	6a18      	ldr	r0, [r3, #32]
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	3324      	adds	r3, #36	; 0x24
 8012ec0:	220b      	movs	r2, #11
 8012ec2:	4619      	mov	r1, r3
 8012ec4:	f7fe fc56 	bl	8011774 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	6a1b      	ldr	r3, [r3, #32]
 8012ed2:	330c      	adds	r3, #12
 8012ed4:	f002 0218 	and.w	r2, r2, #24
 8012ed8:	b2d2      	uxtb	r2, r2
 8012eda:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8012edc:	69fb      	ldr	r3, [r7, #28]
 8012ede:	2201      	movs	r2, #1
 8012ee0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012ee2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	3730      	adds	r7, #48	; 0x30
 8012eea:	46bd      	mov	sp, r7
 8012eec:	bd80      	pop	{r7, pc}
 8012eee:	bf00      	nop
 8012ef0:	4ec4ec4f 	.word	0x4ec4ec4f

08012ef4 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b086      	sub	sp, #24
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	695b      	ldr	r3, [r3, #20]
 8012f06:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f10:	d007      	beq.n	8012f22 <dir_remove+0x2e>
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f16:	4619      	mov	r1, r3
 8012f18:	6878      	ldr	r0, [r7, #4]
 8012f1a:	f7ff f9d9 	bl	80122d0 <dir_sdi>
 8012f1e:	4603      	mov	r3, r0
 8012f20:	e000      	b.n	8012f24 <dir_remove+0x30>
 8012f22:	2300      	movs	r3, #0
 8012f24:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012f26:	7dfb      	ldrb	r3, [r7, #23]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d128      	bne.n	8012f7e <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	69db      	ldr	r3, [r3, #28]
 8012f30:	4619      	mov	r1, r3
 8012f32:	6938      	ldr	r0, [r7, #16]
 8012f34:	f7fe fe4c 	bl	8011bd0 <move_window>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012f3c:	7dfb      	ldrb	r3, [r7, #23]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d115      	bne.n	8012f6e <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	6a1b      	ldr	r3, [r3, #32]
 8012f46:	22e5      	movs	r2, #229	; 0xe5
 8012f48:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8012f4a:	693b      	ldr	r3, [r7, #16]
 8012f4c:	2201      	movs	r2, #1
 8012f4e:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	695b      	ldr	r3, [r3, #20]
 8012f54:	68fa      	ldr	r2, [r7, #12]
 8012f56:	429a      	cmp	r2, r3
 8012f58:	d90b      	bls.n	8012f72 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 8012f5a:	2100      	movs	r1, #0
 8012f5c:	6878      	ldr	r0, [r7, #4]
 8012f5e:	f7ff fa32 	bl	80123c6 <dir_next>
 8012f62:	4603      	mov	r3, r0
 8012f64:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8012f66:	7dfb      	ldrb	r3, [r7, #23]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d0df      	beq.n	8012f2c <dir_remove+0x38>
 8012f6c:	e002      	b.n	8012f74 <dir_remove+0x80>
			if (res != FR_OK) break;
 8012f6e:	bf00      	nop
 8012f70:	e000      	b.n	8012f74 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8012f72:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8012f74:	7dfb      	ldrb	r3, [r7, #23]
 8012f76:	2b04      	cmp	r3, #4
 8012f78:	d101      	bne.n	8012f7e <dir_remove+0x8a>
 8012f7a:	2302      	movs	r3, #2
 8012f7c:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8012f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f80:	4618      	mov	r0, r3
 8012f82:	3718      	adds	r7, #24
 8012f84:	46bd      	mov	sp, r7
 8012f86:	bd80      	pop	{r7, pc}

08012f88 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b088      	sub	sp, #32
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
 8012f90:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8012f98:	683b      	ldr	r3, [r7, #0]
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	69db      	ldr	r3, [r3, #28]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	f000 80c9 	beq.w	801313a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fb0:	d032      	beq.n	8013018 <get_fileinfo+0x90>
			i = j = 0;
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	61bb      	str	r3, [r7, #24]
 8012fb6:	69bb      	ldr	r3, [r7, #24]
 8012fb8:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8012fba:	e01b      	b.n	8012ff4 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8012fbc:	89fb      	ldrh	r3, [r7, #14]
 8012fbe:	2100      	movs	r1, #0
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f7fe f9f1 	bl	80113a8 <ff_convert>
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8012fca:	89fb      	ldrh	r3, [r7, #14]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d102      	bne.n	8012fd6 <get_fileinfo+0x4e>
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	61fb      	str	r3, [r7, #28]
 8012fd4:	e01a      	b.n	801300c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8012fd6:	69fb      	ldr	r3, [r7, #28]
 8012fd8:	2bfe      	cmp	r3, #254	; 0xfe
 8012fda:	d902      	bls.n	8012fe2 <get_fileinfo+0x5a>
 8012fdc:	2300      	movs	r3, #0
 8012fde:	61fb      	str	r3, [r7, #28]
 8012fe0:	e014      	b.n	801300c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8012fe2:	69fb      	ldr	r3, [r7, #28]
 8012fe4:	1c5a      	adds	r2, r3, #1
 8012fe6:	61fa      	str	r2, [r7, #28]
 8012fe8:	89fa      	ldrh	r2, [r7, #14]
 8012fea:	b2d1      	uxtb	r1, r2
 8012fec:	683a      	ldr	r2, [r7, #0]
 8012fee:	4413      	add	r3, r2
 8012ff0:	460a      	mov	r2, r1
 8012ff2:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8012ff4:	693b      	ldr	r3, [r7, #16]
 8012ff6:	68da      	ldr	r2, [r3, #12]
 8012ff8:	69bb      	ldr	r3, [r7, #24]
 8012ffa:	1c59      	adds	r1, r3, #1
 8012ffc:	61b9      	str	r1, [r7, #24]
 8012ffe:	005b      	lsls	r3, r3, #1
 8013000:	4413      	add	r3, r2
 8013002:	881b      	ldrh	r3, [r3, #0]
 8013004:	81fb      	strh	r3, [r7, #14]
 8013006:	89fb      	ldrh	r3, [r7, #14]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d1d7      	bne.n	8012fbc <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 801300c:	683a      	ldr	r2, [r7, #0]
 801300e:	69fb      	ldr	r3, [r7, #28]
 8013010:	4413      	add	r3, r2
 8013012:	3316      	adds	r3, #22
 8013014:	2200      	movs	r2, #0
 8013016:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8013018:	2300      	movs	r3, #0
 801301a:	61bb      	str	r3, [r7, #24]
 801301c:	69bb      	ldr	r3, [r7, #24]
 801301e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8013020:	683a      	ldr	r2, [r7, #0]
 8013022:	69fb      	ldr	r3, [r7, #28]
 8013024:	4413      	add	r3, r2
 8013026:	3316      	adds	r3, #22
 8013028:	781b      	ldrb	r3, [r3, #0]
 801302a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 801302c:	e04c      	b.n	80130c8 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	6a1a      	ldr	r2, [r3, #32]
 8013032:	69fb      	ldr	r3, [r7, #28]
 8013034:	1c59      	adds	r1, r3, #1
 8013036:	61f9      	str	r1, [r7, #28]
 8013038:	4413      	add	r3, r2
 801303a:	781b      	ldrb	r3, [r3, #0]
 801303c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 801303e:	7dfb      	ldrb	r3, [r7, #23]
 8013040:	2b20      	cmp	r3, #32
 8013042:	d100      	bne.n	8013046 <get_fileinfo+0xbe>
 8013044:	e040      	b.n	80130c8 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8013046:	7dfb      	ldrb	r3, [r7, #23]
 8013048:	2b05      	cmp	r3, #5
 801304a:	d101      	bne.n	8013050 <get_fileinfo+0xc8>
 801304c:	23e5      	movs	r3, #229	; 0xe5
 801304e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8013050:	69fb      	ldr	r3, [r7, #28]
 8013052:	2b09      	cmp	r3, #9
 8013054:	d10f      	bne.n	8013076 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8013056:	89bb      	ldrh	r3, [r7, #12]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d105      	bne.n	8013068 <get_fileinfo+0xe0>
 801305c:	683a      	ldr	r2, [r7, #0]
 801305e:	69bb      	ldr	r3, [r7, #24]
 8013060:	4413      	add	r3, r2
 8013062:	3316      	adds	r3, #22
 8013064:	222e      	movs	r2, #46	; 0x2e
 8013066:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8013068:	69bb      	ldr	r3, [r7, #24]
 801306a:	1c5a      	adds	r2, r3, #1
 801306c:	61ba      	str	r2, [r7, #24]
 801306e:	683a      	ldr	r2, [r7, #0]
 8013070:	4413      	add	r3, r2
 8013072:	222e      	movs	r2, #46	; 0x2e
 8013074:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8013076:	683a      	ldr	r2, [r7, #0]
 8013078:	69bb      	ldr	r3, [r7, #24]
 801307a:	4413      	add	r3, r2
 801307c:	3309      	adds	r3, #9
 801307e:	7dfa      	ldrb	r2, [r7, #23]
 8013080:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8013082:	89bb      	ldrh	r3, [r7, #12]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d11c      	bne.n	80130c2 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8013088:	7dfb      	ldrb	r3, [r7, #23]
 801308a:	2b40      	cmp	r3, #64	; 0x40
 801308c:	d913      	bls.n	80130b6 <get_fileinfo+0x12e>
 801308e:	7dfb      	ldrb	r3, [r7, #23]
 8013090:	2b5a      	cmp	r3, #90	; 0x5a
 8013092:	d810      	bhi.n	80130b6 <get_fileinfo+0x12e>
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	6a1b      	ldr	r3, [r3, #32]
 8013098:	330c      	adds	r3, #12
 801309a:	781b      	ldrb	r3, [r3, #0]
 801309c:	461a      	mov	r2, r3
 801309e:	69fb      	ldr	r3, [r7, #28]
 80130a0:	2b08      	cmp	r3, #8
 80130a2:	d901      	bls.n	80130a8 <get_fileinfo+0x120>
 80130a4:	2310      	movs	r3, #16
 80130a6:	e000      	b.n	80130aa <get_fileinfo+0x122>
 80130a8:	2308      	movs	r3, #8
 80130aa:	4013      	ands	r3, r2
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d002      	beq.n	80130b6 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 80130b0:	7dfb      	ldrb	r3, [r7, #23]
 80130b2:	3320      	adds	r3, #32
 80130b4:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 80130b6:	683a      	ldr	r2, [r7, #0]
 80130b8:	69bb      	ldr	r3, [r7, #24]
 80130ba:	4413      	add	r3, r2
 80130bc:	3316      	adds	r3, #22
 80130be:	7dfa      	ldrb	r2, [r7, #23]
 80130c0:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80130c2:	69bb      	ldr	r3, [r7, #24]
 80130c4:	3301      	adds	r3, #1
 80130c6:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 80130c8:	69fb      	ldr	r3, [r7, #28]
 80130ca:	2b0a      	cmp	r3, #10
 80130cc:	d9af      	bls.n	801302e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 80130ce:	89bb      	ldrh	r3, [r7, #12]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d10d      	bne.n	80130f0 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 80130d4:	683a      	ldr	r2, [r7, #0]
 80130d6:	69bb      	ldr	r3, [r7, #24]
 80130d8:	4413      	add	r3, r2
 80130da:	3316      	adds	r3, #22
 80130dc:	2200      	movs	r2, #0
 80130de:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	6a1b      	ldr	r3, [r3, #32]
 80130e4:	330c      	adds	r3, #12
 80130e6:	781b      	ldrb	r3, [r3, #0]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d101      	bne.n	80130f0 <get_fileinfo+0x168>
 80130ec:	2300      	movs	r3, #0
 80130ee:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80130f0:	683a      	ldr	r2, [r7, #0]
 80130f2:	69bb      	ldr	r3, [r7, #24]
 80130f4:	4413      	add	r3, r2
 80130f6:	3309      	adds	r3, #9
 80130f8:	2200      	movs	r2, #0
 80130fa:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	6a1b      	ldr	r3, [r3, #32]
 8013100:	7ada      	ldrb	r2, [r3, #11]
 8013102:	683b      	ldr	r3, [r7, #0]
 8013104:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	6a1b      	ldr	r3, [r3, #32]
 801310a:	331c      	adds	r3, #28
 801310c:	4618      	mov	r0, r3
 801310e:	f7fe fac7 	bl	80116a0 <ld_dword>
 8013112:	4602      	mov	r2, r0
 8013114:	683b      	ldr	r3, [r7, #0]
 8013116:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	6a1b      	ldr	r3, [r3, #32]
 801311c:	3316      	adds	r3, #22
 801311e:	4618      	mov	r0, r3
 8013120:	f7fe fabe 	bl	80116a0 <ld_dword>
 8013124:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8013126:	68bb      	ldr	r3, [r7, #8]
 8013128:	b29a      	uxth	r2, r3
 801312a:	683b      	ldr	r3, [r7, #0]
 801312c:	80da      	strh	r2, [r3, #6]
 801312e:	68bb      	ldr	r3, [r7, #8]
 8013130:	0c1b      	lsrs	r3, r3, #16
 8013132:	b29a      	uxth	r2, r3
 8013134:	683b      	ldr	r3, [r7, #0]
 8013136:	809a      	strh	r2, [r3, #4]
 8013138:	e000      	b.n	801313c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801313a:	bf00      	nop
}
 801313c:	3720      	adds	r7, #32
 801313e:	46bd      	mov	sp, r7
 8013140:	bd80      	pop	{r7, pc}
	...

08013144 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 8013144:	b480      	push	{r7}
 8013146:	b085      	sub	sp, #20
 8013148:	af00      	add	r7, sp, #0
 801314a:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	1c59      	adds	r1, r3, #1
 8013152:	687a      	ldr	r2, [r7, #4]
 8013154:	6011      	str	r1, [r2, #0]
 8013156:	781b      	ldrb	r3, [r3, #0]
 8013158:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 801315a:	89fb      	ldrh	r3, [r7, #14]
 801315c:	2b60      	cmp	r3, #96	; 0x60
 801315e:	d905      	bls.n	801316c <get_achar+0x28>
 8013160:	89fb      	ldrh	r3, [r7, #14]
 8013162:	2b7a      	cmp	r3, #122	; 0x7a
 8013164:	d802      	bhi.n	801316c <get_achar+0x28>
 8013166:	89fb      	ldrh	r3, [r7, #14]
 8013168:	3b20      	subs	r3, #32
 801316a:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 801316c:	89fb      	ldrh	r3, [r7, #14]
 801316e:	2b7f      	cmp	r3, #127	; 0x7f
 8013170:	d904      	bls.n	801317c <get_achar+0x38>
 8013172:	89fb      	ldrh	r3, [r7, #14]
 8013174:	3b80      	subs	r3, #128	; 0x80
 8013176:	4a05      	ldr	r2, [pc, #20]	; (801318c <get_achar+0x48>)
 8013178:	5cd3      	ldrb	r3, [r2, r3]
 801317a:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 801317c:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 801317e:	4618      	mov	r0, r3
 8013180:	3714      	adds	r7, #20
 8013182:	46bd      	mov	sp, r7
 8013184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013188:	4770      	bx	lr
 801318a:	bf00      	nop
 801318c:	0802a5fc 	.word	0x0802a5fc

08013190 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b08a      	sub	sp, #40	; 0x28
 8013194:	af00      	add	r7, sp, #0
 8013196:	60f8      	str	r0, [r7, #12]
 8013198:	60b9      	str	r1, [r7, #8]
 801319a:	607a      	str	r2, [r7, #4]
 801319c:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 801319e:	e009      	b.n	80131b4 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 80131a0:	f107 0308 	add.w	r3, r7, #8
 80131a4:	4618      	mov	r0, r3
 80131a6:	f7ff ffcd 	bl	8013144 <get_achar>
 80131aa:	4603      	mov	r3, r0
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d101      	bne.n	80131b4 <pattern_matching+0x24>
 80131b0:	2300      	movs	r3, #0
 80131b2:	e064      	b.n	801327e <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	1e5a      	subs	r2, r3, #1
 80131b8:	607a      	str	r2, [r7, #4]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d1f0      	bne.n	80131a0 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	781b      	ldrb	r3, [r3, #0]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d104      	bne.n	80131d0 <pattern_matching+0x40>
 80131c6:	683b      	ldr	r3, [r7, #0]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d001      	beq.n	80131d0 <pattern_matching+0x40>
 80131cc:	2301      	movs	r3, #1
 80131ce:	e056      	b.n	801327e <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	617b      	str	r3, [r7, #20]
 80131d4:	68bb      	ldr	r3, [r7, #8]
 80131d6:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 80131d8:	697b      	ldr	r3, [r7, #20]
 80131da:	781b      	ldrb	r3, [r3, #0]
 80131dc:	2b3f      	cmp	r3, #63	; 0x3f
 80131de:	d003      	beq.n	80131e8 <pattern_matching+0x58>
 80131e0:	697b      	ldr	r3, [r7, #20]
 80131e2:	781b      	ldrb	r3, [r3, #0]
 80131e4:	2b2a      	cmp	r3, #42	; 0x2a
 80131e6:	d126      	bne.n	8013236 <pattern_matching+0xa6>
				nm = nx = 0;
 80131e8:	2300      	movs	r3, #0
 80131ea:	61fb      	str	r3, [r7, #28]
 80131ec:	69fb      	ldr	r3, [r7, #28]
 80131ee:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 80131f0:	697b      	ldr	r3, [r7, #20]
 80131f2:	1c5a      	adds	r2, r3, #1
 80131f4:	617a      	str	r2, [r7, #20]
 80131f6:	781b      	ldrb	r3, [r3, #0]
 80131f8:	2b3f      	cmp	r3, #63	; 0x3f
 80131fa:	d103      	bne.n	8013204 <pattern_matching+0x74>
 80131fc:	6a3b      	ldr	r3, [r7, #32]
 80131fe:	3301      	adds	r3, #1
 8013200:	623b      	str	r3, [r7, #32]
 8013202:	e001      	b.n	8013208 <pattern_matching+0x78>
 8013204:	2301      	movs	r3, #1
 8013206:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 8013208:	697b      	ldr	r3, [r7, #20]
 801320a:	781b      	ldrb	r3, [r3, #0]
 801320c:	2b3f      	cmp	r3, #63	; 0x3f
 801320e:	d0ef      	beq.n	80131f0 <pattern_matching+0x60>
 8013210:	697b      	ldr	r3, [r7, #20]
 8013212:	781b      	ldrb	r3, [r3, #0]
 8013214:	2b2a      	cmp	r3, #42	; 0x2a
 8013216:	d0eb      	beq.n	80131f0 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8013218:	6978      	ldr	r0, [r7, #20]
 801321a:	6939      	ldr	r1, [r7, #16]
 801321c:	69fb      	ldr	r3, [r7, #28]
 801321e:	6a3a      	ldr	r2, [r7, #32]
 8013220:	f7ff ffb6 	bl	8013190 <pattern_matching>
 8013224:	4603      	mov	r3, r0
 8013226:	2b00      	cmp	r3, #0
 8013228:	d001      	beq.n	801322e <pattern_matching+0x9e>
 801322a:	2301      	movs	r3, #1
 801322c:	e027      	b.n	801327e <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 801322e:	693b      	ldr	r3, [r7, #16]
 8013230:	781b      	ldrb	r3, [r3, #0]
 8013232:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013234:	e017      	b.n	8013266 <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 8013236:	f107 0314 	add.w	r3, r7, #20
 801323a:	4618      	mov	r0, r3
 801323c:	f7ff ff82 	bl	8013144 <get_achar>
 8013240:	4603      	mov	r3, r0
 8013242:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 8013244:	f107 0310 	add.w	r3, r7, #16
 8013248:	4618      	mov	r0, r3
 801324a:	f7ff ff7b 	bl	8013144 <get_achar>
 801324e:	4603      	mov	r3, r0
 8013250:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 8013252:	8b7a      	ldrh	r2, [r7, #26]
 8013254:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013256:	429a      	cmp	r2, r3
 8013258:	d104      	bne.n	8013264 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 801325a:	8b7b      	ldrh	r3, [r7, #26]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d1bb      	bne.n	80131d8 <pattern_matching+0x48>
 8013260:	2301      	movs	r3, #1
 8013262:	e00c      	b.n	801327e <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 8013264:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 8013266:	f107 0308 	add.w	r3, r7, #8
 801326a:	4618      	mov	r0, r3
 801326c:	f7ff ff6a 	bl	8013144 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8013270:	683b      	ldr	r3, [r7, #0]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d002      	beq.n	801327c <pattern_matching+0xec>
 8013276:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013278:	2b00      	cmp	r3, #0
 801327a:	d1a9      	bne.n	80131d0 <pattern_matching+0x40>

	return 0;
 801327c:	2300      	movs	r3, #0
}
 801327e:	4618      	mov	r0, r3
 8013280:	3728      	adds	r7, #40	; 0x28
 8013282:	46bd      	mov	sp, r7
 8013284:	bd80      	pop	{r7, pc}
	...

08013288 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013288:	b580      	push	{r7, lr}
 801328a:	b08a      	sub	sp, #40	; 0x28
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]
 8013290:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8013292:	683b      	ldr	r3, [r7, #0]
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	613b      	str	r3, [r7, #16]
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	68db      	ldr	r3, [r3, #12]
 801329e:	60fb      	str	r3, [r7, #12]
 80132a0:	2300      	movs	r3, #0
 80132a2:	617b      	str	r3, [r7, #20]
 80132a4:	697b      	ldr	r3, [r7, #20]
 80132a6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80132a8:	69bb      	ldr	r3, [r7, #24]
 80132aa:	1c5a      	adds	r2, r3, #1
 80132ac:	61ba      	str	r2, [r7, #24]
 80132ae:	693a      	ldr	r2, [r7, #16]
 80132b0:	4413      	add	r3, r2
 80132b2:	781b      	ldrb	r3, [r3, #0]
 80132b4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80132b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80132b8:	2b1f      	cmp	r3, #31
 80132ba:	d940      	bls.n	801333e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80132bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80132be:	2b2f      	cmp	r3, #47	; 0x2f
 80132c0:	d006      	beq.n	80132d0 <create_name+0x48>
 80132c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80132c4:	2b5c      	cmp	r3, #92	; 0x5c
 80132c6:	d110      	bne.n	80132ea <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80132c8:	e002      	b.n	80132d0 <create_name+0x48>
 80132ca:	69bb      	ldr	r3, [r7, #24]
 80132cc:	3301      	adds	r3, #1
 80132ce:	61bb      	str	r3, [r7, #24]
 80132d0:	693a      	ldr	r2, [r7, #16]
 80132d2:	69bb      	ldr	r3, [r7, #24]
 80132d4:	4413      	add	r3, r2
 80132d6:	781b      	ldrb	r3, [r3, #0]
 80132d8:	2b2f      	cmp	r3, #47	; 0x2f
 80132da:	d0f6      	beq.n	80132ca <create_name+0x42>
 80132dc:	693a      	ldr	r2, [r7, #16]
 80132de:	69bb      	ldr	r3, [r7, #24]
 80132e0:	4413      	add	r3, r2
 80132e2:	781b      	ldrb	r3, [r3, #0]
 80132e4:	2b5c      	cmp	r3, #92	; 0x5c
 80132e6:	d0f0      	beq.n	80132ca <create_name+0x42>
			break;
 80132e8:	e02a      	b.n	8013340 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80132ea:	697b      	ldr	r3, [r7, #20]
 80132ec:	2bfe      	cmp	r3, #254	; 0xfe
 80132ee:	d901      	bls.n	80132f4 <create_name+0x6c>
 80132f0:	2306      	movs	r3, #6
 80132f2:	e177      	b.n	80135e4 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80132f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80132f6:	b2db      	uxtb	r3, r3
 80132f8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80132fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80132fc:	2101      	movs	r1, #1
 80132fe:	4618      	mov	r0, r3
 8013300:	f7fe f852 	bl	80113a8 <ff_convert>
 8013304:	4603      	mov	r3, r0
 8013306:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8013308:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801330a:	2b00      	cmp	r3, #0
 801330c:	d101      	bne.n	8013312 <create_name+0x8a>
 801330e:	2306      	movs	r3, #6
 8013310:	e168      	b.n	80135e4 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8013312:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013314:	2b7f      	cmp	r3, #127	; 0x7f
 8013316:	d809      	bhi.n	801332c <create_name+0xa4>
 8013318:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801331a:	4619      	mov	r1, r3
 801331c:	48b3      	ldr	r0, [pc, #716]	; (80135ec <create_name+0x364>)
 801331e:	f7fe fa8c 	bl	801183a <chk_chr>
 8013322:	4603      	mov	r3, r0
 8013324:	2b00      	cmp	r3, #0
 8013326:	d001      	beq.n	801332c <create_name+0xa4>
 8013328:	2306      	movs	r3, #6
 801332a:	e15b      	b.n	80135e4 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 801332c:	697b      	ldr	r3, [r7, #20]
 801332e:	1c5a      	adds	r2, r3, #1
 8013330:	617a      	str	r2, [r7, #20]
 8013332:	005b      	lsls	r3, r3, #1
 8013334:	68fa      	ldr	r2, [r7, #12]
 8013336:	4413      	add	r3, r2
 8013338:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801333a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801333c:	e7b4      	b.n	80132a8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801333e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8013340:	693a      	ldr	r2, [r7, #16]
 8013342:	69bb      	ldr	r3, [r7, #24]
 8013344:	441a      	add	r2, r3
 8013346:	683b      	ldr	r3, [r7, #0]
 8013348:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801334a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801334c:	2b1f      	cmp	r3, #31
 801334e:	d801      	bhi.n	8013354 <create_name+0xcc>
 8013350:	2304      	movs	r3, #4
 8013352:	e000      	b.n	8013356 <create_name+0xce>
 8013354:	2300      	movs	r3, #0
 8013356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801335a:	e011      	b.n	8013380 <create_name+0xf8>
		w = lfn[di - 1];
 801335c:	697a      	ldr	r2, [r7, #20]
 801335e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013362:	4413      	add	r3, r2
 8013364:	005b      	lsls	r3, r3, #1
 8013366:	68fa      	ldr	r2, [r7, #12]
 8013368:	4413      	add	r3, r2
 801336a:	881b      	ldrh	r3, [r3, #0]
 801336c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 801336e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013370:	2b20      	cmp	r3, #32
 8013372:	d002      	beq.n	801337a <create_name+0xf2>
 8013374:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013376:	2b2e      	cmp	r3, #46	; 0x2e
 8013378:	d106      	bne.n	8013388 <create_name+0x100>
		di--;
 801337a:	697b      	ldr	r3, [r7, #20]
 801337c:	3b01      	subs	r3, #1
 801337e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8013380:	697b      	ldr	r3, [r7, #20]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d1ea      	bne.n	801335c <create_name+0xd4>
 8013386:	e000      	b.n	801338a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8013388:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801338a:	697b      	ldr	r3, [r7, #20]
 801338c:	005b      	lsls	r3, r3, #1
 801338e:	68fa      	ldr	r2, [r7, #12]
 8013390:	4413      	add	r3, r2
 8013392:	2200      	movs	r2, #0
 8013394:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8013396:	697b      	ldr	r3, [r7, #20]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d101      	bne.n	80133a0 <create_name+0x118>
 801339c:	2306      	movs	r3, #6
 801339e:	e121      	b.n	80135e4 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	3324      	adds	r3, #36	; 0x24
 80133a4:	220b      	movs	r2, #11
 80133a6:	2120      	movs	r1, #32
 80133a8:	4618      	mov	r0, r3
 80133aa:	f7fe fa04 	bl	80117b6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80133ae:	2300      	movs	r3, #0
 80133b0:	61bb      	str	r3, [r7, #24]
 80133b2:	e002      	b.n	80133ba <create_name+0x132>
 80133b4:	69bb      	ldr	r3, [r7, #24]
 80133b6:	3301      	adds	r3, #1
 80133b8:	61bb      	str	r3, [r7, #24]
 80133ba:	69bb      	ldr	r3, [r7, #24]
 80133bc:	005b      	lsls	r3, r3, #1
 80133be:	68fa      	ldr	r2, [r7, #12]
 80133c0:	4413      	add	r3, r2
 80133c2:	881b      	ldrh	r3, [r3, #0]
 80133c4:	2b20      	cmp	r3, #32
 80133c6:	d0f5      	beq.n	80133b4 <create_name+0x12c>
 80133c8:	69bb      	ldr	r3, [r7, #24]
 80133ca:	005b      	lsls	r3, r3, #1
 80133cc:	68fa      	ldr	r2, [r7, #12]
 80133ce:	4413      	add	r3, r2
 80133d0:	881b      	ldrh	r3, [r3, #0]
 80133d2:	2b2e      	cmp	r3, #46	; 0x2e
 80133d4:	d0ee      	beq.n	80133b4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80133d6:	69bb      	ldr	r3, [r7, #24]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d009      	beq.n	80133f0 <create_name+0x168>
 80133dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80133e0:	f043 0303 	orr.w	r3, r3, #3
 80133e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80133e8:	e002      	b.n	80133f0 <create_name+0x168>
 80133ea:	697b      	ldr	r3, [r7, #20]
 80133ec:	3b01      	subs	r3, #1
 80133ee:	617b      	str	r3, [r7, #20]
 80133f0:	697b      	ldr	r3, [r7, #20]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d009      	beq.n	801340a <create_name+0x182>
 80133f6:	697a      	ldr	r2, [r7, #20]
 80133f8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80133fc:	4413      	add	r3, r2
 80133fe:	005b      	lsls	r3, r3, #1
 8013400:	68fa      	ldr	r2, [r7, #12]
 8013402:	4413      	add	r3, r2
 8013404:	881b      	ldrh	r3, [r3, #0]
 8013406:	2b2e      	cmp	r3, #46	; 0x2e
 8013408:	d1ef      	bne.n	80133ea <create_name+0x162>

	i = b = 0; ni = 8;
 801340a:	2300      	movs	r3, #0
 801340c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013410:	2300      	movs	r3, #0
 8013412:	623b      	str	r3, [r7, #32]
 8013414:	2308      	movs	r3, #8
 8013416:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8013418:	69bb      	ldr	r3, [r7, #24]
 801341a:	1c5a      	adds	r2, r3, #1
 801341c:	61ba      	str	r2, [r7, #24]
 801341e:	005b      	lsls	r3, r3, #1
 8013420:	68fa      	ldr	r2, [r7, #12]
 8013422:	4413      	add	r3, r2
 8013424:	881b      	ldrh	r3, [r3, #0]
 8013426:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8013428:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801342a:	2b00      	cmp	r3, #0
 801342c:	f000 8090 	beq.w	8013550 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8013430:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013432:	2b20      	cmp	r3, #32
 8013434:	d006      	beq.n	8013444 <create_name+0x1bc>
 8013436:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013438:	2b2e      	cmp	r3, #46	; 0x2e
 801343a:	d10a      	bne.n	8013452 <create_name+0x1ca>
 801343c:	69ba      	ldr	r2, [r7, #24]
 801343e:	697b      	ldr	r3, [r7, #20]
 8013440:	429a      	cmp	r2, r3
 8013442:	d006      	beq.n	8013452 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8013444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013448:	f043 0303 	orr.w	r3, r3, #3
 801344c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013450:	e07d      	b.n	801354e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8013452:	6a3a      	ldr	r2, [r7, #32]
 8013454:	69fb      	ldr	r3, [r7, #28]
 8013456:	429a      	cmp	r2, r3
 8013458:	d203      	bcs.n	8013462 <create_name+0x1da>
 801345a:	69ba      	ldr	r2, [r7, #24]
 801345c:	697b      	ldr	r3, [r7, #20]
 801345e:	429a      	cmp	r2, r3
 8013460:	d123      	bne.n	80134aa <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8013462:	69fb      	ldr	r3, [r7, #28]
 8013464:	2b0b      	cmp	r3, #11
 8013466:	d106      	bne.n	8013476 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8013468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801346c:	f043 0303 	orr.w	r3, r3, #3
 8013470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013474:	e06f      	b.n	8013556 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8013476:	69ba      	ldr	r2, [r7, #24]
 8013478:	697b      	ldr	r3, [r7, #20]
 801347a:	429a      	cmp	r2, r3
 801347c:	d005      	beq.n	801348a <create_name+0x202>
 801347e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013482:	f043 0303 	orr.w	r3, r3, #3
 8013486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 801348a:	69ba      	ldr	r2, [r7, #24]
 801348c:	697b      	ldr	r3, [r7, #20]
 801348e:	429a      	cmp	r2, r3
 8013490:	d860      	bhi.n	8013554 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8013492:	697b      	ldr	r3, [r7, #20]
 8013494:	61bb      	str	r3, [r7, #24]
 8013496:	2308      	movs	r3, #8
 8013498:	623b      	str	r3, [r7, #32]
 801349a:	230b      	movs	r3, #11
 801349c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801349e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80134a2:	009b      	lsls	r3, r3, #2
 80134a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80134a8:	e051      	b.n	801354e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80134aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80134ac:	2b7f      	cmp	r3, #127	; 0x7f
 80134ae:	d914      	bls.n	80134da <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80134b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80134b2:	2100      	movs	r1, #0
 80134b4:	4618      	mov	r0, r3
 80134b6:	f7fd ff77 	bl	80113a8 <ff_convert>
 80134ba:	4603      	mov	r3, r0
 80134bc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80134be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d004      	beq.n	80134ce <create_name+0x246>
 80134c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80134c6:	3b80      	subs	r3, #128	; 0x80
 80134c8:	4a49      	ldr	r2, [pc, #292]	; (80135f0 <create_name+0x368>)
 80134ca:	5cd3      	ldrb	r3, [r2, r3]
 80134cc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80134ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80134d2:	f043 0302 	orr.w	r3, r3, #2
 80134d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80134da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d007      	beq.n	80134f0 <create_name+0x268>
 80134e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80134e2:	4619      	mov	r1, r3
 80134e4:	4843      	ldr	r0, [pc, #268]	; (80135f4 <create_name+0x36c>)
 80134e6:	f7fe f9a8 	bl	801183a <chk_chr>
 80134ea:	4603      	mov	r3, r0
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d008      	beq.n	8013502 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80134f0:	235f      	movs	r3, #95	; 0x5f
 80134f2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80134f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80134f8:	f043 0303 	orr.w	r3, r3, #3
 80134fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013500:	e01b      	b.n	801353a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8013502:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013504:	2b40      	cmp	r3, #64	; 0x40
 8013506:	d909      	bls.n	801351c <create_name+0x294>
 8013508:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801350a:	2b5a      	cmp	r3, #90	; 0x5a
 801350c:	d806      	bhi.n	801351c <create_name+0x294>
					b |= 2;
 801350e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013512:	f043 0302 	orr.w	r3, r3, #2
 8013516:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801351a:	e00e      	b.n	801353a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801351c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801351e:	2b60      	cmp	r3, #96	; 0x60
 8013520:	d90b      	bls.n	801353a <create_name+0x2b2>
 8013522:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013524:	2b7a      	cmp	r3, #122	; 0x7a
 8013526:	d808      	bhi.n	801353a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8013528:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801352c:	f043 0301 	orr.w	r3, r3, #1
 8013530:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013534:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013536:	3b20      	subs	r3, #32
 8013538:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801353a:	6a3b      	ldr	r3, [r7, #32]
 801353c:	1c5a      	adds	r2, r3, #1
 801353e:	623a      	str	r2, [r7, #32]
 8013540:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013542:	b2d1      	uxtb	r1, r2
 8013544:	687a      	ldr	r2, [r7, #4]
 8013546:	4413      	add	r3, r2
 8013548:	460a      	mov	r2, r1
 801354a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 801354e:	e763      	b.n	8013418 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8013550:	bf00      	nop
 8013552:	e000      	b.n	8013556 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8013554:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801355c:	2be5      	cmp	r3, #229	; 0xe5
 801355e:	d103      	bne.n	8013568 <create_name+0x2e0>
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	2205      	movs	r2, #5
 8013564:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8013568:	69fb      	ldr	r3, [r7, #28]
 801356a:	2b08      	cmp	r3, #8
 801356c:	d104      	bne.n	8013578 <create_name+0x2f0>
 801356e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013572:	009b      	lsls	r3, r3, #2
 8013574:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8013578:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801357c:	f003 030c 	and.w	r3, r3, #12
 8013580:	2b0c      	cmp	r3, #12
 8013582:	d005      	beq.n	8013590 <create_name+0x308>
 8013584:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013588:	f003 0303 	and.w	r3, r3, #3
 801358c:	2b03      	cmp	r3, #3
 801358e:	d105      	bne.n	801359c <create_name+0x314>
 8013590:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013594:	f043 0302 	orr.w	r3, r3, #2
 8013598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801359c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80135a0:	f003 0302 	and.w	r3, r3, #2
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d117      	bne.n	80135d8 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80135a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80135ac:	f003 0303 	and.w	r3, r3, #3
 80135b0:	2b01      	cmp	r3, #1
 80135b2:	d105      	bne.n	80135c0 <create_name+0x338>
 80135b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80135b8:	f043 0310 	orr.w	r3, r3, #16
 80135bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80135c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80135c4:	f003 030c 	and.w	r3, r3, #12
 80135c8:	2b04      	cmp	r3, #4
 80135ca:	d105      	bne.n	80135d8 <create_name+0x350>
 80135cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80135d0:	f043 0308 	orr.w	r3, r3, #8
 80135d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80135de:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80135e2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80135e4:	4618      	mov	r0, r3
 80135e6:	3728      	adds	r7, #40	; 0x28
 80135e8:	46bd      	mov	sp, r7
 80135ea:	bd80      	pop	{r7, pc}
 80135ec:	08021690 	.word	0x08021690
 80135f0:	0802a5fc 	.word	0x0802a5fc
 80135f4:	0802169c 	.word	0x0802169c

080135f8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80135f8:	b580      	push	{r7, lr}
 80135fa:	b086      	sub	sp, #24
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
 8013600:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8013606:	693b      	ldr	r3, [r7, #16]
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801360c:	e002      	b.n	8013614 <follow_path+0x1c>
 801360e:	683b      	ldr	r3, [r7, #0]
 8013610:	3301      	adds	r3, #1
 8013612:	603b      	str	r3, [r7, #0]
 8013614:	683b      	ldr	r3, [r7, #0]
 8013616:	781b      	ldrb	r3, [r3, #0]
 8013618:	2b2f      	cmp	r3, #47	; 0x2f
 801361a:	d0f8      	beq.n	801360e <follow_path+0x16>
 801361c:	683b      	ldr	r3, [r7, #0]
 801361e:	781b      	ldrb	r3, [r3, #0]
 8013620:	2b5c      	cmp	r3, #92	; 0x5c
 8013622:	d0f4      	beq.n	801360e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013624:	693b      	ldr	r3, [r7, #16]
 8013626:	2200      	movs	r2, #0
 8013628:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801362a:	683b      	ldr	r3, [r7, #0]
 801362c:	781b      	ldrb	r3, [r3, #0]
 801362e:	2b1f      	cmp	r3, #31
 8013630:	d80a      	bhi.n	8013648 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	2280      	movs	r2, #128	; 0x80
 8013636:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801363a:	2100      	movs	r1, #0
 801363c:	6878      	ldr	r0, [r7, #4]
 801363e:	f7fe fe47 	bl	80122d0 <dir_sdi>
 8013642:	4603      	mov	r3, r0
 8013644:	75fb      	strb	r3, [r7, #23]
 8013646:	e043      	b.n	80136d0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013648:	463b      	mov	r3, r7
 801364a:	4619      	mov	r1, r3
 801364c:	6878      	ldr	r0, [r7, #4]
 801364e:	f7ff fe1b 	bl	8013288 <create_name>
 8013652:	4603      	mov	r3, r0
 8013654:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013656:	7dfb      	ldrb	r3, [r7, #23]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d134      	bne.n	80136c6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801365c:	6878      	ldr	r0, [r7, #4]
 801365e:	f7ff fa91 	bl	8012b84 <dir_find>
 8013662:	4603      	mov	r3, r0
 8013664:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801366c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801366e:	7dfb      	ldrb	r3, [r7, #23]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d00a      	beq.n	801368a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013674:	7dfb      	ldrb	r3, [r7, #23]
 8013676:	2b04      	cmp	r3, #4
 8013678:	d127      	bne.n	80136ca <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801367a:	7afb      	ldrb	r3, [r7, #11]
 801367c:	f003 0304 	and.w	r3, r3, #4
 8013680:	2b00      	cmp	r3, #0
 8013682:	d122      	bne.n	80136ca <follow_path+0xd2>
 8013684:	2305      	movs	r3, #5
 8013686:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013688:	e01f      	b.n	80136ca <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801368a:	7afb      	ldrb	r3, [r7, #11]
 801368c:	f003 0304 	and.w	r3, r3, #4
 8013690:	2b00      	cmp	r3, #0
 8013692:	d11c      	bne.n	80136ce <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013694:	693b      	ldr	r3, [r7, #16]
 8013696:	799b      	ldrb	r3, [r3, #6]
 8013698:	f003 0310 	and.w	r3, r3, #16
 801369c:	2b00      	cmp	r3, #0
 801369e:	d102      	bne.n	80136a6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80136a0:	2305      	movs	r3, #5
 80136a2:	75fb      	strb	r3, [r7, #23]
 80136a4:	e014      	b.n	80136d0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	695b      	ldr	r3, [r3, #20]
 80136b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80136b4:	4413      	add	r3, r2
 80136b6:	4619      	mov	r1, r3
 80136b8:	68f8      	ldr	r0, [r7, #12]
 80136ba:	f7fe ff90 	bl	80125de <ld_clust>
 80136be:	4602      	mov	r2, r0
 80136c0:	693b      	ldr	r3, [r7, #16]
 80136c2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80136c4:	e7c0      	b.n	8013648 <follow_path+0x50>
			if (res != FR_OK) break;
 80136c6:	bf00      	nop
 80136c8:	e002      	b.n	80136d0 <follow_path+0xd8>
				break;
 80136ca:	bf00      	nop
 80136cc:	e000      	b.n	80136d0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80136ce:	bf00      	nop
			}
		}
	}

	return res;
 80136d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80136d2:	4618      	mov	r0, r3
 80136d4:	3718      	adds	r7, #24
 80136d6:	46bd      	mov	sp, r7
 80136d8:	bd80      	pop	{r7, pc}

080136da <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80136da:	b480      	push	{r7}
 80136dc:	b087      	sub	sp, #28
 80136de:	af00      	add	r7, sp, #0
 80136e0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80136e2:	f04f 33ff 	mov.w	r3, #4294967295
 80136e6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d031      	beq.n	8013754 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	617b      	str	r3, [r7, #20]
 80136f6:	e002      	b.n	80136fe <get_ldnumber+0x24>
 80136f8:	697b      	ldr	r3, [r7, #20]
 80136fa:	3301      	adds	r3, #1
 80136fc:	617b      	str	r3, [r7, #20]
 80136fe:	697b      	ldr	r3, [r7, #20]
 8013700:	781b      	ldrb	r3, [r3, #0]
 8013702:	2b1f      	cmp	r3, #31
 8013704:	d903      	bls.n	801370e <get_ldnumber+0x34>
 8013706:	697b      	ldr	r3, [r7, #20]
 8013708:	781b      	ldrb	r3, [r3, #0]
 801370a:	2b3a      	cmp	r3, #58	; 0x3a
 801370c:	d1f4      	bne.n	80136f8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801370e:	697b      	ldr	r3, [r7, #20]
 8013710:	781b      	ldrb	r3, [r3, #0]
 8013712:	2b3a      	cmp	r3, #58	; 0x3a
 8013714:	d11c      	bne.n	8013750 <get_ldnumber+0x76>
			tp = *path;
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	1c5a      	adds	r2, r3, #1
 8013720:	60fa      	str	r2, [r7, #12]
 8013722:	781b      	ldrb	r3, [r3, #0]
 8013724:	3b30      	subs	r3, #48	; 0x30
 8013726:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013728:	68bb      	ldr	r3, [r7, #8]
 801372a:	2b09      	cmp	r3, #9
 801372c:	d80e      	bhi.n	801374c <get_ldnumber+0x72>
 801372e:	68fa      	ldr	r2, [r7, #12]
 8013730:	697b      	ldr	r3, [r7, #20]
 8013732:	429a      	cmp	r2, r3
 8013734:	d10a      	bne.n	801374c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013736:	68bb      	ldr	r3, [r7, #8]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d107      	bne.n	801374c <get_ldnumber+0x72>
					vol = (int)i;
 801373c:	68bb      	ldr	r3, [r7, #8]
 801373e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013740:	697b      	ldr	r3, [r7, #20]
 8013742:	3301      	adds	r3, #1
 8013744:	617b      	str	r3, [r7, #20]
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	697a      	ldr	r2, [r7, #20]
 801374a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801374c:	693b      	ldr	r3, [r7, #16]
 801374e:	e002      	b.n	8013756 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013750:	2300      	movs	r3, #0
 8013752:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013754:	693b      	ldr	r3, [r7, #16]
}
 8013756:	4618      	mov	r0, r3
 8013758:	371c      	adds	r7, #28
 801375a:	46bd      	mov	sp, r7
 801375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013760:	4770      	bx	lr
	...

08013764 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013764:	b580      	push	{r7, lr}
 8013766:	b082      	sub	sp, #8
 8013768:	af00      	add	r7, sp, #0
 801376a:	6078      	str	r0, [r7, #4]
 801376c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	2200      	movs	r2, #0
 8013772:	70da      	strb	r2, [r3, #3]
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	f04f 32ff 	mov.w	r2, #4294967295
 801377a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801377c:	6839      	ldr	r1, [r7, #0]
 801377e:	6878      	ldr	r0, [r7, #4]
 8013780:	f7fe fa26 	bl	8011bd0 <move_window>
 8013784:	4603      	mov	r3, r0
 8013786:	2b00      	cmp	r3, #0
 8013788:	d001      	beq.n	801378e <check_fs+0x2a>
 801378a:	2304      	movs	r3, #4
 801378c:	e038      	b.n	8013800 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	3334      	adds	r3, #52	; 0x34
 8013792:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013796:	4618      	mov	r0, r3
 8013798:	f7fd ff6a 	bl	8011670 <ld_word>
 801379c:	4603      	mov	r3, r0
 801379e:	461a      	mov	r2, r3
 80137a0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80137a4:	429a      	cmp	r2, r3
 80137a6:	d001      	beq.n	80137ac <check_fs+0x48>
 80137a8:	2303      	movs	r3, #3
 80137aa:	e029      	b.n	8013800 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80137b2:	2be9      	cmp	r3, #233	; 0xe9
 80137b4:	d009      	beq.n	80137ca <check_fs+0x66>
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80137bc:	2beb      	cmp	r3, #235	; 0xeb
 80137be:	d11e      	bne.n	80137fe <check_fs+0x9a>
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80137c6:	2b90      	cmp	r3, #144	; 0x90
 80137c8:	d119      	bne.n	80137fe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	3334      	adds	r3, #52	; 0x34
 80137ce:	3336      	adds	r3, #54	; 0x36
 80137d0:	4618      	mov	r0, r3
 80137d2:	f7fd ff65 	bl	80116a0 <ld_dword>
 80137d6:	4603      	mov	r3, r0
 80137d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80137dc:	4a0a      	ldr	r2, [pc, #40]	; (8013808 <check_fs+0xa4>)
 80137de:	4293      	cmp	r3, r2
 80137e0:	d101      	bne.n	80137e6 <check_fs+0x82>
 80137e2:	2300      	movs	r3, #0
 80137e4:	e00c      	b.n	8013800 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	3334      	adds	r3, #52	; 0x34
 80137ea:	3352      	adds	r3, #82	; 0x52
 80137ec:	4618      	mov	r0, r3
 80137ee:	f7fd ff57 	bl	80116a0 <ld_dword>
 80137f2:	4603      	mov	r3, r0
 80137f4:	4a05      	ldr	r2, [pc, #20]	; (801380c <check_fs+0xa8>)
 80137f6:	4293      	cmp	r3, r2
 80137f8:	d101      	bne.n	80137fe <check_fs+0x9a>
 80137fa:	2300      	movs	r3, #0
 80137fc:	e000      	b.n	8013800 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80137fe:	2302      	movs	r3, #2
}
 8013800:	4618      	mov	r0, r3
 8013802:	3708      	adds	r7, #8
 8013804:	46bd      	mov	sp, r7
 8013806:	bd80      	pop	{r7, pc}
 8013808:	00544146 	.word	0x00544146
 801380c:	33544146 	.word	0x33544146

08013810 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013810:	b580      	push	{r7, lr}
 8013812:	b096      	sub	sp, #88	; 0x58
 8013814:	af00      	add	r7, sp, #0
 8013816:	60f8      	str	r0, [r7, #12]
 8013818:	60b9      	str	r1, [r7, #8]
 801381a:	4613      	mov	r3, r2
 801381c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801381e:	68bb      	ldr	r3, [r7, #8]
 8013820:	2200      	movs	r2, #0
 8013822:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013824:	68f8      	ldr	r0, [r7, #12]
 8013826:	f7ff ff58 	bl	80136da <get_ldnumber>
 801382a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801382c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801382e:	2b00      	cmp	r3, #0
 8013830:	da01      	bge.n	8013836 <find_volume+0x26>
 8013832:	230b      	movs	r3, #11
 8013834:	e231      	b.n	8013c9a <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013836:	4aa8      	ldr	r2, [pc, #672]	; (8013ad8 <find_volume+0x2c8>)
 8013838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801383a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801383e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013842:	2b00      	cmp	r3, #0
 8013844:	d101      	bne.n	801384a <find_volume+0x3a>
 8013846:	230c      	movs	r3, #12
 8013848:	e227      	b.n	8013c9a <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801384a:	68bb      	ldr	r3, [r7, #8]
 801384c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801384e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013850:	79fb      	ldrb	r3, [r7, #7]
 8013852:	f023 0301 	bic.w	r3, r3, #1
 8013856:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801385a:	781b      	ldrb	r3, [r3, #0]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d01a      	beq.n	8013896 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8013860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013862:	785b      	ldrb	r3, [r3, #1]
 8013864:	4618      	mov	r0, r3
 8013866:	f7fd fe65 	bl	8011534 <disk_status>
 801386a:	4603      	mov	r3, r0
 801386c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013870:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013874:	f003 0301 	and.w	r3, r3, #1
 8013878:	2b00      	cmp	r3, #0
 801387a:	d10c      	bne.n	8013896 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801387c:	79fb      	ldrb	r3, [r7, #7]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d007      	beq.n	8013892 <find_volume+0x82>
 8013882:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013886:	f003 0304 	and.w	r3, r3, #4
 801388a:	2b00      	cmp	r3, #0
 801388c:	d001      	beq.n	8013892 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801388e:	230a      	movs	r3, #10
 8013890:	e203      	b.n	8013c9a <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 8013892:	2300      	movs	r3, #0
 8013894:	e201      	b.n	8013c9a <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013898:	2200      	movs	r2, #0
 801389a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801389c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801389e:	b2da      	uxtb	r2, r3
 80138a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138a2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80138a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138a6:	785b      	ldrb	r3, [r3, #1]
 80138a8:	4618      	mov	r0, r3
 80138aa:	f7fd fe5d 	bl	8011568 <disk_initialize>
 80138ae:	4603      	mov	r3, r0
 80138b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80138b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80138b8:	f003 0301 	and.w	r3, r3, #1
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d001      	beq.n	80138c4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80138c0:	2303      	movs	r3, #3
 80138c2:	e1ea      	b.n	8013c9a <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80138c4:	79fb      	ldrb	r3, [r7, #7]
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d007      	beq.n	80138da <find_volume+0xca>
 80138ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80138ce:	f003 0304 	and.w	r3, r3, #4
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d001      	beq.n	80138da <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80138d6:	230a      	movs	r3, #10
 80138d8:	e1df      	b.n	8013c9a <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80138da:	2300      	movs	r3, #0
 80138dc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80138de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80138e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80138e2:	f7ff ff3f 	bl	8013764 <check_fs>
 80138e6:	4603      	mov	r3, r0
 80138e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80138ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80138f0:	2b02      	cmp	r3, #2
 80138f2:	d14b      	bne.n	801398c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80138f4:	2300      	movs	r3, #0
 80138f6:	643b      	str	r3, [r7, #64]	; 0x40
 80138f8:	e01f      	b.n	801393a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80138fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138fc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013902:	011b      	lsls	r3, r3, #4
 8013904:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8013908:	4413      	add	r3, r2
 801390a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801390c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801390e:	3304      	adds	r3, #4
 8013910:	781b      	ldrb	r3, [r3, #0]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d006      	beq.n	8013924 <find_volume+0x114>
 8013916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013918:	3308      	adds	r3, #8
 801391a:	4618      	mov	r0, r3
 801391c:	f7fd fec0 	bl	80116a0 <ld_dword>
 8013920:	4602      	mov	r2, r0
 8013922:	e000      	b.n	8013926 <find_volume+0x116>
 8013924:	2200      	movs	r2, #0
 8013926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013928:	009b      	lsls	r3, r3, #2
 801392a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801392e:	440b      	add	r3, r1
 8013930:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013936:	3301      	adds	r3, #1
 8013938:	643b      	str	r3, [r7, #64]	; 0x40
 801393a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801393c:	2b03      	cmp	r3, #3
 801393e:	d9dc      	bls.n	80138fa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013940:	2300      	movs	r3, #0
 8013942:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8013944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013946:	2b00      	cmp	r3, #0
 8013948:	d002      	beq.n	8013950 <find_volume+0x140>
 801394a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801394c:	3b01      	subs	r3, #1
 801394e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013952:	009b      	lsls	r3, r3, #2
 8013954:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8013958:	4413      	add	r3, r2
 801395a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801395e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013962:	2b00      	cmp	r3, #0
 8013964:	d005      	beq.n	8013972 <find_volume+0x162>
 8013966:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013968:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801396a:	f7ff fefb 	bl	8013764 <check_fs>
 801396e:	4603      	mov	r3, r0
 8013970:	e000      	b.n	8013974 <find_volume+0x164>
 8013972:	2303      	movs	r3, #3
 8013974:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013978:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801397c:	2b01      	cmp	r3, #1
 801397e:	d905      	bls.n	801398c <find_volume+0x17c>
 8013980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013982:	3301      	adds	r3, #1
 8013984:	643b      	str	r3, [r7, #64]	; 0x40
 8013986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013988:	2b03      	cmp	r3, #3
 801398a:	d9e1      	bls.n	8013950 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801398c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013990:	2b04      	cmp	r3, #4
 8013992:	d101      	bne.n	8013998 <find_volume+0x188>
 8013994:	2301      	movs	r3, #1
 8013996:	e180      	b.n	8013c9a <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013998:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801399c:	2b01      	cmp	r3, #1
 801399e:	d901      	bls.n	80139a4 <find_volume+0x194>
 80139a0:	230d      	movs	r3, #13
 80139a2:	e17a      	b.n	8013c9a <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80139a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139a6:	3334      	adds	r3, #52	; 0x34
 80139a8:	330b      	adds	r3, #11
 80139aa:	4618      	mov	r0, r3
 80139ac:	f7fd fe60 	bl	8011670 <ld_word>
 80139b0:	4603      	mov	r3, r0
 80139b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80139b6:	d001      	beq.n	80139bc <find_volume+0x1ac>
 80139b8:	230d      	movs	r3, #13
 80139ba:	e16e      	b.n	8013c9a <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80139bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139be:	3334      	adds	r3, #52	; 0x34
 80139c0:	3316      	adds	r3, #22
 80139c2:	4618      	mov	r0, r3
 80139c4:	f7fd fe54 	bl	8011670 <ld_word>
 80139c8:	4603      	mov	r3, r0
 80139ca:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80139cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d106      	bne.n	80139e0 <find_volume+0x1d0>
 80139d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139d4:	3334      	adds	r3, #52	; 0x34
 80139d6:	3324      	adds	r3, #36	; 0x24
 80139d8:	4618      	mov	r0, r3
 80139da:	f7fd fe61 	bl	80116a0 <ld_dword>
 80139de:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80139e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80139e4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80139e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139e8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80139ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139ee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80139f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139f2:	789b      	ldrb	r3, [r3, #2]
 80139f4:	2b01      	cmp	r3, #1
 80139f6:	d005      	beq.n	8013a04 <find_volume+0x1f4>
 80139f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139fa:	789b      	ldrb	r3, [r3, #2]
 80139fc:	2b02      	cmp	r3, #2
 80139fe:	d001      	beq.n	8013a04 <find_volume+0x1f4>
 8013a00:	230d      	movs	r3, #13
 8013a02:	e14a      	b.n	8013c9a <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a06:	789b      	ldrb	r3, [r3, #2]
 8013a08:	461a      	mov	r2, r3
 8013a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a0c:	fb02 f303 	mul.w	r3, r2, r3
 8013a10:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013a18:	b29a      	uxth	r2, r3
 8013a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a1c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a20:	895b      	ldrh	r3, [r3, #10]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d008      	beq.n	8013a38 <find_volume+0x228>
 8013a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a28:	895b      	ldrh	r3, [r3, #10]
 8013a2a:	461a      	mov	r2, r3
 8013a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a2e:	895b      	ldrh	r3, [r3, #10]
 8013a30:	3b01      	subs	r3, #1
 8013a32:	4013      	ands	r3, r2
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d001      	beq.n	8013a3c <find_volume+0x22c>
 8013a38:	230d      	movs	r3, #13
 8013a3a:	e12e      	b.n	8013c9a <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a3e:	3334      	adds	r3, #52	; 0x34
 8013a40:	3311      	adds	r3, #17
 8013a42:	4618      	mov	r0, r3
 8013a44:	f7fd fe14 	bl	8011670 <ld_word>
 8013a48:	4603      	mov	r3, r0
 8013a4a:	461a      	mov	r2, r3
 8013a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a4e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a52:	891b      	ldrh	r3, [r3, #8]
 8013a54:	f003 030f 	and.w	r3, r3, #15
 8013a58:	b29b      	uxth	r3, r3
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d001      	beq.n	8013a62 <find_volume+0x252>
 8013a5e:	230d      	movs	r3, #13
 8013a60:	e11b      	b.n	8013c9a <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a64:	3334      	adds	r3, #52	; 0x34
 8013a66:	3313      	adds	r3, #19
 8013a68:	4618      	mov	r0, r3
 8013a6a:	f7fd fe01 	bl	8011670 <ld_word>
 8013a6e:	4603      	mov	r3, r0
 8013a70:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d106      	bne.n	8013a86 <find_volume+0x276>
 8013a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a7a:	3334      	adds	r3, #52	; 0x34
 8013a7c:	3320      	adds	r3, #32
 8013a7e:	4618      	mov	r0, r3
 8013a80:	f7fd fe0e 	bl	80116a0 <ld_dword>
 8013a84:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a88:	3334      	adds	r3, #52	; 0x34
 8013a8a:	330e      	adds	r3, #14
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	f7fd fdef 	bl	8011670 <ld_word>
 8013a92:	4603      	mov	r3, r0
 8013a94:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013a96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d101      	bne.n	8013aa0 <find_volume+0x290>
 8013a9c:	230d      	movs	r3, #13
 8013a9e:	e0fc      	b.n	8013c9a <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013aa0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013aa4:	4413      	add	r3, r2
 8013aa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013aa8:	8912      	ldrh	r2, [r2, #8]
 8013aaa:	0912      	lsrs	r2, r2, #4
 8013aac:	b292      	uxth	r2, r2
 8013aae:	4413      	add	r3, r2
 8013ab0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013ab2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ab6:	429a      	cmp	r2, r3
 8013ab8:	d201      	bcs.n	8013abe <find_volume+0x2ae>
 8013aba:	230d      	movs	r3, #13
 8013abc:	e0ed      	b.n	8013c9a <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013abe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ac2:	1ad3      	subs	r3, r2, r3
 8013ac4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013ac6:	8952      	ldrh	r2, [r2, #10]
 8013ac8:	fbb3 f3f2 	udiv	r3, r3, r2
 8013acc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d103      	bne.n	8013adc <find_volume+0x2cc>
 8013ad4:	230d      	movs	r3, #13
 8013ad6:	e0e0      	b.n	8013c9a <find_volume+0x48a>
 8013ad8:	2400a3d0 	.word	0x2400a3d0
		fmt = FS_FAT32;
 8013adc:	2303      	movs	r3, #3
 8013ade:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ae4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013ae8:	4293      	cmp	r3, r2
 8013aea:	d802      	bhi.n	8013af2 <find_volume+0x2e2>
 8013aec:	2302      	movs	r3, #2
 8013aee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013af4:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013af8:	4293      	cmp	r3, r2
 8013afa:	d802      	bhi.n	8013b02 <find_volume+0x2f2>
 8013afc:	2301      	movs	r3, #1
 8013afe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b04:	1c9a      	adds	r2, r3, #2
 8013b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b08:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8013b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013b0e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013b10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b14:	441a      	add	r2, r3
 8013b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b18:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8013b1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b1e:	441a      	add	r2, r3
 8013b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b22:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8013b24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013b28:	2b03      	cmp	r3, #3
 8013b2a:	d11e      	bne.n	8013b6a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b2e:	3334      	adds	r3, #52	; 0x34
 8013b30:	332a      	adds	r3, #42	; 0x2a
 8013b32:	4618      	mov	r0, r3
 8013b34:	f7fd fd9c 	bl	8011670 <ld_word>
 8013b38:	4603      	mov	r3, r0
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d001      	beq.n	8013b42 <find_volume+0x332>
 8013b3e:	230d      	movs	r3, #13
 8013b40:	e0ab      	b.n	8013c9a <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b44:	891b      	ldrh	r3, [r3, #8]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d001      	beq.n	8013b4e <find_volume+0x33e>
 8013b4a:	230d      	movs	r3, #13
 8013b4c:	e0a5      	b.n	8013c9a <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b50:	3334      	adds	r3, #52	; 0x34
 8013b52:	332c      	adds	r3, #44	; 0x2c
 8013b54:	4618      	mov	r0, r3
 8013b56:	f7fd fda3 	bl	80116a0 <ld_dword>
 8013b5a:	4602      	mov	r2, r0
 8013b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b5e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b62:	699b      	ldr	r3, [r3, #24]
 8013b64:	009b      	lsls	r3, r3, #2
 8013b66:	647b      	str	r3, [r7, #68]	; 0x44
 8013b68:	e01f      	b.n	8013baa <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b6c:	891b      	ldrh	r3, [r3, #8]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d101      	bne.n	8013b76 <find_volume+0x366>
 8013b72:	230d      	movs	r3, #13
 8013b74:	e091      	b.n	8013c9a <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b7c:	441a      	add	r2, r3
 8013b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b80:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013b82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013b86:	2b02      	cmp	r3, #2
 8013b88:	d103      	bne.n	8013b92 <find_volume+0x382>
 8013b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b8c:	699b      	ldr	r3, [r3, #24]
 8013b8e:	005b      	lsls	r3, r3, #1
 8013b90:	e00a      	b.n	8013ba8 <find_volume+0x398>
 8013b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b94:	699a      	ldr	r2, [r3, #24]
 8013b96:	4613      	mov	r3, r2
 8013b98:	005b      	lsls	r3, r3, #1
 8013b9a:	4413      	add	r3, r2
 8013b9c:	085a      	lsrs	r2, r3, #1
 8013b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ba0:	699b      	ldr	r3, [r3, #24]
 8013ba2:	f003 0301 	and.w	r3, r3, #1
 8013ba6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013ba8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bac:	69da      	ldr	r2, [r3, #28]
 8013bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bb0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8013bb4:	0a5b      	lsrs	r3, r3, #9
 8013bb6:	429a      	cmp	r2, r3
 8013bb8:	d201      	bcs.n	8013bbe <find_volume+0x3ae>
 8013bba:	230d      	movs	r3, #13
 8013bbc:	e06d      	b.n	8013c9a <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8013bc4:	615a      	str	r2, [r3, #20]
 8013bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bc8:	695a      	ldr	r2, [r3, #20]
 8013bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bcc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8013bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bd0:	2280      	movs	r2, #128	; 0x80
 8013bd2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013bd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013bd8:	2b03      	cmp	r3, #3
 8013bda:	d149      	bne.n	8013c70 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bde:	3334      	adds	r3, #52	; 0x34
 8013be0:	3330      	adds	r3, #48	; 0x30
 8013be2:	4618      	mov	r0, r3
 8013be4:	f7fd fd44 	bl	8011670 <ld_word>
 8013be8:	4603      	mov	r3, r0
 8013bea:	2b01      	cmp	r3, #1
 8013bec:	d140      	bne.n	8013c70 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013bf0:	3301      	adds	r3, #1
 8013bf2:	4619      	mov	r1, r3
 8013bf4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013bf6:	f7fd ffeb 	bl	8011bd0 <move_window>
 8013bfa:	4603      	mov	r3, r0
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d137      	bne.n	8013c70 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8013c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c02:	2200      	movs	r2, #0
 8013c04:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c08:	3334      	adds	r3, #52	; 0x34
 8013c0a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013c0e:	4618      	mov	r0, r3
 8013c10:	f7fd fd2e 	bl	8011670 <ld_word>
 8013c14:	4603      	mov	r3, r0
 8013c16:	461a      	mov	r2, r3
 8013c18:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013c1c:	429a      	cmp	r2, r3
 8013c1e:	d127      	bne.n	8013c70 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c22:	3334      	adds	r3, #52	; 0x34
 8013c24:	4618      	mov	r0, r3
 8013c26:	f7fd fd3b 	bl	80116a0 <ld_dword>
 8013c2a:	4603      	mov	r3, r0
 8013c2c:	4a1d      	ldr	r2, [pc, #116]	; (8013ca4 <find_volume+0x494>)
 8013c2e:	4293      	cmp	r3, r2
 8013c30:	d11e      	bne.n	8013c70 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c34:	3334      	adds	r3, #52	; 0x34
 8013c36:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	f7fd fd30 	bl	80116a0 <ld_dword>
 8013c40:	4603      	mov	r3, r0
 8013c42:	4a19      	ldr	r2, [pc, #100]	; (8013ca8 <find_volume+0x498>)
 8013c44:	4293      	cmp	r3, r2
 8013c46:	d113      	bne.n	8013c70 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c4a:	3334      	adds	r3, #52	; 0x34
 8013c4c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013c50:	4618      	mov	r0, r3
 8013c52:	f7fd fd25 	bl	80116a0 <ld_dword>
 8013c56:	4602      	mov	r2, r0
 8013c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c5a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c5e:	3334      	adds	r3, #52	; 0x34
 8013c60:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013c64:	4618      	mov	r0, r3
 8013c66:	f7fd fd1b 	bl	80116a0 <ld_dword>
 8013c6a:	4602      	mov	r2, r0
 8013c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c6e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c72:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013c76:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013c78:	4b0c      	ldr	r3, [pc, #48]	; (8013cac <find_volume+0x49c>)
 8013c7a:	881b      	ldrh	r3, [r3, #0]
 8013c7c:	3301      	adds	r3, #1
 8013c7e:	b29a      	uxth	r2, r3
 8013c80:	4b0a      	ldr	r3, [pc, #40]	; (8013cac <find_volume+0x49c>)
 8013c82:	801a      	strh	r2, [r3, #0]
 8013c84:	4b09      	ldr	r3, [pc, #36]	; (8013cac <find_volume+0x49c>)
 8013c86:	881a      	ldrh	r2, [r3, #0]
 8013c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c8a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8013c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c8e:	4a08      	ldr	r2, [pc, #32]	; (8013cb0 <find_volume+0x4a0>)
 8013c90:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013c92:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013c94:	f7fd ff34 	bl	8011b00 <clear_lock>
#endif
	return FR_OK;
 8013c98:	2300      	movs	r3, #0
}
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	3758      	adds	r7, #88	; 0x58
 8013c9e:	46bd      	mov	sp, r7
 8013ca0:	bd80      	pop	{r7, pc}
 8013ca2:	bf00      	nop
 8013ca4:	41615252 	.word	0x41615252
 8013ca8:	61417272 	.word	0x61417272
 8013cac:	2400a3d4 	.word	0x2400a3d4
 8013cb0:	2400a3f8 	.word	0x2400a3f8

08013cb4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013cb4:	b580      	push	{r7, lr}
 8013cb6:	b084      	sub	sp, #16
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	6078      	str	r0, [r7, #4]
 8013cbc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013cbe:	2309      	movs	r3, #9
 8013cc0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d01c      	beq.n	8013d02 <validate+0x4e>
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d018      	beq.n	8013d02 <validate+0x4e>
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	781b      	ldrb	r3, [r3, #0]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d013      	beq.n	8013d02 <validate+0x4e>
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	889a      	ldrh	r2, [r3, #4]
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	88db      	ldrh	r3, [r3, #6]
 8013ce4:	429a      	cmp	r2, r3
 8013ce6:	d10c      	bne.n	8013d02 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	785b      	ldrb	r3, [r3, #1]
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f7fd fc20 	bl	8011534 <disk_status>
 8013cf4:	4603      	mov	r3, r0
 8013cf6:	f003 0301 	and.w	r3, r3, #1
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d101      	bne.n	8013d02 <validate+0x4e>
			res = FR_OK;
 8013cfe:	2300      	movs	r3, #0
 8013d00:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013d02:	7bfb      	ldrb	r3, [r7, #15]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d102      	bne.n	8013d0e <validate+0x5a>
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	e000      	b.n	8013d10 <validate+0x5c>
 8013d0e:	2300      	movs	r3, #0
 8013d10:	683a      	ldr	r2, [r7, #0]
 8013d12:	6013      	str	r3, [r2, #0]
	return res;
 8013d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d16:	4618      	mov	r0, r3
 8013d18:	3710      	adds	r7, #16
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	bd80      	pop	{r7, pc}
	...

08013d20 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013d20:	b580      	push	{r7, lr}
 8013d22:	b088      	sub	sp, #32
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	60f8      	str	r0, [r7, #12]
 8013d28:	60b9      	str	r1, [r7, #8]
 8013d2a:	4613      	mov	r3, r2
 8013d2c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013d2e:	68bb      	ldr	r3, [r7, #8]
 8013d30:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013d32:	f107 0310 	add.w	r3, r7, #16
 8013d36:	4618      	mov	r0, r3
 8013d38:	f7ff fccf 	bl	80136da <get_ldnumber>
 8013d3c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013d3e:	69fb      	ldr	r3, [r7, #28]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	da01      	bge.n	8013d48 <f_mount+0x28>
 8013d44:	230b      	movs	r3, #11
 8013d46:	e02b      	b.n	8013da0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013d48:	4a17      	ldr	r2, [pc, #92]	; (8013da8 <f_mount+0x88>)
 8013d4a:	69fb      	ldr	r3, [r7, #28]
 8013d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013d50:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013d52:	69bb      	ldr	r3, [r7, #24]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d005      	beq.n	8013d64 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013d58:	69b8      	ldr	r0, [r7, #24]
 8013d5a:	f7fd fed1 	bl	8011b00 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013d5e:	69bb      	ldr	r3, [r7, #24]
 8013d60:	2200      	movs	r2, #0
 8013d62:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d002      	beq.n	8013d70 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	2200      	movs	r2, #0
 8013d6e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013d70:	68fa      	ldr	r2, [r7, #12]
 8013d72:	490d      	ldr	r1, [pc, #52]	; (8013da8 <f_mount+0x88>)
 8013d74:	69fb      	ldr	r3, [r7, #28]
 8013d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d002      	beq.n	8013d86 <f_mount+0x66>
 8013d80:	79fb      	ldrb	r3, [r7, #7]
 8013d82:	2b01      	cmp	r3, #1
 8013d84:	d001      	beq.n	8013d8a <f_mount+0x6a>
 8013d86:	2300      	movs	r3, #0
 8013d88:	e00a      	b.n	8013da0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013d8a:	f107 010c 	add.w	r1, r7, #12
 8013d8e:	f107 0308 	add.w	r3, r7, #8
 8013d92:	2200      	movs	r2, #0
 8013d94:	4618      	mov	r0, r3
 8013d96:	f7ff fd3b 	bl	8013810 <find_volume>
 8013d9a:	4603      	mov	r3, r0
 8013d9c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013da0:	4618      	mov	r0, r3
 8013da2:	3720      	adds	r7, #32
 8013da4:	46bd      	mov	sp, r7
 8013da6:	bd80      	pop	{r7, pc}
 8013da8:	2400a3d0 	.word	0x2400a3d0

08013dac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b09a      	sub	sp, #104	; 0x68
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	60f8      	str	r0, [r7, #12]
 8013db4:	60b9      	str	r1, [r7, #8]
 8013db6:	4613      	mov	r3, r2
 8013db8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d101      	bne.n	8013dc4 <f_open+0x18>
 8013dc0:	2309      	movs	r3, #9
 8013dc2:	e1ad      	b.n	8014120 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013dc4:	79fb      	ldrb	r3, [r7, #7]
 8013dc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013dca:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013dcc:	79fa      	ldrb	r2, [r7, #7]
 8013dce:	f107 0110 	add.w	r1, r7, #16
 8013dd2:	f107 0308 	add.w	r3, r7, #8
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	f7ff fd1a 	bl	8013810 <find_volume>
 8013ddc:	4603      	mov	r3, r0
 8013dde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8013de2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	f040 8191 	bne.w	801410e <f_open+0x362>
		dj.obj.fs = fs;
 8013dec:	693b      	ldr	r3, [r7, #16]
 8013dee:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013df0:	68ba      	ldr	r2, [r7, #8]
 8013df2:	f107 0314 	add.w	r3, r7, #20
 8013df6:	4611      	mov	r1, r2
 8013df8:	4618      	mov	r0, r3
 8013dfa:	f7ff fbfd 	bl	80135f8 <follow_path>
 8013dfe:	4603      	mov	r3, r0
 8013e00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013e04:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d11a      	bne.n	8013e42 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013e0c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013e10:	b25b      	sxtb	r3, r3
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	da03      	bge.n	8013e1e <f_open+0x72>
				res = FR_INVALID_NAME;
 8013e16:	2306      	movs	r3, #6
 8013e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8013e1c:	e011      	b.n	8013e42 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013e1e:	79fb      	ldrb	r3, [r7, #7]
 8013e20:	f023 0301 	bic.w	r3, r3, #1
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	bf14      	ite	ne
 8013e28:	2301      	movne	r3, #1
 8013e2a:	2300      	moveq	r3, #0
 8013e2c:	b2db      	uxtb	r3, r3
 8013e2e:	461a      	mov	r2, r3
 8013e30:	f107 0314 	add.w	r3, r7, #20
 8013e34:	4611      	mov	r1, r2
 8013e36:	4618      	mov	r0, r3
 8013e38:	f7fd fd1a 	bl	8011870 <chk_lock>
 8013e3c:	4603      	mov	r3, r0
 8013e3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013e42:	79fb      	ldrb	r3, [r7, #7]
 8013e44:	f003 031c 	and.w	r3, r3, #28
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d07f      	beq.n	8013f4c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8013e4c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d017      	beq.n	8013e84 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013e54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013e58:	2b04      	cmp	r3, #4
 8013e5a:	d10e      	bne.n	8013e7a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013e5c:	f7fd fd64 	bl	8011928 <enq_lock>
 8013e60:	4603      	mov	r3, r0
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d006      	beq.n	8013e74 <f_open+0xc8>
 8013e66:	f107 0314 	add.w	r3, r7, #20
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	f7fe ff4a 	bl	8012d04 <dir_register>
 8013e70:	4603      	mov	r3, r0
 8013e72:	e000      	b.n	8013e76 <f_open+0xca>
 8013e74:	2312      	movs	r3, #18
 8013e76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013e7a:	79fb      	ldrb	r3, [r7, #7]
 8013e7c:	f043 0308 	orr.w	r3, r3, #8
 8013e80:	71fb      	strb	r3, [r7, #7]
 8013e82:	e010      	b.n	8013ea6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013e84:	7ebb      	ldrb	r3, [r7, #26]
 8013e86:	f003 0311 	and.w	r3, r3, #17
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d003      	beq.n	8013e96 <f_open+0xea>
					res = FR_DENIED;
 8013e8e:	2307      	movs	r3, #7
 8013e90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8013e94:	e007      	b.n	8013ea6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013e96:	79fb      	ldrb	r3, [r7, #7]
 8013e98:	f003 0304 	and.w	r3, r3, #4
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d002      	beq.n	8013ea6 <f_open+0xfa>
 8013ea0:	2308      	movs	r3, #8
 8013ea2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013ea6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d168      	bne.n	8013f80 <f_open+0x1d4>
 8013eae:	79fb      	ldrb	r3, [r7, #7]
 8013eb0:	f003 0308 	and.w	r3, r3, #8
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d063      	beq.n	8013f80 <f_open+0x1d4>
				dw = GET_FATTIME();
 8013eb8:	f7fa fa8a 	bl	800e3d0 <get_fattime>
 8013ebc:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ec0:	330e      	adds	r3, #14
 8013ec2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	f7fd fc29 	bl	801171c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ecc:	3316      	adds	r3, #22
 8013ece:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	f7fd fc23 	bl	801171c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ed8:	330b      	adds	r3, #11
 8013eda:	2220      	movs	r2, #32
 8013edc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013ede:	693b      	ldr	r3, [r7, #16]
 8013ee0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ee2:	4611      	mov	r1, r2
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	f7fe fb7a 	bl	80125de <ld_clust>
 8013eea:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013eec:	693b      	ldr	r3, [r7, #16]
 8013eee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013ef0:	2200      	movs	r2, #0
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	f7fe fb92 	bl	801261c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013efa:	331c      	adds	r3, #28
 8013efc:	2100      	movs	r1, #0
 8013efe:	4618      	mov	r0, r3
 8013f00:	f7fd fc0c 	bl	801171c <st_dword>
					fs->wflag = 1;
 8013f04:	693b      	ldr	r3, [r7, #16]
 8013f06:	2201      	movs	r2, #1
 8013f08:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d037      	beq.n	8013f80 <f_open+0x1d4>
						dw = fs->winsect;
 8013f10:	693b      	ldr	r3, [r7, #16]
 8013f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f14:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8013f16:	f107 0314 	add.w	r3, r7, #20
 8013f1a:	2200      	movs	r2, #0
 8013f1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013f1e:	4618      	mov	r0, r3
 8013f20:	f7fe f8a5 	bl	801206e <remove_chain>
 8013f24:	4603      	mov	r3, r0
 8013f26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8013f2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d126      	bne.n	8013f80 <f_open+0x1d4>
							res = move_window(fs, dw);
 8013f32:	693b      	ldr	r3, [r7, #16]
 8013f34:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013f36:	4618      	mov	r0, r3
 8013f38:	f7fd fe4a 	bl	8011bd0 <move_window>
 8013f3c:	4603      	mov	r3, r0
 8013f3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013f42:	693b      	ldr	r3, [r7, #16]
 8013f44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013f46:	3a01      	subs	r2, #1
 8013f48:	611a      	str	r2, [r3, #16]
 8013f4a:	e019      	b.n	8013f80 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013f4c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d115      	bne.n	8013f80 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013f54:	7ebb      	ldrb	r3, [r7, #26]
 8013f56:	f003 0310 	and.w	r3, r3, #16
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d003      	beq.n	8013f66 <f_open+0x1ba>
					res = FR_NO_FILE;
 8013f5e:	2304      	movs	r3, #4
 8013f60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8013f64:	e00c      	b.n	8013f80 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013f66:	79fb      	ldrb	r3, [r7, #7]
 8013f68:	f003 0302 	and.w	r3, r3, #2
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d007      	beq.n	8013f80 <f_open+0x1d4>
 8013f70:	7ebb      	ldrb	r3, [r7, #26]
 8013f72:	f003 0301 	and.w	r3, r3, #1
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d002      	beq.n	8013f80 <f_open+0x1d4>
						res = FR_DENIED;
 8013f7a:	2307      	movs	r3, #7
 8013f7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8013f80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d128      	bne.n	8013fda <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013f88:	79fb      	ldrb	r3, [r7, #7]
 8013f8a:	f003 0308 	and.w	r3, r3, #8
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d003      	beq.n	8013f9a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8013f92:	79fb      	ldrb	r3, [r7, #7]
 8013f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f98:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013f9a:	693b      	ldr	r3, [r7, #16]
 8013f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8013fa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013fa8:	79fb      	ldrb	r3, [r7, #7]
 8013faa:	f023 0301 	bic.w	r3, r3, #1
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	bf14      	ite	ne
 8013fb2:	2301      	movne	r3, #1
 8013fb4:	2300      	moveq	r3, #0
 8013fb6:	b2db      	uxtb	r3, r3
 8013fb8:	461a      	mov	r2, r3
 8013fba:	f107 0314 	add.w	r3, r7, #20
 8013fbe:	4611      	mov	r1, r2
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	f7fd fcd3 	bl	801196c <inc_lock>
 8013fc6:	4602      	mov	r2, r0
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	691b      	ldr	r3, [r3, #16]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d102      	bne.n	8013fda <f_open+0x22e>
 8013fd4:	2302      	movs	r3, #2
 8013fd6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013fda:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	f040 8095 	bne.w	801410e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013fe4:	693b      	ldr	r3, [r7, #16]
 8013fe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013fe8:	4611      	mov	r1, r2
 8013fea:	4618      	mov	r0, r3
 8013fec:	f7fe faf7 	bl	80125de <ld_clust>
 8013ff0:	4602      	mov	r2, r0
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ff8:	331c      	adds	r3, #28
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	f7fd fb50 	bl	80116a0 <ld_dword>
 8014000:	4602      	mov	r2, r0
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	2200      	movs	r2, #0
 801400a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801400c:	693a      	ldr	r2, [r7, #16]
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8014012:	693b      	ldr	r3, [r7, #16]
 8014014:	88da      	ldrh	r2, [r3, #6]
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	79fa      	ldrb	r2, [r7, #7]
 801401e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	2200      	movs	r2, #0
 8014024:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	2200      	movs	r2, #0
 801402a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	2200      	movs	r2, #0
 8014030:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	3330      	adds	r3, #48	; 0x30
 8014036:	f44f 7200 	mov.w	r2, #512	; 0x200
 801403a:	2100      	movs	r1, #0
 801403c:	4618      	mov	r0, r3
 801403e:	f7fd fbba 	bl	80117b6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014042:	79fb      	ldrb	r3, [r7, #7]
 8014044:	f003 0320 	and.w	r3, r3, #32
 8014048:	2b00      	cmp	r3, #0
 801404a:	d060      	beq.n	801410e <f_open+0x362>
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	68db      	ldr	r3, [r3, #12]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d05c      	beq.n	801410e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	68da      	ldr	r2, [r3, #12]
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801405c:	693b      	ldr	r3, [r7, #16]
 801405e:	895b      	ldrh	r3, [r3, #10]
 8014060:	025b      	lsls	r3, r3, #9
 8014062:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	689b      	ldr	r3, [r3, #8]
 8014068:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	68db      	ldr	r3, [r3, #12]
 801406e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014070:	e016      	b.n	80140a0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8014076:	4618      	mov	r0, r3
 8014078:	f7fd fe65 	bl	8011d46 <get_fat>
 801407c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801407e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014080:	2b01      	cmp	r3, #1
 8014082:	d802      	bhi.n	801408a <f_open+0x2de>
 8014084:	2302      	movs	r3, #2
 8014086:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801408a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801408c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014090:	d102      	bne.n	8014098 <f_open+0x2ec>
 8014092:	2301      	movs	r3, #1
 8014094:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014098:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801409a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801409c:	1ad3      	subs	r3, r2, r3
 801409e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80140a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d103      	bne.n	80140b0 <f_open+0x304>
 80140a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80140aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80140ac:	429a      	cmp	r2, r3
 80140ae:	d8e0      	bhi.n	8014072 <f_open+0x2c6>
				}
				fp->clust = clst;
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80140b4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80140b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d127      	bne.n	801410e <f_open+0x362>
 80140be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80140c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d022      	beq.n	801410e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80140c8:	693b      	ldr	r3, [r7, #16]
 80140ca:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80140cc:	4618      	mov	r0, r3
 80140ce:	f7fd fe1b 	bl	8011d08 <clust2sect>
 80140d2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80140d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d103      	bne.n	80140e2 <f_open+0x336>
						res = FR_INT_ERR;
 80140da:	2302      	movs	r3, #2
 80140dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80140e0:	e015      	b.n	801410e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80140e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80140e4:	0a5a      	lsrs	r2, r3, #9
 80140e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80140e8:	441a      	add	r2, r3
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80140ee:	693b      	ldr	r3, [r7, #16]
 80140f0:	7858      	ldrb	r0, [r3, #1]
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	6a1a      	ldr	r2, [r3, #32]
 80140fc:	2301      	movs	r3, #1
 80140fe:	f7fd fa59 	bl	80115b4 <disk_read>
 8014102:	4603      	mov	r3, r0
 8014104:	2b00      	cmp	r3, #0
 8014106:	d002      	beq.n	801410e <f_open+0x362>
 8014108:	2301      	movs	r3, #1
 801410a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801410e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014112:	2b00      	cmp	r3, #0
 8014114:	d002      	beq.n	801411c <f_open+0x370>
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	2200      	movs	r2, #0
 801411a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801411c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8014120:	4618      	mov	r0, r3
 8014122:	3768      	adds	r7, #104	; 0x68
 8014124:	46bd      	mov	sp, r7
 8014126:	bd80      	pop	{r7, pc}

08014128 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8014128:	b580      	push	{r7, lr}
 801412a:	b08e      	sub	sp, #56	; 0x38
 801412c:	af00      	add	r7, sp, #0
 801412e:	60f8      	str	r0, [r7, #12]
 8014130:	60b9      	str	r1, [r7, #8]
 8014132:	607a      	str	r2, [r7, #4]
 8014134:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8014136:	68bb      	ldr	r3, [r7, #8]
 8014138:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801413a:	683b      	ldr	r3, [r7, #0]
 801413c:	2200      	movs	r2, #0
 801413e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	f107 0214 	add.w	r2, r7, #20
 8014146:	4611      	mov	r1, r2
 8014148:	4618      	mov	r0, r3
 801414a:	f7ff fdb3 	bl	8013cb4 <validate>
 801414e:	4603      	mov	r3, r0
 8014150:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014154:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014158:	2b00      	cmp	r3, #0
 801415a:	d107      	bne.n	801416c <f_read+0x44>
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	7d5b      	ldrb	r3, [r3, #21]
 8014160:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014164:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014168:	2b00      	cmp	r3, #0
 801416a:	d002      	beq.n	8014172 <f_read+0x4a>
 801416c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014170:	e115      	b.n	801439e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	7d1b      	ldrb	r3, [r3, #20]
 8014176:	f003 0301 	and.w	r3, r3, #1
 801417a:	2b00      	cmp	r3, #0
 801417c:	d101      	bne.n	8014182 <f_read+0x5a>
 801417e:	2307      	movs	r3, #7
 8014180:	e10d      	b.n	801439e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	68da      	ldr	r2, [r3, #12]
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	699b      	ldr	r3, [r3, #24]
 801418a:	1ad3      	subs	r3, r2, r3
 801418c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801418e:	687a      	ldr	r2, [r7, #4]
 8014190:	6a3b      	ldr	r3, [r7, #32]
 8014192:	429a      	cmp	r2, r3
 8014194:	f240 80fe 	bls.w	8014394 <f_read+0x26c>
 8014198:	6a3b      	ldr	r3, [r7, #32]
 801419a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801419c:	e0fa      	b.n	8014394 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	699b      	ldr	r3, [r3, #24]
 80141a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	f040 80c6 	bne.w	8014338 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	699b      	ldr	r3, [r3, #24]
 80141b0:	0a5b      	lsrs	r3, r3, #9
 80141b2:	697a      	ldr	r2, [r7, #20]
 80141b4:	8952      	ldrh	r2, [r2, #10]
 80141b6:	3a01      	subs	r2, #1
 80141b8:	4013      	ands	r3, r2
 80141ba:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80141bc:	69fb      	ldr	r3, [r7, #28]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d12f      	bne.n	8014222 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	699b      	ldr	r3, [r3, #24]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d103      	bne.n	80141d2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	689b      	ldr	r3, [r3, #8]
 80141ce:	633b      	str	r3, [r7, #48]	; 0x30
 80141d0:	e013      	b.n	80141fa <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d007      	beq.n	80141ea <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	699b      	ldr	r3, [r3, #24]
 80141de:	4619      	mov	r1, r3
 80141e0:	68f8      	ldr	r0, [r7, #12]
 80141e2:	f7fe f841 	bl	8012268 <clmt_clust>
 80141e6:	6338      	str	r0, [r7, #48]	; 0x30
 80141e8:	e007      	b.n	80141fa <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80141ea:	68fa      	ldr	r2, [r7, #12]
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	69db      	ldr	r3, [r3, #28]
 80141f0:	4619      	mov	r1, r3
 80141f2:	4610      	mov	r0, r2
 80141f4:	f7fd fda7 	bl	8011d46 <get_fat>
 80141f8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80141fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141fc:	2b01      	cmp	r3, #1
 80141fe:	d804      	bhi.n	801420a <f_read+0xe2>
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	2202      	movs	r2, #2
 8014204:	755a      	strb	r2, [r3, #21]
 8014206:	2302      	movs	r3, #2
 8014208:	e0c9      	b.n	801439e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801420a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801420c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014210:	d104      	bne.n	801421c <f_read+0xf4>
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	2201      	movs	r2, #1
 8014216:	755a      	strb	r2, [r3, #21]
 8014218:	2301      	movs	r3, #1
 801421a:	e0c0      	b.n	801439e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014220:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014222:	697a      	ldr	r2, [r7, #20]
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	69db      	ldr	r3, [r3, #28]
 8014228:	4619      	mov	r1, r3
 801422a:	4610      	mov	r0, r2
 801422c:	f7fd fd6c 	bl	8011d08 <clust2sect>
 8014230:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014232:	69bb      	ldr	r3, [r7, #24]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d104      	bne.n	8014242 <f_read+0x11a>
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	2202      	movs	r2, #2
 801423c:	755a      	strb	r2, [r3, #21]
 801423e:	2302      	movs	r3, #2
 8014240:	e0ad      	b.n	801439e <f_read+0x276>
			sect += csect;
 8014242:	69ba      	ldr	r2, [r7, #24]
 8014244:	69fb      	ldr	r3, [r7, #28]
 8014246:	4413      	add	r3, r2
 8014248:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	0a5b      	lsrs	r3, r3, #9
 801424e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8014250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014252:	2b00      	cmp	r3, #0
 8014254:	d039      	beq.n	80142ca <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014256:	69fa      	ldr	r2, [r7, #28]
 8014258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801425a:	4413      	add	r3, r2
 801425c:	697a      	ldr	r2, [r7, #20]
 801425e:	8952      	ldrh	r2, [r2, #10]
 8014260:	4293      	cmp	r3, r2
 8014262:	d905      	bls.n	8014270 <f_read+0x148>
					cc = fs->csize - csect;
 8014264:	697b      	ldr	r3, [r7, #20]
 8014266:	895b      	ldrh	r3, [r3, #10]
 8014268:	461a      	mov	r2, r3
 801426a:	69fb      	ldr	r3, [r7, #28]
 801426c:	1ad3      	subs	r3, r2, r3
 801426e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014270:	697b      	ldr	r3, [r7, #20]
 8014272:	7858      	ldrb	r0, [r3, #1]
 8014274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014276:	69ba      	ldr	r2, [r7, #24]
 8014278:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801427a:	f7fd f99b 	bl	80115b4 <disk_read>
 801427e:	4603      	mov	r3, r0
 8014280:	2b00      	cmp	r3, #0
 8014282:	d004      	beq.n	801428e <f_read+0x166>
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	2201      	movs	r2, #1
 8014288:	755a      	strb	r2, [r3, #21]
 801428a:	2301      	movs	r3, #1
 801428c:	e087      	b.n	801439e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	7d1b      	ldrb	r3, [r3, #20]
 8014292:	b25b      	sxtb	r3, r3
 8014294:	2b00      	cmp	r3, #0
 8014296:	da14      	bge.n	80142c2 <f_read+0x19a>
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	6a1a      	ldr	r2, [r3, #32]
 801429c:	69bb      	ldr	r3, [r7, #24]
 801429e:	1ad3      	subs	r3, r2, r3
 80142a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80142a2:	429a      	cmp	r2, r3
 80142a4:	d90d      	bls.n	80142c2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	6a1a      	ldr	r2, [r3, #32]
 80142aa:	69bb      	ldr	r3, [r7, #24]
 80142ac:	1ad3      	subs	r3, r2, r3
 80142ae:	025b      	lsls	r3, r3, #9
 80142b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142b2:	18d0      	adds	r0, r2, r3
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	3330      	adds	r3, #48	; 0x30
 80142b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80142bc:	4619      	mov	r1, r3
 80142be:	f7fd fa59 	bl	8011774 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80142c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142c4:	025b      	lsls	r3, r3, #9
 80142c6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80142c8:	e050      	b.n	801436c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	6a1b      	ldr	r3, [r3, #32]
 80142ce:	69ba      	ldr	r2, [r7, #24]
 80142d0:	429a      	cmp	r2, r3
 80142d2:	d02e      	beq.n	8014332 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	7d1b      	ldrb	r3, [r3, #20]
 80142d8:	b25b      	sxtb	r3, r3
 80142da:	2b00      	cmp	r3, #0
 80142dc:	da18      	bge.n	8014310 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80142de:	697b      	ldr	r3, [r7, #20]
 80142e0:	7858      	ldrb	r0, [r3, #1]
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	6a1a      	ldr	r2, [r3, #32]
 80142ec:	2301      	movs	r3, #1
 80142ee:	f7fd f981 	bl	80115f4 <disk_write>
 80142f2:	4603      	mov	r3, r0
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d004      	beq.n	8014302 <f_read+0x1da>
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	2201      	movs	r2, #1
 80142fc:	755a      	strb	r2, [r3, #21]
 80142fe:	2301      	movs	r3, #1
 8014300:	e04d      	b.n	801439e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	7d1b      	ldrb	r3, [r3, #20]
 8014306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801430a:	b2da      	uxtb	r2, r3
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014310:	697b      	ldr	r3, [r7, #20]
 8014312:	7858      	ldrb	r0, [r3, #1]
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801431a:	2301      	movs	r3, #1
 801431c:	69ba      	ldr	r2, [r7, #24]
 801431e:	f7fd f949 	bl	80115b4 <disk_read>
 8014322:	4603      	mov	r3, r0
 8014324:	2b00      	cmp	r3, #0
 8014326:	d004      	beq.n	8014332 <f_read+0x20a>
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	2201      	movs	r2, #1
 801432c:	755a      	strb	r2, [r3, #21]
 801432e:	2301      	movs	r3, #1
 8014330:	e035      	b.n	801439e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	69ba      	ldr	r2, [r7, #24]
 8014336:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	699b      	ldr	r3, [r3, #24]
 801433c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014340:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014344:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8014346:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	429a      	cmp	r2, r3
 801434c:	d901      	bls.n	8014352 <f_read+0x22a>
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	699b      	ldr	r3, [r3, #24]
 801435c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014360:	4413      	add	r3, r2
 8014362:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014364:	4619      	mov	r1, r3
 8014366:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014368:	f7fd fa04 	bl	8011774 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801436c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801436e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014370:	4413      	add	r3, r2
 8014372:	627b      	str	r3, [r7, #36]	; 0x24
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	699a      	ldr	r2, [r3, #24]
 8014378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801437a:	441a      	add	r2, r3
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	619a      	str	r2, [r3, #24]
 8014380:	683b      	ldr	r3, [r7, #0]
 8014382:	681a      	ldr	r2, [r3, #0]
 8014384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014386:	441a      	add	r2, r3
 8014388:	683b      	ldr	r3, [r7, #0]
 801438a:	601a      	str	r2, [r3, #0]
 801438c:	687a      	ldr	r2, [r7, #4]
 801438e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014390:	1ad3      	subs	r3, r2, r3
 8014392:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	2b00      	cmp	r3, #0
 8014398:	f47f af01 	bne.w	801419e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801439c:	2300      	movs	r3, #0
}
 801439e:	4618      	mov	r0, r3
 80143a0:	3738      	adds	r7, #56	; 0x38
 80143a2:	46bd      	mov	sp, r7
 80143a4:	bd80      	pop	{r7, pc}

080143a6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80143a6:	b580      	push	{r7, lr}
 80143a8:	b08c      	sub	sp, #48	; 0x30
 80143aa:	af00      	add	r7, sp, #0
 80143ac:	60f8      	str	r0, [r7, #12]
 80143ae:	60b9      	str	r1, [r7, #8]
 80143b0:	607a      	str	r2, [r7, #4]
 80143b2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80143b4:	68bb      	ldr	r3, [r7, #8]
 80143b6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80143b8:	683b      	ldr	r3, [r7, #0]
 80143ba:	2200      	movs	r2, #0
 80143bc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	f107 0210 	add.w	r2, r7, #16
 80143c4:	4611      	mov	r1, r2
 80143c6:	4618      	mov	r0, r3
 80143c8:	f7ff fc74 	bl	8013cb4 <validate>
 80143cc:	4603      	mov	r3, r0
 80143ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80143d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d107      	bne.n	80143ea <f_write+0x44>
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	7d5b      	ldrb	r3, [r3, #21]
 80143de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80143e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d002      	beq.n	80143f0 <f_write+0x4a>
 80143ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80143ee:	e14b      	b.n	8014688 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	7d1b      	ldrb	r3, [r3, #20]
 80143f4:	f003 0302 	and.w	r3, r3, #2
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d101      	bne.n	8014400 <f_write+0x5a>
 80143fc:	2307      	movs	r3, #7
 80143fe:	e143      	b.n	8014688 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	699a      	ldr	r2, [r3, #24]
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	441a      	add	r2, r3
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	699b      	ldr	r3, [r3, #24]
 801440c:	429a      	cmp	r2, r3
 801440e:	f080 812d 	bcs.w	801466c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	699b      	ldr	r3, [r3, #24]
 8014416:	43db      	mvns	r3, r3
 8014418:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801441a:	e127      	b.n	801466c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	699b      	ldr	r3, [r3, #24]
 8014420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014424:	2b00      	cmp	r3, #0
 8014426:	f040 80e3 	bne.w	80145f0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	699b      	ldr	r3, [r3, #24]
 801442e:	0a5b      	lsrs	r3, r3, #9
 8014430:	693a      	ldr	r2, [r7, #16]
 8014432:	8952      	ldrh	r2, [r2, #10]
 8014434:	3a01      	subs	r2, #1
 8014436:	4013      	ands	r3, r2
 8014438:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801443a:	69bb      	ldr	r3, [r7, #24]
 801443c:	2b00      	cmp	r3, #0
 801443e:	d143      	bne.n	80144c8 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	699b      	ldr	r3, [r3, #24]
 8014444:	2b00      	cmp	r3, #0
 8014446:	d10c      	bne.n	8014462 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	689b      	ldr	r3, [r3, #8]
 801444c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801444e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014450:	2b00      	cmp	r3, #0
 8014452:	d11a      	bne.n	801448a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	2100      	movs	r1, #0
 8014458:	4618      	mov	r0, r3
 801445a:	f7fd fe6d 	bl	8012138 <create_chain>
 801445e:	62b8      	str	r0, [r7, #40]	; 0x28
 8014460:	e013      	b.n	801448a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014466:	2b00      	cmp	r3, #0
 8014468:	d007      	beq.n	801447a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	699b      	ldr	r3, [r3, #24]
 801446e:	4619      	mov	r1, r3
 8014470:	68f8      	ldr	r0, [r7, #12]
 8014472:	f7fd fef9 	bl	8012268 <clmt_clust>
 8014476:	62b8      	str	r0, [r7, #40]	; 0x28
 8014478:	e007      	b.n	801448a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801447a:	68fa      	ldr	r2, [r7, #12]
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	69db      	ldr	r3, [r3, #28]
 8014480:	4619      	mov	r1, r3
 8014482:	4610      	mov	r0, r2
 8014484:	f7fd fe58 	bl	8012138 <create_chain>
 8014488:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801448a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801448c:	2b00      	cmp	r3, #0
 801448e:	f000 80f2 	beq.w	8014676 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014494:	2b01      	cmp	r3, #1
 8014496:	d104      	bne.n	80144a2 <f_write+0xfc>
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	2202      	movs	r2, #2
 801449c:	755a      	strb	r2, [r3, #21]
 801449e:	2302      	movs	r3, #2
 80144a0:	e0f2      	b.n	8014688 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80144a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144a8:	d104      	bne.n	80144b4 <f_write+0x10e>
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	2201      	movs	r2, #1
 80144ae:	755a      	strb	r2, [r3, #21]
 80144b0:	2301      	movs	r3, #1
 80144b2:	e0e9      	b.n	8014688 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80144b8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	689b      	ldr	r3, [r3, #8]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d102      	bne.n	80144c8 <f_write+0x122>
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80144c6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	7d1b      	ldrb	r3, [r3, #20]
 80144cc:	b25b      	sxtb	r3, r3
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	da18      	bge.n	8014504 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80144d2:	693b      	ldr	r3, [r7, #16]
 80144d4:	7858      	ldrb	r0, [r3, #1]
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	6a1a      	ldr	r2, [r3, #32]
 80144e0:	2301      	movs	r3, #1
 80144e2:	f7fd f887 	bl	80115f4 <disk_write>
 80144e6:	4603      	mov	r3, r0
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d004      	beq.n	80144f6 <f_write+0x150>
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	2201      	movs	r2, #1
 80144f0:	755a      	strb	r2, [r3, #21]
 80144f2:	2301      	movs	r3, #1
 80144f4:	e0c8      	b.n	8014688 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	7d1b      	ldrb	r3, [r3, #20]
 80144fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80144fe:	b2da      	uxtb	r2, r3
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014504:	693a      	ldr	r2, [r7, #16]
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	69db      	ldr	r3, [r3, #28]
 801450a:	4619      	mov	r1, r3
 801450c:	4610      	mov	r0, r2
 801450e:	f7fd fbfb 	bl	8011d08 <clust2sect>
 8014512:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014514:	697b      	ldr	r3, [r7, #20]
 8014516:	2b00      	cmp	r3, #0
 8014518:	d104      	bne.n	8014524 <f_write+0x17e>
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	2202      	movs	r2, #2
 801451e:	755a      	strb	r2, [r3, #21]
 8014520:	2302      	movs	r3, #2
 8014522:	e0b1      	b.n	8014688 <f_write+0x2e2>
			sect += csect;
 8014524:	697a      	ldr	r2, [r7, #20]
 8014526:	69bb      	ldr	r3, [r7, #24]
 8014528:	4413      	add	r3, r2
 801452a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	0a5b      	lsrs	r3, r3, #9
 8014530:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8014532:	6a3b      	ldr	r3, [r7, #32]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d03c      	beq.n	80145b2 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014538:	69ba      	ldr	r2, [r7, #24]
 801453a:	6a3b      	ldr	r3, [r7, #32]
 801453c:	4413      	add	r3, r2
 801453e:	693a      	ldr	r2, [r7, #16]
 8014540:	8952      	ldrh	r2, [r2, #10]
 8014542:	4293      	cmp	r3, r2
 8014544:	d905      	bls.n	8014552 <f_write+0x1ac>
					cc = fs->csize - csect;
 8014546:	693b      	ldr	r3, [r7, #16]
 8014548:	895b      	ldrh	r3, [r3, #10]
 801454a:	461a      	mov	r2, r3
 801454c:	69bb      	ldr	r3, [r7, #24]
 801454e:	1ad3      	subs	r3, r2, r3
 8014550:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014552:	693b      	ldr	r3, [r7, #16]
 8014554:	7858      	ldrb	r0, [r3, #1]
 8014556:	6a3b      	ldr	r3, [r7, #32]
 8014558:	697a      	ldr	r2, [r7, #20]
 801455a:	69f9      	ldr	r1, [r7, #28]
 801455c:	f7fd f84a 	bl	80115f4 <disk_write>
 8014560:	4603      	mov	r3, r0
 8014562:	2b00      	cmp	r3, #0
 8014564:	d004      	beq.n	8014570 <f_write+0x1ca>
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	2201      	movs	r2, #1
 801456a:	755a      	strb	r2, [r3, #21]
 801456c:	2301      	movs	r3, #1
 801456e:	e08b      	b.n	8014688 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	6a1a      	ldr	r2, [r3, #32]
 8014574:	697b      	ldr	r3, [r7, #20]
 8014576:	1ad3      	subs	r3, r2, r3
 8014578:	6a3a      	ldr	r2, [r7, #32]
 801457a:	429a      	cmp	r2, r3
 801457c:	d915      	bls.n	80145aa <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	6a1a      	ldr	r2, [r3, #32]
 8014588:	697b      	ldr	r3, [r7, #20]
 801458a:	1ad3      	subs	r3, r2, r3
 801458c:	025b      	lsls	r3, r3, #9
 801458e:	69fa      	ldr	r2, [r7, #28]
 8014590:	4413      	add	r3, r2
 8014592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014596:	4619      	mov	r1, r3
 8014598:	f7fd f8ec 	bl	8011774 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	7d1b      	ldrb	r3, [r3, #20]
 80145a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80145a4:	b2da      	uxtb	r2, r3
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80145aa:	6a3b      	ldr	r3, [r7, #32]
 80145ac:	025b      	lsls	r3, r3, #9
 80145ae:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80145b0:	e03f      	b.n	8014632 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	6a1b      	ldr	r3, [r3, #32]
 80145b6:	697a      	ldr	r2, [r7, #20]
 80145b8:	429a      	cmp	r2, r3
 80145ba:	d016      	beq.n	80145ea <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	699a      	ldr	r2, [r3, #24]
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80145c4:	429a      	cmp	r2, r3
 80145c6:	d210      	bcs.n	80145ea <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80145c8:	693b      	ldr	r3, [r7, #16]
 80145ca:	7858      	ldrb	r0, [r3, #1]
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80145d2:	2301      	movs	r3, #1
 80145d4:	697a      	ldr	r2, [r7, #20]
 80145d6:	f7fc ffed 	bl	80115b4 <disk_read>
 80145da:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d004      	beq.n	80145ea <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	2201      	movs	r2, #1
 80145e4:	755a      	strb	r2, [r3, #21]
 80145e6:	2301      	movs	r3, #1
 80145e8:	e04e      	b.n	8014688 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	697a      	ldr	r2, [r7, #20]
 80145ee:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	699b      	ldr	r3, [r3, #24]
 80145f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80145f8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80145fc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80145fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	429a      	cmp	r2, r3
 8014604:	d901      	bls.n	801460a <f_write+0x264>
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	699b      	ldr	r3, [r3, #24]
 8014614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014618:	4413      	add	r3, r2
 801461a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801461c:	69f9      	ldr	r1, [r7, #28]
 801461e:	4618      	mov	r0, r3
 8014620:	f7fd f8a8 	bl	8011774 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	7d1b      	ldrb	r3, [r3, #20]
 8014628:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801462c:	b2da      	uxtb	r2, r3
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014632:	69fa      	ldr	r2, [r7, #28]
 8014634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014636:	4413      	add	r3, r2
 8014638:	61fb      	str	r3, [r7, #28]
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	699a      	ldr	r2, [r3, #24]
 801463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014640:	441a      	add	r2, r3
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	619a      	str	r2, [r3, #24]
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	68da      	ldr	r2, [r3, #12]
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	699b      	ldr	r3, [r3, #24]
 801464e:	429a      	cmp	r2, r3
 8014650:	bf38      	it	cc
 8014652:	461a      	movcc	r2, r3
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	60da      	str	r2, [r3, #12]
 8014658:	683b      	ldr	r3, [r7, #0]
 801465a:	681a      	ldr	r2, [r3, #0]
 801465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801465e:	441a      	add	r2, r3
 8014660:	683b      	ldr	r3, [r7, #0]
 8014662:	601a      	str	r2, [r3, #0]
 8014664:	687a      	ldr	r2, [r7, #4]
 8014666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014668:	1ad3      	subs	r3, r2, r3
 801466a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	2b00      	cmp	r3, #0
 8014670:	f47f aed4 	bne.w	801441c <f_write+0x76>
 8014674:	e000      	b.n	8014678 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014676:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	7d1b      	ldrb	r3, [r3, #20]
 801467c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014680:	b2da      	uxtb	r2, r3
 8014682:	68fb      	ldr	r3, [r7, #12]
 8014684:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8014686:	2300      	movs	r3, #0
}
 8014688:	4618      	mov	r0, r3
 801468a:	3730      	adds	r7, #48	; 0x30
 801468c:	46bd      	mov	sp, r7
 801468e:	bd80      	pop	{r7, pc}

08014690 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014690:	b580      	push	{r7, lr}
 8014692:	b086      	sub	sp, #24
 8014694:	af00      	add	r7, sp, #0
 8014696:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	f107 0208 	add.w	r2, r7, #8
 801469e:	4611      	mov	r1, r2
 80146a0:	4618      	mov	r0, r3
 80146a2:	f7ff fb07 	bl	8013cb4 <validate>
 80146a6:	4603      	mov	r3, r0
 80146a8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80146aa:	7dfb      	ldrb	r3, [r7, #23]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d168      	bne.n	8014782 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	7d1b      	ldrb	r3, [r3, #20]
 80146b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d062      	beq.n	8014782 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	7d1b      	ldrb	r3, [r3, #20]
 80146c0:	b25b      	sxtb	r3, r3
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	da15      	bge.n	80146f2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80146c6:	68bb      	ldr	r3, [r7, #8]
 80146c8:	7858      	ldrb	r0, [r3, #1]
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	6a1a      	ldr	r2, [r3, #32]
 80146d4:	2301      	movs	r3, #1
 80146d6:	f7fc ff8d 	bl	80115f4 <disk_write>
 80146da:	4603      	mov	r3, r0
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d001      	beq.n	80146e4 <f_sync+0x54>
 80146e0:	2301      	movs	r3, #1
 80146e2:	e04f      	b.n	8014784 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	7d1b      	ldrb	r3, [r3, #20]
 80146e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80146ec:	b2da      	uxtb	r2, r3
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80146f2:	f7f9 fe6d 	bl	800e3d0 <get_fattime>
 80146f6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80146f8:	68ba      	ldr	r2, [r7, #8]
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146fe:	4619      	mov	r1, r3
 8014700:	4610      	mov	r0, r2
 8014702:	f7fd fa65 	bl	8011bd0 <move_window>
 8014706:	4603      	mov	r3, r0
 8014708:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801470a:	7dfb      	ldrb	r3, [r7, #23]
 801470c:	2b00      	cmp	r3, #0
 801470e:	d138      	bne.n	8014782 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014714:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	330b      	adds	r3, #11
 801471a:	781a      	ldrb	r2, [r3, #0]
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	330b      	adds	r3, #11
 8014720:	f042 0220 	orr.w	r2, r2, #32
 8014724:	b2d2      	uxtb	r2, r2
 8014726:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	6818      	ldr	r0, [r3, #0]
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	689b      	ldr	r3, [r3, #8]
 8014730:	461a      	mov	r2, r3
 8014732:	68f9      	ldr	r1, [r7, #12]
 8014734:	f7fd ff72 	bl	801261c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	f103 021c 	add.w	r2, r3, #28
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	68db      	ldr	r3, [r3, #12]
 8014742:	4619      	mov	r1, r3
 8014744:	4610      	mov	r0, r2
 8014746:	f7fc ffe9 	bl	801171c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	3316      	adds	r3, #22
 801474e:	6939      	ldr	r1, [r7, #16]
 8014750:	4618      	mov	r0, r3
 8014752:	f7fc ffe3 	bl	801171c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	3312      	adds	r3, #18
 801475a:	2100      	movs	r1, #0
 801475c:	4618      	mov	r0, r3
 801475e:	f7fc ffc2 	bl	80116e6 <st_word>
					fs->wflag = 1;
 8014762:	68bb      	ldr	r3, [r7, #8]
 8014764:	2201      	movs	r2, #1
 8014766:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014768:	68bb      	ldr	r3, [r7, #8]
 801476a:	4618      	mov	r0, r3
 801476c:	f7fd fa5e 	bl	8011c2c <sync_fs>
 8014770:	4603      	mov	r3, r0
 8014772:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	7d1b      	ldrb	r3, [r3, #20]
 8014778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801477c:	b2da      	uxtb	r2, r3
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014782:	7dfb      	ldrb	r3, [r7, #23]
}
 8014784:	4618      	mov	r0, r3
 8014786:	3718      	adds	r7, #24
 8014788:	46bd      	mov	sp, r7
 801478a:	bd80      	pop	{r7, pc}

0801478c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801478c:	b580      	push	{r7, lr}
 801478e:	b084      	sub	sp, #16
 8014790:	af00      	add	r7, sp, #0
 8014792:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014794:	6878      	ldr	r0, [r7, #4]
 8014796:	f7ff ff7b 	bl	8014690 <f_sync>
 801479a:	4603      	mov	r3, r0
 801479c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801479e:	7bfb      	ldrb	r3, [r7, #15]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d118      	bne.n	80147d6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	f107 0208 	add.w	r2, r7, #8
 80147aa:	4611      	mov	r1, r2
 80147ac:	4618      	mov	r0, r3
 80147ae:	f7ff fa81 	bl	8013cb4 <validate>
 80147b2:	4603      	mov	r3, r0
 80147b4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80147b6:	7bfb      	ldrb	r3, [r7, #15]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d10c      	bne.n	80147d6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	691b      	ldr	r3, [r3, #16]
 80147c0:	4618      	mov	r0, r3
 80147c2:	f7fd f961 	bl	8011a88 <dec_lock>
 80147c6:	4603      	mov	r3, r0
 80147c8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80147ca:	7bfb      	ldrb	r3, [r7, #15]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d102      	bne.n	80147d6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	2200      	movs	r2, #0
 80147d4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80147d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80147d8:	4618      	mov	r0, r3
 80147da:	3710      	adds	r7, #16
 80147dc:	46bd      	mov	sp, r7
 80147de:	bd80      	pop	{r7, pc}

080147e0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80147e0:	b580      	push	{r7, lr}
 80147e2:	b086      	sub	sp, #24
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	6078      	str	r0, [r7, #4]
 80147e8:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d101      	bne.n	80147f4 <f_opendir+0x14>
 80147f0:	2309      	movs	r3, #9
 80147f2:	e064      	b.n	80148be <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80147f8:	f107 010c 	add.w	r1, r7, #12
 80147fc:	463b      	mov	r3, r7
 80147fe:	2200      	movs	r2, #0
 8014800:	4618      	mov	r0, r3
 8014802:	f7ff f805 	bl	8013810 <find_volume>
 8014806:	4603      	mov	r3, r0
 8014808:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801480a:	7dfb      	ldrb	r3, [r7, #23]
 801480c:	2b00      	cmp	r3, #0
 801480e:	d14f      	bne.n	80148b0 <f_opendir+0xd0>
		obj->fs = fs;
 8014810:	68fa      	ldr	r2, [r7, #12]
 8014812:	693b      	ldr	r3, [r7, #16]
 8014814:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8014816:	683b      	ldr	r3, [r7, #0]
 8014818:	4619      	mov	r1, r3
 801481a:	6878      	ldr	r0, [r7, #4]
 801481c:	f7fe feec 	bl	80135f8 <follow_path>
 8014820:	4603      	mov	r3, r0
 8014822:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8014824:	7dfb      	ldrb	r3, [r7, #23]
 8014826:	2b00      	cmp	r3, #0
 8014828:	d13d      	bne.n	80148a6 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014830:	b25b      	sxtb	r3, r3
 8014832:	2b00      	cmp	r3, #0
 8014834:	db12      	blt.n	801485c <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8014836:	693b      	ldr	r3, [r7, #16]
 8014838:	799b      	ldrb	r3, [r3, #6]
 801483a:	f003 0310 	and.w	r3, r3, #16
 801483e:	2b00      	cmp	r3, #0
 8014840:	d00a      	beq.n	8014858 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8014842:	68fa      	ldr	r2, [r7, #12]
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	6a1b      	ldr	r3, [r3, #32]
 8014848:	4619      	mov	r1, r3
 801484a:	4610      	mov	r0, r2
 801484c:	f7fd fec7 	bl	80125de <ld_clust>
 8014850:	4602      	mov	r2, r0
 8014852:	693b      	ldr	r3, [r7, #16]
 8014854:	609a      	str	r2, [r3, #8]
 8014856:	e001      	b.n	801485c <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8014858:	2305      	movs	r3, #5
 801485a:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801485c:	7dfb      	ldrb	r3, [r7, #23]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d121      	bne.n	80148a6 <f_opendir+0xc6>
				obj->id = fs->id;
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	88da      	ldrh	r2, [r3, #6]
 8014866:	693b      	ldr	r3, [r7, #16]
 8014868:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801486a:	2100      	movs	r1, #0
 801486c:	6878      	ldr	r0, [r7, #4]
 801486e:	f7fd fd2f 	bl	80122d0 <dir_sdi>
 8014872:	4603      	mov	r3, r0
 8014874:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8014876:	7dfb      	ldrb	r3, [r7, #23]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d114      	bne.n	80148a6 <f_opendir+0xc6>
					if (obj->sclust) {
 801487c:	693b      	ldr	r3, [r7, #16]
 801487e:	689b      	ldr	r3, [r3, #8]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d00d      	beq.n	80148a0 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8014884:	2100      	movs	r1, #0
 8014886:	6878      	ldr	r0, [r7, #4]
 8014888:	f7fd f870 	bl	801196c <inc_lock>
 801488c:	4602      	mov	r2, r0
 801488e:	693b      	ldr	r3, [r7, #16]
 8014890:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8014892:	693b      	ldr	r3, [r7, #16]
 8014894:	691b      	ldr	r3, [r3, #16]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d105      	bne.n	80148a6 <f_opendir+0xc6>
 801489a:	2312      	movs	r3, #18
 801489c:	75fb      	strb	r3, [r7, #23]
 801489e:	e002      	b.n	80148a6 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80148a0:	693b      	ldr	r3, [r7, #16]
 80148a2:	2200      	movs	r2, #0
 80148a4:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80148a6:	7dfb      	ldrb	r3, [r7, #23]
 80148a8:	2b04      	cmp	r3, #4
 80148aa:	d101      	bne.n	80148b0 <f_opendir+0xd0>
 80148ac:	2305      	movs	r3, #5
 80148ae:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80148b0:	7dfb      	ldrb	r3, [r7, #23]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d002      	beq.n	80148bc <f_opendir+0xdc>
 80148b6:	693b      	ldr	r3, [r7, #16]
 80148b8:	2200      	movs	r2, #0
 80148ba:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80148bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80148be:	4618      	mov	r0, r3
 80148c0:	3718      	adds	r7, #24
 80148c2:	46bd      	mov	sp, r7
 80148c4:	bd80      	pop	{r7, pc}

080148c6 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80148c6:	b580      	push	{r7, lr}
 80148c8:	b084      	sub	sp, #16
 80148ca:	af00      	add	r7, sp, #0
 80148cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	f107 0208 	add.w	r2, r7, #8
 80148d4:	4611      	mov	r1, r2
 80148d6:	4618      	mov	r0, r3
 80148d8:	f7ff f9ec 	bl	8013cb4 <validate>
 80148dc:	4603      	mov	r3, r0
 80148de:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80148e0:	7bfb      	ldrb	r3, [r7, #15]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d110      	bne.n	8014908 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	691b      	ldr	r3, [r3, #16]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d006      	beq.n	80148fc <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	691b      	ldr	r3, [r3, #16]
 80148f2:	4618      	mov	r0, r3
 80148f4:	f7fd f8c8 	bl	8011a88 <dec_lock>
 80148f8:	4603      	mov	r3, r0
 80148fa:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80148fc:	7bfb      	ldrb	r3, [r7, #15]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d102      	bne.n	8014908 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	2200      	movs	r2, #0
 8014906:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8014908:	7bfb      	ldrb	r3, [r7, #15]
}
 801490a:	4618      	mov	r0, r3
 801490c:	3710      	adds	r7, #16
 801490e:	46bd      	mov	sp, r7
 8014910:	bd80      	pop	{r7, pc}

08014912 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8014912:	b580      	push	{r7, lr}
 8014914:	b084      	sub	sp, #16
 8014916:	af00      	add	r7, sp, #0
 8014918:	6078      	str	r0, [r7, #4]
 801491a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	f107 0208 	add.w	r2, r7, #8
 8014922:	4611      	mov	r1, r2
 8014924:	4618      	mov	r0, r3
 8014926:	f7ff f9c5 	bl	8013cb4 <validate>
 801492a:	4603      	mov	r3, r0
 801492c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801492e:	7bfb      	ldrb	r3, [r7, #15]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d126      	bne.n	8014982 <f_readdir+0x70>
		if (!fno) {
 8014934:	683b      	ldr	r3, [r7, #0]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d106      	bne.n	8014948 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801493a:	2100      	movs	r1, #0
 801493c:	6878      	ldr	r0, [r7, #4]
 801493e:	f7fd fcc7 	bl	80122d0 <dir_sdi>
 8014942:	4603      	mov	r3, r0
 8014944:	73fb      	strb	r3, [r7, #15]
 8014946:	e01c      	b.n	8014982 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8014948:	2100      	movs	r1, #0
 801494a:	6878      	ldr	r0, [r7, #4]
 801494c:	f7fe f873 	bl	8012a36 <dir_read>
 8014950:	4603      	mov	r3, r0
 8014952:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8014954:	7bfb      	ldrb	r3, [r7, #15]
 8014956:	2b04      	cmp	r3, #4
 8014958:	d101      	bne.n	801495e <f_readdir+0x4c>
 801495a:	2300      	movs	r3, #0
 801495c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 801495e:	7bfb      	ldrb	r3, [r7, #15]
 8014960:	2b00      	cmp	r3, #0
 8014962:	d10e      	bne.n	8014982 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8014964:	6839      	ldr	r1, [r7, #0]
 8014966:	6878      	ldr	r0, [r7, #4]
 8014968:	f7fe fb0e 	bl	8012f88 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801496c:	2100      	movs	r1, #0
 801496e:	6878      	ldr	r0, [r7, #4]
 8014970:	f7fd fd29 	bl	80123c6 <dir_next>
 8014974:	4603      	mov	r3, r0
 8014976:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8014978:	7bfb      	ldrb	r3, [r7, #15]
 801497a:	2b04      	cmp	r3, #4
 801497c:	d101      	bne.n	8014982 <f_readdir+0x70>
 801497e:	2300      	movs	r3, #0
 8014980:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8014982:	7bfb      	ldrb	r3, [r7, #15]
}
 8014984:	4618      	mov	r0, r3
 8014986:	3710      	adds	r7, #16
 8014988:	46bd      	mov	sp, r7
 801498a:	bd80      	pop	{r7, pc}

0801498c <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b084      	sub	sp, #16
 8014990:	af00      	add	r7, sp, #0
 8014992:	6078      	str	r0, [r7, #4]
 8014994:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 8014996:	6839      	ldr	r1, [r7, #0]
 8014998:	6878      	ldr	r0, [r7, #4]
 801499a:	f7ff ffba 	bl	8014912 <f_readdir>
 801499e:	4603      	mov	r3, r0
 80149a0:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 80149a2:	7bfb      	ldrb	r3, [r7, #15]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d114      	bne.n	80149d2 <f_findnext+0x46>
 80149a8:	683b      	ldr	r3, [r7, #0]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d011      	beq.n	80149d2 <f_findnext+0x46>
 80149ae:	683b      	ldr	r3, [r7, #0]
 80149b0:	7d9b      	ldrb	r3, [r3, #22]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d00d      	beq.n	80149d2 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80149ba:	683b      	ldr	r3, [r7, #0]
 80149bc:	f103 0116 	add.w	r1, r3, #22
 80149c0:	2300      	movs	r3, #0
 80149c2:	2200      	movs	r2, #0
 80149c4:	f7fe fbe4 	bl	8013190 <pattern_matching>
 80149c8:	4603      	mov	r3, r0
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d100      	bne.n	80149d0 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 80149ce:	e7e2      	b.n	8014996 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 80149d0:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 80149d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80149d4:	4618      	mov	r0, r3
 80149d6:	3710      	adds	r7, #16
 80149d8:	46bd      	mov	sp, r7
 80149da:	bd80      	pop	{r7, pc}

080149dc <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 80149dc:	b580      	push	{r7, lr}
 80149de:	b086      	sub	sp, #24
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	60f8      	str	r0, [r7, #12]
 80149e4:	60b9      	str	r1, [r7, #8]
 80149e6:	607a      	str	r2, [r7, #4]
 80149e8:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	683a      	ldr	r2, [r7, #0]
 80149ee:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 80149f0:	6879      	ldr	r1, [r7, #4]
 80149f2:	68f8      	ldr	r0, [r7, #12]
 80149f4:	f7ff fef4 	bl	80147e0 <f_opendir>
 80149f8:	4603      	mov	r3, r0
 80149fa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80149fc:	7dfb      	ldrb	r3, [r7, #23]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d105      	bne.n	8014a0e <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 8014a02:	68b9      	ldr	r1, [r7, #8]
 8014a04:	68f8      	ldr	r0, [r7, #12]
 8014a06:	f7ff ffc1 	bl	801498c <f_findnext>
 8014a0a:	4603      	mov	r3, r0
 8014a0c:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 8014a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a10:	4618      	mov	r0, r3
 8014a12:	3718      	adds	r7, #24
 8014a14:	46bd      	mov	sp, r7
 8014a16:	bd80      	pop	{r7, pc}

08014a18 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	b092      	sub	sp, #72	; 0x48
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	6078      	str	r0, [r7, #4]
 8014a20:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8014a22:	f107 010c 	add.w	r1, r7, #12
 8014a26:	1d3b      	adds	r3, r7, #4
 8014a28:	2200      	movs	r2, #0
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	f7fe fef0 	bl	8013810 <find_volume>
 8014a30:	4603      	mov	r3, r0
 8014a32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8014a36:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d11f      	bne.n	8014a7e <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014a3e:	687a      	ldr	r2, [r7, #4]
 8014a40:	f107 030c 	add.w	r3, r7, #12
 8014a44:	4611      	mov	r1, r2
 8014a46:	4618      	mov	r0, r3
 8014a48:	f7fe fdd6 	bl	80135f8 <follow_path>
 8014a4c:	4603      	mov	r3, r0
 8014a4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res == FR_OK) {				/* Follow completed */
 8014a52:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d111      	bne.n	8014a7e <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8014a5a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8014a5e:	b25b      	sxtb	r3, r3
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	da03      	bge.n	8014a6c <f_stat+0x54>
				res = FR_INVALID_NAME;
 8014a64:	2306      	movs	r3, #6
 8014a66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8014a6a:	e008      	b.n	8014a7e <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8014a6c:	683b      	ldr	r3, [r7, #0]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d005      	beq.n	8014a7e <f_stat+0x66>
 8014a72:	f107 030c 	add.w	r3, r7, #12
 8014a76:	6839      	ldr	r1, [r7, #0]
 8014a78:	4618      	mov	r0, r3
 8014a7a:	f7fe fa85 	bl	8012f88 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8014a7e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8014a82:	4618      	mov	r0, r3
 8014a84:	3748      	adds	r7, #72	; 0x48
 8014a86:	46bd      	mov	sp, r7
 8014a88:	bd80      	pop	{r7, pc}

08014a8a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8014a8a:	b580      	push	{r7, lr}
 8014a8c:	b092      	sub	sp, #72	; 0x48
 8014a8e:	af00      	add	r7, sp, #0
 8014a90:	60f8      	str	r0, [r7, #12]
 8014a92:	60b9      	str	r1, [r7, #8]
 8014a94:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8014a96:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8014a9a:	f107 030c 	add.w	r3, r7, #12
 8014a9e:	2200      	movs	r2, #0
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	f7fe feb5 	bl	8013810 <find_volume>
 8014aa6:	4603      	mov	r3, r0
 8014aa8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8014aac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	f040 8099 	bne.w	8014be8 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8014ab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8014abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014abe:	695a      	ldr	r2, [r3, #20]
 8014ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ac2:	699b      	ldr	r3, [r3, #24]
 8014ac4:	3b02      	subs	r3, #2
 8014ac6:	429a      	cmp	r2, r3
 8014ac8:	d804      	bhi.n	8014ad4 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8014aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014acc:	695a      	ldr	r2, [r3, #20]
 8014ace:	68bb      	ldr	r3, [r7, #8]
 8014ad0:	601a      	str	r2, [r3, #0]
 8014ad2:	e089      	b.n	8014be8 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8014ad4:	2300      	movs	r3, #0
 8014ad6:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8014ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ada:	781b      	ldrb	r3, [r3, #0]
 8014adc:	2b01      	cmp	r3, #1
 8014ade:	d128      	bne.n	8014b32 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8014ae0:	2302      	movs	r3, #2
 8014ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ae6:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8014ae8:	f107 0314 	add.w	r3, r7, #20
 8014aec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014aee:	4618      	mov	r0, r3
 8014af0:	f7fd f929 	bl	8011d46 <get_fat>
 8014af4:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8014af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014afc:	d103      	bne.n	8014b06 <f_getfree+0x7c>
 8014afe:	2301      	movs	r3, #1
 8014b00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8014b04:	e063      	b.n	8014bce <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8014b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b08:	2b01      	cmp	r3, #1
 8014b0a:	d103      	bne.n	8014b14 <f_getfree+0x8a>
 8014b0c:	2302      	movs	r3, #2
 8014b0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8014b12:	e05c      	b.n	8014bce <f_getfree+0x144>
					if (stat == 0) nfree++;
 8014b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d102      	bne.n	8014b20 <f_getfree+0x96>
 8014b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b1c:	3301      	adds	r3, #1
 8014b1e:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8014b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b22:	3301      	adds	r3, #1
 8014b24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b28:	699b      	ldr	r3, [r3, #24]
 8014b2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014b2c:	429a      	cmp	r2, r3
 8014b2e:	d3db      	bcc.n	8014ae8 <f_getfree+0x5e>
 8014b30:	e04d      	b.n	8014bce <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8014b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b34:	699b      	ldr	r3, [r3, #24]
 8014b36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b3c:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8014b3e:	2300      	movs	r3, #0
 8014b40:	637b      	str	r3, [r7, #52]	; 0x34
 8014b42:	2300      	movs	r3, #0
 8014b44:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8014b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d113      	bne.n	8014b74 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8014b4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b50:	1c5a      	adds	r2, r3, #1
 8014b52:	63ba      	str	r2, [r7, #56]	; 0x38
 8014b54:	4619      	mov	r1, r3
 8014b56:	f7fd f83b 	bl	8011bd0 <move_window>
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8014b60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d131      	bne.n	8014bcc <f_getfree+0x142>
							p = fs->win;
 8014b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b6a:	3334      	adds	r3, #52	; 0x34
 8014b6c:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8014b6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014b72:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8014b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b76:	781b      	ldrb	r3, [r3, #0]
 8014b78:	2b02      	cmp	r3, #2
 8014b7a:	d10f      	bne.n	8014b9c <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8014b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014b7e:	f7fc fd77 	bl	8011670 <ld_word>
 8014b82:	4603      	mov	r3, r0
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d102      	bne.n	8014b8e <f_getfree+0x104>
 8014b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b8a:	3301      	adds	r3, #1
 8014b8c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8014b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b90:	3302      	adds	r3, #2
 8014b92:	633b      	str	r3, [r7, #48]	; 0x30
 8014b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b96:	3b02      	subs	r3, #2
 8014b98:	637b      	str	r3, [r7, #52]	; 0x34
 8014b9a:	e010      	b.n	8014bbe <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8014b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014b9e:	f7fc fd7f 	bl	80116a0 <ld_dword>
 8014ba2:	4603      	mov	r3, r0
 8014ba4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d102      	bne.n	8014bb2 <f_getfree+0x128>
 8014bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014bae:	3301      	adds	r3, #1
 8014bb0:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8014bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bb4:	3304      	adds	r3, #4
 8014bb6:	633b      	str	r3, [r7, #48]	; 0x30
 8014bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bba:	3b04      	subs	r3, #4
 8014bbc:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8014bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014bc0:	3b01      	subs	r3, #1
 8014bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d1bd      	bne.n	8014b46 <f_getfree+0xbc>
 8014bca:	e000      	b.n	8014bce <f_getfree+0x144>
							if (res != FR_OK) break;
 8014bcc:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8014bce:	68bb      	ldr	r3, [r7, #8]
 8014bd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014bd2:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8014bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014bd8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8014bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bdc:	791a      	ldrb	r2, [r3, #4]
 8014bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014be0:	f042 0201 	orr.w	r2, r2, #1
 8014be4:	b2d2      	uxtb	r2, r2
 8014be6:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8014be8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8014bec:	4618      	mov	r0, r3
 8014bee:	3748      	adds	r7, #72	; 0x48
 8014bf0:	46bd      	mov	sp, r7
 8014bf2:	bd80      	pop	{r7, pc}

08014bf4 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8014bf4:	b580      	push	{r7, lr}
 8014bf6:	b0a2      	sub	sp, #136	; 0x88
 8014bf8:	af00      	add	r7, sp, #0
 8014bfa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8014bfc:	2300      	movs	r3, #0
 8014bfe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014c02:	f107 010c 	add.w	r1, r7, #12
 8014c06:	1d3b      	adds	r3, r7, #4
 8014c08:	2202      	movs	r2, #2
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	f7fe fe00 	bl	8013810 <find_volume>
 8014c10:	4603      	mov	r3, r0
 8014c12:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	dj.obj.fs = fs;
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	64bb      	str	r3, [r7, #72]	; 0x48
	if (res == FR_OK) {
 8014c1a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	f040 8092 	bne.w	8014d48 <f_unlink+0x154>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8014c24:	687a      	ldr	r2, [r7, #4]
 8014c26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014c2a:	4611      	mov	r1, r2
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	f7fe fce3 	bl	80135f8 <follow_path>
 8014c32:	4603      	mov	r3, r0
 8014c34:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8014c38:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d108      	bne.n	8014c52 <f_unlink+0x5e>
 8014c40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014c44:	2102      	movs	r1, #2
 8014c46:	4618      	mov	r0, r3
 8014c48:	f7fc fe12 	bl	8011870 <chk_lock>
 8014c4c:	4603      	mov	r3, r0
 8014c4e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8014c52:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d176      	bne.n	8014d48 <f_unlink+0x154>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8014c5a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014c5e:	b25b      	sxtb	r3, r3
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	da03      	bge.n	8014c6c <f_unlink+0x78>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8014c64:	2306      	movs	r3, #6
 8014c66:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8014c6a:	e008      	b.n	8014c7e <f_unlink+0x8a>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8014c6c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8014c70:	f003 0301 	and.w	r3, r3, #1
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d002      	beq.n	8014c7e <f_unlink+0x8a>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8014c78:	2307      	movs	r3, #7
 8014c7a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
			if (res == FR_OK) {
 8014c7e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d136      	bne.n	8014cf4 <f_unlink+0x100>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014c8a:	4611      	mov	r1, r2
 8014c8c:	4618      	mov	r0, r3
 8014c8e:	f7fd fca6 	bl	80125de <ld_clust>
 8014c92:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8014c96:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8014c9a:	f003 0310 	and.w	r3, r3, #16
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d028      	beq.n	8014cf4 <f_unlink+0x100>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8014ca6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014caa:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8014cac:	f107 0310 	add.w	r3, r7, #16
 8014cb0:	2100      	movs	r1, #0
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	f7fd fb0c 	bl	80122d0 <dir_sdi>
 8014cb8:	4603      	mov	r3, r0
 8014cba:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						if (res == FR_OK) {
 8014cbe:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d116      	bne.n	8014cf4 <f_unlink+0x100>
							res = dir_read(&sdj, 0);			/* Read an item */
 8014cc6:	f107 0310 	add.w	r3, r7, #16
 8014cca:	2100      	movs	r1, #0
 8014ccc:	4618      	mov	r0, r3
 8014cce:	f7fd feb2 	bl	8012a36 <dir_read>
 8014cd2:	4603      	mov	r3, r0
 8014cd4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8014cd8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d102      	bne.n	8014ce6 <f_unlink+0xf2>
 8014ce0:	2307      	movs	r3, #7
 8014ce2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8014ce6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8014cea:	2b04      	cmp	r3, #4
 8014cec:	d102      	bne.n	8014cf4 <f_unlink+0x100>
 8014cee:	2300      	movs	r3, #0
 8014cf0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						}
					}
				}
			}
			if (res == FR_OK) {
 8014cf4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d125      	bne.n	8014d48 <f_unlink+0x154>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8014cfc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014d00:	4618      	mov	r0, r3
 8014d02:	f7fe f8f7 	bl	8012ef4 <dir_remove>
 8014d06:	4603      	mov	r3, r0
 8014d08:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8014d0c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d10e      	bne.n	8014d32 <f_unlink+0x13e>
 8014d14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d00a      	beq.n	8014d32 <f_unlink+0x13e>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8014d1c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014d20:	2200      	movs	r2, #0
 8014d22:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8014d26:	4618      	mov	r0, r3
 8014d28:	f7fd f9a1 	bl	801206e <remove_chain>
 8014d2c:	4603      	mov	r3, r0
 8014d2e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8014d32:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d106      	bne.n	8014d48 <f_unlink+0x154>
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	f7fc ff75 	bl	8011c2c <sync_fs>
 8014d42:	4603      	mov	r3, r0
 8014d44:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014d48:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	3788      	adds	r7, #136	; 0x88
 8014d50:	46bd      	mov	sp, r7
 8014d52:	bd80      	pop	{r7, pc}

08014d54 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014d54:	b480      	push	{r7}
 8014d56:	b087      	sub	sp, #28
 8014d58:	af00      	add	r7, sp, #0
 8014d5a:	60f8      	str	r0, [r7, #12]
 8014d5c:	60b9      	str	r1, [r7, #8]
 8014d5e:	4613      	mov	r3, r2
 8014d60:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014d62:	2301      	movs	r3, #1
 8014d64:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014d66:	2300      	movs	r3, #0
 8014d68:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014d6a:	4b1f      	ldr	r3, [pc, #124]	; (8014de8 <FATFS_LinkDriverEx+0x94>)
 8014d6c:	7a5b      	ldrb	r3, [r3, #9]
 8014d6e:	b2db      	uxtb	r3, r3
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d131      	bne.n	8014dd8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014d74:	4b1c      	ldr	r3, [pc, #112]	; (8014de8 <FATFS_LinkDriverEx+0x94>)
 8014d76:	7a5b      	ldrb	r3, [r3, #9]
 8014d78:	b2db      	uxtb	r3, r3
 8014d7a:	461a      	mov	r2, r3
 8014d7c:	4b1a      	ldr	r3, [pc, #104]	; (8014de8 <FATFS_LinkDriverEx+0x94>)
 8014d7e:	2100      	movs	r1, #0
 8014d80:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014d82:	4b19      	ldr	r3, [pc, #100]	; (8014de8 <FATFS_LinkDriverEx+0x94>)
 8014d84:	7a5b      	ldrb	r3, [r3, #9]
 8014d86:	b2db      	uxtb	r3, r3
 8014d88:	4a17      	ldr	r2, [pc, #92]	; (8014de8 <FATFS_LinkDriverEx+0x94>)
 8014d8a:	009b      	lsls	r3, r3, #2
 8014d8c:	4413      	add	r3, r2
 8014d8e:	68fa      	ldr	r2, [r7, #12]
 8014d90:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014d92:	4b15      	ldr	r3, [pc, #84]	; (8014de8 <FATFS_LinkDriverEx+0x94>)
 8014d94:	7a5b      	ldrb	r3, [r3, #9]
 8014d96:	b2db      	uxtb	r3, r3
 8014d98:	461a      	mov	r2, r3
 8014d9a:	4b13      	ldr	r3, [pc, #76]	; (8014de8 <FATFS_LinkDriverEx+0x94>)
 8014d9c:	4413      	add	r3, r2
 8014d9e:	79fa      	ldrb	r2, [r7, #7]
 8014da0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014da2:	4b11      	ldr	r3, [pc, #68]	; (8014de8 <FATFS_LinkDriverEx+0x94>)
 8014da4:	7a5b      	ldrb	r3, [r3, #9]
 8014da6:	b2db      	uxtb	r3, r3
 8014da8:	1c5a      	adds	r2, r3, #1
 8014daa:	b2d1      	uxtb	r1, r2
 8014dac:	4a0e      	ldr	r2, [pc, #56]	; (8014de8 <FATFS_LinkDriverEx+0x94>)
 8014dae:	7251      	strb	r1, [r2, #9]
 8014db0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014db2:	7dbb      	ldrb	r3, [r7, #22]
 8014db4:	3330      	adds	r3, #48	; 0x30
 8014db6:	b2da      	uxtb	r2, r3
 8014db8:	68bb      	ldr	r3, [r7, #8]
 8014dba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014dbc:	68bb      	ldr	r3, [r7, #8]
 8014dbe:	3301      	adds	r3, #1
 8014dc0:	223a      	movs	r2, #58	; 0x3a
 8014dc2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014dc4:	68bb      	ldr	r3, [r7, #8]
 8014dc6:	3302      	adds	r3, #2
 8014dc8:	222f      	movs	r2, #47	; 0x2f
 8014dca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014dcc:	68bb      	ldr	r3, [r7, #8]
 8014dce:	3303      	adds	r3, #3
 8014dd0:	2200      	movs	r2, #0
 8014dd2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8014dda:	4618      	mov	r0, r3
 8014ddc:	371c      	adds	r7, #28
 8014dde:	46bd      	mov	sp, r7
 8014de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de4:	4770      	bx	lr
 8014de6:	bf00      	nop
 8014de8:	2400a5f8 	.word	0x2400a5f8

08014dec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014dec:	b580      	push	{r7, lr}
 8014dee:	b082      	sub	sp, #8
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	6078      	str	r0, [r7, #4]
 8014df4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014df6:	2200      	movs	r2, #0
 8014df8:	6839      	ldr	r1, [r7, #0]
 8014dfa:	6878      	ldr	r0, [r7, #4]
 8014dfc:	f7ff ffaa 	bl	8014d54 <FATFS_LinkDriverEx>
 8014e00:	4603      	mov	r3, r0
}
 8014e02:	4618      	mov	r0, r3
 8014e04:	3708      	adds	r7, #8
 8014e06:	46bd      	mov	sp, r7
 8014e08:	bd80      	pop	{r7, pc}

08014e0a <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 8014e0a:	b480      	push	{r7}
 8014e0c:	b083      	sub	sp, #12
 8014e0e:	af00      	add	r7, sp, #0
 8014e10:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	687a      	ldr	r2, [r7, #4]
 8014e16:	605a      	str	r2, [r3, #4]
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	685a      	ldr	r2, [r3, #4]
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	601a      	str	r2, [r3, #0]
}
 8014e20:	bf00      	nop
 8014e22:	370c      	adds	r7, #12
 8014e24:	46bd      	mov	sp, r7
 8014e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e2a:	4770      	bx	lr

08014e2c <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 8014e2c:	b480      	push	{r7}
 8014e2e:	b083      	sub	sp, #12
 8014e30:	af00      	add	r7, sp, #0
 8014e32:	6078      	str	r0, [r7, #4]
 8014e34:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	685a      	ldr	r2, [r3, #4]
 8014e3a:	683b      	ldr	r3, [r7, #0]
 8014e3c:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8014e3e:	683b      	ldr	r3, [r7, #0]
 8014e40:	687a      	ldr	r2, [r7, #4]
 8014e42:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8014e44:	683b      	ldr	r3, [r7, #0]
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	683a      	ldr	r2, [r7, #0]
 8014e4a:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8014e4c:	683b      	ldr	r3, [r7, #0]
 8014e4e:	685b      	ldr	r3, [r3, #4]
 8014e50:	683a      	ldr	r2, [r7, #0]
 8014e52:	601a      	str	r2, [r3, #0]
}
 8014e54:	bf00      	nop
 8014e56:	370c      	adds	r7, #12
 8014e58:	46bd      	mov	sp, r7
 8014e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e5e:	4770      	bx	lr

08014e60 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 8014e60:	b580      	push	{r7, lr}
 8014e62:	b082      	sub	sp, #8
 8014e64:	af00      	add	r7, sp, #0
 8014e66:	6078      	str	r0, [r7, #4]
 8014e68:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8014e6a:	6839      	ldr	r1, [r7, #0]
 8014e6c:	6878      	ldr	r0, [r7, #4]
 8014e6e:	f7ff ffdd 	bl	8014e2c <metal_list_add_before>
}
 8014e72:	bf00      	nop
 8014e74:	3708      	adds	r7, #8
 8014e76:	46bd      	mov	sp, r7
 8014e78:	bd80      	pop	{r7, pc}

08014e7a <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 8014e7a:	b580      	push	{r7, lr}
 8014e7c:	b082      	sub	sp, #8
 8014e7e:	af00      	add	r7, sp, #0
 8014e80:	6078      	str	r0, [r7, #4]
 8014e82:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 8014e84:	6839      	ldr	r1, [r7, #0]
 8014e86:	6878      	ldr	r0, [r7, #4]
 8014e88:	f001 ff8a 	bl	8016da0 <metal_machine_cache_flush>
}
 8014e8c:	bf00      	nop
 8014e8e:	3708      	adds	r7, #8
 8014e90:	46bd      	mov	sp, r7
 8014e92:	bd80      	pop	{r7, pc}

08014e94 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 8014e94:	b580      	push	{r7, lr}
 8014e96:	b082      	sub	sp, #8
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	6078      	str	r0, [r7, #4]
 8014e9c:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8014e9e:	6839      	ldr	r1, [r7, #0]
 8014ea0:	6878      	ldr	r0, [r7, #4]
 8014ea2:	f001 ff88 	bl	8016db6 <metal_machine_cache_invalidate>
}
 8014ea6:	bf00      	nop
 8014ea8:	3708      	adds	r7, #8
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	bd80      	pop	{r7, pc}

08014eae <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 8014eae:	b580      	push	{r7, lr}
 8014eb0:	b082      	sub	sp, #8
 8014eb2:	af00      	add	r7, sp, #0
 8014eb4:	6078      	str	r0, [r7, #4]
 8014eb6:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 8014eb8:	6839      	ldr	r1, [r7, #0]
 8014eba:	6878      	ldr	r0, [r7, #4]
 8014ebc:	f7ff ffdd 	bl	8014e7a <__metal_cache_flush>
}
 8014ec0:	bf00      	nop
 8014ec2:	3708      	adds	r7, #8
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	bd80      	pop	{r7, pc}

08014ec8 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 8014ec8:	b580      	push	{r7, lr}
 8014eca:	b082      	sub	sp, #8
 8014ecc:	af00      	add	r7, sp, #0
 8014ece:	6078      	str	r0, [r7, #4]
 8014ed0:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8014ed2:	6839      	ldr	r1, [r7, #0]
 8014ed4:	6878      	ldr	r0, [r7, #4]
 8014ed6:	f7ff ffdd 	bl	8014e94 <__metal_cache_invalidate>
}
 8014eda:	bf00      	nop
 8014edc:	3708      	adds	r7, #8
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}
	...

08014ee4 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	b082      	sub	sp, #8
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d008      	beq.n	8014f04 <metal_bus_register+0x20>
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d004      	beq.n	8014f04 <metal_bus_register+0x20>
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	681b      	ldr	r3, [r3, #0]
 8014efe:	781b      	ldrb	r3, [r3, #0]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d102      	bne.n	8014f0a <metal_bus_register+0x26>
		return -EINVAL;
 8014f04:	f06f 0315 	mvn.w	r3, #21
 8014f08:	e026      	b.n	8014f58 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	2100      	movs	r1, #0
 8014f10:	4618      	mov	r0, r3
 8014f12:	f000 f82b 	bl	8014f6c <metal_bus_find>
 8014f16:	4603      	mov	r3, r0
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d102      	bne.n	8014f22 <metal_bus_register+0x3e>
		return -EEXIST;
 8014f1c:	f06f 0310 	mvn.w	r3, #16
 8014f20:	e01a      	b.n	8014f58 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	331c      	adds	r3, #28
 8014f26:	4618      	mov	r0, r3
 8014f28:	f7ff ff6f 	bl	8014e0a <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	3324      	adds	r3, #36	; 0x24
 8014f30:	4619      	mov	r1, r3
 8014f32:	480b      	ldr	r0, [pc, #44]	; (8014f60 <metal_bus_register+0x7c>)
 8014f34:	f7ff ff94 	bl	8014e60 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 8014f38:	4b0a      	ldr	r3, [pc, #40]	; (8014f64 <metal_bus_register+0x80>)
 8014f3a:	781b      	ldrb	r3, [r3, #0]
 8014f3c:	2b06      	cmp	r3, #6
 8014f3e:	d90a      	bls.n	8014f56 <metal_bus_register+0x72>
 8014f40:	4b08      	ldr	r3, [pc, #32]	; (8014f64 <metal_bus_register+0x80>)
 8014f42:	685b      	ldr	r3, [r3, #4]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d006      	beq.n	8014f56 <metal_bus_register+0x72>
 8014f48:	4b06      	ldr	r3, [pc, #24]	; (8014f64 <metal_bus_register+0x80>)
 8014f4a:	685b      	ldr	r3, [r3, #4]
 8014f4c:	687a      	ldr	r2, [r7, #4]
 8014f4e:	6812      	ldr	r2, [r2, #0]
 8014f50:	4905      	ldr	r1, [pc, #20]	; (8014f68 <metal_bus_register+0x84>)
 8014f52:	2007      	movs	r0, #7
 8014f54:	4798      	blx	r3
	return 0;
 8014f56:	2300      	movs	r3, #0
}
 8014f58:	4618      	mov	r0, r3
 8014f5a:	3708      	adds	r7, #8
 8014f5c:	46bd      	mov	sp, r7
 8014f5e:	bd80      	pop	{r7, pc}
 8014f60:	2400b844 	.word	0x2400b844
 8014f64:	2400b83c 	.word	0x2400b83c
 8014f68:	080216d8 	.word	0x080216d8

08014f6c <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
 8014f6c:	b580      	push	{r7, lr}
 8014f6e:	b084      	sub	sp, #16
 8014f70:	af00      	add	r7, sp, #0
 8014f72:	6078      	str	r0, [r7, #4]
 8014f74:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 8014f76:	4b13      	ldr	r3, [pc, #76]	; (8014fc4 <metal_bus_find+0x58>)
 8014f78:	689b      	ldr	r3, [r3, #8]
 8014f7a:	60fb      	str	r3, [r7, #12]
 8014f7c:	e017      	b.n	8014fae <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	3b24      	subs	r3, #36	; 0x24
 8014f82:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 8014f84:	68bb      	ldr	r3, [r7, #8]
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	6879      	ldr	r1, [r7, #4]
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	f7eb f9a8 	bl	80002e0 <strcmp>
 8014f90:	4603      	mov	r3, r0
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d003      	beq.n	8014f9e <metal_bus_find+0x32>
	metal_list_for_each(&_metal.common.bus_list, node) {
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	60fb      	str	r3, [r7, #12]
 8014f9c:	e007      	b.n	8014fae <metal_bus_find+0x42>
			continue;
		if (result)
 8014f9e:	683b      	ldr	r3, [r7, #0]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d002      	beq.n	8014faa <metal_bus_find+0x3e>
			*result = bus;
 8014fa4:	683b      	ldr	r3, [r7, #0]
 8014fa6:	68ba      	ldr	r2, [r7, #8]
 8014fa8:	601a      	str	r2, [r3, #0]
		return 0;
 8014faa:	2300      	movs	r3, #0
 8014fac:	e005      	b.n	8014fba <metal_bus_find+0x4e>
	metal_list_for_each(&_metal.common.bus_list, node) {
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	4a05      	ldr	r2, [pc, #20]	; (8014fc8 <metal_bus_find+0x5c>)
 8014fb2:	4293      	cmp	r3, r2
 8014fb4:	d1e3      	bne.n	8014f7e <metal_bus_find+0x12>
	}
	return -ENOENT;
 8014fb6:	f06f 0301 	mvn.w	r3, #1
}
 8014fba:	4618      	mov	r0, r3
 8014fbc:	3710      	adds	r7, #16
 8014fbe:	46bd      	mov	sp, r7
 8014fc0:	bd80      	pop	{r7, pc}
 8014fc2:	bf00      	nop
 8014fc4:	2400b83c 	.word	0x2400b83c
 8014fc8:	2400b844 	.word	0x2400b844

08014fcc <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b086      	sub	sp, #24
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	60f8      	str	r0, [r7, #12]
 8014fd4:	60b9      	str	r1, [r7, #8]
 8014fd6:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d00d      	beq.n	8014ffa <metal_device_open+0x2e>
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	781b      	ldrb	r3, [r3, #0]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d009      	beq.n	8014ffa <metal_device_open+0x2e>
 8014fe6:	68bb      	ldr	r3, [r7, #8]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d006      	beq.n	8014ffa <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 8014fec:	68bb      	ldr	r3, [r7, #8]
 8014fee:	781b      	ldrb	r3, [r3, #0]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d002      	beq.n	8014ffa <metal_device_open+0x2e>
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d102      	bne.n	8015000 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 8014ffa:	f06f 0315 	mvn.w	r3, #21
 8014ffe:	e01f      	b.n	8015040 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 8015000:	f107 0310 	add.w	r3, r7, #16
 8015004:	4619      	mov	r1, r3
 8015006:	68f8      	ldr	r0, [r7, #12]
 8015008:	f7ff ffb0 	bl	8014f6c <metal_bus_find>
 801500c:	6178      	str	r0, [r7, #20]
	if (error)
 801500e:	697b      	ldr	r3, [r7, #20]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d001      	beq.n	8015018 <metal_device_open+0x4c>
		return error;
 8015014:	697b      	ldr	r3, [r7, #20]
 8015016:	e013      	b.n	8015040 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 8015018:	693b      	ldr	r3, [r7, #16]
 801501a:	689b      	ldr	r3, [r3, #8]
 801501c:	2b00      	cmp	r3, #0
 801501e:	d102      	bne.n	8015026 <metal_device_open+0x5a>
		return -ENODEV;
 8015020:	f06f 0312 	mvn.w	r3, #18
 8015024:	e00c      	b.n	8015040 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 8015026:	693b      	ldr	r3, [r7, #16]
 8015028:	689b      	ldr	r3, [r3, #8]
 801502a:	6938      	ldr	r0, [r7, #16]
 801502c:	687a      	ldr	r2, [r7, #4]
 801502e:	68b9      	ldr	r1, [r7, #8]
 8015030:	4798      	blx	r3
 8015032:	6178      	str	r0, [r7, #20]
	if (error)
 8015034:	697b      	ldr	r3, [r7, #20]
 8015036:	2b00      	cmp	r3, #0
 8015038:	d001      	beq.n	801503e <metal_device_open+0x72>
		return error;
 801503a:	697b      	ldr	r3, [r7, #20]
 801503c:	e000      	b.n	8015040 <metal_device_open+0x74>

	return 0;
 801503e:	2300      	movs	r3, #0
}
 8015040:	4618      	mov	r0, r3
 8015042:	3718      	adds	r7, #24
 8015044:	46bd      	mov	sp, r7
 8015046:	bd80      	pop	{r7, pc}

08015048 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 8015048:	b580      	push	{r7, lr}
 801504a:	b082      	sub	sp, #8
 801504c:	af00      	add	r7, sp, #0
 801504e:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	2b00      	cmp	r3, #0
 8015056:	d008      	beq.n	801506a <metal_register_generic_device+0x22>
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	781b      	ldrb	r3, [r3, #0]
 801505e:	2b00      	cmp	r3, #0
 8015060:	d003      	beq.n	801506a <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 8015066:	2b02      	cmp	r3, #2
 8015068:	d902      	bls.n	8015070 <metal_register_generic_device+0x28>
		return -EINVAL;
 801506a:	f06f 0315 	mvn.w	r3, #21
 801506e:	e009      	b.n	8015084 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	4a06      	ldr	r2, [pc, #24]	; (801508c <metal_register_generic_device+0x44>)
 8015074:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	336c      	adds	r3, #108	; 0x6c
 801507a:	4619      	mov	r1, r3
 801507c:	4804      	ldr	r0, [pc, #16]	; (8015090 <metal_register_generic_device+0x48>)
 801507e:	f7ff feef 	bl	8014e60 <metal_list_add_tail>
			    &device->node);
	return 0;
 8015082:	2300      	movs	r3, #0
}
 8015084:	4618      	mov	r0, r3
 8015086:	3708      	adds	r7, #8
 8015088:	46bd      	mov	sp, r7
 801508a:	bd80      	pop	{r7, pc}
 801508c:	24000060 	.word	0x24000060
 8015090:	2400b854 	.word	0x2400b854

08015094 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 8015094:	b580      	push	{r7, lr}
 8015096:	b086      	sub	sp, #24
 8015098:	af00      	add	r7, sp, #0
 801509a:	60f8      	str	r0, [r7, #12]
 801509c:	60b9      	str	r1, [r7, #8]
 801509e:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 80150a0:	4b12      	ldr	r3, [pc, #72]	; (80150ec <metal_generic_dev_open+0x58>)
 80150a2:	699b      	ldr	r3, [r3, #24]
 80150a4:	617b      	str	r3, [r7, #20]
 80150a6:	e017      	b.n	80150d8 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 80150a8:	697b      	ldr	r3, [r7, #20]
 80150aa:	3b6c      	subs	r3, #108	; 0x6c
 80150ac:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 80150ae:	693b      	ldr	r3, [r7, #16]
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	68b9      	ldr	r1, [r7, #8]
 80150b4:	4618      	mov	r0, r3
 80150b6:	f7eb f913 	bl	80002e0 <strcmp>
 80150ba:	4603      	mov	r3, r0
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d003      	beq.n	80150c8 <metal_generic_dev_open+0x34>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 80150c0:	697b      	ldr	r3, [r7, #20]
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	617b      	str	r3, [r7, #20]
 80150c6:	e007      	b.n	80150d8 <metal_generic_dev_open+0x44>
			continue;
		*device = dev;
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	693a      	ldr	r2, [r7, #16]
 80150cc:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 80150ce:	6938      	ldr	r0, [r7, #16]
 80150d0:	f000 f88c 	bl	80151ec <metal_generic_dev_sys_open>
 80150d4:	4603      	mov	r3, r0
 80150d6:	e005      	b.n	80150e4 <metal_generic_dev_open+0x50>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 80150d8:	697b      	ldr	r3, [r7, #20]
 80150da:	4a05      	ldr	r2, [pc, #20]	; (80150f0 <metal_generic_dev_open+0x5c>)
 80150dc:	4293      	cmp	r3, r2
 80150de:	d1e3      	bne.n	80150a8 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 80150e0:	f06f 0312 	mvn.w	r3, #18
}
 80150e4:	4618      	mov	r0, r3
 80150e6:	3718      	adds	r7, #24
 80150e8:	46bd      	mov	sp, r7
 80150ea:	bd80      	pop	{r7, pc}
 80150ec:	2400b83c 	.word	0x2400b83c
 80150f0:	2400b854 	.word	0x2400b854

080150f4 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 80150f4:	b580      	push	{r7, lr}
 80150f6:	b086      	sub	sp, #24
 80150f8:	af00      	add	r7, sp, #0
 80150fa:	60f8      	str	r0, [r7, #12]
 80150fc:	60b9      	str	r1, [r7, #8]
 80150fe:	607a      	str	r2, [r7, #4]
 8015100:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 8015102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015104:	683b      	ldr	r3, [r7, #0]
 8015106:	429a      	cmp	r2, r3
 8015108:	d009      	beq.n	801511e <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 801510a:	6a3a      	ldr	r2, [r7, #32]
 801510c:	4613      	mov	r3, r2
 801510e:	005b      	lsls	r3, r3, #1
 8015110:	4413      	add	r3, r2
 8015112:	009b      	lsls	r3, r3, #2
 8015114:	461a      	mov	r2, r3
 8015116:	6839      	ldr	r1, [r7, #0]
 8015118:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801511a:	f007 fb0d 	bl	801c738 <memcpy>
	for (i = 0; i < nents_in; i++) {
 801511e:	2300      	movs	r3, #0
 8015120:	617b      	str	r3, [r7, #20]
 8015122:	e02f      	b.n	8015184 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	2b02      	cmp	r3, #2
 8015128:	d114      	bne.n	8015154 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 801512a:	697a      	ldr	r2, [r7, #20]
 801512c:	4613      	mov	r3, r2
 801512e:	005b      	lsls	r3, r3, #1
 8015130:	4413      	add	r3, r2
 8015132:	009b      	lsls	r3, r3, #2
 8015134:	461a      	mov	r2, r3
 8015136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015138:	4413      	add	r3, r2
 801513a:	6818      	ldr	r0, [r3, #0]
 801513c:	697a      	ldr	r2, [r7, #20]
 801513e:	4613      	mov	r3, r2
 8015140:	005b      	lsls	r3, r3, #1
 8015142:	4413      	add	r3, r2
 8015144:	009b      	lsls	r3, r3, #2
 8015146:	461a      	mov	r2, r3
 8015148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801514a:	4413      	add	r3, r2
 801514c:	689b      	ldr	r3, [r3, #8]
 801514e:	4619      	mov	r1, r3
 8015150:	f7ff fead 	bl	8014eae <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 8015154:	697a      	ldr	r2, [r7, #20]
 8015156:	4613      	mov	r3, r2
 8015158:	005b      	lsls	r3, r3, #1
 801515a:	4413      	add	r3, r2
 801515c:	009b      	lsls	r3, r3, #2
 801515e:	461a      	mov	r2, r3
 8015160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015162:	4413      	add	r3, r2
 8015164:	6818      	ldr	r0, [r3, #0]
 8015166:	697a      	ldr	r2, [r7, #20]
 8015168:	4613      	mov	r3, r2
 801516a:	005b      	lsls	r3, r3, #1
 801516c:	4413      	add	r3, r2
 801516e:	009b      	lsls	r3, r3, #2
 8015170:	461a      	mov	r2, r3
 8015172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015174:	4413      	add	r3, r2
 8015176:	689b      	ldr	r3, [r3, #8]
 8015178:	4619      	mov	r1, r3
 801517a:	f7ff fea5 	bl	8014ec8 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 801517e:	697b      	ldr	r3, [r7, #20]
 8015180:	3301      	adds	r3, #1
 8015182:	617b      	str	r3, [r7, #20]
 8015184:	697a      	ldr	r2, [r7, #20]
 8015186:	6a3b      	ldr	r3, [r7, #32]
 8015188:	429a      	cmp	r2, r3
 801518a:	dbcb      	blt.n	8015124 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 801518c:	6a3b      	ldr	r3, [r7, #32]
}
 801518e:	4618      	mov	r0, r3
 8015190:	3718      	adds	r7, #24
 8015192:	46bd      	mov	sp, r7
 8015194:	bd80      	pop	{r7, pc}

08015196 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 8015196:	b580      	push	{r7, lr}
 8015198:	b086      	sub	sp, #24
 801519a:	af00      	add	r7, sp, #0
 801519c:	60f8      	str	r0, [r7, #12]
 801519e:	60b9      	str	r1, [r7, #8]
 80151a0:	607a      	str	r2, [r7, #4]
 80151a2:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 80151a4:	2300      	movs	r3, #0
 80151a6:	617b      	str	r3, [r7, #20]
 80151a8:	e017      	b.n	80151da <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 80151aa:	697a      	ldr	r2, [r7, #20]
 80151ac:	4613      	mov	r3, r2
 80151ae:	005b      	lsls	r3, r3, #1
 80151b0:	4413      	add	r3, r2
 80151b2:	009b      	lsls	r3, r3, #2
 80151b4:	461a      	mov	r2, r3
 80151b6:	683b      	ldr	r3, [r7, #0]
 80151b8:	4413      	add	r3, r2
 80151ba:	6818      	ldr	r0, [r3, #0]
 80151bc:	697a      	ldr	r2, [r7, #20]
 80151be:	4613      	mov	r3, r2
 80151c0:	005b      	lsls	r3, r3, #1
 80151c2:	4413      	add	r3, r2
 80151c4:	009b      	lsls	r3, r3, #2
 80151c6:	461a      	mov	r2, r3
 80151c8:	683b      	ldr	r3, [r7, #0]
 80151ca:	4413      	add	r3, r2
 80151cc:	689b      	ldr	r3, [r3, #8]
 80151ce:	4619      	mov	r1, r3
 80151d0:	f7ff fe7a 	bl	8014ec8 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 80151d4:	697b      	ldr	r3, [r7, #20]
 80151d6:	3301      	adds	r3, #1
 80151d8:	617b      	str	r3, [r7, #20]
 80151da:	697a      	ldr	r2, [r7, #20]
 80151dc:	6a3b      	ldr	r3, [r7, #32]
 80151de:	429a      	cmp	r2, r3
 80151e0:	dbe3      	blt.n	80151aa <metal_generic_dev_dma_unmap+0x14>
	}
}
 80151e2:	bf00      	nop
 80151e4:	bf00      	nop
 80151e6:	3718      	adds	r7, #24
 80151e8:	46bd      	mov	sp, r7
 80151ea:	bd80      	pop	{r7, pc}

080151ec <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b084      	sub	sp, #16
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 80151f4:	2300      	movs	r3, #0
 80151f6:	60fb      	str	r3, [r7, #12]
 80151f8:	e013      	b.n	8015222 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 80151fa:	68fa      	ldr	r2, [r7, #12]
 80151fc:	4613      	mov	r3, r2
 80151fe:	005b      	lsls	r3, r3, #1
 8015200:	4413      	add	r3, r2
 8015202:	011b      	lsls	r3, r3, #4
 8015204:	3308      	adds	r3, #8
 8015206:	687a      	ldr	r2, [r7, #4]
 8015208:	4413      	add	r3, r2
 801520a:	3304      	adds	r3, #4
 801520c:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 801520e:	68bb      	ldr	r3, [r7, #8]
 8015210:	689b      	ldr	r3, [r3, #8]
 8015212:	2b00      	cmp	r3, #0
 8015214:	d00b      	beq.n	801522e <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 8015216:	68b8      	ldr	r0, [r7, #8]
 8015218:	f000 f81e 	bl	8015258 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	3301      	adds	r3, #1
 8015220:	60fb      	str	r3, [r7, #12]
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	689b      	ldr	r3, [r3, #8]
 8015226:	68fa      	ldr	r2, [r7, #12]
 8015228:	429a      	cmp	r2, r3
 801522a:	d3e6      	bcc.n	80151fa <metal_generic_dev_sys_open+0xe>
 801522c:	e000      	b.n	8015230 <metal_generic_dev_sys_open+0x44>
			break;
 801522e:	bf00      	nop
	}

	return 0;
 8015230:	2300      	movs	r3, #0
}
 8015232:	4618      	mov	r0, r3
 8015234:	3710      	adds	r7, #16
 8015236:	46bd      	mov	sp, r7
 8015238:	bd80      	pop	{r7, pc}
	...

0801523c <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 801523c:	b580      	push	{r7, lr}
 801523e:	b082      	sub	sp, #8
 8015240:	af00      	add	r7, sp, #0
 8015242:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 8015244:	4803      	ldr	r0, [pc, #12]	; (8015254 <metal_sys_init+0x18>)
 8015246:	f7ff fe4d 	bl	8014ee4 <metal_bus_register>
	return 0;
 801524a:	2300      	movs	r3, #0
}
 801524c:	4618      	mov	r0, r3
 801524e:	3708      	adds	r7, #8
 8015250:	46bd      	mov	sp, r7
 8015252:	bd80      	pop	{r7, pc}
 8015254:	24000060 	.word	0x24000060

08015258 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 8015258:	b580      	push	{r7, lr}
 801525a:	b086      	sub	sp, #24
 801525c:	af00      	add	r7, sp, #0
 801525e:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	689b      	ldr	r3, [r3, #8]
 801526a:	613b      	str	r3, [r7, #16]
	if (psize) {
 801526c:	693b      	ldr	r3, [r7, #16]
 801526e:	2b00      	cmp	r3, #0
 8015270:	d02c      	beq.n	80152cc <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	68db      	ldr	r3, [r3, #12]
 8015276:	693a      	ldr	r2, [r7, #16]
 8015278:	fa22 f303 	lsr.w	r3, r2, r3
 801527c:	2b00      	cmp	r3, #0
 801527e:	d005      	beq.n	801528c <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	68db      	ldr	r3, [r3, #12]
 8015284:	2201      	movs	r2, #1
 8015286:	fa02 f303 	lsl.w	r3, r2, r3
 801528a:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 801528c:	2300      	movs	r3, #0
 801528e:	617b      	str	r3, [r7, #20]
 8015290:	e013      	b.n	80152ba <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	685a      	ldr	r2, [r3, #4]
 8015296:	697b      	ldr	r3, [r7, #20]
 8015298:	009b      	lsls	r3, r3, #2
 801529a:	4413      	add	r3, r2
 801529c:	6819      	ldr	r1, [r3, #0]
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	695b      	ldr	r3, [r3, #20]
 80152a2:	693a      	ldr	r2, [r7, #16]
 80152a4:	68f8      	ldr	r0, [r7, #12]
 80152a6:	f001 fd91 	bl	8016dcc <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 80152aa:	693b      	ldr	r3, [r7, #16]
 80152ac:	009b      	lsls	r3, r3, #2
 80152ae:	68fa      	ldr	r2, [r7, #12]
 80152b0:	4413      	add	r3, r2
 80152b2:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 80152b4:	697b      	ldr	r3, [r7, #20]
 80152b6:	3301      	adds	r3, #1
 80152b8:	617b      	str	r3, [r7, #20]
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	689a      	ldr	r2, [r3, #8]
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	68db      	ldr	r3, [r3, #12]
 80152c2:	fa22 f303 	lsr.w	r3, r2, r3
 80152c6:	697a      	ldr	r2, [r7, #20]
 80152c8:	429a      	cmp	r2, r3
 80152ca:	d9e2      	bls.n	8015292 <metal_sys_io_mem_map+0x3a>
		}
	}
}
 80152cc:	bf00      	nop
 80152ce:	3718      	adds	r7, #24
 80152d0:	46bd      	mov	sp, r7
 80152d2:	bd80      	pop	{r7, pc}

080152d4 <metal_list_init>:
{
 80152d4:	b480      	push	{r7}
 80152d6:	b083      	sub	sp, #12
 80152d8:	af00      	add	r7, sp, #0
 80152da:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	687a      	ldr	r2, [r7, #4]
 80152e0:	605a      	str	r2, [r3, #4]
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	685a      	ldr	r2, [r3, #4]
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	601a      	str	r2, [r3, #0]
}
 80152ea:	bf00      	nop
 80152ec:	370c      	adds	r7, #12
 80152ee:	46bd      	mov	sp, r7
 80152f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152f4:	4770      	bx	lr
	...

080152f8 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b084      	sub	sp, #16
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
	int error = 0;
 8015300:	2300      	movs	r3, #0
 8015302:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 8015304:	2220      	movs	r2, #32
 8015306:	2100      	movs	r1, #0
 8015308:	4810      	ldr	r0, [pc, #64]	; (801534c <metal_init+0x54>)
 801530a:	f007 fa3d 	bl	801c788 <memset>

	_metal.common.log_handler   = params->log_handler;
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	4a0e      	ldr	r2, [pc, #56]	; (801534c <metal_init+0x54>)
 8015314:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	791a      	ldrb	r2, [r3, #4]
 801531a:	4b0c      	ldr	r3, [pc, #48]	; (801534c <metal_init+0x54>)
 801531c:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 801531e:	480c      	ldr	r0, [pc, #48]	; (8015350 <metal_init+0x58>)
 8015320:	f7ff ffd8 	bl	80152d4 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 8015324:	480b      	ldr	r0, [pc, #44]	; (8015354 <metal_init+0x5c>)
 8015326:	f7ff ffd5 	bl	80152d4 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 801532a:	480b      	ldr	r0, [pc, #44]	; (8015358 <metal_init+0x60>)
 801532c:	f7ff ffd2 	bl	80152d4 <metal_list_init>

	error = metal_sys_init(params);
 8015330:	6878      	ldr	r0, [r7, #4]
 8015332:	f7ff ff83 	bl	801523c <metal_sys_init>
 8015336:	60f8      	str	r0, [r7, #12]
	if (error)
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	2b00      	cmp	r3, #0
 801533c:	d001      	beq.n	8015342 <metal_init+0x4a>
		return error;
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	e000      	b.n	8015344 <metal_init+0x4c>

	return error;
 8015342:	68fb      	ldr	r3, [r7, #12]
}
 8015344:	4618      	mov	r0, r3
 8015346:	3710      	adds	r7, #16
 8015348:	46bd      	mov	sp, r7
 801534a:	bd80      	pop	{r7, pc}
 801534c:	2400b83c 	.word	0x2400b83c
 8015350:	2400b844 	.word	0x2400b844
 8015354:	2400b84c 	.word	0x2400b84c
 8015358:	2400b854 	.word	0x2400b854

0801535c <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 801535c:	b480      	push	{r7}
 801535e:	b083      	sub	sp, #12
 8015360:	af00      	add	r7, sp, #0
 8015362:	6078      	str	r0, [r7, #4]
 8015364:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 801536a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801536e:	d009      	beq.n	8015384 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	689b      	ldr	r3, [r3, #8]
 8015374:	683a      	ldr	r2, [r7, #0]
 8015376:	429a      	cmp	r2, r3
 8015378:	d804      	bhi.n	8015384 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	681a      	ldr	r2, [r3, #0]
		: NULL);
 801537e:	683b      	ldr	r3, [r7, #0]
 8015380:	4413      	add	r3, r2
 8015382:	e000      	b.n	8015386 <metal_io_virt+0x2a>
 8015384:	2300      	movs	r3, #0
}
 8015386:	4618      	mov	r0, r3
 8015388:	370c      	adds	r7, #12
 801538a:	46bd      	mov	sp, r7
 801538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015390:	4770      	bx	lr

08015392 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 8015392:	b5b0      	push	{r4, r5, r7, lr}
 8015394:	b08a      	sub	sp, #40	; 0x28
 8015396:	af00      	add	r7, sp, #0
 8015398:	60f8      	str	r0, [r7, #12]
 801539a:	60b9      	str	r1, [r7, #8]
 801539c:	607a      	str	r2, [r7, #4]
 801539e:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 80153a0:	f107 0310 	add.w	r3, r7, #16
 80153a4:	2200      	movs	r2, #0
 80153a6:	601a      	str	r2, [r3, #0]
 80153a8:	605a      	str	r2, [r3, #4]
 80153aa:	609a      	str	r2, [r3, #8]
 80153ac:	60da      	str	r2, [r3, #12]
 80153ae:	611a      	str	r2, [r3, #16]
 80153b0:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	68ba      	ldr	r2, [r7, #8]
 80153b6:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	687a      	ldr	r2, [r7, #4]
 80153bc:	605a      	str	r2, [r3, #4]
	io->size = size;
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	683a      	ldr	r2, [r7, #0]
 80153c2:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80153c8:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 80153ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80153cc:	2b1f      	cmp	r3, #31
 80153ce:	d904      	bls.n	80153da <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	f04f 32ff 	mov.w	r2, #4294967295
 80153d6:	611a      	str	r2, [r3, #16]
 80153d8:	e006      	b.n	80153e8 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 80153da:	2201      	movs	r2, #1
 80153dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80153de:	fa02 f303 	lsl.w	r3, r2, r3
 80153e2:	1e5a      	subs	r2, r3, #1
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80153ec:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 80153ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d00b      	beq.n	801540c <metal_io_init+0x7a>
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80153f8:	f103 0418 	add.w	r4, r3, #24
 80153fc:	4615      	mov	r5, r2
 80153fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015400:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015402:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015406:	e884 0003 	stmia.w	r4, {r0, r1}
 801540a:	e00a      	b.n	8015422 <metal_io_init+0x90>
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	f103 0418 	add.w	r4, r3, #24
 8015412:	f107 0510 	add.w	r5, r7, #16
 8015416:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015418:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801541a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801541e:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 8015422:	68f8      	ldr	r0, [r7, #12]
 8015424:	f7ff ff18 	bl	8015258 <metal_sys_io_mem_map>
}
 8015428:	bf00      	nop
 801542a:	3728      	adds	r7, #40	; 0x28
 801542c:	46bd      	mov	sp, r7
 801542e:	bdb0      	pop	{r4, r5, r7, pc}

08015430 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 8015430:	b590      	push	{r4, r7, lr}
 8015432:	b08b      	sub	sp, #44	; 0x2c
 8015434:	af02      	add	r7, sp, #8
 8015436:	60f8      	str	r0, [r7, #12]
 8015438:	60b9      	str	r1, [r7, #8]
 801543a:	607a      	str	r2, [r7, #4]
 801543c:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 801543e:	68b9      	ldr	r1, [r7, #8]
 8015440:	68f8      	ldr	r0, [r7, #12]
 8015442:	f7ff ff8b 	bl	801535c <metal_io_virt>
 8015446:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	689b      	ldr	r3, [r3, #8]
 8015450:	68ba      	ldr	r2, [r7, #8]
 8015452:	429a      	cmp	r2, r3
 8015454:	d902      	bls.n	801545c <metal_io_block_read+0x2c>
		return -ERANGE;
 8015456:	f06f 0321 	mvn.w	r3, #33	; 0x21
 801545a:	e05c      	b.n	8015516 <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 801545c:	683a      	ldr	r2, [r7, #0]
 801545e:	68bb      	ldr	r3, [r7, #8]
 8015460:	441a      	add	r2, r3
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	689b      	ldr	r3, [r3, #8]
 8015466:	429a      	cmp	r2, r3
 8015468:	d904      	bls.n	8015474 <metal_io_block_read+0x44>
		len = io->size - offset;
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	689a      	ldr	r2, [r3, #8]
 801546e:	68bb      	ldr	r3, [r7, #8]
 8015470:	1ad3      	subs	r3, r2, r3
 8015472:	603b      	str	r3, [r7, #0]
	retlen = len;
 8015474:	683b      	ldr	r3, [r7, #0]
 8015476:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	6a1b      	ldr	r3, [r3, #32]
 801547c:	2b00      	cmp	r3, #0
 801547e:	d00a      	beq.n	8015496 <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	6a1c      	ldr	r4, [r3, #32]
 8015484:	683b      	ldr	r3, [r7, #0]
 8015486:	9300      	str	r3, [sp, #0]
 8015488:	2305      	movs	r3, #5
 801548a:	687a      	ldr	r2, [r7, #4]
 801548c:	68b9      	ldr	r1, [r7, #8]
 801548e:	68f8      	ldr	r0, [r7, #12]
 8015490:	47a0      	blx	r4
 8015492:	6178      	str	r0, [r7, #20]
 8015494:	e03e      	b.n	8015514 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 8015496:	f3bf 8f5b 	dmb	ish
		while ( len && (
 801549a:	e00c      	b.n	80154b6 <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 801549c:	69fb      	ldr	r3, [r7, #28]
 801549e:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 80154a0:	69bb      	ldr	r3, [r7, #24]
 80154a2:	701a      	strb	r2, [r3, #0]
			dest++;
 80154a4:	69bb      	ldr	r3, [r7, #24]
 80154a6:	3301      	adds	r3, #1
 80154a8:	61bb      	str	r3, [r7, #24]
			ptr++;
 80154aa:	69fb      	ldr	r3, [r7, #28]
 80154ac:	3301      	adds	r3, #1
 80154ae:	61fb      	str	r3, [r7, #28]
			len--;
 80154b0:	683b      	ldr	r3, [r7, #0]
 80154b2:	3b01      	subs	r3, #1
 80154b4:	603b      	str	r3, [r7, #0]
		while ( len && (
 80154b6:	683b      	ldr	r3, [r7, #0]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d017      	beq.n	80154ec <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 80154bc:	69bb      	ldr	r3, [r7, #24]
 80154be:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d1ea      	bne.n	801549c <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 80154c6:	69fb      	ldr	r3, [r7, #28]
 80154c8:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d1e5      	bne.n	801549c <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 80154d0:	e00c      	b.n	80154ec <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 80154d2:	69fb      	ldr	r3, [r7, #28]
 80154d4:	681a      	ldr	r2, [r3, #0]
 80154d6:	69bb      	ldr	r3, [r7, #24]
 80154d8:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 80154da:	69bb      	ldr	r3, [r7, #24]
 80154dc:	3304      	adds	r3, #4
 80154de:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 80154e0:	69fb      	ldr	r3, [r7, #28]
 80154e2:	3304      	adds	r3, #4
 80154e4:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 80154e6:	683b      	ldr	r3, [r7, #0]
 80154e8:	3b04      	subs	r3, #4
 80154ea:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 80154ec:	683b      	ldr	r3, [r7, #0]
 80154ee:	2b03      	cmp	r3, #3
 80154f0:	dcef      	bgt.n	80154d2 <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 80154f2:	e00c      	b.n	801550e <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 80154f4:	69fb      	ldr	r3, [r7, #28]
 80154f6:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 80154f8:	69bb      	ldr	r3, [r7, #24]
 80154fa:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 80154fc:	69bb      	ldr	r3, [r7, #24]
 80154fe:	3301      	adds	r3, #1
 8015500:	61bb      	str	r3, [r7, #24]
 8015502:	69fb      	ldr	r3, [r7, #28]
 8015504:	3301      	adds	r3, #1
 8015506:	61fb      	str	r3, [r7, #28]
 8015508:	683b      	ldr	r3, [r7, #0]
 801550a:	3b01      	subs	r3, #1
 801550c:	603b      	str	r3, [r7, #0]
 801550e:	683b      	ldr	r3, [r7, #0]
 8015510:	2b00      	cmp	r3, #0
 8015512:	d1ef      	bne.n	80154f4 <metal_io_block_read+0xc4>
	}
	return retlen;
 8015514:	697b      	ldr	r3, [r7, #20]
}
 8015516:	4618      	mov	r0, r3
 8015518:	3724      	adds	r7, #36	; 0x24
 801551a:	46bd      	mov	sp, r7
 801551c:	bd90      	pop	{r4, r7, pc}

0801551e <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 801551e:	b590      	push	{r4, r7, lr}
 8015520:	b08b      	sub	sp, #44	; 0x2c
 8015522:	af02      	add	r7, sp, #8
 8015524:	60f8      	str	r0, [r7, #12]
 8015526:	60b9      	str	r1, [r7, #8]
 8015528:	607a      	str	r2, [r7, #4]
 801552a:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 801552c:	68b9      	ldr	r1, [r7, #8]
 801552e:	68f8      	ldr	r0, [r7, #12]
 8015530:	f7ff ff14 	bl	801535c <metal_io_virt>
 8015534:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	689b      	ldr	r3, [r3, #8]
 801553e:	68ba      	ldr	r2, [r7, #8]
 8015540:	429a      	cmp	r2, r3
 8015542:	d902      	bls.n	801554a <metal_io_block_write+0x2c>
		return -ERANGE;
 8015544:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8015548:	e05b      	b.n	8015602 <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 801554a:	683a      	ldr	r2, [r7, #0]
 801554c:	68bb      	ldr	r3, [r7, #8]
 801554e:	441a      	add	r2, r3
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	689b      	ldr	r3, [r3, #8]
 8015554:	429a      	cmp	r2, r3
 8015556:	d904      	bls.n	8015562 <metal_io_block_write+0x44>
		len = io->size - offset;
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	689a      	ldr	r2, [r3, #8]
 801555c:	68bb      	ldr	r3, [r7, #8]
 801555e:	1ad3      	subs	r3, r2, r3
 8015560:	603b      	str	r3, [r7, #0]
	retlen = len;
 8015562:	683b      	ldr	r3, [r7, #0]
 8015564:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801556a:	2b00      	cmp	r3, #0
 801556c:	d017      	beq.n	801559e <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015572:	683b      	ldr	r3, [r7, #0]
 8015574:	9300      	str	r3, [sp, #0]
 8015576:	2305      	movs	r3, #5
 8015578:	687a      	ldr	r2, [r7, #4]
 801557a:	68b9      	ldr	r1, [r7, #8]
 801557c:	68f8      	ldr	r0, [r7, #12]
 801557e:	47a0      	blx	r4
 8015580:	6178      	str	r0, [r7, #20]
 8015582:	e03d      	b.n	8015600 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8015584:	69bb      	ldr	r3, [r7, #24]
 8015586:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8015588:	69fb      	ldr	r3, [r7, #28]
 801558a:	701a      	strb	r2, [r3, #0]
			ptr++;
 801558c:	69fb      	ldr	r3, [r7, #28]
 801558e:	3301      	adds	r3, #1
 8015590:	61fb      	str	r3, [r7, #28]
			source++;
 8015592:	69bb      	ldr	r3, [r7, #24]
 8015594:	3301      	adds	r3, #1
 8015596:	61bb      	str	r3, [r7, #24]
			len--;
 8015598:	683b      	ldr	r3, [r7, #0]
 801559a:	3b01      	subs	r3, #1
 801559c:	603b      	str	r3, [r7, #0]
		while ( len && (
 801559e:	683b      	ldr	r3, [r7, #0]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d017      	beq.n	80155d4 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 80155a4:	69fb      	ldr	r3, [r7, #28]
 80155a6:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d1ea      	bne.n	8015584 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 80155ae:	69bb      	ldr	r3, [r7, #24]
 80155b0:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d1e5      	bne.n	8015584 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80155b8:	e00c      	b.n	80155d4 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 80155ba:	69bb      	ldr	r3, [r7, #24]
 80155bc:	681a      	ldr	r2, [r3, #0]
 80155be:	69fb      	ldr	r3, [r7, #28]
 80155c0:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80155c2:	69fb      	ldr	r3, [r7, #28]
 80155c4:	3304      	adds	r3, #4
 80155c6:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 80155c8:	69bb      	ldr	r3, [r7, #24]
 80155ca:	3304      	adds	r3, #4
 80155cc:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 80155ce:	683b      	ldr	r3, [r7, #0]
 80155d0:	3b04      	subs	r3, #4
 80155d2:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80155d4:	683b      	ldr	r3, [r7, #0]
 80155d6:	2b03      	cmp	r3, #3
 80155d8:	dcef      	bgt.n	80155ba <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 80155da:	e00c      	b.n	80155f6 <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 80155dc:	69bb      	ldr	r3, [r7, #24]
 80155de:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 80155e0:	69fb      	ldr	r3, [r7, #28]
 80155e2:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 80155e4:	69fb      	ldr	r3, [r7, #28]
 80155e6:	3301      	adds	r3, #1
 80155e8:	61fb      	str	r3, [r7, #28]
 80155ea:	69bb      	ldr	r3, [r7, #24]
 80155ec:	3301      	adds	r3, #1
 80155ee:	61bb      	str	r3, [r7, #24]
 80155f0:	683b      	ldr	r3, [r7, #0]
 80155f2:	3b01      	subs	r3, #1
 80155f4:	603b      	str	r3, [r7, #0]
 80155f6:	683b      	ldr	r3, [r7, #0]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d1ef      	bne.n	80155dc <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 80155fc:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8015600:	697b      	ldr	r3, [r7, #20]
}
 8015602:	4618      	mov	r0, r3
 8015604:	3724      	adds	r7, #36	; 0x24
 8015606:	46bd      	mov	sp, r7
 8015608:	bd90      	pop	{r4, r7, pc}

0801560a <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
 801560a:	b590      	push	{r4, r7, lr}
 801560c:	b08b      	sub	sp, #44	; 0x2c
 801560e:	af02      	add	r7, sp, #8
 8015610:	60f8      	str	r0, [r7, #12]
 8015612:	60b9      	str	r1, [r7, #8]
 8015614:	603b      	str	r3, [r7, #0]
 8015616:	4613      	mov	r3, r2
 8015618:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = metal_io_virt(io, offset);
 801561a:	68b9      	ldr	r1, [r7, #8]
 801561c:	68f8      	ldr	r0, [r7, #12]
 801561e:	f7ff fe9d 	bl	801535c <metal_io_virt>
 8015622:	61f8      	str	r0, [r7, #28]
	int retlen = len;
 8015624:	683b      	ldr	r3, [r7, #0]
 8015626:	613b      	str	r3, [r7, #16]

	if (offset > io->size)
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	689b      	ldr	r3, [r3, #8]
 801562c:	68ba      	ldr	r2, [r7, #8]
 801562e:	429a      	cmp	r2, r3
 8015630:	d902      	bls.n	8015638 <metal_io_block_set+0x2e>
		return -ERANGE;
 8015632:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8015636:	e05d      	b.n	80156f4 <metal_io_block_set+0xea>
	if ((offset + len) > io->size)
 8015638:	683a      	ldr	r2, [r7, #0]
 801563a:	68bb      	ldr	r3, [r7, #8]
 801563c:	441a      	add	r2, r3
 801563e:	68fb      	ldr	r3, [r7, #12]
 8015640:	689b      	ldr	r3, [r3, #8]
 8015642:	429a      	cmp	r2, r3
 8015644:	d904      	bls.n	8015650 <metal_io_block_set+0x46>
		len = io->size - offset;
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	689a      	ldr	r2, [r3, #8]
 801564a:	68bb      	ldr	r3, [r7, #8]
 801564c:	1ad3      	subs	r3, r2, r3
 801564e:	603b      	str	r3, [r7, #0]
	retlen = len;
 8015650:	683b      	ldr	r3, [r7, #0]
 8015652:	613b      	str	r3, [r7, #16]
	if (io->ops.block_set) {
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015658:	2b00      	cmp	r3, #0
 801565a:	d009      	beq.n	8015670 <metal_io_block_set+0x66>
		(*io->ops.block_set)(
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8015660:	79fa      	ldrb	r2, [r7, #7]
 8015662:	683b      	ldr	r3, [r7, #0]
 8015664:	9300      	str	r3, [sp, #0]
 8015666:	2305      	movs	r3, #5
 8015668:	68b9      	ldr	r1, [r7, #8]
 801566a:	68f8      	ldr	r0, [r7, #12]
 801566c:	47a0      	blx	r4
 801566e:	e040      	b.n	80156f2 <metal_io_block_set+0xe8>
			io, offset, value, memory_order_seq_cst, len);
	} else {
		unsigned int cint = value;
 8015670:	79fb      	ldrb	r3, [r7, #7]
 8015672:	61bb      	str	r3, [r7, #24]
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
 8015674:	2301      	movs	r3, #1
 8015676:	617b      	str	r3, [r7, #20]
 8015678:	e00a      	b.n	8015690 <metal_io_block_set+0x86>
			cint |= ((unsigned int)value << (8 * i));
 801567a:	79fa      	ldrb	r2, [r7, #7]
 801567c:	697b      	ldr	r3, [r7, #20]
 801567e:	00db      	lsls	r3, r3, #3
 8015680:	fa02 f303 	lsl.w	r3, r2, r3
 8015684:	69ba      	ldr	r2, [r7, #24]
 8015686:	4313      	orrs	r3, r2
 8015688:	61bb      	str	r3, [r7, #24]
		for (i = 1; i < sizeof(int); i++)
 801568a:	697b      	ldr	r3, [r7, #20]
 801568c:	3301      	adds	r3, #1
 801568e:	617b      	str	r3, [r7, #20]
 8015690:	697b      	ldr	r3, [r7, #20]
 8015692:	2b03      	cmp	r3, #3
 8015694:	d9f1      	bls.n	801567a <metal_io_block_set+0x70>

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 8015696:	e008      	b.n	80156aa <metal_io_block_set+0xa0>
			*(unsigned char *)ptr = (unsigned char) value;
 8015698:	69fb      	ldr	r3, [r7, #28]
 801569a:	79fa      	ldrb	r2, [r7, #7]
 801569c:	701a      	strb	r2, [r3, #0]
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 801569e:	69fb      	ldr	r3, [r7, #28]
 80156a0:	3301      	adds	r3, #1
 80156a2:	61fb      	str	r3, [r7, #28]
 80156a4:	683b      	ldr	r3, [r7, #0]
 80156a6:	3b01      	subs	r3, #1
 80156a8:	603b      	str	r3, [r7, #0]
 80156aa:	683b      	ldr	r3, [r7, #0]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d00e      	beq.n	80156ce <metal_io_block_set+0xc4>
 80156b0:	69fb      	ldr	r3, [r7, #28]
 80156b2:	f003 0303 	and.w	r3, r3, #3
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d1ee      	bne.n	8015698 <metal_io_block_set+0x8e>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80156ba:	e008      	b.n	80156ce <metal_io_block_set+0xc4>
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
 80156bc:	69fb      	ldr	r3, [r7, #28]
 80156be:	69ba      	ldr	r2, [r7, #24]
 80156c0:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80156c2:	69fb      	ldr	r3, [r7, #28]
 80156c4:	3304      	adds	r3, #4
 80156c6:	61fb      	str	r3, [r7, #28]
						len -= sizeof(int))
 80156c8:	683b      	ldr	r3, [r7, #0]
 80156ca:	3b04      	subs	r3, #4
 80156cc:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80156ce:	683b      	ldr	r3, [r7, #0]
 80156d0:	2b03      	cmp	r3, #3
 80156d2:	dcf3      	bgt.n	80156bc <metal_io_block_set+0xb2>
		for (; len != 0; ptr++, len--)
 80156d4:	e008      	b.n	80156e8 <metal_io_block_set+0xde>
			*(unsigned char *)ptr = (unsigned char) value;
 80156d6:	69fb      	ldr	r3, [r7, #28]
 80156d8:	79fa      	ldrb	r2, [r7, #7]
 80156da:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, len--)
 80156dc:	69fb      	ldr	r3, [r7, #28]
 80156de:	3301      	adds	r3, #1
 80156e0:	61fb      	str	r3, [r7, #28]
 80156e2:	683b      	ldr	r3, [r7, #0]
 80156e4:	3b01      	subs	r3, #1
 80156e6:	603b      	str	r3, [r7, #0]
 80156e8:	683b      	ldr	r3, [r7, #0]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d1f3      	bne.n	80156d6 <metal_io_block_set+0xcc>
		atomic_thread_fence(memory_order_seq_cst);
 80156ee:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 80156f2:	693b      	ldr	r3, [r7, #16]
}
 80156f4:	4618      	mov	r0, r3
 80156f6:	3724      	adds	r7, #36	; 0x24
 80156f8:	46bd      	mov	sp, r7
 80156fa:	bd90      	pop	{r4, r7, pc}

080156fc <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 80156fc:	b40e      	push	{r1, r2, r3}
 80156fe:	b480      	push	{r7}
 8015700:	b082      	sub	sp, #8
 8015702:	af00      	add	r7, sp, #0
 8015704:	4603      	mov	r3, r0
 8015706:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 8015708:	bf00      	nop
 801570a:	3708      	adds	r7, #8
 801570c:	46bd      	mov	sp, r7
 801570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015712:	b003      	add	sp, #12
 8015714:	4770      	bx	lr

08015716 <metal_io_virt>:
{
 8015716:	b480      	push	{r7}
 8015718:	b083      	sub	sp, #12
 801571a:	af00      	add	r7, sp, #0
 801571c:	6078      	str	r0, [r7, #4]
 801571e:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8015724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015728:	d009      	beq.n	801573e <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	689b      	ldr	r3, [r3, #8]
 801572e:	683a      	ldr	r2, [r7, #0]
 8015730:	429a      	cmp	r2, r3
 8015732:	d804      	bhi.n	801573e <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8015738:	683b      	ldr	r3, [r7, #0]
 801573a:	4413      	add	r3, r2
 801573c:	e000      	b.n	8015740 <metal_io_virt+0x2a>
 801573e:	2300      	movs	r3, #0
}
 8015740:	4618      	mov	r0, r3
 8015742:	370c      	adds	r7, #12
 8015744:	46bd      	mov	sp, r7
 8015746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801574a:	4770      	bx	lr

0801574c <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 801574c:	b480      	push	{r7}
 801574e:	b085      	sub	sp, #20
 8015750:	af00      	add	r7, sp, #0
 8015752:	6078      	str	r0, [r7, #4]
 8015754:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	681b      	ldr	r3, [r3, #0]
 801575a:	683a      	ldr	r2, [r7, #0]
 801575c:	1ad3      	subs	r3, r2, r3
 801575e:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	689b      	ldr	r3, [r3, #8]
 8015764:	68fa      	ldr	r2, [r7, #12]
 8015766:	429a      	cmp	r2, r3
 8015768:	d201      	bcs.n	801576e <metal_io_virt_to_offset+0x22>
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	e001      	b.n	8015772 <metal_io_virt_to_offset+0x26>
 801576e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015772:	4618      	mov	r0, r3
 8015774:	3714      	adds	r7, #20
 8015776:	46bd      	mov	sp, r7
 8015778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801577c:	4770      	bx	lr
	...

08015780 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 8015780:	b590      	push	{r4, r7, lr}
 8015782:	b08d      	sub	sp, #52	; 0x34
 8015784:	af00      	add	r7, sp, #0
 8015786:	60f8      	str	r0, [r7, #12]
 8015788:	60b9      	str	r1, [r7, #8]
 801578a:	603b      	str	r3, [r7, #0]
 801578c:	4613      	mov	r3, r2
 801578e:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 8015790:	68b9      	ldr	r1, [r7, #8]
 8015792:	68f8      	ldr	r0, [r7, #12]
 8015794:	f7ff ffbf 	bl	8015716 <metal_io_virt>
 8015798:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	699b      	ldr	r3, [r3, #24]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d009      	beq.n	80157b6 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	699c      	ldr	r4, [r3, #24]
 80157a6:	79fa      	ldrb	r2, [r7, #7]
 80157a8:	683b      	ldr	r3, [r7, #0]
 80157aa:	68b9      	ldr	r1, [r7, #8]
 80157ac:	68f8      	ldr	r0, [r7, #12]
 80157ae:	47a0      	blx	r4
 80157b0:	4602      	mov	r2, r0
 80157b2:	460b      	mov	r3, r1
 80157b4:	e057      	b.n	8015866 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uchar) == width)
 80157b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d011      	beq.n	80157e0 <metal_io_read+0x60>
 80157bc:	683b      	ldr	r3, [r7, #0]
 80157be:	2b01      	cmp	r3, #1
 80157c0:	d10e      	bne.n	80157e0 <metal_io_read+0x60>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 80157c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80157c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157c8:	f3bf 8f5b 	dmb	ish
 80157cc:	781b      	ldrb	r3, [r3, #0]
 80157ce:	f3bf 8f5b 	dmb	ish
 80157d2:	b2db      	uxtb	r3, r3
 80157d4:	76fb      	strb	r3, [r7, #27]
 80157d6:	7efb      	ldrb	r3, [r7, #27]
 80157d8:	b2da      	uxtb	r2, r3
 80157da:	f04f 0300 	mov.w	r3, #0
 80157de:	e042      	b.n	8015866 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ushort) == width)
 80157e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d011      	beq.n	801580a <metal_io_read+0x8a>
 80157e6:	683b      	ldr	r3, [r7, #0]
 80157e8:	2b02      	cmp	r3, #2
 80157ea:	d10e      	bne.n	801580a <metal_io_read+0x8a>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 80157ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157ee:	627b      	str	r3, [r7, #36]	; 0x24
 80157f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157f2:	f3bf 8f5b 	dmb	ish
 80157f6:	881b      	ldrh	r3, [r3, #0]
 80157f8:	f3bf 8f5b 	dmb	ish
 80157fc:	b29b      	uxth	r3, r3
 80157fe:	833b      	strh	r3, [r7, #24]
 8015800:	8b3b      	ldrh	r3, [r7, #24]
 8015802:	b29a      	uxth	r2, r3
 8015804:	f04f 0300 	mov.w	r3, #0
 8015808:	e02d      	b.n	8015866 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uint) == width)
 801580a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801580c:	2b00      	cmp	r3, #0
 801580e:	d010      	beq.n	8015832 <metal_io_read+0xb2>
 8015810:	683b      	ldr	r3, [r7, #0]
 8015812:	2b04      	cmp	r3, #4
 8015814:	d10d      	bne.n	8015832 <metal_io_read+0xb2>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 8015816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015818:	623b      	str	r3, [r7, #32]
 801581a:	6a3b      	ldr	r3, [r7, #32]
 801581c:	f3bf 8f5b 	dmb	ish
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	f3bf 8f5b 	dmb	ish
 8015826:	617b      	str	r3, [r7, #20]
 8015828:	697b      	ldr	r3, [r7, #20]
 801582a:	461a      	mov	r2, r3
 801582c:	f04f 0300 	mov.w	r3, #0
 8015830:	e019      	b.n	8015866 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ulong) == width)
 8015832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015834:	2b00      	cmp	r3, #0
 8015836:	d010      	beq.n	801585a <metal_io_read+0xda>
 8015838:	683b      	ldr	r3, [r7, #0]
 801583a:	2b04      	cmp	r3, #4
 801583c:	d10d      	bne.n	801585a <metal_io_read+0xda>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 801583e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015840:	61fb      	str	r3, [r7, #28]
 8015842:	69fb      	ldr	r3, [r7, #28]
 8015844:	f3bf 8f5b 	dmb	ish
 8015848:	681b      	ldr	r3, [r3, #0]
 801584a:	f3bf 8f5b 	dmb	ish
 801584e:	613b      	str	r3, [r7, #16]
 8015850:	693b      	ldr	r3, [r7, #16]
 8015852:	461a      	mov	r2, r3
 8015854:	f04f 0300 	mov.w	r3, #0
 8015858:	e005      	b.n	8015866 <metal_io_read+0xe6>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 801585a:	4b05      	ldr	r3, [pc, #20]	; (8015870 <metal_io_read+0xf0>)
 801585c:	4a05      	ldr	r2, [pc, #20]	; (8015874 <metal_io_read+0xf4>)
 801585e:	21f0      	movs	r1, #240	; 0xf0
 8015860:	4805      	ldr	r0, [pc, #20]	; (8015878 <metal_io_read+0xf8>)
 8015862:	f006 fef7 	bl	801c654 <__assert_func>
	return 0; /* quiet compiler */
}
 8015866:	4610      	mov	r0, r2
 8015868:	4619      	mov	r1, r3
 801586a:	3734      	adds	r7, #52	; 0x34
 801586c:	46bd      	mov	sp, r7
 801586e:	bd90      	pop	{r4, r7, pc}
 8015870:	08021794 	.word	0x08021794
 8015874:	0802a6d0 	.word	0x0802a6d0
 8015878:	08021798 	.word	0x08021798

0801587c <metal_io_write>:
 *			to inline cleanly.
 */
static inline void
metal_io_write(struct metal_io_region *io, unsigned long offset,
	       uint64_t value, memory_order order, int width)
{
 801587c:	b590      	push	{r4, r7, lr}
 801587e:	b08f      	sub	sp, #60	; 0x3c
 8015880:	af02      	add	r7, sp, #8
 8015882:	60f8      	str	r0, [r7, #12]
 8015884:	60b9      	str	r1, [r7, #8]
 8015886:	e9c7 2300 	strd	r2, r3, [r7]
	void *ptr = metal_io_virt(io, offset);
 801588a:	68b9      	ldr	r1, [r7, #8]
 801588c:	68f8      	ldr	r0, [r7, #12]
 801588e:	f7ff ff42 	bl	8015716 <metal_io_virt>
 8015892:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (io->ops.write)
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	69db      	ldr	r3, [r3, #28]
 8015898:	2b00      	cmp	r3, #0
 801589a:	d00c      	beq.n	80158b6 <metal_io_write+0x3a>
		(*io->ops.write)(io, offset, value, order, width);
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	69dc      	ldr	r4, [r3, #28]
 80158a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80158a2:	9301      	str	r3, [sp, #4]
 80158a4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80158a8:	9300      	str	r3, [sp, #0]
 80158aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80158ae:	68b9      	ldr	r1, [r7, #8]
 80158b0:	68f8      	ldr	r0, [r7, #12]
 80158b2:	47a0      	blx	r4
	else if (ptr && sizeof(atomic_ullong) == width)
		atomic_store_explicit((atomic_ullong *)ptr, value, order);
#endif
	else
		metal_assert (0);
}
 80158b4:	e04e      	b.n	8015954 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uchar) == width)
 80158b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d00e      	beq.n	80158da <metal_io_write+0x5e>
 80158bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80158be:	2b01      	cmp	r3, #1
 80158c0:	d10b      	bne.n	80158da <metal_io_write+0x5e>
		atomic_store_explicit((atomic_uchar *)ptr, value, order);
 80158c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80158c6:	783b      	ldrb	r3, [r7, #0]
 80158c8:	76fb      	strb	r3, [r7, #27]
 80158ca:	7efa      	ldrb	r2, [r7, #27]
 80158cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158ce:	f3bf 8f5b 	dmb	ish
 80158d2:	701a      	strb	r2, [r3, #0]
 80158d4:	f3bf 8f5b 	dmb	ish
 80158d8:	e03c      	b.n	8015954 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ushort) == width)
 80158da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d00e      	beq.n	80158fe <metal_io_write+0x82>
 80158e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80158e2:	2b02      	cmp	r3, #2
 80158e4:	d10b      	bne.n	80158fe <metal_io_write+0x82>
		atomic_store_explicit((atomic_ushort *)ptr, value, order);
 80158e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158e8:	627b      	str	r3, [r7, #36]	; 0x24
 80158ea:	883b      	ldrh	r3, [r7, #0]
 80158ec:	833b      	strh	r3, [r7, #24]
 80158ee:	8b3a      	ldrh	r2, [r7, #24]
 80158f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158f2:	f3bf 8f5b 	dmb	ish
 80158f6:	801a      	strh	r2, [r3, #0]
 80158f8:	f3bf 8f5b 	dmb	ish
 80158fc:	e02a      	b.n	8015954 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uint) == width)
 80158fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015900:	2b00      	cmp	r3, #0
 8015902:	d00e      	beq.n	8015922 <metal_io_write+0xa6>
 8015904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015906:	2b04      	cmp	r3, #4
 8015908:	d10b      	bne.n	8015922 <metal_io_write+0xa6>
		atomic_store_explicit((atomic_uint *)ptr, value, order);
 801590a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801590c:	623b      	str	r3, [r7, #32]
 801590e:	683b      	ldr	r3, [r7, #0]
 8015910:	617b      	str	r3, [r7, #20]
 8015912:	697a      	ldr	r2, [r7, #20]
 8015914:	6a3b      	ldr	r3, [r7, #32]
 8015916:	f3bf 8f5b 	dmb	ish
 801591a:	601a      	str	r2, [r3, #0]
 801591c:	f3bf 8f5b 	dmb	ish
 8015920:	e018      	b.n	8015954 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ulong) == width)
 8015922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015924:	2b00      	cmp	r3, #0
 8015926:	d00e      	beq.n	8015946 <metal_io_write+0xca>
 8015928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801592a:	2b04      	cmp	r3, #4
 801592c:	d10b      	bne.n	8015946 <metal_io_write+0xca>
		atomic_store_explicit((atomic_ulong *)ptr, value, order);
 801592e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015930:	61fb      	str	r3, [r7, #28]
 8015932:	683b      	ldr	r3, [r7, #0]
 8015934:	613b      	str	r3, [r7, #16]
 8015936:	693a      	ldr	r2, [r7, #16]
 8015938:	69fb      	ldr	r3, [r7, #28]
 801593a:	f3bf 8f5b 	dmb	ish
 801593e:	601a      	str	r2, [r3, #0]
 8015940:	f3bf 8f5b 	dmb	ish
 8015944:	e006      	b.n	8015954 <metal_io_write+0xd8>
		metal_assert (0);
 8015946:	4b05      	ldr	r3, [pc, #20]	; (801595c <metal_io_write+0xe0>)
 8015948:	4a05      	ldr	r2, [pc, #20]	; (8015960 <metal_io_write+0xe4>)
 801594a:	f44f 7189 	mov.w	r1, #274	; 0x112
 801594e:	4805      	ldr	r0, [pc, #20]	; (8015964 <metal_io_write+0xe8>)
 8015950:	f006 fe80 	bl	801c654 <__assert_func>
}
 8015954:	bf00      	nop
 8015956:	3734      	adds	r7, #52	; 0x34
 8015958:	46bd      	mov	sp, r7
 801595a:	bd90      	pop	{r4, r7, pc}
 801595c:	08021794 	.word	0x08021794
 8015960:	0802a6e0 	.word	0x0802a6e0
 8015964:	08021798 	.word	0x08021798

08015968 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 8015968:	b580      	push	{r7, lr}
 801596a:	b082      	sub	sp, #8
 801596c:	af00      	add	r7, sp, #0
 801596e:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 8015970:	6878      	ldr	r0, [r7, #4]
 8015972:	f006 fed1 	bl	801c718 <malloc>
 8015976:	4603      	mov	r3, r0
}
 8015978:	4618      	mov	r0, r3
 801597a:	3708      	adds	r7, #8
 801597c:	46bd      	mov	sp, r7
 801597e:	bd80      	pop	{r7, pc}

08015980 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 8015980:	b580      	push	{r7, lr}
 8015982:	b082      	sub	sp, #8
 8015984:	af00      	add	r7, sp, #0
 8015986:	6078      	str	r0, [r7, #4]
	free(ptr);
 8015988:	6878      	ldr	r0, [r7, #4]
 801598a:	f006 fecd 	bl	801c728 <free>
}
 801598e:	bf00      	nop
 8015990:	3708      	adds	r7, #8
 8015992:	46bd      	mov	sp, r7
 8015994:	bd80      	pop	{r7, pc}

08015996 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 8015996:	b580      	push	{r7, lr}
 8015998:	b084      	sub	sp, #16
 801599a:	af00      	add	r7, sp, #0
 801599c:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	3307      	adds	r3, #7
 80159a2:	00db      	lsls	r3, r3, #3
 80159a4:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 80159a6:	68f8      	ldr	r0, [r7, #12]
 80159a8:	f7ff ffde 	bl	8015968 <metal_allocate_memory>
 80159ac:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 80159ae:	68bb      	ldr	r3, [r7, #8]
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d004      	beq.n	80159be <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 80159b4:	68fa      	ldr	r2, [r7, #12]
 80159b6:	2100      	movs	r1, #0
 80159b8:	68b8      	ldr	r0, [r7, #8]
 80159ba:	f006 fee5 	bl	801c788 <memset>
	}

	return vqs;
 80159be:	68bb      	ldr	r3, [r7, #8]
}
 80159c0:	4618      	mov	r0, r3
 80159c2:	3710      	adds	r7, #16
 80159c4:	46bd      	mov	sp, r7
 80159c6:	bd80      	pop	{r7, pc}

080159c8 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 80159c8:	b580      	push	{r7, lr}
 80159ca:	b086      	sub	sp, #24
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	891b      	ldrh	r3, [r3, #8]
 80159d4:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 80159dc:	693b      	ldr	r3, [r7, #16]
 80159de:	3b18      	subs	r3, #24
 80159e0:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 80159e2:	693b      	ldr	r3, [r7, #16]
 80159e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80159e6:	697a      	ldr	r2, [r7, #20]
 80159e8:	429a      	cmp	r2, r3
 80159ea:	d905      	bls.n	80159f8 <rproc_virtio_virtqueue_notify+0x30>
 80159ec:	4b0d      	ldr	r3, [pc, #52]	; (8015a24 <rproc_virtio_virtqueue_notify+0x5c>)
 80159ee:	4a0e      	ldr	r2, [pc, #56]	; (8015a28 <rproc_virtio_virtqueue_notify+0x60>)
 80159f0:	2133      	movs	r1, #51	; 0x33
 80159f2:	480e      	ldr	r0, [pc, #56]	; (8015a2c <rproc_virtio_virtqueue_notify+0x64>)
 80159f4:	f006 fe2e 	bl	801c654 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 80159f8:	693b      	ldr	r3, [r7, #16]
 80159fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80159fc:	697a      	ldr	r2, [r7, #20]
 80159fe:	4613      	mov	r3, r2
 8015a00:	005b      	lsls	r3, r3, #1
 8015a02:	4413      	add	r3, r2
 8015a04:	00db      	lsls	r3, r3, #3
 8015a06:	440b      	add	r3, r1
 8015a08:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	691b      	ldr	r3, [r3, #16]
 8015a0e:	68fa      	ldr	r2, [r7, #12]
 8015a10:	6810      	ldr	r0, [r2, #0]
 8015a12:	68ba      	ldr	r2, [r7, #8]
 8015a14:	6912      	ldr	r2, [r2, #16]
 8015a16:	4611      	mov	r1, r2
 8015a18:	4798      	blx	r3
}
 8015a1a:	bf00      	nop
 8015a1c:	3718      	adds	r7, #24
 8015a1e:	46bd      	mov	sp, r7
 8015a20:	bd80      	pop	{r7, pc}
 8015a22:	bf00      	nop
 8015a24:	080217e0 	.word	0x080217e0
 8015a28:	0802a6b0 	.word	0x0802a6b0
 8015a2c:	080217fc 	.word	0x080217fc

08015a30 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 8015a30:	b580      	push	{r7, lr}
 8015a32:	b086      	sub	sp, #24
 8015a34:	af00      	add	r7, sp, #0
 8015a36:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	3b18      	subs	r3, #24
 8015a3c:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8015a3e:	697b      	ldr	r3, [r7, #20]
 8015a40:	689b      	ldr	r3, [r3, #8]
 8015a42:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8015a44:	697b      	ldr	r3, [r7, #20]
 8015a46:	68db      	ldr	r3, [r3, #12]
 8015a48:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 8015a4a:	693b      	ldr	r3, [r7, #16]
 8015a4c:	3318      	adds	r3, #24
 8015a4e:	4619      	mov	r1, r3
 8015a50:	68f8      	ldr	r0, [r7, #12]
 8015a52:	f7ff fe7b 	bl	801574c <metal_io_virt_to_offset>
 8015a56:	4601      	mov	r1, r0
 8015a58:	2301      	movs	r3, #1
 8015a5a:	2205      	movs	r2, #5
 8015a5c:	68f8      	ldr	r0, [r7, #12]
 8015a5e:	f7ff fe8f 	bl	8015780 <metal_io_read>
 8015a62:	4602      	mov	r2, r0
 8015a64:	460b      	mov	r3, r1
 8015a66:	4613      	mov	r3, r2
 8015a68:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 8015a6a:	7afb      	ldrb	r3, [r7, #11]
}
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	3718      	adds	r7, #24
 8015a70:	46bd      	mov	sp, r7
 8015a72:	bd80      	pop	{r7, pc}

08015a74 <rproc_virtio_set_status>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_status(struct virtio_device *vdev,
				    unsigned char status)
{
 8015a74:	b580      	push	{r7, lr}
 8015a76:	b088      	sub	sp, #32
 8015a78:	af02      	add	r7, sp, #8
 8015a7a:	6078      	str	r0, [r7, #4]
 8015a7c:	460b      	mov	r3, r1
 8015a7e:	70fb      	strb	r3, [r7, #3]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	3b18      	subs	r3, #24
 8015a84:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8015a86:	697b      	ldr	r3, [r7, #20]
 8015a88:	689b      	ldr	r3, [r3, #8]
 8015a8a:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8015a8c:	697b      	ldr	r3, [r7, #20]
 8015a8e:	68db      	ldr	r3, [r3, #12]
 8015a90:	60fb      	str	r3, [r7, #12]
	metal_io_write8(io,
 8015a92:	693b      	ldr	r3, [r7, #16]
 8015a94:	3318      	adds	r3, #24
 8015a96:	4619      	mov	r1, r3
 8015a98:	68f8      	ldr	r0, [r7, #12]
 8015a9a:	f7ff fe57 	bl	801574c <metal_io_virt_to_offset>
 8015a9e:	4601      	mov	r1, r0
 8015aa0:	78fa      	ldrb	r2, [r7, #3]
 8015aa2:	f04f 0300 	mov.w	r3, #0
 8015aa6:	2001      	movs	r0, #1
 8015aa8:	9001      	str	r0, [sp, #4]
 8015aaa:	2005      	movs	r0, #5
 8015aac:	9000      	str	r0, [sp, #0]
 8015aae:	68f8      	ldr	r0, [r7, #12]
 8015ab0:	f7ff fee4 	bl	801587c <metal_io_write>
			metal_io_virt_to_offset(io, &vdev_rsc->status),
			status);
	rpvdev->notify(rpvdev->priv, vdev->index);
 8015ab4:	697b      	ldr	r3, [r7, #20]
 8015ab6:	691b      	ldr	r3, [r3, #16]
 8015ab8:	697a      	ldr	r2, [r7, #20]
 8015aba:	6810      	ldr	r0, [r2, #0]
 8015abc:	687a      	ldr	r2, [r7, #4]
 8015abe:	6812      	ldr	r2, [r2, #0]
 8015ac0:	4611      	mov	r1, r2
 8015ac2:	4798      	blx	r3
}
 8015ac4:	bf00      	nop
 8015ac6:	3718      	adds	r7, #24
 8015ac8:	46bd      	mov	sp, r7
 8015aca:	bd80      	pop	{r7, pc}

08015acc <rproc_virtio_get_features>:
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 8015acc:	b580      	push	{r7, lr}
 8015ace:	b086      	sub	sp, #24
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	3b18      	subs	r3, #24
 8015ad8:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8015ada:	697b      	ldr	r3, [r7, #20]
 8015adc:	689b      	ldr	r3, [r3, #8]
 8015ade:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8015ae0:	697b      	ldr	r3, [r7, #20]
 8015ae2:	68db      	ldr	r3, [r3, #12]
 8015ae4:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 8015ae6:	693b      	ldr	r3, [r7, #16]
 8015ae8:	330c      	adds	r3, #12
 8015aea:	4619      	mov	r1, r3
 8015aec:	68f8      	ldr	r0, [r7, #12]
 8015aee:	f7ff fe2d 	bl	801574c <metal_io_virt_to_offset>
 8015af2:	4601      	mov	r1, r0
 8015af4:	2304      	movs	r3, #4
 8015af6:	2205      	movs	r2, #5
 8015af8:	68f8      	ldr	r0, [r7, #12]
 8015afa:	f7ff fe41 	bl	8015780 <metal_io_read>
 8015afe:	4602      	mov	r2, r0
 8015b00:	460b      	mov	r3, r1
 8015b02:	4613      	mov	r3, r2
 8015b04:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 8015b06:	68bb      	ldr	r3, [r7, #8]
}
 8015b08:	4618      	mov	r0, r3
 8015b0a:	3718      	adds	r7, #24
 8015b0c:	46bd      	mov	sp, r7
 8015b0e:	bd80      	pop	{r7, pc}

08015b10 <rproc_virtio_set_features>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_features(struct virtio_device *vdev,
				      uint32_t features)
{
 8015b10:	b580      	push	{r7, lr}
 8015b12:	b088      	sub	sp, #32
 8015b14:	af02      	add	r7, sp, #8
 8015b16:	6078      	str	r0, [r7, #4]
 8015b18:	6039      	str	r1, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	3b18      	subs	r3, #24
 8015b1e:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8015b20:	697b      	ldr	r3, [r7, #20]
 8015b22:	689b      	ldr	r3, [r3, #8]
 8015b24:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8015b26:	697b      	ldr	r3, [r7, #20]
 8015b28:	68db      	ldr	r3, [r3, #12]
 8015b2a:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we set features based on the role ? */
	metal_io_write32(io,
 8015b2c:	693b      	ldr	r3, [r7, #16]
 8015b2e:	330c      	adds	r3, #12
 8015b30:	4619      	mov	r1, r3
 8015b32:	68f8      	ldr	r0, [r7, #12]
 8015b34:	f7ff fe0a 	bl	801574c <metal_io_virt_to_offset>
 8015b38:	4601      	mov	r1, r0
 8015b3a:	683b      	ldr	r3, [r7, #0]
 8015b3c:	461a      	mov	r2, r3
 8015b3e:	f04f 0300 	mov.w	r3, #0
 8015b42:	2004      	movs	r0, #4
 8015b44:	9001      	str	r0, [sp, #4]
 8015b46:	2005      	movs	r0, #5
 8015b48:	9000      	str	r0, [sp, #0]
 8015b4a:	68f8      	ldr	r0, [r7, #12]
 8015b4c:	f7ff fe96 	bl	801587c <metal_io_write>
			 metal_io_virt_to_offset(io, &vdev_rsc->dfeatures),
			 features);
	rpvdev->notify(rpvdev->priv, vdev->index);
 8015b50:	697b      	ldr	r3, [r7, #20]
 8015b52:	691b      	ldr	r3, [r3, #16]
 8015b54:	697a      	ldr	r2, [r7, #20]
 8015b56:	6810      	ldr	r0, [r2, #0]
 8015b58:	687a      	ldr	r2, [r7, #4]
 8015b5a:	6812      	ldr	r2, [r2, #0]
 8015b5c:	4611      	mov	r1, r2
 8015b5e:	4798      	blx	r3
}
 8015b60:	bf00      	nop
 8015b62:	3718      	adds	r7, #24
 8015b64:	46bd      	mov	sp, r7
 8015b66:	bd80      	pop	{r7, pc}

08015b68 <rproc_virtio_negotiate_features>:
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 8015b68:	b480      	push	{r7}
 8015b6a:	b083      	sub	sp, #12
 8015b6c:	af00      	add	r7, sp, #0
 8015b6e:	6078      	str	r0, [r7, #4]
 8015b70:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 8015b72:	2300      	movs	r3, #0
}
 8015b74:	4618      	mov	r0, r3
 8015b76:	370c      	adds	r7, #12
 8015b78:	46bd      	mov	sp, r7
 8015b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b7e:	4770      	bx	lr

08015b80 <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 8015b80:	b480      	push	{r7}
 8015b82:	b085      	sub	sp, #20
 8015b84:	af00      	add	r7, sp, #0
 8015b86:	60f8      	str	r0, [r7, #12]
 8015b88:	60b9      	str	r1, [r7, #8]
 8015b8a:	607a      	str	r2, [r7, #4]
 8015b8c:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 8015b8e:	bf00      	nop
 8015b90:	3714      	adds	r7, #20
 8015b92:	46bd      	mov	sp, r7
 8015b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b98:	4770      	bx	lr

08015b9a <rproc_virtio_write_config>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_write_config(struct virtio_device *vdev,
				      uint32_t offset, void *src, int length)
{
 8015b9a:	b480      	push	{r7}
 8015b9c:	b085      	sub	sp, #20
 8015b9e:	af00      	add	r7, sp, #0
 8015ba0:	60f8      	str	r0, [r7, #12]
 8015ba2:	60b9      	str	r1, [r7, #8]
 8015ba4:	607a      	str	r2, [r7, #4]
 8015ba6:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)src;
	(void)length;
}
 8015ba8:	bf00      	nop
 8015baa:	3714      	adds	r7, #20
 8015bac:	46bd      	mov	sp, r7
 8015bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bb2:	4770      	bx	lr

08015bb4 <rproc_virtio_reset_device>:

static void rproc_virtio_reset_device(struct virtio_device *vdev)
{
 8015bb4:	b580      	push	{r7, lr}
 8015bb6:	b082      	sub	sp, #8
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	6078      	str	r0, [r7, #4]
	if (vdev->role == VIRTIO_DEV_MASTER)
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	699b      	ldr	r3, [r3, #24]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d103      	bne.n	8015bcc <rproc_virtio_reset_device+0x18>
		rproc_virtio_set_status(vdev,
 8015bc4:	2140      	movs	r1, #64	; 0x40
 8015bc6:	6878      	ldr	r0, [r7, #4]
 8015bc8:	f7ff ff54 	bl	8015a74 <rproc_virtio_set_status>
					VIRTIO_CONFIG_STATUS_NEEDS_RESET);
}
 8015bcc:	bf00      	nop
 8015bce:	3708      	adds	r7, #8
 8015bd0:	46bd      	mov	sp, r7
 8015bd2:	bd80      	pop	{r7, pc}

08015bd4 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 8015bd4:	b580      	push	{r7, lr}
 8015bd6:	b08e      	sub	sp, #56	; 0x38
 8015bd8:	af00      	add	r7, sp, #0
 8015bda:	60f8      	str	r0, [r7, #12]
 8015bdc:	60b9      	str	r1, [r7, #8]
 8015bde:	607a      	str	r2, [r7, #4]
 8015be0:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 8015be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015be8:	7e5b      	ldrb	r3, [r3, #25]
 8015bea:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 8015bec:	2050      	movs	r0, #80	; 0x50
 8015bee:	f7ff febb 	bl	8015968 <metal_allocate_memory>
 8015bf2:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
 8015bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d101      	bne.n	8015bfe <rproc_virtio_create_vdev+0x2a>
		return NULL;
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	e092      	b.n	8015d24 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 8015bfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015c00:	4613      	mov	r3, r2
 8015c02:	005b      	lsls	r3, r3, #1
 8015c04:	4413      	add	r3, r2
 8015c06:	00db      	lsls	r3, r3, #3
 8015c08:	4618      	mov	r0, r3
 8015c0a:	f7ff fead 	bl	8015968 <metal_allocate_memory>
 8015c0e:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 8015c10:	6a3b      	ldr	r3, [r7, #32]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	f000 8081 	beq.w	8015d1a <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 8015c18:	2250      	movs	r2, #80	; 0x50
 8015c1a:	2100      	movs	r1, #0
 8015c1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015c1e:	f006 fdb3 	bl	801c788 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 8015c22:	2218      	movs	r2, #24
 8015c24:	2100      	movs	r1, #0
 8015c26:	6a38      	ldr	r0, [r7, #32]
 8015c28:	f006 fdae 	bl	801c788 <memset>
	vdev = &rpvdev->vdev;
 8015c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c2e:	3318      	adds	r3, #24
 8015c30:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 8015c32:	2300      	movs	r3, #0
 8015c34:	637b      	str	r3, [r7, #52]	; 0x34
 8015c36:	e025      	b.n	8015c84 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 8015c38:	2300      	movs	r3, #0
 8015c3a:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
 8015c3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015c3e:	4613      	mov	r3, r2
 8015c40:	009b      	lsls	r3, r3, #2
 8015c42:	4413      	add	r3, r2
 8015c44:	009b      	lsls	r3, r3, #2
 8015c46:	3318      	adds	r3, #24
 8015c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015c4a:	4413      	add	r3, r2
 8015c4c:	3304      	adds	r3, #4
 8015c4e:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d102      	bne.n	8015c5c <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 8015c56:	69bb      	ldr	r3, [r7, #24]
 8015c58:	689b      	ldr	r3, [r3, #8]
 8015c5a:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 8015c5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c5e:	f7ff fe9a 	bl	8015996 <virtqueue_allocate>
 8015c62:	6178      	str	r0, [r7, #20]
		if (!vq)
 8015c64:	697b      	ldr	r3, [r7, #20]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d031      	beq.n	8015cce <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 8015c6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015c6c:	4613      	mov	r3, r2
 8015c6e:	005b      	lsls	r3, r3, #1
 8015c70:	4413      	add	r3, r2
 8015c72:	00db      	lsls	r3, r3, #3
 8015c74:	461a      	mov	r2, r3
 8015c76:	6a3b      	ldr	r3, [r7, #32]
 8015c78:	4413      	add	r3, r2
 8015c7a:	697a      	ldr	r2, [r7, #20]
 8015c7c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 8015c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c80:	3301      	adds	r3, #1
 8015c82:	637b      	str	r3, [r7, #52]	; 0x34
 8015c84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c88:	429a      	cmp	r2, r3
 8015c8a:	d3d5      	bcc.n	8015c38 <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 8015c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015c90:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 8015c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015c96:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 8015c98:	69fb      	ldr	r3, [r7, #28]
 8015c9a:	6a3a      	ldr	r2, [r7, #32]
 8015c9c:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 8015c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015ca2:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 8015ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ca6:	683a      	ldr	r2, [r7, #0]
 8015ca8:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 8015caa:	69fb      	ldr	r3, [r7, #28]
 8015cac:	68ba      	ldr	r2, [r7, #8]
 8015cae:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 8015cb0:	69fb      	ldr	r3, [r7, #28]
 8015cb2:	68fa      	ldr	r2, [r7, #12]
 8015cb4:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 8015cb6:	69fb      	ldr	r3, [r7, #28]
 8015cb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015cba:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 8015cbc:	69fb      	ldr	r3, [r7, #28]
 8015cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015cc0:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 8015cc2:	69fb      	ldr	r3, [r7, #28]
 8015cc4:	4a19      	ldr	r2, [pc, #100]	; (8015d2c <rproc_virtio_create_vdev+0x158>)
 8015cc6:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 8015cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cca:	3318      	adds	r3, #24
 8015ccc:	e02a      	b.n	8015d24 <rproc_virtio_create_vdev+0x150>
			goto err1;
 8015cce:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 8015cd0:	2300      	movs	r3, #0
 8015cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8015cd4:	e019      	b.n	8015d0a <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 8015cd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015cd8:	4613      	mov	r3, r2
 8015cda:	005b      	lsls	r3, r3, #1
 8015cdc:	4413      	add	r3, r2
 8015cde:	00db      	lsls	r3, r3, #3
 8015ce0:	461a      	mov	r2, r3
 8015ce2:	6a3b      	ldr	r3, [r7, #32]
 8015ce4:	4413      	add	r3, r2
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d00b      	beq.n	8015d04 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 8015cec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015cee:	4613      	mov	r3, r2
 8015cf0:	005b      	lsls	r3, r3, #1
 8015cf2:	4413      	add	r3, r2
 8015cf4:	00db      	lsls	r3, r3, #3
 8015cf6:	461a      	mov	r2, r3
 8015cf8:	6a3b      	ldr	r3, [r7, #32]
 8015cfa:	4413      	add	r3, r2
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	4618      	mov	r0, r3
 8015d00:	f7ff fe3e 	bl	8015980 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 8015d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d06:	3301      	adds	r3, #1
 8015d08:	637b      	str	r3, [r7, #52]	; 0x34
 8015d0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d0e:	429a      	cmp	r2, r3
 8015d10:	d3e1      	bcc.n	8015cd6 <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 8015d12:	6a38      	ldr	r0, [r7, #32]
 8015d14:	f7ff fe34 	bl	8015980 <metal_free_memory>
 8015d18:	e000      	b.n	8015d1c <rproc_virtio_create_vdev+0x148>
		goto err0;
 8015d1a:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 8015d1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015d1e:	f7ff fe2f 	bl	8015980 <metal_free_memory>
	return NULL;
 8015d22:	2300      	movs	r3, #0
}
 8015d24:	4618      	mov	r0, r3
 8015d26:	3738      	adds	r7, #56	; 0x38
 8015d28:	46bd      	mov	sp, r7
 8015d2a:	bd80      	pop	{r7, pc}
 8015d2c:	0802a68c 	.word	0x0802a68c

08015d30 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 8015d30:	b480      	push	{r7}
 8015d32:	b087      	sub	sp, #28
 8015d34:	af00      	add	r7, sp, #0
 8015d36:	60f8      	str	r0, [r7, #12]
 8015d38:	60b9      	str	r1, [r7, #8]
 8015d3a:	607a      	str	r2, [r7, #4]
 8015d3c:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d42:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 8015d44:	68ba      	ldr	r2, [r7, #8]
 8015d46:	697b      	ldr	r3, [r7, #20]
 8015d48:	429a      	cmp	r2, r3
 8015d4a:	d302      	bcc.n	8015d52 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 8015d4c:	f06f 0301 	mvn.w	r3, #1
 8015d50:	e019      	b.n	8015d86 <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8015d56:	68ba      	ldr	r2, [r7, #8]
 8015d58:	4613      	mov	r3, r2
 8015d5a:	005b      	lsls	r3, r3, #1
 8015d5c:	4413      	add	r3, r2
 8015d5e:	00db      	lsls	r3, r3, #3
 8015d60:	440b      	add	r3, r1
 8015d62:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 8015d64:	693b      	ldr	r3, [r7, #16]
 8015d66:	6a3a      	ldr	r2, [r7, #32]
 8015d68:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 8015d6a:	693b      	ldr	r3, [r7, #16]
 8015d6c:	687a      	ldr	r2, [r7, #4]
 8015d6e:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 8015d70:	693b      	ldr	r3, [r7, #16]
 8015d72:	683a      	ldr	r2, [r7, #0]
 8015d74:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 8015d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d78:	b29a      	uxth	r2, r3
 8015d7a:	693b      	ldr	r3, [r7, #16]
 8015d7c:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 8015d7e:	693b      	ldr	r3, [r7, #16]
 8015d80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015d82:	609a      	str	r2, [r3, #8]

	return 0;
 8015d84:	2300      	movs	r3, #0
}
 8015d86:	4618      	mov	r0, r3
 8015d88:	371c      	adds	r7, #28
 8015d8a:	46bd      	mov	sp, r7
 8015d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d90:	4770      	bx	lr

08015d92 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 8015d92:	b580      	push	{r7, lr}
 8015d94:	b086      	sub	sp, #24
 8015d96:	af00      	add	r7, sp, #0
 8015d98:	6078      	str	r0, [r7, #4]
 8015d9a:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d102      	bne.n	8015da8 <rproc_virtio_notified+0x16>
		return -EINVAL;
 8015da2:	f06f 0315 	mvn.w	r3, #21
 8015da6:	e02c      	b.n	8015e02 <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	683a      	ldr	r2, [r7, #0]
 8015dae:	429a      	cmp	r2, r3
 8015db0:	d101      	bne.n	8015db6 <rproc_virtio_notified+0x24>
		return 0;
 8015db2:	2300      	movs	r3, #0
 8015db4:	e025      	b.n	8015e02 <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015dba:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	617b      	str	r3, [r7, #20]
 8015dc0:	e01a      	b.n	8015df8 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8015dc6:	697a      	ldr	r2, [r7, #20]
 8015dc8:	4613      	mov	r3, r2
 8015dca:	005b      	lsls	r3, r3, #1
 8015dcc:	4413      	add	r3, r2
 8015dce:	00db      	lsls	r3, r3, #3
 8015dd0:	440b      	add	r3, r1
 8015dd2:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	691b      	ldr	r3, [r3, #16]
 8015dd8:	683a      	ldr	r2, [r7, #0]
 8015dda:	429a      	cmp	r2, r3
 8015ddc:	d003      	beq.n	8015de6 <rproc_virtio_notified+0x54>
 8015dde:	683b      	ldr	r3, [r7, #0]
 8015de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015de4:	d105      	bne.n	8015df2 <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 8015dec:	68b8      	ldr	r0, [r7, #8]
 8015dee:	f001 fb58 	bl	80174a2 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 8015df2:	697b      	ldr	r3, [r7, #20]
 8015df4:	3301      	adds	r3, #1
 8015df6:	617b      	str	r3, [r7, #20]
 8015df8:	697a      	ldr	r2, [r7, #20]
 8015dfa:	693b      	ldr	r3, [r7, #16]
 8015dfc:	429a      	cmp	r2, r3
 8015dfe:	d3e0      	bcc.n	8015dc2 <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 8015e00:	2300      	movs	r3, #0
}
 8015e02:	4618      	mov	r0, r3
 8015e04:	3718      	adds	r7, #24
 8015e06:	46bd      	mov	sp, r7
 8015e08:	bd80      	pop	{r7, pc}

08015e0a <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 8015e0a:	b580      	push	{r7, lr}
 8015e0c:	b084      	sub	sp, #16
 8015e0e:	af00      	add	r7, sp, #0
 8015e10:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	699b      	ldr	r3, [r3, #24]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d00a      	beq.n	8015e30 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 8015e1a:	6878      	ldr	r0, [r7, #4]
 8015e1c:	f7ff fe08 	bl	8015a30 <rproc_virtio_get_status>
 8015e20:	4603      	mov	r3, r0
 8015e22:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 8015e24:	7bfb      	ldrb	r3, [r7, #15]
 8015e26:	f003 0304 	and.w	r3, r3, #4
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d102      	bne.n	8015e34 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 8015e2e:	e7f4      	b.n	8015e1a <rproc_virtio_wait_remote_ready+0x10>
		return;
 8015e30:	bf00      	nop
 8015e32:	e000      	b.n	8015e36 <rproc_virtio_wait_remote_ready+0x2c>
			return;
 8015e34:	bf00      	nop
	}
}
 8015e36:	3710      	adds	r7, #16
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	bd80      	pop	{r7, pc}

08015e3c <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 8015e3c:	b480      	push	{r7}
 8015e3e:	b083      	sub	sp, #12
 8015e40:	af00      	add	r7, sp, #0
 8015e42:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8015e44:	bf00      	nop
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	2201      	movs	r2, #1
 8015e4a:	4611      	mov	r1, r2
 8015e4c:	f3bf 8f5b 	dmb	ish
 8015e50:	e8d3 2f4f 	ldrexb	r2, [r3]
 8015e54:	e8c3 1f40 	strexb	r0, r1, [r3]
 8015e58:	2800      	cmp	r0, #0
 8015e5a:	d1f9      	bne.n	8015e50 <__metal_mutex_acquire+0x14>
 8015e5c:	f3bf 8f5b 	dmb	ish
 8015e60:	b2d3      	uxtb	r3, r2
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d1ef      	bne.n	8015e46 <__metal_mutex_acquire+0xa>
		;
	}
}
 8015e66:	bf00      	nop
 8015e68:	bf00      	nop
 8015e6a:	370c      	adds	r7, #12
 8015e6c:	46bd      	mov	sp, r7
 8015e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e72:	4770      	bx	lr

08015e74 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 8015e74:	b480      	push	{r7}
 8015e76:	b083      	sub	sp, #12
 8015e78:	af00      	add	r7, sp, #0
 8015e7a:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	f3bf 8f5b 	dmb	ish
 8015e82:	2200      	movs	r2, #0
 8015e84:	701a      	strb	r2, [r3, #0]
 8015e86:	f3bf 8f5b 	dmb	ish
}
 8015e8a:	bf00      	nop
 8015e8c:	370c      	adds	r7, #12
 8015e8e:	46bd      	mov	sp, r7
 8015e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e94:	4770      	bx	lr

08015e96 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 8015e96:	b580      	push	{r7, lr}
 8015e98:	b082      	sub	sp, #8
 8015e9a:	af00      	add	r7, sp, #0
 8015e9c:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8015e9e:	6878      	ldr	r0, [r7, #4]
 8015ea0:	f7ff ffcc 	bl	8015e3c <__metal_mutex_acquire>
}
 8015ea4:	bf00      	nop
 8015ea6:	3708      	adds	r7, #8
 8015ea8:	46bd      	mov	sp, r7
 8015eaa:	bd80      	pop	{r7, pc}

08015eac <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 8015eac:	b580      	push	{r7, lr}
 8015eae:	b082      	sub	sp, #8
 8015eb0:	af00      	add	r7, sp, #0
 8015eb2:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8015eb4:	6878      	ldr	r0, [r7, #4]
 8015eb6:	f7ff ffdd 	bl	8015e74 <__metal_mutex_release>
}
 8015eba:	bf00      	nop
 8015ebc:	3708      	adds	r7, #8
 8015ebe:	46bd      	mov	sp, r7
 8015ec0:	bd80      	pop	{r7, pc}

08015ec2 <metal_list_add_before>:
{
 8015ec2:	b480      	push	{r7}
 8015ec4:	b083      	sub	sp, #12
 8015ec6:	af00      	add	r7, sp, #0
 8015ec8:	6078      	str	r0, [r7, #4]
 8015eca:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	685a      	ldr	r2, [r3, #4]
 8015ed0:	683b      	ldr	r3, [r7, #0]
 8015ed2:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8015ed4:	683b      	ldr	r3, [r7, #0]
 8015ed6:	687a      	ldr	r2, [r7, #4]
 8015ed8:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8015eda:	683b      	ldr	r3, [r7, #0]
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	683a      	ldr	r2, [r7, #0]
 8015ee0:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8015ee2:	683b      	ldr	r3, [r7, #0]
 8015ee4:	685b      	ldr	r3, [r3, #4]
 8015ee6:	683a      	ldr	r2, [r7, #0]
 8015ee8:	601a      	str	r2, [r3, #0]
}
 8015eea:	bf00      	nop
 8015eec:	370c      	adds	r7, #12
 8015eee:	46bd      	mov	sp, r7
 8015ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ef4:	4770      	bx	lr

08015ef6 <metal_list_add_tail>:
{
 8015ef6:	b580      	push	{r7, lr}
 8015ef8:	b082      	sub	sp, #8
 8015efa:	af00      	add	r7, sp, #0
 8015efc:	6078      	str	r0, [r7, #4]
 8015efe:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8015f00:	6839      	ldr	r1, [r7, #0]
 8015f02:	6878      	ldr	r0, [r7, #4]
 8015f04:	f7ff ffdd 	bl	8015ec2 <metal_list_add_before>
}
 8015f08:	bf00      	nop
 8015f0a:	3708      	adds	r7, #8
 8015f0c:	46bd      	mov	sp, r7
 8015f0e:	bd80      	pop	{r7, pc}

08015f10 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 8015f10:	b480      	push	{r7}
 8015f12:	b083      	sub	sp, #12
 8015f14:	af00      	add	r7, sp, #0
 8015f16:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	687a      	ldr	r2, [r7, #4]
 8015f1e:	6852      	ldr	r2, [r2, #4]
 8015f20:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	685b      	ldr	r3, [r3, #4]
 8015f26:	687a      	ldr	r2, [r7, #4]
 8015f28:	6812      	ldr	r2, [r2, #0]
 8015f2a:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	687a      	ldr	r2, [r7, #4]
 8015f30:	605a      	str	r2, [r3, #4]
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	685a      	ldr	r2, [r3, #4]
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	601a      	str	r2, [r3, #0]
}
 8015f3a:	bf00      	nop
 8015f3c:	370c      	adds	r7, #12
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f44:	4770      	bx	lr

08015f46 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 8015f46:	b480      	push	{r7}
 8015f48:	b083      	sub	sp, #12
 8015f4a:	af00      	add	r7, sp, #0
 8015f4c:	6078      	str	r0, [r7, #4]
 8015f4e:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8015f50:	683b      	ldr	r3, [r7, #0]
 8015f52:	095b      	lsrs	r3, r3, #5
 8015f54:	009a      	lsls	r2, r3, #2
 8015f56:	6879      	ldr	r1, [r7, #4]
 8015f58:	440a      	add	r2, r1
 8015f5a:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8015f5c:	683a      	ldr	r2, [r7, #0]
 8015f5e:	f002 021f 	and.w	r2, r2, #31
 8015f62:	2001      	movs	r0, #1
 8015f64:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8015f68:	009b      	lsls	r3, r3, #2
 8015f6a:	6878      	ldr	r0, [r7, #4]
 8015f6c:	4403      	add	r3, r0
 8015f6e:	430a      	orrs	r2, r1
 8015f70:	601a      	str	r2, [r3, #0]
}
 8015f72:	bf00      	nop
 8015f74:	370c      	adds	r7, #12
 8015f76:	46bd      	mov	sp, r7
 8015f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f7c:	4770      	bx	lr

08015f7e <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 8015f7e:	b480      	push	{r7}
 8015f80:	b083      	sub	sp, #12
 8015f82:	af00      	add	r7, sp, #0
 8015f84:	6078      	str	r0, [r7, #4]
 8015f86:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8015f88:	683b      	ldr	r3, [r7, #0]
 8015f8a:	095b      	lsrs	r3, r3, #5
 8015f8c:	009b      	lsls	r3, r3, #2
 8015f8e:	687a      	ldr	r2, [r7, #4]
 8015f90:	4413      	add	r3, r2
 8015f92:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8015f94:	683b      	ldr	r3, [r7, #0]
 8015f96:	f003 031f 	and.w	r3, r3, #31
 8015f9a:	2101      	movs	r1, #1
 8015f9c:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8015fa0:	4013      	ands	r3, r2
}
 8015fa2:	4618      	mov	r0, r3
 8015fa4:	370c      	adds	r7, #12
 8015fa6:	46bd      	mov	sp, r7
 8015fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fac:	4770      	bx	lr

08015fae <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 8015fae:	b480      	push	{r7}
 8015fb0:	b083      	sub	sp, #12
 8015fb2:	af00      	add	r7, sp, #0
 8015fb4:	6078      	str	r0, [r7, #4]
 8015fb6:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8015fb8:	683b      	ldr	r3, [r7, #0]
 8015fba:	095b      	lsrs	r3, r3, #5
 8015fbc:	009a      	lsls	r2, r3, #2
 8015fbe:	6879      	ldr	r1, [r7, #4]
 8015fc0:	440a      	add	r2, r1
 8015fc2:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8015fc4:	683a      	ldr	r2, [r7, #0]
 8015fc6:	f002 021f 	and.w	r2, r2, #31
 8015fca:	2001      	movs	r0, #1
 8015fcc:	fa00 f202 	lsl.w	r2, r0, r2
 8015fd0:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8015fd2:	009b      	lsls	r3, r3, #2
 8015fd4:	6878      	ldr	r0, [r7, #4]
 8015fd6:	4403      	add	r3, r0
 8015fd8:	400a      	ands	r2, r1
 8015fda:	601a      	str	r2, [r3, #0]
}
 8015fdc:	bf00      	nop
 8015fde:	370c      	adds	r7, #12
 8015fe0:	46bd      	mov	sp, r7
 8015fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fe6:	4770      	bx	lr

08015fe8 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 8015fe8:	b580      	push	{r7, lr}
 8015fea:	b082      	sub	sp, #8
 8015fec:	af00      	add	r7, sp, #0
 8015fee:	6078      	str	r0, [r7, #4]
 8015ff0:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 8015ff2:	6839      	ldr	r1, [r7, #0]
 8015ff4:	6878      	ldr	r0, [r7, #4]
 8015ff6:	f7ff ffc2 	bl	8015f7e <metal_bitmap_is_bit_set>
 8015ffa:	4603      	mov	r3, r0
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	bf0c      	ite	eq
 8016000:	2301      	moveq	r3, #1
 8016002:	2300      	movne	r3, #0
 8016004:	b2db      	uxtb	r3, r3
}
 8016006:	4618      	mov	r0, r3
 8016008:	3708      	adds	r7, #8
 801600a:	46bd      	mov	sp, r7
 801600c:	bd80      	pop	{r7, pc}

0801600e <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 801600e:	b580      	push	{r7, lr}
 8016010:	b086      	sub	sp, #24
 8016012:	af00      	add	r7, sp, #0
 8016014:	60f8      	str	r0, [r7, #12]
 8016016:	60b9      	str	r1, [r7, #8]
 8016018:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 801601a:	68bb      	ldr	r3, [r7, #8]
 801601c:	617b      	str	r3, [r7, #20]
 801601e:	e002      	b.n	8016026 <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 8016020:	697b      	ldr	r3, [r7, #20]
 8016022:	3301      	adds	r3, #1
 8016024:	617b      	str	r3, [r7, #20]
	for (bit = start;
 8016026:	697a      	ldr	r2, [r7, #20]
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	429a      	cmp	r2, r3
 801602c:	d207      	bcs.n	801603e <metal_bitmap_next_clear_bit+0x30>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 801602e:	697b      	ldr	r3, [r7, #20]
 8016030:	4619      	mov	r1, r3
 8016032:	68f8      	ldr	r0, [r7, #12]
 8016034:	f7ff ffd8 	bl	8015fe8 <metal_bitmap_is_bit_clear>
 8016038:	4603      	mov	r3, r0
 801603a:	2b00      	cmp	r3, #0
 801603c:	d0f0      	beq.n	8016020 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 801603e:	697b      	ldr	r3, [r7, #20]
}
 8016040:	4618      	mov	r0, r3
 8016042:	3718      	adds	r7, #24
 8016044:	46bd      	mov	sp, r7
 8016046:	bd80      	pop	{r7, pc}

08016048 <rpmsg_init_ept>:
{
 8016048:	b580      	push	{r7, lr}
 801604a:	b084      	sub	sp, #16
 801604c:	af00      	add	r7, sp, #0
 801604e:	60f8      	str	r0, [r7, #12]
 8016050:	60b9      	str	r1, [r7, #8]
 8016052:	607a      	str	r2, [r7, #4]
 8016054:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	2220      	movs	r2, #32
 801605a:	68b9      	ldr	r1, [r7, #8]
 801605c:	4618      	mov	r0, r3
 801605e:	f007 fcef 	bl	801da40 <strncpy>
	ept->addr = src;
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	687a      	ldr	r2, [r7, #4]
 8016066:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	683a      	ldr	r2, [r7, #0]
 801606c:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	69ba      	ldr	r2, [r7, #24]
 8016072:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	69fa      	ldr	r2, [r7, #28]
 8016078:	631a      	str	r2, [r3, #48]	; 0x30
}
 801607a:	bf00      	nop
 801607c:	3710      	adds	r7, #16
 801607e:	46bd      	mov	sp, r7
 8016080:	bd80      	pop	{r7, pc}

08016082 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 8016082:	b580      	push	{r7, lr}
 8016084:	b084      	sub	sp, #16
 8016086:	af00      	add	r7, sp, #0
 8016088:	6078      	str	r0, [r7, #4]
 801608a:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 801608c:	f04f 33ff 	mov.w	r3, #4294967295
 8016090:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 8016092:	683b      	ldr	r3, [r7, #0]
 8016094:	461a      	mov	r2, r3
 8016096:	2100      	movs	r1, #0
 8016098:	6878      	ldr	r0, [r7, #4]
 801609a:	f7ff ffb8 	bl	801600e <metal_bitmap_next_clear_bit>
 801609e:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 80160a0:	683b      	ldr	r3, [r7, #0]
 80160a2:	68ba      	ldr	r2, [r7, #8]
 80160a4:	429a      	cmp	r2, r3
 80160a6:	d206      	bcs.n	80160b6 <rpmsg_get_address+0x34>
		addr = nextbit;
 80160a8:	68bb      	ldr	r3, [r7, #8]
 80160aa:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 80160ac:	68bb      	ldr	r3, [r7, #8]
 80160ae:	4619      	mov	r1, r3
 80160b0:	6878      	ldr	r0, [r7, #4]
 80160b2:	f7ff ff48 	bl	8015f46 <metal_bitmap_set_bit>
	}

	return addr;
 80160b6:	68fb      	ldr	r3, [r7, #12]
}
 80160b8:	4618      	mov	r0, r3
 80160ba:	3710      	adds	r7, #16
 80160bc:	46bd      	mov	sp, r7
 80160be:	bd80      	pop	{r7, pc}

080160c0 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 80160c0:	b580      	push	{r7, lr}
 80160c2:	b084      	sub	sp, #16
 80160c4:	af00      	add	r7, sp, #0
 80160c6:	60f8      	str	r0, [r7, #12]
 80160c8:	60b9      	str	r1, [r7, #8]
 80160ca:	607a      	str	r2, [r7, #4]
	if (addr < size)
 80160cc:	687a      	ldr	r2, [r7, #4]
 80160ce:	68bb      	ldr	r3, [r7, #8]
 80160d0:	429a      	cmp	r2, r3
 80160d2:	da03      	bge.n	80160dc <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 80160d4:	6879      	ldr	r1, [r7, #4]
 80160d6:	68f8      	ldr	r0, [r7, #12]
 80160d8:	f7ff ff69 	bl	8015fae <metal_bitmap_clear_bit>
}
 80160dc:	bf00      	nop
 80160de:	3710      	adds	r7, #16
 80160e0:	46bd      	mov	sp, r7
 80160e2:	bd80      	pop	{r7, pc}

080160e4 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 80160e4:	b580      	push	{r7, lr}
 80160e6:	b084      	sub	sp, #16
 80160e8:	af00      	add	r7, sp, #0
 80160ea:	60f8      	str	r0, [r7, #12]
 80160ec:	60b9      	str	r1, [r7, #8]
 80160ee:	607a      	str	r2, [r7, #4]
	if (addr < size)
 80160f0:	687a      	ldr	r2, [r7, #4]
 80160f2:	68bb      	ldr	r3, [r7, #8]
 80160f4:	429a      	cmp	r2, r3
 80160f6:	da05      	bge.n	8016104 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 80160f8:	6879      	ldr	r1, [r7, #4]
 80160fa:	68f8      	ldr	r0, [r7, #12]
 80160fc:	f7ff ff3f 	bl	8015f7e <metal_bitmap_is_bit_set>
 8016100:	4603      	mov	r3, r0
 8016102:	e000      	b.n	8016106 <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 8016104:	4b02      	ldr	r3, [pc, #8]	; (8016110 <rpmsg_is_address_set+0x2c>)
}
 8016106:	4618      	mov	r0, r3
 8016108:	3710      	adds	r7, #16
 801610a:	46bd      	mov	sp, r7
 801610c:	bd80      	pop	{r7, pc}
 801610e:	bf00      	nop
 8016110:	fffff82d 	.word	0xfffff82d

08016114 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 8016114:	b580      	push	{r7, lr}
 8016116:	b084      	sub	sp, #16
 8016118:	af00      	add	r7, sp, #0
 801611a:	60f8      	str	r0, [r7, #12]
 801611c:	60b9      	str	r1, [r7, #8]
 801611e:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 8016120:	687a      	ldr	r2, [r7, #4]
 8016122:	68bb      	ldr	r3, [r7, #8]
 8016124:	429a      	cmp	r2, r3
 8016126:	da05      	bge.n	8016134 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 8016128:	6879      	ldr	r1, [r7, #4]
 801612a:	68f8      	ldr	r0, [r7, #12]
 801612c:	f7ff ff0b 	bl	8015f46 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 8016130:	2300      	movs	r3, #0
 8016132:	e000      	b.n	8016136 <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 8016134:	4b02      	ldr	r3, [pc, #8]	; (8016140 <rpmsg_set_address+0x2c>)
	}
}
 8016136:	4618      	mov	r0, r3
 8016138:	3710      	adds	r7, #16
 801613a:	46bd      	mov	sp, r7
 801613c:	bd80      	pop	{r7, pc}
 801613e:	bf00      	nop
 8016140:	fffff82d 	.word	0xfffff82d

08016144 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 8016144:	b590      	push	{r4, r7, lr}
 8016146:	b089      	sub	sp, #36	; 0x24
 8016148:	af02      	add	r7, sp, #8
 801614a:	60f8      	str	r0, [r7, #12]
 801614c:	60b9      	str	r1, [r7, #8]
 801614e:	607a      	str	r2, [r7, #4]
 8016150:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	2b00      	cmp	r3, #0
 8016156:	d00a      	beq.n	801616e <rpmsg_send_offchannel_raw+0x2a>
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	6a1b      	ldr	r3, [r3, #32]
 801615c:	2b00      	cmp	r3, #0
 801615e:	d006      	beq.n	801616e <rpmsg_send_offchannel_raw+0x2a>
 8016160:	683b      	ldr	r3, [r7, #0]
 8016162:	2b00      	cmp	r3, #0
 8016164:	d003      	beq.n	801616e <rpmsg_send_offchannel_raw+0x2a>
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	f1b3 3fff 	cmp.w	r3, #4294967295
 801616c:	d101      	bne.n	8016172 <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 801616e:	4b0d      	ldr	r3, [pc, #52]	; (80161a4 <rpmsg_send_offchannel_raw+0x60>)
 8016170:	e014      	b.n	801619c <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	6a1b      	ldr	r3, [r3, #32]
 8016176:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 8016178:	697b      	ldr	r3, [r7, #20]
 801617a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801617c:	2b00      	cmp	r3, #0
 801617e:	d00c      	beq.n	801619a <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 8016180:	697b      	ldr	r3, [r7, #20]
 8016182:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8016184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016186:	9301      	str	r3, [sp, #4]
 8016188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801618a:	9300      	str	r3, [sp, #0]
 801618c:	683b      	ldr	r3, [r7, #0]
 801618e:	687a      	ldr	r2, [r7, #4]
 8016190:	68b9      	ldr	r1, [r7, #8]
 8016192:	6978      	ldr	r0, [r7, #20]
 8016194:	47a0      	blx	r4
 8016196:	4603      	mov	r3, r0
 8016198:	e000      	b.n	801619c <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 801619a:	4b02      	ldr	r3, [pc, #8]	; (80161a4 <rpmsg_send_offchannel_raw+0x60>)
}
 801619c:	4618      	mov	r0, r3
 801619e:	371c      	adds	r7, #28
 80161a0:	46bd      	mov	sp, r7
 80161a2:	bd90      	pop	{r4, r7, pc}
 80161a4:	fffff82d 	.word	0xfffff82d

080161a8 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 80161a8:	b580      	push	{r7, lr}
 80161aa:	b090      	sub	sp, #64	; 0x40
 80161ac:	af02      	add	r7, sp, #8
 80161ae:	6078      	str	r0, [r7, #4]
 80161b0:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 80161b2:	683b      	ldr	r3, [r7, #0]
 80161b4:	633b      	str	r3, [r7, #48]	; 0x30
	ns_msg.addr = ept->addr;
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 80161bc:	6879      	ldr	r1, [r7, #4]
 80161be:	f107 030c 	add.w	r3, r7, #12
 80161c2:	2220      	movs	r2, #32
 80161c4:	4618      	mov	r0, r3
 80161c6:	f007 fc3b 	bl	801da40 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80161ce:	f107 030c 	add.w	r3, r7, #12
 80161d2:	2201      	movs	r2, #1
 80161d4:	9201      	str	r2, [sp, #4]
 80161d6:	2228      	movs	r2, #40	; 0x28
 80161d8:	9200      	str	r2, [sp, #0]
 80161da:	2235      	movs	r2, #53	; 0x35
 80161dc:	6878      	ldr	r0, [r7, #4]
 80161de:	f7ff ffb1 	bl	8016144 <rpmsg_send_offchannel_raw>
 80161e2:	6378      	str	r0, [r7, #52]	; 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 80161e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	da01      	bge.n	80161ee <rpmsg_send_ns_message+0x46>
		return ret;
 80161ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161ec:	e000      	b.n	80161f0 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 80161ee:	2300      	movs	r3, #0
}
 80161f0:	4618      	mov	r0, r3
 80161f2:	3738      	adds	r7, #56	; 0x38
 80161f4:	46bd      	mov	sp, r7
 80161f6:	bd80      	pop	{r7, pc}

080161f8 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 80161f8:	b580      	push	{r7, lr}
 80161fa:	b088      	sub	sp, #32
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	60f8      	str	r0, [r7, #12]
 8016200:	60b9      	str	r1, [r7, #8]
 8016202:	607a      	str	r2, [r7, #4]
 8016204:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	61fb      	str	r3, [r7, #28]
 801620c:	e04b      	b.n	80162a6 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 801620e:	2300      	movs	r3, #0
 8016210:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 8016212:	69fb      	ldr	r3, [r7, #28]
 8016214:	3b34      	subs	r3, #52	; 0x34
 8016216:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801621e:	d006      	beq.n	801622e <rpmsg_get_endpoint+0x36>
 8016220:	697b      	ldr	r3, [r7, #20]
 8016222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016224:	687a      	ldr	r2, [r7, #4]
 8016226:	429a      	cmp	r2, r3
 8016228:	d101      	bne.n	801622e <rpmsg_get_endpoint+0x36>
			return ept;
 801622a:	697b      	ldr	r3, [r7, #20]
 801622c:	e040      	b.n	80162b0 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 801622e:	697b      	ldr	r3, [r7, #20]
 8016230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016232:	687a      	ldr	r2, [r7, #4]
 8016234:	429a      	cmp	r2, r3
 8016236:	d106      	bne.n	8016246 <rpmsg_get_endpoint+0x4e>
 8016238:	697b      	ldr	r3, [r7, #20]
 801623a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801623c:	683a      	ldr	r2, [r7, #0]
 801623e:	429a      	cmp	r2, r3
 8016240:	d101      	bne.n	8016246 <rpmsg_get_endpoint+0x4e>
			return ept;
 8016242:	697b      	ldr	r3, [r7, #20]
 8016244:	e034      	b.n	80162b0 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 8016246:	68bb      	ldr	r3, [r7, #8]
 8016248:	2b00      	cmp	r3, #0
 801624a:	d00c      	beq.n	8016266 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 801624c:	697b      	ldr	r3, [r7, #20]
 801624e:	2220      	movs	r2, #32
 8016250:	68b9      	ldr	r1, [r7, #8]
 8016252:	4618      	mov	r0, r3
 8016254:	f007 fbe2 	bl	801da1c <strncmp>
 8016258:	4603      	mov	r3, r0
 801625a:	2b00      	cmp	r3, #0
 801625c:	bf0c      	ite	eq
 801625e:	2301      	moveq	r3, #1
 8016260:	2300      	movne	r3, #0
 8016262:	b2db      	uxtb	r3, r3
 8016264:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 8016266:	68bb      	ldr	r3, [r7, #8]
 8016268:	2b00      	cmp	r3, #0
 801626a:	d018      	beq.n	801629e <rpmsg_get_endpoint+0xa6>
 801626c:	69bb      	ldr	r3, [r7, #24]
 801626e:	2b00      	cmp	r3, #0
 8016270:	d015      	beq.n	801629e <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 8016272:	683b      	ldr	r3, [r7, #0]
 8016274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016278:	d006      	beq.n	8016288 <rpmsg_get_endpoint+0x90>
 801627a:	697b      	ldr	r3, [r7, #20]
 801627c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801627e:	683a      	ldr	r2, [r7, #0]
 8016280:	429a      	cmp	r2, r3
 8016282:	d101      	bne.n	8016288 <rpmsg_get_endpoint+0x90>
			return ept;
 8016284:	697b      	ldr	r3, [r7, #20]
 8016286:	e013      	b.n	80162b0 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801628e:	d107      	bne.n	80162a0 <rpmsg_get_endpoint+0xa8>
 8016290:	697b      	ldr	r3, [r7, #20]
 8016292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016298:	d102      	bne.n	80162a0 <rpmsg_get_endpoint+0xa8>
			return ept;
 801629a:	697b      	ldr	r3, [r7, #20]
 801629c:	e008      	b.n	80162b0 <rpmsg_get_endpoint+0xb8>
			continue;
 801629e:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 80162a0:	69fb      	ldr	r3, [r7, #28]
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	61fb      	str	r3, [r7, #28]
 80162a6:	68fb      	ldr	r3, [r7, #12]
 80162a8:	69fa      	ldr	r2, [r7, #28]
 80162aa:	429a      	cmp	r2, r3
 80162ac:	d1af      	bne.n	801620e <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 80162ae:	2300      	movs	r3, #0
}
 80162b0:	4618      	mov	r0, r3
 80162b2:	3720      	adds	r7, #32
 80162b4:	46bd      	mov	sp, r7
 80162b6:	bd80      	pop	{r7, pc}

080162b8 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 80162b8:	b580      	push	{r7, lr}
 80162ba:	b084      	sub	sp, #16
 80162bc:	af00      	add	r7, sp, #0
 80162be:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d016      	beq.n	80162f4 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	6a1b      	ldr	r3, [r3, #32]
 80162ca:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162d4:	d008      	beq.n	80162e8 <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 80162d6:	68fb      	ldr	r3, [r7, #12]
 80162d8:	f103 0048 	add.w	r0, r3, #72	; 0x48
				      ept->addr);
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 80162e0:	461a      	mov	r2, r3
 80162e2:	2180      	movs	r1, #128	; 0x80
 80162e4:	f7ff feec 	bl	80160c0 <rpmsg_release_address>
	metal_list_del(&ept->node);
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	3334      	adds	r3, #52	; 0x34
 80162ec:	4618      	mov	r0, r3
 80162ee:	f7ff fe0f 	bl	8015f10 <metal_list_del>
 80162f2:	e000      	b.n	80162f6 <rpmsg_unregister_endpoint+0x3e>
		return;
 80162f4:	bf00      	nop
}
 80162f6:	3710      	adds	r7, #16
 80162f8:	46bd      	mov	sp, r7
 80162fa:	bd80      	pop	{r7, pc}

080162fc <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 80162fc:	b580      	push	{r7, lr}
 80162fe:	b082      	sub	sp, #8
 8016300:	af00      	add	r7, sp, #0
 8016302:	6078      	str	r0, [r7, #4]
 8016304:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 8016306:	683b      	ldr	r3, [r7, #0]
 8016308:	687a      	ldr	r2, [r7, #4]
 801630a:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 801630c:	687a      	ldr	r2, [r7, #4]
 801630e:	683b      	ldr	r3, [r7, #0]
 8016310:	3334      	adds	r3, #52	; 0x34
 8016312:	4619      	mov	r1, r3
 8016314:	4610      	mov	r0, r2
 8016316:	f7ff fdee 	bl	8015ef6 <metal_list_add_tail>
	return RPMSG_SUCCESS;
 801631a:	2300      	movs	r3, #0
}
 801631c:	4618      	mov	r0, r3
 801631e:	3708      	adds	r7, #8
 8016320:	46bd      	mov	sp, r7
 8016322:	bd80      	pop	{r7, pc}

08016324 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 8016324:	b580      	push	{r7, lr}
 8016326:	b088      	sub	sp, #32
 8016328:	af02      	add	r7, sp, #8
 801632a:	60f8      	str	r0, [r7, #12]
 801632c:	60b9      	str	r1, [r7, #8]
 801632e:	607a      	str	r2, [r7, #4]
 8016330:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 8016332:	683b      	ldr	r3, [r7, #0]
 8016334:	613b      	str	r3, [r7, #16]

	if (!ept)
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	2b00      	cmp	r3, #0
 801633a:	d101      	bne.n	8016340 <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 801633c:	4b37      	ldr	r3, [pc, #220]	; (801641c <rpmsg_create_ept+0xf8>)
 801633e:	e068      	b.n	8016412 <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 8016340:	68bb      	ldr	r3, [r7, #8]
 8016342:	3358      	adds	r3, #88	; 0x58
 8016344:	4618      	mov	r0, r3
 8016346:	f7ff fda6 	bl	8015e96 <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 801634a:	683b      	ldr	r3, [r7, #0]
 801634c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016350:	d018      	beq.n	8016384 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 8016352:	68bb      	ldr	r3, [r7, #8]
 8016354:	3348      	adds	r3, #72	; 0x48
 8016356:	683a      	ldr	r2, [r7, #0]
 8016358:	2180      	movs	r1, #128	; 0x80
 801635a:	4618      	mov	r0, r3
 801635c:	f7ff fec2 	bl	80160e4 <rpmsg_is_address_set>
 8016360:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 8016362:	697b      	ldr	r3, [r7, #20]
 8016364:	2b00      	cmp	r3, #0
 8016366:	d107      	bne.n	8016378 <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8016368:	68bb      	ldr	r3, [r7, #8]
 801636a:	3348      	adds	r3, #72	; 0x48
 801636c:	683a      	ldr	r2, [r7, #0]
 801636e:	2180      	movs	r1, #128	; 0x80
 8016370:	4618      	mov	r0, r3
 8016372:	f7ff fecf 	bl	8016114 <rpmsg_set_address>
 8016376:	e00c      	b.n	8016392 <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 8016378:	697b      	ldr	r3, [r7, #20]
 801637a:	2b00      	cmp	r3, #0
 801637c:	dd40      	ble.n	8016400 <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 801637e:	2300      	movs	r3, #0
 8016380:	617b      	str	r3, [r7, #20]
			goto ret_status;
 8016382:	e040      	b.n	8016406 <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 8016384:	68bb      	ldr	r3, [r7, #8]
 8016386:	3348      	adds	r3, #72	; 0x48
 8016388:	2180      	movs	r1, #128	; 0x80
 801638a:	4618      	mov	r0, r3
 801638c:	f7ff fe79 	bl	8016082 <rpmsg_get_address>
 8016390:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 8016392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016394:	9301      	str	r3, [sp, #4]
 8016396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016398:	9300      	str	r3, [sp, #0]
 801639a:	6a3b      	ldr	r3, [r7, #32]
 801639c:	693a      	ldr	r2, [r7, #16]
 801639e:	6879      	ldr	r1, [r7, #4]
 80163a0:	68f8      	ldr	r0, [r7, #12]
 80163a2:	f7ff fe51 	bl	8016048 <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 80163a6:	68f9      	ldr	r1, [r7, #12]
 80163a8:	68b8      	ldr	r0, [r7, #8]
 80163aa:	f7ff ffa7 	bl	80162fc <rpmsg_register_endpoint>
 80163ae:	6178      	str	r0, [r7, #20]
	if (status < 0)
 80163b0:	697b      	ldr	r3, [r7, #20]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	da06      	bge.n	80163c4 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 80163b6:	68bb      	ldr	r3, [r7, #8]
 80163b8:	3348      	adds	r3, #72	; 0x48
 80163ba:	693a      	ldr	r2, [r7, #16]
 80163bc:	2180      	movs	r1, #128	; 0x80
 80163be:	4618      	mov	r0, r3
 80163c0:	f7ff fe7e 	bl	80160c0 <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 80163c4:	697b      	ldr	r3, [r7, #20]
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d11c      	bne.n	8016404 <rpmsg_create_ept+0xe0>
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80163ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163d2:	d117      	bne.n	8016404 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 80163d4:	68bb      	ldr	r3, [r7, #8]
 80163d6:	3358      	adds	r3, #88	; 0x58
 80163d8:	4618      	mov	r0, r3
 80163da:	f7ff fd67 	bl	8015eac <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 80163de:	2100      	movs	r1, #0
 80163e0:	68f8      	ldr	r0, [r7, #12]
 80163e2:	f7ff fee1 	bl	80161a8 <rpmsg_send_ns_message>
 80163e6:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 80163e8:	68bb      	ldr	r3, [r7, #8]
 80163ea:	3358      	adds	r3, #88	; 0x58
 80163ec:	4618      	mov	r0, r3
 80163ee:	f7ff fd52 	bl	8015e96 <metal_mutex_acquire>
		if (status)
 80163f2:	697b      	ldr	r3, [r7, #20]
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d005      	beq.n	8016404 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 80163f8:	68f8      	ldr	r0, [r7, #12]
 80163fa:	f7ff ff5d 	bl	80162b8 <rpmsg_unregister_endpoint>
 80163fe:	e002      	b.n	8016406 <rpmsg_create_ept+0xe2>
			goto ret_status;
 8016400:	bf00      	nop
 8016402:	e000      	b.n	8016406 <rpmsg_create_ept+0xe2>
	}

ret_status:
 8016404:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 8016406:	68bb      	ldr	r3, [r7, #8]
 8016408:	3358      	adds	r3, #88	; 0x58
 801640a:	4618      	mov	r0, r3
 801640c:	f7ff fd4e 	bl	8015eac <metal_mutex_release>
	return status;
 8016410:	697b      	ldr	r3, [r7, #20]
}
 8016412:	4618      	mov	r0, r3
 8016414:	3718      	adds	r7, #24
 8016416:	46bd      	mov	sp, r7
 8016418:	bd80      	pop	{r7, pc}
 801641a:	bf00      	nop
 801641c:	fffff82d 	.word	0xfffff82d

08016420 <__metal_cache_invalidate>:
{
 8016420:	b580      	push	{r7, lr}
 8016422:	b082      	sub	sp, #8
 8016424:	af00      	add	r7, sp, #0
 8016426:	6078      	str	r0, [r7, #4]
 8016428:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 801642a:	6839      	ldr	r1, [r7, #0]
 801642c:	6878      	ldr	r0, [r7, #4]
 801642e:	f000 fcc2 	bl	8016db6 <metal_machine_cache_invalidate>
}
 8016432:	bf00      	nop
 8016434:	3708      	adds	r7, #8
 8016436:	46bd      	mov	sp, r7
 8016438:	bd80      	pop	{r7, pc}

0801643a <metal_cache_invalidate>:
{
 801643a:	b580      	push	{r7, lr}
 801643c:	b082      	sub	sp, #8
 801643e:	af00      	add	r7, sp, #0
 8016440:	6078      	str	r0, [r7, #4]
 8016442:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8016444:	6839      	ldr	r1, [r7, #0]
 8016446:	6878      	ldr	r0, [r7, #4]
 8016448:	f7ff ffea 	bl	8016420 <__metal_cache_invalidate>
}
 801644c:	bf00      	nop
 801644e:	3708      	adds	r7, #8
 8016450:	46bd      	mov	sp, r7
 8016452:	bd80      	pop	{r7, pc}

08016454 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 8016454:	b480      	push	{r7}
 8016456:	b083      	sub	sp, #12
 8016458:	af00      	add	r7, sp, #0
 801645a:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 801645c:	2300      	movs	r3, #0
}
 801645e:	4618      	mov	r0, r3
 8016460:	370c      	adds	r7, #12
 8016462:	46bd      	mov	sp, r7
 8016464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016468:	4770      	bx	lr

0801646a <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 801646a:	b580      	push	{r7, lr}
 801646c:	b082      	sub	sp, #8
 801646e:	af00      	add	r7, sp, #0
 8016470:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 8016472:	6878      	ldr	r0, [r7, #4]
 8016474:	f7ff ffee 	bl	8016454 <__metal_sleep_usec>
 8016478:	4603      	mov	r3, r0
}
 801647a:	4618      	mov	r0, r3
 801647c:	3708      	adds	r7, #8
 801647e:	46bd      	mov	sp, r7
 8016480:	bd80      	pop	{r7, pc}

08016482 <metal_list_init>:
{
 8016482:	b480      	push	{r7}
 8016484:	b083      	sub	sp, #12
 8016486:	af00      	add	r7, sp, #0
 8016488:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	687a      	ldr	r2, [r7, #4]
 801648e:	605a      	str	r2, [r3, #4]
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	685a      	ldr	r2, [r3, #4]
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	601a      	str	r2, [r3, #0]
}
 8016498:	bf00      	nop
 801649a:	370c      	adds	r7, #12
 801649c:	46bd      	mov	sp, r7
 801649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a2:	4770      	bx	lr

080164a4 <metal_io_virt_to_offset>:
{
 80164a4:	b480      	push	{r7}
 80164a6:	b085      	sub	sp, #20
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	6078      	str	r0, [r7, #4]
 80164ac:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	683a      	ldr	r2, [r7, #0]
 80164b4:	1ad3      	subs	r3, r2, r3
 80164b6:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	689b      	ldr	r3, [r3, #8]
 80164bc:	68fa      	ldr	r2, [r7, #12]
 80164be:	429a      	cmp	r2, r3
 80164c0:	d201      	bcs.n	80164c6 <metal_io_virt_to_offset+0x22>
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	e001      	b.n	80164ca <metal_io_virt_to_offset+0x26>
 80164c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80164ca:	4618      	mov	r0, r3
 80164cc:	3714      	adds	r7, #20
 80164ce:	46bd      	mov	sp, r7
 80164d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164d4:	4770      	bx	lr

080164d6 <__metal_mutex_init>:
{
 80164d6:	b480      	push	{r7}
 80164d8:	b085      	sub	sp, #20
 80164da:	af00      	add	r7, sp, #0
 80164dc:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	60fb      	str	r3, [r7, #12]
 80164e2:	2300      	movs	r3, #0
 80164e4:	60bb      	str	r3, [r7, #8]
 80164e6:	68bb      	ldr	r3, [r7, #8]
 80164e8:	461a      	mov	r2, r3
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	f3bf 8f5b 	dmb	ish
 80164f0:	601a      	str	r2, [r3, #0]
 80164f2:	f3bf 8f5b 	dmb	ish
}
 80164f6:	bf00      	nop
 80164f8:	3714      	adds	r7, #20
 80164fa:	46bd      	mov	sp, r7
 80164fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016500:	4770      	bx	lr

08016502 <__metal_mutex_acquire>:
{
 8016502:	b480      	push	{r7}
 8016504:	b083      	sub	sp, #12
 8016506:	af00      	add	r7, sp, #0
 8016508:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 801650a:	bf00      	nop
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	2201      	movs	r2, #1
 8016510:	4611      	mov	r1, r2
 8016512:	f3bf 8f5b 	dmb	ish
 8016516:	e8d3 2f4f 	ldrexb	r2, [r3]
 801651a:	e8c3 1f40 	strexb	r0, r1, [r3]
 801651e:	2800      	cmp	r0, #0
 8016520:	d1f9      	bne.n	8016516 <__metal_mutex_acquire+0x14>
 8016522:	f3bf 8f5b 	dmb	ish
 8016526:	b2d3      	uxtb	r3, r2
 8016528:	2b00      	cmp	r3, #0
 801652a:	d1ef      	bne.n	801650c <__metal_mutex_acquire+0xa>
}
 801652c:	bf00      	nop
 801652e:	bf00      	nop
 8016530:	370c      	adds	r7, #12
 8016532:	46bd      	mov	sp, r7
 8016534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016538:	4770      	bx	lr

0801653a <__metal_mutex_release>:
{
 801653a:	b480      	push	{r7}
 801653c:	b083      	sub	sp, #12
 801653e:	af00      	add	r7, sp, #0
 8016540:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	f3bf 8f5b 	dmb	ish
 8016548:	2200      	movs	r2, #0
 801654a:	701a      	strb	r2, [r3, #0]
 801654c:	f3bf 8f5b 	dmb	ish
}
 8016550:	bf00      	nop
 8016552:	370c      	adds	r7, #12
 8016554:	46bd      	mov	sp, r7
 8016556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801655a:	4770      	bx	lr

0801655c <metal_mutex_init>:
{
 801655c:	b580      	push	{r7, lr}
 801655e:	b082      	sub	sp, #8
 8016560:	af00      	add	r7, sp, #0
 8016562:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 8016564:	6878      	ldr	r0, [r7, #4]
 8016566:	f7ff ffb6 	bl	80164d6 <__metal_mutex_init>
}
 801656a:	bf00      	nop
 801656c:	3708      	adds	r7, #8
 801656e:	46bd      	mov	sp, r7
 8016570:	bd80      	pop	{r7, pc}

08016572 <metal_mutex_acquire>:
{
 8016572:	b580      	push	{r7, lr}
 8016574:	b082      	sub	sp, #8
 8016576:	af00      	add	r7, sp, #0
 8016578:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 801657a:	6878      	ldr	r0, [r7, #4]
 801657c:	f7ff ffc1 	bl	8016502 <__metal_mutex_acquire>
}
 8016580:	bf00      	nop
 8016582:	3708      	adds	r7, #8
 8016584:	46bd      	mov	sp, r7
 8016586:	bd80      	pop	{r7, pc}

08016588 <metal_mutex_release>:
{
 8016588:	b580      	push	{r7, lr}
 801658a:	b082      	sub	sp, #8
 801658c:	af00      	add	r7, sp, #0
 801658e:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8016590:	6878      	ldr	r0, [r7, #4]
 8016592:	f7ff ffd2 	bl	801653a <__metal_mutex_release>
}
 8016596:	bf00      	nop
 8016598:	3708      	adds	r7, #8
 801659a:	46bd      	mov	sp, r7
 801659c:	bd80      	pop	{r7, pc}

0801659e <rpmsg_init_ept>:
{
 801659e:	b580      	push	{r7, lr}
 80165a0:	b084      	sub	sp, #16
 80165a2:	af00      	add	r7, sp, #0
 80165a4:	60f8      	str	r0, [r7, #12]
 80165a6:	60b9      	str	r1, [r7, #8]
 80165a8:	607a      	str	r2, [r7, #4]
 80165aa:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	2220      	movs	r2, #32
 80165b0:	68b9      	ldr	r1, [r7, #8]
 80165b2:	4618      	mov	r0, r3
 80165b4:	f007 fa44 	bl	801da40 <strncpy>
	ept->addr = src;
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	687a      	ldr	r2, [r7, #4]
 80165bc:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	683a      	ldr	r2, [r7, #0]
 80165c2:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	69ba      	ldr	r2, [r7, #24]
 80165c8:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	69fa      	ldr	r2, [r7, #28]
 80165ce:	631a      	str	r2, [r3, #48]	; 0x30
}
 80165d0:	bf00      	nop
 80165d2:	3710      	adds	r7, #16
 80165d4:	46bd      	mov	sp, r7
 80165d6:	bd80      	pop	{r7, pc}

080165d8 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 80165d8:	b480      	push	{r7}
 80165da:	b083      	sub	sp, #12
 80165dc:	af00      	add	r7, sp, #0
 80165de:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80165e4:	699b      	ldr	r3, [r3, #24]
}
 80165e6:	4618      	mov	r0, r3
 80165e8:	370c      	adds	r7, #12
 80165ea:	46bd      	mov	sp, r7
 80165ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f0:	4770      	bx	lr

080165f2 <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 80165f2:	b580      	push	{r7, lr}
 80165f4:	b082      	sub	sp, #8
 80165f6:	af00      	add	r7, sp, #0
 80165f8:	6078      	str	r0, [r7, #4]
 80165fa:	460b      	mov	r3, r1
 80165fc:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016602:	6a1b      	ldr	r3, [r3, #32]
 8016604:	685b      	ldr	r3, [r3, #4]
 8016606:	687a      	ldr	r2, [r7, #4]
 8016608:	6e52      	ldr	r2, [r2, #100]	; 0x64
 801660a:	78f9      	ldrb	r1, [r7, #3]
 801660c:	4610      	mov	r0, r2
 801660e:	4798      	blx	r3
}
 8016610:	bf00      	nop
 8016612:	3708      	adds	r7, #8
 8016614:	46bd      	mov	sp, r7
 8016616:	bd80      	pop	{r7, pc}

08016618 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 8016618:	b580      	push	{r7, lr}
 801661a:	b082      	sub	sp, #8
 801661c:	af00      	add	r7, sp, #0
 801661e:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016624:	6a1b      	ldr	r3, [r3, #32]
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	687a      	ldr	r2, [r7, #4]
 801662a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 801662c:	4610      	mov	r0, r2
 801662e:	4798      	blx	r3
 8016630:	4603      	mov	r3, r0
}
 8016632:	4618      	mov	r0, r3
 8016634:	3708      	adds	r7, #8
 8016636:	46bd      	mov	sp, r7
 8016638:	bd80      	pop	{r7, pc}

0801663a <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 801663a:	b580      	push	{r7, lr}
 801663c:	b082      	sub	sp, #8
 801663e:	af00      	add	r7, sp, #0
 8016640:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016646:	6a1b      	ldr	r3, [r3, #32]
 8016648:	689b      	ldr	r3, [r3, #8]
 801664a:	687a      	ldr	r2, [r7, #4]
 801664c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 801664e:	4610      	mov	r0, r2
 8016650:	4798      	blx	r3
 8016652:	4603      	mov	r3, r0
}
 8016654:	4618      	mov	r0, r3
 8016656:	3708      	adds	r7, #8
 8016658:	46bd      	mov	sp, r7
 801665a:	bd80      	pop	{r7, pc}

0801665c <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 801665c:	b580      	push	{r7, lr}
 801665e:	b086      	sub	sp, #24
 8016660:	af02      	add	r7, sp, #8
 8016662:	60f8      	str	r0, [r7, #12]
 8016664:	60b9      	str	r1, [r7, #8]
 8016666:	607a      	str	r2, [r7, #4]
 8016668:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 801666e:	68b9      	ldr	r1, [r7, #8]
 8016670:	69bb      	ldr	r3, [r7, #24]
 8016672:	9300      	str	r3, [sp, #0]
 8016674:	683b      	ldr	r3, [r7, #0]
 8016676:	687a      	ldr	r2, [r7, #4]
 8016678:	f000 fbf2 	bl	8016e60 <virtio_create_virtqueues>
 801667c:	4603      	mov	r3, r0
					callbacks);
}
 801667e:	4618      	mov	r0, r3
 8016680:	3710      	adds	r7, #16
 8016682:	46bd      	mov	sp, r7
 8016684:	bd80      	pop	{r7, pc}

08016686 <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 8016686:	b580      	push	{r7, lr}
 8016688:	b082      	sub	sp, #8
 801668a:	af00      	add	r7, sp, #0
 801668c:	6078      	str	r0, [r7, #4]
 801668e:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 8016690:	f04f 33ff 	mov.w	r3, #4294967295
 8016694:	683a      	ldr	r2, [r7, #0]
 8016696:	2100      	movs	r1, #0
 8016698:	6878      	ldr	r0, [r7, #4]
 801669a:	f7ff fdad 	bl	80161f8 <rpmsg_get_endpoint>
 801669e:	4603      	mov	r3, r0
}
 80166a0:	4618      	mov	r0, r3
 80166a2:	3708      	adds	r7, #8
 80166a4:	46bd      	mov	sp, r7
 80166a6:	bd80      	pop	{r7, pc}

080166a8 <rpmsg_virtio_shm_pool_get_buffer>:

#ifndef VIRTIO_SLAVE_ONLY
metal_weak void *
rpmsg_virtio_shm_pool_get_buffer(struct rpmsg_virtio_shm_pool *shpool,
				 size_t size)
{
 80166a8:	b480      	push	{r7}
 80166aa:	b085      	sub	sp, #20
 80166ac:	af00      	add	r7, sp, #0
 80166ae:	6078      	str	r0, [r7, #4]
 80166b0:	6039      	str	r1, [r7, #0]
	void *buffer;

	if (shpool->avail < size)
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	685b      	ldr	r3, [r3, #4]
 80166b6:	683a      	ldr	r2, [r7, #0]
 80166b8:	429a      	cmp	r2, r3
 80166ba:	d901      	bls.n	80166c0 <rpmsg_virtio_shm_pool_get_buffer+0x18>
		return NULL;
 80166bc:	2300      	movs	r3, #0
 80166be:	e00f      	b.n	80166e0 <rpmsg_virtio_shm_pool_get_buffer+0x38>
	buffer =  (void *)((char *)shpool->base + shpool->size - shpool->avail);
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	681a      	ldr	r2, [r3, #0]
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	6899      	ldr	r1, [r3, #8]
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	685b      	ldr	r3, [r3, #4]
 80166cc:	1acb      	subs	r3, r1, r3
 80166ce:	4413      	add	r3, r2
 80166d0:	60fb      	str	r3, [r7, #12]
	shpool->avail -= size;
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	685a      	ldr	r2, [r3, #4]
 80166d6:	683b      	ldr	r3, [r7, #0]
 80166d8:	1ad2      	subs	r2, r2, r3
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	605a      	str	r2, [r3, #4]

	return buffer;
 80166de:	68fb      	ldr	r3, [r7, #12]
}
 80166e0:	4618      	mov	r0, r3
 80166e2:	3714      	adds	r7, #20
 80166e4:	46bd      	mov	sp, r7
 80166e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ea:	4770      	bx	lr

080166ec <rpmsg_virtio_init_shm_pool>:
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 80166ec:	b480      	push	{r7}
 80166ee:	b085      	sub	sp, #20
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	60f8      	str	r0, [r7, #12]
 80166f4:	60b9      	str	r1, [r7, #8]
 80166f6:	607a      	str	r2, [r7, #4]
	if (!shpool)
 80166f8:	68fb      	ldr	r3, [r7, #12]
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d01d      	beq.n	801673a <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 80166fe:	68fb      	ldr	r3, [r7, #12]
 8016700:	68ba      	ldr	r2, [r7, #8]
 8016702:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	f003 0303 	and.w	r3, r3, #3
 801670a:	2b00      	cmp	r3, #0
 801670c:	d004      	beq.n	8016718 <rpmsg_virtio_init_shm_pool+0x2c>
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	f023 0303 	bic.w	r3, r3, #3
 8016714:	3304      	adds	r3, #4
 8016716:	e000      	b.n	801671a <rpmsg_virtio_init_shm_pool+0x2e>
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	68fa      	ldr	r2, [r7, #12]
 801671c:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	f003 0303 	and.w	r3, r3, #3
 8016724:	2b00      	cmp	r3, #0
 8016726:	d004      	beq.n	8016732 <rpmsg_virtio_init_shm_pool+0x46>
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	f023 0303 	bic.w	r3, r3, #3
 801672e:	3304      	adds	r3, #4
 8016730:	e000      	b.n	8016734 <rpmsg_virtio_init_shm_pool+0x48>
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	68fa      	ldr	r2, [r7, #12]
 8016736:	6053      	str	r3, [r2, #4]
 8016738:	e000      	b.n	801673c <rpmsg_virtio_init_shm_pool+0x50>
		return;
 801673a:	bf00      	nop
}
 801673c:	3714      	adds	r7, #20
 801673e:	46bd      	mov	sp, r7
 8016740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016744:	4770      	bx	lr

08016746 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8016746:	b580      	push	{r7, lr}
 8016748:	b08a      	sub	sp, #40	; 0x28
 801674a:	af02      	add	r7, sp, #8
 801674c:	60f8      	str	r0, [r7, #12]
 801674e:	60b9      	str	r1, [r7, #8]
 8016750:	607a      	str	r2, [r7, #4]
 8016752:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8016754:	68f8      	ldr	r0, [r7, #12]
 8016756:	f7ff ff3f 	bl	80165d8 <rpmsg_virtio_get_role>
 801675a:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 801675c:	69fb      	ldr	r3, [r7, #28]
 801675e:	2b00      	cmp	r3, #0
 8016760:	d10d      	bne.n	801677e <rpmsg_virtio_return_buffer+0x38>
		struct virtqueue_buf vqbuf;

		(void)idx;
		/* Initialize buffer node */
		vqbuf.buf = buffer;
 8016762:	68bb      	ldr	r3, [r7, #8]
 8016764:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	61bb      	str	r3, [r7, #24]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
 801676a:	68fb      	ldr	r3, [r7, #12]
 801676c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 801676e:	f107 0114 	add.w	r1, r7, #20
 8016772:	68bb      	ldr	r3, [r7, #8]
 8016774:	9300      	str	r3, [sp, #0]
 8016776:	2301      	movs	r3, #1
 8016778:	2200      	movs	r2, #0
 801677a:	f000 fcc0 	bl	80170fe <virtqueue_add_buffer>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 801677e:	bf00      	nop
 8016780:	3720      	adds	r7, #32
 8016782:	46bd      	mov	sp, r7
 8016784:	bd80      	pop	{r7, pc}

08016786 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8016786:	b580      	push	{r7, lr}
 8016788:	b08a      	sub	sp, #40	; 0x28
 801678a:	af02      	add	r7, sp, #8
 801678c:	60f8      	str	r0, [r7, #12]
 801678e:	60b9      	str	r1, [r7, #8]
 8016790:	607a      	str	r2, [r7, #4]
 8016792:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8016794:	68f8      	ldr	r0, [r7, #12]
 8016796:	f7ff ff1f 	bl	80165d8 <rpmsg_virtio_get_role>
 801679a:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 801679c:	69fb      	ldr	r3, [r7, #28]
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d10f      	bne.n	80167c2 <rpmsg_virtio_enqueue_buffer+0x3c>
		struct virtqueue_buf vqbuf;
		(void)idx;

		/* Initialize buffer node */
		vqbuf.buf = buffer;
 80167a2:	68bb      	ldr	r3, [r7, #8]
 80167a4:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	61bb      	str	r3, [r7, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80167ae:	f107 0114 	add.w	r1, r7, #20
 80167b2:	68bb      	ldr	r3, [r7, #8]
 80167b4:	9300      	str	r3, [sp, #0]
 80167b6:	2301      	movs	r3, #1
 80167b8:	2200      	movs	r2, #0
 80167ba:	f000 fca0 	bl	80170fe <virtqueue_add_buffer>
 80167be:	4603      	mov	r3, r0
 80167c0:	e000      	b.n	80167c4 <rpmsg_virtio_enqueue_buffer+0x3e>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 80167c2:	2300      	movs	r3, #0
}
 80167c4:	4618      	mov	r0, r3
 80167c6:	3720      	adds	r7, #32
 80167c8:	46bd      	mov	sp, r7
 80167ca:	bd80      	pop	{r7, pc}

080167cc <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 80167cc:	b580      	push	{r7, lr}
 80167ce:	b086      	sub	sp, #24
 80167d0:	af00      	add	r7, sp, #0
 80167d2:	60f8      	str	r0, [r7, #12]
 80167d4:	60b9      	str	r1, [r7, #8]
 80167d6:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 80167d8:	68f8      	ldr	r0, [r7, #12]
 80167da:	f7ff fefd 	bl	80165d8 <rpmsg_virtio_get_role>
 80167de:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 80167e0:	2300      	movs	r3, #0
 80167e2:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 80167e4:	693b      	ldr	r3, [r7, #16]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d116      	bne.n	8016818 <rpmsg_virtio_get_tx_buffer+0x4c>
		data = virtqueue_get_buffer(rvdev->svq, (uint32_t *)len, idx);
 80167ea:	68fb      	ldr	r3, [r7, #12]
 80167ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167ee:	687a      	ldr	r2, [r7, #4]
 80167f0:	68b9      	ldr	r1, [r7, #8]
 80167f2:	4618      	mov	r0, r3
 80167f4:	f000 fcc7 	bl	8017186 <virtqueue_get_buffer>
 80167f8:	6178      	str	r0, [r7, #20]
		if (data == NULL) {
 80167fa:	697b      	ldr	r3, [r7, #20]
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d10b      	bne.n	8016818 <rpmsg_virtio_get_tx_buffer+0x4c>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016804:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016808:	4618      	mov	r0, r3
 801680a:	f7ff ff4d 	bl	80166a8 <rpmsg_virtio_shm_pool_get_buffer>
 801680e:	6178      	str	r0, [r7, #20]
							RPMSG_BUFFER_SIZE);
			*len = RPMSG_BUFFER_SIZE;
 8016810:	68bb      	ldr	r3, [r7, #8]
 8016812:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016816:	601a      	str	r2, [r3, #0]
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 8016818:	697b      	ldr	r3, [r7, #20]
}
 801681a:	4618      	mov	r0, r3
 801681c:	3718      	adds	r7, #24
 801681e:	46bd      	mov	sp, r7
 8016820:	bd80      	pop	{r7, pc}

08016822 <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8016822:	b580      	push	{r7, lr}
 8016824:	b086      	sub	sp, #24
 8016826:	af00      	add	r7, sp, #0
 8016828:	60f8      	str	r0, [r7, #12]
 801682a:	60b9      	str	r1, [r7, #8]
 801682c:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 801682e:	68f8      	ldr	r0, [r7, #12]
 8016830:	f7ff fed2 	bl	80165d8 <rpmsg_virtio_get_role>
 8016834:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8016836:	2300      	movs	r3, #0
 8016838:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 801683a:	693b      	ldr	r3, [r7, #16]
 801683c:	2b00      	cmp	r3, #0
 801683e:	d107      	bne.n	8016850 <rpmsg_virtio_get_rx_buffer+0x2e>
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016844:	687a      	ldr	r2, [r7, #4]
 8016846:	68b9      	ldr	r1, [r7, #8]
 8016848:	4618      	mov	r0, r3
 801684a:	f000 fc9c 	bl	8017186 <virtqueue_get_buffer>
 801684e:	6178      	str	r0, [r7, #20]
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 8016850:	697b      	ldr	r3, [r7, #20]
 8016852:	2b00      	cmp	r3, #0
 8016854:	d005      	beq.n	8016862 <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 8016856:	68bb      	ldr	r3, [r7, #8]
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	4619      	mov	r1, r3
 801685c:	6978      	ldr	r0, [r7, #20]
 801685e:	f7ff fdec 	bl	801643a <metal_cache_invalidate>
	}

	return data;
 8016862:	697b      	ldr	r3, [r7, #20]
}
 8016864:	4618      	mov	r0, r3
 8016866:	3718      	adds	r7, #24
 8016868:	46bd      	mov	sp, r7
 801686a:	bd80      	pop	{r7, pc}

0801686c <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 801686c:	b580      	push	{r7, lr}
 801686e:	b084      	sub	sp, #16
 8016870:	af00      	add	r7, sp, #0
 8016872:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8016874:	6878      	ldr	r0, [r7, #4]
 8016876:	f7ff feaf 	bl	80165d8 <rpmsg_virtio_get_role>
 801687a:	60b8      	str	r0, [r7, #8]
	int length = 0;
 801687c:	2300      	movs	r3, #0
 801687e:	60fb      	str	r3, [r7, #12]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8016880:	68bb      	ldr	r3, [r7, #8]
 8016882:	2b00      	cmp	r3, #0
 8016884:	d102      	bne.n	801688c <_rpmsg_virtio_get_buffer_size+0x20>
		/*
		 * If device role is Remote then buffers are provided by us
		 * (RPMSG Master), so just provide the macro.
		 */
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
 8016886:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 801688a:	60fb      	str	r3, [r7, #12]
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 801688c:	68fb      	ldr	r3, [r7, #12]
}
 801688e:	4618      	mov	r0, r3
 8016890:	3710      	adds	r7, #16
 8016892:	46bd      	mov	sp, r7
 8016894:	bd80      	pop	{r7, pc}
	...

08016898 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 8016898:	b580      	push	{r7, lr}
 801689a:	b090      	sub	sp, #64	; 0x40
 801689c:	af00      	add	r7, sp, #0
 801689e:	60f8      	str	r0, [r7, #12]
 80168a0:	60b9      	str	r1, [r7, #8]
 80168a2:	607a      	str	r2, [r7, #4]
 80168a4:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 80168a6:	2300      	movs	r3, #0
 80168a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	unsigned short idx;
	int tick_count = 0;
 80168aa:	2300      	movs	r3, #0
 80168ac:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 80168ae:	68fb      	ldr	r3, [r7, #12]
 80168b0:	637b      	str	r3, [r7, #52]	; 0x34

	status = rpmsg_virtio_get_status(rvdev);
 80168b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80168b4:	f7ff feb0 	bl	8016618 <rpmsg_virtio_get_status>
 80168b8:	4603      	mov	r3, r0
 80168ba:	633b      	str	r3, [r7, #48]	; 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 80168bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168be:	f003 0304 	and.w	r3, r3, #4
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d101      	bne.n	80168ca <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 80168c6:	4b45      	ldr	r3, [pc, #276]	; (80169dc <rpmsg_virtio_send_offchannel_raw+0x144>)
 80168c8:	e083      	b.n	80169d2 <rpmsg_virtio_send_offchannel_raw+0x13a>
	}

	if (wait)
 80168ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d003      	beq.n	80168d8 <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 80168d0:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80168d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80168d6:	e001      	b.n	80168dc <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 80168d8:	2300      	movs	r3, #0
 80168da:	63bb      	str	r3, [r7, #56]	; 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 80168dc:	68fb      	ldr	r3, [r7, #12]
 80168de:	3358      	adds	r3, #88	; 0x58
 80168e0:	4618      	mov	r0, r3
 80168e2:	f7ff fe46 	bl	8016572 <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 80168e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80168e8:	f7ff ffc0 	bl	801686c <_rpmsg_virtio_get_buffer_size>
 80168ec:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (size <= avail_size)
 80168ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80168f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168f2:	429a      	cmp	r2, r3
 80168f4:	dc08      	bgt.n	8016908 <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 80168f6:	f107 0216 	add.w	r2, r7, #22
 80168fa:	f107 0310 	add.w	r3, r7, #16
 80168fe:	4619      	mov	r1, r3
 8016900:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016902:	f7ff ff63 	bl	80167cc <rpmsg_virtio_get_tx_buffer>
 8016906:	63f8      	str	r0, [r7, #60]	; 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 8016908:	68fb      	ldr	r3, [r7, #12]
 801690a:	3358      	adds	r3, #88	; 0x58
 801690c:	4618      	mov	r0, r3
 801690e:	f7ff fe3b 	bl	8016588 <metal_mutex_release>
		if (buffer || !tick_count)
 8016912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016914:	2b00      	cmp	r3, #0
 8016916:	d10e      	bne.n	8016936 <rpmsg_virtio_send_offchannel_raw+0x9e>
 8016918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801691a:	2b00      	cmp	r3, #0
 801691c:	d00b      	beq.n	8016936 <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 801691e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016920:	2b00      	cmp	r3, #0
 8016922:	d001      	beq.n	8016928 <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 8016924:	4b2e      	ldr	r3, [pc, #184]	; (80169e0 <rpmsg_virtio_send_offchannel_raw+0x148>)
 8016926:	e054      	b.n	80169d2 <rpmsg_virtio_send_offchannel_raw+0x13a>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 8016928:	200a      	movs	r0, #10
 801692a:	f7ff fd9e 	bl	801646a <metal_sleep_usec>
		tick_count--;
 801692e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016930:	3b01      	subs	r3, #1
 8016932:	63bb      	str	r3, [r7, #56]	; 0x38
	while (1) {
 8016934:	e7d2      	b.n	80168dc <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 8016936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016938:	2b00      	cmp	r3, #0
 801693a:	d101      	bne.n	8016940 <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 801693c:	4b29      	ldr	r3, [pc, #164]	; (80169e4 <rpmsg_virtio_send_offchannel_raw+0x14c>)
 801693e:	e048      	b.n	80169d2 <rpmsg_virtio_send_offchannel_raw+0x13a>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 8016944:	68bb      	ldr	r3, [r7, #8]
 8016946:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 8016948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801694a:	b29b      	uxth	r3, r3
 801694c:	84bb      	strh	r3, [r7, #36]	; 0x24
	rp_hdr.reserved = 0;
 801694e:	2300      	movs	r3, #0
 8016950:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 8016952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016956:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 8016958:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801695a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801695c:	f7ff fda2 	bl	80164a4 <metal_io_virt_to_offset>
 8016960:	4601      	mov	r1, r0
 8016962:	f107 0218 	add.w	r2, r7, #24
 8016966:	2310      	movs	r3, #16
 8016968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801696a:	f7fe fdd8 	bl	801551e <metal_io_block_write>
 801696e:	6338      	str	r0, [r7, #48]	; 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 8016970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016972:	2b10      	cmp	r3, #16
 8016974:	d000      	beq.n	8016978 <rpmsg_virtio_send_offchannel_raw+0xe0>
 8016976:	e7fe      	b.n	8016976 <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 8016978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801697a:	3310      	adds	r3, #16
 801697c:	4619      	mov	r1, r3
 801697e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016980:	f7ff fd90 	bl	80164a4 <metal_io_virt_to_offset>
 8016984:	4601      	mov	r1, r0
 8016986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016988:	683a      	ldr	r2, [r7, #0]
 801698a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801698c:	f7fe fdc7 	bl	801551e <metal_io_block_write>
 8016990:	6338      	str	r0, [r7, #48]	; 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 8016992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016996:	429a      	cmp	r2, r3
 8016998:	d000      	beq.n	801699c <rpmsg_virtio_send_offchannel_raw+0x104>
 801699a:	e7fe      	b.n	801699a <rpmsg_virtio_send_offchannel_raw+0x102>
	metal_mutex_acquire(&rdev->lock);
 801699c:	68fb      	ldr	r3, [r7, #12]
 801699e:	3358      	adds	r3, #88	; 0x58
 80169a0:	4618      	mov	r0, r3
 80169a2:	f7ff fde6 	bl	8016572 <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 80169a6:	693a      	ldr	r2, [r7, #16]
 80169a8:	8afb      	ldrh	r3, [r7, #22]
 80169aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80169ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80169ae:	f7ff feea 	bl	8016786 <rpmsg_virtio_enqueue_buffer>
 80169b2:	6338      	str	r0, [r7, #48]	; 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 80169b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d000      	beq.n	80169bc <rpmsg_virtio_send_offchannel_raw+0x124>
 80169ba:	e7fe      	b.n	80169ba <rpmsg_virtio_send_offchannel_raw+0x122>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 80169bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169c0:	4618      	mov	r0, r3
 80169c2:	f000 fc5a 	bl	801727a <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	3358      	adds	r3, #88	; 0x58
 80169ca:	4618      	mov	r0, r3
 80169cc:	f7ff fddc 	bl	8016588 <metal_mutex_release>

	return size;
 80169d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80169d2:	4618      	mov	r0, r3
 80169d4:	3740      	adds	r7, #64	; 0x40
 80169d6:	46bd      	mov	sp, r7
 80169d8:	bd80      	pop	{r7, pc}
 80169da:	bf00      	nop
 80169dc:	fffff82c 	.word	0xfffff82c
 80169e0:	fffff82b 	.word	0xfffff82b
 80169e4:	fffff82e 	.word	0xfffff82e

080169e8 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 80169e8:	b480      	push	{r7}
 80169ea:	b083      	sub	sp, #12
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 80169f0:	bf00      	nop
 80169f2:	370c      	adds	r7, #12
 80169f4:	46bd      	mov	sp, r7
 80169f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169fa:	4770      	bx	lr

080169fc <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 80169fc:	b590      	push	{r4, r7, lr}
 80169fe:	b08d      	sub	sp, #52	; 0x34
 8016a00:	af02      	add	r7, sp, #8
 8016a02:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 8016a0a:	6a3b      	ldr	r3, [r7, #32]
 8016a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a0e:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 8016a10:	69fb      	ldr	r3, [r7, #28]
 8016a12:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 8016a14:	69bb      	ldr	r3, [r7, #24]
 8016a16:	3358      	adds	r3, #88	; 0x58
 8016a18:	4618      	mov	r0, r3
 8016a1a:	f7ff fdaa 	bl	8016572 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 8016a1e:	f107 020a 	add.w	r2, r7, #10
 8016a22:	f107 030c 	add.w	r3, r7, #12
 8016a26:	4619      	mov	r1, r3
 8016a28:	69f8      	ldr	r0, [r7, #28]
 8016a2a:	f7ff fefa 	bl	8016822 <rpmsg_virtio_get_rx_buffer>
 8016a2e:	6278      	str	r0, [r7, #36]	; 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 8016a30:	69bb      	ldr	r3, [r7, #24]
 8016a32:	3358      	adds	r3, #88	; 0x58
 8016a34:	4618      	mov	r0, r3
 8016a36:	f7ff fda7 	bl	8016588 <metal_mutex_release>

	while (rp_hdr) {
 8016a3a:	e04c      	b.n	8016ad6 <rpmsg_virtio_rx_callback+0xda>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 8016a3c:	69bb      	ldr	r3, [r7, #24]
 8016a3e:	3358      	adds	r3, #88	; 0x58
 8016a40:	4618      	mov	r0, r3
 8016a42:	f7ff fd96 	bl	8016572 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 8016a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a48:	685b      	ldr	r3, [r3, #4]
 8016a4a:	4619      	mov	r1, r3
 8016a4c:	69b8      	ldr	r0, [r7, #24]
 8016a4e:	f7ff fe1a 	bl	8016686 <rpmsg_get_ept_from_addr>
 8016a52:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 8016a54:	69bb      	ldr	r3, [r7, #24]
 8016a56:	3358      	adds	r3, #88	; 0x58
 8016a58:	4618      	mov	r0, r3
 8016a5a:	f7ff fd95 	bl	8016588 <metal_mutex_release>

		if (!ept)
 8016a5e:	697b      	ldr	r3, [r7, #20]
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d03c      	beq.n	8016ade <rpmsg_virtio_rx_callback+0xe2>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 8016a64:	697b      	ldr	r3, [r7, #20]
 8016a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a6c:	d103      	bne.n	8016a76 <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 8016a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a70:	681a      	ldr	r2, [r3, #0]
 8016a72:	697b      	ldr	r3, [r7, #20]
 8016a74:	629a      	str	r2, [r3, #40]	; 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8016a76:	697b      	ldr	r3, [r7, #20]
 8016a78:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8016a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a7c:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 8016a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a82:	899b      	ldrh	r3, [r3, #12]
 8016a84:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8016a86:	4618      	mov	r0, r3
 8016a88:	697b      	ldr	r3, [r7, #20]
 8016a8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016a8c:	697b      	ldr	r3, [r7, #20]
 8016a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016a90:	9300      	str	r3, [sp, #0]
 8016a92:	4613      	mov	r3, r2
 8016a94:	4602      	mov	r2, r0
 8016a96:	6978      	ldr	r0, [r7, #20]
 8016a98:	47a0      	blx	r4
 8016a9a:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 8016a9c:	693b      	ldr	r3, [r7, #16]
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d000      	beq.n	8016aa4 <rpmsg_virtio_rx_callback+0xa8>
 8016aa2:	e7fe      	b.n	8016aa2 <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 8016aa4:	69bb      	ldr	r3, [r7, #24]
 8016aa6:	3358      	adds	r3, #88	; 0x58
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	f7ff fd62 	bl	8016572 <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 8016aae:	68fa      	ldr	r2, [r7, #12]
 8016ab0:	897b      	ldrh	r3, [r7, #10]
 8016ab2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016ab4:	69f8      	ldr	r0, [r7, #28]
 8016ab6:	f7ff fe46 	bl	8016746 <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 8016aba:	f107 020a 	add.w	r2, r7, #10
 8016abe:	f107 030c 	add.w	r3, r7, #12
 8016ac2:	4619      	mov	r1, r3
 8016ac4:	69f8      	ldr	r0, [r7, #28]
 8016ac6:	f7ff feac 	bl	8016822 <rpmsg_virtio_get_rx_buffer>
 8016aca:	6278      	str	r0, [r7, #36]	; 0x24
		metal_mutex_release(&rdev->lock);
 8016acc:	69bb      	ldr	r3, [r7, #24]
 8016ace:	3358      	adds	r3, #88	; 0x58
 8016ad0:	4618      	mov	r0, r3
 8016ad2:	f7ff fd59 	bl	8016588 <metal_mutex_release>
	while (rp_hdr) {
 8016ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d1af      	bne.n	8016a3c <rpmsg_virtio_rx_callback+0x40>
 8016adc:	e000      	b.n	8016ae0 <rpmsg_virtio_rx_callback+0xe4>
			return;
 8016ade:	bf00      	nop
	}
}
 8016ae0:	372c      	adds	r7, #44	; 0x2c
 8016ae2:	46bd      	mov	sp, r7
 8016ae4:	bd90      	pop	{r4, r7, pc}

08016ae6 <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 8016ae6:	b580      	push	{r7, lr}
 8016ae8:	b092      	sub	sp, #72	; 0x48
 8016aea:	af00      	add	r7, sp, #0
 8016aec:	60f8      	str	r0, [r7, #12]
 8016aee:	60b9      	str	r1, [r7, #8]
 8016af0:	607a      	str	r2, [r7, #4]
 8016af2:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	6a1b      	ldr	r3, [r3, #32]
 8016af8:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 8016afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016afc:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 8016afe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016b02:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 8016b04:	68bb      	ldr	r3, [r7, #8]
 8016b06:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	2b28      	cmp	r3, #40	; 0x28
 8016b0c:	d001      	beq.n	8016b12 <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 8016b0e:	2300      	movs	r3, #0
 8016b10:	e057      	b.n	8016bc2 <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 8016b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
 8016b14:	4619      	mov	r1, r3
 8016b16:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016b18:	f7ff fcc4 	bl	80164a4 <metal_io_virt_to_offset>
 8016b1c:	4601      	mov	r1, r0
 8016b1e:	f107 0210 	add.w	r2, r7, #16
 8016b22:	2320      	movs	r3, #32
 8016b24:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016b26:	f7fe fc83 	bl	8015430 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 8016b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b2c:	6a1b      	ldr	r3, [r3, #32]
 8016b2e:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 8016b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b32:	3358      	adds	r3, #88	; 0x58
 8016b34:	4618      	mov	r0, r3
 8016b36:	f7ff fd1c 	bl	8016572 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 8016b3a:	f107 0110 	add.w	r1, r7, #16
 8016b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b40:	f04f 32ff 	mov.w	r2, #4294967295
 8016b44:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016b46:	f7ff fb57 	bl	80161f8 <rpmsg_get_endpoint>
 8016b4a:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 8016b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b50:	f003 0301 	and.w	r3, r3, #1
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d017      	beq.n	8016b88 <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 8016b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d003      	beq.n	8016b66 <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 8016b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b60:	f04f 32ff 	mov.w	r2, #4294967295
 8016b64:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
 8016b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b68:	3358      	adds	r3, #88	; 0x58
 8016b6a:	4618      	mov	r0, r3
 8016b6c:	f7ff fd0c 	bl	8016588 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 8016b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d024      	beq.n	8016bc0 <rpmsg_virtio_ns_callback+0xda>
 8016b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d020      	beq.n	8016bc0 <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 8016b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016b82:	68f8      	ldr	r0, [r7, #12]
 8016b84:	4798      	blx	r3
 8016b86:	e01b      	b.n	8016bc0 <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 8016b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d110      	bne.n	8016bb0 <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 8016b8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b90:	3358      	adds	r3, #88	; 0x58
 8016b92:	4618      	mov	r0, r3
 8016b94:	f7ff fcf8 	bl	8016588 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 8016b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d00f      	beq.n	8016bc0 <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 8016ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016ba4:	f107 0110 	add.w	r1, r7, #16
 8016ba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016baa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016bac:	4798      	blx	r3
 8016bae:	e007      	b.n	8016bc0 <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 8016bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016bb4:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
 8016bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016bb8:	3358      	adds	r3, #88	; 0x58
 8016bba:	4618      	mov	r0, r3
 8016bbc:	f7ff fce4 	bl	8016588 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 8016bc0:	2300      	movs	r3, #0
}
 8016bc2:	4618      	mov	r0, r3
 8016bc4:	3748      	adds	r7, #72	; 0x48
 8016bc6:	46bd      	mov	sp, r7
 8016bc8:	bd80      	pop	{r7, pc}
	...

08016bcc <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 8016bcc:	b580      	push	{r7, lr}
 8016bce:	b094      	sub	sp, #80	; 0x50
 8016bd0:	af02      	add	r7, sp, #8
 8016bd2:	60f8      	str	r0, [r7, #12]
 8016bd4:	60b9      	str	r1, [r7, #8]
 8016bd6:	607a      	str	r2, [r7, #4]
 8016bd8:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	63bb      	str	r3, [r7, #56]	; 0x38
	memset(rdev, 0, sizeof(*rdev));
 8016bde:	2264      	movs	r2, #100	; 0x64
 8016be0:	2100      	movs	r1, #0
 8016be2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016be4:	f005 fdd0 	bl	801c788 <memset>
	metal_mutex_init(&rdev->lock);
 8016be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bea:	3358      	adds	r3, #88	; 0x58
 8016bec:	4618      	mov	r0, r3
 8016bee:	f7ff fcb5 	bl	801655c <metal_mutex_init>
	rvdev->vdev = vdev;
 8016bf2:	68fb      	ldr	r3, [r7, #12]
 8016bf4:	68ba      	ldr	r2, [r7, #8]
 8016bf6:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 8016bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bfa:	687a      	ldr	r2, [r7, #4]
 8016bfc:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
 8016bfe:	68bb      	ldr	r3, [r7, #8]
 8016c00:	68fa      	ldr	r2, [r7, #12]
 8016c02:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 8016c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c06:	4a5d      	ldr	r2, [pc, #372]	; (8016d7c <rpmsg_init_vdev+0x1b0>)
 8016c08:	661a      	str	r2, [r3, #96]	; 0x60
	role = rpmsg_virtio_get_role(rvdev);
 8016c0a:	68f8      	ldr	r0, [r7, #12]
 8016c0c:	f7ff fce4 	bl	80165d8 <rpmsg_virtio_get_role>
 8016c10:	6378      	str	r0, [r7, #52]	; 0x34

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8016c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d120      	bne.n	8016c5a <rpmsg_init_vdev+0x8e>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
 8016c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d101      	bne.n	8016c22 <rpmsg_init_vdev+0x56>
			return RPMSG_ERR_PARAM;
 8016c1e:	4b58      	ldr	r3, [pc, #352]	; (8016d80 <rpmsg_init_vdev+0x1b4>)
 8016c20:	e0a7      	b.n	8016d72 <rpmsg_init_vdev+0x1a6>
		if (!shpool->size)
 8016c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016c24:	689b      	ldr	r3, [r3, #8]
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d101      	bne.n	8016c2e <rpmsg_init_vdev+0x62>
			return RPMSG_ERR_NO_BUFF;
 8016c2a:	4b56      	ldr	r3, [pc, #344]	; (8016d84 <rpmsg_init_vdev+0x1b8>)
 8016c2c:	e0a1      	b.n	8016d72 <rpmsg_init_vdev+0x1a6>
		rvdev->shpool = shpool;
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016c32:	675a      	str	r2, [r3, #116]	; 0x74

		vq_names[0] = "rx_vq";
 8016c34:	4b54      	ldr	r3, [pc, #336]	; (8016d88 <rpmsg_init_vdev+0x1bc>)
 8016c36:	623b      	str	r3, [r7, #32]
		vq_names[1] = "tx_vq";
 8016c38:	4b54      	ldr	r3, [pc, #336]	; (8016d8c <rpmsg_init_vdev+0x1c0>)
 8016c3a:	627b      	str	r3, [r7, #36]	; 0x24
		callback[0] = rpmsg_virtio_rx_callback;
 8016c3c:	4b54      	ldr	r3, [pc, #336]	; (8016d90 <rpmsg_init_vdev+0x1c4>)
 8016c3e:	61bb      	str	r3, [r7, #24]
		callback[1] = rpmsg_virtio_tx_callback;
 8016c40:	4b54      	ldr	r3, [pc, #336]	; (8016d94 <rpmsg_init_vdev+0x1c8>)
 8016c42:	61fb      	str	r3, [r7, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
 8016c44:	68bb      	ldr	r3, [r7, #8]
 8016c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c48:	681a      	ldr	r2, [r3, #0]
 8016c4a:	68fb      	ldr	r3, [r7, #12]
 8016c4c:	669a      	str	r2, [r3, #104]	; 0x68
		rvdev->svq  = vdev->vrings_info[1].vq;
 8016c4e:	68bb      	ldr	r3, [r7, #8]
 8016c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c52:	3318      	adds	r3, #24
 8016c54:	681a      	ldr	r2, [r3, #0]
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	66da      	str	r2, [r3, #108]	; 0x6c
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 8016c5a:	68fb      	ldr	r3, [r7, #12]
 8016c5c:	683a      	ldr	r2, [r7, #0]
 8016c5e:	671a      	str	r2, [r3, #112]	; 0x70
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 8016c60:	f107 0220 	add.w	r2, r7, #32
 8016c64:	f107 0318 	add.w	r3, r7, #24
 8016c68:	9300      	str	r3, [sp, #0]
 8016c6a:	4613      	mov	r3, r2
 8016c6c:	2202      	movs	r2, #2
 8016c6e:	2100      	movs	r1, #0
 8016c70:	68f8      	ldr	r0, [r7, #12]
 8016c72:	f7ff fcf3 	bl	801665c <rpmsg_virtio_create_virtqueues>
 8016c76:	6478      	str	r0, [r7, #68]	; 0x44
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 8016c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d001      	beq.n	8016c82 <rpmsg_init_vdev+0xb6>
		return status;
 8016c7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016c80:	e077      	b.n	8016d72 <rpmsg_init_vdev+0x1a6>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 8016c82:	2300      	movs	r3, #0
 8016c84:	643b      	str	r3, [r7, #64]	; 0x40
 8016c86:	e00f      	b.n	8016ca8 <rpmsg_init_vdev+0xdc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 8016c88:	68bb      	ldr	r3, [r7, #8]
 8016c8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8016c8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016c8e:	4613      	mov	r3, r2
 8016c90:	005b      	lsls	r3, r3, #1
 8016c92:	4413      	add	r3, r2
 8016c94:	00db      	lsls	r3, r3, #3
 8016c96:	440b      	add	r3, r1
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	62bb      	str	r3, [r7, #40]	; 0x28
		vq->shm_io = shm_io;
 8016c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c9e:	683a      	ldr	r2, [r7, #0]
 8016ca0:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 8016ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ca4:	3301      	adds	r3, #1
 8016ca6:	643b      	str	r3, [r7, #64]	; 0x40
 8016ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016caa:	2b01      	cmp	r3, #1
 8016cac:	d9ec      	bls.n	8016c88 <rpmsg_init_vdev+0xbc>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8016cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d137      	bne.n	8016d24 <rpmsg_init_vdev+0x158>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
 8016cb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016cb8:	617b      	str	r3, [r7, #20]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 8016cba:	2300      	movs	r3, #0
 8016cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016cbe:	e02a      	b.n	8016d16 <rpmsg_init_vdev+0x14a>
			/* Initialize TX virtqueue buffers for remote device */
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
 8016cc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016cc4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8016cc6:	f7ff fcef 	bl	80166a8 <rpmsg_virtio_shm_pool_get_buffer>
 8016cca:	6338      	str	r0, [r7, #48]	; 0x30
							RPMSG_BUFFER_SIZE);

			if (!buffer) {
 8016ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d101      	bne.n	8016cd6 <rpmsg_init_vdev+0x10a>
				return RPMSG_ERR_NO_BUFF;
 8016cd2:	4b2c      	ldr	r3, [pc, #176]	; (8016d84 <rpmsg_init_vdev+0x1b8>)
 8016cd4:	e04d      	b.n	8016d72 <rpmsg_init_vdev+0x1a6>
			}

			vqbuf.buf = buffer;
 8016cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cd8:	613b      	str	r3, [r7, #16]

			metal_io_block_set(shm_io,
 8016cda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016cdc:	6838      	ldr	r0, [r7, #0]
 8016cde:	f7ff fbe1 	bl	80164a4 <metal_io_virt_to_offset>
 8016ce2:	4601      	mov	r1, r0
 8016ce4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016ce8:	2200      	movs	r2, #0
 8016cea:	6838      	ldr	r0, [r7, #0]
 8016cec:	f7fe fc8d 	bl	801560a <metal_io_block_set>
					   metal_io_virt_to_offset(shm_io,
								   buffer),
					   0x00, RPMSG_BUFFER_SIZE);
			status =
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8016cf4:	f107 0110 	add.w	r1, r7, #16
 8016cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cfa:	9300      	str	r3, [sp, #0]
 8016cfc:	2301      	movs	r3, #1
 8016cfe:	2200      	movs	r2, #0
 8016d00:	f000 f9fd 	bl	80170fe <virtqueue_add_buffer>
 8016d04:	6478      	str	r0, [r7, #68]	; 0x44
						     buffer);

			if (status != RPMSG_SUCCESS) {
 8016d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d001      	beq.n	8016d10 <rpmsg_init_vdev+0x144>
				return status;
 8016d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d0e:	e030      	b.n	8016d72 <rpmsg_init_vdev+0x1a6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 8016d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d12:	3301      	adds	r3, #1
 8016d14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016d16:	68fb      	ldr	r3, [r7, #12]
 8016d18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016d1a:	895b      	ldrh	r3, [r3, #10]
 8016d1c:	461a      	mov	r2, r3
 8016d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d20:	4293      	cmp	r3, r2
 8016d22:	d3cd      	bcc.n	8016cc0 <rpmsg_init_vdev+0xf4>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 8016d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d26:	4618      	mov	r0, r3
 8016d28:	f7ff fbab 	bl	8016482 <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 8016d2c:	68f8      	ldr	r0, [r7, #12]
 8016d2e:	f7ff fc84 	bl	801663a <rpmsg_virtio_get_features>
 8016d32:	62f8      	str	r0, [r7, #44]	; 0x2c

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 8016d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d36:	f003 0301 	and.w	r3, r3, #1
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d011      	beq.n	8016d62 <rpmsg_init_vdev+0x196>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 8016d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d40:	f103 0008 	add.w	r0, r3, #8
 8016d44:	2300      	movs	r3, #0
 8016d46:	9301      	str	r3, [sp, #4]
 8016d48:	4b13      	ldr	r3, [pc, #76]	; (8016d98 <rpmsg_init_vdev+0x1cc>)
 8016d4a:	9300      	str	r3, [sp, #0]
 8016d4c:	2335      	movs	r3, #53	; 0x35
 8016d4e:	2235      	movs	r2, #53	; 0x35
 8016d50:	4912      	ldr	r1, [pc, #72]	; (8016d9c <rpmsg_init_vdev+0x1d0>)
 8016d52:	f7ff fc24 	bl	801659e <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 8016d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d58:	3308      	adds	r3, #8
 8016d5a:	4619      	mov	r1, r3
 8016d5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016d5e:	f7ff facd 	bl	80162fc <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
 8016d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d103      	bne.n	8016d70 <rpmsg_init_vdev+0x1a4>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
 8016d68:	2104      	movs	r1, #4
 8016d6a:	68f8      	ldr	r0, [r7, #12]
 8016d6c:	f7ff fc41 	bl	80165f2 <rpmsg_virtio_set_status>
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 8016d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8016d72:	4618      	mov	r0, r3
 8016d74:	3748      	adds	r7, #72	; 0x48
 8016d76:	46bd      	mov	sp, r7
 8016d78:	bd80      	pop	{r7, pc}
 8016d7a:	bf00      	nop
 8016d7c:	08016899 	.word	0x08016899
 8016d80:	fffff82d 	.word	0xfffff82d
 8016d84:	fffff82e 	.word	0xfffff82e
 8016d88:	08021880 	.word	0x08021880
 8016d8c:	08021888 	.word	0x08021888
 8016d90:	080169fd 	.word	0x080169fd
 8016d94:	080169e9 	.word	0x080169e9
 8016d98:	08016ae7 	.word	0x08016ae7
 8016d9c:	08021890 	.word	0x08021890

08016da0 <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 8016da0:	b480      	push	{r7}
 8016da2:	b083      	sub	sp, #12
 8016da4:	af00      	add	r7, sp, #0
 8016da6:	6078      	str	r0, [r7, #4]
 8016da8:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8016daa:	bf00      	nop
 8016dac:	370c      	adds	r7, #12
 8016dae:	46bd      	mov	sp, r7
 8016db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016db4:	4770      	bx	lr

08016db6 <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 8016db6:	b480      	push	{r7}
 8016db8:	b083      	sub	sp, #12
 8016dba:	af00      	add	r7, sp, #0
 8016dbc:	6078      	str	r0, [r7, #4]
 8016dbe:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8016dc0:	bf00      	nop
 8016dc2:	370c      	adds	r7, #12
 8016dc4:	46bd      	mov	sp, r7
 8016dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dca:	4770      	bx	lr

08016dcc <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 8016dcc:	b480      	push	{r7}
 8016dce:	b085      	sub	sp, #20
 8016dd0:	af00      	add	r7, sp, #0
 8016dd2:	60f8      	str	r0, [r7, #12]
 8016dd4:	60b9      	str	r1, [r7, #8]
 8016dd6:	607a      	str	r2, [r7, #4]
 8016dd8:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 8016dda:	68fb      	ldr	r3, [r7, #12]
}
 8016ddc:	4618      	mov	r0, r3
 8016dde:	3714      	adds	r7, #20
 8016de0:	46bd      	mov	sp, r7
 8016de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016de6:	4770      	bx	lr

08016de8 <vring_size>:
 */
#define vring_used_event(vr)	((vr)->avail->ring[(vr)->num])
#define vring_avail_event(vr)	((vr)->used->ring[(vr)->num].id & 0xFFFF)

static inline int vring_size(unsigned int num, unsigned long align)
{
 8016de8:	b480      	push	{r7}
 8016dea:	b085      	sub	sp, #20
 8016dec:	af00      	add	r7, sp, #0
 8016dee:	6078      	str	r0, [r7, #4]
 8016df0:	6039      	str	r1, [r7, #0]
	int size;

	size = num * sizeof(struct vring_desc);
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	011b      	lsls	r3, r3, #4
 8016df6:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	3303      	adds	r3, #3
 8016dfc:	005a      	lsls	r2, r3, #1
 8016dfe:	68fb      	ldr	r3, [r7, #12]
 8016e00:	4413      	add	r3, r2
 8016e02:	60fb      	str	r3, [r7, #12]
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
 8016e04:	68fa      	ldr	r2, [r7, #12]
 8016e06:	683b      	ldr	r3, [r7, #0]
 8016e08:	4413      	add	r3, r2
 8016e0a:	1e5a      	subs	r2, r3, #1
 8016e0c:	683b      	ldr	r3, [r7, #0]
 8016e0e:	425b      	negs	r3, r3
 8016e10:	4013      	ands	r3, r2
 8016e12:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	00da      	lsls	r2, r3, #3
	size += sizeof(struct vring_used) +
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	4413      	add	r3, r2
 8016e1c:	3306      	adds	r3, #6
 8016e1e:	60fb      	str	r3, [r7, #12]

	return size;
 8016e20:	68fb      	ldr	r3, [r7, #12]
}
 8016e22:	4618      	mov	r0, r3
 8016e24:	3714      	adds	r7, #20
 8016e26:	46bd      	mov	sp, r7
 8016e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e2c:	4770      	bx	lr

08016e2e <metal_io_virt_to_offset>:
{
 8016e2e:	b480      	push	{r7}
 8016e30:	b085      	sub	sp, #20
 8016e32:	af00      	add	r7, sp, #0
 8016e34:	6078      	str	r0, [r7, #4]
 8016e36:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	681b      	ldr	r3, [r3, #0]
 8016e3c:	683a      	ldr	r2, [r7, #0]
 8016e3e:	1ad3      	subs	r3, r2, r3
 8016e40:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	689b      	ldr	r3, [r3, #8]
 8016e46:	68fa      	ldr	r2, [r7, #12]
 8016e48:	429a      	cmp	r2, r3
 8016e4a:	d201      	bcs.n	8016e50 <metal_io_virt_to_offset+0x22>
 8016e4c:	68fb      	ldr	r3, [r7, #12]
 8016e4e:	e001      	b.n	8016e54 <metal_io_virt_to_offset+0x26>
 8016e50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016e54:	4618      	mov	r0, r3
 8016e56:	3714      	adds	r7, #20
 8016e58:	46bd      	mov	sp, r7
 8016e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e5e:	4770      	bx	lr

08016e60 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 8016e60:	b590      	push	{r4, r7, lr}
 8016e62:	b091      	sub	sp, #68	; 0x44
 8016e64:	af04      	add	r7, sp, #16
 8016e66:	60f8      	str	r0, [r7, #12]
 8016e68:	60b9      	str	r1, [r7, #8]
 8016e6a:	607a      	str	r2, [r7, #4]
 8016e6c:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016e72:	62bb      	str	r3, [r7, #40]	; 0x28
	if (nvqs > num_vrings)
 8016e74:	687a      	ldr	r2, [r7, #4]
 8016e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e78:	429a      	cmp	r2, r3
 8016e7a:	d902      	bls.n	8016e82 <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 8016e7c:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 8016e80:	e053      	b.n	8016f2a <virtio_create_virtqueues+0xca>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 8016e82:	2300      	movs	r3, #0
 8016e84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016e86:	e04b      	b.n	8016f20 <virtio_create_virtqueues+0xc0>
		vring_info = &vdev->vrings_info[i];
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8016e8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016e8e:	4613      	mov	r3, r2
 8016e90:	005b      	lsls	r3, r3, #1
 8016e92:	4413      	add	r3, r2
 8016e94:	00db      	lsls	r3, r3, #3
 8016e96:	440b      	add	r3, r1
 8016e98:	627b      	str	r3, [r7, #36]	; 0x24

		vring_alloc = &vring_info->info;
 8016e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e9c:	3304      	adds	r3, #4
 8016e9e:	623b      	str	r3, [r7, #32]
#ifndef VIRTIO_SLAVE_ONLY
		if (vdev->role == VIRTIO_DEV_MASTER) {
 8016ea0:	68fb      	ldr	r3, [r7, #12]
 8016ea2:	699b      	ldr	r3, [r3, #24]
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d118      	bne.n	8016eda <virtio_create_virtqueues+0x7a>
			size_t offset;
			struct metal_io_region *io = vring_info->io;
 8016ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eaa:	695b      	ldr	r3, [r3, #20]
 8016eac:	61fb      	str	r3, [r7, #28]

			offset = metal_io_virt_to_offset(io,
 8016eae:	6a3b      	ldr	r3, [r7, #32]
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	4619      	mov	r1, r3
 8016eb4:	69f8      	ldr	r0, [r7, #28]
 8016eb6:	f7ff ffba 	bl	8016e2e <metal_io_virt_to_offset>
 8016eba:	61b8      	str	r0, [r7, #24]
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
 8016ebc:	6a3b      	ldr	r3, [r7, #32]
 8016ebe:	891b      	ldrh	r3, [r3, #8]
			metal_io_block_set(io, offset, 0,
 8016ec0:	461a      	mov	r2, r3
 8016ec2:	6a3b      	ldr	r3, [r7, #32]
 8016ec4:	685b      	ldr	r3, [r3, #4]
 8016ec6:	4619      	mov	r1, r3
 8016ec8:	4610      	mov	r0, r2
 8016eca:	f7ff ff8d 	bl	8016de8 <vring_size>
 8016ece:	4603      	mov	r3, r0
 8016ed0:	2200      	movs	r2, #0
 8016ed2:	69b9      	ldr	r1, [r7, #24]
 8016ed4:	69f8      	ldr	r0, [r7, #28]
 8016ed6:	f7fe fb98 	bl	801560a <metal_io_block_set>
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8016eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016edc:	b298      	uxth	r0, r3
 8016ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ee0:	009b      	lsls	r3, r3, #2
 8016ee2:	683a      	ldr	r2, [r7, #0]
 8016ee4:	4413      	add	r3, r2
 8016ee6:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8016ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eea:	009b      	lsls	r3, r3, #2
 8016eec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016eee:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8016ef0:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8016ef2:	68fa      	ldr	r2, [r7, #12]
 8016ef4:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8016ef6:	6a12      	ldr	r2, [r2, #32]
 8016ef8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016efa:	6809      	ldr	r1, [r1, #0]
 8016efc:	9102      	str	r1, [sp, #8]
 8016efe:	9201      	str	r2, [sp, #4]
 8016f00:	9300      	str	r3, [sp, #0]
 8016f02:	6a3b      	ldr	r3, [r7, #32]
 8016f04:	4622      	mov	r2, r4
 8016f06:	4601      	mov	r1, r0
 8016f08:	68f8      	ldr	r0, [r7, #12]
 8016f0a:	f000 f8c4 	bl	8017096 <virtqueue_create>
 8016f0e:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 8016f10:	697b      	ldr	r3, [r7, #20]
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d001      	beq.n	8016f1a <virtio_create_virtqueues+0xba>
			return ret;
 8016f16:	697b      	ldr	r3, [r7, #20]
 8016f18:	e007      	b.n	8016f2a <virtio_create_virtqueues+0xca>
	for (i = 0; i < nvqs; i++) {
 8016f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f1c:	3301      	adds	r3, #1
 8016f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	429a      	cmp	r2, r3
 8016f26:	d3af      	bcc.n	8016e88 <virtio_create_virtqueues+0x28>
	}
	return 0;
 8016f28:	2300      	movs	r3, #0
}
 8016f2a:	4618      	mov	r0, r3
 8016f2c:	3734      	adds	r7, #52	; 0x34
 8016f2e:	46bd      	mov	sp, r7
 8016f30:	bd90      	pop	{r4, r7, pc}

08016f32 <vring_init>:

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 8016f32:	b480      	push	{r7}
 8016f34:	b085      	sub	sp, #20
 8016f36:	af00      	add	r7, sp, #0
 8016f38:	60f8      	str	r0, [r7, #12]
 8016f3a:	60b9      	str	r1, [r7, #8]
 8016f3c:	607a      	str	r2, [r7, #4]
 8016f3e:	603b      	str	r3, [r7, #0]
	vr->num = num;
 8016f40:	68fb      	ldr	r3, [r7, #12]
 8016f42:	68ba      	ldr	r2, [r7, #8]
 8016f44:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 8016f46:	68fb      	ldr	r3, [r7, #12]
 8016f48:	687a      	ldr	r2, [r7, #4]
 8016f4a:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 8016f4c:	68bb      	ldr	r3, [r7, #8]
 8016f4e:	011b      	lsls	r3, r3, #4
 8016f50:	687a      	ldr	r2, [r7, #4]
 8016f52:	441a      	add	r2, r3
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	689a      	ldr	r2, [r3, #8]
 8016f5c:	68bb      	ldr	r3, [r7, #8]
 8016f5e:	005b      	lsls	r3, r3, #1
 8016f60:	4413      	add	r3, r2
 8016f62:	3304      	adds	r3, #4
 8016f64:	461a      	mov	r2, r3
 8016f66:	683b      	ldr	r3, [r7, #0]
 8016f68:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 8016f6a:	1c5a      	adds	r2, r3, #1
 8016f6c:	683b      	ldr	r3, [r7, #0]
 8016f6e:	425b      	negs	r3, r3
 8016f70:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 8016f72:	461a      	mov	r2, r3
 8016f74:	68fb      	ldr	r3, [r7, #12]
 8016f76:	60da      	str	r2, [r3, #12]
}
 8016f78:	bf00      	nop
 8016f7a:	3714      	adds	r7, #20
 8016f7c:	46bd      	mov	sp, r7
 8016f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f82:	4770      	bx	lr

08016f84 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 8016f84:	b480      	push	{r7}
 8016f86:	b083      	sub	sp, #12
 8016f88:	af00      	add	r7, sp, #0
 8016f8a:	4603      	mov	r3, r0
 8016f8c:	80fb      	strh	r3, [r7, #6]
 8016f8e:	460b      	mov	r3, r1
 8016f90:	80bb      	strh	r3, [r7, #4]
 8016f92:	4613      	mov	r3, r2
 8016f94:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 8016f96:	88ba      	ldrh	r2, [r7, #4]
 8016f98:	88fb      	ldrh	r3, [r7, #6]
 8016f9a:	1ad3      	subs	r3, r2, r3
 8016f9c:	b29b      	uxth	r3, r3
 8016f9e:	3b01      	subs	r3, #1
 8016fa0:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 8016fa2:	88b9      	ldrh	r1, [r7, #4]
 8016fa4:	887b      	ldrh	r3, [r7, #2]
 8016fa6:	1acb      	subs	r3, r1, r3
 8016fa8:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 8016faa:	429a      	cmp	r2, r3
 8016fac:	bf34      	ite	cc
 8016fae:	2301      	movcc	r3, #1
 8016fb0:	2300      	movcs	r3, #0
 8016fb2:	b2db      	uxtb	r3, r3
}
 8016fb4:	4618      	mov	r0, r3
 8016fb6:	370c      	adds	r7, #12
 8016fb8:	46bd      	mov	sp, r7
 8016fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fbe:	4770      	bx	lr

08016fc0 <metal_io_virt_to_offset>:
{
 8016fc0:	b480      	push	{r7}
 8016fc2:	b085      	sub	sp, #20
 8016fc4:	af00      	add	r7, sp, #0
 8016fc6:	6078      	str	r0, [r7, #4]
 8016fc8:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	683a      	ldr	r2, [r7, #0]
 8016fd0:	1ad3      	subs	r3, r2, r3
 8016fd2:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	689b      	ldr	r3, [r3, #8]
 8016fd8:	68fa      	ldr	r2, [r7, #12]
 8016fda:	429a      	cmp	r2, r3
 8016fdc:	d201      	bcs.n	8016fe2 <metal_io_virt_to_offset+0x22>
 8016fde:	68fb      	ldr	r3, [r7, #12]
 8016fe0:	e001      	b.n	8016fe6 <metal_io_virt_to_offset+0x26>
 8016fe2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016fe6:	4618      	mov	r0, r3
 8016fe8:	3714      	adds	r7, #20
 8016fea:	46bd      	mov	sp, r7
 8016fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ff0:	4770      	bx	lr

08016ff2 <metal_io_phys>:
{
 8016ff2:	b480      	push	{r7}
 8016ff4:	b085      	sub	sp, #20
 8016ff6:	af00      	add	r7, sp, #0
 8016ff8:	6078      	str	r0, [r7, #4]
 8016ffa:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 8017000:	2b1f      	cmp	r3, #31
 8017002:	d805      	bhi.n	8017010 <metal_io_phys+0x1e>
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	68db      	ldr	r3, [r3, #12]
 8017008:	683a      	ldr	r2, [r7, #0]
 801700a:	fa22 f303 	lsr.w	r3, r2, r3
 801700e:	e000      	b.n	8017012 <metal_io_phys+0x20>
 8017010:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 8017012:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 8017018:	2b00      	cmp	r3, #0
 801701a:	d010      	beq.n	801703e <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	689b      	ldr	r3, [r3, #8]
 8017020:	683a      	ldr	r2, [r7, #0]
 8017022:	429a      	cmp	r2, r3
 8017024:	d80b      	bhi.n	801703e <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	685a      	ldr	r2, [r3, #4]
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	009b      	lsls	r3, r3, #2
 801702e:	4413      	add	r3, r2
 8017030:	681a      	ldr	r2, [r3, #0]
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	6919      	ldr	r1, [r3, #16]
 8017036:	683b      	ldr	r3, [r7, #0]
 8017038:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 801703a:	4413      	add	r3, r2
 801703c:	e001      	b.n	8017042 <metal_io_phys+0x50>
 801703e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017042:	4618      	mov	r0, r3
 8017044:	3714      	adds	r7, #20
 8017046:	46bd      	mov	sp, r7
 8017048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801704c:	4770      	bx	lr

0801704e <metal_io_virt_to_phys>:
{
 801704e:	b580      	push	{r7, lr}
 8017050:	b082      	sub	sp, #8
 8017052:	af00      	add	r7, sp, #0
 8017054:	6078      	str	r0, [r7, #4]
 8017056:	6039      	str	r1, [r7, #0]
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
 8017058:	6839      	ldr	r1, [r7, #0]
 801705a:	6878      	ldr	r0, [r7, #4]
 801705c:	f7ff ffb0 	bl	8016fc0 <metal_io_virt_to_offset>
 8017060:	4603      	mov	r3, r0
 8017062:	4619      	mov	r1, r3
 8017064:	6878      	ldr	r0, [r7, #4]
 8017066:	f7ff ffc4 	bl	8016ff2 <metal_io_phys>
 801706a:	4603      	mov	r3, r0
}
 801706c:	4618      	mov	r0, r3
 801706e:	3708      	adds	r7, #8
 8017070:	46bd      	mov	sp, r7
 8017072:	bd80      	pop	{r7, pc}

08017074 <virtqueue_virt_to_phys>:
}

/* Default implementation of V2P based on libmetal */
static inline metal_phys_addr_t virtqueue_virt_to_phys(struct virtqueue *vq,
						       void *buf)
{
 8017074:	b580      	push	{r7, lr}
 8017076:	b084      	sub	sp, #16
 8017078:	af00      	add	r7, sp, #0
 801707a:	6078      	str	r0, [r7, #4]
 801707c:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017082:	60fb      	str	r3, [r7, #12]

	return metal_io_virt_to_phys(io, buf);
 8017084:	6839      	ldr	r1, [r7, #0]
 8017086:	68f8      	ldr	r0, [r7, #12]
 8017088:	f7ff ffe1 	bl	801704e <metal_io_virt_to_phys>
 801708c:	4603      	mov	r3, r0
}
 801708e:	4618      	mov	r0, r3
 8017090:	3710      	adds	r7, #16
 8017092:	46bd      	mov	sp, r7
 8017094:	bd80      	pop	{r7, pc}

08017096 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 8017096:	b580      	push	{r7, lr}
 8017098:	b086      	sub	sp, #24
 801709a:	af00      	add	r7, sp, #0
 801709c:	60f8      	str	r0, [r7, #12]
 801709e:	607a      	str	r2, [r7, #4]
 80170a0:	603b      	str	r3, [r7, #0]
 80170a2:	460b      	mov	r3, r1
 80170a4:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 80170a6:	2300      	movs	r3, #0
 80170a8:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 80170aa:	697b      	ldr	r3, [r7, #20]
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d121      	bne.n	80170f4 <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 80170b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170b2:	68fa      	ldr	r2, [r7, #12]
 80170b4:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 80170b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170b8:	687a      	ldr	r2, [r7, #4]
 80170ba:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 80170bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170be:	897a      	ldrh	r2, [r7, #10]
 80170c0:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 80170c2:	683b      	ldr	r3, [r7, #0]
 80170c4:	891a      	ldrh	r2, [r3, #8]
 80170c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170c8:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 80170ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170cc:	895a      	ldrh	r2, [r3, #10]
 80170ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170d0:	851a      	strh	r2, [r3, #40]	; 0x28
		vq->callback = callback;
 80170d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170d4:	6a3a      	ldr	r2, [r7, #32]
 80170d6:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 80170d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80170dc:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 80170de:	683b      	ldr	r3, [r7, #0]
 80170e0:	6819      	ldr	r1, [r3, #0]
 80170e2:	683b      	ldr	r3, [r7, #0]
 80170e4:	685b      	ldr	r3, [r3, #4]
 80170e6:	461a      	mov	r2, r3
 80170e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80170ea:	f000 f97a 	bl	80173e2 <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 80170ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80170f0:	f000 f899 	bl	8017226 <virtqueue_disable_cb>
	}

	return (status);
 80170f4:	697b      	ldr	r3, [r7, #20]
}
 80170f6:	4618      	mov	r0, r3
 80170f8:	3718      	adds	r7, #24
 80170fa:	46bd      	mov	sp, r7
 80170fc:	bd80      	pop	{r7, pc}

080170fe <virtqueue_add_buffer>:
 *
 * @return                  - Function status
 */
int virtqueue_add_buffer(struct virtqueue *vq, struct virtqueue_buf *buf_list,
			 int readable, int writable, void *cookie)
{
 80170fe:	b580      	push	{r7, lr}
 8017100:	b08a      	sub	sp, #40	; 0x28
 8017102:	af02      	add	r7, sp, #8
 8017104:	60f8      	str	r0, [r7, #12]
 8017106:	60b9      	str	r1, [r7, #8]
 8017108:	607a      	str	r2, [r7, #4]
 801710a:	603b      	str	r3, [r7, #0]
	struct vq_desc_extra *dxp = NULL;
 801710c:	2300      	movs	r3, #0
 801710e:	61fb      	str	r3, [r7, #28]
	int status = VQUEUE_SUCCESS;
 8017110:	2300      	movs	r3, #0
 8017112:	61bb      	str	r3, [r7, #24]
	uint16_t head_idx;
	uint16_t idx;
	int needed;

	needed = readable + writable;
 8017114:	687a      	ldr	r2, [r7, #4]
 8017116:	683b      	ldr	r3, [r7, #0]
 8017118:	4413      	add	r3, r2
 801711a:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(needed < 1, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(vq->vq_free_cnt == 0, status, ERROR_VRING_FULL);

	VQUEUE_BUSY(vq);

	if (status == VQUEUE_SUCCESS) {
 801711c:	69bb      	ldr	r3, [r7, #24]
 801711e:	2b00      	cmp	r3, #0
 8017120:	d12c      	bne.n	801717c <virtqueue_add_buffer+0x7e>
		VQASSERT(vq, cookie != NULL, "enqueuing with no cookie");

		head_idx = vq->vq_desc_head_idx;
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8017126:	827b      	strh	r3, [r7, #18]
		VQ_RING_ASSERT_VALID_IDX(vq, head_idx);
		dxp = &vq->vq_descx[head_idx];
 8017128:	8a7b      	ldrh	r3, [r7, #18]
 801712a:	3307      	adds	r3, #7
 801712c:	00db      	lsls	r3, r3, #3
 801712e:	68fa      	ldr	r2, [r7, #12]
 8017130:	4413      	add	r3, r2
 8017132:	61fb      	str	r3, [r7, #28]

		VQASSERT(vq, dxp->cookie == NULL,
			 "cookie already exists for index");

		dxp->cookie = cookie;
 8017134:	69fb      	ldr	r3, [r7, #28]
 8017136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017138:	601a      	str	r2, [r3, #0]
		dxp->ndescs = needed;
 801713a:	697b      	ldr	r3, [r7, #20]
 801713c:	b29a      	uxth	r2, r3
 801713e:	69fb      	ldr	r3, [r7, #28]
 8017140:	809a      	strh	r2, [r3, #4]

		/* Enqueue buffer onto the ring. */
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
 8017142:	68fb      	ldr	r3, [r7, #12]
 8017144:	69d9      	ldr	r1, [r3, #28]
 8017146:	8a7a      	ldrh	r2, [r7, #18]
 8017148:	683b      	ldr	r3, [r7, #0]
 801714a:	9301      	str	r3, [sp, #4]
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	9300      	str	r3, [sp, #0]
 8017150:	68bb      	ldr	r3, [r7, #8]
 8017152:	68f8      	ldr	r0, [r7, #12]
 8017154:	f000 f8a7 	bl	80172a6 <vq_ring_add_buffer>
 8017158:	4603      	mov	r3, r0
 801715a:	823b      	strh	r3, [r7, #16]
					 buf_list, readable, writable);

		vq->vq_desc_head_idx = idx;
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	8a3a      	ldrh	r2, [r7, #16]
 8017160:	861a      	strh	r2, [r3, #48]	; 0x30
		vq->vq_free_cnt -= needed;
 8017162:	68fb      	ldr	r3, [r7, #12]
 8017164:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017166:	697b      	ldr	r3, [r7, #20]
 8017168:	b29b      	uxth	r3, r3
 801716a:	1ad3      	subs	r3, r2, r3
 801716c:	b29a      	uxth	r2, r3
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	851a      	strh	r2, [r3, #40]	; 0x28

		/*
		 * Update vring_avail control block fields so that other
		 * side can get buffer using it.
		 */
		vq_ring_update_avail(vq, head_idx);
 8017172:	8a7b      	ldrh	r3, [r7, #18]
 8017174:	4619      	mov	r1, r3
 8017176:	68f8      	ldr	r0, [r7, #12]
 8017178:	f000 f966 	bl	8017448 <vq_ring_update_avail>
	}

	VQUEUE_IDLE(vq);

	return status;
 801717c:	69bb      	ldr	r3, [r7, #24]
}
 801717e:	4618      	mov	r0, r3
 8017180:	3720      	adds	r7, #32
 8017182:	46bd      	mov	sp, r7
 8017184:	bd80      	pop	{r7, pc}

08017186 <virtqueue_get_buffer>:
 * @param idx           - index of the buffer
 *
 * @return              - Pointer to used buffer
 */
void *virtqueue_get_buffer(struct virtqueue *vq, uint32_t *len, uint16_t *idx)
{
 8017186:	b580      	push	{r7, lr}
 8017188:	b088      	sub	sp, #32
 801718a:	af00      	add	r7, sp, #0
 801718c:	60f8      	str	r0, [r7, #12]
 801718e:	60b9      	str	r1, [r7, #8]
 8017190:	607a      	str	r2, [r7, #4]
	struct vring_used_elem *uep;
	void *cookie;
	uint16_t used_idx, desc_idx;

	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	2b00      	cmp	r3, #0
 8017196:	d006      	beq.n	80171a6 <virtqueue_get_buffer+0x20>
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80171a0:	885b      	ldrh	r3, [r3, #2]
 80171a2:	429a      	cmp	r2, r3
 80171a4:	d101      	bne.n	80171aa <virtqueue_get_buffer+0x24>
		return (NULL);
 80171a6:	2300      	movs	r3, #0
 80171a8:	e039      	b.n	801721e <virtqueue_get_buffer+0x98>

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80171ae:	1c5a      	adds	r2, r3, #1
 80171b0:	b291      	uxth	r1, r2
 80171b2:	68fa      	ldr	r2, [r7, #12]
 80171b4:	8651      	strh	r1, [r2, #50]	; 0x32
 80171b6:	b21a      	sxth	r2, r3
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	895b      	ldrh	r3, [r3, #10]
 80171bc:	3b01      	subs	r3, #1
 80171be:	b29b      	uxth	r3, r3
 80171c0:	b21b      	sxth	r3, r3
 80171c2:	4013      	ands	r3, r2
 80171c4:	b21b      	sxth	r3, r3
 80171c6:	83fb      	strh	r3, [r7, #30]
	uep = &vq->vq_ring.used->ring[used_idx];
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80171cc:	8bfb      	ldrh	r3, [r7, #30]
 80171ce:	00db      	lsls	r3, r3, #3
 80171d0:	4413      	add	r3, r2
 80171d2:	3304      	adds	r3, #4
 80171d4:	61bb      	str	r3, [r7, #24]

	atomic_thread_fence(memory_order_seq_cst);
 80171d6:	f3bf 8f5b 	dmb	ish

	desc_idx = (uint16_t)uep->id;
 80171da:	69bb      	ldr	r3, [r7, #24]
 80171dc:	681b      	ldr	r3, [r3, #0]
 80171de:	82fb      	strh	r3, [r7, #22]
	if (len)
 80171e0:	68bb      	ldr	r3, [r7, #8]
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d003      	beq.n	80171ee <virtqueue_get_buffer+0x68>
		*len = uep->len;
 80171e6:	69bb      	ldr	r3, [r7, #24]
 80171e8:	685a      	ldr	r2, [r3, #4]
 80171ea:	68bb      	ldr	r3, [r7, #8]
 80171ec:	601a      	str	r2, [r3, #0]

	vq_ring_free_chain(vq, desc_idx);
 80171ee:	8afb      	ldrh	r3, [r7, #22]
 80171f0:	4619      	mov	r1, r3
 80171f2:	68f8      	ldr	r0, [r7, #12]
 80171f4:	f000 f8ae 	bl	8017354 <vq_ring_free_chain>

	cookie = vq->vq_descx[desc_idx].cookie;
 80171f8:	8afa      	ldrh	r2, [r7, #22]
 80171fa:	68fb      	ldr	r3, [r7, #12]
 80171fc:	3207      	adds	r2, #7
 80171fe:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8017202:	613b      	str	r3, [r7, #16]
	vq->vq_descx[desc_idx].cookie = NULL;
 8017204:	8afa      	ldrh	r2, [r7, #22]
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	3207      	adds	r2, #7
 801720a:	2100      	movs	r1, #0
 801720c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

	if (idx)
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	2b00      	cmp	r3, #0
 8017214:	d002      	beq.n	801721c <virtqueue_get_buffer+0x96>
		*idx = used_idx;
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	8bfa      	ldrh	r2, [r7, #30]
 801721a:	801a      	strh	r2, [r3, #0]
	VQUEUE_IDLE(vq);

	return cookie;
 801721c:	693b      	ldr	r3, [r7, #16]
}
 801721e:	4618      	mov	r0, r3
 8017220:	3720      	adds	r7, #32
 8017222:	46bd      	mov	sp, r7
 8017224:	bd80      	pop	{r7, pc}

08017226 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 8017226:	b480      	push	{r7}
 8017228:	b083      	sub	sp, #12
 801722a:	af00      	add	r7, sp, #0
 801722c:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	68db      	ldr	r3, [r3, #12]
 8017232:	f003 0302 	and.w	r3, r3, #2
 8017236:	2b00      	cmp	r3, #0
 8017238:	d010      	beq.n	801725c <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	895b      	ldrh	r3, [r3, #10]
 8017242:	1ad3      	subs	r3, r2, r3
 8017244:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	6a1a      	ldr	r2, [r3, #32]
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 801724e:	3901      	subs	r1, #1
 8017250:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 8017252:	005b      	lsls	r3, r3, #1
 8017254:	4413      	add	r3, r2
 8017256:	460a      	mov	r2, r1
 8017258:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 801725a:	e008      	b.n	801726e <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	6a1b      	ldr	r3, [r3, #32]
 8017260:	881a      	ldrh	r2, [r3, #0]
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	6a1b      	ldr	r3, [r3, #32]
 8017266:	f042 0201 	orr.w	r2, r2, #1
 801726a:	b292      	uxth	r2, r2
 801726c:	801a      	strh	r2, [r3, #0]
}
 801726e:	bf00      	nop
 8017270:	370c      	adds	r7, #12
 8017272:	46bd      	mov	sp, r7
 8017274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017278:	4770      	bx	lr

0801727a <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 801727a:	b580      	push	{r7, lr}
 801727c:	b082      	sub	sp, #8
 801727e:	af00      	add	r7, sp, #0
 8017280:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 8017282:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 8017286:	6878      	ldr	r0, [r7, #4]
 8017288:	f000 f91d 	bl	80174c6 <vq_ring_must_notify_host>
 801728c:	4603      	mov	r3, r0
 801728e:	2b00      	cmp	r3, #0
 8017290:	d002      	beq.n	8017298 <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 8017292:	6878      	ldr	r0, [r7, #4]
 8017294:	f000 f94d 	bl	8017532 <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	2200      	movs	r2, #0
 801729c:	855a      	strh	r2, [r3, #42]	; 0x2a

	VQUEUE_IDLE(vq);
}
 801729e:	bf00      	nop
 80172a0:	3708      	adds	r7, #8
 80172a2:	46bd      	mov	sp, r7
 80172a4:	bd80      	pop	{r7, pc}

080172a6 <vq_ring_add_buffer>:
 */
static uint16_t vq_ring_add_buffer(struct virtqueue *vq,
				   struct vring_desc *desc, uint16_t head_idx,
				   struct virtqueue_buf *buf_list, int readable,
				   int writable)
{
 80172a6:	b580      	push	{r7, lr}
 80172a8:	b088      	sub	sp, #32
 80172aa:	af00      	add	r7, sp, #0
 80172ac:	60f8      	str	r0, [r7, #12]
 80172ae:	60b9      	str	r1, [r7, #8]
 80172b0:	603b      	str	r3, [r7, #0]
 80172b2:	4613      	mov	r3, r2
 80172b4:	80fb      	strh	r3, [r7, #6]
	int i, needed;
	uint16_t idx;

	(void)vq;

	needed = readable + writable;
 80172b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80172b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172ba:	4413      	add	r3, r2
 80172bc:	617b      	str	r3, [r7, #20]

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 80172be:	2300      	movs	r3, #0
 80172c0:	61fb      	str	r3, [r7, #28]
 80172c2:	88fb      	ldrh	r3, [r7, #6]
 80172c4:	837b      	strh	r3, [r7, #26]
 80172c6:	e03c      	b.n	8017342 <vq_ring_add_buffer+0x9c>
		VQASSERT(vq, idx != VQ_RING_DESC_CHAIN_END,
			 "premature end of free desc chain");

		dp = &desc[idx];
 80172c8:	8b7b      	ldrh	r3, [r7, #26]
 80172ca:	011b      	lsls	r3, r3, #4
 80172cc:	68ba      	ldr	r2, [r7, #8]
 80172ce:	4413      	add	r3, r2
 80172d0:	613b      	str	r3, [r7, #16]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
 80172d2:	69fb      	ldr	r3, [r7, #28]
 80172d4:	00db      	lsls	r3, r3, #3
 80172d6:	683a      	ldr	r2, [r7, #0]
 80172d8:	4413      	add	r3, r2
 80172da:	681b      	ldr	r3, [r3, #0]
 80172dc:	4619      	mov	r1, r3
 80172de:	68f8      	ldr	r0, [r7, #12]
 80172e0:	f7ff fec8 	bl	8017074 <virtqueue_virt_to_phys>
 80172e4:	4603      	mov	r3, r0
 80172e6:	461a      	mov	r2, r3
 80172e8:	f04f 0300 	mov.w	r3, #0
 80172ec:	6939      	ldr	r1, [r7, #16]
 80172ee:	e9c1 2300 	strd	r2, r3, [r1]
		dp->len = buf_list[i].len;
 80172f2:	69fb      	ldr	r3, [r7, #28]
 80172f4:	00db      	lsls	r3, r3, #3
 80172f6:	683a      	ldr	r2, [r7, #0]
 80172f8:	4413      	add	r3, r2
 80172fa:	685b      	ldr	r3, [r3, #4]
 80172fc:	461a      	mov	r2, r3
 80172fe:	693b      	ldr	r3, [r7, #16]
 8017300:	609a      	str	r2, [r3, #8]
		dp->flags = 0;
 8017302:	693b      	ldr	r3, [r7, #16]
 8017304:	2200      	movs	r2, #0
 8017306:	819a      	strh	r2, [r3, #12]

		if (i < needed - 1)
 8017308:	697b      	ldr	r3, [r7, #20]
 801730a:	3b01      	subs	r3, #1
 801730c:	69fa      	ldr	r2, [r7, #28]
 801730e:	429a      	cmp	r2, r3
 8017310:	da06      	bge.n	8017320 <vq_ring_add_buffer+0x7a>
			dp->flags |= VRING_DESC_F_NEXT;
 8017312:	693b      	ldr	r3, [r7, #16]
 8017314:	899b      	ldrh	r3, [r3, #12]
 8017316:	f043 0301 	orr.w	r3, r3, #1
 801731a:	b29a      	uxth	r2, r3
 801731c:	693b      	ldr	r3, [r7, #16]
 801731e:	819a      	strh	r2, [r3, #12]

		/*
		 * Readable buffers are inserted  into vring before the
		 * writable buffers.
		 */
		if (i >= readable)
 8017320:	69fa      	ldr	r2, [r7, #28]
 8017322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017324:	429a      	cmp	r2, r3
 8017326:	db06      	blt.n	8017336 <vq_ring_add_buffer+0x90>
			dp->flags |= VRING_DESC_F_WRITE;
 8017328:	693b      	ldr	r3, [r7, #16]
 801732a:	899b      	ldrh	r3, [r3, #12]
 801732c:	f043 0302 	orr.w	r3, r3, #2
 8017330:	b29a      	uxth	r2, r3
 8017332:	693b      	ldr	r3, [r7, #16]
 8017334:	819a      	strh	r2, [r3, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 8017336:	69fb      	ldr	r3, [r7, #28]
 8017338:	3301      	adds	r3, #1
 801733a:	61fb      	str	r3, [r7, #28]
 801733c:	693b      	ldr	r3, [r7, #16]
 801733e:	89db      	ldrh	r3, [r3, #14]
 8017340:	837b      	strh	r3, [r7, #26]
 8017342:	69fa      	ldr	r2, [r7, #28]
 8017344:	697b      	ldr	r3, [r7, #20]
 8017346:	429a      	cmp	r2, r3
 8017348:	dbbe      	blt.n	80172c8 <vq_ring_add_buffer+0x22>
	}

	return (idx);
 801734a:	8b7b      	ldrh	r3, [r7, #26]
}
 801734c:	4618      	mov	r0, r3
 801734e:	3720      	adds	r7, #32
 8017350:	46bd      	mov	sp, r7
 8017352:	bd80      	pop	{r7, pc}

08017354 <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
 8017354:	b480      	push	{r7}
 8017356:	b085      	sub	sp, #20
 8017358:	af00      	add	r7, sp, #0
 801735a:	6078      	str	r0, [r7, #4]
 801735c:	460b      	mov	r3, r1
 801735e:	807b      	strh	r3, [r7, #2]
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	69da      	ldr	r2, [r3, #28]
 8017364:	887b      	ldrh	r3, [r7, #2]
 8017366:	011b      	lsls	r3, r3, #4
 8017368:	4413      	add	r3, r2
 801736a:	60fb      	str	r3, [r7, #12]
	dxp = &vq->vq_descx[desc_idx];
 801736c:	887b      	ldrh	r3, [r7, #2]
 801736e:	3307      	adds	r3, #7
 8017370:	00db      	lsls	r3, r3, #3
 8017372:	687a      	ldr	r2, [r7, #4]
 8017374:	4413      	add	r3, r2
 8017376:	60bb      	str	r3, [r7, #8]

	if (vq->vq_free_cnt == 0) {
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801737c:	68bb      	ldr	r3, [r7, #8]
 801737e:	889b      	ldrh	r3, [r3, #4]
 8017380:	4413      	add	r3, r2
 8017382:	b29a      	uxth	r2, r3
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	851a      	strh	r2, [r3, #40]	; 0x28
	dxp->ndescs--;
 8017388:	68bb      	ldr	r3, [r7, #8]
 801738a:	889b      	ldrh	r3, [r3, #4]
 801738c:	3b01      	subs	r3, #1
 801738e:	b29a      	uxth	r2, r3
 8017390:	68bb      	ldr	r3, [r7, #8]
 8017392:	809a      	strh	r2, [r3, #4]

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
 8017394:	68fb      	ldr	r3, [r7, #12]
 8017396:	899b      	ldrh	r3, [r3, #12]
 8017398:	f003 0304 	and.w	r3, r3, #4
 801739c:	2b00      	cmp	r3, #0
 801739e:	d113      	bne.n	80173c8 <vq_ring_free_chain+0x74>
		while (dp->flags & VRING_DESC_F_NEXT) {
 80173a0:	e00c      	b.n	80173bc <vq_ring_free_chain+0x68>
			VQ_RING_ASSERT_VALID_IDX(vq, dp->next);
			dp = &vq->vq_ring.desc[dp->next];
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	69da      	ldr	r2, [r3, #28]
 80173a6:	68fb      	ldr	r3, [r7, #12]
 80173a8:	89db      	ldrh	r3, [r3, #14]
 80173aa:	011b      	lsls	r3, r3, #4
 80173ac:	4413      	add	r3, r2
 80173ae:	60fb      	str	r3, [r7, #12]
			dxp->ndescs--;
 80173b0:	68bb      	ldr	r3, [r7, #8]
 80173b2:	889b      	ldrh	r3, [r3, #4]
 80173b4:	3b01      	subs	r3, #1
 80173b6:	b29a      	uxth	r2, r3
 80173b8:	68bb      	ldr	r3, [r7, #8]
 80173ba:	809a      	strh	r2, [r3, #4]
		while (dp->flags & VRING_DESC_F_NEXT) {
 80173bc:	68fb      	ldr	r3, [r7, #12]
 80173be:	899b      	ldrh	r3, [r3, #12]
 80173c0:	f003 0301 	and.w	r3, r3, #1
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d1ec      	bne.n	80173a2 <vq_ring_free_chain+0x4e>
	/*
	 * We must append the existing free chain, if any, to the end of
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 */
	dp->next = vq->vq_desc_head_idx;
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80173cc:	68fb      	ldr	r3, [r7, #12]
 80173ce:	81da      	strh	r2, [r3, #14]
	vq->vq_desc_head_idx = desc_idx;
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	887a      	ldrh	r2, [r7, #2]
 80173d4:	861a      	strh	r2, [r3, #48]	; 0x30
}
 80173d6:	bf00      	nop
 80173d8:	3714      	adds	r7, #20
 80173da:	46bd      	mov	sp, r7
 80173dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173e0:	4770      	bx	lr

080173e2 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 80173e2:	b580      	push	{r7, lr}
 80173e4:	b088      	sub	sp, #32
 80173e6:	af00      	add	r7, sp, #0
 80173e8:	60f8      	str	r0, [r7, #12]
 80173ea:	60b9      	str	r1, [r7, #8]
 80173ec:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 80173ee:	68fb      	ldr	r3, [r7, #12]
 80173f0:	895b      	ldrh	r3, [r3, #10]
 80173f2:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 80173f4:	68fb      	ldr	r3, [r7, #12]
 80173f6:	3318      	adds	r3, #24
 80173f8:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 80173fa:	69b9      	ldr	r1, [r7, #24]
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	68ba      	ldr	r2, [r7, #8]
 8017400:	6978      	ldr	r0, [r7, #20]
 8017402:	f7ff fd96 	bl	8016f32 <vring_init>

	for (i = 0; i < size - 1; i++)
 8017406:	2300      	movs	r3, #0
 8017408:	61fb      	str	r3, [r7, #28]
 801740a:	e00c      	b.n	8017426 <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 801740c:	69fb      	ldr	r3, [r7, #28]
 801740e:	b29a      	uxth	r2, r3
 8017410:	697b      	ldr	r3, [r7, #20]
 8017412:	6859      	ldr	r1, [r3, #4]
 8017414:	69fb      	ldr	r3, [r7, #28]
 8017416:	011b      	lsls	r3, r3, #4
 8017418:	440b      	add	r3, r1
 801741a:	3201      	adds	r2, #1
 801741c:	b292      	uxth	r2, r2
 801741e:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 8017420:	69fb      	ldr	r3, [r7, #28]
 8017422:	3301      	adds	r3, #1
 8017424:	61fb      	str	r3, [r7, #28]
 8017426:	69bb      	ldr	r3, [r7, #24]
 8017428:	3b01      	subs	r3, #1
 801742a:	69fa      	ldr	r2, [r7, #28]
 801742c:	429a      	cmp	r2, r3
 801742e:	dbed      	blt.n	801740c <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 8017430:	697b      	ldr	r3, [r7, #20]
 8017432:	685a      	ldr	r2, [r3, #4]
 8017434:	69fb      	ldr	r3, [r7, #28]
 8017436:	011b      	lsls	r3, r3, #4
 8017438:	4413      	add	r3, r2
 801743a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801743e:	81da      	strh	r2, [r3, #14]
}
 8017440:	bf00      	nop
 8017442:	3720      	adds	r7, #32
 8017444:	46bd      	mov	sp, r7
 8017446:	bd80      	pop	{r7, pc}

08017448 <vq_ring_update_avail>:
 *
 * vq_ring_update_avail
 *
 */
static void vq_ring_update_avail(struct virtqueue *vq, uint16_t desc_idx)
{
 8017448:	b480      	push	{r7}
 801744a:	b085      	sub	sp, #20
 801744c:	af00      	add	r7, sp, #0
 801744e:	6078      	str	r0, [r7, #4]
 8017450:	460b      	mov	r3, r1
 8017452:	807b      	strh	r3, [r7, #2]
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	6a1b      	ldr	r3, [r3, #32]
 8017458:	885b      	ldrh	r3, [r3, #2]
 801745a:	b21a      	sxth	r2, r3
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	895b      	ldrh	r3, [r3, #10]
 8017460:	3b01      	subs	r3, #1
 8017462:	b29b      	uxth	r3, r3
 8017464:	b21b      	sxth	r3, r3
 8017466:	4013      	ands	r3, r2
 8017468:	b21b      	sxth	r3, r3
 801746a:	81fb      	strh	r3, [r7, #14]
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	6a1a      	ldr	r2, [r3, #32]
 8017470:	89fb      	ldrh	r3, [r7, #14]
 8017472:	005b      	lsls	r3, r3, #1
 8017474:	4413      	add	r3, r2
 8017476:	887a      	ldrh	r2, [r7, #2]
 8017478:	809a      	strh	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 801747a:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	6a1b      	ldr	r3, [r3, #32]
 8017482:	885a      	ldrh	r2, [r3, #2]
 8017484:	3201      	adds	r2, #1
 8017486:	b292      	uxth	r2, r2
 8017488:	805a      	strh	r2, [r3, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801748e:	3301      	adds	r3, #1
 8017490:	b29a      	uxth	r2, r3
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8017496:	bf00      	nop
 8017498:	3714      	adds	r7, #20
 801749a:	46bd      	mov	sp, r7
 801749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174a0:	4770      	bx	lr

080174a2 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 80174a2:	b580      	push	{r7, lr}
 80174a4:	b082      	sub	sp, #8
 80174a6:	af00      	add	r7, sp, #0
 80174a8:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 80174aa:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	691b      	ldr	r3, [r3, #16]
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d003      	beq.n	80174be <virtqueue_notification+0x1c>
		vq->callback(vq);
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	691b      	ldr	r3, [r3, #16]
 80174ba:	6878      	ldr	r0, [r7, #4]
 80174bc:	4798      	blx	r3
}
 80174be:	bf00      	nop
 80174c0:	3708      	adds	r7, #8
 80174c2:	46bd      	mov	sp, r7
 80174c4:	bd80      	pop	{r7, pc}

080174c6 <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 80174c6:	b580      	push	{r7, lr}
 80174c8:	b084      	sub	sp, #16
 80174ca:	af00      	add	r7, sp, #0
 80174cc:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	68db      	ldr	r3, [r3, #12]
 80174d2:	f003 0302 	and.w	r3, r3, #2
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d01d      	beq.n	8017516 <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	6a1b      	ldr	r3, [r3, #32]
 80174de:	885b      	ldrh	r3, [r3, #2]
 80174e0:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80174e6:	89fa      	ldrh	r2, [r7, #14]
 80174e8:	1ad3      	subs	r3, r2, r3
 80174ea:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	699b      	ldr	r3, [r3, #24]
 80174f4:	00db      	lsls	r3, r3, #3
 80174f6:	4413      	add	r3, r2
 80174f8:	685b      	ldr	r3, [r3, #4]
 80174fa:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 80174fc:	89ba      	ldrh	r2, [r7, #12]
 80174fe:	89f9      	ldrh	r1, [r7, #14]
 8017500:	897b      	ldrh	r3, [r7, #10]
 8017502:	4618      	mov	r0, r3
 8017504:	f7ff fd3e 	bl	8016f84 <vring_need_event>
 8017508:	4603      	mov	r3, r0
 801750a:	2b00      	cmp	r3, #0
 801750c:	bf14      	ite	ne
 801750e:	2301      	movne	r3, #1
 8017510:	2300      	moveq	r3, #0
 8017512:	b2db      	uxtb	r3, r3
 8017514:	e009      	b.n	801752a <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801751a:	881b      	ldrh	r3, [r3, #0]
 801751c:	f003 0301 	and.w	r3, r3, #1
 8017520:	2b00      	cmp	r3, #0
 8017522:	bf0c      	ite	eq
 8017524:	2301      	moveq	r3, #1
 8017526:	2300      	movne	r3, #0
 8017528:	b2db      	uxtb	r3, r3
}
 801752a:	4618      	mov	r0, r3
 801752c:	3710      	adds	r7, #16
 801752e:	46bd      	mov	sp, r7
 8017530:	bd80      	pop	{r7, pc}

08017532 <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 8017532:	b580      	push	{r7, lr}
 8017534:	b082      	sub	sp, #8
 8017536:	af00      	add	r7, sp, #0
 8017538:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	695b      	ldr	r3, [r3, #20]
 801753e:	2b00      	cmp	r3, #0
 8017540:	d003      	beq.n	801754a <vq_ring_notify_host+0x18>
		vq->notify(vq);
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	695b      	ldr	r3, [r3, #20]
 8017546:	6878      	ldr	r0, [r7, #4]
 8017548:	4798      	blx	r3
}
 801754a:	bf00      	nop
 801754c:	3708      	adds	r7, #8
 801754e:	46bd      	mov	sp, r7
 8017550:	bd80      	pop	{r7, pc}
	...

08017554 <initSDCard>:
char logBuffer[16384] = "";
char terminalBuffer[1024] = "";


uint8_t initSDCard(void)
{
 8017554:	b580      	push	{r7, lr}
 8017556:	af00      	add	r7, sp, #0

	//Open the file system
	fres = f_mount(&FatFs, "", 0); //1=mount now
 8017558:	2200      	movs	r2, #0
 801755a:	491c      	ldr	r1, [pc, #112]	; (80175cc <initSDCard+0x78>)
 801755c:	481c      	ldr	r0, [pc, #112]	; (80175d0 <initSDCard+0x7c>)
 801755e:	f7fc fbdf 	bl	8013d20 <f_mount>
 8017562:	4603      	mov	r3, r0
 8017564:	461a      	mov	r2, r3
 8017566:	4b1b      	ldr	r3, [pc, #108]	; (80175d4 <initSDCard+0x80>)
 8017568:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK)
 801756a:	4b1a      	ldr	r3, [pc, #104]	; (80175d4 <initSDCard+0x80>)
 801756c:	781b      	ldrb	r3, [r3, #0]
 801756e:	2b00      	cmp	r3, #0
 8017570:	d002      	beq.n	8017578 <initSDCard+0x24>
	{
		//	myprintf("f_mount error (%i)\r\n", fres);
		return (uint8_t)fres;
 8017572:	4b18      	ldr	r3, [pc, #96]	; (80175d4 <initSDCard+0x80>)
 8017574:	781b      	ldrb	r3, [r3, #0]
 8017576:	e026      	b.n	80175c6 <initSDCard+0x72>
	}


	//  fres = f_mkfs("\\", FM_FAT32, 0, buffer, sizeof(buffer));
	fres = f_getfree("", &free_clusters, &getFreeFs);
 8017578:	4a17      	ldr	r2, [pc, #92]	; (80175d8 <initSDCard+0x84>)
 801757a:	4918      	ldr	r1, [pc, #96]	; (80175dc <initSDCard+0x88>)
 801757c:	4813      	ldr	r0, [pc, #76]	; (80175cc <initSDCard+0x78>)
 801757e:	f7fd fa84 	bl	8014a8a <f_getfree>
 8017582:	4603      	mov	r3, r0
 8017584:	461a      	mov	r2, r3
 8017586:	4b13      	ldr	r3, [pc, #76]	; (80175d4 <initSDCard+0x80>)
 8017588:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK)
 801758a:	4b12      	ldr	r3, [pc, #72]	; (80175d4 <initSDCard+0x80>)
 801758c:	781b      	ldrb	r3, [r3, #0]
 801758e:	2b00      	cmp	r3, #0
 8017590:	d002      	beq.n	8017598 <initSDCard+0x44>
	{
		//	myprintf("f_getfree error (%i)\r\n", fres);
		return (uint8_t)fres;
 8017592:	4b10      	ldr	r3, [pc, #64]	; (80175d4 <initSDCard+0x80>)
 8017594:	781b      	ldrb	r3, [r3, #0]
 8017596:	e016      	b.n	80175c6 <initSDCard+0x72>
	}

	//Formula comes from ChaN's documentation
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8017598:	4b0f      	ldr	r3, [pc, #60]	; (80175d8 <initSDCard+0x84>)
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	699b      	ldr	r3, [r3, #24]
 801759e:	3b02      	subs	r3, #2
 80175a0:	4a0d      	ldr	r2, [pc, #52]	; (80175d8 <initSDCard+0x84>)
 80175a2:	6812      	ldr	r2, [r2, #0]
 80175a4:	8952      	ldrh	r2, [r2, #10]
 80175a6:	fb02 f303 	mul.w	r3, r2, r3
 80175aa:	4a0d      	ldr	r2, [pc, #52]	; (80175e0 <initSDCard+0x8c>)
 80175ac:	6013      	str	r3, [r2, #0]
	free_sectors = free_clusters * getFreeFs->csize;
 80175ae:	4b0a      	ldr	r3, [pc, #40]	; (80175d8 <initSDCard+0x84>)
 80175b0:	681b      	ldr	r3, [r3, #0]
 80175b2:	895b      	ldrh	r3, [r3, #10]
 80175b4:	461a      	mov	r2, r3
 80175b6:	4b09      	ldr	r3, [pc, #36]	; (80175dc <initSDCard+0x88>)
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	fb03 f302 	mul.w	r3, r3, r2
 80175be:	4a09      	ldr	r2, [pc, #36]	; (80175e4 <initSDCard+0x90>)
 80175c0:	6013      	str	r3, [r2, #0]
	return (uint8_t)fres;
 80175c2:	4b04      	ldr	r3, [pc, #16]	; (80175d4 <initSDCard+0x80>)
 80175c4:	781b      	ldrb	r3, [r3, #0]
}
 80175c6:	4618      	mov	r0, r3
 80175c8:	bd80      	pop	{r7, pc}
 80175ca:	bf00      	nop
 80175cc:	08021894 	.word	0x08021894
 80175d0:	2400b85c 	.word	0x2400b85c
 80175d4:	2400bc98 	.word	0x2400bc98
 80175d8:	2400ba90 	.word	0x2400ba90
 80175dc:	2400becc 	.word	0x2400becc
 80175e0:	2400bed0 	.word	0x2400bed0
 80175e4:	2400ba94 	.word	0x2400ba94

080175e8 <createNewLogFile>:

void createNewLogFile(void)
{
 80175e8:	b580      	push	{r7, lr}
 80175ea:	b088      	sub	sp, #32
 80175ec:	af00      	add	r7, sp, #0
	unsigned int BytesWritten = 0;
 80175ee:	2300      	movs	r3, #0
 80175f0:	61fb      	str	r3, [r7, #28]
	unsigned int BytesRead = 0;
 80175f2:	2300      	movs	r3, #0
 80175f4:	61bb      	str	r3, [r7, #24]
	char localIndex[6] = "";
 80175f6:	2300      	movs	r3, #0
 80175f8:	613b      	str	r3, [r7, #16]
 80175fa:	2300      	movs	r3, #0
 80175fc:	82bb      	strh	r3, [r7, #20]

	fres = f_open(&fil, "Index.txt", FA_READ);
 80175fe:	2201      	movs	r2, #1
 8017600:	4957      	ldr	r1, [pc, #348]	; (8017760 <createNewLogFile+0x178>)
 8017602:	4858      	ldr	r0, [pc, #352]	; (8017764 <createNewLogFile+0x17c>)
 8017604:	f7fc fbd2 	bl	8013dac <f_open>
 8017608:	4603      	mov	r3, r0
 801760a:	461a      	mov	r2, r3
 801760c:	4b56      	ldr	r3, [pc, #344]	; (8017768 <createNewLogFile+0x180>)
 801760e:	701a      	strb	r2, [r3, #0]
	fres = f_read(&fil, &FileReadBuffer, sizeof(FileReadBuffer), &BytesRead);
 8017610:	f107 0318 	add.w	r3, r7, #24
 8017614:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017618:	4954      	ldr	r1, [pc, #336]	; (801776c <createNewLogFile+0x184>)
 801761a:	4852      	ldr	r0, [pc, #328]	; (8017764 <createNewLogFile+0x17c>)
 801761c:	f7fc fd84 	bl	8014128 <f_read>
 8017620:	4603      	mov	r3, r0
 8017622:	461a      	mov	r2, r3
 8017624:	4b50      	ldr	r3, [pc, #320]	; (8017768 <createNewLogFile+0x180>)
 8017626:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK)
 8017628:	4b4f      	ldr	r3, [pc, #316]	; (8017768 <createNewLogFile+0x180>)
 801762a:	781b      	ldrb	r3, [r3, #0]
 801762c:	2b00      	cmp	r3, #0
 801762e:	d021      	beq.n	8017674 <createNewLogFile+0x8c>
	{

		do
		{
			HAL_Delay(1);
 8017630:	2001      	movs	r0, #1
 8017632:	f7ea ff93 	bl	800255c <HAL_Delay>
			fres = f_open(&fil, "Index.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8017636:	221a      	movs	r2, #26
 8017638:	4949      	ldr	r1, [pc, #292]	; (8017760 <createNewLogFile+0x178>)
 801763a:	484a      	ldr	r0, [pc, #296]	; (8017764 <createNewLogFile+0x17c>)
 801763c:	f7fc fbb6 	bl	8013dac <f_open>
 8017640:	4603      	mov	r3, r0
 8017642:	461a      	mov	r2, r3
 8017644:	4b48      	ldr	r3, [pc, #288]	; (8017768 <createNewLogFile+0x180>)
 8017646:	701a      	strb	r2, [r3, #0]
		} while ( (fres != FR_OK) );
 8017648:	4b47      	ldr	r3, [pc, #284]	; (8017768 <createNewLogFile+0x180>)
 801764a:	781b      	ldrb	r3, [r3, #0]
 801764c:	2b00      	cmp	r3, #0
 801764e:	d1ef      	bne.n	8017630 <createNewLogFile+0x48>

		fres = f_write(&fil, "00000\t", strlen("00000\t"), &BytesWritten);
 8017650:	f107 031c 	add.w	r3, r7, #28
 8017654:	2206      	movs	r2, #6
 8017656:	4946      	ldr	r1, [pc, #280]	; (8017770 <createNewLogFile+0x188>)
 8017658:	4842      	ldr	r0, [pc, #264]	; (8017764 <createNewLogFile+0x17c>)
 801765a:	f7fc fea4 	bl	80143a6 <f_write>
 801765e:	4603      	mov	r3, r0
 8017660:	461a      	mov	r2, r3
 8017662:	4b41      	ldr	r3, [pc, #260]	; (8017768 <createNewLogFile+0x180>)
 8017664:	701a      	strb	r2, [r3, #0]
		fres = f_close(&fil);
 8017666:	483f      	ldr	r0, [pc, #252]	; (8017764 <createNewLogFile+0x17c>)
 8017668:	f7fd f890 	bl	801478c <f_close>
 801766c:	4603      	mov	r3, r0
 801766e:	461a      	mov	r2, r3
 8017670:	4b3d      	ldr	r3, [pc, #244]	; (8017768 <createNewLogFile+0x180>)
 8017672:	701a      	strb	r2, [r3, #0]
	}
	if (BytesRead == 6)
 8017674:	69bb      	ldr	r3, [r7, #24]
 8017676:	2b06      	cmp	r3, #6
 8017678:	d112      	bne.n	80176a0 <createNewLogFile+0xb8>
	{
		memcpy(localIndex, FileReadBuffer, 5);
 801767a:	f107 0310 	add.w	r3, r7, #16
 801767e:	2205      	movs	r2, #5
 8017680:	493a      	ldr	r1, [pc, #232]	; (801776c <createNewLogFile+0x184>)
 8017682:	4618      	mov	r0, r3
 8017684:	f005 f858 	bl	801c738 <memcpy>
		localIndex[5] = '\0';
 8017688:	2300      	movs	r3, #0
 801768a:	757b      	strb	r3, [r7, #21]
		previousLogIndex = atoi(localIndex);
 801768c:	f107 0310 	add.w	r3, r7, #16
 8017690:	4618      	mov	r0, r3
 8017692:	f005 f800 	bl	801c696 <atoi>
 8017696:	4603      	mov	r3, r0
 8017698:	461a      	mov	r2, r3
 801769a:	4b36      	ldr	r3, [pc, #216]	; (8017774 <createNewLogFile+0x18c>)
 801769c:	601a      	str	r2, [r3, #0]
 801769e:	e002      	b.n	80176a6 <createNewLogFile+0xbe>
	}
	else
	{
		//TODO: what if br is not 6
		// recreate index, etc.
		previousLogIndex = 0;
 80176a0:	4b34      	ldr	r3, [pc, #208]	; (8017774 <createNewLogFile+0x18c>)
 80176a2:	2200      	movs	r2, #0
 80176a4:	601a      	str	r2, [r3, #0]
	}
	fres = f_close(&fil);
 80176a6:	482f      	ldr	r0, [pc, #188]	; (8017764 <createNewLogFile+0x17c>)
 80176a8:	f7fd f870 	bl	801478c <f_close>
 80176ac:	4603      	mov	r3, r0
 80176ae:	461a      	mov	r2, r3
 80176b0:	4b2d      	ldr	r3, [pc, #180]	; (8017768 <createNewLogFile+0x180>)
 80176b2:	701a      	strb	r2, [r3, #0]
	fres = f_open(&fil, "Index.txt", FA_OPEN_EXISTING | FA_WRITE);
 80176b4:	2202      	movs	r2, #2
 80176b6:	492a      	ldr	r1, [pc, #168]	; (8017760 <createNewLogFile+0x178>)
 80176b8:	482a      	ldr	r0, [pc, #168]	; (8017764 <createNewLogFile+0x17c>)
 80176ba:	f7fc fb77 	bl	8013dac <f_open>
 80176be:	4603      	mov	r3, r0
 80176c0:	461a      	mov	r2, r3
 80176c2:	4b29      	ldr	r3, [pc, #164]	; (8017768 <createNewLogFile+0x180>)
 80176c4:	701a      	strb	r2, [r3, #0]

	if (previousLogIndex + 1 < 100000)
 80176c6:	4b2b      	ldr	r3, [pc, #172]	; (8017774 <createNewLogFile+0x18c>)
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	3301      	adds	r3, #1
 80176cc:	4a2a      	ldr	r2, [pc, #168]	; (8017778 <createNewLogFile+0x190>)
 80176ce:	4293      	cmp	r3, r2
 80176d0:	d902      	bls.n	80176d8 <createNewLogFile+0xf0>
	{

	}
	else
	{
		previousLogIndex = 0;
 80176d2:	4b28      	ldr	r3, [pc, #160]	; (8017774 <createNewLogFile+0x18c>)
 80176d4:	2200      	movs	r2, #0
 80176d6:	601a      	str	r2, [r3, #0]
	}
	previousLogIndex++;
 80176d8:	4b26      	ldr	r3, [pc, #152]	; (8017774 <createNewLogFile+0x18c>)
 80176da:	681b      	ldr	r3, [r3, #0]
 80176dc:	3301      	adds	r3, #1
 80176de:	4a25      	ldr	r2, [pc, #148]	; (8017774 <createNewLogFile+0x18c>)
 80176e0:	6013      	str	r3, [r2, #0]

	char localString[16] = "";
 80176e2:	2300      	movs	r3, #0
 80176e4:	603b      	str	r3, [r7, #0]
 80176e6:	1d3b      	adds	r3, r7, #4
 80176e8:	2200      	movs	r2, #0
 80176ea:	601a      	str	r2, [r3, #0]
 80176ec:	605a      	str	r2, [r3, #4]
 80176ee:	609a      	str	r2, [r3, #8]
	sprintf(localString, "%05ld\t",previousLogIndex);
 80176f0:	4b20      	ldr	r3, [pc, #128]	; (8017774 <createNewLogFile+0x18c>)
 80176f2:	681a      	ldr	r2, [r3, #0]
 80176f4:	463b      	mov	r3, r7
 80176f6:	4921      	ldr	r1, [pc, #132]	; (801777c <createNewLogFile+0x194>)
 80176f8:	4618      	mov	r0, r3
 80176fa:	f006 f96f 	bl	801d9dc <siprintf>
	//
	fres = f_write(&fil, localString, strlen(localString), &BytesWritten);
 80176fe:	463b      	mov	r3, r7
 8017700:	4618      	mov	r0, r3
 8017702:	f7e8 fdf7 	bl	80002f4 <strlen>
 8017706:	4602      	mov	r2, r0
 8017708:	f107 031c 	add.w	r3, r7, #28
 801770c:	4639      	mov	r1, r7
 801770e:	4815      	ldr	r0, [pc, #84]	; (8017764 <createNewLogFile+0x17c>)
 8017710:	f7fc fe49 	bl	80143a6 <f_write>
 8017714:	4603      	mov	r3, r0
 8017716:	461a      	mov	r2, r3
 8017718:	4b13      	ldr	r3, [pc, #76]	; (8017768 <createNewLogFile+0x180>)
 801771a:	701a      	strb	r2, [r3, #0]
	f_close(&fil);
 801771c:	4811      	ldr	r0, [pc, #68]	; (8017764 <createNewLogFile+0x17c>)
 801771e:	f7fd f835 	bl	801478c <f_close>

	sprintf(currentLogFilename,"LOG_%05ld.CSV", previousLogIndex);
 8017722:	4b14      	ldr	r3, [pc, #80]	; (8017774 <createNewLogFile+0x18c>)
 8017724:	681b      	ldr	r3, [r3, #0]
 8017726:	461a      	mov	r2, r3
 8017728:	4915      	ldr	r1, [pc, #84]	; (8017780 <createNewLogFile+0x198>)
 801772a:	4816      	ldr	r0, [pc, #88]	; (8017784 <createNewLogFile+0x19c>)
 801772c:	f006 f956 	bl	801d9dc <siprintf>
	fres = f_open(&fil, currentLogFilename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8017730:	221a      	movs	r2, #26
 8017732:	4914      	ldr	r1, [pc, #80]	; (8017784 <createNewLogFile+0x19c>)
 8017734:	480b      	ldr	r0, [pc, #44]	; (8017764 <createNewLogFile+0x17c>)
 8017736:	f7fc fb39 	bl	8013dac <f_open>
 801773a:	4603      	mov	r3, r0
 801773c:	461a      	mov	r2, r3
 801773e:	4b0a      	ldr	r3, [pc, #40]	; (8017768 <createNewLogFile+0x180>)
 8017740:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK)
 8017742:	4b09      	ldr	r3, [pc, #36]	; (8017768 <createNewLogFile+0x180>)
 8017744:	781b      	ldrb	r3, [r3, #0]
 8017746:	2b00      	cmp	r3, #0
 8017748:	d103      	bne.n	8017752 <createNewLogFile+0x16a>
	{
		isValidLog = true;
 801774a:	4b0f      	ldr	r3, [pc, #60]	; (8017788 <createNewLogFile+0x1a0>)
 801774c:	2201      	movs	r2, #1
 801774e:	701a      	strb	r2, [r3, #0]
	else
	{
		isValidLog = false;
	}

}
 8017750:	e002      	b.n	8017758 <createNewLogFile+0x170>
		isValidLog = false;
 8017752:	4b0d      	ldr	r3, [pc, #52]	; (8017788 <createNewLogFile+0x1a0>)
 8017754:	2200      	movs	r2, #0
 8017756:	701a      	strb	r2, [r3, #0]
}
 8017758:	bf00      	nop
 801775a:	3720      	adds	r7, #32
 801775c:	46bd      	mov	sp, r7
 801775e:	bd80      	pop	{r7, pc}
 8017760:	08021898 	.word	0x08021898
 8017764:	2400bc9c 	.word	0x2400bc9c
 8017768:	2400bc98 	.word	0x2400bc98
 801776c:	2400a604 	.word	0x2400a604
 8017770:	080218a4 	.word	0x080218a4
 8017774:	2400aa04 	.word	0x2400aa04
 8017778:	0001869f 	.word	0x0001869f
 801777c:	080218ac 	.word	0x080218ac
 8017780:	080218b4 	.word	0x080218b4
 8017784:	2400aa10 	.word	0x2400aa10
 8017788:	2400aa0c 	.word	0x2400aa0c

0801778c <closeLogFile>:

void closeLogFile(void)
{
 801778c:	b580      	push	{r7, lr}
 801778e:	af00      	add	r7, sp, #0
	f_sync(&fil);
 8017790:	4803      	ldr	r0, [pc, #12]	; (80177a0 <closeLogFile+0x14>)
 8017792:	f7fc ff7d 	bl	8014690 <f_sync>
	f_close(&fil);
 8017796:	4802      	ldr	r0, [pc, #8]	; (80177a0 <closeLogFile+0x14>)
 8017798:	f7fc fff8 	bl	801478c <f_close>
}
 801779c:	bf00      	nop
 801779e:	bd80      	pop	{r7, pc}
 80177a0:	2400bc9c 	.word	0x2400bc9c

080177a4 <getCurrentLogSize>:
		fres = f_write(&fil, logBuffer, strlen(logBuffer), &BytesWritten);
	}
}

uint32_t getCurrentLogSize(void)
{
 80177a4:	b580      	push	{r7, lr}
 80177a6:	b0d6      	sub	sp, #344	; 0x158
 80177a8:	af00      	add	r7, sp, #0
    FILINFO fno1;
    DIR dp1;
    FRESULT localRes = FR_OK;
 80177aa:	2300      	movs	r3, #0
 80177ac:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
    f_opendir(&dp1, "\\");
 80177b0:	1d3b      	adds	r3, r7, #4
 80177b2:	4920      	ldr	r1, [pc, #128]	; (8017834 <getCurrentLogSize+0x90>)
 80177b4:	4618      	mov	r0, r3
 80177b6:	f7fd f813 	bl	80147e0 <f_opendir>
    localRes = f_findfirst(&dp1, &fno1, "\\", "LOG_*");
 80177ba:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80177be:	1d38      	adds	r0, r7, #4
 80177c0:	4b1d      	ldr	r3, [pc, #116]	; (8017838 <getCurrentLogSize+0x94>)
 80177c2:	4a1c      	ldr	r2, [pc, #112]	; (8017834 <getCurrentLogSize+0x90>)
 80177c4:	f7fd f90a 	bl	80149dc <f_findfirst>
 80177c8:	4603      	mov	r3, r0
 80177ca:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
    while( (localRes == FR_OK) && (fno1.fname[0] != 0x00) )
 80177ce:	e01d      	b.n	801780c <getCurrentLogSize+0x68>
    {
    	f_stat("\\", &fno1);
 80177d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80177d4:	4619      	mov	r1, r3
 80177d6:	4817      	ldr	r0, [pc, #92]	; (8017834 <getCurrentLogSize+0x90>)
 80177d8:	f7fd f91e 	bl	8014a18 <f_stat>
    	if(strcmp(currentLogFilename, fno1.fname) == 0)
 80177dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80177e0:	3316      	adds	r3, #22
 80177e2:	4619      	mov	r1, r3
 80177e4:	4815      	ldr	r0, [pc, #84]	; (801783c <getCurrentLogSize+0x98>)
 80177e6:	f7e8 fd7b 	bl	80002e0 <strcmp>
 80177ea:	4603      	mov	r3, r0
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d103      	bne.n	80177f8 <getCurrentLogSize+0x54>
    	{
    		return fno1.fsize;
 80177f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80177f4:	681b      	ldr	r3, [r3, #0]
 80177f6:	e017      	b.n	8017828 <getCurrentLogSize+0x84>
    	}
    	localRes = f_findnext(&dp1, &fno1);
 80177f8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80177fc:	1d3b      	adds	r3, r7, #4
 80177fe:	4611      	mov	r1, r2
 8017800:	4618      	mov	r0, r3
 8017802:	f7fd f8c3 	bl	801498c <f_findnext>
 8017806:	4603      	mov	r3, r0
 8017808:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
    while( (localRes == FR_OK) && (fno1.fname[0] != 0x00) )
 801780c:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8017810:	2b00      	cmp	r3, #0
 8017812:	d104      	bne.n	801781e <getCurrentLogSize+0x7a>
 8017814:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017818:	7d9b      	ldrb	r3, [r3, #22]
 801781a:	2b00      	cmp	r3, #0
 801781c:	d1d8      	bne.n	80177d0 <getCurrentLogSize+0x2c>
    }
    f_closedir(&dp1);
 801781e:	1d3b      	adds	r3, r7, #4
 8017820:	4618      	mov	r0, r3
 8017822:	f7fd f850 	bl	80148c6 <f_closedir>
    return 0;
 8017826:	2300      	movs	r3, #0
}
 8017828:	4618      	mov	r0, r3
 801782a:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 801782e:	46bd      	mov	sp, r7
 8017830:	bd80      	pop	{r7, pc}
 8017832:	bf00      	nop
 8017834:	080218c4 	.word	0x080218c4
 8017838:	080218c8 	.word	0x080218c8
 801783c:	2400aa10 	.word	0x2400aa10

08017840 <monitorLogSize>:

void monitorLogSize(void)
{
 8017840:	b580      	push	{r7, lr}
 8017842:	af00      	add	r7, sp, #0
	if ( (HAL_GetTick() - lastFileSizeCheck > 10000) && (isValidLog) )
 8017844:	f7ea fe7e 	bl	8002544 <HAL_GetTick>
 8017848:	4602      	mov	r2, r0
 801784a:	4b0f      	ldr	r3, [pc, #60]	; (8017888 <monitorLogSize+0x48>)
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	1ad3      	subs	r3, r2, r3
 8017850:	f242 7210 	movw	r2, #10000	; 0x2710
 8017854:	4293      	cmp	r3, r2
 8017856:	d915      	bls.n	8017884 <monitorLogSize+0x44>
 8017858:	4b0c      	ldr	r3, [pc, #48]	; (801788c <monitorLogSize+0x4c>)
 801785a:	781b      	ldrb	r3, [r3, #0]
 801785c:	2b00      	cmp	r3, #0
 801785e:	d011      	beq.n	8017884 <monitorLogSize+0x44>
	{
		f_sync(&fil);
 8017860:	480b      	ldr	r0, [pc, #44]	; (8017890 <monitorLogSize+0x50>)
 8017862:	f7fc ff15 	bl	8014690 <f_sync>
		if (getCurrentLogSize() > MAX_LOG_SIZE)
 8017866:	f7ff ff9d 	bl	80177a4 <getCurrentLogSize>
 801786a:	4603      	mov	r3, r0
 801786c:	4a09      	ldr	r2, [pc, #36]	; (8017894 <monitorLogSize+0x54>)
 801786e:	4293      	cmp	r3, r2
 8017870:	d903      	bls.n	801787a <monitorLogSize+0x3a>
		{
			closeLogFile();
 8017872:	f7ff ff8b 	bl	801778c <closeLogFile>
			createNewLogFile();
 8017876:	f7ff feb7 	bl	80175e8 <createNewLogFile>
		}
		lastFileSizeCheck = HAL_GetTick();
 801787a:	f7ea fe63 	bl	8002544 <HAL_GetTick>
 801787e:	4603      	mov	r3, r0
 8017880:	4a01      	ldr	r2, [pc, #4]	; (8017888 <monitorLogSize+0x48>)
 8017882:	6013      	str	r3, [r2, #0]
	}
}
 8017884:	bf00      	nop
 8017886:	bd80      	pop	{r7, pc}
 8017888:	2400aa08 	.word	0x2400aa08
 801788c:	2400aa0c 	.word	0x2400aa0c
 8017890:	2400bc9c 	.word	0x2400bc9c
 8017894:	017d7840 	.word	0x017d7840

08017898 <logData>:
	f_closedir(&dp1);
//	logData("EOD", false, true, true);
}

void logData(char *dataToLog, bool doNotShowOnDisplay, bool displayOnly, bool doNotDisplayTime)
{
 8017898:	b590      	push	{r4, r7, lr}
 801789a:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 801789e:	af00      	add	r7, sp, #0
 80178a0:	1d3c      	adds	r4, r7, #4
 80178a2:	6020      	str	r0, [r4, #0]
 80178a4:	460c      	mov	r4, r1
 80178a6:	4610      	mov	r0, r2
 80178a8:	4619      	mov	r1, r3
 80178aa:	1cfb      	adds	r3, r7, #3
 80178ac:	4622      	mov	r2, r4
 80178ae:	701a      	strb	r2, [r3, #0]
 80178b0:	1cbb      	adds	r3, r7, #2
 80178b2:	4602      	mov	r2, r0
 80178b4:	701a      	strb	r2, [r3, #0]
 80178b6:	1c7b      	adds	r3, r7, #1
 80178b8:	460a      	mov	r2, r1
 80178ba:	701a      	strb	r2, [r3, #0]
    char localString[1024] = "";
 80178bc:	f107 0310 	add.w	r3, r7, #16
 80178c0:	2200      	movs	r2, #0
 80178c2:	601a      	str	r2, [r3, #0]
 80178c4:	3304      	adds	r3, #4
 80178c6:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 80178ca:	2100      	movs	r1, #0
 80178cc:	4618      	mov	r0, r3
 80178ce:	f004 ff5b 	bl	801c788 <memset>
    unsigned int BytesWritten = 0;
 80178d2:	f107 030c 	add.w	r3, r7, #12
 80178d6:	2200      	movs	r2, #0
 80178d8:	601a      	str	r2, [r3, #0]

    if ( (strcmp(dataToLog,"") != 0) && (!doNotDisplayTime) )
 80178da:	1d3b      	adds	r3, r7, #4
 80178dc:	681b      	ldr	r3, [r3, #0]
 80178de:	781b      	ldrb	r3, [r3, #0]
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d011      	beq.n	8017908 <logData+0x70>
 80178e4:	1c7b      	adds	r3, r7, #1
 80178e6:	781b      	ldrb	r3, [r3, #0]
 80178e8:	f083 0301 	eor.w	r3, r3, #1
 80178ec:	b2db      	uxtb	r3, r3
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	d00a      	beq.n	8017908 <logData+0x70>
    {
        sprintf(localString, "%s, %s\r\n", CT(), dataToLog);
 80178f2:	f004 fb99 	bl	801c028 <CT>
 80178f6:	4602      	mov	r2, r0
 80178f8:	1d3b      	adds	r3, r7, #4
 80178fa:	f107 0010 	add.w	r0, r7, #16
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	4930      	ldr	r1, [pc, #192]	; (80179c4 <logData+0x12c>)
 8017902:	f006 f86b 	bl	801d9dc <siprintf>
 8017906:	e016      	b.n	8017936 <logData+0x9e>
    }
    else if ( (strcmp(dataToLog,"") != 0) && (doNotDisplayTime) )
 8017908:	1d3b      	adds	r3, r7, #4
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	781b      	ldrb	r3, [r3, #0]
 801790e:	2b00      	cmp	r3, #0
 8017910:	d00b      	beq.n	801792a <logData+0x92>
 8017912:	1c7b      	adds	r3, r7, #1
 8017914:	781b      	ldrb	r3, [r3, #0]
 8017916:	2b00      	cmp	r3, #0
 8017918:	d007      	beq.n	801792a <logData+0x92>
    {
        sprintf(localString, "%s\r\n", dataToLog);
 801791a:	1d3b      	adds	r3, r7, #4
 801791c:	f107 0010 	add.w	r0, r7, #16
 8017920:	681a      	ldr	r2, [r3, #0]
 8017922:	4929      	ldr	r1, [pc, #164]	; (80179c8 <logData+0x130>)
 8017924:	f006 f85a 	bl	801d9dc <siprintf>
 8017928:	e005      	b.n	8017936 <logData+0x9e>
    }
    else
    {
        sprintf(localString, "\r\n");
 801792a:	f107 0310 	add.w	r3, r7, #16
 801792e:	4927      	ldr	r1, [pc, #156]	; (80179cc <logData+0x134>)
 8017930:	4618      	mov	r0, r3
 8017932:	f006 f853 	bl	801d9dc <siprintf>
    }
    //TODO: disable sessionUnlocked and replace with debugLevel
    if ( (displayOnly) /*&& (!isInfwUpdateMode)*/ )
 8017936:	1cbb      	adds	r3, r7, #2
 8017938:	781b      	ldrb	r3, [r3, #0]
 801793a:	2b00      	cmp	r3, #0
 801793c:	d00d      	beq.n	801795a <logData+0xc2>
    {
//    	CDC_Transmit_FS((uint8_t*)localString, strlen(localString));
    	HAL_UART_Transmit(&huart3, (uint8_t*)localString, strlen(localString), 10);
 801793e:	f107 0310 	add.w	r3, r7, #16
 8017942:	4618      	mov	r0, r3
 8017944:	f7e8 fcd6 	bl	80002f4 <strlen>
 8017948:	4603      	mov	r3, r0
 801794a:	b29a      	uxth	r2, r3
 801794c:	f107 0110 	add.w	r1, r7, #16
 8017950:	230a      	movs	r3, #10
 8017952:	481f      	ldr	r0, [pc, #124]	; (80179d0 <logData+0x138>)
 8017954:	f7f4 f85c 	bl	800ba10 <HAL_UART_Transmit>
    	{
//    		CDC_Transmit_FS((uint8_t*)localString, strlen(localString));
    		HAL_UART_Transmit(&huart3, (uint8_t*)localString, strlen(localString), 10);
    	}
    }
}
 8017958:	e02e      	b.n	80179b8 <logData+0x120>
    else if (!displayOnly || !doNotShowOnDisplay)
 801795a:	1cbb      	adds	r3, r7, #2
 801795c:	781b      	ldrb	r3, [r3, #0]
 801795e:	f083 0301 	eor.w	r3, r3, #1
 8017962:	b2db      	uxtb	r3, r3
 8017964:	2b00      	cmp	r3, #0
 8017966:	d106      	bne.n	8017976 <logData+0xde>
 8017968:	1cfb      	adds	r3, r7, #3
 801796a:	781b      	ldrb	r3, [r3, #0]
 801796c:	f083 0301 	eor.w	r3, r3, #1
 8017970:	b2db      	uxtb	r3, r3
 8017972:	2b00      	cmp	r3, #0
 8017974:	d020      	beq.n	80179b8 <logData+0x120>
    	f_write(&fil, localString, strlen(localString), &BytesWritten);
 8017976:	f107 0310 	add.w	r3, r7, #16
 801797a:	4618      	mov	r0, r3
 801797c:	f7e8 fcba 	bl	80002f4 <strlen>
 8017980:	4602      	mov	r2, r0
 8017982:	f107 030c 	add.w	r3, r7, #12
 8017986:	f107 0110 	add.w	r1, r7, #16
 801798a:	4812      	ldr	r0, [pc, #72]	; (80179d4 <logData+0x13c>)
 801798c:	f7fc fd0b 	bl	80143a6 <f_write>
    	if ( (!doNotShowOnDisplay) /*&& (!isInfwUpdateMode)*/ )
 8017990:	1cfb      	adds	r3, r7, #3
 8017992:	781b      	ldrb	r3, [r3, #0]
 8017994:	f083 0301 	eor.w	r3, r3, #1
 8017998:	b2db      	uxtb	r3, r3
 801799a:	2b00      	cmp	r3, #0
 801799c:	d00c      	beq.n	80179b8 <logData+0x120>
    		HAL_UART_Transmit(&huart3, (uint8_t*)localString, strlen(localString), 10);
 801799e:	f107 0310 	add.w	r3, r7, #16
 80179a2:	4618      	mov	r0, r3
 80179a4:	f7e8 fca6 	bl	80002f4 <strlen>
 80179a8:	4603      	mov	r3, r0
 80179aa:	b29a      	uxth	r2, r3
 80179ac:	f107 0110 	add.w	r1, r7, #16
 80179b0:	230a      	movs	r3, #10
 80179b2:	4807      	ldr	r0, [pc, #28]	; (80179d0 <logData+0x138>)
 80179b4:	f7f4 f82c 	bl	800ba10 <HAL_UART_Transmit>
}
 80179b8:	bf00      	nop
 80179ba:	f207 4714 	addw	r7, r7, #1044	; 0x414
 80179be:	46bd      	mov	sp, r7
 80179c0:	bd90      	pop	{r4, r7, pc}
 80179c2:	bf00      	nop
 80179c4:	080218d0 	.word	0x080218d0
 80179c8:	080218dc 	.word	0x080218dc
 80179cc:	080218e4 	.word	0x080218e4
 80179d0:	2400b200 	.word	0x2400b200
 80179d4:	2400bc9c 	.word	0x2400bc9c

080179d8 <screenInit>:
tIMAGE_DATA safeairBarImageArray[5];

uint8_t nextFrameToDraw[40960] = {0xFF};

void screenInit(void)
{
 80179d8:	b580      	push	{r7, lr}
 80179da:	b082      	sub	sp, #8
 80179dc:	af02      	add	r7, sp, #8
	isPortrait = true;
 80179de:	4b63      	ldr	r3, [pc, #396]	; (8017b6c <screenInit+0x194>)
 80179e0:	2201      	movs	r2, #1
 80179e2:	701a      	strb	r2, [r3, #0]
	DEV_Module_Init();
 80179e4:	f7f7 fa42 	bl	800ee6c <DEV_Module_Init>
	LCD_1IN8_SetBackLight(1000);
 80179e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80179ec:	f7f8 fbf0 	bl	80101d0 <LCD_1IN8_SetBackLight>

	if (isPortrait)
 80179f0:	4b5e      	ldr	r3, [pc, #376]	; (8017b6c <screenInit+0x194>)
 80179f2:	781b      	ldrb	r3, [r3, #0]
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	d00d      	beq.n	8017a14 <screenInit+0x3c>
	{
		LCD_1IN8_Init(L2R_U2D);
 80179f8:	2000      	movs	r0, #0
 80179fa:	f7f8 fac9 	bl	800ff90 <LCD_1IN8_Init>
		LCD_1IN8_Clear(BLACK);
 80179fe:	2000      	movs	r0, #0
 8017a00:	f7f8 fba8 	bl	8010154 <LCD_1IN8_Clear>
		Paint_NewImage(LCD_1IN8_HEIGHT,LCD_1IN8_WIDTH, 0, WHITE);
 8017a04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017a08:	2200      	movs	r2, #0
 8017a0a:	21a0      	movs	r1, #160	; 0xa0
 8017a0c:	2080      	movs	r0, #128	; 0x80
 8017a0e:	f7f7 fa4d 	bl	800eeac <Paint_NewImage>
 8017a12:	e00c      	b.n	8017a2e <screenInit+0x56>
	}
	else
	{
		LCD_1IN8_Init(U2D_R2L);
 8017a14:	2005      	movs	r0, #5
 8017a16:	f7f8 fabb 	bl	800ff90 <LCD_1IN8_Init>
		LCD_1IN8_Clear(BLACK);
 8017a1a:	2000      	movs	r0, #0
 8017a1c:	f7f8 fb9a 	bl	8010154 <LCD_1IN8_Clear>
		Paint_NewImage(LCD_1IN8_WIDTH,LCD_1IN8_HEIGHT, 0, WHITE);
 8017a20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017a24:	2200      	movs	r2, #0
 8017a26:	2180      	movs	r1, #128	; 0x80
 8017a28:	20a0      	movs	r0, #160	; 0xa0
 8017a2a:	f7f7 fa3f 	bl	800eeac <Paint_NewImage>
	}

	Paint_SetClearFuntion(LCD_1IN8_Clear);
 8017a2e:	4850      	ldr	r0, [pc, #320]	; (8017b70 <screenInit+0x198>)
 8017a30:	f7f7 fa88 	bl	800ef44 <Paint_SetClearFuntion>
	Paint_SetDisplayFuntion(LCD_1IN8_DrawPaint);
 8017a34:	484f      	ldr	r0, [pc, #316]	; (8017b74 <screenInit+0x19c>)
 8017a36:	f7f7 fa95 	bl	800ef64 <Paint_SetDisplayFuntion>

//	printf("Paint_Clear\r\n");
	Paint_Clear(WHITE);
 8017a3a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017a3e:	f7f7 fb51 	bl	800f0e4 <Paint_Clear>
	DEV_Delay_ms(1000);
 8017a42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017a46:	f7ea fd89 	bl	800255c <HAL_Delay>

	if (isPortrait)
 8017a4a:	4b48      	ldr	r3, [pc, #288]	; (8017b6c <screenInit+0x194>)
 8017a4c:	781b      	ldrb	r3, [r3, #0]
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	d042      	beq.n	8017ad8 <screenInit+0x100>
	{
		Paint_DrawImage(gImage_Rain, 0, 0, 128, 128);
 8017a52:	2380      	movs	r3, #128	; 0x80
 8017a54:	9300      	str	r3, [sp, #0]
 8017a56:	2380      	movs	r3, #128	; 0x80
 8017a58:	2200      	movs	r2, #0
 8017a5a:	2100      	movs	r1, #0
 8017a5c:	4846      	ldr	r0, [pc, #280]	; (8017b78 <screenInit+0x1a0>)
 8017a5e:	f7f8 f859 	bl	800fb14 <Paint_DrawImage>
		Paint_DrawString_EN(1, 130, "Version", &Font12, WHITE,  BLACK);
 8017a62:	2300      	movs	r3, #0
 8017a64:	9301      	str	r3, [sp, #4]
 8017a66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017a6a:	9300      	str	r3, [sp, #0]
 8017a6c:	4b43      	ldr	r3, [pc, #268]	; (8017b7c <screenInit+0x1a4>)
 8017a6e:	4a44      	ldr	r2, [pc, #272]	; (8017b80 <screenInit+0x1a8>)
 8017a70:	2182      	movs	r1, #130	; 0x82
 8017a72:	2001      	movs	r0, #1
 8017a74:	f7f7 ff64 	bl	800f940 <Paint_DrawString_EN>
		Paint_DrawFloatNum (1, 142 , versionID, 2,  &Font12, BLACK, WHITE);
 8017a78:	4b42      	ldr	r3, [pc, #264]	; (8017b84 <screenInit+0x1ac>)
 8017a7a:	edd3 7a00 	vldr	s15, [r3]
 8017a7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8017a82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017a86:	9301      	str	r3, [sp, #4]
 8017a88:	2300      	movs	r3, #0
 8017a8a:	9300      	str	r3, [sp, #0]
 8017a8c:	4b3b      	ldr	r3, [pc, #236]	; (8017b7c <screenInit+0x1a4>)
 8017a8e:	2202      	movs	r2, #2
 8017a90:	eeb0 0b47 	vmov.f64	d0, d7
 8017a94:	218e      	movs	r1, #142	; 0x8e
 8017a96:	2001      	movs	r0, #1
 8017a98:	f7f7 ffaa 	bl	800f9f0 <Paint_DrawFloatNum>
		Paint_DrawString_EN(70, 130, "BuildID", &Font12, WHITE,  BLACK);
 8017a9c:	2300      	movs	r3, #0
 8017a9e:	9301      	str	r3, [sp, #4]
 8017aa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017aa4:	9300      	str	r3, [sp, #0]
 8017aa6:	4b35      	ldr	r3, [pc, #212]	; (8017b7c <screenInit+0x1a4>)
 8017aa8:	4a37      	ldr	r2, [pc, #220]	; (8017b88 <screenInit+0x1b0>)
 8017aaa:	2182      	movs	r1, #130	; 0x82
 8017aac:	2046      	movs	r0, #70	; 0x46
 8017aae:	f7f7 ff47 	bl	800f940 <Paint_DrawString_EN>
		Paint_DrawFloatNum (70, 142 , buildID, 2,  &Font12, BLACK, WHITE);
 8017ab2:	4b36      	ldr	r3, [pc, #216]	; (8017b8c <screenInit+0x1b4>)
 8017ab4:	edd3 7a00 	vldr	s15, [r3]
 8017ab8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8017abc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017ac0:	9301      	str	r3, [sp, #4]
 8017ac2:	2300      	movs	r3, #0
 8017ac4:	9300      	str	r3, [sp, #0]
 8017ac6:	4b2d      	ldr	r3, [pc, #180]	; (8017b7c <screenInit+0x1a4>)
 8017ac8:	2202      	movs	r2, #2
 8017aca:	eeb0 0b47 	vmov.f64	d0, d7
 8017ace:	218e      	movs	r1, #142	; 0x8e
 8017ad0:	2046      	movs	r0, #70	; 0x46
 8017ad2:	f7f7 ff8d 	bl	800f9f0 <Paint_DrawFloatNum>
 8017ad6:	e041      	b.n	8017b5c <screenInit+0x184>
	}
	else
	{
		Paint_DrawImage(gImage_Rain, 16, 0, 128, 128);
 8017ad8:	2380      	movs	r3, #128	; 0x80
 8017ada:	9300      	str	r3, [sp, #0]
 8017adc:	2380      	movs	r3, #128	; 0x80
 8017ade:	2200      	movs	r2, #0
 8017ae0:	2110      	movs	r1, #16
 8017ae2:	4825      	ldr	r0, [pc, #148]	; (8017b78 <screenInit+0x1a0>)
 8017ae4:	f7f8 f816 	bl	800fb14 <Paint_DrawImage>
		Paint_DrawString_EN(1, 98, "Version", &Font12, WHITE,  BLACK);
 8017ae8:	2300      	movs	r3, #0
 8017aea:	9301      	str	r3, [sp, #4]
 8017aec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017af0:	9300      	str	r3, [sp, #0]
 8017af2:	4b22      	ldr	r3, [pc, #136]	; (8017b7c <screenInit+0x1a4>)
 8017af4:	4a22      	ldr	r2, [pc, #136]	; (8017b80 <screenInit+0x1a8>)
 8017af6:	2162      	movs	r1, #98	; 0x62
 8017af8:	2001      	movs	r0, #1
 8017afa:	f7f7 ff21 	bl	800f940 <Paint_DrawString_EN>
		Paint_DrawFloatNum (1, 110 , versionID, 2,  &Font12, BLACK, WHITE);
 8017afe:	4b21      	ldr	r3, [pc, #132]	; (8017b84 <screenInit+0x1ac>)
 8017b00:	edd3 7a00 	vldr	s15, [r3]
 8017b04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8017b08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017b0c:	9301      	str	r3, [sp, #4]
 8017b0e:	2300      	movs	r3, #0
 8017b10:	9300      	str	r3, [sp, #0]
 8017b12:	4b1a      	ldr	r3, [pc, #104]	; (8017b7c <screenInit+0x1a4>)
 8017b14:	2202      	movs	r2, #2
 8017b16:	eeb0 0b47 	vmov.f64	d0, d7
 8017b1a:	216e      	movs	r1, #110	; 0x6e
 8017b1c:	2001      	movs	r0, #1
 8017b1e:	f7f7 ff67 	bl	800f9f0 <Paint_DrawFloatNum>
		Paint_DrawString_EN(104, 98, "BuildID", &Font12, WHITE,  BLACK);
 8017b22:	2300      	movs	r3, #0
 8017b24:	9301      	str	r3, [sp, #4]
 8017b26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017b2a:	9300      	str	r3, [sp, #0]
 8017b2c:	4b13      	ldr	r3, [pc, #76]	; (8017b7c <screenInit+0x1a4>)
 8017b2e:	4a16      	ldr	r2, [pc, #88]	; (8017b88 <screenInit+0x1b0>)
 8017b30:	2162      	movs	r1, #98	; 0x62
 8017b32:	2068      	movs	r0, #104	; 0x68
 8017b34:	f7f7 ff04 	bl	800f940 <Paint_DrawString_EN>
		Paint_DrawFloatNum (124, 110 , buildID, 2,  &Font12, BLACK, WHITE);
 8017b38:	4b14      	ldr	r3, [pc, #80]	; (8017b8c <screenInit+0x1b4>)
 8017b3a:	edd3 7a00 	vldr	s15, [r3]
 8017b3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8017b42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017b46:	9301      	str	r3, [sp, #4]
 8017b48:	2300      	movs	r3, #0
 8017b4a:	9300      	str	r3, [sp, #0]
 8017b4c:	4b0b      	ldr	r3, [pc, #44]	; (8017b7c <screenInit+0x1a4>)
 8017b4e:	2202      	movs	r2, #2
 8017b50:	eeb0 0b47 	vmov.f64	d0, d7
 8017b54:	216e      	movs	r1, #110	; 0x6e
 8017b56:	207c      	movs	r0, #124	; 0x7c
 8017b58:	f7f7 ff4a 	bl	800f9f0 <Paint_DrawFloatNum>
	}


	HAL_Delay(1000);
 8017b5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017b60:	f7ea fcfc 	bl	800255c <HAL_Delay>
}
 8017b64:	bf00      	nop
 8017b66:	46bd      	mov	sp, r7
 8017b68:	bd80      	pop	{r7, pc}
 8017b6a:	bf00      	nop
 8017b6c:	2400008c 	.word	0x2400008c
 8017b70:	08010155 	.word	0x08010155
 8017b74:	080100c9 	.word	0x080100c9
 8017b78:	0802224c 	.word	0x0802224c
 8017b7c:	24000030 	.word	0x24000030
 8017b80:	080218e8 	.word	0x080218e8
 8017b84:	24000008 	.word	0x24000008
 8017b88:	080218f0 	.word	0x080218f0
 8017b8c:	2400000c 	.word	0x2400000c

08017b90 <screenClear>:

void screenClear(void)
{
 8017b90:	b580      	push	{r7, lr}
 8017b92:	af00      	add	r7, sp, #0
	if (isPortrait)
 8017b94:	4b0e      	ldr	r3, [pc, #56]	; (8017bd0 <screenClear+0x40>)
 8017b96:	781b      	ldrb	r3, [r3, #0]
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d007      	beq.n	8017bac <screenClear+0x1c>
	{
		Paint_NewImage(LCD_1IN8_HEIGHT,LCD_1IN8_WIDTH, 0, WHITE);
 8017b9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017ba0:	2200      	movs	r2, #0
 8017ba2:	21a0      	movs	r1, #160	; 0xa0
 8017ba4:	2080      	movs	r0, #128	; 0x80
 8017ba6:	f7f7 f981 	bl	800eeac <Paint_NewImage>
 8017baa:	e006      	b.n	8017bba <screenClear+0x2a>
	}
	else
	{
		Paint_NewImage(LCD_1IN8_WIDTH,LCD_1IN8_HEIGHT, 0, WHITE);
 8017bac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017bb0:	2200      	movs	r2, #0
 8017bb2:	2180      	movs	r1, #128	; 0x80
 8017bb4:	20a0      	movs	r0, #160	; 0xa0
 8017bb6:	f7f7 f979 	bl	800eeac <Paint_NewImage>
	}

	Paint_Clear(WHITE);
 8017bba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017bbe:	f7f7 fa91 	bl	800f0e4 <Paint_Clear>
	DEV_Delay_ms(1000);
 8017bc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017bc6:	f7ea fcc9 	bl	800255c <HAL_Delay>
}
 8017bca:	bf00      	nop
 8017bcc:	bd80      	pop	{r7, pc}
 8017bce:	bf00      	nop
 8017bd0:	2400008c 	.word	0x2400008c
 8017bd4:	00000000 	.word	0x00000000

08017bd8 <centeredString>:

void centeredString(UWORD XCenterstart, UWORD Ystart, const char * pString, uint16_t textColor, uint16_t backgroundColor, uint8_t numberOfCharactersToClear, sFONT localFont)
{
 8017bd8:	b590      	push	{r4, r7, lr}
 8017bda:	b089      	sub	sp, #36	; 0x24
 8017bdc:	af02      	add	r7, sp, #8
 8017bde:	60ba      	str	r2, [r7, #8]
 8017be0:	461a      	mov	r2, r3
 8017be2:	4603      	mov	r3, r0
 8017be4:	81fb      	strh	r3, [r7, #14]
 8017be6:	460b      	mov	r3, r1
 8017be8:	81bb      	strh	r3, [r7, #12]
 8017bea:	4613      	mov	r3, r2
 8017bec:	80fb      	strh	r3, [r7, #6]
	uint8_t Xstart = 0;
 8017bee:	2300      	movs	r3, #0
 8017bf0:	75fb      	strb	r3, [r7, #23]

	Xstart = fmax( XCenterstart - numberOfCharactersToClear * localFont.Width / 2, 0) ;
 8017bf2:	89fa      	ldrh	r2, [r7, #14]
 8017bf4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017bf8:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8017bfa:	fb01 f303 	mul.w	r3, r1, r3
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	da00      	bge.n	8017c04 <centeredString+0x2c>
 8017c02:	3301      	adds	r3, #1
 8017c04:	105b      	asrs	r3, r3, #1
 8017c06:	425b      	negs	r3, r3
 8017c08:	4413      	add	r3, r2
 8017c0a:	ee07 3a90 	vmov	s15, r3
 8017c0e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017c12:	ed9f 1b57 	vldr	d1, [pc, #348]	; 8017d70 <centeredString+0x198>
 8017c16:	eeb0 0b47 	vmov.f64	d0, d7
 8017c1a:	f009 fa73 	bl	8021104 <fmax>
 8017c1e:	eeb0 7b40 	vmov.f64	d7, d0
 8017c22:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8017c26:	edc7 7a00 	vstr	s15, [r7]
 8017c2a:	683b      	ldr	r3, [r7, #0]
 8017c2c:	75fb      	strb	r3, [r7, #23]
//	Paint_DrawString_EN(Xstart, Ystart, "MAINTENANCE", &Font12, WHITE,  WHITE);
	if (!renderCompleteFrame)
 8017c2e:	4b52      	ldr	r3, [pc, #328]	; (8017d78 <centeredString+0x1a0>)
 8017c30:	781b      	ldrb	r3, [r3, #0]
 8017c32:	f083 0301 	eor.w	r3, r3, #1
 8017c36:	b2db      	uxtb	r3, r3
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d018      	beq.n	8017c6e <centeredString+0x96>
	{
		Paint_ClearWindows(Xstart, Ystart, Xstart + numberOfCharactersToClear * localFont.Width, Ystart + localFont.Height, WHITE);
 8017c3c:	7dfb      	ldrb	r3, [r7, #23]
 8017c3e:	b298      	uxth	r0, r3
 8017c40:	7dfb      	ldrb	r3, [r7, #23]
 8017c42:	b29a      	uxth	r2, r3
 8017c44:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017c48:	b299      	uxth	r1, r3
 8017c4a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017c4c:	fb11 f303 	smulbb	r3, r1, r3
 8017c50:	b29b      	uxth	r3, r3
 8017c52:	4413      	add	r3, r2
 8017c54:	b29c      	uxth	r4, r3
 8017c56:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8017c58:	89bb      	ldrh	r3, [r7, #12]
 8017c5a:	4413      	add	r3, r2
 8017c5c:	b29b      	uxth	r3, r3
 8017c5e:	89b9      	ldrh	r1, [r7, #12]
 8017c60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017c64:	9200      	str	r2, [sp, #0]
 8017c66:	4622      	mov	r2, r4
 8017c68:	f7f7 fa4c 	bl	800f104 <Paint_ClearWindows>
 8017c6c:	e04e      	b.n	8017d0c <centeredString+0x134>
	}
	else if ( (renderCompleteFrame) && (!isMenuDisplayed) && (!isPopupDisplayed) )
 8017c6e:	4b42      	ldr	r3, [pc, #264]	; (8017d78 <centeredString+0x1a0>)
 8017c70:	781b      	ldrb	r3, [r3, #0]
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d026      	beq.n	8017cc4 <centeredString+0xec>
 8017c76:	4b41      	ldr	r3, [pc, #260]	; (8017d7c <centeredString+0x1a4>)
 8017c78:	781b      	ldrb	r3, [r3, #0]
 8017c7a:	f083 0301 	eor.w	r3, r3, #1
 8017c7e:	b2db      	uxtb	r3, r3
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d01f      	beq.n	8017cc4 <centeredString+0xec>
 8017c84:	4b3e      	ldr	r3, [pc, #248]	; (8017d80 <centeredString+0x1a8>)
 8017c86:	781b      	ldrb	r3, [r3, #0]
 8017c88:	f083 0301 	eor.w	r3, r3, #1
 8017c8c:	b2db      	uxtb	r3, r3
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d018      	beq.n	8017cc4 <centeredString+0xec>
	{
		Paint_ClearWindows(Xstart, Ystart, Xstart + numberOfCharactersToClear * localFont.Width, Ystart + localFont.Height, backgroundColor);
 8017c92:	7dfb      	ldrb	r3, [r7, #23]
 8017c94:	b298      	uxth	r0, r3
 8017c96:	7dfb      	ldrb	r3, [r7, #23]
 8017c98:	b29a      	uxth	r2, r3
 8017c9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017c9e:	b299      	uxth	r1, r3
 8017ca0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017ca2:	fb11 f303 	smulbb	r3, r1, r3
 8017ca6:	b29b      	uxth	r3, r3
 8017ca8:	4413      	add	r3, r2
 8017caa:	b29c      	uxth	r4, r3
 8017cac:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8017cae:	89bb      	ldrh	r3, [r7, #12]
 8017cb0:	4413      	add	r3, r2
 8017cb2:	b29a      	uxth	r2, r3
 8017cb4:	89b9      	ldrh	r1, [r7, #12]
 8017cb6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017cb8:	9300      	str	r3, [sp, #0]
 8017cba:	4613      	mov	r3, r2
 8017cbc:	4622      	mov	r2, r4
 8017cbe:	f7f7 fa21 	bl	800f104 <Paint_ClearWindows>
 8017cc2:	e023      	b.n	8017d0c <centeredString+0x134>
	}
	else if ( (renderCompleteFrame) && ( (isMenuDisplayed) || (isPopupDisplayed) ) )
 8017cc4:	4b2c      	ldr	r3, [pc, #176]	; (8017d78 <centeredString+0x1a0>)
 8017cc6:	781b      	ldrb	r3, [r3, #0]
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d01f      	beq.n	8017d0c <centeredString+0x134>
 8017ccc:	4b2b      	ldr	r3, [pc, #172]	; (8017d7c <centeredString+0x1a4>)
 8017cce:	781b      	ldrb	r3, [r3, #0]
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	d103      	bne.n	8017cdc <centeredString+0x104>
 8017cd4:	4b2a      	ldr	r3, [pc, #168]	; (8017d80 <centeredString+0x1a8>)
 8017cd6:	781b      	ldrb	r3, [r3, #0]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d017      	beq.n	8017d0c <centeredString+0x134>
	{
		Paint_ClearWindows(Xstart, Ystart, Xstart + numberOfCharactersToClear * localFont.Width, Ystart + localFont.Height, WHITE);
 8017cdc:	7dfb      	ldrb	r3, [r7, #23]
 8017cde:	b298      	uxth	r0, r3
 8017ce0:	7dfb      	ldrb	r3, [r7, #23]
 8017ce2:	b29a      	uxth	r2, r3
 8017ce4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017ce8:	b299      	uxth	r1, r3
 8017cea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017cec:	fb11 f303 	smulbb	r3, r1, r3
 8017cf0:	b29b      	uxth	r3, r3
 8017cf2:	4413      	add	r3, r2
 8017cf4:	b29c      	uxth	r4, r3
 8017cf6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8017cf8:	89bb      	ldrh	r3, [r7, #12]
 8017cfa:	4413      	add	r3, r2
 8017cfc:	b29b      	uxth	r3, r3
 8017cfe:	89b9      	ldrh	r1, [r7, #12]
 8017d00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017d04:	9200      	str	r2, [sp, #0]
 8017d06:	4622      	mov	r2, r4
 8017d08:	f7f7 f9fc 	bl	800f104 <Paint_ClearWindows>
	}
	Xstart = strlen(pString);
 8017d0c:	68b8      	ldr	r0, [r7, #8]
 8017d0e:	f7e8 faf1 	bl	80002f4 <strlen>
 8017d12:	4603      	mov	r3, r0
 8017d14:	75fb      	strb	r3, [r7, #23]
	Xstart = fmax( XCenterstart - strlen(pString) * localFont.Width / 2, 0) ;
 8017d16:	89fc      	ldrh	r4, [r7, #14]
 8017d18:	68b8      	ldr	r0, [r7, #8]
 8017d1a:	f7e8 faeb 	bl	80002f4 <strlen>
 8017d1e:	4603      	mov	r3, r0
 8017d20:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8017d22:	fb02 f303 	mul.w	r3, r2, r3
 8017d26:	085b      	lsrs	r3, r3, #1
 8017d28:	1ae3      	subs	r3, r4, r3
 8017d2a:	ee07 3a90 	vmov	s15, r3
 8017d2e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8017d32:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8017d70 <centeredString+0x198>
 8017d36:	eeb0 0b47 	vmov.f64	d0, d7
 8017d3a:	f009 f9e3 	bl	8021104 <fmax>
 8017d3e:	eeb0 7b40 	vmov.f64	d7, d0
 8017d42:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8017d46:	edc7 7a00 	vstr	s15, [r7]
 8017d4a:	683b      	ldr	r3, [r7, #0]
 8017d4c:	75fb      	strb	r3, [r7, #23]
	Paint_DrawString_EN(Xstart, Ystart, pString, &localFont, backgroundColor,  textColor);
 8017d4e:	7dfb      	ldrb	r3, [r7, #23]
 8017d50:	b298      	uxth	r0, r3
 8017d52:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8017d56:	89b9      	ldrh	r1, [r7, #12]
 8017d58:	88fb      	ldrh	r3, [r7, #6]
 8017d5a:	9301      	str	r3, [sp, #4]
 8017d5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017d5e:	9300      	str	r3, [sp, #0]
 8017d60:	4613      	mov	r3, r2
 8017d62:	68ba      	ldr	r2, [r7, #8]
 8017d64:	f7f7 fdec 	bl	800f940 <Paint_DrawString_EN>
}
 8017d68:	bf00      	nop
 8017d6a:	371c      	adds	r7, #28
 8017d6c:	46bd      	mov	sp, r7
 8017d6e:	bd90      	pop	{r4, r7, pc}
	...
 8017d78:	2400ae58 	.word	0x2400ae58
 8017d7c:	2400ae52 	.word	0x2400ae52
 8017d80:	2400ae57 	.word	0x2400ae57

08017d84 <showAngles>:

void showAngles(void)
{
 8017d84:	b580      	push	{r7, lr}
 8017d86:	b08a      	sub	sp, #40	; 0x28
 8017d88:	af02      	add	r7, sp, #8
	char localT[32] = "";
 8017d8a:	2300      	movs	r3, #0
 8017d8c:	603b      	str	r3, [r7, #0]
 8017d8e:	1d3b      	adds	r3, r7, #4
 8017d90:	2200      	movs	r2, #0
 8017d92:	601a      	str	r2, [r3, #0]
 8017d94:	605a      	str	r2, [r3, #4]
 8017d96:	609a      	str	r2, [r3, #8]
 8017d98:	60da      	str	r2, [r3, #12]
 8017d9a:	611a      	str	r2, [r3, #16]
 8017d9c:	615a      	str	r2, [r3, #20]
 8017d9e:	619a      	str	r2, [r3, #24]

	snprintf(localT,sizeof(localT),"R: %04.3f", receivedAnglesData->bodyAngles.Roll);
 8017da0:	4b2a      	ldr	r3, [pc, #168]	; (8017e4c <showAngles+0xc8>)
 8017da2:	681b      	ldr	r3, [r3, #0]
 8017da4:	edd3 7a01 	vldr	s15, [r3, #4]
 8017da8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8017dac:	463b      	mov	r3, r7
 8017dae:	ed8d 7b00 	vstr	d7, [sp]
 8017db2:	4a27      	ldr	r2, [pc, #156]	; (8017e50 <showAngles+0xcc>)
 8017db4:	2120      	movs	r1, #32
 8017db6:	4618      	mov	r0, r3
 8017db8:	f005 fddc 	bl	801d974 <sniprintf>
	Paint_DrawString_EN(VerticalRollChasisX, VerticalRollChasisY, (char *)localT, &Font8, WHITE, BLACK);
 8017dbc:	463a      	mov	r2, r7
 8017dbe:	2300      	movs	r3, #0
 8017dc0:	9301      	str	r3, [sp, #4]
 8017dc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017dc6:	9300      	str	r3, [sp, #0]
 8017dc8:	4b22      	ldr	r3, [pc, #136]	; (8017e54 <showAngles+0xd0>)
 8017dca:	218c      	movs	r1, #140	; 0x8c
 8017dcc:	2002      	movs	r0, #2
 8017dce:	f7f7 fdb7 	bl	800f940 <Paint_DrawString_EN>

	memset(localT,0,32);
 8017dd2:	463b      	mov	r3, r7
 8017dd4:	2220      	movs	r2, #32
 8017dd6:	2100      	movs	r1, #0
 8017dd8:	4618      	mov	r0, r3
 8017dda:	f004 fcd5 	bl	801c788 <memset>
	snprintf(localT,sizeof(localT),"P: %04.3f", receivedAnglesData->bodyAngles.Pitch);
 8017dde:	4b1b      	ldr	r3, [pc, #108]	; (8017e4c <showAngles+0xc8>)
 8017de0:	681b      	ldr	r3, [r3, #0]
 8017de2:	edd3 7a02 	vldr	s15, [r3, #8]
 8017de6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8017dea:	463b      	mov	r3, r7
 8017dec:	ed8d 7b00 	vstr	d7, [sp]
 8017df0:	4a19      	ldr	r2, [pc, #100]	; (8017e58 <showAngles+0xd4>)
 8017df2:	2120      	movs	r1, #32
 8017df4:	4618      	mov	r0, r3
 8017df6:	f005 fdbd 	bl	801d974 <sniprintf>
	Paint_DrawString_EN(VerticalPitchChasisX, VerticalPitchChasisY, (char *)localT, &Font8, WHITE, BLACK);
 8017dfa:	463a      	mov	r2, r7
 8017dfc:	2300      	movs	r3, #0
 8017dfe:	9301      	str	r3, [sp, #4]
 8017e00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017e04:	9300      	str	r3, [sp, #0]
 8017e06:	4b13      	ldr	r3, [pc, #76]	; (8017e54 <showAngles+0xd0>)
 8017e08:	218c      	movs	r1, #140	; 0x8c
 8017e0a:	2044      	movs	r0, #68	; 0x44
 8017e0c:	f7f7 fd98 	bl	800f940 <Paint_DrawString_EN>

	memset(localT,0,32);
 8017e10:	463b      	mov	r3, r7
 8017e12:	2220      	movs	r2, #32
 8017e14:	2100      	movs	r1, #0
 8017e16:	4618      	mov	r0, r3
 8017e18:	f004 fcb6 	bl	801c788 <memset>
	snprintf(localT,sizeof(localT),"Y: %04.3f", receivedAnglesData->bodyAngles.Yaw);
 8017e1c:	4b0b      	ldr	r3, [pc, #44]	; (8017e4c <showAngles+0xc8>)
 8017e1e:	681b      	ldr	r3, [r3, #0]
 8017e20:	edd3 7a03 	vldr	s15, [r3, #12]
 8017e24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8017e28:	463b      	mov	r3, r7
 8017e2a:	ed8d 7b00 	vstr	d7, [sp]
 8017e2e:	4a0b      	ldr	r2, [pc, #44]	; (8017e5c <showAngles+0xd8>)
 8017e30:	2120      	movs	r1, #32
 8017e32:	4618      	mov	r0, r3
 8017e34:	f005 fd9e 	bl	801d974 <sniprintf>
//	Paint_DrawString_EN(VerticalYawChasisX, VerticalYawChasisY, (char *)localT, &Font8, WHITE, BLACK);
	memset(localT,0,32);
 8017e38:	463b      	mov	r3, r7
 8017e3a:	2220      	movs	r2, #32
 8017e3c:	2100      	movs	r1, #0
 8017e3e:	4618      	mov	r0, r3
 8017e40:	f004 fca2 	bl	801c788 <memset>
}
 8017e44:	bf00      	nop
 8017e46:	3720      	adds	r7, #32
 8017e48:	46bd      	mov	sp, r7
 8017e4a:	bd80      	pop	{r7, pc}
 8017e4c:	2400af7c 	.word	0x2400af7c
 8017e50:	080218f8 	.word	0x080218f8
 8017e54:	24000038 	.word	0x24000038
 8017e58:	08021904 	.word	0x08021904
 8017e5c:	08021910 	.word	0x08021910

08017e60 <showLIDAR>:

void showLIDAR(void)
{
 8017e60:	b590      	push	{r4, r7, lr}
 8017e62:	b085      	sub	sp, #20
 8017e64:	af04      	add	r7, sp, #16
	Paint_DrawCircle(  lidarCenterX, lidarCenterY, 50, BLUE, DOT_PIXEL_2X2, DRAW_FILL_EMPTY );
 8017e66:	2300      	movs	r3, #0
 8017e68:	9301      	str	r3, [sp, #4]
 8017e6a:	2302      	movs	r3, #2
 8017e6c:	9300      	str	r3, [sp, #0]
 8017e6e:	231f      	movs	r3, #31
 8017e70:	2232      	movs	r2, #50	; 0x32
 8017e72:	214c      	movs	r1, #76	; 0x4c
 8017e74:	2040      	movs	r0, #64	; 0x40
 8017e76:	f7f7 fb47 	bl	800f508 <Paint_DrawCircle>
	Paint_DrawCircle(  lidarCenterX, lidarCenterY, 1, RED, DOT_PIXEL_2X2, DRAW_FILL_FULL );
 8017e7a:	2301      	movs	r3, #1
 8017e7c:	9301      	str	r3, [sp, #4]
 8017e7e:	2302      	movs	r3, #2
 8017e80:	9300      	str	r3, [sp, #0]
 8017e82:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8017e86:	2201      	movs	r2, #1
 8017e88:	214c      	movs	r1, #76	; 0x4c
 8017e8a:	2040      	movs	r0, #64	; 0x40
 8017e8c:	f7f7 fb3c 	bl	800f508 <Paint_DrawCircle>

	if (HAL_GetTick() - lastLidarBoresight >= 40)
 8017e90:	f7ea fb58 	bl	8002544 <HAL_GetTick>
 8017e94:	4602      	mov	r2, r0
 8017e96:	4b48      	ldr	r3, [pc, #288]	; (8017fb8 <showLIDAR+0x158>)
 8017e98:	681b      	ldr	r3, [r3, #0]
 8017e9a:	1ad3      	subs	r3, r2, r3
 8017e9c:	2b27      	cmp	r3, #39	; 0x27
 8017e9e:	d927      	bls.n	8017ef0 <showLIDAR+0x90>
	{
		currentLidarAngle = (float)((uint32_t)(1.8 * (HAL_GetTick() - lastLidarBoresight)) % (360));
 8017ea0:	f7ea fb50 	bl	8002544 <HAL_GetTick>
 8017ea4:	4602      	mov	r2, r0
 8017ea6:	4b44      	ldr	r3, [pc, #272]	; (8017fb8 <showLIDAR+0x158>)
 8017ea8:	681b      	ldr	r3, [r3, #0]
 8017eaa:	1ad3      	subs	r3, r2, r3
 8017eac:	ee07 3a90 	vmov	s15, r3
 8017eb0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8017eb4:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8017fa0 <showLIDAR+0x140>
 8017eb8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017ebc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8017ec0:	ee17 2a90 	vmov	r2, s15
 8017ec4:	08d3      	lsrs	r3, r2, #3
 8017ec6:	493d      	ldr	r1, [pc, #244]	; (8017fbc <showLIDAR+0x15c>)
 8017ec8:	fba1 1303 	umull	r1, r3, r1, r3
 8017ecc:	089b      	lsrs	r3, r3, #2
 8017ece:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8017ed2:	fb01 f303 	mul.w	r3, r1, r3
 8017ed6:	1ad3      	subs	r3, r2, r3
 8017ed8:	ee07 3a90 	vmov	s15, r3
 8017edc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017ee0:	4b37      	ldr	r3, [pc, #220]	; (8017fc0 <showLIDAR+0x160>)
 8017ee2:	edc3 7a00 	vstr	s15, [r3]
		lastLidarBoresight = HAL_GetTick();
 8017ee6:	f7ea fb2d 	bl	8002544 <HAL_GetTick>
 8017eea:	4603      	mov	r3, r0
 8017eec:	4a32      	ldr	r2, [pc, #200]	; (8017fb8 <showLIDAR+0x158>)
 8017eee:	6013      	str	r3, [r2, #0]
	}
	Paint_DrawLine(lidarCenterX, lidarCenterY, lidarCenterX + lidarRadius * cosf(receivedAnglesData->bodyAngles.Yaw * AHRSIMU_DEG2RAD),
 8017ef0:	4b34      	ldr	r3, [pc, #208]	; (8017fc4 <showLIDAR+0x164>)
 8017ef2:	681b      	ldr	r3, [r3, #0]
 8017ef4:	edd3 7a03 	vldr	s15, [r3, #12]
 8017ef8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8017efc:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8017fa8 <showLIDAR+0x148>
 8017f00:	ee27 6b06 	vmul.f64	d6, d7, d6
 8017f04:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8017fb0 <showLIDAR+0x150>
 8017f08:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8017f0c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8017f10:	eeb0 0a67 	vmov.f32	s0, s15
 8017f14:	f009 f848 	bl	8020fa8 <cosf>
 8017f18:	eef0 7a40 	vmov.f32	s15, s0
 8017f1c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8017fc8 <showLIDAR+0x168>
 8017f20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017f24:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8017fcc <showLIDAR+0x16c>
 8017f28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017f2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017f30:	ee17 3a90 	vmov	r3, s15
 8017f34:	b29c      	uxth	r4, r3
			lidarCenterY + lidarRadius * sinf(receivedAnglesData->bodyAngles.Yaw * AHRSIMU_DEG2RAD), DARKBLUE, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 8017f36:	4b23      	ldr	r3, [pc, #140]	; (8017fc4 <showLIDAR+0x164>)
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	edd3 7a03 	vldr	s15, [r3, #12]
 8017f3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8017f42:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8017fa8 <showLIDAR+0x148>
 8017f46:	ee27 6b06 	vmul.f64	d6, d7, d6
 8017f4a:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8017fb0 <showLIDAR+0x150>
 8017f4e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8017f52:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8017f56:	eeb0 0a67 	vmov.f32	s0, s15
 8017f5a:	f009 f95d 	bl	8021218 <sinf>
 8017f5e:	eef0 7a40 	vmov.f32	s15, s0
 8017f62:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8017fc8 <showLIDAR+0x168>
 8017f66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017f6a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8017fd0 <showLIDAR+0x170>
 8017f6e:	ee77 7a87 	vadd.f32	s15, s15, s14
	Paint_DrawLine(lidarCenterX, lidarCenterY, lidarCenterX + lidarRadius * cosf(receivedAnglesData->bodyAngles.Yaw * AHRSIMU_DEG2RAD),
 8017f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017f76:	ee17 3a90 	vmov	r3, s15
 8017f7a:	b29b      	uxth	r3, r3
 8017f7c:	2200      	movs	r2, #0
 8017f7e:	9202      	str	r2, [sp, #8]
 8017f80:	2201      	movs	r2, #1
 8017f82:	9201      	str	r2, [sp, #4]
 8017f84:	f240 12cf 	movw	r2, #463	; 0x1cf
 8017f88:	9200      	str	r2, [sp, #0]
 8017f8a:	4622      	mov	r2, r4
 8017f8c:	214c      	movs	r1, #76	; 0x4c
 8017f8e:	2040      	movs	r0, #64	; 0x40
 8017f90:	f7f7 f982 	bl	800f298 <Paint_DrawLine>

}
 8017f94:	bf00      	nop
 8017f96:	3704      	adds	r7, #4
 8017f98:	46bd      	mov	sp, r7
 8017f9a:	bd90      	pop	{r4, r7, pc}
 8017f9c:	f3af 8000 	nop.w
 8017fa0:	cccccccd 	.word	0xcccccccd
 8017fa4:	3ffccccc 	.word	0x3ffccccc
 8017fa8:	54442d18 	.word	0x54442d18
 8017fac:	400921fb 	.word	0x400921fb
 8017fb0:	00000000 	.word	0x00000000
 8017fb4:	40668000 	.word	0x40668000
 8017fb8:	2400ae60 	.word	0x2400ae60
 8017fbc:	16c16c17 	.word	0x16c16c17
 8017fc0:	2400ae64 	.word	0x2400ae64
 8017fc4:	2400af7c 	.word	0x2400af7c
 8017fc8:	42480000 	.word	0x42480000
 8017fcc:	42800000 	.word	0x42800000
 8017fd0:	42980000 	.word	0x42980000

08017fd4 <screenUpdate>:



void screenUpdate(bool drawDeltaImage)
{
 8017fd4:	b580      	push	{r7, lr}
 8017fd6:	b082      	sub	sp, #8
 8017fd8:	af00      	add	r7, sp, #0
 8017fda:	4603      	mov	r3, r0
 8017fdc:	71fb      	strb	r3, [r7, #7]
//	numberOfDisplayedSafeAirIcons = 1 * isAutoPilotDisplayed + 1 * isPlatformDisplayed +
//			1 * isTriggerModeDisplayed + 1 * isSafeAirBatteryDisplayed;
//	setIconPositionOnScreen();
	if ( (!isMenuDisplayed) && (!isPopupDisplayed) )
 8017fde:	4b21      	ldr	r3, [pc, #132]	; (8018064 <screenUpdate+0x90>)
 8017fe0:	781b      	ldrb	r3, [r3, #0]
 8017fe2:	f083 0301 	eor.w	r3, r3, #1
 8017fe6:	b2db      	uxtb	r3, r3
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d00e      	beq.n	801800a <screenUpdate+0x36>
 8017fec:	4b1e      	ldr	r3, [pc, #120]	; (8018068 <screenUpdate+0x94>)
 8017fee:	781b      	ldrb	r3, [r3, #0]
 8017ff0:	f083 0301 	eor.w	r3, r3, #1
 8017ff4:	b2db      	uxtb	r3, r3
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d007      	beq.n	801800a <screenUpdate+0x36>
	{
		createEmptyFrame(false);
 8017ffa:	2000      	movs	r0, #0
 8017ffc:	f001 fa26 	bl	801944c <createEmptyFrame>
		showAngles();
 8018000:	f7ff fec0 	bl	8017d84 <showAngles>
		showLIDAR();
 8018004:	f7ff ff2c 	bl	8017e60 <showLIDAR>
 8018008:	e01f      	b.n	801804a <screenUpdate+0x76>
	}
	else if (isMenuDisplayed)
 801800a:	4b16      	ldr	r3, [pc, #88]	; (8018064 <screenUpdate+0x90>)
 801800c:	781b      	ldrb	r3, [r3, #0]
 801800e:	2b00      	cmp	r3, #0
 8018010:	d01b      	beq.n	801804a <screenUpdate+0x76>
	{
		if (shouldRenderMenu)
 8018012:	4b16      	ldr	r3, [pc, #88]	; (801806c <screenUpdate+0x98>)
 8018014:	781b      	ldrb	r3, [r3, #0]
 8018016:	2b00      	cmp	r3, #0
 8018018:	d00a      	beq.n	8018030 <screenUpdate+0x5c>
		{
			drawMenu(shouldClearScreen, menuDrawDirection);
 801801a:	4b15      	ldr	r3, [pc, #84]	; (8018070 <screenUpdate+0x9c>)
 801801c:	781b      	ldrb	r3, [r3, #0]
 801801e:	4a15      	ldr	r2, [pc, #84]	; (8018074 <screenUpdate+0xa0>)
 8018020:	7812      	ldrb	r2, [r2, #0]
 8018022:	4611      	mov	r1, r2
 8018024:	4618      	mov	r0, r3
 8018026:	f000 f82d 	bl	8018084 <drawMenu>
			shouldRenderMenu = false;
 801802a:	4b10      	ldr	r3, [pc, #64]	; (801806c <screenUpdate+0x98>)
 801802c:	2200      	movs	r2, #0
 801802e:	701a      	strb	r2, [r3, #0]
		}
		if (shouldRenderItem)
 8018030:	4b11      	ldr	r3, [pc, #68]	; (8018078 <screenUpdate+0xa4>)
 8018032:	781b      	ldrb	r3, [r3, #0]
 8018034:	2b00      	cmp	r3, #0
 8018036:	d008      	beq.n	801804a <screenUpdate+0x76>
		{
			drawItem(false, itemDrawDirection);
 8018038:	4b10      	ldr	r3, [pc, #64]	; (801807c <screenUpdate+0xa8>)
 801803a:	781b      	ldrb	r3, [r3, #0]
 801803c:	4619      	mov	r1, r3
 801803e:	2000      	movs	r0, #0
 8018040:	f000 f9c4 	bl	80183cc <drawItem>
			shouldRenderItem = false;
 8018044:	4b0c      	ldr	r3, [pc, #48]	; (8018078 <screenUpdate+0xa4>)
 8018046:	2200      	movs	r2, #0
 8018048:	701a      	strb	r2, [r3, #0]
		}

	} // End of is Menu displayed
	if(shouldRenderPopup)
 801804a:	4b0d      	ldr	r3, [pc, #52]	; (8018080 <screenUpdate+0xac>)
 801804c:	781b      	ldrb	r3, [r3, #0]
 801804e:	2b00      	cmp	r3, #0
 8018050:	d004      	beq.n	801805c <screenUpdate+0x88>
	{
		drawPopup();
 8018052:	f000 fa7b 	bl	801854c <drawPopup>
		shouldRenderPopup = false;
 8018056:	4b0a      	ldr	r3, [pc, #40]	; (8018080 <screenUpdate+0xac>)
 8018058:	2200      	movs	r2, #0
 801805a:	701a      	strb	r2, [r3, #0]
	}
}
 801805c:	bf00      	nop
 801805e:	3708      	adds	r7, #8
 8018060:	46bd      	mov	sp, r7
 8018062:	bd80      	pop	{r7, pc}
 8018064:	2400ae52 	.word	0x2400ae52
 8018068:	2400ae57 	.word	0x2400ae57
 801806c:	2400ae51 	.word	0x2400ae51
 8018070:	2400ae53 	.word	0x2400ae53
 8018074:	2400008d 	.word	0x2400008d
 8018078:	2400ae54 	.word	0x2400ae54
 801807c:	2400008e 	.word	0x2400008e
 8018080:	2400ae56 	.word	0x2400ae56

08018084 <drawMenu>:

void drawMenu(bool clearScreen, MENUDRAWType howToDraw)
{
 8018084:	b5b0      	push	{r4, r5, r7, lr}
 8018086:	b08a      	sub	sp, #40	; 0x28
 8018088:	af04      	add	r7, sp, #16
 801808a:	4603      	mov	r3, r0
 801808c:	460a      	mov	r2, r1
 801808e:	71fb      	strb	r3, [r7, #7]
 8018090:	4613      	mov	r3, r2
 8018092:	71bb      	strb	r3, [r7, #6]
	if (clearScreen)
 8018094:	79fb      	ldrb	r3, [r7, #7]
 8018096:	2b00      	cmp	r3, #0
 8018098:	d006      	beq.n	80180a8 <drawMenu+0x24>
	{
		Paint_Clear(WHITE);
 801809a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801809e:	f7f7 f821 	bl	800f0e4 <Paint_Clear>
		createEmptyFrame(true);
 80180a2:	2001      	movs	r0, #1
 80180a4:	f001 f9d2 	bl	801944c <createEmptyFrame>
	}

	uint8_t MenuRectangleStartX = 0;
 80180a8:	2300      	movs	r3, #0
 80180aa:	75fb      	strb	r3, [r7, #23]
	uint8_t MenuRectangleStartY = 0;
 80180ac:	2300      	movs	r3, #0
 80180ae:	75bb      	strb	r3, [r7, #22]
	uint8_t MenuRectangleHeight = 0;
 80180b0:	2300      	movs	r3, #0
 80180b2:	757b      	strb	r3, [r7, #21]
	uint8_t MenuRectangleWidth = 0;
 80180b4:	2300      	movs	r3, #0
 80180b6:	753b      	strb	r3, [r7, #20]
	uint8_t DisplayCenterWidth = 0;
 80180b8:	2300      	movs	r3, #0
 80180ba:	74fb      	strb	r3, [r7, #19]

	if (isPortrait)
 80180bc:	4b89      	ldr	r3, [pc, #548]	; (80182e4 <drawMenu+0x260>)
 80180be:	781b      	ldrb	r3, [r3, #0]
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d009      	beq.n	80180d8 <drawMenu+0x54>
	{
		MenuRectangleStartX = VerticalMenuRectangleStartX;
 80180c4:	2302      	movs	r3, #2
 80180c6:	75fb      	strb	r3, [r7, #23]
		MenuRectangleStartY = VerticalMenuRectangleStartY;
 80180c8:	230c      	movs	r3, #12
 80180ca:	75bb      	strb	r3, [r7, #22]
		MenuRectangleHeight = VerticalMenuRectangleHeight;
 80180cc:	230e      	movs	r3, #14
 80180ce:	757b      	strb	r3, [r7, #21]
		MenuRectangleWidth = VerticalMenuRectangleWidth;
 80180d0:	237c      	movs	r3, #124	; 0x7c
 80180d2:	753b      	strb	r3, [r7, #20]
		DisplayCenterWidth = VerticalDisplayCenterWidth;
 80180d4:	2340      	movs	r3, #64	; 0x40
 80180d6:	74fb      	strb	r3, [r7, #19]
//		MenuRectangleHeight = HorizontalMenuRectangleHeight;
//		MenuRectangleWidth = HorizontalMenuRectangleWidth;
//		DisplayCenterWidth = HorizontalDisplayCenterWidth;
	}

	if (howToDraw == FULL)
 80180d8:	79bb      	ldrb	r3, [r7, #6]
 80180da:	2b02      	cmp	r3, #2
 80180dc:	f040 809f 	bne.w	801821e <drawMenu+0x19a>
	{
		for (int i = 0; i < pagesArray[currentCursorPosition.currentPageID].numberOfItemsInPage; i++)
 80180e0:	2300      	movs	r3, #0
 80180e2:	60fb      	str	r3, [r7, #12]
 80180e4:	e08a      	b.n	80181fc <drawMenu+0x178>
		{
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 80180e6:	7dfb      	ldrb	r3, [r7, #23]
 80180e8:	b298      	uxth	r0, r3
 80180ea:	7dbb      	ldrb	r3, [r7, #22]
 80180ec:	b29a      	uxth	r2, r3
 80180ee:	7d7b      	ldrb	r3, [r7, #21]
 80180f0:	b299      	uxth	r1, r3
 80180f2:	68fb      	ldr	r3, [r7, #12]
 80180f4:	b29b      	uxth	r3, r3
 80180f6:	fb11 f303 	smulbb	r3, r1, r3
 80180fa:	b29b      	uxth	r3, r3
 80180fc:	4413      	add	r3, r2
 80180fe:	b29c      	uxth	r4, r3
 8018100:	7dfb      	ldrb	r3, [r7, #23]
 8018102:	b29a      	uxth	r2, r3
 8018104:	7d3b      	ldrb	r3, [r7, #20]
 8018106:	b29b      	uxth	r3, r3
 8018108:	4413      	add	r3, r2
 801810a:	b29d      	uxth	r5, r3
 801810c:	7dbb      	ldrb	r3, [r7, #22]
 801810e:	b29a      	uxth	r2, r3
 8018110:	7d7b      	ldrb	r3, [r7, #21]
 8018112:	b299      	uxth	r1, r3
					MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * ( i + 1),
 8018114:	68fb      	ldr	r3, [r7, #12]
 8018116:	3301      	adds	r3, #1
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 8018118:	b29b      	uxth	r3, r3
 801811a:	fb11 f303 	smulbb	r3, r1, r3
 801811e:	b29b      	uxth	r3, r3
 8018120:	4413      	add	r3, r2
 8018122:	b29b      	uxth	r3, r3
 8018124:	2200      	movs	r2, #0
 8018126:	9202      	str	r2, [sp, #8]
 8018128:	2201      	movs	r2, #1
 801812a:	9201      	str	r2, [sp, #4]
 801812c:	2200      	movs	r2, #0
 801812e:	9200      	str	r2, [sp, #0]
 8018130:	462a      	mov	r2, r5
 8018132:	4621      	mov	r1, r4
 8018134:	f7f7 f960 	bl	800f3f8 <Paint_DrawRectangle>
					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			if (i == currentCursorPosition.cursorPosition)
 8018138:	4b6b      	ldr	r3, [pc, #428]	; (80182e8 <drawMenu+0x264>)
 801813a:	781b      	ldrb	r3, [r3, #0]
 801813c:	461a      	mov	r2, r3
 801813e:	68fb      	ldr	r3, [r7, #12]
 8018140:	4293      	cmp	r3, r2
 8018142:	d12c      	bne.n	801819e <drawMenu+0x11a>
			{
				centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * i,
 8018144:	7cfb      	ldrb	r3, [r7, #19]
 8018146:	b29c      	uxth	r4, r3
 8018148:	7dbb      	ldrb	r3, [r7, #22]
 801814a:	b29a      	uxth	r2, r3
 801814c:	7d7b      	ldrb	r3, [r7, #21]
 801814e:	b299      	uxth	r1, r3
 8018150:	68fb      	ldr	r3, [r7, #12]
 8018152:	b29b      	uxth	r3, r3
 8018154:	fb11 f303 	smulbb	r3, r1, r3
 8018158:	b29b      	uxth	r3, r3
 801815a:	4413      	add	r3, r2
 801815c:	b29b      	uxth	r3, r3
 801815e:	3301      	adds	r3, #1
 8018160:	b29d      	uxth	r5, r3
						pagesArray[currentCursorPosition.currentPageID].itemsArray[i], BLACK, LGRAY, 16, Font12);
 8018162:	4b61      	ldr	r3, [pc, #388]	; (80182e8 <drawMenu+0x264>)
 8018164:	785b      	ldrb	r3, [r3, #1]
 8018166:	4619      	mov	r1, r3
 8018168:	68fb      	ldr	r3, [r7, #12]
 801816a:	330a      	adds	r3, #10
 801816c:	011a      	lsls	r2, r3, #4
 801816e:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 8018172:	fb03 f301 	mul.w	r3, r3, r1
 8018176:	4413      	add	r3, r2
 8018178:	4a5c      	ldr	r2, [pc, #368]	; (80182ec <drawMenu+0x268>)
 801817a:	4413      	add	r3, r2
 801817c:	1c9a      	adds	r2, r3, #2
				centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * i,
 801817e:	495c      	ldr	r1, [pc, #368]	; (80182f0 <drawMenu+0x26c>)
 8018180:	ab02      	add	r3, sp, #8
 8018182:	c903      	ldmia	r1, {r0, r1}
 8018184:	e883 0003 	stmia.w	r3, {r0, r1}
 8018188:	2310      	movs	r3, #16
 801818a:	9301      	str	r3, [sp, #4]
 801818c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8018190:	9300      	str	r3, [sp, #0]
 8018192:	2300      	movs	r3, #0
 8018194:	4629      	mov	r1, r5
 8018196:	4620      	mov	r0, r4
 8018198:	f7ff fd1e 	bl	8017bd8 <centeredString>
 801819c:	e02b      	b.n	80181f6 <drawMenu+0x172>
			}
			else
			{
				centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * i,
 801819e:	7cfb      	ldrb	r3, [r7, #19]
 80181a0:	b29c      	uxth	r4, r3
 80181a2:	7dbb      	ldrb	r3, [r7, #22]
 80181a4:	b29a      	uxth	r2, r3
 80181a6:	7d7b      	ldrb	r3, [r7, #21]
 80181a8:	b299      	uxth	r1, r3
 80181aa:	68fb      	ldr	r3, [r7, #12]
 80181ac:	b29b      	uxth	r3, r3
 80181ae:	fb11 f303 	smulbb	r3, r1, r3
 80181b2:	b29b      	uxth	r3, r3
 80181b4:	4413      	add	r3, r2
 80181b6:	b29b      	uxth	r3, r3
 80181b8:	3301      	adds	r3, #1
 80181ba:	b29d      	uxth	r5, r3
						pagesArray[currentCursorPosition.currentPageID].itemsArray[i], BLACK, WHITE, 16, Font12);
 80181bc:	4b4a      	ldr	r3, [pc, #296]	; (80182e8 <drawMenu+0x264>)
 80181be:	785b      	ldrb	r3, [r3, #1]
 80181c0:	4619      	mov	r1, r3
 80181c2:	68fb      	ldr	r3, [r7, #12]
 80181c4:	330a      	adds	r3, #10
 80181c6:	011a      	lsls	r2, r3, #4
 80181c8:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 80181cc:	fb03 f301 	mul.w	r3, r3, r1
 80181d0:	4413      	add	r3, r2
 80181d2:	4a46      	ldr	r2, [pc, #280]	; (80182ec <drawMenu+0x268>)
 80181d4:	4413      	add	r3, r2
 80181d6:	1c9a      	adds	r2, r3, #2
				centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * i,
 80181d8:	4945      	ldr	r1, [pc, #276]	; (80182f0 <drawMenu+0x26c>)
 80181da:	ab02      	add	r3, sp, #8
 80181dc:	c903      	ldmia	r1, {r0, r1}
 80181de:	e883 0003 	stmia.w	r3, {r0, r1}
 80181e2:	2310      	movs	r3, #16
 80181e4:	9301      	str	r3, [sp, #4]
 80181e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80181ea:	9300      	str	r3, [sp, #0]
 80181ec:	2300      	movs	r3, #0
 80181ee:	4629      	mov	r1, r5
 80181f0:	4620      	mov	r0, r4
 80181f2:	f7ff fcf1 	bl	8017bd8 <centeredString>
		for (int i = 0; i < pagesArray[currentCursorPosition.currentPageID].numberOfItemsInPage; i++)
 80181f6:	68fb      	ldr	r3, [r7, #12]
 80181f8:	3301      	adds	r3, #1
 80181fa:	60fb      	str	r3, [r7, #12]
 80181fc:	4b3a      	ldr	r3, [pc, #232]	; (80182e8 <drawMenu+0x264>)
 80181fe:	785b      	ldrb	r3, [r3, #1]
 8018200:	4619      	mov	r1, r3
 8018202:	4a3a      	ldr	r2, [pc, #232]	; (80182ec <drawMenu+0x268>)
 8018204:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 8018208:	fb03 f301 	mul.w	r3, r3, r1
 801820c:	4413      	add	r3, r2
 801820e:	33a1      	adds	r3, #161	; 0xa1
 8018210:	781b      	ldrb	r3, [r3, #0]
 8018212:	461a      	mov	r2, r3
 8018214:	68fb      	ldr	r3, [r7, #12]
 8018216:	4293      	cmp	r3, r2
 8018218:	f6ff af65 	blt.w	80180e6 <drawMenu+0x62>
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition - 1),
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition - 1], BLACK, WHITE, 16, Font12);
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition], BLACK, LGRAY, 16, Font12);
	}
}
 801821c:	e0cb      	b.n	80183b6 <drawMenu+0x332>
	else if (howToDraw == UP)
 801821e:	79bb      	ldrb	r3, [r7, #6]
 8018220:	2b00      	cmp	r3, #0
 8018222:	d167      	bne.n	80182f4 <drawMenu+0x270>
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition + 1),
 8018224:	7cfb      	ldrb	r3, [r7, #19]
 8018226:	b29c      	uxth	r4, r3
 8018228:	7dbb      	ldrb	r3, [r7, #22]
 801822a:	b29a      	uxth	r2, r3
 801822c:	7d7b      	ldrb	r3, [r7, #21]
 801822e:	b299      	uxth	r1, r3
 8018230:	4b2d      	ldr	r3, [pc, #180]	; (80182e8 <drawMenu+0x264>)
 8018232:	781b      	ldrb	r3, [r3, #0]
 8018234:	3301      	adds	r3, #1
 8018236:	b29b      	uxth	r3, r3
 8018238:	fb11 f303 	smulbb	r3, r1, r3
 801823c:	b29b      	uxth	r3, r3
 801823e:	4413      	add	r3, r2
 8018240:	b29b      	uxth	r3, r3
 8018242:	3301      	adds	r3, #1
 8018244:	b29d      	uxth	r5, r3
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition + 1], BLACK, WHITE, 16, Font12);
 8018246:	4b28      	ldr	r3, [pc, #160]	; (80182e8 <drawMenu+0x264>)
 8018248:	785b      	ldrb	r3, [r3, #1]
 801824a:	4619      	mov	r1, r3
 801824c:	4b26      	ldr	r3, [pc, #152]	; (80182e8 <drawMenu+0x264>)
 801824e:	781b      	ldrb	r3, [r3, #0]
 8018250:	3301      	adds	r3, #1
 8018252:	330a      	adds	r3, #10
 8018254:	011a      	lsls	r2, r3, #4
 8018256:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 801825a:	fb03 f301 	mul.w	r3, r3, r1
 801825e:	4413      	add	r3, r2
 8018260:	4a22      	ldr	r2, [pc, #136]	; (80182ec <drawMenu+0x268>)
 8018262:	4413      	add	r3, r2
 8018264:	1c9a      	adds	r2, r3, #2
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition + 1),
 8018266:	4922      	ldr	r1, [pc, #136]	; (80182f0 <drawMenu+0x26c>)
 8018268:	ab02      	add	r3, sp, #8
 801826a:	c903      	ldmia	r1, {r0, r1}
 801826c:	e883 0003 	stmia.w	r3, {r0, r1}
 8018270:	2310      	movs	r3, #16
 8018272:	9301      	str	r3, [sp, #4]
 8018274:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018278:	9300      	str	r3, [sp, #0]
 801827a:	2300      	movs	r3, #0
 801827c:	4629      	mov	r1, r5
 801827e:	4620      	mov	r0, r4
 8018280:	f7ff fcaa 	bl	8017bd8 <centeredString>
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
 8018284:	7cfb      	ldrb	r3, [r7, #19]
 8018286:	b29c      	uxth	r4, r3
 8018288:	7dbb      	ldrb	r3, [r7, #22]
 801828a:	b29a      	uxth	r2, r3
 801828c:	7d7b      	ldrb	r3, [r7, #21]
 801828e:	b299      	uxth	r1, r3
 8018290:	4b15      	ldr	r3, [pc, #84]	; (80182e8 <drawMenu+0x264>)
 8018292:	781b      	ldrb	r3, [r3, #0]
 8018294:	b29b      	uxth	r3, r3
 8018296:	fb11 f303 	smulbb	r3, r1, r3
 801829a:	b29b      	uxth	r3, r3
 801829c:	4413      	add	r3, r2
 801829e:	b29b      	uxth	r3, r3
 80182a0:	3301      	adds	r3, #1
 80182a2:	b29d      	uxth	r5, r3
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition], BLACK, LGRAY, 16, Font12);
 80182a4:	4b10      	ldr	r3, [pc, #64]	; (80182e8 <drawMenu+0x264>)
 80182a6:	785b      	ldrb	r3, [r3, #1]
 80182a8:	4619      	mov	r1, r3
 80182aa:	4b0f      	ldr	r3, [pc, #60]	; (80182e8 <drawMenu+0x264>)
 80182ac:	781b      	ldrb	r3, [r3, #0]
 80182ae:	330a      	adds	r3, #10
 80182b0:	011a      	lsls	r2, r3, #4
 80182b2:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 80182b6:	fb03 f301 	mul.w	r3, r3, r1
 80182ba:	4413      	add	r3, r2
 80182bc:	4a0b      	ldr	r2, [pc, #44]	; (80182ec <drawMenu+0x268>)
 80182be:	4413      	add	r3, r2
 80182c0:	1c9a      	adds	r2, r3, #2
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
 80182c2:	490b      	ldr	r1, [pc, #44]	; (80182f0 <drawMenu+0x26c>)
 80182c4:	ab02      	add	r3, sp, #8
 80182c6:	c903      	ldmia	r1, {r0, r1}
 80182c8:	e883 0003 	stmia.w	r3, {r0, r1}
 80182cc:	2310      	movs	r3, #16
 80182ce:	9301      	str	r3, [sp, #4]
 80182d0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80182d4:	9300      	str	r3, [sp, #0]
 80182d6:	2300      	movs	r3, #0
 80182d8:	4629      	mov	r1, r5
 80182da:	4620      	mov	r0, r4
 80182dc:	f7ff fc7c 	bl	8017bd8 <centeredString>
}
 80182e0:	e069      	b.n	80183b6 <drawMenu+0x332>
 80182e2:	bf00      	nop
 80182e4:	2400008c 	.word	0x2400008c
 80182e8:	2400afcc 	.word	0x2400afcc
 80182ec:	2400f5c4 	.word	0x2400f5c4
 80182f0:	24000030 	.word	0x24000030
	else if (howToDraw == DOWN)
 80182f4:	79bb      	ldrb	r3, [r7, #6]
 80182f6:	2b01      	cmp	r3, #1
 80182f8:	d15d      	bne.n	80183b6 <drawMenu+0x332>
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition - 1),
 80182fa:	7cfb      	ldrb	r3, [r7, #19]
 80182fc:	b29c      	uxth	r4, r3
 80182fe:	7dbb      	ldrb	r3, [r7, #22]
 8018300:	b29a      	uxth	r2, r3
 8018302:	7d7b      	ldrb	r3, [r7, #21]
 8018304:	b299      	uxth	r1, r3
 8018306:	4b2e      	ldr	r3, [pc, #184]	; (80183c0 <drawMenu+0x33c>)
 8018308:	781b      	ldrb	r3, [r3, #0]
 801830a:	3b01      	subs	r3, #1
 801830c:	b29b      	uxth	r3, r3
 801830e:	fb11 f303 	smulbb	r3, r1, r3
 8018312:	b29b      	uxth	r3, r3
 8018314:	4413      	add	r3, r2
 8018316:	b29b      	uxth	r3, r3
 8018318:	3301      	adds	r3, #1
 801831a:	b29d      	uxth	r5, r3
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition - 1], BLACK, WHITE, 16, Font12);
 801831c:	4b28      	ldr	r3, [pc, #160]	; (80183c0 <drawMenu+0x33c>)
 801831e:	785b      	ldrb	r3, [r3, #1]
 8018320:	4619      	mov	r1, r3
 8018322:	4b27      	ldr	r3, [pc, #156]	; (80183c0 <drawMenu+0x33c>)
 8018324:	781b      	ldrb	r3, [r3, #0]
 8018326:	3b01      	subs	r3, #1
 8018328:	330a      	adds	r3, #10
 801832a:	011a      	lsls	r2, r3, #4
 801832c:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 8018330:	fb03 f301 	mul.w	r3, r3, r1
 8018334:	4413      	add	r3, r2
 8018336:	4a23      	ldr	r2, [pc, #140]	; (80183c4 <drawMenu+0x340>)
 8018338:	4413      	add	r3, r2
 801833a:	1c9a      	adds	r2, r3, #2
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition - 1),
 801833c:	4922      	ldr	r1, [pc, #136]	; (80183c8 <drawMenu+0x344>)
 801833e:	ab02      	add	r3, sp, #8
 8018340:	c903      	ldmia	r1, {r0, r1}
 8018342:	e883 0003 	stmia.w	r3, {r0, r1}
 8018346:	2310      	movs	r3, #16
 8018348:	9301      	str	r3, [sp, #4]
 801834a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801834e:	9300      	str	r3, [sp, #0]
 8018350:	2300      	movs	r3, #0
 8018352:	4629      	mov	r1, r5
 8018354:	4620      	mov	r0, r4
 8018356:	f7ff fc3f 	bl	8017bd8 <centeredString>
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
 801835a:	7cfb      	ldrb	r3, [r7, #19]
 801835c:	b29c      	uxth	r4, r3
 801835e:	7dbb      	ldrb	r3, [r7, #22]
 8018360:	b29a      	uxth	r2, r3
 8018362:	7d7b      	ldrb	r3, [r7, #21]
 8018364:	b299      	uxth	r1, r3
 8018366:	4b16      	ldr	r3, [pc, #88]	; (80183c0 <drawMenu+0x33c>)
 8018368:	781b      	ldrb	r3, [r3, #0]
 801836a:	b29b      	uxth	r3, r3
 801836c:	fb11 f303 	smulbb	r3, r1, r3
 8018370:	b29b      	uxth	r3, r3
 8018372:	4413      	add	r3, r2
 8018374:	b29b      	uxth	r3, r3
 8018376:	3301      	adds	r3, #1
 8018378:	b29d      	uxth	r5, r3
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition], BLACK, LGRAY, 16, Font12);
 801837a:	4b11      	ldr	r3, [pc, #68]	; (80183c0 <drawMenu+0x33c>)
 801837c:	785b      	ldrb	r3, [r3, #1]
 801837e:	4619      	mov	r1, r3
 8018380:	4b0f      	ldr	r3, [pc, #60]	; (80183c0 <drawMenu+0x33c>)
 8018382:	781b      	ldrb	r3, [r3, #0]
 8018384:	330a      	adds	r3, #10
 8018386:	011a      	lsls	r2, r3, #4
 8018388:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 801838c:	fb03 f301 	mul.w	r3, r3, r1
 8018390:	4413      	add	r3, r2
 8018392:	4a0c      	ldr	r2, [pc, #48]	; (80183c4 <drawMenu+0x340>)
 8018394:	4413      	add	r3, r2
 8018396:	1c9a      	adds	r2, r3, #2
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
 8018398:	490b      	ldr	r1, [pc, #44]	; (80183c8 <drawMenu+0x344>)
 801839a:	ab02      	add	r3, sp, #8
 801839c:	c903      	ldmia	r1, {r0, r1}
 801839e:	e883 0003 	stmia.w	r3, {r0, r1}
 80183a2:	2310      	movs	r3, #16
 80183a4:	9301      	str	r3, [sp, #4]
 80183a6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80183aa:	9300      	str	r3, [sp, #0]
 80183ac:	2300      	movs	r3, #0
 80183ae:	4629      	mov	r1, r5
 80183b0:	4620      	mov	r0, r4
 80183b2:	f7ff fc11 	bl	8017bd8 <centeredString>
}
 80183b6:	bf00      	nop
 80183b8:	3718      	adds	r7, #24
 80183ba:	46bd      	mov	sp, r7
 80183bc:	bdb0      	pop	{r4, r5, r7, pc}
 80183be:	bf00      	nop
 80183c0:	2400afcc 	.word	0x2400afcc
 80183c4:	2400f5c4 	.word	0x2400f5c4
 80183c8:	24000030 	.word	0x24000030

080183cc <drawItem>:

void drawItem(bool clearScreen, MENUDRAWType howToDraw)
{
 80183cc:	b580      	push	{r7, lr}
 80183ce:	b082      	sub	sp, #8
 80183d0:	af00      	add	r7, sp, #0
 80183d2:	4603      	mov	r3, r0
 80183d4:	460a      	mov	r2, r1
 80183d6:	71fb      	strb	r3, [r7, #7]
 80183d8:	4613      	mov	r3, r2
 80183da:	71bb      	strb	r3, [r7, #6]
	if ((clearScreen) || (!isItemDisplayed) )
 80183dc:	79fb      	ldrb	r3, [r7, #7]
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d106      	bne.n	80183f0 <drawItem+0x24>
 80183e2:	4b53      	ldr	r3, [pc, #332]	; (8018530 <drawItem+0x164>)
 80183e4:	781b      	ldrb	r3, [r3, #0]
 80183e6:	f083 0301 	eor.w	r3, r3, #1
 80183ea:	b2db      	uxtb	r3, r3
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d006      	beq.n	80183fe <drawItem+0x32>
	{
		Paint_Clear(WHITE);
 80183f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80183f4:	f7f6 fe76 	bl	800f0e4 <Paint_Clear>
		createEmptyFrame(true);
 80183f8:	2001      	movs	r0, #1
 80183fa:	f001 f827 	bl	801944c <createEmptyFrame>
	}
	if ( pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth - 1]].
 80183fe:	4b4d      	ldr	r3, [pc, #308]	; (8018534 <drawItem+0x168>)
 8018400:	7b1b      	ldrb	r3, [r3, #12]
 8018402:	3b01      	subs	r3, #1
 8018404:	4a4b      	ldr	r2, [pc, #300]	; (8018534 <drawItem+0x168>)
 8018406:	4413      	add	r3, r2
 8018408:	789b      	ldrb	r3, [r3, #2]
 801840a:	4618      	mov	r0, r3
			cellTypeArray[currentCursorPosition.previousPageCursorPosition[currentCursorPosition.menuDepth - 1]] == UINT16_ITEM )
 801840c:	4b49      	ldr	r3, [pc, #292]	; (8018534 <drawItem+0x168>)
 801840e:	7b1b      	ldrb	r3, [r3, #12]
 8018410:	3b01      	subs	r3, #1
 8018412:	4a48      	ldr	r2, [pc, #288]	; (8018534 <drawItem+0x168>)
 8018414:	4413      	add	r3, r2
 8018416:	79db      	ldrb	r3, [r3, #7]
 8018418:	4619      	mov	r1, r3
 801841a:	4a47      	ldr	r2, [pc, #284]	; (8018538 <drawItem+0x16c>)
 801841c:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 8018420:	fb03 f300 	mul.w	r3, r3, r0
 8018424:	4413      	add	r3, r2
 8018426:	440b      	add	r3, r1
 8018428:	3380      	adds	r3, #128	; 0x80
 801842a:	781b      	ldrb	r3, [r3, #0]
	if ( pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth - 1]].
 801842c:	2b02      	cmp	r3, #2
 801842e:	d130      	bne.n	8018492 <drawItem+0xc6>
	{
		if ( !(isItemDisplayed) )
 8018430:	4b3f      	ldr	r3, [pc, #252]	; (8018530 <drawItem+0x164>)
 8018432:	781b      	ldrb	r3, [r3, #0]
 8018434:	f083 0301 	eor.w	r3, r3, #1
 8018438:	b2db      	uxtb	r3, r3
 801843a:	2b00      	cmp	r3, #0
 801843c:	d022      	beq.n	8018484 <drawItem+0xb8>
		{
			multiplierIndex = 0;
 801843e:	4b3f      	ldr	r3, [pc, #252]	; (801853c <drawItem+0x170>)
 8018440:	2200      	movs	r2, #0
 8018442:	701a      	strb	r2, [r3, #0]
			memcpy(&uint16Item, (uint32_t *)pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth -1]].
 8018444:	4b3b      	ldr	r3, [pc, #236]	; (8018534 <drawItem+0x168>)
 8018446:	7b1b      	ldrb	r3, [r3, #12]
 8018448:	3b01      	subs	r3, #1
 801844a:	4a3a      	ldr	r2, [pc, #232]	; (8018534 <drawItem+0x168>)
 801844c:	4413      	add	r3, r2
 801844e:	789b      	ldrb	r3, [r3, #2]
 8018450:	4618      	mov	r0, r3
					nextCellIDArray[currentCursorPosition.previousPageCursorPosition[currentCursorPosition.menuDepth -1]], sizeof(tUINT16_ITEM));
 8018452:	4b38      	ldr	r3, [pc, #224]	; (8018534 <drawItem+0x168>)
 8018454:	7b1b      	ldrb	r3, [r3, #12]
 8018456:	3b01      	subs	r3, #1
 8018458:	4a36      	ldr	r2, [pc, #216]	; (8018534 <drawItem+0x168>)
 801845a:	4413      	add	r3, r2
 801845c:	79db      	ldrb	r3, [r3, #7]
 801845e:	4619      	mov	r1, r3
 8018460:	4a35      	ldr	r2, [pc, #212]	; (8018538 <drawItem+0x16c>)
 8018462:	23a9      	movs	r3, #169	; 0xa9
 8018464:	fb03 f300 	mul.w	r3, r3, r0
 8018468:	440b      	add	r3, r1
 801846a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			memcpy(&uint16Item, (uint32_t *)pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth -1]].
 801846e:	f44f 7204 	mov.w	r2, #528	; 0x210
 8018472:	4619      	mov	r1, r3
 8018474:	4832      	ldr	r0, [pc, #200]	; (8018540 <drawItem+0x174>)
 8018476:	f004 f95f 	bl	801c738 <memcpy>
			itemIDtoUpdate = uint16Item.itemID;
 801847a:	4b31      	ldr	r3, [pc, #196]	; (8018540 <drawItem+0x174>)
 801847c:	7b9b      	ldrb	r3, [r3, #14]
 801847e:	461a      	mov	r2, r3
 8018480:	4b30      	ldr	r3, [pc, #192]	; (8018544 <drawItem+0x178>)
 8018482:	601a      	str	r2, [r3, #0]
		}
		isItemDisplayed = true;
 8018484:	4b2a      	ldr	r3, [pc, #168]	; (8018530 <drawItem+0x164>)
 8018486:	2201      	movs	r2, #1
 8018488:	701a      	strb	r2, [r3, #0]
		updateUint16Item(howToDraw);
 801848a:	79bb      	ldrb	r3, [r7, #6]
 801848c:	4618      	mov	r0, r3
 801848e:	f001 f843 	bl	8019518 <updateUint16Item>
	}
	if ( pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth - 1]].
 8018492:	4b28      	ldr	r3, [pc, #160]	; (8018534 <drawItem+0x168>)
 8018494:	7b1b      	ldrb	r3, [r3, #12]
 8018496:	3b01      	subs	r3, #1
 8018498:	4a26      	ldr	r2, [pc, #152]	; (8018534 <drawItem+0x168>)
 801849a:	4413      	add	r3, r2
 801849c:	789b      	ldrb	r3, [r3, #2]
 801849e:	4618      	mov	r0, r3
			cellTypeArray[currentCursorPosition.previousPageCursorPosition[currentCursorPosition.menuDepth - 1]] == STRING_ITEM )
 80184a0:	4b24      	ldr	r3, [pc, #144]	; (8018534 <drawItem+0x168>)
 80184a2:	7b1b      	ldrb	r3, [r3, #12]
 80184a4:	3b01      	subs	r3, #1
 80184a6:	4a23      	ldr	r2, [pc, #140]	; (8018534 <drawItem+0x168>)
 80184a8:	4413      	add	r3, r2
 80184aa:	79db      	ldrb	r3, [r3, #7]
 80184ac:	4619      	mov	r1, r3
 80184ae:	4a22      	ldr	r2, [pc, #136]	; (8018538 <drawItem+0x16c>)
 80184b0:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 80184b4:	fb03 f300 	mul.w	r3, r3, r0
 80184b8:	4413      	add	r3, r2
 80184ba:	440b      	add	r3, r1
 80184bc:	3380      	adds	r3, #128	; 0x80
 80184be:	781b      	ldrb	r3, [r3, #0]
	if ( pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth - 1]].
 80184c0:	2b08      	cmp	r3, #8
 80184c2:	d131      	bne.n	8018528 <drawItem+0x15c>
	{
		if ( !(isItemDisplayed) )
 80184c4:	4b1a      	ldr	r3, [pc, #104]	; (8018530 <drawItem+0x164>)
 80184c6:	781b      	ldrb	r3, [r3, #0]
 80184c8:	f083 0301 	eor.w	r3, r3, #1
 80184cc:	b2db      	uxtb	r3, r3
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d023      	beq.n	801851a <drawItem+0x14e>
		{
			multiplierIndex = 0;
 80184d2:	4b1a      	ldr	r3, [pc, #104]	; (801853c <drawItem+0x170>)
 80184d4:	2200      	movs	r2, #0
 80184d6:	701a      	strb	r2, [r3, #0]
			memcpy(&stringItem, (uint32_t *)pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth -1]].
 80184d8:	4b16      	ldr	r3, [pc, #88]	; (8018534 <drawItem+0x168>)
 80184da:	7b1b      	ldrb	r3, [r3, #12]
 80184dc:	3b01      	subs	r3, #1
 80184de:	4a15      	ldr	r2, [pc, #84]	; (8018534 <drawItem+0x168>)
 80184e0:	4413      	add	r3, r2
 80184e2:	789b      	ldrb	r3, [r3, #2]
 80184e4:	4618      	mov	r0, r3
					nextCellIDArray[currentCursorPosition.previousPageCursorPosition[currentCursorPosition.menuDepth -1]], sizeof(tSTRING_ITEM));
 80184e6:	4b13      	ldr	r3, [pc, #76]	; (8018534 <drawItem+0x168>)
 80184e8:	7b1b      	ldrb	r3, [r3, #12]
 80184ea:	3b01      	subs	r3, #1
 80184ec:	4a11      	ldr	r2, [pc, #68]	; (8018534 <drawItem+0x168>)
 80184ee:	4413      	add	r3, r2
 80184f0:	79db      	ldrb	r3, [r3, #7]
 80184f2:	4619      	mov	r1, r3
 80184f4:	4a10      	ldr	r2, [pc, #64]	; (8018538 <drawItem+0x16c>)
 80184f6:	23a9      	movs	r3, #169	; 0xa9
 80184f8:	fb03 f300 	mul.w	r3, r3, r0
 80184fc:	440b      	add	r3, r1
 80184fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			memcpy(&stringItem, (uint32_t *)pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth -1]].
 8018502:	f240 420c 	movw	r2, #1036	; 0x40c
 8018506:	4619      	mov	r1, r3
 8018508:	480f      	ldr	r0, [pc, #60]	; (8018548 <drawItem+0x17c>)
 801850a:	f004 f915 	bl	801c738 <memcpy>
			itemIDtoUpdate = stringItem.itemID;
 801850e:	4b0e      	ldr	r3, [pc, #56]	; (8018548 <drawItem+0x17c>)
 8018510:	f893 320a 	ldrb.w	r3, [r3, #522]	; 0x20a
 8018514:	461a      	mov	r2, r3
 8018516:	4b0b      	ldr	r3, [pc, #44]	; (8018544 <drawItem+0x178>)
 8018518:	601a      	str	r2, [r3, #0]
		}
		isItemDisplayed = true;
 801851a:	4b05      	ldr	r3, [pc, #20]	; (8018530 <drawItem+0x164>)
 801851c:	2201      	movs	r2, #1
 801851e:	701a      	strb	r2, [r3, #0]
		updateStringItem(howToDraw);
 8018520:	79bb      	ldrb	r3, [r7, #6]
 8018522:	4618      	mov	r0, r3
 8018524:	f002 fb28 	bl	801ab78 <updateStringItem>
	}
}
 8018528:	bf00      	nop
 801852a:	3708      	adds	r7, #8
 801852c:	46bd      	mov	sp, r7
 801852e:	bd80      	pop	{r7, pc}
 8018530:	2400ae55 	.word	0x2400ae55
 8018534:	2400afcc 	.word	0x2400afcc
 8018538:	2400f5c4 	.word	0x2400f5c4
 801853c:	2400a178 	.word	0x2400a178
 8018540:	2400c168 	.word	0x2400c168
 8018544:	2400af0c 	.word	0x2400af0c
 8018548:	2400c37c 	.word	0x2400c37c

0801854c <drawPopup>:

void drawPopup(void)
{
 801854c:	b5b0      	push	{r4, r5, r7, lr}
 801854e:	b088      	sub	sp, #32
 8018550:	af04      	add	r7, sp, #16
	uint8_t MenuRectangleStartX = 0;
 8018552:	2300      	movs	r3, #0
 8018554:	73fb      	strb	r3, [r7, #15]
	uint8_t MenuRectangleStartY = 0;
 8018556:	2300      	movs	r3, #0
 8018558:	73bb      	strb	r3, [r7, #14]
	uint8_t MenuRectangleHeight = 0;
 801855a:	2300      	movs	r3, #0
 801855c:	737b      	strb	r3, [r7, #13]
	uint8_t MenuRectangleWidth = 0;
 801855e:	2300      	movs	r3, #0
 8018560:	733b      	strb	r3, [r7, #12]
	uint8_t DisplayCenterWidth = 0;
 8018562:	2300      	movs	r3, #0
 8018564:	72fb      	strb	r3, [r7, #11]
	uint8_t PopupRectangleHeight = 0;
 8018566:	2300      	movs	r3, #0
 8018568:	72bb      	strb	r3, [r7, #10]
	uint8_t QuestionRectangleHeight = 0;
 801856a:	2300      	movs	r3, #0
 801856c:	727b      	strb	r3, [r7, #9]

	if (isPortrait)
 801856e:	4ba3      	ldr	r3, [pc, #652]	; (80187fc <drawPopup+0x2b0>)
 8018570:	781b      	ldrb	r3, [r3, #0]
 8018572:	2b00      	cmp	r3, #0
 8018574:	d00d      	beq.n	8018592 <drawPopup+0x46>
	{
		MenuRectangleStartX = VerticalMenuRectangleStartX;
 8018576:	2302      	movs	r3, #2
 8018578:	73fb      	strb	r3, [r7, #15]
		MenuRectangleStartY = VerticalMenuRectangleStartY;
 801857a:	230c      	movs	r3, #12
 801857c:	73bb      	strb	r3, [r7, #14]
		MenuRectangleHeight = VerticalMenuRectangleHeight;
 801857e:	230e      	movs	r3, #14
 8018580:	737b      	strb	r3, [r7, #13]
		MenuRectangleWidth = VerticalMenuRectangleWidth;
 8018582:	237c      	movs	r3, #124	; 0x7c
 8018584:	733b      	strb	r3, [r7, #12]
		DisplayCenterWidth = VerticalDisplayCenterWidth;
 8018586:	2340      	movs	r3, #64	; 0x40
 8018588:	72fb      	strb	r3, [r7, #11]
		PopupRectangleHeight = VerticalPopupRectangleHeight;
 801858a:	2364      	movs	r3, #100	; 0x64
 801858c:	72bb      	strb	r3, [r7, #10]
		QuestionRectangleHeight = VerticalQuestionRectangleHeight;
 801858e:	2356      	movs	r3, #86	; 0x56
 8018590:	727b      	strb	r3, [r7, #9]
//		DisplayCenterWidth = HorizontalDisplayCenterWidth;
//		PopupRectangleHeight = HorizontalPopupRectangleHeight;
//		QuestionRectangleHeight = HorizontalQuestionRectangleHeight;
	}

	isPopupDisplayed = true;
 8018592:	4b9b      	ldr	r3, [pc, #620]	; (8018800 <drawPopup+0x2b4>)
 8018594:	2201      	movs	r2, #1
 8018596:	701a      	strb	r2, [r3, #0]
	isItemDisplayed = false;
 8018598:	4b9a      	ldr	r3, [pc, #616]	; (8018804 <drawPopup+0x2b8>)
 801859a:	2200      	movs	r2, #0
 801859c:	701a      	strb	r2, [r3, #0]
	isMenuDisplayed = false;
 801859e:	4b9a      	ldr	r3, [pc, #616]	; (8018808 <drawPopup+0x2bc>)
 80185a0:	2200      	movs	r2, #0
 80185a2:	701a      	strb	r2, [r3, #0]
	if (popupDrawDirection == FULL)
 80185a4:	4b99      	ldr	r3, [pc, #612]	; (801880c <drawPopup+0x2c0>)
 80185a6:	781b      	ldrb	r3, [r3, #0]
 80185a8:	2b02      	cmp	r3, #2
 80185aa:	f040 8097 	bne.w	80186dc <drawPopup+0x190>
	{
		Paint_Clear(WHITE);
 80185ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80185b2:	f7f6 fd97 	bl	800f0e4 <Paint_Clear>
		createEmptyFrame(true);
 80185b6:	2001      	movs	r0, #1
 80185b8:	f000 ff48 	bl	801944c <createEmptyFrame>
		Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY ,
 80185bc:	7bfb      	ldrb	r3, [r7, #15]
 80185be:	b298      	uxth	r0, r3
 80185c0:	7bbb      	ldrb	r3, [r7, #14]
 80185c2:	b299      	uxth	r1, r3
 80185c4:	7bfb      	ldrb	r3, [r7, #15]
 80185c6:	b29a      	uxth	r2, r3
 80185c8:	7b3b      	ldrb	r3, [r7, #12]
 80185ca:	b29b      	uxth	r3, r3
 80185cc:	4413      	add	r3, r2
 80185ce:	b29c      	uxth	r4, r3
 80185d0:	7bbb      	ldrb	r3, [r7, #14]
 80185d2:	b29a      	uxth	r2, r3
 80185d4:	7abb      	ldrb	r3, [r7, #10]
 80185d6:	b29b      	uxth	r3, r3
 80185d8:	4413      	add	r3, r2
 80185da:	b29b      	uxth	r3, r3
 80185dc:	2200      	movs	r2, #0
 80185de:	9202      	str	r2, [sp, #8]
 80185e0:	2201      	movs	r2, #1
 80185e2:	9201      	str	r2, [sp, #4]
 80185e4:	2200      	movs	r2, #0
 80185e6:	9200      	str	r2, [sp, #0]
 80185e8:	4622      	mov	r2, r4
 80185ea:	f7f6 ff05 	bl	800f3f8 <Paint_DrawRectangle>
				MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + PopupRectangleHeight,
				BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );

		if (popupToShow.isQuestion)
 80185ee:	4b88      	ldr	r3, [pc, #544]	; (8018810 <drawPopup+0x2c4>)
 80185f0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	d020      	beq.n	801863a <drawPopup+0xee>
		{
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + QuestionRectangleHeight,
 80185f8:	7bfb      	ldrb	r3, [r7, #15]
 80185fa:	b298      	uxth	r0, r3
 80185fc:	7bbb      	ldrb	r3, [r7, #14]
 80185fe:	b29a      	uxth	r2, r3
 8018600:	7a7b      	ldrb	r3, [r7, #9]
 8018602:	b29b      	uxth	r3, r3
 8018604:	4413      	add	r3, r2
 8018606:	b299      	uxth	r1, r3
 8018608:	7bfb      	ldrb	r3, [r7, #15]
 801860a:	b29a      	uxth	r2, r3
 801860c:	7b3b      	ldrb	r3, [r7, #12]
 801860e:	b29b      	uxth	r3, r3
 8018610:	4413      	add	r3, r2
 8018612:	b29c      	uxth	r4, r3
					MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + QuestionRectangleHeight + MenuRectangleHeight,
 8018614:	7bbb      	ldrb	r3, [r7, #14]
 8018616:	b29a      	uxth	r2, r3
 8018618:	7a7b      	ldrb	r3, [r7, #9]
 801861a:	b29b      	uxth	r3, r3
 801861c:	4413      	add	r3, r2
 801861e:	b29a      	uxth	r2, r3
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + QuestionRectangleHeight,
 8018620:	7b7b      	ldrb	r3, [r7, #13]
 8018622:	b29b      	uxth	r3, r3
 8018624:	4413      	add	r3, r2
 8018626:	b29b      	uxth	r3, r3
 8018628:	2200      	movs	r2, #0
 801862a:	9202      	str	r2, [sp, #8]
 801862c:	2201      	movs	r2, #1
 801862e:	9201      	str	r2, [sp, #4]
 8018630:	2200      	movs	r2, #0
 8018632:	9200      	str	r2, [sp, #0]
 8018634:	4622      	mov	r2, r4
 8018636:	f7f6 fedf 	bl	800f3f8 <Paint_DrawRectangle>
					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
		}

		Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + PopupRectangleHeight,
 801863a:	7bfb      	ldrb	r3, [r7, #15]
 801863c:	b298      	uxth	r0, r3
 801863e:	7bbb      	ldrb	r3, [r7, #14]
 8018640:	b29a      	uxth	r2, r3
 8018642:	7abb      	ldrb	r3, [r7, #10]
 8018644:	b29b      	uxth	r3, r3
 8018646:	4413      	add	r3, r2
 8018648:	b299      	uxth	r1, r3
 801864a:	7bfb      	ldrb	r3, [r7, #15]
 801864c:	b29a      	uxth	r2, r3
 801864e:	7b3b      	ldrb	r3, [r7, #12]
 8018650:	b29b      	uxth	r3, r3
 8018652:	4413      	add	r3, r2
 8018654:	b29c      	uxth	r4, r3
				MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + PopupRectangleHeight + MenuRectangleHeight,
 8018656:	7bbb      	ldrb	r3, [r7, #14]
 8018658:	b29a      	uxth	r2, r3
 801865a:	7abb      	ldrb	r3, [r7, #10]
 801865c:	b29b      	uxth	r3, r3
 801865e:	4413      	add	r3, r2
 8018660:	b29a      	uxth	r2, r3
		Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + PopupRectangleHeight,
 8018662:	7b7b      	ldrb	r3, [r7, #13]
 8018664:	b29b      	uxth	r3, r3
 8018666:	4413      	add	r3, r2
 8018668:	b29b      	uxth	r3, r3
 801866a:	2200      	movs	r2, #0
 801866c:	9202      	str	r2, [sp, #8]
 801866e:	2201      	movs	r2, #1
 8018670:	9201      	str	r2, [sp, #4]
 8018672:	2200      	movs	r2, #0
 8018674:	9200      	str	r2, [sp, #0]
 8018676:	4622      	mov	r2, r4
 8018678:	f7f6 febe 	bl	800f3f8 <Paint_DrawRectangle>
				BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );

		for (int i = 0 ; i < popupToShow.numberOfItemsInPopup - 2; i++)
 801867c:	2300      	movs	r3, #0
 801867e:	607b      	str	r3, [r7, #4]
 8018680:	e026      	b.n	80186d0 <drawPopup+0x184>
		{
			centeredString( DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1) + 1,
 8018682:	7afb      	ldrb	r3, [r7, #11]
 8018684:	b29c      	uxth	r4, r3
 8018686:	7bbb      	ldrb	r3, [r7, #14]
 8018688:	b29a      	uxth	r2, r3
 801868a:	7b7b      	ldrb	r3, [r7, #13]
 801868c:	b299      	uxth	r1, r3
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	3301      	adds	r3, #1
 8018692:	b29b      	uxth	r3, r3
 8018694:	fb11 f303 	smulbb	r3, r1, r3
 8018698:	b29b      	uxth	r3, r3
 801869a:	4413      	add	r3, r2
 801869c:	b29b      	uxth	r3, r3
 801869e:	3301      	adds	r3, #1
 80186a0:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[i], BLACK, WHITE, 16, Font12);
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	011b      	lsls	r3, r3, #4
 80186a6:	4a5a      	ldr	r2, [pc, #360]	; (8018810 <drawPopup+0x2c4>)
 80186a8:	4413      	add	r3, r2
 80186aa:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1) + 1,
 80186ac:	4959      	ldr	r1, [pc, #356]	; (8018814 <drawPopup+0x2c8>)
 80186ae:	ab02      	add	r3, sp, #8
 80186b0:	c903      	ldmia	r1, {r0, r1}
 80186b2:	e883 0003 	stmia.w	r3, {r0, r1}
 80186b6:	2310      	movs	r3, #16
 80186b8:	9301      	str	r3, [sp, #4]
 80186ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80186be:	9300      	str	r3, [sp, #0]
 80186c0:	2300      	movs	r3, #0
 80186c2:	4629      	mov	r1, r5
 80186c4:	4620      	mov	r0, r4
 80186c6:	f7ff fa87 	bl	8017bd8 <centeredString>
		for (int i = 0 ; i < popupToShow.numberOfItemsInPopup - 2; i++)
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	3301      	adds	r3, #1
 80186ce:	607b      	str	r3, [r7, #4]
 80186d0:	4b4f      	ldr	r3, [pc, #316]	; (8018810 <drawPopup+0x2c4>)
 80186d2:	785b      	ldrb	r3, [r3, #1]
 80186d4:	3b02      	subs	r3, #2
 80186d6:	687a      	ldr	r2, [r7, #4]
 80186d8:	429a      	cmp	r2, r3
 80186da:	dbd2      	blt.n	8018682 <drawPopup+0x136>
		}
	}

	if (popupToShow.isQuestion)
 80186dc:	4b4c      	ldr	r3, [pc, #304]	; (8018810 <drawPopup+0x2c4>)
 80186de:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	f000 8098 	beq.w	8018818 <drawPopup+0x2cc>
	{
		if ( (popupDrawDirection == FULL) || (popupDrawDirection == UP))
 80186e8:	4b48      	ldr	r3, [pc, #288]	; (801880c <drawPopup+0x2c0>)
 80186ea:	781b      	ldrb	r3, [r3, #0]
 80186ec:	2b02      	cmp	r3, #2
 80186ee:	d003      	beq.n	80186f8 <drawPopup+0x1ac>
 80186f0:	4b46      	ldr	r3, [pc, #280]	; (801880c <drawPopup+0x2c0>)
 80186f2:	781b      	ldrb	r3, [r3, #0]
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d140      	bne.n	801877a <drawPopup+0x22e>
		{
			centeredString( DisplayCenterWidth, MenuRectangleStartY + QuestionRectangleHeight + 1,
 80186f8:	7afb      	ldrb	r3, [r7, #11]
 80186fa:	b29c      	uxth	r4, r3
 80186fc:	7bbb      	ldrb	r3, [r7, #14]
 80186fe:	b29a      	uxth	r2, r3
 8018700:	7a7b      	ldrb	r3, [r7, #9]
 8018702:	b29b      	uxth	r3, r3
 8018704:	4413      	add	r3, r2
 8018706:	b29b      	uxth	r3, r3
 8018708:	3301      	adds	r3, #1
 801870a:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 2], BLACK, LGRAY, 16, Font12);
 801870c:	4b40      	ldr	r3, [pc, #256]	; (8018810 <drawPopup+0x2c4>)
 801870e:	785b      	ldrb	r3, [r3, #1]
 8018710:	3b02      	subs	r3, #2
 8018712:	011b      	lsls	r3, r3, #4
 8018714:	4a3e      	ldr	r2, [pc, #248]	; (8018810 <drawPopup+0x2c4>)
 8018716:	4413      	add	r3, r2
 8018718:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + QuestionRectangleHeight + 1,
 801871a:	493e      	ldr	r1, [pc, #248]	; (8018814 <drawPopup+0x2c8>)
 801871c:	ab02      	add	r3, sp, #8
 801871e:	c903      	ldmia	r1, {r0, r1}
 8018720:	e883 0003 	stmia.w	r3, {r0, r1}
 8018724:	2310      	movs	r3, #16
 8018726:	9301      	str	r3, [sp, #4]
 8018728:	f24c 6318 	movw	r3, #50712	; 0xc618
 801872c:	9300      	str	r3, [sp, #0]
 801872e:	2300      	movs	r3, #0
 8018730:	4629      	mov	r1, r5
 8018732:	4620      	mov	r0, r4
 8018734:	f7ff fa50 	bl	8017bd8 <centeredString>

			centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 8018738:	7afb      	ldrb	r3, [r7, #11]
 801873a:	b29c      	uxth	r4, r3
 801873c:	7bbb      	ldrb	r3, [r7, #14]
 801873e:	b29a      	uxth	r2, r3
 8018740:	7abb      	ldrb	r3, [r7, #10]
 8018742:	b29b      	uxth	r3, r3
 8018744:	4413      	add	r3, r2
 8018746:	b29b      	uxth	r3, r3
 8018748:	3301      	adds	r3, #1
 801874a:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 1], BLACK, WHITE, 16, Font12);
 801874c:	4b30      	ldr	r3, [pc, #192]	; (8018810 <drawPopup+0x2c4>)
 801874e:	785b      	ldrb	r3, [r3, #1]
 8018750:	3b01      	subs	r3, #1
 8018752:	011b      	lsls	r3, r3, #4
 8018754:	4a2e      	ldr	r2, [pc, #184]	; (8018810 <drawPopup+0x2c4>)
 8018756:	4413      	add	r3, r2
 8018758:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 801875a:	492e      	ldr	r1, [pc, #184]	; (8018814 <drawPopup+0x2c8>)
 801875c:	ab02      	add	r3, sp, #8
 801875e:	c903      	ldmia	r1, {r0, r1}
 8018760:	e883 0003 	stmia.w	r3, {r0, r1}
 8018764:	2310      	movs	r3, #16
 8018766:	9301      	str	r3, [sp, #4]
 8018768:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801876c:	9300      	str	r3, [sp, #0]
 801876e:	2300      	movs	r3, #0
 8018770:	4629      	mov	r1, r5
 8018772:	4620      	mov	r0, r4
 8018774:	f7ff fa30 	bl	8017bd8 <centeredString>
	else
	{
		centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
				popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 1], BLACK, LGRAY, 16, Font12);
	}
}
 8018778:	e06e      	b.n	8018858 <drawPopup+0x30c>
			centeredString( DisplayCenterWidth, MenuRectangleStartY + QuestionRectangleHeight + 1,
 801877a:	7afb      	ldrb	r3, [r7, #11]
 801877c:	b29c      	uxth	r4, r3
 801877e:	7bbb      	ldrb	r3, [r7, #14]
 8018780:	b29a      	uxth	r2, r3
 8018782:	7a7b      	ldrb	r3, [r7, #9]
 8018784:	b29b      	uxth	r3, r3
 8018786:	4413      	add	r3, r2
 8018788:	b29b      	uxth	r3, r3
 801878a:	3301      	adds	r3, #1
 801878c:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 2], BLACK, WHITE, 16, Font12);
 801878e:	4b20      	ldr	r3, [pc, #128]	; (8018810 <drawPopup+0x2c4>)
 8018790:	785b      	ldrb	r3, [r3, #1]
 8018792:	3b02      	subs	r3, #2
 8018794:	011b      	lsls	r3, r3, #4
 8018796:	4a1e      	ldr	r2, [pc, #120]	; (8018810 <drawPopup+0x2c4>)
 8018798:	4413      	add	r3, r2
 801879a:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + QuestionRectangleHeight + 1,
 801879c:	491d      	ldr	r1, [pc, #116]	; (8018814 <drawPopup+0x2c8>)
 801879e:	ab02      	add	r3, sp, #8
 80187a0:	c903      	ldmia	r1, {r0, r1}
 80187a2:	e883 0003 	stmia.w	r3, {r0, r1}
 80187a6:	2310      	movs	r3, #16
 80187a8:	9301      	str	r3, [sp, #4]
 80187aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80187ae:	9300      	str	r3, [sp, #0]
 80187b0:	2300      	movs	r3, #0
 80187b2:	4629      	mov	r1, r5
 80187b4:	4620      	mov	r0, r4
 80187b6:	f7ff fa0f 	bl	8017bd8 <centeredString>
			centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 80187ba:	7afb      	ldrb	r3, [r7, #11]
 80187bc:	b29c      	uxth	r4, r3
 80187be:	7bbb      	ldrb	r3, [r7, #14]
 80187c0:	b29a      	uxth	r2, r3
 80187c2:	7abb      	ldrb	r3, [r7, #10]
 80187c4:	b29b      	uxth	r3, r3
 80187c6:	4413      	add	r3, r2
 80187c8:	b29b      	uxth	r3, r3
 80187ca:	3301      	adds	r3, #1
 80187cc:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 1], BLACK, LGRAY, 16, Font12);
 80187ce:	4b10      	ldr	r3, [pc, #64]	; (8018810 <drawPopup+0x2c4>)
 80187d0:	785b      	ldrb	r3, [r3, #1]
 80187d2:	3b01      	subs	r3, #1
 80187d4:	011b      	lsls	r3, r3, #4
 80187d6:	4a0e      	ldr	r2, [pc, #56]	; (8018810 <drawPopup+0x2c4>)
 80187d8:	4413      	add	r3, r2
 80187da:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 80187dc:	490d      	ldr	r1, [pc, #52]	; (8018814 <drawPopup+0x2c8>)
 80187de:	ab02      	add	r3, sp, #8
 80187e0:	c903      	ldmia	r1, {r0, r1}
 80187e2:	e883 0003 	stmia.w	r3, {r0, r1}
 80187e6:	2310      	movs	r3, #16
 80187e8:	9301      	str	r3, [sp, #4]
 80187ea:	f24c 6318 	movw	r3, #50712	; 0xc618
 80187ee:	9300      	str	r3, [sp, #0]
 80187f0:	2300      	movs	r3, #0
 80187f2:	4629      	mov	r1, r5
 80187f4:	4620      	mov	r0, r4
 80187f6:	f7ff f9ef 	bl	8017bd8 <centeredString>
}
 80187fa:	e02d      	b.n	8018858 <drawPopup+0x30c>
 80187fc:	2400008c 	.word	0x2400008c
 8018800:	2400ae57 	.word	0x2400ae57
 8018804:	2400ae55 	.word	0x2400ae55
 8018808:	2400ae52 	.word	0x2400ae52
 801880c:	2400008f 	.word	0x2400008f
 8018810:	2400c9ac 	.word	0x2400c9ac
 8018814:	24000030 	.word	0x24000030
		centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 8018818:	7afb      	ldrb	r3, [r7, #11]
 801881a:	b29c      	uxth	r4, r3
 801881c:	7bbb      	ldrb	r3, [r7, #14]
 801881e:	b29a      	uxth	r2, r3
 8018820:	7abb      	ldrb	r3, [r7, #10]
 8018822:	b29b      	uxth	r3, r3
 8018824:	4413      	add	r3, r2
 8018826:	b29b      	uxth	r3, r3
 8018828:	3301      	adds	r3, #1
 801882a:	b29d      	uxth	r5, r3
				popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 1], BLACK, LGRAY, 16, Font12);
 801882c:	4b0c      	ldr	r3, [pc, #48]	; (8018860 <drawPopup+0x314>)
 801882e:	785b      	ldrb	r3, [r3, #1]
 8018830:	3b01      	subs	r3, #1
 8018832:	011b      	lsls	r3, r3, #4
 8018834:	4a0a      	ldr	r2, [pc, #40]	; (8018860 <drawPopup+0x314>)
 8018836:	4413      	add	r3, r2
 8018838:	1c9a      	adds	r2, r3, #2
		centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 801883a:	490a      	ldr	r1, [pc, #40]	; (8018864 <drawPopup+0x318>)
 801883c:	ab02      	add	r3, sp, #8
 801883e:	c903      	ldmia	r1, {r0, r1}
 8018840:	e883 0003 	stmia.w	r3, {r0, r1}
 8018844:	2310      	movs	r3, #16
 8018846:	9301      	str	r3, [sp, #4]
 8018848:	f24c 6318 	movw	r3, #50712	; 0xc618
 801884c:	9300      	str	r3, [sp, #0]
 801884e:	2300      	movs	r3, #0
 8018850:	4629      	mov	r1, r5
 8018852:	4620      	mov	r0, r4
 8018854:	f7ff f9c0 	bl	8017bd8 <centeredString>
}
 8018858:	bf00      	nop
 801885a:	3710      	adds	r7, #16
 801885c:	46bd      	mov	sp, r7
 801885e:	bdb0      	pop	{r4, r5, r7, pc}
 8018860:	2400c9ac 	.word	0x2400c9ac
 8018864:	24000030 	.word	0x24000030

08018868 <__NVIC_SystemReset>:
{
 8018868:	b480      	push	{r7}
 801886a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 801886c:	f3bf 8f4f 	dsb	sy
}
 8018870:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8018872:	4b06      	ldr	r3, [pc, #24]	; (801888c <__NVIC_SystemReset+0x24>)
 8018874:	68db      	ldr	r3, [r3, #12]
 8018876:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801887a:	4904      	ldr	r1, [pc, #16]	; (801888c <__NVIC_SystemReset+0x24>)
 801887c:	4b04      	ldr	r3, [pc, #16]	; (8018890 <__NVIC_SystemReset+0x28>)
 801887e:	4313      	orrs	r3, r2
 8018880:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8018882:	f3bf 8f4f 	dsb	sy
}
 8018886:	bf00      	nop
    __NOP();
 8018888:	bf00      	nop
 801888a:	e7fd      	b.n	8018888 <__NVIC_SystemReset+0x20>
 801888c:	e000ed00 	.word	0xe000ed00
 8018890:	05fa0004 	.word	0x05fa0004

08018894 <func_debug>:

bool isReportParametersActive = false;
bool isInfwUpdateMode = false;

eCI_RESULT func_debug(void)
{
 8018894:	b580      	push	{r7, lr}
 8018896:	af00      	add	r7, sp, #0
//	if (!sessionUnlocked)
//	{
//		return CI_COMMAND_ERROR;
//	}
	if (get_param_count() > 0)
 8018898:	f000 fa02 	bl	8018ca0 <get_param_count>
//		ee.debugLevel = get_param_int(0);
//		ee_save1();
//		sprintf(terminalBuffer,"Debug level set to: %d",ee.debugLevel);
//		logData(terminalBuffer, false, false, false);
	}
	return CI_OK;
 801889c:	2300      	movs	r3, #0
}
 801889e:	4618      	mov	r0, r3
 80188a0:	bd80      	pop	{r7, pc}
	...

080188a4 <func_versionReport>:

eCI_RESULT func_versionReport(void)
{
 80188a4:	b580      	push	{r7, lr}
 80188a6:	b082      	sub	sp, #8
 80188a8:	af02      	add	r7, sp, #8
	sprintf(terminalBuffer,"RC Firmware Version: %2.2f, BuildID: %2.2f",versionID, buildID);
 80188aa:	4b0e      	ldr	r3, [pc, #56]	; (80188e4 <func_versionReport+0x40>)
 80188ac:	edd3 7a00 	vldr	s15, [r3]
 80188b0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80188b4:	4b0c      	ldr	r3, [pc, #48]	; (80188e8 <func_versionReport+0x44>)
 80188b6:	edd3 7a00 	vldr	s15, [r3]
 80188ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80188be:	ed8d 7b00 	vstr	d7, [sp]
 80188c2:	ec53 2b16 	vmov	r2, r3, d6
 80188c6:	4909      	ldr	r1, [pc, #36]	; (80188ec <func_versionReport+0x48>)
 80188c8:	4809      	ldr	r0, [pc, #36]	; (80188f0 <func_versionReport+0x4c>)
 80188ca:	f005 f887 	bl	801d9dc <siprintf>
	logData(terminalBuffer, false, true, false);
 80188ce:	2300      	movs	r3, #0
 80188d0:	2201      	movs	r2, #1
 80188d2:	2100      	movs	r1, #0
 80188d4:	4806      	ldr	r0, [pc, #24]	; (80188f0 <func_versionReport+0x4c>)
 80188d6:	f7fe ffdf 	bl	8017898 <logData>
	return CI_OK;
 80188da:	2300      	movs	r3, #0
}
 80188dc:	4618      	mov	r0, r3
 80188de:	46bd      	mov	sp, r7
 80188e0:	bd80      	pop	{r7, pc}
 80188e2:	bf00      	nop
 80188e4:	24000008 	.word	0x24000008
 80188e8:	2400000c 	.word	0x2400000c
 80188ec:	0802191c 	.word	0x0802191c
 80188f0:	2400aa50 	.word	0x2400aa50

080188f4 <func_resetRC>:

eCI_RESULT func_resetRC(void)
{
 80188f4:	b580      	push	{r7, lr}
 80188f6:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
 80188f8:	f7ff ffb6 	bl	8018868 <__NVIC_SystemReset>

080188fc <func_showAvailableCommands>:
	return CI_OK;
}

eCI_RESULT func_showAvailableCommands(void)
{
 80188fc:	b480      	push	{r7}
 80188fe:	af00      	add	r7, sp, #0
	return CI_OK;
 8018900:	2300      	movs	r3, #0
}
 8018902:	4618      	mov	r0, r3
 8018904:	46bd      	mov	sp, r7
 8018906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801890a:	4770      	bx	lr

0801890c <func_systemConfiguration>:

eCI_RESULT func_systemConfiguration(void)
{
 801890c:	b480      	push	{r7}
 801890e:	af00      	add	r7, sp, #0
//	if (!sessionUnlocked)
//	{
//		return CI_COMMAND_ERROR;
//	}
//	printRCConfiguration(true);
	return CI_OK;
 8018910:	2300      	movs	r3, #0
}
 8018912:	4618      	mov	r0, r3
 8018914:	46bd      	mov	sp, r7
 8018916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801891a:	4770      	bx	lr

0801891c <func_openNewLogFile>:

eCI_RESULT func_openNewLogFile(void)
{
 801891c:	b580      	push	{r7, lr}
 801891e:	af00      	add	r7, sp, #0
//	if (!sessionUnlocked)
//	{
//		return CI_COMMAND_ERROR;
//	}
	createNewLogFile();
 8018920:	f7fe fe62 	bl	80175e8 <createNewLogFile>
	logData("Received external command to create a new log file", false, false, false);
 8018924:	2300      	movs	r3, #0
 8018926:	2200      	movs	r2, #0
 8018928:	2100      	movs	r1, #0
 801892a:	4803      	ldr	r0, [pc, #12]	; (8018938 <func_openNewLogFile+0x1c>)
 801892c:	f7fe ffb4 	bl	8017898 <logData>
	return CI_NO_UART_ACK;
 8018930:	2307      	movs	r3, #7
}
 8018932:	4618      	mov	r0, r3
 8018934:	bd80      	pop	{r7, pc}
 8018936:	bf00      	nop
 8018938:	08021948 	.word	0x08021948

0801893c <func_closeCurrentLogFile>:

eCI_RESULT func_closeCurrentLogFile(void) // Do file close
{
 801893c:	b580      	push	{r7, lr}
 801893e:	af00      	add	r7, sp, #0
//	if (!sessionUnlocked)
//	{
//		return CI_COMMAND_ERROR;
//	}
	logData("Received external command to close log file", false, false, false);
 8018940:	2300      	movs	r3, #0
 8018942:	2200      	movs	r2, #0
 8018944:	2100      	movs	r1, #0
 8018946:	4804      	ldr	r0, [pc, #16]	; (8018958 <func_closeCurrentLogFile+0x1c>)
 8018948:	f7fe ffa6 	bl	8017898 <logData>
	closeLogFile();
 801894c:	f7fe ff1e 	bl	801778c <closeLogFile>
//  PRINT(SessionUnlocked);
  return CI_NO_UART_ACK;
 8018950:	2307      	movs	r3, #7
}
 8018952:	4618      	mov	r0, r3
 8018954:	bd80      	pop	{r7, pc}
 8018956:	bf00      	nop
 8018958:	0802197c 	.word	0x0802197c

0801895c <func_deleteFile>:

eCI_RESULT func_deleteFile(void)
{
 801895c:	b580      	push	{r7, lr}
 801895e:	b082      	sub	sp, #8
 8018960:	af00      	add	r7, sp, #0
//	if (!sessionUnlocked)
//	{
//		return CI_COMMAND_ERROR;
//	}
	if (get_param_count() > 0)
 8018962:	f000 f99d 	bl	8018ca0 <get_param_count>
 8018966:	4603      	mov	r3, r0
 8018968:	2b00      	cmp	r3, #0
 801896a:	d02a      	beq.n	80189c2 <func_deleteFile+0x66>
	{
		char *fn = get_param_str(0);
 801896c:	2000      	movs	r0, #0
 801896e:	f000 f9a3 	bl	8018cb8 <get_param_str>
 8018972:	6078      	str	r0, [r7, #4]
		FRESULT ret = f_unlink(fn);
 8018974:	6878      	ldr	r0, [r7, #4]
 8018976:	f7fc f93d 	bl	8014bf4 <f_unlink>
 801897a:	4603      	mov	r3, r0
 801897c:	70fb      	strb	r3, [r7, #3]
		if (ret == FR_OK)
 801897e:	78fb      	ldrb	r3, [r7, #3]
 8018980:	2b00      	cmp	r3, #0
 8018982:	d10f      	bne.n	80189a4 <func_deleteFile+0x48>
		{
			sprintf(terminalBuffer, "File %s deleted", get_param_str(0));
 8018984:	2000      	movs	r0, #0
 8018986:	f000 f997 	bl	8018cb8 <get_param_str>
 801898a:	4603      	mov	r3, r0
 801898c:	461a      	mov	r2, r3
 801898e:	490f      	ldr	r1, [pc, #60]	; (80189cc <func_deleteFile+0x70>)
 8018990:	480f      	ldr	r0, [pc, #60]	; (80189d0 <func_deleteFile+0x74>)
 8018992:	f005 f823 	bl	801d9dc <siprintf>
			logData(terminalBuffer, false, false, false);
 8018996:	2300      	movs	r3, #0
 8018998:	2200      	movs	r2, #0
 801899a:	2100      	movs	r1, #0
 801899c:	480c      	ldr	r0, [pc, #48]	; (80189d0 <func_deleteFile+0x74>)
 801899e:	f7fe ff7b 	bl	8017898 <logData>
 80189a2:	e00e      	b.n	80189c2 <func_deleteFile+0x66>
		}
		else
		{
			sprintf(terminalBuffer, "File %s was not deleted", get_param_str(0));
 80189a4:	2000      	movs	r0, #0
 80189a6:	f000 f987 	bl	8018cb8 <get_param_str>
 80189aa:	4603      	mov	r3, r0
 80189ac:	461a      	mov	r2, r3
 80189ae:	4909      	ldr	r1, [pc, #36]	; (80189d4 <func_deleteFile+0x78>)
 80189b0:	4807      	ldr	r0, [pc, #28]	; (80189d0 <func_deleteFile+0x74>)
 80189b2:	f005 f813 	bl	801d9dc <siprintf>
			logData(terminalBuffer, false, false, false);
 80189b6:	2300      	movs	r3, #0
 80189b8:	2200      	movs	r2, #0
 80189ba:	2100      	movs	r1, #0
 80189bc:	4804      	ldr	r0, [pc, #16]	; (80189d0 <func_deleteFile+0x74>)
 80189be:	f7fe ff6b 	bl	8017898 <logData>
		}
	}
	return CI_NO_UART_ACK;
 80189c2:	2307      	movs	r3, #7
}
 80189c4:	4618      	mov	r0, r3
 80189c6:	3708      	adds	r7, #8
 80189c8:	46bd      	mov	sp, r7
 80189ca:	bd80      	pop	{r7, pc}
 80189cc:	080219a8 	.word	0x080219a8
 80189d0:	2400aa50 	.word	0x2400aa50
 80189d4:	080219b8 	.word	0x080219b8

080189d8 <func_moveForward>:

eCI_RESULT func_moveForward(void)
{
 80189d8:	b480      	push	{r7}
 80189da:	af00      	add	r7, sp, #0
//	if (!sessionUnlocked)
//	{
//		return CI_COMMAND_ERROR;
//	}
	return CI_OK;
 80189dc:	2300      	movs	r3, #0
}
 80189de:	4618      	mov	r0, r3
 80189e0:	46bd      	mov	sp, r7
 80189e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189e6:	4770      	bx	lr

080189e8 <func_moveReverse>:

eCI_RESULT func_moveReverse(void)
{
 80189e8:	b480      	push	{r7}
 80189ea:	af00      	add	r7, sp, #0
//	if (!sessionUnlocked)
//	{
//		return CI_COMMAND_ERROR;
//	}
	return CI_OK;
 80189ec:	2300      	movs	r3, #0
}
 80189ee:	4618      	mov	r0, r3
 80189f0:	46bd      	mov	sp, r7
 80189f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189f6:	4770      	bx	lr

080189f8 <func_rotate>:

eCI_RESULT func_rotate(void)
{
 80189f8:	b480      	push	{r7}
 80189fa:	af00      	add	r7, sp, #0
//	if (!sessionUnlocked)
//	{
//		return CI_COMMAND_ERROR;
//	}
	return CI_OK;
 80189fc:	2300      	movs	r3, #0
}
 80189fe:	4618      	mov	r0, r3
 8018a00:	46bd      	mov	sp, r7
 8018a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a06:	4770      	bx	lr

08018a08 <func_dir>:

eCI_RESULT func_dir(void)
{
 8018a08:	b580      	push	{r7, lr}
 8018a0a:	b0d4      	sub	sp, #336	; 0x150
 8018a0c:	af00      	add	r7, sp, #0
//	{
//		return CI_COMMAND_ERROR;
//	}
    FILINFO fno1;
    DIR dp1;
    f_opendir(&dp1, "\\");
 8018a0e:	463b      	mov	r3, r7
 8018a10:	491d      	ldr	r1, [pc, #116]	; (8018a88 <func_dir+0x80>)
 8018a12:	4618      	mov	r0, r3
 8018a14:	f7fb fee4 	bl	80147e0 <f_opendir>
    f_findfirst(&dp1, &fno1, "\\", "*");
 8018a18:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8018a1c:	4638      	mov	r0, r7
 8018a1e:	4b1b      	ldr	r3, [pc, #108]	; (8018a8c <func_dir+0x84>)
 8018a20:	4a19      	ldr	r2, [pc, #100]	; (8018a88 <func_dir+0x80>)
 8018a22:	f7fb ffdb 	bl	80149dc <f_findfirst>

    while( (fno1.fname[0] != 0) )
 8018a26:	e019      	b.n	8018a5c <func_dir+0x54>
    {
    	sprintf(terminalBuffer,"%s\t %lu",fno1.fname, (long int)fno1.fsize);
 8018a28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018a2c:	681b      	ldr	r3, [r3, #0]
 8018a2e:	4619      	mov	r1, r3
 8018a30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018a34:	f103 0216 	add.w	r2, r3, #22
 8018a38:	460b      	mov	r3, r1
 8018a3a:	4915      	ldr	r1, [pc, #84]	; (8018a90 <func_dir+0x88>)
 8018a3c:	4815      	ldr	r0, [pc, #84]	; (8018a94 <func_dir+0x8c>)
 8018a3e:	f004 ffcd 	bl	801d9dc <siprintf>
    	logData(terminalBuffer, false, true, true);
 8018a42:	2301      	movs	r3, #1
 8018a44:	2201      	movs	r2, #1
 8018a46:	2100      	movs	r1, #0
 8018a48:	4812      	ldr	r0, [pc, #72]	; (8018a94 <func_dir+0x8c>)
 8018a4a:	f7fe ff25 	bl	8017898 <logData>
    	f_findnext(&dp1, &fno1);
 8018a4e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8018a52:	463b      	mov	r3, r7
 8018a54:	4611      	mov	r1, r2
 8018a56:	4618      	mov	r0, r3
 8018a58:	f7fb ff98 	bl	801498c <f_findnext>
    while( (fno1.fname[0] != 0) )
 8018a5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018a60:	7d9b      	ldrb	r3, [r3, #22]
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	d1e0      	bne.n	8018a28 <func_dir+0x20>
    }
    f_closedir(&dp1);
 8018a66:	463b      	mov	r3, r7
 8018a68:	4618      	mov	r0, r3
 8018a6a:	f7fb ff2c 	bl	80148c6 <f_closedir>
    logData("dir EOD", false, true, true);
 8018a6e:	2301      	movs	r3, #1
 8018a70:	2201      	movs	r2, #1
 8018a72:	2100      	movs	r1, #0
 8018a74:	4808      	ldr	r0, [pc, #32]	; (8018a98 <func_dir+0x90>)
 8018a76:	f7fe ff0f 	bl	8017898 <logData>
	return CI_OK;
 8018a7a:	2300      	movs	r3, #0
}
 8018a7c:	4618      	mov	r0, r3
 8018a7e:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 8018a82:	46bd      	mov	sp, r7
 8018a84:	bd80      	pop	{r7, pc}
 8018a86:	bf00      	nop
 8018a88:	080219d0 	.word	0x080219d0
 8018a8c:	080219d4 	.word	0x080219d4
 8018a90:	080219d8 	.word	0x080219d8
 8018a94:	2400aa50 	.word	0x2400aa50
 8018a98:	080219e0 	.word	0x080219e0

08018a9c <func_fmt>:

eCI_RESULT func_fmt(void)
{
 8018a9c:	b580      	push	{r7, lr}
 8018a9e:	af00      	add	r7, sp, #0
//	if (!sessionUnlocked)
//	{
//		return CI_COMMAND_ERROR;
//	}
	sprintf(terminalBuffer, "\r\n%s!Formatting Flash...restart required!\n\r", CT());
 8018aa0:	f003 fac2 	bl	801c028 <CT>
 8018aa4:	4603      	mov	r3, r0
 8018aa6:	461a      	mov	r2, r3
 8018aa8:	490a      	ldr	r1, [pc, #40]	; (8018ad4 <func_fmt+0x38>)
 8018aaa:	480b      	ldr	r0, [pc, #44]	; (8018ad8 <func_fmt+0x3c>)
 8018aac:	f004 ff96 	bl	801d9dc <siprintf>
	logData(terminalBuffer, false, false, false);
 8018ab0:	2300      	movs	r3, #0
 8018ab2:	2200      	movs	r2, #0
 8018ab4:	2100      	movs	r1, #0
 8018ab6:	4808      	ldr	r0, [pc, #32]	; (8018ad8 <func_fmt+0x3c>)
 8018ab8:	f7fe feee 	bl	8017898 <logData>
	f_sync(&USERFile);
 8018abc:	4807      	ldr	r0, [pc, #28]	; (8018adc <func_fmt+0x40>)
 8018abe:	f7fb fde7 	bl	8014690 <f_sync>
	f_close(&USERFile);
 8018ac2:	4806      	ldr	r0, [pc, #24]	; (8018adc <func_fmt+0x40>)
 8018ac4:	f7fb fe62 	bl	801478c <f_close>

//	BSP_QSPI_Erase_Chip();
//	fileSystemInit();
	createNewLogFile();
 8018ac8:	f7fe fd8e 	bl	80175e8 <createNewLogFile>
	return CI_OK;
 8018acc:	2300      	movs	r3, #0
}
 8018ace:	4618      	mov	r0, r3
 8018ad0:	bd80      	pop	{r7, pc}
 8018ad2:	bf00      	nop
 8018ad4:	080219e8 	.word	0x080219e8
 8018ad8:	2400aa50 	.word	0x2400aa50
 8018adc:	2400b3a4 	.word	0x2400b3a4

08018ae0 <funcTable>:
		{ "dir" , func_dir },
		{ "fmt" , func_fmt }
};

uint8_t funcTable( char* token )
{
 8018ae0:	b580      	push	{r7, lr}
 8018ae2:	b084      	sub	sp, #16
 8018ae4:	af00      	add	r7, sp, #0
 8018ae6:	6078      	str	r0, [r7, #4]
	for( functionsList* pCase = cases; pCase != cases + sizeof( cases ) / sizeof( cases[0] ); pCase++ )
 8018ae8:	4b0e      	ldr	r3, [pc, #56]	; (8018b24 <funcTable+0x44>)
 8018aea:	60fb      	str	r3, [r7, #12]
 8018aec:	e010      	b.n	8018b10 <funcTable+0x30>
	{
		if( 0 == strcmp( pCase->string, token ) )
 8018aee:	68fb      	ldr	r3, [r7, #12]
 8018af0:	681b      	ldr	r3, [r3, #0]
 8018af2:	6879      	ldr	r1, [r7, #4]
 8018af4:	4618      	mov	r0, r3
 8018af6:	f7e7 fbf3 	bl	80002e0 <strcmp>
 8018afa:	4603      	mov	r3, r0
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	d104      	bne.n	8018b0a <funcTable+0x2a>
		{
			(*pCase->func)();
 8018b00:	68fb      	ldr	r3, [r7, #12]
 8018b02:	685b      	ldr	r3, [r3, #4]
 8018b04:	4798      	blx	r3
			return 1;
 8018b06:	2301      	movs	r3, #1
 8018b08:	e007      	b.n	8018b1a <funcTable+0x3a>
	for( functionsList* pCase = cases; pCase != cases + sizeof( cases ) / sizeof( cases[0] ); pCase++ )
 8018b0a:	68fb      	ldr	r3, [r7, #12]
 8018b0c:	3308      	adds	r3, #8
 8018b0e:	60fb      	str	r3, [r7, #12]
 8018b10:	4a05      	ldr	r2, [pc, #20]	; (8018b28 <funcTable+0x48>)
 8018b12:	68fb      	ldr	r3, [r7, #12]
 8018b14:	4293      	cmp	r3, r2
 8018b16:	d1ea      	bne.n	8018aee <funcTable+0xe>
			break;
		}
	}
	return 0;
 8018b18:	2300      	movs	r3, #0
}
 8018b1a:	4618      	mov	r0, r3
 8018b1c:	3710      	adds	r7, #16
 8018b1e:	46bd      	mov	sp, r7
 8018b20:	bd80      	pop	{r7, pc}
 8018b22:	bf00      	nop
 8018b24:	2400a090 	.word	0x2400a090
 8018b28:	2400a0f8 	.word	0x2400a0f8

08018b2c <isfloat>:
//-----------------------------------------------------------------------------

  //---------------------------------------------------------------------------

  static bool isfloat(char* s)
  {
 8018b2c:	b480      	push	{r7}
 8018b2e:	b085      	sub	sp, #20
 8018b30:	af00      	add	r7, sp, #0
 8018b32:	6078      	str	r0, [r7, #4]
    char c;

    if (*s == '-')
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	781b      	ldrb	r3, [r3, #0]
 8018b38:	2b2d      	cmp	r3, #45	; 0x2d
 8018b3a:	d102      	bne.n	8018b42 <isfloat+0x16>
    {
      s++;
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	3301      	adds	r3, #1
 8018b40:	607b      	str	r3, [r7, #4]
    }

    c = *s++;
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	1c5a      	adds	r2, r3, #1
 8018b46:	607a      	str	r2, [r7, #4]
 8018b48:	781b      	ldrb	r3, [r3, #0]
 8018b4a:	73fb      	strb	r3, [r7, #15]

    while (c != ' ' && c != ',' && c > 0)
 8018b4c:	e009      	b.n	8018b62 <isfloat+0x36>
    {
      if (c == '.')
 8018b4e:	7bfb      	ldrb	r3, [r7, #15]
 8018b50:	2b2e      	cmp	r3, #46	; 0x2e
 8018b52:	d101      	bne.n	8018b58 <isfloat+0x2c>
      {
        return (true);
 8018b54:	2301      	movs	r3, #1
 8018b56:	e00e      	b.n	8018b76 <isfloat+0x4a>
      }

      c = *s++;
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	1c5a      	adds	r2, r3, #1
 8018b5c:	607a      	str	r2, [r7, #4]
 8018b5e:	781b      	ldrb	r3, [r3, #0]
 8018b60:	73fb      	strb	r3, [r7, #15]
    while (c != ' ' && c != ',' && c > 0)
 8018b62:	7bfb      	ldrb	r3, [r7, #15]
 8018b64:	2b20      	cmp	r3, #32
 8018b66:	d005      	beq.n	8018b74 <isfloat+0x48>
 8018b68:	7bfb      	ldrb	r3, [r7, #15]
 8018b6a:	2b2c      	cmp	r3, #44	; 0x2c
 8018b6c:	d002      	beq.n	8018b74 <isfloat+0x48>
 8018b6e:	7bfb      	ldrb	r3, [r7, #15]
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	d1ec      	bne.n	8018b4e <isfloat+0x22>
    }

    return (false);
 8018b74:	2300      	movs	r3, #0
  }
 8018b76:	4618      	mov	r0, r3
 8018b78:	3714      	adds	r7, #20
 8018b7a:	46bd      	mov	sp, r7
 8018b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b80:	4770      	bx	lr

08018b82 <skip_chars>:
  //---------------------------------------------------------------------------

  static char* skip_chars(char* s)
  {
 8018b82:	b480      	push	{r7}
 8018b84:	b083      	sub	sp, #12
 8018b86:	af00      	add	r7, sp, #0
 8018b88:	6078      	str	r0, [r7, #4]
    while (*s && *s != ',' && *s != ' ')
 8018b8a:	e002      	b.n	8018b92 <skip_chars+0x10>
    {
      s++;
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	3301      	adds	r3, #1
 8018b90:	607b      	str	r3, [r7, #4]
    while (*s && *s != ',' && *s != ' ')
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	781b      	ldrb	r3, [r3, #0]
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d007      	beq.n	8018baa <skip_chars+0x28>
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	781b      	ldrb	r3, [r3, #0]
 8018b9e:	2b2c      	cmp	r3, #44	; 0x2c
 8018ba0:	d003      	beq.n	8018baa <skip_chars+0x28>
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	781b      	ldrb	r3, [r3, #0]
 8018ba6:	2b20      	cmp	r3, #32
 8018ba8:	d1f0      	bne.n	8018b8c <skip_chars+0xa>
    }

    return (s);
 8018baa:	687b      	ldr	r3, [r7, #4]
  }
 8018bac:	4618      	mov	r0, r3
 8018bae:	370c      	adds	r7, #12
 8018bb0:	46bd      	mov	sp, r7
 8018bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bb6:	4770      	bx	lr

08018bb8 <skip_blanks>:
  //---------------------------------------------------------------------------

  static char* skip_blanks(char* s)
  {
 8018bb8:	b480      	push	{r7}
 8018bba:	b083      	sub	sp, #12
 8018bbc:	af00      	add	r7, sp, #0
 8018bbe:	6078      	str	r0, [r7, #4]
    while (*s == ' ' || *s == ',')
 8018bc0:	e002      	b.n	8018bc8 <skip_blanks+0x10>
    {
      s++;
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	3301      	adds	r3, #1
 8018bc6:	607b      	str	r3, [r7, #4]
    while (*s == ' ' || *s == ',')
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	781b      	ldrb	r3, [r3, #0]
 8018bcc:	2b20      	cmp	r3, #32
 8018bce:	d0f8      	beq.n	8018bc2 <skip_blanks+0xa>
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	781b      	ldrb	r3, [r3, #0]
 8018bd4:	2b2c      	cmp	r3, #44	; 0x2c
 8018bd6:	d0f4      	beq.n	8018bc2 <skip_blanks+0xa>
    }

    return (s);
 8018bd8:	687b      	ldr	r3, [r7, #4]
  }
 8018bda:	4618      	mov	r0, r3
 8018bdc:	370c      	adds	r7, #12
 8018bde:	46bd      	mov	sp, r7
 8018be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018be4:	4770      	bx	lr

08018be6 <remove_CRLF>:

  static char* remove_CRLF(char* s)
  {
 8018be6:	b580      	push	{r7, lr}
 8018be8:	b084      	sub	sp, #16
 8018bea:	af00      	add	r7, sp, #0
 8018bec:	6078      	str	r0, [r7, #4]
	  for (int i = 0; i < strlen(s) ; i++)
 8018bee:	2300      	movs	r3, #0
 8018bf0:	60fb      	str	r3, [r7, #12]
 8018bf2:	e013      	b.n	8018c1c <remove_CRLF+0x36>
	  {
		  if (s[i] == 0x0a || s[i] == 0x0d)
 8018bf4:	68fb      	ldr	r3, [r7, #12]
 8018bf6:	687a      	ldr	r2, [r7, #4]
 8018bf8:	4413      	add	r3, r2
 8018bfa:	781b      	ldrb	r3, [r3, #0]
 8018bfc:	2b0a      	cmp	r3, #10
 8018bfe:	d005      	beq.n	8018c0c <remove_CRLF+0x26>
 8018c00:	68fb      	ldr	r3, [r7, #12]
 8018c02:	687a      	ldr	r2, [r7, #4]
 8018c04:	4413      	add	r3, r2
 8018c06:	781b      	ldrb	r3, [r3, #0]
 8018c08:	2b0d      	cmp	r3, #13
 8018c0a:	d104      	bne.n	8018c16 <remove_CRLF+0x30>
		  {
			  s[i] = 0x00;
 8018c0c:	68fb      	ldr	r3, [r7, #12]
 8018c0e:	687a      	ldr	r2, [r7, #4]
 8018c10:	4413      	add	r3, r2
 8018c12:	2200      	movs	r2, #0
 8018c14:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < strlen(s) ; i++)
 8018c16:	68fb      	ldr	r3, [r7, #12]
 8018c18:	3301      	adds	r3, #1
 8018c1a:	60fb      	str	r3, [r7, #12]
 8018c1c:	6878      	ldr	r0, [r7, #4]
 8018c1e:	f7e7 fb69 	bl	80002f4 <strlen>
 8018c22:	4602      	mov	r2, r0
 8018c24:	68fb      	ldr	r3, [r7, #12]
 8018c26:	429a      	cmp	r2, r3
 8018c28:	d8e4      	bhi.n	8018bf4 <remove_CRLF+0xe>
		  }
	  }
	  return (s);
 8018c2a:	687b      	ldr	r3, [r7, #4]
  }
 8018c2c:	4618      	mov	r0, r3
 8018c2e:	3710      	adds	r7, #16
 8018c30:	46bd      	mov	sp, r7
 8018c32:	bd80      	pop	{r7, pc}

08018c34 <init_params>:
char* sp;
uint8_t cmd_str_len = 0;
uint32_t ascii_image = 0;

void init_params(void)
{
 8018c34:	b480      	push	{r7}
 8018c36:	af00      	add	r7, sp, #0
  for (g_ci.param_count = 0; g_ci.param_count < CI_MAX_PARAMETERS; g_ci.param_count++)
 8018c38:	4b18      	ldr	r3, [pc, #96]	; (8018c9c <init_params+0x68>)
 8018c3a:	2200      	movs	r2, #0
 8018c3c:	705a      	strb	r2, [r3, #1]
 8018c3e:	e01e      	b.n	8018c7e <init_params+0x4a>
  {
    g_ci.params[g_ci.param_count].f = 0.0f;
 8018c40:	4b16      	ldr	r3, [pc, #88]	; (8018c9c <init_params+0x68>)
 8018c42:	785b      	ldrb	r3, [r3, #1]
 8018c44:	4a15      	ldr	r2, [pc, #84]	; (8018c9c <init_params+0x68>)
 8018c46:	011b      	lsls	r3, r3, #4
 8018c48:	4413      	add	r3, r2
 8018c4a:	3304      	adds	r3, #4
 8018c4c:	f04f 0200 	mov.w	r2, #0
 8018c50:	601a      	str	r2, [r3, #0]
    g_ci.params[g_ci.param_count].i = 0;
 8018c52:	4b12      	ldr	r3, [pc, #72]	; (8018c9c <init_params+0x68>)
 8018c54:	785b      	ldrb	r3, [r3, #1]
 8018c56:	4a11      	ldr	r2, [pc, #68]	; (8018c9c <init_params+0x68>)
 8018c58:	011b      	lsls	r3, r3, #4
 8018c5a:	4413      	add	r3, r2
 8018c5c:	3308      	adds	r3, #8
 8018c5e:	2200      	movs	r2, #0
 8018c60:	601a      	str	r2, [r3, #0]
    g_ci.params[g_ci.param_count].t = CI_UNKNOWN;
 8018c62:	4b0e      	ldr	r3, [pc, #56]	; (8018c9c <init_params+0x68>)
 8018c64:	785b      	ldrb	r3, [r3, #1]
 8018c66:	4a0d      	ldr	r2, [pc, #52]	; (8018c9c <init_params+0x68>)
 8018c68:	011b      	lsls	r3, r3, #4
 8018c6a:	4413      	add	r3, r2
 8018c6c:	3310      	adds	r3, #16
 8018c6e:	2203      	movs	r2, #3
 8018c70:	701a      	strb	r2, [r3, #0]
  for (g_ci.param_count = 0; g_ci.param_count < CI_MAX_PARAMETERS; g_ci.param_count++)
 8018c72:	4b0a      	ldr	r3, [pc, #40]	; (8018c9c <init_params+0x68>)
 8018c74:	785b      	ldrb	r3, [r3, #1]
 8018c76:	3301      	adds	r3, #1
 8018c78:	b2da      	uxtb	r2, r3
 8018c7a:	4b08      	ldr	r3, [pc, #32]	; (8018c9c <init_params+0x68>)
 8018c7c:	705a      	strb	r2, [r3, #1]
 8018c7e:	4b07      	ldr	r3, [pc, #28]	; (8018c9c <init_params+0x68>)
 8018c80:	785b      	ldrb	r3, [r3, #1]
 8018c82:	2b04      	cmp	r3, #4
 8018c84:	d9dc      	bls.n	8018c40 <init_params+0xc>
  }

  g_ci.param_error = 0;
 8018c86:	4b05      	ldr	r3, [pc, #20]	; (8018c9c <init_params+0x68>)
 8018c88:	2200      	movs	r2, #0
 8018c8a:	709a      	strb	r2, [r3, #2]
  g_ci.param_count = 0;
 8018c8c:	4b03      	ldr	r3, [pc, #12]	; (8018c9c <init_params+0x68>)
 8018c8e:	2200      	movs	r2, #0
 8018c90:	705a      	strb	r2, [r3, #1]
}
 8018c92:	bf00      	nop
 8018c94:	46bd      	mov	sp, r7
 8018c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c9a:	4770      	bx	lr
 8018c9c:	2400cbb0 	.word	0x2400cbb0

08018ca0 <get_param_count>:
  g_ci.param_hex_mode = value;
}
//-----------------------------------------------------------------------------

uint32_t get_param_count(void)
{
 8018ca0:	b480      	push	{r7}
 8018ca2:	af00      	add	r7, sp, #0
  return (g_ci.param_count);
 8018ca4:	4b03      	ldr	r3, [pc, #12]	; (8018cb4 <get_param_count+0x14>)
 8018ca6:	785b      	ldrb	r3, [r3, #1]
}
 8018ca8:	4618      	mov	r0, r3
 8018caa:	46bd      	mov	sp, r7
 8018cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cb0:	4770      	bx	lr
 8018cb2:	bf00      	nop
 8018cb4:	2400cbb0 	.word	0x2400cbb0

08018cb8 <get_param_str>:
  }
}
//-----------------------------------------------------------------------------

char* get_param_str(uint8_t index)
{
 8018cb8:	b480      	push	{r7}
 8018cba:	b083      	sub	sp, #12
 8018cbc:	af00      	add	r7, sp, #0
 8018cbe:	4603      	mov	r3, r0
 8018cc0:	71fb      	strb	r3, [r7, #7]
  if (index < CI_MAX_PARAMETERS)
 8018cc2:	79fb      	ldrb	r3, [r7, #7]
 8018cc4:	2b04      	cmp	r3, #4
 8018cc6:	d806      	bhi.n	8018cd6 <get_param_str+0x1e>
  {
    return ((char*)g_ci.params[index].i);
 8018cc8:	79fb      	ldrb	r3, [r7, #7]
 8018cca:	4a07      	ldr	r2, [pc, #28]	; (8018ce8 <get_param_str+0x30>)
 8018ccc:	011b      	lsls	r3, r3, #4
 8018cce:	4413      	add	r3, r2
 8018cd0:	3308      	adds	r3, #8
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	e001      	b.n	8018cda <get_param_str+0x22>
  }
  else
  {
    return ((char*)g_ci.params[0].i);
 8018cd6:	4b04      	ldr	r3, [pc, #16]	; (8018ce8 <get_param_str+0x30>)
 8018cd8:	689b      	ldr	r3, [r3, #8]
  }
}
 8018cda:	4618      	mov	r0, r3
 8018cdc:	370c      	adds	r7, #12
 8018cde:	46bd      	mov	sp, r7
 8018ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ce4:	4770      	bx	lr
 8018ce6:	bf00      	nop
 8018ce8:	2400cbb0 	.word	0x2400cbb0

08018cec <eval_params>:
//-----------------------------------------------------------------------------

char* eval_params(char* s, uint8_t param_index)
{
 8018cec:	b580      	push	{r7, lr}
 8018cee:	b086      	sub	sp, #24
 8018cf0:	af00      	add	r7, sp, #0
 8018cf2:	6078      	str	r0, [r7, #4]
 8018cf4:	460b      	mov	r3, r1
 8018cf6:	70fb      	strb	r3, [r7, #3]
  int32_t num;
  char* stmp = s;
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	60fb      	str	r3, [r7, #12]
  bool negative = false;
 8018cfc:	2300      	movs	r3, #0
 8018cfe:	74fb      	strb	r3, [r7, #19]
  unsigned char c;

  if (param_index >= CI_MAX_PARAMETERS)
 8018d00:	78fb      	ldrb	r3, [r7, #3]
 8018d02:	2b04      	cmp	r3, #4
 8018d04:	d901      	bls.n	8018d0a <eval_params+0x1e>
  {
    return (s);
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	e0ac      	b.n	8018e64 <eval_params+0x178>
  }

  if (*s == '"')
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	781b      	ldrb	r3, [r3, #0]
 8018d0e:	2b22      	cmp	r3, #34	; 0x22
 8018d10:	d121      	bne.n	8018d56 <eval_params+0x6a>
  {
    g_ci.params[param_index].i = (int32_t)++s;
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	3301      	adds	r3, #1
 8018d16:	607b      	str	r3, [r7, #4]
 8018d18:	78fb      	ldrb	r3, [r7, #3]
 8018d1a:	687a      	ldr	r2, [r7, #4]
 8018d1c:	4953      	ldr	r1, [pc, #332]	; (8018e6c <eval_params+0x180>)
 8018d1e:	011b      	lsls	r3, r3, #4
 8018d20:	440b      	add	r3, r1
 8018d22:	3308      	adds	r3, #8
 8018d24:	601a      	str	r2, [r3, #0]

    g_ci.params[param_index].t = CI_STRING;
 8018d26:	78fb      	ldrb	r3, [r7, #3]
 8018d28:	4a50      	ldr	r2, [pc, #320]	; (8018e6c <eval_params+0x180>)
 8018d2a:	011b      	lsls	r3, r3, #4
 8018d2c:	4413      	add	r3, r2
 8018d2e:	3310      	adds	r3, #16
 8018d30:	2202      	movs	r2, #2
 8018d32:	701a      	strb	r2, [r3, #0]

    while (*s > 0 && *s++ != '"')
 8018d34:	bf00      	nop
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	781b      	ldrb	r3, [r3, #0]
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	d005      	beq.n	8018d4a <eval_params+0x5e>
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	1c5a      	adds	r2, r3, #1
 8018d42:	607a      	str	r2, [r7, #4]
 8018d44:	781b      	ldrb	r3, [r3, #0]
 8018d46:	2b22      	cmp	r3, #34	; 0x22
 8018d48:	d1f5      	bne.n	8018d36 <eval_params+0x4a>
    {
    }

    *(s - 1) = 0;
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	3b01      	subs	r3, #1
 8018d4e:	2200      	movs	r2, #0
 8018d50:	701a      	strb	r2, [r3, #0]

    return (s);
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	e086      	b.n	8018e64 <eval_params+0x178>
  }
  else if (isfloat(s))
 8018d56:	6878      	ldr	r0, [r7, #4]
 8018d58:	f7ff fee8 	bl	8018b2c <isfloat>
 8018d5c:	4603      	mov	r3, r0
 8018d5e:	2b00      	cmp	r3, #0
 8018d60:	d027      	beq.n	8018db2 <eval_params+0xc6>
  {
    g_ci.params[param_index].f = (float)atof(s);
 8018d62:	6878      	ldr	r0, [r7, #4]
 8018d64:	f003 fc94 	bl	801c690 <atof>
 8018d68:	eeb0 7b40 	vmov.f64	d7, d0
 8018d6c:	78fb      	ldrb	r3, [r7, #3]
 8018d6e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8018d72:	4a3e      	ldr	r2, [pc, #248]	; (8018e6c <eval_params+0x180>)
 8018d74:	011b      	lsls	r3, r3, #4
 8018d76:	4413      	add	r3, r2
 8018d78:	3304      	adds	r3, #4
 8018d7a:	edc3 7a00 	vstr	s15, [r3]
    g_ci.params[param_index].i = (int32_t)g_ci.params[param_index].f;
 8018d7e:	78fb      	ldrb	r3, [r7, #3]
 8018d80:	4a3a      	ldr	r2, [pc, #232]	; (8018e6c <eval_params+0x180>)
 8018d82:	011b      	lsls	r3, r3, #4
 8018d84:	4413      	add	r3, r2
 8018d86:	3304      	adds	r3, #4
 8018d88:	edd3 7a00 	vldr	s15, [r3]
 8018d8c:	78fb      	ldrb	r3, [r7, #3]
 8018d8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018d92:	ee17 1a90 	vmov	r1, s15
 8018d96:	4a35      	ldr	r2, [pc, #212]	; (8018e6c <eval_params+0x180>)
 8018d98:	011b      	lsls	r3, r3, #4
 8018d9a:	4413      	add	r3, r2
 8018d9c:	3308      	adds	r3, #8
 8018d9e:	6019      	str	r1, [r3, #0]
    g_ci.params[param_index].t = CI_FLOAT;
 8018da0:	78fb      	ldrb	r3, [r7, #3]
 8018da2:	4a32      	ldr	r2, [pc, #200]	; (8018e6c <eval_params+0x180>)
 8018da4:	011b      	lsls	r3, r3, #4
 8018da6:	4413      	add	r3, r2
 8018da8:	3310      	adds	r3, #16
 8018daa:	2201      	movs	r2, #1
 8018dac:	701a      	strb	r2, [r3, #0]

    return (s);
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	e058      	b.n	8018e64 <eval_params+0x178>
  }

  s = stmp;
 8018db2:	68fb      	ldr	r3, [r7, #12]
 8018db4:	607b      	str	r3, [r7, #4]

  if (*s == '-')
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	781b      	ldrb	r3, [r3, #0]
 8018dba:	2b2d      	cmp	r3, #45	; 0x2d
 8018dbc:	d104      	bne.n	8018dc8 <eval_params+0xdc>
  {
    negative = true;
 8018dbe:	2301      	movs	r3, #1
 8018dc0:	74fb      	strb	r3, [r7, #19]
    s++;
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	3301      	adds	r3, #1
 8018dc6:	607b      	str	r3, [r7, #4]
  }

  for (num = 0; isdigit(c = *s); s++)
 8018dc8:	2300      	movs	r3, #0
 8018dca:	617b      	str	r3, [r7, #20]
 8018dcc:	e00c      	b.n	8018de8 <eval_params+0xfc>
  {
    num = num * 10 + (c - '0');
 8018dce:	697a      	ldr	r2, [r7, #20]
 8018dd0:	4613      	mov	r3, r2
 8018dd2:	009b      	lsls	r3, r3, #2
 8018dd4:	4413      	add	r3, r2
 8018dd6:	005b      	lsls	r3, r3, #1
 8018dd8:	461a      	mov	r2, r3
 8018dda:	7afb      	ldrb	r3, [r7, #11]
 8018ddc:	3b30      	subs	r3, #48	; 0x30
 8018dde:	4413      	add	r3, r2
 8018de0:	617b      	str	r3, [r7, #20]
  for (num = 0; isdigit(c = *s); s++)
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	3301      	adds	r3, #1
 8018de6:	607b      	str	r3, [r7, #4]
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	781b      	ldrb	r3, [r3, #0]
 8018dec:	72fb      	strb	r3, [r7, #11]
 8018dee:	7afb      	ldrb	r3, [r7, #11]
 8018df0:	3301      	adds	r3, #1
 8018df2:	4a1f      	ldr	r2, [pc, #124]	; (8018e70 <eval_params+0x184>)
 8018df4:	4413      	add	r3, r2
 8018df6:	781b      	ldrb	r3, [r3, #0]
 8018df8:	f003 0304 	and.w	r3, r3, #4
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	d1e6      	bne.n	8018dce <eval_params+0xe2>
  }

  if (c > 0 && c != ',' && c != ' ' && c != 0x0a)
 8018e00:	7afb      	ldrb	r3, [r7, #11]
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	d00d      	beq.n	8018e22 <eval_params+0x136>
 8018e06:	7afb      	ldrb	r3, [r7, #11]
 8018e08:	2b2c      	cmp	r3, #44	; 0x2c
 8018e0a:	d00a      	beq.n	8018e22 <eval_params+0x136>
 8018e0c:	7afb      	ldrb	r3, [r7, #11]
 8018e0e:	2b20      	cmp	r3, #32
 8018e10:	d007      	beq.n	8018e22 <eval_params+0x136>
 8018e12:	7afb      	ldrb	r3, [r7, #11]
 8018e14:	2b0a      	cmp	r3, #10
 8018e16:	d004      	beq.n	8018e22 <eval_params+0x136>
  {
    g_ci.param_error = param_index + 1;
 8018e18:	78fb      	ldrb	r3, [r7, #3]
 8018e1a:	3301      	adds	r3, #1
 8018e1c:	b2da      	uxtb	r2, r3
 8018e1e:	4b13      	ldr	r3, [pc, #76]	; (8018e6c <eval_params+0x180>)
 8018e20:	709a      	strb	r2, [r3, #2]
  }

  if (negative)
 8018e22:	7cfb      	ldrb	r3, [r7, #19]
 8018e24:	2b00      	cmp	r3, #0
 8018e26:	d002      	beq.n	8018e2e <eval_params+0x142>
  {
    num = -num;
 8018e28:	697b      	ldr	r3, [r7, #20]
 8018e2a:	425b      	negs	r3, r3
 8018e2c:	617b      	str	r3, [r7, #20]
  }

  g_ci.params[param_index].i = num;
 8018e2e:	78fb      	ldrb	r3, [r7, #3]
 8018e30:	4a0e      	ldr	r2, [pc, #56]	; (8018e6c <eval_params+0x180>)
 8018e32:	011b      	lsls	r3, r3, #4
 8018e34:	4413      	add	r3, r2
 8018e36:	3308      	adds	r3, #8
 8018e38:	697a      	ldr	r2, [r7, #20]
 8018e3a:	601a      	str	r2, [r3, #0]

  g_ci.params[param_index].f = (float)num;
 8018e3c:	78fb      	ldrb	r3, [r7, #3]
 8018e3e:	697a      	ldr	r2, [r7, #20]
 8018e40:	ee07 2a90 	vmov	s15, r2
 8018e44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018e48:	4a08      	ldr	r2, [pc, #32]	; (8018e6c <eval_params+0x180>)
 8018e4a:	011b      	lsls	r3, r3, #4
 8018e4c:	4413      	add	r3, r2
 8018e4e:	3304      	adds	r3, #4
 8018e50:	edc3 7a00 	vstr	s15, [r3]

  g_ci.params[param_index].t = CI_INT;
 8018e54:	78fb      	ldrb	r3, [r7, #3]
 8018e56:	4a05      	ldr	r2, [pc, #20]	; (8018e6c <eval_params+0x180>)
 8018e58:	011b      	lsls	r3, r3, #4
 8018e5a:	4413      	add	r3, r2
 8018e5c:	3310      	adds	r3, #16
 8018e5e:	2200      	movs	r2, #0
 8018e60:	701a      	strb	r2, [r3, #0]

  return (s);
 8018e62:	687b      	ldr	r3, [r7, #4]
}
 8018e64:	4618      	mov	r0, r3
 8018e66:	3718      	adds	r7, #24
 8018e68:	46bd      	mov	sp, r7
 8018e6a:	bd80      	pop	{r7, pc}
 8018e6c:	2400cbb0 	.word	0x2400cbb0
 8018e70:	0802a72b 	.word	0x0802a72b

08018e74 <parse>:
//-----------------------------------------------------------------------------

uint32_t parse(char* s)
{
 8018e74:	b580      	push	{r7, lr}
 8018e76:	b084      	sub	sp, #16
 8018e78:	af00      	add	r7, sp, #0
 8018e7a:	6078      	str	r0, [r7, #4]
  ascii_image = 0;
 8018e7c:	4b48      	ldr	r3, [pc, #288]	; (8018fa0 <parse+0x12c>)
 8018e7e:	2200      	movs	r2, #0
 8018e80:	601a      	str	r2, [r3, #0]
  uint8_t n;
  cmd_str_len = 0;
 8018e82:	4b48      	ldr	r3, [pc, #288]	; (8018fa4 <parse+0x130>)
 8018e84:	2200      	movs	r2, #0
 8018e86:	701a      	strb	r2, [r3, #0]
  memset(CommandsArray, 0, 5);
 8018e88:	2205      	movs	r2, #5
 8018e8a:	2100      	movs	r1, #0
 8018e8c:	4846      	ldr	r0, [pc, #280]	; (8018fa8 <parse+0x134>)
 8018e8e:	f003 fc7b 	bl	801c788 <memset>

  init_params();
 8018e92:	f7ff fecf 	bl	8018c34 <init_params>
  s = remove_CRLF((char*)s);
 8018e96:	6878      	ldr	r0, [r7, #4]
 8018e98:	f7ff fea5 	bl	8018be6 <remove_CRLF>
 8018e9c:	6078      	str	r0, [r7, #4]
  s = skip_blanks((char*)s);
 8018e9e:	6878      	ldr	r0, [r7, #4]
 8018ea0:	f7ff fe8a 	bl	8018bb8 <skip_blanks>
 8018ea4:	6078      	str	r0, [r7, #4]

  sp = s;
 8018ea6:	4a41      	ldr	r2, [pc, #260]	; (8018fac <parse+0x138>)
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	6013      	str	r3, [r2, #0]

  s = skip_chars(s);
 8018eac:	6878      	ldr	r0, [r7, #4]
 8018eae:	f7ff fe68 	bl	8018b82 <skip_chars>
 8018eb2:	6078      	str	r0, [r7, #4]

  cmd_str_len = (uint8_t)(s - sp);
 8018eb4:	4b3d      	ldr	r3, [pc, #244]	; (8018fac <parse+0x138>)
 8018eb6:	681b      	ldr	r3, [r3, #0]
 8018eb8:	687a      	ldr	r2, [r7, #4]
 8018eba:	1ad3      	subs	r3, r2, r3
 8018ebc:	b2da      	uxtb	r2, r3
 8018ebe:	4b39      	ldr	r3, [pc, #228]	; (8018fa4 <parse+0x130>)
 8018ec0:	701a      	strb	r2, [r3, #0]

  *s++ = 0;
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	1c5a      	adds	r2, r3, #1
 8018ec6:	607a      	str	r2, [r7, #4]
 8018ec8:	2200      	movs	r2, #0
 8018eca:	701a      	strb	r2, [r3, #0]

  if (cmd_str_len > 4)
 8018ecc:	4b35      	ldr	r3, [pc, #212]	; (8018fa4 <parse+0x130>)
 8018ece:	781b      	ldrb	r3, [r3, #0]
 8018ed0:	2b04      	cmp	r3, #4
 8018ed2:	d902      	bls.n	8018eda <parse+0x66>
  {
    cmd_str_len = 4;
 8018ed4:	4b33      	ldr	r3, [pc, #204]	; (8018fa4 <parse+0x130>)
 8018ed6:	2204      	movs	r2, #4
 8018ed8:	701a      	strb	r2, [r3, #0]
  }

  sp += cmd_str_len - 1;
 8018eda:	4b34      	ldr	r3, [pc, #208]	; (8018fac <parse+0x138>)
 8018edc:	681a      	ldr	r2, [r3, #0]
 8018ede:	4b31      	ldr	r3, [pc, #196]	; (8018fa4 <parse+0x130>)
 8018ee0:	781b      	ldrb	r3, [r3, #0]
 8018ee2:	3b01      	subs	r3, #1
 8018ee4:	4413      	add	r3, r2
 8018ee6:	4a31      	ldr	r2, [pc, #196]	; (8018fac <parse+0x138>)
 8018ee8:	6013      	str	r3, [r2, #0]

  for (n = cmd_str_len; n-1; n--)
 8018eea:	4b2e      	ldr	r3, [pc, #184]	; (8018fa4 <parse+0x130>)
 8018eec:	781b      	ldrb	r3, [r3, #0]
 8018eee:	73fb      	strb	r3, [r7, #15]
 8018ef0:	e013      	b.n	8018f1a <parse+0xa6>
  {
    ascii_image <<= 8;
 8018ef2:	4b2b      	ldr	r3, [pc, #172]	; (8018fa0 <parse+0x12c>)
 8018ef4:	681b      	ldr	r3, [r3, #0]
 8018ef6:	021b      	lsls	r3, r3, #8
 8018ef8:	4a29      	ldr	r2, [pc, #164]	; (8018fa0 <parse+0x12c>)
 8018efa:	6013      	str	r3, [r2, #0]
    ascii_image += *sp--;
 8018efc:	4b2b      	ldr	r3, [pc, #172]	; (8018fac <parse+0x138>)
 8018efe:	681b      	ldr	r3, [r3, #0]
 8018f00:	1e5a      	subs	r2, r3, #1
 8018f02:	492a      	ldr	r1, [pc, #168]	; (8018fac <parse+0x138>)
 8018f04:	600a      	str	r2, [r1, #0]
 8018f06:	781b      	ldrb	r3, [r3, #0]
 8018f08:	461a      	mov	r2, r3
 8018f0a:	4b25      	ldr	r3, [pc, #148]	; (8018fa0 <parse+0x12c>)
 8018f0c:	681b      	ldr	r3, [r3, #0]
 8018f0e:	4413      	add	r3, r2
 8018f10:	4a23      	ldr	r2, [pc, #140]	; (8018fa0 <parse+0x12c>)
 8018f12:	6013      	str	r3, [r2, #0]
  for (n = cmd_str_len; n-1; n--)
 8018f14:	7bfb      	ldrb	r3, [r7, #15]
 8018f16:	3b01      	subs	r3, #1
 8018f18:	73fb      	strb	r3, [r7, #15]
 8018f1a:	7bfb      	ldrb	r3, [r7, #15]
 8018f1c:	2b01      	cmp	r3, #1
 8018f1e:	d1e8      	bne.n	8018ef2 <parse+0x7e>
  }
  memcpy(CommandsArray,sp,cmd_str_len);
 8018f20:	4b22      	ldr	r3, [pc, #136]	; (8018fac <parse+0x138>)
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	4a1f      	ldr	r2, [pc, #124]	; (8018fa4 <parse+0x130>)
 8018f26:	7812      	ldrb	r2, [r2, #0]
 8018f28:	4619      	mov	r1, r3
 8018f2a:	481f      	ldr	r0, [pc, #124]	; (8018fa8 <parse+0x134>)
 8018f2c:	f003 fc04 	bl	801c738 <memcpy>
  ascii_image += *sp--;
 8018f30:	4b1e      	ldr	r3, [pc, #120]	; (8018fac <parse+0x138>)
 8018f32:	681b      	ldr	r3, [r3, #0]
 8018f34:	1e5a      	subs	r2, r3, #1
 8018f36:	491d      	ldr	r1, [pc, #116]	; (8018fac <parse+0x138>)
 8018f38:	600a      	str	r2, [r1, #0]
 8018f3a:	781b      	ldrb	r3, [r3, #0]
 8018f3c:	461a      	mov	r2, r3
 8018f3e:	4b18      	ldr	r3, [pc, #96]	; (8018fa0 <parse+0x12c>)
 8018f40:	681b      	ldr	r3, [r3, #0]
 8018f42:	4413      	add	r3, r2
 8018f44:	4a16      	ldr	r2, [pc, #88]	; (8018fa0 <parse+0x12c>)
 8018f46:	6013      	str	r3, [r2, #0]

  init_params();
 8018f48:	f7ff fe74 	bl	8018c34 <init_params>


  while (*s && g_ci.param_count < CI_MAX_PARAMETERS)
 8018f4c:	e016      	b.n	8018f7c <parse+0x108>
  {
    s = skip_blanks(s);
 8018f4e:	6878      	ldr	r0, [r7, #4]
 8018f50:	f7ff fe32 	bl	8018bb8 <skip_blanks>
 8018f54:	6078      	str	r0, [r7, #4]

   if (*s != 0)
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	781b      	ldrb	r3, [r3, #0]
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d00e      	beq.n	8018f7c <parse+0x108>
    {
      s = eval_params(s, g_ci.param_count++);
 8018f5e:	4b14      	ldr	r3, [pc, #80]	; (8018fb0 <parse+0x13c>)
 8018f60:	785b      	ldrb	r3, [r3, #1]
 8018f62:	1c5a      	adds	r2, r3, #1
 8018f64:	b2d1      	uxtb	r1, r2
 8018f66:	4a12      	ldr	r2, [pc, #72]	; (8018fb0 <parse+0x13c>)
 8018f68:	7051      	strb	r1, [r2, #1]
 8018f6a:	4619      	mov	r1, r3
 8018f6c:	6878      	ldr	r0, [r7, #4]
 8018f6e:	f7ff febd 	bl	8018cec <eval_params>
 8018f72:	6078      	str	r0, [r7, #4]

      s = skip_chars(s);
 8018f74:	6878      	ldr	r0, [r7, #4]
 8018f76:	f7ff fe04 	bl	8018b82 <skip_chars>
 8018f7a:	6078      	str	r0, [r7, #4]
  while (*s && g_ci.param_count < CI_MAX_PARAMETERS)
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	781b      	ldrb	r3, [r3, #0]
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	d003      	beq.n	8018f8c <parse+0x118>
 8018f84:	4b0a      	ldr	r3, [pc, #40]	; (8018fb0 <parse+0x13c>)
 8018f86:	785b      	ldrb	r3, [r3, #1]
 8018f88:	2b04      	cmp	r3, #4
 8018f8a:	d9e0      	bls.n	8018f4e <parse+0xda>
    }
  }
  uint8_t ret = funcTable(CommandsArray);
 8018f8c:	4806      	ldr	r0, [pc, #24]	; (8018fa8 <parse+0x134>)
 8018f8e:	f7ff fda7 	bl	8018ae0 <funcTable>
 8018f92:	4603      	mov	r3, r0
 8018f94:	73bb      	strb	r3, [r7, #14]
//  if (!ee_validate1())
//  {
//
//  }

  return ret;
 8018f96:	7bbb      	ldrb	r3, [r7, #14]
}
 8018f98:	4618      	mov	r0, r3
 8018f9a:	3710      	adds	r7, #16
 8018f9c:	46bd      	mov	sp, r7
 8018f9e:	bd80      	pop	{r7, pc}
 8018fa0:	2400ae70 	.word	0x2400ae70
 8018fa4:	2400ae6d 	.word	0x2400ae6d
 8018fa8:	2400ae68 	.word	0x2400ae68
 8018fac:	2400cc04 	.word	0x2400cc04
 8018fb0:	2400cbb0 	.word	0x2400cbb0

08018fb4 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8018fb4:	b580      	push	{r7, lr}
 8018fb6:	b082      	sub	sp, #8
 8018fb8:	af00      	add	r7, sp, #0
 8018fba:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 8018fbc:	4b04      	ldr	r3, [pc, #16]	; (8018fd0 <HAL_HSEM_FreeCallback+0x1c>)
 8018fbe:	2201      	movs	r2, #1
 8018fc0:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM7 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 8018fc2:	2002      	movs	r0, #2
 8018fc4:	f7ee fa32 	bl	800742c <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 8018fc8:	bf00      	nop
 8018fca:	3708      	adds	r7, #8
 8018fcc:	46bd      	mov	sp, r7
 8018fce:	bd80      	pop	{r7, pc}
 8018fd0:	2400ae74 	.word	0x2400ae74

08018fd4 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 8018fd4:	b580      	push	{r7, lr}
 8018fd6:	b082      	sub	sp, #8
 8018fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 8018fda:	4b0b      	ldr	r3, [pc, #44]	; (8019008 <MAILBOX_Init+0x34>)
 8018fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018fe0:	4a09      	ldr	r2, [pc, #36]	; (8019008 <MAILBOX_Init+0x34>)
 8018fe2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8018fe6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8018fea:	4b07      	ldr	r3, [pc, #28]	; (8019008 <MAILBOX_Init+0x34>)
 8018fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018ff4:	607b      	str	r3, [r7, #4]
 8018ff6:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN PRE_MAILBOX_INIT_CM7 */

  /* USER CODE END PRE_MAILBOX_INIT_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 8018ff8:	2002      	movs	r0, #2
 8018ffa:	f7ee fa17 	bl	800742c <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 8018ffe:	2300      	movs	r3, #0
}
 8019000:	4618      	mov	r0, r3
 8019002:	3708      	adds	r7, #8
 8019004:	46bd      	mov	sp, r7
 8019006:	bd80      	pop	{r7, pc}
 8019008:	58024400 	.word	0x58024400

0801900c <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 801900c:	b580      	push	{r7, lr}
 801900e:	b082      	sub	sp, #8
 8019010:	af00      	add	r7, sp, #0
 8019012:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 8019014:	4b09      	ldr	r3, [pc, #36]	; (801903c <MAILBOX_Poll+0x30>)
 8019016:	681b      	ldr	r3, [r3, #0]
 8019018:	2b01      	cmp	r3, #1
 801901a:	d108      	bne.n	801902e <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM7 */

    /* USER CODE END PRE_NEW_MSG_CM7 */

    rproc_virtio_notified(vdev, VRING0_ID);
 801901c:	2100      	movs	r1, #0
 801901e:	6878      	ldr	r0, [r7, #4]
 8019020:	f7fc feb7 	bl	8015d92 <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 8019024:	4b05      	ldr	r3, [pc, #20]	; (801903c <MAILBOX_Poll+0x30>)
 8019026:	2200      	movs	r2, #0
 8019028:	601a      	str	r2, [r3, #0]
    return 0;
 801902a:	2300      	movs	r3, #0
 801902c:	e001      	b.n	8019032 <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 801902e:	f06f 030a 	mvn.w	r3, #10
}
 8019032:	4618      	mov	r0, r3
 8019034:	3708      	adds	r7, #8
 8019036:	46bd      	mov	sp, r7
 8019038:	bd80      	pop	{r7, pc}
 801903a:	bf00      	nop
 801903c:	2400ae74 	.word	0x2400ae74

08019040 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 8019040:	b580      	push	{r7, lr}
 8019042:	b082      	sub	sp, #8
 8019044:	af00      	add	r7, sp, #0
 8019046:	6078      	str	r0, [r7, #4]
 8019048:	6039      	str	r1, [r7, #0]
#ifdef CORE_CM7

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM7 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM7 */
  HAL_HSEM_FastTake(HSEM_ID_0);
 801904a:	2000      	movs	r0, #0
 801904c:	f7ee f9c0 	bl	80073d0 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_0,0);
 8019050:	2100      	movs	r1, #0
 8019052:	2000      	movs	r0, #0
 8019054:	f7ee f9d6 	bl	8007404 <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 8019058:	2300      	movs	r3, #0
}
 801905a:	4618      	mov	r0, r3
 801905c:	3708      	adds	r7, #8
 801905e:	46bd      	mov	sp, r7
 8019060:	bd80      	pop	{r7, pc}

08019062 <is_rpmsg_ept_ready>:
 *
 * Returns 1 if the rpmsg endpoint has both local addr and destination
 * addr set, 0 otherwise
 */
static inline unsigned int is_rpmsg_ept_ready(struct rpmsg_endpoint *ept)
{
 8019062:	b480      	push	{r7}
 8019064:	b083      	sub	sp, #12
 8019066:	af00      	add	r7, sp, #0
 8019068:	6078      	str	r0, [r7, #4]
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801906e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019072:	d006      	beq.n	8019082 <is_rpmsg_ept_ready+0x20>
		ept->addr != RPMSG_ADDR_ANY);
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 8019078:	f1b3 3fff 	cmp.w	r3, #4294967295
 801907c:	d001      	beq.n	8019082 <is_rpmsg_ept_ready+0x20>
 801907e:	2301      	movs	r3, #1
 8019080:	e000      	b.n	8019084 <is_rpmsg_ept_ready+0x22>
 8019082:	2300      	movs	r3, #0
}
 8019084:	4618      	mov	r0, r3
 8019086:	370c      	adds	r7, #12
 8019088:	46bd      	mov	sp, r7
 801908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801908e:	4770      	bx	lr

08019090 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 8019090:	b480      	push	{r7}
 8019092:	b083      	sub	sp, #12
 8019094:	af00      	add	r7, sp, #0
 8019096:	6078      	str	r0, [r7, #4]
 8019098:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 801909e:	683a      	ldr	r2, [r7, #0]
 80190a0:	429a      	cmp	r2, r3
 80190a2:	d209      	bcs.n	80190b8 <metal_device_io_region+0x28>
 80190a4:	683a      	ldr	r2, [r7, #0]
 80190a6:	4613      	mov	r3, r2
 80190a8:	005b      	lsls	r3, r3, #1
 80190aa:	4413      	add	r3, r2
 80190ac:	011b      	lsls	r3, r3, #4
 80190ae:	3308      	adds	r3, #8
 80190b0:	687a      	ldr	r2, [r7, #4]
 80190b2:	4413      	add	r3, r2
 80190b4:	3304      	adds	r3, #4
 80190b6:	e000      	b.n	80190ba <metal_device_io_region+0x2a>
 80190b8:	2300      	movs	r3, #0
}
 80190ba:	4618      	mov	r0, r3
 80190bc:	370c      	adds	r7, #12
 80190be:	46bd      	mov	sp, r7
 80190c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190c4:	4770      	bx	lr
	...

080190c8 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 80190c8:	b590      	push	{r4, r7, lr}
 80190ca:	b08d      	sub	sp, #52	; 0x34
 80190cc:	af04      	add	r7, sp, #16
 80190ce:	6078      	str	r0, [r7, #4]
  int status = 0;
 80190d0:	2300      	movs	r3, #0
 80190d2:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 80190d4:	2300      	movs	r3, #0
 80190d6:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 80190d8:	4a41      	ldr	r2, [pc, #260]	; (80191e0 <OPENAMP_shmem_init+0x118>)
 80190da:	f107 0310 	add.w	r3, r7, #16
 80190de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80190e2:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 80190e6:	2300      	movs	r3, #0
 80190e8:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 80190ea:	2300      	movs	r3, #0
 80190ec:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 80190ee:	f107 0310 	add.w	r3, r7, #16
 80190f2:	4618      	mov	r0, r3
 80190f4:	f7fc f900 	bl	80152f8 <metal_init>

  status = metal_register_generic_device(&shm_device);
 80190f8:	483a      	ldr	r0, [pc, #232]	; (80191e4 <OPENAMP_shmem_init+0x11c>)
 80190fa:	f7fb ffa5 	bl	8015048 <metal_register_generic_device>
 80190fe:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8019100:	69fb      	ldr	r3, [r7, #28]
 8019102:	2b00      	cmp	r3, #0
 8019104:	d001      	beq.n	801910a <OPENAMP_shmem_init+0x42>
    return status;
 8019106:	69fb      	ldr	r3, [r7, #28]
 8019108:	e066      	b.n	80191d8 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 801910a:	f107 0318 	add.w	r3, r7, #24
 801910e:	461a      	mov	r2, r3
 8019110:	4935      	ldr	r1, [pc, #212]	; (80191e8 <OPENAMP_shmem_init+0x120>)
 8019112:	4836      	ldr	r0, [pc, #216]	; (80191ec <OPENAMP_shmem_init+0x124>)
 8019114:	f7fb ff5a 	bl	8014fcc <metal_device_open>
 8019118:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 801911a:	69fb      	ldr	r3, [r7, #28]
 801911c:	2b00      	cmp	r3, #0
 801911e:	d001      	beq.n	8019124 <OPENAMP_shmem_init+0x5c>
    return status;
 8019120:	69fb      	ldr	r3, [r7, #28]
 8019122:	e059      	b.n	80191d8 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 8019124:	4a32      	ldr	r2, [pc, #200]	; (80191f0 <OPENAMP_shmem_init+0x128>)
 8019126:	4b33      	ldr	r3, [pc, #204]	; (80191f4 <OPENAMP_shmem_init+0x12c>)
 8019128:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 801912a:	69bb      	ldr	r3, [r7, #24]
 801912c:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 8019130:	4a31      	ldr	r2, [pc, #196]	; (80191f8 <OPENAMP_shmem_init+0x130>)
 8019132:	4b2f      	ldr	r3, [pc, #188]	; (80191f0 <OPENAMP_shmem_init+0x128>)
 8019134:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8019136:	461a      	mov	r2, r3
 8019138:	2300      	movs	r3, #0
 801913a:	9302      	str	r3, [sp, #8]
 801913c:	2300      	movs	r3, #0
 801913e:	9301      	str	r3, [sp, #4]
 8019140:	f04f 33ff 	mov.w	r3, #4294967295
 8019144:	9300      	str	r3, [sp, #0]
 8019146:	4613      	mov	r3, r2
 8019148:	4a2a      	ldr	r2, [pc, #168]	; (80191f4 <OPENAMP_shmem_init+0x12c>)
 801914a:	4929      	ldr	r1, [pc, #164]	; (80191f0 <OPENAMP_shmem_init+0x128>)
 801914c:	f7fc f921 	bl	8015392 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 8019150:	69bb      	ldr	r3, [r7, #24]
 8019152:	2100      	movs	r1, #0
 8019154:	4618      	mov	r0, r3
 8019156:	f7ff ff9b 	bl	8019090 <metal_device_io_region>
 801915a:	4603      	mov	r3, r0
 801915c:	4a27      	ldr	r2, [pc, #156]	; (80191fc <OPENAMP_shmem_init+0x134>)
 801915e:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 8019160:	4b26      	ldr	r3, [pc, #152]	; (80191fc <OPENAMP_shmem_init+0x134>)
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	2b00      	cmp	r3, #0
 8019166:	d102      	bne.n	801916e <OPENAMP_shmem_init+0xa6>
    return -1;
 8019168:	f04f 33ff 	mov.w	r3, #4294967295
 801916c:	e034      	b.n	80191d8 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 801916e:	f107 0208 	add.w	r2, r7, #8
 8019172:	f107 030c 	add.w	r3, r7, #12
 8019176:	4619      	mov	r1, r3
 8019178:	6878      	ldr	r0, [r7, #4]
 801917a:	f000 f91d 	bl	80193b8 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 801917e:	68fb      	ldr	r3, [r7, #12]
 8019180:	4a1f      	ldr	r2, [pc, #124]	; (8019200 <OPENAMP_shmem_init+0x138>)
 8019182:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 8019184:	4b1e      	ldr	r3, [pc, #120]	; (8019200 <OPENAMP_shmem_init+0x138>)
 8019186:	681b      	ldr	r3, [r3, #0]
 8019188:	2b00      	cmp	r3, #0
 801918a:	d102      	bne.n	8019192 <OPENAMP_shmem_init+0xca>
  {
    return -1;
 801918c:	f04f 33ff 	mov.w	r3, #4294967295
 8019190:	e022      	b.n	80191d8 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 8019192:	69bb      	ldr	r3, [r7, #24]
 8019194:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8019198:	4b19      	ldr	r3, [pc, #100]	; (8019200 <OPENAMP_shmem_init+0x138>)
 801919a:	6819      	ldr	r1, [r3, #0]
 801919c:	4b18      	ldr	r3, [pc, #96]	; (8019200 <OPENAMP_shmem_init+0x138>)
 801919e:	681a      	ldr	r2, [r3, #0]
 80191a0:	68bb      	ldr	r3, [r7, #8]
 80191a2:	461c      	mov	r4, r3
 80191a4:	2300      	movs	r3, #0
 80191a6:	9302      	str	r3, [sp, #8]
 80191a8:	2300      	movs	r3, #0
 80191aa:	9301      	str	r3, [sp, #4]
 80191ac:	f04f 33ff 	mov.w	r3, #4294967295
 80191b0:	9300      	str	r3, [sp, #0]
 80191b2:	4623      	mov	r3, r4
 80191b4:	f7fc f8ed 	bl	8015392 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 80191b8:	69bb      	ldr	r3, [r7, #24]
 80191ba:	2101      	movs	r1, #1
 80191bc:	4618      	mov	r0, r3
 80191be:	f7ff ff67 	bl	8019090 <metal_device_io_region>
 80191c2:	4603      	mov	r3, r0
 80191c4:	4a0f      	ldr	r2, [pc, #60]	; (8019204 <OPENAMP_shmem_init+0x13c>)
 80191c6:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 80191c8:	4b0e      	ldr	r3, [pc, #56]	; (8019204 <OPENAMP_shmem_init+0x13c>)
 80191ca:	681b      	ldr	r3, [r3, #0]
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d102      	bne.n	80191d6 <OPENAMP_shmem_init+0x10e>
    return -1;
 80191d0:	f04f 33ff 	mov.w	r3, #4294967295
 80191d4:	e000      	b.n	80191d8 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 80191d6:	2300      	movs	r3, #0
}
 80191d8:	4618      	mov	r0, r3
 80191da:	3724      	adds	r7, #36	; 0x24
 80191dc:	46bd      	mov	sp, r7
 80191de:	bd90      	pop	{r4, r7, pc}
 80191e0:	08021a68 	.word	0x08021a68
 80191e4:	2400a0f8 	.word	0x2400a0f8
 80191e8:	08021a54 	.word	0x08021a54
 80191ec:	08021a60 	.word	0x08021a60
 80191f0:	38000400 	.word	0x38000400
 80191f4:	2400af08 	.word	0x2400af08
 80191f8:	38010000 	.word	0x38010000
 80191fc:	2400ae78 	.word	0x2400ae78
 8019200:	2400ae80 	.word	0x2400ae80
 8019204:	2400ae7c 	.word	0x2400ae7c

08019208 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 8019208:	b590      	push	{r4, r7, lr}
 801920a:	b08b      	sub	sp, #44	; 0x2c
 801920c:	af04      	add	r7, sp, #16
 801920e:	6078      	str	r0, [r7, #4]
 8019210:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 8019212:	2300      	movs	r3, #0
 8019214:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 8019216:	2300      	movs	r3, #0
 8019218:	613b      	str	r3, [r7, #16]
  int status = 0;
 801921a:	2300      	movs	r3, #0
 801921c:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 801921e:	f7ff fed9 	bl	8018fd4 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 8019222:	6878      	ldr	r0, [r7, #4]
 8019224:	f7ff ff50 	bl	80190c8 <OPENAMP_shmem_init>
 8019228:	60f8      	str	r0, [r7, #12]
  if(status)
 801922a:	68fb      	ldr	r3, [r7, #12]
 801922c:	2b00      	cmp	r3, #0
 801922e:	d001      	beq.n	8019234 <MX_OPENAMP_Init+0x2c>
  {
    return status;
 8019230:	68fb      	ldr	r3, [r7, #12]
 8019232:	e06a      	b.n	801930a <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 8019234:	6878      	ldr	r0, [r7, #4]
 8019236:	4b37      	ldr	r3, [pc, #220]	; (8019314 <MX_OPENAMP_Init+0x10c>)
 8019238:	681b      	ldr	r3, [r3, #0]
 801923a:	f103 0218 	add.w	r2, r3, #24
 801923e:	4b36      	ldr	r3, [pc, #216]	; (8019318 <MX_OPENAMP_Init+0x110>)
 8019240:	681b      	ldr	r3, [r3, #0]
 8019242:	2100      	movs	r1, #0
 8019244:	9102      	str	r1, [sp, #8]
 8019246:	4935      	ldr	r1, [pc, #212]	; (801931c <MX_OPENAMP_Init+0x114>)
 8019248:	9101      	str	r1, [sp, #4]
 801924a:	2100      	movs	r1, #0
 801924c:	9100      	str	r1, [sp, #0]
 801924e:	21ff      	movs	r1, #255	; 0xff
 8019250:	f7fc fcc0 	bl	8015bd4 <rproc_virtio_create_vdev>
 8019254:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 8019256:	693b      	ldr	r3, [r7, #16]
 8019258:	2b00      	cmp	r3, #0
 801925a:	d102      	bne.n	8019262 <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 801925c:	f04f 33ff 	mov.w	r3, #4294967295
 8019260:	e053      	b.n	801930a <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 8019262:	6938      	ldr	r0, [r7, #16]
 8019264:	f7fc fdd1 	bl	8015e0a <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 8019268:	4b2a      	ldr	r3, [pc, #168]	; (8019314 <MX_OPENAMP_Init+0x10c>)
 801926a:	681b      	ldr	r3, [r3, #0]
 801926c:	3334      	adds	r3, #52	; 0x34
 801926e:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8019270:	697b      	ldr	r3, [r7, #20]
 8019272:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8019274:	697b      	ldr	r3, [r7, #20]
 8019276:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8019278:	461c      	mov	r4, r3
 801927a:	4b29      	ldr	r3, [pc, #164]	; (8019320 <MX_OPENAMP_Init+0x118>)
 801927c:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 801927e:	697a      	ldr	r2, [r7, #20]
 8019280:	6892      	ldr	r2, [r2, #8]
 8019282:	6979      	ldr	r1, [r7, #20]
 8019284:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8019286:	9102      	str	r1, [sp, #8]
 8019288:	9201      	str	r2, [sp, #4]
 801928a:	9300      	str	r3, [sp, #0]
 801928c:	4623      	mov	r3, r4
 801928e:	4602      	mov	r2, r0
 8019290:	2100      	movs	r1, #0
 8019292:	6938      	ldr	r0, [r7, #16]
 8019294:	f7fc fd4c 	bl	8015d30 <rproc_virtio_init_vring>
 8019298:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 801929a:	68fb      	ldr	r3, [r7, #12]
 801929c:	2b00      	cmp	r3, #0
 801929e:	d001      	beq.n	80192a4 <MX_OPENAMP_Init+0x9c>
  {
    return status;
 80192a0:	68fb      	ldr	r3, [r7, #12]
 80192a2:	e032      	b.n	801930a <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 80192a4:	4b1b      	ldr	r3, [pc, #108]	; (8019314 <MX_OPENAMP_Init+0x10c>)
 80192a6:	681b      	ldr	r3, [r3, #0]
 80192a8:	3348      	adds	r3, #72	; 0x48
 80192aa:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 80192ac:	697b      	ldr	r3, [r7, #20]
 80192ae:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 80192b0:	697b      	ldr	r3, [r7, #20]
 80192b2:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 80192b4:	461c      	mov	r4, r3
 80192b6:	4b1a      	ldr	r3, [pc, #104]	; (8019320 <MX_OPENAMP_Init+0x118>)
 80192b8:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 80192ba:	697a      	ldr	r2, [r7, #20]
 80192bc:	6892      	ldr	r2, [r2, #8]
 80192be:	6979      	ldr	r1, [r7, #20]
 80192c0:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 80192c2:	9102      	str	r1, [sp, #8]
 80192c4:	9201      	str	r2, [sp, #4]
 80192c6:	9300      	str	r3, [sp, #0]
 80192c8:	4623      	mov	r3, r4
 80192ca:	4602      	mov	r2, r0
 80192cc:	2101      	movs	r1, #1
 80192ce:	6938      	ldr	r0, [r7, #16]
 80192d0:	f7fc fd2e 	bl	8015d30 <rproc_virtio_init_vring>
 80192d4:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 80192d6:	68fb      	ldr	r3, [r7, #12]
 80192d8:	2b00      	cmp	r3, #0
 80192da:	d001      	beq.n	80192e0 <MX_OPENAMP_Init+0xd8>
  {
    return status;
 80192dc:	68fb      	ldr	r3, [r7, #12]
 80192de:	e014      	b.n	801930a <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 80192e0:	4b10      	ldr	r3, [pc, #64]	; (8019324 <MX_OPENAMP_Init+0x11c>)
 80192e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80192e6:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 80192e8:	4a0f      	ldr	r2, [pc, #60]	; (8019328 <MX_OPENAMP_Init+0x120>)
 80192ea:	4b0e      	ldr	r3, [pc, #56]	; (8019324 <MX_OPENAMP_Init+0x11c>)
 80192ec:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 80192ee:	461a      	mov	r2, r3
 80192f0:	480e      	ldr	r0, [pc, #56]	; (801932c <MX_OPENAMP_Init+0x124>)
 80192f2:	f7fd f9fb 	bl	80166ec <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 80192f6:	4b0a      	ldr	r3, [pc, #40]	; (8019320 <MX_OPENAMP_Init+0x118>)
 80192f8:	681b      	ldr	r3, [r3, #0]
 80192fa:	4a0c      	ldr	r2, [pc, #48]	; (801932c <MX_OPENAMP_Init+0x124>)
 80192fc:	9200      	str	r2, [sp, #0]
 80192fe:	683a      	ldr	r2, [r7, #0]
 8019300:	6939      	ldr	r1, [r7, #16]
 8019302:	480b      	ldr	r0, [pc, #44]	; (8019330 <MX_OPENAMP_Init+0x128>)
 8019304:	f7fd fc62 	bl	8016bcc <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 8019308:	2300      	movs	r3, #0
}
 801930a:	4618      	mov	r0, r3
 801930c:	371c      	adds	r7, #28
 801930e:	46bd      	mov	sp, r7
 8019310:	bd90      	pop	{r4, r7, pc}
 8019312:	bf00      	nop
 8019314:	2400ae80 	.word	0x2400ae80
 8019318:	2400ae7c 	.word	0x2400ae7c
 801931c:	08019041 	.word	0x08019041
 8019320:	2400ae78 	.word	0x2400ae78
 8019324:	38000400 	.word	0x38000400
 8019328:	38010000 	.word	0x38010000
 801932c:	2400ae84 	.word	0x2400ae84
 8019330:	2400ae90 	.word	0x2400ae90

08019334 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 8019334:	b580      	push	{r7, lr}
 8019336:	b08a      	sub	sp, #40	; 0x28
 8019338:	af04      	add	r7, sp, #16
 801933a:	60f8      	str	r0, [r7, #12]
 801933c:	60b9      	str	r1, [r7, #8]
 801933e:	607a      	str	r2, [r7, #4]
 8019340:	603b      	str	r3, [r7, #0]
  int ret = 0;
 8019342:	2300      	movs	r3, #0
 8019344:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 8019346:	6a3b      	ldr	r3, [r7, #32]
 8019348:	9302      	str	r3, [sp, #8]
 801934a:	683b      	ldr	r3, [r7, #0]
 801934c:	9301      	str	r3, [sp, #4]
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	9300      	str	r3, [sp, #0]
 8019352:	f04f 33ff 	mov.w	r3, #4294967295
 8019356:	68ba      	ldr	r2, [r7, #8]
 8019358:	4904      	ldr	r1, [pc, #16]	; (801936c <OPENAMP_create_endpoint+0x38>)
 801935a:	68f8      	ldr	r0, [r7, #12]
 801935c:	f7fc ffe2 	bl	8016324 <rpmsg_create_ept>
 8019360:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 8019362:	697b      	ldr	r3, [r7, #20]
}
 8019364:	4618      	mov	r0, r3
 8019366:	3718      	adds	r7, #24
 8019368:	46bd      	mov	sp, r7
 801936a:	bd80      	pop	{r7, pc}
 801936c:	2400ae90 	.word	0x2400ae90

08019370 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 8019370:	b580      	push	{r7, lr}
 8019372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 8019374:	4b03      	ldr	r3, [pc, #12]	; (8019384 <OPENAMP_check_for_message+0x14>)
 8019376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019378:	4618      	mov	r0, r3
 801937a:	f7ff fe47 	bl	801900c <MAILBOX_Poll>
}
 801937e:	bf00      	nop
 8019380:	bd80      	pop	{r7, pc}
 8019382:	bf00      	nop
 8019384:	2400ae90 	.word	0x2400ae90

08019388 <OPENAMP_Wait_EndPointready>:

void OPENAMP_Wait_EndPointready(struct rpmsg_endpoint *rp_ept)
{
 8019388:	b580      	push	{r7, lr}
 801938a:	b082      	sub	sp, #8
 801938c:	af00      	add	r7, sp, #0
 801938e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EP_READY */

  /* USER CODE END EP_READY */

  while(!is_rpmsg_ept_ready(rp_ept))
 8019390:	e004      	b.n	801939c <OPENAMP_Wait_EndPointready+0x14>
  {
    /* USER CODE BEGIN 0 */

    /* USER CODE END 0 */
      MAILBOX_Poll(rvdev.vdev);
 8019392:	4b08      	ldr	r3, [pc, #32]	; (80193b4 <OPENAMP_Wait_EndPointready+0x2c>)
 8019394:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019396:	4618      	mov	r0, r3
 8019398:	f7ff fe38 	bl	801900c <MAILBOX_Poll>
  while(!is_rpmsg_ept_ready(rp_ept))
 801939c:	6878      	ldr	r0, [r7, #4]
 801939e:	f7ff fe60 	bl	8019062 <is_rpmsg_ept_ready>
 80193a2:	4603      	mov	r3, r0
 80193a4:	2b00      	cmp	r3, #0
 80193a6:	d0f4      	beq.n	8019392 <OPENAMP_Wait_EndPointready+0xa>

    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */
  }
}
 80193a8:	bf00      	nop
 80193aa:	bf00      	nop
 80193ac:	3708      	adds	r7, #8
 80193ae:	46bd      	mov	sp, r7
 80193b0:	bd80      	pop	{r7, pc}
 80193b2:	bf00      	nop
 80193b4:	2400ae90 	.word	0x2400ae90

080193b8 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 80193b8:	b580      	push	{r7, lr}
 80193ba:	b084      	sub	sp, #16
 80193bc:	af00      	add	r7, sp, #0
 80193be:	60f8      	str	r0, [r7, #12]
 80193c0:	60b9      	str	r1, [r7, #8]
 80193c2:	607a      	str	r2, [r7, #4]

    /*
     * Currently the GCC linker doesn't initialize the resource_table global variable at startup
     * it is done here by the master application.
     */
	memset(&resource_table, '\0', sizeof(struct shared_resource_table));
 80193c4:	228c      	movs	r2, #140	; 0x8c
 80193c6:	2100      	movs	r1, #0
 80193c8:	481e      	ldr	r0, [pc, #120]	; (8019444 <resource_table_init+0x8c>)
 80193ca:	f003 f9dd 	bl	801c788 <memset>
	resource_table.num = 1;
 80193ce:	4b1d      	ldr	r3, [pc, #116]	; (8019444 <resource_table_init+0x8c>)
 80193d0:	2201      	movs	r2, #1
 80193d2:	605a      	str	r2, [r3, #4]
	resource_table.version = 1;
 80193d4:	4b1b      	ldr	r3, [pc, #108]	; (8019444 <resource_table_init+0x8c>)
 80193d6:	2201      	movs	r2, #1
 80193d8:	601a      	str	r2, [r3, #0]
	resource_table.offset[0] = offsetof(struct shared_resource_table, vdev);
 80193da:	4b1a      	ldr	r3, [pc, #104]	; (8019444 <resource_table_init+0x8c>)
 80193dc:	2218      	movs	r2, #24
 80193de:	611a      	str	r2, [r3, #16]

	resource_table.vring0.da = VRING_TX_ADDRESS;
 80193e0:	4b19      	ldr	r3, [pc, #100]	; (8019448 <resource_table_init+0x90>)
 80193e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80193e6:	4a17      	ldr	r2, [pc, #92]	; (8019444 <resource_table_init+0x8c>)
 80193e8:	6353      	str	r3, [r2, #52]	; 0x34
	resource_table.vring0.align = VRING_ALIGNMENT;
 80193ea:	4b16      	ldr	r3, [pc, #88]	; (8019444 <resource_table_init+0x8c>)
 80193ec:	2204      	movs	r2, #4
 80193ee:	639a      	str	r2, [r3, #56]	; 0x38
	resource_table.vring0.num = VRING_NUM_BUFFS;
 80193f0:	4b14      	ldr	r3, [pc, #80]	; (8019444 <resource_table_init+0x8c>)
 80193f2:	2204      	movs	r2, #4
 80193f4:	63da      	str	r2, [r3, #60]	; 0x3c
	resource_table.vring0.notifyid = VRING0_ID;
 80193f6:	4b13      	ldr	r3, [pc, #76]	; (8019444 <resource_table_init+0x8c>)
 80193f8:	2200      	movs	r2, #0
 80193fa:	641a      	str	r2, [r3, #64]	; 0x40

	resource_table.vring1.da = VRING_RX_ADDRESS;
 80193fc:	4a12      	ldr	r2, [pc, #72]	; (8019448 <resource_table_init+0x90>)
 80193fe:	4b11      	ldr	r3, [pc, #68]	; (8019444 <resource_table_init+0x8c>)
 8019400:	649a      	str	r2, [r3, #72]	; 0x48
	resource_table.vring1.align = VRING_ALIGNMENT;
 8019402:	4b10      	ldr	r3, [pc, #64]	; (8019444 <resource_table_init+0x8c>)
 8019404:	2204      	movs	r2, #4
 8019406:	64da      	str	r2, [r3, #76]	; 0x4c
	resource_table.vring1.num = VRING_NUM_BUFFS;
 8019408:	4b0e      	ldr	r3, [pc, #56]	; (8019444 <resource_table_init+0x8c>)
 801940a:	2204      	movs	r2, #4
 801940c:	651a      	str	r2, [r3, #80]	; 0x50
	resource_table.vring1.notifyid = VRING1_ID;
 801940e:	4b0d      	ldr	r3, [pc, #52]	; (8019444 <resource_table_init+0x8c>)
 8019410:	2201      	movs	r2, #1
 8019412:	655a      	str	r2, [r3, #84]	; 0x54

	resource_table.vdev.type = RSC_VDEV;
 8019414:	4b0b      	ldr	r3, [pc, #44]	; (8019444 <resource_table_init+0x8c>)
 8019416:	2203      	movs	r2, #3
 8019418:	619a      	str	r2, [r3, #24]
	resource_table.vdev.id = VIRTIO_ID_RPMSG_;
 801941a:	4b0a      	ldr	r3, [pc, #40]	; (8019444 <resource_table_init+0x8c>)
 801941c:	2207      	movs	r2, #7
 801941e:	61da      	str	r2, [r3, #28]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
 8019420:	4b08      	ldr	r3, [pc, #32]	; (8019444 <resource_table_init+0x8c>)
 8019422:	2202      	movs	r2, #2
 8019424:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
 8019428:	4b06      	ldr	r3, [pc, #24]	; (8019444 <resource_table_init+0x8c>)
 801942a:	2201      	movs	r2, #1
 801942c:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	228c      	movs	r2, #140	; 0x8c
 8019432:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 8019434:	68bb      	ldr	r3, [r7, #8]
 8019436:	4a03      	ldr	r2, [pc, #12]	; (8019444 <resource_table_init+0x8c>)
 8019438:	601a      	str	r2, [r3, #0]
}
 801943a:	bf00      	nop
 801943c:	3710      	adds	r7, #16
 801943e:	46bd      	mov	sp, r7
 8019440:	bd80      	pop	{r7, pc}
 8019442:	bf00      	nop
 8019444:	38000000 	.word	0x38000000
 8019448:	38000400 	.word	0x38000400

0801944c <createEmptyFrame>:
uint8_t numberOfDisplayedSafeAirIcons = 0;

uint32_t LCDArraySize = 40960;

void createEmptyFrame(bool isMenuFrame)
{
 801944c:	b580      	push	{r7, lr}
 801944e:	b084      	sub	sp, #16
 8019450:	af00      	add	r7, sp, #0
 8019452:	4603      	mov	r3, r0
 8019454:	71fb      	strb	r3, [r7, #7]
	if (!isMenuFrame)
 8019456:	79fb      	ldrb	r3, [r7, #7]
 8019458:	f083 0301 	eor.w	r3, r3, #1
 801945c:	b2db      	uxtb	r3, r3
 801945e:	2b00      	cmp	r3, #0
 8019460:	d024      	beq.n	80194ac <createEmptyFrame+0x60>
	{
		memset(nextFrameToDraw,0x00,LCDArraySize);
 8019462:	4b19      	ldr	r3, [pc, #100]	; (80194c8 <createEmptyFrame+0x7c>)
 8019464:	681b      	ldr	r3, [r3, #0]
 8019466:	461a      	mov	r2, r3
 8019468:	2100      	movs	r1, #0
 801946a:	4818      	ldr	r0, [pc, #96]	; (80194cc <createEmptyFrame+0x80>)
 801946c:	f003 f98c 	bl	801c788 <memset>

		for (int i = 0 ; i < (LCDArraySize - SCREEN_WIDTH * STATUSBAR_HEIGHT * 2) /2 ; i++)
 8019470:	2300      	movs	r3, #0
 8019472:	60fb      	str	r3, [r7, #12]
 8019474:	e011      	b.n	801949a <createEmptyFrame+0x4e>
		{
			nextFrameToDraw[(i + SCREEN_WIDTH * STATUSBAR_HEIGHT) * 2] = BACKGROUND_HIGH_BYTE;
 8019476:	68fb      	ldr	r3, [r7, #12]
 8019478:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 801947c:	005b      	lsls	r3, r3, #1
 801947e:	4a13      	ldr	r2, [pc, #76]	; (80194cc <createEmptyFrame+0x80>)
 8019480:	21ff      	movs	r1, #255	; 0xff
 8019482:	54d1      	strb	r1, [r2, r3]
			nextFrameToDraw[(i + SCREEN_WIDTH * STATUSBAR_HEIGHT) * 2 + 1] = BACKGROUND_LOW_BYTE;
 8019484:	68fb      	ldr	r3, [r7, #12]
 8019486:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 801948a:	005b      	lsls	r3, r3, #1
 801948c:	3301      	adds	r3, #1
 801948e:	4a0f      	ldr	r2, [pc, #60]	; (80194cc <createEmptyFrame+0x80>)
 8019490:	21ff      	movs	r1, #255	; 0xff
 8019492:	54d1      	strb	r1, [r2, r3]
		for (int i = 0 ; i < (LCDArraySize - SCREEN_WIDTH * STATUSBAR_HEIGHT * 2) /2 ; i++)
 8019494:	68fb      	ldr	r3, [r7, #12]
 8019496:	3301      	adds	r3, #1
 8019498:	60fb      	str	r3, [r7, #12]
 801949a:	4b0b      	ldr	r3, [pc, #44]	; (80194c8 <createEmptyFrame+0x7c>)
 801949c:	681b      	ldr	r3, [r3, #0]
 801949e:	f5a3 53c8 	sub.w	r3, r3, #6400	; 0x1900
 80194a2:	085a      	lsrs	r2, r3, #1
 80194a4:	68fb      	ldr	r3, [r7, #12]
 80194a6:	429a      	cmp	r2, r3
 80194a8:	d8e5      	bhi.n	8019476 <createEmptyFrame+0x2a>
	}
	else if (isMenuFrame)
	{
		memset(nextFrameToDraw,0xFF,LCDArraySize);
	}
}
 80194aa:	e009      	b.n	80194c0 <createEmptyFrame+0x74>
	else if (isMenuFrame)
 80194ac:	79fb      	ldrb	r3, [r7, #7]
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	d006      	beq.n	80194c0 <createEmptyFrame+0x74>
		memset(nextFrameToDraw,0xFF,LCDArraySize);
 80194b2:	4b05      	ldr	r3, [pc, #20]	; (80194c8 <createEmptyFrame+0x7c>)
 80194b4:	681b      	ldr	r3, [r3, #0]
 80194b6:	461a      	mov	r2, r3
 80194b8:	21ff      	movs	r1, #255	; 0xff
 80194ba:	4804      	ldr	r0, [pc, #16]	; (80194cc <createEmptyFrame+0x80>)
 80194bc:	f003 f964 	bl	801c788 <memset>
}
 80194c0:	bf00      	nop
 80194c2:	3710      	adds	r7, #16
 80194c4:	46bd      	mov	sp, r7
 80194c6:	bd80      	pop	{r7, pc}
 80194c8:	2400a174 	.word	0x2400a174
 80194cc:	24000090 	.word	0x24000090

080194d0 <displayNextFrame>:

void displayNextFrame(void)
{
 80194d0:	b580      	push	{r7, lr}
 80194d2:	af00      	add	r7, sp, #0
//	LCD_1IN8_SetCursor(0, 0);
	if (HAL_GetTick() - lastFrameDisplayed > 30)
 80194d4:	f7e9 f836 	bl	8002544 <HAL_GetTick>
 80194d8:	4602      	mov	r2, r0
 80194da:	4b0a      	ldr	r3, [pc, #40]	; (8019504 <displayNextFrame+0x34>)
 80194dc:	681b      	ldr	r3, [r3, #0]
 80194de:	1ad3      	subs	r3, r2, r3
 80194e0:	2b1e      	cmp	r3, #30
 80194e2:	d90d      	bls.n	8019500 <displayNextFrame+0x30>
	{
		HAL_SPI_Transmit(&DEV_SPI, (uint8_t *)nextFrameToDraw, LCDArraySize, 1500);
 80194e4:	4b08      	ldr	r3, [pc, #32]	; (8019508 <displayNextFrame+0x38>)
 80194e6:	681b      	ldr	r3, [r3, #0]
 80194e8:	b29a      	uxth	r2, r3
 80194ea:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80194ee:	4907      	ldr	r1, [pc, #28]	; (801950c <displayNextFrame+0x3c>)
 80194f0:	4807      	ldr	r0, [pc, #28]	; (8019510 <displayNextFrame+0x40>)
 80194f2:	f7f0 fd73 	bl	8009fdc <HAL_SPI_Transmit>
//		createEmptyFrame();
		lastFrameDisplayed = HAL_GetTick();
 80194f6:	f7e9 f825 	bl	8002544 <HAL_GetTick>
 80194fa:	4603      	mov	r3, r0
 80194fc:	4a01      	ldr	r2, [pc, #4]	; (8019504 <displayNextFrame+0x34>)
 80194fe:	6013      	str	r3, [r2, #0]
	}
}
 8019500:	bf00      	nop
 8019502:	bd80      	pop	{r7, pc}
 8019504:	2400ae5c 	.word	0x2400ae5c
 8019508:	2400a174 	.word	0x2400a174
 801950c:	24000090 	.word	0x24000090
 8019510:	2400b064 	.word	0x2400b064
 8019514:	00000000 	.word	0x00000000

08019518 <updateUint16Item>:
		}
	}
}

void updateUint16Item(MENUDRAWType howToDraw)
{
 8019518:	b5f0      	push	{r4, r5, r6, r7, lr}
 801951a:	b08f      	sub	sp, #60	; 0x3c
 801951c:	af04      	add	r7, sp, #16
 801951e:	4603      	mov	r3, r0
 8019520:	71fb      	strb	r3, [r7, #7]

	uint8_t MenuRectangleStartX = 0;
 8019522:	2300      	movs	r3, #0
 8019524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t MenuRectangleStartY = 0;
 8019528:	2300      	movs	r3, #0
 801952a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MenuRectangleHeight = 0;
 801952e:	2300      	movs	r3, #0
 8019530:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MenuRectangleWidth = 0;
 8019534:	2300      	movs	r3, #0
 8019536:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t DisplayCenterWidth = 0;
 801953a:	2300      	movs	r3, #0
 801953c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (isPortrait)
 8019540:	4b0b      	ldr	r3, [pc, #44]	; (8019570 <updateUint16Item+0x58>)
 8019542:	781b      	ldrb	r3, [r3, #0]
 8019544:	2b00      	cmp	r3, #0
 8019546:	d00e      	beq.n	8019566 <updateUint16Item+0x4e>
	{
		MenuRectangleStartX = VerticalMenuRectangleStartX;
 8019548:	2302      	movs	r3, #2
 801954a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		MenuRectangleStartY = VerticalMenuRectangleStartY;
 801954e:	230c      	movs	r3, #12
 8019550:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		MenuRectangleHeight = VerticalMenuRectangleHeight;
 8019554:	230e      	movs	r3, #14
 8019556:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		MenuRectangleWidth = VerticalMenuRectangleWidth;
 801955a:	237c      	movs	r3, #124	; 0x7c
 801955c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		DisplayCenterWidth = VerticalDisplayCenterWidth;
 8019560:	2340      	movs	r3, #64	; 0x40
 8019562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
//		MenuRectangleHeight = HorizontalMenuRectangleHeight;
//		MenuRectangleWidth = HorizontalMenuRectangleWidth;
//		DisplayCenterWidth = HorizontalDisplayCenterWidth;
	}

	for (int i = 0; i < uint16Item.numberOfItemsInPage ; i++)
 8019566:	2300      	movs	r3, #0
 8019568:	61fb      	str	r3, [r7, #28]
 801956a:	f001 baf3 	b.w	801ab54 <updateUint16Item+0x163c>
 801956e:	bf00      	nop
 8019570:	2400008c 	.word	0x2400008c
	{
		if  ( (i < 2) && (howToDraw == FULL) )
 8019574:	69fb      	ldr	r3, [r7, #28]
 8019576:	2b01      	cmp	r3, #1
 8019578:	dc58      	bgt.n	801962c <updateUint16Item+0x114>
 801957a:	79fb      	ldrb	r3, [r7, #7]
 801957c:	2b02      	cmp	r3, #2
 801957e:	d155      	bne.n	801962c <updateUint16Item+0x114>
		{
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 8019580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019584:	b298      	uxth	r0, r3
 8019586:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801958a:	b29a      	uxth	r2, r3
 801958c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019590:	b299      	uxth	r1, r3
 8019592:	69fb      	ldr	r3, [r7, #28]
 8019594:	b29b      	uxth	r3, r3
 8019596:	fb11 f303 	smulbb	r3, r1, r3
 801959a:	b29b      	uxth	r3, r3
 801959c:	4413      	add	r3, r2
 801959e:	b29c      	uxth	r4, r3
 80195a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80195a4:	b29a      	uxth	r2, r3
 80195a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80195aa:	b29b      	uxth	r3, r3
 80195ac:	4413      	add	r3, r2
 80195ae:	b29d      	uxth	r5, r3
 80195b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80195b4:	b29a      	uxth	r2, r3
 80195b6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80195ba:	b299      	uxth	r1, r3
					MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 80195bc:	69fb      	ldr	r3, [r7, #28]
 80195be:	3301      	adds	r3, #1
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 80195c0:	b29b      	uxth	r3, r3
 80195c2:	fb11 f303 	smulbb	r3, r1, r3
 80195c6:	b29b      	uxth	r3, r3
 80195c8:	4413      	add	r3, r2
 80195ca:	b29b      	uxth	r3, r3
 80195cc:	2200      	movs	r2, #0
 80195ce:	9202      	str	r2, [sp, #8]
 80195d0:	2201      	movs	r2, #1
 80195d2:	9201      	str	r2, [sp, #4]
 80195d4:	2200      	movs	r2, #0
 80195d6:	9200      	str	r2, [sp, #0]
 80195d8:	462a      	mov	r2, r5
 80195da:	4621      	mov	r1, r4
 80195dc:	f7f5 ff0c 	bl	800f3f8 <Paint_DrawRectangle>
					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 80195e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80195e4:	b29c      	uxth	r4, r3
 80195e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80195ea:	b29a      	uxth	r2, r3
 80195ec:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80195f0:	b299      	uxth	r1, r3
 80195f2:	69fb      	ldr	r3, [r7, #28]
 80195f4:	b29b      	uxth	r3, r3
 80195f6:	fb11 f303 	smulbb	r3, r1, r3
 80195fa:	b29b      	uxth	r3, r3
 80195fc:	4413      	add	r3, r2
 80195fe:	b29b      	uxth	r3, r3
 8019600:	3301      	adds	r3, #1
 8019602:	b29d      	uxth	r5, r3
					uint16Item.itemsArray[i], BLACK, WHITE, 16, Font12);
 8019604:	69fb      	ldr	r3, [r7, #28]
 8019606:	3301      	adds	r3, #1
 8019608:	011b      	lsls	r3, r3, #4
 801960a:	4a9f      	ldr	r2, [pc, #636]	; (8019888 <updateUint16Item+0x370>)
 801960c:	441a      	add	r2, r3
			centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801960e:	499f      	ldr	r1, [pc, #636]	; (801988c <updateUint16Item+0x374>)
 8019610:	ab02      	add	r3, sp, #8
 8019612:	c903      	ldmia	r1, {r0, r1}
 8019614:	e883 0003 	stmia.w	r3, {r0, r1}
 8019618:	2310      	movs	r3, #16
 801961a:	9301      	str	r3, [sp, #4]
 801961c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019620:	9300      	str	r3, [sp, #0]
 8019622:	2300      	movs	r3, #0
 8019624:	4629      	mov	r1, r5
 8019626:	4620      	mov	r0, r4
 8019628:	f7fe fad6 	bl	8017bd8 <centeredString>
		}
		if ( (i >= 2) && (i < uint16Item.numberOfItemsInPage - 2) )
 801962c:	69fb      	ldr	r3, [r7, #28]
 801962e:	2b01      	cmp	r3, #1
 8019630:	f340 87ed 	ble.w	801a60e <updateUint16Item+0x10f6>
 8019634:	4b94      	ldr	r3, [pc, #592]	; (8019888 <updateUint16Item+0x370>)
 8019636:	7bdb      	ldrb	r3, [r3, #15]
 8019638:	3b02      	subs	r3, #2
 801963a:	69fa      	ldr	r2, [r7, #28]
 801963c:	429a      	cmp	r2, r3
 801963e:	f280 87e6 	bge.w	801a60e <updateUint16Item+0x10f6>
		{
			if (howToDraw == FULL)
 8019642:	79fb      	ldrb	r3, [r7, #7]
 8019644:	2b02      	cmp	r3, #2
 8019646:	d168      	bne.n	801971a <updateUint16Item+0x202>
			{
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 8019648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801964c:	b298      	uxth	r0, r3
 801964e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019652:	b29a      	uxth	r2, r3
 8019654:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019658:	b299      	uxth	r1, r3
 801965a:	69fb      	ldr	r3, [r7, #28]
 801965c:	b29b      	uxth	r3, r3
 801965e:	fb11 f303 	smulbb	r3, r1, r3
 8019662:	b29b      	uxth	r3, r3
 8019664:	4413      	add	r3, r2
 8019666:	b29c      	uxth	r4, r3
 8019668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801966c:	b29a      	uxth	r2, r3
 801966e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019672:	085b      	lsrs	r3, r3, #1
 8019674:	b2db      	uxtb	r3, r3
 8019676:	b29b      	uxth	r3, r3
 8019678:	4413      	add	r3, r2
 801967a:	b29d      	uxth	r5, r3
 801967c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019680:	b29a      	uxth	r2, r3
 8019682:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019686:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 8019688:	69fb      	ldr	r3, [r7, #28]
 801968a:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 801968c:	b29b      	uxth	r3, r3
 801968e:	fb11 f303 	smulbb	r3, r1, r3
 8019692:	b29b      	uxth	r3, r3
 8019694:	4413      	add	r3, r2
 8019696:	b29b      	uxth	r3, r3
 8019698:	2200      	movs	r2, #0
 801969a:	9202      	str	r2, [sp, #8]
 801969c:	2201      	movs	r2, #1
 801969e:	9201      	str	r2, [sp, #4]
 80196a0:	2200      	movs	r2, #0
 80196a2:	9200      	str	r2, [sp, #0]
 80196a4:	462a      	mov	r2, r5
 80196a6:	4621      	mov	r1, r4
 80196a8:	f7f5 fea6 	bl	800f3f8 <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
				Paint_DrawRectangle( MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * i,
 80196ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80196b0:	b29a      	uxth	r2, r3
 80196b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80196b6:	085b      	lsrs	r3, r3, #1
 80196b8:	b2db      	uxtb	r3, r3
 80196ba:	b29b      	uxth	r3, r3
 80196bc:	4413      	add	r3, r2
 80196be:	b298      	uxth	r0, r3
 80196c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80196c4:	b29a      	uxth	r2, r3
 80196c6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80196ca:	b299      	uxth	r1, r3
 80196cc:	69fb      	ldr	r3, [r7, #28]
 80196ce:	b29b      	uxth	r3, r3
 80196d0:	fb11 f303 	smulbb	r3, r1, r3
 80196d4:	b29b      	uxth	r3, r3
 80196d6:	4413      	add	r3, r2
 80196d8:	b29c      	uxth	r4, r3
 80196da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80196de:	b29a      	uxth	r2, r3
 80196e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80196e4:	b29b      	uxth	r3, r3
 80196e6:	4413      	add	r3, r2
 80196e8:	b29d      	uxth	r5, r3
 80196ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80196ee:	b29a      	uxth	r2, r3
 80196f0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80196f4:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 80196f6:	69fb      	ldr	r3, [r7, #28]
 80196f8:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * i,
 80196fa:	b29b      	uxth	r3, r3
 80196fc:	fb11 f303 	smulbb	r3, r1, r3
 8019700:	b29b      	uxth	r3, r3
 8019702:	4413      	add	r3, r2
 8019704:	b29b      	uxth	r3, r3
 8019706:	2200      	movs	r2, #0
 8019708:	9202      	str	r2, [sp, #8]
 801970a:	2201      	movs	r2, #1
 801970c:	9201      	str	r2, [sp, #4]
 801970e:	2200      	movs	r2, #0
 8019710:	9200      	str	r2, [sp, #0]
 8019712:	462a      	mov	r2, r5
 8019714:	4621      	mov	r1, r4
 8019716:	f7f5 fe6f 	bl	800f3f8 <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			}

			if ( (i == 2) )
 801971a:	69fb      	ldr	r3, [r7, #28]
 801971c:	2b02      	cmp	r3, #2
 801971e:	f040 83b6 	bne.w	8019e8e <updateUint16Item+0x976>
			{
				char localString[8] = "";
 8019722:	2300      	movs	r3, #0
 8019724:	617b      	str	r3, [r7, #20]
 8019726:	2300      	movs	r3, #0
 8019728:	61bb      	str	r3, [r7, #24]
				sprintf(localString,"%04d",uint16Item.startValue);
 801972a:	4b57      	ldr	r3, [pc, #348]	; (8019888 <updateUint16Item+0x370>)
 801972c:	891b      	ldrh	r3, [r3, #8]
 801972e:	461a      	mov	r2, r3
 8019730:	f107 0314 	add.w	r3, r7, #20
 8019734:	4956      	ldr	r1, [pc, #344]	; (8019890 <updateUint16Item+0x378>)
 8019736:	4618      	mov	r0, r3
 8019738:	f004 f950 	bl	801d9dc <siprintf>
				if (currentCursorPosition.cursorPosition == 0x02)
 801973c:	4b55      	ldr	r3, [pc, #340]	; (8019894 <updateUint16Item+0x37c>)
 801973e:	781b      	ldrb	r3, [r3, #0]
 8019740:	2b02      	cmp	r3, #2
 8019742:	f040 81cd 	bne.w	8019ae0 <updateUint16Item+0x5c8>
				{
					if ( (howToDraw == LEFT) || (howToDraw == FULL) )
 8019746:	79fb      	ldrb	r3, [r7, #7]
 8019748:	2b03      	cmp	r3, #3
 801974a:	d003      	beq.n	8019754 <updateUint16Item+0x23c>
 801974c:	79fb      	ldrb	r3, [r7, #7]
 801974e:	2b02      	cmp	r3, #2
 8019750:	f040 80a2 	bne.w	8019898 <updateUint16Item+0x380>
					{
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019754:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019758:	b29b      	uxth	r3, r3
 801975a:	3301      	adds	r3, #1
 801975c:	b298      	uxth	r0, r3
 801975e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019762:	b29a      	uxth	r2, r3
 8019764:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019768:	b299      	uxth	r1, r3
 801976a:	69fb      	ldr	r3, [r7, #28]
 801976c:	b29b      	uxth	r3, r3
 801976e:	fb11 f303 	smulbb	r3, r1, r3
 8019772:	b29b      	uxth	r3, r3
 8019774:	4413      	add	r3, r2
 8019776:	b29b      	uxth	r3, r3
 8019778:	3301      	adds	r3, #1
 801977a:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 801977c:	69fb      	ldr	r3, [r7, #28]
 801977e:	3301      	adds	r3, #1
 8019780:	011b      	lsls	r3, r3, #4
 8019782:	4a41      	ldr	r2, [pc, #260]	; (8019888 <updateUint16Item+0x370>)
 8019784:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019786:	2300      	movs	r3, #0
 8019788:	9301      	str	r3, [sp, #4]
 801978a:	f24c 6318 	movw	r3, #50712	; 0xc618
 801978e:	9300      	str	r3, [sp, #0]
 8019790:	4b3e      	ldr	r3, [pc, #248]	; (801988c <updateUint16Item+0x374>)
 8019792:	f7f6 f8d5 	bl	800f940 <Paint_DrawString_EN>
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8019796:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801979a:	b29a      	uxth	r2, r3
 801979c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80197a0:	085b      	lsrs	r3, r3, #1
 80197a2:	b2db      	uxtb	r3, r3
 80197a4:	b29b      	uxth	r3, r3
 80197a6:	4413      	add	r3, r2
 80197a8:	b29b      	uxth	r3, r3
 80197aa:	3301      	adds	r3, #1
 80197ac:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80197ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80197b2:	b29a      	uxth	r2, r3
 80197b4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80197b8:	b299      	uxth	r1, r3
 80197ba:	69fb      	ldr	r3, [r7, #28]
 80197bc:	b29b      	uxth	r3, r3
 80197be:	fb11 f303 	smulbb	r3, r1, r3
 80197c2:	b29b      	uxth	r3, r3
 80197c4:	4413      	add	r3, r2
 80197c6:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 80197c8:	3301      	adds	r3, #1
 80197ca:	b29e      	uxth	r6, r3
								MenuRectangleStartX + MenuRectangleWidth / 2 + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 80197cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80197d0:	b29a      	uxth	r2, r3
 80197d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80197d6:	085b      	lsrs	r3, r3, #1
 80197d8:	b2db      	uxtb	r3, r3
 80197da:	b29b      	uxth	r3, r3
 80197dc:	4413      	add	r3, r2
 80197de:	b29c      	uxth	r4, r3
 80197e0:	69fb      	ldr	r3, [r7, #28]
 80197e2:	3301      	adds	r3, #1
 80197e4:	011b      	lsls	r3, r3, #4
 80197e6:	4a28      	ldr	r2, [pc, #160]	; (8019888 <updateUint16Item+0x370>)
 80197e8:	4413      	add	r3, r2
 80197ea:	4618      	mov	r0, r3
 80197ec:	f7e6 fd82 	bl	80002f4 <strlen>
 80197f0:	4603      	mov	r3, r0
 80197f2:	b29a      	uxth	r2, r3
 80197f4:	4b25      	ldr	r3, [pc, #148]	; (801988c <updateUint16Item+0x374>)
 80197f6:	889b      	ldrh	r3, [r3, #4]
 80197f8:	fb12 f303 	smulbb	r3, r2, r3
 80197fc:	b29b      	uxth	r3, r3
 80197fe:	4423      	add	r3, r4
 8019800:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8019802:	3301      	adds	r3, #1
 8019804:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8019806:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801980a:	b29a      	uxth	r2, r3
 801980c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019810:	b299      	uxth	r1, r3
 8019812:	69fb      	ldr	r3, [r7, #28]
 8019814:	b29b      	uxth	r3, r3
 8019816:	fb11 f303 	smulbb	r3, r1, r3
 801981a:	b29b      	uxth	r3, r3
 801981c:	4413      	add	r3, r2
 801981e:	b29a      	uxth	r2, r3
 8019820:	4b1a      	ldr	r3, [pc, #104]	; (801988c <updateUint16Item+0x374>)
 8019822:	88db      	ldrh	r3, [r3, #6]
 8019824:	4413      	add	r3, r2
 8019826:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8019828:	3301      	adds	r3, #1
 801982a:	b29b      	uxth	r3, r3
 801982c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019830:	9200      	str	r2, [sp, #0]
 8019832:	4602      	mov	r2, r0
 8019834:	4631      	mov	r1, r6
 8019836:	4628      	mov	r0, r5
 8019838:	f7f5 fc64 	bl	800f104 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801983c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019840:	b29a      	uxth	r2, r3
 8019842:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019846:	085b      	lsrs	r3, r3, #1
 8019848:	b2db      	uxtb	r3, r3
 801984a:	b29b      	uxth	r3, r3
 801984c:	4413      	add	r3, r2
 801984e:	b29b      	uxth	r3, r3
 8019850:	3301      	adds	r3, #1
 8019852:	b298      	uxth	r0, r3
 8019854:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019858:	b29a      	uxth	r2, r3
 801985a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801985e:	b299      	uxth	r1, r3
 8019860:	69fb      	ldr	r3, [r7, #28]
 8019862:	b29b      	uxth	r3, r3
 8019864:	fb11 f303 	smulbb	r3, r1, r3
 8019868:	b29b      	uxth	r3, r3
 801986a:	4413      	add	r3, r2
 801986c:	b29b      	uxth	r3, r3
 801986e:	3301      	adds	r3, #1
 8019870:	b299      	uxth	r1, r3
 8019872:	f107 0214 	add.w	r2, r7, #20
 8019876:	2300      	movs	r3, #0
 8019878:	9301      	str	r3, [sp, #4]
 801987a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801987e:	9300      	str	r3, [sp, #0]
 8019880:	4b02      	ldr	r3, [pc, #8]	; (801988c <updateUint16Item+0x374>)
 8019882:	f7f6 f85d 	bl	800f940 <Paint_DrawString_EN>
 8019886:	e302      	b.n	8019e8e <updateUint16Item+0x976>
 8019888:	2400c168 	.word	0x2400c168
 801988c:	24000030 	.word	0x24000030
 8019890:	08021a7c 	.word	0x08021a7c
 8019894:	2400afcc 	.word	0x2400afcc
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == DOWN)
 8019898:	79fb      	ldrb	r3, [r7, #7]
 801989a:	2b01      	cmp	r3, #1
 801989c:	f040 808c 	bne.w	80199b8 <updateUint16Item+0x4a0>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 80198a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80198a4:	b29b      	uxth	r3, r3
 80198a6:	3301      	adds	r3, #1
 80198a8:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80198aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80198ae:	b29a      	uxth	r2, r3
 80198b0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80198b4:	b299      	uxth	r1, r3
 80198b6:	69fb      	ldr	r3, [r7, #28]
 80198b8:	b29b      	uxth	r3, r3
 80198ba:	fb11 f303 	smulbb	r3, r1, r3
 80198be:	b29b      	uxth	r3, r3
 80198c0:	4413      	add	r3, r2
 80198c2:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 80198c4:	3301      	adds	r3, #1
 80198c6:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 80198c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80198cc:	b29c      	uxth	r4, r3
 80198ce:	69fb      	ldr	r3, [r7, #28]
 80198d0:	3301      	adds	r3, #1
 80198d2:	011b      	lsls	r3, r3, #4
 80198d4:	4a80      	ldr	r2, [pc, #512]	; (8019ad8 <updateUint16Item+0x5c0>)
 80198d6:	4413      	add	r3, r2
 80198d8:	4618      	mov	r0, r3
 80198da:	f7e6 fd0b 	bl	80002f4 <strlen>
 80198de:	4603      	mov	r3, r0
 80198e0:	b29a      	uxth	r2, r3
 80198e2:	4b7e      	ldr	r3, [pc, #504]	; (8019adc <updateUint16Item+0x5c4>)
 80198e4:	889b      	ldrh	r3, [r3, #4]
 80198e6:	fb12 f303 	smulbb	r3, r2, r3
 80198ea:	b29b      	uxth	r3, r3
 80198ec:	4423      	add	r3, r4
 80198ee:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 80198f0:	3301      	adds	r3, #1
 80198f2:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 80198f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80198f8:	b29a      	uxth	r2, r3
 80198fa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80198fe:	b299      	uxth	r1, r3
 8019900:	69fb      	ldr	r3, [r7, #28]
 8019902:	b29b      	uxth	r3, r3
 8019904:	fb11 f303 	smulbb	r3, r1, r3
 8019908:	b29b      	uxth	r3, r3
 801990a:	4413      	add	r3, r2
 801990c:	b29a      	uxth	r2, r3
 801990e:	4b73      	ldr	r3, [pc, #460]	; (8019adc <updateUint16Item+0x5c4>)
 8019910:	88db      	ldrh	r3, [r3, #6]
 8019912:	4413      	add	r3, r2
 8019914:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019916:	3301      	adds	r3, #1
 8019918:	b29b      	uxth	r3, r3
 801991a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801991e:	9200      	str	r2, [sp, #0]
 8019920:	4602      	mov	r2, r0
 8019922:	4631      	mov	r1, r6
 8019924:	4628      	mov	r0, r5
 8019926:	f7f5 fbed 	bl	800f104 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801992a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801992e:	b29b      	uxth	r3, r3
 8019930:	3301      	adds	r3, #1
 8019932:	b298      	uxth	r0, r3
 8019934:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019938:	b29a      	uxth	r2, r3
 801993a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801993e:	b299      	uxth	r1, r3
 8019940:	69fb      	ldr	r3, [r7, #28]
 8019942:	b29b      	uxth	r3, r3
 8019944:	fb11 f303 	smulbb	r3, r1, r3
 8019948:	b29b      	uxth	r3, r3
 801994a:	4413      	add	r3, r2
 801994c:	b29b      	uxth	r3, r3
 801994e:	3301      	adds	r3, #1
 8019950:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 8019952:	69fb      	ldr	r3, [r7, #28]
 8019954:	3301      	adds	r3, #1
 8019956:	011b      	lsls	r3, r3, #4
 8019958:	4a5f      	ldr	r2, [pc, #380]	; (8019ad8 <updateUint16Item+0x5c0>)
 801995a:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801995c:	2300      	movs	r3, #0
 801995e:	9301      	str	r3, [sp, #4]
 8019960:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019964:	9300      	str	r3, [sp, #0]
 8019966:	4b5d      	ldr	r3, [pc, #372]	; (8019adc <updateUint16Item+0x5c4>)
 8019968:	f7f5 ffea 	bl	800f940 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801996c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019970:	b29a      	uxth	r2, r3
 8019972:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019976:	085b      	lsrs	r3, r3, #1
 8019978:	b2db      	uxtb	r3, r3
 801997a:	b29b      	uxth	r3, r3
 801997c:	4413      	add	r3, r2
 801997e:	b29b      	uxth	r3, r3
 8019980:	3301      	adds	r3, #1
 8019982:	b298      	uxth	r0, r3
 8019984:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019988:	b29a      	uxth	r2, r3
 801998a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801998e:	b299      	uxth	r1, r3
 8019990:	69fb      	ldr	r3, [r7, #28]
 8019992:	b29b      	uxth	r3, r3
 8019994:	fb11 f303 	smulbb	r3, r1, r3
 8019998:	b29b      	uxth	r3, r3
 801999a:	4413      	add	r3, r2
 801999c:	b29b      	uxth	r3, r3
 801999e:	3301      	adds	r3, #1
 80199a0:	b299      	uxth	r1, r3
 80199a2:	f107 0214 	add.w	r2, r7, #20
 80199a6:	2300      	movs	r3, #0
 80199a8:	9301      	str	r3, [sp, #4]
 80199aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80199ae:	9300      	str	r3, [sp, #0]
 80199b0:	4b4a      	ldr	r3, [pc, #296]	; (8019adc <updateUint16Item+0x5c4>)
 80199b2:	f7f5 ffc5 	bl	800f940 <Paint_DrawString_EN>
 80199b6:	e26a      	b.n	8019e8e <updateUint16Item+0x976>
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == UP)
 80199b8:	79fb      	ldrb	r3, [r7, #7]
 80199ba:	2b00      	cmp	r3, #0
 80199bc:	f040 8267 	bne.w	8019e8e <updateUint16Item+0x976>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 80199c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80199c4:	b29b      	uxth	r3, r3
 80199c6:	3301      	adds	r3, #1
 80199c8:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80199ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80199ce:	b29a      	uxth	r2, r3
 80199d0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80199d4:	b299      	uxth	r1, r3
 80199d6:	69fb      	ldr	r3, [r7, #28]
 80199d8:	b29b      	uxth	r3, r3
 80199da:	fb11 f303 	smulbb	r3, r1, r3
 80199de:	b29b      	uxth	r3, r3
 80199e0:	4413      	add	r3, r2
 80199e2:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 80199e4:	3301      	adds	r3, #1
 80199e6:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 80199e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80199ec:	b29c      	uxth	r4, r3
 80199ee:	69fb      	ldr	r3, [r7, #28]
 80199f0:	3301      	adds	r3, #1
 80199f2:	011b      	lsls	r3, r3, #4
 80199f4:	4a38      	ldr	r2, [pc, #224]	; (8019ad8 <updateUint16Item+0x5c0>)
 80199f6:	4413      	add	r3, r2
 80199f8:	4618      	mov	r0, r3
 80199fa:	f7e6 fc7b 	bl	80002f4 <strlen>
 80199fe:	4603      	mov	r3, r0
 8019a00:	b29a      	uxth	r2, r3
 8019a02:	4b36      	ldr	r3, [pc, #216]	; (8019adc <updateUint16Item+0x5c4>)
 8019a04:	889b      	ldrh	r3, [r3, #4]
 8019a06:	fb12 f303 	smulbb	r3, r2, r3
 8019a0a:	b29b      	uxth	r3, r3
 8019a0c:	4423      	add	r3, r4
 8019a0e:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019a10:	3301      	adds	r3, #1
 8019a12:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8019a14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019a18:	b29a      	uxth	r2, r3
 8019a1a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019a1e:	b299      	uxth	r1, r3
 8019a20:	69fb      	ldr	r3, [r7, #28]
 8019a22:	b29b      	uxth	r3, r3
 8019a24:	fb11 f303 	smulbb	r3, r1, r3
 8019a28:	b29b      	uxth	r3, r3
 8019a2a:	4413      	add	r3, r2
 8019a2c:	b29a      	uxth	r2, r3
 8019a2e:	4b2b      	ldr	r3, [pc, #172]	; (8019adc <updateUint16Item+0x5c4>)
 8019a30:	88db      	ldrh	r3, [r3, #6]
 8019a32:	4413      	add	r3, r2
 8019a34:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019a36:	3301      	adds	r3, #1
 8019a38:	b29b      	uxth	r3, r3
 8019a3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019a3e:	9200      	str	r2, [sp, #0]
 8019a40:	4602      	mov	r2, r0
 8019a42:	4631      	mov	r1, r6
 8019a44:	4628      	mov	r0, r5
 8019a46:	f7f5 fb5d 	bl	800f104 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019a4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019a4e:	b29b      	uxth	r3, r3
 8019a50:	3301      	adds	r3, #1
 8019a52:	b298      	uxth	r0, r3
 8019a54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019a58:	b29a      	uxth	r2, r3
 8019a5a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019a5e:	b299      	uxth	r1, r3
 8019a60:	69fb      	ldr	r3, [r7, #28]
 8019a62:	b29b      	uxth	r3, r3
 8019a64:	fb11 f303 	smulbb	r3, r1, r3
 8019a68:	b29b      	uxth	r3, r3
 8019a6a:	4413      	add	r3, r2
 8019a6c:	b29b      	uxth	r3, r3
 8019a6e:	3301      	adds	r3, #1
 8019a70:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 8019a72:	69fb      	ldr	r3, [r7, #28]
 8019a74:	3301      	adds	r3, #1
 8019a76:	011b      	lsls	r3, r3, #4
 8019a78:	4a17      	ldr	r2, [pc, #92]	; (8019ad8 <updateUint16Item+0x5c0>)
 8019a7a:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019a7c:	2300      	movs	r3, #0
 8019a7e:	9301      	str	r3, [sp, #4]
 8019a80:	f24c 6318 	movw	r3, #50712	; 0xc618
 8019a84:	9300      	str	r3, [sp, #0]
 8019a86:	4b15      	ldr	r3, [pc, #84]	; (8019adc <updateUint16Item+0x5c4>)
 8019a88:	f7f5 ff5a 	bl	800f940 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019a90:	b29a      	uxth	r2, r3
 8019a92:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019a96:	085b      	lsrs	r3, r3, #1
 8019a98:	b2db      	uxtb	r3, r3
 8019a9a:	b29b      	uxth	r3, r3
 8019a9c:	4413      	add	r3, r2
 8019a9e:	b29b      	uxth	r3, r3
 8019aa0:	3301      	adds	r3, #1
 8019aa2:	b298      	uxth	r0, r3
 8019aa4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019aa8:	b29a      	uxth	r2, r3
 8019aaa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019aae:	b299      	uxth	r1, r3
 8019ab0:	69fb      	ldr	r3, [r7, #28]
 8019ab2:	b29b      	uxth	r3, r3
 8019ab4:	fb11 f303 	smulbb	r3, r1, r3
 8019ab8:	b29b      	uxth	r3, r3
 8019aba:	4413      	add	r3, r2
 8019abc:	b29b      	uxth	r3, r3
 8019abe:	3301      	adds	r3, #1
 8019ac0:	b299      	uxth	r1, r3
 8019ac2:	f107 0214 	add.w	r2, r7, #20
 8019ac6:	2300      	movs	r3, #0
 8019ac8:	9301      	str	r3, [sp, #4]
 8019aca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019ace:	9300      	str	r3, [sp, #0]
 8019ad0:	4b02      	ldr	r3, [pc, #8]	; (8019adc <updateUint16Item+0x5c4>)
 8019ad2:	f7f5 ff35 	bl	800f940 <Paint_DrawString_EN>
 8019ad6:	e1da      	b.n	8019e8e <updateUint16Item+0x976>
 8019ad8:	2400c168 	.word	0x2400c168
 8019adc:	24000030 	.word	0x24000030
								localString, &Font12, WHITE,  BLACK);
					}

				}
				else if (currentCursorPosition.cursorPosition == VALUE)
 8019ae0:	4ba1      	ldr	r3, [pc, #644]	; (8019d68 <updateUint16Item+0x850>)
 8019ae2:	781b      	ldrb	r3, [r3, #0]
 8019ae4:	2b0b      	cmp	r3, #11
 8019ae6:	f040 8147 	bne.w	8019d78 <updateUint16Item+0x860>
				{
					if (howToDraw == RIGHT)
 8019aea:	79fb      	ldrb	r3, [r7, #7]
 8019aec:	2b04      	cmp	r3, #4
 8019aee:	f040 808c 	bne.w	8019c0a <updateUint16Item+0x6f2>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019af2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019af6:	b29b      	uxth	r3, r3
 8019af8:	3301      	adds	r3, #1
 8019afa:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019afc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019b00:	b29a      	uxth	r2, r3
 8019b02:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019b06:	b299      	uxth	r1, r3
 8019b08:	69fb      	ldr	r3, [r7, #28]
 8019b0a:	b29b      	uxth	r3, r3
 8019b0c:	fb11 f303 	smulbb	r3, r1, r3
 8019b10:	b29b      	uxth	r3, r3
 8019b12:	4413      	add	r3, r2
 8019b14:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019b16:	3301      	adds	r3, #1
 8019b18:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 8019b1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019b1e:	b29c      	uxth	r4, r3
 8019b20:	69fb      	ldr	r3, [r7, #28]
 8019b22:	3301      	adds	r3, #1
 8019b24:	011b      	lsls	r3, r3, #4
 8019b26:	4a91      	ldr	r2, [pc, #580]	; (8019d6c <updateUint16Item+0x854>)
 8019b28:	4413      	add	r3, r2
 8019b2a:	4618      	mov	r0, r3
 8019b2c:	f7e6 fbe2 	bl	80002f4 <strlen>
 8019b30:	4603      	mov	r3, r0
 8019b32:	b29a      	uxth	r2, r3
 8019b34:	4b8e      	ldr	r3, [pc, #568]	; (8019d70 <updateUint16Item+0x858>)
 8019b36:	889b      	ldrh	r3, [r3, #4]
 8019b38:	fb12 f303 	smulbb	r3, r2, r3
 8019b3c:	b29b      	uxth	r3, r3
 8019b3e:	4423      	add	r3, r4
 8019b40:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019b42:	3301      	adds	r3, #1
 8019b44:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8019b46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019b4a:	b29a      	uxth	r2, r3
 8019b4c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019b50:	b299      	uxth	r1, r3
 8019b52:	69fb      	ldr	r3, [r7, #28]
 8019b54:	b29b      	uxth	r3, r3
 8019b56:	fb11 f303 	smulbb	r3, r1, r3
 8019b5a:	b29b      	uxth	r3, r3
 8019b5c:	4413      	add	r3, r2
 8019b5e:	b29a      	uxth	r2, r3
 8019b60:	4b83      	ldr	r3, [pc, #524]	; (8019d70 <updateUint16Item+0x858>)
 8019b62:	88db      	ldrh	r3, [r3, #6]
 8019b64:	4413      	add	r3, r2
 8019b66:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019b68:	3301      	adds	r3, #1
 8019b6a:	b29b      	uxth	r3, r3
 8019b6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019b70:	9200      	str	r2, [sp, #0]
 8019b72:	4602      	mov	r2, r0
 8019b74:	4631      	mov	r1, r6
 8019b76:	4628      	mov	r0, r5
 8019b78:	f7f5 fac4 	bl	800f104 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019b80:	b29b      	uxth	r3, r3
 8019b82:	3301      	adds	r3, #1
 8019b84:	b298      	uxth	r0, r3
 8019b86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019b8a:	b29a      	uxth	r2, r3
 8019b8c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019b90:	b299      	uxth	r1, r3
 8019b92:	69fb      	ldr	r3, [r7, #28]
 8019b94:	b29b      	uxth	r3, r3
 8019b96:	fb11 f303 	smulbb	r3, r1, r3
 8019b9a:	b29b      	uxth	r3, r3
 8019b9c:	4413      	add	r3, r2
 8019b9e:	b29b      	uxth	r3, r3
 8019ba0:	3301      	adds	r3, #1
 8019ba2:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 8019ba4:	69fb      	ldr	r3, [r7, #28]
 8019ba6:	3301      	adds	r3, #1
 8019ba8:	011b      	lsls	r3, r3, #4
 8019baa:	4a70      	ldr	r2, [pc, #448]	; (8019d6c <updateUint16Item+0x854>)
 8019bac:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019bae:	2300      	movs	r3, #0
 8019bb0:	9301      	str	r3, [sp, #4]
 8019bb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019bb6:	9300      	str	r3, [sp, #0]
 8019bb8:	4b6d      	ldr	r3, [pc, #436]	; (8019d70 <updateUint16Item+0x858>)
 8019bba:	f7f5 fec1 	bl	800f940 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019bbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019bc2:	b29a      	uxth	r2, r3
 8019bc4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019bc8:	085b      	lsrs	r3, r3, #1
 8019bca:	b2db      	uxtb	r3, r3
 8019bcc:	b29b      	uxth	r3, r3
 8019bce:	4413      	add	r3, r2
 8019bd0:	b29b      	uxth	r3, r3
 8019bd2:	3301      	adds	r3, #1
 8019bd4:	b298      	uxth	r0, r3
 8019bd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019bda:	b29a      	uxth	r2, r3
 8019bdc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019be0:	b299      	uxth	r1, r3
 8019be2:	69fb      	ldr	r3, [r7, #28]
 8019be4:	b29b      	uxth	r3, r3
 8019be6:	fb11 f303 	smulbb	r3, r1, r3
 8019bea:	b29b      	uxth	r3, r3
 8019bec:	4413      	add	r3, r2
 8019bee:	b29b      	uxth	r3, r3
 8019bf0:	3301      	adds	r3, #1
 8019bf2:	b299      	uxth	r1, r3
 8019bf4:	f107 0214 	add.w	r2, r7, #20
 8019bf8:	2300      	movs	r3, #0
 8019bfa:	9301      	str	r3, [sp, #4]
 8019bfc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8019c00:	9300      	str	r3, [sp, #0]
 8019c02:	4b5b      	ldr	r3, [pc, #364]	; (8019d70 <updateUint16Item+0x858>)
 8019c04:	f7f5 fe9c 	bl	800f940 <Paint_DrawString_EN>
 8019c08:	e141      	b.n	8019e8e <updateUint16Item+0x976>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == DOWN)
 8019c0a:	79fb      	ldrb	r3, [r7, #7]
 8019c0c:	2b01      	cmp	r3, #1
 8019c0e:	d158      	bne.n	8019cc2 <updateUint16Item+0x7aa>
					{
						if (uint16Item.deltaMultiplier < uint16Item.startValue)
 8019c10:	4b56      	ldr	r3, [pc, #344]	; (8019d6c <updateUint16Item+0x854>)
 8019c12:	899a      	ldrh	r2, [r3, #12]
 8019c14:	4b55      	ldr	r3, [pc, #340]	; (8019d6c <updateUint16Item+0x854>)
 8019c16:	891b      	ldrh	r3, [r3, #8]
 8019c18:	429a      	cmp	r2, r3
 8019c1a:	d21f      	bcs.n	8019c5c <updateUint16Item+0x744>
						{
							uint16Item.startValue = fmax(uint16Item.startValue - uint16Item.deltaMultiplier, uint16Item.minValue * 1.0);
 8019c1c:	4b53      	ldr	r3, [pc, #332]	; (8019d6c <updateUint16Item+0x854>)
 8019c1e:	891b      	ldrh	r3, [r3, #8]
 8019c20:	461a      	mov	r2, r3
 8019c22:	4b52      	ldr	r3, [pc, #328]	; (8019d6c <updateUint16Item+0x854>)
 8019c24:	899b      	ldrh	r3, [r3, #12]
 8019c26:	1ad3      	subs	r3, r2, r3
 8019c28:	ee07 3a90 	vmov	s15, r3
 8019c2c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019c30:	4b4e      	ldr	r3, [pc, #312]	; (8019d6c <updateUint16Item+0x854>)
 8019c32:	889b      	ldrh	r3, [r3, #4]
 8019c34:	ee06 3a90 	vmov	s13, r3
 8019c38:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8019c3c:	eeb0 1b46 	vmov.f64	d1, d6
 8019c40:	eeb0 0b47 	vmov.f64	d0, d7
 8019c44:	f007 fa5e 	bl	8021104 <fmax>
 8019c48:	eeb0 7b40 	vmov.f64	d7, d0
 8019c4c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8019c50:	ee17 3a90 	vmov	r3, s15
 8019c54:	b29a      	uxth	r2, r3
 8019c56:	4b45      	ldr	r3, [pc, #276]	; (8019d6c <updateUint16Item+0x854>)
 8019c58:	811a      	strh	r2, [r3, #8]
 8019c5a:	e003      	b.n	8019c64 <updateUint16Item+0x74c>
						}
						else
						{
							uint16Item.startValue = uint16Item.minValue;
 8019c5c:	4b43      	ldr	r3, [pc, #268]	; (8019d6c <updateUint16Item+0x854>)
 8019c5e:	889a      	ldrh	r2, [r3, #4]
 8019c60:	4b42      	ldr	r3, [pc, #264]	; (8019d6c <updateUint16Item+0x854>)
 8019c62:	811a      	strh	r2, [r3, #8]
						}

						sprintf(localString,"%04d",uint16Item.startValue);
 8019c64:	4b41      	ldr	r3, [pc, #260]	; (8019d6c <updateUint16Item+0x854>)
 8019c66:	891b      	ldrh	r3, [r3, #8]
 8019c68:	461a      	mov	r2, r3
 8019c6a:	f107 0314 	add.w	r3, r7, #20
 8019c6e:	4941      	ldr	r1, [pc, #260]	; (8019d74 <updateUint16Item+0x85c>)
 8019c70:	4618      	mov	r0, r3
 8019c72:	f003 feb3 	bl	801d9dc <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019c76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019c7a:	b29a      	uxth	r2, r3
 8019c7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019c80:	085b      	lsrs	r3, r3, #1
 8019c82:	b2db      	uxtb	r3, r3
 8019c84:	b29b      	uxth	r3, r3
 8019c86:	4413      	add	r3, r2
 8019c88:	b29b      	uxth	r3, r3
 8019c8a:	3301      	adds	r3, #1
 8019c8c:	b298      	uxth	r0, r3
 8019c8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019c92:	b29a      	uxth	r2, r3
 8019c94:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019c98:	b299      	uxth	r1, r3
 8019c9a:	69fb      	ldr	r3, [r7, #28]
 8019c9c:	b29b      	uxth	r3, r3
 8019c9e:	fb11 f303 	smulbb	r3, r1, r3
 8019ca2:	b29b      	uxth	r3, r3
 8019ca4:	4413      	add	r3, r2
 8019ca6:	b29b      	uxth	r3, r3
 8019ca8:	3301      	adds	r3, #1
 8019caa:	b299      	uxth	r1, r3
 8019cac:	f107 0214 	add.w	r2, r7, #20
 8019cb0:	2300      	movs	r3, #0
 8019cb2:	9301      	str	r3, [sp, #4]
 8019cb4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8019cb8:	9300      	str	r3, [sp, #0]
 8019cba:	4b2d      	ldr	r3, [pc, #180]	; (8019d70 <updateUint16Item+0x858>)
 8019cbc:	f7f5 fe40 	bl	800f940 <Paint_DrawString_EN>
 8019cc0:	e0e5      	b.n	8019e8e <updateUint16Item+0x976>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == UP)
 8019cc2:	79fb      	ldrb	r3, [r7, #7]
 8019cc4:	2b00      	cmp	r3, #0
 8019cc6:	f040 80e2 	bne.w	8019e8e <updateUint16Item+0x976>
					{
						uint16Item.startValue = fmin(uint16Item.startValue + uint16Item.deltaMultiplier, uint16Item.maxValue * 1.0);
 8019cca:	4b28      	ldr	r3, [pc, #160]	; (8019d6c <updateUint16Item+0x854>)
 8019ccc:	891b      	ldrh	r3, [r3, #8]
 8019cce:	461a      	mov	r2, r3
 8019cd0:	4b26      	ldr	r3, [pc, #152]	; (8019d6c <updateUint16Item+0x854>)
 8019cd2:	899b      	ldrh	r3, [r3, #12]
 8019cd4:	4413      	add	r3, r2
 8019cd6:	ee07 3a90 	vmov	s15, r3
 8019cda:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019cde:	4b23      	ldr	r3, [pc, #140]	; (8019d6c <updateUint16Item+0x854>)
 8019ce0:	88db      	ldrh	r3, [r3, #6]
 8019ce2:	ee06 3a90 	vmov	s13, r3
 8019ce6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8019cea:	eeb0 1b46 	vmov.f64	d1, d6
 8019cee:	eeb0 0b47 	vmov.f64	d0, d7
 8019cf2:	f007 fa22 	bl	802113a <fmin>
 8019cf6:	eeb0 7b40 	vmov.f64	d7, d0
 8019cfa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8019cfe:	ee17 3a90 	vmov	r3, s15
 8019d02:	b29a      	uxth	r2, r3
 8019d04:	4b19      	ldr	r3, [pc, #100]	; (8019d6c <updateUint16Item+0x854>)
 8019d06:	811a      	strh	r2, [r3, #8]
						sprintf(localString,"%04d",uint16Item.startValue);
 8019d08:	4b18      	ldr	r3, [pc, #96]	; (8019d6c <updateUint16Item+0x854>)
 8019d0a:	891b      	ldrh	r3, [r3, #8]
 8019d0c:	461a      	mov	r2, r3
 8019d0e:	f107 0314 	add.w	r3, r7, #20
 8019d12:	4918      	ldr	r1, [pc, #96]	; (8019d74 <updateUint16Item+0x85c>)
 8019d14:	4618      	mov	r0, r3
 8019d16:	f003 fe61 	bl	801d9dc <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019d1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d1e:	b29a      	uxth	r2, r3
 8019d20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019d24:	085b      	lsrs	r3, r3, #1
 8019d26:	b2db      	uxtb	r3, r3
 8019d28:	b29b      	uxth	r3, r3
 8019d2a:	4413      	add	r3, r2
 8019d2c:	b29b      	uxth	r3, r3
 8019d2e:	3301      	adds	r3, #1
 8019d30:	b298      	uxth	r0, r3
 8019d32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019d36:	b29a      	uxth	r2, r3
 8019d38:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019d3c:	b299      	uxth	r1, r3
 8019d3e:	69fb      	ldr	r3, [r7, #28]
 8019d40:	b29b      	uxth	r3, r3
 8019d42:	fb11 f303 	smulbb	r3, r1, r3
 8019d46:	b29b      	uxth	r3, r3
 8019d48:	4413      	add	r3, r2
 8019d4a:	b29b      	uxth	r3, r3
 8019d4c:	3301      	adds	r3, #1
 8019d4e:	b299      	uxth	r1, r3
 8019d50:	f107 0214 	add.w	r2, r7, #20
 8019d54:	2300      	movs	r3, #0
 8019d56:	9301      	str	r3, [sp, #4]
 8019d58:	f24c 6318 	movw	r3, #50712	; 0xc618
 8019d5c:	9300      	str	r3, [sp, #0]
 8019d5e:	4b04      	ldr	r3, [pc, #16]	; (8019d70 <updateUint16Item+0x858>)
 8019d60:	f7f5 fdee 	bl	800f940 <Paint_DrawString_EN>
 8019d64:	e093      	b.n	8019e8e <updateUint16Item+0x976>
 8019d66:	bf00      	nop
 8019d68:	2400afcc 	.word	0x2400afcc
 8019d6c:	2400c168 	.word	0x2400c168
 8019d70:	24000030 	.word	0x24000030
 8019d74:	08021a7c 	.word	0x08021a7c
								localString, &Font12, LGRAY,  BLACK);
					}
				}
				else
				{
					Paint_ClearWindows(MenuRectangleStartX + 1,
 8019d78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d7c:	b29b      	uxth	r3, r3
 8019d7e:	3301      	adds	r3, #1
 8019d80:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019d82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019d86:	b29a      	uxth	r2, r3
 8019d88:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019d8c:	b299      	uxth	r1, r3
 8019d8e:	69fb      	ldr	r3, [r7, #28]
 8019d90:	b29b      	uxth	r3, r3
 8019d92:	fb11 f303 	smulbb	r3, r1, r3
 8019d96:	b29b      	uxth	r3, r3
 8019d98:	4413      	add	r3, r2
 8019d9a:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 8019d9c:	3301      	adds	r3, #1
 8019d9e:	b29e      	uxth	r6, r3
							MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 8019da0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019da4:	b29c      	uxth	r4, r3
 8019da6:	69fb      	ldr	r3, [r7, #28]
 8019da8:	3301      	adds	r3, #1
 8019daa:	011b      	lsls	r3, r3, #4
 8019dac:	4a93      	ldr	r2, [pc, #588]	; (8019ffc <updateUint16Item+0xae4>)
 8019dae:	4413      	add	r3, r2
 8019db0:	4618      	mov	r0, r3
 8019db2:	f7e6 fa9f 	bl	80002f4 <strlen>
 8019db6:	4603      	mov	r3, r0
 8019db8:	b29a      	uxth	r2, r3
 8019dba:	4b91      	ldr	r3, [pc, #580]	; (801a000 <updateUint16Item+0xae8>)
 8019dbc:	889b      	ldrh	r3, [r3, #4]
 8019dbe:	fb12 f303 	smulbb	r3, r2, r3
 8019dc2:	b29b      	uxth	r3, r3
 8019dc4:	4423      	add	r3, r4
 8019dc6:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 8019dc8:	3301      	adds	r3, #1
 8019dca:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8019dcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019dd0:	b29a      	uxth	r2, r3
 8019dd2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019dd6:	b299      	uxth	r1, r3
 8019dd8:	69fb      	ldr	r3, [r7, #28]
 8019dda:	b29b      	uxth	r3, r3
 8019ddc:	fb11 f303 	smulbb	r3, r1, r3
 8019de0:	b29b      	uxth	r3, r3
 8019de2:	4413      	add	r3, r2
 8019de4:	b29a      	uxth	r2, r3
 8019de6:	4b86      	ldr	r3, [pc, #536]	; (801a000 <updateUint16Item+0xae8>)
 8019de8:	88db      	ldrh	r3, [r3, #6]
 8019dea:	4413      	add	r3, r2
 8019dec:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 8019dee:	3301      	adds	r3, #1
 8019df0:	b29b      	uxth	r3, r3
 8019df2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019df6:	9200      	str	r2, [sp, #0]
 8019df8:	4602      	mov	r2, r0
 8019dfa:	4631      	mov	r1, r6
 8019dfc:	4628      	mov	r0, r5
 8019dfe:	f7f5 f981 	bl	800f104 <Paint_ClearWindows>
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019e02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019e06:	b29b      	uxth	r3, r3
 8019e08:	3301      	adds	r3, #1
 8019e0a:	b298      	uxth	r0, r3
 8019e0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019e10:	b29a      	uxth	r2, r3
 8019e12:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019e16:	b299      	uxth	r1, r3
 8019e18:	69fb      	ldr	r3, [r7, #28]
 8019e1a:	b29b      	uxth	r3, r3
 8019e1c:	fb11 f303 	smulbb	r3, r1, r3
 8019e20:	b29b      	uxth	r3, r3
 8019e22:	4413      	add	r3, r2
 8019e24:	b29b      	uxth	r3, r3
 8019e26:	3301      	adds	r3, #1
 8019e28:	b299      	uxth	r1, r3
							uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 8019e2a:	69fb      	ldr	r3, [r7, #28]
 8019e2c:	3301      	adds	r3, #1
 8019e2e:	011b      	lsls	r3, r3, #4
 8019e30:	4a72      	ldr	r2, [pc, #456]	; (8019ffc <updateUint16Item+0xae4>)
 8019e32:	441a      	add	r2, r3
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019e34:	2300      	movs	r3, #0
 8019e36:	9301      	str	r3, [sp, #4]
 8019e38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019e3c:	9300      	str	r3, [sp, #0]
 8019e3e:	4b70      	ldr	r3, [pc, #448]	; (801a000 <updateUint16Item+0xae8>)
 8019e40:	f7f5 fd7e 	bl	800f940 <Paint_DrawString_EN>
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019e44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019e48:	b29a      	uxth	r2, r3
 8019e4a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019e4e:	085b      	lsrs	r3, r3, #1
 8019e50:	b2db      	uxtb	r3, r3
 8019e52:	b29b      	uxth	r3, r3
 8019e54:	4413      	add	r3, r2
 8019e56:	b29b      	uxth	r3, r3
 8019e58:	3301      	adds	r3, #1
 8019e5a:	b298      	uxth	r0, r3
 8019e5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019e60:	b29a      	uxth	r2, r3
 8019e62:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019e66:	b299      	uxth	r1, r3
 8019e68:	69fb      	ldr	r3, [r7, #28]
 8019e6a:	b29b      	uxth	r3, r3
 8019e6c:	fb11 f303 	smulbb	r3, r1, r3
 8019e70:	b29b      	uxth	r3, r3
 8019e72:	4413      	add	r3, r2
 8019e74:	b29b      	uxth	r3, r3
 8019e76:	3301      	adds	r3, #1
 8019e78:	b299      	uxth	r1, r3
 8019e7a:	f107 0214 	add.w	r2, r7, #20
 8019e7e:	2300      	movs	r3, #0
 8019e80:	9301      	str	r3, [sp, #4]
 8019e82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019e86:	9300      	str	r3, [sp, #0]
 8019e88:	4b5d      	ldr	r3, [pc, #372]	; (801a000 <updateUint16Item+0xae8>)
 8019e8a:	f7f5 fd59 	bl	800f940 <Paint_DrawString_EN>
							localString, &Font12, WHITE,  BLACK);
				}
			}
			// Render value text of "Multiplier" with Grey or White background
			if ( (i == 3) )
 8019e8e:	69fb      	ldr	r3, [r7, #28]
 8019e90:	2b03      	cmp	r3, #3
 8019e92:	f040 83bc 	bne.w	801a60e <updateUint16Item+0x10f6>
			{
				char localString[8] = "";
 8019e96:	2300      	movs	r3, #0
 8019e98:	60fb      	str	r3, [r7, #12]
 8019e9a:	2300      	movs	r3, #0
 8019e9c:	613b      	str	r3, [r7, #16]
				sprintf(localString,"%04d",uint16Item.deltaMultiplier);
 8019e9e:	4b57      	ldr	r3, [pc, #348]	; (8019ffc <updateUint16Item+0xae4>)
 8019ea0:	899b      	ldrh	r3, [r3, #12]
 8019ea2:	461a      	mov	r2, r3
 8019ea4:	f107 030c 	add.w	r3, r7, #12
 8019ea8:	4956      	ldr	r1, [pc, #344]	; (801a004 <updateUint16Item+0xaec>)
 8019eaa:	4618      	mov	r0, r3
 8019eac:	f003 fd96 	bl	801d9dc <siprintf>
				if (currentCursorPosition.cursorPosition == 0x03)
 8019eb0:	4b55      	ldr	r3, [pc, #340]	; (801a008 <updateUint16Item+0xaf0>)
 8019eb2:	781b      	ldrb	r3, [r3, #0]
 8019eb4:	2b03      	cmp	r3, #3
 8019eb6:	f040 81cd 	bne.w	801a254 <updateUint16Item+0xd3c>
				{
					if ( (howToDraw == LEFT) || (howToDraw == FULL) )
 8019eba:	79fb      	ldrb	r3, [r7, #7]
 8019ebc:	2b03      	cmp	r3, #3
 8019ebe:	d003      	beq.n	8019ec8 <updateUint16Item+0x9b0>
 8019ec0:	79fb      	ldrb	r3, [r7, #7]
 8019ec2:	2b02      	cmp	r3, #2
 8019ec4:	f040 80a2 	bne.w	801a00c <updateUint16Item+0xaf4>
					{
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019ecc:	b29b      	uxth	r3, r3
 8019ece:	3301      	adds	r3, #1
 8019ed0:	b298      	uxth	r0, r3
 8019ed2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019ed6:	b29a      	uxth	r2, r3
 8019ed8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019edc:	b299      	uxth	r1, r3
 8019ede:	69fb      	ldr	r3, [r7, #28]
 8019ee0:	b29b      	uxth	r3, r3
 8019ee2:	fb11 f303 	smulbb	r3, r1, r3
 8019ee6:	b29b      	uxth	r3, r3
 8019ee8:	4413      	add	r3, r2
 8019eea:	b29b      	uxth	r3, r3
 8019eec:	3301      	adds	r3, #1
 8019eee:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 8019ef0:	69fb      	ldr	r3, [r7, #28]
 8019ef2:	3301      	adds	r3, #1
 8019ef4:	011b      	lsls	r3, r3, #4
 8019ef6:	4a41      	ldr	r2, [pc, #260]	; (8019ffc <updateUint16Item+0xae4>)
 8019ef8:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019efa:	2300      	movs	r3, #0
 8019efc:	9301      	str	r3, [sp, #4]
 8019efe:	f24c 6318 	movw	r3, #50712	; 0xc618
 8019f02:	9300      	str	r3, [sp, #0]
 8019f04:	4b3e      	ldr	r3, [pc, #248]	; (801a000 <updateUint16Item+0xae8>)
 8019f06:	f7f5 fd1b 	bl	800f940 <Paint_DrawString_EN>
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8019f0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019f0e:	b29a      	uxth	r2, r3
 8019f10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019f14:	085b      	lsrs	r3, r3, #1
 8019f16:	b2db      	uxtb	r3, r3
 8019f18:	b29b      	uxth	r3, r3
 8019f1a:	4413      	add	r3, r2
 8019f1c:	b29b      	uxth	r3, r3
 8019f1e:	3301      	adds	r3, #1
 8019f20:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019f22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019f26:	b29a      	uxth	r2, r3
 8019f28:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019f2c:	b299      	uxth	r1, r3
 8019f2e:	69fb      	ldr	r3, [r7, #28]
 8019f30:	b29b      	uxth	r3, r3
 8019f32:	fb11 f303 	smulbb	r3, r1, r3
 8019f36:	b29b      	uxth	r3, r3
 8019f38:	4413      	add	r3, r2
 8019f3a:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8019f3c:	3301      	adds	r3, #1
 8019f3e:	b29e      	uxth	r6, r3
								MenuRectangleStartX + MenuRectangleWidth / 2 + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 8019f40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019f44:	b29a      	uxth	r2, r3
 8019f46:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019f4a:	085b      	lsrs	r3, r3, #1
 8019f4c:	b2db      	uxtb	r3, r3
 8019f4e:	b29b      	uxth	r3, r3
 8019f50:	4413      	add	r3, r2
 8019f52:	b29c      	uxth	r4, r3
 8019f54:	69fb      	ldr	r3, [r7, #28]
 8019f56:	3301      	adds	r3, #1
 8019f58:	011b      	lsls	r3, r3, #4
 8019f5a:	4a28      	ldr	r2, [pc, #160]	; (8019ffc <updateUint16Item+0xae4>)
 8019f5c:	4413      	add	r3, r2
 8019f5e:	4618      	mov	r0, r3
 8019f60:	f7e6 f9c8 	bl	80002f4 <strlen>
 8019f64:	4603      	mov	r3, r0
 8019f66:	b29a      	uxth	r2, r3
 8019f68:	4b25      	ldr	r3, [pc, #148]	; (801a000 <updateUint16Item+0xae8>)
 8019f6a:	889b      	ldrh	r3, [r3, #4]
 8019f6c:	fb12 f303 	smulbb	r3, r2, r3
 8019f70:	b29b      	uxth	r3, r3
 8019f72:	4423      	add	r3, r4
 8019f74:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8019f76:	3301      	adds	r3, #1
 8019f78:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8019f7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019f7e:	b29a      	uxth	r2, r3
 8019f80:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019f84:	b299      	uxth	r1, r3
 8019f86:	69fb      	ldr	r3, [r7, #28]
 8019f88:	b29b      	uxth	r3, r3
 8019f8a:	fb11 f303 	smulbb	r3, r1, r3
 8019f8e:	b29b      	uxth	r3, r3
 8019f90:	4413      	add	r3, r2
 8019f92:	b29a      	uxth	r2, r3
 8019f94:	4b1a      	ldr	r3, [pc, #104]	; (801a000 <updateUint16Item+0xae8>)
 8019f96:	88db      	ldrh	r3, [r3, #6]
 8019f98:	4413      	add	r3, r2
 8019f9a:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8019f9c:	3301      	adds	r3, #1
 8019f9e:	b29b      	uxth	r3, r3
 8019fa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019fa4:	9200      	str	r2, [sp, #0]
 8019fa6:	4602      	mov	r2, r0
 8019fa8:	4631      	mov	r1, r6
 8019faa:	4628      	mov	r0, r5
 8019fac:	f7f5 f8aa 	bl	800f104 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019fb4:	b29a      	uxth	r2, r3
 8019fb6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019fba:	085b      	lsrs	r3, r3, #1
 8019fbc:	b2db      	uxtb	r3, r3
 8019fbe:	b29b      	uxth	r3, r3
 8019fc0:	4413      	add	r3, r2
 8019fc2:	b29b      	uxth	r3, r3
 8019fc4:	3301      	adds	r3, #1
 8019fc6:	b298      	uxth	r0, r3
 8019fc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019fcc:	b29a      	uxth	r2, r3
 8019fce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019fd2:	b299      	uxth	r1, r3
 8019fd4:	69fb      	ldr	r3, [r7, #28]
 8019fd6:	b29b      	uxth	r3, r3
 8019fd8:	fb11 f303 	smulbb	r3, r1, r3
 8019fdc:	b29b      	uxth	r3, r3
 8019fde:	4413      	add	r3, r2
 8019fe0:	b29b      	uxth	r3, r3
 8019fe2:	3301      	adds	r3, #1
 8019fe4:	b299      	uxth	r1, r3
 8019fe6:	f107 020c 	add.w	r2, r7, #12
 8019fea:	2300      	movs	r3, #0
 8019fec:	9301      	str	r3, [sp, #4]
 8019fee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019ff2:	9300      	str	r3, [sp, #0]
 8019ff4:	4b02      	ldr	r3, [pc, #8]	; (801a000 <updateUint16Item+0xae8>)
 8019ff6:	f7f5 fca3 	bl	800f940 <Paint_DrawString_EN>
 8019ffa:	e308      	b.n	801a60e <updateUint16Item+0x10f6>
 8019ffc:	2400c168 	.word	0x2400c168
 801a000:	24000030 	.word	0x24000030
 801a004:	08021a7c 	.word	0x08021a7c
 801a008:	2400afcc 	.word	0x2400afcc
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == DOWN)
 801a00c:	79fb      	ldrb	r3, [r7, #7]
 801a00e:	2b01      	cmp	r3, #1
 801a010:	f040 808c 	bne.w	801a12c <updateUint16Item+0xc14>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a018:	b29b      	uxth	r3, r3
 801a01a:	3301      	adds	r3, #1
 801a01c:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a01e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a022:	b29a      	uxth	r2, r3
 801a024:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a028:	b299      	uxth	r1, r3
 801a02a:	69fb      	ldr	r3, [r7, #28]
 801a02c:	b29b      	uxth	r3, r3
 801a02e:	fb11 f303 	smulbb	r3, r1, r3
 801a032:	b29b      	uxth	r3, r3
 801a034:	4413      	add	r3, r2
 801a036:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a038:	3301      	adds	r3, #1
 801a03a:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 801a03c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a040:	b29c      	uxth	r4, r3
 801a042:	69fb      	ldr	r3, [r7, #28]
 801a044:	3301      	adds	r3, #1
 801a046:	011b      	lsls	r3, r3, #4
 801a048:	4a80      	ldr	r2, [pc, #512]	; (801a24c <updateUint16Item+0xd34>)
 801a04a:	4413      	add	r3, r2
 801a04c:	4618      	mov	r0, r3
 801a04e:	f7e6 f951 	bl	80002f4 <strlen>
 801a052:	4603      	mov	r3, r0
 801a054:	b29a      	uxth	r2, r3
 801a056:	4b7e      	ldr	r3, [pc, #504]	; (801a250 <updateUint16Item+0xd38>)
 801a058:	889b      	ldrh	r3, [r3, #4]
 801a05a:	fb12 f303 	smulbb	r3, r2, r3
 801a05e:	b29b      	uxth	r3, r3
 801a060:	4423      	add	r3, r4
 801a062:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a064:	3301      	adds	r3, #1
 801a066:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801a068:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a06c:	b29a      	uxth	r2, r3
 801a06e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a072:	b299      	uxth	r1, r3
 801a074:	69fb      	ldr	r3, [r7, #28]
 801a076:	b29b      	uxth	r3, r3
 801a078:	fb11 f303 	smulbb	r3, r1, r3
 801a07c:	b29b      	uxth	r3, r3
 801a07e:	4413      	add	r3, r2
 801a080:	b29a      	uxth	r2, r3
 801a082:	4b73      	ldr	r3, [pc, #460]	; (801a250 <updateUint16Item+0xd38>)
 801a084:	88db      	ldrh	r3, [r3, #6]
 801a086:	4413      	add	r3, r2
 801a088:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a08a:	3301      	adds	r3, #1
 801a08c:	b29b      	uxth	r3, r3
 801a08e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a092:	9200      	str	r2, [sp, #0]
 801a094:	4602      	mov	r2, r0
 801a096:	4631      	mov	r1, r6
 801a098:	4628      	mov	r0, r5
 801a09a:	f7f5 f833 	bl	800f104 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a09e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a0a2:	b29b      	uxth	r3, r3
 801a0a4:	3301      	adds	r3, #1
 801a0a6:	b298      	uxth	r0, r3
 801a0a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a0ac:	b29a      	uxth	r2, r3
 801a0ae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a0b2:	b299      	uxth	r1, r3
 801a0b4:	69fb      	ldr	r3, [r7, #28]
 801a0b6:	b29b      	uxth	r3, r3
 801a0b8:	fb11 f303 	smulbb	r3, r1, r3
 801a0bc:	b29b      	uxth	r3, r3
 801a0be:	4413      	add	r3, r2
 801a0c0:	b29b      	uxth	r3, r3
 801a0c2:	3301      	adds	r3, #1
 801a0c4:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 801a0c6:	69fb      	ldr	r3, [r7, #28]
 801a0c8:	3301      	adds	r3, #1
 801a0ca:	011b      	lsls	r3, r3, #4
 801a0cc:	4a5f      	ldr	r2, [pc, #380]	; (801a24c <updateUint16Item+0xd34>)
 801a0ce:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a0d0:	2300      	movs	r3, #0
 801a0d2:	9301      	str	r3, [sp, #4]
 801a0d4:	f24c 6318 	movw	r3, #50712	; 0xc618
 801a0d8:	9300      	str	r3, [sp, #0]
 801a0da:	4b5d      	ldr	r3, [pc, #372]	; (801a250 <updateUint16Item+0xd38>)
 801a0dc:	f7f5 fc30 	bl	800f940 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a0e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a0e4:	b29a      	uxth	r2, r3
 801a0e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a0ea:	085b      	lsrs	r3, r3, #1
 801a0ec:	b2db      	uxtb	r3, r3
 801a0ee:	b29b      	uxth	r3, r3
 801a0f0:	4413      	add	r3, r2
 801a0f2:	b29b      	uxth	r3, r3
 801a0f4:	3301      	adds	r3, #1
 801a0f6:	b298      	uxth	r0, r3
 801a0f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a0fc:	b29a      	uxth	r2, r3
 801a0fe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a102:	b299      	uxth	r1, r3
 801a104:	69fb      	ldr	r3, [r7, #28]
 801a106:	b29b      	uxth	r3, r3
 801a108:	fb11 f303 	smulbb	r3, r1, r3
 801a10c:	b29b      	uxth	r3, r3
 801a10e:	4413      	add	r3, r2
 801a110:	b29b      	uxth	r3, r3
 801a112:	3301      	adds	r3, #1
 801a114:	b299      	uxth	r1, r3
 801a116:	f107 020c 	add.w	r2, r7, #12
 801a11a:	2300      	movs	r3, #0
 801a11c:	9301      	str	r3, [sp, #4]
 801a11e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a122:	9300      	str	r3, [sp, #0]
 801a124:	4b4a      	ldr	r3, [pc, #296]	; (801a250 <updateUint16Item+0xd38>)
 801a126:	f7f5 fc0b 	bl	800f940 <Paint_DrawString_EN>
 801a12a:	e270      	b.n	801a60e <updateUint16Item+0x10f6>
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == UP)
 801a12c:	79fb      	ldrb	r3, [r7, #7]
 801a12e:	2b00      	cmp	r3, #0
 801a130:	f040 826d 	bne.w	801a60e <updateUint16Item+0x10f6>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a134:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a138:	b29b      	uxth	r3, r3
 801a13a:	3301      	adds	r3, #1
 801a13c:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a13e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a142:	b29a      	uxth	r2, r3
 801a144:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a148:	b299      	uxth	r1, r3
 801a14a:	69fb      	ldr	r3, [r7, #28]
 801a14c:	b29b      	uxth	r3, r3
 801a14e:	fb11 f303 	smulbb	r3, r1, r3
 801a152:	b29b      	uxth	r3, r3
 801a154:	4413      	add	r3, r2
 801a156:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a158:	3301      	adds	r3, #1
 801a15a:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 801a15c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a160:	b29c      	uxth	r4, r3
 801a162:	69fb      	ldr	r3, [r7, #28]
 801a164:	3301      	adds	r3, #1
 801a166:	011b      	lsls	r3, r3, #4
 801a168:	4a38      	ldr	r2, [pc, #224]	; (801a24c <updateUint16Item+0xd34>)
 801a16a:	4413      	add	r3, r2
 801a16c:	4618      	mov	r0, r3
 801a16e:	f7e6 f8c1 	bl	80002f4 <strlen>
 801a172:	4603      	mov	r3, r0
 801a174:	b29a      	uxth	r2, r3
 801a176:	4b36      	ldr	r3, [pc, #216]	; (801a250 <updateUint16Item+0xd38>)
 801a178:	889b      	ldrh	r3, [r3, #4]
 801a17a:	fb12 f303 	smulbb	r3, r2, r3
 801a17e:	b29b      	uxth	r3, r3
 801a180:	4423      	add	r3, r4
 801a182:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a184:	3301      	adds	r3, #1
 801a186:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801a188:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a18c:	b29a      	uxth	r2, r3
 801a18e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a192:	b299      	uxth	r1, r3
 801a194:	69fb      	ldr	r3, [r7, #28]
 801a196:	b29b      	uxth	r3, r3
 801a198:	fb11 f303 	smulbb	r3, r1, r3
 801a19c:	b29b      	uxth	r3, r3
 801a19e:	4413      	add	r3, r2
 801a1a0:	b29a      	uxth	r2, r3
 801a1a2:	4b2b      	ldr	r3, [pc, #172]	; (801a250 <updateUint16Item+0xd38>)
 801a1a4:	88db      	ldrh	r3, [r3, #6]
 801a1a6:	4413      	add	r3, r2
 801a1a8:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a1aa:	3301      	adds	r3, #1
 801a1ac:	b29b      	uxth	r3, r3
 801a1ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a1b2:	9200      	str	r2, [sp, #0]
 801a1b4:	4602      	mov	r2, r0
 801a1b6:	4631      	mov	r1, r6
 801a1b8:	4628      	mov	r0, r5
 801a1ba:	f7f4 ffa3 	bl	800f104 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a1be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a1c2:	b29b      	uxth	r3, r3
 801a1c4:	3301      	adds	r3, #1
 801a1c6:	b298      	uxth	r0, r3
 801a1c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a1cc:	b29a      	uxth	r2, r3
 801a1ce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a1d2:	b299      	uxth	r1, r3
 801a1d4:	69fb      	ldr	r3, [r7, #28]
 801a1d6:	b29b      	uxth	r3, r3
 801a1d8:	fb11 f303 	smulbb	r3, r1, r3
 801a1dc:	b29b      	uxth	r3, r3
 801a1de:	4413      	add	r3, r2
 801a1e0:	b29b      	uxth	r3, r3
 801a1e2:	3301      	adds	r3, #1
 801a1e4:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 801a1e6:	69fb      	ldr	r3, [r7, #28]
 801a1e8:	3301      	adds	r3, #1
 801a1ea:	011b      	lsls	r3, r3, #4
 801a1ec:	4a17      	ldr	r2, [pc, #92]	; (801a24c <updateUint16Item+0xd34>)
 801a1ee:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a1f0:	2300      	movs	r3, #0
 801a1f2:	9301      	str	r3, [sp, #4]
 801a1f4:	f24c 6318 	movw	r3, #50712	; 0xc618
 801a1f8:	9300      	str	r3, [sp, #0]
 801a1fa:	4b15      	ldr	r3, [pc, #84]	; (801a250 <updateUint16Item+0xd38>)
 801a1fc:	f7f5 fba0 	bl	800f940 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a204:	b29a      	uxth	r2, r3
 801a206:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a20a:	085b      	lsrs	r3, r3, #1
 801a20c:	b2db      	uxtb	r3, r3
 801a20e:	b29b      	uxth	r3, r3
 801a210:	4413      	add	r3, r2
 801a212:	b29b      	uxth	r3, r3
 801a214:	3301      	adds	r3, #1
 801a216:	b298      	uxth	r0, r3
 801a218:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a21c:	b29a      	uxth	r2, r3
 801a21e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a222:	b299      	uxth	r1, r3
 801a224:	69fb      	ldr	r3, [r7, #28]
 801a226:	b29b      	uxth	r3, r3
 801a228:	fb11 f303 	smulbb	r3, r1, r3
 801a22c:	b29b      	uxth	r3, r3
 801a22e:	4413      	add	r3, r2
 801a230:	b29b      	uxth	r3, r3
 801a232:	3301      	adds	r3, #1
 801a234:	b299      	uxth	r1, r3
 801a236:	f107 020c 	add.w	r2, r7, #12
 801a23a:	2300      	movs	r3, #0
 801a23c:	9301      	str	r3, [sp, #4]
 801a23e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a242:	9300      	str	r3, [sp, #0]
 801a244:	4b02      	ldr	r3, [pc, #8]	; (801a250 <updateUint16Item+0xd38>)
 801a246:	f7f5 fb7b 	bl	800f940 <Paint_DrawString_EN>
 801a24a:	e1e0      	b.n	801a60e <updateUint16Item+0x10f6>
 801a24c:	2400c168 	.word	0x2400c168
 801a250:	24000030 	.word	0x24000030
								localString, &Font12, WHITE,  BLACK);
					}
				}
				else if (currentCursorPosition.cursorPosition == MULTIPLIER)
 801a254:	4ba2      	ldr	r3, [pc, #648]	; (801a4e0 <updateUint16Item+0xfc8>)
 801a256:	781b      	ldrb	r3, [r3, #0]
 801a258:	2b0c      	cmp	r3, #12
 801a25a:	f040 814d 	bne.w	801a4f8 <updateUint16Item+0xfe0>
				{
					if (howToDraw == RIGHT)
 801a25e:	79fb      	ldrb	r3, [r7, #7]
 801a260:	2b04      	cmp	r3, #4
 801a262:	f040 808c 	bne.w	801a37e <updateUint16Item+0xe66>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a26a:	b29b      	uxth	r3, r3
 801a26c:	3301      	adds	r3, #1
 801a26e:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a270:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a274:	b29a      	uxth	r2, r3
 801a276:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a27a:	b299      	uxth	r1, r3
 801a27c:	69fb      	ldr	r3, [r7, #28]
 801a27e:	b29b      	uxth	r3, r3
 801a280:	fb11 f303 	smulbb	r3, r1, r3
 801a284:	b29b      	uxth	r3, r3
 801a286:	4413      	add	r3, r2
 801a288:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a28a:	3301      	adds	r3, #1
 801a28c:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 801a28e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a292:	b29c      	uxth	r4, r3
 801a294:	69fb      	ldr	r3, [r7, #28]
 801a296:	3301      	adds	r3, #1
 801a298:	011b      	lsls	r3, r3, #4
 801a29a:	4a92      	ldr	r2, [pc, #584]	; (801a4e4 <updateUint16Item+0xfcc>)
 801a29c:	4413      	add	r3, r2
 801a29e:	4618      	mov	r0, r3
 801a2a0:	f7e6 f828 	bl	80002f4 <strlen>
 801a2a4:	4603      	mov	r3, r0
 801a2a6:	b29a      	uxth	r2, r3
 801a2a8:	4b8f      	ldr	r3, [pc, #572]	; (801a4e8 <updateUint16Item+0xfd0>)
 801a2aa:	889b      	ldrh	r3, [r3, #4]
 801a2ac:	fb12 f303 	smulbb	r3, r2, r3
 801a2b0:	b29b      	uxth	r3, r3
 801a2b2:	4423      	add	r3, r4
 801a2b4:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a2b6:	3301      	adds	r3, #1
 801a2b8:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801a2ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a2be:	b29a      	uxth	r2, r3
 801a2c0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a2c4:	b299      	uxth	r1, r3
 801a2c6:	69fb      	ldr	r3, [r7, #28]
 801a2c8:	b29b      	uxth	r3, r3
 801a2ca:	fb11 f303 	smulbb	r3, r1, r3
 801a2ce:	b29b      	uxth	r3, r3
 801a2d0:	4413      	add	r3, r2
 801a2d2:	b29a      	uxth	r2, r3
 801a2d4:	4b84      	ldr	r3, [pc, #528]	; (801a4e8 <updateUint16Item+0xfd0>)
 801a2d6:	88db      	ldrh	r3, [r3, #6]
 801a2d8:	4413      	add	r3, r2
 801a2da:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a2dc:	3301      	adds	r3, #1
 801a2de:	b29b      	uxth	r3, r3
 801a2e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a2e4:	9200      	str	r2, [sp, #0]
 801a2e6:	4602      	mov	r2, r0
 801a2e8:	4631      	mov	r1, r6
 801a2ea:	4628      	mov	r0, r5
 801a2ec:	f7f4 ff0a 	bl	800f104 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a2f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a2f4:	b29b      	uxth	r3, r3
 801a2f6:	3301      	adds	r3, #1
 801a2f8:	b298      	uxth	r0, r3
 801a2fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a2fe:	b29a      	uxth	r2, r3
 801a300:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a304:	b299      	uxth	r1, r3
 801a306:	69fb      	ldr	r3, [r7, #28]
 801a308:	b29b      	uxth	r3, r3
 801a30a:	fb11 f303 	smulbb	r3, r1, r3
 801a30e:	b29b      	uxth	r3, r3
 801a310:	4413      	add	r3, r2
 801a312:	b29b      	uxth	r3, r3
 801a314:	3301      	adds	r3, #1
 801a316:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 801a318:	69fb      	ldr	r3, [r7, #28]
 801a31a:	3301      	adds	r3, #1
 801a31c:	011b      	lsls	r3, r3, #4
 801a31e:	4a71      	ldr	r2, [pc, #452]	; (801a4e4 <updateUint16Item+0xfcc>)
 801a320:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a322:	2300      	movs	r3, #0
 801a324:	9301      	str	r3, [sp, #4]
 801a326:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a32a:	9300      	str	r3, [sp, #0]
 801a32c:	4b6e      	ldr	r3, [pc, #440]	; (801a4e8 <updateUint16Item+0xfd0>)
 801a32e:	f7f5 fb07 	bl	800f940 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a332:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a336:	b29a      	uxth	r2, r3
 801a338:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a33c:	085b      	lsrs	r3, r3, #1
 801a33e:	b2db      	uxtb	r3, r3
 801a340:	b29b      	uxth	r3, r3
 801a342:	4413      	add	r3, r2
 801a344:	b29b      	uxth	r3, r3
 801a346:	3301      	adds	r3, #1
 801a348:	b298      	uxth	r0, r3
 801a34a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a34e:	b29a      	uxth	r2, r3
 801a350:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a354:	b299      	uxth	r1, r3
 801a356:	69fb      	ldr	r3, [r7, #28]
 801a358:	b29b      	uxth	r3, r3
 801a35a:	fb11 f303 	smulbb	r3, r1, r3
 801a35e:	b29b      	uxth	r3, r3
 801a360:	4413      	add	r3, r2
 801a362:	b29b      	uxth	r3, r3
 801a364:	3301      	adds	r3, #1
 801a366:	b299      	uxth	r1, r3
 801a368:	f107 020c 	add.w	r2, r7, #12
 801a36c:	2300      	movs	r3, #0
 801a36e:	9301      	str	r3, [sp, #4]
 801a370:	f24c 6318 	movw	r3, #50712	; 0xc618
 801a374:	9300      	str	r3, [sp, #0]
 801a376:	4b5c      	ldr	r3, [pc, #368]	; (801a4e8 <updateUint16Item+0xfd0>)
 801a378:	f7f5 fae2 	bl	800f940 <Paint_DrawString_EN>
 801a37c:	e147      	b.n	801a60e <updateUint16Item+0x10f6>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == DOWN)
 801a37e:	79fb      	ldrb	r3, [r7, #7]
 801a380:	2b01      	cmp	r3, #1
 801a382:	d155      	bne.n	801a430 <updateUint16Item+0xf18>
					{
						if (multiplierIndex >= 1)
 801a384:	4b59      	ldr	r3, [pc, #356]	; (801a4ec <updateUint16Item+0xfd4>)
 801a386:	781b      	ldrb	r3, [r3, #0]
 801a388:	2b00      	cmp	r3, #0
 801a38a:	d017      	beq.n	801a3bc <updateUint16Item+0xea4>
						{
							multiplierIndex = fmax(multiplierIndex - 1, 0);
 801a38c:	4b57      	ldr	r3, [pc, #348]	; (801a4ec <updateUint16Item+0xfd4>)
 801a38e:	781b      	ldrb	r3, [r3, #0]
 801a390:	3b01      	subs	r3, #1
 801a392:	ee07 3a90 	vmov	s15, r3
 801a396:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a39a:	ed9f 1b4f 	vldr	d1, [pc, #316]	; 801a4d8 <updateUint16Item+0xfc0>
 801a39e:	eeb0 0b47 	vmov.f64	d0, d7
 801a3a2:	f006 feaf 	bl	8021104 <fmax>
 801a3a6:	eeb0 7b40 	vmov.f64	d7, d0
 801a3aa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 801a3ae:	edc7 7a00 	vstr	s15, [r7]
 801a3b2:	683b      	ldr	r3, [r7, #0]
 801a3b4:	b2da      	uxtb	r2, r3
 801a3b6:	4b4d      	ldr	r3, [pc, #308]	; (801a4ec <updateUint16Item+0xfd4>)
 801a3b8:	701a      	strb	r2, [r3, #0]
 801a3ba:	e002      	b.n	801a3c2 <updateUint16Item+0xeaa>
						}
						else
						{
							multiplierIndex = 0;
 801a3bc:	4b4b      	ldr	r3, [pc, #300]	; (801a4ec <updateUint16Item+0xfd4>)
 801a3be:	2200      	movs	r2, #0
 801a3c0:	701a      	strb	r2, [r3, #0]
						}
						uint16Item.deltaMultiplier = uint16MultiplierArray[multiplierIndex];
 801a3c2:	4b4a      	ldr	r3, [pc, #296]	; (801a4ec <updateUint16Item+0xfd4>)
 801a3c4:	781b      	ldrb	r3, [r3, #0]
 801a3c6:	461a      	mov	r2, r3
 801a3c8:	4b49      	ldr	r3, [pc, #292]	; (801a4f0 <updateUint16Item+0xfd8>)
 801a3ca:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801a3ce:	4b45      	ldr	r3, [pc, #276]	; (801a4e4 <updateUint16Item+0xfcc>)
 801a3d0:	819a      	strh	r2, [r3, #12]
						sprintf(localString,"%04d",uint16Item.deltaMultiplier);
 801a3d2:	4b44      	ldr	r3, [pc, #272]	; (801a4e4 <updateUint16Item+0xfcc>)
 801a3d4:	899b      	ldrh	r3, [r3, #12]
 801a3d6:	461a      	mov	r2, r3
 801a3d8:	f107 030c 	add.w	r3, r7, #12
 801a3dc:	4945      	ldr	r1, [pc, #276]	; (801a4f4 <updateUint16Item+0xfdc>)
 801a3de:	4618      	mov	r0, r3
 801a3e0:	f003 fafc 	bl	801d9dc <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a3e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a3e8:	b29a      	uxth	r2, r3
 801a3ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a3ee:	085b      	lsrs	r3, r3, #1
 801a3f0:	b2db      	uxtb	r3, r3
 801a3f2:	b29b      	uxth	r3, r3
 801a3f4:	4413      	add	r3, r2
 801a3f6:	b29b      	uxth	r3, r3
 801a3f8:	3301      	adds	r3, #1
 801a3fa:	b298      	uxth	r0, r3
 801a3fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a400:	b29a      	uxth	r2, r3
 801a402:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a406:	b299      	uxth	r1, r3
 801a408:	69fb      	ldr	r3, [r7, #28]
 801a40a:	b29b      	uxth	r3, r3
 801a40c:	fb11 f303 	smulbb	r3, r1, r3
 801a410:	b29b      	uxth	r3, r3
 801a412:	4413      	add	r3, r2
 801a414:	b29b      	uxth	r3, r3
 801a416:	3301      	adds	r3, #1
 801a418:	b299      	uxth	r1, r3
 801a41a:	f107 020c 	add.w	r2, r7, #12
 801a41e:	2300      	movs	r3, #0
 801a420:	9301      	str	r3, [sp, #4]
 801a422:	f24c 6318 	movw	r3, #50712	; 0xc618
 801a426:	9300      	str	r3, [sp, #0]
 801a428:	4b2f      	ldr	r3, [pc, #188]	; (801a4e8 <updateUint16Item+0xfd0>)
 801a42a:	f7f5 fa89 	bl	800f940 <Paint_DrawString_EN>
 801a42e:	e0ee      	b.n	801a60e <updateUint16Item+0x10f6>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == UP)
 801a430:	79fb      	ldrb	r3, [r7, #7]
 801a432:	2b00      	cmp	r3, #0
 801a434:	f040 80eb 	bne.w	801a60e <updateUint16Item+0x10f6>
					{
						multiplierIndex = fmin(multiplierIndex + 1, 7);
 801a438:	4b2c      	ldr	r3, [pc, #176]	; (801a4ec <updateUint16Item+0xfd4>)
 801a43a:	781b      	ldrb	r3, [r3, #0]
 801a43c:	3301      	adds	r3, #1
 801a43e:	ee07 3a90 	vmov	s15, r3
 801a442:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a446:	eeb1 1b0c 	vmov.f64	d1, #28	; 0x40e00000  7.0
 801a44a:	eeb0 0b47 	vmov.f64	d0, d7
 801a44e:	f006 fe74 	bl	802113a <fmin>
 801a452:	eeb0 7b40 	vmov.f64	d7, d0
 801a456:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 801a45a:	edc7 7a00 	vstr	s15, [r7]
 801a45e:	683b      	ldr	r3, [r7, #0]
 801a460:	b2da      	uxtb	r2, r3
 801a462:	4b22      	ldr	r3, [pc, #136]	; (801a4ec <updateUint16Item+0xfd4>)
 801a464:	701a      	strb	r2, [r3, #0]
						uint16Item.deltaMultiplier = uint16MultiplierArray[multiplierIndex];
 801a466:	4b21      	ldr	r3, [pc, #132]	; (801a4ec <updateUint16Item+0xfd4>)
 801a468:	781b      	ldrb	r3, [r3, #0]
 801a46a:	461a      	mov	r2, r3
 801a46c:	4b20      	ldr	r3, [pc, #128]	; (801a4f0 <updateUint16Item+0xfd8>)
 801a46e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801a472:	4b1c      	ldr	r3, [pc, #112]	; (801a4e4 <updateUint16Item+0xfcc>)
 801a474:	819a      	strh	r2, [r3, #12]
						sprintf(localString,"%04d",uint16Item.deltaMultiplier);
 801a476:	4b1b      	ldr	r3, [pc, #108]	; (801a4e4 <updateUint16Item+0xfcc>)
 801a478:	899b      	ldrh	r3, [r3, #12]
 801a47a:	461a      	mov	r2, r3
 801a47c:	f107 030c 	add.w	r3, r7, #12
 801a480:	491c      	ldr	r1, [pc, #112]	; (801a4f4 <updateUint16Item+0xfdc>)
 801a482:	4618      	mov	r0, r3
 801a484:	f003 faaa 	bl	801d9dc <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a48c:	b29a      	uxth	r2, r3
 801a48e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a492:	085b      	lsrs	r3, r3, #1
 801a494:	b2db      	uxtb	r3, r3
 801a496:	b29b      	uxth	r3, r3
 801a498:	4413      	add	r3, r2
 801a49a:	b29b      	uxth	r3, r3
 801a49c:	3301      	adds	r3, #1
 801a49e:	b298      	uxth	r0, r3
 801a4a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a4a4:	b29a      	uxth	r2, r3
 801a4a6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a4aa:	b299      	uxth	r1, r3
 801a4ac:	69fb      	ldr	r3, [r7, #28]
 801a4ae:	b29b      	uxth	r3, r3
 801a4b0:	fb11 f303 	smulbb	r3, r1, r3
 801a4b4:	b29b      	uxth	r3, r3
 801a4b6:	4413      	add	r3, r2
 801a4b8:	b29b      	uxth	r3, r3
 801a4ba:	3301      	adds	r3, #1
 801a4bc:	b299      	uxth	r1, r3
 801a4be:	f107 020c 	add.w	r2, r7, #12
 801a4c2:	2300      	movs	r3, #0
 801a4c4:	9301      	str	r3, [sp, #4]
 801a4c6:	f24c 6318 	movw	r3, #50712	; 0xc618
 801a4ca:	9300      	str	r3, [sp, #0]
 801a4cc:	4b06      	ldr	r3, [pc, #24]	; (801a4e8 <updateUint16Item+0xfd0>)
 801a4ce:	f7f5 fa37 	bl	800f940 <Paint_DrawString_EN>
 801a4d2:	e09c      	b.n	801a60e <updateUint16Item+0x10f6>
 801a4d4:	f3af 8000 	nop.w
	...
 801a4e0:	2400afcc 	.word	0x2400afcc
 801a4e4:	2400c168 	.word	0x2400c168
 801a4e8:	24000030 	.word	0x24000030
 801a4ec:	2400a178 	.word	0x2400a178
 801a4f0:	2400a17c 	.word	0x2400a17c
 801a4f4:	08021a7c 	.word	0x08021a7c
					//									localString, &Font12, WHITE,  BLACK);
					//						}
				}
				else
				{
					Paint_ClearWindows(MenuRectangleStartX + 1,
 801a4f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a4fc:	b29b      	uxth	r3, r3
 801a4fe:	3301      	adds	r3, #1
 801a500:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a502:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a506:	b29a      	uxth	r2, r3
 801a508:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a50c:	b299      	uxth	r1, r3
 801a50e:	69fb      	ldr	r3, [r7, #28]
 801a510:	b29b      	uxth	r3, r3
 801a512:	fb11 f303 	smulbb	r3, r1, r3
 801a516:	b29b      	uxth	r3, r3
 801a518:	4413      	add	r3, r2
 801a51a:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 801a51c:	3301      	adds	r3, #1
 801a51e:	b29e      	uxth	r6, r3
							MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 801a520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a524:	b29c      	uxth	r4, r3
 801a526:	69fb      	ldr	r3, [r7, #28]
 801a528:	3301      	adds	r3, #1
 801a52a:	011b      	lsls	r3, r3, #4
 801a52c:	4a9c      	ldr	r2, [pc, #624]	; (801a7a0 <updateUint16Item+0x1288>)
 801a52e:	4413      	add	r3, r2
 801a530:	4618      	mov	r0, r3
 801a532:	f7e5 fedf 	bl	80002f4 <strlen>
 801a536:	4603      	mov	r3, r0
 801a538:	b29a      	uxth	r2, r3
 801a53a:	4b9a      	ldr	r3, [pc, #616]	; (801a7a4 <updateUint16Item+0x128c>)
 801a53c:	889b      	ldrh	r3, [r3, #4]
 801a53e:	fb12 f303 	smulbb	r3, r2, r3
 801a542:	b29b      	uxth	r3, r3
 801a544:	4423      	add	r3, r4
 801a546:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 801a548:	3301      	adds	r3, #1
 801a54a:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801a54c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a550:	b29a      	uxth	r2, r3
 801a552:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a556:	b299      	uxth	r1, r3
 801a558:	69fb      	ldr	r3, [r7, #28]
 801a55a:	b29b      	uxth	r3, r3
 801a55c:	fb11 f303 	smulbb	r3, r1, r3
 801a560:	b29b      	uxth	r3, r3
 801a562:	4413      	add	r3, r2
 801a564:	b29a      	uxth	r2, r3
 801a566:	4b8f      	ldr	r3, [pc, #572]	; (801a7a4 <updateUint16Item+0x128c>)
 801a568:	88db      	ldrh	r3, [r3, #6]
 801a56a:	4413      	add	r3, r2
 801a56c:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 801a56e:	3301      	adds	r3, #1
 801a570:	b29b      	uxth	r3, r3
 801a572:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a576:	9200      	str	r2, [sp, #0]
 801a578:	4602      	mov	r2, r0
 801a57a:	4631      	mov	r1, r6
 801a57c:	4628      	mov	r0, r5
 801a57e:	f7f4 fdc1 	bl	800f104 <Paint_ClearWindows>
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a582:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a586:	b29b      	uxth	r3, r3
 801a588:	3301      	adds	r3, #1
 801a58a:	b298      	uxth	r0, r3
 801a58c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a590:	b29a      	uxth	r2, r3
 801a592:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a596:	b299      	uxth	r1, r3
 801a598:	69fb      	ldr	r3, [r7, #28]
 801a59a:	b29b      	uxth	r3, r3
 801a59c:	fb11 f303 	smulbb	r3, r1, r3
 801a5a0:	b29b      	uxth	r3, r3
 801a5a2:	4413      	add	r3, r2
 801a5a4:	b29b      	uxth	r3, r3
 801a5a6:	3301      	adds	r3, #1
 801a5a8:	b299      	uxth	r1, r3
							uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 801a5aa:	69fb      	ldr	r3, [r7, #28]
 801a5ac:	3301      	adds	r3, #1
 801a5ae:	011b      	lsls	r3, r3, #4
 801a5b0:	4a7b      	ldr	r2, [pc, #492]	; (801a7a0 <updateUint16Item+0x1288>)
 801a5b2:	441a      	add	r2, r3
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a5b4:	2300      	movs	r3, #0
 801a5b6:	9301      	str	r3, [sp, #4]
 801a5b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a5bc:	9300      	str	r3, [sp, #0]
 801a5be:	4b79      	ldr	r3, [pc, #484]	; (801a7a4 <updateUint16Item+0x128c>)
 801a5c0:	f7f5 f9be 	bl	800f940 <Paint_DrawString_EN>
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a5c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a5c8:	b29a      	uxth	r2, r3
 801a5ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a5ce:	085b      	lsrs	r3, r3, #1
 801a5d0:	b2db      	uxtb	r3, r3
 801a5d2:	b29b      	uxth	r3, r3
 801a5d4:	4413      	add	r3, r2
 801a5d6:	b29b      	uxth	r3, r3
 801a5d8:	3301      	adds	r3, #1
 801a5da:	b298      	uxth	r0, r3
 801a5dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a5e0:	b29a      	uxth	r2, r3
 801a5e2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a5e6:	b299      	uxth	r1, r3
 801a5e8:	69fb      	ldr	r3, [r7, #28]
 801a5ea:	b29b      	uxth	r3, r3
 801a5ec:	fb11 f303 	smulbb	r3, r1, r3
 801a5f0:	b29b      	uxth	r3, r3
 801a5f2:	4413      	add	r3, r2
 801a5f4:	b29b      	uxth	r3, r3
 801a5f6:	3301      	adds	r3, #1
 801a5f8:	b299      	uxth	r1, r3
 801a5fa:	f107 020c 	add.w	r2, r7, #12
 801a5fe:	2300      	movs	r3, #0
 801a600:	9301      	str	r3, [sp, #4]
 801a602:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a606:	9300      	str	r3, [sp, #0]
 801a608:	4b66      	ldr	r3, [pc, #408]	; (801a7a4 <updateUint16Item+0x128c>)
 801a60a:	f7f5 f999 	bl	800f940 <Paint_DrawString_EN>
			}
		}
		//			Paint_DrawRectangle( HorizontalMenuRectangleStartX + HorizontalMenuRectangleWidth / 2, HorizontalMenuRectangleStartY + HorizontalMenuRectangleHeight * (i + 1),
		//					HorizontalMenuRectangleStartX + HorizontalMenuRectangleWidth, HorizontalMenuRectangleStartY + HorizontalMenuRectangleHeight * (i + 2),
		//					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
		if ( (i >= uint16Item.numberOfItemsInPage - 2) && (i < uint16Item.numberOfItemsInPage) )
 801a60e:	4b64      	ldr	r3, [pc, #400]	; (801a7a0 <updateUint16Item+0x1288>)
 801a610:	7bdb      	ldrb	r3, [r3, #15]
 801a612:	3b02      	subs	r3, #2
 801a614:	69fa      	ldr	r2, [r7, #28]
 801a616:	429a      	cmp	r2, r3
 801a618:	f2c0 8299 	blt.w	801ab4e <updateUint16Item+0x1636>
 801a61c:	4b60      	ldr	r3, [pc, #384]	; (801a7a0 <updateUint16Item+0x1288>)
 801a61e:	7bdb      	ldrb	r3, [r3, #15]
 801a620:	461a      	mov	r2, r3
 801a622:	69fb      	ldr	r3, [r7, #28]
 801a624:	4293      	cmp	r3, r2
 801a626:	f280 8292 	bge.w	801ab4e <updateUint16Item+0x1636>
		{
			if (howToDraw == FULL)
 801a62a:	79fb      	ldrb	r3, [r7, #7]
 801a62c:	2b02      	cmp	r3, #2
 801a62e:	f040 8084 	bne.w	801a73a <updateUint16Item+0x1222>
			{
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 801a632:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a636:	b298      	uxth	r0, r3
 801a638:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a63c:	b29a      	uxth	r2, r3
 801a63e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a642:	b299      	uxth	r1, r3
 801a644:	69fb      	ldr	r3, [r7, #28]
 801a646:	b29b      	uxth	r3, r3
 801a648:	fb11 f303 	smulbb	r3, r1, r3
 801a64c:	b29b      	uxth	r3, r3
 801a64e:	4413      	add	r3, r2
 801a650:	b29c      	uxth	r4, r3
 801a652:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a656:	b29a      	uxth	r2, r3
 801a658:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a65c:	b29b      	uxth	r3, r3
 801a65e:	4413      	add	r3, r2
 801a660:	b29d      	uxth	r5, r3
 801a662:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a666:	b29a      	uxth	r2, r3
 801a668:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a66c:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 801a66e:	69fb      	ldr	r3, [r7, #28]
 801a670:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 801a672:	b29b      	uxth	r3, r3
 801a674:	fb11 f303 	smulbb	r3, r1, r3
 801a678:	b29b      	uxth	r3, r3
 801a67a:	4413      	add	r3, r2
 801a67c:	b29b      	uxth	r3, r3
 801a67e:	2200      	movs	r2, #0
 801a680:	9202      	str	r2, [sp, #8]
 801a682:	2201      	movs	r2, #1
 801a684:	9201      	str	r2, [sp, #4]
 801a686:	2200      	movs	r2, #0
 801a688:	9200      	str	r2, [sp, #0]
 801a68a:	462a      	mov	r2, r5
 801a68c:	4621      	mov	r1, r4
 801a68e:	f7f4 feb3 	bl	800f3f8 <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
				if (currentCursorPosition.cursorPosition == i)
 801a692:	4b45      	ldr	r3, [pc, #276]	; (801a7a8 <updateUint16Item+0x1290>)
 801a694:	781b      	ldrb	r3, [r3, #0]
 801a696:	461a      	mov	r2, r3
 801a698:	69fb      	ldr	r3, [r7, #28]
 801a69a:	4293      	cmp	r3, r2
 801a69c:	d126      	bne.n	801a6ec <updateUint16Item+0x11d4>
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801a69e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a6a2:	b29c      	uxth	r4, r3
 801a6a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a6a8:	b29a      	uxth	r2, r3
 801a6aa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a6ae:	b299      	uxth	r1, r3
 801a6b0:	69fb      	ldr	r3, [r7, #28]
 801a6b2:	b29b      	uxth	r3, r3
 801a6b4:	fb11 f303 	smulbb	r3, r1, r3
 801a6b8:	b29b      	uxth	r3, r3
 801a6ba:	4413      	add	r3, r2
 801a6bc:	b29b      	uxth	r3, r3
 801a6be:	3301      	adds	r3, #1
 801a6c0:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i], BLACK, LGRAY, 16, Font12);
 801a6c2:	69fb      	ldr	r3, [r7, #28]
 801a6c4:	3301      	adds	r3, #1
 801a6c6:	011b      	lsls	r3, r3, #4
 801a6c8:	4a35      	ldr	r2, [pc, #212]	; (801a7a0 <updateUint16Item+0x1288>)
 801a6ca:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801a6cc:	4935      	ldr	r1, [pc, #212]	; (801a7a4 <updateUint16Item+0x128c>)
 801a6ce:	ab02      	add	r3, sp, #8
 801a6d0:	c903      	ldmia	r1, {r0, r1}
 801a6d2:	e883 0003 	stmia.w	r3, {r0, r1}
 801a6d6:	2310      	movs	r3, #16
 801a6d8:	9301      	str	r3, [sp, #4]
 801a6da:	f24c 6318 	movw	r3, #50712	; 0xc618
 801a6de:	9300      	str	r3, [sp, #0]
 801a6e0:	2300      	movs	r3, #0
 801a6e2:	4629      	mov	r1, r5
 801a6e4:	4620      	mov	r0, r4
 801a6e6:	f7fd fa77 	bl	8017bd8 <centeredString>
 801a6ea:	e230      	b.n	801ab4e <updateUint16Item+0x1636>
				}
				else
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801a6ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a6f0:	b29c      	uxth	r4, r3
 801a6f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a6f6:	b29a      	uxth	r2, r3
 801a6f8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a6fc:	b299      	uxth	r1, r3
 801a6fe:	69fb      	ldr	r3, [r7, #28]
 801a700:	b29b      	uxth	r3, r3
 801a702:	fb11 f303 	smulbb	r3, r1, r3
 801a706:	b29b      	uxth	r3, r3
 801a708:	4413      	add	r3, r2
 801a70a:	b29b      	uxth	r3, r3
 801a70c:	3301      	adds	r3, #1
 801a70e:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i], BLACK, WHITE, 16, Font12);
 801a710:	69fb      	ldr	r3, [r7, #28]
 801a712:	3301      	adds	r3, #1
 801a714:	011b      	lsls	r3, r3, #4
 801a716:	4a22      	ldr	r2, [pc, #136]	; (801a7a0 <updateUint16Item+0x1288>)
 801a718:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801a71a:	4922      	ldr	r1, [pc, #136]	; (801a7a4 <updateUint16Item+0x128c>)
 801a71c:	ab02      	add	r3, sp, #8
 801a71e:	c903      	ldmia	r1, {r0, r1}
 801a720:	e883 0003 	stmia.w	r3, {r0, r1}
 801a724:	2310      	movs	r3, #16
 801a726:	9301      	str	r3, [sp, #4]
 801a728:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a72c:	9300      	str	r3, [sp, #0]
 801a72e:	2300      	movs	r3, #0
 801a730:	4629      	mov	r1, r5
 801a732:	4620      	mov	r0, r4
 801a734:	f7fd fa50 	bl	8017bd8 <centeredString>
 801a738:	e209      	b.n	801ab4e <updateUint16Item+0x1636>
				}
			}
			else if (howToDraw == DOWN)
 801a73a:	79fb      	ldrb	r3, [r7, #7]
 801a73c:	2b01      	cmp	r3, #1
 801a73e:	f040 80d1 	bne.w	801a8e4 <updateUint16Item+0x13cc>
			{
				if ( (currentCursorPosition.cursorPosition == 4) && (i == 4) )
 801a742:	4b19      	ldr	r3, [pc, #100]	; (801a7a8 <updateUint16Item+0x1290>)
 801a744:	781b      	ldrb	r3, [r3, #0]
 801a746:	2b04      	cmp	r3, #4
 801a748:	d130      	bne.n	801a7ac <updateUint16Item+0x1294>
 801a74a:	69fb      	ldr	r3, [r7, #28]
 801a74c:	2b04      	cmp	r3, #4
 801a74e:	d12d      	bne.n	801a7ac <updateUint16Item+0x1294>
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801a750:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a754:	b29c      	uxth	r4, r3
 801a756:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a75a:	b29a      	uxth	r2, r3
 801a75c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a760:	b299      	uxth	r1, r3
 801a762:	69fb      	ldr	r3, [r7, #28]
 801a764:	b29b      	uxth	r3, r3
 801a766:	fb11 f303 	smulbb	r3, r1, r3
 801a76a:	b29b      	uxth	r3, r3
 801a76c:	4413      	add	r3, r2
 801a76e:	b29b      	uxth	r3, r3
 801a770:	3301      	adds	r3, #1
 801a772:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i], BLACK, LGRAY, 16, Font12);
 801a774:	69fb      	ldr	r3, [r7, #28]
 801a776:	3301      	adds	r3, #1
 801a778:	011b      	lsls	r3, r3, #4
 801a77a:	4a09      	ldr	r2, [pc, #36]	; (801a7a0 <updateUint16Item+0x1288>)
 801a77c:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801a77e:	4909      	ldr	r1, [pc, #36]	; (801a7a4 <updateUint16Item+0x128c>)
 801a780:	ab02      	add	r3, sp, #8
 801a782:	c903      	ldmia	r1, {r0, r1}
 801a784:	e883 0003 	stmia.w	r3, {r0, r1}
 801a788:	2310      	movs	r3, #16
 801a78a:	9301      	str	r3, [sp, #4]
 801a78c:	f24c 6318 	movw	r3, #50712	; 0xc618
 801a790:	9300      	str	r3, [sp, #0]
 801a792:	2300      	movs	r3, #0
 801a794:	4629      	mov	r1, r5
 801a796:	4620      	mov	r0, r4
 801a798:	f7fd fa1e 	bl	8017bd8 <centeredString>
 801a79c:	e1d7      	b.n	801ab4e <updateUint16Item+0x1636>
 801a79e:	bf00      	nop
 801a7a0:	2400c168 	.word	0x2400c168
 801a7a4:	24000030 	.word	0x24000030
 801a7a8:	2400afcc 	.word	0x2400afcc
				}
				else if ( (currentCursorPosition.cursorPosition == 5) && (i == 5) )
 801a7ac:	4b90      	ldr	r3, [pc, #576]	; (801a9f0 <updateUint16Item+0x14d8>)
 801a7ae:	781b      	ldrb	r3, [r3, #0]
 801a7b0:	2b05      	cmp	r3, #5
 801a7b2:	f040 81cc 	bne.w	801ab4e <updateUint16Item+0x1636>
 801a7b6:	69fb      	ldr	r3, [r7, #28]
 801a7b8:	2b05      	cmp	r3, #5
 801a7ba:	f040 81c8 	bne.w	801ab4e <updateUint16Item+0x1636>
				{
					Paint_ClearWindows(DisplayCenterWidth,
 801a7be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a7c2:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 801a7c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a7c8:	b29a      	uxth	r2, r3
 801a7ca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a7ce:	b299      	uxth	r1, r3
 801a7d0:	69fb      	ldr	r3, [r7, #28]
 801a7d2:	3b01      	subs	r3, #1
 801a7d4:	b29b      	uxth	r3, r3
 801a7d6:	fb11 f303 	smulbb	r3, r1, r3
 801a7da:	b29b      	uxth	r3, r3
 801a7dc:	4413      	add	r3, r2
 801a7de:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth,
 801a7e0:	3301      	adds	r3, #1
 801a7e2:	b29e      	uxth	r6, r3
 801a7e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a7e8:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(uint16Item.itemsArray[i - 1]) * Font12.Width,
 801a7ea:	69fb      	ldr	r3, [r7, #28]
 801a7ec:	3b01      	subs	r3, #1
 801a7ee:	3301      	adds	r3, #1
 801a7f0:	011b      	lsls	r3, r3, #4
 801a7f2:	4a80      	ldr	r2, [pc, #512]	; (801a9f4 <updateUint16Item+0x14dc>)
 801a7f4:	4413      	add	r3, r2
 801a7f6:	4618      	mov	r0, r3
 801a7f8:	f7e5 fd7c 	bl	80002f4 <strlen>
 801a7fc:	4603      	mov	r3, r0
					Paint_ClearWindows(DisplayCenterWidth,
 801a7fe:	b29a      	uxth	r2, r3
							DisplayCenterWidth + strlen(uint16Item.itemsArray[i - 1]) * Font12.Width,
 801a800:	4b7d      	ldr	r3, [pc, #500]	; (801a9f8 <updateUint16Item+0x14e0>)
 801a802:	889b      	ldrh	r3, [r3, #4]
					Paint_ClearWindows(DisplayCenterWidth,
 801a804:	fb12 f303 	smulbb	r3, r2, r3
 801a808:	b29b      	uxth	r3, r3
 801a80a:	4423      	add	r3, r4
 801a80c:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1 + Font12.Height, WHITE);
 801a80e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a812:	b29a      	uxth	r2, r3
 801a814:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a818:	b299      	uxth	r1, r3
 801a81a:	69fb      	ldr	r3, [r7, #28]
 801a81c:	3b01      	subs	r3, #1
 801a81e:	b29b      	uxth	r3, r3
 801a820:	fb11 f303 	smulbb	r3, r1, r3
 801a824:	b29b      	uxth	r3, r3
 801a826:	4413      	add	r3, r2
 801a828:	b29a      	uxth	r2, r3
 801a82a:	4b73      	ldr	r3, [pc, #460]	; (801a9f8 <updateUint16Item+0x14e0>)
 801a82c:	88db      	ldrh	r3, [r3, #6]
 801a82e:	4413      	add	r3, r2
 801a830:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth,
 801a832:	3301      	adds	r3, #1
 801a834:	b29b      	uxth	r3, r3
 801a836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a83a:	9200      	str	r2, [sp, #0]
 801a83c:	4602      	mov	r2, r0
 801a83e:	4631      	mov	r1, r6
 801a840:	4628      	mov	r0, r5
 801a842:	f7f4 fc5f 	bl	800f104 <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 801a846:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a84a:	b29c      	uxth	r4, r3
 801a84c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a850:	b29a      	uxth	r2, r3
 801a852:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a856:	b299      	uxth	r1, r3
 801a858:	69fb      	ldr	r3, [r7, #28]
 801a85a:	3b01      	subs	r3, #1
 801a85c:	b29b      	uxth	r3, r3
 801a85e:	fb11 f303 	smulbb	r3, r1, r3
 801a862:	b29b      	uxth	r3, r3
 801a864:	4413      	add	r3, r2
 801a866:	b29b      	uxth	r3, r3
 801a868:	3301      	adds	r3, #1
 801a86a:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[(i - 1)], BLACK, WHITE, 16, Font12);
 801a86c:	69fb      	ldr	r3, [r7, #28]
 801a86e:	3b01      	subs	r3, #1
 801a870:	3301      	adds	r3, #1
 801a872:	011b      	lsls	r3, r3, #4
 801a874:	4a5f      	ldr	r2, [pc, #380]	; (801a9f4 <updateUint16Item+0x14dc>)
 801a876:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 801a878:	495f      	ldr	r1, [pc, #380]	; (801a9f8 <updateUint16Item+0x14e0>)
 801a87a:	ab02      	add	r3, sp, #8
 801a87c:	c903      	ldmia	r1, {r0, r1}
 801a87e:	e883 0003 	stmia.w	r3, {r0, r1}
 801a882:	2310      	movs	r3, #16
 801a884:	9301      	str	r3, [sp, #4]
 801a886:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a88a:	9300      	str	r3, [sp, #0]
 801a88c:	2300      	movs	r3, #0
 801a88e:	4629      	mov	r1, r5
 801a890:	4620      	mov	r0, r4
 801a892:	f7fd f9a1 	bl	8017bd8 <centeredString>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801a896:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a89a:	b29c      	uxth	r4, r3
 801a89c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a8a0:	b29a      	uxth	r2, r3
 801a8a2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a8a6:	b299      	uxth	r1, r3
 801a8a8:	69fb      	ldr	r3, [r7, #28]
 801a8aa:	b29b      	uxth	r3, r3
 801a8ac:	fb11 f303 	smulbb	r3, r1, r3
 801a8b0:	b29b      	uxth	r3, r3
 801a8b2:	4413      	add	r3, r2
 801a8b4:	b29b      	uxth	r3, r3
 801a8b6:	3301      	adds	r3, #1
 801a8b8:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i], BLACK, LGRAY, 16, Font12);
 801a8ba:	69fb      	ldr	r3, [r7, #28]
 801a8bc:	3301      	adds	r3, #1
 801a8be:	011b      	lsls	r3, r3, #4
 801a8c0:	4a4c      	ldr	r2, [pc, #304]	; (801a9f4 <updateUint16Item+0x14dc>)
 801a8c2:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801a8c4:	494c      	ldr	r1, [pc, #304]	; (801a9f8 <updateUint16Item+0x14e0>)
 801a8c6:	ab02      	add	r3, sp, #8
 801a8c8:	c903      	ldmia	r1, {r0, r1}
 801a8ca:	e883 0003 	stmia.w	r3, {r0, r1}
 801a8ce:	2310      	movs	r3, #16
 801a8d0:	9301      	str	r3, [sp, #4]
 801a8d2:	f24c 6318 	movw	r3, #50712	; 0xc618
 801a8d6:	9300      	str	r3, [sp, #0]
 801a8d8:	2300      	movs	r3, #0
 801a8da:	4629      	mov	r1, r5
 801a8dc:	4620      	mov	r0, r4
 801a8de:	f7fd f97b 	bl	8017bd8 <centeredString>
 801a8e2:	e134      	b.n	801ab4e <updateUint16Item+0x1636>
				}
			}
			else if (howToDraw == UP)
 801a8e4:	79fb      	ldrb	r3, [r7, #7]
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	f040 8131 	bne.w	801ab4e <updateUint16Item+0x1636>
			{
				if ( (currentCursorPosition.cursorPosition == 3) && (i == 4) )
 801a8ec:	4b40      	ldr	r3, [pc, #256]	; (801a9f0 <updateUint16Item+0x14d8>)
 801a8ee:	781b      	ldrb	r3, [r3, #0]
 801a8f0:	2b03      	cmp	r3, #3
 801a8f2:	f040 8083 	bne.w	801a9fc <updateUint16Item+0x14e4>
 801a8f6:	69fb      	ldr	r3, [r7, #28]
 801a8f8:	2b04      	cmp	r3, #4
 801a8fa:	d17f      	bne.n	801a9fc <updateUint16Item+0x14e4>
				{
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 801a8fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a900:	b29c      	uxth	r4, r3
 801a902:	69fb      	ldr	r3, [r7, #28]
 801a904:	3301      	adds	r3, #1
 801a906:	011b      	lsls	r3, r3, #4
 801a908:	4a3a      	ldr	r2, [pc, #232]	; (801a9f4 <updateUint16Item+0x14dc>)
 801a90a:	4413      	add	r3, r2
 801a90c:	4618      	mov	r0, r3
 801a90e:	f7e5 fcf1 	bl	80002f4 <strlen>
 801a912:	4603      	mov	r3, r0
 801a914:	4a38      	ldr	r2, [pc, #224]	; (801a9f8 <updateUint16Item+0x14e0>)
 801a916:	8892      	ldrh	r2, [r2, #4]
 801a918:	fb02 f303 	mul.w	r3, r2, r3
 801a91c:	085b      	lsrs	r3, r3, #1
 801a91e:	b29b      	uxth	r3, r3
 801a920:	1ae3      	subs	r3, r4, r3
 801a922:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a924:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a928:	b29a      	uxth	r2, r3
 801a92a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a92e:	b299      	uxth	r1, r3
 801a930:	69fb      	ldr	r3, [r7, #28]
 801a932:	b29b      	uxth	r3, r3
 801a934:	fb11 f303 	smulbb	r3, r1, r3
 801a938:	b29b      	uxth	r3, r3
 801a93a:	4413      	add	r3, r2
 801a93c:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 801a93e:	3301      	adds	r3, #1
 801a940:	b29e      	uxth	r6, r3
 801a942:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a946:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(uint16Item.itemsArray[i]) * Font12.Width /2,
 801a948:	69fb      	ldr	r3, [r7, #28]
 801a94a:	3301      	adds	r3, #1
 801a94c:	011b      	lsls	r3, r3, #4
 801a94e:	4a29      	ldr	r2, [pc, #164]	; (801a9f4 <updateUint16Item+0x14dc>)
 801a950:	4413      	add	r3, r2
 801a952:	4618      	mov	r0, r3
 801a954:	f7e5 fcce 	bl	80002f4 <strlen>
 801a958:	4603      	mov	r3, r0
 801a95a:	4a27      	ldr	r2, [pc, #156]	; (801a9f8 <updateUint16Item+0x14e0>)
 801a95c:	8892      	ldrh	r2, [r2, #4]
 801a95e:	fb02 f303 	mul.w	r3, r2, r3
 801a962:	085b      	lsrs	r3, r3, #1
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 801a964:	b29b      	uxth	r3, r3
 801a966:	4423      	add	r3, r4
 801a968:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801a96a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a96e:	b29a      	uxth	r2, r3
 801a970:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a974:	b299      	uxth	r1, r3
 801a976:	69fb      	ldr	r3, [r7, #28]
 801a978:	b29b      	uxth	r3, r3
 801a97a:	fb11 f303 	smulbb	r3, r1, r3
 801a97e:	b29b      	uxth	r3, r3
 801a980:	4413      	add	r3, r2
 801a982:	b29a      	uxth	r2, r3
 801a984:	4b1c      	ldr	r3, [pc, #112]	; (801a9f8 <updateUint16Item+0x14e0>)
 801a986:	88db      	ldrh	r3, [r3, #6]
 801a988:	4413      	add	r3, r2
 801a98a:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 801a98c:	3301      	adds	r3, #1
 801a98e:	b29b      	uxth	r3, r3
 801a990:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a994:	9200      	str	r2, [sp, #0]
 801a996:	4602      	mov	r2, r0
 801a998:	4631      	mov	r1, r6
 801a99a:	4628      	mov	r0, r5
 801a99c:	f7f4 fbb2 	bl	800f104 <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a9a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a9a4:	b29c      	uxth	r4, r3
 801a9a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a9aa:	b29a      	uxth	r2, r3
 801a9ac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a9b0:	b299      	uxth	r1, r3
 801a9b2:	69fb      	ldr	r3, [r7, #28]
 801a9b4:	b29b      	uxth	r3, r3
 801a9b6:	fb11 f303 	smulbb	r3, r1, r3
 801a9ba:	b29b      	uxth	r3, r3
 801a9bc:	4413      	add	r3, r2
 801a9be:	b29b      	uxth	r3, r3
 801a9c0:	3301      	adds	r3, #1
 801a9c2:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[(i)], BLACK, WHITE, 16, Font12);
 801a9c4:	69fb      	ldr	r3, [r7, #28]
 801a9c6:	3301      	adds	r3, #1
 801a9c8:	011b      	lsls	r3, r3, #4
 801a9ca:	4a0a      	ldr	r2, [pc, #40]	; (801a9f4 <updateUint16Item+0x14dc>)
 801a9cc:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a9ce:	490a      	ldr	r1, [pc, #40]	; (801a9f8 <updateUint16Item+0x14e0>)
 801a9d0:	ab02      	add	r3, sp, #8
 801a9d2:	c903      	ldmia	r1, {r0, r1}
 801a9d4:	e883 0003 	stmia.w	r3, {r0, r1}
 801a9d8:	2310      	movs	r3, #16
 801a9da:	9301      	str	r3, [sp, #4]
 801a9dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a9e0:	9300      	str	r3, [sp, #0]
 801a9e2:	2300      	movs	r3, #0
 801a9e4:	4629      	mov	r1, r5
 801a9e6:	4620      	mov	r0, r4
 801a9e8:	f7fd f8f6 	bl	8017bd8 <centeredString>
 801a9ec:	e0af      	b.n	801ab4e <updateUint16Item+0x1636>
 801a9ee:	bf00      	nop
 801a9f0:	2400afcc 	.word	0x2400afcc
 801a9f4:	2400c168 	.word	0x2400c168
 801a9f8:	24000030 	.word	0x24000030
					//						centeredString(HorizontalDisplayCenterWidth, HorizontalMenuRectangleStartY + HorizontalMenuRectangleHeight * i + 1,
					//								uint16Item.itemsArray[i], BLACK, LGRAY, 16);
				}
				else if ( (currentCursorPosition.cursorPosition == 4) && (i == 5) )
 801a9fc:	4b5b      	ldr	r3, [pc, #364]	; (801ab6c <updateUint16Item+0x1654>)
 801a9fe:	781b      	ldrb	r3, [r3, #0]
 801aa00:	2b04      	cmp	r3, #4
 801aa02:	f040 80a4 	bne.w	801ab4e <updateUint16Item+0x1636>
 801aa06:	69fb      	ldr	r3, [r7, #28]
 801aa08:	2b05      	cmp	r3, #5
 801aa0a:	f040 80a0 	bne.w	801ab4e <updateUint16Item+0x1636>
				{
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 801aa0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801aa12:	b29c      	uxth	r4, r3
 801aa14:	69fb      	ldr	r3, [r7, #28]
 801aa16:	3301      	adds	r3, #1
 801aa18:	011b      	lsls	r3, r3, #4
 801aa1a:	4a55      	ldr	r2, [pc, #340]	; (801ab70 <updateUint16Item+0x1658>)
 801aa1c:	4413      	add	r3, r2
 801aa1e:	4618      	mov	r0, r3
 801aa20:	f7e5 fc68 	bl	80002f4 <strlen>
 801aa24:	4603      	mov	r3, r0
 801aa26:	4a53      	ldr	r2, [pc, #332]	; (801ab74 <updateUint16Item+0x165c>)
 801aa28:	8892      	ldrh	r2, [r2, #4]
 801aa2a:	fb02 f303 	mul.w	r3, r2, r3
 801aa2e:	085b      	lsrs	r3, r3, #1
 801aa30:	b29b      	uxth	r3, r3
 801aa32:	1ae3      	subs	r3, r4, r3
 801aa34:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801aa36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801aa3a:	b29a      	uxth	r2, r3
 801aa3c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801aa40:	b299      	uxth	r1, r3
 801aa42:	69fb      	ldr	r3, [r7, #28]
 801aa44:	b29b      	uxth	r3, r3
 801aa46:	fb11 f303 	smulbb	r3, r1, r3
 801aa4a:	b29b      	uxth	r3, r3
 801aa4c:	4413      	add	r3, r2
 801aa4e:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 801aa50:	3301      	adds	r3, #1
 801aa52:	b29e      	uxth	r6, r3
 801aa54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801aa58:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(uint16Item.itemsArray[i]) * Font12.Width /2,
 801aa5a:	69fb      	ldr	r3, [r7, #28]
 801aa5c:	3301      	adds	r3, #1
 801aa5e:	011b      	lsls	r3, r3, #4
 801aa60:	4a43      	ldr	r2, [pc, #268]	; (801ab70 <updateUint16Item+0x1658>)
 801aa62:	4413      	add	r3, r2
 801aa64:	4618      	mov	r0, r3
 801aa66:	f7e5 fc45 	bl	80002f4 <strlen>
 801aa6a:	4603      	mov	r3, r0
 801aa6c:	4a41      	ldr	r2, [pc, #260]	; (801ab74 <updateUint16Item+0x165c>)
 801aa6e:	8892      	ldrh	r2, [r2, #4]
 801aa70:	fb02 f303 	mul.w	r3, r2, r3
 801aa74:	085b      	lsrs	r3, r3, #1
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 801aa76:	b29b      	uxth	r3, r3
 801aa78:	4423      	add	r3, r4
 801aa7a:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801aa7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801aa80:	b29a      	uxth	r2, r3
 801aa82:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801aa86:	b299      	uxth	r1, r3
 801aa88:	69fb      	ldr	r3, [r7, #28]
 801aa8a:	b29b      	uxth	r3, r3
 801aa8c:	fb11 f303 	smulbb	r3, r1, r3
 801aa90:	b29b      	uxth	r3, r3
 801aa92:	4413      	add	r3, r2
 801aa94:	b29a      	uxth	r2, r3
 801aa96:	4b37      	ldr	r3, [pc, #220]	; (801ab74 <updateUint16Item+0x165c>)
 801aa98:	88db      	ldrh	r3, [r3, #6]
 801aa9a:	4413      	add	r3, r2
 801aa9c:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 801aa9e:	3301      	adds	r3, #1
 801aaa0:	b29b      	uxth	r3, r3
 801aaa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801aaa6:	9200      	str	r2, [sp, #0]
 801aaa8:	4602      	mov	r2, r0
 801aaaa:	4631      	mov	r1, r6
 801aaac:	4628      	mov	r0, r5
 801aaae:	f7f4 fb29 	bl	800f104 <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801aab2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801aab6:	b29c      	uxth	r4, r3
 801aab8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801aabc:	b29a      	uxth	r2, r3
 801aabe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801aac2:	b299      	uxth	r1, r3
 801aac4:	69fb      	ldr	r3, [r7, #28]
 801aac6:	b29b      	uxth	r3, r3
 801aac8:	fb11 f303 	smulbb	r3, r1, r3
 801aacc:	b29b      	uxth	r3, r3
 801aace:	4413      	add	r3, r2
 801aad0:	b29b      	uxth	r3, r3
 801aad2:	3301      	adds	r3, #1
 801aad4:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[(i)], BLACK, WHITE, 16, Font12);
 801aad6:	69fb      	ldr	r3, [r7, #28]
 801aad8:	3301      	adds	r3, #1
 801aada:	011b      	lsls	r3, r3, #4
 801aadc:	4a24      	ldr	r2, [pc, #144]	; (801ab70 <updateUint16Item+0x1658>)
 801aade:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801aae0:	4924      	ldr	r1, [pc, #144]	; (801ab74 <updateUint16Item+0x165c>)
 801aae2:	ab02      	add	r3, sp, #8
 801aae4:	c903      	ldmia	r1, {r0, r1}
 801aae6:	e883 0003 	stmia.w	r3, {r0, r1}
 801aaea:	2310      	movs	r3, #16
 801aaec:	9301      	str	r3, [sp, #4]
 801aaee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aaf2:	9300      	str	r3, [sp, #0]
 801aaf4:	2300      	movs	r3, #0
 801aaf6:	4629      	mov	r1, r5
 801aaf8:	4620      	mov	r0, r4
 801aafa:	f7fd f86d 	bl	8017bd8 <centeredString>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 801aafe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ab02:	b29c      	uxth	r4, r3
 801ab04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801ab08:	b29a      	uxth	r2, r3
 801ab0a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801ab0e:	b299      	uxth	r1, r3
 801ab10:	69fb      	ldr	r3, [r7, #28]
 801ab12:	3b01      	subs	r3, #1
 801ab14:	b29b      	uxth	r3, r3
 801ab16:	fb11 f303 	smulbb	r3, r1, r3
 801ab1a:	b29b      	uxth	r3, r3
 801ab1c:	4413      	add	r3, r2
 801ab1e:	b29b      	uxth	r3, r3
 801ab20:	3301      	adds	r3, #1
 801ab22:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i - 1], BLACK, LGRAY, 16, Font12);
 801ab24:	69fb      	ldr	r3, [r7, #28]
 801ab26:	3b01      	subs	r3, #1
 801ab28:	3301      	adds	r3, #1
 801ab2a:	011b      	lsls	r3, r3, #4
 801ab2c:	4a10      	ldr	r2, [pc, #64]	; (801ab70 <updateUint16Item+0x1658>)
 801ab2e:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 801ab30:	4910      	ldr	r1, [pc, #64]	; (801ab74 <updateUint16Item+0x165c>)
 801ab32:	ab02      	add	r3, sp, #8
 801ab34:	c903      	ldmia	r1, {r0, r1}
 801ab36:	e883 0003 	stmia.w	r3, {r0, r1}
 801ab3a:	2310      	movs	r3, #16
 801ab3c:	9301      	str	r3, [sp, #4]
 801ab3e:	f24c 6318 	movw	r3, #50712	; 0xc618
 801ab42:	9300      	str	r3, [sp, #0]
 801ab44:	2300      	movs	r3, #0
 801ab46:	4629      	mov	r1, r5
 801ab48:	4620      	mov	r0, r4
 801ab4a:	f7fd f845 	bl	8017bd8 <centeredString>
	for (int i = 0; i < uint16Item.numberOfItemsInPage ; i++)
 801ab4e:	69fb      	ldr	r3, [r7, #28]
 801ab50:	3301      	adds	r3, #1
 801ab52:	61fb      	str	r3, [r7, #28]
 801ab54:	4b06      	ldr	r3, [pc, #24]	; (801ab70 <updateUint16Item+0x1658>)
 801ab56:	7bdb      	ldrb	r3, [r3, #15]
 801ab58:	461a      	mov	r2, r3
 801ab5a:	69fb      	ldr	r3, [r7, #28]
 801ab5c:	4293      	cmp	r3, r2
 801ab5e:	f6fe ad09 	blt.w	8019574 <updateUint16Item+0x5c>
				}
			}
		}
	}
}
 801ab62:	bf00      	nop
 801ab64:	bf00      	nop
 801ab66:	372c      	adds	r7, #44	; 0x2c
 801ab68:	46bd      	mov	sp, r7
 801ab6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab6c:	2400afcc 	.word	0x2400afcc
 801ab70:	2400c168 	.word	0x2400c168
 801ab74:	24000030 	.word	0x24000030

0801ab78 <updateStringItem>:
		}
	}
}

void updateStringItem(MENUDRAWType howToDraw)
{
 801ab78:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ab7a:	b08d      	sub	sp, #52	; 0x34
 801ab7c:	af04      	add	r7, sp, #16
 801ab7e:	4603      	mov	r3, r0
 801ab80:	71fb      	strb	r3, [r7, #7]
	uint8_t MenuRectangleStartX = 0;
 801ab82:	2300      	movs	r3, #0
 801ab84:	77fb      	strb	r3, [r7, #31]
	uint8_t MenuRectangleStartY = 0;
 801ab86:	2300      	movs	r3, #0
 801ab88:	77bb      	strb	r3, [r7, #30]
	uint8_t MenuRectangleHeight = 0;
 801ab8a:	2300      	movs	r3, #0
 801ab8c:	777b      	strb	r3, [r7, #29]
	uint8_t MenuRectangleWidth = 0;
 801ab8e:	2300      	movs	r3, #0
 801ab90:	773b      	strb	r3, [r7, #28]
	uint8_t DisplayCenterWidth = 0;
 801ab92:	2300      	movs	r3, #0
 801ab94:	76fb      	strb	r3, [r7, #27]

	if (isPortrait)
 801ab96:	4b09      	ldr	r3, [pc, #36]	; (801abbc <updateStringItem+0x44>)
 801ab98:	781b      	ldrb	r3, [r3, #0]
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	d009      	beq.n	801abb2 <updateStringItem+0x3a>
	{
		MenuRectangleStartX = VerticalMenuRectangleStartX;
 801ab9e:	2302      	movs	r3, #2
 801aba0:	77fb      	strb	r3, [r7, #31]
		MenuRectangleStartY = VerticalMenuRectangleStartY;
 801aba2:	230c      	movs	r3, #12
 801aba4:	77bb      	strb	r3, [r7, #30]
		MenuRectangleHeight = VerticalMenuRectangleHeight;
 801aba6:	230e      	movs	r3, #14
 801aba8:	777b      	strb	r3, [r7, #29]
		MenuRectangleWidth = VerticalMenuRectangleWidth;
 801abaa:	237c      	movs	r3, #124	; 0x7c
 801abac:	773b      	strb	r3, [r7, #28]
		DisplayCenterWidth = VerticalDisplayCenterWidth;
 801abae:	2340      	movs	r3, #64	; 0x40
 801abb0:	76fb      	strb	r3, [r7, #27]
//		MenuRectangleHeight = HorizontalMenuRectangleHeight;
//		MenuRectangleWidth = HorizontalMenuRectangleWidth;
//		DisplayCenterWidth = HorizontalDisplayCenterWidth;
	}

	for (int i = 0; i < stringItem.numberOfItemsInPage ; i++)
 801abb2:	2300      	movs	r3, #0
 801abb4:	617b      	str	r3, [r7, #20]
 801abb6:	f001 ba23 	b.w	801c000 <updateStringItem+0x1488>
 801abba:	bf00      	nop
 801abbc:	2400008c 	.word	0x2400008c
	{
		if  ( (i < 2) && (howToDraw == FULL) )
 801abc0:	697b      	ldr	r3, [r7, #20]
 801abc2:	2b01      	cmp	r3, #1
 801abc4:	dc50      	bgt.n	801ac68 <updateStringItem+0xf0>
 801abc6:	79fb      	ldrb	r3, [r7, #7]
 801abc8:	2b02      	cmp	r3, #2
 801abca:	d14d      	bne.n	801ac68 <updateStringItem+0xf0>
		{
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 801abcc:	7ffb      	ldrb	r3, [r7, #31]
 801abce:	b298      	uxth	r0, r3
 801abd0:	7fbb      	ldrb	r3, [r7, #30]
 801abd2:	b29a      	uxth	r2, r3
 801abd4:	7f7b      	ldrb	r3, [r7, #29]
 801abd6:	b299      	uxth	r1, r3
 801abd8:	697b      	ldr	r3, [r7, #20]
 801abda:	b29b      	uxth	r3, r3
 801abdc:	fb11 f303 	smulbb	r3, r1, r3
 801abe0:	b29b      	uxth	r3, r3
 801abe2:	4413      	add	r3, r2
 801abe4:	b29c      	uxth	r4, r3
 801abe6:	7ffb      	ldrb	r3, [r7, #31]
 801abe8:	b29a      	uxth	r2, r3
 801abea:	7f3b      	ldrb	r3, [r7, #28]
 801abec:	b29b      	uxth	r3, r3
 801abee:	4413      	add	r3, r2
 801abf0:	b29d      	uxth	r5, r3
 801abf2:	7fbb      	ldrb	r3, [r7, #30]
 801abf4:	b29a      	uxth	r2, r3
 801abf6:	7f7b      	ldrb	r3, [r7, #29]
 801abf8:	b299      	uxth	r1, r3
					MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 801abfa:	697b      	ldr	r3, [r7, #20]
 801abfc:	3301      	adds	r3, #1
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 801abfe:	b29b      	uxth	r3, r3
 801ac00:	fb11 f303 	smulbb	r3, r1, r3
 801ac04:	b29b      	uxth	r3, r3
 801ac06:	4413      	add	r3, r2
 801ac08:	b29b      	uxth	r3, r3
 801ac0a:	2200      	movs	r2, #0
 801ac0c:	9202      	str	r2, [sp, #8]
 801ac0e:	2201      	movs	r2, #1
 801ac10:	9201      	str	r2, [sp, #4]
 801ac12:	2200      	movs	r2, #0
 801ac14:	9200      	str	r2, [sp, #0]
 801ac16:	462a      	mov	r2, r5
 801ac18:	4621      	mov	r1, r4
 801ac1a:	f7f4 fbed 	bl	800f3f8 <Paint_DrawRectangle>
					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801ac1e:	7efb      	ldrb	r3, [r7, #27]
 801ac20:	b29c      	uxth	r4, r3
 801ac22:	7fbb      	ldrb	r3, [r7, #30]
 801ac24:	b29a      	uxth	r2, r3
 801ac26:	7f7b      	ldrb	r3, [r7, #29]
 801ac28:	b299      	uxth	r1, r3
 801ac2a:	697b      	ldr	r3, [r7, #20]
 801ac2c:	b29b      	uxth	r3, r3
 801ac2e:	fb11 f303 	smulbb	r3, r1, r3
 801ac32:	b29b      	uxth	r3, r3
 801ac34:	4413      	add	r3, r2
 801ac36:	b29b      	uxth	r3, r3
 801ac38:	3301      	adds	r3, #1
 801ac3a:	b29d      	uxth	r5, r3
					stringItem.itemsArray[i], BLACK, WHITE, 16, Font12);
 801ac3c:	697b      	ldr	r3, [r7, #20]
 801ac3e:	011b      	lsls	r3, r3, #4
 801ac40:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801ac44:	4a8e      	ldr	r2, [pc, #568]	; (801ae80 <updateStringItem+0x308>)
 801ac46:	4413      	add	r3, r2
 801ac48:	1d1a      	adds	r2, r3, #4
			centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801ac4a:	498e      	ldr	r1, [pc, #568]	; (801ae84 <updateStringItem+0x30c>)
 801ac4c:	ab02      	add	r3, sp, #8
 801ac4e:	c903      	ldmia	r1, {r0, r1}
 801ac50:	e883 0003 	stmia.w	r3, {r0, r1}
 801ac54:	2310      	movs	r3, #16
 801ac56:	9301      	str	r3, [sp, #4]
 801ac58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ac5c:	9300      	str	r3, [sp, #0]
 801ac5e:	2300      	movs	r3, #0
 801ac60:	4629      	mov	r1, r5
 801ac62:	4620      	mov	r0, r4
 801ac64:	f7fc ffb8 	bl	8017bd8 <centeredString>
		}
		if ( (i >= 2) && (i < stringItem.numberOfItemsInPage - 2) )
 801ac68:	697b      	ldr	r3, [r7, #20]
 801ac6a:	2b01      	cmp	r3, #1
 801ac6c:	f340 873c 	ble.w	801bae8 <updateStringItem+0xf70>
 801ac70:	4b83      	ldr	r3, [pc, #524]	; (801ae80 <updateStringItem+0x308>)
 801ac72:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 801ac76:	3b02      	subs	r3, #2
 801ac78:	697a      	ldr	r2, [r7, #20]
 801ac7a:	429a      	cmp	r2, r3
 801ac7c:	f280 8734 	bge.w	801bae8 <updateStringItem+0xf70>
		{
			if (howToDraw == FULL)
 801ac80:	79fb      	ldrb	r3, [r7, #7]
 801ac82:	2b02      	cmp	r3, #2
 801ac84:	d159      	bne.n	801ad3a <updateStringItem+0x1c2>
			{
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 801ac86:	7ffb      	ldrb	r3, [r7, #31]
 801ac88:	b298      	uxth	r0, r3
 801ac8a:	7fbb      	ldrb	r3, [r7, #30]
 801ac8c:	b29a      	uxth	r2, r3
 801ac8e:	7f7b      	ldrb	r3, [r7, #29]
 801ac90:	b299      	uxth	r1, r3
 801ac92:	697b      	ldr	r3, [r7, #20]
 801ac94:	b29b      	uxth	r3, r3
 801ac96:	fb11 f303 	smulbb	r3, r1, r3
 801ac9a:	b29b      	uxth	r3, r3
 801ac9c:	4413      	add	r3, r2
 801ac9e:	b29c      	uxth	r4, r3
 801aca0:	7ffb      	ldrb	r3, [r7, #31]
 801aca2:	b29a      	uxth	r2, r3
 801aca4:	7f3b      	ldrb	r3, [r7, #28]
 801aca6:	085b      	lsrs	r3, r3, #1
 801aca8:	b2db      	uxtb	r3, r3
 801acaa:	b29b      	uxth	r3, r3
 801acac:	4413      	add	r3, r2
 801acae:	b29d      	uxth	r5, r3
 801acb0:	7fbb      	ldrb	r3, [r7, #30]
 801acb2:	b29a      	uxth	r2, r3
 801acb4:	7f7b      	ldrb	r3, [r7, #29]
 801acb6:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 801acb8:	697b      	ldr	r3, [r7, #20]
 801acba:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 801acbc:	b29b      	uxth	r3, r3
 801acbe:	fb11 f303 	smulbb	r3, r1, r3
 801acc2:	b29b      	uxth	r3, r3
 801acc4:	4413      	add	r3, r2
 801acc6:	b29b      	uxth	r3, r3
 801acc8:	2200      	movs	r2, #0
 801acca:	9202      	str	r2, [sp, #8]
 801accc:	2201      	movs	r2, #1
 801acce:	9201      	str	r2, [sp, #4]
 801acd0:	2200      	movs	r2, #0
 801acd2:	9200      	str	r2, [sp, #0]
 801acd4:	462a      	mov	r2, r5
 801acd6:	4621      	mov	r1, r4
 801acd8:	f7f4 fb8e 	bl	800f3f8 <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
				Paint_DrawRectangle( MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * i,
 801acdc:	7ffb      	ldrb	r3, [r7, #31]
 801acde:	b29a      	uxth	r2, r3
 801ace0:	7f3b      	ldrb	r3, [r7, #28]
 801ace2:	085b      	lsrs	r3, r3, #1
 801ace4:	b2db      	uxtb	r3, r3
 801ace6:	b29b      	uxth	r3, r3
 801ace8:	4413      	add	r3, r2
 801acea:	b298      	uxth	r0, r3
 801acec:	7fbb      	ldrb	r3, [r7, #30]
 801acee:	b29a      	uxth	r2, r3
 801acf0:	7f7b      	ldrb	r3, [r7, #29]
 801acf2:	b299      	uxth	r1, r3
 801acf4:	697b      	ldr	r3, [r7, #20]
 801acf6:	b29b      	uxth	r3, r3
 801acf8:	fb11 f303 	smulbb	r3, r1, r3
 801acfc:	b29b      	uxth	r3, r3
 801acfe:	4413      	add	r3, r2
 801ad00:	b29c      	uxth	r4, r3
 801ad02:	7ffb      	ldrb	r3, [r7, #31]
 801ad04:	b29a      	uxth	r2, r3
 801ad06:	7f3b      	ldrb	r3, [r7, #28]
 801ad08:	b29b      	uxth	r3, r3
 801ad0a:	4413      	add	r3, r2
 801ad0c:	b29d      	uxth	r5, r3
 801ad0e:	7fbb      	ldrb	r3, [r7, #30]
 801ad10:	b29a      	uxth	r2, r3
 801ad12:	7f7b      	ldrb	r3, [r7, #29]
 801ad14:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 801ad16:	697b      	ldr	r3, [r7, #20]
 801ad18:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * i,
 801ad1a:	b29b      	uxth	r3, r3
 801ad1c:	fb11 f303 	smulbb	r3, r1, r3
 801ad20:	b29b      	uxth	r3, r3
 801ad22:	4413      	add	r3, r2
 801ad24:	b29b      	uxth	r3, r3
 801ad26:	2200      	movs	r2, #0
 801ad28:	9202      	str	r2, [sp, #8]
 801ad2a:	2201      	movs	r2, #1
 801ad2c:	9201      	str	r2, [sp, #4]
 801ad2e:	2200      	movs	r2, #0
 801ad30:	9200      	str	r2, [sp, #0]
 801ad32:	462a      	mov	r2, r5
 801ad34:	4621      	mov	r1, r4
 801ad36:	f7f4 fb5f 	bl	800f3f8 <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			}

			if ( (i == 2) )
 801ad3a:	697b      	ldr	r3, [r7, #20]
 801ad3c:	2b02      	cmp	r3, #2
 801ad3e:	f040 8371 	bne.w	801b424 <updateStringItem+0x8ac>
			{
//				char localString[8] = "";
//				sprintf(localString,"%03d",stringItem.startValue);
				if (currentCursorPosition.cursorPosition == 0x02)
 801ad42:	4b51      	ldr	r3, [pc, #324]	; (801ae88 <updateStringItem+0x310>)
 801ad44:	781b      	ldrb	r3, [r3, #0]
 801ad46:	2b02      	cmp	r3, #2
 801ad48:	f040 81ba 	bne.w	801b0c0 <updateStringItem+0x548>
				{
					if ( (howToDraw == LEFT) || (howToDraw == FULL) )
 801ad4c:	79fb      	ldrb	r3, [r7, #7]
 801ad4e:	2b03      	cmp	r3, #3
 801ad50:	d003      	beq.n	801ad5a <updateStringItem+0x1e2>
 801ad52:	79fb      	ldrb	r3, [r7, #7]
 801ad54:	2b02      	cmp	r3, #2
 801ad56:	f040 8099 	bne.w	801ae8c <updateStringItem+0x314>
					{
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801ad5a:	7ffb      	ldrb	r3, [r7, #31]
 801ad5c:	b29b      	uxth	r3, r3
 801ad5e:	3301      	adds	r3, #1
 801ad60:	b298      	uxth	r0, r3
 801ad62:	7fbb      	ldrb	r3, [r7, #30]
 801ad64:	b29a      	uxth	r2, r3
 801ad66:	7f7b      	ldrb	r3, [r7, #29]
 801ad68:	b299      	uxth	r1, r3
 801ad6a:	697b      	ldr	r3, [r7, #20]
 801ad6c:	b29b      	uxth	r3, r3
 801ad6e:	fb11 f303 	smulbb	r3, r1, r3
 801ad72:	b29b      	uxth	r3, r3
 801ad74:	4413      	add	r3, r2
 801ad76:	b29b      	uxth	r3, r3
 801ad78:	3301      	adds	r3, #1
 801ad7a:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 801ad7c:	697b      	ldr	r3, [r7, #20]
 801ad7e:	011b      	lsls	r3, r3, #4
 801ad80:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801ad84:	4a3e      	ldr	r2, [pc, #248]	; (801ae80 <updateStringItem+0x308>)
 801ad86:	4413      	add	r3, r2
 801ad88:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801ad8a:	2300      	movs	r3, #0
 801ad8c:	9301      	str	r3, [sp, #4]
 801ad8e:	f24c 6318 	movw	r3, #50712	; 0xc618
 801ad92:	9300      	str	r3, [sp, #0]
 801ad94:	4b3b      	ldr	r3, [pc, #236]	; (801ae84 <updateStringItem+0x30c>)
 801ad96:	f7f4 fdd3 	bl	800f940 <Paint_DrawString_EN>
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 801ad9a:	7ffb      	ldrb	r3, [r7, #31]
 801ad9c:	b29a      	uxth	r2, r3
 801ad9e:	7f3b      	ldrb	r3, [r7, #28]
 801ada0:	085b      	lsrs	r3, r3, #1
 801ada2:	b2db      	uxtb	r3, r3
 801ada4:	b29b      	uxth	r3, r3
 801ada6:	4413      	add	r3, r2
 801ada8:	b29b      	uxth	r3, r3
 801adaa:	3301      	adds	r3, #1
 801adac:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801adae:	7fbb      	ldrb	r3, [r7, #30]
 801adb0:	b29a      	uxth	r2, r3
 801adb2:	7f7b      	ldrb	r3, [r7, #29]
 801adb4:	b299      	uxth	r1, r3
 801adb6:	697b      	ldr	r3, [r7, #20]
 801adb8:	b29b      	uxth	r3, r3
 801adba:	fb11 f303 	smulbb	r3, r1, r3
 801adbe:	b29b      	uxth	r3, r3
 801adc0:	4413      	add	r3, r2
 801adc2:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 801adc4:	3301      	adds	r3, #1
 801adc6:	b29e      	uxth	r6, r3
								MenuRectangleStartX + MenuRectangleWidth / 2 + 1 + strlen(stringItem.valuesArray[stringItem.startValue]) * Font12.Width,
 801adc8:	7ffb      	ldrb	r3, [r7, #31]
 801adca:	b29a      	uxth	r2, r3
 801adcc:	7f3b      	ldrb	r3, [r7, #28]
 801adce:	085b      	lsrs	r3, r3, #1
 801add0:	b2db      	uxtb	r3, r3
 801add2:	b29b      	uxth	r3, r3
 801add4:	4413      	add	r3, r2
 801add6:	b29c      	uxth	r4, r3
 801add8:	4b29      	ldr	r3, [pc, #164]	; (801ae80 <updateStringItem+0x308>)
 801adda:	799b      	ldrb	r3, [r3, #6]
 801addc:	011b      	lsls	r3, r3, #4
 801adde:	3308      	adds	r3, #8
 801ade0:	4a27      	ldr	r2, [pc, #156]	; (801ae80 <updateStringItem+0x308>)
 801ade2:	4413      	add	r3, r2
 801ade4:	4618      	mov	r0, r3
 801ade6:	f7e5 fa85 	bl	80002f4 <strlen>
 801adea:	4603      	mov	r3, r0
 801adec:	b29a      	uxth	r2, r3
 801adee:	4b25      	ldr	r3, [pc, #148]	; (801ae84 <updateStringItem+0x30c>)
 801adf0:	889b      	ldrh	r3, [r3, #4]
 801adf2:	fb12 f303 	smulbb	r3, r2, r3
 801adf6:	b29b      	uxth	r3, r3
 801adf8:	4423      	add	r3, r4
 801adfa:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 801adfc:	3301      	adds	r3, #1
 801adfe:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801ae00:	7fbb      	ldrb	r3, [r7, #30]
 801ae02:	b29a      	uxth	r2, r3
 801ae04:	7f7b      	ldrb	r3, [r7, #29]
 801ae06:	b299      	uxth	r1, r3
 801ae08:	697b      	ldr	r3, [r7, #20]
 801ae0a:	b29b      	uxth	r3, r3
 801ae0c:	fb11 f303 	smulbb	r3, r1, r3
 801ae10:	b29b      	uxth	r3, r3
 801ae12:	4413      	add	r3, r2
 801ae14:	b29a      	uxth	r2, r3
 801ae16:	4b1b      	ldr	r3, [pc, #108]	; (801ae84 <updateStringItem+0x30c>)
 801ae18:	88db      	ldrh	r3, [r3, #6]
 801ae1a:	4413      	add	r3, r2
 801ae1c:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 801ae1e:	3301      	adds	r3, #1
 801ae20:	b29b      	uxth	r3, r3
 801ae22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ae26:	9200      	str	r2, [sp, #0]
 801ae28:	4602      	mov	r2, r0
 801ae2a:	4631      	mov	r1, r6
 801ae2c:	4628      	mov	r0, r5
 801ae2e:	f7f4 f969 	bl	800f104 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801ae32:	7ffb      	ldrb	r3, [r7, #31]
 801ae34:	b29a      	uxth	r2, r3
 801ae36:	7f3b      	ldrb	r3, [r7, #28]
 801ae38:	085b      	lsrs	r3, r3, #1
 801ae3a:	b2db      	uxtb	r3, r3
 801ae3c:	b29b      	uxth	r3, r3
 801ae3e:	4413      	add	r3, r2
 801ae40:	b29b      	uxth	r3, r3
 801ae42:	3301      	adds	r3, #1
 801ae44:	b298      	uxth	r0, r3
 801ae46:	7fbb      	ldrb	r3, [r7, #30]
 801ae48:	b29a      	uxth	r2, r3
 801ae4a:	7f7b      	ldrb	r3, [r7, #29]
 801ae4c:	b299      	uxth	r1, r3
 801ae4e:	697b      	ldr	r3, [r7, #20]
 801ae50:	b29b      	uxth	r3, r3
 801ae52:	fb11 f303 	smulbb	r3, r1, r3
 801ae56:	b29b      	uxth	r3, r3
 801ae58:	4413      	add	r3, r2
 801ae5a:	b29b      	uxth	r3, r3
 801ae5c:	3301      	adds	r3, #1
 801ae5e:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, WHITE,  BLACK);
 801ae60:	4b07      	ldr	r3, [pc, #28]	; (801ae80 <updateStringItem+0x308>)
 801ae62:	799b      	ldrb	r3, [r3, #6]
 801ae64:	011b      	lsls	r3, r3, #4
 801ae66:	3308      	adds	r3, #8
 801ae68:	4a05      	ldr	r2, [pc, #20]	; (801ae80 <updateStringItem+0x308>)
 801ae6a:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801ae6c:	2300      	movs	r3, #0
 801ae6e:	9301      	str	r3, [sp, #4]
 801ae70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ae74:	9300      	str	r3, [sp, #0]
 801ae76:	4b03      	ldr	r3, [pc, #12]	; (801ae84 <updateStringItem+0x30c>)
 801ae78:	f7f4 fd62 	bl	800f940 <Paint_DrawString_EN>
 801ae7c:	e2d2      	b.n	801b424 <updateStringItem+0x8ac>
 801ae7e:	bf00      	nop
 801ae80:	2400c37c 	.word	0x2400c37c
 801ae84:	24000030 	.word	0x24000030
 801ae88:	2400afcc 	.word	0x2400afcc
					}
					else if (howToDraw == DOWN)
 801ae8c:	79fb      	ldrb	r3, [r7, #7]
 801ae8e:	2b01      	cmp	r3, #1
 801ae90:	f040 8087 	bne.w	801afa2 <updateStringItem+0x42a>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801ae94:	7ffb      	ldrb	r3, [r7, #31]
 801ae96:	b29b      	uxth	r3, r3
 801ae98:	3301      	adds	r3, #1
 801ae9a:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801ae9c:	7fbb      	ldrb	r3, [r7, #30]
 801ae9e:	b29a      	uxth	r2, r3
 801aea0:	7f7b      	ldrb	r3, [r7, #29]
 801aea2:	b299      	uxth	r1, r3
 801aea4:	697b      	ldr	r3, [r7, #20]
 801aea6:	b29b      	uxth	r3, r3
 801aea8:	fb11 f303 	smulbb	r3, r1, r3
 801aeac:	b29b      	uxth	r3, r3
 801aeae:	4413      	add	r3, r2
 801aeb0:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801aeb2:	3301      	adds	r3, #1
 801aeb4:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 801aeb6:	7ffb      	ldrb	r3, [r7, #31]
 801aeb8:	b29c      	uxth	r4, r3
 801aeba:	697b      	ldr	r3, [r7, #20]
 801aebc:	011b      	lsls	r3, r3, #4
 801aebe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801aec2:	4a7d      	ldr	r2, [pc, #500]	; (801b0b8 <updateStringItem+0x540>)
 801aec4:	4413      	add	r3, r2
 801aec6:	3304      	adds	r3, #4
 801aec8:	4618      	mov	r0, r3
 801aeca:	f7e5 fa13 	bl	80002f4 <strlen>
 801aece:	4603      	mov	r3, r0
 801aed0:	b29a      	uxth	r2, r3
 801aed2:	4b7a      	ldr	r3, [pc, #488]	; (801b0bc <updateStringItem+0x544>)
 801aed4:	889b      	ldrh	r3, [r3, #4]
 801aed6:	fb12 f303 	smulbb	r3, r2, r3
 801aeda:	b29b      	uxth	r3, r3
 801aedc:	4423      	add	r3, r4
 801aede:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801aee0:	3301      	adds	r3, #1
 801aee2:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801aee4:	7fbb      	ldrb	r3, [r7, #30]
 801aee6:	b29a      	uxth	r2, r3
 801aee8:	7f7b      	ldrb	r3, [r7, #29]
 801aeea:	b299      	uxth	r1, r3
 801aeec:	697b      	ldr	r3, [r7, #20]
 801aeee:	b29b      	uxth	r3, r3
 801aef0:	fb11 f303 	smulbb	r3, r1, r3
 801aef4:	b29b      	uxth	r3, r3
 801aef6:	4413      	add	r3, r2
 801aef8:	b29a      	uxth	r2, r3
 801aefa:	4b70      	ldr	r3, [pc, #448]	; (801b0bc <updateStringItem+0x544>)
 801aefc:	88db      	ldrh	r3, [r3, #6]
 801aefe:	4413      	add	r3, r2
 801af00:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801af02:	3301      	adds	r3, #1
 801af04:	b29b      	uxth	r3, r3
 801af06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801af0a:	9200      	str	r2, [sp, #0]
 801af0c:	4602      	mov	r2, r0
 801af0e:	4631      	mov	r1, r6
 801af10:	4628      	mov	r0, r5
 801af12:	f7f4 f8f7 	bl	800f104 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801af16:	7ffb      	ldrb	r3, [r7, #31]
 801af18:	b29b      	uxth	r3, r3
 801af1a:	3301      	adds	r3, #1
 801af1c:	b298      	uxth	r0, r3
 801af1e:	7fbb      	ldrb	r3, [r7, #30]
 801af20:	b29a      	uxth	r2, r3
 801af22:	7f7b      	ldrb	r3, [r7, #29]
 801af24:	b299      	uxth	r1, r3
 801af26:	697b      	ldr	r3, [r7, #20]
 801af28:	b29b      	uxth	r3, r3
 801af2a:	fb11 f303 	smulbb	r3, r1, r3
 801af2e:	b29b      	uxth	r3, r3
 801af30:	4413      	add	r3, r2
 801af32:	b29b      	uxth	r3, r3
 801af34:	3301      	adds	r3, #1
 801af36:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 801af38:	697b      	ldr	r3, [r7, #20]
 801af3a:	011b      	lsls	r3, r3, #4
 801af3c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801af40:	4a5d      	ldr	r2, [pc, #372]	; (801b0b8 <updateStringItem+0x540>)
 801af42:	4413      	add	r3, r2
 801af44:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801af46:	2300      	movs	r3, #0
 801af48:	9301      	str	r3, [sp, #4]
 801af4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801af4e:	9300      	str	r3, [sp, #0]
 801af50:	4b5a      	ldr	r3, [pc, #360]	; (801b0bc <updateStringItem+0x544>)
 801af52:	f7f4 fcf5 	bl	800f940 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801af56:	7ffb      	ldrb	r3, [r7, #31]
 801af58:	b29a      	uxth	r2, r3
 801af5a:	7f3b      	ldrb	r3, [r7, #28]
 801af5c:	085b      	lsrs	r3, r3, #1
 801af5e:	b2db      	uxtb	r3, r3
 801af60:	b29b      	uxth	r3, r3
 801af62:	4413      	add	r3, r2
 801af64:	b29b      	uxth	r3, r3
 801af66:	3301      	adds	r3, #1
 801af68:	b298      	uxth	r0, r3
 801af6a:	7fbb      	ldrb	r3, [r7, #30]
 801af6c:	b29a      	uxth	r2, r3
 801af6e:	7f7b      	ldrb	r3, [r7, #29]
 801af70:	b299      	uxth	r1, r3
 801af72:	697b      	ldr	r3, [r7, #20]
 801af74:	b29b      	uxth	r3, r3
 801af76:	fb11 f303 	smulbb	r3, r1, r3
 801af7a:	b29b      	uxth	r3, r3
 801af7c:	4413      	add	r3, r2
 801af7e:	b29b      	uxth	r3, r3
 801af80:	3301      	adds	r3, #1
 801af82:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, WHITE,  BLACK);
 801af84:	4b4c      	ldr	r3, [pc, #304]	; (801b0b8 <updateStringItem+0x540>)
 801af86:	799b      	ldrb	r3, [r3, #6]
 801af88:	011b      	lsls	r3, r3, #4
 801af8a:	3308      	adds	r3, #8
 801af8c:	4a4a      	ldr	r2, [pc, #296]	; (801b0b8 <updateStringItem+0x540>)
 801af8e:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801af90:	2300      	movs	r3, #0
 801af92:	9301      	str	r3, [sp, #4]
 801af94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801af98:	9300      	str	r3, [sp, #0]
 801af9a:	4b48      	ldr	r3, [pc, #288]	; (801b0bc <updateStringItem+0x544>)
 801af9c:	f7f4 fcd0 	bl	800f940 <Paint_DrawString_EN>
 801afa0:	e240      	b.n	801b424 <updateStringItem+0x8ac>
					}
					else if (howToDraw == UP)
 801afa2:	79fb      	ldrb	r3, [r7, #7]
 801afa4:	2b00      	cmp	r3, #0
 801afa6:	f040 823d 	bne.w	801b424 <updateStringItem+0x8ac>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801afaa:	7ffb      	ldrb	r3, [r7, #31]
 801afac:	b29b      	uxth	r3, r3
 801afae:	3301      	adds	r3, #1
 801afb0:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801afb2:	7fbb      	ldrb	r3, [r7, #30]
 801afb4:	b29a      	uxth	r2, r3
 801afb6:	7f7b      	ldrb	r3, [r7, #29]
 801afb8:	b299      	uxth	r1, r3
 801afba:	697b      	ldr	r3, [r7, #20]
 801afbc:	b29b      	uxth	r3, r3
 801afbe:	fb11 f303 	smulbb	r3, r1, r3
 801afc2:	b29b      	uxth	r3, r3
 801afc4:	4413      	add	r3, r2
 801afc6:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801afc8:	3301      	adds	r3, #1
 801afca:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 801afcc:	7ffb      	ldrb	r3, [r7, #31]
 801afce:	b29c      	uxth	r4, r3
 801afd0:	697b      	ldr	r3, [r7, #20]
 801afd2:	011b      	lsls	r3, r3, #4
 801afd4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801afd8:	4a37      	ldr	r2, [pc, #220]	; (801b0b8 <updateStringItem+0x540>)
 801afda:	4413      	add	r3, r2
 801afdc:	3304      	adds	r3, #4
 801afde:	4618      	mov	r0, r3
 801afe0:	f7e5 f988 	bl	80002f4 <strlen>
 801afe4:	4603      	mov	r3, r0
 801afe6:	b29a      	uxth	r2, r3
 801afe8:	4b34      	ldr	r3, [pc, #208]	; (801b0bc <updateStringItem+0x544>)
 801afea:	889b      	ldrh	r3, [r3, #4]
 801afec:	fb12 f303 	smulbb	r3, r2, r3
 801aff0:	b29b      	uxth	r3, r3
 801aff2:	4423      	add	r3, r4
 801aff4:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801aff6:	3301      	adds	r3, #1
 801aff8:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801affa:	7fbb      	ldrb	r3, [r7, #30]
 801affc:	b29a      	uxth	r2, r3
 801affe:	7f7b      	ldrb	r3, [r7, #29]
 801b000:	b299      	uxth	r1, r3
 801b002:	697b      	ldr	r3, [r7, #20]
 801b004:	b29b      	uxth	r3, r3
 801b006:	fb11 f303 	smulbb	r3, r1, r3
 801b00a:	b29b      	uxth	r3, r3
 801b00c:	4413      	add	r3, r2
 801b00e:	b29a      	uxth	r2, r3
 801b010:	4b2a      	ldr	r3, [pc, #168]	; (801b0bc <updateStringItem+0x544>)
 801b012:	88db      	ldrh	r3, [r3, #6]
 801b014:	4413      	add	r3, r2
 801b016:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b018:	3301      	adds	r3, #1
 801b01a:	b29b      	uxth	r3, r3
 801b01c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b020:	9200      	str	r2, [sp, #0]
 801b022:	4602      	mov	r2, r0
 801b024:	4631      	mov	r1, r6
 801b026:	4628      	mov	r0, r5
 801b028:	f7f4 f86c 	bl	800f104 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b02c:	7ffb      	ldrb	r3, [r7, #31]
 801b02e:	b29b      	uxth	r3, r3
 801b030:	3301      	adds	r3, #1
 801b032:	b298      	uxth	r0, r3
 801b034:	7fbb      	ldrb	r3, [r7, #30]
 801b036:	b29a      	uxth	r2, r3
 801b038:	7f7b      	ldrb	r3, [r7, #29]
 801b03a:	b299      	uxth	r1, r3
 801b03c:	697b      	ldr	r3, [r7, #20]
 801b03e:	b29b      	uxth	r3, r3
 801b040:	fb11 f303 	smulbb	r3, r1, r3
 801b044:	b29b      	uxth	r3, r3
 801b046:	4413      	add	r3, r2
 801b048:	b29b      	uxth	r3, r3
 801b04a:	3301      	adds	r3, #1
 801b04c:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 801b04e:	697b      	ldr	r3, [r7, #20]
 801b050:	011b      	lsls	r3, r3, #4
 801b052:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b056:	4a18      	ldr	r2, [pc, #96]	; (801b0b8 <updateStringItem+0x540>)
 801b058:	4413      	add	r3, r2
 801b05a:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b05c:	2300      	movs	r3, #0
 801b05e:	9301      	str	r3, [sp, #4]
 801b060:	f24c 6318 	movw	r3, #50712	; 0xc618
 801b064:	9300      	str	r3, [sp, #0]
 801b066:	4b15      	ldr	r3, [pc, #84]	; (801b0bc <updateStringItem+0x544>)
 801b068:	f7f4 fc6a 	bl	800f940 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b06c:	7ffb      	ldrb	r3, [r7, #31]
 801b06e:	b29a      	uxth	r2, r3
 801b070:	7f3b      	ldrb	r3, [r7, #28]
 801b072:	085b      	lsrs	r3, r3, #1
 801b074:	b2db      	uxtb	r3, r3
 801b076:	b29b      	uxth	r3, r3
 801b078:	4413      	add	r3, r2
 801b07a:	b29b      	uxth	r3, r3
 801b07c:	3301      	adds	r3, #1
 801b07e:	b298      	uxth	r0, r3
 801b080:	7fbb      	ldrb	r3, [r7, #30]
 801b082:	b29a      	uxth	r2, r3
 801b084:	7f7b      	ldrb	r3, [r7, #29]
 801b086:	b299      	uxth	r1, r3
 801b088:	697b      	ldr	r3, [r7, #20]
 801b08a:	b29b      	uxth	r3, r3
 801b08c:	fb11 f303 	smulbb	r3, r1, r3
 801b090:	b29b      	uxth	r3, r3
 801b092:	4413      	add	r3, r2
 801b094:	b29b      	uxth	r3, r3
 801b096:	3301      	adds	r3, #1
 801b098:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, WHITE,  BLACK);
 801b09a:	4b07      	ldr	r3, [pc, #28]	; (801b0b8 <updateStringItem+0x540>)
 801b09c:	799b      	ldrb	r3, [r3, #6]
 801b09e:	011b      	lsls	r3, r3, #4
 801b0a0:	3308      	adds	r3, #8
 801b0a2:	4a05      	ldr	r2, [pc, #20]	; (801b0b8 <updateStringItem+0x540>)
 801b0a4:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b0a6:	2300      	movs	r3, #0
 801b0a8:	9301      	str	r3, [sp, #4]
 801b0aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b0ae:	9300      	str	r3, [sp, #0]
 801b0b0:	4b02      	ldr	r3, [pc, #8]	; (801b0bc <updateStringItem+0x544>)
 801b0b2:	f7f4 fc45 	bl	800f940 <Paint_DrawString_EN>
 801b0b6:	e1b5      	b.n	801b424 <updateStringItem+0x8ac>
 801b0b8:	2400c37c 	.word	0x2400c37c
 801b0bc:	24000030 	.word	0x24000030
					}

				}
				else if (currentCursorPosition.cursorPosition == VALUE)
 801b0c0:	4b92      	ldr	r3, [pc, #584]	; (801b30c <updateStringItem+0x794>)
 801b0c2:	781b      	ldrb	r3, [r3, #0]
 801b0c4:	2b0b      	cmp	r3, #11
 801b0c6:	f040 8127 	bne.w	801b318 <updateStringItem+0x7a0>
				{
					if (howToDraw == RIGHT)
 801b0ca:	79fb      	ldrb	r3, [r7, #7]
 801b0cc:	2b04      	cmp	r3, #4
 801b0ce:	f040 8087 	bne.w	801b1e0 <updateStringItem+0x668>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b0d2:	7ffb      	ldrb	r3, [r7, #31]
 801b0d4:	b29b      	uxth	r3, r3
 801b0d6:	3301      	adds	r3, #1
 801b0d8:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b0da:	7fbb      	ldrb	r3, [r7, #30]
 801b0dc:	b29a      	uxth	r2, r3
 801b0de:	7f7b      	ldrb	r3, [r7, #29]
 801b0e0:	b299      	uxth	r1, r3
 801b0e2:	697b      	ldr	r3, [r7, #20]
 801b0e4:	b29b      	uxth	r3, r3
 801b0e6:	fb11 f303 	smulbb	r3, r1, r3
 801b0ea:	b29b      	uxth	r3, r3
 801b0ec:	4413      	add	r3, r2
 801b0ee:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b0f0:	3301      	adds	r3, #1
 801b0f2:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 801b0f4:	7ffb      	ldrb	r3, [r7, #31]
 801b0f6:	b29c      	uxth	r4, r3
 801b0f8:	697b      	ldr	r3, [r7, #20]
 801b0fa:	011b      	lsls	r3, r3, #4
 801b0fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b100:	4a83      	ldr	r2, [pc, #524]	; (801b310 <updateStringItem+0x798>)
 801b102:	4413      	add	r3, r2
 801b104:	3304      	adds	r3, #4
 801b106:	4618      	mov	r0, r3
 801b108:	f7e5 f8f4 	bl	80002f4 <strlen>
 801b10c:	4603      	mov	r3, r0
 801b10e:	b29a      	uxth	r2, r3
 801b110:	4b80      	ldr	r3, [pc, #512]	; (801b314 <updateStringItem+0x79c>)
 801b112:	889b      	ldrh	r3, [r3, #4]
 801b114:	fb12 f303 	smulbb	r3, r2, r3
 801b118:	b29b      	uxth	r3, r3
 801b11a:	4423      	add	r3, r4
 801b11c:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b11e:	3301      	adds	r3, #1
 801b120:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801b122:	7fbb      	ldrb	r3, [r7, #30]
 801b124:	b29a      	uxth	r2, r3
 801b126:	7f7b      	ldrb	r3, [r7, #29]
 801b128:	b299      	uxth	r1, r3
 801b12a:	697b      	ldr	r3, [r7, #20]
 801b12c:	b29b      	uxth	r3, r3
 801b12e:	fb11 f303 	smulbb	r3, r1, r3
 801b132:	b29b      	uxth	r3, r3
 801b134:	4413      	add	r3, r2
 801b136:	b29a      	uxth	r2, r3
 801b138:	4b76      	ldr	r3, [pc, #472]	; (801b314 <updateStringItem+0x79c>)
 801b13a:	88db      	ldrh	r3, [r3, #6]
 801b13c:	4413      	add	r3, r2
 801b13e:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b140:	3301      	adds	r3, #1
 801b142:	b29b      	uxth	r3, r3
 801b144:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b148:	9200      	str	r2, [sp, #0]
 801b14a:	4602      	mov	r2, r0
 801b14c:	4631      	mov	r1, r6
 801b14e:	4628      	mov	r0, r5
 801b150:	f7f3 ffd8 	bl	800f104 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b154:	7ffb      	ldrb	r3, [r7, #31]
 801b156:	b29b      	uxth	r3, r3
 801b158:	3301      	adds	r3, #1
 801b15a:	b298      	uxth	r0, r3
 801b15c:	7fbb      	ldrb	r3, [r7, #30]
 801b15e:	b29a      	uxth	r2, r3
 801b160:	7f7b      	ldrb	r3, [r7, #29]
 801b162:	b299      	uxth	r1, r3
 801b164:	697b      	ldr	r3, [r7, #20]
 801b166:	b29b      	uxth	r3, r3
 801b168:	fb11 f303 	smulbb	r3, r1, r3
 801b16c:	b29b      	uxth	r3, r3
 801b16e:	4413      	add	r3, r2
 801b170:	b29b      	uxth	r3, r3
 801b172:	3301      	adds	r3, #1
 801b174:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 801b176:	697b      	ldr	r3, [r7, #20]
 801b178:	011b      	lsls	r3, r3, #4
 801b17a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b17e:	4a64      	ldr	r2, [pc, #400]	; (801b310 <updateStringItem+0x798>)
 801b180:	4413      	add	r3, r2
 801b182:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b184:	2300      	movs	r3, #0
 801b186:	9301      	str	r3, [sp, #4]
 801b188:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b18c:	9300      	str	r3, [sp, #0]
 801b18e:	4b61      	ldr	r3, [pc, #388]	; (801b314 <updateStringItem+0x79c>)
 801b190:	f7f4 fbd6 	bl	800f940 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b194:	7ffb      	ldrb	r3, [r7, #31]
 801b196:	b29a      	uxth	r2, r3
 801b198:	7f3b      	ldrb	r3, [r7, #28]
 801b19a:	085b      	lsrs	r3, r3, #1
 801b19c:	b2db      	uxtb	r3, r3
 801b19e:	b29b      	uxth	r3, r3
 801b1a0:	4413      	add	r3, r2
 801b1a2:	b29b      	uxth	r3, r3
 801b1a4:	3301      	adds	r3, #1
 801b1a6:	b298      	uxth	r0, r3
 801b1a8:	7fbb      	ldrb	r3, [r7, #30]
 801b1aa:	b29a      	uxth	r2, r3
 801b1ac:	7f7b      	ldrb	r3, [r7, #29]
 801b1ae:	b299      	uxth	r1, r3
 801b1b0:	697b      	ldr	r3, [r7, #20]
 801b1b2:	b29b      	uxth	r3, r3
 801b1b4:	fb11 f303 	smulbb	r3, r1, r3
 801b1b8:	b29b      	uxth	r3, r3
 801b1ba:	4413      	add	r3, r2
 801b1bc:	b29b      	uxth	r3, r3
 801b1be:	3301      	adds	r3, #1
 801b1c0:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, LGRAY,  BLACK);
 801b1c2:	4b53      	ldr	r3, [pc, #332]	; (801b310 <updateStringItem+0x798>)
 801b1c4:	799b      	ldrb	r3, [r3, #6]
 801b1c6:	011b      	lsls	r3, r3, #4
 801b1c8:	3308      	adds	r3, #8
 801b1ca:	4a51      	ldr	r2, [pc, #324]	; (801b310 <updateStringItem+0x798>)
 801b1cc:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b1ce:	2300      	movs	r3, #0
 801b1d0:	9301      	str	r3, [sp, #4]
 801b1d2:	f24c 6318 	movw	r3, #50712	; 0xc618
 801b1d6:	9300      	str	r3, [sp, #0]
 801b1d8:	4b4e      	ldr	r3, [pc, #312]	; (801b314 <updateStringItem+0x79c>)
 801b1da:	f7f4 fbb1 	bl	800f940 <Paint_DrawString_EN>
 801b1de:	e121      	b.n	801b424 <updateStringItem+0x8ac>
					}
					else if (howToDraw == DOWN)
 801b1e0:	79fb      	ldrb	r3, [r7, #7]
 801b1e2:	2b01      	cmp	r3, #1
 801b1e4:	d146      	bne.n	801b274 <updateStringItem+0x6fc>
					{
						stringItem.startValue = fmax(stringItem.startValue - stringItem.deltaMultiplier, stringItem.minValue * 1.0);
 801b1e6:	4b4a      	ldr	r3, [pc, #296]	; (801b310 <updateStringItem+0x798>)
 801b1e8:	799b      	ldrb	r3, [r3, #6]
 801b1ea:	461a      	mov	r2, r3
 801b1ec:	4b48      	ldr	r3, [pc, #288]	; (801b310 <updateStringItem+0x798>)
 801b1ee:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 801b1f2:	1ad3      	subs	r3, r2, r3
 801b1f4:	ee07 3a90 	vmov	s15, r3
 801b1f8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801b1fc:	4b44      	ldr	r3, [pc, #272]	; (801b310 <updateStringItem+0x798>)
 801b1fe:	791b      	ldrb	r3, [r3, #4]
 801b200:	ee06 3a90 	vmov	s13, r3
 801b204:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801b208:	eeb0 1b46 	vmov.f64	d1, d6
 801b20c:	eeb0 0b47 	vmov.f64	d0, d7
 801b210:	f005 ff78 	bl	8021104 <fmax>
 801b214:	eeb0 7b40 	vmov.f64	d7, d0
 801b218:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 801b21c:	edc7 7a00 	vstr	s15, [r7]
 801b220:	683b      	ldr	r3, [r7, #0]
 801b222:	b2da      	uxtb	r2, r3
 801b224:	4b3a      	ldr	r3, [pc, #232]	; (801b310 <updateStringItem+0x798>)
 801b226:	719a      	strb	r2, [r3, #6]
//						sprintf(localString,"%05d",stringItem.startValue);
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b228:	7ffb      	ldrb	r3, [r7, #31]
 801b22a:	b29a      	uxth	r2, r3
 801b22c:	7f3b      	ldrb	r3, [r7, #28]
 801b22e:	085b      	lsrs	r3, r3, #1
 801b230:	b2db      	uxtb	r3, r3
 801b232:	b29b      	uxth	r3, r3
 801b234:	4413      	add	r3, r2
 801b236:	b29b      	uxth	r3, r3
 801b238:	3301      	adds	r3, #1
 801b23a:	b298      	uxth	r0, r3
 801b23c:	7fbb      	ldrb	r3, [r7, #30]
 801b23e:	b29a      	uxth	r2, r3
 801b240:	7f7b      	ldrb	r3, [r7, #29]
 801b242:	b299      	uxth	r1, r3
 801b244:	697b      	ldr	r3, [r7, #20]
 801b246:	b29b      	uxth	r3, r3
 801b248:	fb11 f303 	smulbb	r3, r1, r3
 801b24c:	b29b      	uxth	r3, r3
 801b24e:	4413      	add	r3, r2
 801b250:	b29b      	uxth	r3, r3
 801b252:	3301      	adds	r3, #1
 801b254:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, LGRAY,  BLACK);
 801b256:	4b2e      	ldr	r3, [pc, #184]	; (801b310 <updateStringItem+0x798>)
 801b258:	799b      	ldrb	r3, [r3, #6]
 801b25a:	011b      	lsls	r3, r3, #4
 801b25c:	3308      	adds	r3, #8
 801b25e:	4a2c      	ldr	r2, [pc, #176]	; (801b310 <updateStringItem+0x798>)
 801b260:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b262:	2300      	movs	r3, #0
 801b264:	9301      	str	r3, [sp, #4]
 801b266:	f24c 6318 	movw	r3, #50712	; 0xc618
 801b26a:	9300      	str	r3, [sp, #0]
 801b26c:	4b29      	ldr	r3, [pc, #164]	; (801b314 <updateStringItem+0x79c>)
 801b26e:	f7f4 fb67 	bl	800f940 <Paint_DrawString_EN>
 801b272:	e0d7      	b.n	801b424 <updateStringItem+0x8ac>
					}
					else if (howToDraw == UP)
 801b274:	79fb      	ldrb	r3, [r7, #7]
 801b276:	2b00      	cmp	r3, #0
 801b278:	f040 80d4 	bne.w	801b424 <updateStringItem+0x8ac>
					{
						stringItem.startValue = fmin(stringItem.startValue + stringItem.deltaMultiplier, stringItem.maxValue * 1.0);
 801b27c:	4b24      	ldr	r3, [pc, #144]	; (801b310 <updateStringItem+0x798>)
 801b27e:	799b      	ldrb	r3, [r3, #6]
 801b280:	461a      	mov	r2, r3
 801b282:	4b23      	ldr	r3, [pc, #140]	; (801b310 <updateStringItem+0x798>)
 801b284:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 801b288:	4413      	add	r3, r2
 801b28a:	ee07 3a90 	vmov	s15, r3
 801b28e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801b292:	4b1f      	ldr	r3, [pc, #124]	; (801b310 <updateStringItem+0x798>)
 801b294:	795b      	ldrb	r3, [r3, #5]
 801b296:	ee06 3a90 	vmov	s13, r3
 801b29a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801b29e:	eeb0 1b46 	vmov.f64	d1, d6
 801b2a2:	eeb0 0b47 	vmov.f64	d0, d7
 801b2a6:	f005 ff48 	bl	802113a <fmin>
 801b2aa:	eeb0 7b40 	vmov.f64	d7, d0
 801b2ae:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 801b2b2:	edc7 7a00 	vstr	s15, [r7]
 801b2b6:	683b      	ldr	r3, [r7, #0]
 801b2b8:	b2da      	uxtb	r2, r3
 801b2ba:	4b15      	ldr	r3, [pc, #84]	; (801b310 <updateStringItem+0x798>)
 801b2bc:	719a      	strb	r2, [r3, #6]
//						sprintf(localString,"%05d",stringItem.startValue);
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b2be:	7ffb      	ldrb	r3, [r7, #31]
 801b2c0:	b29a      	uxth	r2, r3
 801b2c2:	7f3b      	ldrb	r3, [r7, #28]
 801b2c4:	085b      	lsrs	r3, r3, #1
 801b2c6:	b2db      	uxtb	r3, r3
 801b2c8:	b29b      	uxth	r3, r3
 801b2ca:	4413      	add	r3, r2
 801b2cc:	b29b      	uxth	r3, r3
 801b2ce:	3301      	adds	r3, #1
 801b2d0:	b298      	uxth	r0, r3
 801b2d2:	7fbb      	ldrb	r3, [r7, #30]
 801b2d4:	b29a      	uxth	r2, r3
 801b2d6:	7f7b      	ldrb	r3, [r7, #29]
 801b2d8:	b299      	uxth	r1, r3
 801b2da:	697b      	ldr	r3, [r7, #20]
 801b2dc:	b29b      	uxth	r3, r3
 801b2de:	fb11 f303 	smulbb	r3, r1, r3
 801b2e2:	b29b      	uxth	r3, r3
 801b2e4:	4413      	add	r3, r2
 801b2e6:	b29b      	uxth	r3, r3
 801b2e8:	3301      	adds	r3, #1
 801b2ea:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, LGRAY,  BLACK);
 801b2ec:	4b08      	ldr	r3, [pc, #32]	; (801b310 <updateStringItem+0x798>)
 801b2ee:	799b      	ldrb	r3, [r3, #6]
 801b2f0:	011b      	lsls	r3, r3, #4
 801b2f2:	3308      	adds	r3, #8
 801b2f4:	4a06      	ldr	r2, [pc, #24]	; (801b310 <updateStringItem+0x798>)
 801b2f6:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b2f8:	2300      	movs	r3, #0
 801b2fa:	9301      	str	r3, [sp, #4]
 801b2fc:	f24c 6318 	movw	r3, #50712	; 0xc618
 801b300:	9300      	str	r3, [sp, #0]
 801b302:	4b04      	ldr	r3, [pc, #16]	; (801b314 <updateStringItem+0x79c>)
 801b304:	f7f4 fb1c 	bl	800f940 <Paint_DrawString_EN>
 801b308:	e08c      	b.n	801b424 <updateStringItem+0x8ac>
 801b30a:	bf00      	nop
 801b30c:	2400afcc 	.word	0x2400afcc
 801b310:	2400c37c 	.word	0x2400c37c
 801b314:	24000030 	.word	0x24000030
					}
				}
				else
				{
					Paint_ClearWindows(MenuRectangleStartX + 1,
 801b318:	7ffb      	ldrb	r3, [r7, #31]
 801b31a:	b29b      	uxth	r3, r3
 801b31c:	3301      	adds	r3, #1
 801b31e:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b320:	7fbb      	ldrb	r3, [r7, #30]
 801b322:	b29a      	uxth	r2, r3
 801b324:	7f7b      	ldrb	r3, [r7, #29]
 801b326:	b299      	uxth	r1, r3
 801b328:	697b      	ldr	r3, [r7, #20]
 801b32a:	b29b      	uxth	r3, r3
 801b32c:	fb11 f303 	smulbb	r3, r1, r3
 801b330:	b29b      	uxth	r3, r3
 801b332:	4413      	add	r3, r2
 801b334:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 801b336:	3301      	adds	r3, #1
 801b338:	b29e      	uxth	r6, r3
							MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 801b33a:	7ffb      	ldrb	r3, [r7, #31]
 801b33c:	b29c      	uxth	r4, r3
 801b33e:	697b      	ldr	r3, [r7, #20]
 801b340:	011b      	lsls	r3, r3, #4
 801b342:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b346:	4a8e      	ldr	r2, [pc, #568]	; (801b580 <updateStringItem+0xa08>)
 801b348:	4413      	add	r3, r2
 801b34a:	3304      	adds	r3, #4
 801b34c:	4618      	mov	r0, r3
 801b34e:	f7e4 ffd1 	bl	80002f4 <strlen>
 801b352:	4603      	mov	r3, r0
 801b354:	b29a      	uxth	r2, r3
 801b356:	4b8b      	ldr	r3, [pc, #556]	; (801b584 <updateStringItem+0xa0c>)
 801b358:	889b      	ldrh	r3, [r3, #4]
 801b35a:	fb12 f303 	smulbb	r3, r2, r3
 801b35e:	b29b      	uxth	r3, r3
 801b360:	4423      	add	r3, r4
 801b362:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 801b364:	3301      	adds	r3, #1
 801b366:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801b368:	7fbb      	ldrb	r3, [r7, #30]
 801b36a:	b29a      	uxth	r2, r3
 801b36c:	7f7b      	ldrb	r3, [r7, #29]
 801b36e:	b299      	uxth	r1, r3
 801b370:	697b      	ldr	r3, [r7, #20]
 801b372:	b29b      	uxth	r3, r3
 801b374:	fb11 f303 	smulbb	r3, r1, r3
 801b378:	b29b      	uxth	r3, r3
 801b37a:	4413      	add	r3, r2
 801b37c:	b29a      	uxth	r2, r3
 801b37e:	4b81      	ldr	r3, [pc, #516]	; (801b584 <updateStringItem+0xa0c>)
 801b380:	88db      	ldrh	r3, [r3, #6]
 801b382:	4413      	add	r3, r2
 801b384:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 801b386:	3301      	adds	r3, #1
 801b388:	b29b      	uxth	r3, r3
 801b38a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b38e:	9200      	str	r2, [sp, #0]
 801b390:	4602      	mov	r2, r0
 801b392:	4631      	mov	r1, r6
 801b394:	4628      	mov	r0, r5
 801b396:	f7f3 feb5 	bl	800f104 <Paint_ClearWindows>
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b39a:	7ffb      	ldrb	r3, [r7, #31]
 801b39c:	b29b      	uxth	r3, r3
 801b39e:	3301      	adds	r3, #1
 801b3a0:	b298      	uxth	r0, r3
 801b3a2:	7fbb      	ldrb	r3, [r7, #30]
 801b3a4:	b29a      	uxth	r2, r3
 801b3a6:	7f7b      	ldrb	r3, [r7, #29]
 801b3a8:	b299      	uxth	r1, r3
 801b3aa:	697b      	ldr	r3, [r7, #20]
 801b3ac:	b29b      	uxth	r3, r3
 801b3ae:	fb11 f303 	smulbb	r3, r1, r3
 801b3b2:	b29b      	uxth	r3, r3
 801b3b4:	4413      	add	r3, r2
 801b3b6:	b29b      	uxth	r3, r3
 801b3b8:	3301      	adds	r3, #1
 801b3ba:	b299      	uxth	r1, r3
							stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 801b3bc:	697b      	ldr	r3, [r7, #20]
 801b3be:	011b      	lsls	r3, r3, #4
 801b3c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b3c4:	4a6e      	ldr	r2, [pc, #440]	; (801b580 <updateStringItem+0xa08>)
 801b3c6:	4413      	add	r3, r2
 801b3c8:	1d1a      	adds	r2, r3, #4
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b3ca:	2300      	movs	r3, #0
 801b3cc:	9301      	str	r3, [sp, #4]
 801b3ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b3d2:	9300      	str	r3, [sp, #0]
 801b3d4:	4b6b      	ldr	r3, [pc, #428]	; (801b584 <updateStringItem+0xa0c>)
 801b3d6:	f7f4 fab3 	bl	800f940 <Paint_DrawString_EN>
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b3da:	7ffb      	ldrb	r3, [r7, #31]
 801b3dc:	b29a      	uxth	r2, r3
 801b3de:	7f3b      	ldrb	r3, [r7, #28]
 801b3e0:	085b      	lsrs	r3, r3, #1
 801b3e2:	b2db      	uxtb	r3, r3
 801b3e4:	b29b      	uxth	r3, r3
 801b3e6:	4413      	add	r3, r2
 801b3e8:	b29b      	uxth	r3, r3
 801b3ea:	3301      	adds	r3, #1
 801b3ec:	b298      	uxth	r0, r3
 801b3ee:	7fbb      	ldrb	r3, [r7, #30]
 801b3f0:	b29a      	uxth	r2, r3
 801b3f2:	7f7b      	ldrb	r3, [r7, #29]
 801b3f4:	b299      	uxth	r1, r3
 801b3f6:	697b      	ldr	r3, [r7, #20]
 801b3f8:	b29b      	uxth	r3, r3
 801b3fa:	fb11 f303 	smulbb	r3, r1, r3
 801b3fe:	b29b      	uxth	r3, r3
 801b400:	4413      	add	r3, r2
 801b402:	b29b      	uxth	r3, r3
 801b404:	3301      	adds	r3, #1
 801b406:	b299      	uxth	r1, r3
							stringItem.valuesArray[stringItem.startValue], &Font12, WHITE,  BLACK);
 801b408:	4b5d      	ldr	r3, [pc, #372]	; (801b580 <updateStringItem+0xa08>)
 801b40a:	799b      	ldrb	r3, [r3, #6]
 801b40c:	011b      	lsls	r3, r3, #4
 801b40e:	3308      	adds	r3, #8
 801b410:	4a5b      	ldr	r2, [pc, #364]	; (801b580 <updateStringItem+0xa08>)
 801b412:	441a      	add	r2, r3
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b414:	2300      	movs	r3, #0
 801b416:	9301      	str	r3, [sp, #4]
 801b418:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b41c:	9300      	str	r3, [sp, #0]
 801b41e:	4b59      	ldr	r3, [pc, #356]	; (801b584 <updateStringItem+0xa0c>)
 801b420:	f7f4 fa8e 	bl	800f940 <Paint_DrawString_EN>
				}
			}
			// Render value text of "Multiplier" with Grey or White background
			if ( (i == 3) )
 801b424:	697b      	ldr	r3, [r7, #20]
 801b426:	2b03      	cmp	r3, #3
 801b428:	f040 835e 	bne.w	801bae8 <updateStringItem+0xf70>
			{
				char localString[8] = "";
 801b42c:	2300      	movs	r3, #0
 801b42e:	60fb      	str	r3, [r7, #12]
 801b430:	2300      	movs	r3, #0
 801b432:	613b      	str	r3, [r7, #16]
				sprintf(localString,"%d",stringItem.deltaMultiplier);
 801b434:	4b52      	ldr	r3, [pc, #328]	; (801b580 <updateStringItem+0xa08>)
 801b436:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 801b43a:	461a      	mov	r2, r3
 801b43c:	f107 030c 	add.w	r3, r7, #12
 801b440:	4951      	ldr	r1, [pc, #324]	; (801b588 <updateStringItem+0xa10>)
 801b442:	4618      	mov	r0, r3
 801b444:	f002 faca 	bl	801d9dc <siprintf>
				if (currentCursorPosition.cursorPosition == 0x03)
 801b448:	4b50      	ldr	r3, [pc, #320]	; (801b58c <updateStringItem+0xa14>)
 801b44a:	781b      	ldrb	r3, [r3, #0]
 801b44c:	2b03      	cmp	r3, #3
 801b44e:	f040 81b1 	bne.w	801b7b4 <updateStringItem+0xc3c>
				{
					if ( (howToDraw == LEFT) || (howToDraw == FULL) )
 801b452:	79fb      	ldrb	r3, [r7, #7]
 801b454:	2b03      	cmp	r3, #3
 801b456:	d003      	beq.n	801b460 <updateStringItem+0x8e8>
 801b458:	79fb      	ldrb	r3, [r7, #7]
 801b45a:	2b02      	cmp	r3, #2
 801b45c:	f040 8098 	bne.w	801b590 <updateStringItem+0xa18>
					{
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b460:	7ffb      	ldrb	r3, [r7, #31]
 801b462:	b29b      	uxth	r3, r3
 801b464:	3301      	adds	r3, #1
 801b466:	b298      	uxth	r0, r3
 801b468:	7fbb      	ldrb	r3, [r7, #30]
 801b46a:	b29a      	uxth	r2, r3
 801b46c:	7f7b      	ldrb	r3, [r7, #29]
 801b46e:	b299      	uxth	r1, r3
 801b470:	697b      	ldr	r3, [r7, #20]
 801b472:	b29b      	uxth	r3, r3
 801b474:	fb11 f303 	smulbb	r3, r1, r3
 801b478:	b29b      	uxth	r3, r3
 801b47a:	4413      	add	r3, r2
 801b47c:	b29b      	uxth	r3, r3
 801b47e:	3301      	adds	r3, #1
 801b480:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 801b482:	697b      	ldr	r3, [r7, #20]
 801b484:	011b      	lsls	r3, r3, #4
 801b486:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b48a:	4a3d      	ldr	r2, [pc, #244]	; (801b580 <updateStringItem+0xa08>)
 801b48c:	4413      	add	r3, r2
 801b48e:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b490:	2300      	movs	r3, #0
 801b492:	9301      	str	r3, [sp, #4]
 801b494:	f24c 6318 	movw	r3, #50712	; 0xc618
 801b498:	9300      	str	r3, [sp, #0]
 801b49a:	4b3a      	ldr	r3, [pc, #232]	; (801b584 <updateStringItem+0xa0c>)
 801b49c:	f7f4 fa50 	bl	800f940 <Paint_DrawString_EN>
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 801b4a0:	7ffb      	ldrb	r3, [r7, #31]
 801b4a2:	b29a      	uxth	r2, r3
 801b4a4:	7f3b      	ldrb	r3, [r7, #28]
 801b4a6:	085b      	lsrs	r3, r3, #1
 801b4a8:	b2db      	uxtb	r3, r3
 801b4aa:	b29b      	uxth	r3, r3
 801b4ac:	4413      	add	r3, r2
 801b4ae:	b29b      	uxth	r3, r3
 801b4b0:	3301      	adds	r3, #1
 801b4b2:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b4b4:	7fbb      	ldrb	r3, [r7, #30]
 801b4b6:	b29a      	uxth	r2, r3
 801b4b8:	7f7b      	ldrb	r3, [r7, #29]
 801b4ba:	b299      	uxth	r1, r3
 801b4bc:	697b      	ldr	r3, [r7, #20]
 801b4be:	b29b      	uxth	r3, r3
 801b4c0:	fb11 f303 	smulbb	r3, r1, r3
 801b4c4:	b29b      	uxth	r3, r3
 801b4c6:	4413      	add	r3, r2
 801b4c8:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 801b4ca:	3301      	adds	r3, #1
 801b4cc:	b29e      	uxth	r6, r3
								MenuRectangleStartX + MenuRectangleWidth / 2 + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 801b4ce:	7ffb      	ldrb	r3, [r7, #31]
 801b4d0:	b29a      	uxth	r2, r3
 801b4d2:	7f3b      	ldrb	r3, [r7, #28]
 801b4d4:	085b      	lsrs	r3, r3, #1
 801b4d6:	b2db      	uxtb	r3, r3
 801b4d8:	b29b      	uxth	r3, r3
 801b4da:	4413      	add	r3, r2
 801b4dc:	b29c      	uxth	r4, r3
 801b4de:	697b      	ldr	r3, [r7, #20]
 801b4e0:	011b      	lsls	r3, r3, #4
 801b4e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b4e6:	4a26      	ldr	r2, [pc, #152]	; (801b580 <updateStringItem+0xa08>)
 801b4e8:	4413      	add	r3, r2
 801b4ea:	3304      	adds	r3, #4
 801b4ec:	4618      	mov	r0, r3
 801b4ee:	f7e4 ff01 	bl	80002f4 <strlen>
 801b4f2:	4603      	mov	r3, r0
 801b4f4:	b29a      	uxth	r2, r3
 801b4f6:	4b23      	ldr	r3, [pc, #140]	; (801b584 <updateStringItem+0xa0c>)
 801b4f8:	889b      	ldrh	r3, [r3, #4]
 801b4fa:	fb12 f303 	smulbb	r3, r2, r3
 801b4fe:	b29b      	uxth	r3, r3
 801b500:	4423      	add	r3, r4
 801b502:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 801b504:	3301      	adds	r3, #1
 801b506:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801b508:	7fbb      	ldrb	r3, [r7, #30]
 801b50a:	b29a      	uxth	r2, r3
 801b50c:	7f7b      	ldrb	r3, [r7, #29]
 801b50e:	b299      	uxth	r1, r3
 801b510:	697b      	ldr	r3, [r7, #20]
 801b512:	b29b      	uxth	r3, r3
 801b514:	fb11 f303 	smulbb	r3, r1, r3
 801b518:	b29b      	uxth	r3, r3
 801b51a:	4413      	add	r3, r2
 801b51c:	b29a      	uxth	r2, r3
 801b51e:	4b19      	ldr	r3, [pc, #100]	; (801b584 <updateStringItem+0xa0c>)
 801b520:	88db      	ldrh	r3, [r3, #6]
 801b522:	4413      	add	r3, r2
 801b524:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 801b526:	3301      	adds	r3, #1
 801b528:	b29b      	uxth	r3, r3
 801b52a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b52e:	9200      	str	r2, [sp, #0]
 801b530:	4602      	mov	r2, r0
 801b532:	4631      	mov	r1, r6
 801b534:	4628      	mov	r0, r5
 801b536:	f7f3 fde5 	bl	800f104 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b53a:	7ffb      	ldrb	r3, [r7, #31]
 801b53c:	b29a      	uxth	r2, r3
 801b53e:	7f3b      	ldrb	r3, [r7, #28]
 801b540:	085b      	lsrs	r3, r3, #1
 801b542:	b2db      	uxtb	r3, r3
 801b544:	b29b      	uxth	r3, r3
 801b546:	4413      	add	r3, r2
 801b548:	b29b      	uxth	r3, r3
 801b54a:	3301      	adds	r3, #1
 801b54c:	b298      	uxth	r0, r3
 801b54e:	7fbb      	ldrb	r3, [r7, #30]
 801b550:	b29a      	uxth	r2, r3
 801b552:	7f7b      	ldrb	r3, [r7, #29]
 801b554:	b299      	uxth	r1, r3
 801b556:	697b      	ldr	r3, [r7, #20]
 801b558:	b29b      	uxth	r3, r3
 801b55a:	fb11 f303 	smulbb	r3, r1, r3
 801b55e:	b29b      	uxth	r3, r3
 801b560:	4413      	add	r3, r2
 801b562:	b29b      	uxth	r3, r3
 801b564:	3301      	adds	r3, #1
 801b566:	b299      	uxth	r1, r3
 801b568:	f107 020c 	add.w	r2, r7, #12
 801b56c:	2300      	movs	r3, #0
 801b56e:	9301      	str	r3, [sp, #4]
 801b570:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b574:	9300      	str	r3, [sp, #0]
 801b576:	4b03      	ldr	r3, [pc, #12]	; (801b584 <updateStringItem+0xa0c>)
 801b578:	f7f4 f9e2 	bl	800f940 <Paint_DrawString_EN>
 801b57c:	e2b4      	b.n	801bae8 <updateStringItem+0xf70>
 801b57e:	bf00      	nop
 801b580:	2400c37c 	.word	0x2400c37c
 801b584:	24000030 	.word	0x24000030
 801b588:	08021a94 	.word	0x08021a94
 801b58c:	2400afcc 	.word	0x2400afcc
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == DOWN)
 801b590:	79fb      	ldrb	r3, [r7, #7]
 801b592:	2b01      	cmp	r3, #1
 801b594:	f040 8083 	bne.w	801b69e <updateStringItem+0xb26>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b598:	7ffb      	ldrb	r3, [r7, #31]
 801b59a:	b29b      	uxth	r3, r3
 801b59c:	3301      	adds	r3, #1
 801b59e:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b5a0:	7fbb      	ldrb	r3, [r7, #30]
 801b5a2:	b29a      	uxth	r2, r3
 801b5a4:	7f7b      	ldrb	r3, [r7, #29]
 801b5a6:	b299      	uxth	r1, r3
 801b5a8:	697b      	ldr	r3, [r7, #20]
 801b5aa:	b29b      	uxth	r3, r3
 801b5ac:	fb11 f303 	smulbb	r3, r1, r3
 801b5b0:	b29b      	uxth	r3, r3
 801b5b2:	4413      	add	r3, r2
 801b5b4:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b5b6:	3301      	adds	r3, #1
 801b5b8:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 801b5ba:	7ffb      	ldrb	r3, [r7, #31]
 801b5bc:	b29c      	uxth	r4, r3
 801b5be:	697b      	ldr	r3, [r7, #20]
 801b5c0:	011b      	lsls	r3, r3, #4
 801b5c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b5c6:	4a79      	ldr	r2, [pc, #484]	; (801b7ac <updateStringItem+0xc34>)
 801b5c8:	4413      	add	r3, r2
 801b5ca:	3304      	adds	r3, #4
 801b5cc:	4618      	mov	r0, r3
 801b5ce:	f7e4 fe91 	bl	80002f4 <strlen>
 801b5d2:	4603      	mov	r3, r0
 801b5d4:	b29a      	uxth	r2, r3
 801b5d6:	4b76      	ldr	r3, [pc, #472]	; (801b7b0 <updateStringItem+0xc38>)
 801b5d8:	889b      	ldrh	r3, [r3, #4]
 801b5da:	fb12 f303 	smulbb	r3, r2, r3
 801b5de:	b29b      	uxth	r3, r3
 801b5e0:	4423      	add	r3, r4
 801b5e2:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b5e4:	3301      	adds	r3, #1
 801b5e6:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801b5e8:	7fbb      	ldrb	r3, [r7, #30]
 801b5ea:	b29a      	uxth	r2, r3
 801b5ec:	7f7b      	ldrb	r3, [r7, #29]
 801b5ee:	b299      	uxth	r1, r3
 801b5f0:	697b      	ldr	r3, [r7, #20]
 801b5f2:	b29b      	uxth	r3, r3
 801b5f4:	fb11 f303 	smulbb	r3, r1, r3
 801b5f8:	b29b      	uxth	r3, r3
 801b5fa:	4413      	add	r3, r2
 801b5fc:	b29a      	uxth	r2, r3
 801b5fe:	4b6c      	ldr	r3, [pc, #432]	; (801b7b0 <updateStringItem+0xc38>)
 801b600:	88db      	ldrh	r3, [r3, #6]
 801b602:	4413      	add	r3, r2
 801b604:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b606:	3301      	adds	r3, #1
 801b608:	b29b      	uxth	r3, r3
 801b60a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b60e:	9200      	str	r2, [sp, #0]
 801b610:	4602      	mov	r2, r0
 801b612:	4631      	mov	r1, r6
 801b614:	4628      	mov	r0, r5
 801b616:	f7f3 fd75 	bl	800f104 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b61a:	7ffb      	ldrb	r3, [r7, #31]
 801b61c:	b29b      	uxth	r3, r3
 801b61e:	3301      	adds	r3, #1
 801b620:	b298      	uxth	r0, r3
 801b622:	7fbb      	ldrb	r3, [r7, #30]
 801b624:	b29a      	uxth	r2, r3
 801b626:	7f7b      	ldrb	r3, [r7, #29]
 801b628:	b299      	uxth	r1, r3
 801b62a:	697b      	ldr	r3, [r7, #20]
 801b62c:	b29b      	uxth	r3, r3
 801b62e:	fb11 f303 	smulbb	r3, r1, r3
 801b632:	b29b      	uxth	r3, r3
 801b634:	4413      	add	r3, r2
 801b636:	b29b      	uxth	r3, r3
 801b638:	3301      	adds	r3, #1
 801b63a:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 801b63c:	697b      	ldr	r3, [r7, #20]
 801b63e:	011b      	lsls	r3, r3, #4
 801b640:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b644:	4a59      	ldr	r2, [pc, #356]	; (801b7ac <updateStringItem+0xc34>)
 801b646:	4413      	add	r3, r2
 801b648:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b64a:	2300      	movs	r3, #0
 801b64c:	9301      	str	r3, [sp, #4]
 801b64e:	f24c 6318 	movw	r3, #50712	; 0xc618
 801b652:	9300      	str	r3, [sp, #0]
 801b654:	4b56      	ldr	r3, [pc, #344]	; (801b7b0 <updateStringItem+0xc38>)
 801b656:	f7f4 f973 	bl	800f940 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b65a:	7ffb      	ldrb	r3, [r7, #31]
 801b65c:	b29a      	uxth	r2, r3
 801b65e:	7f3b      	ldrb	r3, [r7, #28]
 801b660:	085b      	lsrs	r3, r3, #1
 801b662:	b2db      	uxtb	r3, r3
 801b664:	b29b      	uxth	r3, r3
 801b666:	4413      	add	r3, r2
 801b668:	b29b      	uxth	r3, r3
 801b66a:	3301      	adds	r3, #1
 801b66c:	b298      	uxth	r0, r3
 801b66e:	7fbb      	ldrb	r3, [r7, #30]
 801b670:	b29a      	uxth	r2, r3
 801b672:	7f7b      	ldrb	r3, [r7, #29]
 801b674:	b299      	uxth	r1, r3
 801b676:	697b      	ldr	r3, [r7, #20]
 801b678:	b29b      	uxth	r3, r3
 801b67a:	fb11 f303 	smulbb	r3, r1, r3
 801b67e:	b29b      	uxth	r3, r3
 801b680:	4413      	add	r3, r2
 801b682:	b29b      	uxth	r3, r3
 801b684:	3301      	adds	r3, #1
 801b686:	b299      	uxth	r1, r3
 801b688:	f107 020c 	add.w	r2, r7, #12
 801b68c:	2300      	movs	r3, #0
 801b68e:	9301      	str	r3, [sp, #4]
 801b690:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b694:	9300      	str	r3, [sp, #0]
 801b696:	4b46      	ldr	r3, [pc, #280]	; (801b7b0 <updateStringItem+0xc38>)
 801b698:	f7f4 f952 	bl	800f940 <Paint_DrawString_EN>
 801b69c:	e224      	b.n	801bae8 <updateStringItem+0xf70>
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == UP)
 801b69e:	79fb      	ldrb	r3, [r7, #7]
 801b6a0:	2b00      	cmp	r3, #0
 801b6a2:	f040 8221 	bne.w	801bae8 <updateStringItem+0xf70>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b6a6:	7ffb      	ldrb	r3, [r7, #31]
 801b6a8:	b29b      	uxth	r3, r3
 801b6aa:	3301      	adds	r3, #1
 801b6ac:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b6ae:	7fbb      	ldrb	r3, [r7, #30]
 801b6b0:	b29a      	uxth	r2, r3
 801b6b2:	7f7b      	ldrb	r3, [r7, #29]
 801b6b4:	b299      	uxth	r1, r3
 801b6b6:	697b      	ldr	r3, [r7, #20]
 801b6b8:	b29b      	uxth	r3, r3
 801b6ba:	fb11 f303 	smulbb	r3, r1, r3
 801b6be:	b29b      	uxth	r3, r3
 801b6c0:	4413      	add	r3, r2
 801b6c2:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b6c4:	3301      	adds	r3, #1
 801b6c6:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 801b6c8:	7ffb      	ldrb	r3, [r7, #31]
 801b6ca:	b29c      	uxth	r4, r3
 801b6cc:	697b      	ldr	r3, [r7, #20]
 801b6ce:	011b      	lsls	r3, r3, #4
 801b6d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b6d4:	4a35      	ldr	r2, [pc, #212]	; (801b7ac <updateStringItem+0xc34>)
 801b6d6:	4413      	add	r3, r2
 801b6d8:	3304      	adds	r3, #4
 801b6da:	4618      	mov	r0, r3
 801b6dc:	f7e4 fe0a 	bl	80002f4 <strlen>
 801b6e0:	4603      	mov	r3, r0
 801b6e2:	b29a      	uxth	r2, r3
 801b6e4:	4b32      	ldr	r3, [pc, #200]	; (801b7b0 <updateStringItem+0xc38>)
 801b6e6:	889b      	ldrh	r3, [r3, #4]
 801b6e8:	fb12 f303 	smulbb	r3, r2, r3
 801b6ec:	b29b      	uxth	r3, r3
 801b6ee:	4423      	add	r3, r4
 801b6f0:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b6f2:	3301      	adds	r3, #1
 801b6f4:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801b6f6:	7fbb      	ldrb	r3, [r7, #30]
 801b6f8:	b29a      	uxth	r2, r3
 801b6fa:	7f7b      	ldrb	r3, [r7, #29]
 801b6fc:	b299      	uxth	r1, r3
 801b6fe:	697b      	ldr	r3, [r7, #20]
 801b700:	b29b      	uxth	r3, r3
 801b702:	fb11 f303 	smulbb	r3, r1, r3
 801b706:	b29b      	uxth	r3, r3
 801b708:	4413      	add	r3, r2
 801b70a:	b29a      	uxth	r2, r3
 801b70c:	4b28      	ldr	r3, [pc, #160]	; (801b7b0 <updateStringItem+0xc38>)
 801b70e:	88db      	ldrh	r3, [r3, #6]
 801b710:	4413      	add	r3, r2
 801b712:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b714:	3301      	adds	r3, #1
 801b716:	b29b      	uxth	r3, r3
 801b718:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b71c:	9200      	str	r2, [sp, #0]
 801b71e:	4602      	mov	r2, r0
 801b720:	4631      	mov	r1, r6
 801b722:	4628      	mov	r0, r5
 801b724:	f7f3 fcee 	bl	800f104 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b728:	7ffb      	ldrb	r3, [r7, #31]
 801b72a:	b29b      	uxth	r3, r3
 801b72c:	3301      	adds	r3, #1
 801b72e:	b298      	uxth	r0, r3
 801b730:	7fbb      	ldrb	r3, [r7, #30]
 801b732:	b29a      	uxth	r2, r3
 801b734:	7f7b      	ldrb	r3, [r7, #29]
 801b736:	b299      	uxth	r1, r3
 801b738:	697b      	ldr	r3, [r7, #20]
 801b73a:	b29b      	uxth	r3, r3
 801b73c:	fb11 f303 	smulbb	r3, r1, r3
 801b740:	b29b      	uxth	r3, r3
 801b742:	4413      	add	r3, r2
 801b744:	b29b      	uxth	r3, r3
 801b746:	3301      	adds	r3, #1
 801b748:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 801b74a:	697b      	ldr	r3, [r7, #20]
 801b74c:	011b      	lsls	r3, r3, #4
 801b74e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b752:	4a16      	ldr	r2, [pc, #88]	; (801b7ac <updateStringItem+0xc34>)
 801b754:	4413      	add	r3, r2
 801b756:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b758:	2300      	movs	r3, #0
 801b75a:	9301      	str	r3, [sp, #4]
 801b75c:	f24c 6318 	movw	r3, #50712	; 0xc618
 801b760:	9300      	str	r3, [sp, #0]
 801b762:	4b13      	ldr	r3, [pc, #76]	; (801b7b0 <updateStringItem+0xc38>)
 801b764:	f7f4 f8ec 	bl	800f940 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b768:	7ffb      	ldrb	r3, [r7, #31]
 801b76a:	b29a      	uxth	r2, r3
 801b76c:	7f3b      	ldrb	r3, [r7, #28]
 801b76e:	085b      	lsrs	r3, r3, #1
 801b770:	b2db      	uxtb	r3, r3
 801b772:	b29b      	uxth	r3, r3
 801b774:	4413      	add	r3, r2
 801b776:	b29b      	uxth	r3, r3
 801b778:	3301      	adds	r3, #1
 801b77a:	b298      	uxth	r0, r3
 801b77c:	7fbb      	ldrb	r3, [r7, #30]
 801b77e:	b29a      	uxth	r2, r3
 801b780:	7f7b      	ldrb	r3, [r7, #29]
 801b782:	b299      	uxth	r1, r3
 801b784:	697b      	ldr	r3, [r7, #20]
 801b786:	b29b      	uxth	r3, r3
 801b788:	fb11 f303 	smulbb	r3, r1, r3
 801b78c:	b29b      	uxth	r3, r3
 801b78e:	4413      	add	r3, r2
 801b790:	b29b      	uxth	r3, r3
 801b792:	3301      	adds	r3, #1
 801b794:	b299      	uxth	r1, r3
 801b796:	f107 020c 	add.w	r2, r7, #12
 801b79a:	2300      	movs	r3, #0
 801b79c:	9301      	str	r3, [sp, #4]
 801b79e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b7a2:	9300      	str	r3, [sp, #0]
 801b7a4:	4b02      	ldr	r3, [pc, #8]	; (801b7b0 <updateStringItem+0xc38>)
 801b7a6:	f7f4 f8cb 	bl	800f940 <Paint_DrawString_EN>
 801b7aa:	e19d      	b.n	801bae8 <updateStringItem+0xf70>
 801b7ac:	2400c37c 	.word	0x2400c37c
 801b7b0:	24000030 	.word	0x24000030
								localString, &Font12, WHITE,  BLACK);
					}
				}
				else if (currentCursorPosition.cursorPosition == MULTIPLIER)
 801b7b4:	4b85      	ldr	r3, [pc, #532]	; (801b9cc <updateStringItem+0xe54>)
 801b7b6:	781b      	ldrb	r3, [r3, #0]
 801b7b8:	2b0c      	cmp	r3, #12
 801b7ba:	f040 8113 	bne.w	801b9e4 <updateStringItem+0xe6c>
				{
					if (howToDraw == RIGHT)
 801b7be:	79fb      	ldrb	r3, [r7, #7]
 801b7c0:	2b04      	cmp	r3, #4
 801b7c2:	f040 8083 	bne.w	801b8cc <updateStringItem+0xd54>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b7c6:	7ffb      	ldrb	r3, [r7, #31]
 801b7c8:	b29b      	uxth	r3, r3
 801b7ca:	3301      	adds	r3, #1
 801b7cc:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b7ce:	7fbb      	ldrb	r3, [r7, #30]
 801b7d0:	b29a      	uxth	r2, r3
 801b7d2:	7f7b      	ldrb	r3, [r7, #29]
 801b7d4:	b299      	uxth	r1, r3
 801b7d6:	697b      	ldr	r3, [r7, #20]
 801b7d8:	b29b      	uxth	r3, r3
 801b7da:	fb11 f303 	smulbb	r3, r1, r3
 801b7de:	b29b      	uxth	r3, r3
 801b7e0:	4413      	add	r3, r2
 801b7e2:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b7e4:	3301      	adds	r3, #1
 801b7e6:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 801b7e8:	7ffb      	ldrb	r3, [r7, #31]
 801b7ea:	b29c      	uxth	r4, r3
 801b7ec:	697b      	ldr	r3, [r7, #20]
 801b7ee:	011b      	lsls	r3, r3, #4
 801b7f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b7f4:	4a76      	ldr	r2, [pc, #472]	; (801b9d0 <updateStringItem+0xe58>)
 801b7f6:	4413      	add	r3, r2
 801b7f8:	3304      	adds	r3, #4
 801b7fa:	4618      	mov	r0, r3
 801b7fc:	f7e4 fd7a 	bl	80002f4 <strlen>
 801b800:	4603      	mov	r3, r0
 801b802:	b29a      	uxth	r2, r3
 801b804:	4b73      	ldr	r3, [pc, #460]	; (801b9d4 <updateStringItem+0xe5c>)
 801b806:	889b      	ldrh	r3, [r3, #4]
 801b808:	fb12 f303 	smulbb	r3, r2, r3
 801b80c:	b29b      	uxth	r3, r3
 801b80e:	4423      	add	r3, r4
 801b810:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b812:	3301      	adds	r3, #1
 801b814:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801b816:	7fbb      	ldrb	r3, [r7, #30]
 801b818:	b29a      	uxth	r2, r3
 801b81a:	7f7b      	ldrb	r3, [r7, #29]
 801b81c:	b299      	uxth	r1, r3
 801b81e:	697b      	ldr	r3, [r7, #20]
 801b820:	b29b      	uxth	r3, r3
 801b822:	fb11 f303 	smulbb	r3, r1, r3
 801b826:	b29b      	uxth	r3, r3
 801b828:	4413      	add	r3, r2
 801b82a:	b29a      	uxth	r2, r3
 801b82c:	4b69      	ldr	r3, [pc, #420]	; (801b9d4 <updateStringItem+0xe5c>)
 801b82e:	88db      	ldrh	r3, [r3, #6]
 801b830:	4413      	add	r3, r2
 801b832:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b834:	3301      	adds	r3, #1
 801b836:	b29b      	uxth	r3, r3
 801b838:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b83c:	9200      	str	r2, [sp, #0]
 801b83e:	4602      	mov	r2, r0
 801b840:	4631      	mov	r1, r6
 801b842:	4628      	mov	r0, r5
 801b844:	f7f3 fc5e 	bl	800f104 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b848:	7ffb      	ldrb	r3, [r7, #31]
 801b84a:	b29b      	uxth	r3, r3
 801b84c:	3301      	adds	r3, #1
 801b84e:	b298      	uxth	r0, r3
 801b850:	7fbb      	ldrb	r3, [r7, #30]
 801b852:	b29a      	uxth	r2, r3
 801b854:	7f7b      	ldrb	r3, [r7, #29]
 801b856:	b299      	uxth	r1, r3
 801b858:	697b      	ldr	r3, [r7, #20]
 801b85a:	b29b      	uxth	r3, r3
 801b85c:	fb11 f303 	smulbb	r3, r1, r3
 801b860:	b29b      	uxth	r3, r3
 801b862:	4413      	add	r3, r2
 801b864:	b29b      	uxth	r3, r3
 801b866:	3301      	adds	r3, #1
 801b868:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 801b86a:	697b      	ldr	r3, [r7, #20]
 801b86c:	011b      	lsls	r3, r3, #4
 801b86e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b872:	4a57      	ldr	r2, [pc, #348]	; (801b9d0 <updateStringItem+0xe58>)
 801b874:	4413      	add	r3, r2
 801b876:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b878:	2300      	movs	r3, #0
 801b87a:	9301      	str	r3, [sp, #4]
 801b87c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b880:	9300      	str	r3, [sp, #0]
 801b882:	4b54      	ldr	r3, [pc, #336]	; (801b9d4 <updateStringItem+0xe5c>)
 801b884:	f7f4 f85c 	bl	800f940 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b888:	7ffb      	ldrb	r3, [r7, #31]
 801b88a:	b29a      	uxth	r2, r3
 801b88c:	7f3b      	ldrb	r3, [r7, #28]
 801b88e:	085b      	lsrs	r3, r3, #1
 801b890:	b2db      	uxtb	r3, r3
 801b892:	b29b      	uxth	r3, r3
 801b894:	4413      	add	r3, r2
 801b896:	b29b      	uxth	r3, r3
 801b898:	3301      	adds	r3, #1
 801b89a:	b298      	uxth	r0, r3
 801b89c:	7fbb      	ldrb	r3, [r7, #30]
 801b89e:	b29a      	uxth	r2, r3
 801b8a0:	7f7b      	ldrb	r3, [r7, #29]
 801b8a2:	b299      	uxth	r1, r3
 801b8a4:	697b      	ldr	r3, [r7, #20]
 801b8a6:	b29b      	uxth	r3, r3
 801b8a8:	fb11 f303 	smulbb	r3, r1, r3
 801b8ac:	b29b      	uxth	r3, r3
 801b8ae:	4413      	add	r3, r2
 801b8b0:	b29b      	uxth	r3, r3
 801b8b2:	3301      	adds	r3, #1
 801b8b4:	b299      	uxth	r1, r3
 801b8b6:	f107 020c 	add.w	r2, r7, #12
 801b8ba:	2300      	movs	r3, #0
 801b8bc:	9301      	str	r3, [sp, #4]
 801b8be:	f24c 6318 	movw	r3, #50712	; 0xc618
 801b8c2:	9300      	str	r3, [sp, #0]
 801b8c4:	4b43      	ldr	r3, [pc, #268]	; (801b9d4 <updateStringItem+0xe5c>)
 801b8c6:	f7f4 f83b 	bl	800f940 <Paint_DrawString_EN>
 801b8ca:	e10d      	b.n	801bae8 <updateStringItem+0xf70>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == DOWN)
 801b8cc:	79fb      	ldrb	r3, [r7, #7]
 801b8ce:	2b01      	cmp	r3, #1
 801b8d0:	d136      	bne.n	801b940 <updateStringItem+0xdc8>
					{

						multiplierIndex = 0;
 801b8d2:	4b41      	ldr	r3, [pc, #260]	; (801b9d8 <updateStringItem+0xe60>)
 801b8d4:	2200      	movs	r2, #0
 801b8d6:	701a      	strb	r2, [r3, #0]
						stringItem.deltaMultiplier = stringMultiplierArray[multiplierIndex];
 801b8d8:	4b3f      	ldr	r3, [pc, #252]	; (801b9d8 <updateStringItem+0xe60>)
 801b8da:	781b      	ldrb	r3, [r3, #0]
 801b8dc:	461a      	mov	r2, r3
 801b8de:	4b3f      	ldr	r3, [pc, #252]	; (801b9dc <updateStringItem+0xe64>)
 801b8e0:	5c9a      	ldrb	r2, [r3, r2]
 801b8e2:	4b3b      	ldr	r3, [pc, #236]	; (801b9d0 <updateStringItem+0xe58>)
 801b8e4:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
						sprintf(localString,"%d",stringItem.deltaMultiplier);
 801b8e8:	4b39      	ldr	r3, [pc, #228]	; (801b9d0 <updateStringItem+0xe58>)
 801b8ea:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 801b8ee:	461a      	mov	r2, r3
 801b8f0:	f107 030c 	add.w	r3, r7, #12
 801b8f4:	493a      	ldr	r1, [pc, #232]	; (801b9e0 <updateStringItem+0xe68>)
 801b8f6:	4618      	mov	r0, r3
 801b8f8:	f002 f870 	bl	801d9dc <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b8fc:	7ffb      	ldrb	r3, [r7, #31]
 801b8fe:	b29a      	uxth	r2, r3
 801b900:	7f3b      	ldrb	r3, [r7, #28]
 801b902:	085b      	lsrs	r3, r3, #1
 801b904:	b2db      	uxtb	r3, r3
 801b906:	b29b      	uxth	r3, r3
 801b908:	4413      	add	r3, r2
 801b90a:	b29b      	uxth	r3, r3
 801b90c:	3301      	adds	r3, #1
 801b90e:	b298      	uxth	r0, r3
 801b910:	7fbb      	ldrb	r3, [r7, #30]
 801b912:	b29a      	uxth	r2, r3
 801b914:	7f7b      	ldrb	r3, [r7, #29]
 801b916:	b299      	uxth	r1, r3
 801b918:	697b      	ldr	r3, [r7, #20]
 801b91a:	b29b      	uxth	r3, r3
 801b91c:	fb11 f303 	smulbb	r3, r1, r3
 801b920:	b29b      	uxth	r3, r3
 801b922:	4413      	add	r3, r2
 801b924:	b29b      	uxth	r3, r3
 801b926:	3301      	adds	r3, #1
 801b928:	b299      	uxth	r1, r3
 801b92a:	f107 020c 	add.w	r2, r7, #12
 801b92e:	2300      	movs	r3, #0
 801b930:	9301      	str	r3, [sp, #4]
 801b932:	f24c 6318 	movw	r3, #50712	; 0xc618
 801b936:	9300      	str	r3, [sp, #0]
 801b938:	4b26      	ldr	r3, [pc, #152]	; (801b9d4 <updateStringItem+0xe5c>)
 801b93a:	f7f4 f801 	bl	800f940 <Paint_DrawString_EN>
 801b93e:	e0d3      	b.n	801bae8 <updateStringItem+0xf70>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == UP)
 801b940:	79fb      	ldrb	r3, [r7, #7]
 801b942:	2b00      	cmp	r3, #0
 801b944:	f040 80d0 	bne.w	801bae8 <updateStringItem+0xf70>
					{
						multiplierIndex = fmin(multiplierIndex + 1, 7);
 801b948:	4b23      	ldr	r3, [pc, #140]	; (801b9d8 <updateStringItem+0xe60>)
 801b94a:	781b      	ldrb	r3, [r3, #0]
 801b94c:	3301      	adds	r3, #1
 801b94e:	ee07 3a90 	vmov	s15, r3
 801b952:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801b956:	eeb1 1b0c 	vmov.f64	d1, #28	; 0x40e00000  7.0
 801b95a:	eeb0 0b47 	vmov.f64	d0, d7
 801b95e:	f005 fbec 	bl	802113a <fmin>
 801b962:	eeb0 7b40 	vmov.f64	d7, d0
 801b966:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 801b96a:	edc7 7a00 	vstr	s15, [r7]
 801b96e:	683b      	ldr	r3, [r7, #0]
 801b970:	b2da      	uxtb	r2, r3
 801b972:	4b19      	ldr	r3, [pc, #100]	; (801b9d8 <updateStringItem+0xe60>)
 801b974:	701a      	strb	r2, [r3, #0]
						stringItem.deltaMultiplier = stringMultiplierArray[multiplierIndex];
 801b976:	4b18      	ldr	r3, [pc, #96]	; (801b9d8 <updateStringItem+0xe60>)
 801b978:	781b      	ldrb	r3, [r3, #0]
 801b97a:	461a      	mov	r2, r3
 801b97c:	4b17      	ldr	r3, [pc, #92]	; (801b9dc <updateStringItem+0xe64>)
 801b97e:	5c9a      	ldrb	r2, [r3, r2]
 801b980:	4b13      	ldr	r3, [pc, #76]	; (801b9d0 <updateStringItem+0xe58>)
 801b982:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
//						sprintf(localString,"%04d",stringItem.deltaMultiplier);
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b986:	7ffb      	ldrb	r3, [r7, #31]
 801b988:	b29a      	uxth	r2, r3
 801b98a:	7f3b      	ldrb	r3, [r7, #28]
 801b98c:	085b      	lsrs	r3, r3, #1
 801b98e:	b2db      	uxtb	r3, r3
 801b990:	b29b      	uxth	r3, r3
 801b992:	4413      	add	r3, r2
 801b994:	b29b      	uxth	r3, r3
 801b996:	3301      	adds	r3, #1
 801b998:	b298      	uxth	r0, r3
 801b99a:	7fbb      	ldrb	r3, [r7, #30]
 801b99c:	b29a      	uxth	r2, r3
 801b99e:	7f7b      	ldrb	r3, [r7, #29]
 801b9a0:	b299      	uxth	r1, r3
 801b9a2:	697b      	ldr	r3, [r7, #20]
 801b9a4:	b29b      	uxth	r3, r3
 801b9a6:	fb11 f303 	smulbb	r3, r1, r3
 801b9aa:	b29b      	uxth	r3, r3
 801b9ac:	4413      	add	r3, r2
 801b9ae:	b29b      	uxth	r3, r3
 801b9b0:	3301      	adds	r3, #1
 801b9b2:	b299      	uxth	r1, r3
 801b9b4:	f107 020c 	add.w	r2, r7, #12
 801b9b8:	2300      	movs	r3, #0
 801b9ba:	9301      	str	r3, [sp, #4]
 801b9bc:	f24c 6318 	movw	r3, #50712	; 0xc618
 801b9c0:	9300      	str	r3, [sp, #0]
 801b9c2:	4b04      	ldr	r3, [pc, #16]	; (801b9d4 <updateStringItem+0xe5c>)
 801b9c4:	f7f3 ffbc 	bl	800f940 <Paint_DrawString_EN>
 801b9c8:	e08e      	b.n	801bae8 <updateStringItem+0xf70>
 801b9ca:	bf00      	nop
 801b9cc:	2400afcc 	.word	0x2400afcc
 801b9d0:	2400c37c 	.word	0x2400c37c
 801b9d4:	24000030 	.word	0x24000030
 801b9d8:	2400a178 	.word	0x2400a178
 801b9dc:	2400a18c 	.word	0x2400a18c
 801b9e0:	08021a94 	.word	0x08021a94
								localString, &Font12, LGRAY,  BLACK);
					}
				}
				else
				{
					Paint_ClearWindows(MenuRectangleStartX + 1,
 801b9e4:	7ffb      	ldrb	r3, [r7, #31]
 801b9e6:	b29b      	uxth	r3, r3
 801b9e8:	3301      	adds	r3, #1
 801b9ea:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b9ec:	7fbb      	ldrb	r3, [r7, #30]
 801b9ee:	b29a      	uxth	r2, r3
 801b9f0:	7f7b      	ldrb	r3, [r7, #29]
 801b9f2:	b299      	uxth	r1, r3
 801b9f4:	697b      	ldr	r3, [r7, #20]
 801b9f6:	b29b      	uxth	r3, r3
 801b9f8:	fb11 f303 	smulbb	r3, r1, r3
 801b9fc:	b29b      	uxth	r3, r3
 801b9fe:	4413      	add	r3, r2
 801ba00:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 801ba02:	3301      	adds	r3, #1
 801ba04:	b29e      	uxth	r6, r3
							MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 801ba06:	7ffb      	ldrb	r3, [r7, #31]
 801ba08:	b29c      	uxth	r4, r3
 801ba0a:	697b      	ldr	r3, [r7, #20]
 801ba0c:	011b      	lsls	r3, r3, #4
 801ba0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801ba12:	4a95      	ldr	r2, [pc, #596]	; (801bc68 <updateStringItem+0x10f0>)
 801ba14:	4413      	add	r3, r2
 801ba16:	3304      	adds	r3, #4
 801ba18:	4618      	mov	r0, r3
 801ba1a:	f7e4 fc6b 	bl	80002f4 <strlen>
 801ba1e:	4603      	mov	r3, r0
 801ba20:	b29a      	uxth	r2, r3
 801ba22:	4b92      	ldr	r3, [pc, #584]	; (801bc6c <updateStringItem+0x10f4>)
 801ba24:	889b      	ldrh	r3, [r3, #4]
 801ba26:	fb12 f303 	smulbb	r3, r2, r3
 801ba2a:	b29b      	uxth	r3, r3
 801ba2c:	4423      	add	r3, r4
 801ba2e:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 801ba30:	3301      	adds	r3, #1
 801ba32:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801ba34:	7fbb      	ldrb	r3, [r7, #30]
 801ba36:	b29a      	uxth	r2, r3
 801ba38:	7f7b      	ldrb	r3, [r7, #29]
 801ba3a:	b299      	uxth	r1, r3
 801ba3c:	697b      	ldr	r3, [r7, #20]
 801ba3e:	b29b      	uxth	r3, r3
 801ba40:	fb11 f303 	smulbb	r3, r1, r3
 801ba44:	b29b      	uxth	r3, r3
 801ba46:	4413      	add	r3, r2
 801ba48:	b29a      	uxth	r2, r3
 801ba4a:	4b88      	ldr	r3, [pc, #544]	; (801bc6c <updateStringItem+0x10f4>)
 801ba4c:	88db      	ldrh	r3, [r3, #6]
 801ba4e:	4413      	add	r3, r2
 801ba50:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 801ba52:	3301      	adds	r3, #1
 801ba54:	b29b      	uxth	r3, r3
 801ba56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ba5a:	9200      	str	r2, [sp, #0]
 801ba5c:	4602      	mov	r2, r0
 801ba5e:	4631      	mov	r1, r6
 801ba60:	4628      	mov	r0, r5
 801ba62:	f7f3 fb4f 	bl	800f104 <Paint_ClearWindows>
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801ba66:	7ffb      	ldrb	r3, [r7, #31]
 801ba68:	b29b      	uxth	r3, r3
 801ba6a:	3301      	adds	r3, #1
 801ba6c:	b298      	uxth	r0, r3
 801ba6e:	7fbb      	ldrb	r3, [r7, #30]
 801ba70:	b29a      	uxth	r2, r3
 801ba72:	7f7b      	ldrb	r3, [r7, #29]
 801ba74:	b299      	uxth	r1, r3
 801ba76:	697b      	ldr	r3, [r7, #20]
 801ba78:	b29b      	uxth	r3, r3
 801ba7a:	fb11 f303 	smulbb	r3, r1, r3
 801ba7e:	b29b      	uxth	r3, r3
 801ba80:	4413      	add	r3, r2
 801ba82:	b29b      	uxth	r3, r3
 801ba84:	3301      	adds	r3, #1
 801ba86:	b299      	uxth	r1, r3
							stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 801ba88:	697b      	ldr	r3, [r7, #20]
 801ba8a:	011b      	lsls	r3, r3, #4
 801ba8c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801ba90:	4a75      	ldr	r2, [pc, #468]	; (801bc68 <updateStringItem+0x10f0>)
 801ba92:	4413      	add	r3, r2
 801ba94:	1d1a      	adds	r2, r3, #4
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801ba96:	2300      	movs	r3, #0
 801ba98:	9301      	str	r3, [sp, #4]
 801ba9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ba9e:	9300      	str	r3, [sp, #0]
 801baa0:	4b72      	ldr	r3, [pc, #456]	; (801bc6c <updateStringItem+0x10f4>)
 801baa2:	f7f3 ff4d 	bl	800f940 <Paint_DrawString_EN>
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801baa6:	7ffb      	ldrb	r3, [r7, #31]
 801baa8:	b29a      	uxth	r2, r3
 801baaa:	7f3b      	ldrb	r3, [r7, #28]
 801baac:	085b      	lsrs	r3, r3, #1
 801baae:	b2db      	uxtb	r3, r3
 801bab0:	b29b      	uxth	r3, r3
 801bab2:	4413      	add	r3, r2
 801bab4:	b29b      	uxth	r3, r3
 801bab6:	3301      	adds	r3, #1
 801bab8:	b298      	uxth	r0, r3
 801baba:	7fbb      	ldrb	r3, [r7, #30]
 801babc:	b29a      	uxth	r2, r3
 801babe:	7f7b      	ldrb	r3, [r7, #29]
 801bac0:	b299      	uxth	r1, r3
 801bac2:	697b      	ldr	r3, [r7, #20]
 801bac4:	b29b      	uxth	r3, r3
 801bac6:	fb11 f303 	smulbb	r3, r1, r3
 801baca:	b29b      	uxth	r3, r3
 801bacc:	4413      	add	r3, r2
 801bace:	b29b      	uxth	r3, r3
 801bad0:	3301      	adds	r3, #1
 801bad2:	b299      	uxth	r1, r3
 801bad4:	f107 020c 	add.w	r2, r7, #12
 801bad8:	2300      	movs	r3, #0
 801bada:	9301      	str	r3, [sp, #4]
 801badc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bae0:	9300      	str	r3, [sp, #0]
 801bae2:	4b62      	ldr	r3, [pc, #392]	; (801bc6c <updateStringItem+0x10f4>)
 801bae4:	f7f3 ff2c 	bl	800f940 <Paint_DrawString_EN>
							localString, &Font12, WHITE,  BLACK);
				}
			}
		}
		if ( (i >= stringItem.numberOfItemsInPage - 2) && (i < stringItem.numberOfItemsInPage) )
 801bae8:	4b5f      	ldr	r3, [pc, #380]	; (801bc68 <updateStringItem+0x10f0>)
 801baea:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 801baee:	3b02      	subs	r3, #2
 801baf0:	697a      	ldr	r2, [r7, #20]
 801baf2:	429a      	cmp	r2, r3
 801baf4:	f2c0 8281 	blt.w	801bffa <updateStringItem+0x1482>
 801baf8:	4b5b      	ldr	r3, [pc, #364]	; (801bc68 <updateStringItem+0x10f0>)
 801bafa:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 801bafe:	461a      	mov	r2, r3
 801bb00:	697b      	ldr	r3, [r7, #20]
 801bb02:	4293      	cmp	r3, r2
 801bb04:	f280 8279 	bge.w	801bffa <updateStringItem+0x1482>
		{
			if (howToDraw == FULL)
 801bb08:	79fb      	ldrb	r3, [r7, #7]
 801bb0a:	2b02      	cmp	r3, #2
 801bb0c:	d17a      	bne.n	801bc04 <updateStringItem+0x108c>
			{
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 801bb0e:	7ffb      	ldrb	r3, [r7, #31]
 801bb10:	b298      	uxth	r0, r3
 801bb12:	7fbb      	ldrb	r3, [r7, #30]
 801bb14:	b29a      	uxth	r2, r3
 801bb16:	7f7b      	ldrb	r3, [r7, #29]
 801bb18:	b299      	uxth	r1, r3
 801bb1a:	697b      	ldr	r3, [r7, #20]
 801bb1c:	b29b      	uxth	r3, r3
 801bb1e:	fb11 f303 	smulbb	r3, r1, r3
 801bb22:	b29b      	uxth	r3, r3
 801bb24:	4413      	add	r3, r2
 801bb26:	b29c      	uxth	r4, r3
 801bb28:	7ffb      	ldrb	r3, [r7, #31]
 801bb2a:	b29a      	uxth	r2, r3
 801bb2c:	7f3b      	ldrb	r3, [r7, #28]
 801bb2e:	b29b      	uxth	r3, r3
 801bb30:	4413      	add	r3, r2
 801bb32:	b29d      	uxth	r5, r3
 801bb34:	7fbb      	ldrb	r3, [r7, #30]
 801bb36:	b29a      	uxth	r2, r3
 801bb38:	7f7b      	ldrb	r3, [r7, #29]
 801bb3a:	b299      	uxth	r1, r3
						MenuRectangleStartX+MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 801bb3c:	697b      	ldr	r3, [r7, #20]
 801bb3e:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 801bb40:	b29b      	uxth	r3, r3
 801bb42:	fb11 f303 	smulbb	r3, r1, r3
 801bb46:	b29b      	uxth	r3, r3
 801bb48:	4413      	add	r3, r2
 801bb4a:	b29b      	uxth	r3, r3
 801bb4c:	2200      	movs	r2, #0
 801bb4e:	9202      	str	r2, [sp, #8]
 801bb50:	2201      	movs	r2, #1
 801bb52:	9201      	str	r2, [sp, #4]
 801bb54:	2200      	movs	r2, #0
 801bb56:	9200      	str	r2, [sp, #0]
 801bb58:	462a      	mov	r2, r5
 801bb5a:	4621      	mov	r1, r4
 801bb5c:	f7f3 fc4c 	bl	800f3f8 <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
				if (currentCursorPosition.cursorPosition == i)
 801bb60:	4b43      	ldr	r3, [pc, #268]	; (801bc70 <updateStringItem+0x10f8>)
 801bb62:	781b      	ldrb	r3, [r3, #0]
 801bb64:	461a      	mov	r2, r3
 801bb66:	697b      	ldr	r3, [r7, #20]
 801bb68:	4293      	cmp	r3, r2
 801bb6a:	d125      	bne.n	801bbb8 <updateStringItem+0x1040>
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801bb6c:	7efb      	ldrb	r3, [r7, #27]
 801bb6e:	b29c      	uxth	r4, r3
 801bb70:	7fbb      	ldrb	r3, [r7, #30]
 801bb72:	b29a      	uxth	r2, r3
 801bb74:	7f7b      	ldrb	r3, [r7, #29]
 801bb76:	b299      	uxth	r1, r3
 801bb78:	697b      	ldr	r3, [r7, #20]
 801bb7a:	b29b      	uxth	r3, r3
 801bb7c:	fb11 f303 	smulbb	r3, r1, r3
 801bb80:	b29b      	uxth	r3, r3
 801bb82:	4413      	add	r3, r2
 801bb84:	b29b      	uxth	r3, r3
 801bb86:	3301      	adds	r3, #1
 801bb88:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i], BLACK, LGRAY, 16, Font12);
 801bb8a:	697b      	ldr	r3, [r7, #20]
 801bb8c:	011b      	lsls	r3, r3, #4
 801bb8e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801bb92:	4a35      	ldr	r2, [pc, #212]	; (801bc68 <updateStringItem+0x10f0>)
 801bb94:	4413      	add	r3, r2
 801bb96:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801bb98:	4934      	ldr	r1, [pc, #208]	; (801bc6c <updateStringItem+0x10f4>)
 801bb9a:	ab02      	add	r3, sp, #8
 801bb9c:	c903      	ldmia	r1, {r0, r1}
 801bb9e:	e883 0003 	stmia.w	r3, {r0, r1}
 801bba2:	2310      	movs	r3, #16
 801bba4:	9301      	str	r3, [sp, #4]
 801bba6:	f24c 6318 	movw	r3, #50712	; 0xc618
 801bbaa:	9300      	str	r3, [sp, #0]
 801bbac:	2300      	movs	r3, #0
 801bbae:	4629      	mov	r1, r5
 801bbb0:	4620      	mov	r0, r4
 801bbb2:	f7fc f811 	bl	8017bd8 <centeredString>
 801bbb6:	e220      	b.n	801bffa <updateStringItem+0x1482>
				}
				else
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801bbb8:	7efb      	ldrb	r3, [r7, #27]
 801bbba:	b29c      	uxth	r4, r3
 801bbbc:	7fbb      	ldrb	r3, [r7, #30]
 801bbbe:	b29a      	uxth	r2, r3
 801bbc0:	7f7b      	ldrb	r3, [r7, #29]
 801bbc2:	b299      	uxth	r1, r3
 801bbc4:	697b      	ldr	r3, [r7, #20]
 801bbc6:	b29b      	uxth	r3, r3
 801bbc8:	fb11 f303 	smulbb	r3, r1, r3
 801bbcc:	b29b      	uxth	r3, r3
 801bbce:	4413      	add	r3, r2
 801bbd0:	b29b      	uxth	r3, r3
 801bbd2:	3301      	adds	r3, #1
 801bbd4:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i], BLACK, WHITE, 16, Font12);
 801bbd6:	697b      	ldr	r3, [r7, #20]
 801bbd8:	011b      	lsls	r3, r3, #4
 801bbda:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801bbde:	4a22      	ldr	r2, [pc, #136]	; (801bc68 <updateStringItem+0x10f0>)
 801bbe0:	4413      	add	r3, r2
 801bbe2:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801bbe4:	4921      	ldr	r1, [pc, #132]	; (801bc6c <updateStringItem+0x10f4>)
 801bbe6:	ab02      	add	r3, sp, #8
 801bbe8:	c903      	ldmia	r1, {r0, r1}
 801bbea:	e883 0003 	stmia.w	r3, {r0, r1}
 801bbee:	2310      	movs	r3, #16
 801bbf0:	9301      	str	r3, [sp, #4]
 801bbf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bbf6:	9300      	str	r3, [sp, #0]
 801bbf8:	2300      	movs	r3, #0
 801bbfa:	4629      	mov	r1, r5
 801bbfc:	4620      	mov	r0, r4
 801bbfe:	f7fb ffeb 	bl	8017bd8 <centeredString>
 801bc02:	e1fa      	b.n	801bffa <updateStringItem+0x1482>
				}
			}
			else if (howToDraw == DOWN)
 801bc04:	79fb      	ldrb	r3, [r7, #7]
 801bc06:	2b01      	cmp	r3, #1
 801bc08:	f040 80ca 	bne.w	801bda0 <updateStringItem+0x1228>
			{
				if ( (currentCursorPosition.cursorPosition == 4) && (i == 4) )
 801bc0c:	4b18      	ldr	r3, [pc, #96]	; (801bc70 <updateStringItem+0x10f8>)
 801bc0e:	781b      	ldrb	r3, [r3, #0]
 801bc10:	2b04      	cmp	r3, #4
 801bc12:	d12f      	bne.n	801bc74 <updateStringItem+0x10fc>
 801bc14:	697b      	ldr	r3, [r7, #20]
 801bc16:	2b04      	cmp	r3, #4
 801bc18:	d12c      	bne.n	801bc74 <updateStringItem+0x10fc>
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801bc1a:	7efb      	ldrb	r3, [r7, #27]
 801bc1c:	b29c      	uxth	r4, r3
 801bc1e:	7fbb      	ldrb	r3, [r7, #30]
 801bc20:	b29a      	uxth	r2, r3
 801bc22:	7f7b      	ldrb	r3, [r7, #29]
 801bc24:	b299      	uxth	r1, r3
 801bc26:	697b      	ldr	r3, [r7, #20]
 801bc28:	b29b      	uxth	r3, r3
 801bc2a:	fb11 f303 	smulbb	r3, r1, r3
 801bc2e:	b29b      	uxth	r3, r3
 801bc30:	4413      	add	r3, r2
 801bc32:	b29b      	uxth	r3, r3
 801bc34:	3301      	adds	r3, #1
 801bc36:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i], BLACK, LGRAY, 16, Font12);
 801bc38:	697b      	ldr	r3, [r7, #20]
 801bc3a:	011b      	lsls	r3, r3, #4
 801bc3c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801bc40:	4a09      	ldr	r2, [pc, #36]	; (801bc68 <updateStringItem+0x10f0>)
 801bc42:	4413      	add	r3, r2
 801bc44:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801bc46:	4909      	ldr	r1, [pc, #36]	; (801bc6c <updateStringItem+0x10f4>)
 801bc48:	ab02      	add	r3, sp, #8
 801bc4a:	c903      	ldmia	r1, {r0, r1}
 801bc4c:	e883 0003 	stmia.w	r3, {r0, r1}
 801bc50:	2310      	movs	r3, #16
 801bc52:	9301      	str	r3, [sp, #4]
 801bc54:	f24c 6318 	movw	r3, #50712	; 0xc618
 801bc58:	9300      	str	r3, [sp, #0]
 801bc5a:	2300      	movs	r3, #0
 801bc5c:	4629      	mov	r1, r5
 801bc5e:	4620      	mov	r0, r4
 801bc60:	f7fb ffba 	bl	8017bd8 <centeredString>
 801bc64:	e1c9      	b.n	801bffa <updateStringItem+0x1482>
 801bc66:	bf00      	nop
 801bc68:	2400c37c 	.word	0x2400c37c
 801bc6c:	24000030 	.word	0x24000030
 801bc70:	2400afcc 	.word	0x2400afcc
				}
				else if ( (currentCursorPosition.cursorPosition == 5) && (i == 5) )
 801bc74:	4b8b      	ldr	r3, [pc, #556]	; (801bea4 <updateStringItem+0x132c>)
 801bc76:	781b      	ldrb	r3, [r3, #0]
 801bc78:	2b05      	cmp	r3, #5
 801bc7a:	f040 81be 	bne.w	801bffa <updateStringItem+0x1482>
 801bc7e:	697b      	ldr	r3, [r7, #20]
 801bc80:	2b05      	cmp	r3, #5
 801bc82:	f040 81ba 	bne.w	801bffa <updateStringItem+0x1482>
				{
					Paint_ClearWindows(DisplayCenterWidth,
 801bc86:	7efb      	ldrb	r3, [r7, #27]
 801bc88:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 801bc8a:	7fbb      	ldrb	r3, [r7, #30]
 801bc8c:	b29a      	uxth	r2, r3
 801bc8e:	7f7b      	ldrb	r3, [r7, #29]
 801bc90:	b299      	uxth	r1, r3
 801bc92:	697b      	ldr	r3, [r7, #20]
 801bc94:	3b01      	subs	r3, #1
 801bc96:	b29b      	uxth	r3, r3
 801bc98:	fb11 f303 	smulbb	r3, r1, r3
 801bc9c:	b29b      	uxth	r3, r3
 801bc9e:	4413      	add	r3, r2
 801bca0:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth,
 801bca2:	3301      	adds	r3, #1
 801bca4:	b29e      	uxth	r6, r3
 801bca6:	7efb      	ldrb	r3, [r7, #27]
 801bca8:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(stringItem.itemsArray[i - 1]) * Font12.Width,
 801bcaa:	697b      	ldr	r3, [r7, #20]
 801bcac:	3b01      	subs	r3, #1
 801bcae:	011b      	lsls	r3, r3, #4
 801bcb0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801bcb4:	4a7c      	ldr	r2, [pc, #496]	; (801bea8 <updateStringItem+0x1330>)
 801bcb6:	4413      	add	r3, r2
 801bcb8:	3304      	adds	r3, #4
 801bcba:	4618      	mov	r0, r3
 801bcbc:	f7e4 fb1a 	bl	80002f4 <strlen>
 801bcc0:	4603      	mov	r3, r0
					Paint_ClearWindows(DisplayCenterWidth,
 801bcc2:	b29a      	uxth	r2, r3
							DisplayCenterWidth + strlen(stringItem.itemsArray[i - 1]) * Font12.Width,
 801bcc4:	4b79      	ldr	r3, [pc, #484]	; (801beac <updateStringItem+0x1334>)
 801bcc6:	889b      	ldrh	r3, [r3, #4]
					Paint_ClearWindows(DisplayCenterWidth,
 801bcc8:	fb12 f303 	smulbb	r3, r2, r3
 801bccc:	b29b      	uxth	r3, r3
 801bcce:	4423      	add	r3, r4
 801bcd0:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1 + Font12.Height, WHITE);
 801bcd2:	7fbb      	ldrb	r3, [r7, #30]
 801bcd4:	b29a      	uxth	r2, r3
 801bcd6:	7f7b      	ldrb	r3, [r7, #29]
 801bcd8:	b299      	uxth	r1, r3
 801bcda:	697b      	ldr	r3, [r7, #20]
 801bcdc:	3b01      	subs	r3, #1
 801bcde:	b29b      	uxth	r3, r3
 801bce0:	fb11 f303 	smulbb	r3, r1, r3
 801bce4:	b29b      	uxth	r3, r3
 801bce6:	4413      	add	r3, r2
 801bce8:	b29a      	uxth	r2, r3
 801bcea:	4b70      	ldr	r3, [pc, #448]	; (801beac <updateStringItem+0x1334>)
 801bcec:	88db      	ldrh	r3, [r3, #6]
 801bcee:	4413      	add	r3, r2
 801bcf0:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth,
 801bcf2:	3301      	adds	r3, #1
 801bcf4:	b29b      	uxth	r3, r3
 801bcf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bcfa:	9200      	str	r2, [sp, #0]
 801bcfc:	4602      	mov	r2, r0
 801bcfe:	4631      	mov	r1, r6
 801bd00:	4628      	mov	r0, r5
 801bd02:	f7f3 f9ff 	bl	800f104 <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 801bd06:	7efb      	ldrb	r3, [r7, #27]
 801bd08:	b29c      	uxth	r4, r3
 801bd0a:	7fbb      	ldrb	r3, [r7, #30]
 801bd0c:	b29a      	uxth	r2, r3
 801bd0e:	7f7b      	ldrb	r3, [r7, #29]
 801bd10:	b299      	uxth	r1, r3
 801bd12:	697b      	ldr	r3, [r7, #20]
 801bd14:	3b01      	subs	r3, #1
 801bd16:	b29b      	uxth	r3, r3
 801bd18:	fb11 f303 	smulbb	r3, r1, r3
 801bd1c:	b29b      	uxth	r3, r3
 801bd1e:	4413      	add	r3, r2
 801bd20:	b29b      	uxth	r3, r3
 801bd22:	3301      	adds	r3, #1
 801bd24:	b29d      	uxth	r5, r3
							stringItem.itemsArray[(i - 1)], BLACK, WHITE, 16, Font12);
 801bd26:	697b      	ldr	r3, [r7, #20]
 801bd28:	3b01      	subs	r3, #1
 801bd2a:	011b      	lsls	r3, r3, #4
 801bd2c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801bd30:	4a5d      	ldr	r2, [pc, #372]	; (801bea8 <updateStringItem+0x1330>)
 801bd32:	4413      	add	r3, r2
 801bd34:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 801bd36:	495d      	ldr	r1, [pc, #372]	; (801beac <updateStringItem+0x1334>)
 801bd38:	ab02      	add	r3, sp, #8
 801bd3a:	c903      	ldmia	r1, {r0, r1}
 801bd3c:	e883 0003 	stmia.w	r3, {r0, r1}
 801bd40:	2310      	movs	r3, #16
 801bd42:	9301      	str	r3, [sp, #4]
 801bd44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bd48:	9300      	str	r3, [sp, #0]
 801bd4a:	2300      	movs	r3, #0
 801bd4c:	4629      	mov	r1, r5
 801bd4e:	4620      	mov	r0, r4
 801bd50:	f7fb ff42 	bl	8017bd8 <centeredString>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801bd54:	7efb      	ldrb	r3, [r7, #27]
 801bd56:	b29c      	uxth	r4, r3
 801bd58:	7fbb      	ldrb	r3, [r7, #30]
 801bd5a:	b29a      	uxth	r2, r3
 801bd5c:	7f7b      	ldrb	r3, [r7, #29]
 801bd5e:	b299      	uxth	r1, r3
 801bd60:	697b      	ldr	r3, [r7, #20]
 801bd62:	b29b      	uxth	r3, r3
 801bd64:	fb11 f303 	smulbb	r3, r1, r3
 801bd68:	b29b      	uxth	r3, r3
 801bd6a:	4413      	add	r3, r2
 801bd6c:	b29b      	uxth	r3, r3
 801bd6e:	3301      	adds	r3, #1
 801bd70:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i], BLACK, LGRAY, 16, Font12);
 801bd72:	697b      	ldr	r3, [r7, #20]
 801bd74:	011b      	lsls	r3, r3, #4
 801bd76:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801bd7a:	4a4b      	ldr	r2, [pc, #300]	; (801bea8 <updateStringItem+0x1330>)
 801bd7c:	4413      	add	r3, r2
 801bd7e:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801bd80:	494a      	ldr	r1, [pc, #296]	; (801beac <updateStringItem+0x1334>)
 801bd82:	ab02      	add	r3, sp, #8
 801bd84:	c903      	ldmia	r1, {r0, r1}
 801bd86:	e883 0003 	stmia.w	r3, {r0, r1}
 801bd8a:	2310      	movs	r3, #16
 801bd8c:	9301      	str	r3, [sp, #4]
 801bd8e:	f24c 6318 	movw	r3, #50712	; 0xc618
 801bd92:	9300      	str	r3, [sp, #0]
 801bd94:	2300      	movs	r3, #0
 801bd96:	4629      	mov	r1, r5
 801bd98:	4620      	mov	r0, r4
 801bd9a:	f7fb ff1d 	bl	8017bd8 <centeredString>
 801bd9e:	e12c      	b.n	801bffa <updateStringItem+0x1482>
				}
			}
			else if (howToDraw == UP)
 801bda0:	79fb      	ldrb	r3, [r7, #7]
 801bda2:	2b00      	cmp	r3, #0
 801bda4:	f040 8129 	bne.w	801bffa <updateStringItem+0x1482>
			{
				if ( (currentCursorPosition.cursorPosition == 3) && (i == 4) )
 801bda8:	4b3e      	ldr	r3, [pc, #248]	; (801bea4 <updateStringItem+0x132c>)
 801bdaa:	781b      	ldrb	r3, [r3, #0]
 801bdac:	2b03      	cmp	r3, #3
 801bdae:	d17f      	bne.n	801beb0 <updateStringItem+0x1338>
 801bdb0:	697b      	ldr	r3, [r7, #20]
 801bdb2:	2b04      	cmp	r3, #4
 801bdb4:	d17c      	bne.n	801beb0 <updateStringItem+0x1338>
				{
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 801bdb6:	7efb      	ldrb	r3, [r7, #27]
 801bdb8:	b29c      	uxth	r4, r3
 801bdba:	697b      	ldr	r3, [r7, #20]
 801bdbc:	011b      	lsls	r3, r3, #4
 801bdbe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801bdc2:	4a39      	ldr	r2, [pc, #228]	; (801bea8 <updateStringItem+0x1330>)
 801bdc4:	4413      	add	r3, r2
 801bdc6:	3304      	adds	r3, #4
 801bdc8:	4618      	mov	r0, r3
 801bdca:	f7e4 fa93 	bl	80002f4 <strlen>
 801bdce:	4603      	mov	r3, r0
 801bdd0:	4a36      	ldr	r2, [pc, #216]	; (801beac <updateStringItem+0x1334>)
 801bdd2:	8892      	ldrh	r2, [r2, #4]
 801bdd4:	fb02 f303 	mul.w	r3, r2, r3
 801bdd8:	085b      	lsrs	r3, r3, #1
 801bdda:	b29b      	uxth	r3, r3
 801bddc:	1ae3      	subs	r3, r4, r3
 801bdde:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801bde0:	7fbb      	ldrb	r3, [r7, #30]
 801bde2:	b29a      	uxth	r2, r3
 801bde4:	7f7b      	ldrb	r3, [r7, #29]
 801bde6:	b299      	uxth	r1, r3
 801bde8:	697b      	ldr	r3, [r7, #20]
 801bdea:	b29b      	uxth	r3, r3
 801bdec:	fb11 f303 	smulbb	r3, r1, r3
 801bdf0:	b29b      	uxth	r3, r3
 801bdf2:	4413      	add	r3, r2
 801bdf4:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 801bdf6:	3301      	adds	r3, #1
 801bdf8:	b29e      	uxth	r6, r3
 801bdfa:	7efb      	ldrb	r3, [r7, #27]
 801bdfc:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(stringItem.itemsArray[i]) * Font12.Width /2,
 801bdfe:	697b      	ldr	r3, [r7, #20]
 801be00:	011b      	lsls	r3, r3, #4
 801be02:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801be06:	4a28      	ldr	r2, [pc, #160]	; (801bea8 <updateStringItem+0x1330>)
 801be08:	4413      	add	r3, r2
 801be0a:	3304      	adds	r3, #4
 801be0c:	4618      	mov	r0, r3
 801be0e:	f7e4 fa71 	bl	80002f4 <strlen>
 801be12:	4603      	mov	r3, r0
 801be14:	4a25      	ldr	r2, [pc, #148]	; (801beac <updateStringItem+0x1334>)
 801be16:	8892      	ldrh	r2, [r2, #4]
 801be18:	fb02 f303 	mul.w	r3, r2, r3
 801be1c:	085b      	lsrs	r3, r3, #1
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 801be1e:	b29b      	uxth	r3, r3
 801be20:	4423      	add	r3, r4
 801be22:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801be24:	7fbb      	ldrb	r3, [r7, #30]
 801be26:	b29a      	uxth	r2, r3
 801be28:	7f7b      	ldrb	r3, [r7, #29]
 801be2a:	b299      	uxth	r1, r3
 801be2c:	697b      	ldr	r3, [r7, #20]
 801be2e:	b29b      	uxth	r3, r3
 801be30:	fb11 f303 	smulbb	r3, r1, r3
 801be34:	b29b      	uxth	r3, r3
 801be36:	4413      	add	r3, r2
 801be38:	b29a      	uxth	r2, r3
 801be3a:	4b1c      	ldr	r3, [pc, #112]	; (801beac <updateStringItem+0x1334>)
 801be3c:	88db      	ldrh	r3, [r3, #6]
 801be3e:	4413      	add	r3, r2
 801be40:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 801be42:	3301      	adds	r3, #1
 801be44:	b29b      	uxth	r3, r3
 801be46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801be4a:	9200      	str	r2, [sp, #0]
 801be4c:	4602      	mov	r2, r0
 801be4e:	4631      	mov	r1, r6
 801be50:	4628      	mov	r0, r5
 801be52:	f7f3 f957 	bl	800f104 <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801be56:	7efb      	ldrb	r3, [r7, #27]
 801be58:	b29c      	uxth	r4, r3
 801be5a:	7fbb      	ldrb	r3, [r7, #30]
 801be5c:	b29a      	uxth	r2, r3
 801be5e:	7f7b      	ldrb	r3, [r7, #29]
 801be60:	b299      	uxth	r1, r3
 801be62:	697b      	ldr	r3, [r7, #20]
 801be64:	b29b      	uxth	r3, r3
 801be66:	fb11 f303 	smulbb	r3, r1, r3
 801be6a:	b29b      	uxth	r3, r3
 801be6c:	4413      	add	r3, r2
 801be6e:	b29b      	uxth	r3, r3
 801be70:	3301      	adds	r3, #1
 801be72:	b29d      	uxth	r5, r3
							stringItem.itemsArray[(i)], BLACK, WHITE, 16, Font12);
 801be74:	697b      	ldr	r3, [r7, #20]
 801be76:	011b      	lsls	r3, r3, #4
 801be78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801be7c:	4a0a      	ldr	r2, [pc, #40]	; (801bea8 <updateStringItem+0x1330>)
 801be7e:	4413      	add	r3, r2
 801be80:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801be82:	490a      	ldr	r1, [pc, #40]	; (801beac <updateStringItem+0x1334>)
 801be84:	ab02      	add	r3, sp, #8
 801be86:	c903      	ldmia	r1, {r0, r1}
 801be88:	e883 0003 	stmia.w	r3, {r0, r1}
 801be8c:	2310      	movs	r3, #16
 801be8e:	9301      	str	r3, [sp, #4]
 801be90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801be94:	9300      	str	r3, [sp, #0]
 801be96:	2300      	movs	r3, #0
 801be98:	4629      	mov	r1, r5
 801be9a:	4620      	mov	r0, r4
 801be9c:	f7fb fe9c 	bl	8017bd8 <centeredString>
 801bea0:	e0ab      	b.n	801bffa <updateStringItem+0x1482>
 801bea2:	bf00      	nop
 801bea4:	2400afcc 	.word	0x2400afcc
 801bea8:	2400c37c 	.word	0x2400c37c
 801beac:	24000030 	.word	0x24000030
					//						centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
					//								uint16Item.itemsArray[i], BLACK, LGRAY, 16);
				}
				else if ( (currentCursorPosition.cursorPosition == 4) && (i == 5) )
 801beb0:	4b5a      	ldr	r3, [pc, #360]	; (801c01c <updateStringItem+0x14a4>)
 801beb2:	781b      	ldrb	r3, [r3, #0]
 801beb4:	2b04      	cmp	r3, #4
 801beb6:	f040 80a0 	bne.w	801bffa <updateStringItem+0x1482>
 801beba:	697b      	ldr	r3, [r7, #20]
 801bebc:	2b05      	cmp	r3, #5
 801bebe:	f040 809c 	bne.w	801bffa <updateStringItem+0x1482>
				{
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 801bec2:	7efb      	ldrb	r3, [r7, #27]
 801bec4:	b29c      	uxth	r4, r3
 801bec6:	697b      	ldr	r3, [r7, #20]
 801bec8:	011b      	lsls	r3, r3, #4
 801beca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801bece:	4a54      	ldr	r2, [pc, #336]	; (801c020 <updateStringItem+0x14a8>)
 801bed0:	4413      	add	r3, r2
 801bed2:	3304      	adds	r3, #4
 801bed4:	4618      	mov	r0, r3
 801bed6:	f7e4 fa0d 	bl	80002f4 <strlen>
 801beda:	4603      	mov	r3, r0
 801bedc:	4a51      	ldr	r2, [pc, #324]	; (801c024 <updateStringItem+0x14ac>)
 801bede:	8892      	ldrh	r2, [r2, #4]
 801bee0:	fb02 f303 	mul.w	r3, r2, r3
 801bee4:	085b      	lsrs	r3, r3, #1
 801bee6:	b29b      	uxth	r3, r3
 801bee8:	1ae3      	subs	r3, r4, r3
 801beea:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801beec:	7fbb      	ldrb	r3, [r7, #30]
 801beee:	b29a      	uxth	r2, r3
 801bef0:	7f7b      	ldrb	r3, [r7, #29]
 801bef2:	b299      	uxth	r1, r3
 801bef4:	697b      	ldr	r3, [r7, #20]
 801bef6:	b29b      	uxth	r3, r3
 801bef8:	fb11 f303 	smulbb	r3, r1, r3
 801befc:	b29b      	uxth	r3, r3
 801befe:	4413      	add	r3, r2
 801bf00:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 801bf02:	3301      	adds	r3, #1
 801bf04:	b29e      	uxth	r6, r3
 801bf06:	7efb      	ldrb	r3, [r7, #27]
 801bf08:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(stringItem.itemsArray[i]) * Font12.Width /2,
 801bf0a:	697b      	ldr	r3, [r7, #20]
 801bf0c:	011b      	lsls	r3, r3, #4
 801bf0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801bf12:	4a43      	ldr	r2, [pc, #268]	; (801c020 <updateStringItem+0x14a8>)
 801bf14:	4413      	add	r3, r2
 801bf16:	3304      	adds	r3, #4
 801bf18:	4618      	mov	r0, r3
 801bf1a:	f7e4 f9eb 	bl	80002f4 <strlen>
 801bf1e:	4603      	mov	r3, r0
 801bf20:	4a40      	ldr	r2, [pc, #256]	; (801c024 <updateStringItem+0x14ac>)
 801bf22:	8892      	ldrh	r2, [r2, #4]
 801bf24:	fb02 f303 	mul.w	r3, r2, r3
 801bf28:	085b      	lsrs	r3, r3, #1
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 801bf2a:	b29b      	uxth	r3, r3
 801bf2c:	4423      	add	r3, r4
 801bf2e:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801bf30:	7fbb      	ldrb	r3, [r7, #30]
 801bf32:	b29a      	uxth	r2, r3
 801bf34:	7f7b      	ldrb	r3, [r7, #29]
 801bf36:	b299      	uxth	r1, r3
 801bf38:	697b      	ldr	r3, [r7, #20]
 801bf3a:	b29b      	uxth	r3, r3
 801bf3c:	fb11 f303 	smulbb	r3, r1, r3
 801bf40:	b29b      	uxth	r3, r3
 801bf42:	4413      	add	r3, r2
 801bf44:	b29a      	uxth	r2, r3
 801bf46:	4b37      	ldr	r3, [pc, #220]	; (801c024 <updateStringItem+0x14ac>)
 801bf48:	88db      	ldrh	r3, [r3, #6]
 801bf4a:	4413      	add	r3, r2
 801bf4c:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 801bf4e:	3301      	adds	r3, #1
 801bf50:	b29b      	uxth	r3, r3
 801bf52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bf56:	9200      	str	r2, [sp, #0]
 801bf58:	4602      	mov	r2, r0
 801bf5a:	4631      	mov	r1, r6
 801bf5c:	4628      	mov	r0, r5
 801bf5e:	f7f3 f8d1 	bl	800f104 <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801bf62:	7efb      	ldrb	r3, [r7, #27]
 801bf64:	b29c      	uxth	r4, r3
 801bf66:	7fbb      	ldrb	r3, [r7, #30]
 801bf68:	b29a      	uxth	r2, r3
 801bf6a:	7f7b      	ldrb	r3, [r7, #29]
 801bf6c:	b299      	uxth	r1, r3
 801bf6e:	697b      	ldr	r3, [r7, #20]
 801bf70:	b29b      	uxth	r3, r3
 801bf72:	fb11 f303 	smulbb	r3, r1, r3
 801bf76:	b29b      	uxth	r3, r3
 801bf78:	4413      	add	r3, r2
 801bf7a:	b29b      	uxth	r3, r3
 801bf7c:	3301      	adds	r3, #1
 801bf7e:	b29d      	uxth	r5, r3
							stringItem.itemsArray[(i)], BLACK, WHITE, 16, Font12);
 801bf80:	697b      	ldr	r3, [r7, #20]
 801bf82:	011b      	lsls	r3, r3, #4
 801bf84:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801bf88:	4a25      	ldr	r2, [pc, #148]	; (801c020 <updateStringItem+0x14a8>)
 801bf8a:	4413      	add	r3, r2
 801bf8c:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801bf8e:	4925      	ldr	r1, [pc, #148]	; (801c024 <updateStringItem+0x14ac>)
 801bf90:	ab02      	add	r3, sp, #8
 801bf92:	c903      	ldmia	r1, {r0, r1}
 801bf94:	e883 0003 	stmia.w	r3, {r0, r1}
 801bf98:	2310      	movs	r3, #16
 801bf9a:	9301      	str	r3, [sp, #4]
 801bf9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bfa0:	9300      	str	r3, [sp, #0]
 801bfa2:	2300      	movs	r3, #0
 801bfa4:	4629      	mov	r1, r5
 801bfa6:	4620      	mov	r0, r4
 801bfa8:	f7fb fe16 	bl	8017bd8 <centeredString>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 801bfac:	7efb      	ldrb	r3, [r7, #27]
 801bfae:	b29c      	uxth	r4, r3
 801bfb0:	7fbb      	ldrb	r3, [r7, #30]
 801bfb2:	b29a      	uxth	r2, r3
 801bfb4:	7f7b      	ldrb	r3, [r7, #29]
 801bfb6:	b299      	uxth	r1, r3
 801bfb8:	697b      	ldr	r3, [r7, #20]
 801bfba:	3b01      	subs	r3, #1
 801bfbc:	b29b      	uxth	r3, r3
 801bfbe:	fb11 f303 	smulbb	r3, r1, r3
 801bfc2:	b29b      	uxth	r3, r3
 801bfc4:	4413      	add	r3, r2
 801bfc6:	b29b      	uxth	r3, r3
 801bfc8:	3301      	adds	r3, #1
 801bfca:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i - 1], BLACK, LGRAY, 16, Font12);
 801bfcc:	697b      	ldr	r3, [r7, #20]
 801bfce:	3b01      	subs	r3, #1
 801bfd0:	011b      	lsls	r3, r3, #4
 801bfd2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801bfd6:	4a12      	ldr	r2, [pc, #72]	; (801c020 <updateStringItem+0x14a8>)
 801bfd8:	4413      	add	r3, r2
 801bfda:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 801bfdc:	4911      	ldr	r1, [pc, #68]	; (801c024 <updateStringItem+0x14ac>)
 801bfde:	ab02      	add	r3, sp, #8
 801bfe0:	c903      	ldmia	r1, {r0, r1}
 801bfe2:	e883 0003 	stmia.w	r3, {r0, r1}
 801bfe6:	2310      	movs	r3, #16
 801bfe8:	9301      	str	r3, [sp, #4]
 801bfea:	f24c 6318 	movw	r3, #50712	; 0xc618
 801bfee:	9300      	str	r3, [sp, #0]
 801bff0:	2300      	movs	r3, #0
 801bff2:	4629      	mov	r1, r5
 801bff4:	4620      	mov	r0, r4
 801bff6:	f7fb fdef 	bl	8017bd8 <centeredString>
	for (int i = 0; i < stringItem.numberOfItemsInPage ; i++)
 801bffa:	697b      	ldr	r3, [r7, #20]
 801bffc:	3301      	adds	r3, #1
 801bffe:	617b      	str	r3, [r7, #20]
 801c000:	4b07      	ldr	r3, [pc, #28]	; (801c020 <updateStringItem+0x14a8>)
 801c002:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 801c006:	461a      	mov	r2, r3
 801c008:	697b      	ldr	r3, [r7, #20]
 801c00a:	4293      	cmp	r3, r2
 801c00c:	f6fe add8 	blt.w	801abc0 <updateStringItem+0x48>
				}
			}
		}
	}
}
 801c010:	bf00      	nop
 801c012:	bf00      	nop
 801c014:	3724      	adds	r7, #36	; 0x24
 801c016:	46bd      	mov	sp, r7
 801c018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c01a:	bf00      	nop
 801c01c:	2400afcc 	.word	0x2400afcc
 801c020:	2400c37c 	.word	0x2400c37c
 801c024:	24000030 	.word	0x24000030

0801c028 <CT>:
#include "main.h"

char CTime[20] = {0};

char *CT()
{
 801c028:	b580      	push	{r7, lr}
 801c02a:	af00      	add	r7, sp, #0
	sprintf(CTime,"%7.3f", (float)HAL_GetTick()/1000.0);
 801c02c:	f7e6 fa8a 	bl	8002544 <HAL_GetTick>
 801c030:	ee07 0a90 	vmov	s15, r0
 801c034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c038:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801c03c:	ed9f 6b06 	vldr	d6, [pc, #24]	; 801c058 <CT+0x30>
 801c040:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801c044:	ec53 2b15 	vmov	r2, r3, d5
 801c048:	4905      	ldr	r1, [pc, #20]	; (801c060 <CT+0x38>)
 801c04a:	4806      	ldr	r0, [pc, #24]	; (801c064 <CT+0x3c>)
 801c04c:	f001 fcc6 	bl	801d9dc <siprintf>
    return CTime;
 801c050:	4b04      	ldr	r3, [pc, #16]	; (801c064 <CT+0x3c>)
}
 801c052:	4618      	mov	r0, r3
 801c054:	bd80      	pop	{r7, pc}
 801c056:	bf00      	nop
 801c058:	00000000 	.word	0x00000000
 801c05c:	408f4000 	.word	0x408f4000
 801c060:	08021a98 	.word	0x08021a98
 801c064:	2400af10 	.word	0x2400af10

0801c068 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801c068:	b580      	push	{r7, lr}
 801c06a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801c06c:	2201      	movs	r2, #1
 801c06e:	490e      	ldr	r1, [pc, #56]	; (801c0a8 <MX_USB_HOST_Init+0x40>)
 801c070:	480e      	ldr	r0, [pc, #56]	; (801c0ac <MX_USB_HOST_Init+0x44>)
 801c072:	f7f4 fc89 	bl	8010988 <USBH_Init>
 801c076:	4603      	mov	r3, r0
 801c078:	2b00      	cmp	r3, #0
 801c07a:	d001      	beq.n	801c080 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801c07c:	f7e5 fa6f 	bl	800155e <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801c080:	490b      	ldr	r1, [pc, #44]	; (801c0b0 <MX_USB_HOST_Init+0x48>)
 801c082:	480a      	ldr	r0, [pc, #40]	; (801c0ac <MX_USB_HOST_Init+0x44>)
 801c084:	f7f4 fd28 	bl	8010ad8 <USBH_RegisterClass>
 801c088:	4603      	mov	r3, r0
 801c08a:	2b00      	cmp	r3, #0
 801c08c:	d001      	beq.n	801c092 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801c08e:	f7e5 fa66 	bl	800155e <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801c092:	4806      	ldr	r0, [pc, #24]	; (801c0ac <MX_USB_HOST_Init+0x44>)
 801c094:	f7f4 fdb5 	bl	8010c02 <USBH_Start>
 801c098:	4603      	mov	r3, r0
 801c09a:	2b00      	cmp	r3, #0
 801c09c:	d001      	beq.n	801c0a2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801c09e:	f7e5 fa5e 	bl	800155e <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801c0a2:	bf00      	nop
 801c0a4:	bd80      	pop	{r7, pc}
 801c0a6:	bf00      	nop
 801c0a8:	0801c0b5 	.word	0x0801c0b5
 801c0ac:	24010a88 	.word	0x24010a88
 801c0b0:	24000040 	.word	0x24000040

0801c0b4 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801c0b4:	b480      	push	{r7}
 801c0b6:	b083      	sub	sp, #12
 801c0b8:	af00      	add	r7, sp, #0
 801c0ba:	6078      	str	r0, [r7, #4]
 801c0bc:	460b      	mov	r3, r1
 801c0be:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801c0c0:	78fb      	ldrb	r3, [r7, #3]
 801c0c2:	3b01      	subs	r3, #1
 801c0c4:	2b04      	cmp	r3, #4
 801c0c6:	d819      	bhi.n	801c0fc <USBH_UserProcess+0x48>
 801c0c8:	a201      	add	r2, pc, #4	; (adr r2, 801c0d0 <USBH_UserProcess+0x1c>)
 801c0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c0ce:	bf00      	nop
 801c0d0:	0801c0fd 	.word	0x0801c0fd
 801c0d4:	0801c0ed 	.word	0x0801c0ed
 801c0d8:	0801c0fd 	.word	0x0801c0fd
 801c0dc:	0801c0f5 	.word	0x0801c0f5
 801c0e0:	0801c0e5 	.word	0x0801c0e5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801c0e4:	4b09      	ldr	r3, [pc, #36]	; (801c10c <USBH_UserProcess+0x58>)
 801c0e6:	2203      	movs	r2, #3
 801c0e8:	701a      	strb	r2, [r3, #0]
  break;
 801c0ea:	e008      	b.n	801c0fe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801c0ec:	4b07      	ldr	r3, [pc, #28]	; (801c10c <USBH_UserProcess+0x58>)
 801c0ee:	2202      	movs	r2, #2
 801c0f0:	701a      	strb	r2, [r3, #0]
  break;
 801c0f2:	e004      	b.n	801c0fe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801c0f4:	4b05      	ldr	r3, [pc, #20]	; (801c10c <USBH_UserProcess+0x58>)
 801c0f6:	2201      	movs	r2, #1
 801c0f8:	701a      	strb	r2, [r3, #0]
  break;
 801c0fa:	e000      	b.n	801c0fe <USBH_UserProcess+0x4a>

  default:
  break;
 801c0fc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801c0fe:	bf00      	nop
 801c100:	370c      	adds	r7, #12
 801c102:	46bd      	mov	sp, r7
 801c104:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c108:	4770      	bx	lr
 801c10a:	bf00      	nop
 801c10c:	2400af24 	.word	0x2400af24

0801c110 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801c110:	b580      	push	{r7, lr}
 801c112:	b0b8      	sub	sp, #224	; 0xe0
 801c114:	af00      	add	r7, sp, #0
 801c116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c118:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801c11c:	2200      	movs	r2, #0
 801c11e:	601a      	str	r2, [r3, #0]
 801c120:	605a      	str	r2, [r3, #4]
 801c122:	609a      	str	r2, [r3, #8]
 801c124:	60da      	str	r2, [r3, #12]
 801c126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801c128:	f107 0310 	add.w	r3, r7, #16
 801c12c:	22bc      	movs	r2, #188	; 0xbc
 801c12e:	2100      	movs	r1, #0
 801c130:	4618      	mov	r0, r3
 801c132:	f000 fb29 	bl	801c788 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	681b      	ldr	r3, [r3, #0]
 801c13a:	4a3b      	ldr	r2, [pc, #236]	; (801c228 <HAL_HCD_MspInit+0x118>)
 801c13c:	4293      	cmp	r3, r2
 801c13e:	d16e      	bne.n	801c21e <HAL_HCD_MspInit+0x10e>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801c140:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801c144:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 801c146:	2301      	movs	r3, #1
 801c148:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 801c14a:	2312      	movs	r3, #18
 801c14c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 801c14e:	2302      	movs	r3, #2
 801c150:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 801c152:	2303      	movs	r3, #3
 801c154:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 801c156:	2302      	movs	r3, #2
 801c158:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 801c15a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 801c15e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 801c160:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801c164:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 801c166:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801c16a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801c16e:	f107 0310 	add.w	r3, r7, #16
 801c172:	4618      	mov	r0, r3
 801c174:	f7ec face 	bl	8008714 <HAL_RCCEx_PeriphCLKConfig>
 801c178:	4603      	mov	r3, r0
 801c17a:	2b00      	cmp	r3, #0
 801c17c:	d001      	beq.n	801c182 <HAL_HCD_MspInit+0x72>
    {
      Error_Handler();
 801c17e:	f7e5 f9ee 	bl	800155e <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801c182:	f7eb fb1b 	bl	80077bc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801c186:	4b29      	ldr	r3, [pc, #164]	; (801c22c <HAL_HCD_MspInit+0x11c>)
 801c188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801c18c:	4a27      	ldr	r2, [pc, #156]	; (801c22c <HAL_HCD_MspInit+0x11c>)
 801c18e:	f043 0301 	orr.w	r3, r3, #1
 801c192:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801c196:	4b25      	ldr	r3, [pc, #148]	; (801c22c <HAL_HCD_MspInit+0x11c>)
 801c198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801c19c:	f003 0301 	and.w	r3, r3, #1
 801c1a0:	60fb      	str	r3, [r7, #12]
 801c1a2:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 801c1a4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 801c1a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c1ac:	2302      	movs	r3, #2
 801c1ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c1b2:	2300      	movs	r3, #0
 801c1b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801c1b8:	2300      	movs	r3, #0
 801c1ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801c1be:	230a      	movs	r3, #10
 801c1c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c1c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801c1c8:	4619      	mov	r1, r3
 801c1ca:	4819      	ldr	r0, [pc, #100]	; (801c230 <HAL_HCD_MspInit+0x120>)
 801c1cc:	f7e9 f9bc 	bl	8005548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801c1d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 801c1d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801c1d8:	2300      	movs	r3, #0
 801c1da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c1de:	2300      	movs	r3, #0
 801c1e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c1e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801c1e8:	4619      	mov	r1, r3
 801c1ea:	4811      	ldr	r0, [pc, #68]	; (801c230 <HAL_HCD_MspInit+0x120>)
 801c1ec:	f7e9 f9ac 	bl	8005548 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801c1f0:	4b0e      	ldr	r3, [pc, #56]	; (801c22c <HAL_HCD_MspInit+0x11c>)
 801c1f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801c1f6:	4a0d      	ldr	r2, [pc, #52]	; (801c22c <HAL_HCD_MspInit+0x11c>)
 801c1f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801c1fc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801c200:	4b0a      	ldr	r3, [pc, #40]	; (801c22c <HAL_HCD_MspInit+0x11c>)
 801c202:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801c206:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801c20a:	60bb      	str	r3, [r7, #8]
 801c20c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801c20e:	2200      	movs	r2, #0
 801c210:	2100      	movs	r1, #0
 801c212:	2065      	movs	r0, #101	; 0x65
 801c214:	f7e6 faad 	bl	8002772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801c218:	2065      	movs	r0, #101	; 0x65
 801c21a:	f7e6 fac4 	bl	80027a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801c21e:	bf00      	nop
 801c220:	37e0      	adds	r7, #224	; 0xe0
 801c222:	46bd      	mov	sp, r7
 801c224:	bd80      	pop	{r7, pc}
 801c226:	bf00      	nop
 801c228:	40080000 	.word	0x40080000
 801c22c:	58024400 	.word	0x58024400
 801c230:	58020000 	.word	0x58020000

0801c234 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801c234:	b580      	push	{r7, lr}
 801c236:	b082      	sub	sp, #8
 801c238:	af00      	add	r7, sp, #0
 801c23a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801c23c:	687b      	ldr	r3, [r7, #4]
 801c23e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801c242:	4618      	mov	r0, r3
 801c244:	f7f4 fcfe 	bl	8010c44 <USBH_LL_IncTimer>
}
 801c248:	bf00      	nop
 801c24a:	3708      	adds	r7, #8
 801c24c:	46bd      	mov	sp, r7
 801c24e:	bd80      	pop	{r7, pc}

0801c250 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801c250:	b580      	push	{r7, lr}
 801c252:	b082      	sub	sp, #8
 801c254:	af00      	add	r7, sp, #0
 801c256:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801c258:	687b      	ldr	r3, [r7, #4]
 801c25a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801c25e:	4618      	mov	r0, r3
 801c260:	f7f4 fd42 	bl	8010ce8 <USBH_LL_Connect>
}
 801c264:	bf00      	nop
 801c266:	3708      	adds	r7, #8
 801c268:	46bd      	mov	sp, r7
 801c26a:	bd80      	pop	{r7, pc}

0801c26c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801c26c:	b580      	push	{r7, lr}
 801c26e:	b082      	sub	sp, #8
 801c270:	af00      	add	r7, sp, #0
 801c272:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801c274:	687b      	ldr	r3, [r7, #4]
 801c276:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801c27a:	4618      	mov	r0, r3
 801c27c:	f7f4 fd51 	bl	8010d22 <USBH_LL_Disconnect>
}
 801c280:	bf00      	nop
 801c282:	3708      	adds	r7, #8
 801c284:	46bd      	mov	sp, r7
 801c286:	bd80      	pop	{r7, pc}

0801c288 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801c288:	b480      	push	{r7}
 801c28a:	b083      	sub	sp, #12
 801c28c:	af00      	add	r7, sp, #0
 801c28e:	6078      	str	r0, [r7, #4]
 801c290:	460b      	mov	r3, r1
 801c292:	70fb      	strb	r3, [r7, #3]
 801c294:	4613      	mov	r3, r2
 801c296:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 801c298:	bf00      	nop
 801c29a:	370c      	adds	r7, #12
 801c29c:	46bd      	mov	sp, r7
 801c29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2a2:	4770      	bx	lr

0801c2a4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801c2a4:	b580      	push	{r7, lr}
 801c2a6:	b082      	sub	sp, #8
 801c2a8:	af00      	add	r7, sp, #0
 801c2aa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801c2ac:	687b      	ldr	r3, [r7, #4]
 801c2ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801c2b2:	4618      	mov	r0, r3
 801c2b4:	f7f4 fcf8 	bl	8010ca8 <USBH_LL_PortEnabled>
}
 801c2b8:	bf00      	nop
 801c2ba:	3708      	adds	r7, #8
 801c2bc:	46bd      	mov	sp, r7
 801c2be:	bd80      	pop	{r7, pc}

0801c2c0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801c2c0:	b580      	push	{r7, lr}
 801c2c2:	b082      	sub	sp, #8
 801c2c4:	af00      	add	r7, sp, #0
 801c2c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801c2c8:	687b      	ldr	r3, [r7, #4]
 801c2ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801c2ce:	4618      	mov	r0, r3
 801c2d0:	f7f4 fcfa 	bl	8010cc8 <USBH_LL_PortDisabled>
}
 801c2d4:	bf00      	nop
 801c2d6:	3708      	adds	r7, #8
 801c2d8:	46bd      	mov	sp, r7
 801c2da:	bd80      	pop	{r7, pc}

0801c2dc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801c2dc:	b580      	push	{r7, lr}
 801c2de:	b082      	sub	sp, #8
 801c2e0:	af00      	add	r7, sp, #0
 801c2e2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801c2e4:	687a      	ldr	r2, [r7, #4]
 801c2e6:	f643 230c 	movw	r3, #14860	; 0x3a0c
 801c2ea:	4413      	add	r3, r2
 801c2ec:	781b      	ldrb	r3, [r3, #0]
 801c2ee:	2b01      	cmp	r3, #1
 801c2f0:	d12b      	bne.n	801c34a <USBH_LL_Init+0x6e>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801c2f2:	4a18      	ldr	r2, [pc, #96]	; (801c354 <USBH_LL_Init+0x78>)
 801c2f4:	687b      	ldr	r3, [r7, #4]
 801c2f6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801c2fa:	687a      	ldr	r2, [r7, #4]
 801c2fc:	f643 2310 	movw	r3, #14864	; 0x3a10
 801c300:	4413      	add	r3, r2
 801c302:	4a14      	ldr	r2, [pc, #80]	; (801c354 <USBH_LL_Init+0x78>)
 801c304:	601a      	str	r2, [r3, #0]

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801c306:	4b13      	ldr	r3, [pc, #76]	; (801c354 <USBH_LL_Init+0x78>)
 801c308:	4a13      	ldr	r2, [pc, #76]	; (801c358 <USBH_LL_Init+0x7c>)
 801c30a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 801c30c:	4b11      	ldr	r3, [pc, #68]	; (801c354 <USBH_LL_Init+0x78>)
 801c30e:	2210      	movs	r2, #16
 801c310:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801c312:	4b10      	ldr	r3, [pc, #64]	; (801c354 <USBH_LL_Init+0x78>)
 801c314:	2201      	movs	r2, #1
 801c316:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801c318:	4b0e      	ldr	r3, [pc, #56]	; (801c354 <USBH_LL_Init+0x78>)
 801c31a:	2200      	movs	r2, #0
 801c31c:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801c31e:	4b0d      	ldr	r3, [pc, #52]	; (801c354 <USBH_LL_Init+0x78>)
 801c320:	2202      	movs	r2, #2
 801c322:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801c324:	4b0b      	ldr	r3, [pc, #44]	; (801c354 <USBH_LL_Init+0x78>)
 801c326:	2200      	movs	r2, #0
 801c328:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801c32a:	480a      	ldr	r0, [pc, #40]	; (801c354 <USBH_LL_Init+0x78>)
 801c32c:	f7e9 fb07 	bl	800593e <HAL_HCD_Init>
 801c330:	4603      	mov	r3, r0
 801c332:	2b00      	cmp	r3, #0
 801c334:	d001      	beq.n	801c33a <USBH_LL_Init+0x5e>
  {
    Error_Handler( );
 801c336:	f7e5 f912 	bl	800155e <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801c33a:	4806      	ldr	r0, [pc, #24]	; (801c354 <USBH_LL_Init+0x78>)
 801c33c:	f7e9 fed6 	bl	80060ec <HAL_HCD_GetCurrentFrame>
 801c340:	4603      	mov	r3, r0
 801c342:	4619      	mov	r1, r3
 801c344:	6878      	ldr	r0, [r7, #4]
 801c346:	f7f4 fc6c 	bl	8010c22 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801c34a:	2300      	movs	r3, #0
}
 801c34c:	4618      	mov	r0, r3
 801c34e:	3708      	adds	r7, #8
 801c350:	46bd      	mov	sp, r7
 801c352:	bd80      	pop	{r7, pc}
 801c354:	240144e0 	.word	0x240144e0
 801c358:	40080000 	.word	0x40080000

0801c35c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801c35c:	b580      	push	{r7, lr}
 801c35e:	b084      	sub	sp, #16
 801c360:	af00      	add	r7, sp, #0
 801c362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c364:	2300      	movs	r3, #0
 801c366:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801c368:	2300      	movs	r3, #0
 801c36a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801c36c:	687a      	ldr	r2, [r7, #4]
 801c36e:	f643 2310 	movw	r3, #14864	; 0x3a10
 801c372:	4413      	add	r3, r2
 801c374:	681b      	ldr	r3, [r3, #0]
 801c376:	4618      	mov	r0, r3
 801c378:	f7e9 fe50 	bl	800601c <HAL_HCD_Start>
 801c37c:	4603      	mov	r3, r0
 801c37e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801c380:	7bfb      	ldrb	r3, [r7, #15]
 801c382:	4618      	mov	r0, r3
 801c384:	f000 f91e 	bl	801c5c4 <USBH_Get_USB_Status>
 801c388:	4603      	mov	r3, r0
 801c38a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c38c:	7bbb      	ldrb	r3, [r7, #14]
}
 801c38e:	4618      	mov	r0, r3
 801c390:	3710      	adds	r7, #16
 801c392:	46bd      	mov	sp, r7
 801c394:	bd80      	pop	{r7, pc}

0801c396 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801c396:	b580      	push	{r7, lr}
 801c398:	b084      	sub	sp, #16
 801c39a:	af00      	add	r7, sp, #0
 801c39c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c39e:	2300      	movs	r3, #0
 801c3a0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801c3a2:	2300      	movs	r3, #0
 801c3a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801c3a6:	687a      	ldr	r2, [r7, #4]
 801c3a8:	f643 2310 	movw	r3, #14864	; 0x3a10
 801c3ac:	4413      	add	r3, r2
 801c3ae:	681b      	ldr	r3, [r3, #0]
 801c3b0:	4618      	mov	r0, r3
 801c3b2:	f7e9 fe56 	bl	8006062 <HAL_HCD_Stop>
 801c3b6:	4603      	mov	r3, r0
 801c3b8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801c3ba:	7bfb      	ldrb	r3, [r7, #15]
 801c3bc:	4618      	mov	r0, r3
 801c3be:	f000 f901 	bl	801c5c4 <USBH_Get_USB_Status>
 801c3c2:	4603      	mov	r3, r0
 801c3c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c3c6:	7bbb      	ldrb	r3, [r7, #14]
}
 801c3c8:	4618      	mov	r0, r3
 801c3ca:	3710      	adds	r7, #16
 801c3cc:	46bd      	mov	sp, r7
 801c3ce:	bd80      	pop	{r7, pc}

0801c3d0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801c3d0:	b580      	push	{r7, lr}
 801c3d2:	b082      	sub	sp, #8
 801c3d4:	af00      	add	r7, sp, #0
 801c3d6:	6078      	str	r0, [r7, #4]
 801c3d8:	460b      	mov	r3, r1
 801c3da:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801c3dc:	687a      	ldr	r2, [r7, #4]
 801c3de:	f643 2310 	movw	r3, #14864	; 0x3a10
 801c3e2:	4413      	add	r3, r2
 801c3e4:	681b      	ldr	r3, [r3, #0]
 801c3e6:	78fa      	ldrb	r2, [r7, #3]
 801c3e8:	4611      	mov	r1, r2
 801c3ea:	4618      	mov	r0, r3
 801c3ec:	f7e9 fe6a 	bl	80060c4 <HAL_HCD_HC_GetXferCount>
 801c3f0:	4603      	mov	r3, r0
}
 801c3f2:	4618      	mov	r0, r3
 801c3f4:	3708      	adds	r7, #8
 801c3f6:	46bd      	mov	sp, r7
 801c3f8:	bd80      	pop	{r7, pc}

0801c3fa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801c3fa:	b590      	push	{r4, r7, lr}
 801c3fc:	b089      	sub	sp, #36	; 0x24
 801c3fe:	af04      	add	r7, sp, #16
 801c400:	6078      	str	r0, [r7, #4]
 801c402:	4608      	mov	r0, r1
 801c404:	4611      	mov	r1, r2
 801c406:	461a      	mov	r2, r3
 801c408:	4603      	mov	r3, r0
 801c40a:	70fb      	strb	r3, [r7, #3]
 801c40c:	460b      	mov	r3, r1
 801c40e:	70bb      	strb	r3, [r7, #2]
 801c410:	4613      	mov	r3, r2
 801c412:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c414:	2300      	movs	r3, #0
 801c416:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801c418:	2300      	movs	r3, #0
 801c41a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801c41c:	687a      	ldr	r2, [r7, #4]
 801c41e:	f643 2310 	movw	r3, #14864	; 0x3a10
 801c422:	4413      	add	r3, r2
 801c424:	6818      	ldr	r0, [r3, #0]
 801c426:	787c      	ldrb	r4, [r7, #1]
 801c428:	78ba      	ldrb	r2, [r7, #2]
 801c42a:	78f9      	ldrb	r1, [r7, #3]
 801c42c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801c42e:	9302      	str	r3, [sp, #8]
 801c430:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c434:	9301      	str	r3, [sp, #4]
 801c436:	f897 3020 	ldrb.w	r3, [r7, #32]
 801c43a:	9300      	str	r3, [sp, #0]
 801c43c:	4623      	mov	r3, r4
 801c43e:	f7e9 fae0 	bl	8005a02 <HAL_HCD_HC_Init>
 801c442:	4603      	mov	r3, r0
 801c444:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801c446:	7bfb      	ldrb	r3, [r7, #15]
 801c448:	4618      	mov	r0, r3
 801c44a:	f000 f8bb 	bl	801c5c4 <USBH_Get_USB_Status>
 801c44e:	4603      	mov	r3, r0
 801c450:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c452:	7bbb      	ldrb	r3, [r7, #14]
}
 801c454:	4618      	mov	r0, r3
 801c456:	3714      	adds	r7, #20
 801c458:	46bd      	mov	sp, r7
 801c45a:	bd90      	pop	{r4, r7, pc}

0801c45c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801c45c:	b580      	push	{r7, lr}
 801c45e:	b084      	sub	sp, #16
 801c460:	af00      	add	r7, sp, #0
 801c462:	6078      	str	r0, [r7, #4]
 801c464:	460b      	mov	r3, r1
 801c466:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c468:	2300      	movs	r3, #0
 801c46a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801c46c:	2300      	movs	r3, #0
 801c46e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801c470:	687a      	ldr	r2, [r7, #4]
 801c472:	f643 2310 	movw	r3, #14864	; 0x3a10
 801c476:	4413      	add	r3, r2
 801c478:	681b      	ldr	r3, [r3, #0]
 801c47a:	78fa      	ldrb	r2, [r7, #3]
 801c47c:	4611      	mov	r1, r2
 801c47e:	4618      	mov	r0, r3
 801c480:	f7e9 fb4e 	bl	8005b20 <HAL_HCD_HC_Halt>
 801c484:	4603      	mov	r3, r0
 801c486:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801c488:	7bfb      	ldrb	r3, [r7, #15]
 801c48a:	4618      	mov	r0, r3
 801c48c:	f000 f89a 	bl	801c5c4 <USBH_Get_USB_Status>
 801c490:	4603      	mov	r3, r0
 801c492:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c494:	7bbb      	ldrb	r3, [r7, #14]
}
 801c496:	4618      	mov	r0, r3
 801c498:	3710      	adds	r7, #16
 801c49a:	46bd      	mov	sp, r7
 801c49c:	bd80      	pop	{r7, pc}

0801c49e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801c49e:	b590      	push	{r4, r7, lr}
 801c4a0:	b089      	sub	sp, #36	; 0x24
 801c4a2:	af04      	add	r7, sp, #16
 801c4a4:	6078      	str	r0, [r7, #4]
 801c4a6:	4608      	mov	r0, r1
 801c4a8:	4611      	mov	r1, r2
 801c4aa:	461a      	mov	r2, r3
 801c4ac:	4603      	mov	r3, r0
 801c4ae:	70fb      	strb	r3, [r7, #3]
 801c4b0:	460b      	mov	r3, r1
 801c4b2:	70bb      	strb	r3, [r7, #2]
 801c4b4:	4613      	mov	r3, r2
 801c4b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c4b8:	2300      	movs	r3, #0
 801c4ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801c4bc:	2300      	movs	r3, #0
 801c4be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801c4c0:	687a      	ldr	r2, [r7, #4]
 801c4c2:	f643 2310 	movw	r3, #14864	; 0x3a10
 801c4c6:	4413      	add	r3, r2
 801c4c8:	6818      	ldr	r0, [r3, #0]
 801c4ca:	787c      	ldrb	r4, [r7, #1]
 801c4cc:	78ba      	ldrb	r2, [r7, #2]
 801c4ce:	78f9      	ldrb	r1, [r7, #3]
 801c4d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801c4d4:	9303      	str	r3, [sp, #12]
 801c4d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801c4d8:	9302      	str	r3, [sp, #8]
 801c4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4dc:	9301      	str	r3, [sp, #4]
 801c4de:	f897 3020 	ldrb.w	r3, [r7, #32]
 801c4e2:	9300      	str	r3, [sp, #0]
 801c4e4:	4623      	mov	r3, r4
 801c4e6:	f7e9 fb3f 	bl	8005b68 <HAL_HCD_HC_SubmitRequest>
 801c4ea:	4603      	mov	r3, r0
 801c4ec:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801c4ee:	7bfb      	ldrb	r3, [r7, #15]
 801c4f0:	4618      	mov	r0, r3
 801c4f2:	f000 f867 	bl	801c5c4 <USBH_Get_USB_Status>
 801c4f6:	4603      	mov	r3, r0
 801c4f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c4fa:	7bbb      	ldrb	r3, [r7, #14]
}
 801c4fc:	4618      	mov	r0, r3
 801c4fe:	3714      	adds	r7, #20
 801c500:	46bd      	mov	sp, r7
 801c502:	bd90      	pop	{r4, r7, pc}

0801c504 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801c504:	b580      	push	{r7, lr}
 801c506:	b082      	sub	sp, #8
 801c508:	af00      	add	r7, sp, #0
 801c50a:	6078      	str	r0, [r7, #4]
 801c50c:	460b      	mov	r3, r1
 801c50e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801c510:	687a      	ldr	r2, [r7, #4]
 801c512:	f643 2310 	movw	r3, #14864	; 0x3a10
 801c516:	4413      	add	r3, r2
 801c518:	681b      	ldr	r3, [r3, #0]
 801c51a:	78fa      	ldrb	r2, [r7, #3]
 801c51c:	4611      	mov	r1, r2
 801c51e:	4618      	mov	r0, r3
 801c520:	f7e9 fdbc 	bl	800609c <HAL_HCD_HC_GetURBState>
 801c524:	4603      	mov	r3, r0
}
 801c526:	4618      	mov	r0, r3
 801c528:	3708      	adds	r7, #8
 801c52a:	46bd      	mov	sp, r7
 801c52c:	bd80      	pop	{r7, pc}

0801c52e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801c52e:	b580      	push	{r7, lr}
 801c530:	b082      	sub	sp, #8
 801c532:	af00      	add	r7, sp, #0
 801c534:	6078      	str	r0, [r7, #4]
 801c536:	460b      	mov	r3, r1
 801c538:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801c53a:	687a      	ldr	r2, [r7, #4]
 801c53c:	f643 230c 	movw	r3, #14860	; 0x3a0c
 801c540:	4413      	add	r3, r2
 801c542:	781b      	ldrb	r3, [r3, #0]
 801c544:	2b01      	cmp	r3, #1
 801c546:	d103      	bne.n	801c550 <USBH_LL_DriverVBUS+0x22>
    MX_DriverVbusFS(state);
 801c548:	78fb      	ldrb	r3, [r7, #3]
 801c54a:	4618      	mov	r0, r3
 801c54c:	f000 f866 	bl	801c61c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801c550:	20c8      	movs	r0, #200	; 0xc8
 801c552:	f7e6 f803 	bl	800255c <HAL_Delay>
  return USBH_OK;
 801c556:	2300      	movs	r3, #0
}
 801c558:	4618      	mov	r0, r3
 801c55a:	3708      	adds	r7, #8
 801c55c:	46bd      	mov	sp, r7
 801c55e:	bd80      	pop	{r7, pc}

0801c560 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801c560:	b480      	push	{r7}
 801c562:	b085      	sub	sp, #20
 801c564:	af00      	add	r7, sp, #0
 801c566:	6078      	str	r0, [r7, #4]
 801c568:	460b      	mov	r3, r1
 801c56a:	70fb      	strb	r3, [r7, #3]
 801c56c:	4613      	mov	r3, r2
 801c56e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801c570:	687a      	ldr	r2, [r7, #4]
 801c572:	f643 2310 	movw	r3, #14864	; 0x3a10
 801c576:	4413      	add	r3, r2
 801c578:	681b      	ldr	r3, [r3, #0]
 801c57a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801c57c:	78fb      	ldrb	r3, [r7, #3]
 801c57e:	68fa      	ldr	r2, [r7, #12]
 801c580:	212c      	movs	r1, #44	; 0x2c
 801c582:	fb01 f303 	mul.w	r3, r1, r3
 801c586:	4413      	add	r3, r2
 801c588:	333b      	adds	r3, #59	; 0x3b
 801c58a:	781b      	ldrb	r3, [r3, #0]
 801c58c:	2b00      	cmp	r3, #0
 801c58e:	d009      	beq.n	801c5a4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801c590:	78fb      	ldrb	r3, [r7, #3]
 801c592:	68fa      	ldr	r2, [r7, #12]
 801c594:	212c      	movs	r1, #44	; 0x2c
 801c596:	fb01 f303 	mul.w	r3, r1, r3
 801c59a:	4413      	add	r3, r2
 801c59c:	3354      	adds	r3, #84	; 0x54
 801c59e:	78ba      	ldrb	r2, [r7, #2]
 801c5a0:	701a      	strb	r2, [r3, #0]
 801c5a2:	e008      	b.n	801c5b6 <USBH_LL_SetToggle+0x56>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801c5a4:	78fb      	ldrb	r3, [r7, #3]
 801c5a6:	68fa      	ldr	r2, [r7, #12]
 801c5a8:	212c      	movs	r1, #44	; 0x2c
 801c5aa:	fb01 f303 	mul.w	r3, r1, r3
 801c5ae:	4413      	add	r3, r2
 801c5b0:	3355      	adds	r3, #85	; 0x55
 801c5b2:	78ba      	ldrb	r2, [r7, #2]
 801c5b4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801c5b6:	2300      	movs	r3, #0
}
 801c5b8:	4618      	mov	r0, r3
 801c5ba:	3714      	adds	r7, #20
 801c5bc:	46bd      	mov	sp, r7
 801c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5c2:	4770      	bx	lr

0801c5c4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801c5c4:	b480      	push	{r7}
 801c5c6:	b085      	sub	sp, #20
 801c5c8:	af00      	add	r7, sp, #0
 801c5ca:	4603      	mov	r3, r0
 801c5cc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801c5ce:	2300      	movs	r3, #0
 801c5d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801c5d2:	79fb      	ldrb	r3, [r7, #7]
 801c5d4:	2b03      	cmp	r3, #3
 801c5d6:	d817      	bhi.n	801c608 <USBH_Get_USB_Status+0x44>
 801c5d8:	a201      	add	r2, pc, #4	; (adr r2, 801c5e0 <USBH_Get_USB_Status+0x1c>)
 801c5da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c5de:	bf00      	nop
 801c5e0:	0801c5f1 	.word	0x0801c5f1
 801c5e4:	0801c5f7 	.word	0x0801c5f7
 801c5e8:	0801c5fd 	.word	0x0801c5fd
 801c5ec:	0801c603 	.word	0x0801c603
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801c5f0:	2300      	movs	r3, #0
 801c5f2:	73fb      	strb	r3, [r7, #15]
    break;
 801c5f4:	e00b      	b.n	801c60e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801c5f6:	2302      	movs	r3, #2
 801c5f8:	73fb      	strb	r3, [r7, #15]
    break;
 801c5fa:	e008      	b.n	801c60e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801c5fc:	2301      	movs	r3, #1
 801c5fe:	73fb      	strb	r3, [r7, #15]
    break;
 801c600:	e005      	b.n	801c60e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801c602:	2302      	movs	r3, #2
 801c604:	73fb      	strb	r3, [r7, #15]
    break;
 801c606:	e002      	b.n	801c60e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801c608:	2302      	movs	r3, #2
 801c60a:	73fb      	strb	r3, [r7, #15]
    break;
 801c60c:	bf00      	nop
  }
  return usb_status;
 801c60e:	7bfb      	ldrb	r3, [r7, #15]
}
 801c610:	4618      	mov	r0, r3
 801c612:	3714      	adds	r7, #20
 801c614:	46bd      	mov	sp, r7
 801c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c61a:	4770      	bx	lr

0801c61c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801c61c:	b580      	push	{r7, lr}
 801c61e:	b084      	sub	sp, #16
 801c620:	af00      	add	r7, sp, #0
 801c622:	4603      	mov	r3, r0
 801c624:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801c626:	79fb      	ldrb	r3, [r7, #7]
 801c628:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801c62a:	79fb      	ldrb	r3, [r7, #7]
 801c62c:	2b00      	cmp	r3, #0
 801c62e:	d102      	bne.n	801c636 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 801c630:	2301      	movs	r3, #1
 801c632:	73fb      	strb	r3, [r7, #15]
 801c634:	e001      	b.n	801c63a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801c636:	2300      	movs	r3, #0
 801c638:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,(GPIO_PinState)data);
 801c63a:	7bfb      	ldrb	r3, [r7, #15]
 801c63c:	461a      	mov	r2, r3
 801c63e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801c642:	4803      	ldr	r0, [pc, #12]	; (801c650 <MX_DriverVbusFS+0x34>)
 801c644:	f7e9 f948 	bl	80058d8 <HAL_GPIO_WritePin>
}
 801c648:	bf00      	nop
 801c64a:	3710      	adds	r7, #16
 801c64c:	46bd      	mov	sp, r7
 801c64e:	bd80      	pop	{r7, pc}
 801c650:	58020000 	.word	0x58020000

0801c654 <__assert_func>:
 801c654:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c656:	4614      	mov	r4, r2
 801c658:	461a      	mov	r2, r3
 801c65a:	4b09      	ldr	r3, [pc, #36]	; (801c680 <__assert_func+0x2c>)
 801c65c:	681b      	ldr	r3, [r3, #0]
 801c65e:	4605      	mov	r5, r0
 801c660:	68d8      	ldr	r0, [r3, #12]
 801c662:	b14c      	cbz	r4, 801c678 <__assert_func+0x24>
 801c664:	4b07      	ldr	r3, [pc, #28]	; (801c684 <__assert_func+0x30>)
 801c666:	9100      	str	r1, [sp, #0]
 801c668:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c66c:	4906      	ldr	r1, [pc, #24]	; (801c688 <__assert_func+0x34>)
 801c66e:	462b      	mov	r3, r5
 801c670:	f000 f81c 	bl	801c6ac <fiprintf>
 801c674:	f002 f94c 	bl	801e910 <abort>
 801c678:	4b04      	ldr	r3, [pc, #16]	; (801c68c <__assert_func+0x38>)
 801c67a:	461c      	mov	r4, r3
 801c67c:	e7f3      	b.n	801c666 <__assert_func+0x12>
 801c67e:	bf00      	nop
 801c680:	2400a190 	.word	0x2400a190
 801c684:	0802a6ef 	.word	0x0802a6ef
 801c688:	0802a6fc 	.word	0x0802a6fc
 801c68c:	0802a72a 	.word	0x0802a72a

0801c690 <atof>:
 801c690:	2100      	movs	r1, #0
 801c692:	f001 bfe1 	b.w	801e658 <strtod>

0801c696 <atoi>:
 801c696:	220a      	movs	r2, #10
 801c698:	2100      	movs	r1, #0
 801c69a:	f002 b86f 	b.w	801e77c <strtol>
	...

0801c6a0 <__errno>:
 801c6a0:	4b01      	ldr	r3, [pc, #4]	; (801c6a8 <__errno+0x8>)
 801c6a2:	6818      	ldr	r0, [r3, #0]
 801c6a4:	4770      	bx	lr
 801c6a6:	bf00      	nop
 801c6a8:	2400a190 	.word	0x2400a190

0801c6ac <fiprintf>:
 801c6ac:	b40e      	push	{r1, r2, r3}
 801c6ae:	b503      	push	{r0, r1, lr}
 801c6b0:	4601      	mov	r1, r0
 801c6b2:	ab03      	add	r3, sp, #12
 801c6b4:	4805      	ldr	r0, [pc, #20]	; (801c6cc <fiprintf+0x20>)
 801c6b6:	f853 2b04 	ldr.w	r2, [r3], #4
 801c6ba:	6800      	ldr	r0, [r0, #0]
 801c6bc:	9301      	str	r3, [sp, #4]
 801c6be:	f000 f93f 	bl	801c940 <_vfiprintf_r>
 801c6c2:	b002      	add	sp, #8
 801c6c4:	f85d eb04 	ldr.w	lr, [sp], #4
 801c6c8:	b003      	add	sp, #12
 801c6ca:	4770      	bx	lr
 801c6cc:	2400a190 	.word	0x2400a190

0801c6d0 <__libc_init_array>:
 801c6d0:	b570      	push	{r4, r5, r6, lr}
 801c6d2:	4d0d      	ldr	r5, [pc, #52]	; (801c708 <__libc_init_array+0x38>)
 801c6d4:	4c0d      	ldr	r4, [pc, #52]	; (801c70c <__libc_init_array+0x3c>)
 801c6d6:	1b64      	subs	r4, r4, r5
 801c6d8:	10a4      	asrs	r4, r4, #2
 801c6da:	2600      	movs	r6, #0
 801c6dc:	42a6      	cmp	r6, r4
 801c6de:	d109      	bne.n	801c6f4 <__libc_init_array+0x24>
 801c6e0:	4d0b      	ldr	r5, [pc, #44]	; (801c710 <__libc_init_array+0x40>)
 801c6e2:	4c0c      	ldr	r4, [pc, #48]	; (801c714 <__libc_init_array+0x44>)
 801c6e4:	f004 fe38 	bl	8021358 <_init>
 801c6e8:	1b64      	subs	r4, r4, r5
 801c6ea:	10a4      	asrs	r4, r4, #2
 801c6ec:	2600      	movs	r6, #0
 801c6ee:	42a6      	cmp	r6, r4
 801c6f0:	d105      	bne.n	801c6fe <__libc_init_array+0x2e>
 801c6f2:	bd70      	pop	{r4, r5, r6, pc}
 801c6f4:	f855 3b04 	ldr.w	r3, [r5], #4
 801c6f8:	4798      	blx	r3
 801c6fa:	3601      	adds	r6, #1
 801c6fc:	e7ee      	b.n	801c6dc <__libc_init_array+0xc>
 801c6fe:	f855 3b04 	ldr.w	r3, [r5], #4
 801c702:	4798      	blx	r3
 801c704:	3601      	adds	r6, #1
 801c706:	e7f2      	b.n	801c6ee <__libc_init_array+0x1e>
 801c708:	0802acf0 	.word	0x0802acf0
 801c70c:	0802acf0 	.word	0x0802acf0
 801c710:	0802acf0 	.word	0x0802acf0
 801c714:	0802acf4 	.word	0x0802acf4

0801c718 <malloc>:
 801c718:	4b02      	ldr	r3, [pc, #8]	; (801c724 <malloc+0xc>)
 801c71a:	4601      	mov	r1, r0
 801c71c:	6818      	ldr	r0, [r3, #0]
 801c71e:	f000 b88b 	b.w	801c838 <_malloc_r>
 801c722:	bf00      	nop
 801c724:	2400a190 	.word	0x2400a190

0801c728 <free>:
 801c728:	4b02      	ldr	r3, [pc, #8]	; (801c734 <free+0xc>)
 801c72a:	4601      	mov	r1, r0
 801c72c:	6818      	ldr	r0, [r3, #0]
 801c72e:	f000 b833 	b.w	801c798 <_free_r>
 801c732:	bf00      	nop
 801c734:	2400a190 	.word	0x2400a190

0801c738 <memcpy>:
 801c738:	440a      	add	r2, r1
 801c73a:	4291      	cmp	r1, r2
 801c73c:	f100 33ff 	add.w	r3, r0, #4294967295
 801c740:	d100      	bne.n	801c744 <memcpy+0xc>
 801c742:	4770      	bx	lr
 801c744:	b510      	push	{r4, lr}
 801c746:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c74a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c74e:	4291      	cmp	r1, r2
 801c750:	d1f9      	bne.n	801c746 <memcpy+0xe>
 801c752:	bd10      	pop	{r4, pc}

0801c754 <memmove>:
 801c754:	4288      	cmp	r0, r1
 801c756:	b510      	push	{r4, lr}
 801c758:	eb01 0402 	add.w	r4, r1, r2
 801c75c:	d902      	bls.n	801c764 <memmove+0x10>
 801c75e:	4284      	cmp	r4, r0
 801c760:	4623      	mov	r3, r4
 801c762:	d807      	bhi.n	801c774 <memmove+0x20>
 801c764:	1e43      	subs	r3, r0, #1
 801c766:	42a1      	cmp	r1, r4
 801c768:	d008      	beq.n	801c77c <memmove+0x28>
 801c76a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c76e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c772:	e7f8      	b.n	801c766 <memmove+0x12>
 801c774:	4402      	add	r2, r0
 801c776:	4601      	mov	r1, r0
 801c778:	428a      	cmp	r2, r1
 801c77a:	d100      	bne.n	801c77e <memmove+0x2a>
 801c77c:	bd10      	pop	{r4, pc}
 801c77e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c782:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c786:	e7f7      	b.n	801c778 <memmove+0x24>

0801c788 <memset>:
 801c788:	4402      	add	r2, r0
 801c78a:	4603      	mov	r3, r0
 801c78c:	4293      	cmp	r3, r2
 801c78e:	d100      	bne.n	801c792 <memset+0xa>
 801c790:	4770      	bx	lr
 801c792:	f803 1b01 	strb.w	r1, [r3], #1
 801c796:	e7f9      	b.n	801c78c <memset+0x4>

0801c798 <_free_r>:
 801c798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c79a:	2900      	cmp	r1, #0
 801c79c:	d048      	beq.n	801c830 <_free_r+0x98>
 801c79e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c7a2:	9001      	str	r0, [sp, #4]
 801c7a4:	2b00      	cmp	r3, #0
 801c7a6:	f1a1 0404 	sub.w	r4, r1, #4
 801c7aa:	bfb8      	it	lt
 801c7ac:	18e4      	addlt	r4, r4, r3
 801c7ae:	f003 fc69 	bl	8020084 <__malloc_lock>
 801c7b2:	4a20      	ldr	r2, [pc, #128]	; (801c834 <_free_r+0x9c>)
 801c7b4:	9801      	ldr	r0, [sp, #4]
 801c7b6:	6813      	ldr	r3, [r2, #0]
 801c7b8:	4615      	mov	r5, r2
 801c7ba:	b933      	cbnz	r3, 801c7ca <_free_r+0x32>
 801c7bc:	6063      	str	r3, [r4, #4]
 801c7be:	6014      	str	r4, [r2, #0]
 801c7c0:	b003      	add	sp, #12
 801c7c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c7c6:	f003 bc63 	b.w	8020090 <__malloc_unlock>
 801c7ca:	42a3      	cmp	r3, r4
 801c7cc:	d90b      	bls.n	801c7e6 <_free_r+0x4e>
 801c7ce:	6821      	ldr	r1, [r4, #0]
 801c7d0:	1862      	adds	r2, r4, r1
 801c7d2:	4293      	cmp	r3, r2
 801c7d4:	bf04      	itt	eq
 801c7d6:	681a      	ldreq	r2, [r3, #0]
 801c7d8:	685b      	ldreq	r3, [r3, #4]
 801c7da:	6063      	str	r3, [r4, #4]
 801c7dc:	bf04      	itt	eq
 801c7de:	1852      	addeq	r2, r2, r1
 801c7e0:	6022      	streq	r2, [r4, #0]
 801c7e2:	602c      	str	r4, [r5, #0]
 801c7e4:	e7ec      	b.n	801c7c0 <_free_r+0x28>
 801c7e6:	461a      	mov	r2, r3
 801c7e8:	685b      	ldr	r3, [r3, #4]
 801c7ea:	b10b      	cbz	r3, 801c7f0 <_free_r+0x58>
 801c7ec:	42a3      	cmp	r3, r4
 801c7ee:	d9fa      	bls.n	801c7e6 <_free_r+0x4e>
 801c7f0:	6811      	ldr	r1, [r2, #0]
 801c7f2:	1855      	adds	r5, r2, r1
 801c7f4:	42a5      	cmp	r5, r4
 801c7f6:	d10b      	bne.n	801c810 <_free_r+0x78>
 801c7f8:	6824      	ldr	r4, [r4, #0]
 801c7fa:	4421      	add	r1, r4
 801c7fc:	1854      	adds	r4, r2, r1
 801c7fe:	42a3      	cmp	r3, r4
 801c800:	6011      	str	r1, [r2, #0]
 801c802:	d1dd      	bne.n	801c7c0 <_free_r+0x28>
 801c804:	681c      	ldr	r4, [r3, #0]
 801c806:	685b      	ldr	r3, [r3, #4]
 801c808:	6053      	str	r3, [r2, #4]
 801c80a:	4421      	add	r1, r4
 801c80c:	6011      	str	r1, [r2, #0]
 801c80e:	e7d7      	b.n	801c7c0 <_free_r+0x28>
 801c810:	d902      	bls.n	801c818 <_free_r+0x80>
 801c812:	230c      	movs	r3, #12
 801c814:	6003      	str	r3, [r0, #0]
 801c816:	e7d3      	b.n	801c7c0 <_free_r+0x28>
 801c818:	6825      	ldr	r5, [r4, #0]
 801c81a:	1961      	adds	r1, r4, r5
 801c81c:	428b      	cmp	r3, r1
 801c81e:	bf04      	itt	eq
 801c820:	6819      	ldreq	r1, [r3, #0]
 801c822:	685b      	ldreq	r3, [r3, #4]
 801c824:	6063      	str	r3, [r4, #4]
 801c826:	bf04      	itt	eq
 801c828:	1949      	addeq	r1, r1, r5
 801c82a:	6021      	streq	r1, [r4, #0]
 801c82c:	6054      	str	r4, [r2, #4]
 801c82e:	e7c7      	b.n	801c7c0 <_free_r+0x28>
 801c830:	b003      	add	sp, #12
 801c832:	bd30      	pop	{r4, r5, pc}
 801c834:	2400af28 	.word	0x2400af28

0801c838 <_malloc_r>:
 801c838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c83a:	1ccd      	adds	r5, r1, #3
 801c83c:	f025 0503 	bic.w	r5, r5, #3
 801c840:	3508      	adds	r5, #8
 801c842:	2d0c      	cmp	r5, #12
 801c844:	bf38      	it	cc
 801c846:	250c      	movcc	r5, #12
 801c848:	2d00      	cmp	r5, #0
 801c84a:	4606      	mov	r6, r0
 801c84c:	db01      	blt.n	801c852 <_malloc_r+0x1a>
 801c84e:	42a9      	cmp	r1, r5
 801c850:	d903      	bls.n	801c85a <_malloc_r+0x22>
 801c852:	230c      	movs	r3, #12
 801c854:	6033      	str	r3, [r6, #0]
 801c856:	2000      	movs	r0, #0
 801c858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c85a:	f003 fc13 	bl	8020084 <__malloc_lock>
 801c85e:	4921      	ldr	r1, [pc, #132]	; (801c8e4 <_malloc_r+0xac>)
 801c860:	680a      	ldr	r2, [r1, #0]
 801c862:	4614      	mov	r4, r2
 801c864:	b99c      	cbnz	r4, 801c88e <_malloc_r+0x56>
 801c866:	4f20      	ldr	r7, [pc, #128]	; (801c8e8 <_malloc_r+0xb0>)
 801c868:	683b      	ldr	r3, [r7, #0]
 801c86a:	b923      	cbnz	r3, 801c876 <_malloc_r+0x3e>
 801c86c:	4621      	mov	r1, r4
 801c86e:	4630      	mov	r0, r6
 801c870:	f001 f86a 	bl	801d948 <_sbrk_r>
 801c874:	6038      	str	r0, [r7, #0]
 801c876:	4629      	mov	r1, r5
 801c878:	4630      	mov	r0, r6
 801c87a:	f001 f865 	bl	801d948 <_sbrk_r>
 801c87e:	1c43      	adds	r3, r0, #1
 801c880:	d123      	bne.n	801c8ca <_malloc_r+0x92>
 801c882:	230c      	movs	r3, #12
 801c884:	6033      	str	r3, [r6, #0]
 801c886:	4630      	mov	r0, r6
 801c888:	f003 fc02 	bl	8020090 <__malloc_unlock>
 801c88c:	e7e3      	b.n	801c856 <_malloc_r+0x1e>
 801c88e:	6823      	ldr	r3, [r4, #0]
 801c890:	1b5b      	subs	r3, r3, r5
 801c892:	d417      	bmi.n	801c8c4 <_malloc_r+0x8c>
 801c894:	2b0b      	cmp	r3, #11
 801c896:	d903      	bls.n	801c8a0 <_malloc_r+0x68>
 801c898:	6023      	str	r3, [r4, #0]
 801c89a:	441c      	add	r4, r3
 801c89c:	6025      	str	r5, [r4, #0]
 801c89e:	e004      	b.n	801c8aa <_malloc_r+0x72>
 801c8a0:	6863      	ldr	r3, [r4, #4]
 801c8a2:	42a2      	cmp	r2, r4
 801c8a4:	bf0c      	ite	eq
 801c8a6:	600b      	streq	r3, [r1, #0]
 801c8a8:	6053      	strne	r3, [r2, #4]
 801c8aa:	4630      	mov	r0, r6
 801c8ac:	f003 fbf0 	bl	8020090 <__malloc_unlock>
 801c8b0:	f104 000b 	add.w	r0, r4, #11
 801c8b4:	1d23      	adds	r3, r4, #4
 801c8b6:	f020 0007 	bic.w	r0, r0, #7
 801c8ba:	1ac2      	subs	r2, r0, r3
 801c8bc:	d0cc      	beq.n	801c858 <_malloc_r+0x20>
 801c8be:	1a1b      	subs	r3, r3, r0
 801c8c0:	50a3      	str	r3, [r4, r2]
 801c8c2:	e7c9      	b.n	801c858 <_malloc_r+0x20>
 801c8c4:	4622      	mov	r2, r4
 801c8c6:	6864      	ldr	r4, [r4, #4]
 801c8c8:	e7cc      	b.n	801c864 <_malloc_r+0x2c>
 801c8ca:	1cc4      	adds	r4, r0, #3
 801c8cc:	f024 0403 	bic.w	r4, r4, #3
 801c8d0:	42a0      	cmp	r0, r4
 801c8d2:	d0e3      	beq.n	801c89c <_malloc_r+0x64>
 801c8d4:	1a21      	subs	r1, r4, r0
 801c8d6:	4630      	mov	r0, r6
 801c8d8:	f001 f836 	bl	801d948 <_sbrk_r>
 801c8dc:	3001      	adds	r0, #1
 801c8de:	d1dd      	bne.n	801c89c <_malloc_r+0x64>
 801c8e0:	e7cf      	b.n	801c882 <_malloc_r+0x4a>
 801c8e2:	bf00      	nop
 801c8e4:	2400af28 	.word	0x2400af28
 801c8e8:	2400af2c 	.word	0x2400af2c

0801c8ec <__sfputc_r>:
 801c8ec:	6893      	ldr	r3, [r2, #8]
 801c8ee:	3b01      	subs	r3, #1
 801c8f0:	2b00      	cmp	r3, #0
 801c8f2:	b410      	push	{r4}
 801c8f4:	6093      	str	r3, [r2, #8]
 801c8f6:	da08      	bge.n	801c90a <__sfputc_r+0x1e>
 801c8f8:	6994      	ldr	r4, [r2, #24]
 801c8fa:	42a3      	cmp	r3, r4
 801c8fc:	db01      	blt.n	801c902 <__sfputc_r+0x16>
 801c8fe:	290a      	cmp	r1, #10
 801c900:	d103      	bne.n	801c90a <__sfputc_r+0x1e>
 801c902:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c906:	f001 bf43 	b.w	801e790 <__swbuf_r>
 801c90a:	6813      	ldr	r3, [r2, #0]
 801c90c:	1c58      	adds	r0, r3, #1
 801c90e:	6010      	str	r0, [r2, #0]
 801c910:	7019      	strb	r1, [r3, #0]
 801c912:	4608      	mov	r0, r1
 801c914:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c918:	4770      	bx	lr

0801c91a <__sfputs_r>:
 801c91a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c91c:	4606      	mov	r6, r0
 801c91e:	460f      	mov	r7, r1
 801c920:	4614      	mov	r4, r2
 801c922:	18d5      	adds	r5, r2, r3
 801c924:	42ac      	cmp	r4, r5
 801c926:	d101      	bne.n	801c92c <__sfputs_r+0x12>
 801c928:	2000      	movs	r0, #0
 801c92a:	e007      	b.n	801c93c <__sfputs_r+0x22>
 801c92c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c930:	463a      	mov	r2, r7
 801c932:	4630      	mov	r0, r6
 801c934:	f7ff ffda 	bl	801c8ec <__sfputc_r>
 801c938:	1c43      	adds	r3, r0, #1
 801c93a:	d1f3      	bne.n	801c924 <__sfputs_r+0xa>
 801c93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c940 <_vfiprintf_r>:
 801c940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c944:	460d      	mov	r5, r1
 801c946:	b09d      	sub	sp, #116	; 0x74
 801c948:	4614      	mov	r4, r2
 801c94a:	4698      	mov	r8, r3
 801c94c:	4606      	mov	r6, r0
 801c94e:	b118      	cbz	r0, 801c958 <_vfiprintf_r+0x18>
 801c950:	6983      	ldr	r3, [r0, #24]
 801c952:	b90b      	cbnz	r3, 801c958 <_vfiprintf_r+0x18>
 801c954:	f002 ff0c 	bl	801f770 <__sinit>
 801c958:	4b89      	ldr	r3, [pc, #548]	; (801cb80 <_vfiprintf_r+0x240>)
 801c95a:	429d      	cmp	r5, r3
 801c95c:	d11b      	bne.n	801c996 <_vfiprintf_r+0x56>
 801c95e:	6875      	ldr	r5, [r6, #4]
 801c960:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c962:	07d9      	lsls	r1, r3, #31
 801c964:	d405      	bmi.n	801c972 <_vfiprintf_r+0x32>
 801c966:	89ab      	ldrh	r3, [r5, #12]
 801c968:	059a      	lsls	r2, r3, #22
 801c96a:	d402      	bmi.n	801c972 <_vfiprintf_r+0x32>
 801c96c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c96e:	f003 fb10 	bl	801ff92 <__retarget_lock_acquire_recursive>
 801c972:	89ab      	ldrh	r3, [r5, #12]
 801c974:	071b      	lsls	r3, r3, #28
 801c976:	d501      	bpl.n	801c97c <_vfiprintf_r+0x3c>
 801c978:	692b      	ldr	r3, [r5, #16]
 801c97a:	b9eb      	cbnz	r3, 801c9b8 <_vfiprintf_r+0x78>
 801c97c:	4629      	mov	r1, r5
 801c97e:	4630      	mov	r0, r6
 801c980:	f001 ff58 	bl	801e834 <__swsetup_r>
 801c984:	b1c0      	cbz	r0, 801c9b8 <_vfiprintf_r+0x78>
 801c986:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c988:	07dc      	lsls	r4, r3, #31
 801c98a:	d50e      	bpl.n	801c9aa <_vfiprintf_r+0x6a>
 801c98c:	f04f 30ff 	mov.w	r0, #4294967295
 801c990:	b01d      	add	sp, #116	; 0x74
 801c992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c996:	4b7b      	ldr	r3, [pc, #492]	; (801cb84 <_vfiprintf_r+0x244>)
 801c998:	429d      	cmp	r5, r3
 801c99a:	d101      	bne.n	801c9a0 <_vfiprintf_r+0x60>
 801c99c:	68b5      	ldr	r5, [r6, #8]
 801c99e:	e7df      	b.n	801c960 <_vfiprintf_r+0x20>
 801c9a0:	4b79      	ldr	r3, [pc, #484]	; (801cb88 <_vfiprintf_r+0x248>)
 801c9a2:	429d      	cmp	r5, r3
 801c9a4:	bf08      	it	eq
 801c9a6:	68f5      	ldreq	r5, [r6, #12]
 801c9a8:	e7da      	b.n	801c960 <_vfiprintf_r+0x20>
 801c9aa:	89ab      	ldrh	r3, [r5, #12]
 801c9ac:	0598      	lsls	r0, r3, #22
 801c9ae:	d4ed      	bmi.n	801c98c <_vfiprintf_r+0x4c>
 801c9b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c9b2:	f003 faef 	bl	801ff94 <__retarget_lock_release_recursive>
 801c9b6:	e7e9      	b.n	801c98c <_vfiprintf_r+0x4c>
 801c9b8:	2300      	movs	r3, #0
 801c9ba:	9309      	str	r3, [sp, #36]	; 0x24
 801c9bc:	2320      	movs	r3, #32
 801c9be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c9c2:	f8cd 800c 	str.w	r8, [sp, #12]
 801c9c6:	2330      	movs	r3, #48	; 0x30
 801c9c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801cb8c <_vfiprintf_r+0x24c>
 801c9cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c9d0:	f04f 0901 	mov.w	r9, #1
 801c9d4:	4623      	mov	r3, r4
 801c9d6:	469a      	mov	sl, r3
 801c9d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c9dc:	b10a      	cbz	r2, 801c9e2 <_vfiprintf_r+0xa2>
 801c9de:	2a25      	cmp	r2, #37	; 0x25
 801c9e0:	d1f9      	bne.n	801c9d6 <_vfiprintf_r+0x96>
 801c9e2:	ebba 0b04 	subs.w	fp, sl, r4
 801c9e6:	d00b      	beq.n	801ca00 <_vfiprintf_r+0xc0>
 801c9e8:	465b      	mov	r3, fp
 801c9ea:	4622      	mov	r2, r4
 801c9ec:	4629      	mov	r1, r5
 801c9ee:	4630      	mov	r0, r6
 801c9f0:	f7ff ff93 	bl	801c91a <__sfputs_r>
 801c9f4:	3001      	adds	r0, #1
 801c9f6:	f000 80aa 	beq.w	801cb4e <_vfiprintf_r+0x20e>
 801c9fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c9fc:	445a      	add	r2, fp
 801c9fe:	9209      	str	r2, [sp, #36]	; 0x24
 801ca00:	f89a 3000 	ldrb.w	r3, [sl]
 801ca04:	2b00      	cmp	r3, #0
 801ca06:	f000 80a2 	beq.w	801cb4e <_vfiprintf_r+0x20e>
 801ca0a:	2300      	movs	r3, #0
 801ca0c:	f04f 32ff 	mov.w	r2, #4294967295
 801ca10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ca14:	f10a 0a01 	add.w	sl, sl, #1
 801ca18:	9304      	str	r3, [sp, #16]
 801ca1a:	9307      	str	r3, [sp, #28]
 801ca1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ca20:	931a      	str	r3, [sp, #104]	; 0x68
 801ca22:	4654      	mov	r4, sl
 801ca24:	2205      	movs	r2, #5
 801ca26:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ca2a:	4858      	ldr	r0, [pc, #352]	; (801cb8c <_vfiprintf_r+0x24c>)
 801ca2c:	f7e3 fc70 	bl	8000310 <memchr>
 801ca30:	9a04      	ldr	r2, [sp, #16]
 801ca32:	b9d8      	cbnz	r0, 801ca6c <_vfiprintf_r+0x12c>
 801ca34:	06d1      	lsls	r1, r2, #27
 801ca36:	bf44      	itt	mi
 801ca38:	2320      	movmi	r3, #32
 801ca3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ca3e:	0713      	lsls	r3, r2, #28
 801ca40:	bf44      	itt	mi
 801ca42:	232b      	movmi	r3, #43	; 0x2b
 801ca44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ca48:	f89a 3000 	ldrb.w	r3, [sl]
 801ca4c:	2b2a      	cmp	r3, #42	; 0x2a
 801ca4e:	d015      	beq.n	801ca7c <_vfiprintf_r+0x13c>
 801ca50:	9a07      	ldr	r2, [sp, #28]
 801ca52:	4654      	mov	r4, sl
 801ca54:	2000      	movs	r0, #0
 801ca56:	f04f 0c0a 	mov.w	ip, #10
 801ca5a:	4621      	mov	r1, r4
 801ca5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ca60:	3b30      	subs	r3, #48	; 0x30
 801ca62:	2b09      	cmp	r3, #9
 801ca64:	d94e      	bls.n	801cb04 <_vfiprintf_r+0x1c4>
 801ca66:	b1b0      	cbz	r0, 801ca96 <_vfiprintf_r+0x156>
 801ca68:	9207      	str	r2, [sp, #28]
 801ca6a:	e014      	b.n	801ca96 <_vfiprintf_r+0x156>
 801ca6c:	eba0 0308 	sub.w	r3, r0, r8
 801ca70:	fa09 f303 	lsl.w	r3, r9, r3
 801ca74:	4313      	orrs	r3, r2
 801ca76:	9304      	str	r3, [sp, #16]
 801ca78:	46a2      	mov	sl, r4
 801ca7a:	e7d2      	b.n	801ca22 <_vfiprintf_r+0xe2>
 801ca7c:	9b03      	ldr	r3, [sp, #12]
 801ca7e:	1d19      	adds	r1, r3, #4
 801ca80:	681b      	ldr	r3, [r3, #0]
 801ca82:	9103      	str	r1, [sp, #12]
 801ca84:	2b00      	cmp	r3, #0
 801ca86:	bfbb      	ittet	lt
 801ca88:	425b      	neglt	r3, r3
 801ca8a:	f042 0202 	orrlt.w	r2, r2, #2
 801ca8e:	9307      	strge	r3, [sp, #28]
 801ca90:	9307      	strlt	r3, [sp, #28]
 801ca92:	bfb8      	it	lt
 801ca94:	9204      	strlt	r2, [sp, #16]
 801ca96:	7823      	ldrb	r3, [r4, #0]
 801ca98:	2b2e      	cmp	r3, #46	; 0x2e
 801ca9a:	d10c      	bne.n	801cab6 <_vfiprintf_r+0x176>
 801ca9c:	7863      	ldrb	r3, [r4, #1]
 801ca9e:	2b2a      	cmp	r3, #42	; 0x2a
 801caa0:	d135      	bne.n	801cb0e <_vfiprintf_r+0x1ce>
 801caa2:	9b03      	ldr	r3, [sp, #12]
 801caa4:	1d1a      	adds	r2, r3, #4
 801caa6:	681b      	ldr	r3, [r3, #0]
 801caa8:	9203      	str	r2, [sp, #12]
 801caaa:	2b00      	cmp	r3, #0
 801caac:	bfb8      	it	lt
 801caae:	f04f 33ff 	movlt.w	r3, #4294967295
 801cab2:	3402      	adds	r4, #2
 801cab4:	9305      	str	r3, [sp, #20]
 801cab6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801cb9c <_vfiprintf_r+0x25c>
 801caba:	7821      	ldrb	r1, [r4, #0]
 801cabc:	2203      	movs	r2, #3
 801cabe:	4650      	mov	r0, sl
 801cac0:	f7e3 fc26 	bl	8000310 <memchr>
 801cac4:	b140      	cbz	r0, 801cad8 <_vfiprintf_r+0x198>
 801cac6:	2340      	movs	r3, #64	; 0x40
 801cac8:	eba0 000a 	sub.w	r0, r0, sl
 801cacc:	fa03 f000 	lsl.w	r0, r3, r0
 801cad0:	9b04      	ldr	r3, [sp, #16]
 801cad2:	4303      	orrs	r3, r0
 801cad4:	3401      	adds	r4, #1
 801cad6:	9304      	str	r3, [sp, #16]
 801cad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cadc:	482c      	ldr	r0, [pc, #176]	; (801cb90 <_vfiprintf_r+0x250>)
 801cade:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801cae2:	2206      	movs	r2, #6
 801cae4:	f7e3 fc14 	bl	8000310 <memchr>
 801cae8:	2800      	cmp	r0, #0
 801caea:	d03f      	beq.n	801cb6c <_vfiprintf_r+0x22c>
 801caec:	4b29      	ldr	r3, [pc, #164]	; (801cb94 <_vfiprintf_r+0x254>)
 801caee:	bb1b      	cbnz	r3, 801cb38 <_vfiprintf_r+0x1f8>
 801caf0:	9b03      	ldr	r3, [sp, #12]
 801caf2:	3307      	adds	r3, #7
 801caf4:	f023 0307 	bic.w	r3, r3, #7
 801caf8:	3308      	adds	r3, #8
 801cafa:	9303      	str	r3, [sp, #12]
 801cafc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cafe:	443b      	add	r3, r7
 801cb00:	9309      	str	r3, [sp, #36]	; 0x24
 801cb02:	e767      	b.n	801c9d4 <_vfiprintf_r+0x94>
 801cb04:	fb0c 3202 	mla	r2, ip, r2, r3
 801cb08:	460c      	mov	r4, r1
 801cb0a:	2001      	movs	r0, #1
 801cb0c:	e7a5      	b.n	801ca5a <_vfiprintf_r+0x11a>
 801cb0e:	2300      	movs	r3, #0
 801cb10:	3401      	adds	r4, #1
 801cb12:	9305      	str	r3, [sp, #20]
 801cb14:	4619      	mov	r1, r3
 801cb16:	f04f 0c0a 	mov.w	ip, #10
 801cb1a:	4620      	mov	r0, r4
 801cb1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cb20:	3a30      	subs	r2, #48	; 0x30
 801cb22:	2a09      	cmp	r2, #9
 801cb24:	d903      	bls.n	801cb2e <_vfiprintf_r+0x1ee>
 801cb26:	2b00      	cmp	r3, #0
 801cb28:	d0c5      	beq.n	801cab6 <_vfiprintf_r+0x176>
 801cb2a:	9105      	str	r1, [sp, #20]
 801cb2c:	e7c3      	b.n	801cab6 <_vfiprintf_r+0x176>
 801cb2e:	fb0c 2101 	mla	r1, ip, r1, r2
 801cb32:	4604      	mov	r4, r0
 801cb34:	2301      	movs	r3, #1
 801cb36:	e7f0      	b.n	801cb1a <_vfiprintf_r+0x1da>
 801cb38:	ab03      	add	r3, sp, #12
 801cb3a:	9300      	str	r3, [sp, #0]
 801cb3c:	462a      	mov	r2, r5
 801cb3e:	4b16      	ldr	r3, [pc, #88]	; (801cb98 <_vfiprintf_r+0x258>)
 801cb40:	a904      	add	r1, sp, #16
 801cb42:	4630      	mov	r0, r6
 801cb44:	f000 f8bc 	bl	801ccc0 <_printf_float>
 801cb48:	4607      	mov	r7, r0
 801cb4a:	1c78      	adds	r0, r7, #1
 801cb4c:	d1d6      	bne.n	801cafc <_vfiprintf_r+0x1bc>
 801cb4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801cb50:	07d9      	lsls	r1, r3, #31
 801cb52:	d405      	bmi.n	801cb60 <_vfiprintf_r+0x220>
 801cb54:	89ab      	ldrh	r3, [r5, #12]
 801cb56:	059a      	lsls	r2, r3, #22
 801cb58:	d402      	bmi.n	801cb60 <_vfiprintf_r+0x220>
 801cb5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801cb5c:	f003 fa1a 	bl	801ff94 <__retarget_lock_release_recursive>
 801cb60:	89ab      	ldrh	r3, [r5, #12]
 801cb62:	065b      	lsls	r3, r3, #25
 801cb64:	f53f af12 	bmi.w	801c98c <_vfiprintf_r+0x4c>
 801cb68:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cb6a:	e711      	b.n	801c990 <_vfiprintf_r+0x50>
 801cb6c:	ab03      	add	r3, sp, #12
 801cb6e:	9300      	str	r3, [sp, #0]
 801cb70:	462a      	mov	r2, r5
 801cb72:	4b09      	ldr	r3, [pc, #36]	; (801cb98 <_vfiprintf_r+0x258>)
 801cb74:	a904      	add	r1, sp, #16
 801cb76:	4630      	mov	r0, r6
 801cb78:	f000 fb2e 	bl	801d1d8 <_printf_i>
 801cb7c:	e7e4      	b.n	801cb48 <_vfiprintf_r+0x208>
 801cb7e:	bf00      	nop
 801cb80:	0802a984 	.word	0x0802a984
 801cb84:	0802a9a4 	.word	0x0802a9a4
 801cb88:	0802a964 	.word	0x0802a964
 801cb8c:	0802a830 	.word	0x0802a830
 801cb90:	0802a83a 	.word	0x0802a83a
 801cb94:	0801ccc1 	.word	0x0801ccc1
 801cb98:	0801c91b 	.word	0x0801c91b
 801cb9c:	0802a836 	.word	0x0802a836

0801cba0 <__cvt>:
 801cba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cba2:	ed2d 8b02 	vpush	{d8}
 801cba6:	eeb0 8b40 	vmov.f64	d8, d0
 801cbaa:	b085      	sub	sp, #20
 801cbac:	4617      	mov	r7, r2
 801cbae:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801cbb0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801cbb2:	ee18 2a90 	vmov	r2, s17
 801cbb6:	f025 0520 	bic.w	r5, r5, #32
 801cbba:	2a00      	cmp	r2, #0
 801cbbc:	bfb6      	itet	lt
 801cbbe:	222d      	movlt	r2, #45	; 0x2d
 801cbc0:	2200      	movge	r2, #0
 801cbc2:	eeb1 8b40 	vneglt.f64	d8, d0
 801cbc6:	2d46      	cmp	r5, #70	; 0x46
 801cbc8:	460c      	mov	r4, r1
 801cbca:	701a      	strb	r2, [r3, #0]
 801cbcc:	d004      	beq.n	801cbd8 <__cvt+0x38>
 801cbce:	2d45      	cmp	r5, #69	; 0x45
 801cbd0:	d100      	bne.n	801cbd4 <__cvt+0x34>
 801cbd2:	3401      	adds	r4, #1
 801cbd4:	2102      	movs	r1, #2
 801cbd6:	e000      	b.n	801cbda <__cvt+0x3a>
 801cbd8:	2103      	movs	r1, #3
 801cbda:	ab03      	add	r3, sp, #12
 801cbdc:	9301      	str	r3, [sp, #4]
 801cbde:	ab02      	add	r3, sp, #8
 801cbe0:	9300      	str	r3, [sp, #0]
 801cbe2:	4622      	mov	r2, r4
 801cbe4:	4633      	mov	r3, r6
 801cbe6:	eeb0 0b48 	vmov.f64	d0, d8
 801cbea:	f001 ff25 	bl	801ea38 <_dtoa_r>
 801cbee:	2d47      	cmp	r5, #71	; 0x47
 801cbf0:	d109      	bne.n	801cc06 <__cvt+0x66>
 801cbf2:	07fb      	lsls	r3, r7, #31
 801cbf4:	d407      	bmi.n	801cc06 <__cvt+0x66>
 801cbf6:	9b03      	ldr	r3, [sp, #12]
 801cbf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cbfa:	1a1b      	subs	r3, r3, r0
 801cbfc:	6013      	str	r3, [r2, #0]
 801cbfe:	b005      	add	sp, #20
 801cc00:	ecbd 8b02 	vpop	{d8}
 801cc04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cc06:	2d46      	cmp	r5, #70	; 0x46
 801cc08:	eb00 0204 	add.w	r2, r0, r4
 801cc0c:	d10c      	bne.n	801cc28 <__cvt+0x88>
 801cc0e:	7803      	ldrb	r3, [r0, #0]
 801cc10:	2b30      	cmp	r3, #48	; 0x30
 801cc12:	d107      	bne.n	801cc24 <__cvt+0x84>
 801cc14:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801cc18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc1c:	bf1c      	itt	ne
 801cc1e:	f1c4 0401 	rsbne	r4, r4, #1
 801cc22:	6034      	strne	r4, [r6, #0]
 801cc24:	6833      	ldr	r3, [r6, #0]
 801cc26:	441a      	add	r2, r3
 801cc28:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801cc2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc30:	bf08      	it	eq
 801cc32:	9203      	streq	r2, [sp, #12]
 801cc34:	2130      	movs	r1, #48	; 0x30
 801cc36:	9b03      	ldr	r3, [sp, #12]
 801cc38:	4293      	cmp	r3, r2
 801cc3a:	d2dc      	bcs.n	801cbf6 <__cvt+0x56>
 801cc3c:	1c5c      	adds	r4, r3, #1
 801cc3e:	9403      	str	r4, [sp, #12]
 801cc40:	7019      	strb	r1, [r3, #0]
 801cc42:	e7f8      	b.n	801cc36 <__cvt+0x96>

0801cc44 <__exponent>:
 801cc44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cc46:	4603      	mov	r3, r0
 801cc48:	2900      	cmp	r1, #0
 801cc4a:	bfb8      	it	lt
 801cc4c:	4249      	neglt	r1, r1
 801cc4e:	f803 2b02 	strb.w	r2, [r3], #2
 801cc52:	bfb4      	ite	lt
 801cc54:	222d      	movlt	r2, #45	; 0x2d
 801cc56:	222b      	movge	r2, #43	; 0x2b
 801cc58:	2909      	cmp	r1, #9
 801cc5a:	7042      	strb	r2, [r0, #1]
 801cc5c:	dd2a      	ble.n	801ccb4 <__exponent+0x70>
 801cc5e:	f10d 0407 	add.w	r4, sp, #7
 801cc62:	46a4      	mov	ip, r4
 801cc64:	270a      	movs	r7, #10
 801cc66:	46a6      	mov	lr, r4
 801cc68:	460a      	mov	r2, r1
 801cc6a:	fb91 f6f7 	sdiv	r6, r1, r7
 801cc6e:	fb07 1516 	mls	r5, r7, r6, r1
 801cc72:	3530      	adds	r5, #48	; 0x30
 801cc74:	2a63      	cmp	r2, #99	; 0x63
 801cc76:	f104 34ff 	add.w	r4, r4, #4294967295
 801cc7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801cc7e:	4631      	mov	r1, r6
 801cc80:	dcf1      	bgt.n	801cc66 <__exponent+0x22>
 801cc82:	3130      	adds	r1, #48	; 0x30
 801cc84:	f1ae 0502 	sub.w	r5, lr, #2
 801cc88:	f804 1c01 	strb.w	r1, [r4, #-1]
 801cc8c:	1c44      	adds	r4, r0, #1
 801cc8e:	4629      	mov	r1, r5
 801cc90:	4561      	cmp	r1, ip
 801cc92:	d30a      	bcc.n	801ccaa <__exponent+0x66>
 801cc94:	f10d 0209 	add.w	r2, sp, #9
 801cc98:	eba2 020e 	sub.w	r2, r2, lr
 801cc9c:	4565      	cmp	r5, ip
 801cc9e:	bf88      	it	hi
 801cca0:	2200      	movhi	r2, #0
 801cca2:	4413      	add	r3, r2
 801cca4:	1a18      	subs	r0, r3, r0
 801cca6:	b003      	add	sp, #12
 801cca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ccaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ccae:	f804 2f01 	strb.w	r2, [r4, #1]!
 801ccb2:	e7ed      	b.n	801cc90 <__exponent+0x4c>
 801ccb4:	2330      	movs	r3, #48	; 0x30
 801ccb6:	3130      	adds	r1, #48	; 0x30
 801ccb8:	7083      	strb	r3, [r0, #2]
 801ccba:	70c1      	strb	r1, [r0, #3]
 801ccbc:	1d03      	adds	r3, r0, #4
 801ccbe:	e7f1      	b.n	801cca4 <__exponent+0x60>

0801ccc0 <_printf_float>:
 801ccc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccc4:	b08b      	sub	sp, #44	; 0x2c
 801ccc6:	460c      	mov	r4, r1
 801ccc8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801cccc:	4616      	mov	r6, r2
 801ccce:	461f      	mov	r7, r3
 801ccd0:	4605      	mov	r5, r0
 801ccd2:	f003 f959 	bl	801ff88 <_localeconv_r>
 801ccd6:	f8d0 b000 	ldr.w	fp, [r0]
 801ccda:	4658      	mov	r0, fp
 801ccdc:	f7e3 fb0a 	bl	80002f4 <strlen>
 801cce0:	2300      	movs	r3, #0
 801cce2:	9308      	str	r3, [sp, #32]
 801cce4:	f8d8 3000 	ldr.w	r3, [r8]
 801cce8:	f894 9018 	ldrb.w	r9, [r4, #24]
 801ccec:	6822      	ldr	r2, [r4, #0]
 801ccee:	3307      	adds	r3, #7
 801ccf0:	f023 0307 	bic.w	r3, r3, #7
 801ccf4:	f103 0108 	add.w	r1, r3, #8
 801ccf8:	f8c8 1000 	str.w	r1, [r8]
 801ccfc:	4682      	mov	sl, r0
 801ccfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cd02:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801cd06:	ed9f 7b98 	vldr	d7, [pc, #608]	; 801cf68 <_printf_float+0x2a8>
 801cd0a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801cd0e:	eeb0 6bc0 	vabs.f64	d6, d0
 801cd12:	eeb4 6b47 	vcmp.f64	d6, d7
 801cd16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd1a:	dd24      	ble.n	801cd66 <_printf_float+0xa6>
 801cd1c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801cd20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd24:	d502      	bpl.n	801cd2c <_printf_float+0x6c>
 801cd26:	232d      	movs	r3, #45	; 0x2d
 801cd28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cd2c:	4b90      	ldr	r3, [pc, #576]	; (801cf70 <_printf_float+0x2b0>)
 801cd2e:	4891      	ldr	r0, [pc, #580]	; (801cf74 <_printf_float+0x2b4>)
 801cd30:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801cd34:	bf94      	ite	ls
 801cd36:	4698      	movls	r8, r3
 801cd38:	4680      	movhi	r8, r0
 801cd3a:	2303      	movs	r3, #3
 801cd3c:	6123      	str	r3, [r4, #16]
 801cd3e:	f022 0204 	bic.w	r2, r2, #4
 801cd42:	2300      	movs	r3, #0
 801cd44:	6022      	str	r2, [r4, #0]
 801cd46:	9304      	str	r3, [sp, #16]
 801cd48:	9700      	str	r7, [sp, #0]
 801cd4a:	4633      	mov	r3, r6
 801cd4c:	aa09      	add	r2, sp, #36	; 0x24
 801cd4e:	4621      	mov	r1, r4
 801cd50:	4628      	mov	r0, r5
 801cd52:	f000 f9d3 	bl	801d0fc <_printf_common>
 801cd56:	3001      	adds	r0, #1
 801cd58:	f040 808a 	bne.w	801ce70 <_printf_float+0x1b0>
 801cd5c:	f04f 30ff 	mov.w	r0, #4294967295
 801cd60:	b00b      	add	sp, #44	; 0x2c
 801cd62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd66:	eeb4 0b40 	vcmp.f64	d0, d0
 801cd6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd6e:	d709      	bvc.n	801cd84 <_printf_float+0xc4>
 801cd70:	ee10 3a90 	vmov	r3, s1
 801cd74:	2b00      	cmp	r3, #0
 801cd76:	bfbc      	itt	lt
 801cd78:	232d      	movlt	r3, #45	; 0x2d
 801cd7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801cd7e:	487e      	ldr	r0, [pc, #504]	; (801cf78 <_printf_float+0x2b8>)
 801cd80:	4b7e      	ldr	r3, [pc, #504]	; (801cf7c <_printf_float+0x2bc>)
 801cd82:	e7d5      	b.n	801cd30 <_printf_float+0x70>
 801cd84:	6863      	ldr	r3, [r4, #4]
 801cd86:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801cd8a:	9104      	str	r1, [sp, #16]
 801cd8c:	1c59      	adds	r1, r3, #1
 801cd8e:	d13c      	bne.n	801ce0a <_printf_float+0x14a>
 801cd90:	2306      	movs	r3, #6
 801cd92:	6063      	str	r3, [r4, #4]
 801cd94:	2300      	movs	r3, #0
 801cd96:	9303      	str	r3, [sp, #12]
 801cd98:	ab08      	add	r3, sp, #32
 801cd9a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801cd9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801cda2:	ab07      	add	r3, sp, #28
 801cda4:	6861      	ldr	r1, [r4, #4]
 801cda6:	9300      	str	r3, [sp, #0]
 801cda8:	6022      	str	r2, [r4, #0]
 801cdaa:	f10d 031b 	add.w	r3, sp, #27
 801cdae:	4628      	mov	r0, r5
 801cdb0:	f7ff fef6 	bl	801cba0 <__cvt>
 801cdb4:	9b04      	ldr	r3, [sp, #16]
 801cdb6:	9907      	ldr	r1, [sp, #28]
 801cdb8:	2b47      	cmp	r3, #71	; 0x47
 801cdba:	4680      	mov	r8, r0
 801cdbc:	d108      	bne.n	801cdd0 <_printf_float+0x110>
 801cdbe:	1cc8      	adds	r0, r1, #3
 801cdc0:	db02      	blt.n	801cdc8 <_printf_float+0x108>
 801cdc2:	6863      	ldr	r3, [r4, #4]
 801cdc4:	4299      	cmp	r1, r3
 801cdc6:	dd41      	ble.n	801ce4c <_printf_float+0x18c>
 801cdc8:	f1a9 0902 	sub.w	r9, r9, #2
 801cdcc:	fa5f f989 	uxtb.w	r9, r9
 801cdd0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801cdd4:	d820      	bhi.n	801ce18 <_printf_float+0x158>
 801cdd6:	3901      	subs	r1, #1
 801cdd8:	464a      	mov	r2, r9
 801cdda:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801cdde:	9107      	str	r1, [sp, #28]
 801cde0:	f7ff ff30 	bl	801cc44 <__exponent>
 801cde4:	9a08      	ldr	r2, [sp, #32]
 801cde6:	9004      	str	r0, [sp, #16]
 801cde8:	1813      	adds	r3, r2, r0
 801cdea:	2a01      	cmp	r2, #1
 801cdec:	6123      	str	r3, [r4, #16]
 801cdee:	dc02      	bgt.n	801cdf6 <_printf_float+0x136>
 801cdf0:	6822      	ldr	r2, [r4, #0]
 801cdf2:	07d2      	lsls	r2, r2, #31
 801cdf4:	d501      	bpl.n	801cdfa <_printf_float+0x13a>
 801cdf6:	3301      	adds	r3, #1
 801cdf8:	6123      	str	r3, [r4, #16]
 801cdfa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801cdfe:	2b00      	cmp	r3, #0
 801ce00:	d0a2      	beq.n	801cd48 <_printf_float+0x88>
 801ce02:	232d      	movs	r3, #45	; 0x2d
 801ce04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ce08:	e79e      	b.n	801cd48 <_printf_float+0x88>
 801ce0a:	9904      	ldr	r1, [sp, #16]
 801ce0c:	2947      	cmp	r1, #71	; 0x47
 801ce0e:	d1c1      	bne.n	801cd94 <_printf_float+0xd4>
 801ce10:	2b00      	cmp	r3, #0
 801ce12:	d1bf      	bne.n	801cd94 <_printf_float+0xd4>
 801ce14:	2301      	movs	r3, #1
 801ce16:	e7bc      	b.n	801cd92 <_printf_float+0xd2>
 801ce18:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801ce1c:	d118      	bne.n	801ce50 <_printf_float+0x190>
 801ce1e:	2900      	cmp	r1, #0
 801ce20:	6863      	ldr	r3, [r4, #4]
 801ce22:	dd0b      	ble.n	801ce3c <_printf_float+0x17c>
 801ce24:	6121      	str	r1, [r4, #16]
 801ce26:	b913      	cbnz	r3, 801ce2e <_printf_float+0x16e>
 801ce28:	6822      	ldr	r2, [r4, #0]
 801ce2a:	07d0      	lsls	r0, r2, #31
 801ce2c:	d502      	bpl.n	801ce34 <_printf_float+0x174>
 801ce2e:	3301      	adds	r3, #1
 801ce30:	440b      	add	r3, r1
 801ce32:	6123      	str	r3, [r4, #16]
 801ce34:	2300      	movs	r3, #0
 801ce36:	65a1      	str	r1, [r4, #88]	; 0x58
 801ce38:	9304      	str	r3, [sp, #16]
 801ce3a:	e7de      	b.n	801cdfa <_printf_float+0x13a>
 801ce3c:	b913      	cbnz	r3, 801ce44 <_printf_float+0x184>
 801ce3e:	6822      	ldr	r2, [r4, #0]
 801ce40:	07d2      	lsls	r2, r2, #31
 801ce42:	d501      	bpl.n	801ce48 <_printf_float+0x188>
 801ce44:	3302      	adds	r3, #2
 801ce46:	e7f4      	b.n	801ce32 <_printf_float+0x172>
 801ce48:	2301      	movs	r3, #1
 801ce4a:	e7f2      	b.n	801ce32 <_printf_float+0x172>
 801ce4c:	f04f 0967 	mov.w	r9, #103	; 0x67
 801ce50:	9b08      	ldr	r3, [sp, #32]
 801ce52:	4299      	cmp	r1, r3
 801ce54:	db05      	blt.n	801ce62 <_printf_float+0x1a2>
 801ce56:	6823      	ldr	r3, [r4, #0]
 801ce58:	6121      	str	r1, [r4, #16]
 801ce5a:	07d8      	lsls	r0, r3, #31
 801ce5c:	d5ea      	bpl.n	801ce34 <_printf_float+0x174>
 801ce5e:	1c4b      	adds	r3, r1, #1
 801ce60:	e7e7      	b.n	801ce32 <_printf_float+0x172>
 801ce62:	2900      	cmp	r1, #0
 801ce64:	bfd4      	ite	le
 801ce66:	f1c1 0202 	rsble	r2, r1, #2
 801ce6a:	2201      	movgt	r2, #1
 801ce6c:	4413      	add	r3, r2
 801ce6e:	e7e0      	b.n	801ce32 <_printf_float+0x172>
 801ce70:	6823      	ldr	r3, [r4, #0]
 801ce72:	055a      	lsls	r2, r3, #21
 801ce74:	d407      	bmi.n	801ce86 <_printf_float+0x1c6>
 801ce76:	6923      	ldr	r3, [r4, #16]
 801ce78:	4642      	mov	r2, r8
 801ce7a:	4631      	mov	r1, r6
 801ce7c:	4628      	mov	r0, r5
 801ce7e:	47b8      	blx	r7
 801ce80:	3001      	adds	r0, #1
 801ce82:	d12a      	bne.n	801ceda <_printf_float+0x21a>
 801ce84:	e76a      	b.n	801cd5c <_printf_float+0x9c>
 801ce86:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801ce8a:	f240 80e2 	bls.w	801d052 <_printf_float+0x392>
 801ce8e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801ce92:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ce96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce9a:	d133      	bne.n	801cf04 <_printf_float+0x244>
 801ce9c:	4a38      	ldr	r2, [pc, #224]	; (801cf80 <_printf_float+0x2c0>)
 801ce9e:	2301      	movs	r3, #1
 801cea0:	4631      	mov	r1, r6
 801cea2:	4628      	mov	r0, r5
 801cea4:	47b8      	blx	r7
 801cea6:	3001      	adds	r0, #1
 801cea8:	f43f af58 	beq.w	801cd5c <_printf_float+0x9c>
 801ceac:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801ceb0:	429a      	cmp	r2, r3
 801ceb2:	db02      	blt.n	801ceba <_printf_float+0x1fa>
 801ceb4:	6823      	ldr	r3, [r4, #0]
 801ceb6:	07d8      	lsls	r0, r3, #31
 801ceb8:	d50f      	bpl.n	801ceda <_printf_float+0x21a>
 801ceba:	4653      	mov	r3, sl
 801cebc:	465a      	mov	r2, fp
 801cebe:	4631      	mov	r1, r6
 801cec0:	4628      	mov	r0, r5
 801cec2:	47b8      	blx	r7
 801cec4:	3001      	adds	r0, #1
 801cec6:	f43f af49 	beq.w	801cd5c <_printf_float+0x9c>
 801ceca:	f04f 0800 	mov.w	r8, #0
 801cece:	f104 091a 	add.w	r9, r4, #26
 801ced2:	9b08      	ldr	r3, [sp, #32]
 801ced4:	3b01      	subs	r3, #1
 801ced6:	4543      	cmp	r3, r8
 801ced8:	dc09      	bgt.n	801ceee <_printf_float+0x22e>
 801ceda:	6823      	ldr	r3, [r4, #0]
 801cedc:	079b      	lsls	r3, r3, #30
 801cede:	f100 8108 	bmi.w	801d0f2 <_printf_float+0x432>
 801cee2:	68e0      	ldr	r0, [r4, #12]
 801cee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cee6:	4298      	cmp	r0, r3
 801cee8:	bfb8      	it	lt
 801ceea:	4618      	movlt	r0, r3
 801ceec:	e738      	b.n	801cd60 <_printf_float+0xa0>
 801ceee:	2301      	movs	r3, #1
 801cef0:	464a      	mov	r2, r9
 801cef2:	4631      	mov	r1, r6
 801cef4:	4628      	mov	r0, r5
 801cef6:	47b8      	blx	r7
 801cef8:	3001      	adds	r0, #1
 801cefa:	f43f af2f 	beq.w	801cd5c <_printf_float+0x9c>
 801cefe:	f108 0801 	add.w	r8, r8, #1
 801cf02:	e7e6      	b.n	801ced2 <_printf_float+0x212>
 801cf04:	9b07      	ldr	r3, [sp, #28]
 801cf06:	2b00      	cmp	r3, #0
 801cf08:	dc3c      	bgt.n	801cf84 <_printf_float+0x2c4>
 801cf0a:	4a1d      	ldr	r2, [pc, #116]	; (801cf80 <_printf_float+0x2c0>)
 801cf0c:	2301      	movs	r3, #1
 801cf0e:	4631      	mov	r1, r6
 801cf10:	4628      	mov	r0, r5
 801cf12:	47b8      	blx	r7
 801cf14:	3001      	adds	r0, #1
 801cf16:	f43f af21 	beq.w	801cd5c <_printf_float+0x9c>
 801cf1a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801cf1e:	4313      	orrs	r3, r2
 801cf20:	d102      	bne.n	801cf28 <_printf_float+0x268>
 801cf22:	6823      	ldr	r3, [r4, #0]
 801cf24:	07d9      	lsls	r1, r3, #31
 801cf26:	d5d8      	bpl.n	801ceda <_printf_float+0x21a>
 801cf28:	4653      	mov	r3, sl
 801cf2a:	465a      	mov	r2, fp
 801cf2c:	4631      	mov	r1, r6
 801cf2e:	4628      	mov	r0, r5
 801cf30:	47b8      	blx	r7
 801cf32:	3001      	adds	r0, #1
 801cf34:	f43f af12 	beq.w	801cd5c <_printf_float+0x9c>
 801cf38:	f04f 0900 	mov.w	r9, #0
 801cf3c:	f104 0a1a 	add.w	sl, r4, #26
 801cf40:	9b07      	ldr	r3, [sp, #28]
 801cf42:	425b      	negs	r3, r3
 801cf44:	454b      	cmp	r3, r9
 801cf46:	dc01      	bgt.n	801cf4c <_printf_float+0x28c>
 801cf48:	9b08      	ldr	r3, [sp, #32]
 801cf4a:	e795      	b.n	801ce78 <_printf_float+0x1b8>
 801cf4c:	2301      	movs	r3, #1
 801cf4e:	4652      	mov	r2, sl
 801cf50:	4631      	mov	r1, r6
 801cf52:	4628      	mov	r0, r5
 801cf54:	47b8      	blx	r7
 801cf56:	3001      	adds	r0, #1
 801cf58:	f43f af00 	beq.w	801cd5c <_printf_float+0x9c>
 801cf5c:	f109 0901 	add.w	r9, r9, #1
 801cf60:	e7ee      	b.n	801cf40 <_printf_float+0x280>
 801cf62:	bf00      	nop
 801cf64:	f3af 8000 	nop.w
 801cf68:	ffffffff 	.word	0xffffffff
 801cf6c:	7fefffff 	.word	0x7fefffff
 801cf70:	0802a841 	.word	0x0802a841
 801cf74:	0802a845 	.word	0x0802a845
 801cf78:	0802a84d 	.word	0x0802a84d
 801cf7c:	0802a849 	.word	0x0802a849
 801cf80:	0802a851 	.word	0x0802a851
 801cf84:	9a08      	ldr	r2, [sp, #32]
 801cf86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801cf88:	429a      	cmp	r2, r3
 801cf8a:	bfa8      	it	ge
 801cf8c:	461a      	movge	r2, r3
 801cf8e:	2a00      	cmp	r2, #0
 801cf90:	4691      	mov	r9, r2
 801cf92:	dc38      	bgt.n	801d006 <_printf_float+0x346>
 801cf94:	2300      	movs	r3, #0
 801cf96:	9305      	str	r3, [sp, #20]
 801cf98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801cf9c:	f104 021a 	add.w	r2, r4, #26
 801cfa0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801cfa2:	9905      	ldr	r1, [sp, #20]
 801cfa4:	9304      	str	r3, [sp, #16]
 801cfa6:	eba3 0309 	sub.w	r3, r3, r9
 801cfaa:	428b      	cmp	r3, r1
 801cfac:	dc33      	bgt.n	801d016 <_printf_float+0x356>
 801cfae:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801cfb2:	429a      	cmp	r2, r3
 801cfb4:	db3c      	blt.n	801d030 <_printf_float+0x370>
 801cfb6:	6823      	ldr	r3, [r4, #0]
 801cfb8:	07da      	lsls	r2, r3, #31
 801cfba:	d439      	bmi.n	801d030 <_printf_float+0x370>
 801cfbc:	9a08      	ldr	r2, [sp, #32]
 801cfbe:	9b04      	ldr	r3, [sp, #16]
 801cfc0:	9907      	ldr	r1, [sp, #28]
 801cfc2:	1ad3      	subs	r3, r2, r3
 801cfc4:	eba2 0901 	sub.w	r9, r2, r1
 801cfc8:	4599      	cmp	r9, r3
 801cfca:	bfa8      	it	ge
 801cfcc:	4699      	movge	r9, r3
 801cfce:	f1b9 0f00 	cmp.w	r9, #0
 801cfd2:	dc35      	bgt.n	801d040 <_printf_float+0x380>
 801cfd4:	f04f 0800 	mov.w	r8, #0
 801cfd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801cfdc:	f104 0a1a 	add.w	sl, r4, #26
 801cfe0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801cfe4:	1a9b      	subs	r3, r3, r2
 801cfe6:	eba3 0309 	sub.w	r3, r3, r9
 801cfea:	4543      	cmp	r3, r8
 801cfec:	f77f af75 	ble.w	801ceda <_printf_float+0x21a>
 801cff0:	2301      	movs	r3, #1
 801cff2:	4652      	mov	r2, sl
 801cff4:	4631      	mov	r1, r6
 801cff6:	4628      	mov	r0, r5
 801cff8:	47b8      	blx	r7
 801cffa:	3001      	adds	r0, #1
 801cffc:	f43f aeae 	beq.w	801cd5c <_printf_float+0x9c>
 801d000:	f108 0801 	add.w	r8, r8, #1
 801d004:	e7ec      	b.n	801cfe0 <_printf_float+0x320>
 801d006:	4613      	mov	r3, r2
 801d008:	4631      	mov	r1, r6
 801d00a:	4642      	mov	r2, r8
 801d00c:	4628      	mov	r0, r5
 801d00e:	47b8      	blx	r7
 801d010:	3001      	adds	r0, #1
 801d012:	d1bf      	bne.n	801cf94 <_printf_float+0x2d4>
 801d014:	e6a2      	b.n	801cd5c <_printf_float+0x9c>
 801d016:	2301      	movs	r3, #1
 801d018:	4631      	mov	r1, r6
 801d01a:	4628      	mov	r0, r5
 801d01c:	9204      	str	r2, [sp, #16]
 801d01e:	47b8      	blx	r7
 801d020:	3001      	adds	r0, #1
 801d022:	f43f ae9b 	beq.w	801cd5c <_printf_float+0x9c>
 801d026:	9b05      	ldr	r3, [sp, #20]
 801d028:	9a04      	ldr	r2, [sp, #16]
 801d02a:	3301      	adds	r3, #1
 801d02c:	9305      	str	r3, [sp, #20]
 801d02e:	e7b7      	b.n	801cfa0 <_printf_float+0x2e0>
 801d030:	4653      	mov	r3, sl
 801d032:	465a      	mov	r2, fp
 801d034:	4631      	mov	r1, r6
 801d036:	4628      	mov	r0, r5
 801d038:	47b8      	blx	r7
 801d03a:	3001      	adds	r0, #1
 801d03c:	d1be      	bne.n	801cfbc <_printf_float+0x2fc>
 801d03e:	e68d      	b.n	801cd5c <_printf_float+0x9c>
 801d040:	9a04      	ldr	r2, [sp, #16]
 801d042:	464b      	mov	r3, r9
 801d044:	4442      	add	r2, r8
 801d046:	4631      	mov	r1, r6
 801d048:	4628      	mov	r0, r5
 801d04a:	47b8      	blx	r7
 801d04c:	3001      	adds	r0, #1
 801d04e:	d1c1      	bne.n	801cfd4 <_printf_float+0x314>
 801d050:	e684      	b.n	801cd5c <_printf_float+0x9c>
 801d052:	9a08      	ldr	r2, [sp, #32]
 801d054:	2a01      	cmp	r2, #1
 801d056:	dc01      	bgt.n	801d05c <_printf_float+0x39c>
 801d058:	07db      	lsls	r3, r3, #31
 801d05a:	d537      	bpl.n	801d0cc <_printf_float+0x40c>
 801d05c:	2301      	movs	r3, #1
 801d05e:	4642      	mov	r2, r8
 801d060:	4631      	mov	r1, r6
 801d062:	4628      	mov	r0, r5
 801d064:	47b8      	blx	r7
 801d066:	3001      	adds	r0, #1
 801d068:	f43f ae78 	beq.w	801cd5c <_printf_float+0x9c>
 801d06c:	4653      	mov	r3, sl
 801d06e:	465a      	mov	r2, fp
 801d070:	4631      	mov	r1, r6
 801d072:	4628      	mov	r0, r5
 801d074:	47b8      	blx	r7
 801d076:	3001      	adds	r0, #1
 801d078:	f43f ae70 	beq.w	801cd5c <_printf_float+0x9c>
 801d07c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801d080:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801d084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d088:	d01b      	beq.n	801d0c2 <_printf_float+0x402>
 801d08a:	9b08      	ldr	r3, [sp, #32]
 801d08c:	f108 0201 	add.w	r2, r8, #1
 801d090:	3b01      	subs	r3, #1
 801d092:	4631      	mov	r1, r6
 801d094:	4628      	mov	r0, r5
 801d096:	47b8      	blx	r7
 801d098:	3001      	adds	r0, #1
 801d09a:	d10e      	bne.n	801d0ba <_printf_float+0x3fa>
 801d09c:	e65e      	b.n	801cd5c <_printf_float+0x9c>
 801d09e:	2301      	movs	r3, #1
 801d0a0:	464a      	mov	r2, r9
 801d0a2:	4631      	mov	r1, r6
 801d0a4:	4628      	mov	r0, r5
 801d0a6:	47b8      	blx	r7
 801d0a8:	3001      	adds	r0, #1
 801d0aa:	f43f ae57 	beq.w	801cd5c <_printf_float+0x9c>
 801d0ae:	f108 0801 	add.w	r8, r8, #1
 801d0b2:	9b08      	ldr	r3, [sp, #32]
 801d0b4:	3b01      	subs	r3, #1
 801d0b6:	4543      	cmp	r3, r8
 801d0b8:	dcf1      	bgt.n	801d09e <_printf_float+0x3de>
 801d0ba:	9b04      	ldr	r3, [sp, #16]
 801d0bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801d0c0:	e6db      	b.n	801ce7a <_printf_float+0x1ba>
 801d0c2:	f04f 0800 	mov.w	r8, #0
 801d0c6:	f104 091a 	add.w	r9, r4, #26
 801d0ca:	e7f2      	b.n	801d0b2 <_printf_float+0x3f2>
 801d0cc:	2301      	movs	r3, #1
 801d0ce:	4642      	mov	r2, r8
 801d0d0:	e7df      	b.n	801d092 <_printf_float+0x3d2>
 801d0d2:	2301      	movs	r3, #1
 801d0d4:	464a      	mov	r2, r9
 801d0d6:	4631      	mov	r1, r6
 801d0d8:	4628      	mov	r0, r5
 801d0da:	47b8      	blx	r7
 801d0dc:	3001      	adds	r0, #1
 801d0de:	f43f ae3d 	beq.w	801cd5c <_printf_float+0x9c>
 801d0e2:	f108 0801 	add.w	r8, r8, #1
 801d0e6:	68e3      	ldr	r3, [r4, #12]
 801d0e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d0ea:	1a5b      	subs	r3, r3, r1
 801d0ec:	4543      	cmp	r3, r8
 801d0ee:	dcf0      	bgt.n	801d0d2 <_printf_float+0x412>
 801d0f0:	e6f7      	b.n	801cee2 <_printf_float+0x222>
 801d0f2:	f04f 0800 	mov.w	r8, #0
 801d0f6:	f104 0919 	add.w	r9, r4, #25
 801d0fa:	e7f4      	b.n	801d0e6 <_printf_float+0x426>

0801d0fc <_printf_common>:
 801d0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d100:	4616      	mov	r6, r2
 801d102:	4699      	mov	r9, r3
 801d104:	688a      	ldr	r2, [r1, #8]
 801d106:	690b      	ldr	r3, [r1, #16]
 801d108:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d10c:	4293      	cmp	r3, r2
 801d10e:	bfb8      	it	lt
 801d110:	4613      	movlt	r3, r2
 801d112:	6033      	str	r3, [r6, #0]
 801d114:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d118:	4607      	mov	r7, r0
 801d11a:	460c      	mov	r4, r1
 801d11c:	b10a      	cbz	r2, 801d122 <_printf_common+0x26>
 801d11e:	3301      	adds	r3, #1
 801d120:	6033      	str	r3, [r6, #0]
 801d122:	6823      	ldr	r3, [r4, #0]
 801d124:	0699      	lsls	r1, r3, #26
 801d126:	bf42      	ittt	mi
 801d128:	6833      	ldrmi	r3, [r6, #0]
 801d12a:	3302      	addmi	r3, #2
 801d12c:	6033      	strmi	r3, [r6, #0]
 801d12e:	6825      	ldr	r5, [r4, #0]
 801d130:	f015 0506 	ands.w	r5, r5, #6
 801d134:	d106      	bne.n	801d144 <_printf_common+0x48>
 801d136:	f104 0a19 	add.w	sl, r4, #25
 801d13a:	68e3      	ldr	r3, [r4, #12]
 801d13c:	6832      	ldr	r2, [r6, #0]
 801d13e:	1a9b      	subs	r3, r3, r2
 801d140:	42ab      	cmp	r3, r5
 801d142:	dc26      	bgt.n	801d192 <_printf_common+0x96>
 801d144:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801d148:	1e13      	subs	r3, r2, #0
 801d14a:	6822      	ldr	r2, [r4, #0]
 801d14c:	bf18      	it	ne
 801d14e:	2301      	movne	r3, #1
 801d150:	0692      	lsls	r2, r2, #26
 801d152:	d42b      	bmi.n	801d1ac <_printf_common+0xb0>
 801d154:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d158:	4649      	mov	r1, r9
 801d15a:	4638      	mov	r0, r7
 801d15c:	47c0      	blx	r8
 801d15e:	3001      	adds	r0, #1
 801d160:	d01e      	beq.n	801d1a0 <_printf_common+0xa4>
 801d162:	6823      	ldr	r3, [r4, #0]
 801d164:	68e5      	ldr	r5, [r4, #12]
 801d166:	6832      	ldr	r2, [r6, #0]
 801d168:	f003 0306 	and.w	r3, r3, #6
 801d16c:	2b04      	cmp	r3, #4
 801d16e:	bf08      	it	eq
 801d170:	1aad      	subeq	r5, r5, r2
 801d172:	68a3      	ldr	r3, [r4, #8]
 801d174:	6922      	ldr	r2, [r4, #16]
 801d176:	bf0c      	ite	eq
 801d178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d17c:	2500      	movne	r5, #0
 801d17e:	4293      	cmp	r3, r2
 801d180:	bfc4      	itt	gt
 801d182:	1a9b      	subgt	r3, r3, r2
 801d184:	18ed      	addgt	r5, r5, r3
 801d186:	2600      	movs	r6, #0
 801d188:	341a      	adds	r4, #26
 801d18a:	42b5      	cmp	r5, r6
 801d18c:	d11a      	bne.n	801d1c4 <_printf_common+0xc8>
 801d18e:	2000      	movs	r0, #0
 801d190:	e008      	b.n	801d1a4 <_printf_common+0xa8>
 801d192:	2301      	movs	r3, #1
 801d194:	4652      	mov	r2, sl
 801d196:	4649      	mov	r1, r9
 801d198:	4638      	mov	r0, r7
 801d19a:	47c0      	blx	r8
 801d19c:	3001      	adds	r0, #1
 801d19e:	d103      	bne.n	801d1a8 <_printf_common+0xac>
 801d1a0:	f04f 30ff 	mov.w	r0, #4294967295
 801d1a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d1a8:	3501      	adds	r5, #1
 801d1aa:	e7c6      	b.n	801d13a <_printf_common+0x3e>
 801d1ac:	18e1      	adds	r1, r4, r3
 801d1ae:	1c5a      	adds	r2, r3, #1
 801d1b0:	2030      	movs	r0, #48	; 0x30
 801d1b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d1b6:	4422      	add	r2, r4
 801d1b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d1bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d1c0:	3302      	adds	r3, #2
 801d1c2:	e7c7      	b.n	801d154 <_printf_common+0x58>
 801d1c4:	2301      	movs	r3, #1
 801d1c6:	4622      	mov	r2, r4
 801d1c8:	4649      	mov	r1, r9
 801d1ca:	4638      	mov	r0, r7
 801d1cc:	47c0      	blx	r8
 801d1ce:	3001      	adds	r0, #1
 801d1d0:	d0e6      	beq.n	801d1a0 <_printf_common+0xa4>
 801d1d2:	3601      	adds	r6, #1
 801d1d4:	e7d9      	b.n	801d18a <_printf_common+0x8e>
	...

0801d1d8 <_printf_i>:
 801d1d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d1dc:	460c      	mov	r4, r1
 801d1de:	4691      	mov	r9, r2
 801d1e0:	7e27      	ldrb	r7, [r4, #24]
 801d1e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d1e4:	2f78      	cmp	r7, #120	; 0x78
 801d1e6:	4680      	mov	r8, r0
 801d1e8:	469a      	mov	sl, r3
 801d1ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d1ee:	d807      	bhi.n	801d200 <_printf_i+0x28>
 801d1f0:	2f62      	cmp	r7, #98	; 0x62
 801d1f2:	d80a      	bhi.n	801d20a <_printf_i+0x32>
 801d1f4:	2f00      	cmp	r7, #0
 801d1f6:	f000 80d8 	beq.w	801d3aa <_printf_i+0x1d2>
 801d1fa:	2f58      	cmp	r7, #88	; 0x58
 801d1fc:	f000 80a3 	beq.w	801d346 <_printf_i+0x16e>
 801d200:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801d204:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d208:	e03a      	b.n	801d280 <_printf_i+0xa8>
 801d20a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d20e:	2b15      	cmp	r3, #21
 801d210:	d8f6      	bhi.n	801d200 <_printf_i+0x28>
 801d212:	a001      	add	r0, pc, #4	; (adr r0, 801d218 <_printf_i+0x40>)
 801d214:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801d218:	0801d271 	.word	0x0801d271
 801d21c:	0801d285 	.word	0x0801d285
 801d220:	0801d201 	.word	0x0801d201
 801d224:	0801d201 	.word	0x0801d201
 801d228:	0801d201 	.word	0x0801d201
 801d22c:	0801d201 	.word	0x0801d201
 801d230:	0801d285 	.word	0x0801d285
 801d234:	0801d201 	.word	0x0801d201
 801d238:	0801d201 	.word	0x0801d201
 801d23c:	0801d201 	.word	0x0801d201
 801d240:	0801d201 	.word	0x0801d201
 801d244:	0801d391 	.word	0x0801d391
 801d248:	0801d2b5 	.word	0x0801d2b5
 801d24c:	0801d373 	.word	0x0801d373
 801d250:	0801d201 	.word	0x0801d201
 801d254:	0801d201 	.word	0x0801d201
 801d258:	0801d3b3 	.word	0x0801d3b3
 801d25c:	0801d201 	.word	0x0801d201
 801d260:	0801d2b5 	.word	0x0801d2b5
 801d264:	0801d201 	.word	0x0801d201
 801d268:	0801d201 	.word	0x0801d201
 801d26c:	0801d37b 	.word	0x0801d37b
 801d270:	680b      	ldr	r3, [r1, #0]
 801d272:	1d1a      	adds	r2, r3, #4
 801d274:	681b      	ldr	r3, [r3, #0]
 801d276:	600a      	str	r2, [r1, #0]
 801d278:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801d27c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d280:	2301      	movs	r3, #1
 801d282:	e0a3      	b.n	801d3cc <_printf_i+0x1f4>
 801d284:	6825      	ldr	r5, [r4, #0]
 801d286:	6808      	ldr	r0, [r1, #0]
 801d288:	062e      	lsls	r6, r5, #24
 801d28a:	f100 0304 	add.w	r3, r0, #4
 801d28e:	d50a      	bpl.n	801d2a6 <_printf_i+0xce>
 801d290:	6805      	ldr	r5, [r0, #0]
 801d292:	600b      	str	r3, [r1, #0]
 801d294:	2d00      	cmp	r5, #0
 801d296:	da03      	bge.n	801d2a0 <_printf_i+0xc8>
 801d298:	232d      	movs	r3, #45	; 0x2d
 801d29a:	426d      	negs	r5, r5
 801d29c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d2a0:	485e      	ldr	r0, [pc, #376]	; (801d41c <_printf_i+0x244>)
 801d2a2:	230a      	movs	r3, #10
 801d2a4:	e019      	b.n	801d2da <_printf_i+0x102>
 801d2a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 801d2aa:	6805      	ldr	r5, [r0, #0]
 801d2ac:	600b      	str	r3, [r1, #0]
 801d2ae:	bf18      	it	ne
 801d2b0:	b22d      	sxthne	r5, r5
 801d2b2:	e7ef      	b.n	801d294 <_printf_i+0xbc>
 801d2b4:	680b      	ldr	r3, [r1, #0]
 801d2b6:	6825      	ldr	r5, [r4, #0]
 801d2b8:	1d18      	adds	r0, r3, #4
 801d2ba:	6008      	str	r0, [r1, #0]
 801d2bc:	0628      	lsls	r0, r5, #24
 801d2be:	d501      	bpl.n	801d2c4 <_printf_i+0xec>
 801d2c0:	681d      	ldr	r5, [r3, #0]
 801d2c2:	e002      	b.n	801d2ca <_printf_i+0xf2>
 801d2c4:	0669      	lsls	r1, r5, #25
 801d2c6:	d5fb      	bpl.n	801d2c0 <_printf_i+0xe8>
 801d2c8:	881d      	ldrh	r5, [r3, #0]
 801d2ca:	4854      	ldr	r0, [pc, #336]	; (801d41c <_printf_i+0x244>)
 801d2cc:	2f6f      	cmp	r7, #111	; 0x6f
 801d2ce:	bf0c      	ite	eq
 801d2d0:	2308      	moveq	r3, #8
 801d2d2:	230a      	movne	r3, #10
 801d2d4:	2100      	movs	r1, #0
 801d2d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d2da:	6866      	ldr	r6, [r4, #4]
 801d2dc:	60a6      	str	r6, [r4, #8]
 801d2de:	2e00      	cmp	r6, #0
 801d2e0:	bfa2      	ittt	ge
 801d2e2:	6821      	ldrge	r1, [r4, #0]
 801d2e4:	f021 0104 	bicge.w	r1, r1, #4
 801d2e8:	6021      	strge	r1, [r4, #0]
 801d2ea:	b90d      	cbnz	r5, 801d2f0 <_printf_i+0x118>
 801d2ec:	2e00      	cmp	r6, #0
 801d2ee:	d04d      	beq.n	801d38c <_printf_i+0x1b4>
 801d2f0:	4616      	mov	r6, r2
 801d2f2:	fbb5 f1f3 	udiv	r1, r5, r3
 801d2f6:	fb03 5711 	mls	r7, r3, r1, r5
 801d2fa:	5dc7      	ldrb	r7, [r0, r7]
 801d2fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d300:	462f      	mov	r7, r5
 801d302:	42bb      	cmp	r3, r7
 801d304:	460d      	mov	r5, r1
 801d306:	d9f4      	bls.n	801d2f2 <_printf_i+0x11a>
 801d308:	2b08      	cmp	r3, #8
 801d30a:	d10b      	bne.n	801d324 <_printf_i+0x14c>
 801d30c:	6823      	ldr	r3, [r4, #0]
 801d30e:	07df      	lsls	r7, r3, #31
 801d310:	d508      	bpl.n	801d324 <_printf_i+0x14c>
 801d312:	6923      	ldr	r3, [r4, #16]
 801d314:	6861      	ldr	r1, [r4, #4]
 801d316:	4299      	cmp	r1, r3
 801d318:	bfde      	ittt	le
 801d31a:	2330      	movle	r3, #48	; 0x30
 801d31c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d320:	f106 36ff 	addle.w	r6, r6, #4294967295
 801d324:	1b92      	subs	r2, r2, r6
 801d326:	6122      	str	r2, [r4, #16]
 801d328:	f8cd a000 	str.w	sl, [sp]
 801d32c:	464b      	mov	r3, r9
 801d32e:	aa03      	add	r2, sp, #12
 801d330:	4621      	mov	r1, r4
 801d332:	4640      	mov	r0, r8
 801d334:	f7ff fee2 	bl	801d0fc <_printf_common>
 801d338:	3001      	adds	r0, #1
 801d33a:	d14c      	bne.n	801d3d6 <_printf_i+0x1fe>
 801d33c:	f04f 30ff 	mov.w	r0, #4294967295
 801d340:	b004      	add	sp, #16
 801d342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d346:	4835      	ldr	r0, [pc, #212]	; (801d41c <_printf_i+0x244>)
 801d348:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801d34c:	6823      	ldr	r3, [r4, #0]
 801d34e:	680e      	ldr	r6, [r1, #0]
 801d350:	061f      	lsls	r7, r3, #24
 801d352:	f856 5b04 	ldr.w	r5, [r6], #4
 801d356:	600e      	str	r6, [r1, #0]
 801d358:	d514      	bpl.n	801d384 <_printf_i+0x1ac>
 801d35a:	07d9      	lsls	r1, r3, #31
 801d35c:	bf44      	itt	mi
 801d35e:	f043 0320 	orrmi.w	r3, r3, #32
 801d362:	6023      	strmi	r3, [r4, #0]
 801d364:	b91d      	cbnz	r5, 801d36e <_printf_i+0x196>
 801d366:	6823      	ldr	r3, [r4, #0]
 801d368:	f023 0320 	bic.w	r3, r3, #32
 801d36c:	6023      	str	r3, [r4, #0]
 801d36e:	2310      	movs	r3, #16
 801d370:	e7b0      	b.n	801d2d4 <_printf_i+0xfc>
 801d372:	6823      	ldr	r3, [r4, #0]
 801d374:	f043 0320 	orr.w	r3, r3, #32
 801d378:	6023      	str	r3, [r4, #0]
 801d37a:	2378      	movs	r3, #120	; 0x78
 801d37c:	4828      	ldr	r0, [pc, #160]	; (801d420 <_printf_i+0x248>)
 801d37e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d382:	e7e3      	b.n	801d34c <_printf_i+0x174>
 801d384:	065e      	lsls	r6, r3, #25
 801d386:	bf48      	it	mi
 801d388:	b2ad      	uxthmi	r5, r5
 801d38a:	e7e6      	b.n	801d35a <_printf_i+0x182>
 801d38c:	4616      	mov	r6, r2
 801d38e:	e7bb      	b.n	801d308 <_printf_i+0x130>
 801d390:	680b      	ldr	r3, [r1, #0]
 801d392:	6826      	ldr	r6, [r4, #0]
 801d394:	6960      	ldr	r0, [r4, #20]
 801d396:	1d1d      	adds	r5, r3, #4
 801d398:	600d      	str	r5, [r1, #0]
 801d39a:	0635      	lsls	r5, r6, #24
 801d39c:	681b      	ldr	r3, [r3, #0]
 801d39e:	d501      	bpl.n	801d3a4 <_printf_i+0x1cc>
 801d3a0:	6018      	str	r0, [r3, #0]
 801d3a2:	e002      	b.n	801d3aa <_printf_i+0x1d2>
 801d3a4:	0671      	lsls	r1, r6, #25
 801d3a6:	d5fb      	bpl.n	801d3a0 <_printf_i+0x1c8>
 801d3a8:	8018      	strh	r0, [r3, #0]
 801d3aa:	2300      	movs	r3, #0
 801d3ac:	6123      	str	r3, [r4, #16]
 801d3ae:	4616      	mov	r6, r2
 801d3b0:	e7ba      	b.n	801d328 <_printf_i+0x150>
 801d3b2:	680b      	ldr	r3, [r1, #0]
 801d3b4:	1d1a      	adds	r2, r3, #4
 801d3b6:	600a      	str	r2, [r1, #0]
 801d3b8:	681e      	ldr	r6, [r3, #0]
 801d3ba:	6862      	ldr	r2, [r4, #4]
 801d3bc:	2100      	movs	r1, #0
 801d3be:	4630      	mov	r0, r6
 801d3c0:	f7e2 ffa6 	bl	8000310 <memchr>
 801d3c4:	b108      	cbz	r0, 801d3ca <_printf_i+0x1f2>
 801d3c6:	1b80      	subs	r0, r0, r6
 801d3c8:	6060      	str	r0, [r4, #4]
 801d3ca:	6863      	ldr	r3, [r4, #4]
 801d3cc:	6123      	str	r3, [r4, #16]
 801d3ce:	2300      	movs	r3, #0
 801d3d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d3d4:	e7a8      	b.n	801d328 <_printf_i+0x150>
 801d3d6:	6923      	ldr	r3, [r4, #16]
 801d3d8:	4632      	mov	r2, r6
 801d3da:	4649      	mov	r1, r9
 801d3dc:	4640      	mov	r0, r8
 801d3de:	47d0      	blx	sl
 801d3e0:	3001      	adds	r0, #1
 801d3e2:	d0ab      	beq.n	801d33c <_printf_i+0x164>
 801d3e4:	6823      	ldr	r3, [r4, #0]
 801d3e6:	079b      	lsls	r3, r3, #30
 801d3e8:	d413      	bmi.n	801d412 <_printf_i+0x23a>
 801d3ea:	68e0      	ldr	r0, [r4, #12]
 801d3ec:	9b03      	ldr	r3, [sp, #12]
 801d3ee:	4298      	cmp	r0, r3
 801d3f0:	bfb8      	it	lt
 801d3f2:	4618      	movlt	r0, r3
 801d3f4:	e7a4      	b.n	801d340 <_printf_i+0x168>
 801d3f6:	2301      	movs	r3, #1
 801d3f8:	4632      	mov	r2, r6
 801d3fa:	4649      	mov	r1, r9
 801d3fc:	4640      	mov	r0, r8
 801d3fe:	47d0      	blx	sl
 801d400:	3001      	adds	r0, #1
 801d402:	d09b      	beq.n	801d33c <_printf_i+0x164>
 801d404:	3501      	adds	r5, #1
 801d406:	68e3      	ldr	r3, [r4, #12]
 801d408:	9903      	ldr	r1, [sp, #12]
 801d40a:	1a5b      	subs	r3, r3, r1
 801d40c:	42ab      	cmp	r3, r5
 801d40e:	dcf2      	bgt.n	801d3f6 <_printf_i+0x21e>
 801d410:	e7eb      	b.n	801d3ea <_printf_i+0x212>
 801d412:	2500      	movs	r5, #0
 801d414:	f104 0619 	add.w	r6, r4, #25
 801d418:	e7f5      	b.n	801d406 <_printf_i+0x22e>
 801d41a:	bf00      	nop
 801d41c:	0802a853 	.word	0x0802a853
 801d420:	0802a864 	.word	0x0802a864

0801d424 <_scanf_float>:
 801d424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d428:	b087      	sub	sp, #28
 801d42a:	4617      	mov	r7, r2
 801d42c:	9303      	str	r3, [sp, #12]
 801d42e:	688b      	ldr	r3, [r1, #8]
 801d430:	1e5a      	subs	r2, r3, #1
 801d432:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801d436:	bf83      	ittte	hi
 801d438:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801d43c:	195b      	addhi	r3, r3, r5
 801d43e:	9302      	strhi	r3, [sp, #8]
 801d440:	2300      	movls	r3, #0
 801d442:	bf86      	itte	hi
 801d444:	f240 135d 	movwhi	r3, #349	; 0x15d
 801d448:	608b      	strhi	r3, [r1, #8]
 801d44a:	9302      	strls	r3, [sp, #8]
 801d44c:	680b      	ldr	r3, [r1, #0]
 801d44e:	468b      	mov	fp, r1
 801d450:	2500      	movs	r5, #0
 801d452:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801d456:	f84b 3b1c 	str.w	r3, [fp], #28
 801d45a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801d45e:	4680      	mov	r8, r0
 801d460:	460c      	mov	r4, r1
 801d462:	465e      	mov	r6, fp
 801d464:	46aa      	mov	sl, r5
 801d466:	46a9      	mov	r9, r5
 801d468:	9501      	str	r5, [sp, #4]
 801d46a:	68a2      	ldr	r2, [r4, #8]
 801d46c:	b152      	cbz	r2, 801d484 <_scanf_float+0x60>
 801d46e:	683b      	ldr	r3, [r7, #0]
 801d470:	781b      	ldrb	r3, [r3, #0]
 801d472:	2b4e      	cmp	r3, #78	; 0x4e
 801d474:	d864      	bhi.n	801d540 <_scanf_float+0x11c>
 801d476:	2b40      	cmp	r3, #64	; 0x40
 801d478:	d83c      	bhi.n	801d4f4 <_scanf_float+0xd0>
 801d47a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801d47e:	b2c8      	uxtb	r0, r1
 801d480:	280e      	cmp	r0, #14
 801d482:	d93a      	bls.n	801d4fa <_scanf_float+0xd6>
 801d484:	f1b9 0f00 	cmp.w	r9, #0
 801d488:	d003      	beq.n	801d492 <_scanf_float+0x6e>
 801d48a:	6823      	ldr	r3, [r4, #0]
 801d48c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801d490:	6023      	str	r3, [r4, #0]
 801d492:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d496:	f1ba 0f01 	cmp.w	sl, #1
 801d49a:	f200 8113 	bhi.w	801d6c4 <_scanf_float+0x2a0>
 801d49e:	455e      	cmp	r6, fp
 801d4a0:	f200 8105 	bhi.w	801d6ae <_scanf_float+0x28a>
 801d4a4:	2501      	movs	r5, #1
 801d4a6:	4628      	mov	r0, r5
 801d4a8:	b007      	add	sp, #28
 801d4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4ae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801d4b2:	2a0d      	cmp	r2, #13
 801d4b4:	d8e6      	bhi.n	801d484 <_scanf_float+0x60>
 801d4b6:	a101      	add	r1, pc, #4	; (adr r1, 801d4bc <_scanf_float+0x98>)
 801d4b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801d4bc:	0801d5fb 	.word	0x0801d5fb
 801d4c0:	0801d485 	.word	0x0801d485
 801d4c4:	0801d485 	.word	0x0801d485
 801d4c8:	0801d485 	.word	0x0801d485
 801d4cc:	0801d65b 	.word	0x0801d65b
 801d4d0:	0801d633 	.word	0x0801d633
 801d4d4:	0801d485 	.word	0x0801d485
 801d4d8:	0801d485 	.word	0x0801d485
 801d4dc:	0801d609 	.word	0x0801d609
 801d4e0:	0801d485 	.word	0x0801d485
 801d4e4:	0801d485 	.word	0x0801d485
 801d4e8:	0801d485 	.word	0x0801d485
 801d4ec:	0801d485 	.word	0x0801d485
 801d4f0:	0801d5c1 	.word	0x0801d5c1
 801d4f4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801d4f8:	e7db      	b.n	801d4b2 <_scanf_float+0x8e>
 801d4fa:	290e      	cmp	r1, #14
 801d4fc:	d8c2      	bhi.n	801d484 <_scanf_float+0x60>
 801d4fe:	a001      	add	r0, pc, #4	; (adr r0, 801d504 <_scanf_float+0xe0>)
 801d500:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801d504:	0801d5b3 	.word	0x0801d5b3
 801d508:	0801d485 	.word	0x0801d485
 801d50c:	0801d5b3 	.word	0x0801d5b3
 801d510:	0801d647 	.word	0x0801d647
 801d514:	0801d485 	.word	0x0801d485
 801d518:	0801d561 	.word	0x0801d561
 801d51c:	0801d59d 	.word	0x0801d59d
 801d520:	0801d59d 	.word	0x0801d59d
 801d524:	0801d59d 	.word	0x0801d59d
 801d528:	0801d59d 	.word	0x0801d59d
 801d52c:	0801d59d 	.word	0x0801d59d
 801d530:	0801d59d 	.word	0x0801d59d
 801d534:	0801d59d 	.word	0x0801d59d
 801d538:	0801d59d 	.word	0x0801d59d
 801d53c:	0801d59d 	.word	0x0801d59d
 801d540:	2b6e      	cmp	r3, #110	; 0x6e
 801d542:	d809      	bhi.n	801d558 <_scanf_float+0x134>
 801d544:	2b60      	cmp	r3, #96	; 0x60
 801d546:	d8b2      	bhi.n	801d4ae <_scanf_float+0x8a>
 801d548:	2b54      	cmp	r3, #84	; 0x54
 801d54a:	d077      	beq.n	801d63c <_scanf_float+0x218>
 801d54c:	2b59      	cmp	r3, #89	; 0x59
 801d54e:	d199      	bne.n	801d484 <_scanf_float+0x60>
 801d550:	2d07      	cmp	r5, #7
 801d552:	d197      	bne.n	801d484 <_scanf_float+0x60>
 801d554:	2508      	movs	r5, #8
 801d556:	e029      	b.n	801d5ac <_scanf_float+0x188>
 801d558:	2b74      	cmp	r3, #116	; 0x74
 801d55a:	d06f      	beq.n	801d63c <_scanf_float+0x218>
 801d55c:	2b79      	cmp	r3, #121	; 0x79
 801d55e:	e7f6      	b.n	801d54e <_scanf_float+0x12a>
 801d560:	6821      	ldr	r1, [r4, #0]
 801d562:	05c8      	lsls	r0, r1, #23
 801d564:	d51a      	bpl.n	801d59c <_scanf_float+0x178>
 801d566:	9b02      	ldr	r3, [sp, #8]
 801d568:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801d56c:	6021      	str	r1, [r4, #0]
 801d56e:	f109 0901 	add.w	r9, r9, #1
 801d572:	b11b      	cbz	r3, 801d57c <_scanf_float+0x158>
 801d574:	3b01      	subs	r3, #1
 801d576:	3201      	adds	r2, #1
 801d578:	9302      	str	r3, [sp, #8]
 801d57a:	60a2      	str	r2, [r4, #8]
 801d57c:	68a3      	ldr	r3, [r4, #8]
 801d57e:	3b01      	subs	r3, #1
 801d580:	60a3      	str	r3, [r4, #8]
 801d582:	6923      	ldr	r3, [r4, #16]
 801d584:	3301      	adds	r3, #1
 801d586:	6123      	str	r3, [r4, #16]
 801d588:	687b      	ldr	r3, [r7, #4]
 801d58a:	3b01      	subs	r3, #1
 801d58c:	2b00      	cmp	r3, #0
 801d58e:	607b      	str	r3, [r7, #4]
 801d590:	f340 8084 	ble.w	801d69c <_scanf_float+0x278>
 801d594:	683b      	ldr	r3, [r7, #0]
 801d596:	3301      	adds	r3, #1
 801d598:	603b      	str	r3, [r7, #0]
 801d59a:	e766      	b.n	801d46a <_scanf_float+0x46>
 801d59c:	eb1a 0f05 	cmn.w	sl, r5
 801d5a0:	f47f af70 	bne.w	801d484 <_scanf_float+0x60>
 801d5a4:	6822      	ldr	r2, [r4, #0]
 801d5a6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801d5aa:	6022      	str	r2, [r4, #0]
 801d5ac:	f806 3b01 	strb.w	r3, [r6], #1
 801d5b0:	e7e4      	b.n	801d57c <_scanf_float+0x158>
 801d5b2:	6822      	ldr	r2, [r4, #0]
 801d5b4:	0610      	lsls	r0, r2, #24
 801d5b6:	f57f af65 	bpl.w	801d484 <_scanf_float+0x60>
 801d5ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801d5be:	e7f4      	b.n	801d5aa <_scanf_float+0x186>
 801d5c0:	f1ba 0f00 	cmp.w	sl, #0
 801d5c4:	d10e      	bne.n	801d5e4 <_scanf_float+0x1c0>
 801d5c6:	f1b9 0f00 	cmp.w	r9, #0
 801d5ca:	d10e      	bne.n	801d5ea <_scanf_float+0x1c6>
 801d5cc:	6822      	ldr	r2, [r4, #0]
 801d5ce:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801d5d2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801d5d6:	d108      	bne.n	801d5ea <_scanf_float+0x1c6>
 801d5d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801d5dc:	6022      	str	r2, [r4, #0]
 801d5de:	f04f 0a01 	mov.w	sl, #1
 801d5e2:	e7e3      	b.n	801d5ac <_scanf_float+0x188>
 801d5e4:	f1ba 0f02 	cmp.w	sl, #2
 801d5e8:	d055      	beq.n	801d696 <_scanf_float+0x272>
 801d5ea:	2d01      	cmp	r5, #1
 801d5ec:	d002      	beq.n	801d5f4 <_scanf_float+0x1d0>
 801d5ee:	2d04      	cmp	r5, #4
 801d5f0:	f47f af48 	bne.w	801d484 <_scanf_float+0x60>
 801d5f4:	3501      	adds	r5, #1
 801d5f6:	b2ed      	uxtb	r5, r5
 801d5f8:	e7d8      	b.n	801d5ac <_scanf_float+0x188>
 801d5fa:	f1ba 0f01 	cmp.w	sl, #1
 801d5fe:	f47f af41 	bne.w	801d484 <_scanf_float+0x60>
 801d602:	f04f 0a02 	mov.w	sl, #2
 801d606:	e7d1      	b.n	801d5ac <_scanf_float+0x188>
 801d608:	b97d      	cbnz	r5, 801d62a <_scanf_float+0x206>
 801d60a:	f1b9 0f00 	cmp.w	r9, #0
 801d60e:	f47f af3c 	bne.w	801d48a <_scanf_float+0x66>
 801d612:	6822      	ldr	r2, [r4, #0]
 801d614:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801d618:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801d61c:	f47f af39 	bne.w	801d492 <_scanf_float+0x6e>
 801d620:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801d624:	6022      	str	r2, [r4, #0]
 801d626:	2501      	movs	r5, #1
 801d628:	e7c0      	b.n	801d5ac <_scanf_float+0x188>
 801d62a:	2d03      	cmp	r5, #3
 801d62c:	d0e2      	beq.n	801d5f4 <_scanf_float+0x1d0>
 801d62e:	2d05      	cmp	r5, #5
 801d630:	e7de      	b.n	801d5f0 <_scanf_float+0x1cc>
 801d632:	2d02      	cmp	r5, #2
 801d634:	f47f af26 	bne.w	801d484 <_scanf_float+0x60>
 801d638:	2503      	movs	r5, #3
 801d63a:	e7b7      	b.n	801d5ac <_scanf_float+0x188>
 801d63c:	2d06      	cmp	r5, #6
 801d63e:	f47f af21 	bne.w	801d484 <_scanf_float+0x60>
 801d642:	2507      	movs	r5, #7
 801d644:	e7b2      	b.n	801d5ac <_scanf_float+0x188>
 801d646:	6822      	ldr	r2, [r4, #0]
 801d648:	0591      	lsls	r1, r2, #22
 801d64a:	f57f af1b 	bpl.w	801d484 <_scanf_float+0x60>
 801d64e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801d652:	6022      	str	r2, [r4, #0]
 801d654:	f8cd 9004 	str.w	r9, [sp, #4]
 801d658:	e7a8      	b.n	801d5ac <_scanf_float+0x188>
 801d65a:	6822      	ldr	r2, [r4, #0]
 801d65c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801d660:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801d664:	d006      	beq.n	801d674 <_scanf_float+0x250>
 801d666:	0550      	lsls	r0, r2, #21
 801d668:	f57f af0c 	bpl.w	801d484 <_scanf_float+0x60>
 801d66c:	f1b9 0f00 	cmp.w	r9, #0
 801d670:	f43f af0f 	beq.w	801d492 <_scanf_float+0x6e>
 801d674:	0591      	lsls	r1, r2, #22
 801d676:	bf58      	it	pl
 801d678:	9901      	ldrpl	r1, [sp, #4]
 801d67a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801d67e:	bf58      	it	pl
 801d680:	eba9 0101 	subpl.w	r1, r9, r1
 801d684:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801d688:	bf58      	it	pl
 801d68a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801d68e:	6022      	str	r2, [r4, #0]
 801d690:	f04f 0900 	mov.w	r9, #0
 801d694:	e78a      	b.n	801d5ac <_scanf_float+0x188>
 801d696:	f04f 0a03 	mov.w	sl, #3
 801d69a:	e787      	b.n	801d5ac <_scanf_float+0x188>
 801d69c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801d6a0:	4639      	mov	r1, r7
 801d6a2:	4640      	mov	r0, r8
 801d6a4:	4798      	blx	r3
 801d6a6:	2800      	cmp	r0, #0
 801d6a8:	f43f aedf 	beq.w	801d46a <_scanf_float+0x46>
 801d6ac:	e6ea      	b.n	801d484 <_scanf_float+0x60>
 801d6ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801d6b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801d6b6:	463a      	mov	r2, r7
 801d6b8:	4640      	mov	r0, r8
 801d6ba:	4798      	blx	r3
 801d6bc:	6923      	ldr	r3, [r4, #16]
 801d6be:	3b01      	subs	r3, #1
 801d6c0:	6123      	str	r3, [r4, #16]
 801d6c2:	e6ec      	b.n	801d49e <_scanf_float+0x7a>
 801d6c4:	1e6b      	subs	r3, r5, #1
 801d6c6:	2b06      	cmp	r3, #6
 801d6c8:	d825      	bhi.n	801d716 <_scanf_float+0x2f2>
 801d6ca:	2d02      	cmp	r5, #2
 801d6cc:	d836      	bhi.n	801d73c <_scanf_float+0x318>
 801d6ce:	455e      	cmp	r6, fp
 801d6d0:	f67f aee8 	bls.w	801d4a4 <_scanf_float+0x80>
 801d6d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801d6d8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801d6dc:	463a      	mov	r2, r7
 801d6de:	4640      	mov	r0, r8
 801d6e0:	4798      	blx	r3
 801d6e2:	6923      	ldr	r3, [r4, #16]
 801d6e4:	3b01      	subs	r3, #1
 801d6e6:	6123      	str	r3, [r4, #16]
 801d6e8:	e7f1      	b.n	801d6ce <_scanf_float+0x2aa>
 801d6ea:	9802      	ldr	r0, [sp, #8]
 801d6ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801d6f0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801d6f4:	9002      	str	r0, [sp, #8]
 801d6f6:	463a      	mov	r2, r7
 801d6f8:	4640      	mov	r0, r8
 801d6fa:	4798      	blx	r3
 801d6fc:	6923      	ldr	r3, [r4, #16]
 801d6fe:	3b01      	subs	r3, #1
 801d700:	6123      	str	r3, [r4, #16]
 801d702:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d706:	fa5f fa8a 	uxtb.w	sl, sl
 801d70a:	f1ba 0f02 	cmp.w	sl, #2
 801d70e:	d1ec      	bne.n	801d6ea <_scanf_float+0x2c6>
 801d710:	3d03      	subs	r5, #3
 801d712:	b2ed      	uxtb	r5, r5
 801d714:	1b76      	subs	r6, r6, r5
 801d716:	6823      	ldr	r3, [r4, #0]
 801d718:	05da      	lsls	r2, r3, #23
 801d71a:	d52f      	bpl.n	801d77c <_scanf_float+0x358>
 801d71c:	055b      	lsls	r3, r3, #21
 801d71e:	d510      	bpl.n	801d742 <_scanf_float+0x31e>
 801d720:	455e      	cmp	r6, fp
 801d722:	f67f aebf 	bls.w	801d4a4 <_scanf_float+0x80>
 801d726:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801d72a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801d72e:	463a      	mov	r2, r7
 801d730:	4640      	mov	r0, r8
 801d732:	4798      	blx	r3
 801d734:	6923      	ldr	r3, [r4, #16]
 801d736:	3b01      	subs	r3, #1
 801d738:	6123      	str	r3, [r4, #16]
 801d73a:	e7f1      	b.n	801d720 <_scanf_float+0x2fc>
 801d73c:	46aa      	mov	sl, r5
 801d73e:	9602      	str	r6, [sp, #8]
 801d740:	e7df      	b.n	801d702 <_scanf_float+0x2de>
 801d742:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801d746:	6923      	ldr	r3, [r4, #16]
 801d748:	2965      	cmp	r1, #101	; 0x65
 801d74a:	f103 33ff 	add.w	r3, r3, #4294967295
 801d74e:	f106 35ff 	add.w	r5, r6, #4294967295
 801d752:	6123      	str	r3, [r4, #16]
 801d754:	d00c      	beq.n	801d770 <_scanf_float+0x34c>
 801d756:	2945      	cmp	r1, #69	; 0x45
 801d758:	d00a      	beq.n	801d770 <_scanf_float+0x34c>
 801d75a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801d75e:	463a      	mov	r2, r7
 801d760:	4640      	mov	r0, r8
 801d762:	4798      	blx	r3
 801d764:	6923      	ldr	r3, [r4, #16]
 801d766:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801d76a:	3b01      	subs	r3, #1
 801d76c:	1eb5      	subs	r5, r6, #2
 801d76e:	6123      	str	r3, [r4, #16]
 801d770:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801d774:	463a      	mov	r2, r7
 801d776:	4640      	mov	r0, r8
 801d778:	4798      	blx	r3
 801d77a:	462e      	mov	r6, r5
 801d77c:	6825      	ldr	r5, [r4, #0]
 801d77e:	f015 0510 	ands.w	r5, r5, #16
 801d782:	d14d      	bne.n	801d820 <_scanf_float+0x3fc>
 801d784:	7035      	strb	r5, [r6, #0]
 801d786:	6823      	ldr	r3, [r4, #0]
 801d788:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801d78c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d790:	d11a      	bne.n	801d7c8 <_scanf_float+0x3a4>
 801d792:	9b01      	ldr	r3, [sp, #4]
 801d794:	454b      	cmp	r3, r9
 801d796:	eba3 0209 	sub.w	r2, r3, r9
 801d79a:	d122      	bne.n	801d7e2 <_scanf_float+0x3be>
 801d79c:	2200      	movs	r2, #0
 801d79e:	4659      	mov	r1, fp
 801d7a0:	4640      	mov	r0, r8
 801d7a2:	f000 ff53 	bl	801e64c <_strtod_r>
 801d7a6:	9b03      	ldr	r3, [sp, #12]
 801d7a8:	6821      	ldr	r1, [r4, #0]
 801d7aa:	681b      	ldr	r3, [r3, #0]
 801d7ac:	f011 0f02 	tst.w	r1, #2
 801d7b0:	f103 0204 	add.w	r2, r3, #4
 801d7b4:	d020      	beq.n	801d7f8 <_scanf_float+0x3d4>
 801d7b6:	9903      	ldr	r1, [sp, #12]
 801d7b8:	600a      	str	r2, [r1, #0]
 801d7ba:	681b      	ldr	r3, [r3, #0]
 801d7bc:	ed83 0b00 	vstr	d0, [r3]
 801d7c0:	68e3      	ldr	r3, [r4, #12]
 801d7c2:	3301      	adds	r3, #1
 801d7c4:	60e3      	str	r3, [r4, #12]
 801d7c6:	e66e      	b.n	801d4a6 <_scanf_float+0x82>
 801d7c8:	9b04      	ldr	r3, [sp, #16]
 801d7ca:	2b00      	cmp	r3, #0
 801d7cc:	d0e6      	beq.n	801d79c <_scanf_float+0x378>
 801d7ce:	9905      	ldr	r1, [sp, #20]
 801d7d0:	230a      	movs	r3, #10
 801d7d2:	462a      	mov	r2, r5
 801d7d4:	3101      	adds	r1, #1
 801d7d6:	4640      	mov	r0, r8
 801d7d8:	f000 ffce 	bl	801e778 <_strtol_r>
 801d7dc:	9b04      	ldr	r3, [sp, #16]
 801d7de:	9e05      	ldr	r6, [sp, #20]
 801d7e0:	1ac2      	subs	r2, r0, r3
 801d7e2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801d7e6:	429e      	cmp	r6, r3
 801d7e8:	bf28      	it	cs
 801d7ea:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801d7ee:	490d      	ldr	r1, [pc, #52]	; (801d824 <_scanf_float+0x400>)
 801d7f0:	4630      	mov	r0, r6
 801d7f2:	f000 f8f3 	bl	801d9dc <siprintf>
 801d7f6:	e7d1      	b.n	801d79c <_scanf_float+0x378>
 801d7f8:	f011 0f04 	tst.w	r1, #4
 801d7fc:	9903      	ldr	r1, [sp, #12]
 801d7fe:	600a      	str	r2, [r1, #0]
 801d800:	d1db      	bne.n	801d7ba <_scanf_float+0x396>
 801d802:	eeb4 0b40 	vcmp.f64	d0, d0
 801d806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d80a:	681e      	ldr	r6, [r3, #0]
 801d80c:	d705      	bvc.n	801d81a <_scanf_float+0x3f6>
 801d80e:	4806      	ldr	r0, [pc, #24]	; (801d828 <_scanf_float+0x404>)
 801d810:	f000 f8aa 	bl	801d968 <nanf>
 801d814:	ed86 0a00 	vstr	s0, [r6]
 801d818:	e7d2      	b.n	801d7c0 <_scanf_float+0x39c>
 801d81a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801d81e:	e7f9      	b.n	801d814 <_scanf_float+0x3f0>
 801d820:	2500      	movs	r5, #0
 801d822:	e640      	b.n	801d4a6 <_scanf_float+0x82>
 801d824:	0802a875 	.word	0x0802a875
 801d828:	0802a72a 	.word	0x0802a72a

0801d82c <iprintf>:
 801d82c:	b40f      	push	{r0, r1, r2, r3}
 801d82e:	4b0a      	ldr	r3, [pc, #40]	; (801d858 <iprintf+0x2c>)
 801d830:	b513      	push	{r0, r1, r4, lr}
 801d832:	681c      	ldr	r4, [r3, #0]
 801d834:	b124      	cbz	r4, 801d840 <iprintf+0x14>
 801d836:	69a3      	ldr	r3, [r4, #24]
 801d838:	b913      	cbnz	r3, 801d840 <iprintf+0x14>
 801d83a:	4620      	mov	r0, r4
 801d83c:	f001 ff98 	bl	801f770 <__sinit>
 801d840:	ab05      	add	r3, sp, #20
 801d842:	9a04      	ldr	r2, [sp, #16]
 801d844:	68a1      	ldr	r1, [r4, #8]
 801d846:	9301      	str	r3, [sp, #4]
 801d848:	4620      	mov	r0, r4
 801d84a:	f7ff f879 	bl	801c940 <_vfiprintf_r>
 801d84e:	b002      	add	sp, #8
 801d850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d854:	b004      	add	sp, #16
 801d856:	4770      	bx	lr
 801d858:	2400a190 	.word	0x2400a190

0801d85c <_puts_r>:
 801d85c:	b570      	push	{r4, r5, r6, lr}
 801d85e:	460e      	mov	r6, r1
 801d860:	4605      	mov	r5, r0
 801d862:	b118      	cbz	r0, 801d86c <_puts_r+0x10>
 801d864:	6983      	ldr	r3, [r0, #24]
 801d866:	b90b      	cbnz	r3, 801d86c <_puts_r+0x10>
 801d868:	f001 ff82 	bl	801f770 <__sinit>
 801d86c:	69ab      	ldr	r3, [r5, #24]
 801d86e:	68ac      	ldr	r4, [r5, #8]
 801d870:	b913      	cbnz	r3, 801d878 <_puts_r+0x1c>
 801d872:	4628      	mov	r0, r5
 801d874:	f001 ff7c 	bl	801f770 <__sinit>
 801d878:	4b2c      	ldr	r3, [pc, #176]	; (801d92c <_puts_r+0xd0>)
 801d87a:	429c      	cmp	r4, r3
 801d87c:	d120      	bne.n	801d8c0 <_puts_r+0x64>
 801d87e:	686c      	ldr	r4, [r5, #4]
 801d880:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d882:	07db      	lsls	r3, r3, #31
 801d884:	d405      	bmi.n	801d892 <_puts_r+0x36>
 801d886:	89a3      	ldrh	r3, [r4, #12]
 801d888:	0598      	lsls	r0, r3, #22
 801d88a:	d402      	bmi.n	801d892 <_puts_r+0x36>
 801d88c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d88e:	f002 fb80 	bl	801ff92 <__retarget_lock_acquire_recursive>
 801d892:	89a3      	ldrh	r3, [r4, #12]
 801d894:	0719      	lsls	r1, r3, #28
 801d896:	d51d      	bpl.n	801d8d4 <_puts_r+0x78>
 801d898:	6923      	ldr	r3, [r4, #16]
 801d89a:	b1db      	cbz	r3, 801d8d4 <_puts_r+0x78>
 801d89c:	3e01      	subs	r6, #1
 801d89e:	68a3      	ldr	r3, [r4, #8]
 801d8a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801d8a4:	3b01      	subs	r3, #1
 801d8a6:	60a3      	str	r3, [r4, #8]
 801d8a8:	bb39      	cbnz	r1, 801d8fa <_puts_r+0x9e>
 801d8aa:	2b00      	cmp	r3, #0
 801d8ac:	da38      	bge.n	801d920 <_puts_r+0xc4>
 801d8ae:	4622      	mov	r2, r4
 801d8b0:	210a      	movs	r1, #10
 801d8b2:	4628      	mov	r0, r5
 801d8b4:	f000 ff6c 	bl	801e790 <__swbuf_r>
 801d8b8:	3001      	adds	r0, #1
 801d8ba:	d011      	beq.n	801d8e0 <_puts_r+0x84>
 801d8bc:	250a      	movs	r5, #10
 801d8be:	e011      	b.n	801d8e4 <_puts_r+0x88>
 801d8c0:	4b1b      	ldr	r3, [pc, #108]	; (801d930 <_puts_r+0xd4>)
 801d8c2:	429c      	cmp	r4, r3
 801d8c4:	d101      	bne.n	801d8ca <_puts_r+0x6e>
 801d8c6:	68ac      	ldr	r4, [r5, #8]
 801d8c8:	e7da      	b.n	801d880 <_puts_r+0x24>
 801d8ca:	4b1a      	ldr	r3, [pc, #104]	; (801d934 <_puts_r+0xd8>)
 801d8cc:	429c      	cmp	r4, r3
 801d8ce:	bf08      	it	eq
 801d8d0:	68ec      	ldreq	r4, [r5, #12]
 801d8d2:	e7d5      	b.n	801d880 <_puts_r+0x24>
 801d8d4:	4621      	mov	r1, r4
 801d8d6:	4628      	mov	r0, r5
 801d8d8:	f000 ffac 	bl	801e834 <__swsetup_r>
 801d8dc:	2800      	cmp	r0, #0
 801d8de:	d0dd      	beq.n	801d89c <_puts_r+0x40>
 801d8e0:	f04f 35ff 	mov.w	r5, #4294967295
 801d8e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d8e6:	07da      	lsls	r2, r3, #31
 801d8e8:	d405      	bmi.n	801d8f6 <_puts_r+0x9a>
 801d8ea:	89a3      	ldrh	r3, [r4, #12]
 801d8ec:	059b      	lsls	r3, r3, #22
 801d8ee:	d402      	bmi.n	801d8f6 <_puts_r+0x9a>
 801d8f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d8f2:	f002 fb4f 	bl	801ff94 <__retarget_lock_release_recursive>
 801d8f6:	4628      	mov	r0, r5
 801d8f8:	bd70      	pop	{r4, r5, r6, pc}
 801d8fa:	2b00      	cmp	r3, #0
 801d8fc:	da04      	bge.n	801d908 <_puts_r+0xac>
 801d8fe:	69a2      	ldr	r2, [r4, #24]
 801d900:	429a      	cmp	r2, r3
 801d902:	dc06      	bgt.n	801d912 <_puts_r+0xb6>
 801d904:	290a      	cmp	r1, #10
 801d906:	d004      	beq.n	801d912 <_puts_r+0xb6>
 801d908:	6823      	ldr	r3, [r4, #0]
 801d90a:	1c5a      	adds	r2, r3, #1
 801d90c:	6022      	str	r2, [r4, #0]
 801d90e:	7019      	strb	r1, [r3, #0]
 801d910:	e7c5      	b.n	801d89e <_puts_r+0x42>
 801d912:	4622      	mov	r2, r4
 801d914:	4628      	mov	r0, r5
 801d916:	f000 ff3b 	bl	801e790 <__swbuf_r>
 801d91a:	3001      	adds	r0, #1
 801d91c:	d1bf      	bne.n	801d89e <_puts_r+0x42>
 801d91e:	e7df      	b.n	801d8e0 <_puts_r+0x84>
 801d920:	6823      	ldr	r3, [r4, #0]
 801d922:	250a      	movs	r5, #10
 801d924:	1c5a      	adds	r2, r3, #1
 801d926:	6022      	str	r2, [r4, #0]
 801d928:	701d      	strb	r5, [r3, #0]
 801d92a:	e7db      	b.n	801d8e4 <_puts_r+0x88>
 801d92c:	0802a984 	.word	0x0802a984
 801d930:	0802a9a4 	.word	0x0802a9a4
 801d934:	0802a964 	.word	0x0802a964

0801d938 <puts>:
 801d938:	4b02      	ldr	r3, [pc, #8]	; (801d944 <puts+0xc>)
 801d93a:	4601      	mov	r1, r0
 801d93c:	6818      	ldr	r0, [r3, #0]
 801d93e:	f7ff bf8d 	b.w	801d85c <_puts_r>
 801d942:	bf00      	nop
 801d944:	2400a190 	.word	0x2400a190

0801d948 <_sbrk_r>:
 801d948:	b538      	push	{r3, r4, r5, lr}
 801d94a:	4d06      	ldr	r5, [pc, #24]	; (801d964 <_sbrk_r+0x1c>)
 801d94c:	2300      	movs	r3, #0
 801d94e:	4604      	mov	r4, r0
 801d950:	4608      	mov	r0, r1
 801d952:	602b      	str	r3, [r5, #0]
 801d954:	f7e4 f928 	bl	8001ba8 <_sbrk>
 801d958:	1c43      	adds	r3, r0, #1
 801d95a:	d102      	bne.n	801d962 <_sbrk_r+0x1a>
 801d95c:	682b      	ldr	r3, [r5, #0]
 801d95e:	b103      	cbz	r3, 801d962 <_sbrk_r+0x1a>
 801d960:	6023      	str	r3, [r4, #0]
 801d962:	bd38      	pop	{r3, r4, r5, pc}
 801d964:	240147f0 	.word	0x240147f0

0801d968 <nanf>:
 801d968:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801d970 <nanf+0x8>
 801d96c:	4770      	bx	lr
 801d96e:	bf00      	nop
 801d970:	7fc00000 	.word	0x7fc00000

0801d974 <sniprintf>:
 801d974:	b40c      	push	{r2, r3}
 801d976:	b530      	push	{r4, r5, lr}
 801d978:	4b17      	ldr	r3, [pc, #92]	; (801d9d8 <sniprintf+0x64>)
 801d97a:	1e0c      	subs	r4, r1, #0
 801d97c:	681d      	ldr	r5, [r3, #0]
 801d97e:	b09d      	sub	sp, #116	; 0x74
 801d980:	da08      	bge.n	801d994 <sniprintf+0x20>
 801d982:	238b      	movs	r3, #139	; 0x8b
 801d984:	602b      	str	r3, [r5, #0]
 801d986:	f04f 30ff 	mov.w	r0, #4294967295
 801d98a:	b01d      	add	sp, #116	; 0x74
 801d98c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d990:	b002      	add	sp, #8
 801d992:	4770      	bx	lr
 801d994:	f44f 7302 	mov.w	r3, #520	; 0x208
 801d998:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d99c:	bf14      	ite	ne
 801d99e:	f104 33ff 	addne.w	r3, r4, #4294967295
 801d9a2:	4623      	moveq	r3, r4
 801d9a4:	9304      	str	r3, [sp, #16]
 801d9a6:	9307      	str	r3, [sp, #28]
 801d9a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d9ac:	9002      	str	r0, [sp, #8]
 801d9ae:	9006      	str	r0, [sp, #24]
 801d9b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d9b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d9b6:	ab21      	add	r3, sp, #132	; 0x84
 801d9b8:	a902      	add	r1, sp, #8
 801d9ba:	4628      	mov	r0, r5
 801d9bc:	9301      	str	r3, [sp, #4]
 801d9be:	f003 f8b9 	bl	8020b34 <_svfiprintf_r>
 801d9c2:	1c43      	adds	r3, r0, #1
 801d9c4:	bfbc      	itt	lt
 801d9c6:	238b      	movlt	r3, #139	; 0x8b
 801d9c8:	602b      	strlt	r3, [r5, #0]
 801d9ca:	2c00      	cmp	r4, #0
 801d9cc:	d0dd      	beq.n	801d98a <sniprintf+0x16>
 801d9ce:	9b02      	ldr	r3, [sp, #8]
 801d9d0:	2200      	movs	r2, #0
 801d9d2:	701a      	strb	r2, [r3, #0]
 801d9d4:	e7d9      	b.n	801d98a <sniprintf+0x16>
 801d9d6:	bf00      	nop
 801d9d8:	2400a190 	.word	0x2400a190

0801d9dc <siprintf>:
 801d9dc:	b40e      	push	{r1, r2, r3}
 801d9de:	b500      	push	{lr}
 801d9e0:	b09c      	sub	sp, #112	; 0x70
 801d9e2:	ab1d      	add	r3, sp, #116	; 0x74
 801d9e4:	9002      	str	r0, [sp, #8]
 801d9e6:	9006      	str	r0, [sp, #24]
 801d9e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801d9ec:	4809      	ldr	r0, [pc, #36]	; (801da14 <siprintf+0x38>)
 801d9ee:	9107      	str	r1, [sp, #28]
 801d9f0:	9104      	str	r1, [sp, #16]
 801d9f2:	4909      	ldr	r1, [pc, #36]	; (801da18 <siprintf+0x3c>)
 801d9f4:	f853 2b04 	ldr.w	r2, [r3], #4
 801d9f8:	9105      	str	r1, [sp, #20]
 801d9fa:	6800      	ldr	r0, [r0, #0]
 801d9fc:	9301      	str	r3, [sp, #4]
 801d9fe:	a902      	add	r1, sp, #8
 801da00:	f003 f898 	bl	8020b34 <_svfiprintf_r>
 801da04:	9b02      	ldr	r3, [sp, #8]
 801da06:	2200      	movs	r2, #0
 801da08:	701a      	strb	r2, [r3, #0]
 801da0a:	b01c      	add	sp, #112	; 0x70
 801da0c:	f85d eb04 	ldr.w	lr, [sp], #4
 801da10:	b003      	add	sp, #12
 801da12:	4770      	bx	lr
 801da14:	2400a190 	.word	0x2400a190
 801da18:	ffff0208 	.word	0xffff0208

0801da1c <strncmp>:
 801da1c:	b510      	push	{r4, lr}
 801da1e:	b16a      	cbz	r2, 801da3c <strncmp+0x20>
 801da20:	3901      	subs	r1, #1
 801da22:	1884      	adds	r4, r0, r2
 801da24:	f810 3b01 	ldrb.w	r3, [r0], #1
 801da28:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801da2c:	4293      	cmp	r3, r2
 801da2e:	d103      	bne.n	801da38 <strncmp+0x1c>
 801da30:	42a0      	cmp	r0, r4
 801da32:	d001      	beq.n	801da38 <strncmp+0x1c>
 801da34:	2b00      	cmp	r3, #0
 801da36:	d1f5      	bne.n	801da24 <strncmp+0x8>
 801da38:	1a98      	subs	r0, r3, r2
 801da3a:	bd10      	pop	{r4, pc}
 801da3c:	4610      	mov	r0, r2
 801da3e:	e7fc      	b.n	801da3a <strncmp+0x1e>

0801da40 <strncpy>:
 801da40:	b510      	push	{r4, lr}
 801da42:	3901      	subs	r1, #1
 801da44:	4603      	mov	r3, r0
 801da46:	b132      	cbz	r2, 801da56 <strncpy+0x16>
 801da48:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801da4c:	f803 4b01 	strb.w	r4, [r3], #1
 801da50:	3a01      	subs	r2, #1
 801da52:	2c00      	cmp	r4, #0
 801da54:	d1f7      	bne.n	801da46 <strncpy+0x6>
 801da56:	441a      	add	r2, r3
 801da58:	2100      	movs	r1, #0
 801da5a:	4293      	cmp	r3, r2
 801da5c:	d100      	bne.n	801da60 <strncpy+0x20>
 801da5e:	bd10      	pop	{r4, pc}
 801da60:	f803 1b01 	strb.w	r1, [r3], #1
 801da64:	e7f9      	b.n	801da5a <strncpy+0x1a>

0801da66 <sulp>:
 801da66:	b570      	push	{r4, r5, r6, lr}
 801da68:	4604      	mov	r4, r0
 801da6a:	460d      	mov	r5, r1
 801da6c:	4616      	mov	r6, r2
 801da6e:	ec45 4b10 	vmov	d0, r4, r5
 801da72:	f002 fe7f 	bl	8020774 <__ulp>
 801da76:	b17e      	cbz	r6, 801da98 <sulp+0x32>
 801da78:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801da7c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801da80:	2b00      	cmp	r3, #0
 801da82:	dd09      	ble.n	801da98 <sulp+0x32>
 801da84:	051b      	lsls	r3, r3, #20
 801da86:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801da8a:	2000      	movs	r0, #0
 801da8c:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801da90:	ec41 0b17 	vmov	d7, r0, r1
 801da94:	ee20 0b07 	vmul.f64	d0, d0, d7
 801da98:	bd70      	pop	{r4, r5, r6, pc}
 801da9a:	0000      	movs	r0, r0
 801da9c:	0000      	movs	r0, r0
	...

0801daa0 <_strtod_l>:
 801daa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801daa4:	ed2d 8b0c 	vpush	{d8-d13}
 801daa8:	b09d      	sub	sp, #116	; 0x74
 801daaa:	461f      	mov	r7, r3
 801daac:	2300      	movs	r3, #0
 801daae:	9318      	str	r3, [sp, #96]	; 0x60
 801dab0:	4ba6      	ldr	r3, [pc, #664]	; (801dd4c <_strtod_l+0x2ac>)
 801dab2:	9213      	str	r2, [sp, #76]	; 0x4c
 801dab4:	681b      	ldr	r3, [r3, #0]
 801dab6:	9308      	str	r3, [sp, #32]
 801dab8:	4604      	mov	r4, r0
 801daba:	4618      	mov	r0, r3
 801dabc:	468a      	mov	sl, r1
 801dabe:	f7e2 fc19 	bl	80002f4 <strlen>
 801dac2:	f04f 0800 	mov.w	r8, #0
 801dac6:	4605      	mov	r5, r0
 801dac8:	f04f 0900 	mov.w	r9, #0
 801dacc:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 801dad0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801dad2:	781a      	ldrb	r2, [r3, #0]
 801dad4:	2a2b      	cmp	r2, #43	; 0x2b
 801dad6:	d04d      	beq.n	801db74 <_strtod_l+0xd4>
 801dad8:	d83a      	bhi.n	801db50 <_strtod_l+0xb0>
 801dada:	2a0d      	cmp	r2, #13
 801dadc:	d833      	bhi.n	801db46 <_strtod_l+0xa6>
 801dade:	2a08      	cmp	r2, #8
 801dae0:	d833      	bhi.n	801db4a <_strtod_l+0xaa>
 801dae2:	2a00      	cmp	r2, #0
 801dae4:	d03d      	beq.n	801db62 <_strtod_l+0xc2>
 801dae6:	2300      	movs	r3, #0
 801dae8:	930b      	str	r3, [sp, #44]	; 0x2c
 801daea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801daec:	7833      	ldrb	r3, [r6, #0]
 801daee:	2b30      	cmp	r3, #48	; 0x30
 801daf0:	f040 80b6 	bne.w	801dc60 <_strtod_l+0x1c0>
 801daf4:	7873      	ldrb	r3, [r6, #1]
 801daf6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801dafa:	2b58      	cmp	r3, #88	; 0x58
 801dafc:	d16d      	bne.n	801dbda <_strtod_l+0x13a>
 801dafe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801db00:	9301      	str	r3, [sp, #4]
 801db02:	ab18      	add	r3, sp, #96	; 0x60
 801db04:	9702      	str	r7, [sp, #8]
 801db06:	9300      	str	r3, [sp, #0]
 801db08:	4a91      	ldr	r2, [pc, #580]	; (801dd50 <_strtod_l+0x2b0>)
 801db0a:	ab19      	add	r3, sp, #100	; 0x64
 801db0c:	a917      	add	r1, sp, #92	; 0x5c
 801db0e:	4620      	mov	r0, r4
 801db10:	f001 ff32 	bl	801f978 <__gethex>
 801db14:	f010 0507 	ands.w	r5, r0, #7
 801db18:	4607      	mov	r7, r0
 801db1a:	d005      	beq.n	801db28 <_strtod_l+0x88>
 801db1c:	2d06      	cmp	r5, #6
 801db1e:	d12b      	bne.n	801db78 <_strtod_l+0xd8>
 801db20:	3601      	adds	r6, #1
 801db22:	2300      	movs	r3, #0
 801db24:	9617      	str	r6, [sp, #92]	; 0x5c
 801db26:	930b      	str	r3, [sp, #44]	; 0x2c
 801db28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801db2a:	2b00      	cmp	r3, #0
 801db2c:	f040 856e 	bne.w	801e60c <_strtod_l+0xb6c>
 801db30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801db32:	b1e3      	cbz	r3, 801db6e <_strtod_l+0xce>
 801db34:	ec49 8b17 	vmov	d7, r8, r9
 801db38:	eeb1 0b47 	vneg.f64	d0, d7
 801db3c:	b01d      	add	sp, #116	; 0x74
 801db3e:	ecbd 8b0c 	vpop	{d8-d13}
 801db42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db46:	2a20      	cmp	r2, #32
 801db48:	d1cd      	bne.n	801dae6 <_strtod_l+0x46>
 801db4a:	3301      	adds	r3, #1
 801db4c:	9317      	str	r3, [sp, #92]	; 0x5c
 801db4e:	e7bf      	b.n	801dad0 <_strtod_l+0x30>
 801db50:	2a2d      	cmp	r2, #45	; 0x2d
 801db52:	d1c8      	bne.n	801dae6 <_strtod_l+0x46>
 801db54:	2201      	movs	r2, #1
 801db56:	920b      	str	r2, [sp, #44]	; 0x2c
 801db58:	1c5a      	adds	r2, r3, #1
 801db5a:	9217      	str	r2, [sp, #92]	; 0x5c
 801db5c:	785b      	ldrb	r3, [r3, #1]
 801db5e:	2b00      	cmp	r3, #0
 801db60:	d1c3      	bne.n	801daea <_strtod_l+0x4a>
 801db62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801db64:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 801db68:	2b00      	cmp	r3, #0
 801db6a:	f040 854d 	bne.w	801e608 <_strtod_l+0xb68>
 801db6e:	ec49 8b10 	vmov	d0, r8, r9
 801db72:	e7e3      	b.n	801db3c <_strtod_l+0x9c>
 801db74:	2200      	movs	r2, #0
 801db76:	e7ee      	b.n	801db56 <_strtod_l+0xb6>
 801db78:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801db7a:	b13a      	cbz	r2, 801db8c <_strtod_l+0xec>
 801db7c:	2135      	movs	r1, #53	; 0x35
 801db7e:	a81a      	add	r0, sp, #104	; 0x68
 801db80:	f002 ff04 	bl	802098c <__copybits>
 801db84:	9918      	ldr	r1, [sp, #96]	; 0x60
 801db86:	4620      	mov	r0, r4
 801db88:	f002 fac8 	bl	802011c <_Bfree>
 801db8c:	3d01      	subs	r5, #1
 801db8e:	2d05      	cmp	r5, #5
 801db90:	d807      	bhi.n	801dba2 <_strtod_l+0x102>
 801db92:	e8df f005 	tbb	[pc, r5]
 801db96:	0b0e      	.short	0x0b0e
 801db98:	030e1d18 	.word	0x030e1d18
 801db9c:	f04f 0900 	mov.w	r9, #0
 801dba0:	46c8      	mov	r8, r9
 801dba2:	073b      	lsls	r3, r7, #28
 801dba4:	d5c0      	bpl.n	801db28 <_strtod_l+0x88>
 801dba6:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 801dbaa:	e7bd      	b.n	801db28 <_strtod_l+0x88>
 801dbac:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 801dbb0:	e7f7      	b.n	801dba2 <_strtod_l+0x102>
 801dbb2:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 801dbb6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801dbb8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801dbbc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801dbc0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801dbc4:	e7ed      	b.n	801dba2 <_strtod_l+0x102>
 801dbc6:	f8df 918c 	ldr.w	r9, [pc, #396]	; 801dd54 <_strtod_l+0x2b4>
 801dbca:	f04f 0800 	mov.w	r8, #0
 801dbce:	e7e8      	b.n	801dba2 <_strtod_l+0x102>
 801dbd0:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801dbd4:	f04f 38ff 	mov.w	r8, #4294967295
 801dbd8:	e7e3      	b.n	801dba2 <_strtod_l+0x102>
 801dbda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801dbdc:	1c5a      	adds	r2, r3, #1
 801dbde:	9217      	str	r2, [sp, #92]	; 0x5c
 801dbe0:	785b      	ldrb	r3, [r3, #1]
 801dbe2:	2b30      	cmp	r3, #48	; 0x30
 801dbe4:	d0f9      	beq.n	801dbda <_strtod_l+0x13a>
 801dbe6:	2b00      	cmp	r3, #0
 801dbe8:	d09e      	beq.n	801db28 <_strtod_l+0x88>
 801dbea:	2301      	movs	r3, #1
 801dbec:	9306      	str	r3, [sp, #24]
 801dbee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801dbf0:	930c      	str	r3, [sp, #48]	; 0x30
 801dbf2:	2300      	movs	r3, #0
 801dbf4:	9304      	str	r3, [sp, #16]
 801dbf6:	930a      	str	r3, [sp, #40]	; 0x28
 801dbf8:	461e      	mov	r6, r3
 801dbfa:	220a      	movs	r2, #10
 801dbfc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801dbfe:	f890 b000 	ldrb.w	fp, [r0]
 801dc02:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 801dc06:	b2d9      	uxtb	r1, r3
 801dc08:	2909      	cmp	r1, #9
 801dc0a:	d92b      	bls.n	801dc64 <_strtod_l+0x1c4>
 801dc0c:	9908      	ldr	r1, [sp, #32]
 801dc0e:	462a      	mov	r2, r5
 801dc10:	f7ff ff04 	bl	801da1c <strncmp>
 801dc14:	2800      	cmp	r0, #0
 801dc16:	d035      	beq.n	801dc84 <_strtod_l+0x1e4>
 801dc18:	2000      	movs	r0, #0
 801dc1a:	465a      	mov	r2, fp
 801dc1c:	4633      	mov	r3, r6
 801dc1e:	4683      	mov	fp, r0
 801dc20:	4601      	mov	r1, r0
 801dc22:	2a65      	cmp	r2, #101	; 0x65
 801dc24:	d001      	beq.n	801dc2a <_strtod_l+0x18a>
 801dc26:	2a45      	cmp	r2, #69	; 0x45
 801dc28:	d118      	bne.n	801dc5c <_strtod_l+0x1bc>
 801dc2a:	b91b      	cbnz	r3, 801dc34 <_strtod_l+0x194>
 801dc2c:	9b06      	ldr	r3, [sp, #24]
 801dc2e:	4303      	orrs	r3, r0
 801dc30:	d097      	beq.n	801db62 <_strtod_l+0xc2>
 801dc32:	2300      	movs	r3, #0
 801dc34:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 801dc38:	f10a 0201 	add.w	r2, sl, #1
 801dc3c:	9217      	str	r2, [sp, #92]	; 0x5c
 801dc3e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801dc42:	2a2b      	cmp	r2, #43	; 0x2b
 801dc44:	d077      	beq.n	801dd36 <_strtod_l+0x296>
 801dc46:	2a2d      	cmp	r2, #45	; 0x2d
 801dc48:	d07d      	beq.n	801dd46 <_strtod_l+0x2a6>
 801dc4a:	f04f 0e00 	mov.w	lr, #0
 801dc4e:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801dc52:	2d09      	cmp	r5, #9
 801dc54:	f240 8084 	bls.w	801dd60 <_strtod_l+0x2c0>
 801dc58:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 801dc5c:	2500      	movs	r5, #0
 801dc5e:	e09f      	b.n	801dda0 <_strtod_l+0x300>
 801dc60:	2300      	movs	r3, #0
 801dc62:	e7c3      	b.n	801dbec <_strtod_l+0x14c>
 801dc64:	2e08      	cmp	r6, #8
 801dc66:	bfd5      	itete	le
 801dc68:	990a      	ldrle	r1, [sp, #40]	; 0x28
 801dc6a:	9904      	ldrgt	r1, [sp, #16]
 801dc6c:	fb02 3301 	mlale	r3, r2, r1, r3
 801dc70:	fb02 3301 	mlagt	r3, r2, r1, r3
 801dc74:	f100 0001 	add.w	r0, r0, #1
 801dc78:	bfd4      	ite	le
 801dc7a:	930a      	strle	r3, [sp, #40]	; 0x28
 801dc7c:	9304      	strgt	r3, [sp, #16]
 801dc7e:	3601      	adds	r6, #1
 801dc80:	9017      	str	r0, [sp, #92]	; 0x5c
 801dc82:	e7bb      	b.n	801dbfc <_strtod_l+0x15c>
 801dc84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801dc86:	195a      	adds	r2, r3, r5
 801dc88:	9217      	str	r2, [sp, #92]	; 0x5c
 801dc8a:	5d5a      	ldrb	r2, [r3, r5]
 801dc8c:	b3ae      	cbz	r6, 801dcfa <_strtod_l+0x25a>
 801dc8e:	4683      	mov	fp, r0
 801dc90:	4633      	mov	r3, r6
 801dc92:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801dc96:	2909      	cmp	r1, #9
 801dc98:	d912      	bls.n	801dcc0 <_strtod_l+0x220>
 801dc9a:	2101      	movs	r1, #1
 801dc9c:	e7c1      	b.n	801dc22 <_strtod_l+0x182>
 801dc9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801dca0:	1c5a      	adds	r2, r3, #1
 801dca2:	9217      	str	r2, [sp, #92]	; 0x5c
 801dca4:	785a      	ldrb	r2, [r3, #1]
 801dca6:	3001      	adds	r0, #1
 801dca8:	2a30      	cmp	r2, #48	; 0x30
 801dcaa:	d0f8      	beq.n	801dc9e <_strtod_l+0x1fe>
 801dcac:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801dcb0:	2b08      	cmp	r3, #8
 801dcb2:	f200 84b0 	bhi.w	801e616 <_strtod_l+0xb76>
 801dcb6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801dcb8:	930c      	str	r3, [sp, #48]	; 0x30
 801dcba:	4683      	mov	fp, r0
 801dcbc:	2000      	movs	r0, #0
 801dcbe:	4603      	mov	r3, r0
 801dcc0:	3a30      	subs	r2, #48	; 0x30
 801dcc2:	f100 0101 	add.w	r1, r0, #1
 801dcc6:	d012      	beq.n	801dcee <_strtod_l+0x24e>
 801dcc8:	448b      	add	fp, r1
 801dcca:	eb00 0c03 	add.w	ip, r0, r3
 801dcce:	4619      	mov	r1, r3
 801dcd0:	250a      	movs	r5, #10
 801dcd2:	4561      	cmp	r1, ip
 801dcd4:	d113      	bne.n	801dcfe <_strtod_l+0x25e>
 801dcd6:	1819      	adds	r1, r3, r0
 801dcd8:	2908      	cmp	r1, #8
 801dcda:	f103 0301 	add.w	r3, r3, #1
 801dcde:	4403      	add	r3, r0
 801dce0:	dc1d      	bgt.n	801dd1e <_strtod_l+0x27e>
 801dce2:	980a      	ldr	r0, [sp, #40]	; 0x28
 801dce4:	210a      	movs	r1, #10
 801dce6:	fb01 2200 	mla	r2, r1, r0, r2
 801dcea:	920a      	str	r2, [sp, #40]	; 0x28
 801dcec:	2100      	movs	r1, #0
 801dcee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801dcf0:	1c50      	adds	r0, r2, #1
 801dcf2:	9017      	str	r0, [sp, #92]	; 0x5c
 801dcf4:	7852      	ldrb	r2, [r2, #1]
 801dcf6:	4608      	mov	r0, r1
 801dcf8:	e7cb      	b.n	801dc92 <_strtod_l+0x1f2>
 801dcfa:	4630      	mov	r0, r6
 801dcfc:	e7d4      	b.n	801dca8 <_strtod_l+0x208>
 801dcfe:	2908      	cmp	r1, #8
 801dd00:	dc04      	bgt.n	801dd0c <_strtod_l+0x26c>
 801dd02:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801dd04:	436f      	muls	r7, r5
 801dd06:	970a      	str	r7, [sp, #40]	; 0x28
 801dd08:	3101      	adds	r1, #1
 801dd0a:	e7e2      	b.n	801dcd2 <_strtod_l+0x232>
 801dd0c:	f101 0e01 	add.w	lr, r1, #1
 801dd10:	f1be 0f10 	cmp.w	lr, #16
 801dd14:	bfde      	ittt	le
 801dd16:	9f04      	ldrle	r7, [sp, #16]
 801dd18:	436f      	mulle	r7, r5
 801dd1a:	9704      	strle	r7, [sp, #16]
 801dd1c:	e7f4      	b.n	801dd08 <_strtod_l+0x268>
 801dd1e:	2b10      	cmp	r3, #16
 801dd20:	bfdf      	itttt	le
 801dd22:	9804      	ldrle	r0, [sp, #16]
 801dd24:	210a      	movle	r1, #10
 801dd26:	fb01 2200 	mlale	r2, r1, r0, r2
 801dd2a:	9204      	strle	r2, [sp, #16]
 801dd2c:	e7de      	b.n	801dcec <_strtod_l+0x24c>
 801dd2e:	f04f 0b00 	mov.w	fp, #0
 801dd32:	2101      	movs	r1, #1
 801dd34:	e77a      	b.n	801dc2c <_strtod_l+0x18c>
 801dd36:	f04f 0e00 	mov.w	lr, #0
 801dd3a:	f10a 0202 	add.w	r2, sl, #2
 801dd3e:	9217      	str	r2, [sp, #92]	; 0x5c
 801dd40:	f89a 2002 	ldrb.w	r2, [sl, #2]
 801dd44:	e783      	b.n	801dc4e <_strtod_l+0x1ae>
 801dd46:	f04f 0e01 	mov.w	lr, #1
 801dd4a:	e7f6      	b.n	801dd3a <_strtod_l+0x29a>
 801dd4c:	0802aa30 	.word	0x0802aa30
 801dd50:	0802a87c 	.word	0x0802a87c
 801dd54:	7ff00000 	.word	0x7ff00000
 801dd58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801dd5a:	1c55      	adds	r5, r2, #1
 801dd5c:	9517      	str	r5, [sp, #92]	; 0x5c
 801dd5e:	7852      	ldrb	r2, [r2, #1]
 801dd60:	2a30      	cmp	r2, #48	; 0x30
 801dd62:	d0f9      	beq.n	801dd58 <_strtod_l+0x2b8>
 801dd64:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 801dd68:	2d08      	cmp	r5, #8
 801dd6a:	f63f af77 	bhi.w	801dc5c <_strtod_l+0x1bc>
 801dd6e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801dd72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801dd74:	9208      	str	r2, [sp, #32]
 801dd76:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801dd78:	1c55      	adds	r5, r2, #1
 801dd7a:	9517      	str	r5, [sp, #92]	; 0x5c
 801dd7c:	7852      	ldrb	r2, [r2, #1]
 801dd7e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801dd82:	2f09      	cmp	r7, #9
 801dd84:	d937      	bls.n	801ddf6 <_strtod_l+0x356>
 801dd86:	9f08      	ldr	r7, [sp, #32]
 801dd88:	1bed      	subs	r5, r5, r7
 801dd8a:	2d08      	cmp	r5, #8
 801dd8c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801dd90:	dc02      	bgt.n	801dd98 <_strtod_l+0x2f8>
 801dd92:	4565      	cmp	r5, ip
 801dd94:	bfa8      	it	ge
 801dd96:	4665      	movge	r5, ip
 801dd98:	f1be 0f00 	cmp.w	lr, #0
 801dd9c:	d000      	beq.n	801dda0 <_strtod_l+0x300>
 801dd9e:	426d      	negs	r5, r5
 801dda0:	2b00      	cmp	r3, #0
 801dda2:	d14f      	bne.n	801de44 <_strtod_l+0x3a4>
 801dda4:	9b06      	ldr	r3, [sp, #24]
 801dda6:	4303      	orrs	r3, r0
 801dda8:	f47f aebe 	bne.w	801db28 <_strtod_l+0x88>
 801ddac:	2900      	cmp	r1, #0
 801ddae:	f47f aed8 	bne.w	801db62 <_strtod_l+0xc2>
 801ddb2:	2a69      	cmp	r2, #105	; 0x69
 801ddb4:	d027      	beq.n	801de06 <_strtod_l+0x366>
 801ddb6:	dc24      	bgt.n	801de02 <_strtod_l+0x362>
 801ddb8:	2a49      	cmp	r2, #73	; 0x49
 801ddba:	d024      	beq.n	801de06 <_strtod_l+0x366>
 801ddbc:	2a4e      	cmp	r2, #78	; 0x4e
 801ddbe:	f47f aed0 	bne.w	801db62 <_strtod_l+0xc2>
 801ddc2:	499b      	ldr	r1, [pc, #620]	; (801e030 <_strtod_l+0x590>)
 801ddc4:	a817      	add	r0, sp, #92	; 0x5c
 801ddc6:	f002 f82f 	bl	801fe28 <__match>
 801ddca:	2800      	cmp	r0, #0
 801ddcc:	f43f aec9 	beq.w	801db62 <_strtod_l+0xc2>
 801ddd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ddd2:	781b      	ldrb	r3, [r3, #0]
 801ddd4:	2b28      	cmp	r3, #40	; 0x28
 801ddd6:	d12d      	bne.n	801de34 <_strtod_l+0x394>
 801ddd8:	4996      	ldr	r1, [pc, #600]	; (801e034 <_strtod_l+0x594>)
 801ddda:	aa1a      	add	r2, sp, #104	; 0x68
 801dddc:	a817      	add	r0, sp, #92	; 0x5c
 801ddde:	f002 f837 	bl	801fe50 <__hexnan>
 801dde2:	2805      	cmp	r0, #5
 801dde4:	d126      	bne.n	801de34 <_strtod_l+0x394>
 801dde6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801dde8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 801ddec:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801ddf0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801ddf4:	e698      	b.n	801db28 <_strtod_l+0x88>
 801ddf6:	250a      	movs	r5, #10
 801ddf8:	fb05 250c 	mla	r5, r5, ip, r2
 801ddfc:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 801de00:	e7b9      	b.n	801dd76 <_strtod_l+0x2d6>
 801de02:	2a6e      	cmp	r2, #110	; 0x6e
 801de04:	e7db      	b.n	801ddbe <_strtod_l+0x31e>
 801de06:	498c      	ldr	r1, [pc, #560]	; (801e038 <_strtod_l+0x598>)
 801de08:	a817      	add	r0, sp, #92	; 0x5c
 801de0a:	f002 f80d 	bl	801fe28 <__match>
 801de0e:	2800      	cmp	r0, #0
 801de10:	f43f aea7 	beq.w	801db62 <_strtod_l+0xc2>
 801de14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801de16:	4989      	ldr	r1, [pc, #548]	; (801e03c <_strtod_l+0x59c>)
 801de18:	3b01      	subs	r3, #1
 801de1a:	a817      	add	r0, sp, #92	; 0x5c
 801de1c:	9317      	str	r3, [sp, #92]	; 0x5c
 801de1e:	f002 f803 	bl	801fe28 <__match>
 801de22:	b910      	cbnz	r0, 801de2a <_strtod_l+0x38a>
 801de24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801de26:	3301      	adds	r3, #1
 801de28:	9317      	str	r3, [sp, #92]	; 0x5c
 801de2a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 801e050 <_strtod_l+0x5b0>
 801de2e:	f04f 0800 	mov.w	r8, #0
 801de32:	e679      	b.n	801db28 <_strtod_l+0x88>
 801de34:	4882      	ldr	r0, [pc, #520]	; (801e040 <_strtod_l+0x5a0>)
 801de36:	f002 ff7f 	bl	8020d38 <nan>
 801de3a:	ed8d 0b04 	vstr	d0, [sp, #16]
 801de3e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801de42:	e671      	b.n	801db28 <_strtod_l+0x88>
 801de44:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 801de48:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801de4c:	eba5 020b 	sub.w	r2, r5, fp
 801de50:	2e00      	cmp	r6, #0
 801de52:	bf08      	it	eq
 801de54:	461e      	moveq	r6, r3
 801de56:	2b10      	cmp	r3, #16
 801de58:	ed8d 7b08 	vstr	d7, [sp, #32]
 801de5c:	9206      	str	r2, [sp, #24]
 801de5e:	461a      	mov	r2, r3
 801de60:	bfa8      	it	ge
 801de62:	2210      	movge	r2, #16
 801de64:	2b09      	cmp	r3, #9
 801de66:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 801de6a:	dd0e      	ble.n	801de8a <_strtod_l+0x3ea>
 801de6c:	4975      	ldr	r1, [pc, #468]	; (801e044 <_strtod_l+0x5a4>)
 801de6e:	eddd 7a04 	vldr	s15, [sp, #16]
 801de72:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801de76:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 801de7a:	ed9d 5b08 	vldr	d5, [sp, #32]
 801de7e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801de82:	eea5 7b06 	vfma.f64	d7, d5, d6
 801de86:	ec59 8b17 	vmov	r8, r9, d7
 801de8a:	2b0f      	cmp	r3, #15
 801de8c:	dc37      	bgt.n	801defe <_strtod_l+0x45e>
 801de8e:	9906      	ldr	r1, [sp, #24]
 801de90:	2900      	cmp	r1, #0
 801de92:	f43f ae49 	beq.w	801db28 <_strtod_l+0x88>
 801de96:	dd23      	ble.n	801dee0 <_strtod_l+0x440>
 801de98:	2916      	cmp	r1, #22
 801de9a:	dc0b      	bgt.n	801deb4 <_strtod_l+0x414>
 801de9c:	4b69      	ldr	r3, [pc, #420]	; (801e044 <_strtod_l+0x5a4>)
 801de9e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801dea2:	ed93 7b00 	vldr	d7, [r3]
 801dea6:	ec49 8b16 	vmov	d6, r8, r9
 801deaa:	ee27 7b06 	vmul.f64	d7, d7, d6
 801deae:	ec59 8b17 	vmov	r8, r9, d7
 801deb2:	e639      	b.n	801db28 <_strtod_l+0x88>
 801deb4:	9806      	ldr	r0, [sp, #24]
 801deb6:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801deba:	4281      	cmp	r1, r0
 801debc:	db1f      	blt.n	801defe <_strtod_l+0x45e>
 801debe:	4a61      	ldr	r2, [pc, #388]	; (801e044 <_strtod_l+0x5a4>)
 801dec0:	f1c3 030f 	rsb	r3, r3, #15
 801dec4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801dec8:	ed91 7b00 	vldr	d7, [r1]
 801decc:	ec49 8b16 	vmov	d6, r8, r9
 801ded0:	1ac3      	subs	r3, r0, r3
 801ded2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801ded6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801deda:	ed92 6b00 	vldr	d6, [r2]
 801dede:	e7e4      	b.n	801deaa <_strtod_l+0x40a>
 801dee0:	9906      	ldr	r1, [sp, #24]
 801dee2:	3116      	adds	r1, #22
 801dee4:	db0b      	blt.n	801defe <_strtod_l+0x45e>
 801dee6:	4b57      	ldr	r3, [pc, #348]	; (801e044 <_strtod_l+0x5a4>)
 801dee8:	ebab 0505 	sub.w	r5, fp, r5
 801deec:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801def0:	ed95 7b00 	vldr	d7, [r5]
 801def4:	ec49 8b16 	vmov	d6, r8, r9
 801def8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801defc:	e7d7      	b.n	801deae <_strtod_l+0x40e>
 801defe:	9906      	ldr	r1, [sp, #24]
 801df00:	1a9a      	subs	r2, r3, r2
 801df02:	440a      	add	r2, r1
 801df04:	2a00      	cmp	r2, #0
 801df06:	dd74      	ble.n	801dff2 <_strtod_l+0x552>
 801df08:	f012 000f 	ands.w	r0, r2, #15
 801df0c:	d00a      	beq.n	801df24 <_strtod_l+0x484>
 801df0e:	494d      	ldr	r1, [pc, #308]	; (801e044 <_strtod_l+0x5a4>)
 801df10:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801df14:	ed91 7b00 	vldr	d7, [r1]
 801df18:	ec49 8b16 	vmov	d6, r8, r9
 801df1c:	ee27 7b06 	vmul.f64	d7, d7, d6
 801df20:	ec59 8b17 	vmov	r8, r9, d7
 801df24:	f032 020f 	bics.w	r2, r2, #15
 801df28:	d04f      	beq.n	801dfca <_strtod_l+0x52a>
 801df2a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801df2e:	dd22      	ble.n	801df76 <_strtod_l+0x4d6>
 801df30:	2500      	movs	r5, #0
 801df32:	462e      	mov	r6, r5
 801df34:	950a      	str	r5, [sp, #40]	; 0x28
 801df36:	462f      	mov	r7, r5
 801df38:	2322      	movs	r3, #34	; 0x22
 801df3a:	f8df 9114 	ldr.w	r9, [pc, #276]	; 801e050 <_strtod_l+0x5b0>
 801df3e:	6023      	str	r3, [r4, #0]
 801df40:	f04f 0800 	mov.w	r8, #0
 801df44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801df46:	2b00      	cmp	r3, #0
 801df48:	f43f adee 	beq.w	801db28 <_strtod_l+0x88>
 801df4c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801df4e:	4620      	mov	r0, r4
 801df50:	f002 f8e4 	bl	802011c <_Bfree>
 801df54:	4639      	mov	r1, r7
 801df56:	4620      	mov	r0, r4
 801df58:	f002 f8e0 	bl	802011c <_Bfree>
 801df5c:	4631      	mov	r1, r6
 801df5e:	4620      	mov	r0, r4
 801df60:	f002 f8dc 	bl	802011c <_Bfree>
 801df64:	990a      	ldr	r1, [sp, #40]	; 0x28
 801df66:	4620      	mov	r0, r4
 801df68:	f002 f8d8 	bl	802011c <_Bfree>
 801df6c:	4629      	mov	r1, r5
 801df6e:	4620      	mov	r0, r4
 801df70:	f002 f8d4 	bl	802011c <_Bfree>
 801df74:	e5d8      	b.n	801db28 <_strtod_l+0x88>
 801df76:	e9cd 8904 	strd	r8, r9, [sp, #16]
 801df7a:	2000      	movs	r0, #0
 801df7c:	4f32      	ldr	r7, [pc, #200]	; (801e048 <_strtod_l+0x5a8>)
 801df7e:	1112      	asrs	r2, r2, #4
 801df80:	4601      	mov	r1, r0
 801df82:	2a01      	cmp	r2, #1
 801df84:	dc24      	bgt.n	801dfd0 <_strtod_l+0x530>
 801df86:	b108      	cbz	r0, 801df8c <_strtod_l+0x4ec>
 801df88:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801df8c:	4a2e      	ldr	r2, [pc, #184]	; (801e048 <_strtod_l+0x5a8>)
 801df8e:	482f      	ldr	r0, [pc, #188]	; (801e04c <_strtod_l+0x5ac>)
 801df90:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 801df94:	ed91 7b00 	vldr	d7, [r1]
 801df98:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801df9c:	ec49 8b16 	vmov	d6, r8, r9
 801dfa0:	ee27 7b06 	vmul.f64	d7, d7, d6
 801dfa4:	ed8d 7b04 	vstr	d7, [sp, #16]
 801dfa8:	9905      	ldr	r1, [sp, #20]
 801dfaa:	4a29      	ldr	r2, [pc, #164]	; (801e050 <_strtod_l+0x5b0>)
 801dfac:	400a      	ands	r2, r1
 801dfae:	4282      	cmp	r2, r0
 801dfb0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801dfb4:	d8bc      	bhi.n	801df30 <_strtod_l+0x490>
 801dfb6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801dfba:	4282      	cmp	r2, r0
 801dfbc:	bf86      	itte	hi
 801dfbe:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 801e054 <_strtod_l+0x5b4>
 801dfc2:	f04f 38ff 	movhi.w	r8, #4294967295
 801dfc6:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801dfca:	2200      	movs	r2, #0
 801dfcc:	9204      	str	r2, [sp, #16]
 801dfce:	e07f      	b.n	801e0d0 <_strtod_l+0x630>
 801dfd0:	f012 0f01 	tst.w	r2, #1
 801dfd4:	d00a      	beq.n	801dfec <_strtod_l+0x54c>
 801dfd6:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 801dfda:	ed90 7b00 	vldr	d7, [r0]
 801dfde:	ed9d 6b04 	vldr	d6, [sp, #16]
 801dfe2:	ee26 7b07 	vmul.f64	d7, d6, d7
 801dfe6:	ed8d 7b04 	vstr	d7, [sp, #16]
 801dfea:	2001      	movs	r0, #1
 801dfec:	3101      	adds	r1, #1
 801dfee:	1052      	asrs	r2, r2, #1
 801dff0:	e7c7      	b.n	801df82 <_strtod_l+0x4e2>
 801dff2:	d0ea      	beq.n	801dfca <_strtod_l+0x52a>
 801dff4:	4252      	negs	r2, r2
 801dff6:	f012 000f 	ands.w	r0, r2, #15
 801dffa:	d00a      	beq.n	801e012 <_strtod_l+0x572>
 801dffc:	4911      	ldr	r1, [pc, #68]	; (801e044 <_strtod_l+0x5a4>)
 801dffe:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801e002:	ed91 7b00 	vldr	d7, [r1]
 801e006:	ec49 8b16 	vmov	d6, r8, r9
 801e00a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801e00e:	ec59 8b17 	vmov	r8, r9, d7
 801e012:	1112      	asrs	r2, r2, #4
 801e014:	d0d9      	beq.n	801dfca <_strtod_l+0x52a>
 801e016:	2a1f      	cmp	r2, #31
 801e018:	dd1e      	ble.n	801e058 <_strtod_l+0x5b8>
 801e01a:	2500      	movs	r5, #0
 801e01c:	462e      	mov	r6, r5
 801e01e:	950a      	str	r5, [sp, #40]	; 0x28
 801e020:	462f      	mov	r7, r5
 801e022:	2322      	movs	r3, #34	; 0x22
 801e024:	f04f 0800 	mov.w	r8, #0
 801e028:	f04f 0900 	mov.w	r9, #0
 801e02c:	6023      	str	r3, [r4, #0]
 801e02e:	e789      	b.n	801df44 <_strtod_l+0x4a4>
 801e030:	0802a84e 	.word	0x0802a84e
 801e034:	0802a890 	.word	0x0802a890
 801e038:	0802a846 	.word	0x0802a846
 801e03c:	0802a8d3 	.word	0x0802a8d3
 801e040:	0802a72a 	.word	0x0802a72a
 801e044:	0802aad0 	.word	0x0802aad0
 801e048:	0802aaa8 	.word	0x0802aaa8
 801e04c:	7ca00000 	.word	0x7ca00000
 801e050:	7ff00000 	.word	0x7ff00000
 801e054:	7fefffff 	.word	0x7fefffff
 801e058:	f012 0110 	ands.w	r1, r2, #16
 801e05c:	bf18      	it	ne
 801e05e:	216a      	movne	r1, #106	; 0x6a
 801e060:	e9cd 8908 	strd	r8, r9, [sp, #32]
 801e064:	9104      	str	r1, [sp, #16]
 801e066:	49c0      	ldr	r1, [pc, #768]	; (801e368 <_strtod_l+0x8c8>)
 801e068:	2000      	movs	r0, #0
 801e06a:	07d7      	lsls	r7, r2, #31
 801e06c:	d508      	bpl.n	801e080 <_strtod_l+0x5e0>
 801e06e:	ed9d 6b08 	vldr	d6, [sp, #32]
 801e072:	ed91 7b00 	vldr	d7, [r1]
 801e076:	ee26 7b07 	vmul.f64	d7, d6, d7
 801e07a:	ed8d 7b08 	vstr	d7, [sp, #32]
 801e07e:	2001      	movs	r0, #1
 801e080:	1052      	asrs	r2, r2, #1
 801e082:	f101 0108 	add.w	r1, r1, #8
 801e086:	d1f0      	bne.n	801e06a <_strtod_l+0x5ca>
 801e088:	b108      	cbz	r0, 801e08e <_strtod_l+0x5ee>
 801e08a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 801e08e:	9a04      	ldr	r2, [sp, #16]
 801e090:	b1ba      	cbz	r2, 801e0c2 <_strtod_l+0x622>
 801e092:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801e096:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 801e09a:	2a00      	cmp	r2, #0
 801e09c:	4649      	mov	r1, r9
 801e09e:	dd10      	ble.n	801e0c2 <_strtod_l+0x622>
 801e0a0:	2a1f      	cmp	r2, #31
 801e0a2:	f340 8132 	ble.w	801e30a <_strtod_l+0x86a>
 801e0a6:	2a34      	cmp	r2, #52	; 0x34
 801e0a8:	bfde      	ittt	le
 801e0aa:	3a20      	suble	r2, #32
 801e0ac:	f04f 30ff 	movle.w	r0, #4294967295
 801e0b0:	fa00 f202 	lslle.w	r2, r0, r2
 801e0b4:	f04f 0800 	mov.w	r8, #0
 801e0b8:	bfcc      	ite	gt
 801e0ba:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801e0be:	ea02 0901 	andle.w	r9, r2, r1
 801e0c2:	ec49 8b17 	vmov	d7, r8, r9
 801e0c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e0ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e0ce:	d0a4      	beq.n	801e01a <_strtod_l+0x57a>
 801e0d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e0d2:	9200      	str	r2, [sp, #0]
 801e0d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e0d6:	4632      	mov	r2, r6
 801e0d8:	4620      	mov	r0, r4
 801e0da:	f002 f88b 	bl	80201f4 <__s2b>
 801e0de:	900a      	str	r0, [sp, #40]	; 0x28
 801e0e0:	2800      	cmp	r0, #0
 801e0e2:	f43f af25 	beq.w	801df30 <_strtod_l+0x490>
 801e0e6:	9b06      	ldr	r3, [sp, #24]
 801e0e8:	ebab 0505 	sub.w	r5, fp, r5
 801e0ec:	2b00      	cmp	r3, #0
 801e0ee:	bfb4      	ite	lt
 801e0f0:	462b      	movlt	r3, r5
 801e0f2:	2300      	movge	r3, #0
 801e0f4:	930c      	str	r3, [sp, #48]	; 0x30
 801e0f6:	9b06      	ldr	r3, [sp, #24]
 801e0f8:	ed9f 9b95 	vldr	d9, [pc, #596]	; 801e350 <_strtod_l+0x8b0>
 801e0fc:	ed9f ab96 	vldr	d10, [pc, #600]	; 801e358 <_strtod_l+0x8b8>
 801e100:	ed9f bb97 	vldr	d11, [pc, #604]	; 801e360 <_strtod_l+0x8c0>
 801e104:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e108:	2500      	movs	r5, #0
 801e10a:	9312      	str	r3, [sp, #72]	; 0x48
 801e10c:	462e      	mov	r6, r5
 801e10e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e110:	4620      	mov	r0, r4
 801e112:	6859      	ldr	r1, [r3, #4]
 801e114:	f001 ffc2 	bl	802009c <_Balloc>
 801e118:	4607      	mov	r7, r0
 801e11a:	2800      	cmp	r0, #0
 801e11c:	f43f af0c 	beq.w	801df38 <_strtod_l+0x498>
 801e120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e122:	691a      	ldr	r2, [r3, #16]
 801e124:	3202      	adds	r2, #2
 801e126:	f103 010c 	add.w	r1, r3, #12
 801e12a:	0092      	lsls	r2, r2, #2
 801e12c:	300c      	adds	r0, #12
 801e12e:	f7fe fb03 	bl	801c738 <memcpy>
 801e132:	ec49 8b10 	vmov	d0, r8, r9
 801e136:	aa1a      	add	r2, sp, #104	; 0x68
 801e138:	a919      	add	r1, sp, #100	; 0x64
 801e13a:	4620      	mov	r0, r4
 801e13c:	e9cd 8908 	strd	r8, r9, [sp, #32]
 801e140:	f002 fb94 	bl	802086c <__d2b>
 801e144:	9018      	str	r0, [sp, #96]	; 0x60
 801e146:	2800      	cmp	r0, #0
 801e148:	f43f aef6 	beq.w	801df38 <_strtod_l+0x498>
 801e14c:	2101      	movs	r1, #1
 801e14e:	4620      	mov	r0, r4
 801e150:	f002 f8ea 	bl	8020328 <__i2b>
 801e154:	4606      	mov	r6, r0
 801e156:	2800      	cmp	r0, #0
 801e158:	f43f aeee 	beq.w	801df38 <_strtod_l+0x498>
 801e15c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e15e:	991a      	ldr	r1, [sp, #104]	; 0x68
 801e160:	2b00      	cmp	r3, #0
 801e162:	bfab      	itete	ge
 801e164:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801e166:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801e168:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 801e16c:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 801e170:	bfac      	ite	ge
 801e172:	eb03 0b02 	addge.w	fp, r3, r2
 801e176:	eba2 0a03 	sublt.w	sl, r2, r3
 801e17a:	9a04      	ldr	r2, [sp, #16]
 801e17c:	1a9b      	subs	r3, r3, r2
 801e17e:	440b      	add	r3, r1
 801e180:	4a7a      	ldr	r2, [pc, #488]	; (801e36c <_strtod_l+0x8cc>)
 801e182:	3b01      	subs	r3, #1
 801e184:	4293      	cmp	r3, r2
 801e186:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801e18a:	f280 80d1 	bge.w	801e330 <_strtod_l+0x890>
 801e18e:	1ad2      	subs	r2, r2, r3
 801e190:	2a1f      	cmp	r2, #31
 801e192:	eba1 0102 	sub.w	r1, r1, r2
 801e196:	f04f 0001 	mov.w	r0, #1
 801e19a:	f300 80bd 	bgt.w	801e318 <_strtod_l+0x878>
 801e19e:	fa00 f302 	lsl.w	r3, r0, r2
 801e1a2:	930e      	str	r3, [sp, #56]	; 0x38
 801e1a4:	2300      	movs	r3, #0
 801e1a6:	930d      	str	r3, [sp, #52]	; 0x34
 801e1a8:	eb0b 0301 	add.w	r3, fp, r1
 801e1ac:	9a04      	ldr	r2, [sp, #16]
 801e1ae:	459b      	cmp	fp, r3
 801e1b0:	448a      	add	sl, r1
 801e1b2:	4492      	add	sl, r2
 801e1b4:	465a      	mov	r2, fp
 801e1b6:	bfa8      	it	ge
 801e1b8:	461a      	movge	r2, r3
 801e1ba:	4552      	cmp	r2, sl
 801e1bc:	bfa8      	it	ge
 801e1be:	4652      	movge	r2, sl
 801e1c0:	2a00      	cmp	r2, #0
 801e1c2:	bfc2      	ittt	gt
 801e1c4:	1a9b      	subgt	r3, r3, r2
 801e1c6:	ebaa 0a02 	subgt.w	sl, sl, r2
 801e1ca:	ebab 0b02 	subgt.w	fp, fp, r2
 801e1ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e1d0:	2a00      	cmp	r2, #0
 801e1d2:	dd18      	ble.n	801e206 <_strtod_l+0x766>
 801e1d4:	4631      	mov	r1, r6
 801e1d6:	4620      	mov	r0, r4
 801e1d8:	9315      	str	r3, [sp, #84]	; 0x54
 801e1da:	f002 f961 	bl	80204a0 <__pow5mult>
 801e1de:	4606      	mov	r6, r0
 801e1e0:	2800      	cmp	r0, #0
 801e1e2:	f43f aea9 	beq.w	801df38 <_strtod_l+0x498>
 801e1e6:	4601      	mov	r1, r0
 801e1e8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e1ea:	4620      	mov	r0, r4
 801e1ec:	f002 f8b2 	bl	8020354 <__multiply>
 801e1f0:	9014      	str	r0, [sp, #80]	; 0x50
 801e1f2:	2800      	cmp	r0, #0
 801e1f4:	f43f aea0 	beq.w	801df38 <_strtod_l+0x498>
 801e1f8:	9918      	ldr	r1, [sp, #96]	; 0x60
 801e1fa:	4620      	mov	r0, r4
 801e1fc:	f001 ff8e 	bl	802011c <_Bfree>
 801e200:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e202:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e204:	9218      	str	r2, [sp, #96]	; 0x60
 801e206:	2b00      	cmp	r3, #0
 801e208:	f300 8097 	bgt.w	801e33a <_strtod_l+0x89a>
 801e20c:	9b06      	ldr	r3, [sp, #24]
 801e20e:	2b00      	cmp	r3, #0
 801e210:	dd08      	ble.n	801e224 <_strtod_l+0x784>
 801e212:	4639      	mov	r1, r7
 801e214:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e216:	4620      	mov	r0, r4
 801e218:	f002 f942 	bl	80204a0 <__pow5mult>
 801e21c:	4607      	mov	r7, r0
 801e21e:	2800      	cmp	r0, #0
 801e220:	f43f ae8a 	beq.w	801df38 <_strtod_l+0x498>
 801e224:	f1ba 0f00 	cmp.w	sl, #0
 801e228:	dd08      	ble.n	801e23c <_strtod_l+0x79c>
 801e22a:	4639      	mov	r1, r7
 801e22c:	4652      	mov	r2, sl
 801e22e:	4620      	mov	r0, r4
 801e230:	f002 f990 	bl	8020554 <__lshift>
 801e234:	4607      	mov	r7, r0
 801e236:	2800      	cmp	r0, #0
 801e238:	f43f ae7e 	beq.w	801df38 <_strtod_l+0x498>
 801e23c:	f1bb 0f00 	cmp.w	fp, #0
 801e240:	dd08      	ble.n	801e254 <_strtod_l+0x7b4>
 801e242:	4631      	mov	r1, r6
 801e244:	465a      	mov	r2, fp
 801e246:	4620      	mov	r0, r4
 801e248:	f002 f984 	bl	8020554 <__lshift>
 801e24c:	4606      	mov	r6, r0
 801e24e:	2800      	cmp	r0, #0
 801e250:	f43f ae72 	beq.w	801df38 <_strtod_l+0x498>
 801e254:	9918      	ldr	r1, [sp, #96]	; 0x60
 801e256:	463a      	mov	r2, r7
 801e258:	4620      	mov	r0, r4
 801e25a:	f002 fa03 	bl	8020664 <__mdiff>
 801e25e:	4605      	mov	r5, r0
 801e260:	2800      	cmp	r0, #0
 801e262:	f43f ae69 	beq.w	801df38 <_strtod_l+0x498>
 801e266:	2300      	movs	r3, #0
 801e268:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801e26c:	60c3      	str	r3, [r0, #12]
 801e26e:	4631      	mov	r1, r6
 801e270:	f002 f9dc 	bl	802062c <__mcmp>
 801e274:	2800      	cmp	r0, #0
 801e276:	da7f      	bge.n	801e378 <_strtod_l+0x8d8>
 801e278:	ea5a 0308 	orrs.w	r3, sl, r8
 801e27c:	f040 80a5 	bne.w	801e3ca <_strtod_l+0x92a>
 801e280:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e284:	2b00      	cmp	r3, #0
 801e286:	f040 80a0 	bne.w	801e3ca <_strtod_l+0x92a>
 801e28a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e28e:	0d1b      	lsrs	r3, r3, #20
 801e290:	051b      	lsls	r3, r3, #20
 801e292:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801e296:	f240 8098 	bls.w	801e3ca <_strtod_l+0x92a>
 801e29a:	696b      	ldr	r3, [r5, #20]
 801e29c:	b91b      	cbnz	r3, 801e2a6 <_strtod_l+0x806>
 801e29e:	692b      	ldr	r3, [r5, #16]
 801e2a0:	2b01      	cmp	r3, #1
 801e2a2:	f340 8092 	ble.w	801e3ca <_strtod_l+0x92a>
 801e2a6:	4629      	mov	r1, r5
 801e2a8:	2201      	movs	r2, #1
 801e2aa:	4620      	mov	r0, r4
 801e2ac:	f002 f952 	bl	8020554 <__lshift>
 801e2b0:	4631      	mov	r1, r6
 801e2b2:	4605      	mov	r5, r0
 801e2b4:	f002 f9ba 	bl	802062c <__mcmp>
 801e2b8:	2800      	cmp	r0, #0
 801e2ba:	f340 8086 	ble.w	801e3ca <_strtod_l+0x92a>
 801e2be:	9904      	ldr	r1, [sp, #16]
 801e2c0:	4a2b      	ldr	r2, [pc, #172]	; (801e370 <_strtod_l+0x8d0>)
 801e2c2:	464b      	mov	r3, r9
 801e2c4:	2900      	cmp	r1, #0
 801e2c6:	f000 80a1 	beq.w	801e40c <_strtod_l+0x96c>
 801e2ca:	ea02 0109 	and.w	r1, r2, r9
 801e2ce:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801e2d2:	f300 809b 	bgt.w	801e40c <_strtod_l+0x96c>
 801e2d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801e2da:	f77f aea2 	ble.w	801e022 <_strtod_l+0x582>
 801e2de:	4a25      	ldr	r2, [pc, #148]	; (801e374 <_strtod_l+0x8d4>)
 801e2e0:	2300      	movs	r3, #0
 801e2e2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 801e2e6:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 801e2ea:	ec49 8b17 	vmov	d7, r8, r9
 801e2ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 801e2f2:	ed8d 7b04 	vstr	d7, [sp, #16]
 801e2f6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801e2fa:	4313      	orrs	r3, r2
 801e2fc:	bf08      	it	eq
 801e2fe:	2322      	moveq	r3, #34	; 0x22
 801e300:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801e304:	bf08      	it	eq
 801e306:	6023      	streq	r3, [r4, #0]
 801e308:	e620      	b.n	801df4c <_strtod_l+0x4ac>
 801e30a:	f04f 31ff 	mov.w	r1, #4294967295
 801e30e:	fa01 f202 	lsl.w	r2, r1, r2
 801e312:	ea02 0808 	and.w	r8, r2, r8
 801e316:	e6d4      	b.n	801e0c2 <_strtod_l+0x622>
 801e318:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801e31c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801e320:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801e324:	33e2      	adds	r3, #226	; 0xe2
 801e326:	fa00 f303 	lsl.w	r3, r0, r3
 801e32a:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 801e32e:	e73b      	b.n	801e1a8 <_strtod_l+0x708>
 801e330:	2000      	movs	r0, #0
 801e332:	2301      	movs	r3, #1
 801e334:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 801e338:	e736      	b.n	801e1a8 <_strtod_l+0x708>
 801e33a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801e33c:	461a      	mov	r2, r3
 801e33e:	4620      	mov	r0, r4
 801e340:	f002 f908 	bl	8020554 <__lshift>
 801e344:	9018      	str	r0, [sp, #96]	; 0x60
 801e346:	2800      	cmp	r0, #0
 801e348:	f47f af60 	bne.w	801e20c <_strtod_l+0x76c>
 801e34c:	e5f4      	b.n	801df38 <_strtod_l+0x498>
 801e34e:	bf00      	nop
 801e350:	94a03595 	.word	0x94a03595
 801e354:	3fcfffff 	.word	0x3fcfffff
 801e358:	94a03595 	.word	0x94a03595
 801e35c:	3fdfffff 	.word	0x3fdfffff
 801e360:	35afe535 	.word	0x35afe535
 801e364:	3fe00000 	.word	0x3fe00000
 801e368:	0802a8a8 	.word	0x0802a8a8
 801e36c:	fffffc02 	.word	0xfffffc02
 801e370:	7ff00000 	.word	0x7ff00000
 801e374:	39500000 	.word	0x39500000
 801e378:	46cb      	mov	fp, r9
 801e37a:	d165      	bne.n	801e448 <_strtod_l+0x9a8>
 801e37c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e380:	f1ba 0f00 	cmp.w	sl, #0
 801e384:	d02a      	beq.n	801e3dc <_strtod_l+0x93c>
 801e386:	4aaa      	ldr	r2, [pc, #680]	; (801e630 <_strtod_l+0xb90>)
 801e388:	4293      	cmp	r3, r2
 801e38a:	d12b      	bne.n	801e3e4 <_strtod_l+0x944>
 801e38c:	9b04      	ldr	r3, [sp, #16]
 801e38e:	4641      	mov	r1, r8
 801e390:	b1fb      	cbz	r3, 801e3d2 <_strtod_l+0x932>
 801e392:	4aa8      	ldr	r2, [pc, #672]	; (801e634 <_strtod_l+0xb94>)
 801e394:	ea09 0202 	and.w	r2, r9, r2
 801e398:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801e39c:	f04f 30ff 	mov.w	r0, #4294967295
 801e3a0:	d81a      	bhi.n	801e3d8 <_strtod_l+0x938>
 801e3a2:	0d12      	lsrs	r2, r2, #20
 801e3a4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801e3a8:	fa00 f303 	lsl.w	r3, r0, r3
 801e3ac:	4299      	cmp	r1, r3
 801e3ae:	d119      	bne.n	801e3e4 <_strtod_l+0x944>
 801e3b0:	4ba1      	ldr	r3, [pc, #644]	; (801e638 <_strtod_l+0xb98>)
 801e3b2:	459b      	cmp	fp, r3
 801e3b4:	d102      	bne.n	801e3bc <_strtod_l+0x91c>
 801e3b6:	3101      	adds	r1, #1
 801e3b8:	f43f adbe 	beq.w	801df38 <_strtod_l+0x498>
 801e3bc:	4b9d      	ldr	r3, [pc, #628]	; (801e634 <_strtod_l+0xb94>)
 801e3be:	ea0b 0303 	and.w	r3, fp, r3
 801e3c2:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801e3c6:	f04f 0800 	mov.w	r8, #0
 801e3ca:	9b04      	ldr	r3, [sp, #16]
 801e3cc:	2b00      	cmp	r3, #0
 801e3ce:	d186      	bne.n	801e2de <_strtod_l+0x83e>
 801e3d0:	e5bc      	b.n	801df4c <_strtod_l+0x4ac>
 801e3d2:	f04f 33ff 	mov.w	r3, #4294967295
 801e3d6:	e7e9      	b.n	801e3ac <_strtod_l+0x90c>
 801e3d8:	4603      	mov	r3, r0
 801e3da:	e7e7      	b.n	801e3ac <_strtod_l+0x90c>
 801e3dc:	ea53 0308 	orrs.w	r3, r3, r8
 801e3e0:	f43f af6d 	beq.w	801e2be <_strtod_l+0x81e>
 801e3e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e3e6:	b1db      	cbz	r3, 801e420 <_strtod_l+0x980>
 801e3e8:	ea13 0f0b 	tst.w	r3, fp
 801e3ec:	d0ed      	beq.n	801e3ca <_strtod_l+0x92a>
 801e3ee:	9a04      	ldr	r2, [sp, #16]
 801e3f0:	4640      	mov	r0, r8
 801e3f2:	4649      	mov	r1, r9
 801e3f4:	f1ba 0f00 	cmp.w	sl, #0
 801e3f8:	d016      	beq.n	801e428 <_strtod_l+0x988>
 801e3fa:	f7ff fb34 	bl	801da66 <sulp>
 801e3fe:	ed9d 7b08 	vldr	d7, [sp, #32]
 801e402:	ee37 7b00 	vadd.f64	d7, d7, d0
 801e406:	ec59 8b17 	vmov	r8, r9, d7
 801e40a:	e7de      	b.n	801e3ca <_strtod_l+0x92a>
 801e40c:	4013      	ands	r3, r2
 801e40e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801e412:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801e416:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801e41a:	f04f 38ff 	mov.w	r8, #4294967295
 801e41e:	e7d4      	b.n	801e3ca <_strtod_l+0x92a>
 801e420:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e422:	ea13 0f08 	tst.w	r3, r8
 801e426:	e7e1      	b.n	801e3ec <_strtod_l+0x94c>
 801e428:	f7ff fb1d 	bl	801da66 <sulp>
 801e42c:	ed9d 7b08 	vldr	d7, [sp, #32]
 801e430:	ee37 7b40 	vsub.f64	d7, d7, d0
 801e434:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e438:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e440:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 801e444:	d1c1      	bne.n	801e3ca <_strtod_l+0x92a>
 801e446:	e5ec      	b.n	801e022 <_strtod_l+0x582>
 801e448:	4631      	mov	r1, r6
 801e44a:	4628      	mov	r0, r5
 801e44c:	f002 fa6a 	bl	8020924 <__ratio>
 801e450:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801e454:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801e458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e45c:	d867      	bhi.n	801e52e <_strtod_l+0xa8e>
 801e45e:	f1ba 0f00 	cmp.w	sl, #0
 801e462:	d044      	beq.n	801e4ee <_strtod_l+0xa4e>
 801e464:	4b75      	ldr	r3, [pc, #468]	; (801e63c <_strtod_l+0xb9c>)
 801e466:	2200      	movs	r2, #0
 801e468:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 801e46c:	4971      	ldr	r1, [pc, #452]	; (801e634 <_strtod_l+0xb94>)
 801e46e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 801e648 <_strtod_l+0xba8>
 801e472:	ea0b 0001 	and.w	r0, fp, r1
 801e476:	4560      	cmp	r0, ip
 801e478:	900d      	str	r0, [sp, #52]	; 0x34
 801e47a:	f040 808b 	bne.w	801e594 <_strtod_l+0xaf4>
 801e47e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801e482:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801e486:	ec49 8b10 	vmov	d0, r8, r9
 801e48a:	ec43 2b1c 	vmov	d12, r2, r3
 801e48e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801e492:	f002 f96f 	bl	8020774 <__ulp>
 801e496:	ec49 8b1d 	vmov	d13, r8, r9
 801e49a:	eeac db00 	vfma.f64	d13, d12, d0
 801e49e:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 801e4a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e4a4:	4963      	ldr	r1, [pc, #396]	; (801e634 <_strtod_l+0xb94>)
 801e4a6:	4a66      	ldr	r2, [pc, #408]	; (801e640 <_strtod_l+0xba0>)
 801e4a8:	4019      	ands	r1, r3
 801e4aa:	4291      	cmp	r1, r2
 801e4ac:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 801e4b0:	d947      	bls.n	801e542 <_strtod_l+0xaa2>
 801e4b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e4b4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801e4b8:	4293      	cmp	r3, r2
 801e4ba:	d103      	bne.n	801e4c4 <_strtod_l+0xa24>
 801e4bc:	9b08      	ldr	r3, [sp, #32]
 801e4be:	3301      	adds	r3, #1
 801e4c0:	f43f ad3a 	beq.w	801df38 <_strtod_l+0x498>
 801e4c4:	f8df 9170 	ldr.w	r9, [pc, #368]	; 801e638 <_strtod_l+0xb98>
 801e4c8:	f04f 38ff 	mov.w	r8, #4294967295
 801e4cc:	9918      	ldr	r1, [sp, #96]	; 0x60
 801e4ce:	4620      	mov	r0, r4
 801e4d0:	f001 fe24 	bl	802011c <_Bfree>
 801e4d4:	4639      	mov	r1, r7
 801e4d6:	4620      	mov	r0, r4
 801e4d8:	f001 fe20 	bl	802011c <_Bfree>
 801e4dc:	4631      	mov	r1, r6
 801e4de:	4620      	mov	r0, r4
 801e4e0:	f001 fe1c 	bl	802011c <_Bfree>
 801e4e4:	4629      	mov	r1, r5
 801e4e6:	4620      	mov	r0, r4
 801e4e8:	f001 fe18 	bl	802011c <_Bfree>
 801e4ec:	e60f      	b.n	801e10e <_strtod_l+0x66e>
 801e4ee:	f1b8 0f00 	cmp.w	r8, #0
 801e4f2:	d112      	bne.n	801e51a <_strtod_l+0xa7a>
 801e4f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e4f8:	b9b3      	cbnz	r3, 801e528 <_strtod_l+0xa88>
 801e4fa:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801e4fe:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801e502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e506:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801e50a:	d401      	bmi.n	801e510 <_strtod_l+0xa70>
 801e50c:	ee20 8b08 	vmul.f64	d8, d0, d8
 801e510:	eeb1 7b48 	vneg.f64	d7, d8
 801e514:	ec53 2b17 	vmov	r2, r3, d7
 801e518:	e7a8      	b.n	801e46c <_strtod_l+0x9cc>
 801e51a:	f1b8 0f01 	cmp.w	r8, #1
 801e51e:	d103      	bne.n	801e528 <_strtod_l+0xa88>
 801e520:	f1b9 0f00 	cmp.w	r9, #0
 801e524:	f43f ad7d 	beq.w	801e022 <_strtod_l+0x582>
 801e528:	4b46      	ldr	r3, [pc, #280]	; (801e644 <_strtod_l+0xba4>)
 801e52a:	2200      	movs	r2, #0
 801e52c:	e79c      	b.n	801e468 <_strtod_l+0x9c8>
 801e52e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801e532:	ee20 8b08 	vmul.f64	d8, d0, d8
 801e536:	f1ba 0f00 	cmp.w	sl, #0
 801e53a:	d0e9      	beq.n	801e510 <_strtod_l+0xa70>
 801e53c:	ec53 2b18 	vmov	r2, r3, d8
 801e540:	e794      	b.n	801e46c <_strtod_l+0x9cc>
 801e542:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801e546:	9b04      	ldr	r3, [sp, #16]
 801e548:	2b00      	cmp	r3, #0
 801e54a:	d1bf      	bne.n	801e4cc <_strtod_l+0xa2c>
 801e54c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e550:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e552:	0d1b      	lsrs	r3, r3, #20
 801e554:	051b      	lsls	r3, r3, #20
 801e556:	429a      	cmp	r2, r3
 801e558:	d1b8      	bne.n	801e4cc <_strtod_l+0xa2c>
 801e55a:	ec51 0b18 	vmov	r0, r1, d8
 801e55e:	f7e2 f8fb 	bl	8000758 <__aeabi_d2lz>
 801e562:	f7e2 f8b3 	bl	80006cc <__aeabi_l2d>
 801e566:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e56a:	ec41 0b17 	vmov	d7, r0, r1
 801e56e:	ea43 0308 	orr.w	r3, r3, r8
 801e572:	ea53 030a 	orrs.w	r3, r3, sl
 801e576:	ee38 8b47 	vsub.f64	d8, d8, d7
 801e57a:	d03e      	beq.n	801e5fa <_strtod_l+0xb5a>
 801e57c:	eeb4 8bca 	vcmpe.f64	d8, d10
 801e580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e584:	f53f ace2 	bmi.w	801df4c <_strtod_l+0x4ac>
 801e588:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801e58c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e590:	dd9c      	ble.n	801e4cc <_strtod_l+0xa2c>
 801e592:	e4db      	b.n	801df4c <_strtod_l+0x4ac>
 801e594:	9904      	ldr	r1, [sp, #16]
 801e596:	b301      	cbz	r1, 801e5da <_strtod_l+0xb3a>
 801e598:	990d      	ldr	r1, [sp, #52]	; 0x34
 801e59a:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801e59e:	d81c      	bhi.n	801e5da <_strtod_l+0xb3a>
 801e5a0:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801e628 <_strtod_l+0xb88>
 801e5a4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801e5a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e5ac:	d811      	bhi.n	801e5d2 <_strtod_l+0xb32>
 801e5ae:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 801e5b2:	ee18 3a10 	vmov	r3, s16
 801e5b6:	2b01      	cmp	r3, #1
 801e5b8:	bf38      	it	cc
 801e5ba:	2301      	movcc	r3, #1
 801e5bc:	ee08 3a10 	vmov	s16, r3
 801e5c0:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801e5c4:	f1ba 0f00 	cmp.w	sl, #0
 801e5c8:	d114      	bne.n	801e5f4 <_strtod_l+0xb54>
 801e5ca:	eeb1 7b48 	vneg.f64	d7, d8
 801e5ce:	ec53 2b17 	vmov	r2, r3, d7
 801e5d2:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e5d4:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 801e5d8:	1a0b      	subs	r3, r1, r0
 801e5da:	ed9d 0b08 	vldr	d0, [sp, #32]
 801e5de:	ec43 2b1c 	vmov	d12, r2, r3
 801e5e2:	f002 f8c7 	bl	8020774 <__ulp>
 801e5e6:	ed9d 7b08 	vldr	d7, [sp, #32]
 801e5ea:	eeac 7b00 	vfma.f64	d7, d12, d0
 801e5ee:	ec59 8b17 	vmov	r8, r9, d7
 801e5f2:	e7a8      	b.n	801e546 <_strtod_l+0xaa6>
 801e5f4:	ec53 2b18 	vmov	r2, r3, d8
 801e5f8:	e7eb      	b.n	801e5d2 <_strtod_l+0xb32>
 801e5fa:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801e5fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e602:	f57f af63 	bpl.w	801e4cc <_strtod_l+0xa2c>
 801e606:	e4a1      	b.n	801df4c <_strtod_l+0x4ac>
 801e608:	2300      	movs	r3, #0
 801e60a:	930b      	str	r3, [sp, #44]	; 0x2c
 801e60c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e60e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e610:	6013      	str	r3, [r2, #0]
 801e612:	f7ff ba8d 	b.w	801db30 <_strtod_l+0x90>
 801e616:	2a65      	cmp	r2, #101	; 0x65
 801e618:	f43f ab89 	beq.w	801dd2e <_strtod_l+0x28e>
 801e61c:	2a45      	cmp	r2, #69	; 0x45
 801e61e:	f43f ab86 	beq.w	801dd2e <_strtod_l+0x28e>
 801e622:	2101      	movs	r1, #1
 801e624:	f7ff bbbe 	b.w	801dda4 <_strtod_l+0x304>
 801e628:	ffc00000 	.word	0xffc00000
 801e62c:	41dfffff 	.word	0x41dfffff
 801e630:	000fffff 	.word	0x000fffff
 801e634:	7ff00000 	.word	0x7ff00000
 801e638:	7fefffff 	.word	0x7fefffff
 801e63c:	3ff00000 	.word	0x3ff00000
 801e640:	7c9fffff 	.word	0x7c9fffff
 801e644:	bff00000 	.word	0xbff00000
 801e648:	7fe00000 	.word	0x7fe00000

0801e64c <_strtod_r>:
 801e64c:	4b01      	ldr	r3, [pc, #4]	; (801e654 <_strtod_r+0x8>)
 801e64e:	f7ff ba27 	b.w	801daa0 <_strtod_l>
 801e652:	bf00      	nop
 801e654:	2400a1f8 	.word	0x2400a1f8

0801e658 <strtod>:
 801e658:	460a      	mov	r2, r1
 801e65a:	4601      	mov	r1, r0
 801e65c:	4802      	ldr	r0, [pc, #8]	; (801e668 <strtod+0x10>)
 801e65e:	4b03      	ldr	r3, [pc, #12]	; (801e66c <strtod+0x14>)
 801e660:	6800      	ldr	r0, [r0, #0]
 801e662:	f7ff ba1d 	b.w	801daa0 <_strtod_l>
 801e666:	bf00      	nop
 801e668:	2400a190 	.word	0x2400a190
 801e66c:	2400a1f8 	.word	0x2400a1f8

0801e670 <_strtol_l.isra.0>:
 801e670:	2b01      	cmp	r3, #1
 801e672:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e676:	d001      	beq.n	801e67c <_strtol_l.isra.0+0xc>
 801e678:	2b24      	cmp	r3, #36	; 0x24
 801e67a:	d906      	bls.n	801e68a <_strtol_l.isra.0+0x1a>
 801e67c:	f7fe f810 	bl	801c6a0 <__errno>
 801e680:	2316      	movs	r3, #22
 801e682:	6003      	str	r3, [r0, #0]
 801e684:	2000      	movs	r0, #0
 801e686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e68a:	4f3a      	ldr	r7, [pc, #232]	; (801e774 <_strtol_l.isra.0+0x104>)
 801e68c:	468e      	mov	lr, r1
 801e68e:	4676      	mov	r6, lr
 801e690:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801e694:	5de5      	ldrb	r5, [r4, r7]
 801e696:	f015 0508 	ands.w	r5, r5, #8
 801e69a:	d1f8      	bne.n	801e68e <_strtol_l.isra.0+0x1e>
 801e69c:	2c2d      	cmp	r4, #45	; 0x2d
 801e69e:	d134      	bne.n	801e70a <_strtol_l.isra.0+0x9a>
 801e6a0:	f89e 4000 	ldrb.w	r4, [lr]
 801e6a4:	f04f 0801 	mov.w	r8, #1
 801e6a8:	f106 0e02 	add.w	lr, r6, #2
 801e6ac:	2b00      	cmp	r3, #0
 801e6ae:	d05c      	beq.n	801e76a <_strtol_l.isra.0+0xfa>
 801e6b0:	2b10      	cmp	r3, #16
 801e6b2:	d10c      	bne.n	801e6ce <_strtol_l.isra.0+0x5e>
 801e6b4:	2c30      	cmp	r4, #48	; 0x30
 801e6b6:	d10a      	bne.n	801e6ce <_strtol_l.isra.0+0x5e>
 801e6b8:	f89e 4000 	ldrb.w	r4, [lr]
 801e6bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801e6c0:	2c58      	cmp	r4, #88	; 0x58
 801e6c2:	d14d      	bne.n	801e760 <_strtol_l.isra.0+0xf0>
 801e6c4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801e6c8:	2310      	movs	r3, #16
 801e6ca:	f10e 0e02 	add.w	lr, lr, #2
 801e6ce:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801e6d2:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e6d6:	2600      	movs	r6, #0
 801e6d8:	fbbc f9f3 	udiv	r9, ip, r3
 801e6dc:	4635      	mov	r5, r6
 801e6de:	fb03 ca19 	mls	sl, r3, r9, ip
 801e6e2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801e6e6:	2f09      	cmp	r7, #9
 801e6e8:	d818      	bhi.n	801e71c <_strtol_l.isra.0+0xac>
 801e6ea:	463c      	mov	r4, r7
 801e6ec:	42a3      	cmp	r3, r4
 801e6ee:	dd24      	ble.n	801e73a <_strtol_l.isra.0+0xca>
 801e6f0:	2e00      	cmp	r6, #0
 801e6f2:	db1f      	blt.n	801e734 <_strtol_l.isra.0+0xc4>
 801e6f4:	45a9      	cmp	r9, r5
 801e6f6:	d31d      	bcc.n	801e734 <_strtol_l.isra.0+0xc4>
 801e6f8:	d101      	bne.n	801e6fe <_strtol_l.isra.0+0x8e>
 801e6fa:	45a2      	cmp	sl, r4
 801e6fc:	db1a      	blt.n	801e734 <_strtol_l.isra.0+0xc4>
 801e6fe:	fb05 4503 	mla	r5, r5, r3, r4
 801e702:	2601      	movs	r6, #1
 801e704:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801e708:	e7eb      	b.n	801e6e2 <_strtol_l.isra.0+0x72>
 801e70a:	2c2b      	cmp	r4, #43	; 0x2b
 801e70c:	bf08      	it	eq
 801e70e:	f89e 4000 	ldrbeq.w	r4, [lr]
 801e712:	46a8      	mov	r8, r5
 801e714:	bf08      	it	eq
 801e716:	f106 0e02 	addeq.w	lr, r6, #2
 801e71a:	e7c7      	b.n	801e6ac <_strtol_l.isra.0+0x3c>
 801e71c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801e720:	2f19      	cmp	r7, #25
 801e722:	d801      	bhi.n	801e728 <_strtol_l.isra.0+0xb8>
 801e724:	3c37      	subs	r4, #55	; 0x37
 801e726:	e7e1      	b.n	801e6ec <_strtol_l.isra.0+0x7c>
 801e728:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801e72c:	2f19      	cmp	r7, #25
 801e72e:	d804      	bhi.n	801e73a <_strtol_l.isra.0+0xca>
 801e730:	3c57      	subs	r4, #87	; 0x57
 801e732:	e7db      	b.n	801e6ec <_strtol_l.isra.0+0x7c>
 801e734:	f04f 36ff 	mov.w	r6, #4294967295
 801e738:	e7e4      	b.n	801e704 <_strtol_l.isra.0+0x94>
 801e73a:	2e00      	cmp	r6, #0
 801e73c:	da05      	bge.n	801e74a <_strtol_l.isra.0+0xda>
 801e73e:	2322      	movs	r3, #34	; 0x22
 801e740:	6003      	str	r3, [r0, #0]
 801e742:	4665      	mov	r5, ip
 801e744:	b942      	cbnz	r2, 801e758 <_strtol_l.isra.0+0xe8>
 801e746:	4628      	mov	r0, r5
 801e748:	e79d      	b.n	801e686 <_strtol_l.isra.0+0x16>
 801e74a:	f1b8 0f00 	cmp.w	r8, #0
 801e74e:	d000      	beq.n	801e752 <_strtol_l.isra.0+0xe2>
 801e750:	426d      	negs	r5, r5
 801e752:	2a00      	cmp	r2, #0
 801e754:	d0f7      	beq.n	801e746 <_strtol_l.isra.0+0xd6>
 801e756:	b10e      	cbz	r6, 801e75c <_strtol_l.isra.0+0xec>
 801e758:	f10e 31ff 	add.w	r1, lr, #4294967295
 801e75c:	6011      	str	r1, [r2, #0]
 801e75e:	e7f2      	b.n	801e746 <_strtol_l.isra.0+0xd6>
 801e760:	2430      	movs	r4, #48	; 0x30
 801e762:	2b00      	cmp	r3, #0
 801e764:	d1b3      	bne.n	801e6ce <_strtol_l.isra.0+0x5e>
 801e766:	2308      	movs	r3, #8
 801e768:	e7b1      	b.n	801e6ce <_strtol_l.isra.0+0x5e>
 801e76a:	2c30      	cmp	r4, #48	; 0x30
 801e76c:	d0a4      	beq.n	801e6b8 <_strtol_l.isra.0+0x48>
 801e76e:	230a      	movs	r3, #10
 801e770:	e7ad      	b.n	801e6ce <_strtol_l.isra.0+0x5e>
 801e772:	bf00      	nop
 801e774:	0802a72c 	.word	0x0802a72c

0801e778 <_strtol_r>:
 801e778:	f7ff bf7a 	b.w	801e670 <_strtol_l.isra.0>

0801e77c <strtol>:
 801e77c:	4613      	mov	r3, r2
 801e77e:	460a      	mov	r2, r1
 801e780:	4601      	mov	r1, r0
 801e782:	4802      	ldr	r0, [pc, #8]	; (801e78c <strtol+0x10>)
 801e784:	6800      	ldr	r0, [r0, #0]
 801e786:	f7ff bf73 	b.w	801e670 <_strtol_l.isra.0>
 801e78a:	bf00      	nop
 801e78c:	2400a190 	.word	0x2400a190

0801e790 <__swbuf_r>:
 801e790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e792:	460e      	mov	r6, r1
 801e794:	4614      	mov	r4, r2
 801e796:	4605      	mov	r5, r0
 801e798:	b118      	cbz	r0, 801e7a2 <__swbuf_r+0x12>
 801e79a:	6983      	ldr	r3, [r0, #24]
 801e79c:	b90b      	cbnz	r3, 801e7a2 <__swbuf_r+0x12>
 801e79e:	f000 ffe7 	bl	801f770 <__sinit>
 801e7a2:	4b21      	ldr	r3, [pc, #132]	; (801e828 <__swbuf_r+0x98>)
 801e7a4:	429c      	cmp	r4, r3
 801e7a6:	d12b      	bne.n	801e800 <__swbuf_r+0x70>
 801e7a8:	686c      	ldr	r4, [r5, #4]
 801e7aa:	69a3      	ldr	r3, [r4, #24]
 801e7ac:	60a3      	str	r3, [r4, #8]
 801e7ae:	89a3      	ldrh	r3, [r4, #12]
 801e7b0:	071a      	lsls	r2, r3, #28
 801e7b2:	d52f      	bpl.n	801e814 <__swbuf_r+0x84>
 801e7b4:	6923      	ldr	r3, [r4, #16]
 801e7b6:	b36b      	cbz	r3, 801e814 <__swbuf_r+0x84>
 801e7b8:	6923      	ldr	r3, [r4, #16]
 801e7ba:	6820      	ldr	r0, [r4, #0]
 801e7bc:	1ac0      	subs	r0, r0, r3
 801e7be:	6963      	ldr	r3, [r4, #20]
 801e7c0:	b2f6      	uxtb	r6, r6
 801e7c2:	4283      	cmp	r3, r0
 801e7c4:	4637      	mov	r7, r6
 801e7c6:	dc04      	bgt.n	801e7d2 <__swbuf_r+0x42>
 801e7c8:	4621      	mov	r1, r4
 801e7ca:	4628      	mov	r0, r5
 801e7cc:	f000 ff3c 	bl	801f648 <_fflush_r>
 801e7d0:	bb30      	cbnz	r0, 801e820 <__swbuf_r+0x90>
 801e7d2:	68a3      	ldr	r3, [r4, #8]
 801e7d4:	3b01      	subs	r3, #1
 801e7d6:	60a3      	str	r3, [r4, #8]
 801e7d8:	6823      	ldr	r3, [r4, #0]
 801e7da:	1c5a      	adds	r2, r3, #1
 801e7dc:	6022      	str	r2, [r4, #0]
 801e7de:	701e      	strb	r6, [r3, #0]
 801e7e0:	6963      	ldr	r3, [r4, #20]
 801e7e2:	3001      	adds	r0, #1
 801e7e4:	4283      	cmp	r3, r0
 801e7e6:	d004      	beq.n	801e7f2 <__swbuf_r+0x62>
 801e7e8:	89a3      	ldrh	r3, [r4, #12]
 801e7ea:	07db      	lsls	r3, r3, #31
 801e7ec:	d506      	bpl.n	801e7fc <__swbuf_r+0x6c>
 801e7ee:	2e0a      	cmp	r6, #10
 801e7f0:	d104      	bne.n	801e7fc <__swbuf_r+0x6c>
 801e7f2:	4621      	mov	r1, r4
 801e7f4:	4628      	mov	r0, r5
 801e7f6:	f000 ff27 	bl	801f648 <_fflush_r>
 801e7fa:	b988      	cbnz	r0, 801e820 <__swbuf_r+0x90>
 801e7fc:	4638      	mov	r0, r7
 801e7fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e800:	4b0a      	ldr	r3, [pc, #40]	; (801e82c <__swbuf_r+0x9c>)
 801e802:	429c      	cmp	r4, r3
 801e804:	d101      	bne.n	801e80a <__swbuf_r+0x7a>
 801e806:	68ac      	ldr	r4, [r5, #8]
 801e808:	e7cf      	b.n	801e7aa <__swbuf_r+0x1a>
 801e80a:	4b09      	ldr	r3, [pc, #36]	; (801e830 <__swbuf_r+0xa0>)
 801e80c:	429c      	cmp	r4, r3
 801e80e:	bf08      	it	eq
 801e810:	68ec      	ldreq	r4, [r5, #12]
 801e812:	e7ca      	b.n	801e7aa <__swbuf_r+0x1a>
 801e814:	4621      	mov	r1, r4
 801e816:	4628      	mov	r0, r5
 801e818:	f000 f80c 	bl	801e834 <__swsetup_r>
 801e81c:	2800      	cmp	r0, #0
 801e81e:	d0cb      	beq.n	801e7b8 <__swbuf_r+0x28>
 801e820:	f04f 37ff 	mov.w	r7, #4294967295
 801e824:	e7ea      	b.n	801e7fc <__swbuf_r+0x6c>
 801e826:	bf00      	nop
 801e828:	0802a984 	.word	0x0802a984
 801e82c:	0802a9a4 	.word	0x0802a9a4
 801e830:	0802a964 	.word	0x0802a964

0801e834 <__swsetup_r>:
 801e834:	4b32      	ldr	r3, [pc, #200]	; (801e900 <__swsetup_r+0xcc>)
 801e836:	b570      	push	{r4, r5, r6, lr}
 801e838:	681d      	ldr	r5, [r3, #0]
 801e83a:	4606      	mov	r6, r0
 801e83c:	460c      	mov	r4, r1
 801e83e:	b125      	cbz	r5, 801e84a <__swsetup_r+0x16>
 801e840:	69ab      	ldr	r3, [r5, #24]
 801e842:	b913      	cbnz	r3, 801e84a <__swsetup_r+0x16>
 801e844:	4628      	mov	r0, r5
 801e846:	f000 ff93 	bl	801f770 <__sinit>
 801e84a:	4b2e      	ldr	r3, [pc, #184]	; (801e904 <__swsetup_r+0xd0>)
 801e84c:	429c      	cmp	r4, r3
 801e84e:	d10f      	bne.n	801e870 <__swsetup_r+0x3c>
 801e850:	686c      	ldr	r4, [r5, #4]
 801e852:	89a3      	ldrh	r3, [r4, #12]
 801e854:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e858:	0719      	lsls	r1, r3, #28
 801e85a:	d42c      	bmi.n	801e8b6 <__swsetup_r+0x82>
 801e85c:	06dd      	lsls	r5, r3, #27
 801e85e:	d411      	bmi.n	801e884 <__swsetup_r+0x50>
 801e860:	2309      	movs	r3, #9
 801e862:	6033      	str	r3, [r6, #0]
 801e864:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e868:	81a3      	strh	r3, [r4, #12]
 801e86a:	f04f 30ff 	mov.w	r0, #4294967295
 801e86e:	e03e      	b.n	801e8ee <__swsetup_r+0xba>
 801e870:	4b25      	ldr	r3, [pc, #148]	; (801e908 <__swsetup_r+0xd4>)
 801e872:	429c      	cmp	r4, r3
 801e874:	d101      	bne.n	801e87a <__swsetup_r+0x46>
 801e876:	68ac      	ldr	r4, [r5, #8]
 801e878:	e7eb      	b.n	801e852 <__swsetup_r+0x1e>
 801e87a:	4b24      	ldr	r3, [pc, #144]	; (801e90c <__swsetup_r+0xd8>)
 801e87c:	429c      	cmp	r4, r3
 801e87e:	bf08      	it	eq
 801e880:	68ec      	ldreq	r4, [r5, #12]
 801e882:	e7e6      	b.n	801e852 <__swsetup_r+0x1e>
 801e884:	0758      	lsls	r0, r3, #29
 801e886:	d512      	bpl.n	801e8ae <__swsetup_r+0x7a>
 801e888:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e88a:	b141      	cbz	r1, 801e89e <__swsetup_r+0x6a>
 801e88c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e890:	4299      	cmp	r1, r3
 801e892:	d002      	beq.n	801e89a <__swsetup_r+0x66>
 801e894:	4630      	mov	r0, r6
 801e896:	f7fd ff7f 	bl	801c798 <_free_r>
 801e89a:	2300      	movs	r3, #0
 801e89c:	6363      	str	r3, [r4, #52]	; 0x34
 801e89e:	89a3      	ldrh	r3, [r4, #12]
 801e8a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e8a4:	81a3      	strh	r3, [r4, #12]
 801e8a6:	2300      	movs	r3, #0
 801e8a8:	6063      	str	r3, [r4, #4]
 801e8aa:	6923      	ldr	r3, [r4, #16]
 801e8ac:	6023      	str	r3, [r4, #0]
 801e8ae:	89a3      	ldrh	r3, [r4, #12]
 801e8b0:	f043 0308 	orr.w	r3, r3, #8
 801e8b4:	81a3      	strh	r3, [r4, #12]
 801e8b6:	6923      	ldr	r3, [r4, #16]
 801e8b8:	b94b      	cbnz	r3, 801e8ce <__swsetup_r+0x9a>
 801e8ba:	89a3      	ldrh	r3, [r4, #12]
 801e8bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e8c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e8c4:	d003      	beq.n	801e8ce <__swsetup_r+0x9a>
 801e8c6:	4621      	mov	r1, r4
 801e8c8:	4630      	mov	r0, r6
 801e8ca:	f001 fb89 	bl	801ffe0 <__smakebuf_r>
 801e8ce:	89a0      	ldrh	r0, [r4, #12]
 801e8d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e8d4:	f010 0301 	ands.w	r3, r0, #1
 801e8d8:	d00a      	beq.n	801e8f0 <__swsetup_r+0xbc>
 801e8da:	2300      	movs	r3, #0
 801e8dc:	60a3      	str	r3, [r4, #8]
 801e8de:	6963      	ldr	r3, [r4, #20]
 801e8e0:	425b      	negs	r3, r3
 801e8e2:	61a3      	str	r3, [r4, #24]
 801e8e4:	6923      	ldr	r3, [r4, #16]
 801e8e6:	b943      	cbnz	r3, 801e8fa <__swsetup_r+0xc6>
 801e8e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e8ec:	d1ba      	bne.n	801e864 <__swsetup_r+0x30>
 801e8ee:	bd70      	pop	{r4, r5, r6, pc}
 801e8f0:	0781      	lsls	r1, r0, #30
 801e8f2:	bf58      	it	pl
 801e8f4:	6963      	ldrpl	r3, [r4, #20]
 801e8f6:	60a3      	str	r3, [r4, #8]
 801e8f8:	e7f4      	b.n	801e8e4 <__swsetup_r+0xb0>
 801e8fa:	2000      	movs	r0, #0
 801e8fc:	e7f7      	b.n	801e8ee <__swsetup_r+0xba>
 801e8fe:	bf00      	nop
 801e900:	2400a190 	.word	0x2400a190
 801e904:	0802a984 	.word	0x0802a984
 801e908:	0802a9a4 	.word	0x0802a9a4
 801e90c:	0802a964 	.word	0x0802a964

0801e910 <abort>:
 801e910:	b508      	push	{r3, lr}
 801e912:	2006      	movs	r0, #6
 801e914:	f002 fa40 	bl	8020d98 <raise>
 801e918:	2001      	movs	r0, #1
 801e91a:	f7e3 f8cd 	bl	8001ab8 <_exit>

0801e91e <quorem>:
 801e91e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e922:	6903      	ldr	r3, [r0, #16]
 801e924:	690c      	ldr	r4, [r1, #16]
 801e926:	42a3      	cmp	r3, r4
 801e928:	4607      	mov	r7, r0
 801e92a:	f2c0 8081 	blt.w	801ea30 <quorem+0x112>
 801e92e:	3c01      	subs	r4, #1
 801e930:	f101 0814 	add.w	r8, r1, #20
 801e934:	f100 0514 	add.w	r5, r0, #20
 801e938:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e93c:	9301      	str	r3, [sp, #4]
 801e93e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801e942:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e946:	3301      	adds	r3, #1
 801e948:	429a      	cmp	r2, r3
 801e94a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801e94e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801e952:	fbb2 f6f3 	udiv	r6, r2, r3
 801e956:	d331      	bcc.n	801e9bc <quorem+0x9e>
 801e958:	f04f 0e00 	mov.w	lr, #0
 801e95c:	4640      	mov	r0, r8
 801e95e:	46ac      	mov	ip, r5
 801e960:	46f2      	mov	sl, lr
 801e962:	f850 2b04 	ldr.w	r2, [r0], #4
 801e966:	b293      	uxth	r3, r2
 801e968:	fb06 e303 	mla	r3, r6, r3, lr
 801e96c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801e970:	b29b      	uxth	r3, r3
 801e972:	ebaa 0303 	sub.w	r3, sl, r3
 801e976:	0c12      	lsrs	r2, r2, #16
 801e978:	f8dc a000 	ldr.w	sl, [ip]
 801e97c:	fb06 e202 	mla	r2, r6, r2, lr
 801e980:	fa13 f38a 	uxtah	r3, r3, sl
 801e984:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801e988:	fa1f fa82 	uxth.w	sl, r2
 801e98c:	f8dc 2000 	ldr.w	r2, [ip]
 801e990:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801e994:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801e998:	b29b      	uxth	r3, r3
 801e99a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e99e:	4581      	cmp	r9, r0
 801e9a0:	f84c 3b04 	str.w	r3, [ip], #4
 801e9a4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801e9a8:	d2db      	bcs.n	801e962 <quorem+0x44>
 801e9aa:	f855 300b 	ldr.w	r3, [r5, fp]
 801e9ae:	b92b      	cbnz	r3, 801e9bc <quorem+0x9e>
 801e9b0:	9b01      	ldr	r3, [sp, #4]
 801e9b2:	3b04      	subs	r3, #4
 801e9b4:	429d      	cmp	r5, r3
 801e9b6:	461a      	mov	r2, r3
 801e9b8:	d32e      	bcc.n	801ea18 <quorem+0xfa>
 801e9ba:	613c      	str	r4, [r7, #16]
 801e9bc:	4638      	mov	r0, r7
 801e9be:	f001 fe35 	bl	802062c <__mcmp>
 801e9c2:	2800      	cmp	r0, #0
 801e9c4:	db24      	blt.n	801ea10 <quorem+0xf2>
 801e9c6:	3601      	adds	r6, #1
 801e9c8:	4628      	mov	r0, r5
 801e9ca:	f04f 0c00 	mov.w	ip, #0
 801e9ce:	f858 2b04 	ldr.w	r2, [r8], #4
 801e9d2:	f8d0 e000 	ldr.w	lr, [r0]
 801e9d6:	b293      	uxth	r3, r2
 801e9d8:	ebac 0303 	sub.w	r3, ip, r3
 801e9dc:	0c12      	lsrs	r2, r2, #16
 801e9de:	fa13 f38e 	uxtah	r3, r3, lr
 801e9e2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801e9e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801e9ea:	b29b      	uxth	r3, r3
 801e9ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e9f0:	45c1      	cmp	r9, r8
 801e9f2:	f840 3b04 	str.w	r3, [r0], #4
 801e9f6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801e9fa:	d2e8      	bcs.n	801e9ce <quorem+0xb0>
 801e9fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ea00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ea04:	b922      	cbnz	r2, 801ea10 <quorem+0xf2>
 801ea06:	3b04      	subs	r3, #4
 801ea08:	429d      	cmp	r5, r3
 801ea0a:	461a      	mov	r2, r3
 801ea0c:	d30a      	bcc.n	801ea24 <quorem+0x106>
 801ea0e:	613c      	str	r4, [r7, #16]
 801ea10:	4630      	mov	r0, r6
 801ea12:	b003      	add	sp, #12
 801ea14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea18:	6812      	ldr	r2, [r2, #0]
 801ea1a:	3b04      	subs	r3, #4
 801ea1c:	2a00      	cmp	r2, #0
 801ea1e:	d1cc      	bne.n	801e9ba <quorem+0x9c>
 801ea20:	3c01      	subs	r4, #1
 801ea22:	e7c7      	b.n	801e9b4 <quorem+0x96>
 801ea24:	6812      	ldr	r2, [r2, #0]
 801ea26:	3b04      	subs	r3, #4
 801ea28:	2a00      	cmp	r2, #0
 801ea2a:	d1f0      	bne.n	801ea0e <quorem+0xf0>
 801ea2c:	3c01      	subs	r4, #1
 801ea2e:	e7eb      	b.n	801ea08 <quorem+0xea>
 801ea30:	2000      	movs	r0, #0
 801ea32:	e7ee      	b.n	801ea12 <quorem+0xf4>
 801ea34:	0000      	movs	r0, r0
	...

0801ea38 <_dtoa_r>:
 801ea38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea3c:	ec59 8b10 	vmov	r8, r9, d0
 801ea40:	b095      	sub	sp, #84	; 0x54
 801ea42:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801ea44:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801ea46:	9107      	str	r1, [sp, #28]
 801ea48:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801ea4c:	4606      	mov	r6, r0
 801ea4e:	9209      	str	r2, [sp, #36]	; 0x24
 801ea50:	9310      	str	r3, [sp, #64]	; 0x40
 801ea52:	b975      	cbnz	r5, 801ea72 <_dtoa_r+0x3a>
 801ea54:	2010      	movs	r0, #16
 801ea56:	f7fd fe5f 	bl	801c718 <malloc>
 801ea5a:	4602      	mov	r2, r0
 801ea5c:	6270      	str	r0, [r6, #36]	; 0x24
 801ea5e:	b920      	cbnz	r0, 801ea6a <_dtoa_r+0x32>
 801ea60:	4bab      	ldr	r3, [pc, #684]	; (801ed10 <_dtoa_r+0x2d8>)
 801ea62:	21ea      	movs	r1, #234	; 0xea
 801ea64:	48ab      	ldr	r0, [pc, #684]	; (801ed14 <_dtoa_r+0x2dc>)
 801ea66:	f7fd fdf5 	bl	801c654 <__assert_func>
 801ea6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801ea6e:	6005      	str	r5, [r0, #0]
 801ea70:	60c5      	str	r5, [r0, #12]
 801ea72:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801ea74:	6819      	ldr	r1, [r3, #0]
 801ea76:	b151      	cbz	r1, 801ea8e <_dtoa_r+0x56>
 801ea78:	685a      	ldr	r2, [r3, #4]
 801ea7a:	604a      	str	r2, [r1, #4]
 801ea7c:	2301      	movs	r3, #1
 801ea7e:	4093      	lsls	r3, r2
 801ea80:	608b      	str	r3, [r1, #8]
 801ea82:	4630      	mov	r0, r6
 801ea84:	f001 fb4a 	bl	802011c <_Bfree>
 801ea88:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801ea8a:	2200      	movs	r2, #0
 801ea8c:	601a      	str	r2, [r3, #0]
 801ea8e:	f1b9 0300 	subs.w	r3, r9, #0
 801ea92:	bfbb      	ittet	lt
 801ea94:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801ea98:	9303      	strlt	r3, [sp, #12]
 801ea9a:	2300      	movge	r3, #0
 801ea9c:	2201      	movlt	r2, #1
 801ea9e:	bfac      	ite	ge
 801eaa0:	6023      	strge	r3, [r4, #0]
 801eaa2:	6022      	strlt	r2, [r4, #0]
 801eaa4:	4b9c      	ldr	r3, [pc, #624]	; (801ed18 <_dtoa_r+0x2e0>)
 801eaa6:	9c03      	ldr	r4, [sp, #12]
 801eaa8:	43a3      	bics	r3, r4
 801eaaa:	d11a      	bne.n	801eae2 <_dtoa_r+0xaa>
 801eaac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801eaae:	f242 730f 	movw	r3, #9999	; 0x270f
 801eab2:	6013      	str	r3, [r2, #0]
 801eab4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801eab8:	ea53 0308 	orrs.w	r3, r3, r8
 801eabc:	f000 8512 	beq.w	801f4e4 <_dtoa_r+0xaac>
 801eac0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801eac2:	b953      	cbnz	r3, 801eada <_dtoa_r+0xa2>
 801eac4:	4b95      	ldr	r3, [pc, #596]	; (801ed1c <_dtoa_r+0x2e4>)
 801eac6:	e01f      	b.n	801eb08 <_dtoa_r+0xd0>
 801eac8:	4b95      	ldr	r3, [pc, #596]	; (801ed20 <_dtoa_r+0x2e8>)
 801eaca:	9300      	str	r3, [sp, #0]
 801eacc:	3308      	adds	r3, #8
 801eace:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801ead0:	6013      	str	r3, [r2, #0]
 801ead2:	9800      	ldr	r0, [sp, #0]
 801ead4:	b015      	add	sp, #84	; 0x54
 801ead6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eada:	4b90      	ldr	r3, [pc, #576]	; (801ed1c <_dtoa_r+0x2e4>)
 801eadc:	9300      	str	r3, [sp, #0]
 801eade:	3303      	adds	r3, #3
 801eae0:	e7f5      	b.n	801eace <_dtoa_r+0x96>
 801eae2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801eae6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801eaea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eaee:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801eaf2:	d10b      	bne.n	801eb0c <_dtoa_r+0xd4>
 801eaf4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801eaf6:	2301      	movs	r3, #1
 801eaf8:	6013      	str	r3, [r2, #0]
 801eafa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801eafc:	2b00      	cmp	r3, #0
 801eafe:	f000 84ee 	beq.w	801f4de <_dtoa_r+0xaa6>
 801eb02:	4888      	ldr	r0, [pc, #544]	; (801ed24 <_dtoa_r+0x2ec>)
 801eb04:	6018      	str	r0, [r3, #0]
 801eb06:	1e43      	subs	r3, r0, #1
 801eb08:	9300      	str	r3, [sp, #0]
 801eb0a:	e7e2      	b.n	801ead2 <_dtoa_r+0x9a>
 801eb0c:	a913      	add	r1, sp, #76	; 0x4c
 801eb0e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801eb12:	aa12      	add	r2, sp, #72	; 0x48
 801eb14:	4630      	mov	r0, r6
 801eb16:	f001 fea9 	bl	802086c <__d2b>
 801eb1a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801eb1e:	4605      	mov	r5, r0
 801eb20:	9812      	ldr	r0, [sp, #72]	; 0x48
 801eb22:	2900      	cmp	r1, #0
 801eb24:	d047      	beq.n	801ebb6 <_dtoa_r+0x17e>
 801eb26:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801eb28:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801eb2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801eb30:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801eb34:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801eb38:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801eb3c:	2400      	movs	r4, #0
 801eb3e:	ec43 2b16 	vmov	d6, r2, r3
 801eb42:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801eb46:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 801ecf8 <_dtoa_r+0x2c0>
 801eb4a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801eb4e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 801ed00 <_dtoa_r+0x2c8>
 801eb52:	eea7 6b05 	vfma.f64	d6, d7, d5
 801eb56:	eeb0 7b46 	vmov.f64	d7, d6
 801eb5a:	ee06 1a90 	vmov	s13, r1
 801eb5e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801eb62:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801ed08 <_dtoa_r+0x2d0>
 801eb66:	eea5 7b06 	vfma.f64	d7, d5, d6
 801eb6a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801eb6e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801eb72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb76:	ee16 ba90 	vmov	fp, s13
 801eb7a:	9411      	str	r4, [sp, #68]	; 0x44
 801eb7c:	d508      	bpl.n	801eb90 <_dtoa_r+0x158>
 801eb7e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801eb82:	eeb4 6b47 	vcmp.f64	d6, d7
 801eb86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb8a:	bf18      	it	ne
 801eb8c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801eb90:	f1bb 0f16 	cmp.w	fp, #22
 801eb94:	d832      	bhi.n	801ebfc <_dtoa_r+0x1c4>
 801eb96:	4b64      	ldr	r3, [pc, #400]	; (801ed28 <_dtoa_r+0x2f0>)
 801eb98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801eb9c:	ed93 7b00 	vldr	d7, [r3]
 801eba0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801eba4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801eba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ebac:	d501      	bpl.n	801ebb2 <_dtoa_r+0x17a>
 801ebae:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ebb2:	2300      	movs	r3, #0
 801ebb4:	e023      	b.n	801ebfe <_dtoa_r+0x1c6>
 801ebb6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801ebb8:	4401      	add	r1, r0
 801ebba:	f201 4332 	addw	r3, r1, #1074	; 0x432
 801ebbe:	2b20      	cmp	r3, #32
 801ebc0:	bfc3      	ittte	gt
 801ebc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801ebc6:	fa04 f303 	lslgt.w	r3, r4, r3
 801ebca:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 801ebce:	f1c3 0320 	rsble	r3, r3, #32
 801ebd2:	bfc6      	itte	gt
 801ebd4:	fa28 f804 	lsrgt.w	r8, r8, r4
 801ebd8:	ea43 0308 	orrgt.w	r3, r3, r8
 801ebdc:	fa08 f303 	lslle.w	r3, r8, r3
 801ebe0:	ee07 3a90 	vmov	s15, r3
 801ebe4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801ebe8:	3901      	subs	r1, #1
 801ebea:	ed8d 7b00 	vstr	d7, [sp]
 801ebee:	9c01      	ldr	r4, [sp, #4]
 801ebf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ebf4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 801ebf8:	2401      	movs	r4, #1
 801ebfa:	e7a0      	b.n	801eb3e <_dtoa_r+0x106>
 801ebfc:	2301      	movs	r3, #1
 801ebfe:	930f      	str	r3, [sp, #60]	; 0x3c
 801ec00:	1a43      	subs	r3, r0, r1
 801ec02:	1e5a      	subs	r2, r3, #1
 801ec04:	bf45      	ittet	mi
 801ec06:	f1c3 0301 	rsbmi	r3, r3, #1
 801ec0a:	9305      	strmi	r3, [sp, #20]
 801ec0c:	2300      	movpl	r3, #0
 801ec0e:	2300      	movmi	r3, #0
 801ec10:	9206      	str	r2, [sp, #24]
 801ec12:	bf54      	ite	pl
 801ec14:	9305      	strpl	r3, [sp, #20]
 801ec16:	9306      	strmi	r3, [sp, #24]
 801ec18:	f1bb 0f00 	cmp.w	fp, #0
 801ec1c:	db18      	blt.n	801ec50 <_dtoa_r+0x218>
 801ec1e:	9b06      	ldr	r3, [sp, #24]
 801ec20:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801ec24:	445b      	add	r3, fp
 801ec26:	9306      	str	r3, [sp, #24]
 801ec28:	2300      	movs	r3, #0
 801ec2a:	9a07      	ldr	r2, [sp, #28]
 801ec2c:	2a09      	cmp	r2, #9
 801ec2e:	d849      	bhi.n	801ecc4 <_dtoa_r+0x28c>
 801ec30:	2a05      	cmp	r2, #5
 801ec32:	bfc4      	itt	gt
 801ec34:	3a04      	subgt	r2, #4
 801ec36:	9207      	strgt	r2, [sp, #28]
 801ec38:	9a07      	ldr	r2, [sp, #28]
 801ec3a:	f1a2 0202 	sub.w	r2, r2, #2
 801ec3e:	bfcc      	ite	gt
 801ec40:	2400      	movgt	r4, #0
 801ec42:	2401      	movle	r4, #1
 801ec44:	2a03      	cmp	r2, #3
 801ec46:	d848      	bhi.n	801ecda <_dtoa_r+0x2a2>
 801ec48:	e8df f002 	tbb	[pc, r2]
 801ec4c:	3a2c2e0b 	.word	0x3a2c2e0b
 801ec50:	9b05      	ldr	r3, [sp, #20]
 801ec52:	2200      	movs	r2, #0
 801ec54:	eba3 030b 	sub.w	r3, r3, fp
 801ec58:	9305      	str	r3, [sp, #20]
 801ec5a:	920e      	str	r2, [sp, #56]	; 0x38
 801ec5c:	f1cb 0300 	rsb	r3, fp, #0
 801ec60:	e7e3      	b.n	801ec2a <_dtoa_r+0x1f2>
 801ec62:	2200      	movs	r2, #0
 801ec64:	9208      	str	r2, [sp, #32]
 801ec66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ec68:	2a00      	cmp	r2, #0
 801ec6a:	dc39      	bgt.n	801ece0 <_dtoa_r+0x2a8>
 801ec6c:	f04f 0a01 	mov.w	sl, #1
 801ec70:	46d1      	mov	r9, sl
 801ec72:	4652      	mov	r2, sl
 801ec74:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801ec78:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801ec7a:	2100      	movs	r1, #0
 801ec7c:	6079      	str	r1, [r7, #4]
 801ec7e:	2004      	movs	r0, #4
 801ec80:	f100 0c14 	add.w	ip, r0, #20
 801ec84:	4594      	cmp	ip, r2
 801ec86:	6879      	ldr	r1, [r7, #4]
 801ec88:	d92f      	bls.n	801ecea <_dtoa_r+0x2b2>
 801ec8a:	4630      	mov	r0, r6
 801ec8c:	930c      	str	r3, [sp, #48]	; 0x30
 801ec8e:	f001 fa05 	bl	802009c <_Balloc>
 801ec92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ec94:	9000      	str	r0, [sp, #0]
 801ec96:	4602      	mov	r2, r0
 801ec98:	2800      	cmp	r0, #0
 801ec9a:	d149      	bne.n	801ed30 <_dtoa_r+0x2f8>
 801ec9c:	4b23      	ldr	r3, [pc, #140]	; (801ed2c <_dtoa_r+0x2f4>)
 801ec9e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801eca2:	e6df      	b.n	801ea64 <_dtoa_r+0x2c>
 801eca4:	2201      	movs	r2, #1
 801eca6:	e7dd      	b.n	801ec64 <_dtoa_r+0x22c>
 801eca8:	2200      	movs	r2, #0
 801ecaa:	9208      	str	r2, [sp, #32]
 801ecac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ecae:	eb0b 0a02 	add.w	sl, fp, r2
 801ecb2:	f10a 0901 	add.w	r9, sl, #1
 801ecb6:	464a      	mov	r2, r9
 801ecb8:	2a01      	cmp	r2, #1
 801ecba:	bfb8      	it	lt
 801ecbc:	2201      	movlt	r2, #1
 801ecbe:	e7db      	b.n	801ec78 <_dtoa_r+0x240>
 801ecc0:	2201      	movs	r2, #1
 801ecc2:	e7f2      	b.n	801ecaa <_dtoa_r+0x272>
 801ecc4:	2401      	movs	r4, #1
 801ecc6:	2200      	movs	r2, #0
 801ecc8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801eccc:	f04f 3aff 	mov.w	sl, #4294967295
 801ecd0:	2100      	movs	r1, #0
 801ecd2:	46d1      	mov	r9, sl
 801ecd4:	2212      	movs	r2, #18
 801ecd6:	9109      	str	r1, [sp, #36]	; 0x24
 801ecd8:	e7ce      	b.n	801ec78 <_dtoa_r+0x240>
 801ecda:	2201      	movs	r2, #1
 801ecdc:	9208      	str	r2, [sp, #32]
 801ecde:	e7f5      	b.n	801eccc <_dtoa_r+0x294>
 801ece0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801ece4:	46d1      	mov	r9, sl
 801ece6:	4652      	mov	r2, sl
 801ece8:	e7c6      	b.n	801ec78 <_dtoa_r+0x240>
 801ecea:	3101      	adds	r1, #1
 801ecec:	6079      	str	r1, [r7, #4]
 801ecee:	0040      	lsls	r0, r0, #1
 801ecf0:	e7c6      	b.n	801ec80 <_dtoa_r+0x248>
 801ecf2:	bf00      	nop
 801ecf4:	f3af 8000 	nop.w
 801ecf8:	636f4361 	.word	0x636f4361
 801ecfc:	3fd287a7 	.word	0x3fd287a7
 801ed00:	8b60c8b3 	.word	0x8b60c8b3
 801ed04:	3fc68a28 	.word	0x3fc68a28
 801ed08:	509f79fb 	.word	0x509f79fb
 801ed0c:	3fd34413 	.word	0x3fd34413
 801ed10:	0802a8dd 	.word	0x0802a8dd
 801ed14:	0802a8f4 	.word	0x0802a8f4
 801ed18:	7ff00000 	.word	0x7ff00000
 801ed1c:	0802a8d9 	.word	0x0802a8d9
 801ed20:	0802a8d0 	.word	0x0802a8d0
 801ed24:	0802a852 	.word	0x0802a852
 801ed28:	0802aad0 	.word	0x0802aad0
 801ed2c:	0802a953 	.word	0x0802a953
 801ed30:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801ed32:	9900      	ldr	r1, [sp, #0]
 801ed34:	6011      	str	r1, [r2, #0]
 801ed36:	f1b9 0f0e 	cmp.w	r9, #14
 801ed3a:	d872      	bhi.n	801ee22 <_dtoa_r+0x3ea>
 801ed3c:	2c00      	cmp	r4, #0
 801ed3e:	d070      	beq.n	801ee22 <_dtoa_r+0x3ea>
 801ed40:	f1bb 0f00 	cmp.w	fp, #0
 801ed44:	f340 80a6 	ble.w	801ee94 <_dtoa_r+0x45c>
 801ed48:	49ca      	ldr	r1, [pc, #808]	; (801f074 <_dtoa_r+0x63c>)
 801ed4a:	f00b 020f 	and.w	r2, fp, #15
 801ed4e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801ed52:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801ed56:	ed92 7b00 	vldr	d7, [r2]
 801ed5a:	ea4f 112b 	mov.w	r1, fp, asr #4
 801ed5e:	f000 808d 	beq.w	801ee7c <_dtoa_r+0x444>
 801ed62:	4ac5      	ldr	r2, [pc, #788]	; (801f078 <_dtoa_r+0x640>)
 801ed64:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 801ed68:	ed92 6b08 	vldr	d6, [r2, #32]
 801ed6c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 801ed70:	ed8d 6b02 	vstr	d6, [sp, #8]
 801ed74:	f001 010f 	and.w	r1, r1, #15
 801ed78:	2203      	movs	r2, #3
 801ed7a:	48bf      	ldr	r0, [pc, #764]	; (801f078 <_dtoa_r+0x640>)
 801ed7c:	2900      	cmp	r1, #0
 801ed7e:	d17f      	bne.n	801ee80 <_dtoa_r+0x448>
 801ed80:	ed9d 6b02 	vldr	d6, [sp, #8]
 801ed84:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801ed88:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ed8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801ed8e:	2900      	cmp	r1, #0
 801ed90:	f000 80b2 	beq.w	801eef8 <_dtoa_r+0x4c0>
 801ed94:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801ed98:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ed9c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801eda0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eda4:	f140 80a8 	bpl.w	801eef8 <_dtoa_r+0x4c0>
 801eda8:	f1b9 0f00 	cmp.w	r9, #0
 801edac:	f000 80a4 	beq.w	801eef8 <_dtoa_r+0x4c0>
 801edb0:	f1ba 0f00 	cmp.w	sl, #0
 801edb4:	dd31      	ble.n	801ee1a <_dtoa_r+0x3e2>
 801edb6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801edba:	ee27 7b06 	vmul.f64	d7, d7, d6
 801edbe:	ed8d 7b02 	vstr	d7, [sp, #8]
 801edc2:	f10b 37ff 	add.w	r7, fp, #4294967295
 801edc6:	3201      	adds	r2, #1
 801edc8:	4650      	mov	r0, sl
 801edca:	ed9d 6b02 	vldr	d6, [sp, #8]
 801edce:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801edd2:	ee07 2a90 	vmov	s15, r2
 801edd6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801edda:	eea7 5b06 	vfma.f64	d5, d7, d6
 801edde:	ed8d 5b02 	vstr	d5, [sp, #8]
 801ede2:	9c03      	ldr	r4, [sp, #12]
 801ede4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801ede8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801edec:	2800      	cmp	r0, #0
 801edee:	f040 8086 	bne.w	801eefe <_dtoa_r+0x4c6>
 801edf2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801edf6:	ee36 6b47 	vsub.f64	d6, d6, d7
 801edfa:	ec42 1b17 	vmov	d7, r1, r2
 801edfe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ee02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee06:	f300 8272 	bgt.w	801f2ee <_dtoa_r+0x8b6>
 801ee0a:	eeb1 7b47 	vneg.f64	d7, d7
 801ee0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ee12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee16:	f100 8267 	bmi.w	801f2e8 <_dtoa_r+0x8b0>
 801ee1a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801ee1e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801ee22:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ee24:	2a00      	cmp	r2, #0
 801ee26:	f2c0 8129 	blt.w	801f07c <_dtoa_r+0x644>
 801ee2a:	f1bb 0f0e 	cmp.w	fp, #14
 801ee2e:	f300 8125 	bgt.w	801f07c <_dtoa_r+0x644>
 801ee32:	4b90      	ldr	r3, [pc, #576]	; (801f074 <_dtoa_r+0x63c>)
 801ee34:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801ee38:	ed93 6b00 	vldr	d6, [r3]
 801ee3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee3e:	2b00      	cmp	r3, #0
 801ee40:	f280 80c3 	bge.w	801efca <_dtoa_r+0x592>
 801ee44:	f1b9 0f00 	cmp.w	r9, #0
 801ee48:	f300 80bf 	bgt.w	801efca <_dtoa_r+0x592>
 801ee4c:	f040 824c 	bne.w	801f2e8 <_dtoa_r+0x8b0>
 801ee50:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801ee54:	ee26 6b07 	vmul.f64	d6, d6, d7
 801ee58:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ee5c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ee60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee64:	464c      	mov	r4, r9
 801ee66:	464f      	mov	r7, r9
 801ee68:	f280 8222 	bge.w	801f2b0 <_dtoa_r+0x878>
 801ee6c:	f8dd 8000 	ldr.w	r8, [sp]
 801ee70:	2331      	movs	r3, #49	; 0x31
 801ee72:	f808 3b01 	strb.w	r3, [r8], #1
 801ee76:	f10b 0b01 	add.w	fp, fp, #1
 801ee7a:	e21e      	b.n	801f2ba <_dtoa_r+0x882>
 801ee7c:	2202      	movs	r2, #2
 801ee7e:	e77c      	b.n	801ed7a <_dtoa_r+0x342>
 801ee80:	07cc      	lsls	r4, r1, #31
 801ee82:	d504      	bpl.n	801ee8e <_dtoa_r+0x456>
 801ee84:	ed90 6b00 	vldr	d6, [r0]
 801ee88:	3201      	adds	r2, #1
 801ee8a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ee8e:	1049      	asrs	r1, r1, #1
 801ee90:	3008      	adds	r0, #8
 801ee92:	e773      	b.n	801ed7c <_dtoa_r+0x344>
 801ee94:	d02e      	beq.n	801eef4 <_dtoa_r+0x4bc>
 801ee96:	f1cb 0100 	rsb	r1, fp, #0
 801ee9a:	4a76      	ldr	r2, [pc, #472]	; (801f074 <_dtoa_r+0x63c>)
 801ee9c:	f001 000f 	and.w	r0, r1, #15
 801eea0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801eea4:	ed92 7b00 	vldr	d7, [r2]
 801eea8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801eeac:	ee26 7b07 	vmul.f64	d7, d6, d7
 801eeb0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801eeb4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 801eeb8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801eebc:	486e      	ldr	r0, [pc, #440]	; (801f078 <_dtoa_r+0x640>)
 801eebe:	1109      	asrs	r1, r1, #4
 801eec0:	2400      	movs	r4, #0
 801eec2:	2202      	movs	r2, #2
 801eec4:	b939      	cbnz	r1, 801eed6 <_dtoa_r+0x49e>
 801eec6:	2c00      	cmp	r4, #0
 801eec8:	f43f af60 	beq.w	801ed8c <_dtoa_r+0x354>
 801eecc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801eed0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801eed4:	e75a      	b.n	801ed8c <_dtoa_r+0x354>
 801eed6:	07cf      	lsls	r7, r1, #31
 801eed8:	d509      	bpl.n	801eeee <_dtoa_r+0x4b6>
 801eeda:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801eede:	ed90 7b00 	vldr	d7, [r0]
 801eee2:	ee26 7b07 	vmul.f64	d7, d6, d7
 801eee6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801eeea:	3201      	adds	r2, #1
 801eeec:	2401      	movs	r4, #1
 801eeee:	1049      	asrs	r1, r1, #1
 801eef0:	3008      	adds	r0, #8
 801eef2:	e7e7      	b.n	801eec4 <_dtoa_r+0x48c>
 801eef4:	2202      	movs	r2, #2
 801eef6:	e749      	b.n	801ed8c <_dtoa_r+0x354>
 801eef8:	465f      	mov	r7, fp
 801eefa:	4648      	mov	r0, r9
 801eefc:	e765      	b.n	801edca <_dtoa_r+0x392>
 801eefe:	ec42 1b17 	vmov	d7, r1, r2
 801ef02:	4a5c      	ldr	r2, [pc, #368]	; (801f074 <_dtoa_r+0x63c>)
 801ef04:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801ef08:	ed12 4b02 	vldr	d4, [r2, #-8]
 801ef0c:	9a00      	ldr	r2, [sp, #0]
 801ef0e:	1814      	adds	r4, r2, r0
 801ef10:	9a08      	ldr	r2, [sp, #32]
 801ef12:	b352      	cbz	r2, 801ef6a <_dtoa_r+0x532>
 801ef14:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801ef18:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801ef1c:	f8dd 8000 	ldr.w	r8, [sp]
 801ef20:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801ef24:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801ef28:	ee35 7b47 	vsub.f64	d7, d5, d7
 801ef2c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801ef30:	ee14 2a90 	vmov	r2, s9
 801ef34:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801ef38:	3230      	adds	r2, #48	; 0x30
 801ef3a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801ef3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ef42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef46:	f808 2b01 	strb.w	r2, [r8], #1
 801ef4a:	d439      	bmi.n	801efc0 <_dtoa_r+0x588>
 801ef4c:	ee32 5b46 	vsub.f64	d5, d2, d6
 801ef50:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801ef54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef58:	d472      	bmi.n	801f040 <_dtoa_r+0x608>
 801ef5a:	45a0      	cmp	r8, r4
 801ef5c:	f43f af5d 	beq.w	801ee1a <_dtoa_r+0x3e2>
 801ef60:	ee27 7b03 	vmul.f64	d7, d7, d3
 801ef64:	ee26 6b03 	vmul.f64	d6, d6, d3
 801ef68:	e7e0      	b.n	801ef2c <_dtoa_r+0x4f4>
 801ef6a:	f8dd 8000 	ldr.w	r8, [sp]
 801ef6e:	ee27 7b04 	vmul.f64	d7, d7, d4
 801ef72:	4621      	mov	r1, r4
 801ef74:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801ef78:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801ef7c:	ee14 2a90 	vmov	r2, s9
 801ef80:	3230      	adds	r2, #48	; 0x30
 801ef82:	f808 2b01 	strb.w	r2, [r8], #1
 801ef86:	45a0      	cmp	r8, r4
 801ef88:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801ef8c:	ee36 6b45 	vsub.f64	d6, d6, d5
 801ef90:	d118      	bne.n	801efc4 <_dtoa_r+0x58c>
 801ef92:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801ef96:	ee37 4b05 	vadd.f64	d4, d7, d5
 801ef9a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801ef9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efa2:	dc4d      	bgt.n	801f040 <_dtoa_r+0x608>
 801efa4:	ee35 7b47 	vsub.f64	d7, d5, d7
 801efa8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801efac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efb0:	f57f af33 	bpl.w	801ee1a <_dtoa_r+0x3e2>
 801efb4:	4688      	mov	r8, r1
 801efb6:	3901      	subs	r1, #1
 801efb8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801efbc:	2b30      	cmp	r3, #48	; 0x30
 801efbe:	d0f9      	beq.n	801efb4 <_dtoa_r+0x57c>
 801efc0:	46bb      	mov	fp, r7
 801efc2:	e02a      	b.n	801f01a <_dtoa_r+0x5e2>
 801efc4:	ee26 6b03 	vmul.f64	d6, d6, d3
 801efc8:	e7d6      	b.n	801ef78 <_dtoa_r+0x540>
 801efca:	ed9d 7b02 	vldr	d7, [sp, #8]
 801efce:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801efd2:	f8dd 8000 	ldr.w	r8, [sp]
 801efd6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801efda:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801efde:	ee15 3a10 	vmov	r3, s10
 801efe2:	3330      	adds	r3, #48	; 0x30
 801efe4:	f808 3b01 	strb.w	r3, [r8], #1
 801efe8:	9b00      	ldr	r3, [sp, #0]
 801efea:	eba8 0303 	sub.w	r3, r8, r3
 801efee:	4599      	cmp	r9, r3
 801eff0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801eff4:	eea3 7b46 	vfms.f64	d7, d3, d6
 801eff8:	d133      	bne.n	801f062 <_dtoa_r+0x62a>
 801effa:	ee37 7b07 	vadd.f64	d7, d7, d7
 801effe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801f002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f006:	dc1a      	bgt.n	801f03e <_dtoa_r+0x606>
 801f008:	eeb4 7b46 	vcmp.f64	d7, d6
 801f00c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f010:	d103      	bne.n	801f01a <_dtoa_r+0x5e2>
 801f012:	ee15 3a10 	vmov	r3, s10
 801f016:	07d9      	lsls	r1, r3, #31
 801f018:	d411      	bmi.n	801f03e <_dtoa_r+0x606>
 801f01a:	4629      	mov	r1, r5
 801f01c:	4630      	mov	r0, r6
 801f01e:	f001 f87d 	bl	802011c <_Bfree>
 801f022:	2300      	movs	r3, #0
 801f024:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f026:	f888 3000 	strb.w	r3, [r8]
 801f02a:	f10b 0301 	add.w	r3, fp, #1
 801f02e:	6013      	str	r3, [r2, #0]
 801f030:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f032:	2b00      	cmp	r3, #0
 801f034:	f43f ad4d 	beq.w	801ead2 <_dtoa_r+0x9a>
 801f038:	f8c3 8000 	str.w	r8, [r3]
 801f03c:	e549      	b.n	801ead2 <_dtoa_r+0x9a>
 801f03e:	465f      	mov	r7, fp
 801f040:	4643      	mov	r3, r8
 801f042:	4698      	mov	r8, r3
 801f044:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f048:	2a39      	cmp	r2, #57	; 0x39
 801f04a:	d106      	bne.n	801f05a <_dtoa_r+0x622>
 801f04c:	9a00      	ldr	r2, [sp, #0]
 801f04e:	429a      	cmp	r2, r3
 801f050:	d1f7      	bne.n	801f042 <_dtoa_r+0x60a>
 801f052:	9900      	ldr	r1, [sp, #0]
 801f054:	2230      	movs	r2, #48	; 0x30
 801f056:	3701      	adds	r7, #1
 801f058:	700a      	strb	r2, [r1, #0]
 801f05a:	781a      	ldrb	r2, [r3, #0]
 801f05c:	3201      	adds	r2, #1
 801f05e:	701a      	strb	r2, [r3, #0]
 801f060:	e7ae      	b.n	801efc0 <_dtoa_r+0x588>
 801f062:	ee27 7b04 	vmul.f64	d7, d7, d4
 801f066:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801f06a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f06e:	d1b2      	bne.n	801efd6 <_dtoa_r+0x59e>
 801f070:	e7d3      	b.n	801f01a <_dtoa_r+0x5e2>
 801f072:	bf00      	nop
 801f074:	0802aad0 	.word	0x0802aad0
 801f078:	0802aaa8 	.word	0x0802aaa8
 801f07c:	9908      	ldr	r1, [sp, #32]
 801f07e:	2900      	cmp	r1, #0
 801f080:	f000 80d1 	beq.w	801f226 <_dtoa_r+0x7ee>
 801f084:	9907      	ldr	r1, [sp, #28]
 801f086:	2901      	cmp	r1, #1
 801f088:	f300 80b4 	bgt.w	801f1f4 <_dtoa_r+0x7bc>
 801f08c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801f08e:	2900      	cmp	r1, #0
 801f090:	f000 80ac 	beq.w	801f1ec <_dtoa_r+0x7b4>
 801f094:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801f098:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801f09c:	461c      	mov	r4, r3
 801f09e:	930a      	str	r3, [sp, #40]	; 0x28
 801f0a0:	9b05      	ldr	r3, [sp, #20]
 801f0a2:	4413      	add	r3, r2
 801f0a4:	9305      	str	r3, [sp, #20]
 801f0a6:	9b06      	ldr	r3, [sp, #24]
 801f0a8:	2101      	movs	r1, #1
 801f0aa:	4413      	add	r3, r2
 801f0ac:	4630      	mov	r0, r6
 801f0ae:	9306      	str	r3, [sp, #24]
 801f0b0:	f001 f93a 	bl	8020328 <__i2b>
 801f0b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f0b6:	4607      	mov	r7, r0
 801f0b8:	f1b8 0f00 	cmp.w	r8, #0
 801f0bc:	dd0d      	ble.n	801f0da <_dtoa_r+0x6a2>
 801f0be:	9a06      	ldr	r2, [sp, #24]
 801f0c0:	2a00      	cmp	r2, #0
 801f0c2:	dd0a      	ble.n	801f0da <_dtoa_r+0x6a2>
 801f0c4:	4542      	cmp	r2, r8
 801f0c6:	9905      	ldr	r1, [sp, #20]
 801f0c8:	bfa8      	it	ge
 801f0ca:	4642      	movge	r2, r8
 801f0cc:	1a89      	subs	r1, r1, r2
 801f0ce:	9105      	str	r1, [sp, #20]
 801f0d0:	9906      	ldr	r1, [sp, #24]
 801f0d2:	eba8 0802 	sub.w	r8, r8, r2
 801f0d6:	1a8a      	subs	r2, r1, r2
 801f0d8:	9206      	str	r2, [sp, #24]
 801f0da:	b303      	cbz	r3, 801f11e <_dtoa_r+0x6e6>
 801f0dc:	9a08      	ldr	r2, [sp, #32]
 801f0de:	2a00      	cmp	r2, #0
 801f0e0:	f000 80a6 	beq.w	801f230 <_dtoa_r+0x7f8>
 801f0e4:	2c00      	cmp	r4, #0
 801f0e6:	dd13      	ble.n	801f110 <_dtoa_r+0x6d8>
 801f0e8:	4639      	mov	r1, r7
 801f0ea:	4622      	mov	r2, r4
 801f0ec:	4630      	mov	r0, r6
 801f0ee:	930c      	str	r3, [sp, #48]	; 0x30
 801f0f0:	f001 f9d6 	bl	80204a0 <__pow5mult>
 801f0f4:	462a      	mov	r2, r5
 801f0f6:	4601      	mov	r1, r0
 801f0f8:	4607      	mov	r7, r0
 801f0fa:	4630      	mov	r0, r6
 801f0fc:	f001 f92a 	bl	8020354 <__multiply>
 801f100:	4629      	mov	r1, r5
 801f102:	900a      	str	r0, [sp, #40]	; 0x28
 801f104:	4630      	mov	r0, r6
 801f106:	f001 f809 	bl	802011c <_Bfree>
 801f10a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f10c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f10e:	4615      	mov	r5, r2
 801f110:	1b1a      	subs	r2, r3, r4
 801f112:	d004      	beq.n	801f11e <_dtoa_r+0x6e6>
 801f114:	4629      	mov	r1, r5
 801f116:	4630      	mov	r0, r6
 801f118:	f001 f9c2 	bl	80204a0 <__pow5mult>
 801f11c:	4605      	mov	r5, r0
 801f11e:	2101      	movs	r1, #1
 801f120:	4630      	mov	r0, r6
 801f122:	f001 f901 	bl	8020328 <__i2b>
 801f126:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f128:	2b00      	cmp	r3, #0
 801f12a:	4604      	mov	r4, r0
 801f12c:	f340 8082 	ble.w	801f234 <_dtoa_r+0x7fc>
 801f130:	461a      	mov	r2, r3
 801f132:	4601      	mov	r1, r0
 801f134:	4630      	mov	r0, r6
 801f136:	f001 f9b3 	bl	80204a0 <__pow5mult>
 801f13a:	9b07      	ldr	r3, [sp, #28]
 801f13c:	2b01      	cmp	r3, #1
 801f13e:	4604      	mov	r4, r0
 801f140:	dd7b      	ble.n	801f23a <_dtoa_r+0x802>
 801f142:	2300      	movs	r3, #0
 801f144:	930a      	str	r3, [sp, #40]	; 0x28
 801f146:	6922      	ldr	r2, [r4, #16]
 801f148:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801f14c:	6910      	ldr	r0, [r2, #16]
 801f14e:	f001 f89b 	bl	8020288 <__hi0bits>
 801f152:	f1c0 0020 	rsb	r0, r0, #32
 801f156:	9b06      	ldr	r3, [sp, #24]
 801f158:	4418      	add	r0, r3
 801f15a:	f010 001f 	ands.w	r0, r0, #31
 801f15e:	f000 808d 	beq.w	801f27c <_dtoa_r+0x844>
 801f162:	f1c0 0220 	rsb	r2, r0, #32
 801f166:	2a04      	cmp	r2, #4
 801f168:	f340 8086 	ble.w	801f278 <_dtoa_r+0x840>
 801f16c:	f1c0 001c 	rsb	r0, r0, #28
 801f170:	9b05      	ldr	r3, [sp, #20]
 801f172:	4403      	add	r3, r0
 801f174:	9305      	str	r3, [sp, #20]
 801f176:	9b06      	ldr	r3, [sp, #24]
 801f178:	4403      	add	r3, r0
 801f17a:	4480      	add	r8, r0
 801f17c:	9306      	str	r3, [sp, #24]
 801f17e:	9b05      	ldr	r3, [sp, #20]
 801f180:	2b00      	cmp	r3, #0
 801f182:	dd05      	ble.n	801f190 <_dtoa_r+0x758>
 801f184:	4629      	mov	r1, r5
 801f186:	461a      	mov	r2, r3
 801f188:	4630      	mov	r0, r6
 801f18a:	f001 f9e3 	bl	8020554 <__lshift>
 801f18e:	4605      	mov	r5, r0
 801f190:	9b06      	ldr	r3, [sp, #24]
 801f192:	2b00      	cmp	r3, #0
 801f194:	dd05      	ble.n	801f1a2 <_dtoa_r+0x76a>
 801f196:	4621      	mov	r1, r4
 801f198:	461a      	mov	r2, r3
 801f19a:	4630      	mov	r0, r6
 801f19c:	f001 f9da 	bl	8020554 <__lshift>
 801f1a0:	4604      	mov	r4, r0
 801f1a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f1a4:	2b00      	cmp	r3, #0
 801f1a6:	d06b      	beq.n	801f280 <_dtoa_r+0x848>
 801f1a8:	4621      	mov	r1, r4
 801f1aa:	4628      	mov	r0, r5
 801f1ac:	f001 fa3e 	bl	802062c <__mcmp>
 801f1b0:	2800      	cmp	r0, #0
 801f1b2:	da65      	bge.n	801f280 <_dtoa_r+0x848>
 801f1b4:	2300      	movs	r3, #0
 801f1b6:	4629      	mov	r1, r5
 801f1b8:	220a      	movs	r2, #10
 801f1ba:	4630      	mov	r0, r6
 801f1bc:	f000 ffd0 	bl	8020160 <__multadd>
 801f1c0:	9b08      	ldr	r3, [sp, #32]
 801f1c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f1c6:	4605      	mov	r5, r0
 801f1c8:	2b00      	cmp	r3, #0
 801f1ca:	f000 8192 	beq.w	801f4f2 <_dtoa_r+0xaba>
 801f1ce:	4639      	mov	r1, r7
 801f1d0:	2300      	movs	r3, #0
 801f1d2:	220a      	movs	r2, #10
 801f1d4:	4630      	mov	r0, r6
 801f1d6:	f000 ffc3 	bl	8020160 <__multadd>
 801f1da:	f1ba 0f00 	cmp.w	sl, #0
 801f1de:	4607      	mov	r7, r0
 801f1e0:	f300 808e 	bgt.w	801f300 <_dtoa_r+0x8c8>
 801f1e4:	9b07      	ldr	r3, [sp, #28]
 801f1e6:	2b02      	cmp	r3, #2
 801f1e8:	dc51      	bgt.n	801f28e <_dtoa_r+0x856>
 801f1ea:	e089      	b.n	801f300 <_dtoa_r+0x8c8>
 801f1ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f1ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801f1f2:	e751      	b.n	801f098 <_dtoa_r+0x660>
 801f1f4:	f109 34ff 	add.w	r4, r9, #4294967295
 801f1f8:	42a3      	cmp	r3, r4
 801f1fa:	bfbf      	itttt	lt
 801f1fc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 801f1fe:	1ae3      	sublt	r3, r4, r3
 801f200:	18d2      	addlt	r2, r2, r3
 801f202:	4613      	movlt	r3, r2
 801f204:	bfb7      	itett	lt
 801f206:	930e      	strlt	r3, [sp, #56]	; 0x38
 801f208:	1b1c      	subge	r4, r3, r4
 801f20a:	4623      	movlt	r3, r4
 801f20c:	2400      	movlt	r4, #0
 801f20e:	f1b9 0f00 	cmp.w	r9, #0
 801f212:	bfb5      	itete	lt
 801f214:	9a05      	ldrlt	r2, [sp, #20]
 801f216:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 801f21a:	eba2 0809 	sublt.w	r8, r2, r9
 801f21e:	464a      	movge	r2, r9
 801f220:	bfb8      	it	lt
 801f222:	2200      	movlt	r2, #0
 801f224:	e73b      	b.n	801f09e <_dtoa_r+0x666>
 801f226:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801f22a:	9f08      	ldr	r7, [sp, #32]
 801f22c:	461c      	mov	r4, r3
 801f22e:	e743      	b.n	801f0b8 <_dtoa_r+0x680>
 801f230:	461a      	mov	r2, r3
 801f232:	e76f      	b.n	801f114 <_dtoa_r+0x6dc>
 801f234:	9b07      	ldr	r3, [sp, #28]
 801f236:	2b01      	cmp	r3, #1
 801f238:	dc18      	bgt.n	801f26c <_dtoa_r+0x834>
 801f23a:	9b02      	ldr	r3, [sp, #8]
 801f23c:	b9b3      	cbnz	r3, 801f26c <_dtoa_r+0x834>
 801f23e:	9b03      	ldr	r3, [sp, #12]
 801f240:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801f244:	b9a2      	cbnz	r2, 801f270 <_dtoa_r+0x838>
 801f246:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801f24a:	0d12      	lsrs	r2, r2, #20
 801f24c:	0512      	lsls	r2, r2, #20
 801f24e:	b18a      	cbz	r2, 801f274 <_dtoa_r+0x83c>
 801f250:	9b05      	ldr	r3, [sp, #20]
 801f252:	3301      	adds	r3, #1
 801f254:	9305      	str	r3, [sp, #20]
 801f256:	9b06      	ldr	r3, [sp, #24]
 801f258:	3301      	adds	r3, #1
 801f25a:	9306      	str	r3, [sp, #24]
 801f25c:	2301      	movs	r3, #1
 801f25e:	930a      	str	r3, [sp, #40]	; 0x28
 801f260:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f262:	2b00      	cmp	r3, #0
 801f264:	f47f af6f 	bne.w	801f146 <_dtoa_r+0x70e>
 801f268:	2001      	movs	r0, #1
 801f26a:	e774      	b.n	801f156 <_dtoa_r+0x71e>
 801f26c:	2300      	movs	r3, #0
 801f26e:	e7f6      	b.n	801f25e <_dtoa_r+0x826>
 801f270:	9b02      	ldr	r3, [sp, #8]
 801f272:	e7f4      	b.n	801f25e <_dtoa_r+0x826>
 801f274:	920a      	str	r2, [sp, #40]	; 0x28
 801f276:	e7f3      	b.n	801f260 <_dtoa_r+0x828>
 801f278:	d081      	beq.n	801f17e <_dtoa_r+0x746>
 801f27a:	4610      	mov	r0, r2
 801f27c:	301c      	adds	r0, #28
 801f27e:	e777      	b.n	801f170 <_dtoa_r+0x738>
 801f280:	f1b9 0f00 	cmp.w	r9, #0
 801f284:	dc37      	bgt.n	801f2f6 <_dtoa_r+0x8be>
 801f286:	9b07      	ldr	r3, [sp, #28]
 801f288:	2b02      	cmp	r3, #2
 801f28a:	dd34      	ble.n	801f2f6 <_dtoa_r+0x8be>
 801f28c:	46ca      	mov	sl, r9
 801f28e:	f1ba 0f00 	cmp.w	sl, #0
 801f292:	d10d      	bne.n	801f2b0 <_dtoa_r+0x878>
 801f294:	4621      	mov	r1, r4
 801f296:	4653      	mov	r3, sl
 801f298:	2205      	movs	r2, #5
 801f29a:	4630      	mov	r0, r6
 801f29c:	f000 ff60 	bl	8020160 <__multadd>
 801f2a0:	4601      	mov	r1, r0
 801f2a2:	4604      	mov	r4, r0
 801f2a4:	4628      	mov	r0, r5
 801f2a6:	f001 f9c1 	bl	802062c <__mcmp>
 801f2aa:	2800      	cmp	r0, #0
 801f2ac:	f73f adde 	bgt.w	801ee6c <_dtoa_r+0x434>
 801f2b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f2b2:	f8dd 8000 	ldr.w	r8, [sp]
 801f2b6:	ea6f 0b03 	mvn.w	fp, r3
 801f2ba:	f04f 0900 	mov.w	r9, #0
 801f2be:	4621      	mov	r1, r4
 801f2c0:	4630      	mov	r0, r6
 801f2c2:	f000 ff2b 	bl	802011c <_Bfree>
 801f2c6:	2f00      	cmp	r7, #0
 801f2c8:	f43f aea7 	beq.w	801f01a <_dtoa_r+0x5e2>
 801f2cc:	f1b9 0f00 	cmp.w	r9, #0
 801f2d0:	d005      	beq.n	801f2de <_dtoa_r+0x8a6>
 801f2d2:	45b9      	cmp	r9, r7
 801f2d4:	d003      	beq.n	801f2de <_dtoa_r+0x8a6>
 801f2d6:	4649      	mov	r1, r9
 801f2d8:	4630      	mov	r0, r6
 801f2da:	f000 ff1f 	bl	802011c <_Bfree>
 801f2de:	4639      	mov	r1, r7
 801f2e0:	4630      	mov	r0, r6
 801f2e2:	f000 ff1b 	bl	802011c <_Bfree>
 801f2e6:	e698      	b.n	801f01a <_dtoa_r+0x5e2>
 801f2e8:	2400      	movs	r4, #0
 801f2ea:	4627      	mov	r7, r4
 801f2ec:	e7e0      	b.n	801f2b0 <_dtoa_r+0x878>
 801f2ee:	46bb      	mov	fp, r7
 801f2f0:	4604      	mov	r4, r0
 801f2f2:	4607      	mov	r7, r0
 801f2f4:	e5ba      	b.n	801ee6c <_dtoa_r+0x434>
 801f2f6:	9b08      	ldr	r3, [sp, #32]
 801f2f8:	46ca      	mov	sl, r9
 801f2fa:	2b00      	cmp	r3, #0
 801f2fc:	f000 8100 	beq.w	801f500 <_dtoa_r+0xac8>
 801f300:	f1b8 0f00 	cmp.w	r8, #0
 801f304:	dd05      	ble.n	801f312 <_dtoa_r+0x8da>
 801f306:	4639      	mov	r1, r7
 801f308:	4642      	mov	r2, r8
 801f30a:	4630      	mov	r0, r6
 801f30c:	f001 f922 	bl	8020554 <__lshift>
 801f310:	4607      	mov	r7, r0
 801f312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f314:	2b00      	cmp	r3, #0
 801f316:	d05d      	beq.n	801f3d4 <_dtoa_r+0x99c>
 801f318:	6879      	ldr	r1, [r7, #4]
 801f31a:	4630      	mov	r0, r6
 801f31c:	f000 febe 	bl	802009c <_Balloc>
 801f320:	4680      	mov	r8, r0
 801f322:	b928      	cbnz	r0, 801f330 <_dtoa_r+0x8f8>
 801f324:	4b82      	ldr	r3, [pc, #520]	; (801f530 <_dtoa_r+0xaf8>)
 801f326:	4602      	mov	r2, r0
 801f328:	f240 21ea 	movw	r1, #746	; 0x2ea
 801f32c:	f7ff bb9a 	b.w	801ea64 <_dtoa_r+0x2c>
 801f330:	693a      	ldr	r2, [r7, #16]
 801f332:	3202      	adds	r2, #2
 801f334:	0092      	lsls	r2, r2, #2
 801f336:	f107 010c 	add.w	r1, r7, #12
 801f33a:	300c      	adds	r0, #12
 801f33c:	f7fd f9fc 	bl	801c738 <memcpy>
 801f340:	2201      	movs	r2, #1
 801f342:	4641      	mov	r1, r8
 801f344:	4630      	mov	r0, r6
 801f346:	f001 f905 	bl	8020554 <__lshift>
 801f34a:	9b00      	ldr	r3, [sp, #0]
 801f34c:	3301      	adds	r3, #1
 801f34e:	9305      	str	r3, [sp, #20]
 801f350:	9b00      	ldr	r3, [sp, #0]
 801f352:	4453      	add	r3, sl
 801f354:	9309      	str	r3, [sp, #36]	; 0x24
 801f356:	9b02      	ldr	r3, [sp, #8]
 801f358:	f003 0301 	and.w	r3, r3, #1
 801f35c:	46b9      	mov	r9, r7
 801f35e:	9308      	str	r3, [sp, #32]
 801f360:	4607      	mov	r7, r0
 801f362:	9b05      	ldr	r3, [sp, #20]
 801f364:	4621      	mov	r1, r4
 801f366:	3b01      	subs	r3, #1
 801f368:	4628      	mov	r0, r5
 801f36a:	9302      	str	r3, [sp, #8]
 801f36c:	f7ff fad7 	bl	801e91e <quorem>
 801f370:	4603      	mov	r3, r0
 801f372:	3330      	adds	r3, #48	; 0x30
 801f374:	9006      	str	r0, [sp, #24]
 801f376:	4649      	mov	r1, r9
 801f378:	4628      	mov	r0, r5
 801f37a:	930a      	str	r3, [sp, #40]	; 0x28
 801f37c:	f001 f956 	bl	802062c <__mcmp>
 801f380:	463a      	mov	r2, r7
 801f382:	4682      	mov	sl, r0
 801f384:	4621      	mov	r1, r4
 801f386:	4630      	mov	r0, r6
 801f388:	f001 f96c 	bl	8020664 <__mdiff>
 801f38c:	68c2      	ldr	r2, [r0, #12]
 801f38e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f390:	4680      	mov	r8, r0
 801f392:	bb0a      	cbnz	r2, 801f3d8 <_dtoa_r+0x9a0>
 801f394:	4601      	mov	r1, r0
 801f396:	4628      	mov	r0, r5
 801f398:	f001 f948 	bl	802062c <__mcmp>
 801f39c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f39e:	4602      	mov	r2, r0
 801f3a0:	4641      	mov	r1, r8
 801f3a2:	4630      	mov	r0, r6
 801f3a4:	920e      	str	r2, [sp, #56]	; 0x38
 801f3a6:	930a      	str	r3, [sp, #40]	; 0x28
 801f3a8:	f000 feb8 	bl	802011c <_Bfree>
 801f3ac:	9b07      	ldr	r3, [sp, #28]
 801f3ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f3b0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801f3b4:	ea43 0102 	orr.w	r1, r3, r2
 801f3b8:	9b08      	ldr	r3, [sp, #32]
 801f3ba:	430b      	orrs	r3, r1
 801f3bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f3be:	d10d      	bne.n	801f3dc <_dtoa_r+0x9a4>
 801f3c0:	2b39      	cmp	r3, #57	; 0x39
 801f3c2:	d029      	beq.n	801f418 <_dtoa_r+0x9e0>
 801f3c4:	f1ba 0f00 	cmp.w	sl, #0
 801f3c8:	dd01      	ble.n	801f3ce <_dtoa_r+0x996>
 801f3ca:	9b06      	ldr	r3, [sp, #24]
 801f3cc:	3331      	adds	r3, #49	; 0x31
 801f3ce:	9a02      	ldr	r2, [sp, #8]
 801f3d0:	7013      	strb	r3, [r2, #0]
 801f3d2:	e774      	b.n	801f2be <_dtoa_r+0x886>
 801f3d4:	4638      	mov	r0, r7
 801f3d6:	e7b8      	b.n	801f34a <_dtoa_r+0x912>
 801f3d8:	2201      	movs	r2, #1
 801f3da:	e7e1      	b.n	801f3a0 <_dtoa_r+0x968>
 801f3dc:	f1ba 0f00 	cmp.w	sl, #0
 801f3e0:	db06      	blt.n	801f3f0 <_dtoa_r+0x9b8>
 801f3e2:	9907      	ldr	r1, [sp, #28]
 801f3e4:	ea41 0a0a 	orr.w	sl, r1, sl
 801f3e8:	9908      	ldr	r1, [sp, #32]
 801f3ea:	ea5a 0101 	orrs.w	r1, sl, r1
 801f3ee:	d120      	bne.n	801f432 <_dtoa_r+0x9fa>
 801f3f0:	2a00      	cmp	r2, #0
 801f3f2:	ddec      	ble.n	801f3ce <_dtoa_r+0x996>
 801f3f4:	4629      	mov	r1, r5
 801f3f6:	2201      	movs	r2, #1
 801f3f8:	4630      	mov	r0, r6
 801f3fa:	9305      	str	r3, [sp, #20]
 801f3fc:	f001 f8aa 	bl	8020554 <__lshift>
 801f400:	4621      	mov	r1, r4
 801f402:	4605      	mov	r5, r0
 801f404:	f001 f912 	bl	802062c <__mcmp>
 801f408:	2800      	cmp	r0, #0
 801f40a:	9b05      	ldr	r3, [sp, #20]
 801f40c:	dc02      	bgt.n	801f414 <_dtoa_r+0x9dc>
 801f40e:	d1de      	bne.n	801f3ce <_dtoa_r+0x996>
 801f410:	07da      	lsls	r2, r3, #31
 801f412:	d5dc      	bpl.n	801f3ce <_dtoa_r+0x996>
 801f414:	2b39      	cmp	r3, #57	; 0x39
 801f416:	d1d8      	bne.n	801f3ca <_dtoa_r+0x992>
 801f418:	9a02      	ldr	r2, [sp, #8]
 801f41a:	2339      	movs	r3, #57	; 0x39
 801f41c:	7013      	strb	r3, [r2, #0]
 801f41e:	4643      	mov	r3, r8
 801f420:	4698      	mov	r8, r3
 801f422:	3b01      	subs	r3, #1
 801f424:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801f428:	2a39      	cmp	r2, #57	; 0x39
 801f42a:	d051      	beq.n	801f4d0 <_dtoa_r+0xa98>
 801f42c:	3201      	adds	r2, #1
 801f42e:	701a      	strb	r2, [r3, #0]
 801f430:	e745      	b.n	801f2be <_dtoa_r+0x886>
 801f432:	2a00      	cmp	r2, #0
 801f434:	dd03      	ble.n	801f43e <_dtoa_r+0xa06>
 801f436:	2b39      	cmp	r3, #57	; 0x39
 801f438:	d0ee      	beq.n	801f418 <_dtoa_r+0x9e0>
 801f43a:	3301      	adds	r3, #1
 801f43c:	e7c7      	b.n	801f3ce <_dtoa_r+0x996>
 801f43e:	9a05      	ldr	r2, [sp, #20]
 801f440:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f442:	f802 3c01 	strb.w	r3, [r2, #-1]
 801f446:	428a      	cmp	r2, r1
 801f448:	d02b      	beq.n	801f4a2 <_dtoa_r+0xa6a>
 801f44a:	4629      	mov	r1, r5
 801f44c:	2300      	movs	r3, #0
 801f44e:	220a      	movs	r2, #10
 801f450:	4630      	mov	r0, r6
 801f452:	f000 fe85 	bl	8020160 <__multadd>
 801f456:	45b9      	cmp	r9, r7
 801f458:	4605      	mov	r5, r0
 801f45a:	f04f 0300 	mov.w	r3, #0
 801f45e:	f04f 020a 	mov.w	r2, #10
 801f462:	4649      	mov	r1, r9
 801f464:	4630      	mov	r0, r6
 801f466:	d107      	bne.n	801f478 <_dtoa_r+0xa40>
 801f468:	f000 fe7a 	bl	8020160 <__multadd>
 801f46c:	4681      	mov	r9, r0
 801f46e:	4607      	mov	r7, r0
 801f470:	9b05      	ldr	r3, [sp, #20]
 801f472:	3301      	adds	r3, #1
 801f474:	9305      	str	r3, [sp, #20]
 801f476:	e774      	b.n	801f362 <_dtoa_r+0x92a>
 801f478:	f000 fe72 	bl	8020160 <__multadd>
 801f47c:	4639      	mov	r1, r7
 801f47e:	4681      	mov	r9, r0
 801f480:	2300      	movs	r3, #0
 801f482:	220a      	movs	r2, #10
 801f484:	4630      	mov	r0, r6
 801f486:	f000 fe6b 	bl	8020160 <__multadd>
 801f48a:	4607      	mov	r7, r0
 801f48c:	e7f0      	b.n	801f470 <_dtoa_r+0xa38>
 801f48e:	f1ba 0f00 	cmp.w	sl, #0
 801f492:	9a00      	ldr	r2, [sp, #0]
 801f494:	bfcc      	ite	gt
 801f496:	46d0      	movgt	r8, sl
 801f498:	f04f 0801 	movle.w	r8, #1
 801f49c:	4490      	add	r8, r2
 801f49e:	f04f 0900 	mov.w	r9, #0
 801f4a2:	4629      	mov	r1, r5
 801f4a4:	2201      	movs	r2, #1
 801f4a6:	4630      	mov	r0, r6
 801f4a8:	9302      	str	r3, [sp, #8]
 801f4aa:	f001 f853 	bl	8020554 <__lshift>
 801f4ae:	4621      	mov	r1, r4
 801f4b0:	4605      	mov	r5, r0
 801f4b2:	f001 f8bb 	bl	802062c <__mcmp>
 801f4b6:	2800      	cmp	r0, #0
 801f4b8:	dcb1      	bgt.n	801f41e <_dtoa_r+0x9e6>
 801f4ba:	d102      	bne.n	801f4c2 <_dtoa_r+0xa8a>
 801f4bc:	9b02      	ldr	r3, [sp, #8]
 801f4be:	07db      	lsls	r3, r3, #31
 801f4c0:	d4ad      	bmi.n	801f41e <_dtoa_r+0x9e6>
 801f4c2:	4643      	mov	r3, r8
 801f4c4:	4698      	mov	r8, r3
 801f4c6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f4ca:	2a30      	cmp	r2, #48	; 0x30
 801f4cc:	d0fa      	beq.n	801f4c4 <_dtoa_r+0xa8c>
 801f4ce:	e6f6      	b.n	801f2be <_dtoa_r+0x886>
 801f4d0:	9a00      	ldr	r2, [sp, #0]
 801f4d2:	429a      	cmp	r2, r3
 801f4d4:	d1a4      	bne.n	801f420 <_dtoa_r+0x9e8>
 801f4d6:	f10b 0b01 	add.w	fp, fp, #1
 801f4da:	2331      	movs	r3, #49	; 0x31
 801f4dc:	e778      	b.n	801f3d0 <_dtoa_r+0x998>
 801f4de:	4b15      	ldr	r3, [pc, #84]	; (801f534 <_dtoa_r+0xafc>)
 801f4e0:	f7ff bb12 	b.w	801eb08 <_dtoa_r+0xd0>
 801f4e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f4e6:	2b00      	cmp	r3, #0
 801f4e8:	f47f aaee 	bne.w	801eac8 <_dtoa_r+0x90>
 801f4ec:	4b12      	ldr	r3, [pc, #72]	; (801f538 <_dtoa_r+0xb00>)
 801f4ee:	f7ff bb0b 	b.w	801eb08 <_dtoa_r+0xd0>
 801f4f2:	f1ba 0f00 	cmp.w	sl, #0
 801f4f6:	dc03      	bgt.n	801f500 <_dtoa_r+0xac8>
 801f4f8:	9b07      	ldr	r3, [sp, #28]
 801f4fa:	2b02      	cmp	r3, #2
 801f4fc:	f73f aec7 	bgt.w	801f28e <_dtoa_r+0x856>
 801f500:	f8dd 8000 	ldr.w	r8, [sp]
 801f504:	4621      	mov	r1, r4
 801f506:	4628      	mov	r0, r5
 801f508:	f7ff fa09 	bl	801e91e <quorem>
 801f50c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801f510:	f808 3b01 	strb.w	r3, [r8], #1
 801f514:	9a00      	ldr	r2, [sp, #0]
 801f516:	eba8 0202 	sub.w	r2, r8, r2
 801f51a:	4592      	cmp	sl, r2
 801f51c:	ddb7      	ble.n	801f48e <_dtoa_r+0xa56>
 801f51e:	4629      	mov	r1, r5
 801f520:	2300      	movs	r3, #0
 801f522:	220a      	movs	r2, #10
 801f524:	4630      	mov	r0, r6
 801f526:	f000 fe1b 	bl	8020160 <__multadd>
 801f52a:	4605      	mov	r5, r0
 801f52c:	e7ea      	b.n	801f504 <_dtoa_r+0xacc>
 801f52e:	bf00      	nop
 801f530:	0802a953 	.word	0x0802a953
 801f534:	0802a851 	.word	0x0802a851
 801f538:	0802a8d0 	.word	0x0802a8d0

0801f53c <__sflush_r>:
 801f53c:	898a      	ldrh	r2, [r1, #12]
 801f53e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f542:	4605      	mov	r5, r0
 801f544:	0710      	lsls	r0, r2, #28
 801f546:	460c      	mov	r4, r1
 801f548:	d458      	bmi.n	801f5fc <__sflush_r+0xc0>
 801f54a:	684b      	ldr	r3, [r1, #4]
 801f54c:	2b00      	cmp	r3, #0
 801f54e:	dc05      	bgt.n	801f55c <__sflush_r+0x20>
 801f550:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801f552:	2b00      	cmp	r3, #0
 801f554:	dc02      	bgt.n	801f55c <__sflush_r+0x20>
 801f556:	2000      	movs	r0, #0
 801f558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f55c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f55e:	2e00      	cmp	r6, #0
 801f560:	d0f9      	beq.n	801f556 <__sflush_r+0x1a>
 801f562:	2300      	movs	r3, #0
 801f564:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f568:	682f      	ldr	r7, [r5, #0]
 801f56a:	602b      	str	r3, [r5, #0]
 801f56c:	d032      	beq.n	801f5d4 <__sflush_r+0x98>
 801f56e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801f570:	89a3      	ldrh	r3, [r4, #12]
 801f572:	075a      	lsls	r2, r3, #29
 801f574:	d505      	bpl.n	801f582 <__sflush_r+0x46>
 801f576:	6863      	ldr	r3, [r4, #4]
 801f578:	1ac0      	subs	r0, r0, r3
 801f57a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f57c:	b10b      	cbz	r3, 801f582 <__sflush_r+0x46>
 801f57e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f580:	1ac0      	subs	r0, r0, r3
 801f582:	2300      	movs	r3, #0
 801f584:	4602      	mov	r2, r0
 801f586:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f588:	6a21      	ldr	r1, [r4, #32]
 801f58a:	4628      	mov	r0, r5
 801f58c:	47b0      	blx	r6
 801f58e:	1c43      	adds	r3, r0, #1
 801f590:	89a3      	ldrh	r3, [r4, #12]
 801f592:	d106      	bne.n	801f5a2 <__sflush_r+0x66>
 801f594:	6829      	ldr	r1, [r5, #0]
 801f596:	291d      	cmp	r1, #29
 801f598:	d82c      	bhi.n	801f5f4 <__sflush_r+0xb8>
 801f59a:	4a2a      	ldr	r2, [pc, #168]	; (801f644 <__sflush_r+0x108>)
 801f59c:	40ca      	lsrs	r2, r1
 801f59e:	07d6      	lsls	r6, r2, #31
 801f5a0:	d528      	bpl.n	801f5f4 <__sflush_r+0xb8>
 801f5a2:	2200      	movs	r2, #0
 801f5a4:	6062      	str	r2, [r4, #4]
 801f5a6:	04d9      	lsls	r1, r3, #19
 801f5a8:	6922      	ldr	r2, [r4, #16]
 801f5aa:	6022      	str	r2, [r4, #0]
 801f5ac:	d504      	bpl.n	801f5b8 <__sflush_r+0x7c>
 801f5ae:	1c42      	adds	r2, r0, #1
 801f5b0:	d101      	bne.n	801f5b6 <__sflush_r+0x7a>
 801f5b2:	682b      	ldr	r3, [r5, #0]
 801f5b4:	b903      	cbnz	r3, 801f5b8 <__sflush_r+0x7c>
 801f5b6:	6560      	str	r0, [r4, #84]	; 0x54
 801f5b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f5ba:	602f      	str	r7, [r5, #0]
 801f5bc:	2900      	cmp	r1, #0
 801f5be:	d0ca      	beq.n	801f556 <__sflush_r+0x1a>
 801f5c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f5c4:	4299      	cmp	r1, r3
 801f5c6:	d002      	beq.n	801f5ce <__sflush_r+0x92>
 801f5c8:	4628      	mov	r0, r5
 801f5ca:	f7fd f8e5 	bl	801c798 <_free_r>
 801f5ce:	2000      	movs	r0, #0
 801f5d0:	6360      	str	r0, [r4, #52]	; 0x34
 801f5d2:	e7c1      	b.n	801f558 <__sflush_r+0x1c>
 801f5d4:	6a21      	ldr	r1, [r4, #32]
 801f5d6:	2301      	movs	r3, #1
 801f5d8:	4628      	mov	r0, r5
 801f5da:	47b0      	blx	r6
 801f5dc:	1c41      	adds	r1, r0, #1
 801f5de:	d1c7      	bne.n	801f570 <__sflush_r+0x34>
 801f5e0:	682b      	ldr	r3, [r5, #0]
 801f5e2:	2b00      	cmp	r3, #0
 801f5e4:	d0c4      	beq.n	801f570 <__sflush_r+0x34>
 801f5e6:	2b1d      	cmp	r3, #29
 801f5e8:	d001      	beq.n	801f5ee <__sflush_r+0xb2>
 801f5ea:	2b16      	cmp	r3, #22
 801f5ec:	d101      	bne.n	801f5f2 <__sflush_r+0xb6>
 801f5ee:	602f      	str	r7, [r5, #0]
 801f5f0:	e7b1      	b.n	801f556 <__sflush_r+0x1a>
 801f5f2:	89a3      	ldrh	r3, [r4, #12]
 801f5f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f5f8:	81a3      	strh	r3, [r4, #12]
 801f5fa:	e7ad      	b.n	801f558 <__sflush_r+0x1c>
 801f5fc:	690f      	ldr	r7, [r1, #16]
 801f5fe:	2f00      	cmp	r7, #0
 801f600:	d0a9      	beq.n	801f556 <__sflush_r+0x1a>
 801f602:	0793      	lsls	r3, r2, #30
 801f604:	680e      	ldr	r6, [r1, #0]
 801f606:	bf08      	it	eq
 801f608:	694b      	ldreq	r3, [r1, #20]
 801f60a:	600f      	str	r7, [r1, #0]
 801f60c:	bf18      	it	ne
 801f60e:	2300      	movne	r3, #0
 801f610:	eba6 0807 	sub.w	r8, r6, r7
 801f614:	608b      	str	r3, [r1, #8]
 801f616:	f1b8 0f00 	cmp.w	r8, #0
 801f61a:	dd9c      	ble.n	801f556 <__sflush_r+0x1a>
 801f61c:	6a21      	ldr	r1, [r4, #32]
 801f61e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f620:	4643      	mov	r3, r8
 801f622:	463a      	mov	r2, r7
 801f624:	4628      	mov	r0, r5
 801f626:	47b0      	blx	r6
 801f628:	2800      	cmp	r0, #0
 801f62a:	dc06      	bgt.n	801f63a <__sflush_r+0xfe>
 801f62c:	89a3      	ldrh	r3, [r4, #12]
 801f62e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f632:	81a3      	strh	r3, [r4, #12]
 801f634:	f04f 30ff 	mov.w	r0, #4294967295
 801f638:	e78e      	b.n	801f558 <__sflush_r+0x1c>
 801f63a:	4407      	add	r7, r0
 801f63c:	eba8 0800 	sub.w	r8, r8, r0
 801f640:	e7e9      	b.n	801f616 <__sflush_r+0xda>
 801f642:	bf00      	nop
 801f644:	20400001 	.word	0x20400001

0801f648 <_fflush_r>:
 801f648:	b538      	push	{r3, r4, r5, lr}
 801f64a:	690b      	ldr	r3, [r1, #16]
 801f64c:	4605      	mov	r5, r0
 801f64e:	460c      	mov	r4, r1
 801f650:	b913      	cbnz	r3, 801f658 <_fflush_r+0x10>
 801f652:	2500      	movs	r5, #0
 801f654:	4628      	mov	r0, r5
 801f656:	bd38      	pop	{r3, r4, r5, pc}
 801f658:	b118      	cbz	r0, 801f662 <_fflush_r+0x1a>
 801f65a:	6983      	ldr	r3, [r0, #24]
 801f65c:	b90b      	cbnz	r3, 801f662 <_fflush_r+0x1a>
 801f65e:	f000 f887 	bl	801f770 <__sinit>
 801f662:	4b14      	ldr	r3, [pc, #80]	; (801f6b4 <_fflush_r+0x6c>)
 801f664:	429c      	cmp	r4, r3
 801f666:	d11b      	bne.n	801f6a0 <_fflush_r+0x58>
 801f668:	686c      	ldr	r4, [r5, #4]
 801f66a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f66e:	2b00      	cmp	r3, #0
 801f670:	d0ef      	beq.n	801f652 <_fflush_r+0xa>
 801f672:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801f674:	07d0      	lsls	r0, r2, #31
 801f676:	d404      	bmi.n	801f682 <_fflush_r+0x3a>
 801f678:	0599      	lsls	r1, r3, #22
 801f67a:	d402      	bmi.n	801f682 <_fflush_r+0x3a>
 801f67c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f67e:	f000 fc88 	bl	801ff92 <__retarget_lock_acquire_recursive>
 801f682:	4628      	mov	r0, r5
 801f684:	4621      	mov	r1, r4
 801f686:	f7ff ff59 	bl	801f53c <__sflush_r>
 801f68a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f68c:	07da      	lsls	r2, r3, #31
 801f68e:	4605      	mov	r5, r0
 801f690:	d4e0      	bmi.n	801f654 <_fflush_r+0xc>
 801f692:	89a3      	ldrh	r3, [r4, #12]
 801f694:	059b      	lsls	r3, r3, #22
 801f696:	d4dd      	bmi.n	801f654 <_fflush_r+0xc>
 801f698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f69a:	f000 fc7b 	bl	801ff94 <__retarget_lock_release_recursive>
 801f69e:	e7d9      	b.n	801f654 <_fflush_r+0xc>
 801f6a0:	4b05      	ldr	r3, [pc, #20]	; (801f6b8 <_fflush_r+0x70>)
 801f6a2:	429c      	cmp	r4, r3
 801f6a4:	d101      	bne.n	801f6aa <_fflush_r+0x62>
 801f6a6:	68ac      	ldr	r4, [r5, #8]
 801f6a8:	e7df      	b.n	801f66a <_fflush_r+0x22>
 801f6aa:	4b04      	ldr	r3, [pc, #16]	; (801f6bc <_fflush_r+0x74>)
 801f6ac:	429c      	cmp	r4, r3
 801f6ae:	bf08      	it	eq
 801f6b0:	68ec      	ldreq	r4, [r5, #12]
 801f6b2:	e7da      	b.n	801f66a <_fflush_r+0x22>
 801f6b4:	0802a984 	.word	0x0802a984
 801f6b8:	0802a9a4 	.word	0x0802a9a4
 801f6bc:	0802a964 	.word	0x0802a964

0801f6c0 <std>:
 801f6c0:	2300      	movs	r3, #0
 801f6c2:	b510      	push	{r4, lr}
 801f6c4:	4604      	mov	r4, r0
 801f6c6:	e9c0 3300 	strd	r3, r3, [r0]
 801f6ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f6ce:	6083      	str	r3, [r0, #8]
 801f6d0:	8181      	strh	r1, [r0, #12]
 801f6d2:	6643      	str	r3, [r0, #100]	; 0x64
 801f6d4:	81c2      	strh	r2, [r0, #14]
 801f6d6:	6183      	str	r3, [r0, #24]
 801f6d8:	4619      	mov	r1, r3
 801f6da:	2208      	movs	r2, #8
 801f6dc:	305c      	adds	r0, #92	; 0x5c
 801f6de:	f7fd f853 	bl	801c788 <memset>
 801f6e2:	4b05      	ldr	r3, [pc, #20]	; (801f6f8 <std+0x38>)
 801f6e4:	6263      	str	r3, [r4, #36]	; 0x24
 801f6e6:	4b05      	ldr	r3, [pc, #20]	; (801f6fc <std+0x3c>)
 801f6e8:	62a3      	str	r3, [r4, #40]	; 0x28
 801f6ea:	4b05      	ldr	r3, [pc, #20]	; (801f700 <std+0x40>)
 801f6ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f6ee:	4b05      	ldr	r3, [pc, #20]	; (801f704 <std+0x44>)
 801f6f0:	6224      	str	r4, [r4, #32]
 801f6f2:	6323      	str	r3, [r4, #48]	; 0x30
 801f6f4:	bd10      	pop	{r4, pc}
 801f6f6:	bf00      	nop
 801f6f8:	08020dd1 	.word	0x08020dd1
 801f6fc:	08020df3 	.word	0x08020df3
 801f700:	08020e2b 	.word	0x08020e2b
 801f704:	08020e4f 	.word	0x08020e4f

0801f708 <_cleanup_r>:
 801f708:	4901      	ldr	r1, [pc, #4]	; (801f710 <_cleanup_r+0x8>)
 801f70a:	f000 b8af 	b.w	801f86c <_fwalk_reent>
 801f70e:	bf00      	nop
 801f710:	0801f649 	.word	0x0801f649

0801f714 <__sfmoreglue>:
 801f714:	b570      	push	{r4, r5, r6, lr}
 801f716:	1e4a      	subs	r2, r1, #1
 801f718:	2568      	movs	r5, #104	; 0x68
 801f71a:	4355      	muls	r5, r2
 801f71c:	460e      	mov	r6, r1
 801f71e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f722:	f7fd f889 	bl	801c838 <_malloc_r>
 801f726:	4604      	mov	r4, r0
 801f728:	b140      	cbz	r0, 801f73c <__sfmoreglue+0x28>
 801f72a:	2100      	movs	r1, #0
 801f72c:	e9c0 1600 	strd	r1, r6, [r0]
 801f730:	300c      	adds	r0, #12
 801f732:	60a0      	str	r0, [r4, #8]
 801f734:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f738:	f7fd f826 	bl	801c788 <memset>
 801f73c:	4620      	mov	r0, r4
 801f73e:	bd70      	pop	{r4, r5, r6, pc}

0801f740 <__sfp_lock_acquire>:
 801f740:	4801      	ldr	r0, [pc, #4]	; (801f748 <__sfp_lock_acquire+0x8>)
 801f742:	f000 bc26 	b.w	801ff92 <__retarget_lock_acquire_recursive>
 801f746:	bf00      	nop
 801f748:	240147ec 	.word	0x240147ec

0801f74c <__sfp_lock_release>:
 801f74c:	4801      	ldr	r0, [pc, #4]	; (801f754 <__sfp_lock_release+0x8>)
 801f74e:	f000 bc21 	b.w	801ff94 <__retarget_lock_release_recursive>
 801f752:	bf00      	nop
 801f754:	240147ec 	.word	0x240147ec

0801f758 <__sinit_lock_acquire>:
 801f758:	4801      	ldr	r0, [pc, #4]	; (801f760 <__sinit_lock_acquire+0x8>)
 801f75a:	f000 bc1a 	b.w	801ff92 <__retarget_lock_acquire_recursive>
 801f75e:	bf00      	nop
 801f760:	240147e7 	.word	0x240147e7

0801f764 <__sinit_lock_release>:
 801f764:	4801      	ldr	r0, [pc, #4]	; (801f76c <__sinit_lock_release+0x8>)
 801f766:	f000 bc15 	b.w	801ff94 <__retarget_lock_release_recursive>
 801f76a:	bf00      	nop
 801f76c:	240147e7 	.word	0x240147e7

0801f770 <__sinit>:
 801f770:	b510      	push	{r4, lr}
 801f772:	4604      	mov	r4, r0
 801f774:	f7ff fff0 	bl	801f758 <__sinit_lock_acquire>
 801f778:	69a3      	ldr	r3, [r4, #24]
 801f77a:	b11b      	cbz	r3, 801f784 <__sinit+0x14>
 801f77c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f780:	f7ff bff0 	b.w	801f764 <__sinit_lock_release>
 801f784:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801f788:	6523      	str	r3, [r4, #80]	; 0x50
 801f78a:	4b13      	ldr	r3, [pc, #76]	; (801f7d8 <__sinit+0x68>)
 801f78c:	4a13      	ldr	r2, [pc, #76]	; (801f7dc <__sinit+0x6c>)
 801f78e:	681b      	ldr	r3, [r3, #0]
 801f790:	62a2      	str	r2, [r4, #40]	; 0x28
 801f792:	42a3      	cmp	r3, r4
 801f794:	bf04      	itt	eq
 801f796:	2301      	moveq	r3, #1
 801f798:	61a3      	streq	r3, [r4, #24]
 801f79a:	4620      	mov	r0, r4
 801f79c:	f000 f820 	bl	801f7e0 <__sfp>
 801f7a0:	6060      	str	r0, [r4, #4]
 801f7a2:	4620      	mov	r0, r4
 801f7a4:	f000 f81c 	bl	801f7e0 <__sfp>
 801f7a8:	60a0      	str	r0, [r4, #8]
 801f7aa:	4620      	mov	r0, r4
 801f7ac:	f000 f818 	bl	801f7e0 <__sfp>
 801f7b0:	2200      	movs	r2, #0
 801f7b2:	60e0      	str	r0, [r4, #12]
 801f7b4:	2104      	movs	r1, #4
 801f7b6:	6860      	ldr	r0, [r4, #4]
 801f7b8:	f7ff ff82 	bl	801f6c0 <std>
 801f7bc:	68a0      	ldr	r0, [r4, #8]
 801f7be:	2201      	movs	r2, #1
 801f7c0:	2109      	movs	r1, #9
 801f7c2:	f7ff ff7d 	bl	801f6c0 <std>
 801f7c6:	68e0      	ldr	r0, [r4, #12]
 801f7c8:	2202      	movs	r2, #2
 801f7ca:	2112      	movs	r1, #18
 801f7cc:	f7ff ff78 	bl	801f6c0 <std>
 801f7d0:	2301      	movs	r3, #1
 801f7d2:	61a3      	str	r3, [r4, #24]
 801f7d4:	e7d2      	b.n	801f77c <__sinit+0xc>
 801f7d6:	bf00      	nop
 801f7d8:	0802a82c 	.word	0x0802a82c
 801f7dc:	0801f709 	.word	0x0801f709

0801f7e0 <__sfp>:
 801f7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f7e2:	4607      	mov	r7, r0
 801f7e4:	f7ff ffac 	bl	801f740 <__sfp_lock_acquire>
 801f7e8:	4b1e      	ldr	r3, [pc, #120]	; (801f864 <__sfp+0x84>)
 801f7ea:	681e      	ldr	r6, [r3, #0]
 801f7ec:	69b3      	ldr	r3, [r6, #24]
 801f7ee:	b913      	cbnz	r3, 801f7f6 <__sfp+0x16>
 801f7f0:	4630      	mov	r0, r6
 801f7f2:	f7ff ffbd 	bl	801f770 <__sinit>
 801f7f6:	3648      	adds	r6, #72	; 0x48
 801f7f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f7fc:	3b01      	subs	r3, #1
 801f7fe:	d503      	bpl.n	801f808 <__sfp+0x28>
 801f800:	6833      	ldr	r3, [r6, #0]
 801f802:	b30b      	cbz	r3, 801f848 <__sfp+0x68>
 801f804:	6836      	ldr	r6, [r6, #0]
 801f806:	e7f7      	b.n	801f7f8 <__sfp+0x18>
 801f808:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f80c:	b9d5      	cbnz	r5, 801f844 <__sfp+0x64>
 801f80e:	4b16      	ldr	r3, [pc, #88]	; (801f868 <__sfp+0x88>)
 801f810:	60e3      	str	r3, [r4, #12]
 801f812:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f816:	6665      	str	r5, [r4, #100]	; 0x64
 801f818:	f000 fbba 	bl	801ff90 <__retarget_lock_init_recursive>
 801f81c:	f7ff ff96 	bl	801f74c <__sfp_lock_release>
 801f820:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801f824:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801f828:	6025      	str	r5, [r4, #0]
 801f82a:	61a5      	str	r5, [r4, #24]
 801f82c:	2208      	movs	r2, #8
 801f82e:	4629      	mov	r1, r5
 801f830:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f834:	f7fc ffa8 	bl	801c788 <memset>
 801f838:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f83c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801f840:	4620      	mov	r0, r4
 801f842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f844:	3468      	adds	r4, #104	; 0x68
 801f846:	e7d9      	b.n	801f7fc <__sfp+0x1c>
 801f848:	2104      	movs	r1, #4
 801f84a:	4638      	mov	r0, r7
 801f84c:	f7ff ff62 	bl	801f714 <__sfmoreglue>
 801f850:	4604      	mov	r4, r0
 801f852:	6030      	str	r0, [r6, #0]
 801f854:	2800      	cmp	r0, #0
 801f856:	d1d5      	bne.n	801f804 <__sfp+0x24>
 801f858:	f7ff ff78 	bl	801f74c <__sfp_lock_release>
 801f85c:	230c      	movs	r3, #12
 801f85e:	603b      	str	r3, [r7, #0]
 801f860:	e7ee      	b.n	801f840 <__sfp+0x60>
 801f862:	bf00      	nop
 801f864:	0802a82c 	.word	0x0802a82c
 801f868:	ffff0001 	.word	0xffff0001

0801f86c <_fwalk_reent>:
 801f86c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f870:	4606      	mov	r6, r0
 801f872:	4688      	mov	r8, r1
 801f874:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801f878:	2700      	movs	r7, #0
 801f87a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f87e:	f1b9 0901 	subs.w	r9, r9, #1
 801f882:	d505      	bpl.n	801f890 <_fwalk_reent+0x24>
 801f884:	6824      	ldr	r4, [r4, #0]
 801f886:	2c00      	cmp	r4, #0
 801f888:	d1f7      	bne.n	801f87a <_fwalk_reent+0xe>
 801f88a:	4638      	mov	r0, r7
 801f88c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f890:	89ab      	ldrh	r3, [r5, #12]
 801f892:	2b01      	cmp	r3, #1
 801f894:	d907      	bls.n	801f8a6 <_fwalk_reent+0x3a>
 801f896:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f89a:	3301      	adds	r3, #1
 801f89c:	d003      	beq.n	801f8a6 <_fwalk_reent+0x3a>
 801f89e:	4629      	mov	r1, r5
 801f8a0:	4630      	mov	r0, r6
 801f8a2:	47c0      	blx	r8
 801f8a4:	4307      	orrs	r7, r0
 801f8a6:	3568      	adds	r5, #104	; 0x68
 801f8a8:	e7e9      	b.n	801f87e <_fwalk_reent+0x12>

0801f8aa <rshift>:
 801f8aa:	6903      	ldr	r3, [r0, #16]
 801f8ac:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801f8b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f8b4:	ea4f 1261 	mov.w	r2, r1, asr #5
 801f8b8:	f100 0414 	add.w	r4, r0, #20
 801f8bc:	dd45      	ble.n	801f94a <rshift+0xa0>
 801f8be:	f011 011f 	ands.w	r1, r1, #31
 801f8c2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801f8c6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801f8ca:	d10c      	bne.n	801f8e6 <rshift+0x3c>
 801f8cc:	f100 0710 	add.w	r7, r0, #16
 801f8d0:	4629      	mov	r1, r5
 801f8d2:	42b1      	cmp	r1, r6
 801f8d4:	d334      	bcc.n	801f940 <rshift+0x96>
 801f8d6:	1a9b      	subs	r3, r3, r2
 801f8d8:	009b      	lsls	r3, r3, #2
 801f8da:	1eea      	subs	r2, r5, #3
 801f8dc:	4296      	cmp	r6, r2
 801f8de:	bf38      	it	cc
 801f8e0:	2300      	movcc	r3, #0
 801f8e2:	4423      	add	r3, r4
 801f8e4:	e015      	b.n	801f912 <rshift+0x68>
 801f8e6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801f8ea:	f1c1 0820 	rsb	r8, r1, #32
 801f8ee:	40cf      	lsrs	r7, r1
 801f8f0:	f105 0e04 	add.w	lr, r5, #4
 801f8f4:	46a1      	mov	r9, r4
 801f8f6:	4576      	cmp	r6, lr
 801f8f8:	46f4      	mov	ip, lr
 801f8fa:	d815      	bhi.n	801f928 <rshift+0x7e>
 801f8fc:	1a9b      	subs	r3, r3, r2
 801f8fe:	009a      	lsls	r2, r3, #2
 801f900:	3a04      	subs	r2, #4
 801f902:	3501      	adds	r5, #1
 801f904:	42ae      	cmp	r6, r5
 801f906:	bf38      	it	cc
 801f908:	2200      	movcc	r2, #0
 801f90a:	18a3      	adds	r3, r4, r2
 801f90c:	50a7      	str	r7, [r4, r2]
 801f90e:	b107      	cbz	r7, 801f912 <rshift+0x68>
 801f910:	3304      	adds	r3, #4
 801f912:	1b1a      	subs	r2, r3, r4
 801f914:	42a3      	cmp	r3, r4
 801f916:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801f91a:	bf08      	it	eq
 801f91c:	2300      	moveq	r3, #0
 801f91e:	6102      	str	r2, [r0, #16]
 801f920:	bf08      	it	eq
 801f922:	6143      	streq	r3, [r0, #20]
 801f924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f928:	f8dc c000 	ldr.w	ip, [ip]
 801f92c:	fa0c fc08 	lsl.w	ip, ip, r8
 801f930:	ea4c 0707 	orr.w	r7, ip, r7
 801f934:	f849 7b04 	str.w	r7, [r9], #4
 801f938:	f85e 7b04 	ldr.w	r7, [lr], #4
 801f93c:	40cf      	lsrs	r7, r1
 801f93e:	e7da      	b.n	801f8f6 <rshift+0x4c>
 801f940:	f851 cb04 	ldr.w	ip, [r1], #4
 801f944:	f847 cf04 	str.w	ip, [r7, #4]!
 801f948:	e7c3      	b.n	801f8d2 <rshift+0x28>
 801f94a:	4623      	mov	r3, r4
 801f94c:	e7e1      	b.n	801f912 <rshift+0x68>

0801f94e <__hexdig_fun>:
 801f94e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801f952:	2b09      	cmp	r3, #9
 801f954:	d802      	bhi.n	801f95c <__hexdig_fun+0xe>
 801f956:	3820      	subs	r0, #32
 801f958:	b2c0      	uxtb	r0, r0
 801f95a:	4770      	bx	lr
 801f95c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801f960:	2b05      	cmp	r3, #5
 801f962:	d801      	bhi.n	801f968 <__hexdig_fun+0x1a>
 801f964:	3847      	subs	r0, #71	; 0x47
 801f966:	e7f7      	b.n	801f958 <__hexdig_fun+0xa>
 801f968:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801f96c:	2b05      	cmp	r3, #5
 801f96e:	d801      	bhi.n	801f974 <__hexdig_fun+0x26>
 801f970:	3827      	subs	r0, #39	; 0x27
 801f972:	e7f1      	b.n	801f958 <__hexdig_fun+0xa>
 801f974:	2000      	movs	r0, #0
 801f976:	4770      	bx	lr

0801f978 <__gethex>:
 801f978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f97c:	ed2d 8b02 	vpush	{d8}
 801f980:	b089      	sub	sp, #36	; 0x24
 801f982:	ee08 0a10 	vmov	s16, r0
 801f986:	9304      	str	r3, [sp, #16]
 801f988:	4bbc      	ldr	r3, [pc, #752]	; (801fc7c <__gethex+0x304>)
 801f98a:	681b      	ldr	r3, [r3, #0]
 801f98c:	9301      	str	r3, [sp, #4]
 801f98e:	4618      	mov	r0, r3
 801f990:	468b      	mov	fp, r1
 801f992:	4690      	mov	r8, r2
 801f994:	f7e0 fcae 	bl	80002f4 <strlen>
 801f998:	9b01      	ldr	r3, [sp, #4]
 801f99a:	f8db 2000 	ldr.w	r2, [fp]
 801f99e:	4403      	add	r3, r0
 801f9a0:	4682      	mov	sl, r0
 801f9a2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801f9a6:	9305      	str	r3, [sp, #20]
 801f9a8:	1c93      	adds	r3, r2, #2
 801f9aa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801f9ae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801f9b2:	32fe      	adds	r2, #254	; 0xfe
 801f9b4:	18d1      	adds	r1, r2, r3
 801f9b6:	461f      	mov	r7, r3
 801f9b8:	f813 0b01 	ldrb.w	r0, [r3], #1
 801f9bc:	9100      	str	r1, [sp, #0]
 801f9be:	2830      	cmp	r0, #48	; 0x30
 801f9c0:	d0f8      	beq.n	801f9b4 <__gethex+0x3c>
 801f9c2:	f7ff ffc4 	bl	801f94e <__hexdig_fun>
 801f9c6:	4604      	mov	r4, r0
 801f9c8:	2800      	cmp	r0, #0
 801f9ca:	d13a      	bne.n	801fa42 <__gethex+0xca>
 801f9cc:	9901      	ldr	r1, [sp, #4]
 801f9ce:	4652      	mov	r2, sl
 801f9d0:	4638      	mov	r0, r7
 801f9d2:	f7fe f823 	bl	801da1c <strncmp>
 801f9d6:	4605      	mov	r5, r0
 801f9d8:	2800      	cmp	r0, #0
 801f9da:	d168      	bne.n	801faae <__gethex+0x136>
 801f9dc:	f817 000a 	ldrb.w	r0, [r7, sl]
 801f9e0:	eb07 060a 	add.w	r6, r7, sl
 801f9e4:	f7ff ffb3 	bl	801f94e <__hexdig_fun>
 801f9e8:	2800      	cmp	r0, #0
 801f9ea:	d062      	beq.n	801fab2 <__gethex+0x13a>
 801f9ec:	4633      	mov	r3, r6
 801f9ee:	7818      	ldrb	r0, [r3, #0]
 801f9f0:	2830      	cmp	r0, #48	; 0x30
 801f9f2:	461f      	mov	r7, r3
 801f9f4:	f103 0301 	add.w	r3, r3, #1
 801f9f8:	d0f9      	beq.n	801f9ee <__gethex+0x76>
 801f9fa:	f7ff ffa8 	bl	801f94e <__hexdig_fun>
 801f9fe:	2301      	movs	r3, #1
 801fa00:	fab0 f480 	clz	r4, r0
 801fa04:	0964      	lsrs	r4, r4, #5
 801fa06:	4635      	mov	r5, r6
 801fa08:	9300      	str	r3, [sp, #0]
 801fa0a:	463a      	mov	r2, r7
 801fa0c:	4616      	mov	r6, r2
 801fa0e:	3201      	adds	r2, #1
 801fa10:	7830      	ldrb	r0, [r6, #0]
 801fa12:	f7ff ff9c 	bl	801f94e <__hexdig_fun>
 801fa16:	2800      	cmp	r0, #0
 801fa18:	d1f8      	bne.n	801fa0c <__gethex+0x94>
 801fa1a:	9901      	ldr	r1, [sp, #4]
 801fa1c:	4652      	mov	r2, sl
 801fa1e:	4630      	mov	r0, r6
 801fa20:	f7fd fffc 	bl	801da1c <strncmp>
 801fa24:	b980      	cbnz	r0, 801fa48 <__gethex+0xd0>
 801fa26:	b94d      	cbnz	r5, 801fa3c <__gethex+0xc4>
 801fa28:	eb06 050a 	add.w	r5, r6, sl
 801fa2c:	462a      	mov	r2, r5
 801fa2e:	4616      	mov	r6, r2
 801fa30:	3201      	adds	r2, #1
 801fa32:	7830      	ldrb	r0, [r6, #0]
 801fa34:	f7ff ff8b 	bl	801f94e <__hexdig_fun>
 801fa38:	2800      	cmp	r0, #0
 801fa3a:	d1f8      	bne.n	801fa2e <__gethex+0xb6>
 801fa3c:	1bad      	subs	r5, r5, r6
 801fa3e:	00ad      	lsls	r5, r5, #2
 801fa40:	e004      	b.n	801fa4c <__gethex+0xd4>
 801fa42:	2400      	movs	r4, #0
 801fa44:	4625      	mov	r5, r4
 801fa46:	e7e0      	b.n	801fa0a <__gethex+0x92>
 801fa48:	2d00      	cmp	r5, #0
 801fa4a:	d1f7      	bne.n	801fa3c <__gethex+0xc4>
 801fa4c:	7833      	ldrb	r3, [r6, #0]
 801fa4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801fa52:	2b50      	cmp	r3, #80	; 0x50
 801fa54:	d13b      	bne.n	801face <__gethex+0x156>
 801fa56:	7873      	ldrb	r3, [r6, #1]
 801fa58:	2b2b      	cmp	r3, #43	; 0x2b
 801fa5a:	d02c      	beq.n	801fab6 <__gethex+0x13e>
 801fa5c:	2b2d      	cmp	r3, #45	; 0x2d
 801fa5e:	d02e      	beq.n	801fabe <__gethex+0x146>
 801fa60:	1c71      	adds	r1, r6, #1
 801fa62:	f04f 0900 	mov.w	r9, #0
 801fa66:	7808      	ldrb	r0, [r1, #0]
 801fa68:	f7ff ff71 	bl	801f94e <__hexdig_fun>
 801fa6c:	1e43      	subs	r3, r0, #1
 801fa6e:	b2db      	uxtb	r3, r3
 801fa70:	2b18      	cmp	r3, #24
 801fa72:	d82c      	bhi.n	801face <__gethex+0x156>
 801fa74:	f1a0 0210 	sub.w	r2, r0, #16
 801fa78:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801fa7c:	f7ff ff67 	bl	801f94e <__hexdig_fun>
 801fa80:	1e43      	subs	r3, r0, #1
 801fa82:	b2db      	uxtb	r3, r3
 801fa84:	2b18      	cmp	r3, #24
 801fa86:	d91d      	bls.n	801fac4 <__gethex+0x14c>
 801fa88:	f1b9 0f00 	cmp.w	r9, #0
 801fa8c:	d000      	beq.n	801fa90 <__gethex+0x118>
 801fa8e:	4252      	negs	r2, r2
 801fa90:	4415      	add	r5, r2
 801fa92:	f8cb 1000 	str.w	r1, [fp]
 801fa96:	b1e4      	cbz	r4, 801fad2 <__gethex+0x15a>
 801fa98:	9b00      	ldr	r3, [sp, #0]
 801fa9a:	2b00      	cmp	r3, #0
 801fa9c:	bf14      	ite	ne
 801fa9e:	2700      	movne	r7, #0
 801faa0:	2706      	moveq	r7, #6
 801faa2:	4638      	mov	r0, r7
 801faa4:	b009      	add	sp, #36	; 0x24
 801faa6:	ecbd 8b02 	vpop	{d8}
 801faaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801faae:	463e      	mov	r6, r7
 801fab0:	4625      	mov	r5, r4
 801fab2:	2401      	movs	r4, #1
 801fab4:	e7ca      	b.n	801fa4c <__gethex+0xd4>
 801fab6:	f04f 0900 	mov.w	r9, #0
 801faba:	1cb1      	adds	r1, r6, #2
 801fabc:	e7d3      	b.n	801fa66 <__gethex+0xee>
 801fabe:	f04f 0901 	mov.w	r9, #1
 801fac2:	e7fa      	b.n	801faba <__gethex+0x142>
 801fac4:	230a      	movs	r3, #10
 801fac6:	fb03 0202 	mla	r2, r3, r2, r0
 801faca:	3a10      	subs	r2, #16
 801facc:	e7d4      	b.n	801fa78 <__gethex+0x100>
 801face:	4631      	mov	r1, r6
 801fad0:	e7df      	b.n	801fa92 <__gethex+0x11a>
 801fad2:	1bf3      	subs	r3, r6, r7
 801fad4:	3b01      	subs	r3, #1
 801fad6:	4621      	mov	r1, r4
 801fad8:	2b07      	cmp	r3, #7
 801fada:	dc0b      	bgt.n	801faf4 <__gethex+0x17c>
 801fadc:	ee18 0a10 	vmov	r0, s16
 801fae0:	f000 fadc 	bl	802009c <_Balloc>
 801fae4:	4604      	mov	r4, r0
 801fae6:	b940      	cbnz	r0, 801fafa <__gethex+0x182>
 801fae8:	4b65      	ldr	r3, [pc, #404]	; (801fc80 <__gethex+0x308>)
 801faea:	4602      	mov	r2, r0
 801faec:	21de      	movs	r1, #222	; 0xde
 801faee:	4865      	ldr	r0, [pc, #404]	; (801fc84 <__gethex+0x30c>)
 801faf0:	f7fc fdb0 	bl	801c654 <__assert_func>
 801faf4:	3101      	adds	r1, #1
 801faf6:	105b      	asrs	r3, r3, #1
 801faf8:	e7ee      	b.n	801fad8 <__gethex+0x160>
 801fafa:	f100 0914 	add.w	r9, r0, #20
 801fafe:	f04f 0b00 	mov.w	fp, #0
 801fb02:	f1ca 0301 	rsb	r3, sl, #1
 801fb06:	f8cd 9008 	str.w	r9, [sp, #8]
 801fb0a:	f8cd b000 	str.w	fp, [sp]
 801fb0e:	9306      	str	r3, [sp, #24]
 801fb10:	42b7      	cmp	r7, r6
 801fb12:	d340      	bcc.n	801fb96 <__gethex+0x21e>
 801fb14:	9802      	ldr	r0, [sp, #8]
 801fb16:	9b00      	ldr	r3, [sp, #0]
 801fb18:	f840 3b04 	str.w	r3, [r0], #4
 801fb1c:	eba0 0009 	sub.w	r0, r0, r9
 801fb20:	1080      	asrs	r0, r0, #2
 801fb22:	0146      	lsls	r6, r0, #5
 801fb24:	6120      	str	r0, [r4, #16]
 801fb26:	4618      	mov	r0, r3
 801fb28:	f000 fbae 	bl	8020288 <__hi0bits>
 801fb2c:	1a30      	subs	r0, r6, r0
 801fb2e:	f8d8 6000 	ldr.w	r6, [r8]
 801fb32:	42b0      	cmp	r0, r6
 801fb34:	dd63      	ble.n	801fbfe <__gethex+0x286>
 801fb36:	1b87      	subs	r7, r0, r6
 801fb38:	4639      	mov	r1, r7
 801fb3a:	4620      	mov	r0, r4
 801fb3c:	f000 ff49 	bl	80209d2 <__any_on>
 801fb40:	4682      	mov	sl, r0
 801fb42:	b1a8      	cbz	r0, 801fb70 <__gethex+0x1f8>
 801fb44:	1e7b      	subs	r3, r7, #1
 801fb46:	1159      	asrs	r1, r3, #5
 801fb48:	f003 021f 	and.w	r2, r3, #31
 801fb4c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801fb50:	f04f 0a01 	mov.w	sl, #1
 801fb54:	fa0a f202 	lsl.w	r2, sl, r2
 801fb58:	420a      	tst	r2, r1
 801fb5a:	d009      	beq.n	801fb70 <__gethex+0x1f8>
 801fb5c:	4553      	cmp	r3, sl
 801fb5e:	dd05      	ble.n	801fb6c <__gethex+0x1f4>
 801fb60:	1eb9      	subs	r1, r7, #2
 801fb62:	4620      	mov	r0, r4
 801fb64:	f000 ff35 	bl	80209d2 <__any_on>
 801fb68:	2800      	cmp	r0, #0
 801fb6a:	d145      	bne.n	801fbf8 <__gethex+0x280>
 801fb6c:	f04f 0a02 	mov.w	sl, #2
 801fb70:	4639      	mov	r1, r7
 801fb72:	4620      	mov	r0, r4
 801fb74:	f7ff fe99 	bl	801f8aa <rshift>
 801fb78:	443d      	add	r5, r7
 801fb7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801fb7e:	42ab      	cmp	r3, r5
 801fb80:	da4c      	bge.n	801fc1c <__gethex+0x2a4>
 801fb82:	ee18 0a10 	vmov	r0, s16
 801fb86:	4621      	mov	r1, r4
 801fb88:	f000 fac8 	bl	802011c <_Bfree>
 801fb8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fb8e:	2300      	movs	r3, #0
 801fb90:	6013      	str	r3, [r2, #0]
 801fb92:	27a3      	movs	r7, #163	; 0xa3
 801fb94:	e785      	b.n	801faa2 <__gethex+0x12a>
 801fb96:	1e73      	subs	r3, r6, #1
 801fb98:	9a05      	ldr	r2, [sp, #20]
 801fb9a:	9303      	str	r3, [sp, #12]
 801fb9c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801fba0:	4293      	cmp	r3, r2
 801fba2:	d019      	beq.n	801fbd8 <__gethex+0x260>
 801fba4:	f1bb 0f20 	cmp.w	fp, #32
 801fba8:	d107      	bne.n	801fbba <__gethex+0x242>
 801fbaa:	9b02      	ldr	r3, [sp, #8]
 801fbac:	9a00      	ldr	r2, [sp, #0]
 801fbae:	f843 2b04 	str.w	r2, [r3], #4
 801fbb2:	9302      	str	r3, [sp, #8]
 801fbb4:	2300      	movs	r3, #0
 801fbb6:	9300      	str	r3, [sp, #0]
 801fbb8:	469b      	mov	fp, r3
 801fbba:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801fbbe:	f7ff fec6 	bl	801f94e <__hexdig_fun>
 801fbc2:	9b00      	ldr	r3, [sp, #0]
 801fbc4:	f000 000f 	and.w	r0, r0, #15
 801fbc8:	fa00 f00b 	lsl.w	r0, r0, fp
 801fbcc:	4303      	orrs	r3, r0
 801fbce:	9300      	str	r3, [sp, #0]
 801fbd0:	f10b 0b04 	add.w	fp, fp, #4
 801fbd4:	9b03      	ldr	r3, [sp, #12]
 801fbd6:	e00d      	b.n	801fbf4 <__gethex+0x27c>
 801fbd8:	9b03      	ldr	r3, [sp, #12]
 801fbda:	9a06      	ldr	r2, [sp, #24]
 801fbdc:	4413      	add	r3, r2
 801fbde:	42bb      	cmp	r3, r7
 801fbe0:	d3e0      	bcc.n	801fba4 <__gethex+0x22c>
 801fbe2:	4618      	mov	r0, r3
 801fbe4:	9901      	ldr	r1, [sp, #4]
 801fbe6:	9307      	str	r3, [sp, #28]
 801fbe8:	4652      	mov	r2, sl
 801fbea:	f7fd ff17 	bl	801da1c <strncmp>
 801fbee:	9b07      	ldr	r3, [sp, #28]
 801fbf0:	2800      	cmp	r0, #0
 801fbf2:	d1d7      	bne.n	801fba4 <__gethex+0x22c>
 801fbf4:	461e      	mov	r6, r3
 801fbf6:	e78b      	b.n	801fb10 <__gethex+0x198>
 801fbf8:	f04f 0a03 	mov.w	sl, #3
 801fbfc:	e7b8      	b.n	801fb70 <__gethex+0x1f8>
 801fbfe:	da0a      	bge.n	801fc16 <__gethex+0x29e>
 801fc00:	1a37      	subs	r7, r6, r0
 801fc02:	4621      	mov	r1, r4
 801fc04:	ee18 0a10 	vmov	r0, s16
 801fc08:	463a      	mov	r2, r7
 801fc0a:	f000 fca3 	bl	8020554 <__lshift>
 801fc0e:	1bed      	subs	r5, r5, r7
 801fc10:	4604      	mov	r4, r0
 801fc12:	f100 0914 	add.w	r9, r0, #20
 801fc16:	f04f 0a00 	mov.w	sl, #0
 801fc1a:	e7ae      	b.n	801fb7a <__gethex+0x202>
 801fc1c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801fc20:	42a8      	cmp	r0, r5
 801fc22:	dd72      	ble.n	801fd0a <__gethex+0x392>
 801fc24:	1b45      	subs	r5, r0, r5
 801fc26:	42ae      	cmp	r6, r5
 801fc28:	dc36      	bgt.n	801fc98 <__gethex+0x320>
 801fc2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801fc2e:	2b02      	cmp	r3, #2
 801fc30:	d02a      	beq.n	801fc88 <__gethex+0x310>
 801fc32:	2b03      	cmp	r3, #3
 801fc34:	d02c      	beq.n	801fc90 <__gethex+0x318>
 801fc36:	2b01      	cmp	r3, #1
 801fc38:	d115      	bne.n	801fc66 <__gethex+0x2ee>
 801fc3a:	42ae      	cmp	r6, r5
 801fc3c:	d113      	bne.n	801fc66 <__gethex+0x2ee>
 801fc3e:	2e01      	cmp	r6, #1
 801fc40:	d10b      	bne.n	801fc5a <__gethex+0x2e2>
 801fc42:	9a04      	ldr	r2, [sp, #16]
 801fc44:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801fc48:	6013      	str	r3, [r2, #0]
 801fc4a:	2301      	movs	r3, #1
 801fc4c:	6123      	str	r3, [r4, #16]
 801fc4e:	f8c9 3000 	str.w	r3, [r9]
 801fc52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fc54:	2762      	movs	r7, #98	; 0x62
 801fc56:	601c      	str	r4, [r3, #0]
 801fc58:	e723      	b.n	801faa2 <__gethex+0x12a>
 801fc5a:	1e71      	subs	r1, r6, #1
 801fc5c:	4620      	mov	r0, r4
 801fc5e:	f000 feb8 	bl	80209d2 <__any_on>
 801fc62:	2800      	cmp	r0, #0
 801fc64:	d1ed      	bne.n	801fc42 <__gethex+0x2ca>
 801fc66:	ee18 0a10 	vmov	r0, s16
 801fc6a:	4621      	mov	r1, r4
 801fc6c:	f000 fa56 	bl	802011c <_Bfree>
 801fc70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fc72:	2300      	movs	r3, #0
 801fc74:	6013      	str	r3, [r2, #0]
 801fc76:	2750      	movs	r7, #80	; 0x50
 801fc78:	e713      	b.n	801faa2 <__gethex+0x12a>
 801fc7a:	bf00      	nop
 801fc7c:	0802aa30 	.word	0x0802aa30
 801fc80:	0802a953 	.word	0x0802a953
 801fc84:	0802a9c4 	.word	0x0802a9c4
 801fc88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fc8a:	2b00      	cmp	r3, #0
 801fc8c:	d1eb      	bne.n	801fc66 <__gethex+0x2ee>
 801fc8e:	e7d8      	b.n	801fc42 <__gethex+0x2ca>
 801fc90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fc92:	2b00      	cmp	r3, #0
 801fc94:	d1d5      	bne.n	801fc42 <__gethex+0x2ca>
 801fc96:	e7e6      	b.n	801fc66 <__gethex+0x2ee>
 801fc98:	1e6f      	subs	r7, r5, #1
 801fc9a:	f1ba 0f00 	cmp.w	sl, #0
 801fc9e:	d131      	bne.n	801fd04 <__gethex+0x38c>
 801fca0:	b127      	cbz	r7, 801fcac <__gethex+0x334>
 801fca2:	4639      	mov	r1, r7
 801fca4:	4620      	mov	r0, r4
 801fca6:	f000 fe94 	bl	80209d2 <__any_on>
 801fcaa:	4682      	mov	sl, r0
 801fcac:	117b      	asrs	r3, r7, #5
 801fcae:	2101      	movs	r1, #1
 801fcb0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801fcb4:	f007 071f 	and.w	r7, r7, #31
 801fcb8:	fa01 f707 	lsl.w	r7, r1, r7
 801fcbc:	421f      	tst	r7, r3
 801fcbe:	4629      	mov	r1, r5
 801fcc0:	4620      	mov	r0, r4
 801fcc2:	bf18      	it	ne
 801fcc4:	f04a 0a02 	orrne.w	sl, sl, #2
 801fcc8:	1b76      	subs	r6, r6, r5
 801fcca:	f7ff fdee 	bl	801f8aa <rshift>
 801fcce:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801fcd2:	2702      	movs	r7, #2
 801fcd4:	f1ba 0f00 	cmp.w	sl, #0
 801fcd8:	d048      	beq.n	801fd6c <__gethex+0x3f4>
 801fcda:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801fcde:	2b02      	cmp	r3, #2
 801fce0:	d015      	beq.n	801fd0e <__gethex+0x396>
 801fce2:	2b03      	cmp	r3, #3
 801fce4:	d017      	beq.n	801fd16 <__gethex+0x39e>
 801fce6:	2b01      	cmp	r3, #1
 801fce8:	d109      	bne.n	801fcfe <__gethex+0x386>
 801fcea:	f01a 0f02 	tst.w	sl, #2
 801fcee:	d006      	beq.n	801fcfe <__gethex+0x386>
 801fcf0:	f8d9 0000 	ldr.w	r0, [r9]
 801fcf4:	ea4a 0a00 	orr.w	sl, sl, r0
 801fcf8:	f01a 0f01 	tst.w	sl, #1
 801fcfc:	d10e      	bne.n	801fd1c <__gethex+0x3a4>
 801fcfe:	f047 0710 	orr.w	r7, r7, #16
 801fd02:	e033      	b.n	801fd6c <__gethex+0x3f4>
 801fd04:	f04f 0a01 	mov.w	sl, #1
 801fd08:	e7d0      	b.n	801fcac <__gethex+0x334>
 801fd0a:	2701      	movs	r7, #1
 801fd0c:	e7e2      	b.n	801fcd4 <__gethex+0x35c>
 801fd0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fd10:	f1c3 0301 	rsb	r3, r3, #1
 801fd14:	9315      	str	r3, [sp, #84]	; 0x54
 801fd16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fd18:	2b00      	cmp	r3, #0
 801fd1a:	d0f0      	beq.n	801fcfe <__gethex+0x386>
 801fd1c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801fd20:	f104 0314 	add.w	r3, r4, #20
 801fd24:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801fd28:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801fd2c:	f04f 0c00 	mov.w	ip, #0
 801fd30:	4618      	mov	r0, r3
 801fd32:	f853 2b04 	ldr.w	r2, [r3], #4
 801fd36:	f1b2 3fff 	cmp.w	r2, #4294967295
 801fd3a:	d01c      	beq.n	801fd76 <__gethex+0x3fe>
 801fd3c:	3201      	adds	r2, #1
 801fd3e:	6002      	str	r2, [r0, #0]
 801fd40:	2f02      	cmp	r7, #2
 801fd42:	f104 0314 	add.w	r3, r4, #20
 801fd46:	d13f      	bne.n	801fdc8 <__gethex+0x450>
 801fd48:	f8d8 2000 	ldr.w	r2, [r8]
 801fd4c:	3a01      	subs	r2, #1
 801fd4e:	42b2      	cmp	r2, r6
 801fd50:	d10a      	bne.n	801fd68 <__gethex+0x3f0>
 801fd52:	1171      	asrs	r1, r6, #5
 801fd54:	2201      	movs	r2, #1
 801fd56:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801fd5a:	f006 061f 	and.w	r6, r6, #31
 801fd5e:	fa02 f606 	lsl.w	r6, r2, r6
 801fd62:	421e      	tst	r6, r3
 801fd64:	bf18      	it	ne
 801fd66:	4617      	movne	r7, r2
 801fd68:	f047 0720 	orr.w	r7, r7, #32
 801fd6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fd6e:	601c      	str	r4, [r3, #0]
 801fd70:	9b04      	ldr	r3, [sp, #16]
 801fd72:	601d      	str	r5, [r3, #0]
 801fd74:	e695      	b.n	801faa2 <__gethex+0x12a>
 801fd76:	4299      	cmp	r1, r3
 801fd78:	f843 cc04 	str.w	ip, [r3, #-4]
 801fd7c:	d8d8      	bhi.n	801fd30 <__gethex+0x3b8>
 801fd7e:	68a3      	ldr	r3, [r4, #8]
 801fd80:	459b      	cmp	fp, r3
 801fd82:	db19      	blt.n	801fdb8 <__gethex+0x440>
 801fd84:	6861      	ldr	r1, [r4, #4]
 801fd86:	ee18 0a10 	vmov	r0, s16
 801fd8a:	3101      	adds	r1, #1
 801fd8c:	f000 f986 	bl	802009c <_Balloc>
 801fd90:	4681      	mov	r9, r0
 801fd92:	b918      	cbnz	r0, 801fd9c <__gethex+0x424>
 801fd94:	4b1a      	ldr	r3, [pc, #104]	; (801fe00 <__gethex+0x488>)
 801fd96:	4602      	mov	r2, r0
 801fd98:	2184      	movs	r1, #132	; 0x84
 801fd9a:	e6a8      	b.n	801faee <__gethex+0x176>
 801fd9c:	6922      	ldr	r2, [r4, #16]
 801fd9e:	3202      	adds	r2, #2
 801fda0:	f104 010c 	add.w	r1, r4, #12
 801fda4:	0092      	lsls	r2, r2, #2
 801fda6:	300c      	adds	r0, #12
 801fda8:	f7fc fcc6 	bl	801c738 <memcpy>
 801fdac:	4621      	mov	r1, r4
 801fdae:	ee18 0a10 	vmov	r0, s16
 801fdb2:	f000 f9b3 	bl	802011c <_Bfree>
 801fdb6:	464c      	mov	r4, r9
 801fdb8:	6923      	ldr	r3, [r4, #16]
 801fdba:	1c5a      	adds	r2, r3, #1
 801fdbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801fdc0:	6122      	str	r2, [r4, #16]
 801fdc2:	2201      	movs	r2, #1
 801fdc4:	615a      	str	r2, [r3, #20]
 801fdc6:	e7bb      	b.n	801fd40 <__gethex+0x3c8>
 801fdc8:	6922      	ldr	r2, [r4, #16]
 801fdca:	455a      	cmp	r2, fp
 801fdcc:	dd0b      	ble.n	801fde6 <__gethex+0x46e>
 801fdce:	2101      	movs	r1, #1
 801fdd0:	4620      	mov	r0, r4
 801fdd2:	f7ff fd6a 	bl	801f8aa <rshift>
 801fdd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801fdda:	3501      	adds	r5, #1
 801fddc:	42ab      	cmp	r3, r5
 801fdde:	f6ff aed0 	blt.w	801fb82 <__gethex+0x20a>
 801fde2:	2701      	movs	r7, #1
 801fde4:	e7c0      	b.n	801fd68 <__gethex+0x3f0>
 801fde6:	f016 061f 	ands.w	r6, r6, #31
 801fdea:	d0fa      	beq.n	801fde2 <__gethex+0x46a>
 801fdec:	449a      	add	sl, r3
 801fdee:	f1c6 0620 	rsb	r6, r6, #32
 801fdf2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801fdf6:	f000 fa47 	bl	8020288 <__hi0bits>
 801fdfa:	42b0      	cmp	r0, r6
 801fdfc:	dbe7      	blt.n	801fdce <__gethex+0x456>
 801fdfe:	e7f0      	b.n	801fde2 <__gethex+0x46a>
 801fe00:	0802a953 	.word	0x0802a953

0801fe04 <L_shift>:
 801fe04:	f1c2 0208 	rsb	r2, r2, #8
 801fe08:	0092      	lsls	r2, r2, #2
 801fe0a:	b570      	push	{r4, r5, r6, lr}
 801fe0c:	f1c2 0620 	rsb	r6, r2, #32
 801fe10:	6843      	ldr	r3, [r0, #4]
 801fe12:	6804      	ldr	r4, [r0, #0]
 801fe14:	fa03 f506 	lsl.w	r5, r3, r6
 801fe18:	432c      	orrs	r4, r5
 801fe1a:	40d3      	lsrs	r3, r2
 801fe1c:	6004      	str	r4, [r0, #0]
 801fe1e:	f840 3f04 	str.w	r3, [r0, #4]!
 801fe22:	4288      	cmp	r0, r1
 801fe24:	d3f4      	bcc.n	801fe10 <L_shift+0xc>
 801fe26:	bd70      	pop	{r4, r5, r6, pc}

0801fe28 <__match>:
 801fe28:	b530      	push	{r4, r5, lr}
 801fe2a:	6803      	ldr	r3, [r0, #0]
 801fe2c:	3301      	adds	r3, #1
 801fe2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fe32:	b914      	cbnz	r4, 801fe3a <__match+0x12>
 801fe34:	6003      	str	r3, [r0, #0]
 801fe36:	2001      	movs	r0, #1
 801fe38:	bd30      	pop	{r4, r5, pc}
 801fe3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fe3e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801fe42:	2d19      	cmp	r5, #25
 801fe44:	bf98      	it	ls
 801fe46:	3220      	addls	r2, #32
 801fe48:	42a2      	cmp	r2, r4
 801fe4a:	d0f0      	beq.n	801fe2e <__match+0x6>
 801fe4c:	2000      	movs	r0, #0
 801fe4e:	e7f3      	b.n	801fe38 <__match+0x10>

0801fe50 <__hexnan>:
 801fe50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe54:	680b      	ldr	r3, [r1, #0]
 801fe56:	6801      	ldr	r1, [r0, #0]
 801fe58:	115e      	asrs	r6, r3, #5
 801fe5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801fe5e:	f013 031f 	ands.w	r3, r3, #31
 801fe62:	b087      	sub	sp, #28
 801fe64:	bf18      	it	ne
 801fe66:	3604      	addne	r6, #4
 801fe68:	2500      	movs	r5, #0
 801fe6a:	1f37      	subs	r7, r6, #4
 801fe6c:	4682      	mov	sl, r0
 801fe6e:	4690      	mov	r8, r2
 801fe70:	9301      	str	r3, [sp, #4]
 801fe72:	f846 5c04 	str.w	r5, [r6, #-4]
 801fe76:	46b9      	mov	r9, r7
 801fe78:	463c      	mov	r4, r7
 801fe7a:	9502      	str	r5, [sp, #8]
 801fe7c:	46ab      	mov	fp, r5
 801fe7e:	784a      	ldrb	r2, [r1, #1]
 801fe80:	1c4b      	adds	r3, r1, #1
 801fe82:	9303      	str	r3, [sp, #12]
 801fe84:	b342      	cbz	r2, 801fed8 <__hexnan+0x88>
 801fe86:	4610      	mov	r0, r2
 801fe88:	9105      	str	r1, [sp, #20]
 801fe8a:	9204      	str	r2, [sp, #16]
 801fe8c:	f7ff fd5f 	bl	801f94e <__hexdig_fun>
 801fe90:	2800      	cmp	r0, #0
 801fe92:	d14f      	bne.n	801ff34 <__hexnan+0xe4>
 801fe94:	9a04      	ldr	r2, [sp, #16]
 801fe96:	9905      	ldr	r1, [sp, #20]
 801fe98:	2a20      	cmp	r2, #32
 801fe9a:	d818      	bhi.n	801fece <__hexnan+0x7e>
 801fe9c:	9b02      	ldr	r3, [sp, #8]
 801fe9e:	459b      	cmp	fp, r3
 801fea0:	dd13      	ble.n	801feca <__hexnan+0x7a>
 801fea2:	454c      	cmp	r4, r9
 801fea4:	d206      	bcs.n	801feb4 <__hexnan+0x64>
 801fea6:	2d07      	cmp	r5, #7
 801fea8:	dc04      	bgt.n	801feb4 <__hexnan+0x64>
 801feaa:	462a      	mov	r2, r5
 801feac:	4649      	mov	r1, r9
 801feae:	4620      	mov	r0, r4
 801feb0:	f7ff ffa8 	bl	801fe04 <L_shift>
 801feb4:	4544      	cmp	r4, r8
 801feb6:	d950      	bls.n	801ff5a <__hexnan+0x10a>
 801feb8:	2300      	movs	r3, #0
 801feba:	f1a4 0904 	sub.w	r9, r4, #4
 801febe:	f844 3c04 	str.w	r3, [r4, #-4]
 801fec2:	f8cd b008 	str.w	fp, [sp, #8]
 801fec6:	464c      	mov	r4, r9
 801fec8:	461d      	mov	r5, r3
 801feca:	9903      	ldr	r1, [sp, #12]
 801fecc:	e7d7      	b.n	801fe7e <__hexnan+0x2e>
 801fece:	2a29      	cmp	r2, #41	; 0x29
 801fed0:	d156      	bne.n	801ff80 <__hexnan+0x130>
 801fed2:	3102      	adds	r1, #2
 801fed4:	f8ca 1000 	str.w	r1, [sl]
 801fed8:	f1bb 0f00 	cmp.w	fp, #0
 801fedc:	d050      	beq.n	801ff80 <__hexnan+0x130>
 801fede:	454c      	cmp	r4, r9
 801fee0:	d206      	bcs.n	801fef0 <__hexnan+0xa0>
 801fee2:	2d07      	cmp	r5, #7
 801fee4:	dc04      	bgt.n	801fef0 <__hexnan+0xa0>
 801fee6:	462a      	mov	r2, r5
 801fee8:	4649      	mov	r1, r9
 801feea:	4620      	mov	r0, r4
 801feec:	f7ff ff8a 	bl	801fe04 <L_shift>
 801fef0:	4544      	cmp	r4, r8
 801fef2:	d934      	bls.n	801ff5e <__hexnan+0x10e>
 801fef4:	f1a8 0204 	sub.w	r2, r8, #4
 801fef8:	4623      	mov	r3, r4
 801fefa:	f853 1b04 	ldr.w	r1, [r3], #4
 801fefe:	f842 1f04 	str.w	r1, [r2, #4]!
 801ff02:	429f      	cmp	r7, r3
 801ff04:	d2f9      	bcs.n	801fefa <__hexnan+0xaa>
 801ff06:	1b3b      	subs	r3, r7, r4
 801ff08:	f023 0303 	bic.w	r3, r3, #3
 801ff0c:	3304      	adds	r3, #4
 801ff0e:	3401      	adds	r4, #1
 801ff10:	3e03      	subs	r6, #3
 801ff12:	42b4      	cmp	r4, r6
 801ff14:	bf88      	it	hi
 801ff16:	2304      	movhi	r3, #4
 801ff18:	4443      	add	r3, r8
 801ff1a:	2200      	movs	r2, #0
 801ff1c:	f843 2b04 	str.w	r2, [r3], #4
 801ff20:	429f      	cmp	r7, r3
 801ff22:	d2fb      	bcs.n	801ff1c <__hexnan+0xcc>
 801ff24:	683b      	ldr	r3, [r7, #0]
 801ff26:	b91b      	cbnz	r3, 801ff30 <__hexnan+0xe0>
 801ff28:	4547      	cmp	r7, r8
 801ff2a:	d127      	bne.n	801ff7c <__hexnan+0x12c>
 801ff2c:	2301      	movs	r3, #1
 801ff2e:	603b      	str	r3, [r7, #0]
 801ff30:	2005      	movs	r0, #5
 801ff32:	e026      	b.n	801ff82 <__hexnan+0x132>
 801ff34:	3501      	adds	r5, #1
 801ff36:	2d08      	cmp	r5, #8
 801ff38:	f10b 0b01 	add.w	fp, fp, #1
 801ff3c:	dd06      	ble.n	801ff4c <__hexnan+0xfc>
 801ff3e:	4544      	cmp	r4, r8
 801ff40:	d9c3      	bls.n	801feca <__hexnan+0x7a>
 801ff42:	2300      	movs	r3, #0
 801ff44:	f844 3c04 	str.w	r3, [r4, #-4]
 801ff48:	2501      	movs	r5, #1
 801ff4a:	3c04      	subs	r4, #4
 801ff4c:	6822      	ldr	r2, [r4, #0]
 801ff4e:	f000 000f 	and.w	r0, r0, #15
 801ff52:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801ff56:	6022      	str	r2, [r4, #0]
 801ff58:	e7b7      	b.n	801feca <__hexnan+0x7a>
 801ff5a:	2508      	movs	r5, #8
 801ff5c:	e7b5      	b.n	801feca <__hexnan+0x7a>
 801ff5e:	9b01      	ldr	r3, [sp, #4]
 801ff60:	2b00      	cmp	r3, #0
 801ff62:	d0df      	beq.n	801ff24 <__hexnan+0xd4>
 801ff64:	f04f 32ff 	mov.w	r2, #4294967295
 801ff68:	f1c3 0320 	rsb	r3, r3, #32
 801ff6c:	fa22 f303 	lsr.w	r3, r2, r3
 801ff70:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801ff74:	401a      	ands	r2, r3
 801ff76:	f846 2c04 	str.w	r2, [r6, #-4]
 801ff7a:	e7d3      	b.n	801ff24 <__hexnan+0xd4>
 801ff7c:	3f04      	subs	r7, #4
 801ff7e:	e7d1      	b.n	801ff24 <__hexnan+0xd4>
 801ff80:	2004      	movs	r0, #4
 801ff82:	b007      	add	sp, #28
 801ff84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ff88 <_localeconv_r>:
 801ff88:	4800      	ldr	r0, [pc, #0]	; (801ff8c <_localeconv_r+0x4>)
 801ff8a:	4770      	bx	lr
 801ff8c:	2400a2e8 	.word	0x2400a2e8

0801ff90 <__retarget_lock_init_recursive>:
 801ff90:	4770      	bx	lr

0801ff92 <__retarget_lock_acquire_recursive>:
 801ff92:	4770      	bx	lr

0801ff94 <__retarget_lock_release_recursive>:
 801ff94:	4770      	bx	lr

0801ff96 <__swhatbuf_r>:
 801ff96:	b570      	push	{r4, r5, r6, lr}
 801ff98:	460e      	mov	r6, r1
 801ff9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ff9e:	2900      	cmp	r1, #0
 801ffa0:	b096      	sub	sp, #88	; 0x58
 801ffa2:	4614      	mov	r4, r2
 801ffa4:	461d      	mov	r5, r3
 801ffa6:	da07      	bge.n	801ffb8 <__swhatbuf_r+0x22>
 801ffa8:	2300      	movs	r3, #0
 801ffaa:	602b      	str	r3, [r5, #0]
 801ffac:	89b3      	ldrh	r3, [r6, #12]
 801ffae:	061a      	lsls	r2, r3, #24
 801ffb0:	d410      	bmi.n	801ffd4 <__swhatbuf_r+0x3e>
 801ffb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ffb6:	e00e      	b.n	801ffd6 <__swhatbuf_r+0x40>
 801ffb8:	466a      	mov	r2, sp
 801ffba:	f000 ff7b 	bl	8020eb4 <_fstat_r>
 801ffbe:	2800      	cmp	r0, #0
 801ffc0:	dbf2      	blt.n	801ffa8 <__swhatbuf_r+0x12>
 801ffc2:	9a01      	ldr	r2, [sp, #4]
 801ffc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ffc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ffcc:	425a      	negs	r2, r3
 801ffce:	415a      	adcs	r2, r3
 801ffd0:	602a      	str	r2, [r5, #0]
 801ffd2:	e7ee      	b.n	801ffb2 <__swhatbuf_r+0x1c>
 801ffd4:	2340      	movs	r3, #64	; 0x40
 801ffd6:	2000      	movs	r0, #0
 801ffd8:	6023      	str	r3, [r4, #0]
 801ffda:	b016      	add	sp, #88	; 0x58
 801ffdc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ffe0 <__smakebuf_r>:
 801ffe0:	898b      	ldrh	r3, [r1, #12]
 801ffe2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ffe4:	079d      	lsls	r5, r3, #30
 801ffe6:	4606      	mov	r6, r0
 801ffe8:	460c      	mov	r4, r1
 801ffea:	d507      	bpl.n	801fffc <__smakebuf_r+0x1c>
 801ffec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801fff0:	6023      	str	r3, [r4, #0]
 801fff2:	6123      	str	r3, [r4, #16]
 801fff4:	2301      	movs	r3, #1
 801fff6:	6163      	str	r3, [r4, #20]
 801fff8:	b002      	add	sp, #8
 801fffa:	bd70      	pop	{r4, r5, r6, pc}
 801fffc:	ab01      	add	r3, sp, #4
 801fffe:	466a      	mov	r2, sp
 8020000:	f7ff ffc9 	bl	801ff96 <__swhatbuf_r>
 8020004:	9900      	ldr	r1, [sp, #0]
 8020006:	4605      	mov	r5, r0
 8020008:	4630      	mov	r0, r6
 802000a:	f7fc fc15 	bl	801c838 <_malloc_r>
 802000e:	b948      	cbnz	r0, 8020024 <__smakebuf_r+0x44>
 8020010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020014:	059a      	lsls	r2, r3, #22
 8020016:	d4ef      	bmi.n	801fff8 <__smakebuf_r+0x18>
 8020018:	f023 0303 	bic.w	r3, r3, #3
 802001c:	f043 0302 	orr.w	r3, r3, #2
 8020020:	81a3      	strh	r3, [r4, #12]
 8020022:	e7e3      	b.n	801ffec <__smakebuf_r+0xc>
 8020024:	4b0d      	ldr	r3, [pc, #52]	; (802005c <__smakebuf_r+0x7c>)
 8020026:	62b3      	str	r3, [r6, #40]	; 0x28
 8020028:	89a3      	ldrh	r3, [r4, #12]
 802002a:	6020      	str	r0, [r4, #0]
 802002c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020030:	81a3      	strh	r3, [r4, #12]
 8020032:	9b00      	ldr	r3, [sp, #0]
 8020034:	6163      	str	r3, [r4, #20]
 8020036:	9b01      	ldr	r3, [sp, #4]
 8020038:	6120      	str	r0, [r4, #16]
 802003a:	b15b      	cbz	r3, 8020054 <__smakebuf_r+0x74>
 802003c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020040:	4630      	mov	r0, r6
 8020042:	f000 ff49 	bl	8020ed8 <_isatty_r>
 8020046:	b128      	cbz	r0, 8020054 <__smakebuf_r+0x74>
 8020048:	89a3      	ldrh	r3, [r4, #12]
 802004a:	f023 0303 	bic.w	r3, r3, #3
 802004e:	f043 0301 	orr.w	r3, r3, #1
 8020052:	81a3      	strh	r3, [r4, #12]
 8020054:	89a0      	ldrh	r0, [r4, #12]
 8020056:	4305      	orrs	r5, r0
 8020058:	81a5      	strh	r5, [r4, #12]
 802005a:	e7cd      	b.n	801fff8 <__smakebuf_r+0x18>
 802005c:	0801f709 	.word	0x0801f709

08020060 <__ascii_mbtowc>:
 8020060:	b082      	sub	sp, #8
 8020062:	b901      	cbnz	r1, 8020066 <__ascii_mbtowc+0x6>
 8020064:	a901      	add	r1, sp, #4
 8020066:	b142      	cbz	r2, 802007a <__ascii_mbtowc+0x1a>
 8020068:	b14b      	cbz	r3, 802007e <__ascii_mbtowc+0x1e>
 802006a:	7813      	ldrb	r3, [r2, #0]
 802006c:	600b      	str	r3, [r1, #0]
 802006e:	7812      	ldrb	r2, [r2, #0]
 8020070:	1e10      	subs	r0, r2, #0
 8020072:	bf18      	it	ne
 8020074:	2001      	movne	r0, #1
 8020076:	b002      	add	sp, #8
 8020078:	4770      	bx	lr
 802007a:	4610      	mov	r0, r2
 802007c:	e7fb      	b.n	8020076 <__ascii_mbtowc+0x16>
 802007e:	f06f 0001 	mvn.w	r0, #1
 8020082:	e7f8      	b.n	8020076 <__ascii_mbtowc+0x16>

08020084 <__malloc_lock>:
 8020084:	4801      	ldr	r0, [pc, #4]	; (802008c <__malloc_lock+0x8>)
 8020086:	f7ff bf84 	b.w	801ff92 <__retarget_lock_acquire_recursive>
 802008a:	bf00      	nop
 802008c:	240147e8 	.word	0x240147e8

08020090 <__malloc_unlock>:
 8020090:	4801      	ldr	r0, [pc, #4]	; (8020098 <__malloc_unlock+0x8>)
 8020092:	f7ff bf7f 	b.w	801ff94 <__retarget_lock_release_recursive>
 8020096:	bf00      	nop
 8020098:	240147e8 	.word	0x240147e8

0802009c <_Balloc>:
 802009c:	b570      	push	{r4, r5, r6, lr}
 802009e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80200a0:	4604      	mov	r4, r0
 80200a2:	460d      	mov	r5, r1
 80200a4:	b976      	cbnz	r6, 80200c4 <_Balloc+0x28>
 80200a6:	2010      	movs	r0, #16
 80200a8:	f7fc fb36 	bl	801c718 <malloc>
 80200ac:	4602      	mov	r2, r0
 80200ae:	6260      	str	r0, [r4, #36]	; 0x24
 80200b0:	b920      	cbnz	r0, 80200bc <_Balloc+0x20>
 80200b2:	4b18      	ldr	r3, [pc, #96]	; (8020114 <_Balloc+0x78>)
 80200b4:	4818      	ldr	r0, [pc, #96]	; (8020118 <_Balloc+0x7c>)
 80200b6:	2166      	movs	r1, #102	; 0x66
 80200b8:	f7fc facc 	bl	801c654 <__assert_func>
 80200bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80200c0:	6006      	str	r6, [r0, #0]
 80200c2:	60c6      	str	r6, [r0, #12]
 80200c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80200c6:	68f3      	ldr	r3, [r6, #12]
 80200c8:	b183      	cbz	r3, 80200ec <_Balloc+0x50>
 80200ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80200cc:	68db      	ldr	r3, [r3, #12]
 80200ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80200d2:	b9b8      	cbnz	r0, 8020104 <_Balloc+0x68>
 80200d4:	2101      	movs	r1, #1
 80200d6:	fa01 f605 	lsl.w	r6, r1, r5
 80200da:	1d72      	adds	r2, r6, #5
 80200dc:	0092      	lsls	r2, r2, #2
 80200de:	4620      	mov	r0, r4
 80200e0:	f000 fc98 	bl	8020a14 <_calloc_r>
 80200e4:	b160      	cbz	r0, 8020100 <_Balloc+0x64>
 80200e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80200ea:	e00e      	b.n	802010a <_Balloc+0x6e>
 80200ec:	2221      	movs	r2, #33	; 0x21
 80200ee:	2104      	movs	r1, #4
 80200f0:	4620      	mov	r0, r4
 80200f2:	f000 fc8f 	bl	8020a14 <_calloc_r>
 80200f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80200f8:	60f0      	str	r0, [r6, #12]
 80200fa:	68db      	ldr	r3, [r3, #12]
 80200fc:	2b00      	cmp	r3, #0
 80200fe:	d1e4      	bne.n	80200ca <_Balloc+0x2e>
 8020100:	2000      	movs	r0, #0
 8020102:	bd70      	pop	{r4, r5, r6, pc}
 8020104:	6802      	ldr	r2, [r0, #0]
 8020106:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802010a:	2300      	movs	r3, #0
 802010c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8020110:	e7f7      	b.n	8020102 <_Balloc+0x66>
 8020112:	bf00      	nop
 8020114:	0802a8dd 	.word	0x0802a8dd
 8020118:	0802aa44 	.word	0x0802aa44

0802011c <_Bfree>:
 802011c:	b570      	push	{r4, r5, r6, lr}
 802011e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020120:	4605      	mov	r5, r0
 8020122:	460c      	mov	r4, r1
 8020124:	b976      	cbnz	r6, 8020144 <_Bfree+0x28>
 8020126:	2010      	movs	r0, #16
 8020128:	f7fc faf6 	bl	801c718 <malloc>
 802012c:	4602      	mov	r2, r0
 802012e:	6268      	str	r0, [r5, #36]	; 0x24
 8020130:	b920      	cbnz	r0, 802013c <_Bfree+0x20>
 8020132:	4b09      	ldr	r3, [pc, #36]	; (8020158 <_Bfree+0x3c>)
 8020134:	4809      	ldr	r0, [pc, #36]	; (802015c <_Bfree+0x40>)
 8020136:	218a      	movs	r1, #138	; 0x8a
 8020138:	f7fc fa8c 	bl	801c654 <__assert_func>
 802013c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020140:	6006      	str	r6, [r0, #0]
 8020142:	60c6      	str	r6, [r0, #12]
 8020144:	b13c      	cbz	r4, 8020156 <_Bfree+0x3a>
 8020146:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8020148:	6862      	ldr	r2, [r4, #4]
 802014a:	68db      	ldr	r3, [r3, #12]
 802014c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020150:	6021      	str	r1, [r4, #0]
 8020152:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8020156:	bd70      	pop	{r4, r5, r6, pc}
 8020158:	0802a8dd 	.word	0x0802a8dd
 802015c:	0802aa44 	.word	0x0802aa44

08020160 <__multadd>:
 8020160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020164:	690e      	ldr	r6, [r1, #16]
 8020166:	4607      	mov	r7, r0
 8020168:	4698      	mov	r8, r3
 802016a:	460c      	mov	r4, r1
 802016c:	f101 0014 	add.w	r0, r1, #20
 8020170:	2300      	movs	r3, #0
 8020172:	6805      	ldr	r5, [r0, #0]
 8020174:	b2a9      	uxth	r1, r5
 8020176:	fb02 8101 	mla	r1, r2, r1, r8
 802017a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 802017e:	0c2d      	lsrs	r5, r5, #16
 8020180:	fb02 c505 	mla	r5, r2, r5, ip
 8020184:	b289      	uxth	r1, r1
 8020186:	3301      	adds	r3, #1
 8020188:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 802018c:	429e      	cmp	r6, r3
 802018e:	f840 1b04 	str.w	r1, [r0], #4
 8020192:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8020196:	dcec      	bgt.n	8020172 <__multadd+0x12>
 8020198:	f1b8 0f00 	cmp.w	r8, #0
 802019c:	d022      	beq.n	80201e4 <__multadd+0x84>
 802019e:	68a3      	ldr	r3, [r4, #8]
 80201a0:	42b3      	cmp	r3, r6
 80201a2:	dc19      	bgt.n	80201d8 <__multadd+0x78>
 80201a4:	6861      	ldr	r1, [r4, #4]
 80201a6:	4638      	mov	r0, r7
 80201a8:	3101      	adds	r1, #1
 80201aa:	f7ff ff77 	bl	802009c <_Balloc>
 80201ae:	4605      	mov	r5, r0
 80201b0:	b928      	cbnz	r0, 80201be <__multadd+0x5e>
 80201b2:	4602      	mov	r2, r0
 80201b4:	4b0d      	ldr	r3, [pc, #52]	; (80201ec <__multadd+0x8c>)
 80201b6:	480e      	ldr	r0, [pc, #56]	; (80201f0 <__multadd+0x90>)
 80201b8:	21b5      	movs	r1, #181	; 0xb5
 80201ba:	f7fc fa4b 	bl	801c654 <__assert_func>
 80201be:	6922      	ldr	r2, [r4, #16]
 80201c0:	3202      	adds	r2, #2
 80201c2:	f104 010c 	add.w	r1, r4, #12
 80201c6:	0092      	lsls	r2, r2, #2
 80201c8:	300c      	adds	r0, #12
 80201ca:	f7fc fab5 	bl	801c738 <memcpy>
 80201ce:	4621      	mov	r1, r4
 80201d0:	4638      	mov	r0, r7
 80201d2:	f7ff ffa3 	bl	802011c <_Bfree>
 80201d6:	462c      	mov	r4, r5
 80201d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80201dc:	3601      	adds	r6, #1
 80201de:	f8c3 8014 	str.w	r8, [r3, #20]
 80201e2:	6126      	str	r6, [r4, #16]
 80201e4:	4620      	mov	r0, r4
 80201e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80201ea:	bf00      	nop
 80201ec:	0802a953 	.word	0x0802a953
 80201f0:	0802aa44 	.word	0x0802aa44

080201f4 <__s2b>:
 80201f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80201f8:	460c      	mov	r4, r1
 80201fa:	4615      	mov	r5, r2
 80201fc:	461f      	mov	r7, r3
 80201fe:	2209      	movs	r2, #9
 8020200:	3308      	adds	r3, #8
 8020202:	4606      	mov	r6, r0
 8020204:	fb93 f3f2 	sdiv	r3, r3, r2
 8020208:	2100      	movs	r1, #0
 802020a:	2201      	movs	r2, #1
 802020c:	429a      	cmp	r2, r3
 802020e:	db09      	blt.n	8020224 <__s2b+0x30>
 8020210:	4630      	mov	r0, r6
 8020212:	f7ff ff43 	bl	802009c <_Balloc>
 8020216:	b940      	cbnz	r0, 802022a <__s2b+0x36>
 8020218:	4602      	mov	r2, r0
 802021a:	4b19      	ldr	r3, [pc, #100]	; (8020280 <__s2b+0x8c>)
 802021c:	4819      	ldr	r0, [pc, #100]	; (8020284 <__s2b+0x90>)
 802021e:	21ce      	movs	r1, #206	; 0xce
 8020220:	f7fc fa18 	bl	801c654 <__assert_func>
 8020224:	0052      	lsls	r2, r2, #1
 8020226:	3101      	adds	r1, #1
 8020228:	e7f0      	b.n	802020c <__s2b+0x18>
 802022a:	9b08      	ldr	r3, [sp, #32]
 802022c:	6143      	str	r3, [r0, #20]
 802022e:	2d09      	cmp	r5, #9
 8020230:	f04f 0301 	mov.w	r3, #1
 8020234:	6103      	str	r3, [r0, #16]
 8020236:	dd16      	ble.n	8020266 <__s2b+0x72>
 8020238:	f104 0909 	add.w	r9, r4, #9
 802023c:	46c8      	mov	r8, r9
 802023e:	442c      	add	r4, r5
 8020240:	f818 3b01 	ldrb.w	r3, [r8], #1
 8020244:	4601      	mov	r1, r0
 8020246:	3b30      	subs	r3, #48	; 0x30
 8020248:	220a      	movs	r2, #10
 802024a:	4630      	mov	r0, r6
 802024c:	f7ff ff88 	bl	8020160 <__multadd>
 8020250:	45a0      	cmp	r8, r4
 8020252:	d1f5      	bne.n	8020240 <__s2b+0x4c>
 8020254:	f1a5 0408 	sub.w	r4, r5, #8
 8020258:	444c      	add	r4, r9
 802025a:	1b2d      	subs	r5, r5, r4
 802025c:	1963      	adds	r3, r4, r5
 802025e:	42bb      	cmp	r3, r7
 8020260:	db04      	blt.n	802026c <__s2b+0x78>
 8020262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020266:	340a      	adds	r4, #10
 8020268:	2509      	movs	r5, #9
 802026a:	e7f6      	b.n	802025a <__s2b+0x66>
 802026c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8020270:	4601      	mov	r1, r0
 8020272:	3b30      	subs	r3, #48	; 0x30
 8020274:	220a      	movs	r2, #10
 8020276:	4630      	mov	r0, r6
 8020278:	f7ff ff72 	bl	8020160 <__multadd>
 802027c:	e7ee      	b.n	802025c <__s2b+0x68>
 802027e:	bf00      	nop
 8020280:	0802a953 	.word	0x0802a953
 8020284:	0802aa44 	.word	0x0802aa44

08020288 <__hi0bits>:
 8020288:	0c03      	lsrs	r3, r0, #16
 802028a:	041b      	lsls	r3, r3, #16
 802028c:	b9d3      	cbnz	r3, 80202c4 <__hi0bits+0x3c>
 802028e:	0400      	lsls	r0, r0, #16
 8020290:	2310      	movs	r3, #16
 8020292:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8020296:	bf04      	itt	eq
 8020298:	0200      	lsleq	r0, r0, #8
 802029a:	3308      	addeq	r3, #8
 802029c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80202a0:	bf04      	itt	eq
 80202a2:	0100      	lsleq	r0, r0, #4
 80202a4:	3304      	addeq	r3, #4
 80202a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80202aa:	bf04      	itt	eq
 80202ac:	0080      	lsleq	r0, r0, #2
 80202ae:	3302      	addeq	r3, #2
 80202b0:	2800      	cmp	r0, #0
 80202b2:	db05      	blt.n	80202c0 <__hi0bits+0x38>
 80202b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80202b8:	f103 0301 	add.w	r3, r3, #1
 80202bc:	bf08      	it	eq
 80202be:	2320      	moveq	r3, #32
 80202c0:	4618      	mov	r0, r3
 80202c2:	4770      	bx	lr
 80202c4:	2300      	movs	r3, #0
 80202c6:	e7e4      	b.n	8020292 <__hi0bits+0xa>

080202c8 <__lo0bits>:
 80202c8:	6803      	ldr	r3, [r0, #0]
 80202ca:	f013 0207 	ands.w	r2, r3, #7
 80202ce:	4601      	mov	r1, r0
 80202d0:	d00b      	beq.n	80202ea <__lo0bits+0x22>
 80202d2:	07da      	lsls	r2, r3, #31
 80202d4:	d424      	bmi.n	8020320 <__lo0bits+0x58>
 80202d6:	0798      	lsls	r0, r3, #30
 80202d8:	bf49      	itett	mi
 80202da:	085b      	lsrmi	r3, r3, #1
 80202dc:	089b      	lsrpl	r3, r3, #2
 80202de:	2001      	movmi	r0, #1
 80202e0:	600b      	strmi	r3, [r1, #0]
 80202e2:	bf5c      	itt	pl
 80202e4:	600b      	strpl	r3, [r1, #0]
 80202e6:	2002      	movpl	r0, #2
 80202e8:	4770      	bx	lr
 80202ea:	b298      	uxth	r0, r3
 80202ec:	b9b0      	cbnz	r0, 802031c <__lo0bits+0x54>
 80202ee:	0c1b      	lsrs	r3, r3, #16
 80202f0:	2010      	movs	r0, #16
 80202f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80202f6:	bf04      	itt	eq
 80202f8:	0a1b      	lsreq	r3, r3, #8
 80202fa:	3008      	addeq	r0, #8
 80202fc:	071a      	lsls	r2, r3, #28
 80202fe:	bf04      	itt	eq
 8020300:	091b      	lsreq	r3, r3, #4
 8020302:	3004      	addeq	r0, #4
 8020304:	079a      	lsls	r2, r3, #30
 8020306:	bf04      	itt	eq
 8020308:	089b      	lsreq	r3, r3, #2
 802030a:	3002      	addeq	r0, #2
 802030c:	07da      	lsls	r2, r3, #31
 802030e:	d403      	bmi.n	8020318 <__lo0bits+0x50>
 8020310:	085b      	lsrs	r3, r3, #1
 8020312:	f100 0001 	add.w	r0, r0, #1
 8020316:	d005      	beq.n	8020324 <__lo0bits+0x5c>
 8020318:	600b      	str	r3, [r1, #0]
 802031a:	4770      	bx	lr
 802031c:	4610      	mov	r0, r2
 802031e:	e7e8      	b.n	80202f2 <__lo0bits+0x2a>
 8020320:	2000      	movs	r0, #0
 8020322:	4770      	bx	lr
 8020324:	2020      	movs	r0, #32
 8020326:	4770      	bx	lr

08020328 <__i2b>:
 8020328:	b510      	push	{r4, lr}
 802032a:	460c      	mov	r4, r1
 802032c:	2101      	movs	r1, #1
 802032e:	f7ff feb5 	bl	802009c <_Balloc>
 8020332:	4602      	mov	r2, r0
 8020334:	b928      	cbnz	r0, 8020342 <__i2b+0x1a>
 8020336:	4b05      	ldr	r3, [pc, #20]	; (802034c <__i2b+0x24>)
 8020338:	4805      	ldr	r0, [pc, #20]	; (8020350 <__i2b+0x28>)
 802033a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802033e:	f7fc f989 	bl	801c654 <__assert_func>
 8020342:	2301      	movs	r3, #1
 8020344:	6144      	str	r4, [r0, #20]
 8020346:	6103      	str	r3, [r0, #16]
 8020348:	bd10      	pop	{r4, pc}
 802034a:	bf00      	nop
 802034c:	0802a953 	.word	0x0802a953
 8020350:	0802aa44 	.word	0x0802aa44

08020354 <__multiply>:
 8020354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020358:	4614      	mov	r4, r2
 802035a:	690a      	ldr	r2, [r1, #16]
 802035c:	6923      	ldr	r3, [r4, #16]
 802035e:	429a      	cmp	r2, r3
 8020360:	bfb8      	it	lt
 8020362:	460b      	movlt	r3, r1
 8020364:	460d      	mov	r5, r1
 8020366:	bfbc      	itt	lt
 8020368:	4625      	movlt	r5, r4
 802036a:	461c      	movlt	r4, r3
 802036c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8020370:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8020374:	68ab      	ldr	r3, [r5, #8]
 8020376:	6869      	ldr	r1, [r5, #4]
 8020378:	eb0a 0709 	add.w	r7, sl, r9
 802037c:	42bb      	cmp	r3, r7
 802037e:	b085      	sub	sp, #20
 8020380:	bfb8      	it	lt
 8020382:	3101      	addlt	r1, #1
 8020384:	f7ff fe8a 	bl	802009c <_Balloc>
 8020388:	b930      	cbnz	r0, 8020398 <__multiply+0x44>
 802038a:	4602      	mov	r2, r0
 802038c:	4b42      	ldr	r3, [pc, #264]	; (8020498 <__multiply+0x144>)
 802038e:	4843      	ldr	r0, [pc, #268]	; (802049c <__multiply+0x148>)
 8020390:	f240 115d 	movw	r1, #349	; 0x15d
 8020394:	f7fc f95e 	bl	801c654 <__assert_func>
 8020398:	f100 0614 	add.w	r6, r0, #20
 802039c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80203a0:	4633      	mov	r3, r6
 80203a2:	2200      	movs	r2, #0
 80203a4:	4543      	cmp	r3, r8
 80203a6:	d31e      	bcc.n	80203e6 <__multiply+0x92>
 80203a8:	f105 0c14 	add.w	ip, r5, #20
 80203ac:	f104 0314 	add.w	r3, r4, #20
 80203b0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80203b4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80203b8:	9202      	str	r2, [sp, #8]
 80203ba:	ebac 0205 	sub.w	r2, ip, r5
 80203be:	3a15      	subs	r2, #21
 80203c0:	f022 0203 	bic.w	r2, r2, #3
 80203c4:	3204      	adds	r2, #4
 80203c6:	f105 0115 	add.w	r1, r5, #21
 80203ca:	458c      	cmp	ip, r1
 80203cc:	bf38      	it	cc
 80203ce:	2204      	movcc	r2, #4
 80203d0:	9201      	str	r2, [sp, #4]
 80203d2:	9a02      	ldr	r2, [sp, #8]
 80203d4:	9303      	str	r3, [sp, #12]
 80203d6:	429a      	cmp	r2, r3
 80203d8:	d808      	bhi.n	80203ec <__multiply+0x98>
 80203da:	2f00      	cmp	r7, #0
 80203dc:	dc55      	bgt.n	802048a <__multiply+0x136>
 80203de:	6107      	str	r7, [r0, #16]
 80203e0:	b005      	add	sp, #20
 80203e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203e6:	f843 2b04 	str.w	r2, [r3], #4
 80203ea:	e7db      	b.n	80203a4 <__multiply+0x50>
 80203ec:	f8b3 a000 	ldrh.w	sl, [r3]
 80203f0:	f1ba 0f00 	cmp.w	sl, #0
 80203f4:	d020      	beq.n	8020438 <__multiply+0xe4>
 80203f6:	f105 0e14 	add.w	lr, r5, #20
 80203fa:	46b1      	mov	r9, r6
 80203fc:	2200      	movs	r2, #0
 80203fe:	f85e 4b04 	ldr.w	r4, [lr], #4
 8020402:	f8d9 b000 	ldr.w	fp, [r9]
 8020406:	b2a1      	uxth	r1, r4
 8020408:	fa1f fb8b 	uxth.w	fp, fp
 802040c:	fb0a b101 	mla	r1, sl, r1, fp
 8020410:	4411      	add	r1, r2
 8020412:	f8d9 2000 	ldr.w	r2, [r9]
 8020416:	0c24      	lsrs	r4, r4, #16
 8020418:	0c12      	lsrs	r2, r2, #16
 802041a:	fb0a 2404 	mla	r4, sl, r4, r2
 802041e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8020422:	b289      	uxth	r1, r1
 8020424:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8020428:	45f4      	cmp	ip, lr
 802042a:	f849 1b04 	str.w	r1, [r9], #4
 802042e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8020432:	d8e4      	bhi.n	80203fe <__multiply+0xaa>
 8020434:	9901      	ldr	r1, [sp, #4]
 8020436:	5072      	str	r2, [r6, r1]
 8020438:	9a03      	ldr	r2, [sp, #12]
 802043a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802043e:	3304      	adds	r3, #4
 8020440:	f1b9 0f00 	cmp.w	r9, #0
 8020444:	d01f      	beq.n	8020486 <__multiply+0x132>
 8020446:	6834      	ldr	r4, [r6, #0]
 8020448:	f105 0114 	add.w	r1, r5, #20
 802044c:	46b6      	mov	lr, r6
 802044e:	f04f 0a00 	mov.w	sl, #0
 8020452:	880a      	ldrh	r2, [r1, #0]
 8020454:	f8be b002 	ldrh.w	fp, [lr, #2]
 8020458:	fb09 b202 	mla	r2, r9, r2, fp
 802045c:	4492      	add	sl, r2
 802045e:	b2a4      	uxth	r4, r4
 8020460:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8020464:	f84e 4b04 	str.w	r4, [lr], #4
 8020468:	f851 4b04 	ldr.w	r4, [r1], #4
 802046c:	f8be 2000 	ldrh.w	r2, [lr]
 8020470:	0c24      	lsrs	r4, r4, #16
 8020472:	fb09 2404 	mla	r4, r9, r4, r2
 8020476:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 802047a:	458c      	cmp	ip, r1
 802047c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8020480:	d8e7      	bhi.n	8020452 <__multiply+0xfe>
 8020482:	9a01      	ldr	r2, [sp, #4]
 8020484:	50b4      	str	r4, [r6, r2]
 8020486:	3604      	adds	r6, #4
 8020488:	e7a3      	b.n	80203d2 <__multiply+0x7e>
 802048a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802048e:	2b00      	cmp	r3, #0
 8020490:	d1a5      	bne.n	80203de <__multiply+0x8a>
 8020492:	3f01      	subs	r7, #1
 8020494:	e7a1      	b.n	80203da <__multiply+0x86>
 8020496:	bf00      	nop
 8020498:	0802a953 	.word	0x0802a953
 802049c:	0802aa44 	.word	0x0802aa44

080204a0 <__pow5mult>:
 80204a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80204a4:	4615      	mov	r5, r2
 80204a6:	f012 0203 	ands.w	r2, r2, #3
 80204aa:	4606      	mov	r6, r0
 80204ac:	460f      	mov	r7, r1
 80204ae:	d007      	beq.n	80204c0 <__pow5mult+0x20>
 80204b0:	4c25      	ldr	r4, [pc, #148]	; (8020548 <__pow5mult+0xa8>)
 80204b2:	3a01      	subs	r2, #1
 80204b4:	2300      	movs	r3, #0
 80204b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80204ba:	f7ff fe51 	bl	8020160 <__multadd>
 80204be:	4607      	mov	r7, r0
 80204c0:	10ad      	asrs	r5, r5, #2
 80204c2:	d03d      	beq.n	8020540 <__pow5mult+0xa0>
 80204c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80204c6:	b97c      	cbnz	r4, 80204e8 <__pow5mult+0x48>
 80204c8:	2010      	movs	r0, #16
 80204ca:	f7fc f925 	bl	801c718 <malloc>
 80204ce:	4602      	mov	r2, r0
 80204d0:	6270      	str	r0, [r6, #36]	; 0x24
 80204d2:	b928      	cbnz	r0, 80204e0 <__pow5mult+0x40>
 80204d4:	4b1d      	ldr	r3, [pc, #116]	; (802054c <__pow5mult+0xac>)
 80204d6:	481e      	ldr	r0, [pc, #120]	; (8020550 <__pow5mult+0xb0>)
 80204d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80204dc:	f7fc f8ba 	bl	801c654 <__assert_func>
 80204e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80204e4:	6004      	str	r4, [r0, #0]
 80204e6:	60c4      	str	r4, [r0, #12]
 80204e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80204ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80204f0:	b94c      	cbnz	r4, 8020506 <__pow5mult+0x66>
 80204f2:	f240 2171 	movw	r1, #625	; 0x271
 80204f6:	4630      	mov	r0, r6
 80204f8:	f7ff ff16 	bl	8020328 <__i2b>
 80204fc:	2300      	movs	r3, #0
 80204fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8020502:	4604      	mov	r4, r0
 8020504:	6003      	str	r3, [r0, #0]
 8020506:	f04f 0900 	mov.w	r9, #0
 802050a:	07eb      	lsls	r3, r5, #31
 802050c:	d50a      	bpl.n	8020524 <__pow5mult+0x84>
 802050e:	4639      	mov	r1, r7
 8020510:	4622      	mov	r2, r4
 8020512:	4630      	mov	r0, r6
 8020514:	f7ff ff1e 	bl	8020354 <__multiply>
 8020518:	4639      	mov	r1, r7
 802051a:	4680      	mov	r8, r0
 802051c:	4630      	mov	r0, r6
 802051e:	f7ff fdfd 	bl	802011c <_Bfree>
 8020522:	4647      	mov	r7, r8
 8020524:	106d      	asrs	r5, r5, #1
 8020526:	d00b      	beq.n	8020540 <__pow5mult+0xa0>
 8020528:	6820      	ldr	r0, [r4, #0]
 802052a:	b938      	cbnz	r0, 802053c <__pow5mult+0x9c>
 802052c:	4622      	mov	r2, r4
 802052e:	4621      	mov	r1, r4
 8020530:	4630      	mov	r0, r6
 8020532:	f7ff ff0f 	bl	8020354 <__multiply>
 8020536:	6020      	str	r0, [r4, #0]
 8020538:	f8c0 9000 	str.w	r9, [r0]
 802053c:	4604      	mov	r4, r0
 802053e:	e7e4      	b.n	802050a <__pow5mult+0x6a>
 8020540:	4638      	mov	r0, r7
 8020542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020546:	bf00      	nop
 8020548:	0802ab98 	.word	0x0802ab98
 802054c:	0802a8dd 	.word	0x0802a8dd
 8020550:	0802aa44 	.word	0x0802aa44

08020554 <__lshift>:
 8020554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020558:	460c      	mov	r4, r1
 802055a:	6849      	ldr	r1, [r1, #4]
 802055c:	6923      	ldr	r3, [r4, #16]
 802055e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8020562:	68a3      	ldr	r3, [r4, #8]
 8020564:	4607      	mov	r7, r0
 8020566:	4691      	mov	r9, r2
 8020568:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802056c:	f108 0601 	add.w	r6, r8, #1
 8020570:	42b3      	cmp	r3, r6
 8020572:	db0b      	blt.n	802058c <__lshift+0x38>
 8020574:	4638      	mov	r0, r7
 8020576:	f7ff fd91 	bl	802009c <_Balloc>
 802057a:	4605      	mov	r5, r0
 802057c:	b948      	cbnz	r0, 8020592 <__lshift+0x3e>
 802057e:	4602      	mov	r2, r0
 8020580:	4b28      	ldr	r3, [pc, #160]	; (8020624 <__lshift+0xd0>)
 8020582:	4829      	ldr	r0, [pc, #164]	; (8020628 <__lshift+0xd4>)
 8020584:	f240 11d9 	movw	r1, #473	; 0x1d9
 8020588:	f7fc f864 	bl	801c654 <__assert_func>
 802058c:	3101      	adds	r1, #1
 802058e:	005b      	lsls	r3, r3, #1
 8020590:	e7ee      	b.n	8020570 <__lshift+0x1c>
 8020592:	2300      	movs	r3, #0
 8020594:	f100 0114 	add.w	r1, r0, #20
 8020598:	f100 0210 	add.w	r2, r0, #16
 802059c:	4618      	mov	r0, r3
 802059e:	4553      	cmp	r3, sl
 80205a0:	db33      	blt.n	802060a <__lshift+0xb6>
 80205a2:	6920      	ldr	r0, [r4, #16]
 80205a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80205a8:	f104 0314 	add.w	r3, r4, #20
 80205ac:	f019 091f 	ands.w	r9, r9, #31
 80205b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80205b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80205b8:	d02b      	beq.n	8020612 <__lshift+0xbe>
 80205ba:	f1c9 0e20 	rsb	lr, r9, #32
 80205be:	468a      	mov	sl, r1
 80205c0:	2200      	movs	r2, #0
 80205c2:	6818      	ldr	r0, [r3, #0]
 80205c4:	fa00 f009 	lsl.w	r0, r0, r9
 80205c8:	4302      	orrs	r2, r0
 80205ca:	f84a 2b04 	str.w	r2, [sl], #4
 80205ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80205d2:	459c      	cmp	ip, r3
 80205d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80205d8:	d8f3      	bhi.n	80205c2 <__lshift+0x6e>
 80205da:	ebac 0304 	sub.w	r3, ip, r4
 80205de:	3b15      	subs	r3, #21
 80205e0:	f023 0303 	bic.w	r3, r3, #3
 80205e4:	3304      	adds	r3, #4
 80205e6:	f104 0015 	add.w	r0, r4, #21
 80205ea:	4584      	cmp	ip, r0
 80205ec:	bf38      	it	cc
 80205ee:	2304      	movcc	r3, #4
 80205f0:	50ca      	str	r2, [r1, r3]
 80205f2:	b10a      	cbz	r2, 80205f8 <__lshift+0xa4>
 80205f4:	f108 0602 	add.w	r6, r8, #2
 80205f8:	3e01      	subs	r6, #1
 80205fa:	4638      	mov	r0, r7
 80205fc:	612e      	str	r6, [r5, #16]
 80205fe:	4621      	mov	r1, r4
 8020600:	f7ff fd8c 	bl	802011c <_Bfree>
 8020604:	4628      	mov	r0, r5
 8020606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802060a:	f842 0f04 	str.w	r0, [r2, #4]!
 802060e:	3301      	adds	r3, #1
 8020610:	e7c5      	b.n	802059e <__lshift+0x4a>
 8020612:	3904      	subs	r1, #4
 8020614:	f853 2b04 	ldr.w	r2, [r3], #4
 8020618:	f841 2f04 	str.w	r2, [r1, #4]!
 802061c:	459c      	cmp	ip, r3
 802061e:	d8f9      	bhi.n	8020614 <__lshift+0xc0>
 8020620:	e7ea      	b.n	80205f8 <__lshift+0xa4>
 8020622:	bf00      	nop
 8020624:	0802a953 	.word	0x0802a953
 8020628:	0802aa44 	.word	0x0802aa44

0802062c <__mcmp>:
 802062c:	b530      	push	{r4, r5, lr}
 802062e:	6902      	ldr	r2, [r0, #16]
 8020630:	690c      	ldr	r4, [r1, #16]
 8020632:	1b12      	subs	r2, r2, r4
 8020634:	d10e      	bne.n	8020654 <__mcmp+0x28>
 8020636:	f100 0314 	add.w	r3, r0, #20
 802063a:	3114      	adds	r1, #20
 802063c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8020640:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8020644:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8020648:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802064c:	42a5      	cmp	r5, r4
 802064e:	d003      	beq.n	8020658 <__mcmp+0x2c>
 8020650:	d305      	bcc.n	802065e <__mcmp+0x32>
 8020652:	2201      	movs	r2, #1
 8020654:	4610      	mov	r0, r2
 8020656:	bd30      	pop	{r4, r5, pc}
 8020658:	4283      	cmp	r3, r0
 802065a:	d3f3      	bcc.n	8020644 <__mcmp+0x18>
 802065c:	e7fa      	b.n	8020654 <__mcmp+0x28>
 802065e:	f04f 32ff 	mov.w	r2, #4294967295
 8020662:	e7f7      	b.n	8020654 <__mcmp+0x28>

08020664 <__mdiff>:
 8020664:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020668:	460c      	mov	r4, r1
 802066a:	4606      	mov	r6, r0
 802066c:	4611      	mov	r1, r2
 802066e:	4620      	mov	r0, r4
 8020670:	4617      	mov	r7, r2
 8020672:	f7ff ffdb 	bl	802062c <__mcmp>
 8020676:	1e05      	subs	r5, r0, #0
 8020678:	d110      	bne.n	802069c <__mdiff+0x38>
 802067a:	4629      	mov	r1, r5
 802067c:	4630      	mov	r0, r6
 802067e:	f7ff fd0d 	bl	802009c <_Balloc>
 8020682:	b930      	cbnz	r0, 8020692 <__mdiff+0x2e>
 8020684:	4b39      	ldr	r3, [pc, #228]	; (802076c <__mdiff+0x108>)
 8020686:	4602      	mov	r2, r0
 8020688:	f240 2132 	movw	r1, #562	; 0x232
 802068c:	4838      	ldr	r0, [pc, #224]	; (8020770 <__mdiff+0x10c>)
 802068e:	f7fb ffe1 	bl	801c654 <__assert_func>
 8020692:	2301      	movs	r3, #1
 8020694:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8020698:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802069c:	bfa4      	itt	ge
 802069e:	463b      	movge	r3, r7
 80206a0:	4627      	movge	r7, r4
 80206a2:	4630      	mov	r0, r6
 80206a4:	6879      	ldr	r1, [r7, #4]
 80206a6:	bfa6      	itte	ge
 80206a8:	461c      	movge	r4, r3
 80206aa:	2500      	movge	r5, #0
 80206ac:	2501      	movlt	r5, #1
 80206ae:	f7ff fcf5 	bl	802009c <_Balloc>
 80206b2:	b920      	cbnz	r0, 80206be <__mdiff+0x5a>
 80206b4:	4b2d      	ldr	r3, [pc, #180]	; (802076c <__mdiff+0x108>)
 80206b6:	4602      	mov	r2, r0
 80206b8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80206bc:	e7e6      	b.n	802068c <__mdiff+0x28>
 80206be:	693e      	ldr	r6, [r7, #16]
 80206c0:	60c5      	str	r5, [r0, #12]
 80206c2:	6925      	ldr	r5, [r4, #16]
 80206c4:	f107 0114 	add.w	r1, r7, #20
 80206c8:	f104 0914 	add.w	r9, r4, #20
 80206cc:	f100 0e14 	add.w	lr, r0, #20
 80206d0:	f107 0210 	add.w	r2, r7, #16
 80206d4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80206d8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80206dc:	46f2      	mov	sl, lr
 80206de:	2700      	movs	r7, #0
 80206e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80206e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80206e8:	fa1f f883 	uxth.w	r8, r3
 80206ec:	fa17 f78b 	uxtah	r7, r7, fp
 80206f0:	0c1b      	lsrs	r3, r3, #16
 80206f2:	eba7 0808 	sub.w	r8, r7, r8
 80206f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80206fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80206fe:	fa1f f888 	uxth.w	r8, r8
 8020702:	141f      	asrs	r7, r3, #16
 8020704:	454d      	cmp	r5, r9
 8020706:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802070a:	f84a 3b04 	str.w	r3, [sl], #4
 802070e:	d8e7      	bhi.n	80206e0 <__mdiff+0x7c>
 8020710:	1b2b      	subs	r3, r5, r4
 8020712:	3b15      	subs	r3, #21
 8020714:	f023 0303 	bic.w	r3, r3, #3
 8020718:	3304      	adds	r3, #4
 802071a:	3415      	adds	r4, #21
 802071c:	42a5      	cmp	r5, r4
 802071e:	bf38      	it	cc
 8020720:	2304      	movcc	r3, #4
 8020722:	4419      	add	r1, r3
 8020724:	4473      	add	r3, lr
 8020726:	469e      	mov	lr, r3
 8020728:	460d      	mov	r5, r1
 802072a:	4565      	cmp	r5, ip
 802072c:	d30e      	bcc.n	802074c <__mdiff+0xe8>
 802072e:	f10c 0203 	add.w	r2, ip, #3
 8020732:	1a52      	subs	r2, r2, r1
 8020734:	f022 0203 	bic.w	r2, r2, #3
 8020738:	3903      	subs	r1, #3
 802073a:	458c      	cmp	ip, r1
 802073c:	bf38      	it	cc
 802073e:	2200      	movcc	r2, #0
 8020740:	441a      	add	r2, r3
 8020742:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8020746:	b17b      	cbz	r3, 8020768 <__mdiff+0x104>
 8020748:	6106      	str	r6, [r0, #16]
 802074a:	e7a5      	b.n	8020698 <__mdiff+0x34>
 802074c:	f855 8b04 	ldr.w	r8, [r5], #4
 8020750:	fa17 f488 	uxtah	r4, r7, r8
 8020754:	1422      	asrs	r2, r4, #16
 8020756:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 802075a:	b2a4      	uxth	r4, r4
 802075c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8020760:	f84e 4b04 	str.w	r4, [lr], #4
 8020764:	1417      	asrs	r7, r2, #16
 8020766:	e7e0      	b.n	802072a <__mdiff+0xc6>
 8020768:	3e01      	subs	r6, #1
 802076a:	e7ea      	b.n	8020742 <__mdiff+0xde>
 802076c:	0802a953 	.word	0x0802a953
 8020770:	0802aa44 	.word	0x0802aa44

08020774 <__ulp>:
 8020774:	b082      	sub	sp, #8
 8020776:	ed8d 0b00 	vstr	d0, [sp]
 802077a:	9b01      	ldr	r3, [sp, #4]
 802077c:	4912      	ldr	r1, [pc, #72]	; (80207c8 <__ulp+0x54>)
 802077e:	4019      	ands	r1, r3
 8020780:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8020784:	2900      	cmp	r1, #0
 8020786:	dd05      	ble.n	8020794 <__ulp+0x20>
 8020788:	2200      	movs	r2, #0
 802078a:	460b      	mov	r3, r1
 802078c:	ec43 2b10 	vmov	d0, r2, r3
 8020790:	b002      	add	sp, #8
 8020792:	4770      	bx	lr
 8020794:	4249      	negs	r1, r1
 8020796:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 802079a:	ea4f 5021 	mov.w	r0, r1, asr #20
 802079e:	f04f 0200 	mov.w	r2, #0
 80207a2:	f04f 0300 	mov.w	r3, #0
 80207a6:	da04      	bge.n	80207b2 <__ulp+0x3e>
 80207a8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80207ac:	fa41 f300 	asr.w	r3, r1, r0
 80207b0:	e7ec      	b.n	802078c <__ulp+0x18>
 80207b2:	f1a0 0114 	sub.w	r1, r0, #20
 80207b6:	291e      	cmp	r1, #30
 80207b8:	bfda      	itte	le
 80207ba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80207be:	fa20 f101 	lsrle.w	r1, r0, r1
 80207c2:	2101      	movgt	r1, #1
 80207c4:	460a      	mov	r2, r1
 80207c6:	e7e1      	b.n	802078c <__ulp+0x18>
 80207c8:	7ff00000 	.word	0x7ff00000

080207cc <__b2d>:
 80207cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80207ce:	6905      	ldr	r5, [r0, #16]
 80207d0:	f100 0714 	add.w	r7, r0, #20
 80207d4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80207d8:	1f2e      	subs	r6, r5, #4
 80207da:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80207de:	4620      	mov	r0, r4
 80207e0:	f7ff fd52 	bl	8020288 <__hi0bits>
 80207e4:	f1c0 0320 	rsb	r3, r0, #32
 80207e8:	280a      	cmp	r0, #10
 80207ea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8020868 <__b2d+0x9c>
 80207ee:	600b      	str	r3, [r1, #0]
 80207f0:	dc14      	bgt.n	802081c <__b2d+0x50>
 80207f2:	f1c0 0e0b 	rsb	lr, r0, #11
 80207f6:	fa24 f10e 	lsr.w	r1, r4, lr
 80207fa:	42b7      	cmp	r7, r6
 80207fc:	ea41 030c 	orr.w	r3, r1, ip
 8020800:	bf34      	ite	cc
 8020802:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8020806:	2100      	movcs	r1, #0
 8020808:	3015      	adds	r0, #21
 802080a:	fa04 f000 	lsl.w	r0, r4, r0
 802080e:	fa21 f10e 	lsr.w	r1, r1, lr
 8020812:	ea40 0201 	orr.w	r2, r0, r1
 8020816:	ec43 2b10 	vmov	d0, r2, r3
 802081a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802081c:	42b7      	cmp	r7, r6
 802081e:	bf3a      	itte	cc
 8020820:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8020824:	f1a5 0608 	subcc.w	r6, r5, #8
 8020828:	2100      	movcs	r1, #0
 802082a:	380b      	subs	r0, #11
 802082c:	d017      	beq.n	802085e <__b2d+0x92>
 802082e:	f1c0 0c20 	rsb	ip, r0, #32
 8020832:	fa04 f500 	lsl.w	r5, r4, r0
 8020836:	42be      	cmp	r6, r7
 8020838:	fa21 f40c 	lsr.w	r4, r1, ip
 802083c:	ea45 0504 	orr.w	r5, r5, r4
 8020840:	bf8c      	ite	hi
 8020842:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8020846:	2400      	movls	r4, #0
 8020848:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 802084c:	fa01 f000 	lsl.w	r0, r1, r0
 8020850:	fa24 f40c 	lsr.w	r4, r4, ip
 8020854:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8020858:	ea40 0204 	orr.w	r2, r0, r4
 802085c:	e7db      	b.n	8020816 <__b2d+0x4a>
 802085e:	ea44 030c 	orr.w	r3, r4, ip
 8020862:	460a      	mov	r2, r1
 8020864:	e7d7      	b.n	8020816 <__b2d+0x4a>
 8020866:	bf00      	nop
 8020868:	3ff00000 	.word	0x3ff00000

0802086c <__d2b>:
 802086c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020870:	4689      	mov	r9, r1
 8020872:	2101      	movs	r1, #1
 8020874:	ec57 6b10 	vmov	r6, r7, d0
 8020878:	4690      	mov	r8, r2
 802087a:	f7ff fc0f 	bl	802009c <_Balloc>
 802087e:	4604      	mov	r4, r0
 8020880:	b930      	cbnz	r0, 8020890 <__d2b+0x24>
 8020882:	4602      	mov	r2, r0
 8020884:	4b25      	ldr	r3, [pc, #148]	; (802091c <__d2b+0xb0>)
 8020886:	4826      	ldr	r0, [pc, #152]	; (8020920 <__d2b+0xb4>)
 8020888:	f240 310a 	movw	r1, #778	; 0x30a
 802088c:	f7fb fee2 	bl	801c654 <__assert_func>
 8020890:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8020894:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8020898:	bb35      	cbnz	r5, 80208e8 <__d2b+0x7c>
 802089a:	2e00      	cmp	r6, #0
 802089c:	9301      	str	r3, [sp, #4]
 802089e:	d028      	beq.n	80208f2 <__d2b+0x86>
 80208a0:	4668      	mov	r0, sp
 80208a2:	9600      	str	r6, [sp, #0]
 80208a4:	f7ff fd10 	bl	80202c8 <__lo0bits>
 80208a8:	9900      	ldr	r1, [sp, #0]
 80208aa:	b300      	cbz	r0, 80208ee <__d2b+0x82>
 80208ac:	9a01      	ldr	r2, [sp, #4]
 80208ae:	f1c0 0320 	rsb	r3, r0, #32
 80208b2:	fa02 f303 	lsl.w	r3, r2, r3
 80208b6:	430b      	orrs	r3, r1
 80208b8:	40c2      	lsrs	r2, r0
 80208ba:	6163      	str	r3, [r4, #20]
 80208bc:	9201      	str	r2, [sp, #4]
 80208be:	9b01      	ldr	r3, [sp, #4]
 80208c0:	61a3      	str	r3, [r4, #24]
 80208c2:	2b00      	cmp	r3, #0
 80208c4:	bf14      	ite	ne
 80208c6:	2202      	movne	r2, #2
 80208c8:	2201      	moveq	r2, #1
 80208ca:	6122      	str	r2, [r4, #16]
 80208cc:	b1d5      	cbz	r5, 8020904 <__d2b+0x98>
 80208ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80208d2:	4405      	add	r5, r0
 80208d4:	f8c9 5000 	str.w	r5, [r9]
 80208d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80208dc:	f8c8 0000 	str.w	r0, [r8]
 80208e0:	4620      	mov	r0, r4
 80208e2:	b003      	add	sp, #12
 80208e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80208e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80208ec:	e7d5      	b.n	802089a <__d2b+0x2e>
 80208ee:	6161      	str	r1, [r4, #20]
 80208f0:	e7e5      	b.n	80208be <__d2b+0x52>
 80208f2:	a801      	add	r0, sp, #4
 80208f4:	f7ff fce8 	bl	80202c8 <__lo0bits>
 80208f8:	9b01      	ldr	r3, [sp, #4]
 80208fa:	6163      	str	r3, [r4, #20]
 80208fc:	2201      	movs	r2, #1
 80208fe:	6122      	str	r2, [r4, #16]
 8020900:	3020      	adds	r0, #32
 8020902:	e7e3      	b.n	80208cc <__d2b+0x60>
 8020904:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8020908:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802090c:	f8c9 0000 	str.w	r0, [r9]
 8020910:	6918      	ldr	r0, [r3, #16]
 8020912:	f7ff fcb9 	bl	8020288 <__hi0bits>
 8020916:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802091a:	e7df      	b.n	80208dc <__d2b+0x70>
 802091c:	0802a953 	.word	0x0802a953
 8020920:	0802aa44 	.word	0x0802aa44

08020924 <__ratio>:
 8020924:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020928:	468a      	mov	sl, r1
 802092a:	4669      	mov	r1, sp
 802092c:	4683      	mov	fp, r0
 802092e:	f7ff ff4d 	bl	80207cc <__b2d>
 8020932:	a901      	add	r1, sp, #4
 8020934:	4650      	mov	r0, sl
 8020936:	ec59 8b10 	vmov	r8, r9, d0
 802093a:	ee10 6a10 	vmov	r6, s0
 802093e:	f7ff ff45 	bl	80207cc <__b2d>
 8020942:	f8db 3010 	ldr.w	r3, [fp, #16]
 8020946:	f8da 2010 	ldr.w	r2, [sl, #16]
 802094a:	eba3 0c02 	sub.w	ip, r3, r2
 802094e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8020952:	1a9b      	subs	r3, r3, r2
 8020954:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8020958:	ec55 4b10 	vmov	r4, r5, d0
 802095c:	2b00      	cmp	r3, #0
 802095e:	ee10 0a10 	vmov	r0, s0
 8020962:	bfce      	itee	gt
 8020964:	464a      	movgt	r2, r9
 8020966:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802096a:	462a      	movle	r2, r5
 802096c:	464f      	mov	r7, r9
 802096e:	4629      	mov	r1, r5
 8020970:	bfcc      	ite	gt
 8020972:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8020976:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 802097a:	ec47 6b17 	vmov	d7, r6, r7
 802097e:	ec41 0b16 	vmov	d6, r0, r1
 8020982:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8020986:	b003      	add	sp, #12
 8020988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802098c <__copybits>:
 802098c:	3901      	subs	r1, #1
 802098e:	b570      	push	{r4, r5, r6, lr}
 8020990:	1149      	asrs	r1, r1, #5
 8020992:	6914      	ldr	r4, [r2, #16]
 8020994:	3101      	adds	r1, #1
 8020996:	f102 0314 	add.w	r3, r2, #20
 802099a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802099e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80209a2:	1f05      	subs	r5, r0, #4
 80209a4:	42a3      	cmp	r3, r4
 80209a6:	d30c      	bcc.n	80209c2 <__copybits+0x36>
 80209a8:	1aa3      	subs	r3, r4, r2
 80209aa:	3b11      	subs	r3, #17
 80209ac:	f023 0303 	bic.w	r3, r3, #3
 80209b0:	3211      	adds	r2, #17
 80209b2:	42a2      	cmp	r2, r4
 80209b4:	bf88      	it	hi
 80209b6:	2300      	movhi	r3, #0
 80209b8:	4418      	add	r0, r3
 80209ba:	2300      	movs	r3, #0
 80209bc:	4288      	cmp	r0, r1
 80209be:	d305      	bcc.n	80209cc <__copybits+0x40>
 80209c0:	bd70      	pop	{r4, r5, r6, pc}
 80209c2:	f853 6b04 	ldr.w	r6, [r3], #4
 80209c6:	f845 6f04 	str.w	r6, [r5, #4]!
 80209ca:	e7eb      	b.n	80209a4 <__copybits+0x18>
 80209cc:	f840 3b04 	str.w	r3, [r0], #4
 80209d0:	e7f4      	b.n	80209bc <__copybits+0x30>

080209d2 <__any_on>:
 80209d2:	f100 0214 	add.w	r2, r0, #20
 80209d6:	6900      	ldr	r0, [r0, #16]
 80209d8:	114b      	asrs	r3, r1, #5
 80209da:	4298      	cmp	r0, r3
 80209dc:	b510      	push	{r4, lr}
 80209de:	db11      	blt.n	8020a04 <__any_on+0x32>
 80209e0:	dd0a      	ble.n	80209f8 <__any_on+0x26>
 80209e2:	f011 011f 	ands.w	r1, r1, #31
 80209e6:	d007      	beq.n	80209f8 <__any_on+0x26>
 80209e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80209ec:	fa24 f001 	lsr.w	r0, r4, r1
 80209f0:	fa00 f101 	lsl.w	r1, r0, r1
 80209f4:	428c      	cmp	r4, r1
 80209f6:	d10b      	bne.n	8020a10 <__any_on+0x3e>
 80209f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80209fc:	4293      	cmp	r3, r2
 80209fe:	d803      	bhi.n	8020a08 <__any_on+0x36>
 8020a00:	2000      	movs	r0, #0
 8020a02:	bd10      	pop	{r4, pc}
 8020a04:	4603      	mov	r3, r0
 8020a06:	e7f7      	b.n	80209f8 <__any_on+0x26>
 8020a08:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8020a0c:	2900      	cmp	r1, #0
 8020a0e:	d0f5      	beq.n	80209fc <__any_on+0x2a>
 8020a10:	2001      	movs	r0, #1
 8020a12:	e7f6      	b.n	8020a02 <__any_on+0x30>

08020a14 <_calloc_r>:
 8020a14:	b513      	push	{r0, r1, r4, lr}
 8020a16:	434a      	muls	r2, r1
 8020a18:	4611      	mov	r1, r2
 8020a1a:	9201      	str	r2, [sp, #4]
 8020a1c:	f7fb ff0c 	bl	801c838 <_malloc_r>
 8020a20:	4604      	mov	r4, r0
 8020a22:	b118      	cbz	r0, 8020a2c <_calloc_r+0x18>
 8020a24:	9a01      	ldr	r2, [sp, #4]
 8020a26:	2100      	movs	r1, #0
 8020a28:	f7fb feae 	bl	801c788 <memset>
 8020a2c:	4620      	mov	r0, r4
 8020a2e:	b002      	add	sp, #8
 8020a30:	bd10      	pop	{r4, pc}

08020a32 <_realloc_r>:
 8020a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020a34:	4607      	mov	r7, r0
 8020a36:	4614      	mov	r4, r2
 8020a38:	460e      	mov	r6, r1
 8020a3a:	b921      	cbnz	r1, 8020a46 <_realloc_r+0x14>
 8020a3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8020a40:	4611      	mov	r1, r2
 8020a42:	f7fb bef9 	b.w	801c838 <_malloc_r>
 8020a46:	b922      	cbnz	r2, 8020a52 <_realloc_r+0x20>
 8020a48:	f7fb fea6 	bl	801c798 <_free_r>
 8020a4c:	4625      	mov	r5, r4
 8020a4e:	4628      	mov	r0, r5
 8020a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020a52:	f000 fa63 	bl	8020f1c <_malloc_usable_size_r>
 8020a56:	42a0      	cmp	r0, r4
 8020a58:	d20f      	bcs.n	8020a7a <_realloc_r+0x48>
 8020a5a:	4621      	mov	r1, r4
 8020a5c:	4638      	mov	r0, r7
 8020a5e:	f7fb feeb 	bl	801c838 <_malloc_r>
 8020a62:	4605      	mov	r5, r0
 8020a64:	2800      	cmp	r0, #0
 8020a66:	d0f2      	beq.n	8020a4e <_realloc_r+0x1c>
 8020a68:	4631      	mov	r1, r6
 8020a6a:	4622      	mov	r2, r4
 8020a6c:	f7fb fe64 	bl	801c738 <memcpy>
 8020a70:	4631      	mov	r1, r6
 8020a72:	4638      	mov	r0, r7
 8020a74:	f7fb fe90 	bl	801c798 <_free_r>
 8020a78:	e7e9      	b.n	8020a4e <_realloc_r+0x1c>
 8020a7a:	4635      	mov	r5, r6
 8020a7c:	e7e7      	b.n	8020a4e <_realloc_r+0x1c>

08020a7e <__ssputs_r>:
 8020a7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020a82:	688e      	ldr	r6, [r1, #8]
 8020a84:	429e      	cmp	r6, r3
 8020a86:	4682      	mov	sl, r0
 8020a88:	460c      	mov	r4, r1
 8020a8a:	4690      	mov	r8, r2
 8020a8c:	461f      	mov	r7, r3
 8020a8e:	d838      	bhi.n	8020b02 <__ssputs_r+0x84>
 8020a90:	898a      	ldrh	r2, [r1, #12]
 8020a92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8020a96:	d032      	beq.n	8020afe <__ssputs_r+0x80>
 8020a98:	6825      	ldr	r5, [r4, #0]
 8020a9a:	6909      	ldr	r1, [r1, #16]
 8020a9c:	eba5 0901 	sub.w	r9, r5, r1
 8020aa0:	6965      	ldr	r5, [r4, #20]
 8020aa2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020aa6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020aaa:	3301      	adds	r3, #1
 8020aac:	444b      	add	r3, r9
 8020aae:	106d      	asrs	r5, r5, #1
 8020ab0:	429d      	cmp	r5, r3
 8020ab2:	bf38      	it	cc
 8020ab4:	461d      	movcc	r5, r3
 8020ab6:	0553      	lsls	r3, r2, #21
 8020ab8:	d531      	bpl.n	8020b1e <__ssputs_r+0xa0>
 8020aba:	4629      	mov	r1, r5
 8020abc:	f7fb febc 	bl	801c838 <_malloc_r>
 8020ac0:	4606      	mov	r6, r0
 8020ac2:	b950      	cbnz	r0, 8020ada <__ssputs_r+0x5c>
 8020ac4:	230c      	movs	r3, #12
 8020ac6:	f8ca 3000 	str.w	r3, [sl]
 8020aca:	89a3      	ldrh	r3, [r4, #12]
 8020acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020ad0:	81a3      	strh	r3, [r4, #12]
 8020ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8020ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020ada:	6921      	ldr	r1, [r4, #16]
 8020adc:	464a      	mov	r2, r9
 8020ade:	f7fb fe2b 	bl	801c738 <memcpy>
 8020ae2:	89a3      	ldrh	r3, [r4, #12]
 8020ae4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8020ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020aec:	81a3      	strh	r3, [r4, #12]
 8020aee:	6126      	str	r6, [r4, #16]
 8020af0:	6165      	str	r5, [r4, #20]
 8020af2:	444e      	add	r6, r9
 8020af4:	eba5 0509 	sub.w	r5, r5, r9
 8020af8:	6026      	str	r6, [r4, #0]
 8020afa:	60a5      	str	r5, [r4, #8]
 8020afc:	463e      	mov	r6, r7
 8020afe:	42be      	cmp	r6, r7
 8020b00:	d900      	bls.n	8020b04 <__ssputs_r+0x86>
 8020b02:	463e      	mov	r6, r7
 8020b04:	4632      	mov	r2, r6
 8020b06:	6820      	ldr	r0, [r4, #0]
 8020b08:	4641      	mov	r1, r8
 8020b0a:	f7fb fe23 	bl	801c754 <memmove>
 8020b0e:	68a3      	ldr	r3, [r4, #8]
 8020b10:	6822      	ldr	r2, [r4, #0]
 8020b12:	1b9b      	subs	r3, r3, r6
 8020b14:	4432      	add	r2, r6
 8020b16:	60a3      	str	r3, [r4, #8]
 8020b18:	6022      	str	r2, [r4, #0]
 8020b1a:	2000      	movs	r0, #0
 8020b1c:	e7db      	b.n	8020ad6 <__ssputs_r+0x58>
 8020b1e:	462a      	mov	r2, r5
 8020b20:	f7ff ff87 	bl	8020a32 <_realloc_r>
 8020b24:	4606      	mov	r6, r0
 8020b26:	2800      	cmp	r0, #0
 8020b28:	d1e1      	bne.n	8020aee <__ssputs_r+0x70>
 8020b2a:	6921      	ldr	r1, [r4, #16]
 8020b2c:	4650      	mov	r0, sl
 8020b2e:	f7fb fe33 	bl	801c798 <_free_r>
 8020b32:	e7c7      	b.n	8020ac4 <__ssputs_r+0x46>

08020b34 <_svfiprintf_r>:
 8020b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b38:	4698      	mov	r8, r3
 8020b3a:	898b      	ldrh	r3, [r1, #12]
 8020b3c:	061b      	lsls	r3, r3, #24
 8020b3e:	b09d      	sub	sp, #116	; 0x74
 8020b40:	4607      	mov	r7, r0
 8020b42:	460d      	mov	r5, r1
 8020b44:	4614      	mov	r4, r2
 8020b46:	d50e      	bpl.n	8020b66 <_svfiprintf_r+0x32>
 8020b48:	690b      	ldr	r3, [r1, #16]
 8020b4a:	b963      	cbnz	r3, 8020b66 <_svfiprintf_r+0x32>
 8020b4c:	2140      	movs	r1, #64	; 0x40
 8020b4e:	f7fb fe73 	bl	801c838 <_malloc_r>
 8020b52:	6028      	str	r0, [r5, #0]
 8020b54:	6128      	str	r0, [r5, #16]
 8020b56:	b920      	cbnz	r0, 8020b62 <_svfiprintf_r+0x2e>
 8020b58:	230c      	movs	r3, #12
 8020b5a:	603b      	str	r3, [r7, #0]
 8020b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8020b60:	e0d1      	b.n	8020d06 <_svfiprintf_r+0x1d2>
 8020b62:	2340      	movs	r3, #64	; 0x40
 8020b64:	616b      	str	r3, [r5, #20]
 8020b66:	2300      	movs	r3, #0
 8020b68:	9309      	str	r3, [sp, #36]	; 0x24
 8020b6a:	2320      	movs	r3, #32
 8020b6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020b70:	f8cd 800c 	str.w	r8, [sp, #12]
 8020b74:	2330      	movs	r3, #48	; 0x30
 8020b76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8020d20 <_svfiprintf_r+0x1ec>
 8020b7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020b7e:	f04f 0901 	mov.w	r9, #1
 8020b82:	4623      	mov	r3, r4
 8020b84:	469a      	mov	sl, r3
 8020b86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020b8a:	b10a      	cbz	r2, 8020b90 <_svfiprintf_r+0x5c>
 8020b8c:	2a25      	cmp	r2, #37	; 0x25
 8020b8e:	d1f9      	bne.n	8020b84 <_svfiprintf_r+0x50>
 8020b90:	ebba 0b04 	subs.w	fp, sl, r4
 8020b94:	d00b      	beq.n	8020bae <_svfiprintf_r+0x7a>
 8020b96:	465b      	mov	r3, fp
 8020b98:	4622      	mov	r2, r4
 8020b9a:	4629      	mov	r1, r5
 8020b9c:	4638      	mov	r0, r7
 8020b9e:	f7ff ff6e 	bl	8020a7e <__ssputs_r>
 8020ba2:	3001      	adds	r0, #1
 8020ba4:	f000 80aa 	beq.w	8020cfc <_svfiprintf_r+0x1c8>
 8020ba8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020baa:	445a      	add	r2, fp
 8020bac:	9209      	str	r2, [sp, #36]	; 0x24
 8020bae:	f89a 3000 	ldrb.w	r3, [sl]
 8020bb2:	2b00      	cmp	r3, #0
 8020bb4:	f000 80a2 	beq.w	8020cfc <_svfiprintf_r+0x1c8>
 8020bb8:	2300      	movs	r3, #0
 8020bba:	f04f 32ff 	mov.w	r2, #4294967295
 8020bbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020bc2:	f10a 0a01 	add.w	sl, sl, #1
 8020bc6:	9304      	str	r3, [sp, #16]
 8020bc8:	9307      	str	r3, [sp, #28]
 8020bca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020bce:	931a      	str	r3, [sp, #104]	; 0x68
 8020bd0:	4654      	mov	r4, sl
 8020bd2:	2205      	movs	r2, #5
 8020bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020bd8:	4851      	ldr	r0, [pc, #324]	; (8020d20 <_svfiprintf_r+0x1ec>)
 8020bda:	f7df fb99 	bl	8000310 <memchr>
 8020bde:	9a04      	ldr	r2, [sp, #16]
 8020be0:	b9d8      	cbnz	r0, 8020c1a <_svfiprintf_r+0xe6>
 8020be2:	06d0      	lsls	r0, r2, #27
 8020be4:	bf44      	itt	mi
 8020be6:	2320      	movmi	r3, #32
 8020be8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020bec:	0711      	lsls	r1, r2, #28
 8020bee:	bf44      	itt	mi
 8020bf0:	232b      	movmi	r3, #43	; 0x2b
 8020bf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020bf6:	f89a 3000 	ldrb.w	r3, [sl]
 8020bfa:	2b2a      	cmp	r3, #42	; 0x2a
 8020bfc:	d015      	beq.n	8020c2a <_svfiprintf_r+0xf6>
 8020bfe:	9a07      	ldr	r2, [sp, #28]
 8020c00:	4654      	mov	r4, sl
 8020c02:	2000      	movs	r0, #0
 8020c04:	f04f 0c0a 	mov.w	ip, #10
 8020c08:	4621      	mov	r1, r4
 8020c0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020c0e:	3b30      	subs	r3, #48	; 0x30
 8020c10:	2b09      	cmp	r3, #9
 8020c12:	d94e      	bls.n	8020cb2 <_svfiprintf_r+0x17e>
 8020c14:	b1b0      	cbz	r0, 8020c44 <_svfiprintf_r+0x110>
 8020c16:	9207      	str	r2, [sp, #28]
 8020c18:	e014      	b.n	8020c44 <_svfiprintf_r+0x110>
 8020c1a:	eba0 0308 	sub.w	r3, r0, r8
 8020c1e:	fa09 f303 	lsl.w	r3, r9, r3
 8020c22:	4313      	orrs	r3, r2
 8020c24:	9304      	str	r3, [sp, #16]
 8020c26:	46a2      	mov	sl, r4
 8020c28:	e7d2      	b.n	8020bd0 <_svfiprintf_r+0x9c>
 8020c2a:	9b03      	ldr	r3, [sp, #12]
 8020c2c:	1d19      	adds	r1, r3, #4
 8020c2e:	681b      	ldr	r3, [r3, #0]
 8020c30:	9103      	str	r1, [sp, #12]
 8020c32:	2b00      	cmp	r3, #0
 8020c34:	bfbb      	ittet	lt
 8020c36:	425b      	neglt	r3, r3
 8020c38:	f042 0202 	orrlt.w	r2, r2, #2
 8020c3c:	9307      	strge	r3, [sp, #28]
 8020c3e:	9307      	strlt	r3, [sp, #28]
 8020c40:	bfb8      	it	lt
 8020c42:	9204      	strlt	r2, [sp, #16]
 8020c44:	7823      	ldrb	r3, [r4, #0]
 8020c46:	2b2e      	cmp	r3, #46	; 0x2e
 8020c48:	d10c      	bne.n	8020c64 <_svfiprintf_r+0x130>
 8020c4a:	7863      	ldrb	r3, [r4, #1]
 8020c4c:	2b2a      	cmp	r3, #42	; 0x2a
 8020c4e:	d135      	bne.n	8020cbc <_svfiprintf_r+0x188>
 8020c50:	9b03      	ldr	r3, [sp, #12]
 8020c52:	1d1a      	adds	r2, r3, #4
 8020c54:	681b      	ldr	r3, [r3, #0]
 8020c56:	9203      	str	r2, [sp, #12]
 8020c58:	2b00      	cmp	r3, #0
 8020c5a:	bfb8      	it	lt
 8020c5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8020c60:	3402      	adds	r4, #2
 8020c62:	9305      	str	r3, [sp, #20]
 8020c64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8020d30 <_svfiprintf_r+0x1fc>
 8020c68:	7821      	ldrb	r1, [r4, #0]
 8020c6a:	2203      	movs	r2, #3
 8020c6c:	4650      	mov	r0, sl
 8020c6e:	f7df fb4f 	bl	8000310 <memchr>
 8020c72:	b140      	cbz	r0, 8020c86 <_svfiprintf_r+0x152>
 8020c74:	2340      	movs	r3, #64	; 0x40
 8020c76:	eba0 000a 	sub.w	r0, r0, sl
 8020c7a:	fa03 f000 	lsl.w	r0, r3, r0
 8020c7e:	9b04      	ldr	r3, [sp, #16]
 8020c80:	4303      	orrs	r3, r0
 8020c82:	3401      	adds	r4, #1
 8020c84:	9304      	str	r3, [sp, #16]
 8020c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020c8a:	4826      	ldr	r0, [pc, #152]	; (8020d24 <_svfiprintf_r+0x1f0>)
 8020c8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020c90:	2206      	movs	r2, #6
 8020c92:	f7df fb3d 	bl	8000310 <memchr>
 8020c96:	2800      	cmp	r0, #0
 8020c98:	d038      	beq.n	8020d0c <_svfiprintf_r+0x1d8>
 8020c9a:	4b23      	ldr	r3, [pc, #140]	; (8020d28 <_svfiprintf_r+0x1f4>)
 8020c9c:	bb1b      	cbnz	r3, 8020ce6 <_svfiprintf_r+0x1b2>
 8020c9e:	9b03      	ldr	r3, [sp, #12]
 8020ca0:	3307      	adds	r3, #7
 8020ca2:	f023 0307 	bic.w	r3, r3, #7
 8020ca6:	3308      	adds	r3, #8
 8020ca8:	9303      	str	r3, [sp, #12]
 8020caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020cac:	4433      	add	r3, r6
 8020cae:	9309      	str	r3, [sp, #36]	; 0x24
 8020cb0:	e767      	b.n	8020b82 <_svfiprintf_r+0x4e>
 8020cb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8020cb6:	460c      	mov	r4, r1
 8020cb8:	2001      	movs	r0, #1
 8020cba:	e7a5      	b.n	8020c08 <_svfiprintf_r+0xd4>
 8020cbc:	2300      	movs	r3, #0
 8020cbe:	3401      	adds	r4, #1
 8020cc0:	9305      	str	r3, [sp, #20]
 8020cc2:	4619      	mov	r1, r3
 8020cc4:	f04f 0c0a 	mov.w	ip, #10
 8020cc8:	4620      	mov	r0, r4
 8020cca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020cce:	3a30      	subs	r2, #48	; 0x30
 8020cd0:	2a09      	cmp	r2, #9
 8020cd2:	d903      	bls.n	8020cdc <_svfiprintf_r+0x1a8>
 8020cd4:	2b00      	cmp	r3, #0
 8020cd6:	d0c5      	beq.n	8020c64 <_svfiprintf_r+0x130>
 8020cd8:	9105      	str	r1, [sp, #20]
 8020cda:	e7c3      	b.n	8020c64 <_svfiprintf_r+0x130>
 8020cdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8020ce0:	4604      	mov	r4, r0
 8020ce2:	2301      	movs	r3, #1
 8020ce4:	e7f0      	b.n	8020cc8 <_svfiprintf_r+0x194>
 8020ce6:	ab03      	add	r3, sp, #12
 8020ce8:	9300      	str	r3, [sp, #0]
 8020cea:	462a      	mov	r2, r5
 8020cec:	4b0f      	ldr	r3, [pc, #60]	; (8020d2c <_svfiprintf_r+0x1f8>)
 8020cee:	a904      	add	r1, sp, #16
 8020cf0:	4638      	mov	r0, r7
 8020cf2:	f7fb ffe5 	bl	801ccc0 <_printf_float>
 8020cf6:	1c42      	adds	r2, r0, #1
 8020cf8:	4606      	mov	r6, r0
 8020cfa:	d1d6      	bne.n	8020caa <_svfiprintf_r+0x176>
 8020cfc:	89ab      	ldrh	r3, [r5, #12]
 8020cfe:	065b      	lsls	r3, r3, #25
 8020d00:	f53f af2c 	bmi.w	8020b5c <_svfiprintf_r+0x28>
 8020d04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020d06:	b01d      	add	sp, #116	; 0x74
 8020d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d0c:	ab03      	add	r3, sp, #12
 8020d0e:	9300      	str	r3, [sp, #0]
 8020d10:	462a      	mov	r2, r5
 8020d12:	4b06      	ldr	r3, [pc, #24]	; (8020d2c <_svfiprintf_r+0x1f8>)
 8020d14:	a904      	add	r1, sp, #16
 8020d16:	4638      	mov	r0, r7
 8020d18:	f7fc fa5e 	bl	801d1d8 <_printf_i>
 8020d1c:	e7eb      	b.n	8020cf6 <_svfiprintf_r+0x1c2>
 8020d1e:	bf00      	nop
 8020d20:	0802a830 	.word	0x0802a830
 8020d24:	0802a83a 	.word	0x0802a83a
 8020d28:	0801ccc1 	.word	0x0801ccc1
 8020d2c:	08020a7f 	.word	0x08020a7f
 8020d30:	0802a836 	.word	0x0802a836
 8020d34:	00000000 	.word	0x00000000

08020d38 <nan>:
 8020d38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8020d40 <nan+0x8>
 8020d3c:	4770      	bx	lr
 8020d3e:	bf00      	nop
 8020d40:	00000000 	.word	0x00000000
 8020d44:	7ff80000 	.word	0x7ff80000

08020d48 <_raise_r>:
 8020d48:	291f      	cmp	r1, #31
 8020d4a:	b538      	push	{r3, r4, r5, lr}
 8020d4c:	4604      	mov	r4, r0
 8020d4e:	460d      	mov	r5, r1
 8020d50:	d904      	bls.n	8020d5c <_raise_r+0x14>
 8020d52:	2316      	movs	r3, #22
 8020d54:	6003      	str	r3, [r0, #0]
 8020d56:	f04f 30ff 	mov.w	r0, #4294967295
 8020d5a:	bd38      	pop	{r3, r4, r5, pc}
 8020d5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8020d5e:	b112      	cbz	r2, 8020d66 <_raise_r+0x1e>
 8020d60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020d64:	b94b      	cbnz	r3, 8020d7a <_raise_r+0x32>
 8020d66:	4620      	mov	r0, r4
 8020d68:	f000 f830 	bl	8020dcc <_getpid_r>
 8020d6c:	462a      	mov	r2, r5
 8020d6e:	4601      	mov	r1, r0
 8020d70:	4620      	mov	r0, r4
 8020d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020d76:	f000 b817 	b.w	8020da8 <_kill_r>
 8020d7a:	2b01      	cmp	r3, #1
 8020d7c:	d00a      	beq.n	8020d94 <_raise_r+0x4c>
 8020d7e:	1c59      	adds	r1, r3, #1
 8020d80:	d103      	bne.n	8020d8a <_raise_r+0x42>
 8020d82:	2316      	movs	r3, #22
 8020d84:	6003      	str	r3, [r0, #0]
 8020d86:	2001      	movs	r0, #1
 8020d88:	e7e7      	b.n	8020d5a <_raise_r+0x12>
 8020d8a:	2400      	movs	r4, #0
 8020d8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020d90:	4628      	mov	r0, r5
 8020d92:	4798      	blx	r3
 8020d94:	2000      	movs	r0, #0
 8020d96:	e7e0      	b.n	8020d5a <_raise_r+0x12>

08020d98 <raise>:
 8020d98:	4b02      	ldr	r3, [pc, #8]	; (8020da4 <raise+0xc>)
 8020d9a:	4601      	mov	r1, r0
 8020d9c:	6818      	ldr	r0, [r3, #0]
 8020d9e:	f7ff bfd3 	b.w	8020d48 <_raise_r>
 8020da2:	bf00      	nop
 8020da4:	2400a190 	.word	0x2400a190

08020da8 <_kill_r>:
 8020da8:	b538      	push	{r3, r4, r5, lr}
 8020daa:	4d07      	ldr	r5, [pc, #28]	; (8020dc8 <_kill_r+0x20>)
 8020dac:	2300      	movs	r3, #0
 8020dae:	4604      	mov	r4, r0
 8020db0:	4608      	mov	r0, r1
 8020db2:	4611      	mov	r1, r2
 8020db4:	602b      	str	r3, [r5, #0]
 8020db6:	f7e0 fe6f 	bl	8001a98 <_kill>
 8020dba:	1c43      	adds	r3, r0, #1
 8020dbc:	d102      	bne.n	8020dc4 <_kill_r+0x1c>
 8020dbe:	682b      	ldr	r3, [r5, #0]
 8020dc0:	b103      	cbz	r3, 8020dc4 <_kill_r+0x1c>
 8020dc2:	6023      	str	r3, [r4, #0]
 8020dc4:	bd38      	pop	{r3, r4, r5, pc}
 8020dc6:	bf00      	nop
 8020dc8:	240147f0 	.word	0x240147f0

08020dcc <_getpid_r>:
 8020dcc:	f7e0 be5c 	b.w	8001a88 <_getpid>

08020dd0 <__sread>:
 8020dd0:	b510      	push	{r4, lr}
 8020dd2:	460c      	mov	r4, r1
 8020dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020dd8:	f000 f8a8 	bl	8020f2c <_read_r>
 8020ddc:	2800      	cmp	r0, #0
 8020dde:	bfab      	itete	ge
 8020de0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8020de2:	89a3      	ldrhlt	r3, [r4, #12]
 8020de4:	181b      	addge	r3, r3, r0
 8020de6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020dea:	bfac      	ite	ge
 8020dec:	6563      	strge	r3, [r4, #84]	; 0x54
 8020dee:	81a3      	strhlt	r3, [r4, #12]
 8020df0:	bd10      	pop	{r4, pc}

08020df2 <__swrite>:
 8020df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020df6:	461f      	mov	r7, r3
 8020df8:	898b      	ldrh	r3, [r1, #12]
 8020dfa:	05db      	lsls	r3, r3, #23
 8020dfc:	4605      	mov	r5, r0
 8020dfe:	460c      	mov	r4, r1
 8020e00:	4616      	mov	r6, r2
 8020e02:	d505      	bpl.n	8020e10 <__swrite+0x1e>
 8020e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020e08:	2302      	movs	r3, #2
 8020e0a:	2200      	movs	r2, #0
 8020e0c:	f000 f874 	bl	8020ef8 <_lseek_r>
 8020e10:	89a3      	ldrh	r3, [r4, #12]
 8020e12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020e16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020e1a:	81a3      	strh	r3, [r4, #12]
 8020e1c:	4632      	mov	r2, r6
 8020e1e:	463b      	mov	r3, r7
 8020e20:	4628      	mov	r0, r5
 8020e22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020e26:	f000 b823 	b.w	8020e70 <_write_r>

08020e2a <__sseek>:
 8020e2a:	b510      	push	{r4, lr}
 8020e2c:	460c      	mov	r4, r1
 8020e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020e32:	f000 f861 	bl	8020ef8 <_lseek_r>
 8020e36:	1c43      	adds	r3, r0, #1
 8020e38:	89a3      	ldrh	r3, [r4, #12]
 8020e3a:	bf15      	itete	ne
 8020e3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8020e3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020e42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020e46:	81a3      	strheq	r3, [r4, #12]
 8020e48:	bf18      	it	ne
 8020e4a:	81a3      	strhne	r3, [r4, #12]
 8020e4c:	bd10      	pop	{r4, pc}

08020e4e <__sclose>:
 8020e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020e52:	f000 b81f 	b.w	8020e94 <_close_r>

08020e56 <__ascii_wctomb>:
 8020e56:	b149      	cbz	r1, 8020e6c <__ascii_wctomb+0x16>
 8020e58:	2aff      	cmp	r2, #255	; 0xff
 8020e5a:	bf85      	ittet	hi
 8020e5c:	238a      	movhi	r3, #138	; 0x8a
 8020e5e:	6003      	strhi	r3, [r0, #0]
 8020e60:	700a      	strbls	r2, [r1, #0]
 8020e62:	f04f 30ff 	movhi.w	r0, #4294967295
 8020e66:	bf98      	it	ls
 8020e68:	2001      	movls	r0, #1
 8020e6a:	4770      	bx	lr
 8020e6c:	4608      	mov	r0, r1
 8020e6e:	4770      	bx	lr

08020e70 <_write_r>:
 8020e70:	b538      	push	{r3, r4, r5, lr}
 8020e72:	4d07      	ldr	r5, [pc, #28]	; (8020e90 <_write_r+0x20>)
 8020e74:	4604      	mov	r4, r0
 8020e76:	4608      	mov	r0, r1
 8020e78:	4611      	mov	r1, r2
 8020e7a:	2200      	movs	r2, #0
 8020e7c:	602a      	str	r2, [r5, #0]
 8020e7e:	461a      	mov	r2, r3
 8020e80:	f7e0 fe41 	bl	8001b06 <_write>
 8020e84:	1c43      	adds	r3, r0, #1
 8020e86:	d102      	bne.n	8020e8e <_write_r+0x1e>
 8020e88:	682b      	ldr	r3, [r5, #0]
 8020e8a:	b103      	cbz	r3, 8020e8e <_write_r+0x1e>
 8020e8c:	6023      	str	r3, [r4, #0]
 8020e8e:	bd38      	pop	{r3, r4, r5, pc}
 8020e90:	240147f0 	.word	0x240147f0

08020e94 <_close_r>:
 8020e94:	b538      	push	{r3, r4, r5, lr}
 8020e96:	4d06      	ldr	r5, [pc, #24]	; (8020eb0 <_close_r+0x1c>)
 8020e98:	2300      	movs	r3, #0
 8020e9a:	4604      	mov	r4, r0
 8020e9c:	4608      	mov	r0, r1
 8020e9e:	602b      	str	r3, [r5, #0]
 8020ea0:	f7e0 fe4d 	bl	8001b3e <_close>
 8020ea4:	1c43      	adds	r3, r0, #1
 8020ea6:	d102      	bne.n	8020eae <_close_r+0x1a>
 8020ea8:	682b      	ldr	r3, [r5, #0]
 8020eaa:	b103      	cbz	r3, 8020eae <_close_r+0x1a>
 8020eac:	6023      	str	r3, [r4, #0]
 8020eae:	bd38      	pop	{r3, r4, r5, pc}
 8020eb0:	240147f0 	.word	0x240147f0

08020eb4 <_fstat_r>:
 8020eb4:	b538      	push	{r3, r4, r5, lr}
 8020eb6:	4d07      	ldr	r5, [pc, #28]	; (8020ed4 <_fstat_r+0x20>)
 8020eb8:	2300      	movs	r3, #0
 8020eba:	4604      	mov	r4, r0
 8020ebc:	4608      	mov	r0, r1
 8020ebe:	4611      	mov	r1, r2
 8020ec0:	602b      	str	r3, [r5, #0]
 8020ec2:	f7e0 fe48 	bl	8001b56 <_fstat>
 8020ec6:	1c43      	adds	r3, r0, #1
 8020ec8:	d102      	bne.n	8020ed0 <_fstat_r+0x1c>
 8020eca:	682b      	ldr	r3, [r5, #0]
 8020ecc:	b103      	cbz	r3, 8020ed0 <_fstat_r+0x1c>
 8020ece:	6023      	str	r3, [r4, #0]
 8020ed0:	bd38      	pop	{r3, r4, r5, pc}
 8020ed2:	bf00      	nop
 8020ed4:	240147f0 	.word	0x240147f0

08020ed8 <_isatty_r>:
 8020ed8:	b538      	push	{r3, r4, r5, lr}
 8020eda:	4d06      	ldr	r5, [pc, #24]	; (8020ef4 <_isatty_r+0x1c>)
 8020edc:	2300      	movs	r3, #0
 8020ede:	4604      	mov	r4, r0
 8020ee0:	4608      	mov	r0, r1
 8020ee2:	602b      	str	r3, [r5, #0]
 8020ee4:	f7e0 fe47 	bl	8001b76 <_isatty>
 8020ee8:	1c43      	adds	r3, r0, #1
 8020eea:	d102      	bne.n	8020ef2 <_isatty_r+0x1a>
 8020eec:	682b      	ldr	r3, [r5, #0]
 8020eee:	b103      	cbz	r3, 8020ef2 <_isatty_r+0x1a>
 8020ef0:	6023      	str	r3, [r4, #0]
 8020ef2:	bd38      	pop	{r3, r4, r5, pc}
 8020ef4:	240147f0 	.word	0x240147f0

08020ef8 <_lseek_r>:
 8020ef8:	b538      	push	{r3, r4, r5, lr}
 8020efa:	4d07      	ldr	r5, [pc, #28]	; (8020f18 <_lseek_r+0x20>)
 8020efc:	4604      	mov	r4, r0
 8020efe:	4608      	mov	r0, r1
 8020f00:	4611      	mov	r1, r2
 8020f02:	2200      	movs	r2, #0
 8020f04:	602a      	str	r2, [r5, #0]
 8020f06:	461a      	mov	r2, r3
 8020f08:	f7e0 fe40 	bl	8001b8c <_lseek>
 8020f0c:	1c43      	adds	r3, r0, #1
 8020f0e:	d102      	bne.n	8020f16 <_lseek_r+0x1e>
 8020f10:	682b      	ldr	r3, [r5, #0]
 8020f12:	b103      	cbz	r3, 8020f16 <_lseek_r+0x1e>
 8020f14:	6023      	str	r3, [r4, #0]
 8020f16:	bd38      	pop	{r3, r4, r5, pc}
 8020f18:	240147f0 	.word	0x240147f0

08020f1c <_malloc_usable_size_r>:
 8020f1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020f20:	1f18      	subs	r0, r3, #4
 8020f22:	2b00      	cmp	r3, #0
 8020f24:	bfbc      	itt	lt
 8020f26:	580b      	ldrlt	r3, [r1, r0]
 8020f28:	18c0      	addlt	r0, r0, r3
 8020f2a:	4770      	bx	lr

08020f2c <_read_r>:
 8020f2c:	b538      	push	{r3, r4, r5, lr}
 8020f2e:	4d07      	ldr	r5, [pc, #28]	; (8020f4c <_read_r+0x20>)
 8020f30:	4604      	mov	r4, r0
 8020f32:	4608      	mov	r0, r1
 8020f34:	4611      	mov	r1, r2
 8020f36:	2200      	movs	r2, #0
 8020f38:	602a      	str	r2, [r5, #0]
 8020f3a:	461a      	mov	r2, r3
 8020f3c:	f7e0 fdc6 	bl	8001acc <_read>
 8020f40:	1c43      	adds	r3, r0, #1
 8020f42:	d102      	bne.n	8020f4a <_read_r+0x1e>
 8020f44:	682b      	ldr	r3, [r5, #0]
 8020f46:	b103      	cbz	r3, 8020f4a <_read_r+0x1e>
 8020f48:	6023      	str	r3, [r4, #0]
 8020f4a:	bd38      	pop	{r3, r4, r5, pc}
 8020f4c:	240147f0 	.word	0x240147f0

08020f50 <sinf_poly>:
 8020f50:	07cb      	lsls	r3, r1, #31
 8020f52:	d412      	bmi.n	8020f7a <sinf_poly+0x2a>
 8020f54:	ee21 6b00 	vmul.f64	d6, d1, d0
 8020f58:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 8020f5c:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 8020f60:	eea5 7b01 	vfma.f64	d7, d5, d1
 8020f64:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 8020f68:	ee21 1b06 	vmul.f64	d1, d1, d6
 8020f6c:	eea5 0b06 	vfma.f64	d0, d5, d6
 8020f70:	eea7 0b01 	vfma.f64	d0, d7, d1
 8020f74:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8020f78:	4770      	bx	lr
 8020f7a:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 8020f7e:	ee21 6b01 	vmul.f64	d6, d1, d1
 8020f82:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 8020f86:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 8020f8a:	eea1 7b05 	vfma.f64	d7, d1, d5
 8020f8e:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 8020f92:	eea1 0b05 	vfma.f64	d0, d1, d5
 8020f96:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 8020f9a:	ee21 1b06 	vmul.f64	d1, d1, d6
 8020f9e:	eea6 0b05 	vfma.f64	d0, d6, d5
 8020fa2:	e7e5      	b.n	8020f70 <sinf_poly+0x20>
 8020fa4:	0000      	movs	r0, r0
	...

08020fa8 <cosf>:
 8020fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020faa:	ee10 4a10 	vmov	r4, s0
 8020fae:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8020fb2:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8020fb6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8020fba:	d20c      	bcs.n	8020fd6 <cosf+0x2e>
 8020fbc:	ee26 1b06 	vmul.f64	d1, d6, d6
 8020fc0:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 8020fc4:	d378      	bcc.n	80210b8 <cosf+0x110>
 8020fc6:	eeb0 0b46 	vmov.f64	d0, d6
 8020fca:	483f      	ldr	r0, [pc, #252]	; (80210c8 <cosf+0x120>)
 8020fcc:	2101      	movs	r1, #1
 8020fce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8020fd2:	f7ff bfbd 	b.w	8020f50 <sinf_poly>
 8020fd6:	f240 422e 	movw	r2, #1070	; 0x42e
 8020fda:	4293      	cmp	r3, r2
 8020fdc:	d826      	bhi.n	802102c <cosf+0x84>
 8020fde:	4b3a      	ldr	r3, [pc, #232]	; (80210c8 <cosf+0x120>)
 8020fe0:	ed93 7b08 	vldr	d7, [r3, #32]
 8020fe4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8020fe8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8020fec:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8020ff0:	ee17 1a90 	vmov	r1, s15
 8020ff4:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 8020ff8:	1609      	asrs	r1, r1, #24
 8020ffa:	ee07 1a90 	vmov	s15, r1
 8020ffe:	f001 0203 	and.w	r2, r1, #3
 8021002:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8021006:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 802100a:	ed92 0b00 	vldr	d0, [r2]
 802100e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8021012:	f011 0f02 	tst.w	r1, #2
 8021016:	eea5 6b47 	vfms.f64	d6, d5, d7
 802101a:	f081 0101 	eor.w	r1, r1, #1
 802101e:	bf08      	it	eq
 8021020:	4618      	moveq	r0, r3
 8021022:	ee26 1b06 	vmul.f64	d1, d6, d6
 8021026:	ee20 0b06 	vmul.f64	d0, d0, d6
 802102a:	e7d0      	b.n	8020fce <cosf+0x26>
 802102c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8021030:	d23e      	bcs.n	80210b0 <cosf+0x108>
 8021032:	4b26      	ldr	r3, [pc, #152]	; (80210cc <cosf+0x124>)
 8021034:	f3c4 6283 	ubfx	r2, r4, #26, #4
 8021038:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 802103c:	f3c4 0116 	ubfx	r1, r4, #0, #23
 8021040:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8021044:	6a06      	ldr	r6, [r0, #32]
 8021046:	6900      	ldr	r0, [r0, #16]
 8021048:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 802104c:	40a9      	lsls	r1, r5
 802104e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8021052:	fba1 6706 	umull	r6, r7, r1, r6
 8021056:	fb05 f301 	mul.w	r3, r5, r1
 802105a:	463a      	mov	r2, r7
 802105c:	fbe0 2301 	umlal	r2, r3, r0, r1
 8021060:	1c11      	adds	r1, r2, #0
 8021062:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 8021066:	2000      	movs	r0, #0
 8021068:	1a10      	subs	r0, r2, r0
 802106a:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 802106e:	eb63 0101 	sbc.w	r1, r3, r1
 8021072:	f7df fb2b 	bl	80006cc <__aeabi_l2d>
 8021076:	0fb5      	lsrs	r5, r6, #30
 8021078:	4b13      	ldr	r3, [pc, #76]	; (80210c8 <cosf+0x120>)
 802107a:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 802107e:	ed9f 0b10 	vldr	d0, [pc, #64]	; 80210c0 <cosf+0x118>
 8021082:	ec41 0b17 	vmov	d7, r0, r1
 8021086:	f004 0203 	and.w	r2, r4, #3
 802108a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802108e:	ee27 0b00 	vmul.f64	d0, d7, d0
 8021092:	ed92 7b00 	vldr	d7, [r2]
 8021096:	ee20 1b00 	vmul.f64	d1, d0, d0
 802109a:	f014 0f02 	tst.w	r4, #2
 802109e:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80210a2:	f085 0101 	eor.w	r1, r5, #1
 80210a6:	bf08      	it	eq
 80210a8:	4618      	moveq	r0, r3
 80210aa:	ee27 0b00 	vmul.f64	d0, d7, d0
 80210ae:	e78e      	b.n	8020fce <cosf+0x26>
 80210b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80210b4:	f000 b817 	b.w	80210e6 <__math_invalidf>
 80210b8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80210bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80210be:	bf00      	nop
 80210c0:	54442d18 	.word	0x54442d18
 80210c4:	3c1921fb 	.word	0x3c1921fb
 80210c8:	0802ac08 	.word	0x0802ac08
 80210cc:	0802aba4 	.word	0x0802aba4

080210d0 <with_errnof>:
 80210d0:	b513      	push	{r0, r1, r4, lr}
 80210d2:	4604      	mov	r4, r0
 80210d4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80210d8:	f7fb fae2 	bl	801c6a0 <__errno>
 80210dc:	ed9d 0a01 	vldr	s0, [sp, #4]
 80210e0:	6004      	str	r4, [r0, #0]
 80210e2:	b002      	add	sp, #8
 80210e4:	bd10      	pop	{r4, pc}

080210e6 <__math_invalidf>:
 80210e6:	eef0 7a40 	vmov.f32	s15, s0
 80210ea:	ee30 7a40 	vsub.f32	s14, s0, s0
 80210ee:	eef4 7a67 	vcmp.f32	s15, s15
 80210f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80210f6:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80210fa:	d602      	bvs.n	8021102 <__math_invalidf+0x1c>
 80210fc:	2021      	movs	r0, #33	; 0x21
 80210fe:	f7ff bfe7 	b.w	80210d0 <with_errnof>
 8021102:	4770      	bx	lr

08021104 <fmax>:
 8021104:	b508      	push	{r3, lr}
 8021106:	ed2d 8b04 	vpush	{d8-d9}
 802110a:	eeb0 8b40 	vmov.f64	d8, d0
 802110e:	eeb0 9b41 	vmov.f64	d9, d1
 8021112:	f000 f82d 	bl	8021170 <__fpclassifyd>
 8021116:	b148      	cbz	r0, 802112c <fmax+0x28>
 8021118:	eeb0 0b49 	vmov.f64	d0, d9
 802111c:	f000 f828 	bl	8021170 <__fpclassifyd>
 8021120:	b130      	cbz	r0, 8021130 <fmax+0x2c>
 8021122:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8021126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802112a:	dc01      	bgt.n	8021130 <fmax+0x2c>
 802112c:	eeb0 8b49 	vmov.f64	d8, d9
 8021130:	eeb0 0b48 	vmov.f64	d0, d8
 8021134:	ecbd 8b04 	vpop	{d8-d9}
 8021138:	bd08      	pop	{r3, pc}

0802113a <fmin>:
 802113a:	b508      	push	{r3, lr}
 802113c:	ed2d 8b04 	vpush	{d8-d9}
 8021140:	eeb0 8b40 	vmov.f64	d8, d0
 8021144:	eeb0 9b41 	vmov.f64	d9, d1
 8021148:	f000 f812 	bl	8021170 <__fpclassifyd>
 802114c:	b148      	cbz	r0, 8021162 <fmin+0x28>
 802114e:	eeb0 0b49 	vmov.f64	d0, d9
 8021152:	f000 f80d 	bl	8021170 <__fpclassifyd>
 8021156:	b130      	cbz	r0, 8021166 <fmin+0x2c>
 8021158:	eeb4 8bc9 	vcmpe.f64	d8, d9
 802115c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021160:	d401      	bmi.n	8021166 <fmin+0x2c>
 8021162:	eeb0 8b49 	vmov.f64	d8, d9
 8021166:	eeb0 0b48 	vmov.f64	d0, d8
 802116a:	ecbd 8b04 	vpop	{d8-d9}
 802116e:	bd08      	pop	{r3, pc}

08021170 <__fpclassifyd>:
 8021170:	ec51 0b10 	vmov	r0, r1, d0
 8021174:	b510      	push	{r4, lr}
 8021176:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 802117a:	460b      	mov	r3, r1
 802117c:	d019      	beq.n	80211b2 <__fpclassifyd+0x42>
 802117e:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 8021182:	490e      	ldr	r1, [pc, #56]	; (80211bc <__fpclassifyd+0x4c>)
 8021184:	428a      	cmp	r2, r1
 8021186:	d90e      	bls.n	80211a6 <__fpclassifyd+0x36>
 8021188:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 802118c:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8021190:	428a      	cmp	r2, r1
 8021192:	d908      	bls.n	80211a6 <__fpclassifyd+0x36>
 8021194:	4a0a      	ldr	r2, [pc, #40]	; (80211c0 <__fpclassifyd+0x50>)
 8021196:	4213      	tst	r3, r2
 8021198:	d007      	beq.n	80211aa <__fpclassifyd+0x3a>
 802119a:	4294      	cmp	r4, r2
 802119c:	d107      	bne.n	80211ae <__fpclassifyd+0x3e>
 802119e:	fab0 f080 	clz	r0, r0
 80211a2:	0940      	lsrs	r0, r0, #5
 80211a4:	bd10      	pop	{r4, pc}
 80211a6:	2004      	movs	r0, #4
 80211a8:	e7fc      	b.n	80211a4 <__fpclassifyd+0x34>
 80211aa:	2003      	movs	r0, #3
 80211ac:	e7fa      	b.n	80211a4 <__fpclassifyd+0x34>
 80211ae:	2000      	movs	r0, #0
 80211b0:	e7f8      	b.n	80211a4 <__fpclassifyd+0x34>
 80211b2:	2800      	cmp	r0, #0
 80211b4:	d1ee      	bne.n	8021194 <__fpclassifyd+0x24>
 80211b6:	2002      	movs	r0, #2
 80211b8:	e7f4      	b.n	80211a4 <__fpclassifyd+0x34>
 80211ba:	bf00      	nop
 80211bc:	7fdfffff 	.word	0x7fdfffff
 80211c0:	7ff00000 	.word	0x7ff00000

080211c4 <sinf_poly>:
 80211c4:	07cb      	lsls	r3, r1, #31
 80211c6:	d412      	bmi.n	80211ee <sinf_poly+0x2a>
 80211c8:	ee21 6b00 	vmul.f64	d6, d1, d0
 80211cc:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 80211d0:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 80211d4:	eea5 7b01 	vfma.f64	d7, d5, d1
 80211d8:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 80211dc:	ee21 1b06 	vmul.f64	d1, d1, d6
 80211e0:	eea5 0b06 	vfma.f64	d0, d5, d6
 80211e4:	eea7 0b01 	vfma.f64	d0, d7, d1
 80211e8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80211ec:	4770      	bx	lr
 80211ee:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 80211f2:	ee21 6b01 	vmul.f64	d6, d1, d1
 80211f6:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 80211fa:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 80211fe:	eea1 7b05 	vfma.f64	d7, d1, d5
 8021202:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 8021206:	eea1 0b05 	vfma.f64	d0, d1, d5
 802120a:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 802120e:	ee21 1b06 	vmul.f64	d1, d1, d6
 8021212:	eea6 0b05 	vfma.f64	d0, d6, d5
 8021216:	e7e5      	b.n	80211e4 <sinf_poly+0x20>

08021218 <sinf>:
 8021218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802121a:	ee10 4a10 	vmov	r4, s0
 802121e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8021222:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8021226:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 802122a:	eef0 7a40 	vmov.f32	s15, s0
 802122e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8021232:	d218      	bcs.n	8021266 <sinf+0x4e>
 8021234:	ee26 1b06 	vmul.f64	d1, d6, d6
 8021238:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 802123c:	d20a      	bcs.n	8021254 <sinf+0x3c>
 802123e:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 8021242:	d103      	bne.n	802124c <sinf+0x34>
 8021244:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8021248:	ed8d 1a01 	vstr	s2, [sp, #4]
 802124c:	eeb0 0a67 	vmov.f32	s0, s15
 8021250:	b003      	add	sp, #12
 8021252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021254:	483e      	ldr	r0, [pc, #248]	; (8021350 <sinf+0x138>)
 8021256:	eeb0 0b46 	vmov.f64	d0, d6
 802125a:	2100      	movs	r1, #0
 802125c:	b003      	add	sp, #12
 802125e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8021262:	f7ff bfaf 	b.w	80211c4 <sinf_poly>
 8021266:	f240 422e 	movw	r2, #1070	; 0x42e
 802126a:	4293      	cmp	r3, r2
 802126c:	d824      	bhi.n	80212b8 <sinf+0xa0>
 802126e:	4b38      	ldr	r3, [pc, #224]	; (8021350 <sinf+0x138>)
 8021270:	ed93 7b08 	vldr	d7, [r3, #32]
 8021274:	ee26 7b07 	vmul.f64	d7, d6, d7
 8021278:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 802127c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8021280:	ee17 1a90 	vmov	r1, s15
 8021284:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 8021288:	1609      	asrs	r1, r1, #24
 802128a:	ee07 1a90 	vmov	s15, r1
 802128e:	f001 0203 	and.w	r2, r1, #3
 8021292:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8021296:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 802129a:	ed92 0b00 	vldr	d0, [r2]
 802129e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80212a2:	f011 0f02 	tst.w	r1, #2
 80212a6:	eea5 6b47 	vfms.f64	d6, d5, d7
 80212aa:	bf08      	it	eq
 80212ac:	4618      	moveq	r0, r3
 80212ae:	ee26 1b06 	vmul.f64	d1, d6, d6
 80212b2:	ee20 0b06 	vmul.f64	d0, d0, d6
 80212b6:	e7d1      	b.n	802125c <sinf+0x44>
 80212b8:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 80212bc:	d23d      	bcs.n	802133a <sinf+0x122>
 80212be:	4b25      	ldr	r3, [pc, #148]	; (8021354 <sinf+0x13c>)
 80212c0:	f3c4 6283 	ubfx	r2, r4, #26, #4
 80212c4:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 80212c8:	f3c4 0116 	ubfx	r1, r4, #0, #23
 80212cc:	6a06      	ldr	r6, [r0, #32]
 80212ce:	6900      	ldr	r0, [r0, #16]
 80212d0:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 80212d4:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80212d8:	40a9      	lsls	r1, r5
 80212da:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80212de:	fba1 6706 	umull	r6, r7, r1, r6
 80212e2:	fb05 f301 	mul.w	r3, r5, r1
 80212e6:	463a      	mov	r2, r7
 80212e8:	fbe0 2301 	umlal	r2, r3, r0, r1
 80212ec:	1c11      	adds	r1, r2, #0
 80212ee:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 80212f2:	2000      	movs	r0, #0
 80212f4:	1a10      	subs	r0, r2, r0
 80212f6:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 80212fa:	eb63 0101 	sbc.w	r1, r3, r1
 80212fe:	f7df f9e5 	bl	80006cc <__aeabi_l2d>
 8021302:	0fb5      	lsrs	r5, r6, #30
 8021304:	4a12      	ldr	r2, [pc, #72]	; (8021350 <sinf+0x138>)
 8021306:	eb05 73d4 	add.w	r3, r5, r4, lsr #31
 802130a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8021348 <sinf+0x130>
 802130e:	ec41 0b17 	vmov	d7, r0, r1
 8021312:	f003 0103 	and.w	r1, r3, #3
 8021316:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 802131a:	ee27 0b00 	vmul.f64	d0, d7, d0
 802131e:	ed91 7b00 	vldr	d7, [r1]
 8021322:	ee20 1b00 	vmul.f64	d1, d0, d0
 8021326:	f013 0f02 	tst.w	r3, #2
 802132a:	f102 0070 	add.w	r0, r2, #112	; 0x70
 802132e:	4629      	mov	r1, r5
 8021330:	bf08      	it	eq
 8021332:	4610      	moveq	r0, r2
 8021334:	ee27 0b00 	vmul.f64	d0, d7, d0
 8021338:	e790      	b.n	802125c <sinf+0x44>
 802133a:	b003      	add	sp, #12
 802133c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8021340:	f7ff bed1 	b.w	80210e6 <__math_invalidf>
 8021344:	f3af 8000 	nop.w
 8021348:	54442d18 	.word	0x54442d18
 802134c:	3c1921fb 	.word	0x3c1921fb
 8021350:	0802ac08 	.word	0x0802ac08
 8021354:	0802aba4 	.word	0x0802aba4

08021358 <_init>:
 8021358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802135a:	bf00      	nop
 802135c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802135e:	bc08      	pop	{r3}
 8021360:	469e      	mov	lr, r3
 8021362:	4770      	bx	lr

08021364 <_fini>:
 8021364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021366:	bf00      	nop
 8021368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802136a:	bc08      	pop	{r3}
 802136c:	469e      	mov	lr, r3
 802136e:	4770      	bx	lr
