
SelfDriving_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f808  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ebc  0800faa8  0800faa8  0001faa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010964  08010964  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  08010964  08010964  00020964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801096c  0801096c  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801096c  0801096c  0002096c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010970  08010970  00020970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000294  24000000  08010974  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000294  08010c08  00030294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240002f4  08010c68  000302f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000097c  24000354  08010cc8  00030354  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000cd0  08010cc8  00030cd0  2**0
                  ALLOC
 13 .openamp_section 0000008c  38000000  08010cc8  00040000  2**2
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 15 .debug_info   0005137d  00000000  00000000  00030382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000089cb  00000000  00000000  000816ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001f58  00000000  00000000  0008a0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00001c70  00000000  00000000  0008c028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00045653  00000000  00000000  0008dc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00033d2f  00000000  00000000  000d32eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0018bddc  00000000  00000000  0010701a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000053  00000000  00000000  00292df6  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000093d0  00000000  00000000  00292e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000354 	.word	0x24000354
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800fa90 	.word	0x0800fa90

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000358 	.word	0x24000358
 80002dc:	0800fa90 	.word	0x0800fa90

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b9a6 	b.w	8000a8c <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9d08      	ldr	r5, [sp, #32]
 80007ce:	4604      	mov	r4, r0
 80007d0:	468c      	mov	ip, r1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	f040 8083 	bne.w	80008de <__udivmoddi4+0x116>
 80007d8:	428a      	cmp	r2, r1
 80007da:	4617      	mov	r7, r2
 80007dc:	d947      	bls.n	800086e <__udivmoddi4+0xa6>
 80007de:	fab2 f282 	clz	r2, r2
 80007e2:	b142      	cbz	r2, 80007f6 <__udivmoddi4+0x2e>
 80007e4:	f1c2 0020 	rsb	r0, r2, #32
 80007e8:	fa24 f000 	lsr.w	r0, r4, r0
 80007ec:	4091      	lsls	r1, r2
 80007ee:	4097      	lsls	r7, r2
 80007f0:	ea40 0c01 	orr.w	ip, r0, r1
 80007f4:	4094      	lsls	r4, r2
 80007f6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007fa:	0c23      	lsrs	r3, r4, #16
 80007fc:	fbbc f6f8 	udiv	r6, ip, r8
 8000800:	fa1f fe87 	uxth.w	lr, r7
 8000804:	fb08 c116 	mls	r1, r8, r6, ip
 8000808:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800080c:	fb06 f10e 	mul.w	r1, r6, lr
 8000810:	4299      	cmp	r1, r3
 8000812:	d909      	bls.n	8000828 <__udivmoddi4+0x60>
 8000814:	18fb      	adds	r3, r7, r3
 8000816:	f106 30ff 	add.w	r0, r6, #4294967295
 800081a:	f080 8119 	bcs.w	8000a50 <__udivmoddi4+0x288>
 800081e:	4299      	cmp	r1, r3
 8000820:	f240 8116 	bls.w	8000a50 <__udivmoddi4+0x288>
 8000824:	3e02      	subs	r6, #2
 8000826:	443b      	add	r3, r7
 8000828:	1a5b      	subs	r3, r3, r1
 800082a:	b2a4      	uxth	r4, r4
 800082c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000830:	fb08 3310 	mls	r3, r8, r0, r3
 8000834:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000838:	fb00 fe0e 	mul.w	lr, r0, lr
 800083c:	45a6      	cmp	lr, r4
 800083e:	d909      	bls.n	8000854 <__udivmoddi4+0x8c>
 8000840:	193c      	adds	r4, r7, r4
 8000842:	f100 33ff 	add.w	r3, r0, #4294967295
 8000846:	f080 8105 	bcs.w	8000a54 <__udivmoddi4+0x28c>
 800084a:	45a6      	cmp	lr, r4
 800084c:	f240 8102 	bls.w	8000a54 <__udivmoddi4+0x28c>
 8000850:	3802      	subs	r0, #2
 8000852:	443c      	add	r4, r7
 8000854:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000858:	eba4 040e 	sub.w	r4, r4, lr
 800085c:	2600      	movs	r6, #0
 800085e:	b11d      	cbz	r5, 8000868 <__udivmoddi4+0xa0>
 8000860:	40d4      	lsrs	r4, r2
 8000862:	2300      	movs	r3, #0
 8000864:	e9c5 4300 	strd	r4, r3, [r5]
 8000868:	4631      	mov	r1, r6
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	b902      	cbnz	r2, 8000872 <__udivmoddi4+0xaa>
 8000870:	deff      	udf	#255	; 0xff
 8000872:	fab2 f282 	clz	r2, r2
 8000876:	2a00      	cmp	r2, #0
 8000878:	d150      	bne.n	800091c <__udivmoddi4+0x154>
 800087a:	1bcb      	subs	r3, r1, r7
 800087c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000880:	fa1f f887 	uxth.w	r8, r7
 8000884:	2601      	movs	r6, #1
 8000886:	fbb3 fcfe 	udiv	ip, r3, lr
 800088a:	0c21      	lsrs	r1, r4, #16
 800088c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000890:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000894:	fb08 f30c 	mul.w	r3, r8, ip
 8000898:	428b      	cmp	r3, r1
 800089a:	d907      	bls.n	80008ac <__udivmoddi4+0xe4>
 800089c:	1879      	adds	r1, r7, r1
 800089e:	f10c 30ff 	add.w	r0, ip, #4294967295
 80008a2:	d202      	bcs.n	80008aa <__udivmoddi4+0xe2>
 80008a4:	428b      	cmp	r3, r1
 80008a6:	f200 80e9 	bhi.w	8000a7c <__udivmoddi4+0x2b4>
 80008aa:	4684      	mov	ip, r0
 80008ac:	1ac9      	subs	r1, r1, r3
 80008ae:	b2a3      	uxth	r3, r4
 80008b0:	fbb1 f0fe 	udiv	r0, r1, lr
 80008b4:	fb0e 1110 	mls	r1, lr, r0, r1
 80008b8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80008bc:	fb08 f800 	mul.w	r8, r8, r0
 80008c0:	45a0      	cmp	r8, r4
 80008c2:	d907      	bls.n	80008d4 <__udivmoddi4+0x10c>
 80008c4:	193c      	adds	r4, r7, r4
 80008c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x10a>
 80008cc:	45a0      	cmp	r8, r4
 80008ce:	f200 80d9 	bhi.w	8000a84 <__udivmoddi4+0x2bc>
 80008d2:	4618      	mov	r0, r3
 80008d4:	eba4 0408 	sub.w	r4, r4, r8
 80008d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008dc:	e7bf      	b.n	800085e <__udivmoddi4+0x96>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d909      	bls.n	80008f6 <__udivmoddi4+0x12e>
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	f000 80b1 	beq.w	8000a4a <__udivmoddi4+0x282>
 80008e8:	2600      	movs	r6, #0
 80008ea:	e9c5 0100 	strd	r0, r1, [r5]
 80008ee:	4630      	mov	r0, r6
 80008f0:	4631      	mov	r1, r6
 80008f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f6:	fab3 f683 	clz	r6, r3
 80008fa:	2e00      	cmp	r6, #0
 80008fc:	d14a      	bne.n	8000994 <__udivmoddi4+0x1cc>
 80008fe:	428b      	cmp	r3, r1
 8000900:	d302      	bcc.n	8000908 <__udivmoddi4+0x140>
 8000902:	4282      	cmp	r2, r0
 8000904:	f200 80b8 	bhi.w	8000a78 <__udivmoddi4+0x2b0>
 8000908:	1a84      	subs	r4, r0, r2
 800090a:	eb61 0103 	sbc.w	r1, r1, r3
 800090e:	2001      	movs	r0, #1
 8000910:	468c      	mov	ip, r1
 8000912:	2d00      	cmp	r5, #0
 8000914:	d0a8      	beq.n	8000868 <__udivmoddi4+0xa0>
 8000916:	e9c5 4c00 	strd	r4, ip, [r5]
 800091a:	e7a5      	b.n	8000868 <__udivmoddi4+0xa0>
 800091c:	f1c2 0320 	rsb	r3, r2, #32
 8000920:	fa20 f603 	lsr.w	r6, r0, r3
 8000924:	4097      	lsls	r7, r2
 8000926:	fa01 f002 	lsl.w	r0, r1, r2
 800092a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800092e:	40d9      	lsrs	r1, r3
 8000930:	4330      	orrs	r0, r6
 8000932:	0c03      	lsrs	r3, r0, #16
 8000934:	fbb1 f6fe 	udiv	r6, r1, lr
 8000938:	fa1f f887 	uxth.w	r8, r7
 800093c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000940:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000944:	fb06 f108 	mul.w	r1, r6, r8
 8000948:	4299      	cmp	r1, r3
 800094a:	fa04 f402 	lsl.w	r4, r4, r2
 800094e:	d909      	bls.n	8000964 <__udivmoddi4+0x19c>
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	f106 3cff 	add.w	ip, r6, #4294967295
 8000956:	f080 808d 	bcs.w	8000a74 <__udivmoddi4+0x2ac>
 800095a:	4299      	cmp	r1, r3
 800095c:	f240 808a 	bls.w	8000a74 <__udivmoddi4+0x2ac>
 8000960:	3e02      	subs	r6, #2
 8000962:	443b      	add	r3, r7
 8000964:	1a5b      	subs	r3, r3, r1
 8000966:	b281      	uxth	r1, r0
 8000968:	fbb3 f0fe 	udiv	r0, r3, lr
 800096c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000970:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000974:	fb00 f308 	mul.w	r3, r0, r8
 8000978:	428b      	cmp	r3, r1
 800097a:	d907      	bls.n	800098c <__udivmoddi4+0x1c4>
 800097c:	1879      	adds	r1, r7, r1
 800097e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000982:	d273      	bcs.n	8000a6c <__udivmoddi4+0x2a4>
 8000984:	428b      	cmp	r3, r1
 8000986:	d971      	bls.n	8000a6c <__udivmoddi4+0x2a4>
 8000988:	3802      	subs	r0, #2
 800098a:	4439      	add	r1, r7
 800098c:	1acb      	subs	r3, r1, r3
 800098e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000992:	e778      	b.n	8000886 <__udivmoddi4+0xbe>
 8000994:	f1c6 0c20 	rsb	ip, r6, #32
 8000998:	fa03 f406 	lsl.w	r4, r3, r6
 800099c:	fa22 f30c 	lsr.w	r3, r2, ip
 80009a0:	431c      	orrs	r4, r3
 80009a2:	fa20 f70c 	lsr.w	r7, r0, ip
 80009a6:	fa01 f306 	lsl.w	r3, r1, r6
 80009aa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80009ae:	fa21 f10c 	lsr.w	r1, r1, ip
 80009b2:	431f      	orrs	r7, r3
 80009b4:	0c3b      	lsrs	r3, r7, #16
 80009b6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009ba:	fa1f f884 	uxth.w	r8, r4
 80009be:	fb0e 1119 	mls	r1, lr, r9, r1
 80009c2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009c6:	fb09 fa08 	mul.w	sl, r9, r8
 80009ca:	458a      	cmp	sl, r1
 80009cc:	fa02 f206 	lsl.w	r2, r2, r6
 80009d0:	fa00 f306 	lsl.w	r3, r0, r6
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x220>
 80009d6:	1861      	adds	r1, r4, r1
 80009d8:	f109 30ff 	add.w	r0, r9, #4294967295
 80009dc:	d248      	bcs.n	8000a70 <__udivmoddi4+0x2a8>
 80009de:	458a      	cmp	sl, r1
 80009e0:	d946      	bls.n	8000a70 <__udivmoddi4+0x2a8>
 80009e2:	f1a9 0902 	sub.w	r9, r9, #2
 80009e6:	4421      	add	r1, r4
 80009e8:	eba1 010a 	sub.w	r1, r1, sl
 80009ec:	b2bf      	uxth	r7, r7
 80009ee:	fbb1 f0fe 	udiv	r0, r1, lr
 80009f2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009f6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009fa:	fb00 f808 	mul.w	r8, r0, r8
 80009fe:	45b8      	cmp	r8, r7
 8000a00:	d907      	bls.n	8000a12 <__udivmoddi4+0x24a>
 8000a02:	19e7      	adds	r7, r4, r7
 8000a04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a08:	d22e      	bcs.n	8000a68 <__udivmoddi4+0x2a0>
 8000a0a:	45b8      	cmp	r8, r7
 8000a0c:	d92c      	bls.n	8000a68 <__udivmoddi4+0x2a0>
 8000a0e:	3802      	subs	r0, #2
 8000a10:	4427      	add	r7, r4
 8000a12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a16:	eba7 0708 	sub.w	r7, r7, r8
 8000a1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000a1e:	454f      	cmp	r7, r9
 8000a20:	46c6      	mov	lr, r8
 8000a22:	4649      	mov	r1, r9
 8000a24:	d31a      	bcc.n	8000a5c <__udivmoddi4+0x294>
 8000a26:	d017      	beq.n	8000a58 <__udivmoddi4+0x290>
 8000a28:	b15d      	cbz	r5, 8000a42 <__udivmoddi4+0x27a>
 8000a2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a36:	40f2      	lsrs	r2, r6
 8000a38:	ea4c 0202 	orr.w	r2, ip, r2
 8000a3c:	40f7      	lsrs	r7, r6
 8000a3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a42:	2600      	movs	r6, #0
 8000a44:	4631      	mov	r1, r6
 8000a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4a:	462e      	mov	r6, r5
 8000a4c:	4628      	mov	r0, r5
 8000a4e:	e70b      	b.n	8000868 <__udivmoddi4+0xa0>
 8000a50:	4606      	mov	r6, r0
 8000a52:	e6e9      	b.n	8000828 <__udivmoddi4+0x60>
 8000a54:	4618      	mov	r0, r3
 8000a56:	e6fd      	b.n	8000854 <__udivmoddi4+0x8c>
 8000a58:	4543      	cmp	r3, r8
 8000a5a:	d2e5      	bcs.n	8000a28 <__udivmoddi4+0x260>
 8000a5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a60:	eb69 0104 	sbc.w	r1, r9, r4
 8000a64:	3801      	subs	r0, #1
 8000a66:	e7df      	b.n	8000a28 <__udivmoddi4+0x260>
 8000a68:	4608      	mov	r0, r1
 8000a6a:	e7d2      	b.n	8000a12 <__udivmoddi4+0x24a>
 8000a6c:	4660      	mov	r0, ip
 8000a6e:	e78d      	b.n	800098c <__udivmoddi4+0x1c4>
 8000a70:	4681      	mov	r9, r0
 8000a72:	e7b9      	b.n	80009e8 <__udivmoddi4+0x220>
 8000a74:	4666      	mov	r6, ip
 8000a76:	e775      	b.n	8000964 <__udivmoddi4+0x19c>
 8000a78:	4630      	mov	r0, r6
 8000a7a:	e74a      	b.n	8000912 <__udivmoddi4+0x14a>
 8000a7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a80:	4439      	add	r1, r7
 8000a82:	e713      	b.n	80008ac <__udivmoddi4+0xe4>
 8000a84:	3802      	subs	r0, #2
 8000a86:	443c      	add	r4, r7
 8000a88:	e724      	b.n	80008d4 <__udivmoddi4+0x10c>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_idiv0>:
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <rpmsg_recv_callback>:

uint32_t receivedDataPointer = 0;

int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data,
		size_t len, uint32_t src, void *priv)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
 8000a9c:	603b      	str	r3, [r7, #0]
	received_data = *((unsigned int *) data);
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <rpmsg_recv_callback+0x38>)
 8000aa4:	6013      	str	r3, [r2, #0]
	receivedDataPointer = (uint32_t)((unsigned int *) data);
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	4a08      	ldr	r2, [pc, #32]	; (8000acc <rpmsg_recv_callback+0x3c>)
 8000aaa:	6013      	str	r3, [r2, #0]
	message_received=1;
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <rpmsg_recv_callback+0x40>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	601a      	str	r2, [r3, #0]
	parseRecievedMessages((uint8_t)received_data);
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <rpmsg_recv_callback+0x38>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 f853 	bl	8000b64 <parseRecievedMessages>
	return 0;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	24000730 	.word	0x24000730
 8000acc:	24000370 	.word	0x24000370
 8000ad0:	24000778 	.word	0x24000778

08000ad4 <receive_message>:
}
#endif

#ifdef CORE_CM7
unsigned int receive_message(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	while (message_received == 0 && service_created == 1)
 8000ad8:	e001      	b.n	8000ade <receive_message+0xa>
	{
		OPENAMP_check_for_message();
 8000ada:	f00a fb9b 	bl	800b214 <OPENAMP_check_for_message>
	while (message_received == 0 && service_created == 1)
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <receive_message+0x28>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d103      	bne.n	8000aee <receive_message+0x1a>
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <receive_message+0x2c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d0f5      	beq.n	8000ada <receive_message+0x6>
	}
	message_received = 0;
 8000aee:	4b03      	ldr	r3, [pc, #12]	; (8000afc <receive_message+0x28>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]

	return received_data;
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <receive_message+0x30>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	24000778 	.word	0x24000778
 8000b00:	24000734 	.word	0x24000734
 8000b04:	24000730 	.word	0x24000730

08000b08 <service_destroy_cb>:
void service_destroy_cb(struct rpmsg_endpoint *ept)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	/* this function is called while remote endpoint as been destroyed, the
	 * service is no more available
	 */
	service_created = 0;
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <service_destroy_cb+0x1c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	24000734 	.word	0x24000734

08000b28 <new_service_cb>:

void new_service_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
	/* create a endpoint for rmpsg communication */
	OPENAMP_create_endpoint(&rp_endpoint, name, dest, rpmsg_recv_callback,
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <new_service_cb+0x2c>)
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <new_service_cb+0x30>)
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	4807      	ldr	r0, [pc, #28]	; (8000b5c <new_service_cb+0x34>)
 8000b40:	f00a fb4a 	bl	800b1d8 <OPENAMP_create_endpoint>
			service_destroy_cb);
	service_created = 1;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <new_service_cb+0x38>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	601a      	str	r2, [r3, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	08000b09 	.word	0x08000b09
 8000b58:	08000a91 	.word	0x08000a91
 8000b5c:	24000738 	.word	0x24000738
 8000b60:	24000734 	.word	0x24000734

08000b64 <parseRecievedMessages>:
 */

#include "main.h"

void parseRecievedMessages(uint8_t opCode)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
	switch (opCode)
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d10a      	bne.n	8000b8a <parseRecievedMessages+0x26>
	{
#ifdef CORE_CM7
		case (1):
		{
			int a = 1;
 8000b74:	2301      	movs	r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
			memcpy(receivedAnglesData, (uint32_t *)receivedDataPointer, sizeof(tANGLESMESSAGES));
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <parseRecievedMessages+0x30>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a06      	ldr	r2, [pc, #24]	; (8000b98 <parseRecievedMessages+0x34>)
 8000b7e:	6812      	ldr	r2, [r2, #0]
 8000b80:	4611      	mov	r1, r2
 8000b82:	221c      	movs	r2, #28
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00a fc1d 	bl	800b3c4 <memcpy>
		default:
		{

		}
	}
}
 8000b8a:	bf00      	nop
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2400072c 	.word	0x2400072c
 8000b98:	24000370 	.word	0x24000370

08000b9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ba0:	4b3f      	ldr	r3, [pc, #252]	; (8000ca0 <SystemInit+0x104>)
 8000ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba6:	4a3e      	ldr	r2, [pc, #248]	; (8000ca0 <SystemInit+0x104>)
 8000ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000bb0:	4b3b      	ldr	r3, [pc, #236]	; (8000ca0 <SystemInit+0x104>)
 8000bb2:	691b      	ldr	r3, [r3, #16]
 8000bb4:	4a3a      	ldr	r2, [pc, #232]	; (8000ca0 <SystemInit+0x104>)
 8000bb6:	f043 0310 	orr.w	r3, r3, #16
 8000bba:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bbc:	4b39      	ldr	r3, [pc, #228]	; (8000ca4 <SystemInit+0x108>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f003 030f 	and.w	r3, r3, #15
 8000bc4:	2b06      	cmp	r3, #6
 8000bc6:	d807      	bhi.n	8000bd8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bc8:	4b36      	ldr	r3, [pc, #216]	; (8000ca4 <SystemInit+0x108>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f023 030f 	bic.w	r3, r3, #15
 8000bd0:	4a34      	ldr	r2, [pc, #208]	; (8000ca4 <SystemInit+0x108>)
 8000bd2:	f043 0307 	orr.w	r3, r3, #7
 8000bd6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bd8:	4b33      	ldr	r3, [pc, #204]	; (8000ca8 <SystemInit+0x10c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a32      	ldr	r2, [pc, #200]	; (8000ca8 <SystemInit+0x10c>)
 8000bde:	f043 0301 	orr.w	r3, r3, #1
 8000be2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000be4:	4b30      	ldr	r3, [pc, #192]	; (8000ca8 <SystemInit+0x10c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bea:	4b2f      	ldr	r3, [pc, #188]	; (8000ca8 <SystemInit+0x10c>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	492e      	ldr	r1, [pc, #184]	; (8000ca8 <SystemInit+0x10c>)
 8000bf0:	4b2e      	ldr	r3, [pc, #184]	; (8000cac <SystemInit+0x110>)
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bf6:	4b2b      	ldr	r3, [pc, #172]	; (8000ca4 <SystemInit+0x108>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 0308 	and.w	r3, r3, #8
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d007      	beq.n	8000c12 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c02:	4b28      	ldr	r3, [pc, #160]	; (8000ca4 <SystemInit+0x108>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f023 030f 	bic.w	r3, r3, #15
 8000c0a:	4a26      	ldr	r2, [pc, #152]	; (8000ca4 <SystemInit+0x108>)
 8000c0c:	f043 0307 	orr.w	r3, r3, #7
 8000c10:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c12:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <SystemInit+0x10c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c18:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <SystemInit+0x10c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c1e:	4b22      	ldr	r3, [pc, #136]	; (8000ca8 <SystemInit+0x10c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c24:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <SystemInit+0x10c>)
 8000c26:	4a22      	ldr	r2, [pc, #136]	; (8000cb0 <SystemInit+0x114>)
 8000c28:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <SystemInit+0x10c>)
 8000c2c:	4a21      	ldr	r2, [pc, #132]	; (8000cb4 <SystemInit+0x118>)
 8000c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c30:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <SystemInit+0x10c>)
 8000c32:	4a21      	ldr	r2, [pc, #132]	; (8000cb8 <SystemInit+0x11c>)
 8000c34:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <SystemInit+0x10c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <SystemInit+0x10c>)
 8000c3e:	4a1e      	ldr	r2, [pc, #120]	; (8000cb8 <SystemInit+0x11c>)
 8000c40:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <SystemInit+0x10c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c48:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <SystemInit+0x10c>)
 8000c4a:	4a1b      	ldr	r2, [pc, #108]	; (8000cb8 <SystemInit+0x11c>)
 8000c4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c4e:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <SystemInit+0x10c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c54:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <SystemInit+0x10c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a13      	ldr	r2, [pc, #76]	; (8000ca8 <SystemInit+0x10c>)
 8000c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <SystemInit+0x10c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <SystemInit+0x120>)
 8000c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c6a:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <SystemInit+0x120>)
 8000c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c70:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <SystemInit+0x124>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <SystemInit+0x128>)
 8000c78:	4013      	ands	r3, r2
 8000c7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c7e:	d202      	bcs.n	8000c86 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <SystemInit+0x12c>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <SystemInit+0x130>)
 8000c88:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c8c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000c8e:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <SystemInit+0x104>)
 8000c90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c94:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00
 8000ca4:	52002000 	.word	0x52002000
 8000ca8:	58024400 	.word	0x58024400
 8000cac:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cb0:	02020200 	.word	0x02020200
 8000cb4:	01ff0000 	.word	0x01ff0000
 8000cb8:	01010280 	.word	0x01010280
 8000cbc:	580000c0 	.word	0x580000c0
 8000cc0:	5c001000 	.word	0x5c001000
 8000cc4:	ffff0000 	.word	0xffff0000
 8000cc8:	51008108 	.word	0x51008108
 8000ccc:	52004000 	.word	0x52004000

08000cd0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000cd4:	4b22      	ldr	r3, [pc, #136]	; (8000d60 <MX_ETH_Init+0x90>)
 8000cd6:	4a23      	ldr	r2, [pc, #140]	; (8000d64 <MX_ETH_Init+0x94>)
 8000cd8:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000cda:	4b21      	ldr	r3, [pc, #132]	; (8000d60 <MX_ETH_Init+0x90>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000ce2:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <MX_ETH_Init+0x90>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000cec:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <MX_ETH_Init+0x90>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	3302      	adds	r3, #2
 8000cf2:	22e1      	movs	r2, #225	; 0xe1
 8000cf4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <MX_ETH_Init+0x90>)
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	3303      	adds	r3, #3
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000d00:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <MX_ETH_Init+0x90>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	3304      	adds	r3, #4
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <MX_ETH_Init+0x90>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	3305      	adds	r3, #5
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <MX_ETH_Init+0x90>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_ETH_Init+0x90>)
 8000d1c:	4a12      	ldr	r2, [pc, #72]	; (8000d68 <MX_ETH_Init+0x98>)
 8000d1e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <MX_ETH_Init+0x90>)
 8000d22:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <MX_ETH_Init+0x9c>)
 8000d24:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <MX_ETH_Init+0x90>)
 8000d28:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d2c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d2e:	480c      	ldr	r0, [pc, #48]	; (8000d60 <MX_ETH_Init+0x90>)
 8000d30:	f001 fca0 	bl	8002674 <HAL_ETH_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000d3a:	f000 fc28 	bl	800158e <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d3e:	2234      	movs	r2, #52	; 0x34
 8000d40:	2100      	movs	r1, #0
 8000d42:	480b      	ldr	r0, [pc, #44]	; (8000d70 <MX_ETH_Init+0xa0>)
 8000d44:	f00a fb66 	bl	800b414 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <MX_ETH_Init+0xa0>)
 8000d4a:	2221      	movs	r2, #33	; 0x21
 8000d4c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <MX_ETH_Init+0xa0>)
 8000d50:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d54:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <MX_ETH_Init+0xa0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	24000624 	.word	0x24000624
 8000d64:	40028000 	.word	0x40028000
 8000d68:	240002f4 	.word	0x240002f4
 8000d6c:	24000294 	.word	0x24000294
 8000d70:	240006ac 	.word	0x240006ac

08000d74 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08e      	sub	sp, #56	; 0x38
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a59      	ldr	r2, [pc, #356]	; (8000ef8 <HAL_ETH_MspInit+0x184>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	f040 80ab 	bne.w	8000eee <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d98:	4b58      	ldr	r3, [pc, #352]	; (8000efc <HAL_ETH_MspInit+0x188>)
 8000d9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d9e:	4a57      	ldr	r2, [pc, #348]	; (8000efc <HAL_ETH_MspInit+0x188>)
 8000da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000da4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000da8:	4b54      	ldr	r3, [pc, #336]	; (8000efc <HAL_ETH_MspInit+0x188>)
 8000daa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000db2:	623b      	str	r3, [r7, #32]
 8000db4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000db6:	4b51      	ldr	r3, [pc, #324]	; (8000efc <HAL_ETH_MspInit+0x188>)
 8000db8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dbc:	4a4f      	ldr	r2, [pc, #316]	; (8000efc <HAL_ETH_MspInit+0x188>)
 8000dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dc6:	4b4d      	ldr	r3, [pc, #308]	; (8000efc <HAL_ETH_MspInit+0x188>)
 8000dc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd0:	61fb      	str	r3, [r7, #28]
 8000dd2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000dd4:	4b49      	ldr	r3, [pc, #292]	; (8000efc <HAL_ETH_MspInit+0x188>)
 8000dd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dda:	4a48      	ldr	r2, [pc, #288]	; (8000efc <HAL_ETH_MspInit+0x188>)
 8000ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000de4:	4b45      	ldr	r3, [pc, #276]	; (8000efc <HAL_ETH_MspInit+0x188>)
 8000de6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dee:	61bb      	str	r3, [r7, #24]
 8000df0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df2:	4b42      	ldr	r3, [pc, #264]	; (8000efc <HAL_ETH_MspInit+0x188>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df8:	4a40      	ldr	r2, [pc, #256]	; (8000efc <HAL_ETH_MspInit+0x188>)
 8000dfa:	f043 0304 	orr.w	r3, r3, #4
 8000dfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e02:	4b3e      	ldr	r3, [pc, #248]	; (8000efc <HAL_ETH_MspInit+0x188>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e08:	f003 0304 	and.w	r3, r3, #4
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e10:	4b3a      	ldr	r3, [pc, #232]	; (8000efc <HAL_ETH_MspInit+0x188>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e16:	4a39      	ldr	r2, [pc, #228]	; (8000efc <HAL_ETH_MspInit+0x188>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e20:	4b36      	ldr	r3, [pc, #216]	; (8000efc <HAL_ETH_MspInit+0x188>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	4b33      	ldr	r3, [pc, #204]	; (8000efc <HAL_ETH_MspInit+0x188>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e34:	4a31      	ldr	r2, [pc, #196]	; (8000efc <HAL_ETH_MspInit+0x188>)
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e3e:	4b2f      	ldr	r3, [pc, #188]	; (8000efc <HAL_ETH_MspInit+0x188>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e4c:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <HAL_ETH_MspInit+0x188>)
 8000e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e52:	4a2a      	ldr	r2, [pc, #168]	; (8000efc <HAL_ETH_MspInit+0x188>)
 8000e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5c:	4b27      	ldr	r3, [pc, #156]	; (8000efc <HAL_ETH_MspInit+0x188>)
 8000e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e6a:	2332      	movs	r3, #50	; 0x32
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e7a:	230b      	movs	r3, #11
 8000e7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e82:	4619      	mov	r1, r3
 8000e84:	481e      	ldr	r0, [pc, #120]	; (8000f00 <HAL_ETH_MspInit+0x18c>)
 8000e86:	f002 f80b 	bl	8002ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e8a:	2386      	movs	r3, #134	; 0x86
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e9a:	230b      	movs	r3, #11
 8000e9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4817      	ldr	r0, [pc, #92]	; (8000f04 <HAL_ETH_MspInit+0x190>)
 8000ea6:	f001 fffb 	bl	8002ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000eaa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ebc:	230b      	movs	r3, #11
 8000ebe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4810      	ldr	r0, [pc, #64]	; (8000f08 <HAL_ETH_MspInit+0x194>)
 8000ec8:	f001 ffea 	bl	8002ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ecc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ede:	230b      	movs	r3, #11
 8000ee0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4808      	ldr	r0, [pc, #32]	; (8000f0c <HAL_ETH_MspInit+0x198>)
 8000eea:	f001 ffd9 	bl	8002ea0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000eee:	bf00      	nop
 8000ef0:	3738      	adds	r7, #56	; 0x38
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40028000 	.word	0x40028000
 8000efc:	58024400 	.word	0x58024400
 8000f00:	58020800 	.word	0x58020800
 8000f04:	58020000 	.word	0x58020000
 8000f08:	58020400 	.word	0x58020400
 8000f0c:	58021800 	.word	0x58021800

08000f10 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b087      	sub	sp, #28
 8000f14:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f16:	4b30      	ldr	r3, [pc, #192]	; (8000fd8 <MX_GPIO_Init+0xc8>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1c:	4a2e      	ldr	r2, [pc, #184]	; (8000fd8 <MX_GPIO_Init+0xc8>)
 8000f1e:	f043 0304 	orr.w	r3, r3, #4
 8000f22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f26:	4b2c      	ldr	r3, [pc, #176]	; (8000fd8 <MX_GPIO_Init+0xc8>)
 8000f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2c:	f003 0304 	and.w	r3, r3, #4
 8000f30:	617b      	str	r3, [r7, #20]
 8000f32:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f34:	4b28      	ldr	r3, [pc, #160]	; (8000fd8 <MX_GPIO_Init+0xc8>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3a:	4a27      	ldr	r2, [pc, #156]	; (8000fd8 <MX_GPIO_Init+0xc8>)
 8000f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f44:	4b24      	ldr	r3, [pc, #144]	; (8000fd8 <MX_GPIO_Init+0xc8>)
 8000f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <MX_GPIO_Init+0xc8>)
 8000f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f58:	4a1f      	ldr	r2, [pc, #124]	; (8000fd8 <MX_GPIO_Init+0xc8>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f62:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <MX_GPIO_Init+0xc8>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f70:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <MX_GPIO_Init+0xc8>)
 8000f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f76:	4a18      	ldr	r2, [pc, #96]	; (8000fd8 <MX_GPIO_Init+0xc8>)
 8000f78:	f043 0302 	orr.w	r3, r3, #2
 8000f7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <MX_GPIO_Init+0xc8>)
 8000f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8e:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <MX_GPIO_Init+0xc8>)
 8000f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f94:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <MX_GPIO_Init+0xc8>)
 8000f96:	f043 0308 	orr.w	r3, r3, #8
 8000f9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <MX_GPIO_Init+0xc8>)
 8000fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa4:	f003 0308 	and.w	r3, r3, #8
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <MX_GPIO_Init+0xc8>)
 8000fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb2:	4a09      	ldr	r2, [pc, #36]	; (8000fd8 <MX_GPIO_Init+0xc8>)
 8000fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <MX_GPIO_Init+0xc8>)
 8000fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]

}
 8000fca:	bf00      	nop
 8000fcc:	371c      	adds	r7, #28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	58024400 	.word	0x58024400

08000fdc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <MX_I2C1_Init+0x74>)
 8000fe2:	4a1c      	ldr	r2, [pc, #112]	; (8001054 <MX_I2C1_Init+0x78>)
 8000fe4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301242;
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <MX_I2C1_Init+0x74>)
 8000fe8:	4a1b      	ldr	r2, [pc, #108]	; (8001058 <MX_I2C1_Init+0x7c>)
 8000fea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <MX_I2C1_Init+0x74>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <MX_I2C1_Init+0x74>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff8:	4b15      	ldr	r3, [pc, #84]	; (8001050 <MX_I2C1_Init+0x74>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_I2C1_Init+0x74>)
 8001000:	2200      	movs	r2, #0
 8001002:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <MX_I2C1_Init+0x74>)
 8001006:	2200      	movs	r2, #0
 8001008:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_I2C1_Init+0x74>)
 800100c:	2200      	movs	r2, #0
 800100e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <MX_I2C1_Init+0x74>)
 8001012:	2200      	movs	r2, #0
 8001014:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001016:	480e      	ldr	r0, [pc, #56]	; (8001050 <MX_I2C1_Init+0x74>)
 8001018:	f002 f94c 	bl	80032b4 <HAL_I2C_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001022:	f000 fab4 	bl	800158e <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001026:	2100      	movs	r1, #0
 8001028:	4809      	ldr	r0, [pc, #36]	; (8001050 <MX_I2C1_Init+0x74>)
 800102a:	f002 fcc9 	bl	80039c0 <HAL_I2CEx_ConfigAnalogFilter>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001034:	f000 faab 	bl	800158e <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001038:	2100      	movs	r1, #0
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <MX_I2C1_Init+0x74>)
 800103c:	f002 fd0b 	bl	8003a56 <HAL_I2CEx_ConfigDigitalFilter>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001046:	f000 faa2 	bl	800158e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	240006e0 	.word	0x240006e0
 8001054:	40005400 	.word	0x40005400
 8001058:	00301242 	.word	0x00301242

0800105c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b0b8      	sub	sp, #224	; 0xe0
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	22bc      	movs	r2, #188	; 0xbc
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f00a f9c9 	bl	800b414 <memset>
  if(i2cHandle->Instance==I2C1)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a28      	ldr	r2, [pc, #160]	; (8001128 <HAL_I2C_MspInit+0xcc>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d149      	bne.n	8001120 <HAL_I2C_MspInit+0xc4>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800108c:	2308      	movs	r3, #8
 800108e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001090:	2300      	movs	r3, #0
 8001092:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001096:	f107 0310 	add.w	r3, r7, #16
 800109a:	4618      	mov	r0, r3
 800109c:	f003 fe76 	bl	8004d8c <HAL_RCCEx_PeriphCLKConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80010a6:	f000 fa72 	bl	800158e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010aa:	4b20      	ldr	r3, [pc, #128]	; (800112c <HAL_I2C_MspInit+0xd0>)
 80010ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b0:	4a1e      	ldr	r2, [pc, #120]	; (800112c <HAL_I2C_MspInit+0xd0>)
 80010b2:	f043 0302 	orr.w	r3, r3, #2
 80010b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ba:	4b1c      	ldr	r3, [pc, #112]	; (800112c <HAL_I2C_MspInit+0xd0>)
 80010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010c8:	23c0      	movs	r3, #192	; 0xc0
 80010ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ce:	2312      	movs	r3, #18
 80010d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010e0:	2304      	movs	r3, #4
 80010e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010ea:	4619      	mov	r1, r3
 80010ec:	4810      	ldr	r0, [pc, #64]	; (8001130 <HAL_I2C_MspInit+0xd4>)
 80010ee:	f001 fed7 	bl	8002ea0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <HAL_I2C_MspInit+0xd0>)
 80010f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010f8:	4a0c      	ldr	r2, [pc, #48]	; (800112c <HAL_I2C_MspInit+0xd0>)
 80010fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001102:	4b0a      	ldr	r3, [pc, #40]	; (800112c <HAL_I2C_MspInit+0xd0>)
 8001104:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 4, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	2104      	movs	r1, #4
 8001114:	201f      	movs	r0, #31
 8001116:	f000 ffb8 	bl	800208a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800111a:	201f      	movs	r0, #31
 800111c:	f000 ffcf 	bl	80020be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001120:	bf00      	nop
 8001122:	37e0      	adds	r7, #224	; 0xe0
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40005400 	.word	0x40005400
 800112c:	58024400 	.word	0x58024400
 8001130:	58020400 	.word	0x58020400

08001134 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af02      	add	r7, sp, #8
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001148:	d101      	bne.n	800114e <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <rpmsg_send+0x3c>)
 800114c:	e00c      	b.n	8001168 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001156:	2301      	movs	r3, #1
 8001158:	9301      	str	r3, [sp, #4]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f008 fc69 	bl	8009a38 <rpmsg_send_offchannel_raw>
 8001166:	4603      	mov	r3, r0
					 len, true);
}
 8001168:	4618      	mov	r0, r3
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	fffff829 	.word	0xfffff829

08001174 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
 8001180:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2220      	movs	r2, #32
 8001186:	68b9      	ldr	r1, [r7, #8]
 8001188:	4618      	mov	r0, r3
 800118a:	f00b fa13 	bl	800c5b4 <strncpy>
	ept->addr = src;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	69fa      	ldr	r2, [r7, #28]
 80011a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08e      	sub	sp, #56	; 0x38
 80011b4:	af02      	add	r7, sp, #8
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	MPU_Config();
 80011b6:	f000 f9c3 	bl	8001540 <MPU_Config>
	CPU_CACHE_Enable();
 80011ba:	f000 f953 	bl	8001464 <CPU_CACHE_Enable>
	timeout = 0xFFFF;
 80011be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	//	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
	//	if ( timeout < 0 )
	//	{
	//		Error_Handler();
	//	}
	  while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 80011c4:	e000      	b.n	80011c8 <main+0x18>
	  {
	      asm("nop");
 80011c6:	bf00      	nop
	  while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 80011c8:	4b5b      	ldr	r3, [pc, #364]	; (8001338 <main+0x188>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1f8      	bne.n	80011c6 <main+0x16>
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d4:	f000 fda8 	bl	8001d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d8:	f000 f8be 	bl	8001358 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 80011dc:	4b56      	ldr	r3, [pc, #344]	; (8001338 <main+0x188>)
 80011de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e2:	4a55      	ldr	r2, [pc, #340]	; (8001338 <main+0x188>)
 80011e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ec:	4b52      	ldr	r3, [pc, #328]	; (8001338 <main+0x188>)
 80011ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011f6:	623b      	str	r3, [r7, #32]
 80011f8:	6a3b      	ldr	r3, [r7, #32]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 80011fa:	2000      	movs	r0, #0
 80011fc:	f002 f800 	bl	8003200 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8001200:	2100      	movs	r1, #0
 8001202:	2000      	movs	r0, #0
 8001204:	f002 f816 	bl	8003234 <HAL_HSEM_Release>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001208:	f7ff fe82 	bl	8000f10 <MX_GPIO_Init>
  MX_ETH_Init();
 800120c:	f7ff fd60 	bl	8000cd0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001210:	f000 fbf2 	bl	80019f8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001214:	f000 fca2 	bl	8001b5c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8001218:	f7ff fee0 	bl	8000fdc <MX_I2C1_Init>
  MX_SPI2_Init();
 800121c:	f000 f9bc 	bl	8001598 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

	MAILBOX_Init();
 8001220:	f009 fe22 	bl	800ae68 <MAILBOX_Init>

	/* Initialize the rpmsg endpoint to set default addresses to RPMSG_ADDR_ANY */
	rpmsg_init_ept(&rp_endpoint, RPMSG_CHAN_NAME, RPMSG_ADDR_ANY, RPMSG_ADDR_ANY,
 8001224:	2300      	movs	r3, #0
 8001226:	9301      	str	r3, [sp, #4]
 8001228:	2300      	movs	r3, #0
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	f04f 33ff 	mov.w	r3, #4294967295
 8001230:	f04f 32ff 	mov.w	r2, #4294967295
 8001234:	4941      	ldr	r1, [pc, #260]	; (800133c <main+0x18c>)
 8001236:	4842      	ldr	r0, [pc, #264]	; (8001340 <main+0x190>)
 8001238:	f7ff ff9c 	bl	8001174 <rpmsg_init_ept>
			NULL, NULL);
	/* Initialize OpenAmp and libmetal libraries */
	if (MX_OPENAMP_Init(RPMSG_MASTER, new_service_cb)!= HAL_OK)
 800123c:	4941      	ldr	r1, [pc, #260]	; (8001344 <main+0x194>)
 800123e:	2000      	movs	r0, #0
 8001240:	f009 ff34 	bl	800b0ac <MX_OPENAMP_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <main+0x9e>
	{
		Error_Handler();
 800124a:	f000 f9a0 	bl	800158e <Error_Handler>
	/*
	 * The rpmsg service is initiate by the remote processor, on A7 new_service_cb
	 * callback is received on service creation. Wait for the callback
	 */
//	HAL_Delay(2000);
	OPENAMP_Wait_EndPointready(&rp_endpoint);
 800124e:	483c      	ldr	r0, [pc, #240]	; (8001340 <main+0x190>)
 8001250:	f009 ffec 	bl	800b22c <OPENAMP_Wait_EndPointready>

	/* Send the massage to the remote CPU */
	int32_t status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 8001254:	2204      	movs	r2, #4
 8001256:	493c      	ldr	r1, [pc, #240]	; (8001348 <main+0x198>)
 8001258:	4839      	ldr	r0, [pc, #228]	; (8001340 <main+0x190>)
 800125a:	f7ff ff6b 	bl	8001134 <rpmsg_send>
 800125e:	62b8      	str	r0, [r7, #40]	; 0x28

	if (status < 0)
 8001260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001262:	2b00      	cmp	r3, #0
 8001264:	da01      	bge.n	800126a <main+0xba>
	{
		Error_Handler();
 8001266:	f000 f992 	bl	800158e <Error_Handler>
	}

	//	ssd1306_TestAll();
	ssd1306_Init();
 800126a:	f006 ffe9 	bl	8008240 <ssd1306_Init>
	ssd1306_TestBorder();
 800126e:	f007 f9f5 	bl	800865c <ssd1306_TestBorder>

	uint8_t message = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (message < 100)
 8001278:	e034      	b.n	80012e4 <main+0x134>
	{
		/* Receive the massage from the remote CPU */
		message = receive_message();
 800127a:	f7ff fc2b 	bl	8000ad4 <receive_message>
 800127e:	4603      	mov	r3, r0
 8001280:	b2db      	uxtb	r3, r3
 8001282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		char localT[32] = "";
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
 8001298:	615a      	str	r2, [r3, #20]
 800129a:	619a      	str	r2, [r3, #24]
		snprintf(localT,sizeof(localT),"%d",message);
 800129c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012a0:	4638      	mov	r0, r7
 80012a2:	4a2a      	ldr	r2, [pc, #168]	; (800134c <main+0x19c>)
 80012a4:	2120      	movs	r1, #32
 80012a6:	f00b f91f 	bl	800c4e8 <sniprintf>
		ssd1306_SetCursor(0, 0);
 80012aa:	2100      	movs	r1, #0
 80012ac:	2000      	movs	r0, #0
 80012ae:	f007 f98b 	bl	80085c8 <ssd1306_SetCursor>
		ssd1306_WriteString(localT, Font_7x10, White);
 80012b2:	4a27      	ldr	r2, [pc, #156]	; (8001350 <main+0x1a0>)
 80012b4:	4638      	mov	r0, r7
 80012b6:	2301      	movs	r3, #1
 80012b8:	ca06      	ldmia	r2, {r1, r2}
 80012ba:	f007 f95f 	bl	800857c <ssd1306_WriteString>
		message++;
 80012be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012c2:	3301      	adds	r3, #1
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		/* Send the massage to the remote CPU */
		status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 80012ca:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80012ce:	2201      	movs	r2, #1
 80012d0:	4619      	mov	r1, r3
 80012d2:	481b      	ldr	r0, [pc, #108]	; (8001340 <main+0x190>)
 80012d4:	f7ff ff2e 	bl	8001134 <rpmsg_send>
 80012d8:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status < 0)
 80012da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012dc:	2b00      	cmp	r3, #0
 80012de:	da01      	bge.n	80012e4 <main+0x134>
		{
			Error_Handler();
 80012e0:	f000 f955 	bl	800158e <Error_Handler>
	while (message < 100)
 80012e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012e8:	2b63      	cmp	r3, #99	; 0x63
 80012ea:	d9c6      	bls.n	800127a <main+0xca>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		message = receive_message();
 80012ec:	f7ff fbf2 	bl	8000ad4 <receive_message>
 80012f0:	4603      	mov	r3, r0
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		char localT[32] = "";
 80012f8:	2300      	movs	r3, #0
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	611a      	str	r2, [r3, #16]
 800130a:	615a      	str	r2, [r3, #20]
 800130c:	619a      	str	r2, [r3, #24]
		snprintf(localT,sizeof(localT),"%03d",message);
 800130e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001312:	4638      	mov	r0, r7
 8001314:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <main+0x1a4>)
 8001316:	2120      	movs	r1, #32
 8001318:	f00b f8e6 	bl	800c4e8 <sniprintf>
		ssd1306_SetCursor(0, 0);
 800131c:	2100      	movs	r1, #0
 800131e:	2000      	movs	r0, #0
 8001320:	f007 f952 	bl	80085c8 <ssd1306_SetCursor>
		ssd1306_WriteString(localT, Font_7x10, White);
 8001324:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <main+0x1a0>)
 8001326:	4638      	mov	r0, r7
 8001328:	2301      	movs	r3, #1
 800132a:	ca06      	ldmia	r2, {r1, r2}
 800132c:	f007 f926 	bl	800857c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8001330:	f007 f814 	bl	800835c <ssd1306_UpdateScreen>
	{
 8001334:	e7da      	b.n	80012ec <main+0x13c>
 8001336:	bf00      	nop
 8001338:	58024400 	.word	0x58024400
 800133c:	0800faa8 	.word	0x0800faa8
 8001340:	24000738 	.word	0x24000738
 8001344:	08000b29 	.word	0x08000b29
 8001348:	24000374 	.word	0x24000374
 800134c:	0800fac0 	.word	0x0800fac0
 8001350:	24000010 	.word	0x24000010
 8001354:	0800fac4 	.word	0x0800fac4

08001358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b09c      	sub	sp, #112	; 0x70
 800135c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001362:	224c      	movs	r2, #76	; 0x4c
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f00a f854 	bl	800b414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	2220      	movs	r2, #32
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f00a f84e 	bl	800b414 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001378:	2004      	movs	r0, #4
 800137a:	f002 fd01 	bl	8003d80 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800137e:	2300      	movs	r3, #0
 8001380:	603b      	str	r3, [r7, #0]
 8001382:	4b35      	ldr	r3, [pc, #212]	; (8001458 <SystemClock_Config+0x100>)
 8001384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001386:	4a34      	ldr	r2, [pc, #208]	; (8001458 <SystemClock_Config+0x100>)
 8001388:	f023 0301 	bic.w	r3, r3, #1
 800138c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800138e:	4b32      	ldr	r3, [pc, #200]	; (8001458 <SystemClock_Config+0x100>)
 8001390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	603b      	str	r3, [r7, #0]
 8001398:	4b30      	ldr	r3, [pc, #192]	; (800145c <SystemClock_Config+0x104>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013a0:	4a2e      	ldr	r2, [pc, #184]	; (800145c <SystemClock_Config+0x104>)
 80013a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b2c      	ldr	r3, [pc, #176]	; (800145c <SystemClock_Config+0x104>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013b4:	bf00      	nop
 80013b6:	4b29      	ldr	r3, [pc, #164]	; (800145c <SystemClock_Config+0x104>)
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013c2:	d1f8      	bne.n	80013b6 <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80013c4:	4b26      	ldr	r3, [pc, #152]	; (8001460 <SystemClock_Config+0x108>)
 80013c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c8:	f023 0303 	bic.w	r3, r3, #3
 80013cc:	4a24      	ldr	r2, [pc, #144]	; (8001460 <SystemClock_Config+0x108>)
 80013ce:	f043 0302 	orr.w	r3, r3, #2
 80013d2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013d4:	2301      	movs	r3, #1
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013de:	2302      	movs	r3, #2
 80013e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013e2:	2302      	movs	r3, #2
 80013e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013e6:	2301      	movs	r3, #1
 80013e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 80013ea:	2312      	movs	r3, #18
 80013ec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013ee:	2302      	movs	r3, #2
 80013f0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013f2:	2302      	movs	r3, #2
 80013f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013f6:	2302      	movs	r3, #2
 80013f8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80013fa:	230c      	movs	r3, #12
 80013fc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80013fe:	2302      	movs	r3, #2
 8001400:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8001402:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001406:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140c:	4618      	mov	r0, r3
 800140e:	f002 fd21 	bl	8003e54 <HAL_RCC_OscConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001418:	f000 f8b9 	bl	800158e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800141c:	233f      	movs	r3, #63	; 0x3f
 800141e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001420:	2303      	movs	r3, #3
 8001422:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001430:	2340      	movs	r3, #64	; 0x40
 8001432:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001438:	2300      	movs	r3, #0
 800143a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2101      	movs	r1, #1
 8001440:	4618      	mov	r0, r3
 8001442:	f003 f917 	bl	8004674 <HAL_RCC_ClockConfig>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800144c:	f000 f89f 	bl	800158e <Error_Handler>
  }
}
 8001450:	bf00      	nop
 8001452:	3770      	adds	r7, #112	; 0x70
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	58000400 	.word	0x58000400
 800145c:	58024800 	.word	0x58024800
 8001460:	58024400 	.word	0x58024400

08001464 <CPU_CACHE_Enable>:
 * @brief  CPU L1-Cache enable.
 * @param  None
 * @retval None
 */
static void CPU_CACHE_Enable(void)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800146a:	4b34      	ldr	r3, [pc, #208]	; (800153c <CPU_CACHE_Enable+0xd8>)
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d11b      	bne.n	80014ae <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001476:	f3bf 8f4f 	dsb	sy
}
 800147a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800147c:	f3bf 8f6f 	isb	sy
}
 8001480:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001482:	4b2e      	ldr	r3, [pc, #184]	; (800153c <CPU_CACHE_Enable+0xd8>)
 8001484:	2200      	movs	r2, #0
 8001486:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800148a:	f3bf 8f4f 	dsb	sy
}
 800148e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001490:	f3bf 8f6f 	isb	sy
}
 8001494:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001496:	4b29      	ldr	r3, [pc, #164]	; (800153c <CPU_CACHE_Enable+0xd8>)
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	4a28      	ldr	r2, [pc, #160]	; (800153c <CPU_CACHE_Enable+0xd8>)
 800149c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80014a2:	f3bf 8f4f 	dsb	sy
}
 80014a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014a8:	f3bf 8f6f 	isb	sy
}
 80014ac:	e000      	b.n	80014b0 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80014ae:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80014b0:	4b22      	ldr	r3, [pc, #136]	; (800153c <CPU_CACHE_Enable+0xd8>)
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d138      	bne.n	800152e <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80014bc:	4b1f      	ldr	r3, [pc, #124]	; (800153c <CPU_CACHE_Enable+0xd8>)
 80014be:	2200      	movs	r2, #0
 80014c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80014c4:	f3bf 8f4f 	dsb	sy
}
 80014c8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80014ca:	4b1c      	ldr	r3, [pc, #112]	; (800153c <CPU_CACHE_Enable+0xd8>)
 80014cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014d0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	0b5b      	lsrs	r3, r3, #13
 80014d6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80014da:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	08db      	lsrs	r3, r3, #3
 80014e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014e4:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	015a      	lsls	r2, r3, #5
 80014ea:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80014ee:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80014f4:	4911      	ldr	r1, [pc, #68]	; (800153c <CPU_CACHE_Enable+0xd8>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	1e5a      	subs	r2, r3, #1
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1ef      	bne.n	80014e6 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	1e5a      	subs	r2, r3, #1
 800150a:	60ba      	str	r2, [r7, #8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1e5      	bne.n	80014dc <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8001510:	f3bf 8f4f 	dsb	sy
}
 8001514:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <CPU_CACHE_Enable+0xd8>)
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	4a08      	ldr	r2, [pc, #32]	; (800153c <CPU_CACHE_Enable+0xd8>)
 800151c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001520:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001522:	f3bf 8f4f 	dsb	sy
}
 8001526:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001528:	f3bf 8f6f 	isb	sy
}
 800152c:	e000      	b.n	8001530 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800152e:	bf00      	nop
	/* Enable I-Cache */
	SCB_EnableICache();

	/* Enable D-Cache */
	SCB_EnableDCache();
}
 8001530:	bf00      	nop
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <MPU_Config>:
 *         The Region Size is 64KB.
 * @param  None
 * @retval None
 */
static void MPU_Config(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct;

	/* Disable the MPU */
	HAL_MPU_Disable();
 8001546:	f000 fdd5 	bl	80020f4 <HAL_MPU_Disable>

	/* Configure the MPU attributes as WT for SDRAM */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800154a:	2301      	movs	r3, #1
 800154c:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = D3_SRAM_BASE;
 800154e:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001552:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8001554:	230f      	movs	r3, #15
 8001556:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001558:	2303      	movs	r3, #3
 800155a:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001564:	2301      	movs	r3, #1
 8001566:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001568:	2300      	movs	r3, #0
 800156a:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800156c:	2300      	movs	r3, #0
 800156e:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8001570:	2300      	movs	r3, #0
 8001572:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	733b      	strb	r3, [r7, #12]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001578:	463b      	mov	r3, r7
 800157a:	4618      	mov	r0, r3
 800157c:	f000 fdf2 	bl	8002164 <HAL_MPU_ConfigRegion>

	/* Enable the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001580:	2004      	movs	r0, #4
 8001582:	f000 fdcf 	bl	8002124 <HAL_MPU_Enable>
}
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001592:	b672      	cpsid	i
}
 8001594:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001596:	e7fe      	b.n	8001596 <Error_Handler+0x8>

08001598 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800159c:	4b27      	ldr	r3, [pc, #156]	; (800163c <MX_SPI2_Init+0xa4>)
 800159e:	4a28      	ldr	r2, [pc, #160]	; (8001640 <MX_SPI2_Init+0xa8>)
 80015a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015a2:	4b26      	ldr	r3, [pc, #152]	; (800163c <MX_SPI2_Init+0xa4>)
 80015a4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80015a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80015aa:	4b24      	ldr	r3, [pc, #144]	; (800163c <MX_SPI2_Init+0xa4>)
 80015ac:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80015b0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015b2:	4b22      	ldr	r3, [pc, #136]	; (800163c <MX_SPI2_Init+0xa4>)
 80015b4:	2207      	movs	r2, #7
 80015b6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015b8:	4b20      	ldr	r3, [pc, #128]	; (800163c <MX_SPI2_Init+0xa4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015be:	4b1f      	ldr	r3, [pc, #124]	; (800163c <MX_SPI2_Init+0xa4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015c4:	4b1d      	ldr	r3, [pc, #116]	; (800163c <MX_SPI2_Init+0xa4>)
 80015c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015ca:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015cc:	4b1b      	ldr	r3, [pc, #108]	; (800163c <MX_SPI2_Init+0xa4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015d2:	4b1a      	ldr	r3, [pc, #104]	; (800163c <MX_SPI2_Init+0xa4>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015d8:	4b18      	ldr	r3, [pc, #96]	; (800163c <MX_SPI2_Init+0xa4>)
 80015da:	2200      	movs	r2, #0
 80015dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015de:	4b17      	ldr	r3, [pc, #92]	; (800163c <MX_SPI2_Init+0xa4>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80015e4:	4b15      	ldr	r3, [pc, #84]	; (800163c <MX_SPI2_Init+0xa4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015ea:	4b14      	ldr	r3, [pc, #80]	; (800163c <MX_SPI2_Init+0xa4>)
 80015ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015f0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <MX_SPI2_Init+0xa4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015f8:	4b10      	ldr	r3, [pc, #64]	; (800163c <MX_SPI2_Init+0xa4>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <MX_SPI2_Init+0xa4>)
 8001600:	2200      	movs	r2, #0
 8001602:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001604:	4b0d      	ldr	r3, [pc, #52]	; (800163c <MX_SPI2_Init+0xa4>)
 8001606:	2200      	movs	r2, #0
 8001608:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <MX_SPI2_Init+0xa4>)
 800160c:	2200      	movs	r2, #0
 800160e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001610:	4b0a      	ldr	r3, [pc, #40]	; (800163c <MX_SPI2_Init+0xa4>)
 8001612:	2200      	movs	r2, #0
 8001614:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <MX_SPI2_Init+0xa4>)
 8001618:	2200      	movs	r2, #0
 800161a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800161c:	4b07      	ldr	r3, [pc, #28]	; (800163c <MX_SPI2_Init+0xa4>)
 800161e:	2200      	movs	r2, #0
 8001620:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <MX_SPI2_Init+0xa4>)
 8001624:	2200      	movs	r2, #0
 8001626:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001628:	4804      	ldr	r0, [pc, #16]	; (800163c <MX_SPI2_Init+0xa4>)
 800162a:	f004 ff11 	bl	8006450 <HAL_SPI_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001634:	f7ff ffab 	bl	800158e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	2400077c 	.word	0x2400077c
 8001640:	40003800 	.word	0x40003800

08001644 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b0ba      	sub	sp, #232	; 0xe8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800165c:	f107 0318 	add.w	r3, r7, #24
 8001660:	22bc      	movs	r2, #188	; 0xbc
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f009 fed5 	bl	800b414 <memset>
  if(spiHandle->Instance==SPI2)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a3a      	ldr	r2, [pc, #232]	; (8001758 <HAL_SPI_MspInit+0x114>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d16d      	bne.n	8001750 <HAL_SPI_MspInit+0x10c>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001678:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800167a:	2300      	movs	r3, #0
 800167c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800167e:	f107 0318 	add.w	r3, r7, #24
 8001682:	4618      	mov	r0, r3
 8001684:	f003 fb82 	bl	8004d8c <HAL_RCCEx_PeriphCLKConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800168e:	f7ff ff7e 	bl	800158e <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001692:	4b32      	ldr	r3, [pc, #200]	; (800175c <HAL_SPI_MspInit+0x118>)
 8001694:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001698:	4a30      	ldr	r2, [pc, #192]	; (800175c <HAL_SPI_MspInit+0x118>)
 800169a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800169e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016a2:	4b2e      	ldr	r3, [pc, #184]	; (800175c <HAL_SPI_MspInit+0x118>)
 80016a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b0:	4b2a      	ldr	r3, [pc, #168]	; (800175c <HAL_SPI_MspInit+0x118>)
 80016b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b6:	4a29      	ldr	r2, [pc, #164]	; (800175c <HAL_SPI_MspInit+0x118>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c0:	4b26      	ldr	r3, [pc, #152]	; (800175c <HAL_SPI_MspInit+0x118>)
 80016c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ce:	4b23      	ldr	r3, [pc, #140]	; (800175c <HAL_SPI_MspInit+0x118>)
 80016d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d4:	4a21      	ldr	r2, [pc, #132]	; (800175c <HAL_SPI_MspInit+0x118>)
 80016d6:	f043 0308 	orr.w	r3, r3, #8
 80016da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016de:	4b1f      	ldr	r3, [pc, #124]	; (800175c <HAL_SPI_MspInit+0x118>)
 80016e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC3_C     ------> SPI2_MOSI
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016ec:	2308      	movs	r3, #8
 80016ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001704:	2305      	movs	r3, #5
 8001706:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800170e:	4619      	mov	r1, r3
 8001710:	4813      	ldr	r0, [pc, #76]	; (8001760 <HAL_SPI_MspInit+0x11c>)
 8001712:	f001 fbc5 	bl	8002ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001716:	2308      	movs	r3, #8
 8001718:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001728:	2300      	movs	r3, #0
 800172a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800172e:	2305      	movs	r3, #5
 8001730:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001734:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001738:	4619      	mov	r1, r3
 800173a:	480a      	ldr	r0, [pc, #40]	; (8001764 <HAL_SPI_MspInit+0x120>)
 800173c:	f001 fbb0 	bl	8002ea0 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001740:	2200      	movs	r2, #0
 8001742:	2100      	movs	r1, #0
 8001744:	2024      	movs	r0, #36	; 0x24
 8001746:	f000 fca0 	bl	800208a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800174a:	2024      	movs	r0, #36	; 0x24
 800174c:	f000 fcb7 	bl	80020be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001750:	bf00      	nop
 8001752:	37e8      	adds	r7, #232	; 0xe8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40003800 	.word	0x40003800
 800175c:	58024400 	.word	0x58024400
 8001760:	58020800 	.word	0x58020800
 8001764:	58020c00 	.word	0x58020c00

08001768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <HAL_MspInit+0x5c>)
 8001770:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001774:	4a13      	ldr	r2, [pc, #76]	; (80017c4 <HAL_MspInit+0x5c>)
 8001776:	f043 0302 	orr.w	r3, r3, #2
 800177a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800177e:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <HAL_MspInit+0x5c>)
 8001780:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* CM4_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM4_SEV_IRQn, 4, 0);
 800178c:	2200      	movs	r2, #0
 800178e:	2104      	movs	r1, #4
 8001790:	2041      	movs	r0, #65	; 0x41
 8001792:	f000 fc7a 	bl	800208a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM4_SEV_IRQn);
 8001796:	2041      	movs	r0, #65	; 0x41
 8001798:	f000 fc91 	bl	80020be <HAL_NVIC_EnableIRQ>
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 4, 0);
 800179c:	2200      	movs	r2, #0
 800179e:	2104      	movs	r1, #4
 80017a0:	207d      	movs	r0, #125	; 0x7d
 80017a2:	f000 fc72 	bl	800208a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 80017a6:	207d      	movs	r0, #125	; 0x7d
 80017a8:	f000 fc89 	bl	80020be <HAL_NVIC_EnableIRQ>
  /* HOLD_CORE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HOLD_CORE_IRQn, 4, 0);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2104      	movs	r1, #4
 80017b0:	2094      	movs	r0, #148	; 0x94
 80017b2:	f000 fc6a 	bl	800208a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HOLD_CORE_IRQn);
 80017b6:	2094      	movs	r0, #148	; 0x94
 80017b8:	f000 fc81 	bl	80020be <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	58024400 	.word	0x58024400

080017c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <NMI_Handler+0x4>

080017ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <HardFault_Handler+0x4>

080017d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <MemManage_Handler+0x4>

080017da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017de:	e7fe      	b.n	80017de <BusFault_Handler+0x4>

080017e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <UsageFault_Handler+0x4>

080017e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001814:	f000 fafa 	bl	8001e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}

0800181c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001820:	4802      	ldr	r0, [pc, #8]	; (800182c <I2C1_EV_IRQHandler+0x10>)
 8001822:	f001 feeb 	bl	80035fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	240006e0 	.word	0x240006e0

08001830 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <SPI2_IRQHandler+0x10>)
 8001836:	f004 ff0d 	bl	8006654 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	2400077c 	.word	0x2400077c

08001844 <CM4_SEV_IRQHandler>:

/**
  * @brief This function handles CM4 send event interrupt for CM7.
  */
void CM4_SEV_IRQHandler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0

  /* USER CODE END CM4_SEV_IRQn 0 */
  /* USER CODE BEGIN CM4_SEV_IRQn 1 */

  /* USER CODE END CM4_SEV_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001856:	f001 fd13 	bl	8003280 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}

0800185e <HOLD_CORE_IRQHandler>:

/**
  * @brief This function handles Hold core interrupt.
  */
void HOLD_CORE_IRQHandler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END HOLD_CORE_IRQn 0 */
  /* USER CODE BEGIN HOLD_CORE_IRQn 1 */

  /* USER CODE END HOLD_CORE_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
	return 1;
 8001870:	2301      	movs	r3, #1
}
 8001872:	4618      	mov	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <_kill>:

int _kill(int pid, int sig)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001886:	f009 fd51 	bl	800b32c <__errno>
 800188a:	4603      	mov	r3, r0
 800188c:	2216      	movs	r2, #22
 800188e:	601a      	str	r2, [r3, #0]
	return -1;
 8001890:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <_exit>:

void _exit (int status)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018a4:	f04f 31ff 	mov.w	r1, #4294967295
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff ffe7 	bl	800187c <_kill>
	while (1) {}		/* Make sure we hang here */
 80018ae:	e7fe      	b.n	80018ae <_exit+0x12>

080018b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	e00a      	b.n	80018d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018c2:	f3af 8000 	nop.w
 80018c6:	4601      	mov	r1, r0
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	60ba      	str	r2, [r7, #8]
 80018ce:	b2ca      	uxtb	r2, r1
 80018d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	3301      	adds	r3, #1
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	429a      	cmp	r2, r3
 80018de:	dbf0      	blt.n	80018c2 <_read+0x12>
	}

return len;
 80018e0:	687b      	ldr	r3, [r7, #4]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b086      	sub	sp, #24
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	60f8      	str	r0, [r7, #12]
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	e009      	b.n	8001910 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	1c5a      	adds	r2, r3, #1
 8001900:	60ba      	str	r2, [r7, #8]
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	3301      	adds	r3, #1
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	429a      	cmp	r2, r3
 8001916:	dbf1      	blt.n	80018fc <_write+0x12>
	}
	return len;
 8001918:	687b      	ldr	r3, [r7, #4]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <_close>:

int _close(int file)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
	return -1;
 800192a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800192e:	4618      	mov	r0, r3
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800194a:	605a      	str	r2, [r3, #4]
	return 0;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <_isatty>:

int _isatty(int file)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
	return 1;
 8001962:	2301      	movs	r3, #1
}
 8001964:	4618      	mov	r0, r3
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
	return 0;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001994:	4a14      	ldr	r2, [pc, #80]	; (80019e8 <_sbrk+0x5c>)
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <_sbrk+0x60>)
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a0:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <_sbrk+0x64>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <_sbrk+0x64>)
 80019aa:	4a12      	ldr	r2, [pc, #72]	; (80019f4 <_sbrk+0x68>)
 80019ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <_sbrk+0x64>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d207      	bcs.n	80019cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019bc:	f009 fcb6 	bl	800b32c <__errno>
 80019c0:	4603      	mov	r3, r0
 80019c2:	220c      	movs	r2, #12
 80019c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ca:	e009      	b.n	80019e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <_sbrk+0x64>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019d2:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	4a05      	ldr	r2, [pc, #20]	; (80019f0 <_sbrk+0x64>)
 80019dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019de:	68fb      	ldr	r3, [r7, #12]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	24040000 	.word	0x24040000
 80019ec:	00000400 	.word	0x00000400
 80019f0:	24000378 	.word	0x24000378
 80019f4:	24000cd0 	.word	0x24000cd0

080019f8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019fc:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <MX_USART3_UART_Init+0x90>)
 80019fe:	4a23      	ldr	r2, [pc, #140]	; (8001a8c <MX_USART3_UART_Init+0x94>)
 8001a00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a02:	4b21      	ldr	r3, [pc, #132]	; (8001a88 <MX_USART3_UART_Init+0x90>)
 8001a04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0a:	4b1f      	ldr	r3, [pc, #124]	; (8001a88 <MX_USART3_UART_Init+0x90>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a10:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <MX_USART3_UART_Init+0x90>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <MX_USART3_UART_Init+0x90>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a1c:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <MX_USART3_UART_Init+0x90>)
 8001a1e:	220c      	movs	r2, #12
 8001a20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a22:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <MX_USART3_UART_Init+0x90>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a28:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <MX_USART3_UART_Init+0x90>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a2e:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <MX_USART3_UART_Init+0x90>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a34:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <MX_USART3_UART_Init+0x90>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a3a:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <MX_USART3_UART_Init+0x90>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a40:	4811      	ldr	r0, [pc, #68]	; (8001a88 <MX_USART3_UART_Init+0x90>)
 8001a42:	f005 f8e4 	bl	8006c0e <HAL_UART_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001a4c:	f7ff fd9f 	bl	800158e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a50:	2100      	movs	r1, #0
 8001a52:	480d      	ldr	r0, [pc, #52]	; (8001a88 <MX_USART3_UART_Init+0x90>)
 8001a54:	f006 f832 	bl	8007abc <HAL_UARTEx_SetTxFifoThreshold>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001a5e:	f7ff fd96 	bl	800158e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a62:	2100      	movs	r1, #0
 8001a64:	4808      	ldr	r0, [pc, #32]	; (8001a88 <MX_USART3_UART_Init+0x90>)
 8001a66:	f006 f867 	bl	8007b38 <HAL_UARTEx_SetRxFifoThreshold>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001a70:	f7ff fd8d 	bl	800158e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001a74:	4804      	ldr	r0, [pc, #16]	; (8001a88 <MX_USART3_UART_Init+0x90>)
 8001a76:	f005 ffe8 	bl	8007a4a <HAL_UARTEx_DisableFifoMode>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001a80:	f7ff fd85 	bl	800158e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	24000804 	.word	0x24000804
 8001a8c:	40004800 	.word	0x40004800

08001a90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b0b8      	sub	sp, #224	; 0xe0
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aa8:	f107 0310 	add.w	r3, r7, #16
 8001aac:	22bc      	movs	r2, #188	; 0xbc
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f009 fcaf 	bl	800b414 <memset>
  if(uartHandle->Instance==USART3)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a25      	ldr	r2, [pc, #148]	; (8001b50 <HAL_UART_MspInit+0xc0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d142      	bne.n	8001b46 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aca:	f107 0310 	add.w	r3, r7, #16
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 f95c 	bl	8004d8c <HAL_RCCEx_PeriphCLKConfig>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ada:	f7ff fd58 	bl	800158e <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ade:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <HAL_UART_MspInit+0xc4>)
 8001ae0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ae4:	4a1b      	ldr	r2, [pc, #108]	; (8001b54 <HAL_UART_MspInit+0xc4>)
 8001ae6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001aee:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <HAL_UART_MspInit+0xc4>)
 8001af0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001af4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001afc:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <HAL_UART_MspInit+0xc4>)
 8001afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b02:	4a14      	ldr	r2, [pc, #80]	; (8001b54 <HAL_UART_MspInit+0xc4>)
 8001b04:	f043 0308 	orr.w	r3, r3, #8
 8001b08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_UART_MspInit+0xc4>)
 8001b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001b1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b34:	2307      	movs	r3, #7
 8001b36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b3a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4805      	ldr	r0, [pc, #20]	; (8001b58 <HAL_UART_MspInit+0xc8>)
 8001b42:	f001 f9ad 	bl	8002ea0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b46:	bf00      	nop
 8001b48:	37e0      	adds	r7, #224	; 0xe0
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40004800 	.word	0x40004800
 8001b54:	58024400 	.word	0x58024400
 8001b58:	58020c00 	.word	0x58020c00

08001b5c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001b60:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b62:	4a16      	ldr	r2, [pc, #88]	; (8001bbc <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001b64:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001b66:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b68:	2209      	movs	r2, #9
 8001b6a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b6e:	2202      	movs	r2, #2
 8001b70:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001b78:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001b96:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ba4:	f001 ffa3 	bl	8003aee <HAL_PCD_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001bae:	f7ff fcee 	bl	800158e <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	24000894 	.word	0x24000894
 8001bbc:	40080000 	.word	0x40080000

08001bc0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b0b8      	sub	sp, #224	; 0xe0
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bd8:	f107 0310 	add.w	r3, r7, #16
 8001bdc:	22bc      	movs	r2, #188	; 0xbc
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f009 fc17 	bl	800b414 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a37      	ldr	r2, [pc, #220]	; (8001cc8 <HAL_PCD_MspInit+0x108>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d166      	bne.n	8001cbe <HAL_PCD_MspInit+0xfe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001bf0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001bf4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001bfa:	2312      	movs	r3, #18
 8001bfc:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001c02:	2303      	movs	r3, #3
 8001c04:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001c06:	2302      	movs	r3, #2
 8001c08:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001c0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c0e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144.0;
 8001c10:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c14:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001c16:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c1e:	f107 0310 	add.w	r3, r7, #16
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 f8b2 	bl	8004d8c <HAL_RCCEx_PeriphCLKConfig>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8001c2e:	f7ff fcae 	bl	800158e <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001c32:	f002 f8ff 	bl	8003e34 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c36:	4b25      	ldr	r3, [pc, #148]	; (8001ccc <HAL_PCD_MspInit+0x10c>)
 8001c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c3c:	4a23      	ldr	r2, [pc, #140]	; (8001ccc <HAL_PCD_MspInit+0x10c>)
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c46:	4b21      	ldr	r3, [pc, #132]	; (8001ccc <HAL_PCD_MspInit+0x10c>)
 8001c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001c54:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001c58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001c6e:	230a      	movs	r3, #10
 8001c70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c74:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4815      	ldr	r0, [pc, #84]	; (8001cd0 <HAL_PCD_MspInit+0x110>)
 8001c7c:	f001 f910 	bl	8002ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c98:	4619      	mov	r1, r3
 8001c9a:	480d      	ldr	r0, [pc, #52]	; (8001cd0 <HAL_PCD_MspInit+0x110>)
 8001c9c:	f001 f900 	bl	8002ea0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ca0:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <HAL_PCD_MspInit+0x10c>)
 8001ca2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ca6:	4a09      	ldr	r2, [pc, #36]	; (8001ccc <HAL_PCD_MspInit+0x10c>)
 8001ca8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001cac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_PCD_MspInit+0x10c>)
 8001cb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	37e0      	adds	r7, #224	; 0xe0
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40080000 	.word	0x40080000
 8001ccc:	58024400 	.word	0x58024400
 8001cd0:	58020000 	.word	0x58020000

08001cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001cd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cd8:	f7fe ff60 	bl	8000b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cdc:	480c      	ldr	r0, [pc, #48]	; (8001d10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cde:	490d      	ldr	r1, [pc, #52]	; (8001d14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ce0:	4a0d      	ldr	r2, [pc, #52]	; (8001d18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce4:	e002      	b.n	8001cec <LoopCopyDataInit>

08001ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cea:	3304      	adds	r3, #4

08001cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf0:	d3f9      	bcc.n	8001ce6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cf4:	4c0a      	ldr	r4, [pc, #40]	; (8001d20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf8:	e001      	b.n	8001cfe <LoopFillZerobss>

08001cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cfc:	3204      	adds	r2, #4

08001cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d00:	d3fb      	bcc.n	8001cfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d02:	f009 fb2b 	bl	800b35c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d06:	f7ff fa53 	bl	80011b0 <main>
  bx  lr
 8001d0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d0c:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8001d10:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d14:	24000294 	.word	0x24000294
  ldr r2, =_sidata
 8001d18:	08010974 	.word	0x08010974
  ldr r2, =_sbss
 8001d1c:	24000354 	.word	0x24000354
  ldr r4, =_ebss
 8001d20:	24000cd0 	.word	0x24000cd0

08001d24 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d24:	e7fe      	b.n	8001d24 <ADC3_IRQHandler>
	...

08001d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d2e:	2003      	movs	r0, #3
 8001d30:	f000 f9a0 	bl	8002074 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d34:	f002 fe54 	bl	80049e0 <HAL_RCC_GetSysClockFreq>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <HAL_Init+0x68>)
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	0a1b      	lsrs	r3, r3, #8
 8001d40:	f003 030f 	and.w	r3, r3, #15
 8001d44:	4913      	ldr	r1, [pc, #76]	; (8001d94 <HAL_Init+0x6c>)
 8001d46:	5ccb      	ldrb	r3, [r1, r3]
 8001d48:	f003 031f 	and.w	r3, r3, #31
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d50:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d52:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <HAL_Init+0x68>)
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	4a0e      	ldr	r2, [pc, #56]	; (8001d94 <HAL_Init+0x6c>)
 8001d5c:	5cd3      	ldrb	r3, [r2, r3]
 8001d5e:	f003 031f 	and.w	r3, r3, #31
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	fa22 f303 	lsr.w	r3, r2, r3
 8001d68:	4a0b      	ldr	r2, [pc, #44]	; (8001d98 <HAL_Init+0x70>)
 8001d6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d6c:	4a0b      	ldr	r2, [pc, #44]	; (8001d9c <HAL_Init+0x74>)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d72:	2000      	movs	r0, #0
 8001d74:	f000 f814 	bl	8001da0 <HAL_InitTick>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e002      	b.n	8001d88 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d82:	f7ff fcf1 	bl	8001768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	58024400 	.word	0x58024400
 8001d94:	0800fca8 	.word	0x0800fca8
 8001d98:	24000004 	.word	0x24000004
 8001d9c:	24000000 	.word	0x24000000

08001da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001da8:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <HAL_InitTick+0x60>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e021      	b.n	8001df8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001db4:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <HAL_InitTick+0x64>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <HAL_InitTick+0x60>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f985 	bl	80020da <HAL_SYSTICK_Config>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e00e      	b.n	8001df8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b0f      	cmp	r3, #15
 8001dde:	d80a      	bhi.n	8001df6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de0:	2200      	movs	r2, #0
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295
 8001de8:	f000 f94f 	bl	800208a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dec:	4a06      	ldr	r2, [pc, #24]	; (8001e08 <HAL_InitTick+0x68>)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	e000      	b.n	8001df8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	2400000c 	.word	0x2400000c
 8001e04:	24000000 	.word	0x24000000
 8001e08:	24000008 	.word	0x24000008

08001e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_IncTick+0x20>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_IncTick+0x24>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	4a04      	ldr	r2, [pc, #16]	; (8001e30 <HAL_IncTick+0x24>)
 8001e1e:	6013      	str	r3, [r2, #0]
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	2400000c 	.word	0x2400000c
 8001e30:	24000c9c 	.word	0x24000c9c

08001e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return uwTick;
 8001e38:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <HAL_GetTick+0x14>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	24000c9c 	.word	0x24000c9c

08001e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e54:	f7ff ffee 	bl	8001e34 <HAL_GetTick>
 8001e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e64:	d005      	beq.n	8001e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e66:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <HAL_Delay+0x44>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4413      	add	r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e72:	bf00      	nop
 8001e74:	f7ff ffde 	bl	8001e34 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d8f7      	bhi.n	8001e74 <HAL_Delay+0x28>
  {
  }
}
 8001e84:	bf00      	nop
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	2400000c 	.word	0x2400000c

08001e94 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001e98:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <HAL_GetREVID+0x14>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	0c1b      	lsrs	r3, r3, #16
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	5c001000 	.word	0x5c001000

08001eac <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001ebc:	4904      	ldr	r1, [pc, #16]	; (8001ed0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	58000400 	.word	0x58000400

08001ed4 <__NVIC_SetPriorityGrouping>:
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <__NVIC_SetPriorityGrouping+0x40>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <__NVIC_SetPriorityGrouping+0x44>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f02:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <__NVIC_SetPriorityGrouping+0x40>)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	60d3      	str	r3, [r2, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00
 8001f18:	05fa0000 	.word	0x05fa0000

08001f1c <__NVIC_GetPriorityGrouping>:
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f20:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <__NVIC_GetPriorityGrouping+0x18>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	0a1b      	lsrs	r3, r3, #8
 8001f26:	f003 0307 	and.w	r3, r3, #7
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <__NVIC_EnableIRQ>:
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	db0b      	blt.n	8001f62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	f003 021f 	and.w	r2, r3, #31
 8001f50:	4907      	ldr	r1, [pc, #28]	; (8001f70 <__NVIC_EnableIRQ+0x38>)
 8001f52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f56:	095b      	lsrs	r3, r3, #5
 8001f58:	2001      	movs	r0, #1
 8001f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000e100 	.word	0xe000e100

08001f74 <__NVIC_SetPriority>:
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	6039      	str	r1, [r7, #0]
 8001f7e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	db0a      	blt.n	8001f9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	490c      	ldr	r1, [pc, #48]	; (8001fc0 <__NVIC_SetPriority+0x4c>)
 8001f8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f92:	0112      	lsls	r2, r2, #4
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	440b      	add	r3, r1
 8001f98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f9c:	e00a      	b.n	8001fb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	4908      	ldr	r1, [pc, #32]	; (8001fc4 <__NVIC_SetPriority+0x50>)
 8001fa4:	88fb      	ldrh	r3, [r7, #6]
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	3b04      	subs	r3, #4
 8001fac:	0112      	lsls	r2, r2, #4
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	761a      	strb	r2, [r3, #24]
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	e000e100 	.word	0xe000e100
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <NVIC_EncodePriority>:
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b089      	sub	sp, #36	; 0x24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f1c3 0307 	rsb	r3, r3, #7
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	bf28      	it	cs
 8001fe6:	2304      	movcs	r3, #4
 8001fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3304      	adds	r3, #4
 8001fee:	2b06      	cmp	r3, #6
 8001ff0:	d902      	bls.n	8001ff8 <NVIC_EncodePriority+0x30>
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3b03      	subs	r3, #3
 8001ff6:	e000      	b.n	8001ffa <NVIC_EncodePriority+0x32>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43da      	mvns	r2, r3
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	401a      	ands	r2, r3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002010:	f04f 31ff 	mov.w	r1, #4294967295
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	fa01 f303 	lsl.w	r3, r1, r3
 800201a:	43d9      	mvns	r1, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002020:	4313      	orrs	r3, r2
}
 8002022:	4618      	mov	r0, r3
 8002024:	3724      	adds	r7, #36	; 0x24
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
	...

08002030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3b01      	subs	r3, #1
 800203c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002040:	d301      	bcc.n	8002046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002042:	2301      	movs	r3, #1
 8002044:	e00f      	b.n	8002066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002046:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <SysTick_Config+0x40>)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3b01      	subs	r3, #1
 800204c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800204e:	210f      	movs	r1, #15
 8002050:	f04f 30ff 	mov.w	r0, #4294967295
 8002054:	f7ff ff8e 	bl	8001f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <SysTick_Config+0x40>)
 800205a:	2200      	movs	r2, #0
 800205c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800205e:	4b04      	ldr	r3, [pc, #16]	; (8002070 <SysTick_Config+0x40>)
 8002060:	2207      	movs	r2, #7
 8002062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	e000e010 	.word	0xe000e010

08002074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff ff29 	bl	8001ed4 <__NVIC_SetPriorityGrouping>
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b086      	sub	sp, #24
 800208e:	af00      	add	r7, sp, #0
 8002090:	4603      	mov	r3, r0
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	607a      	str	r2, [r7, #4]
 8002096:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002098:	f7ff ff40 	bl	8001f1c <__NVIC_GetPriorityGrouping>
 800209c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	68b9      	ldr	r1, [r7, #8]
 80020a2:	6978      	ldr	r0, [r7, #20]
 80020a4:	f7ff ff90 	bl	8001fc8 <NVIC_EncodePriority>
 80020a8:	4602      	mov	r2, r0
 80020aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020ae:	4611      	mov	r1, r2
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff5f 	bl	8001f74 <__NVIC_SetPriority>
}
 80020b6:	bf00      	nop
 80020b8:	3718      	adds	r7, #24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	4603      	mov	r3, r0
 80020c6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ff33 	bl	8001f38 <__NVIC_EnableIRQ>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff ffa4 	bl	8002030 <SysTick_Config>
 80020e8:	4603      	mov	r3, r0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80020f8:	f3bf 8f5f 	dmb	sy
}
 80020fc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80020fe:	4b07      	ldr	r3, [pc, #28]	; (800211c <HAL_MPU_Disable+0x28>)
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	4a06      	ldr	r2, [pc, #24]	; (800211c <HAL_MPU_Disable+0x28>)
 8002104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002108:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800210a:	4b05      	ldr	r3, [pc, #20]	; (8002120 <HAL_MPU_Disable+0x2c>)
 800210c:	2200      	movs	r2, #0
 800210e:	605a      	str	r2, [r3, #4]
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000ed00 	.word	0xe000ed00
 8002120:	e000ed90 	.word	0xe000ed90

08002124 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800212c:	4a0b      	ldr	r2, [pc, #44]	; (800215c <HAL_MPU_Enable+0x38>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002136:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <HAL_MPU_Enable+0x3c>)
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	4a09      	ldr	r2, [pc, #36]	; (8002160 <HAL_MPU_Enable+0x3c>)
 800213c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002140:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002142:	f3bf 8f4f 	dsb	sy
}
 8002146:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002148:	f3bf 8f6f 	isb	sy
}
 800214c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	e000ed90 	.word	0xe000ed90
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	785a      	ldrb	r2, [r3, #1]
 8002170:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <HAL_MPU_ConfigRegion+0x84>)
 8002172:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d029      	beq.n	80021d0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800217c:	4a1a      	ldr	r2, [pc, #104]	; (80021e8 <HAL_MPU_ConfigRegion+0x84>)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	7b1b      	ldrb	r3, [r3, #12]
 8002188:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	7adb      	ldrb	r3, [r3, #11]
 800218e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002190:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	7a9b      	ldrb	r3, [r3, #10]
 8002196:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002198:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	7b5b      	ldrb	r3, [r3, #13]
 800219e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80021a0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	7b9b      	ldrb	r3, [r3, #14]
 80021a6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80021a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	7bdb      	ldrb	r3, [r3, #15]
 80021ae:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80021b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	7a5b      	ldrb	r3, [r3, #9]
 80021b6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80021b8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	7a1b      	ldrb	r3, [r3, #8]
 80021be:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80021c0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	7812      	ldrb	r2, [r2, #0]
 80021c6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021c8:	4a07      	ldr	r2, [pc, #28]	; (80021e8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80021ca:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021cc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80021ce:	e005      	b.n	80021dc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80021d0:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <HAL_MPU_ConfigRegion+0x84>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80021d6:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <HAL_MPU_ConfigRegion+0x84>)
 80021d8:	2200      	movs	r2, #0
 80021da:	611a      	str	r2, [r3, #16]
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	e000ed90 	.word	0xe000ed90

080021ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e205      	b.n	800260a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d004      	beq.n	8002214 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2280      	movs	r2, #128	; 0x80
 800220e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e1fa      	b.n	800260a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a8c      	ldr	r2, [pc, #560]	; (800244c <HAL_DMA_Abort_IT+0x260>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d04a      	beq.n	80022b4 <HAL_DMA_Abort_IT+0xc8>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a8b      	ldr	r2, [pc, #556]	; (8002450 <HAL_DMA_Abort_IT+0x264>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d045      	beq.n	80022b4 <HAL_DMA_Abort_IT+0xc8>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a89      	ldr	r2, [pc, #548]	; (8002454 <HAL_DMA_Abort_IT+0x268>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d040      	beq.n	80022b4 <HAL_DMA_Abort_IT+0xc8>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a88      	ldr	r2, [pc, #544]	; (8002458 <HAL_DMA_Abort_IT+0x26c>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d03b      	beq.n	80022b4 <HAL_DMA_Abort_IT+0xc8>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a86      	ldr	r2, [pc, #536]	; (800245c <HAL_DMA_Abort_IT+0x270>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d036      	beq.n	80022b4 <HAL_DMA_Abort_IT+0xc8>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a85      	ldr	r2, [pc, #532]	; (8002460 <HAL_DMA_Abort_IT+0x274>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d031      	beq.n	80022b4 <HAL_DMA_Abort_IT+0xc8>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a83      	ldr	r2, [pc, #524]	; (8002464 <HAL_DMA_Abort_IT+0x278>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d02c      	beq.n	80022b4 <HAL_DMA_Abort_IT+0xc8>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a82      	ldr	r2, [pc, #520]	; (8002468 <HAL_DMA_Abort_IT+0x27c>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d027      	beq.n	80022b4 <HAL_DMA_Abort_IT+0xc8>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a80      	ldr	r2, [pc, #512]	; (800246c <HAL_DMA_Abort_IT+0x280>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d022      	beq.n	80022b4 <HAL_DMA_Abort_IT+0xc8>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a7f      	ldr	r2, [pc, #508]	; (8002470 <HAL_DMA_Abort_IT+0x284>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d01d      	beq.n	80022b4 <HAL_DMA_Abort_IT+0xc8>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a7d      	ldr	r2, [pc, #500]	; (8002474 <HAL_DMA_Abort_IT+0x288>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d018      	beq.n	80022b4 <HAL_DMA_Abort_IT+0xc8>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a7c      	ldr	r2, [pc, #496]	; (8002478 <HAL_DMA_Abort_IT+0x28c>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d013      	beq.n	80022b4 <HAL_DMA_Abort_IT+0xc8>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a7a      	ldr	r2, [pc, #488]	; (800247c <HAL_DMA_Abort_IT+0x290>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00e      	beq.n	80022b4 <HAL_DMA_Abort_IT+0xc8>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a79      	ldr	r2, [pc, #484]	; (8002480 <HAL_DMA_Abort_IT+0x294>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d009      	beq.n	80022b4 <HAL_DMA_Abort_IT+0xc8>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a77      	ldr	r2, [pc, #476]	; (8002484 <HAL_DMA_Abort_IT+0x298>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d004      	beq.n	80022b4 <HAL_DMA_Abort_IT+0xc8>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a76      	ldr	r2, [pc, #472]	; (8002488 <HAL_DMA_Abort_IT+0x29c>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d101      	bne.n	80022b8 <HAL_DMA_Abort_IT+0xcc>
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <HAL_DMA_Abort_IT+0xce>
 80022b8:	2300      	movs	r3, #0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d065      	beq.n	800238a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2204      	movs	r2, #4
 80022c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a60      	ldr	r2, [pc, #384]	; (800244c <HAL_DMA_Abort_IT+0x260>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d04a      	beq.n	8002366 <HAL_DMA_Abort_IT+0x17a>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a5e      	ldr	r2, [pc, #376]	; (8002450 <HAL_DMA_Abort_IT+0x264>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d045      	beq.n	8002366 <HAL_DMA_Abort_IT+0x17a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a5d      	ldr	r2, [pc, #372]	; (8002454 <HAL_DMA_Abort_IT+0x268>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d040      	beq.n	8002366 <HAL_DMA_Abort_IT+0x17a>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a5b      	ldr	r2, [pc, #364]	; (8002458 <HAL_DMA_Abort_IT+0x26c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d03b      	beq.n	8002366 <HAL_DMA_Abort_IT+0x17a>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a5a      	ldr	r2, [pc, #360]	; (800245c <HAL_DMA_Abort_IT+0x270>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d036      	beq.n	8002366 <HAL_DMA_Abort_IT+0x17a>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a58      	ldr	r2, [pc, #352]	; (8002460 <HAL_DMA_Abort_IT+0x274>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d031      	beq.n	8002366 <HAL_DMA_Abort_IT+0x17a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a57      	ldr	r2, [pc, #348]	; (8002464 <HAL_DMA_Abort_IT+0x278>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d02c      	beq.n	8002366 <HAL_DMA_Abort_IT+0x17a>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a55      	ldr	r2, [pc, #340]	; (8002468 <HAL_DMA_Abort_IT+0x27c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d027      	beq.n	8002366 <HAL_DMA_Abort_IT+0x17a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a54      	ldr	r2, [pc, #336]	; (800246c <HAL_DMA_Abort_IT+0x280>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d022      	beq.n	8002366 <HAL_DMA_Abort_IT+0x17a>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a52      	ldr	r2, [pc, #328]	; (8002470 <HAL_DMA_Abort_IT+0x284>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d01d      	beq.n	8002366 <HAL_DMA_Abort_IT+0x17a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a51      	ldr	r2, [pc, #324]	; (8002474 <HAL_DMA_Abort_IT+0x288>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d018      	beq.n	8002366 <HAL_DMA_Abort_IT+0x17a>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a4f      	ldr	r2, [pc, #316]	; (8002478 <HAL_DMA_Abort_IT+0x28c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d013      	beq.n	8002366 <HAL_DMA_Abort_IT+0x17a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a4e      	ldr	r2, [pc, #312]	; (800247c <HAL_DMA_Abort_IT+0x290>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d00e      	beq.n	8002366 <HAL_DMA_Abort_IT+0x17a>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a4c      	ldr	r2, [pc, #304]	; (8002480 <HAL_DMA_Abort_IT+0x294>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d009      	beq.n	8002366 <HAL_DMA_Abort_IT+0x17a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a4b      	ldr	r2, [pc, #300]	; (8002484 <HAL_DMA_Abort_IT+0x298>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d004      	beq.n	8002366 <HAL_DMA_Abort_IT+0x17a>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a49      	ldr	r2, [pc, #292]	; (8002488 <HAL_DMA_Abort_IT+0x29c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d108      	bne.n	8002378 <HAL_DMA_Abort_IT+0x18c>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 0201 	bic.w	r2, r2, #1
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	e147      	b.n	8002608 <HAL_DMA_Abort_IT+0x41c>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0201 	bic.w	r2, r2, #1
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	e13e      	b.n	8002608 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 020e 	bic.w	r2, r2, #14
 8002398:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a2b      	ldr	r2, [pc, #172]	; (800244c <HAL_DMA_Abort_IT+0x260>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d04a      	beq.n	800243a <HAL_DMA_Abort_IT+0x24e>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a29      	ldr	r2, [pc, #164]	; (8002450 <HAL_DMA_Abort_IT+0x264>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d045      	beq.n	800243a <HAL_DMA_Abort_IT+0x24e>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a28      	ldr	r2, [pc, #160]	; (8002454 <HAL_DMA_Abort_IT+0x268>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d040      	beq.n	800243a <HAL_DMA_Abort_IT+0x24e>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a26      	ldr	r2, [pc, #152]	; (8002458 <HAL_DMA_Abort_IT+0x26c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d03b      	beq.n	800243a <HAL_DMA_Abort_IT+0x24e>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a25      	ldr	r2, [pc, #148]	; (800245c <HAL_DMA_Abort_IT+0x270>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d036      	beq.n	800243a <HAL_DMA_Abort_IT+0x24e>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a23      	ldr	r2, [pc, #140]	; (8002460 <HAL_DMA_Abort_IT+0x274>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d031      	beq.n	800243a <HAL_DMA_Abort_IT+0x24e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a22      	ldr	r2, [pc, #136]	; (8002464 <HAL_DMA_Abort_IT+0x278>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d02c      	beq.n	800243a <HAL_DMA_Abort_IT+0x24e>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a20      	ldr	r2, [pc, #128]	; (8002468 <HAL_DMA_Abort_IT+0x27c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d027      	beq.n	800243a <HAL_DMA_Abort_IT+0x24e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a1f      	ldr	r2, [pc, #124]	; (800246c <HAL_DMA_Abort_IT+0x280>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d022      	beq.n	800243a <HAL_DMA_Abort_IT+0x24e>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a1d      	ldr	r2, [pc, #116]	; (8002470 <HAL_DMA_Abort_IT+0x284>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d01d      	beq.n	800243a <HAL_DMA_Abort_IT+0x24e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a1c      	ldr	r2, [pc, #112]	; (8002474 <HAL_DMA_Abort_IT+0x288>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d018      	beq.n	800243a <HAL_DMA_Abort_IT+0x24e>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a1a      	ldr	r2, [pc, #104]	; (8002478 <HAL_DMA_Abort_IT+0x28c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d013      	beq.n	800243a <HAL_DMA_Abort_IT+0x24e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a19      	ldr	r2, [pc, #100]	; (800247c <HAL_DMA_Abort_IT+0x290>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d00e      	beq.n	800243a <HAL_DMA_Abort_IT+0x24e>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a17      	ldr	r2, [pc, #92]	; (8002480 <HAL_DMA_Abort_IT+0x294>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d009      	beq.n	800243a <HAL_DMA_Abort_IT+0x24e>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a16      	ldr	r2, [pc, #88]	; (8002484 <HAL_DMA_Abort_IT+0x298>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d004      	beq.n	800243a <HAL_DMA_Abort_IT+0x24e>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a14      	ldr	r2, [pc, #80]	; (8002488 <HAL_DMA_Abort_IT+0x29c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d128      	bne.n	800248c <HAL_DMA_Abort_IT+0x2a0>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0201 	bic.w	r2, r2, #1
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	e027      	b.n	800249c <HAL_DMA_Abort_IT+0x2b0>
 800244c:	40020010 	.word	0x40020010
 8002450:	40020028 	.word	0x40020028
 8002454:	40020040 	.word	0x40020040
 8002458:	40020058 	.word	0x40020058
 800245c:	40020070 	.word	0x40020070
 8002460:	40020088 	.word	0x40020088
 8002464:	400200a0 	.word	0x400200a0
 8002468:	400200b8 	.word	0x400200b8
 800246c:	40020410 	.word	0x40020410
 8002470:	40020428 	.word	0x40020428
 8002474:	40020440 	.word	0x40020440
 8002478:	40020458 	.word	0x40020458
 800247c:	40020470 	.word	0x40020470
 8002480:	40020488 	.word	0x40020488
 8002484:	400204a0 	.word	0x400204a0
 8002488:	400204b8 	.word	0x400204b8
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0201 	bic.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a5c      	ldr	r2, [pc, #368]	; (8002614 <HAL_DMA_Abort_IT+0x428>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d072      	beq.n	800258c <HAL_DMA_Abort_IT+0x3a0>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a5b      	ldr	r2, [pc, #364]	; (8002618 <HAL_DMA_Abort_IT+0x42c>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d06d      	beq.n	800258c <HAL_DMA_Abort_IT+0x3a0>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a59      	ldr	r2, [pc, #356]	; (800261c <HAL_DMA_Abort_IT+0x430>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d068      	beq.n	800258c <HAL_DMA_Abort_IT+0x3a0>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a58      	ldr	r2, [pc, #352]	; (8002620 <HAL_DMA_Abort_IT+0x434>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d063      	beq.n	800258c <HAL_DMA_Abort_IT+0x3a0>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a56      	ldr	r2, [pc, #344]	; (8002624 <HAL_DMA_Abort_IT+0x438>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d05e      	beq.n	800258c <HAL_DMA_Abort_IT+0x3a0>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a55      	ldr	r2, [pc, #340]	; (8002628 <HAL_DMA_Abort_IT+0x43c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d059      	beq.n	800258c <HAL_DMA_Abort_IT+0x3a0>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a53      	ldr	r2, [pc, #332]	; (800262c <HAL_DMA_Abort_IT+0x440>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d054      	beq.n	800258c <HAL_DMA_Abort_IT+0x3a0>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a52      	ldr	r2, [pc, #328]	; (8002630 <HAL_DMA_Abort_IT+0x444>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d04f      	beq.n	800258c <HAL_DMA_Abort_IT+0x3a0>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a50      	ldr	r2, [pc, #320]	; (8002634 <HAL_DMA_Abort_IT+0x448>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d04a      	beq.n	800258c <HAL_DMA_Abort_IT+0x3a0>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a4f      	ldr	r2, [pc, #316]	; (8002638 <HAL_DMA_Abort_IT+0x44c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d045      	beq.n	800258c <HAL_DMA_Abort_IT+0x3a0>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a4d      	ldr	r2, [pc, #308]	; (800263c <HAL_DMA_Abort_IT+0x450>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d040      	beq.n	800258c <HAL_DMA_Abort_IT+0x3a0>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a4c      	ldr	r2, [pc, #304]	; (8002640 <HAL_DMA_Abort_IT+0x454>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d03b      	beq.n	800258c <HAL_DMA_Abort_IT+0x3a0>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a4a      	ldr	r2, [pc, #296]	; (8002644 <HAL_DMA_Abort_IT+0x458>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d036      	beq.n	800258c <HAL_DMA_Abort_IT+0x3a0>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a49      	ldr	r2, [pc, #292]	; (8002648 <HAL_DMA_Abort_IT+0x45c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d031      	beq.n	800258c <HAL_DMA_Abort_IT+0x3a0>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a47      	ldr	r2, [pc, #284]	; (800264c <HAL_DMA_Abort_IT+0x460>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d02c      	beq.n	800258c <HAL_DMA_Abort_IT+0x3a0>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a46      	ldr	r2, [pc, #280]	; (8002650 <HAL_DMA_Abort_IT+0x464>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d027      	beq.n	800258c <HAL_DMA_Abort_IT+0x3a0>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a44      	ldr	r2, [pc, #272]	; (8002654 <HAL_DMA_Abort_IT+0x468>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d022      	beq.n	800258c <HAL_DMA_Abort_IT+0x3a0>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a43      	ldr	r2, [pc, #268]	; (8002658 <HAL_DMA_Abort_IT+0x46c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d01d      	beq.n	800258c <HAL_DMA_Abort_IT+0x3a0>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a41      	ldr	r2, [pc, #260]	; (800265c <HAL_DMA_Abort_IT+0x470>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d018      	beq.n	800258c <HAL_DMA_Abort_IT+0x3a0>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a40      	ldr	r2, [pc, #256]	; (8002660 <HAL_DMA_Abort_IT+0x474>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d013      	beq.n	800258c <HAL_DMA_Abort_IT+0x3a0>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a3e      	ldr	r2, [pc, #248]	; (8002664 <HAL_DMA_Abort_IT+0x478>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d00e      	beq.n	800258c <HAL_DMA_Abort_IT+0x3a0>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a3d      	ldr	r2, [pc, #244]	; (8002668 <HAL_DMA_Abort_IT+0x47c>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d009      	beq.n	800258c <HAL_DMA_Abort_IT+0x3a0>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a3b      	ldr	r2, [pc, #236]	; (800266c <HAL_DMA_Abort_IT+0x480>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d004      	beq.n	800258c <HAL_DMA_Abort_IT+0x3a0>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a3a      	ldr	r2, [pc, #232]	; (8002670 <HAL_DMA_Abort_IT+0x484>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d101      	bne.n	8002590 <HAL_DMA_Abort_IT+0x3a4>
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <HAL_DMA_Abort_IT+0x3a6>
 8002590:	2300      	movs	r3, #0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d028      	beq.n	80025e8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025a4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025aa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	2201      	movs	r2, #1
 80025b6:	409a      	lsls	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80025c4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00c      	beq.n	80025e8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025dc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80025e6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40020010 	.word	0x40020010
 8002618:	40020028 	.word	0x40020028
 800261c:	40020040 	.word	0x40020040
 8002620:	40020058 	.word	0x40020058
 8002624:	40020070 	.word	0x40020070
 8002628:	40020088 	.word	0x40020088
 800262c:	400200a0 	.word	0x400200a0
 8002630:	400200b8 	.word	0x400200b8
 8002634:	40020410 	.word	0x40020410
 8002638:	40020428 	.word	0x40020428
 800263c:	40020440 	.word	0x40020440
 8002640:	40020458 	.word	0x40020458
 8002644:	40020470 	.word	0x40020470
 8002648:	40020488 	.word	0x40020488
 800264c:	400204a0 	.word	0x400204a0
 8002650:	400204b8 	.word	0x400204b8
 8002654:	58025408 	.word	0x58025408
 8002658:	5802541c 	.word	0x5802541c
 800265c:	58025430 	.word	0x58025430
 8002660:	58025444 	.word	0x58025444
 8002664:	58025458 	.word	0x58025458
 8002668:	5802546c 	.word	0x5802546c
 800266c:	58025480 	.word	0x58025480
 8002670:	58025494 	.word	0x58025494

08002674 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e0c6      	b.n	8002814 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800268a:	2b00      	cmp	r3, #0
 800268c:	d102      	bne.n	8002694 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7fe fb70 	bl	8000d74 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2223      	movs	r2, #35	; 0x23
 8002698:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269a:	4b60      	ldr	r3, [pc, #384]	; (800281c <HAL_ETH_Init+0x1a8>)
 800269c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026a0:	4a5e      	ldr	r2, [pc, #376]	; (800281c <HAL_ETH_Init+0x1a8>)
 80026a2:	f043 0302 	orr.w	r3, r3, #2
 80026a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80026aa:	4b5c      	ldr	r3, [pc, #368]	; (800281c <HAL_ETH_Init+0x1a8>)
 80026ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	7a1b      	ldrb	r3, [r3, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d103      	bne.n	80026c8 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80026c0:	2000      	movs	r0, #0
 80026c2:	f7ff fbf3 	bl	8001eac <HAL_SYSCFG_ETHInterfaceSelect>
 80026c6:	e003      	b.n	80026d0 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80026c8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80026cc:	f7ff fbee 	bl	8001eac <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0201 	orr.w	r2, r2, #1
 80026e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026e8:	f7ff fba4 	bl	8001e34 <HAL_GetTick>
 80026ec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80026ee:	e00f      	b.n	8002710 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80026f0:	f7ff fba0 	bl	8001e34 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80026fe:	d907      	bls.n	8002710 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2204      	movs	r2, #4
 8002704:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	22e0      	movs	r2, #224	; 0xe0
 800270a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e081      	b.n	8002814 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1e6      	bne.n	80026f0 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 fac0 	bl	8002ca8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002728:	f002 fad4 	bl	8004cd4 <HAL_RCC_GetHCLKFreq>
 800272c:	4603      	mov	r3, r0
 800272e:	4a3c      	ldr	r2, [pc, #240]	; (8002820 <HAL_ETH_Init+0x1ac>)
 8002730:	fba2 2303 	umull	r2, r3, r2, r3
 8002734:	0c9a      	lsrs	r2, r3, #18
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	3a01      	subs	r2, #1
 800273c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 fa13 	bl	8002b6c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800275c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002760:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d007      	beq.n	800277e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	22e0      	movs	r2, #224	; 0xe0
 8002778:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e04a      	b.n	8002814 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	f241 1308 	movw	r3, #4360	; 0x1108
 8002786:	4413      	add	r3, r2
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	4b26      	ldr	r3, [pc, #152]	; (8002824 <HAL_ETH_Init+0x1b0>)
 800278c:	4013      	ands	r3, r2
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6952      	ldr	r2, [r2, #20]
 8002792:	0052      	lsls	r2, r2, #1
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	6809      	ldr	r1, [r1, #0]
 8002798:	431a      	orrs	r2, r3
 800279a:	f241 1308 	movw	r3, #4360	; 0x1108
 800279e:	440b      	add	r3, r1
 80027a0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fad8 	bl	8002d58 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 fb1c 	bl	8002de6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	3305      	adds	r3, #5
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	021a      	lsls	r2, r3, #8
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	3304      	adds	r3, #4
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	4619      	mov	r1, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	3303      	adds	r3, #3
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	061a      	lsls	r2, r3, #24
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	3302      	adds	r3, #2
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	041b      	lsls	r3, r3, #16
 80027e0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	3301      	adds	r3, #1
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80027ec:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80027fa:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80027fc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2210      	movs	r2, #16
 800280a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2210      	movs	r2, #16
 8002810:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	58024400 	.word	0x58024400
 8002820:	431bde83 	.word	0x431bde83
 8002824:	ffff8001 	.word	0xffff8001

08002828 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800283a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	791b      	ldrb	r3, [r3, #4]
 8002840:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002842:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	7b1b      	ldrb	r3, [r3, #12]
 8002848:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800284a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	7b5b      	ldrb	r3, [r3, #13]
 8002850:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002852:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	7b9b      	ldrb	r3, [r3, #14]
 8002858:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800285a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	7bdb      	ldrb	r3, [r3, #15]
 8002860:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002862:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	7c12      	ldrb	r2, [r2, #16]
 8002868:	2a00      	cmp	r2, #0
 800286a:	d102      	bne.n	8002872 <ETH_SetMACConfig+0x4a>
 800286c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002870:	e000      	b.n	8002874 <ETH_SetMACConfig+0x4c>
 8002872:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002874:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	7c52      	ldrb	r2, [r2, #17]
 800287a:	2a00      	cmp	r2, #0
 800287c:	d102      	bne.n	8002884 <ETH_SetMACConfig+0x5c>
 800287e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002882:	e000      	b.n	8002886 <ETH_SetMACConfig+0x5e>
 8002884:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002886:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	7c9b      	ldrb	r3, [r3, #18]
 800288c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800288e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002894:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800289a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	7f1b      	ldrb	r3, [r3, #28]
 80028a0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80028a2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	7f5b      	ldrb	r3, [r3, #29]
 80028a8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80028aa:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	7f92      	ldrb	r2, [r2, #30]
 80028b0:	2a00      	cmp	r2, #0
 80028b2:	d102      	bne.n	80028ba <ETH_SetMACConfig+0x92>
 80028b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028b8:	e000      	b.n	80028bc <ETH_SetMACConfig+0x94>
 80028ba:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80028bc:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	7fdb      	ldrb	r3, [r3, #31]
 80028c2:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80028c4:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80028cc:	2a00      	cmp	r2, #0
 80028ce:	d102      	bne.n	80028d6 <ETH_SetMACConfig+0xae>
 80028d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028d4:	e000      	b.n	80028d8 <ETH_SetMACConfig+0xb0>
 80028d6:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80028d8:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80028de:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028e6:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80028e8:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	4b56      	ldr	r3, [pc, #344]	; (8002a54 <ETH_SetMACConfig+0x22c>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	68f9      	ldr	r1, [r7, #12]
 8002902:	430b      	orrs	r3, r1
 8002904:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002912:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002914:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800291c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800291e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002926:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002928:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002930:	2a00      	cmp	r2, #0
 8002932:	d102      	bne.n	800293a <ETH_SetMACConfig+0x112>
 8002934:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002938:	e000      	b.n	800293c <ETH_SetMACConfig+0x114>
 800293a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800293c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002942:	4313      	orrs	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	4b42      	ldr	r3, [pc, #264]	; (8002a58 <ETH_SetMACConfig+0x230>)
 800294e:	4013      	ands	r3, r2
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6812      	ldr	r2, [r2, #0]
 8002954:	68f9      	ldr	r1, [r7, #12]
 8002956:	430b      	orrs	r3, r1
 8002958:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002960:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002966:	4313      	orrs	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68da      	ldr	r2, [r3, #12]
 8002970:	4b3a      	ldr	r3, [pc, #232]	; (8002a5c <ETH_SetMACConfig+0x234>)
 8002972:	4013      	ands	r3, r2
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6812      	ldr	r2, [r2, #0]
 8002978:	68f9      	ldr	r1, [r7, #12]
 800297a:	430b      	orrs	r3, r1
 800297c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002984:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800298a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002992:	2a00      	cmp	r2, #0
 8002994:	d101      	bne.n	800299a <ETH_SetMACConfig+0x172>
 8002996:	2280      	movs	r2, #128	; 0x80
 8002998:	e000      	b.n	800299c <ETH_SetMACConfig+0x174>
 800299a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800299c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029ae:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80029b2:	4013      	ands	r3, r2
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6812      	ldr	r2, [r2, #0]
 80029b8:	68f9      	ldr	r1, [r7, #12]
 80029ba:	430b      	orrs	r3, r1
 80029bc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80029c4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80029cc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029da:	f023 0103 	bic.w	r1, r3, #3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80029f2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002a0e:	2a00      	cmp	r2, #0
 8002a10:	d101      	bne.n	8002a16 <ETH_SetMACConfig+0x1ee>
 8002a12:	2240      	movs	r2, #64	; 0x40
 8002a14:	e000      	b.n	8002a18 <ETH_SetMACConfig+0x1f0>
 8002a16:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002a18:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002a20:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002a22:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002a2a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002a38:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002a48:	bf00      	nop
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	00048083 	.word	0x00048083
 8002a58:	c0f88000 	.word	0xc0f88000
 8002a5c:	fffffef0 	.word	0xfffffef0

08002a60 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	4b38      	ldr	r3, [pc, #224]	; (8002b58 <ETH_SetDMAConfig+0xf8>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	6812      	ldr	r2, [r2, #0]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	6809      	ldr	r1, [r1, #0]
 8002a80:	431a      	orrs	r2, r3
 8002a82:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002a86:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	791b      	ldrb	r3, [r3, #4]
 8002a8c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a92:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	7b1b      	ldrb	r3, [r3, #12]
 8002a98:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	f241 0304 	movw	r3, #4100	; 0x1004
 8002aa6:	4413      	add	r3, r2
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	4b2c      	ldr	r3, [pc, #176]	; (8002b5c <ETH_SetDMAConfig+0xfc>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6811      	ldr	r1, [r2, #0]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	f241 0304 	movw	r3, #4100	; 0x1004
 8002aba:	440b      	add	r3, r1
 8002abc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	7b5b      	ldrb	r3, [r3, #13]
 8002ac2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	4b22      	ldr	r3, [pc, #136]	; (8002b60 <ETH_SetDMAConfig+0x100>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6811      	ldr	r1, [r2, #0]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002ae6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	7d1b      	ldrb	r3, [r3, #20]
 8002af0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002af2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	7f5b      	ldrb	r3, [r3, #29]
 8002af8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	f241 1304 	movw	r3, #4356	; 0x1104
 8002b06:	4413      	add	r3, r2
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <ETH_SetDMAConfig+0x104>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6811      	ldr	r1, [r2, #0]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	431a      	orrs	r2, r3
 8002b16:	f241 1304 	movw	r3, #4356	; 0x1104
 8002b1a:	440b      	add	r3, r1
 8002b1c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	7f1b      	ldrb	r3, [r3, #28]
 8002b22:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	f241 1308 	movw	r3, #4360	; 0x1108
 8002b34:	4413      	add	r3, r2
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <ETH_SetDMAConfig+0x108>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6811      	ldr	r1, [r2, #0]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	f241 1308 	movw	r3, #4360	; 0x1108
 8002b48:	440b      	add	r3, r1
 8002b4a:	601a      	str	r2, [r3, #0]
}
 8002b4c:	bf00      	nop
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	ffff87fd 	.word	0xffff87fd
 8002b5c:	ffff2ffe 	.word	0xffff2ffe
 8002b60:	fffec000 	.word	0xfffec000
 8002b64:	ffc0efef 	.word	0xffc0efef
 8002b68:	7fc0ffff 	.word	0x7fc0ffff

08002b6c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b0a4      	sub	sp, #144	; 0x90
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002b74:	2301      	movs	r3, #1
 8002b76:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002b84:	2300      	movs	r3, #0
 8002b86:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002b90:	2301      	movs	r3, #1
 8002b92:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002b96:	2301      	movs	r3, #1
 8002b98:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002ba8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bac:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002bc4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002bc8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002be0:	2300      	movs	r3, #0
 8002be2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002be6:	2300      	movs	r3, #0
 8002be8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002c04:	2320      	movs	r3, #32
 8002c06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002c10:	2300      	movs	r3, #0
 8002c12:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002c16:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002c1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c20:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002c22:	2300      	movs	r3, #0
 8002c24:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002c34:	2300      	movs	r3, #0
 8002c36:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002c40:	2301      	movs	r3, #1
 8002c42:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002c46:	2300      	movs	r3, #0
 8002c48:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002c50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c54:	4619      	mov	r1, r3
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7ff fde6 	bl	8002828 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002c60:	2301      	movs	r3, #1
 8002c62:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002c64:	2300      	movs	r3, #0
 8002c66:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002c72:	2300      	movs	r3, #0
 8002c74:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002c76:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c7a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002c80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c84:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002c86:	2300      	movs	r3, #0
 8002c88:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002c8c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002c90:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002c92:	f107 0308 	add.w	r3, r7, #8
 8002c96:	4619      	mov	r1, r3
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff fee1 	bl	8002a60 <ETH_SetDMAConfig>
}
 8002c9e:	bf00      	nop
 8002ca0:	3790      	adds	r7, #144	; 0x90
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002cb8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cc0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002cc2:	f002 f807 	bl	8004cd4 <HAL_RCC_GetHCLKFreq>
 8002cc6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	4a1e      	ldr	r2, [pc, #120]	; (8002d44 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d908      	bls.n	8002ce2 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4a1d      	ldr	r2, [pc, #116]	; (8002d48 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d804      	bhi.n	8002ce2 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	e027      	b.n	8002d32 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	4a18      	ldr	r2, [pc, #96]	; (8002d48 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d908      	bls.n	8002cfc <ETH_MAC_MDIO_ClkConfig+0x54>
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	4a17      	ldr	r2, [pc, #92]	; (8002d4c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d204      	bcs.n	8002cfc <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	e01a      	b.n	8002d32 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	4a13      	ldr	r2, [pc, #76]	; (8002d4c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d303      	bcc.n	8002d0c <ETH_MAC_MDIO_ClkConfig+0x64>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4a12      	ldr	r2, [pc, #72]	; (8002d50 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d911      	bls.n	8002d30 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	4a10      	ldr	r2, [pc, #64]	; (8002d50 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d908      	bls.n	8002d26 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	4a0f      	ldr	r2, [pc, #60]	; (8002d54 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d804      	bhi.n	8002d26 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	e005      	b.n	8002d32 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	e000      	b.n	8002d32 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002d30:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002d3c:	bf00      	nop
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	01312cff 	.word	0x01312cff
 8002d48:	02160ebf 	.word	0x02160ebf
 8002d4c:	03938700 	.word	0x03938700
 8002d50:	05f5e0ff 	.word	0x05f5e0ff
 8002d54:	08f0d17f 	.word	0x08f0d17f

08002d58 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d60:	2300      	movs	r3, #0
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	e01d      	b.n	8002da2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68d9      	ldr	r1, [r3, #12]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	4413      	add	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	440b      	add	r3, r1
 8002d76:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2200      	movs	r2, #0
 8002d82:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002d90:	68b9      	ldr	r1, [r7, #8]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	3206      	adds	r2, #6
 8002d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d9de      	bls.n	8002d66 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	f241 132c 	movw	r3, #4396	; 0x112c
 8002db6:	4413      	add	r3, r2
 8002db8:	2203      	movs	r2, #3
 8002dba:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68d9      	ldr	r1, [r3, #12]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	f241 1314 	movw	r3, #4372	; 0x1114
 8002dc8:	4413      	add	r3, r2
 8002dca:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002dd8:	601a      	str	r2, [r3, #0]
}
 8002dda:	bf00      	nop
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b085      	sub	sp, #20
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	e024      	b.n	8002e3e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6919      	ldr	r1, [r3, #16]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	4413      	add	r3, r2
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	440b      	add	r3, r1
 8002e04:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2200      	movs	r2, #0
 8002e16:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2200      	movs	r2, #0
 8002e22:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2200      	movs	r2, #0
 8002e28:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	3310      	adds	r3, #16
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2b03      	cmp	r3, #3
 8002e42:	d9d7      	bls.n	8002df4 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	f241 1330 	movw	r3, #4400	; 0x1130
 8002e6a:	4413      	add	r3, r2
 8002e6c:	2203      	movs	r2, #3
 8002e6e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6919      	ldr	r1, [r3, #16]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	f241 131c 	movw	r3, #4380	; 0x111c
 8002e7c:	4413      	add	r3, r2
 8002e7e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	f241 1328 	movw	r3, #4392	; 0x1128
 8002e90:	4413      	add	r3, r2
 8002e92:	6019      	str	r1, [r3, #0]
}
 8002e94:	bf00      	nop
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b089      	sub	sp, #36	; 0x24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002eae:	4b89      	ldr	r3, [pc, #548]	; (80030d4 <HAL_GPIO_Init+0x234>)
 8002eb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002eb2:	e194      	b.n	80031de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	2101      	movs	r1, #1
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 8186 	beq.w	80031d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d00b      	beq.n	8002eec <HAL_GPIO_Init+0x4c>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d007      	beq.n	8002eec <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ee0:	2b11      	cmp	r3, #17
 8002ee2:	d003      	beq.n	8002eec <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b12      	cmp	r3, #18
 8002eea:	d130      	bne.n	8002f4e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f22:	2201      	movs	r2, #1
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	091b      	lsrs	r3, r3, #4
 8002f38:	f003 0201 	and.w	r2, r3, #1
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	2203      	movs	r2, #3
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4013      	ands	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d003      	beq.n	8002f8e <HAL_GPIO_Init+0xee>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b12      	cmp	r3, #18
 8002f8c:	d123      	bne.n	8002fd6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	08da      	lsrs	r2, r3, #3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3208      	adds	r2, #8
 8002f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	220f      	movs	r2, #15
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43db      	mvns	r3, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	691a      	ldr	r2, [r3, #16]
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	08da      	lsrs	r2, r3, #3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3208      	adds	r2, #8
 8002fd0:	69b9      	ldr	r1, [r7, #24]
 8002fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4013      	ands	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 0203 	and.w	r2, r3, #3
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 80e0 	beq.w	80031d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003018:	4b2f      	ldr	r3, [pc, #188]	; (80030d8 <HAL_GPIO_Init+0x238>)
 800301a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800301e:	4a2e      	ldr	r2, [pc, #184]	; (80030d8 <HAL_GPIO_Init+0x238>)
 8003020:	f043 0302 	orr.w	r3, r3, #2
 8003024:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003028:	4b2b      	ldr	r3, [pc, #172]	; (80030d8 <HAL_GPIO_Init+0x238>)
 800302a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003036:	4a29      	ldr	r2, [pc, #164]	; (80030dc <HAL_GPIO_Init+0x23c>)
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	089b      	lsrs	r3, r3, #2
 800303c:	3302      	adds	r3, #2
 800303e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	220f      	movs	r2, #15
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43db      	mvns	r3, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4013      	ands	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a20      	ldr	r2, [pc, #128]	; (80030e0 <HAL_GPIO_Init+0x240>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d052      	beq.n	8003108 <HAL_GPIO_Init+0x268>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a1f      	ldr	r2, [pc, #124]	; (80030e4 <HAL_GPIO_Init+0x244>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d031      	beq.n	80030ce <HAL_GPIO_Init+0x22e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a1e      	ldr	r2, [pc, #120]	; (80030e8 <HAL_GPIO_Init+0x248>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d02b      	beq.n	80030ca <HAL_GPIO_Init+0x22a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a1d      	ldr	r2, [pc, #116]	; (80030ec <HAL_GPIO_Init+0x24c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d025      	beq.n	80030c6 <HAL_GPIO_Init+0x226>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a1c      	ldr	r2, [pc, #112]	; (80030f0 <HAL_GPIO_Init+0x250>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d01f      	beq.n	80030c2 <HAL_GPIO_Init+0x222>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a1b      	ldr	r2, [pc, #108]	; (80030f4 <HAL_GPIO_Init+0x254>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d019      	beq.n	80030be <HAL_GPIO_Init+0x21e>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a1a      	ldr	r2, [pc, #104]	; (80030f8 <HAL_GPIO_Init+0x258>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d013      	beq.n	80030ba <HAL_GPIO_Init+0x21a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a19      	ldr	r2, [pc, #100]	; (80030fc <HAL_GPIO_Init+0x25c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d00d      	beq.n	80030b6 <HAL_GPIO_Init+0x216>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a18      	ldr	r2, [pc, #96]	; (8003100 <HAL_GPIO_Init+0x260>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d007      	beq.n	80030b2 <HAL_GPIO_Init+0x212>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a17      	ldr	r2, [pc, #92]	; (8003104 <HAL_GPIO_Init+0x264>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d101      	bne.n	80030ae <HAL_GPIO_Init+0x20e>
 80030aa:	2309      	movs	r3, #9
 80030ac:	e02d      	b.n	800310a <HAL_GPIO_Init+0x26a>
 80030ae:	230a      	movs	r3, #10
 80030b0:	e02b      	b.n	800310a <HAL_GPIO_Init+0x26a>
 80030b2:	2308      	movs	r3, #8
 80030b4:	e029      	b.n	800310a <HAL_GPIO_Init+0x26a>
 80030b6:	2307      	movs	r3, #7
 80030b8:	e027      	b.n	800310a <HAL_GPIO_Init+0x26a>
 80030ba:	2306      	movs	r3, #6
 80030bc:	e025      	b.n	800310a <HAL_GPIO_Init+0x26a>
 80030be:	2305      	movs	r3, #5
 80030c0:	e023      	b.n	800310a <HAL_GPIO_Init+0x26a>
 80030c2:	2304      	movs	r3, #4
 80030c4:	e021      	b.n	800310a <HAL_GPIO_Init+0x26a>
 80030c6:	2303      	movs	r3, #3
 80030c8:	e01f      	b.n	800310a <HAL_GPIO_Init+0x26a>
 80030ca:	2302      	movs	r3, #2
 80030cc:	e01d      	b.n	800310a <HAL_GPIO_Init+0x26a>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e01b      	b.n	800310a <HAL_GPIO_Init+0x26a>
 80030d2:	bf00      	nop
 80030d4:	58000080 	.word	0x58000080
 80030d8:	58024400 	.word	0x58024400
 80030dc:	58000400 	.word	0x58000400
 80030e0:	58020000 	.word	0x58020000
 80030e4:	58020400 	.word	0x58020400
 80030e8:	58020800 	.word	0x58020800
 80030ec:	58020c00 	.word	0x58020c00
 80030f0:	58021000 	.word	0x58021000
 80030f4:	58021400 	.word	0x58021400
 80030f8:	58021800 	.word	0x58021800
 80030fc:	58021c00 	.word	0x58021c00
 8003100:	58022000 	.word	0x58022000
 8003104:	58022400 	.word	0x58022400
 8003108:	2300      	movs	r3, #0
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	f002 0203 	and.w	r2, r2, #3
 8003110:	0092      	lsls	r2, r2, #2
 8003112:	4093      	lsls	r3, r2
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4313      	orrs	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800311a:	4938      	ldr	r1, [pc, #224]	; (80031fc <HAL_GPIO_Init+0x35c>)
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	089b      	lsrs	r3, r3, #2
 8003120:	3302      	adds	r3, #2
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	43db      	mvns	r3, r3
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	4013      	ands	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	4313      	orrs	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	43db      	mvns	r3, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4013      	ands	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800317c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	43db      	mvns	r3, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4013      	ands	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80031a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80031aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80031d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	3301      	adds	r3, #1
 80031dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	fa22 f303 	lsr.w	r3, r2, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f47f ae63 	bne.w	8002eb4 <HAL_GPIO_Init+0x14>
  }
}
 80031ee:	bf00      	nop
 80031f0:	bf00      	nop
 80031f2:	3724      	adds	r7, #36	; 0x24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	58000400 	.word	0x58000400

08003200 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003208:	4a08      	ldr	r2, [pc, #32]	; (800322c <HAL_HSEM_FastTake+0x2c>)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3320      	adds	r3, #32
 800320e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003212:	4a07      	ldr	r2, [pc, #28]	; (8003230 <HAL_HSEM_FastTake+0x30>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d101      	bne.n	800321c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003218:	2300      	movs	r3, #0
 800321a:	e000      	b.n	800321e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
}
 800321e:	4618      	mov	r0, r3
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	58026400 	.word	0x58026400
 8003230:	80000300 	.word	0x80000300

08003234 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800323e:	4906      	ldr	r1, [pc, #24]	; (8003258 <HAL_HSEM_Release+0x24>)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	58026400 	.word	0x58026400

0800325c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8003264:	4b05      	ldr	r3, [pc, #20]	; (800327c <HAL_HSEM_ActivateNotification+0x20>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	4904      	ldr	r1, [pc, #16]	; (800327c <HAL_HSEM_ActivateNotification+0x20>)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4313      	orrs	r3, r2
 800326e:	600b      	str	r3, [r1, #0]
#endif
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	58026500 	.word	0x58026500

08003280 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003286:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <HAL_HSEM_IRQHandler+0x30>)
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800328c:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <HAL_HSEM_IRQHandler+0x30>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	43db      	mvns	r3, r3
 8003294:	4906      	ldr	r1, [pc, #24]	; (80032b0 <HAL_HSEM_IRQHandler+0x30>)
 8003296:	4013      	ands	r3, r2
 8003298:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800329a:	4a05      	ldr	r2, [pc, #20]	; (80032b0 <HAL_HSEM_IRQHandler+0x30>)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f007 fdd1 	bl	800ae48 <HAL_HSEM_FreeCallback>
}
 80032a6:	bf00      	nop
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	58026500 	.word	0x58026500

080032b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e07f      	b.n	80033c6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fd febe 	bl	800105c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2224      	movs	r2, #36	; 0x24
 80032e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0201 	bic.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003304:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003314:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d107      	bne.n	800332e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689a      	ldr	r2, [r3, #8]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800332a:	609a      	str	r2, [r3, #8]
 800332c:	e006      	b.n	800333c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800333a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	2b02      	cmp	r3, #2
 8003342:	d104      	bne.n	800334e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800334c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6859      	ldr	r1, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	4b1d      	ldr	r3, [pc, #116]	; (80033d0 <HAL_I2C_Init+0x11c>)
 800335a:	430b      	orrs	r3, r1
 800335c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800336c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691a      	ldr	r2, [r3, #16]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	ea42 0103 	orr.w	r1, r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	021a      	lsls	r2, r3, #8
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	69d9      	ldr	r1, [r3, #28]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1a      	ldr	r2, [r3, #32]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	02008000 	.word	0x02008000

080033d4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b088      	sub	sp, #32
 80033d8:	af02      	add	r7, sp, #8
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	4608      	mov	r0, r1
 80033de:	4611      	mov	r1, r2
 80033e0:	461a      	mov	r2, r3
 80033e2:	4603      	mov	r3, r0
 80033e4:	817b      	strh	r3, [r7, #10]
 80033e6:	460b      	mov	r3, r1
 80033e8:	813b      	strh	r3, [r7, #8]
 80033ea:	4613      	mov	r3, r2
 80033ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b20      	cmp	r3, #32
 80033f8:	f040 80f9 	bne.w	80035ee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <HAL_I2C_Mem_Write+0x34>
 8003402:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003404:	2b00      	cmp	r3, #0
 8003406:	d105      	bne.n	8003414 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800340e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e0ed      	b.n	80035f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_I2C_Mem_Write+0x4e>
 800341e:	2302      	movs	r3, #2
 8003420:	e0e6      	b.n	80035f0 <HAL_I2C_Mem_Write+0x21c>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800342a:	f7fe fd03 	bl	8001e34 <HAL_GetTick>
 800342e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	2319      	movs	r3, #25
 8003436:	2201      	movs	r2, #1
 8003438:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 f96f 	bl	8003720 <I2C_WaitOnFlagUntilTimeout>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e0d1      	b.n	80035f0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2221      	movs	r2, #33	; 0x21
 8003450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2240      	movs	r2, #64	; 0x40
 8003458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a3a      	ldr	r2, [r7, #32]
 8003466:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800346c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003474:	88f8      	ldrh	r0, [r7, #6]
 8003476:	893a      	ldrh	r2, [r7, #8]
 8003478:	8979      	ldrh	r1, [r7, #10]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	9301      	str	r3, [sp, #4]
 800347e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	4603      	mov	r3, r0
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 f8d3 	bl	8003630 <I2C_RequestMemoryWrite>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d005      	beq.n	800349c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e0a9      	b.n	80035f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2bff      	cmp	r3, #255	; 0xff
 80034a4:	d90e      	bls.n	80034c4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	22ff      	movs	r2, #255	; 0xff
 80034aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	8979      	ldrh	r1, [r7, #10]
 80034b4:	2300      	movs	r3, #0
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f000 fa51 	bl	8003964 <I2C_TransferConfig>
 80034c2:	e00f      	b.n	80034e4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	8979      	ldrh	r1, [r7, #10]
 80034d6:	2300      	movs	r3, #0
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 fa40 	bl	8003964 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f959 	bl	80037a0 <I2C_WaitOnTXISFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e07b      	b.n	80035f0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	781a      	ldrb	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003512:	b29b      	uxth	r3, r3
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003520:	3b01      	subs	r3, #1
 8003522:	b29a      	uxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352c:	b29b      	uxth	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d034      	beq.n	800359c <HAL_I2C_Mem_Write+0x1c8>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003536:	2b00      	cmp	r3, #0
 8003538:	d130      	bne.n	800359c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003540:	2200      	movs	r2, #0
 8003542:	2180      	movs	r1, #128	; 0x80
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f8eb 	bl	8003720 <I2C_WaitOnFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e04d      	b.n	80035f0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003558:	b29b      	uxth	r3, r3
 800355a:	2bff      	cmp	r3, #255	; 0xff
 800355c:	d90e      	bls.n	800357c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	22ff      	movs	r2, #255	; 0xff
 8003562:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003568:	b2da      	uxtb	r2, r3
 800356a:	8979      	ldrh	r1, [r7, #10]
 800356c:	2300      	movs	r3, #0
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 f9f5 	bl	8003964 <I2C_TransferConfig>
 800357a:	e00f      	b.n	800359c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358a:	b2da      	uxtb	r2, r3
 800358c:	8979      	ldrh	r1, [r7, #10]
 800358e:	2300      	movs	r3, #0
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 f9e4 	bl	8003964 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d19e      	bne.n	80034e4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 f938 	bl	8003820 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e01a      	b.n	80035f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2220      	movs	r2, #32
 80035c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6859      	ldr	r1, [r3, #4]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	4b0a      	ldr	r3, [pc, #40]	; (80035f8 <HAL_I2C_Mem_Write+0x224>)
 80035ce:	400b      	ands	r3, r1
 80035d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2220      	movs	r2, #32
 80035d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	e000      	b.n	80035f0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80035ee:	2302      	movs	r3, #2
  }
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	fe00e800 	.word	0xfe00e800

080035fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003618:	2b00      	cmp	r3, #0
 800361a:	d005      	beq.n	8003628 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	68f9      	ldr	r1, [r7, #12]
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	4798      	blx	r3
  }
}
 8003628:	bf00      	nop
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af02      	add	r7, sp, #8
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	4608      	mov	r0, r1
 800363a:	4611      	mov	r1, r2
 800363c:	461a      	mov	r2, r3
 800363e:	4603      	mov	r3, r0
 8003640:	817b      	strh	r3, [r7, #10]
 8003642:	460b      	mov	r3, r1
 8003644:	813b      	strh	r3, [r7, #8]
 8003646:	4613      	mov	r3, r2
 8003648:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800364a:	88fb      	ldrh	r3, [r7, #6]
 800364c:	b2da      	uxtb	r2, r3
 800364e:	8979      	ldrh	r1, [r7, #10]
 8003650:	4b20      	ldr	r3, [pc, #128]	; (80036d4 <I2C_RequestMemoryWrite+0xa4>)
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 f983 	bl	8003964 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800365e:	69fa      	ldr	r2, [r7, #28]
 8003660:	69b9      	ldr	r1, [r7, #24]
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 f89c 	bl	80037a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e02c      	b.n	80036cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003672:	88fb      	ldrh	r3, [r7, #6]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d105      	bne.n	8003684 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003678:	893b      	ldrh	r3, [r7, #8]
 800367a:	b2da      	uxtb	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	629a      	str	r2, [r3, #40]	; 0x28
 8003682:	e015      	b.n	80036b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003684:	893b      	ldrh	r3, [r7, #8]
 8003686:	0a1b      	lsrs	r3, r3, #8
 8003688:	b29b      	uxth	r3, r3
 800368a:	b2da      	uxtb	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003692:	69fa      	ldr	r2, [r7, #28]
 8003694:	69b9      	ldr	r1, [r7, #24]
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f000 f882 	bl	80037a0 <I2C_WaitOnTXISFlagUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e012      	b.n	80036cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036a6:	893b      	ldrh	r3, [r7, #8]
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	2200      	movs	r2, #0
 80036b8:	2180      	movs	r1, #128	; 0x80
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 f830 	bl	8003720 <I2C_WaitOnFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	80002000 	.word	0x80002000

080036d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d103      	bne.n	80036f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2200      	movs	r2, #0
 80036f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b01      	cmp	r3, #1
 8003702:	d007      	beq.n	8003714 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699a      	ldr	r2, [r3, #24]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0201 	orr.w	r2, r2, #1
 8003712:	619a      	str	r2, [r3, #24]
  }
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	603b      	str	r3, [r7, #0]
 800372c:	4613      	mov	r3, r2
 800372e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003730:	e022      	b.n	8003778 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003738:	d01e      	beq.n	8003778 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800373a:	f7fe fb7b 	bl	8001e34 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d302      	bcc.n	8003750 <I2C_WaitOnFlagUntilTimeout+0x30>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d113      	bne.n	8003778 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003754:	f043 0220 	orr.w	r2, r3, #32
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e00f      	b.n	8003798 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699a      	ldr	r2, [r3, #24]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	4013      	ands	r3, r2
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	429a      	cmp	r2, r3
 8003786:	bf0c      	ite	eq
 8003788:	2301      	moveq	r3, #1
 800378a:	2300      	movne	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	461a      	mov	r2, r3
 8003790:	79fb      	ldrb	r3, [r7, #7]
 8003792:	429a      	cmp	r2, r3
 8003794:	d0cd      	beq.n	8003732 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037ac:	e02c      	b.n	8003808 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	68b9      	ldr	r1, [r7, #8]
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 f870 	bl	8003898 <I2C_IsAcknowledgeFailed>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e02a      	b.n	8003818 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c8:	d01e      	beq.n	8003808 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ca:	f7fe fb33 	bl	8001e34 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d302      	bcc.n	80037e0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d113      	bne.n	8003808 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e4:	f043 0220 	orr.w	r2, r3, #32
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e007      	b.n	8003818 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b02      	cmp	r3, #2
 8003814:	d1cb      	bne.n	80037ae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800382c:	e028      	b.n	8003880 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	68b9      	ldr	r1, [r7, #8]
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 f830 	bl	8003898 <I2C_IsAcknowledgeFailed>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e026      	b.n	8003890 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003842:	f7fe faf7 	bl	8001e34 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	429a      	cmp	r2, r3
 8003850:	d302      	bcc.n	8003858 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d113      	bne.n	8003880 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385c:	f043 0220 	orr.w	r2, r3, #32
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e007      	b.n	8003890 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	2b20      	cmp	r3, #32
 800388c:	d1cf      	bne.n	800382e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	f003 0310 	and.w	r3, r3, #16
 80038ae:	2b10      	cmp	r3, #16
 80038b0:	d151      	bne.n	8003956 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038b2:	e022      	b.n	80038fa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ba:	d01e      	beq.n	80038fa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038bc:	f7fe faba 	bl	8001e34 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d302      	bcc.n	80038d2 <I2C_IsAcknowledgeFailed+0x3a>
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d113      	bne.n	80038fa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d6:	f043 0220 	orr.w	r2, r3, #32
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e02e      	b.n	8003958 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	f003 0320 	and.w	r3, r3, #32
 8003904:	2b20      	cmp	r3, #32
 8003906:	d1d5      	bne.n	80038b4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2210      	movs	r2, #16
 800390e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2220      	movs	r2, #32
 8003916:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f7ff fedd 	bl	80036d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6859      	ldr	r1, [r3, #4]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <I2C_IsAcknowledgeFailed+0xc8>)
 800392a:	400b      	ands	r3, r1
 800392c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003932:	f043 0204 	orr.w	r2, r3, #4
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2220      	movs	r2, #32
 800393e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	fe00e800 	.word	0xfe00e800

08003964 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	607b      	str	r3, [r7, #4]
 800396e:	460b      	mov	r3, r1
 8003970:	817b      	strh	r3, [r7, #10]
 8003972:	4613      	mov	r3, r2
 8003974:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	0d5b      	lsrs	r3, r3, #21
 8003980:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003984:	4b0d      	ldr	r3, [pc, #52]	; (80039bc <I2C_TransferConfig+0x58>)
 8003986:	430b      	orrs	r3, r1
 8003988:	43db      	mvns	r3, r3
 800398a:	ea02 0103 	and.w	r1, r2, r3
 800398e:	897b      	ldrh	r3, [r7, #10]
 8003990:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003994:	7a7b      	ldrb	r3, [r7, #9]
 8003996:	041b      	lsls	r3, r3, #16
 8003998:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800399c:	431a      	orrs	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	431a      	orrs	r2, r3
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	431a      	orrs	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80039ae:	bf00      	nop
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	03ff63ff 	.word	0x03ff63ff

080039c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b20      	cmp	r3, #32
 80039d4:	d138      	bne.n	8003a48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e032      	b.n	8003a4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2224      	movs	r2, #36	; 0x24
 80039f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0201 	bic.w	r2, r2, #1
 8003a02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6819      	ldr	r1, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f042 0201 	orr.w	r2, r2, #1
 8003a32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	e000      	b.n	8003a4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a48:	2302      	movs	r3, #2
  }
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b085      	sub	sp, #20
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b20      	cmp	r3, #32
 8003a6a:	d139      	bne.n	8003ae0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e033      	b.n	8003ae2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2224      	movs	r2, #36	; 0x24
 8003a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0201 	bic.w	r2, r2, #1
 8003a98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003aa8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	021b      	lsls	r3, r3, #8
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0201 	orr.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	e000      	b.n	8003ae2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ae0:	2302      	movs	r3, #2
  }
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003aee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003af0:	b08f      	sub	sp, #60	; 0x3c
 8003af2:	af0a      	add	r7, sp, #40	; 0x28
 8003af4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e116      	b.n	8003d2e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fe f850 	bl	8001bc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2203      	movs	r2, #3
 8003b24:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d102      	bne.n	8003b3a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f004 f8f4 	bl	8007d2c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	603b      	str	r3, [r7, #0]
 8003b4a:	687e      	ldr	r6, [r7, #4]
 8003b4c:	466d      	mov	r5, sp
 8003b4e:	f106 0410 	add.w	r4, r6, #16
 8003b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b62:	1d33      	adds	r3, r6, #4
 8003b64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b66:	6838      	ldr	r0, [r7, #0]
 8003b68:	f004 f872 	bl	8007c50 <USB_CoreInit>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d005      	beq.n	8003b7e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2202      	movs	r2, #2
 8003b76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e0d7      	b.n	8003d2e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2100      	movs	r1, #0
 8003b84:	4618      	mov	r0, r3
 8003b86:	f004 f8e2 	bl	8007d4e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	73fb      	strb	r3, [r7, #15]
 8003b8e:	e04a      	b.n	8003c26 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b90:	7bfa      	ldrb	r2, [r7, #15]
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	4613      	mov	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	1a9b      	subs	r3, r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	333d      	adds	r3, #61	; 0x3d
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ba4:	7bfa      	ldrb	r2, [r7, #15]
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	1a9b      	subs	r3, r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	333c      	adds	r3, #60	; 0x3c
 8003bb4:	7bfa      	ldrb	r2, [r7, #15]
 8003bb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003bb8:	7bfa      	ldrb	r2, [r7, #15]
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
 8003bbc:	b298      	uxth	r0, r3
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	1a9b      	subs	r3, r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	3342      	adds	r3, #66	; 0x42
 8003bcc:	4602      	mov	r2, r0
 8003bce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003bd0:	7bfa      	ldrb	r2, [r7, #15]
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	1a9b      	subs	r3, r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	333f      	adds	r3, #63	; 0x3f
 8003be0:	2200      	movs	r2, #0
 8003be2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003be4:	7bfa      	ldrb	r2, [r7, #15]
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	4613      	mov	r3, r2
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	1a9b      	subs	r3, r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	3344      	adds	r3, #68	; 0x44
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003bf8:	7bfa      	ldrb	r2, [r7, #15]
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	3348      	adds	r3, #72	; 0x48
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c0c:	7bfa      	ldrb	r2, [r7, #15]
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	1a9b      	subs	r3, r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	3350      	adds	r3, #80	; 0x50
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
 8003c22:	3301      	adds	r3, #1
 8003c24:	73fb      	strb	r3, [r7, #15]
 8003c26:	7bfa      	ldrb	r2, [r7, #15]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d3af      	bcc.n	8003b90 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c30:	2300      	movs	r3, #0
 8003c32:	73fb      	strb	r3, [r7, #15]
 8003c34:	e044      	b.n	8003cc0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c36:	7bfa      	ldrb	r2, [r7, #15]
 8003c38:	6879      	ldr	r1, [r7, #4]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	1a9b      	subs	r3, r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	440b      	add	r3, r1
 8003c44:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003c48:	2200      	movs	r2, #0
 8003c4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c4c:	7bfa      	ldrb	r2, [r7, #15]
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	4613      	mov	r3, r2
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	1a9b      	subs	r3, r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003c5e:	7bfa      	ldrb	r2, [r7, #15]
 8003c60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c62:	7bfa      	ldrb	r2, [r7, #15]
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003c74:	2200      	movs	r2, #0
 8003c76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c78:	7bfa      	ldrb	r2, [r7, #15]
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	1a9b      	subs	r3, r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c8e:	7bfa      	ldrb	r2, [r7, #15]
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ca4:	7bfa      	ldrb	r2, [r7, #15]
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	1a9b      	subs	r3, r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	440b      	add	r3, r1
 8003cb2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	73fb      	strb	r3, [r7, #15]
 8003cc0:	7bfa      	ldrb	r2, [r7, #15]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d3b5      	bcc.n	8003c36 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	603b      	str	r3, [r7, #0]
 8003cd0:	687e      	ldr	r6, [r7, #4]
 8003cd2:	466d      	mov	r5, sp
 8003cd4:	f106 0410 	add.w	r4, r6, #16
 8003cd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ce0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ce4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ce8:	1d33      	adds	r3, r6, #4
 8003cea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cec:	6838      	ldr	r0, [r7, #0]
 8003cee:	f004 f859 	bl	8007da4 <USB_DevInit>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e014      	b.n	8003d2e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d102      	bne.n	8003d22 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f80b 	bl	8003d38 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f004 f9fb 	bl	8008122 <USB_DevDisconnect>

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3714      	adds	r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003d38 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d66:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <HAL_PCDEx_ActivateLPM+0x44>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	10000003 	.word	0x10000003

08003d80 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003d88:	4b29      	ldr	r3, [pc, #164]	; (8003e30 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	2b06      	cmp	r3, #6
 8003d92:	d00a      	beq.n	8003daa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003d94:	4b26      	ldr	r3, [pc, #152]	; (8003e30 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d001      	beq.n	8003da6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e040      	b.n	8003e28 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	e03e      	b.n	8003e28 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003daa:	4b21      	ldr	r3, [pc, #132]	; (8003e30 <HAL_PWREx_ConfigSupply+0xb0>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003db2:	491f      	ldr	r1, [pc, #124]	; (8003e30 <HAL_PWREx_ConfigSupply+0xb0>)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003dba:	f7fe f83b 	bl	8001e34 <HAL_GetTick>
 8003dbe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003dc0:	e009      	b.n	8003dd6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003dc2:	f7fe f837 	bl	8001e34 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dd0:	d901      	bls.n	8003dd6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e028      	b.n	8003e28 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003dd6:	4b16      	ldr	r3, [pc, #88]	; (8003e30 <HAL_PWREx_ConfigSupply+0xb0>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de2:	d1ee      	bne.n	8003dc2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b1e      	cmp	r3, #30
 8003de8:	d008      	beq.n	8003dfc <HAL_PWREx_ConfigSupply+0x7c>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b2e      	cmp	r3, #46	; 0x2e
 8003dee:	d005      	beq.n	8003dfc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b1d      	cmp	r3, #29
 8003df4:	d002      	beq.n	8003dfc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b2d      	cmp	r3, #45	; 0x2d
 8003dfa:	d114      	bne.n	8003e26 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003dfc:	f7fe f81a 	bl	8001e34 <HAL_GetTick>
 8003e00:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003e02:	e009      	b.n	8003e18 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003e04:	f7fe f816 	bl	8001e34 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e12:	d901      	bls.n	8003e18 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e007      	b.n	8003e28 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003e18:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <HAL_PWREx_ConfigSupply+0xb0>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e24:	d1ee      	bne.n	8003e04 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	58024800 	.word	0x58024800

08003e34 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003e38:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	4a04      	ldr	r2, [pc, #16]	; (8003e50 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003e3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e42:	60d3      	str	r3, [r2, #12]
}
 8003e44:	bf00      	nop
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	58024800 	.word	0x58024800

08003e54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b08c      	sub	sp, #48	; 0x30
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e3ff      	b.n	8004666 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 8087 	beq.w	8003f82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e74:	4b99      	ldr	r3, [pc, #612]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e7e:	4b97      	ldr	r3, [pc, #604]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 8003e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e82:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e86:	2b10      	cmp	r3, #16
 8003e88:	d007      	beq.n	8003e9a <HAL_RCC_OscConfig+0x46>
 8003e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8c:	2b18      	cmp	r3, #24
 8003e8e:	d110      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x5e>
 8003e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d10b      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e9a:	4b90      	ldr	r3, [pc, #576]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d06c      	beq.n	8003f80 <HAL_RCC_OscConfig+0x12c>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d168      	bne.n	8003f80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e3d9      	b.n	8004666 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eba:	d106      	bne.n	8003eca <HAL_RCC_OscConfig+0x76>
 8003ebc:	4b87      	ldr	r3, [pc, #540]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a86      	ldr	r2, [pc, #536]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 8003ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec6:	6013      	str	r3, [r2, #0]
 8003ec8:	e02e      	b.n	8003f28 <HAL_RCC_OscConfig+0xd4>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10c      	bne.n	8003eec <HAL_RCC_OscConfig+0x98>
 8003ed2:	4b82      	ldr	r3, [pc, #520]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a81      	ldr	r2, [pc, #516]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 8003ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	4b7f      	ldr	r3, [pc, #508]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a7e      	ldr	r2, [pc, #504]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 8003ee4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	e01d      	b.n	8003f28 <HAL_RCC_OscConfig+0xd4>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ef4:	d10c      	bne.n	8003f10 <HAL_RCC_OscConfig+0xbc>
 8003ef6:	4b79      	ldr	r3, [pc, #484]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a78      	ldr	r2, [pc, #480]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 8003efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f00:	6013      	str	r3, [r2, #0]
 8003f02:	4b76      	ldr	r3, [pc, #472]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a75      	ldr	r2, [pc, #468]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 8003f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	e00b      	b.n	8003f28 <HAL_RCC_OscConfig+0xd4>
 8003f10:	4b72      	ldr	r3, [pc, #456]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a71      	ldr	r2, [pc, #452]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 8003f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f1a:	6013      	str	r3, [r2, #0]
 8003f1c:	4b6f      	ldr	r3, [pc, #444]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a6e      	ldr	r2, [pc, #440]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 8003f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d013      	beq.n	8003f58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f30:	f7fd ff80 	bl	8001e34 <HAL_GetTick>
 8003f34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f38:	f7fd ff7c 	bl	8001e34 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b64      	cmp	r3, #100	; 0x64
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e38d      	b.n	8004666 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f4a:	4b64      	ldr	r3, [pc, #400]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0f0      	beq.n	8003f38 <HAL_RCC_OscConfig+0xe4>
 8003f56:	e014      	b.n	8003f82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f58:	f7fd ff6c 	bl	8001e34 <HAL_GetTick>
 8003f5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f60:	f7fd ff68 	bl	8001e34 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b64      	cmp	r3, #100	; 0x64
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e379      	b.n	8004666 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f72:	4b5a      	ldr	r3, [pc, #360]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f0      	bne.n	8003f60 <HAL_RCC_OscConfig+0x10c>
 8003f7e:	e000      	b.n	8003f82 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 80ae 	beq.w	80040ec <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f90:	4b52      	ldr	r3, [pc, #328]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f98:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f9a:	4b50      	ldr	r3, [pc, #320]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 8003f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d007      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x162>
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	2b18      	cmp	r3, #24
 8003faa:	d13a      	bne.n	8004022 <HAL_RCC_OscConfig+0x1ce>
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d135      	bne.n	8004022 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fb6:	4b49      	ldr	r3, [pc, #292]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d005      	beq.n	8003fce <HAL_RCC_OscConfig+0x17a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e34b      	b.n	8004666 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fce:	f7fd ff61 	bl	8001e94 <HAL_GetREVID>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	f241 0203 	movw	r2, #4099	; 0x1003
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d817      	bhi.n	800400c <HAL_RCC_OscConfig+0x1b8>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	2b40      	cmp	r3, #64	; 0x40
 8003fe2:	d108      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x1a2>
 8003fe4:	4b3d      	ldr	r3, [pc, #244]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003fec:	4a3b      	ldr	r2, [pc, #236]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 8003fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ff2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ff4:	e07a      	b.n	80040ec <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff6:	4b39      	ldr	r3, [pc, #228]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	031b      	lsls	r3, r3, #12
 8004004:	4935      	ldr	r1, [pc, #212]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 8004006:	4313      	orrs	r3, r2
 8004008:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800400a:	e06f      	b.n	80040ec <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800400c:	4b33      	ldr	r3, [pc, #204]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	061b      	lsls	r3, r3, #24
 800401a:	4930      	ldr	r1, [pc, #192]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 800401c:	4313      	orrs	r3, r2
 800401e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004020:	e064      	b.n	80040ec <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d045      	beq.n	80040b6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800402a:	4b2c      	ldr	r3, [pc, #176]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f023 0219 	bic.w	r2, r3, #25
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	4929      	ldr	r1, [pc, #164]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 8004038:	4313      	orrs	r3, r2
 800403a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7fd fefa 	bl	8001e34 <HAL_GetTick>
 8004040:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004044:	f7fd fef6 	bl	8001e34 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e307      	b.n	8004666 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004056:	4b21      	ldr	r3, [pc, #132]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f0      	beq.n	8004044 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004062:	f7fd ff17 	bl	8001e94 <HAL_GetREVID>
 8004066:	4603      	mov	r3, r0
 8004068:	f241 0203 	movw	r2, #4099	; 0x1003
 800406c:	4293      	cmp	r3, r2
 800406e:	d817      	bhi.n	80040a0 <HAL_RCC_OscConfig+0x24c>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	2b40      	cmp	r3, #64	; 0x40
 8004076:	d108      	bne.n	800408a <HAL_RCC_OscConfig+0x236>
 8004078:	4b18      	ldr	r3, [pc, #96]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004080:	4a16      	ldr	r2, [pc, #88]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 8004082:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004086:	6053      	str	r3, [r2, #4]
 8004088:	e030      	b.n	80040ec <HAL_RCC_OscConfig+0x298>
 800408a:	4b14      	ldr	r3, [pc, #80]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	031b      	lsls	r3, r3, #12
 8004098:	4910      	ldr	r1, [pc, #64]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 800409a:	4313      	orrs	r3, r2
 800409c:	604b      	str	r3, [r1, #4]
 800409e:	e025      	b.n	80040ec <HAL_RCC_OscConfig+0x298>
 80040a0:	4b0e      	ldr	r3, [pc, #56]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	061b      	lsls	r3, r3, #24
 80040ae:	490b      	ldr	r1, [pc, #44]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	604b      	str	r3, [r1, #4]
 80040b4:	e01a      	b.n	80040ec <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040b6:	4b09      	ldr	r3, [pc, #36]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a08      	ldr	r2, [pc, #32]	; (80040dc <HAL_RCC_OscConfig+0x288>)
 80040bc:	f023 0301 	bic.w	r3, r3, #1
 80040c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c2:	f7fd feb7 	bl	8001e34 <HAL_GetTick>
 80040c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040c8:	e00a      	b.n	80040e0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ca:	f7fd feb3 	bl	8001e34 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d903      	bls.n	80040e0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e2c4      	b.n	8004666 <HAL_RCC_OscConfig+0x812>
 80040dc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040e0:	4ba4      	ldr	r3, [pc, #656]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1ee      	bne.n	80040ca <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0310 	and.w	r3, r3, #16
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f000 80a9 	beq.w	800424c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040fa:	4b9e      	ldr	r3, [pc, #632]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004102:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004104:	4b9b      	ldr	r3, [pc, #620]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 8004106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004108:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	2b08      	cmp	r3, #8
 800410e:	d007      	beq.n	8004120 <HAL_RCC_OscConfig+0x2cc>
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	2b18      	cmp	r3, #24
 8004114:	d13a      	bne.n	800418c <HAL_RCC_OscConfig+0x338>
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f003 0303 	and.w	r3, r3, #3
 800411c:	2b01      	cmp	r3, #1
 800411e:	d135      	bne.n	800418c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004120:	4b94      	ldr	r3, [pc, #592]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_RCC_OscConfig+0x2e4>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	2b80      	cmp	r3, #128	; 0x80
 8004132:	d001      	beq.n	8004138 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e296      	b.n	8004666 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004138:	f7fd feac 	bl	8001e94 <HAL_GetREVID>
 800413c:	4603      	mov	r3, r0
 800413e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004142:	4293      	cmp	r3, r2
 8004144:	d817      	bhi.n	8004176 <HAL_RCC_OscConfig+0x322>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	2b20      	cmp	r3, #32
 800414c:	d108      	bne.n	8004160 <HAL_RCC_OscConfig+0x30c>
 800414e:	4b89      	ldr	r3, [pc, #548]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004156:	4a87      	ldr	r2, [pc, #540]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 8004158:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800415c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800415e:	e075      	b.n	800424c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004160:	4b84      	ldr	r3, [pc, #528]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	069b      	lsls	r3, r3, #26
 800416e:	4981      	ldr	r1, [pc, #516]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 8004170:	4313      	orrs	r3, r2
 8004172:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004174:	e06a      	b.n	800424c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004176:	4b7f      	ldr	r3, [pc, #508]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	061b      	lsls	r3, r3, #24
 8004184:	497b      	ldr	r1, [pc, #492]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 8004186:	4313      	orrs	r3, r2
 8004188:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800418a:	e05f      	b.n	800424c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d042      	beq.n	800421a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004194:	4b77      	ldr	r3, [pc, #476]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a76      	ldr	r2, [pc, #472]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 800419a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800419e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a0:	f7fd fe48 	bl	8001e34 <HAL_GetTick>
 80041a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80041a8:	f7fd fe44 	bl	8001e34 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e255      	b.n	8004666 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041ba:	4b6e      	ldr	r3, [pc, #440]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0f0      	beq.n	80041a8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041c6:	f7fd fe65 	bl	8001e94 <HAL_GetREVID>
 80041ca:	4603      	mov	r3, r0
 80041cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d817      	bhi.n	8004204 <HAL_RCC_OscConfig+0x3b0>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	2b20      	cmp	r3, #32
 80041da:	d108      	bne.n	80041ee <HAL_RCC_OscConfig+0x39a>
 80041dc:	4b65      	ldr	r3, [pc, #404]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80041e4:	4a63      	ldr	r2, [pc, #396]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 80041e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041ea:	6053      	str	r3, [r2, #4]
 80041ec:	e02e      	b.n	800424c <HAL_RCC_OscConfig+0x3f8>
 80041ee:	4b61      	ldr	r3, [pc, #388]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	069b      	lsls	r3, r3, #26
 80041fc:	495d      	ldr	r1, [pc, #372]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	604b      	str	r3, [r1, #4]
 8004202:	e023      	b.n	800424c <HAL_RCC_OscConfig+0x3f8>
 8004204:	4b5b      	ldr	r3, [pc, #364]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	061b      	lsls	r3, r3, #24
 8004212:	4958      	ldr	r1, [pc, #352]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 8004214:	4313      	orrs	r3, r2
 8004216:	60cb      	str	r3, [r1, #12]
 8004218:	e018      	b.n	800424c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800421a:	4b56      	ldr	r3, [pc, #344]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a55      	ldr	r2, [pc, #340]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 8004220:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004224:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004226:	f7fd fe05 	bl	8001e34 <HAL_GetTick>
 800422a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800422e:	f7fd fe01 	bl	8001e34 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e212      	b.n	8004666 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004240:	4b4c      	ldr	r3, [pc, #304]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1f0      	bne.n	800422e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b00      	cmp	r3, #0
 8004256:	d036      	beq.n	80042c6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d019      	beq.n	8004294 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004260:	4b44      	ldr	r3, [pc, #272]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 8004262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004264:	4a43      	ldr	r2, [pc, #268]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 8004266:	f043 0301 	orr.w	r3, r3, #1
 800426a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800426c:	f7fd fde2 	bl	8001e34 <HAL_GetTick>
 8004270:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004274:	f7fd fdde 	bl	8001e34 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e1ef      	b.n	8004666 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004286:	4b3b      	ldr	r3, [pc, #236]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 8004288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d0f0      	beq.n	8004274 <HAL_RCC_OscConfig+0x420>
 8004292:	e018      	b.n	80042c6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004294:	4b37      	ldr	r3, [pc, #220]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 8004296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004298:	4a36      	ldr	r2, [pc, #216]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 800429a:	f023 0301 	bic.w	r3, r3, #1
 800429e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a0:	f7fd fdc8 	bl	8001e34 <HAL_GetTick>
 80042a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042a8:	f7fd fdc4 	bl	8001e34 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e1d5      	b.n	8004666 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042ba:	4b2e      	ldr	r3, [pc, #184]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 80042bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0320 	and.w	r3, r3, #32
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d036      	beq.n	8004340 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d019      	beq.n	800430e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042da:	4b26      	ldr	r3, [pc, #152]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a25      	ldr	r2, [pc, #148]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 80042e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80042e6:	f7fd fda5 	bl	8001e34 <HAL_GetTick>
 80042ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80042ee:	f7fd fda1 	bl	8001e34 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e1b2      	b.n	8004666 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004300:	4b1c      	ldr	r3, [pc, #112]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0f0      	beq.n	80042ee <HAL_RCC_OscConfig+0x49a>
 800430c:	e018      	b.n	8004340 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800430e:	4b19      	ldr	r3, [pc, #100]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a18      	ldr	r2, [pc, #96]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 8004314:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004318:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800431a:	f7fd fd8b 	bl	8001e34 <HAL_GetTick>
 800431e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004320:	e008      	b.n	8004334 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004322:	f7fd fd87 	bl	8001e34 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e198      	b.n	8004666 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004334:	4b0f      	ldr	r3, [pc, #60]	; (8004374 <HAL_RCC_OscConfig+0x520>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1f0      	bne.n	8004322 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 8085 	beq.w	8004458 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800434e:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <HAL_RCC_OscConfig+0x524>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a09      	ldr	r2, [pc, #36]	; (8004378 <HAL_RCC_OscConfig+0x524>)
 8004354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004358:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800435a:	f7fd fd6b 	bl	8001e34 <HAL_GetTick>
 800435e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004360:	e00c      	b.n	800437c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004362:	f7fd fd67 	bl	8001e34 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b64      	cmp	r3, #100	; 0x64
 800436e:	d905      	bls.n	800437c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e178      	b.n	8004666 <HAL_RCC_OscConfig+0x812>
 8004374:	58024400 	.word	0x58024400
 8004378:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800437c:	4b96      	ldr	r3, [pc, #600]	; (80045d8 <HAL_RCC_OscConfig+0x784>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0ec      	beq.n	8004362 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d106      	bne.n	800439e <HAL_RCC_OscConfig+0x54a>
 8004390:	4b92      	ldr	r3, [pc, #584]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 8004392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004394:	4a91      	ldr	r2, [pc, #580]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 8004396:	f043 0301 	orr.w	r3, r3, #1
 800439a:	6713      	str	r3, [r2, #112]	; 0x70
 800439c:	e02d      	b.n	80043fa <HAL_RCC_OscConfig+0x5a6>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10c      	bne.n	80043c0 <HAL_RCC_OscConfig+0x56c>
 80043a6:	4b8d      	ldr	r3, [pc, #564]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 80043a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043aa:	4a8c      	ldr	r2, [pc, #560]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 80043ac:	f023 0301 	bic.w	r3, r3, #1
 80043b0:	6713      	str	r3, [r2, #112]	; 0x70
 80043b2:	4b8a      	ldr	r3, [pc, #552]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 80043b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b6:	4a89      	ldr	r2, [pc, #548]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 80043b8:	f023 0304 	bic.w	r3, r3, #4
 80043bc:	6713      	str	r3, [r2, #112]	; 0x70
 80043be:	e01c      	b.n	80043fa <HAL_RCC_OscConfig+0x5a6>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	2b05      	cmp	r3, #5
 80043c6:	d10c      	bne.n	80043e2 <HAL_RCC_OscConfig+0x58e>
 80043c8:	4b84      	ldr	r3, [pc, #528]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043cc:	4a83      	ldr	r2, [pc, #524]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 80043ce:	f043 0304 	orr.w	r3, r3, #4
 80043d2:	6713      	str	r3, [r2, #112]	; 0x70
 80043d4:	4b81      	ldr	r3, [pc, #516]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 80043d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d8:	4a80      	ldr	r2, [pc, #512]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	6713      	str	r3, [r2, #112]	; 0x70
 80043e0:	e00b      	b.n	80043fa <HAL_RCC_OscConfig+0x5a6>
 80043e2:	4b7e      	ldr	r3, [pc, #504]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 80043e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e6:	4a7d      	ldr	r2, [pc, #500]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 80043e8:	f023 0301 	bic.w	r3, r3, #1
 80043ec:	6713      	str	r3, [r2, #112]	; 0x70
 80043ee:	4b7b      	ldr	r3, [pc, #492]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 80043f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f2:	4a7a      	ldr	r2, [pc, #488]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 80043f4:	f023 0304 	bic.w	r3, r3, #4
 80043f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d015      	beq.n	800442e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004402:	f7fd fd17 	bl	8001e34 <HAL_GetTick>
 8004406:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004408:	e00a      	b.n	8004420 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800440a:	f7fd fd13 	bl	8001e34 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	f241 3288 	movw	r2, #5000	; 0x1388
 8004418:	4293      	cmp	r3, r2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e122      	b.n	8004666 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004420:	4b6e      	ldr	r3, [pc, #440]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 8004422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0ee      	beq.n	800440a <HAL_RCC_OscConfig+0x5b6>
 800442c:	e014      	b.n	8004458 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800442e:	f7fd fd01 	bl	8001e34 <HAL_GetTick>
 8004432:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004434:	e00a      	b.n	800444c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004436:	f7fd fcfd 	bl	8001e34 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	f241 3288 	movw	r2, #5000	; 0x1388
 8004444:	4293      	cmp	r3, r2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e10c      	b.n	8004666 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800444c:	4b63      	ldr	r3, [pc, #396]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 800444e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1ee      	bne.n	8004436 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 8101 	beq.w	8004664 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004462:	4b5e      	ldr	r3, [pc, #376]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800446a:	2b18      	cmp	r3, #24
 800446c:	f000 80bc 	beq.w	80045e8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	2b02      	cmp	r3, #2
 8004476:	f040 8095 	bne.w	80045a4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800447a:	4b58      	ldr	r3, [pc, #352]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a57      	ldr	r2, [pc, #348]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 8004480:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004486:	f7fd fcd5 	bl	8001e34 <HAL_GetTick>
 800448a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800448c:	e008      	b.n	80044a0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800448e:	f7fd fcd1 	bl	8001e34 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e0e2      	b.n	8004666 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044a0:	4b4e      	ldr	r3, [pc, #312]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1f0      	bne.n	800448e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044ac:	4b4b      	ldr	r3, [pc, #300]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 80044ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044b0:	4b4b      	ldr	r3, [pc, #300]	; (80045e0 <HAL_RCC_OscConfig+0x78c>)
 80044b2:	4013      	ands	r3, r2
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80044bc:	0112      	lsls	r2, r2, #4
 80044be:	430a      	orrs	r2, r1
 80044c0:	4946      	ldr	r1, [pc, #280]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	628b      	str	r3, [r1, #40]	; 0x28
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ca:	3b01      	subs	r3, #1
 80044cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d4:	3b01      	subs	r3, #1
 80044d6:	025b      	lsls	r3, r3, #9
 80044d8:	b29b      	uxth	r3, r3
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e0:	3b01      	subs	r3, #1
 80044e2:	041b      	lsls	r3, r3, #16
 80044e4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80044e8:	431a      	orrs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ee:	3b01      	subs	r3, #1
 80044f0:	061b      	lsls	r3, r3, #24
 80044f2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80044f6:	4939      	ldr	r1, [pc, #228]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80044fc:	4b37      	ldr	r3, [pc, #220]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	4a36      	ldr	r2, [pc, #216]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 8004502:	f023 0301 	bic.w	r3, r3, #1
 8004506:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004508:	4b34      	ldr	r3, [pc, #208]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 800450a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800450c:	4b35      	ldr	r3, [pc, #212]	; (80045e4 <HAL_RCC_OscConfig+0x790>)
 800450e:	4013      	ands	r3, r2
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004514:	00d2      	lsls	r2, r2, #3
 8004516:	4931      	ldr	r1, [pc, #196]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 8004518:	4313      	orrs	r3, r2
 800451a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800451c:	4b2f      	ldr	r3, [pc, #188]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 800451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004520:	f023 020c 	bic.w	r2, r3, #12
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	492c      	ldr	r1, [pc, #176]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 800452a:	4313      	orrs	r3, r2
 800452c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800452e:	4b2b      	ldr	r3, [pc, #172]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 8004530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004532:	f023 0202 	bic.w	r2, r3, #2
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453a:	4928      	ldr	r1, [pc, #160]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 800453c:	4313      	orrs	r3, r2
 800453e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004540:	4b26      	ldr	r3, [pc, #152]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 8004542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004544:	4a25      	ldr	r2, [pc, #148]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 8004546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800454a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800454c:	4b23      	ldr	r3, [pc, #140]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	4a22      	ldr	r2, [pc, #136]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 8004552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004556:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004558:	4b20      	ldr	r3, [pc, #128]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455c:	4a1f      	ldr	r2, [pc, #124]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 800455e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004562:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004564:	4b1d      	ldr	r3, [pc, #116]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 8004566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004568:	4a1c      	ldr	r2, [pc, #112]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 800456a:	f043 0301 	orr.w	r3, r3, #1
 800456e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004570:	4b1a      	ldr	r3, [pc, #104]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a19      	ldr	r2, [pc, #100]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 8004576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800457a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457c:	f7fd fc5a 	bl	8001e34 <HAL_GetTick>
 8004580:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004584:	f7fd fc56 	bl	8001e34 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e067      	b.n	8004666 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004596:	4b11      	ldr	r3, [pc, #68]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0f0      	beq.n	8004584 <HAL_RCC_OscConfig+0x730>
 80045a2:	e05f      	b.n	8004664 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a4:	4b0d      	ldr	r3, [pc, #52]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a0c      	ldr	r2, [pc, #48]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 80045aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b0:	f7fd fc40 	bl	8001e34 <HAL_GetTick>
 80045b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045b8:	f7fd fc3c 	bl	8001e34 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e04d      	b.n	8004666 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045ca:	4b04      	ldr	r3, [pc, #16]	; (80045dc <HAL_RCC_OscConfig+0x788>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1f0      	bne.n	80045b8 <HAL_RCC_OscConfig+0x764>
 80045d6:	e045      	b.n	8004664 <HAL_RCC_OscConfig+0x810>
 80045d8:	58024800 	.word	0x58024800
 80045dc:	58024400 	.word	0x58024400
 80045e0:	fffffc0c 	.word	0xfffffc0c
 80045e4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80045e8:	4b21      	ldr	r3, [pc, #132]	; (8004670 <HAL_RCC_OscConfig+0x81c>)
 80045ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80045ee:	4b20      	ldr	r3, [pc, #128]	; (8004670 <HAL_RCC_OscConfig+0x81c>)
 80045f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d031      	beq.n	8004660 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f003 0203 	and.w	r2, r3, #3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004606:	429a      	cmp	r2, r3
 8004608:	d12a      	bne.n	8004660 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	091b      	lsrs	r3, r3, #4
 800460e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004616:	429a      	cmp	r2, r3
 8004618:	d122      	bne.n	8004660 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004624:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004626:	429a      	cmp	r2, r3
 8004628:	d11a      	bne.n	8004660 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	0a5b      	lsrs	r3, r3, #9
 800462e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004636:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004638:	429a      	cmp	r2, r3
 800463a:	d111      	bne.n	8004660 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	0c1b      	lsrs	r3, r3, #16
 8004640:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004648:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800464a:	429a      	cmp	r2, r3
 800464c:	d108      	bne.n	8004660 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	0e1b      	lsrs	r3, r3, #24
 8004652:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800465c:	429a      	cmp	r2, r3
 800465e:	d001      	beq.n	8004664 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e000      	b.n	8004666 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3730      	adds	r7, #48	; 0x30
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	58024400 	.word	0x58024400

08004674 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e19c      	b.n	80049c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004688:	4b8a      	ldr	r3, [pc, #552]	; (80048b4 <HAL_RCC_ClockConfig+0x240>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 030f 	and.w	r3, r3, #15
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d910      	bls.n	80046b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004696:	4b87      	ldr	r3, [pc, #540]	; (80048b4 <HAL_RCC_ClockConfig+0x240>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f023 020f 	bic.w	r2, r3, #15
 800469e:	4985      	ldr	r1, [pc, #532]	; (80048b4 <HAL_RCC_ClockConfig+0x240>)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a6:	4b83      	ldr	r3, [pc, #524]	; (80048b4 <HAL_RCC_ClockConfig+0x240>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 030f 	and.w	r3, r3, #15
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d001      	beq.n	80046b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e184      	b.n	80049c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d010      	beq.n	80046e6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691a      	ldr	r2, [r3, #16]
 80046c8:	4b7b      	ldr	r3, [pc, #492]	; (80048b8 <HAL_RCC_ClockConfig+0x244>)
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d908      	bls.n	80046e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80046d4:	4b78      	ldr	r3, [pc, #480]	; (80048b8 <HAL_RCC_ClockConfig+0x244>)
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	4975      	ldr	r1, [pc, #468]	; (80048b8 <HAL_RCC_ClockConfig+0x244>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0308 	and.w	r3, r3, #8
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d010      	beq.n	8004714 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	695a      	ldr	r2, [r3, #20]
 80046f6:	4b70      	ldr	r3, [pc, #448]	; (80048b8 <HAL_RCC_ClockConfig+0x244>)
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046fe:	429a      	cmp	r2, r3
 8004700:	d908      	bls.n	8004714 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004702:	4b6d      	ldr	r3, [pc, #436]	; (80048b8 <HAL_RCC_ClockConfig+0x244>)
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	496a      	ldr	r1, [pc, #424]	; (80048b8 <HAL_RCC_ClockConfig+0x244>)
 8004710:	4313      	orrs	r3, r2
 8004712:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0310 	and.w	r3, r3, #16
 800471c:	2b00      	cmp	r3, #0
 800471e:	d010      	beq.n	8004742 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699a      	ldr	r2, [r3, #24]
 8004724:	4b64      	ldr	r3, [pc, #400]	; (80048b8 <HAL_RCC_ClockConfig+0x244>)
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800472c:	429a      	cmp	r2, r3
 800472e:	d908      	bls.n	8004742 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004730:	4b61      	ldr	r3, [pc, #388]	; (80048b8 <HAL_RCC_ClockConfig+0x244>)
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	495e      	ldr	r1, [pc, #376]	; (80048b8 <HAL_RCC_ClockConfig+0x244>)
 800473e:	4313      	orrs	r3, r2
 8004740:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	2b00      	cmp	r3, #0
 800474c:	d010      	beq.n	8004770 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69da      	ldr	r2, [r3, #28]
 8004752:	4b59      	ldr	r3, [pc, #356]	; (80048b8 <HAL_RCC_ClockConfig+0x244>)
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800475a:	429a      	cmp	r2, r3
 800475c:	d908      	bls.n	8004770 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800475e:	4b56      	ldr	r3, [pc, #344]	; (80048b8 <HAL_RCC_ClockConfig+0x244>)
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	4953      	ldr	r1, [pc, #332]	; (80048b8 <HAL_RCC_ClockConfig+0x244>)
 800476c:	4313      	orrs	r3, r2
 800476e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d010      	beq.n	800479e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	4b4d      	ldr	r3, [pc, #308]	; (80048b8 <HAL_RCC_ClockConfig+0x244>)
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	f003 030f 	and.w	r3, r3, #15
 8004788:	429a      	cmp	r2, r3
 800478a:	d908      	bls.n	800479e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800478c:	4b4a      	ldr	r3, [pc, #296]	; (80048b8 <HAL_RCC_ClockConfig+0x244>)
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	f023 020f 	bic.w	r2, r3, #15
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	4947      	ldr	r1, [pc, #284]	; (80048b8 <HAL_RCC_ClockConfig+0x244>)
 800479a:	4313      	orrs	r3, r2
 800479c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d055      	beq.n	8004856 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80047aa:	4b43      	ldr	r3, [pc, #268]	; (80048b8 <HAL_RCC_ClockConfig+0x244>)
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	4940      	ldr	r1, [pc, #256]	; (80048b8 <HAL_RCC_ClockConfig+0x244>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d107      	bne.n	80047d4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047c4:	4b3c      	ldr	r3, [pc, #240]	; (80048b8 <HAL_RCC_ClockConfig+0x244>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d121      	bne.n	8004814 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e0f6      	b.n	80049c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	2b03      	cmp	r3, #3
 80047da:	d107      	bne.n	80047ec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047dc:	4b36      	ldr	r3, [pc, #216]	; (80048b8 <HAL_RCC_ClockConfig+0x244>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d115      	bne.n	8004814 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e0ea      	b.n	80049c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d107      	bne.n	8004804 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047f4:	4b30      	ldr	r3, [pc, #192]	; (80048b8 <HAL_RCC_ClockConfig+0x244>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d109      	bne.n	8004814 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e0de      	b.n	80049c2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004804:	4b2c      	ldr	r3, [pc, #176]	; (80048b8 <HAL_RCC_ClockConfig+0x244>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e0d6      	b.n	80049c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004814:	4b28      	ldr	r3, [pc, #160]	; (80048b8 <HAL_RCC_ClockConfig+0x244>)
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	f023 0207 	bic.w	r2, r3, #7
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	4925      	ldr	r1, [pc, #148]	; (80048b8 <HAL_RCC_ClockConfig+0x244>)
 8004822:	4313      	orrs	r3, r2
 8004824:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004826:	f7fd fb05 	bl	8001e34 <HAL_GetTick>
 800482a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482c:	e00a      	b.n	8004844 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800482e:	f7fd fb01 	bl	8001e34 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	f241 3288 	movw	r2, #5000	; 0x1388
 800483c:	4293      	cmp	r3, r2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e0be      	b.n	80049c2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004844:	4b1c      	ldr	r3, [pc, #112]	; (80048b8 <HAL_RCC_ClockConfig+0x244>)
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	00db      	lsls	r3, r3, #3
 8004852:	429a      	cmp	r2, r3
 8004854:	d1eb      	bne.n	800482e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d010      	beq.n	8004884 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	4b14      	ldr	r3, [pc, #80]	; (80048b8 <HAL_RCC_ClockConfig+0x244>)
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	429a      	cmp	r2, r3
 8004870:	d208      	bcs.n	8004884 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004872:	4b11      	ldr	r3, [pc, #68]	; (80048b8 <HAL_RCC_ClockConfig+0x244>)
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	f023 020f 	bic.w	r2, r3, #15
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	490e      	ldr	r1, [pc, #56]	; (80048b8 <HAL_RCC_ClockConfig+0x244>)
 8004880:	4313      	orrs	r3, r2
 8004882:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004884:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <HAL_RCC_ClockConfig+0x240>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 030f 	and.w	r3, r3, #15
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	429a      	cmp	r2, r3
 8004890:	d214      	bcs.n	80048bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004892:	4b08      	ldr	r3, [pc, #32]	; (80048b4 <HAL_RCC_ClockConfig+0x240>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f023 020f 	bic.w	r2, r3, #15
 800489a:	4906      	ldr	r1, [pc, #24]	; (80048b4 <HAL_RCC_ClockConfig+0x240>)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	4313      	orrs	r3, r2
 80048a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a2:	4b04      	ldr	r3, [pc, #16]	; (80048b4 <HAL_RCC_ClockConfig+0x240>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 030f 	and.w	r3, r3, #15
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d005      	beq.n	80048bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e086      	b.n	80049c2 <HAL_RCC_ClockConfig+0x34e>
 80048b4:	52002000 	.word	0x52002000
 80048b8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d010      	beq.n	80048ea <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	691a      	ldr	r2, [r3, #16]
 80048cc:	4b3f      	ldr	r3, [pc, #252]	; (80049cc <HAL_RCC_ClockConfig+0x358>)
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d208      	bcs.n	80048ea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80048d8:	4b3c      	ldr	r3, [pc, #240]	; (80049cc <HAL_RCC_ClockConfig+0x358>)
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	4939      	ldr	r1, [pc, #228]	; (80049cc <HAL_RCC_ClockConfig+0x358>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d010      	beq.n	8004918 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	695a      	ldr	r2, [r3, #20]
 80048fa:	4b34      	ldr	r3, [pc, #208]	; (80049cc <HAL_RCC_ClockConfig+0x358>)
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004902:	429a      	cmp	r2, r3
 8004904:	d208      	bcs.n	8004918 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004906:	4b31      	ldr	r3, [pc, #196]	; (80049cc <HAL_RCC_ClockConfig+0x358>)
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	492e      	ldr	r1, [pc, #184]	; (80049cc <HAL_RCC_ClockConfig+0x358>)
 8004914:	4313      	orrs	r3, r2
 8004916:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0310 	and.w	r3, r3, #16
 8004920:	2b00      	cmp	r3, #0
 8004922:	d010      	beq.n	8004946 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	699a      	ldr	r2, [r3, #24]
 8004928:	4b28      	ldr	r3, [pc, #160]	; (80049cc <HAL_RCC_ClockConfig+0x358>)
 800492a:	69db      	ldr	r3, [r3, #28]
 800492c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004930:	429a      	cmp	r2, r3
 8004932:	d208      	bcs.n	8004946 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004934:	4b25      	ldr	r3, [pc, #148]	; (80049cc <HAL_RCC_ClockConfig+0x358>)
 8004936:	69db      	ldr	r3, [r3, #28]
 8004938:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	4922      	ldr	r1, [pc, #136]	; (80049cc <HAL_RCC_ClockConfig+0x358>)
 8004942:	4313      	orrs	r3, r2
 8004944:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0320 	and.w	r3, r3, #32
 800494e:	2b00      	cmp	r3, #0
 8004950:	d010      	beq.n	8004974 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	69da      	ldr	r2, [r3, #28]
 8004956:	4b1d      	ldr	r3, [pc, #116]	; (80049cc <HAL_RCC_ClockConfig+0x358>)
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800495e:	429a      	cmp	r2, r3
 8004960:	d208      	bcs.n	8004974 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004962:	4b1a      	ldr	r3, [pc, #104]	; (80049cc <HAL_RCC_ClockConfig+0x358>)
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	4917      	ldr	r1, [pc, #92]	; (80049cc <HAL_RCC_ClockConfig+0x358>)
 8004970:	4313      	orrs	r3, r2
 8004972:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004974:	f000 f834 	bl	80049e0 <HAL_RCC_GetSysClockFreq>
 8004978:	4602      	mov	r2, r0
 800497a:	4b14      	ldr	r3, [pc, #80]	; (80049cc <HAL_RCC_ClockConfig+0x358>)
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	0a1b      	lsrs	r3, r3, #8
 8004980:	f003 030f 	and.w	r3, r3, #15
 8004984:	4912      	ldr	r1, [pc, #72]	; (80049d0 <HAL_RCC_ClockConfig+0x35c>)
 8004986:	5ccb      	ldrb	r3, [r1, r3]
 8004988:	f003 031f 	and.w	r3, r3, #31
 800498c:	fa22 f303 	lsr.w	r3, r2, r3
 8004990:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004992:	4b0e      	ldr	r3, [pc, #56]	; (80049cc <HAL_RCC_ClockConfig+0x358>)
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	4a0d      	ldr	r2, [pc, #52]	; (80049d0 <HAL_RCC_ClockConfig+0x35c>)
 800499c:	5cd3      	ldrb	r3, [r2, r3]
 800499e:	f003 031f 	and.w	r3, r3, #31
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	fa22 f303 	lsr.w	r3, r2, r3
 80049a8:	4a0a      	ldr	r2, [pc, #40]	; (80049d4 <HAL_RCC_ClockConfig+0x360>)
 80049aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049ac:	4a0a      	ldr	r2, [pc, #40]	; (80049d8 <HAL_RCC_ClockConfig+0x364>)
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80049b2:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <HAL_RCC_ClockConfig+0x368>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fd f9f2 	bl	8001da0 <HAL_InitTick>
 80049bc:	4603      	mov	r3, r0
 80049be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	58024400 	.word	0x58024400
 80049d0:	0800fca8 	.word	0x0800fca8
 80049d4:	24000004 	.word	0x24000004
 80049d8:	24000000 	.word	0x24000000
 80049dc:	24000008 	.word	0x24000008

080049e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b089      	sub	sp, #36	; 0x24
 80049e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049e6:	4bb3      	ldr	r3, [pc, #716]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049ee:	2b18      	cmp	r3, #24
 80049f0:	f200 8155 	bhi.w	8004c9e <HAL_RCC_GetSysClockFreq+0x2be>
 80049f4:	a201      	add	r2, pc, #4	; (adr r2, 80049fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80049f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fa:	bf00      	nop
 80049fc:	08004a61 	.word	0x08004a61
 8004a00:	08004c9f 	.word	0x08004c9f
 8004a04:	08004c9f 	.word	0x08004c9f
 8004a08:	08004c9f 	.word	0x08004c9f
 8004a0c:	08004c9f 	.word	0x08004c9f
 8004a10:	08004c9f 	.word	0x08004c9f
 8004a14:	08004c9f 	.word	0x08004c9f
 8004a18:	08004c9f 	.word	0x08004c9f
 8004a1c:	08004a87 	.word	0x08004a87
 8004a20:	08004c9f 	.word	0x08004c9f
 8004a24:	08004c9f 	.word	0x08004c9f
 8004a28:	08004c9f 	.word	0x08004c9f
 8004a2c:	08004c9f 	.word	0x08004c9f
 8004a30:	08004c9f 	.word	0x08004c9f
 8004a34:	08004c9f 	.word	0x08004c9f
 8004a38:	08004c9f 	.word	0x08004c9f
 8004a3c:	08004a8d 	.word	0x08004a8d
 8004a40:	08004c9f 	.word	0x08004c9f
 8004a44:	08004c9f 	.word	0x08004c9f
 8004a48:	08004c9f 	.word	0x08004c9f
 8004a4c:	08004c9f 	.word	0x08004c9f
 8004a50:	08004c9f 	.word	0x08004c9f
 8004a54:	08004c9f 	.word	0x08004c9f
 8004a58:	08004c9f 	.word	0x08004c9f
 8004a5c:	08004a93 	.word	0x08004a93
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a60:	4b94      	ldr	r3, [pc, #592]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0320 	and.w	r3, r3, #32
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d009      	beq.n	8004a80 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a6c:	4b91      	ldr	r3, [pc, #580]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	08db      	lsrs	r3, r3, #3
 8004a72:	f003 0303 	and.w	r3, r3, #3
 8004a76:	4a90      	ldr	r2, [pc, #576]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a78:	fa22 f303 	lsr.w	r3, r2, r3
 8004a7c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004a7e:	e111      	b.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004a80:	4b8d      	ldr	r3, [pc, #564]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a82:	61bb      	str	r3, [r7, #24]
    break;
 8004a84:	e10e      	b.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004a86:	4b8d      	ldr	r3, [pc, #564]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004a88:	61bb      	str	r3, [r7, #24]
    break;
 8004a8a:	e10b      	b.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004a8c:	4b8c      	ldr	r3, [pc, #560]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004a8e:	61bb      	str	r3, [r7, #24]
    break;
 8004a90:	e108      	b.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a92:	4b88      	ldr	r3, [pc, #544]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004a9c:	4b85      	ldr	r3, [pc, #532]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa0:	091b      	lsrs	r3, r3, #4
 8004aa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aa6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004aa8:	4b82      	ldr	r3, [pc, #520]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004ab2:	4b80      	ldr	r3, [pc, #512]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab6:	08db      	lsrs	r3, r3, #3
 8004ab8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	fb02 f303 	mul.w	r3, r2, r3
 8004ac2:	ee07 3a90 	vmov	s15, r3
 8004ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 80e1 	beq.w	8004c98 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	f000 8083 	beq.w	8004be4 <HAL_RCC_GetSysClockFreq+0x204>
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	f200 80a1 	bhi.w	8004c28 <HAL_RCC_GetSysClockFreq+0x248>
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <HAL_RCC_GetSysClockFreq+0x114>
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d056      	beq.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004af2:	e099      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004af4:	4b6f      	ldr	r3, [pc, #444]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0320 	and.w	r3, r3, #32
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d02d      	beq.n	8004b5c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b00:	4b6c      	ldr	r3, [pc, #432]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	08db      	lsrs	r3, r3, #3
 8004b06:	f003 0303 	and.w	r3, r3, #3
 8004b0a:	4a6b      	ldr	r2, [pc, #428]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b10:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	ee07 3a90 	vmov	s15, r3
 8004b18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	ee07 3a90 	vmov	s15, r3
 8004b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b2a:	4b62      	ldr	r3, [pc, #392]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b32:	ee07 3a90 	vmov	s15, r3
 8004b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b3e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004cc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004b5a:	e087      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	ee07 3a90 	vmov	s15, r3
 8004b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b66:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004cc8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b6e:	4b51      	ldr	r3, [pc, #324]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b76:	ee07 3a90 	vmov	s15, r3
 8004b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b82:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004cc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b9e:	e065      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	ee07 3a90 	vmov	s15, r3
 8004ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004baa:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004ccc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bb2:	4b40      	ldr	r3, [pc, #256]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bba:	ee07 3a90 	vmov	s15, r3
 8004bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bc6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004cc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004be2:	e043      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	ee07 3a90 	vmov	s15, r3
 8004bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bee:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004cd0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bf6:	4b2f      	ldr	r3, [pc, #188]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bfe:	ee07 3a90 	vmov	s15, r3
 8004c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c06:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c0a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004cc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c26:	e021      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	ee07 3a90 	vmov	s15, r3
 8004c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c32:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004ccc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c3a:	4b1e      	ldr	r3, [pc, #120]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c42:	ee07 3a90 	vmov	s15, r3
 8004c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c4e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004cc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c6a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004c6c:	4b11      	ldr	r3, [pc, #68]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c70:	0a5b      	lsrs	r3, r3, #9
 8004c72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c76:	3301      	adds	r3, #1
 8004c78:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	ee07 3a90 	vmov	s15, r3
 8004c80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c84:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c90:	ee17 3a90 	vmov	r3, s15
 8004c94:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004c96:	e005      	b.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	61bb      	str	r3, [r7, #24]
    break;
 8004c9c:	e002      	b.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004c9e:	4b07      	ldr	r3, [pc, #28]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ca0:	61bb      	str	r3, [r7, #24]
    break;
 8004ca2:	bf00      	nop
  }

  return sysclockfreq;
 8004ca4:	69bb      	ldr	r3, [r7, #24]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3724      	adds	r7, #36	; 0x24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	58024400 	.word	0x58024400
 8004cb8:	03d09000 	.word	0x03d09000
 8004cbc:	003d0900 	.word	0x003d0900
 8004cc0:	007a1200 	.word	0x007a1200
 8004cc4:	46000000 	.word	0x46000000
 8004cc8:	4c742400 	.word	0x4c742400
 8004ccc:	4a742400 	.word	0x4a742400
 8004cd0:	4af42400 	.word	0x4af42400

08004cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004cda:	f7ff fe81 	bl	80049e0 <HAL_RCC_GetSysClockFreq>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	4b10      	ldr	r3, [pc, #64]	; (8004d24 <HAL_RCC_GetHCLKFreq+0x50>)
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	0a1b      	lsrs	r3, r3, #8
 8004ce6:	f003 030f 	and.w	r3, r3, #15
 8004cea:	490f      	ldr	r1, [pc, #60]	; (8004d28 <HAL_RCC_GetHCLKFreq+0x54>)
 8004cec:	5ccb      	ldrb	r3, [r1, r3]
 8004cee:	f003 031f 	and.w	r3, r3, #31
 8004cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004cf8:	4b0a      	ldr	r3, [pc, #40]	; (8004d24 <HAL_RCC_GetHCLKFreq+0x50>)
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	f003 030f 	and.w	r3, r3, #15
 8004d00:	4a09      	ldr	r2, [pc, #36]	; (8004d28 <HAL_RCC_GetHCLKFreq+0x54>)
 8004d02:	5cd3      	ldrb	r3, [r2, r3]
 8004d04:	f003 031f 	and.w	r3, r3, #31
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d0e:	4a07      	ldr	r2, [pc, #28]	; (8004d2c <HAL_RCC_GetHCLKFreq+0x58>)
 8004d10:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d12:	4a07      	ldr	r2, [pc, #28]	; (8004d30 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004d18:	4b04      	ldr	r3, [pc, #16]	; (8004d2c <HAL_RCC_GetHCLKFreq+0x58>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3708      	adds	r7, #8
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	58024400 	.word	0x58024400
 8004d28:	0800fca8 	.word	0x0800fca8
 8004d2c:	24000004 	.word	0x24000004
 8004d30:	24000000 	.word	0x24000000

08004d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004d38:	f7ff ffcc 	bl	8004cd4 <HAL_RCC_GetHCLKFreq>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	4b06      	ldr	r3, [pc, #24]	; (8004d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	091b      	lsrs	r3, r3, #4
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	4904      	ldr	r1, [pc, #16]	; (8004d5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d4a:	5ccb      	ldrb	r3, [r1, r3]
 8004d4c:	f003 031f 	and.w	r3, r3, #31
 8004d50:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	58024400 	.word	0x58024400
 8004d5c:	0800fca8 	.word	0x0800fca8

08004d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004d64:	f7ff ffb6 	bl	8004cd4 <HAL_RCC_GetHCLKFreq>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	0a1b      	lsrs	r3, r3, #8
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	4904      	ldr	r1, [pc, #16]	; (8004d88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d76:	5ccb      	ldrb	r3, [r1, r3]
 8004d78:	f003 031f 	and.w	r3, r3, #31
 8004d7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	58024400 	.word	0x58024400
 8004d88:	0800fca8 	.word	0x0800fca8

08004d8c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d94:	2300      	movs	r3, #0
 8004d96:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d98:	2300      	movs	r3, #0
 8004d9a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d03f      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004db0:	d02a      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004db2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004db6:	d824      	bhi.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004db8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dbc:	d018      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004dbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dc2:	d81e      	bhi.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004dc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dcc:	d007      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004dce:	e018      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dd0:	4bab      	ldr	r3, [pc, #684]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	4aaa      	ldr	r2, [pc, #680]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004dd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004ddc:	e015      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	3304      	adds	r3, #4
 8004de2:	2102      	movs	r1, #2
 8004de4:	4618      	mov	r0, r3
 8004de6:	f001 f9cf 	bl	8006188 <RCCEx_PLL2_Config>
 8004dea:	4603      	mov	r3, r0
 8004dec:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004dee:	e00c      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	3324      	adds	r3, #36	; 0x24
 8004df4:	2102      	movs	r1, #2
 8004df6:	4618      	mov	r0, r3
 8004df8:	f001 fa78 	bl	80062ec <RCCEx_PLL3_Config>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004e00:	e003      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	75fb      	strb	r3, [r7, #23]
      break;
 8004e06:	e000      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004e08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e0a:	7dfb      	ldrb	r3, [r7, #23]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d109      	bne.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004e10:	4b9b      	ldr	r3, [pc, #620]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e1c:	4998      	ldr	r1, [pc, #608]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	650b      	str	r3, [r1, #80]	; 0x50
 8004e22:	e001      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e24:	7dfb      	ldrb	r3, [r7, #23]
 8004e26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d03d      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e38:	2b04      	cmp	r3, #4
 8004e3a:	d826      	bhi.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004e3c:	a201      	add	r2, pc, #4	; (adr r2, 8004e44 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e42:	bf00      	nop
 8004e44:	08004e59 	.word	0x08004e59
 8004e48:	08004e67 	.word	0x08004e67
 8004e4c:	08004e79 	.word	0x08004e79
 8004e50:	08004e91 	.word	0x08004e91
 8004e54:	08004e91 	.word	0x08004e91
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e58:	4b89      	ldr	r3, [pc, #548]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5c:	4a88      	ldr	r2, [pc, #544]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e64:	e015      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	3304      	adds	r3, #4
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f001 f98b 	bl	8006188 <RCCEx_PLL2_Config>
 8004e72:	4603      	mov	r3, r0
 8004e74:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e76:	e00c      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	3324      	adds	r3, #36	; 0x24
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f001 fa34 	bl	80062ec <RCCEx_PLL3_Config>
 8004e84:	4603      	mov	r3, r0
 8004e86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e88:	e003      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	75fb      	strb	r3, [r7, #23]
      break;
 8004e8e:	e000      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004e90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e92:	7dfb      	ldrb	r3, [r7, #23]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d109      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e98:	4b79      	ldr	r3, [pc, #484]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e9c:	f023 0207 	bic.w	r2, r3, #7
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea4:	4976      	ldr	r1, [pc, #472]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	650b      	str	r3, [r1, #80]	; 0x50
 8004eaa:	e001      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eac:	7dfb      	ldrb	r3, [r7, #23]
 8004eae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d042      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ec4:	d02b      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eca:	d825      	bhi.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004ecc:	2bc0      	cmp	r3, #192	; 0xc0
 8004ece:	d028      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004ed0:	2bc0      	cmp	r3, #192	; 0xc0
 8004ed2:	d821      	bhi.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004ed4:	2b80      	cmp	r3, #128	; 0x80
 8004ed6:	d016      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004ed8:	2b80      	cmp	r3, #128	; 0x80
 8004eda:	d81d      	bhi.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004ee0:	2b40      	cmp	r3, #64	; 0x40
 8004ee2:	d007      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004ee4:	e018      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ee6:	4b66      	ldr	r3, [pc, #408]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eea:	4a65      	ldr	r2, [pc, #404]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ef0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004ef2:	e017      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	2100      	movs	r1, #0
 8004efa:	4618      	mov	r0, r3
 8004efc:	f001 f944 	bl	8006188 <RCCEx_PLL2_Config>
 8004f00:	4603      	mov	r3, r0
 8004f02:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004f04:	e00e      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	3324      	adds	r3, #36	; 0x24
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f001 f9ed 	bl	80062ec <RCCEx_PLL3_Config>
 8004f12:	4603      	mov	r3, r0
 8004f14:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004f16:	e005      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f1c:	e002      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004f1e:	bf00      	nop
 8004f20:	e000      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004f22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f24:	7dfb      	ldrb	r3, [r7, #23]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d109      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004f2a:	4b55      	ldr	r3, [pc, #340]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f2e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f36:	4952      	ldr	r1, [pc, #328]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	650b      	str	r3, [r1, #80]	; 0x50
 8004f3c:	e001      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f3e:	7dfb      	ldrb	r3, [r7, #23]
 8004f40:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d049      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f58:	d030      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004f5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f5e:	d82a      	bhi.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004f60:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004f64:	d02c      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004f66:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004f6a:	d824      	bhi.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004f6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f70:	d018      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f76:	d81e      	bhi.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004f7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f80:	d007      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004f82:	e018      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f84:	4b3e      	ldr	r3, [pc, #248]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f88:	4a3d      	ldr	r2, [pc, #244]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f90:	e017      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	3304      	adds	r3, #4
 8004f96:	2100      	movs	r1, #0
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f001 f8f5 	bl	8006188 <RCCEx_PLL2_Config>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004fa2:	e00e      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3324      	adds	r3, #36	; 0x24
 8004fa8:	2100      	movs	r1, #0
 8004faa:	4618      	mov	r0, r3
 8004fac:	f001 f99e 	bl	80062ec <RCCEx_PLL3_Config>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004fb4:	e005      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	75fb      	strb	r3, [r7, #23]
      break;
 8004fba:	e002      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004fbc:	bf00      	nop
 8004fbe:	e000      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004fc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fc2:	7dfb      	ldrb	r3, [r7, #23]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10a      	bne.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004fc8:	4b2d      	ldr	r3, [pc, #180]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fcc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004fd6:	492a      	ldr	r1, [pc, #168]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	658b      	str	r3, [r1, #88]	; 0x58
 8004fdc:	e001      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fde:	7dfb      	ldrb	r3, [r7, #23]
 8004fe0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d04c      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ff4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ff8:	d030      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004ffa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ffe:	d82a      	bhi.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005000:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005004:	d02c      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005006:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800500a:	d824      	bhi.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800500c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005010:	d018      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005012:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005016:	d81e      	bhi.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800501c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005020:	d007      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005022:	e018      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005024:	4b16      	ldr	r3, [pc, #88]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005028:	4a15      	ldr	r2, [pc, #84]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800502a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800502e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005030:	e017      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	3304      	adds	r3, #4
 8005036:	2100      	movs	r1, #0
 8005038:	4618      	mov	r0, r3
 800503a:	f001 f8a5 	bl	8006188 <RCCEx_PLL2_Config>
 800503e:	4603      	mov	r3, r0
 8005040:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005042:	e00e      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	3324      	adds	r3, #36	; 0x24
 8005048:	2100      	movs	r1, #0
 800504a:	4618      	mov	r0, r3
 800504c:	f001 f94e 	bl	80062ec <RCCEx_PLL3_Config>
 8005050:	4603      	mov	r3, r0
 8005052:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005054:	e005      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	75fb      	strb	r3, [r7, #23]
      break;
 800505a:	e002      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800505c:	bf00      	nop
 800505e:	e000      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005060:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005062:	7dfb      	ldrb	r3, [r7, #23]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10d      	bne.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005068:	4b05      	ldr	r3, [pc, #20]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800506a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005076:	4902      	ldr	r1, [pc, #8]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005078:	4313      	orrs	r3, r2
 800507a:	658b      	str	r3, [r1, #88]	; 0x58
 800507c:	e004      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800507e:	bf00      	nop
 8005080:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005084:	7dfb      	ldrb	r3, [r7, #23]
 8005086:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d032      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005098:	2b30      	cmp	r3, #48	; 0x30
 800509a:	d01c      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800509c:	2b30      	cmp	r3, #48	; 0x30
 800509e:	d817      	bhi.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80050a0:	2b20      	cmp	r3, #32
 80050a2:	d00c      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x332>
 80050a4:	2b20      	cmp	r3, #32
 80050a6:	d813      	bhi.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d016      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80050ac:	2b10      	cmp	r3, #16
 80050ae:	d10f      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050b0:	4baf      	ldr	r3, [pc, #700]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80050b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b4:	4aae      	ldr	r2, [pc, #696]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80050b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80050bc:	e00e      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	3304      	adds	r3, #4
 80050c2:	2102      	movs	r1, #2
 80050c4:	4618      	mov	r0, r3
 80050c6:	f001 f85f 	bl	8006188 <RCCEx_PLL2_Config>
 80050ca:	4603      	mov	r3, r0
 80050cc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80050ce:	e005      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	75fb      	strb	r3, [r7, #23]
      break;
 80050d4:	e002      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80050d6:	bf00      	nop
 80050d8:	e000      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80050da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050dc:	7dfb      	ldrb	r3, [r7, #23]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d109      	bne.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80050e2:	4ba3      	ldr	r3, [pc, #652]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80050e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ee:	49a0      	ldr	r1, [pc, #640]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80050f4:	e001      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f6:	7dfb      	ldrb	r3, [r7, #23]
 80050f8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d047      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800510a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800510e:	d030      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005110:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005114:	d82a      	bhi.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005116:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800511a:	d02c      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800511c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005120:	d824      	bhi.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005126:	d018      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800512c:	d81e      	bhi.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005136:	d007      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005138:	e018      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800513a:	4b8d      	ldr	r3, [pc, #564]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800513c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513e:	4a8c      	ldr	r2, [pc, #560]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005144:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005146:	e017      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	3304      	adds	r3, #4
 800514c:	2100      	movs	r1, #0
 800514e:	4618      	mov	r0, r3
 8005150:	f001 f81a 	bl	8006188 <RCCEx_PLL2_Config>
 8005154:	4603      	mov	r3, r0
 8005156:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005158:	e00e      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	3324      	adds	r3, #36	; 0x24
 800515e:	2100      	movs	r1, #0
 8005160:	4618      	mov	r0, r3
 8005162:	f001 f8c3 	bl	80062ec <RCCEx_PLL3_Config>
 8005166:	4603      	mov	r3, r0
 8005168:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800516a:	e005      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	75fb      	strb	r3, [r7, #23]
      break;
 8005170:	e002      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005172:	bf00      	nop
 8005174:	e000      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005176:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005178:	7dfb      	ldrb	r3, [r7, #23]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d109      	bne.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800517e:	4b7c      	ldr	r3, [pc, #496]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005182:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800518a:	4979      	ldr	r1, [pc, #484]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800518c:	4313      	orrs	r3, r2
 800518e:	650b      	str	r3, [r1, #80]	; 0x50
 8005190:	e001      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005192:	7dfb      	ldrb	r3, [r7, #23]
 8005194:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d049      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051aa:	d02e      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80051ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051b0:	d828      	bhi.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80051b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051b6:	d02a      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x482>
 80051b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051bc:	d822      	bhi.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80051be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051c2:	d026      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80051c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051c8:	d81c      	bhi.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80051ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051ce:	d010      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80051d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051d4:	d816      	bhi.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d01d      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80051da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051de:	d111      	bne.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3304      	adds	r3, #4
 80051e4:	2101      	movs	r1, #1
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 ffce 	bl	8006188 <RCCEx_PLL2_Config>
 80051ec:	4603      	mov	r3, r0
 80051ee:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80051f0:	e012      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	3324      	adds	r3, #36	; 0x24
 80051f6:	2101      	movs	r1, #1
 80051f8:	4618      	mov	r0, r3
 80051fa:	f001 f877 	bl	80062ec <RCCEx_PLL3_Config>
 80051fe:	4603      	mov	r3, r0
 8005200:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005202:	e009      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	75fb      	strb	r3, [r7, #23]
      break;
 8005208:	e006      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800520a:	bf00      	nop
 800520c:	e004      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800520e:	bf00      	nop
 8005210:	e002      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005212:	bf00      	nop
 8005214:	e000      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005216:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005218:	7dfb      	ldrb	r3, [r7, #23]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d109      	bne.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800521e:	4b54      	ldr	r3, [pc, #336]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005222:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800522a:	4951      	ldr	r1, [pc, #324]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800522c:	4313      	orrs	r3, r2
 800522e:	650b      	str	r3, [r1, #80]	; 0x50
 8005230:	e001      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005232:	7dfb      	ldrb	r3, [r7, #23]
 8005234:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d04b      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005248:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800524c:	d02e      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x520>
 800524e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005252:	d828      	bhi.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005258:	d02a      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800525a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800525e:	d822      	bhi.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005260:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005264:	d026      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005266:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800526a:	d81c      	bhi.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800526c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005270:	d010      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005272:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005276:	d816      	bhi.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005278:	2b00      	cmp	r3, #0
 800527a:	d01d      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800527c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005280:	d111      	bne.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	3304      	adds	r3, #4
 8005286:	2101      	movs	r1, #1
 8005288:	4618      	mov	r0, r3
 800528a:	f000 ff7d 	bl	8006188 <RCCEx_PLL2_Config>
 800528e:	4603      	mov	r3, r0
 8005290:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005292:	e012      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3324      	adds	r3, #36	; 0x24
 8005298:	2101      	movs	r1, #1
 800529a:	4618      	mov	r0, r3
 800529c:	f001 f826 	bl	80062ec <RCCEx_PLL3_Config>
 80052a0:	4603      	mov	r3, r0
 80052a2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80052a4:	e009      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	75fb      	strb	r3, [r7, #23]
      break;
 80052aa:	e006      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80052ac:	bf00      	nop
 80052ae:	e004      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80052b0:	bf00      	nop
 80052b2:	e002      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80052b4:	bf00      	nop
 80052b6:	e000      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80052b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052ba:	7dfb      	ldrb	r3, [r7, #23]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10a      	bne.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80052c0:	4b2b      	ldr	r3, [pc, #172]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80052c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80052ce:	4928      	ldr	r1, [pc, #160]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	658b      	str	r3, [r1, #88]	; 0x58
 80052d4:	e001      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d6:	7dfb      	ldrb	r3, [r7, #23]
 80052d8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d02f      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ee:	d00e      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x582>
 80052f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052f4:	d814      	bhi.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d015      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80052fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052fe:	d10f      	bne.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005300:	4b1b      	ldr	r3, [pc, #108]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005304:	4a1a      	ldr	r2, [pc, #104]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800530a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800530c:	e00c      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	3304      	adds	r3, #4
 8005312:	2101      	movs	r1, #1
 8005314:	4618      	mov	r0, r3
 8005316:	f000 ff37 	bl	8006188 <RCCEx_PLL2_Config>
 800531a:	4603      	mov	r3, r0
 800531c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800531e:	e003      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	75fb      	strb	r3, [r7, #23]
      break;
 8005324:	e000      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005326:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005328:	7dfb      	ldrb	r3, [r7, #23]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d109      	bne.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800532e:	4b10      	ldr	r3, [pc, #64]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005332:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800533a:	490d      	ldr	r1, [pc, #52]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800533c:	4313      	orrs	r3, r2
 800533e:	650b      	str	r3, [r1, #80]	; 0x50
 8005340:	e001      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005342:	7dfb      	ldrb	r3, [r7, #23]
 8005344:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d033      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005356:	2b03      	cmp	r3, #3
 8005358:	d81c      	bhi.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800535a:	a201      	add	r2, pc, #4	; (adr r2, 8005360 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800535c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005360:	0800539b 	.word	0x0800539b
 8005364:	08005375 	.word	0x08005375
 8005368:	08005383 	.word	0x08005383
 800536c:	0800539b 	.word	0x0800539b
 8005370:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005374:	4bb8      	ldr	r3, [pc, #736]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005378:	4ab7      	ldr	r2, [pc, #732]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800537a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800537e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005380:	e00c      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	3304      	adds	r3, #4
 8005386:	2102      	movs	r1, #2
 8005388:	4618      	mov	r0, r3
 800538a:	f000 fefd 	bl	8006188 <RCCEx_PLL2_Config>
 800538e:	4603      	mov	r3, r0
 8005390:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005392:	e003      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	75fb      	strb	r3, [r7, #23]
      break;
 8005398:	e000      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800539a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800539c:	7dfb      	ldrb	r3, [r7, #23]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d109      	bne.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80053a2:	4bad      	ldr	r3, [pc, #692]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80053a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053a6:	f023 0203 	bic.w	r2, r3, #3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ae:	49aa      	ldr	r1, [pc, #680]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80053b4:	e001      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b6:	7dfb      	ldrb	r3, [r7, #23]
 80053b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 8086 	beq.w	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053c8:	4ba4      	ldr	r3, [pc, #656]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4aa3      	ldr	r2, [pc, #652]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80053ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053d4:	f7fc fd2e 	bl	8001e34 <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053da:	e009      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053dc:	f7fc fd2a 	bl	8001e34 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b64      	cmp	r3, #100	; 0x64
 80053e8:	d902      	bls.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	75fb      	strb	r3, [r7, #23]
        break;
 80053ee:	e005      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053f0:	4b9a      	ldr	r3, [pc, #616]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d0ef      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80053fc:	7dfb      	ldrb	r3, [r7, #23]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d166      	bne.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005402:	4b95      	ldr	r3, [pc, #596]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005404:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800540c:	4053      	eors	r3, r2
 800540e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005412:	2b00      	cmp	r3, #0
 8005414:	d013      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005416:	4b90      	ldr	r3, [pc, #576]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800541e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005420:	4b8d      	ldr	r3, [pc, #564]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005424:	4a8c      	ldr	r2, [pc, #560]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800542a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800542c:	4b8a      	ldr	r3, [pc, #552]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800542e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005430:	4a89      	ldr	r2, [pc, #548]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005436:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005438:	4a87      	ldr	r2, [pc, #540]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005448:	d115      	bne.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800544a:	f7fc fcf3 	bl	8001e34 <HAL_GetTick>
 800544e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005450:	e00b      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005452:	f7fc fcef 	bl	8001e34 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005460:	4293      	cmp	r3, r2
 8005462:	d902      	bls.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	75fb      	strb	r3, [r7, #23]
            break;
 8005468:	e005      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800546a:	4b7b      	ldr	r3, [pc, #492]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800546c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d0ed      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005476:	7dfb      	ldrb	r3, [r7, #23]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d126      	bne.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005486:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800548a:	d10d      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800548c:	4b72      	ldr	r3, [pc, #456]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800549a:	0919      	lsrs	r1, r3, #4
 800549c:	4b70      	ldr	r3, [pc, #448]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800549e:	400b      	ands	r3, r1
 80054a0:	496d      	ldr	r1, [pc, #436]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	610b      	str	r3, [r1, #16]
 80054a6:	e005      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80054a8:	4b6b      	ldr	r3, [pc, #428]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	4a6a      	ldr	r2, [pc, #424]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80054ae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80054b2:	6113      	str	r3, [r2, #16]
 80054b4:	4b68      	ldr	r3, [pc, #416]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80054b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054c2:	4965      	ldr	r1, [pc, #404]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	670b      	str	r3, [r1, #112]	; 0x70
 80054c8:	e004      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054ca:	7dfb      	ldrb	r3, [r7, #23]
 80054cc:	75bb      	strb	r3, [r7, #22]
 80054ce:	e001      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d0:	7dfb      	ldrb	r3, [r7, #23]
 80054d2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d07e      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054e4:	2b28      	cmp	r3, #40	; 0x28
 80054e6:	d867      	bhi.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80054e8:	a201      	add	r2, pc, #4	; (adr r2, 80054f0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80054ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ee:	bf00      	nop
 80054f0:	080055bf 	.word	0x080055bf
 80054f4:	080055b9 	.word	0x080055b9
 80054f8:	080055b9 	.word	0x080055b9
 80054fc:	080055b9 	.word	0x080055b9
 8005500:	080055b9 	.word	0x080055b9
 8005504:	080055b9 	.word	0x080055b9
 8005508:	080055b9 	.word	0x080055b9
 800550c:	080055b9 	.word	0x080055b9
 8005510:	08005595 	.word	0x08005595
 8005514:	080055b9 	.word	0x080055b9
 8005518:	080055b9 	.word	0x080055b9
 800551c:	080055b9 	.word	0x080055b9
 8005520:	080055b9 	.word	0x080055b9
 8005524:	080055b9 	.word	0x080055b9
 8005528:	080055b9 	.word	0x080055b9
 800552c:	080055b9 	.word	0x080055b9
 8005530:	080055a7 	.word	0x080055a7
 8005534:	080055b9 	.word	0x080055b9
 8005538:	080055b9 	.word	0x080055b9
 800553c:	080055b9 	.word	0x080055b9
 8005540:	080055b9 	.word	0x080055b9
 8005544:	080055b9 	.word	0x080055b9
 8005548:	080055b9 	.word	0x080055b9
 800554c:	080055b9 	.word	0x080055b9
 8005550:	080055bf 	.word	0x080055bf
 8005554:	080055b9 	.word	0x080055b9
 8005558:	080055b9 	.word	0x080055b9
 800555c:	080055b9 	.word	0x080055b9
 8005560:	080055b9 	.word	0x080055b9
 8005564:	080055b9 	.word	0x080055b9
 8005568:	080055b9 	.word	0x080055b9
 800556c:	080055b9 	.word	0x080055b9
 8005570:	080055bf 	.word	0x080055bf
 8005574:	080055b9 	.word	0x080055b9
 8005578:	080055b9 	.word	0x080055b9
 800557c:	080055b9 	.word	0x080055b9
 8005580:	080055b9 	.word	0x080055b9
 8005584:	080055b9 	.word	0x080055b9
 8005588:	080055b9 	.word	0x080055b9
 800558c:	080055b9 	.word	0x080055b9
 8005590:	080055bf 	.word	0x080055bf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	3304      	adds	r3, #4
 8005598:	2101      	movs	r1, #1
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fdf4 	bl	8006188 <RCCEx_PLL2_Config>
 80055a0:	4603      	mov	r3, r0
 80055a2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80055a4:	e00c      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	3324      	adds	r3, #36	; 0x24
 80055aa:	2101      	movs	r1, #1
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 fe9d 	bl	80062ec <RCCEx_PLL3_Config>
 80055b2:	4603      	mov	r3, r0
 80055b4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80055b6:	e003      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	75fb      	strb	r3, [r7, #23]
      break;
 80055bc:	e000      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80055be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055c0:	7dfb      	ldrb	r3, [r7, #23]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d109      	bne.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80055c6:	4b24      	ldr	r3, [pc, #144]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80055c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ca:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055d2:	4921      	ldr	r1, [pc, #132]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	654b      	str	r3, [r1, #84]	; 0x54
 80055d8:	e001      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055da:	7dfb      	ldrb	r3, [r7, #23]
 80055dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d03e      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ee:	2b05      	cmp	r3, #5
 80055f0:	d820      	bhi.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80055f2:	a201      	add	r2, pc, #4	; (adr r2, 80055f8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80055f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f8:	0800563b 	.word	0x0800563b
 80055fc:	08005611 	.word	0x08005611
 8005600:	08005623 	.word	0x08005623
 8005604:	0800563b 	.word	0x0800563b
 8005608:	0800563b 	.word	0x0800563b
 800560c:	0800563b 	.word	0x0800563b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	3304      	adds	r3, #4
 8005614:	2101      	movs	r1, #1
 8005616:	4618      	mov	r0, r3
 8005618:	f000 fdb6 	bl	8006188 <RCCEx_PLL2_Config>
 800561c:	4603      	mov	r3, r0
 800561e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005620:	e00c      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	3324      	adds	r3, #36	; 0x24
 8005626:	2101      	movs	r1, #1
 8005628:	4618      	mov	r0, r3
 800562a:	f000 fe5f 	bl	80062ec <RCCEx_PLL3_Config>
 800562e:	4603      	mov	r3, r0
 8005630:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005632:	e003      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	75fb      	strb	r3, [r7, #23]
      break;
 8005638:	e000      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800563a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800563c:	7dfb      	ldrb	r3, [r7, #23]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d110      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005642:	4b05      	ldr	r3, [pc, #20]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005646:	f023 0207 	bic.w	r2, r3, #7
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800564e:	4902      	ldr	r1, [pc, #8]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005650:	4313      	orrs	r3, r2
 8005652:	654b      	str	r3, [r1, #84]	; 0x54
 8005654:	e008      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8005656:	bf00      	nop
 8005658:	58024400 	.word	0x58024400
 800565c:	58024800 	.word	0x58024800
 8005660:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005664:	7dfb      	ldrb	r3, [r7, #23]
 8005666:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0304 	and.w	r3, r3, #4
 8005670:	2b00      	cmp	r3, #0
 8005672:	d039      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800567a:	2b05      	cmp	r3, #5
 800567c:	d820      	bhi.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800567e:	a201      	add	r2, pc, #4	; (adr r2, 8005684 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8005680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005684:	080056c7 	.word	0x080056c7
 8005688:	0800569d 	.word	0x0800569d
 800568c:	080056af 	.word	0x080056af
 8005690:	080056c7 	.word	0x080056c7
 8005694:	080056c7 	.word	0x080056c7
 8005698:	080056c7 	.word	0x080056c7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3304      	adds	r3, #4
 80056a0:	2101      	movs	r1, #1
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 fd70 	bl	8006188 <RCCEx_PLL2_Config>
 80056a8:	4603      	mov	r3, r0
 80056aa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80056ac:	e00c      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	3324      	adds	r3, #36	; 0x24
 80056b2:	2101      	movs	r1, #1
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 fe19 	bl	80062ec <RCCEx_PLL3_Config>
 80056ba:	4603      	mov	r3, r0
 80056bc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80056be:	e003      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	75fb      	strb	r3, [r7, #23]
      break;
 80056c4:	e000      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80056c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056c8:	7dfb      	ldrb	r3, [r7, #23]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10a      	bne.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056ce:	4bb7      	ldr	r3, [pc, #732]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80056d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d2:	f023 0207 	bic.w	r2, r3, #7
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056dc:	49b3      	ldr	r1, [pc, #716]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	658b      	str	r3, [r1, #88]	; 0x58
 80056e2:	e001      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e4:	7dfb      	ldrb	r3, [r7, #23]
 80056e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0320 	and.w	r3, r3, #32
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d04b      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056fe:	d02e      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8005700:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005704:	d828      	bhi.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800570a:	d02a      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800570c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005710:	d822      	bhi.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005712:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005716:	d026      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005718:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800571c:	d81c      	bhi.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800571e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005722:	d010      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8005724:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005728:	d816      	bhi.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800572a:	2b00      	cmp	r3, #0
 800572c:	d01d      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800572e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005732:	d111      	bne.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3304      	adds	r3, #4
 8005738:	2100      	movs	r1, #0
 800573a:	4618      	mov	r0, r3
 800573c:	f000 fd24 	bl	8006188 <RCCEx_PLL2_Config>
 8005740:	4603      	mov	r3, r0
 8005742:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005744:	e012      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	3324      	adds	r3, #36	; 0x24
 800574a:	2102      	movs	r1, #2
 800574c:	4618      	mov	r0, r3
 800574e:	f000 fdcd 	bl	80062ec <RCCEx_PLL3_Config>
 8005752:	4603      	mov	r3, r0
 8005754:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005756:	e009      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	75fb      	strb	r3, [r7, #23]
      break;
 800575c:	e006      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800575e:	bf00      	nop
 8005760:	e004      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005762:	bf00      	nop
 8005764:	e002      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005766:	bf00      	nop
 8005768:	e000      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800576a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800576c:	7dfb      	ldrb	r3, [r7, #23]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10a      	bne.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005772:	4b8e      	ldr	r3, [pc, #568]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005776:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005780:	498a      	ldr	r1, [pc, #552]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005782:	4313      	orrs	r3, r2
 8005784:	654b      	str	r3, [r1, #84]	; 0x54
 8005786:	e001      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005788:	7dfb      	ldrb	r3, [r7, #23]
 800578a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005794:	2b00      	cmp	r3, #0
 8005796:	d04b      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800579e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80057a2:	d02e      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80057a4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80057a8:	d828      	bhi.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80057aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ae:	d02a      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80057b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b4:	d822      	bhi.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80057b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057ba:	d026      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80057bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057c0:	d81c      	bhi.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80057c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057c6:	d010      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80057c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057cc:	d816      	bhi.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d01d      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80057d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057d6:	d111      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	3304      	adds	r3, #4
 80057dc:	2100      	movs	r1, #0
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 fcd2 	bl	8006188 <RCCEx_PLL2_Config>
 80057e4:	4603      	mov	r3, r0
 80057e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80057e8:	e012      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3324      	adds	r3, #36	; 0x24
 80057ee:	2102      	movs	r1, #2
 80057f0:	4618      	mov	r0, r3
 80057f2:	f000 fd7b 	bl	80062ec <RCCEx_PLL3_Config>
 80057f6:	4603      	mov	r3, r0
 80057f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80057fa:	e009      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005800:	e006      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005802:	bf00      	nop
 8005804:	e004      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005806:	bf00      	nop
 8005808:	e002      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800580a:	bf00      	nop
 800580c:	e000      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800580e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005810:	7dfb      	ldrb	r3, [r7, #23]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10a      	bne.n	800582c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005816:	4b65      	ldr	r3, [pc, #404]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800581a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005824:	4961      	ldr	r1, [pc, #388]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005826:	4313      	orrs	r3, r2
 8005828:	658b      	str	r3, [r1, #88]	; 0x58
 800582a:	e001      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800582c:	7dfb      	ldrb	r3, [r7, #23]
 800582e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005838:	2b00      	cmp	r3, #0
 800583a:	d04b      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005842:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005846:	d02e      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8005848:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800584c:	d828      	bhi.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800584e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005852:	d02a      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8005854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005858:	d822      	bhi.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800585a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800585e:	d026      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005860:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005864:	d81c      	bhi.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005866:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800586a:	d010      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800586c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005870:	d816      	bhi.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005872:	2b00      	cmp	r3, #0
 8005874:	d01d      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800587a:	d111      	bne.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3304      	adds	r3, #4
 8005880:	2100      	movs	r1, #0
 8005882:	4618      	mov	r0, r3
 8005884:	f000 fc80 	bl	8006188 <RCCEx_PLL2_Config>
 8005888:	4603      	mov	r3, r0
 800588a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800588c:	e012      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	3324      	adds	r3, #36	; 0x24
 8005892:	2102      	movs	r1, #2
 8005894:	4618      	mov	r0, r3
 8005896:	f000 fd29 	bl	80062ec <RCCEx_PLL3_Config>
 800589a:	4603      	mov	r3, r0
 800589c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800589e:	e009      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	75fb      	strb	r3, [r7, #23]
      break;
 80058a4:	e006      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80058a6:	bf00      	nop
 80058a8:	e004      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80058aa:	bf00      	nop
 80058ac:	e002      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80058ae:	bf00      	nop
 80058b0:	e000      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80058b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058b4:	7dfb      	ldrb	r3, [r7, #23]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10a      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80058ba:	4b3c      	ldr	r3, [pc, #240]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80058bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058c8:	4938      	ldr	r1, [pc, #224]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	658b      	str	r3, [r1, #88]	; 0x58
 80058ce:	e001      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d0:	7dfb      	ldrb	r3, [r7, #23]
 80058d2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0308 	and.w	r3, r3, #8
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d01a      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ea:	d10a      	bne.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	3324      	adds	r3, #36	; 0x24
 80058f0:	2102      	movs	r1, #2
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 fcfa 	bl	80062ec <RCCEx_PLL3_Config>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005902:	4b2a      	ldr	r3, [pc, #168]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005906:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005910:	4926      	ldr	r1, [pc, #152]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005912:	4313      	orrs	r3, r2
 8005914:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0310 	and.w	r3, r3, #16
 800591e:	2b00      	cmp	r3, #0
 8005920:	d01a      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800592c:	d10a      	bne.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	3324      	adds	r3, #36	; 0x24
 8005932:	2102      	movs	r1, #2
 8005934:	4618      	mov	r0, r3
 8005936:	f000 fcd9 	bl	80062ec <RCCEx_PLL3_Config>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d001      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005944:	4b19      	ldr	r3, [pc, #100]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005948:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005952:	4916      	ldr	r1, [pc, #88]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005954:	4313      	orrs	r3, r2
 8005956:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d036      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800596a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800596e:	d01f      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005970:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005974:	d817      	bhi.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800597a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800597e:	d009      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005980:	e011      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	3304      	adds	r3, #4
 8005986:	2100      	movs	r1, #0
 8005988:	4618      	mov	r0, r3
 800598a:	f000 fbfd 	bl	8006188 <RCCEx_PLL2_Config>
 800598e:	4603      	mov	r3, r0
 8005990:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005992:	e00e      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	3324      	adds	r3, #36	; 0x24
 8005998:	2102      	movs	r1, #2
 800599a:	4618      	mov	r0, r3
 800599c:	f000 fca6 	bl	80062ec <RCCEx_PLL3_Config>
 80059a0:	4603      	mov	r3, r0
 80059a2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80059a4:	e005      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	75fb      	strb	r3, [r7, #23]
      break;
 80059aa:	e002      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80059ac:	58024400 	.word	0x58024400
      break;
 80059b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059b2:	7dfb      	ldrb	r3, [r7, #23]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10a      	bne.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059b8:	4b93      	ldr	r3, [pc, #588]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80059ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80059c6:	4990      	ldr	r1, [pc, #576]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	658b      	str	r3, [r1, #88]	; 0x58
 80059cc:	e001      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ce:	7dfb      	ldrb	r3, [r7, #23]
 80059d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d033      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80059e8:	d01c      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80059ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80059ee:	d816      	bhi.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80059f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059f4:	d003      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80059f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059fa:	d007      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80059fc:	e00f      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059fe:	4b82      	ldr	r3, [pc, #520]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a02:	4a81      	ldr	r2, [pc, #516]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005a0a:	e00c      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	3324      	adds	r3, #36	; 0x24
 8005a10:	2101      	movs	r1, #1
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 fc6a 	bl	80062ec <RCCEx_PLL3_Config>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005a1c:	e003      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	75fb      	strb	r3, [r7, #23]
      break;
 8005a22:	e000      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8005a24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a26:	7dfb      	ldrb	r3, [r7, #23]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10a      	bne.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a2c:	4b76      	ldr	r3, [pc, #472]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a3a:	4973      	ldr	r1, [pc, #460]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	654b      	str	r3, [r1, #84]	; 0x54
 8005a40:	e001      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
 8005a44:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d029      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8005a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a5e:	d007      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005a60:	e00f      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a62:	4b69      	ldr	r3, [pc, #420]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a66:	4a68      	ldr	r2, [pc, #416]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005a6e:	e00b      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	3304      	adds	r3, #4
 8005a74:	2102      	movs	r1, #2
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 fb86 	bl	8006188 <RCCEx_PLL2_Config>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005a80:	e002      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	75fb      	strb	r3, [r7, #23]
      break;
 8005a86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a88:	7dfb      	ldrb	r3, [r7, #23]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d109      	bne.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005a8e:	4b5e      	ldr	r3, [pc, #376]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a9a:	495b      	ldr	r1, [pc, #364]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005aa0:	e001      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa2:	7dfb      	ldrb	r3, [r7, #23]
 8005aa4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00a      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	3324      	adds	r3, #36	; 0x24
 8005ab6:	2102      	movs	r1, #2
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 fc17 	bl	80062ec <RCCEx_PLL3_Config>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d030      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ad8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005adc:	d017      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8005ade:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ae2:	d811      	bhi.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ae8:	d013      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005aea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aee:	d80b      	bhi.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d010      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005af4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005af8:	d106      	bne.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005afa:	4b43      	ldr	r3, [pc, #268]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afe:	4a42      	ldr	r2, [pc, #264]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005b06:	e007      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b0c:	e004      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005b0e:	bf00      	nop
 8005b10:	e002      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005b12:	bf00      	nop
 8005b14:	e000      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005b16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b18:	7dfb      	ldrb	r3, [r7, #23]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d109      	bne.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b1e:	4b3a      	ldr	r3, [pc, #232]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b2a:	4937      	ldr	r1, [pc, #220]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	654b      	str	r3, [r1, #84]	; 0x54
 8005b30:	e001      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b32:	7dfb      	ldrb	r3, [r7, #23]
 8005b34:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d008      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b42:	4b31      	ldr	r3, [pc, #196]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4e:	492e      	ldr	r1, [pc, #184]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d009      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005b60:	4b29      	ldr	r3, [pc, #164]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005b6e:	4926      	ldr	r1, [pc, #152]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d008      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b80:	4b21      	ldr	r3, [pc, #132]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b84:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b8c:	491e      	ldr	r1, [pc, #120]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00d      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b9e:	4b1a      	ldr	r3, [pc, #104]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	4a19      	ldr	r2, [pc, #100]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005ba4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ba8:	6113      	str	r3, [r2, #16]
 8005baa:	4b17      	ldr	r3, [pc, #92]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005bac:	691a      	ldr	r2, [r3, #16]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005bb4:	4914      	ldr	r1, [pc, #80]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	da08      	bge.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005bc2:	4b11      	ldr	r3, [pc, #68]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bc6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bce:	490e      	ldr	r1, [pc, #56]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d009      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005be0:	4b09      	ldr	r3, [pc, #36]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bee:	4906      	ldr	r1, [pc, #24]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005bf4:	7dbb      	ldrb	r3, [r7, #22]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	e000      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3718      	adds	r7, #24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	58024400 	.word	0x58024400

08005c0c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005c10:	f7ff f860 	bl	8004cd4 <HAL_RCC_GetHCLKFreq>
 8005c14:	4602      	mov	r2, r0
 8005c16:	4b06      	ldr	r3, [pc, #24]	; (8005c30 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	091b      	lsrs	r3, r3, #4
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	4904      	ldr	r1, [pc, #16]	; (8005c34 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005c22:	5ccb      	ldrb	r3, [r1, r3]
 8005c24:	f003 031f 	and.w	r3, r3, #31
 8005c28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	58024400 	.word	0x58024400
 8005c34:	0800fca8 	.word	0x0800fca8

08005c38 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b089      	sub	sp, #36	; 0x24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c40:	4ba1      	ldr	r3, [pc, #644]	; (8005ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c44:	f003 0303 	and.w	r3, r3, #3
 8005c48:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005c4a:	4b9f      	ldr	r3, [pc, #636]	; (8005ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4e:	0b1b      	lsrs	r3, r3, #12
 8005c50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c54:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005c56:	4b9c      	ldr	r3, [pc, #624]	; (8005ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5a:	091b      	lsrs	r3, r3, #4
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005c62:	4b99      	ldr	r3, [pc, #612]	; (8005ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c66:	08db      	lsrs	r3, r3, #3
 8005c68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	fb02 f303 	mul.w	r3, r2, r3
 8005c72:	ee07 3a90 	vmov	s15, r3
 8005c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 8111 	beq.w	8005ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	f000 8083 	beq.w	8005d94 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	f200 80a1 	bhi.w	8005dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d003      	beq.n	8005ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d056      	beq.n	8005d50 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005ca2:	e099      	b.n	8005dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ca4:	4b88      	ldr	r3, [pc, #544]	; (8005ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0320 	and.w	r3, r3, #32
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d02d      	beq.n	8005d0c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005cb0:	4b85      	ldr	r3, [pc, #532]	; (8005ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	08db      	lsrs	r3, r3, #3
 8005cb6:	f003 0303 	and.w	r3, r3, #3
 8005cba:	4a84      	ldr	r2, [pc, #528]	; (8005ecc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	ee07 3a90 	vmov	s15, r3
 8005cc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	ee07 3a90 	vmov	s15, r3
 8005cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cda:	4b7b      	ldr	r3, [pc, #492]	; (8005ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ce2:	ee07 3a90 	vmov	s15, r3
 8005ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cea:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cee:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d06:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005d0a:	e087      	b.n	8005e1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	ee07 3a90 	vmov	s15, r3
 8005d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d16:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d1e:	4b6a      	ldr	r3, [pc, #424]	; (8005ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d26:	ee07 3a90 	vmov	s15, r3
 8005d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d32:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d4e:	e065      	b.n	8005e1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	ee07 3a90 	vmov	s15, r3
 8005d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d5a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d62:	4b59      	ldr	r3, [pc, #356]	; (8005ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d6a:	ee07 3a90 	vmov	s15, r3
 8005d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d72:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d76:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d92:	e043      	b.n	8005e1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	ee07 3a90 	vmov	s15, r3
 8005d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d9e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005edc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005da6:	4b48      	ldr	r3, [pc, #288]	; (8005ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dae:	ee07 3a90 	vmov	s15, r3
 8005db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005db6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dba:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dd6:	e021      	b.n	8005e1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	ee07 3a90 	vmov	s15, r3
 8005dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dea:	4b37      	ldr	r3, [pc, #220]	; (8005ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005df2:	ee07 3a90 	vmov	s15, r3
 8005df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dfe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e1a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005e1c:	4b2a      	ldr	r3, [pc, #168]	; (8005ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e20:	0a5b      	lsrs	r3, r3, #9
 8005e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e26:	ee07 3a90 	vmov	s15, r3
 8005e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e36:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e42:	ee17 2a90 	vmov	r2, s15
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005e4a:	4b1f      	ldr	r3, [pc, #124]	; (8005ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4e:	0c1b      	lsrs	r3, r3, #16
 8005e50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e54:	ee07 3a90 	vmov	s15, r3
 8005e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e64:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e70:	ee17 2a90 	vmov	r2, s15
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005e78:	4b13      	ldr	r3, [pc, #76]	; (8005ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7c:	0e1b      	lsrs	r3, r3, #24
 8005e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e82:	ee07 3a90 	vmov	s15, r3
 8005e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e92:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e9e:	ee17 2a90 	vmov	r2, s15
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005ea6:	e008      	b.n	8005eba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	609a      	str	r2, [r3, #8]
}
 8005eba:	bf00      	nop
 8005ebc:	3724      	adds	r7, #36	; 0x24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	58024400 	.word	0x58024400
 8005ecc:	03d09000 	.word	0x03d09000
 8005ed0:	46000000 	.word	0x46000000
 8005ed4:	4c742400 	.word	0x4c742400
 8005ed8:	4a742400 	.word	0x4a742400
 8005edc:	4af42400 	.word	0x4af42400

08005ee0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b089      	sub	sp, #36	; 0x24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ee8:	4ba1      	ldr	r3, [pc, #644]	; (8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eec:	f003 0303 	and.w	r3, r3, #3
 8005ef0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005ef2:	4b9f      	ldr	r3, [pc, #636]	; (8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef6:	0d1b      	lsrs	r3, r3, #20
 8005ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005efc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005efe:	4b9c      	ldr	r3, [pc, #624]	; (8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f02:	0a1b      	lsrs	r3, r3, #8
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005f0a:	4b99      	ldr	r3, [pc, #612]	; (8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f0e:	08db      	lsrs	r3, r3, #3
 8005f10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	fb02 f303 	mul.w	r3, r2, r3
 8005f1a:	ee07 3a90 	vmov	s15, r3
 8005f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f000 8111 	beq.w	8006150 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	f000 8083 	beq.w	800603c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	f200 80a1 	bhi.w	8006080 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d003      	beq.n	8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d056      	beq.n	8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005f4a:	e099      	b.n	8006080 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f4c:	4b88      	ldr	r3, [pc, #544]	; (8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0320 	and.w	r3, r3, #32
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d02d      	beq.n	8005fb4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f58:	4b85      	ldr	r3, [pc, #532]	; (8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	08db      	lsrs	r3, r3, #3
 8005f5e:	f003 0303 	and.w	r3, r3, #3
 8005f62:	4a84      	ldr	r2, [pc, #528]	; (8006174 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005f64:	fa22 f303 	lsr.w	r3, r2, r3
 8005f68:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	ee07 3a90 	vmov	s15, r3
 8005f70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	ee07 3a90 	vmov	s15, r3
 8005f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f82:	4b7b      	ldr	r3, [pc, #492]	; (8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f8a:	ee07 3a90 	vmov	s15, r3
 8005f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f92:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f96:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006178 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005fb2:	e087      	b.n	80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	ee07 3a90 	vmov	s15, r3
 8005fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fbe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800617c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fc6:	4b6a      	ldr	r3, [pc, #424]	; (8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fce:	ee07 3a90 	vmov	s15, r3
 8005fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fda:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006178 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ff2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ff6:	e065      	b.n	80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	ee07 3a90 	vmov	s15, r3
 8005ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006002:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800600a:	4b59      	ldr	r3, [pc, #356]	; (8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800600c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006012:	ee07 3a90 	vmov	s15, r3
 8006016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800601a:	ed97 6a03 	vldr	s12, [r7, #12]
 800601e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006178 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800602a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800602e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006036:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800603a:	e043      	b.n	80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	ee07 3a90 	vmov	s15, r3
 8006042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006046:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006184 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800604a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800604e:	4b48      	ldr	r3, [pc, #288]	; (8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006056:	ee07 3a90 	vmov	s15, r3
 800605a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800605e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006062:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006178 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800606a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800606e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800607a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800607e:	e021      	b.n	80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	ee07 3a90 	vmov	s15, r3
 8006086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800608a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800608e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006092:	4b37      	ldr	r3, [pc, #220]	; (8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800609a:	ee07 3a90 	vmov	s15, r3
 800609e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80060a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006178 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80060c4:	4b2a      	ldr	r3, [pc, #168]	; (8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c8:	0a5b      	lsrs	r3, r3, #9
 80060ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ce:	ee07 3a90 	vmov	s15, r3
 80060d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060de:	edd7 6a07 	vldr	s13, [r7, #28]
 80060e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060ea:	ee17 2a90 	vmov	r2, s15
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80060f2:	4b1f      	ldr	r3, [pc, #124]	; (8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f6:	0c1b      	lsrs	r3, r3, #16
 80060f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060fc:	ee07 3a90 	vmov	s15, r3
 8006100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006104:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006108:	ee37 7a87 	vadd.f32	s14, s15, s14
 800610c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006118:	ee17 2a90 	vmov	r2, s15
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006120:	4b13      	ldr	r3, [pc, #76]	; (8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006124:	0e1b      	lsrs	r3, r3, #24
 8006126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800612a:	ee07 3a90 	vmov	s15, r3
 800612e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006132:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006136:	ee37 7a87 	vadd.f32	s14, s15, s14
 800613a:	edd7 6a07 	vldr	s13, [r7, #28]
 800613e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006142:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006146:	ee17 2a90 	vmov	r2, s15
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800614e:	e008      	b.n	8006162 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	609a      	str	r2, [r3, #8]
}
 8006162:	bf00      	nop
 8006164:	3724      	adds	r7, #36	; 0x24
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	58024400 	.word	0x58024400
 8006174:	03d09000 	.word	0x03d09000
 8006178:	46000000 	.word	0x46000000
 800617c:	4c742400 	.word	0x4c742400
 8006180:	4a742400 	.word	0x4a742400
 8006184:	4af42400 	.word	0x4af42400

08006188 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006196:	4b53      	ldr	r3, [pc, #332]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 8006198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619a:	f003 0303 	and.w	r3, r3, #3
 800619e:	2b03      	cmp	r3, #3
 80061a0:	d101      	bne.n	80061a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e099      	b.n	80062da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80061a6:	4b4f      	ldr	r3, [pc, #316]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a4e      	ldr	r2, [pc, #312]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 80061ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80061b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061b2:	f7fb fe3f 	bl	8001e34 <HAL_GetTick>
 80061b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061b8:	e008      	b.n	80061cc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80061ba:	f7fb fe3b 	bl	8001e34 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d901      	bls.n	80061cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e086      	b.n	80062da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061cc:	4b45      	ldr	r3, [pc, #276]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1f0      	bne.n	80061ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80061d8:	4b42      	ldr	r3, [pc, #264]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 80061da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	031b      	lsls	r3, r3, #12
 80061e6:	493f      	ldr	r1, [pc, #252]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	628b      	str	r3, [r1, #40]	; 0x28
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	3b01      	subs	r3, #1
 80061f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	3b01      	subs	r3, #1
 80061fc:	025b      	lsls	r3, r3, #9
 80061fe:	b29b      	uxth	r3, r3
 8006200:	431a      	orrs	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	3b01      	subs	r3, #1
 8006208:	041b      	lsls	r3, r3, #16
 800620a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800620e:	431a      	orrs	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	3b01      	subs	r3, #1
 8006216:	061b      	lsls	r3, r3, #24
 8006218:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800621c:	4931      	ldr	r1, [pc, #196]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 800621e:	4313      	orrs	r3, r2
 8006220:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006222:	4b30      	ldr	r3, [pc, #192]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 8006224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006226:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	492d      	ldr	r1, [pc, #180]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 8006230:	4313      	orrs	r3, r2
 8006232:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006234:	4b2b      	ldr	r3, [pc, #172]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 8006236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006238:	f023 0220 	bic.w	r2, r3, #32
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	4928      	ldr	r1, [pc, #160]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 8006242:	4313      	orrs	r3, r2
 8006244:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006246:	4b27      	ldr	r3, [pc, #156]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 8006248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624a:	4a26      	ldr	r2, [pc, #152]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 800624c:	f023 0310 	bic.w	r3, r3, #16
 8006250:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006252:	4b24      	ldr	r3, [pc, #144]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 8006254:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006256:	4b24      	ldr	r3, [pc, #144]	; (80062e8 <RCCEx_PLL2_Config+0x160>)
 8006258:	4013      	ands	r3, r2
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	69d2      	ldr	r2, [r2, #28]
 800625e:	00d2      	lsls	r2, r2, #3
 8006260:	4920      	ldr	r1, [pc, #128]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 8006262:	4313      	orrs	r3, r2
 8006264:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006266:	4b1f      	ldr	r3, [pc, #124]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 8006268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626a:	4a1e      	ldr	r2, [pc, #120]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 800626c:	f043 0310 	orr.w	r3, r3, #16
 8006270:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d106      	bne.n	8006286 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006278:	4b1a      	ldr	r3, [pc, #104]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 800627a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627c:	4a19      	ldr	r2, [pc, #100]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 800627e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006282:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006284:	e00f      	b.n	80062a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d106      	bne.n	800629a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800628c:	4b15      	ldr	r3, [pc, #84]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 800628e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006290:	4a14      	ldr	r2, [pc, #80]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 8006292:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006296:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006298:	e005      	b.n	80062a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800629a:	4b12      	ldr	r3, [pc, #72]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 800629c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629e:	4a11      	ldr	r2, [pc, #68]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 80062a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80062a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80062a6:	4b0f      	ldr	r3, [pc, #60]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a0e      	ldr	r2, [pc, #56]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 80062ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062b2:	f7fb fdbf 	bl	8001e34 <HAL_GetTick>
 80062b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80062b8:	e008      	b.n	80062cc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80062ba:	f7fb fdbb 	bl	8001e34 <HAL_GetTick>
 80062be:	4602      	mov	r2, r0
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d901      	bls.n	80062cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e006      	b.n	80062da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80062cc:	4b05      	ldr	r3, [pc, #20]	; (80062e4 <RCCEx_PLL2_Config+0x15c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d0f0      	beq.n	80062ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	58024400 	.word	0x58024400
 80062e8:	ffff0007 	.word	0xffff0007

080062ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80062fa:	4b53      	ldr	r3, [pc, #332]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 80062fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fe:	f003 0303 	and.w	r3, r3, #3
 8006302:	2b03      	cmp	r3, #3
 8006304:	d101      	bne.n	800630a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e099      	b.n	800643e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800630a:	4b4f      	ldr	r3, [pc, #316]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a4e      	ldr	r2, [pc, #312]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 8006310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006314:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006316:	f7fb fd8d 	bl	8001e34 <HAL_GetTick>
 800631a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800631c:	e008      	b.n	8006330 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800631e:	f7fb fd89 	bl	8001e34 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	2b02      	cmp	r3, #2
 800632a:	d901      	bls.n	8006330 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e086      	b.n	800643e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006330:	4b45      	ldr	r3, [pc, #276]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1f0      	bne.n	800631e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800633c:	4b42      	ldr	r3, [pc, #264]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 800633e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006340:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	051b      	lsls	r3, r3, #20
 800634a:	493f      	ldr	r1, [pc, #252]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 800634c:	4313      	orrs	r3, r2
 800634e:	628b      	str	r3, [r1, #40]	; 0x28
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	3b01      	subs	r3, #1
 8006356:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	3b01      	subs	r3, #1
 8006360:	025b      	lsls	r3, r3, #9
 8006362:	b29b      	uxth	r3, r3
 8006364:	431a      	orrs	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	3b01      	subs	r3, #1
 800636c:	041b      	lsls	r3, r3, #16
 800636e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006372:	431a      	orrs	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	3b01      	subs	r3, #1
 800637a:	061b      	lsls	r3, r3, #24
 800637c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006380:	4931      	ldr	r1, [pc, #196]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 8006382:	4313      	orrs	r3, r2
 8006384:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006386:	4b30      	ldr	r3, [pc, #192]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 8006388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	492d      	ldr	r1, [pc, #180]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 8006394:	4313      	orrs	r3, r2
 8006396:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006398:	4b2b      	ldr	r3, [pc, #172]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 800639a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	4928      	ldr	r1, [pc, #160]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80063aa:	4b27      	ldr	r3, [pc, #156]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 80063ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ae:	4a26      	ldr	r2, [pc, #152]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 80063b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80063b6:	4b24      	ldr	r3, [pc, #144]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 80063b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063ba:	4b24      	ldr	r3, [pc, #144]	; (800644c <RCCEx_PLL3_Config+0x160>)
 80063bc:	4013      	ands	r3, r2
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	69d2      	ldr	r2, [r2, #28]
 80063c2:	00d2      	lsls	r2, r2, #3
 80063c4:	4920      	ldr	r1, [pc, #128]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80063ca:	4b1f      	ldr	r3, [pc, #124]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 80063cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ce:	4a1e      	ldr	r2, [pc, #120]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 80063d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d106      	bne.n	80063ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80063dc:	4b1a      	ldr	r3, [pc, #104]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 80063de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e0:	4a19      	ldr	r2, [pc, #100]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 80063e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80063e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80063e8:	e00f      	b.n	800640a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d106      	bne.n	80063fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80063f0:	4b15      	ldr	r3, [pc, #84]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 80063f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f4:	4a14      	ldr	r2, [pc, #80]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 80063f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80063fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80063fc:	e005      	b.n	800640a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80063fe:	4b12      	ldr	r3, [pc, #72]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 8006400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006402:	4a11      	ldr	r2, [pc, #68]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 8006404:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006408:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800640a:	4b0f      	ldr	r3, [pc, #60]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a0e      	ldr	r2, [pc, #56]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 8006410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006414:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006416:	f7fb fd0d 	bl	8001e34 <HAL_GetTick>
 800641a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800641c:	e008      	b.n	8006430 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800641e:	f7fb fd09 	bl	8001e34 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	2b02      	cmp	r3, #2
 800642a:	d901      	bls.n	8006430 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e006      	b.n	800643e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006430:	4b05      	ldr	r3, [pc, #20]	; (8006448 <RCCEx_PLL3_Config+0x15c>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d0f0      	beq.n	800641e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800643c:	7bfb      	ldrb	r3, [r7, #15]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	58024400 	.word	0x58024400
 800644c:	ffff0007 	.word	0xffff0007

08006450 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8006458:	2300      	movs	r3, #0
 800645a:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e0eb      	b.n	800663e <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a75      	ldr	r2, [pc, #468]	; (8006648 <HAL_SPI_Init+0x1f8>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d00f      	beq.n	8006496 <HAL_SPI_Init+0x46>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a74      	ldr	r2, [pc, #464]	; (800664c <HAL_SPI_Init+0x1fc>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d00a      	beq.n	8006496 <HAL_SPI_Init+0x46>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a72      	ldr	r2, [pc, #456]	; (8006650 <HAL_SPI_Init+0x200>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d005      	beq.n	8006496 <HAL_SPI_Init+0x46>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	2b0f      	cmp	r3, #15
 8006490:	d901      	bls.n	8006496 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e0d3      	b.n	800663e <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fb9e 	bl	8006bd8 <SPI_GetPacketSize>
 800649c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a69      	ldr	r2, [pc, #420]	; (8006648 <HAL_SPI_Init+0x1f8>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00c      	beq.n	80064c2 <HAL_SPI_Init+0x72>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a67      	ldr	r2, [pc, #412]	; (800664c <HAL_SPI_Init+0x1fc>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d007      	beq.n	80064c2 <HAL_SPI_Init+0x72>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a66      	ldr	r2, [pc, #408]	; (8006650 <HAL_SPI_Init+0x200>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d002      	beq.n	80064c2 <HAL_SPI_Init+0x72>
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	2b08      	cmp	r3, #8
 80064c0:	d811      	bhi.n	80064e6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80064c6:	4a60      	ldr	r2, [pc, #384]	; (8006648 <HAL_SPI_Init+0x1f8>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d009      	beq.n	80064e0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a5e      	ldr	r2, [pc, #376]	; (800664c <HAL_SPI_Init+0x1fc>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d004      	beq.n	80064e0 <HAL_SPI_Init+0x90>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a5d      	ldr	r2, [pc, #372]	; (8006650 <HAL_SPI_Init+0x200>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d104      	bne.n	80064ea <HAL_SPI_Init+0x9a>
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	2b10      	cmp	r3, #16
 80064e4:	d901      	bls.n	80064ea <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e0a9      	b.n	800663e <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d106      	bne.n	8006504 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7fb f8a0 	bl	8001644 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2202      	movs	r2, #2
 8006508:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f022 0201 	bic.w	r2, r2, #1
 800651a:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006524:	d119      	bne.n	800655a <HAL_SPI_Init+0x10a>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800652e:	d103      	bne.n	8006538 <HAL_SPI_Init+0xe8>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006534:	2b00      	cmp	r3, #0
 8006536:	d008      	beq.n	800654a <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10c      	bne.n	800655a <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006544:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006548:	d107      	bne.n	800655a <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006558:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	69da      	ldr	r2, [r3, #28]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006562:	431a      	orrs	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	431a      	orrs	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800656c:	ea42 0103 	orr.w	r1, r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68da      	ldr	r2, [r3, #12]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006584:	431a      	orrs	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658a:	431a      	orrs	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	431a      	orrs	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	431a      	orrs	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	431a      	orrs	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	431a      	orrs	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	431a      	orrs	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065ae:	431a      	orrs	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	431a      	orrs	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065ba:	ea42 0103 	orr.w	r1, r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d113      	bne.n	80065fa <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065e4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065f8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f022 0201 	bic.w	r2, r2, #1
 8006608:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00a      	beq.n	800662c <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	430a      	orrs	r2, r1
 800662a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	40013000 	.word	0x40013000
 800664c:	40003800 	.word	0x40003800
 8006650:	40003c00 	.word	0x40003c00

08006654 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b08a      	sub	sp, #40	; 0x28
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800666c:	6a3a      	ldr	r2, [r7, #32]
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	4013      	ands	r3, r2
 8006672:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800667c:	2300      	movs	r3, #0
 800667e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006686:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	3330      	adds	r3, #48	; 0x30
 800668e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006696:	2b00      	cmp	r3, #0
 8006698:	d113      	bne.n	80066c2 <HAL_SPI_IRQHandler+0x6e>
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	f003 0320 	and.w	r3, r3, #32
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10e      	bne.n	80066c2 <HAL_SPI_IRQHandler+0x6e>
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	f003 0304 	and.w	r3, r3, #4
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d009      	beq.n	80066c2 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	4798      	blx	r3
    hspi->RxISR(hspi);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	4798      	blx	r3
    handled = 1UL;
 80066be:	2301      	movs	r3, #1
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10f      	bne.n	80066ec <HAL_SPI_IRQHandler+0x98>
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	f003 0301 	and.w	r3, r3, #1
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00a      	beq.n	80066ec <HAL_SPI_IRQHandler+0x98>
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	f003 0304 	and.w	r3, r3, #4
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d105      	bne.n	80066ec <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	4798      	blx	r3
    handled = 1UL;
 80066e8:	2301      	movs	r3, #1
 80066ea:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	f003 0320 	and.w	r3, r3, #32
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10f      	bne.n	8006716 <HAL_SPI_IRQHandler+0xc2>
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	f003 0302 	and.w	r3, r3, #2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00a      	beq.n	8006716 <HAL_SPI_IRQHandler+0xc2>
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	f003 0304 	and.w	r3, r3, #4
 8006706:	2b00      	cmp	r3, #0
 8006708:	d105      	bne.n	8006716 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	4798      	blx	r3
    handled = 1UL;
 8006712:	2301      	movs	r3, #1
 8006714:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8006716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006718:	2b00      	cmp	r3, #0
 800671a:	f040 816f 	bne.w	80069fc <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	f003 0308 	and.w	r3, r3, #8
 8006724:	2b00      	cmp	r3, #0
 8006726:	f000 80a0 	beq.w	800686a <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	699a      	ldr	r2, [r3, #24]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f042 0208 	orr.w	r2, r2, #8
 8006738:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	699a      	ldr	r2, [r3, #24]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f042 0210 	orr.w	r2, r2, #16
 8006748:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	699a      	ldr	r2, [r3, #24]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006758:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	691a      	ldr	r2, [r3, #16]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f022 0208 	bic.w	r2, r2, #8
 8006768:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00f      	beq.n	8006794 <HAL_SPI_IRQHandler+0x140>
 8006774:	7cfb      	ldrb	r3, [r7, #19]
 8006776:	2b04      	cmp	r3, #4
 8006778:	d004      	beq.n	8006784 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d007      	beq.n	8006794 <HAL_SPI_IRQHandler+0x140>
 8006784:	7cfb      	ldrb	r3, [r7, #19]
 8006786:	2b03      	cmp	r3, #3
 8006788:	d059      	beq.n	800683e <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800678e:	69db      	ldr	r3, [r3, #28]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d154      	bne.n	800683e <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d13d      	bne.n	800681e <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 80067a2:	e036      	b.n	8006812 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	2b0f      	cmp	r3, #15
 80067aa:	d90b      	bls.n	80067c4 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80067b6:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067bc:	1d1a      	adds	r2, r3, #4
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	665a      	str	r2, [r3, #100]	; 0x64
 80067c2:	e01d      	b.n	8006800 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	2b07      	cmp	r3, #7
 80067ca:	d90b      	bls.n	80067e4 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	8812      	ldrh	r2, [r2, #0]
 80067d4:	b292      	uxth	r2, r2
 80067d6:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067dc:	1c9a      	adds	r2, r3, #2
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	665a      	str	r2, [r3, #100]	; 0x64
 80067e2:	e00d      	b.n	8006800 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067f0:	7812      	ldrb	r2, [r2, #0]
 80067f2:	b2d2      	uxtb	r2, r2
 80067f4:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067fa:	1c5a      	adds	r2, r3, #1
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006806:	b29b      	uxth	r3, r3
 8006808:	3b01      	subs	r3, #1
 800680a:	b29a      	uxth	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006818:	b29b      	uxth	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1c2      	bne.n	80067a4 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f93a 	bl	8006a98 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006832:	2b00      	cmp	r3, #0
 8006834:	d003      	beq.n	800683e <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 f90a 	bl	8006a50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800683c:	e0e3      	b.n	8006a06 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800683e:	7cfb      	ldrb	r3, [r7, #19]
 8006840:	2b05      	cmp	r3, #5
 8006842:	d103      	bne.n	800684c <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 f8f9 	bl	8006a3c <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 800684a:	e0d9      	b.n	8006a00 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800684c:	7cfb      	ldrb	r3, [r7, #19]
 800684e:	2b04      	cmp	r3, #4
 8006850:	d103      	bne.n	800685a <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f8e8 	bl	8006a28 <HAL_SPI_RxCpltCallback>
    return;
 8006858:	e0d2      	b.n	8006a00 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800685a:	7cfb      	ldrb	r3, [r7, #19]
 800685c:	2b03      	cmp	r3, #3
 800685e:	f040 80cf 	bne.w	8006a00 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f8d6 	bl	8006a14 <HAL_SPI_TxCpltCallback>
    return;
 8006868:	e0ca      	b.n	8006a00 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00d      	beq.n	8006890 <HAL_SPI_IRQHandler+0x23c>
 8006874:	6a3b      	ldr	r3, [r7, #32]
 8006876:	f003 0308 	and.w	r3, r3, #8
 800687a:	2b00      	cmp	r3, #0
 800687c:	d008      	beq.n	8006890 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	699a      	ldr	r2, [r3, #24]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800688c:	619a      	str	r2, [r3, #24]

    return;
 800688e:	e0ba      	b.n	8006a06 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 80b5 	beq.w	8006a06 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00f      	beq.n	80068c6 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068ac:	f043 0204 	orr.w	r2, r3, #4
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	699a      	ldr	r2, [r3, #24]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068c4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00f      	beq.n	80068f0 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068d6:	f043 0201 	orr.w	r2, r3, #1
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	699a      	ldr	r2, [r3, #24]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068ee:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00f      	beq.n	800691a <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006900:	f043 0208 	orr.w	r2, r3, #8
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	699a      	ldr	r2, [r3, #24]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006918:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	f003 0320 	and.w	r3, r3, #32
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00f      	beq.n	8006944 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800692a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	699a      	ldr	r2, [r3, #24]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f042 0220 	orr.w	r2, r2, #32
 8006942:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800694a:	2b00      	cmp	r3, #0
 800694c:	d05a      	beq.n	8006a04 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f022 0201 	bic.w	r2, r2, #1
 800695c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	6919      	ldr	r1, [r3, #16]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	4b28      	ldr	r3, [pc, #160]	; (8006a0c <HAL_SPI_IRQHandler+0x3b8>)
 800696a:	400b      	ands	r3, r1
 800696c:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006974:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006978:	d138      	bne.n	80069ec <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006988:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800698e:	2b00      	cmp	r3, #0
 8006990:	d013      	beq.n	80069ba <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006996:	4a1e      	ldr	r2, [pc, #120]	; (8006a10 <HAL_SPI_IRQHandler+0x3bc>)
 8006998:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800699e:	4618      	mov	r0, r3
 80069a0:	f7fb fc24 	bl	80021ec <HAL_DMA_Abort_IT>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d007      	beq.n	80069ba <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d020      	beq.n	8006a04 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069c6:	4a12      	ldr	r2, [pc, #72]	; (8006a10 <HAL_SPI_IRQHandler+0x3bc>)
 80069c8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7fb fc0c 	bl	80021ec <HAL_DMA_Abort_IT>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d014      	beq.n	8006a04 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80069ea:	e00b      	b.n	8006a04 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f82b 	bl	8006a50 <HAL_SPI_ErrorCallback>
    return;
 80069fa:	e003      	b.n	8006a04 <HAL_SPI_IRQHandler+0x3b0>
    return;
 80069fc:	bf00      	nop
 80069fe:	e002      	b.n	8006a06 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8006a00:	bf00      	nop
 8006a02:	e000      	b.n	8006a06 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8006a04:	bf00      	nop
  }
}
 8006a06:	3728      	adds	r7, #40	; 0x28
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	fffffc94 	.word	0xfffffc94
 8006a10:	08006a65 	.word	0x08006a65

08006a14 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a70:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f7ff ffe0 	bl	8006a50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a90:	bf00      	nop
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	699a      	ldr	r2, [r3, #24]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f042 0208 	orr.w	r2, r2, #8
 8006ab6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	699a      	ldr	r2, [r3, #24]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f042 0210 	orr.w	r2, r2, #16
 8006ac6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f022 0201 	bic.w	r2, r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6919      	ldr	r1, [r3, #16]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	4b3c      	ldr	r3, [pc, #240]	; (8006bd4 <SPI_CloseTransfer+0x13c>)
 8006ae4:	400b      	ands	r3, r1
 8006ae6:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	689a      	ldr	r2, [r3, #8]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006af6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2b04      	cmp	r3, #4
 8006b02:	d014      	beq.n	8006b2e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f003 0320 	and.w	r3, r3, #32
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00f      	beq.n	8006b2e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	699a      	ldr	r2, [r3, #24]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f042 0220 	orr.w	r2, r2, #32
 8006b2c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b03      	cmp	r3, #3
 8006b38:	d014      	beq.n	8006b64 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00f      	beq.n	8006b64 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b4a:	f043 0204 	orr.w	r2, r3, #4
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	699a      	ldr	r2, [r3, #24]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b62:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00f      	beq.n	8006b8e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b74:	f043 0201 	orr.w	r2, r3, #1
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	699a      	ldr	r2, [r3, #24]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b8c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00f      	beq.n	8006bb8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b9e:	f043 0208 	orr.w	r2, r3, #8
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	699a      	ldr	r2, [r3, #24]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bb6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006bc8:	bf00      	nop
 8006bca:	3714      	adds	r7, #20
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr
 8006bd4:	fffffc90 	.word	0xfffffc90

08006bd8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be4:	095b      	lsrs	r3, r3, #5
 8006be6:	3301      	adds	r3, #1
 8006be8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	3307      	adds	r3, #7
 8006bf6:	08db      	lsrs	r3, r3, #3
 8006bf8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	fb02 f303 	mul.w	r3, r2, r3
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3714      	adds	r7, #20
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b082      	sub	sp, #8
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d101      	bne.n	8006c20 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e042      	b.n	8006ca6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d106      	bne.n	8006c38 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7fa ff2c 	bl	8001a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2224      	movs	r2, #36	; 0x24
 8006c3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f022 0201 	bic.w	r2, r2, #1
 8006c4e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f82d 	bl	8006cb0 <UART_SetConfig>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d101      	bne.n	8006c60 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e022      	b.n	8006ca6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d002      	beq.n	8006c6e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fd81 	bl	8007770 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	685a      	ldr	r2, [r3, #4]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	689a      	ldr	r2, [r3, #8]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c8c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f042 0201 	orr.w	r2, r2, #1
 8006c9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 fe08 	bl	80078b4 <UART_CheckIdleState>
 8006ca4:	4603      	mov	r3, r0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
	...

08006cb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cb0:	b5b0      	push	{r4, r5, r7, lr}
 8006cb2:	b08e      	sub	sp, #56	; 0x38
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	689a      	ldr	r2, [r3, #8]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	695b      	ldr	r3, [r3, #20]
 8006ccc:	431a      	orrs	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	4bbf      	ldr	r3, [pc, #764]	; (8006fdc <UART_SetConfig+0x32c>)
 8006cde:	4013      	ands	r3, r2
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	6812      	ldr	r2, [r2, #0]
 8006ce4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006ce6:	430b      	orrs	r3, r1
 8006ce8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	68da      	ldr	r2, [r3, #12]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4ab5      	ldr	r2, [pc, #724]	; (8006fe0 <UART_SetConfig+0x330>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d004      	beq.n	8006d1a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d16:	4313      	orrs	r3, r2
 8006d18:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689a      	ldr	r2, [r3, #8]
 8006d20:	4bb0      	ldr	r3, [pc, #704]	; (8006fe4 <UART_SetConfig+0x334>)
 8006d22:	4013      	ands	r3, r2
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	6812      	ldr	r2, [r2, #0]
 8006d28:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d2a:	430b      	orrs	r3, r1
 8006d2c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d34:	f023 010f 	bic.w	r1, r3, #15
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	430a      	orrs	r2, r1
 8006d42:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4aa7      	ldr	r2, [pc, #668]	; (8006fe8 <UART_SetConfig+0x338>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d176      	bne.n	8006e3c <UART_SetConfig+0x18c>
 8006d4e:	4ba7      	ldr	r3, [pc, #668]	; (8006fec <UART_SetConfig+0x33c>)
 8006d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d56:	2b28      	cmp	r3, #40	; 0x28
 8006d58:	d86c      	bhi.n	8006e34 <UART_SetConfig+0x184>
 8006d5a:	a201      	add	r2, pc, #4	; (adr r2, 8006d60 <UART_SetConfig+0xb0>)
 8006d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d60:	08006e05 	.word	0x08006e05
 8006d64:	08006e35 	.word	0x08006e35
 8006d68:	08006e35 	.word	0x08006e35
 8006d6c:	08006e35 	.word	0x08006e35
 8006d70:	08006e35 	.word	0x08006e35
 8006d74:	08006e35 	.word	0x08006e35
 8006d78:	08006e35 	.word	0x08006e35
 8006d7c:	08006e35 	.word	0x08006e35
 8006d80:	08006e0d 	.word	0x08006e0d
 8006d84:	08006e35 	.word	0x08006e35
 8006d88:	08006e35 	.word	0x08006e35
 8006d8c:	08006e35 	.word	0x08006e35
 8006d90:	08006e35 	.word	0x08006e35
 8006d94:	08006e35 	.word	0x08006e35
 8006d98:	08006e35 	.word	0x08006e35
 8006d9c:	08006e35 	.word	0x08006e35
 8006da0:	08006e15 	.word	0x08006e15
 8006da4:	08006e35 	.word	0x08006e35
 8006da8:	08006e35 	.word	0x08006e35
 8006dac:	08006e35 	.word	0x08006e35
 8006db0:	08006e35 	.word	0x08006e35
 8006db4:	08006e35 	.word	0x08006e35
 8006db8:	08006e35 	.word	0x08006e35
 8006dbc:	08006e35 	.word	0x08006e35
 8006dc0:	08006e1d 	.word	0x08006e1d
 8006dc4:	08006e35 	.word	0x08006e35
 8006dc8:	08006e35 	.word	0x08006e35
 8006dcc:	08006e35 	.word	0x08006e35
 8006dd0:	08006e35 	.word	0x08006e35
 8006dd4:	08006e35 	.word	0x08006e35
 8006dd8:	08006e35 	.word	0x08006e35
 8006ddc:	08006e35 	.word	0x08006e35
 8006de0:	08006e25 	.word	0x08006e25
 8006de4:	08006e35 	.word	0x08006e35
 8006de8:	08006e35 	.word	0x08006e35
 8006dec:	08006e35 	.word	0x08006e35
 8006df0:	08006e35 	.word	0x08006e35
 8006df4:	08006e35 	.word	0x08006e35
 8006df8:	08006e35 	.word	0x08006e35
 8006dfc:	08006e35 	.word	0x08006e35
 8006e00:	08006e2d 	.word	0x08006e2d
 8006e04:	2301      	movs	r3, #1
 8006e06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e0a:	e222      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006e0c:	2304      	movs	r3, #4
 8006e0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e12:	e21e      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006e14:	2308      	movs	r3, #8
 8006e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e1a:	e21a      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006e1c:	2310      	movs	r3, #16
 8006e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e22:	e216      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006e24:	2320      	movs	r3, #32
 8006e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e2a:	e212      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006e2c:	2340      	movs	r3, #64	; 0x40
 8006e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e32:	e20e      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006e34:	2380      	movs	r3, #128	; 0x80
 8006e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e3a:	e20a      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a6b      	ldr	r2, [pc, #428]	; (8006ff0 <UART_SetConfig+0x340>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d130      	bne.n	8006ea8 <UART_SetConfig+0x1f8>
 8006e46:	4b69      	ldr	r3, [pc, #420]	; (8006fec <UART_SetConfig+0x33c>)
 8006e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e4a:	f003 0307 	and.w	r3, r3, #7
 8006e4e:	2b05      	cmp	r3, #5
 8006e50:	d826      	bhi.n	8006ea0 <UART_SetConfig+0x1f0>
 8006e52:	a201      	add	r2, pc, #4	; (adr r2, 8006e58 <UART_SetConfig+0x1a8>)
 8006e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e58:	08006e71 	.word	0x08006e71
 8006e5c:	08006e79 	.word	0x08006e79
 8006e60:	08006e81 	.word	0x08006e81
 8006e64:	08006e89 	.word	0x08006e89
 8006e68:	08006e91 	.word	0x08006e91
 8006e6c:	08006e99 	.word	0x08006e99
 8006e70:	2300      	movs	r3, #0
 8006e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e76:	e1ec      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006e78:	2304      	movs	r3, #4
 8006e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e7e:	e1e8      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006e80:	2308      	movs	r3, #8
 8006e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e86:	e1e4      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006e88:	2310      	movs	r3, #16
 8006e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e8e:	e1e0      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006e90:	2320      	movs	r3, #32
 8006e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e96:	e1dc      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006e98:	2340      	movs	r3, #64	; 0x40
 8006e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e9e:	e1d8      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006ea0:	2380      	movs	r3, #128	; 0x80
 8006ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ea6:	e1d4      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a51      	ldr	r2, [pc, #324]	; (8006ff4 <UART_SetConfig+0x344>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d130      	bne.n	8006f14 <UART_SetConfig+0x264>
 8006eb2:	4b4e      	ldr	r3, [pc, #312]	; (8006fec <UART_SetConfig+0x33c>)
 8006eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb6:	f003 0307 	and.w	r3, r3, #7
 8006eba:	2b05      	cmp	r3, #5
 8006ebc:	d826      	bhi.n	8006f0c <UART_SetConfig+0x25c>
 8006ebe:	a201      	add	r2, pc, #4	; (adr r2, 8006ec4 <UART_SetConfig+0x214>)
 8006ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec4:	08006edd 	.word	0x08006edd
 8006ec8:	08006ee5 	.word	0x08006ee5
 8006ecc:	08006eed 	.word	0x08006eed
 8006ed0:	08006ef5 	.word	0x08006ef5
 8006ed4:	08006efd 	.word	0x08006efd
 8006ed8:	08006f05 	.word	0x08006f05
 8006edc:	2300      	movs	r3, #0
 8006ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ee2:	e1b6      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006ee4:	2304      	movs	r3, #4
 8006ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006eea:	e1b2      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006eec:	2308      	movs	r3, #8
 8006eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ef2:	e1ae      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006ef4:	2310      	movs	r3, #16
 8006ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006efa:	e1aa      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006efc:	2320      	movs	r3, #32
 8006efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f02:	e1a6      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006f04:	2340      	movs	r3, #64	; 0x40
 8006f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f0a:	e1a2      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006f0c:	2380      	movs	r3, #128	; 0x80
 8006f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f12:	e19e      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a37      	ldr	r2, [pc, #220]	; (8006ff8 <UART_SetConfig+0x348>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d130      	bne.n	8006f80 <UART_SetConfig+0x2d0>
 8006f1e:	4b33      	ldr	r3, [pc, #204]	; (8006fec <UART_SetConfig+0x33c>)
 8006f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f22:	f003 0307 	and.w	r3, r3, #7
 8006f26:	2b05      	cmp	r3, #5
 8006f28:	d826      	bhi.n	8006f78 <UART_SetConfig+0x2c8>
 8006f2a:	a201      	add	r2, pc, #4	; (adr r2, 8006f30 <UART_SetConfig+0x280>)
 8006f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f30:	08006f49 	.word	0x08006f49
 8006f34:	08006f51 	.word	0x08006f51
 8006f38:	08006f59 	.word	0x08006f59
 8006f3c:	08006f61 	.word	0x08006f61
 8006f40:	08006f69 	.word	0x08006f69
 8006f44:	08006f71 	.word	0x08006f71
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f4e:	e180      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006f50:	2304      	movs	r3, #4
 8006f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f56:	e17c      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006f58:	2308      	movs	r3, #8
 8006f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f5e:	e178      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006f60:	2310      	movs	r3, #16
 8006f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f66:	e174      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006f68:	2320      	movs	r3, #32
 8006f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f6e:	e170      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006f70:	2340      	movs	r3, #64	; 0x40
 8006f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f76:	e16c      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006f78:	2380      	movs	r3, #128	; 0x80
 8006f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f7e:	e168      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a1d      	ldr	r2, [pc, #116]	; (8006ffc <UART_SetConfig+0x34c>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d142      	bne.n	8007010 <UART_SetConfig+0x360>
 8006f8a:	4b18      	ldr	r3, [pc, #96]	; (8006fec <UART_SetConfig+0x33c>)
 8006f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f8e:	f003 0307 	and.w	r3, r3, #7
 8006f92:	2b05      	cmp	r3, #5
 8006f94:	d838      	bhi.n	8007008 <UART_SetConfig+0x358>
 8006f96:	a201      	add	r2, pc, #4	; (adr r2, 8006f9c <UART_SetConfig+0x2ec>)
 8006f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9c:	08006fb5 	.word	0x08006fb5
 8006fa0:	08006fbd 	.word	0x08006fbd
 8006fa4:	08006fc5 	.word	0x08006fc5
 8006fa8:	08006fcd 	.word	0x08006fcd
 8006fac:	08006fd5 	.word	0x08006fd5
 8006fb0:	08007001 	.word	0x08007001
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fba:	e14a      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006fbc:	2304      	movs	r3, #4
 8006fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fc2:	e146      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006fc4:	2308      	movs	r3, #8
 8006fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fca:	e142      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006fcc:	2310      	movs	r3, #16
 8006fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fd2:	e13e      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006fd4:	2320      	movs	r3, #32
 8006fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fda:	e13a      	b.n	8007252 <UART_SetConfig+0x5a2>
 8006fdc:	cfff69f3 	.word	0xcfff69f3
 8006fe0:	58000c00 	.word	0x58000c00
 8006fe4:	11fff4ff 	.word	0x11fff4ff
 8006fe8:	40011000 	.word	0x40011000
 8006fec:	58024400 	.word	0x58024400
 8006ff0:	40004400 	.word	0x40004400
 8006ff4:	40004800 	.word	0x40004800
 8006ff8:	40004c00 	.word	0x40004c00
 8006ffc:	40005000 	.word	0x40005000
 8007000:	2340      	movs	r3, #64	; 0x40
 8007002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007006:	e124      	b.n	8007252 <UART_SetConfig+0x5a2>
 8007008:	2380      	movs	r3, #128	; 0x80
 800700a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800700e:	e120      	b.n	8007252 <UART_SetConfig+0x5a2>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4acc      	ldr	r2, [pc, #816]	; (8007348 <UART_SetConfig+0x698>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d176      	bne.n	8007108 <UART_SetConfig+0x458>
 800701a:	4bcc      	ldr	r3, [pc, #816]	; (800734c <UART_SetConfig+0x69c>)
 800701c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800701e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007022:	2b28      	cmp	r3, #40	; 0x28
 8007024:	d86c      	bhi.n	8007100 <UART_SetConfig+0x450>
 8007026:	a201      	add	r2, pc, #4	; (adr r2, 800702c <UART_SetConfig+0x37c>)
 8007028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702c:	080070d1 	.word	0x080070d1
 8007030:	08007101 	.word	0x08007101
 8007034:	08007101 	.word	0x08007101
 8007038:	08007101 	.word	0x08007101
 800703c:	08007101 	.word	0x08007101
 8007040:	08007101 	.word	0x08007101
 8007044:	08007101 	.word	0x08007101
 8007048:	08007101 	.word	0x08007101
 800704c:	080070d9 	.word	0x080070d9
 8007050:	08007101 	.word	0x08007101
 8007054:	08007101 	.word	0x08007101
 8007058:	08007101 	.word	0x08007101
 800705c:	08007101 	.word	0x08007101
 8007060:	08007101 	.word	0x08007101
 8007064:	08007101 	.word	0x08007101
 8007068:	08007101 	.word	0x08007101
 800706c:	080070e1 	.word	0x080070e1
 8007070:	08007101 	.word	0x08007101
 8007074:	08007101 	.word	0x08007101
 8007078:	08007101 	.word	0x08007101
 800707c:	08007101 	.word	0x08007101
 8007080:	08007101 	.word	0x08007101
 8007084:	08007101 	.word	0x08007101
 8007088:	08007101 	.word	0x08007101
 800708c:	080070e9 	.word	0x080070e9
 8007090:	08007101 	.word	0x08007101
 8007094:	08007101 	.word	0x08007101
 8007098:	08007101 	.word	0x08007101
 800709c:	08007101 	.word	0x08007101
 80070a0:	08007101 	.word	0x08007101
 80070a4:	08007101 	.word	0x08007101
 80070a8:	08007101 	.word	0x08007101
 80070ac:	080070f1 	.word	0x080070f1
 80070b0:	08007101 	.word	0x08007101
 80070b4:	08007101 	.word	0x08007101
 80070b8:	08007101 	.word	0x08007101
 80070bc:	08007101 	.word	0x08007101
 80070c0:	08007101 	.word	0x08007101
 80070c4:	08007101 	.word	0x08007101
 80070c8:	08007101 	.word	0x08007101
 80070cc:	080070f9 	.word	0x080070f9
 80070d0:	2301      	movs	r3, #1
 80070d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070d6:	e0bc      	b.n	8007252 <UART_SetConfig+0x5a2>
 80070d8:	2304      	movs	r3, #4
 80070da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070de:	e0b8      	b.n	8007252 <UART_SetConfig+0x5a2>
 80070e0:	2308      	movs	r3, #8
 80070e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070e6:	e0b4      	b.n	8007252 <UART_SetConfig+0x5a2>
 80070e8:	2310      	movs	r3, #16
 80070ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070ee:	e0b0      	b.n	8007252 <UART_SetConfig+0x5a2>
 80070f0:	2320      	movs	r3, #32
 80070f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070f6:	e0ac      	b.n	8007252 <UART_SetConfig+0x5a2>
 80070f8:	2340      	movs	r3, #64	; 0x40
 80070fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070fe:	e0a8      	b.n	8007252 <UART_SetConfig+0x5a2>
 8007100:	2380      	movs	r3, #128	; 0x80
 8007102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007106:	e0a4      	b.n	8007252 <UART_SetConfig+0x5a2>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a90      	ldr	r2, [pc, #576]	; (8007350 <UART_SetConfig+0x6a0>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d130      	bne.n	8007174 <UART_SetConfig+0x4c4>
 8007112:	4b8e      	ldr	r3, [pc, #568]	; (800734c <UART_SetConfig+0x69c>)
 8007114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007116:	f003 0307 	and.w	r3, r3, #7
 800711a:	2b05      	cmp	r3, #5
 800711c:	d826      	bhi.n	800716c <UART_SetConfig+0x4bc>
 800711e:	a201      	add	r2, pc, #4	; (adr r2, 8007124 <UART_SetConfig+0x474>)
 8007120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007124:	0800713d 	.word	0x0800713d
 8007128:	08007145 	.word	0x08007145
 800712c:	0800714d 	.word	0x0800714d
 8007130:	08007155 	.word	0x08007155
 8007134:	0800715d 	.word	0x0800715d
 8007138:	08007165 	.word	0x08007165
 800713c:	2300      	movs	r3, #0
 800713e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007142:	e086      	b.n	8007252 <UART_SetConfig+0x5a2>
 8007144:	2304      	movs	r3, #4
 8007146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800714a:	e082      	b.n	8007252 <UART_SetConfig+0x5a2>
 800714c:	2308      	movs	r3, #8
 800714e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007152:	e07e      	b.n	8007252 <UART_SetConfig+0x5a2>
 8007154:	2310      	movs	r3, #16
 8007156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800715a:	e07a      	b.n	8007252 <UART_SetConfig+0x5a2>
 800715c:	2320      	movs	r3, #32
 800715e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007162:	e076      	b.n	8007252 <UART_SetConfig+0x5a2>
 8007164:	2340      	movs	r3, #64	; 0x40
 8007166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800716a:	e072      	b.n	8007252 <UART_SetConfig+0x5a2>
 800716c:	2380      	movs	r3, #128	; 0x80
 800716e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007172:	e06e      	b.n	8007252 <UART_SetConfig+0x5a2>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a76      	ldr	r2, [pc, #472]	; (8007354 <UART_SetConfig+0x6a4>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d130      	bne.n	80071e0 <UART_SetConfig+0x530>
 800717e:	4b73      	ldr	r3, [pc, #460]	; (800734c <UART_SetConfig+0x69c>)
 8007180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007182:	f003 0307 	and.w	r3, r3, #7
 8007186:	2b05      	cmp	r3, #5
 8007188:	d826      	bhi.n	80071d8 <UART_SetConfig+0x528>
 800718a:	a201      	add	r2, pc, #4	; (adr r2, 8007190 <UART_SetConfig+0x4e0>)
 800718c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007190:	080071a9 	.word	0x080071a9
 8007194:	080071b1 	.word	0x080071b1
 8007198:	080071b9 	.word	0x080071b9
 800719c:	080071c1 	.word	0x080071c1
 80071a0:	080071c9 	.word	0x080071c9
 80071a4:	080071d1 	.word	0x080071d1
 80071a8:	2300      	movs	r3, #0
 80071aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ae:	e050      	b.n	8007252 <UART_SetConfig+0x5a2>
 80071b0:	2304      	movs	r3, #4
 80071b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071b6:	e04c      	b.n	8007252 <UART_SetConfig+0x5a2>
 80071b8:	2308      	movs	r3, #8
 80071ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071be:	e048      	b.n	8007252 <UART_SetConfig+0x5a2>
 80071c0:	2310      	movs	r3, #16
 80071c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071c6:	e044      	b.n	8007252 <UART_SetConfig+0x5a2>
 80071c8:	2320      	movs	r3, #32
 80071ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ce:	e040      	b.n	8007252 <UART_SetConfig+0x5a2>
 80071d0:	2340      	movs	r3, #64	; 0x40
 80071d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071d6:	e03c      	b.n	8007252 <UART_SetConfig+0x5a2>
 80071d8:	2380      	movs	r3, #128	; 0x80
 80071da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071de:	e038      	b.n	8007252 <UART_SetConfig+0x5a2>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a5c      	ldr	r2, [pc, #368]	; (8007358 <UART_SetConfig+0x6a8>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d130      	bne.n	800724c <UART_SetConfig+0x59c>
 80071ea:	4b58      	ldr	r3, [pc, #352]	; (800734c <UART_SetConfig+0x69c>)
 80071ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ee:	f003 0307 	and.w	r3, r3, #7
 80071f2:	2b05      	cmp	r3, #5
 80071f4:	d826      	bhi.n	8007244 <UART_SetConfig+0x594>
 80071f6:	a201      	add	r2, pc, #4	; (adr r2, 80071fc <UART_SetConfig+0x54c>)
 80071f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fc:	08007215 	.word	0x08007215
 8007200:	0800721d 	.word	0x0800721d
 8007204:	08007225 	.word	0x08007225
 8007208:	0800722d 	.word	0x0800722d
 800720c:	08007235 	.word	0x08007235
 8007210:	0800723d 	.word	0x0800723d
 8007214:	2302      	movs	r3, #2
 8007216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800721a:	e01a      	b.n	8007252 <UART_SetConfig+0x5a2>
 800721c:	2304      	movs	r3, #4
 800721e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007222:	e016      	b.n	8007252 <UART_SetConfig+0x5a2>
 8007224:	2308      	movs	r3, #8
 8007226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800722a:	e012      	b.n	8007252 <UART_SetConfig+0x5a2>
 800722c:	2310      	movs	r3, #16
 800722e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007232:	e00e      	b.n	8007252 <UART_SetConfig+0x5a2>
 8007234:	2320      	movs	r3, #32
 8007236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800723a:	e00a      	b.n	8007252 <UART_SetConfig+0x5a2>
 800723c:	2340      	movs	r3, #64	; 0x40
 800723e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007242:	e006      	b.n	8007252 <UART_SetConfig+0x5a2>
 8007244:	2380      	movs	r3, #128	; 0x80
 8007246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800724a:	e002      	b.n	8007252 <UART_SetConfig+0x5a2>
 800724c:	2380      	movs	r3, #128	; 0x80
 800724e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a40      	ldr	r2, [pc, #256]	; (8007358 <UART_SetConfig+0x6a8>)
 8007258:	4293      	cmp	r3, r2
 800725a:	f040 80ef 	bne.w	800743c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800725e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007262:	2b20      	cmp	r3, #32
 8007264:	dc46      	bgt.n	80072f4 <UART_SetConfig+0x644>
 8007266:	2b02      	cmp	r3, #2
 8007268:	f2c0 8081 	blt.w	800736e <UART_SetConfig+0x6be>
 800726c:	3b02      	subs	r3, #2
 800726e:	2b1e      	cmp	r3, #30
 8007270:	d87d      	bhi.n	800736e <UART_SetConfig+0x6be>
 8007272:	a201      	add	r2, pc, #4	; (adr r2, 8007278 <UART_SetConfig+0x5c8>)
 8007274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007278:	080072fb 	.word	0x080072fb
 800727c:	0800736f 	.word	0x0800736f
 8007280:	08007303 	.word	0x08007303
 8007284:	0800736f 	.word	0x0800736f
 8007288:	0800736f 	.word	0x0800736f
 800728c:	0800736f 	.word	0x0800736f
 8007290:	08007313 	.word	0x08007313
 8007294:	0800736f 	.word	0x0800736f
 8007298:	0800736f 	.word	0x0800736f
 800729c:	0800736f 	.word	0x0800736f
 80072a0:	0800736f 	.word	0x0800736f
 80072a4:	0800736f 	.word	0x0800736f
 80072a8:	0800736f 	.word	0x0800736f
 80072ac:	0800736f 	.word	0x0800736f
 80072b0:	08007323 	.word	0x08007323
 80072b4:	0800736f 	.word	0x0800736f
 80072b8:	0800736f 	.word	0x0800736f
 80072bc:	0800736f 	.word	0x0800736f
 80072c0:	0800736f 	.word	0x0800736f
 80072c4:	0800736f 	.word	0x0800736f
 80072c8:	0800736f 	.word	0x0800736f
 80072cc:	0800736f 	.word	0x0800736f
 80072d0:	0800736f 	.word	0x0800736f
 80072d4:	0800736f 	.word	0x0800736f
 80072d8:	0800736f 	.word	0x0800736f
 80072dc:	0800736f 	.word	0x0800736f
 80072e0:	0800736f 	.word	0x0800736f
 80072e4:	0800736f 	.word	0x0800736f
 80072e8:	0800736f 	.word	0x0800736f
 80072ec:	0800736f 	.word	0x0800736f
 80072f0:	08007361 	.word	0x08007361
 80072f4:	2b40      	cmp	r3, #64	; 0x40
 80072f6:	d036      	beq.n	8007366 <UART_SetConfig+0x6b6>
 80072f8:	e039      	b.n	800736e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80072fa:	f7fe fc87 	bl	8005c0c <HAL_RCCEx_GetD3PCLK1Freq>
 80072fe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007300:	e03b      	b.n	800737a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007302:	f107 0314 	add.w	r3, r7, #20
 8007306:	4618      	mov	r0, r3
 8007308:	f7fe fc96 	bl	8005c38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007310:	e033      	b.n	800737a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007312:	f107 0308 	add.w	r3, r7, #8
 8007316:	4618      	mov	r0, r3
 8007318:	f7fe fde2 	bl	8005ee0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007320:	e02b      	b.n	800737a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007322:	4b0a      	ldr	r3, [pc, #40]	; (800734c <UART_SetConfig+0x69c>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 0320 	and.w	r3, r3, #32
 800732a:	2b00      	cmp	r3, #0
 800732c:	d009      	beq.n	8007342 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800732e:	4b07      	ldr	r3, [pc, #28]	; (800734c <UART_SetConfig+0x69c>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	08db      	lsrs	r3, r3, #3
 8007334:	f003 0303 	and.w	r3, r3, #3
 8007338:	4a08      	ldr	r2, [pc, #32]	; (800735c <UART_SetConfig+0x6ac>)
 800733a:	fa22 f303 	lsr.w	r3, r2, r3
 800733e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007340:	e01b      	b.n	800737a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8007342:	4b06      	ldr	r3, [pc, #24]	; (800735c <UART_SetConfig+0x6ac>)
 8007344:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007346:	e018      	b.n	800737a <UART_SetConfig+0x6ca>
 8007348:	40011400 	.word	0x40011400
 800734c:	58024400 	.word	0x58024400
 8007350:	40007800 	.word	0x40007800
 8007354:	40007c00 	.word	0x40007c00
 8007358:	58000c00 	.word	0x58000c00
 800735c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007360:	4bc4      	ldr	r3, [pc, #784]	; (8007674 <UART_SetConfig+0x9c4>)
 8007362:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007364:	e009      	b.n	800737a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800736a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800736c:	e005      	b.n	800737a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800736e:	2300      	movs	r3, #0
 8007370:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007378:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800737a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 81da 	beq.w	8007736 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007386:	4abc      	ldr	r2, [pc, #752]	; (8007678 <UART_SetConfig+0x9c8>)
 8007388:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800738c:	461a      	mov	r2, r3
 800738e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007390:	fbb3 f3f2 	udiv	r3, r3, r2
 8007394:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685a      	ldr	r2, [r3, #4]
 800739a:	4613      	mov	r3, r2
 800739c:	005b      	lsls	r3, r3, #1
 800739e:	4413      	add	r3, r2
 80073a0:	6a3a      	ldr	r2, [r7, #32]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d305      	bcc.n	80073b2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073ac:	6a3a      	ldr	r2, [r7, #32]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d903      	bls.n	80073ba <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80073b8:	e1bd      	b.n	8007736 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073bc:	4618      	mov	r0, r3
 80073be:	f04f 0100 	mov.w	r1, #0
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c6:	4aac      	ldr	r2, [pc, #688]	; (8007678 <UART_SetConfig+0x9c8>)
 80073c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	f04f 0300 	mov.w	r3, #0
 80073d2:	f7f9 f9a9 	bl	8000728 <__aeabi_uldivmod>
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	4610      	mov	r0, r2
 80073dc:	4619      	mov	r1, r3
 80073de:	f04f 0200 	mov.w	r2, #0
 80073e2:	f04f 0300 	mov.w	r3, #0
 80073e6:	020b      	lsls	r3, r1, #8
 80073e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80073ec:	0202      	lsls	r2, r0, #8
 80073ee:	6879      	ldr	r1, [r7, #4]
 80073f0:	6849      	ldr	r1, [r1, #4]
 80073f2:	0849      	lsrs	r1, r1, #1
 80073f4:	4608      	mov	r0, r1
 80073f6:	f04f 0100 	mov.w	r1, #0
 80073fa:	1814      	adds	r4, r2, r0
 80073fc:	eb43 0501 	adc.w	r5, r3, r1
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	461a      	mov	r2, r3
 8007406:	f04f 0300 	mov.w	r3, #0
 800740a:	4620      	mov	r0, r4
 800740c:	4629      	mov	r1, r5
 800740e:	f7f9 f98b 	bl	8000728 <__aeabi_uldivmod>
 8007412:	4602      	mov	r2, r0
 8007414:	460b      	mov	r3, r1
 8007416:	4613      	mov	r3, r2
 8007418:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800741a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007420:	d308      	bcc.n	8007434 <UART_SetConfig+0x784>
 8007422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007428:	d204      	bcs.n	8007434 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007430:	60da      	str	r2, [r3, #12]
 8007432:	e180      	b.n	8007736 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800743a:	e17c      	b.n	8007736 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	69db      	ldr	r3, [r3, #28]
 8007440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007444:	f040 80bf 	bne.w	80075c6 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8007448:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800744c:	2b20      	cmp	r3, #32
 800744e:	dc49      	bgt.n	80074e4 <UART_SetConfig+0x834>
 8007450:	2b00      	cmp	r3, #0
 8007452:	db7c      	blt.n	800754e <UART_SetConfig+0x89e>
 8007454:	2b20      	cmp	r3, #32
 8007456:	d87a      	bhi.n	800754e <UART_SetConfig+0x89e>
 8007458:	a201      	add	r2, pc, #4	; (adr r2, 8007460 <UART_SetConfig+0x7b0>)
 800745a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745e:	bf00      	nop
 8007460:	080074eb 	.word	0x080074eb
 8007464:	080074f3 	.word	0x080074f3
 8007468:	0800754f 	.word	0x0800754f
 800746c:	0800754f 	.word	0x0800754f
 8007470:	080074fb 	.word	0x080074fb
 8007474:	0800754f 	.word	0x0800754f
 8007478:	0800754f 	.word	0x0800754f
 800747c:	0800754f 	.word	0x0800754f
 8007480:	0800750b 	.word	0x0800750b
 8007484:	0800754f 	.word	0x0800754f
 8007488:	0800754f 	.word	0x0800754f
 800748c:	0800754f 	.word	0x0800754f
 8007490:	0800754f 	.word	0x0800754f
 8007494:	0800754f 	.word	0x0800754f
 8007498:	0800754f 	.word	0x0800754f
 800749c:	0800754f 	.word	0x0800754f
 80074a0:	0800751b 	.word	0x0800751b
 80074a4:	0800754f 	.word	0x0800754f
 80074a8:	0800754f 	.word	0x0800754f
 80074ac:	0800754f 	.word	0x0800754f
 80074b0:	0800754f 	.word	0x0800754f
 80074b4:	0800754f 	.word	0x0800754f
 80074b8:	0800754f 	.word	0x0800754f
 80074bc:	0800754f 	.word	0x0800754f
 80074c0:	0800754f 	.word	0x0800754f
 80074c4:	0800754f 	.word	0x0800754f
 80074c8:	0800754f 	.word	0x0800754f
 80074cc:	0800754f 	.word	0x0800754f
 80074d0:	0800754f 	.word	0x0800754f
 80074d4:	0800754f 	.word	0x0800754f
 80074d8:	0800754f 	.word	0x0800754f
 80074dc:	0800754f 	.word	0x0800754f
 80074e0:	08007541 	.word	0x08007541
 80074e4:	2b40      	cmp	r3, #64	; 0x40
 80074e6:	d02e      	beq.n	8007546 <UART_SetConfig+0x896>
 80074e8:	e031      	b.n	800754e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074ea:	f7fd fc23 	bl	8004d34 <HAL_RCC_GetPCLK1Freq>
 80074ee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80074f0:	e033      	b.n	800755a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074f2:	f7fd fc35 	bl	8004d60 <HAL_RCC_GetPCLK2Freq>
 80074f6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80074f8:	e02f      	b.n	800755a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074fa:	f107 0314 	add.w	r3, r7, #20
 80074fe:	4618      	mov	r0, r3
 8007500:	f7fe fb9a 	bl	8005c38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007508:	e027      	b.n	800755a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800750a:	f107 0308 	add.w	r3, r7, #8
 800750e:	4618      	mov	r0, r3
 8007510:	f7fe fce6 	bl	8005ee0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007518:	e01f      	b.n	800755a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800751a:	4b58      	ldr	r3, [pc, #352]	; (800767c <UART_SetConfig+0x9cc>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0320 	and.w	r3, r3, #32
 8007522:	2b00      	cmp	r3, #0
 8007524:	d009      	beq.n	800753a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007526:	4b55      	ldr	r3, [pc, #340]	; (800767c <UART_SetConfig+0x9cc>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	08db      	lsrs	r3, r3, #3
 800752c:	f003 0303 	and.w	r3, r3, #3
 8007530:	4a53      	ldr	r2, [pc, #332]	; (8007680 <UART_SetConfig+0x9d0>)
 8007532:	fa22 f303 	lsr.w	r3, r2, r3
 8007536:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007538:	e00f      	b.n	800755a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800753a:	4b51      	ldr	r3, [pc, #324]	; (8007680 <UART_SetConfig+0x9d0>)
 800753c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800753e:	e00c      	b.n	800755a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007540:	4b4c      	ldr	r3, [pc, #304]	; (8007674 <UART_SetConfig+0x9c4>)
 8007542:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007544:	e009      	b.n	800755a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800754a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800754c:	e005      	b.n	800755a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800754e:	2300      	movs	r3, #0
 8007550:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007558:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800755a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755c:	2b00      	cmp	r3, #0
 800755e:	f000 80ea 	beq.w	8007736 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007566:	4a44      	ldr	r2, [pc, #272]	; (8007678 <UART_SetConfig+0x9c8>)
 8007568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800756c:	461a      	mov	r2, r3
 800756e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007570:	fbb3 f3f2 	udiv	r3, r3, r2
 8007574:	005a      	lsls	r2, r3, #1
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	085b      	lsrs	r3, r3, #1
 800757c:	441a      	add	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	fbb2 f3f3 	udiv	r3, r2, r3
 8007586:	b29b      	uxth	r3, r3
 8007588:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800758a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758c:	2b0f      	cmp	r3, #15
 800758e:	d916      	bls.n	80075be <UART_SetConfig+0x90e>
 8007590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007596:	d212      	bcs.n	80075be <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759a:	b29b      	uxth	r3, r3
 800759c:	f023 030f 	bic.w	r3, r3, #15
 80075a0:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a4:	085b      	lsrs	r3, r3, #1
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	f003 0307 	and.w	r3, r3, #7
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80075b0:	4313      	orrs	r3, r2
 80075b2:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80075ba:	60da      	str	r2, [r3, #12]
 80075bc:	e0bb      	b.n	8007736 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80075c4:	e0b7      	b.n	8007736 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80075c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80075ca:	2b20      	cmp	r3, #32
 80075cc:	dc4a      	bgt.n	8007664 <UART_SetConfig+0x9b4>
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	f2c0 8086 	blt.w	80076e0 <UART_SetConfig+0xa30>
 80075d4:	2b20      	cmp	r3, #32
 80075d6:	f200 8083 	bhi.w	80076e0 <UART_SetConfig+0xa30>
 80075da:	a201      	add	r2, pc, #4	; (adr r2, 80075e0 <UART_SetConfig+0x930>)
 80075dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e0:	0800766b 	.word	0x0800766b
 80075e4:	08007685 	.word	0x08007685
 80075e8:	080076e1 	.word	0x080076e1
 80075ec:	080076e1 	.word	0x080076e1
 80075f0:	0800768d 	.word	0x0800768d
 80075f4:	080076e1 	.word	0x080076e1
 80075f8:	080076e1 	.word	0x080076e1
 80075fc:	080076e1 	.word	0x080076e1
 8007600:	0800769d 	.word	0x0800769d
 8007604:	080076e1 	.word	0x080076e1
 8007608:	080076e1 	.word	0x080076e1
 800760c:	080076e1 	.word	0x080076e1
 8007610:	080076e1 	.word	0x080076e1
 8007614:	080076e1 	.word	0x080076e1
 8007618:	080076e1 	.word	0x080076e1
 800761c:	080076e1 	.word	0x080076e1
 8007620:	080076ad 	.word	0x080076ad
 8007624:	080076e1 	.word	0x080076e1
 8007628:	080076e1 	.word	0x080076e1
 800762c:	080076e1 	.word	0x080076e1
 8007630:	080076e1 	.word	0x080076e1
 8007634:	080076e1 	.word	0x080076e1
 8007638:	080076e1 	.word	0x080076e1
 800763c:	080076e1 	.word	0x080076e1
 8007640:	080076e1 	.word	0x080076e1
 8007644:	080076e1 	.word	0x080076e1
 8007648:	080076e1 	.word	0x080076e1
 800764c:	080076e1 	.word	0x080076e1
 8007650:	080076e1 	.word	0x080076e1
 8007654:	080076e1 	.word	0x080076e1
 8007658:	080076e1 	.word	0x080076e1
 800765c:	080076e1 	.word	0x080076e1
 8007660:	080076d3 	.word	0x080076d3
 8007664:	2b40      	cmp	r3, #64	; 0x40
 8007666:	d037      	beq.n	80076d8 <UART_SetConfig+0xa28>
 8007668:	e03a      	b.n	80076e0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800766a:	f7fd fb63 	bl	8004d34 <HAL_RCC_GetPCLK1Freq>
 800766e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007670:	e03c      	b.n	80076ec <UART_SetConfig+0xa3c>
 8007672:	bf00      	nop
 8007674:	003d0900 	.word	0x003d0900
 8007678:	0800fcb8 	.word	0x0800fcb8
 800767c:	58024400 	.word	0x58024400
 8007680:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007684:	f7fd fb6c 	bl	8004d60 <HAL_RCC_GetPCLK2Freq>
 8007688:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800768a:	e02f      	b.n	80076ec <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800768c:	f107 0314 	add.w	r3, r7, #20
 8007690:	4618      	mov	r0, r3
 8007692:	f7fe fad1 	bl	8005c38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800769a:	e027      	b.n	80076ec <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800769c:	f107 0308 	add.w	r3, r7, #8
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7fe fc1d 	bl	8005ee0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80076aa:	e01f      	b.n	80076ec <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076ac:	4b2c      	ldr	r3, [pc, #176]	; (8007760 <UART_SetConfig+0xab0>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0320 	and.w	r3, r3, #32
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d009      	beq.n	80076cc <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80076b8:	4b29      	ldr	r3, [pc, #164]	; (8007760 <UART_SetConfig+0xab0>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	08db      	lsrs	r3, r3, #3
 80076be:	f003 0303 	and.w	r3, r3, #3
 80076c2:	4a28      	ldr	r2, [pc, #160]	; (8007764 <UART_SetConfig+0xab4>)
 80076c4:	fa22 f303 	lsr.w	r3, r2, r3
 80076c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80076ca:	e00f      	b.n	80076ec <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80076cc:	4b25      	ldr	r3, [pc, #148]	; (8007764 <UART_SetConfig+0xab4>)
 80076ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80076d0:	e00c      	b.n	80076ec <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80076d2:	4b25      	ldr	r3, [pc, #148]	; (8007768 <UART_SetConfig+0xab8>)
 80076d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80076d6:	e009      	b.n	80076ec <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80076de:	e005      	b.n	80076ec <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80076e0:	2300      	movs	r3, #0
 80076e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80076ea:	bf00      	nop
    }

    if (pclk != 0U)
 80076ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d021      	beq.n	8007736 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f6:	4a1d      	ldr	r2, [pc, #116]	; (800776c <UART_SetConfig+0xabc>)
 80076f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076fc:	461a      	mov	r2, r3
 80076fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007700:	fbb3 f2f2 	udiv	r2, r3, r2
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	085b      	lsrs	r3, r3, #1
 800770a:	441a      	add	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	fbb2 f3f3 	udiv	r3, r2, r3
 8007714:	b29b      	uxth	r3, r3
 8007716:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771a:	2b0f      	cmp	r3, #15
 800771c:	d908      	bls.n	8007730 <UART_SetConfig+0xa80>
 800771e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007724:	d204      	bcs.n	8007730 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800772c:	60da      	str	r2, [r3, #12]
 800772e:	e002      	b.n	8007736 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2201      	movs	r2, #1
 800773a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007752:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007756:	4618      	mov	r0, r3
 8007758:	3738      	adds	r7, #56	; 0x38
 800775a:	46bd      	mov	sp, r7
 800775c:	bdb0      	pop	{r4, r5, r7, pc}
 800775e:	bf00      	nop
 8007760:	58024400 	.word	0x58024400
 8007764:	03d09000 	.word	0x03d09000
 8007768:	003d0900 	.word	0x003d0900
 800776c:	0800fcb8 	.word	0x0800fcb8

08007770 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777c:	f003 0301 	and.w	r3, r3, #1
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00a      	beq.n	800779a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	430a      	orrs	r2, r1
 8007798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779e:	f003 0302 	and.w	r3, r3, #2
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00a      	beq.n	80077bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	430a      	orrs	r2, r1
 80077ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c0:	f003 0304 	and.w	r3, r3, #4
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00a      	beq.n	80077de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	430a      	orrs	r2, r1
 80077dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e2:	f003 0308 	and.w	r3, r3, #8
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00a      	beq.n	8007800 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	430a      	orrs	r2, r1
 80077fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007804:	f003 0310 	and.w	r3, r3, #16
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00a      	beq.n	8007822 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	430a      	orrs	r2, r1
 8007820:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007826:	f003 0320 	and.w	r3, r3, #32
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00a      	beq.n	8007844 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	430a      	orrs	r2, r1
 8007842:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784c:	2b00      	cmp	r3, #0
 800784e:	d01a      	beq.n	8007886 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	430a      	orrs	r2, r1
 8007864:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800786a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800786e:	d10a      	bne.n	8007886 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	430a      	orrs	r2, r1
 8007884:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00a      	beq.n	80078a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	430a      	orrs	r2, r1
 80078a6:	605a      	str	r2, [r3, #4]
  }
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b086      	sub	sp, #24
 80078b8:	af02      	add	r7, sp, #8
 80078ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078c4:	f7fa fab6 	bl	8001e34 <HAL_GetTick>
 80078c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0308 	and.w	r3, r3, #8
 80078d4:	2b08      	cmp	r3, #8
 80078d6:	d10e      	bne.n	80078f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078dc:	9300      	str	r3, [sp, #0]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f82f 	bl	800794a <UART_WaitOnFlagUntilTimeout>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078f2:	2303      	movs	r3, #3
 80078f4:	e025      	b.n	8007942 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 0304 	and.w	r3, r3, #4
 8007900:	2b04      	cmp	r3, #4
 8007902:	d10e      	bne.n	8007922 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007904:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f819 	bl	800794a <UART_WaitOnFlagUntilTimeout>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d001      	beq.n	8007922 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e00f      	b.n	8007942 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2220      	movs	r2, #32
 8007926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2220      	movs	r2, #32
 800792e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b084      	sub	sp, #16
 800794e:	af00      	add	r7, sp, #0
 8007950:	60f8      	str	r0, [r7, #12]
 8007952:	60b9      	str	r1, [r7, #8]
 8007954:	603b      	str	r3, [r7, #0]
 8007956:	4613      	mov	r3, r2
 8007958:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800795a:	e062      	b.n	8007a22 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007962:	d05e      	beq.n	8007a22 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007964:	f7fa fa66 	bl	8001e34 <HAL_GetTick>
 8007968:	4602      	mov	r2, r0
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	69ba      	ldr	r2, [r7, #24]
 8007970:	429a      	cmp	r2, r3
 8007972:	d302      	bcc.n	800797a <UART_WaitOnFlagUntilTimeout+0x30>
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d11d      	bne.n	80079b6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007988:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	689a      	ldr	r2, [r3, #8]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f022 0201 	bic.w	r2, r2, #1
 8007998:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2220      	movs	r2, #32
 800799e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2220      	movs	r2, #32
 80079a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80079b2:	2303      	movs	r3, #3
 80079b4:	e045      	b.n	8007a42 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0304 	and.w	r3, r3, #4
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d02e      	beq.n	8007a22 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	69db      	ldr	r3, [r3, #28]
 80079ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079d2:	d126      	bne.n	8007a22 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079dc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80079ec:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	689a      	ldr	r2, [r3, #8]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f022 0201 	bic.w	r2, r2, #1
 80079fc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2220      	movs	r2, #32
 8007a02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2220      	movs	r2, #32
 8007a0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2220      	movs	r2, #32
 8007a12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	e00f      	b.n	8007a42 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	69da      	ldr	r2, [r3, #28]
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	bf0c      	ite	eq
 8007a32:	2301      	moveq	r3, #1
 8007a34:	2300      	movne	r3, #0
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	461a      	mov	r2, r3
 8007a3a:	79fb      	ldrb	r3, [r7, #7]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d08d      	beq.n	800795c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b085      	sub	sp, #20
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d101      	bne.n	8007a60 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	e027      	b.n	8007ab0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2224      	movs	r2, #36	; 0x24
 8007a6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f022 0201 	bic.w	r2, r2, #1
 8007a86:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a8e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3714      	adds	r7, #20
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d101      	bne.n	8007ad4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	e02d      	b.n	8007b30 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2224      	movs	r2, #36	; 0x24
 8007ae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f022 0201 	bic.w	r2, r2, #1
 8007afa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	683a      	ldr	r2, [r7, #0]
 8007b0c:	430a      	orrs	r2, r1
 8007b0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f84f 	bl	8007bb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2220      	movs	r2, #32
 8007b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d101      	bne.n	8007b50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	e02d      	b.n	8007bac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2224      	movs	r2, #36	; 0x24
 8007b5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f022 0201 	bic.w	r2, r2, #1
 8007b76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f811 	bl	8007bb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2220      	movs	r2, #32
 8007b9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d108      	bne.n	8007bd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007bd4:	e031      	b.n	8007c3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007bd6:	2310      	movs	r3, #16
 8007bd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007bda:	2310      	movs	r3, #16
 8007bdc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	0e5b      	lsrs	r3, r3, #25
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	f003 0307 	and.w	r3, r3, #7
 8007bec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	0f5b      	lsrs	r3, r3, #29
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	f003 0307 	and.w	r3, r3, #7
 8007bfc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bfe:	7bbb      	ldrb	r3, [r7, #14]
 8007c00:	7b3a      	ldrb	r2, [r7, #12]
 8007c02:	4911      	ldr	r1, [pc, #68]	; (8007c48 <UARTEx_SetNbDataToProcess+0x94>)
 8007c04:	5c8a      	ldrb	r2, [r1, r2]
 8007c06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c0a:	7b3a      	ldrb	r2, [r7, #12]
 8007c0c:	490f      	ldr	r1, [pc, #60]	; (8007c4c <UARTEx_SetNbDataToProcess+0x98>)
 8007c0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c10:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c14:	b29a      	uxth	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c1c:	7bfb      	ldrb	r3, [r7, #15]
 8007c1e:	7b7a      	ldrb	r2, [r7, #13]
 8007c20:	4909      	ldr	r1, [pc, #36]	; (8007c48 <UARTEx_SetNbDataToProcess+0x94>)
 8007c22:	5c8a      	ldrb	r2, [r1, r2]
 8007c24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c28:	7b7a      	ldrb	r2, [r7, #13]
 8007c2a:	4908      	ldr	r1, [pc, #32]	; (8007c4c <UARTEx_SetNbDataToProcess+0x98>)
 8007c2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007c3a:	bf00      	nop
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	0800fcd0 	.word	0x0800fcd0
 8007c4c:	0800fcd8 	.word	0x0800fcd8

08007c50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c50:	b084      	sub	sp, #16
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b084      	sub	sp, #16
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
 8007c5a:	f107 001c 	add.w	r0, r7, #28
 8007c5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d120      	bne.n	8007caa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	68da      	ldr	r2, [r3, #12]
 8007c78:	4b2a      	ldr	r3, [pc, #168]	; (8007d24 <USB_CoreInit+0xd4>)
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d105      	bne.n	8007c9e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fa60 	bl	8008164 <USB_CoreReset>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	73fb      	strb	r3, [r7, #15]
 8007ca8:	e01a      	b.n	8007ce0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 fa54 	bl	8008164 <USB_CoreReset>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d106      	bne.n	8007cd4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	639a      	str	r2, [r3, #56]	; 0x38
 8007cd2:	e005      	b.n	8007ce0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d116      	bne.n	8007d14 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007cf4:	4b0c      	ldr	r3, [pc, #48]	; (8007d28 <USB_CoreInit+0xd8>)
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	f043 0206 	orr.w	r2, r3, #6
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	f043 0220 	orr.w	r2, r3, #32
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d20:	b004      	add	sp, #16
 8007d22:	4770      	bx	lr
 8007d24:	ffbdffbf 	.word	0xffbdffbf
 8007d28:	03ee0000 	.word	0x03ee0000

08007d2c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	f023 0201 	bic.w	r2, r3, #1
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	370c      	adds	r7, #12
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b082      	sub	sp, #8
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
 8007d56:	460b      	mov	r3, r1
 8007d58:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d66:	78fb      	ldrb	r3, [r7, #3]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d106      	bne.n	8007d7a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	60da      	str	r2, [r3, #12]
 8007d78:	e00b      	b.n	8007d92 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d7a:	78fb      	ldrb	r3, [r7, #3]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d106      	bne.n	8007d8e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	60da      	str	r2, [r3, #12]
 8007d8c:	e001      	b.n	8007d92 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e003      	b.n	8007d9a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007d92:	2032      	movs	r0, #50	; 0x32
 8007d94:	f7fa f85a 	bl	8001e4c <HAL_Delay>

  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3708      	adds	r7, #8
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
	...

08007da4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007da4:	b084      	sub	sp, #16
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b086      	sub	sp, #24
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007db2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007db6:	2300      	movs	r3, #0
 8007db8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	613b      	str	r3, [r7, #16]
 8007dc2:	e009      	b.n	8007dd8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	3340      	adds	r3, #64	; 0x40
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	4413      	add	r3, r2
 8007dce:	2200      	movs	r2, #0
 8007dd0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	613b      	str	r3, [r7, #16]
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	2b0e      	cmp	r3, #14
 8007ddc:	d9f2      	bls.n	8007dc4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d11c      	bne.n	8007e1e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007df2:	f043 0302 	orr.w	r3, r3, #2
 8007df6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dfc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	601a      	str	r2, [r3, #0]
 8007e1c:	e005      	b.n	8007e2a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e30:	461a      	mov	r2, r3
 8007e32:	2300      	movs	r3, #0
 8007e34:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e44:	461a      	mov	r2, r3
 8007e46:	680b      	ldr	r3, [r1, #0]
 8007e48:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d10c      	bne.n	8007e6a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d104      	bne.n	8007e60 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007e56:	2100      	movs	r1, #0
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 f949 	bl	80080f0 <USB_SetDevSpeed>
 8007e5e:	e008      	b.n	8007e72 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007e60:	2101      	movs	r1, #1
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 f944 	bl	80080f0 <USB_SetDevSpeed>
 8007e68:	e003      	b.n	8007e72 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007e6a:	2103      	movs	r1, #3
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 f93f 	bl	80080f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e72:	2110      	movs	r1, #16
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f8f3 	bl	8008060 <USB_FlushTxFifo>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d001      	beq.n	8007e84 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 f911 	bl	80080ac <USB_FlushRxFifo>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d001      	beq.n	8007e94 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007eb8:	2300      	movs	r3, #0
 8007eba:	613b      	str	r3, [r7, #16]
 8007ebc:	e043      	b.n	8007f46 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	015a      	lsls	r2, r3, #5
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ed0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ed4:	d118      	bne.n	8007f08 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d10a      	bne.n	8007ef2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	015a      	lsls	r2, r3, #5
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee8:	461a      	mov	r2, r3
 8007eea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007eee:	6013      	str	r3, [r2, #0]
 8007ef0:	e013      	b.n	8007f1a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	015a      	lsls	r2, r3, #5
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	4413      	add	r3, r2
 8007efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007efe:	461a      	mov	r2, r3
 8007f00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f04:	6013      	str	r3, [r2, #0]
 8007f06:	e008      	b.n	8007f1a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	015a      	lsls	r2, r3, #5
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	4413      	add	r3, r2
 8007f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f14:	461a      	mov	r2, r3
 8007f16:	2300      	movs	r3, #0
 8007f18:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	015a      	lsls	r2, r3, #5
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	4413      	add	r3, r2
 8007f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f26:	461a      	mov	r2, r3
 8007f28:	2300      	movs	r3, #0
 8007f2a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	015a      	lsls	r2, r3, #5
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4413      	add	r3, r2
 8007f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f38:	461a      	mov	r2, r3
 8007f3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	3301      	adds	r3, #1
 8007f44:	613b      	str	r3, [r7, #16]
 8007f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f48:	693a      	ldr	r2, [r7, #16]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d3b7      	bcc.n	8007ebe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f4e:	2300      	movs	r3, #0
 8007f50:	613b      	str	r3, [r7, #16]
 8007f52:	e043      	b.n	8007fdc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	015a      	lsls	r2, r3, #5
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f6a:	d118      	bne.n	8007f9e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d10a      	bne.n	8007f88 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	015a      	lsls	r2, r3, #5
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	4413      	add	r3, r2
 8007f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7e:	461a      	mov	r2, r3
 8007f80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f84:	6013      	str	r3, [r2, #0]
 8007f86:	e013      	b.n	8007fb0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	015a      	lsls	r2, r3, #5
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	4413      	add	r3, r2
 8007f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f94:	461a      	mov	r2, r3
 8007f96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f9a:	6013      	str	r3, [r2, #0]
 8007f9c:	e008      	b.n	8007fb0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	015a      	lsls	r2, r3, #5
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007faa:	461a      	mov	r2, r3
 8007fac:	2300      	movs	r3, #0
 8007fae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	015a      	lsls	r2, r3, #5
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	015a      	lsls	r2, r3, #5
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	4413      	add	r3, r2
 8007fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007fd4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	613b      	str	r3, [r7, #16]
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d3b7      	bcc.n	8007f54 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ff2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ff6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008004:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008008:	2b00      	cmp	r3, #0
 800800a:	d105      	bne.n	8008018 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	f043 0210 	orr.w	r2, r3, #16
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	699a      	ldr	r2, [r3, #24]
 800801c:	4b0e      	ldr	r3, [pc, #56]	; (8008058 <USB_DevInit+0x2b4>)
 800801e:	4313      	orrs	r3, r2
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008026:	2b00      	cmp	r3, #0
 8008028:	d005      	beq.n	8008036 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	699b      	ldr	r3, [r3, #24]
 800802e:	f043 0208 	orr.w	r2, r3, #8
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008038:	2b01      	cmp	r3, #1
 800803a:	d105      	bne.n	8008048 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	699a      	ldr	r2, [r3, #24]
 8008040:	4b06      	ldr	r3, [pc, #24]	; (800805c <USB_DevInit+0x2b8>)
 8008042:	4313      	orrs	r3, r2
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008048:	7dfb      	ldrb	r3, [r7, #23]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3718      	adds	r7, #24
 800804e:	46bd      	mov	sp, r7
 8008050:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008054:	b004      	add	sp, #16
 8008056:	4770      	bx	lr
 8008058:	803c3800 	.word	0x803c3800
 800805c:	40000004 	.word	0x40000004

08008060 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008060:	b480      	push	{r7}
 8008062:	b085      	sub	sp, #20
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800806a:	2300      	movs	r3, #0
 800806c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	019b      	lsls	r3, r3, #6
 8008072:	f043 0220 	orr.w	r2, r3, #32
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	3301      	adds	r3, #1
 800807e:	60fb      	str	r3, [r7, #12]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	4a09      	ldr	r2, [pc, #36]	; (80080a8 <USB_FlushTxFifo+0x48>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d901      	bls.n	800808c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	e006      	b.n	800809a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	f003 0320 	and.w	r3, r3, #32
 8008094:	2b20      	cmp	r3, #32
 8008096:	d0f0      	beq.n	800807a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	00030d40 	.word	0x00030d40

080080ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b085      	sub	sp, #20
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80080b4:	2300      	movs	r3, #0
 80080b6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2210      	movs	r2, #16
 80080bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	3301      	adds	r3, #1
 80080c2:	60fb      	str	r3, [r7, #12]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	4a09      	ldr	r2, [pc, #36]	; (80080ec <USB_FlushRxFifo+0x40>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d901      	bls.n	80080d0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e006      	b.n	80080de <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	f003 0310 	and.w	r3, r3, #16
 80080d8:	2b10      	cmp	r3, #16
 80080da:	d0f0      	beq.n	80080be <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3714      	adds	r7, #20
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	00030d40 	.word	0x00030d40

080080f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	460b      	mov	r3, r1
 80080fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	78fb      	ldrb	r3, [r7, #3]
 800810a:	68f9      	ldr	r1, [r7, #12]
 800810c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008110:	4313      	orrs	r3, r2
 8008112:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3714      	adds	r7, #20
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr

08008122 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008122:	b480      	push	{r7}
 8008124:	b085      	sub	sp, #20
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800813c:	f023 0303 	bic.w	r3, r3, #3
 8008140:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008150:	f043 0302 	orr.w	r3, r3, #2
 8008154:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3714      	adds	r7, #20
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800816c:	2300      	movs	r3, #0
 800816e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	3301      	adds	r3, #1
 8008174:	60fb      	str	r3, [r7, #12]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	4a13      	ldr	r2, [pc, #76]	; (80081c8 <USB_CoreReset+0x64>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d901      	bls.n	8008182 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e01b      	b.n	80081ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	2b00      	cmp	r3, #0
 8008188:	daf2      	bge.n	8008170 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800818a:	2300      	movs	r3, #0
 800818c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	f043 0201 	orr.w	r2, r3, #1
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	3301      	adds	r3, #1
 800819e:	60fb      	str	r3, [r7, #12]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4a09      	ldr	r2, [pc, #36]	; (80081c8 <USB_CoreReset+0x64>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d901      	bls.n	80081ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80081a8:	2303      	movs	r3, #3
 80081aa:	e006      	b.n	80081ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	f003 0301 	and.w	r3, r3, #1
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d0f0      	beq.n	800819a <USB_CoreReset+0x36>

  return HAL_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	00030d40 	.word	0x00030d40

080081cc <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80081cc:	b480      	push	{r7}
 80081ce:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80081d0:	bf00      	nop
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
	...

080081dc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b086      	sub	sp, #24
 80081e0:	af04      	add	r7, sp, #16
 80081e2:	4603      	mov	r3, r0
 80081e4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80081e6:	f04f 33ff 	mov.w	r3, #4294967295
 80081ea:	9302      	str	r3, [sp, #8]
 80081ec:	2301      	movs	r3, #1
 80081ee:	9301      	str	r3, [sp, #4]
 80081f0:	1dfb      	adds	r3, r7, #7
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	2301      	movs	r3, #1
 80081f6:	2200      	movs	r2, #0
 80081f8:	2178      	movs	r1, #120	; 0x78
 80081fa:	4803      	ldr	r0, [pc, #12]	; (8008208 <ssd1306_WriteCommand+0x2c>)
 80081fc:	f7fb f8ea 	bl	80033d4 <HAL_I2C_Mem_Write>
}
 8008200:	bf00      	nop
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	240006e0 	.word	0x240006e0

0800820c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b086      	sub	sp, #24
 8008210:	af04      	add	r7, sp, #16
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	b29b      	uxth	r3, r3
 800821a:	f04f 32ff 	mov.w	r2, #4294967295
 800821e:	9202      	str	r2, [sp, #8]
 8008220:	9301      	str	r3, [sp, #4]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	2301      	movs	r3, #1
 8008228:	2240      	movs	r2, #64	; 0x40
 800822a:	2178      	movs	r1, #120	; 0x78
 800822c:	4803      	ldr	r0, [pc, #12]	; (800823c <ssd1306_WriteData+0x30>)
 800822e:	f7fb f8d1 	bl	80033d4 <HAL_I2C_Mem_Write>
}
 8008232:	bf00      	nop
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	240006e0 	.word	0x240006e0

08008240 <ssd1306_Init>:
	return ret;
}

// Initialize the oled screen
void ssd1306_Init(void)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8008244:	f7ff ffc2 	bl	80081cc <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8008248:	2064      	movs	r0, #100	; 0x64
 800824a:	f7f9 fdff 	bl	8001e4c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800824e:	2000      	movs	r0, #0
 8008250:	f000 f9e6 	bl	8008620 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8008254:	2020      	movs	r0, #32
 8008256:	f7ff ffc1 	bl	80081dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800825a:	2000      	movs	r0, #0
 800825c:	f7ff ffbe 	bl	80081dc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8008260:	20b0      	movs	r0, #176	; 0xb0
 8008262:	f7ff ffbb 	bl	80081dc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8008266:	20c8      	movs	r0, #200	; 0xc8
 8008268:	f7ff ffb8 	bl	80081dc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800826c:	2000      	movs	r0, #0
 800826e:	f7ff ffb5 	bl	80081dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8008272:	2010      	movs	r0, #16
 8008274:	f7ff ffb2 	bl	80081dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8008278:	2040      	movs	r0, #64	; 0x40
 800827a:	f7ff ffaf 	bl	80081dc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800827e:	20ff      	movs	r0, #255	; 0xff
 8008280:	f000 f9ba 	bl	80085f8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8008284:	20a1      	movs	r0, #161	; 0xa1
 8008286:	f7ff ffa9 	bl	80081dc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800828a:	20a6      	movs	r0, #166	; 0xa6
 800828c:	f7ff ffa6 	bl	80081dc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8008290:	20a8      	movs	r0, #168	; 0xa8
 8008292:	f7ff ffa3 	bl	80081dc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8008296:	201f      	movs	r0, #31
 8008298:	f7ff ffa0 	bl	80081dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800829c:	20a4      	movs	r0, #164	; 0xa4
 800829e:	f7ff ff9d 	bl	80081dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80082a2:	20d3      	movs	r0, #211	; 0xd3
 80082a4:	f7ff ff9a 	bl	80081dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80082a8:	2000      	movs	r0, #0
 80082aa:	f7ff ff97 	bl	80081dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80082ae:	20d5      	movs	r0, #213	; 0xd5
 80082b0:	f7ff ff94 	bl	80081dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80082b4:	20f0      	movs	r0, #240	; 0xf0
 80082b6:	f7ff ff91 	bl	80081dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80082ba:	20d9      	movs	r0, #217	; 0xd9
 80082bc:	f7ff ff8e 	bl	80081dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80082c0:	2022      	movs	r0, #34	; 0x22
 80082c2:	f7ff ff8b 	bl	80081dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80082c6:	20da      	movs	r0, #218	; 0xda
 80082c8:	f7ff ff88 	bl	80081dc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 80082cc:	2002      	movs	r0, #2
 80082ce:	f7ff ff85 	bl	80081dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80082d2:	20db      	movs	r0, #219	; 0xdb
 80082d4:	f7ff ff82 	bl	80081dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80082d8:	2020      	movs	r0, #32
 80082da:	f7ff ff7f 	bl	80081dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80082de:	208d      	movs	r0, #141	; 0x8d
 80082e0:	f7ff ff7c 	bl	80081dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80082e4:	2014      	movs	r0, #20
 80082e6:	f7ff ff79 	bl	80081dc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80082ea:	2001      	movs	r0, #1
 80082ec:	f000 f998 	bl	8008620 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80082f0:	2000      	movs	r0, #0
 80082f2:	f000 f80f 	bl	8008314 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80082f6:	f000 f831 	bl	800835c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80082fa:	4b05      	ldr	r3, [pc, #20]	; (8008310 <ssd1306_Init+0xd0>)
 80082fc:	2200      	movs	r2, #0
 80082fe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8008300:	4b03      	ldr	r3, [pc, #12]	; (8008310 <ssd1306_Init+0xd0>)
 8008302:	2200      	movs	r2, #0
 8008304:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8008306:	4b02      	ldr	r3, [pc, #8]	; (8008310 <ssd1306_Init+0xd0>)
 8008308:	2201      	movs	r2, #1
 800830a:	715a      	strb	r2, [r3, #5]
}
 800830c:	bf00      	nop
 800830e:	bd80      	pop	{r7, pc}
 8008310:	2400057c 	.word	0x2400057c

08008314 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	4603      	mov	r3, r0
 800831c:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800831e:	2300      	movs	r3, #0
 8008320:	60fb      	str	r3, [r7, #12]
 8008322:	e00d      	b.n	8008340 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8008324:	79fb      	ldrb	r3, [r7, #7]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d101      	bne.n	800832e <ssd1306_Fill+0x1a>
 800832a:	2100      	movs	r1, #0
 800832c:	e000      	b.n	8008330 <ssd1306_Fill+0x1c>
 800832e:	21ff      	movs	r1, #255	; 0xff
 8008330:	4a09      	ldr	r2, [pc, #36]	; (8008358 <ssd1306_Fill+0x44>)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	4413      	add	r3, r2
 8008336:	460a      	mov	r2, r1
 8008338:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	3301      	adds	r3, #1
 800833e:	60fb      	str	r3, [r7, #12]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008346:	d3ed      	bcc.n	8008324 <ssd1306_Fill+0x10>
    }
}
 8008348:	bf00      	nop
 800834a:	bf00      	nop
 800834c:	3714      	adds	r7, #20
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	2400037c 	.word	0x2400037c

0800835c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8008362:	2300      	movs	r3, #0
 8008364:	71fb      	strb	r3, [r7, #7]
 8008366:	e016      	b.n	8008396 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8008368:	79fb      	ldrb	r3, [r7, #7]
 800836a:	3b50      	subs	r3, #80	; 0x50
 800836c:	b2db      	uxtb	r3, r3
 800836e:	4618      	mov	r0, r3
 8008370:	f7ff ff34 	bl	80081dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8008374:	2000      	movs	r0, #0
 8008376:	f7ff ff31 	bl	80081dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800837a:	2010      	movs	r0, #16
 800837c:	f7ff ff2e 	bl	80081dc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8008380:	79fb      	ldrb	r3, [r7, #7]
 8008382:	01db      	lsls	r3, r3, #7
 8008384:	4a08      	ldr	r2, [pc, #32]	; (80083a8 <ssd1306_UpdateScreen+0x4c>)
 8008386:	4413      	add	r3, r2
 8008388:	2180      	movs	r1, #128	; 0x80
 800838a:	4618      	mov	r0, r3
 800838c:	f7ff ff3e 	bl	800820c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8008390:	79fb      	ldrb	r3, [r7, #7]
 8008392:	3301      	adds	r3, #1
 8008394:	71fb      	strb	r3, [r7, #7]
 8008396:	79fb      	ldrb	r3, [r7, #7]
 8008398:	2b03      	cmp	r3, #3
 800839a:	d9e5      	bls.n	8008368 <ssd1306_UpdateScreen+0xc>
    }
}
 800839c:	bf00      	nop
 800839e:	bf00      	nop
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	2400037c 	.word	0x2400037c

080083ac <ssd1306_DrawPixel>:
//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	4603      	mov	r3, r0
 80083b4:	71fb      	strb	r3, [r7, #7]
 80083b6:	460b      	mov	r3, r1
 80083b8:	71bb      	strb	r3, [r7, #6]
 80083ba:	4613      	mov	r3, r2
 80083bc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 80083be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	db48      	blt.n	8008458 <ssd1306_DrawPixel+0xac>
 80083c6:	79bb      	ldrb	r3, [r7, #6]
 80083c8:	2b1f      	cmp	r3, #31
 80083ca:	d845      	bhi.n	8008458 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted)
 80083cc:	4b25      	ldr	r3, [pc, #148]	; (8008464 <ssd1306_DrawPixel+0xb8>)
 80083ce:	791b      	ldrb	r3, [r3, #4]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d006      	beq.n	80083e2 <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 80083d4:	797b      	ldrb	r3, [r7, #5]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	bf0c      	ite	eq
 80083da:	2301      	moveq	r3, #1
 80083dc:	2300      	movne	r3, #0
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White)
 80083e2:	797b      	ldrb	r3, [r7, #5]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d11a      	bne.n	800841e <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80083e8:	79fa      	ldrb	r2, [r7, #7]
 80083ea:	79bb      	ldrb	r3, [r7, #6]
 80083ec:	08db      	lsrs	r3, r3, #3
 80083ee:	b2d8      	uxtb	r0, r3
 80083f0:	4603      	mov	r3, r0
 80083f2:	01db      	lsls	r3, r3, #7
 80083f4:	4413      	add	r3, r2
 80083f6:	4a1c      	ldr	r2, [pc, #112]	; (8008468 <ssd1306_DrawPixel+0xbc>)
 80083f8:	5cd3      	ldrb	r3, [r2, r3]
 80083fa:	b25a      	sxtb	r2, r3
 80083fc:	79bb      	ldrb	r3, [r7, #6]
 80083fe:	f003 0307 	and.w	r3, r3, #7
 8008402:	2101      	movs	r1, #1
 8008404:	fa01 f303 	lsl.w	r3, r1, r3
 8008408:	b25b      	sxtb	r3, r3
 800840a:	4313      	orrs	r3, r2
 800840c:	b259      	sxtb	r1, r3
 800840e:	79fa      	ldrb	r2, [r7, #7]
 8008410:	4603      	mov	r3, r0
 8008412:	01db      	lsls	r3, r3, #7
 8008414:	4413      	add	r3, r2
 8008416:	b2c9      	uxtb	r1, r1
 8008418:	4a13      	ldr	r2, [pc, #76]	; (8008468 <ssd1306_DrawPixel+0xbc>)
 800841a:	54d1      	strb	r1, [r2, r3]
 800841c:	e01d      	b.n	800845a <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800841e:	79fa      	ldrb	r2, [r7, #7]
 8008420:	79bb      	ldrb	r3, [r7, #6]
 8008422:	08db      	lsrs	r3, r3, #3
 8008424:	b2d8      	uxtb	r0, r3
 8008426:	4603      	mov	r3, r0
 8008428:	01db      	lsls	r3, r3, #7
 800842a:	4413      	add	r3, r2
 800842c:	4a0e      	ldr	r2, [pc, #56]	; (8008468 <ssd1306_DrawPixel+0xbc>)
 800842e:	5cd3      	ldrb	r3, [r2, r3]
 8008430:	b25a      	sxtb	r2, r3
 8008432:	79bb      	ldrb	r3, [r7, #6]
 8008434:	f003 0307 	and.w	r3, r3, #7
 8008438:	2101      	movs	r1, #1
 800843a:	fa01 f303 	lsl.w	r3, r1, r3
 800843e:	b25b      	sxtb	r3, r3
 8008440:	43db      	mvns	r3, r3
 8008442:	b25b      	sxtb	r3, r3
 8008444:	4013      	ands	r3, r2
 8008446:	b259      	sxtb	r1, r3
 8008448:	79fa      	ldrb	r2, [r7, #7]
 800844a:	4603      	mov	r3, r0
 800844c:	01db      	lsls	r3, r3, #7
 800844e:	4413      	add	r3, r2
 8008450:	b2c9      	uxtb	r1, r1
 8008452:	4a05      	ldr	r2, [pc, #20]	; (8008468 <ssd1306_DrawPixel+0xbc>)
 8008454:	54d1      	strb	r1, [r2, r3]
 8008456:	e000      	b.n	800845a <ssd1306_DrawPixel+0xae>
        return;
 8008458:	bf00      	nop
    }
}
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr
 8008464:	2400057c 	.word	0x2400057c
 8008468:	2400037c 	.word	0x2400037c

0800846c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800846c:	b590      	push	{r4, r7, lr}
 800846e:	b089      	sub	sp, #36	; 0x24
 8008470:	af00      	add	r7, sp, #0
 8008472:	4604      	mov	r4, r0
 8008474:	1d38      	adds	r0, r7, #4
 8008476:	e880 0006 	stmia.w	r0, {r1, r2}
 800847a:	461a      	mov	r2, r3
 800847c:	4623      	mov	r3, r4
 800847e:	73fb      	strb	r3, [r7, #15]
 8008480:	4613      	mov	r3, r2
 8008482:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8008484:	7bfb      	ldrb	r3, [r7, #15]
 8008486:	2b1f      	cmp	r3, #31
 8008488:	d902      	bls.n	8008490 <ssd1306_WriteChar+0x24>
 800848a:	7bfb      	ldrb	r3, [r7, #15]
 800848c:	2b7e      	cmp	r3, #126	; 0x7e
 800848e:	d901      	bls.n	8008494 <ssd1306_WriteChar+0x28>
        return 0;
 8008490:	2300      	movs	r3, #0
 8008492:	e06d      	b.n	8008570 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8008494:	4b38      	ldr	r3, [pc, #224]	; (8008578 <ssd1306_WriteChar+0x10c>)
 8008496:	881b      	ldrh	r3, [r3, #0]
 8008498:	461a      	mov	r2, r3
 800849a:	793b      	ldrb	r3, [r7, #4]
 800849c:	4413      	add	r3, r2
 800849e:	2b80      	cmp	r3, #128	; 0x80
 80084a0:	dc06      	bgt.n	80084b0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80084a2:	4b35      	ldr	r3, [pc, #212]	; (8008578 <ssd1306_WriteChar+0x10c>)
 80084a4:	885b      	ldrh	r3, [r3, #2]
 80084a6:	461a      	mov	r2, r3
 80084a8:	797b      	ldrb	r3, [r7, #5]
 80084aa:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80084ac:	2b20      	cmp	r3, #32
 80084ae:	dd01      	ble.n	80084b4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80084b0:	2300      	movs	r3, #0
 80084b2:	e05d      	b.n	8008570 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++)
 80084b4:	2300      	movs	r3, #0
 80084b6:	61fb      	str	r3, [r7, #28]
 80084b8:	e04c      	b.n	8008554 <ssd1306_WriteChar+0xe8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80084ba:	68ba      	ldr	r2, [r7, #8]
 80084bc:	7bfb      	ldrb	r3, [r7, #15]
 80084be:	3b20      	subs	r3, #32
 80084c0:	7979      	ldrb	r1, [r7, #5]
 80084c2:	fb01 f303 	mul.w	r3, r1, r3
 80084c6:	4619      	mov	r1, r3
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	440b      	add	r3, r1
 80084cc:	005b      	lsls	r3, r3, #1
 80084ce:	4413      	add	r3, r2
 80084d0:	881b      	ldrh	r3, [r3, #0]
 80084d2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++)
 80084d4:	2300      	movs	r3, #0
 80084d6:	61bb      	str	r3, [r7, #24]
 80084d8:	e034      	b.n	8008544 <ssd1306_WriteChar+0xd8>
        {
            if((b << j) & 0x8000)
 80084da:	697a      	ldr	r2, [r7, #20]
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	fa02 f303 	lsl.w	r3, r2, r3
 80084e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d012      	beq.n	8008510 <ssd1306_WriteChar+0xa4>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80084ea:	4b23      	ldr	r3, [pc, #140]	; (8008578 <ssd1306_WriteChar+0x10c>)
 80084ec:	881b      	ldrh	r3, [r3, #0]
 80084ee:	b2da      	uxtb	r2, r3
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	4413      	add	r3, r2
 80084f6:	b2d8      	uxtb	r0, r3
 80084f8:	4b1f      	ldr	r3, [pc, #124]	; (8008578 <ssd1306_WriteChar+0x10c>)
 80084fa:	885b      	ldrh	r3, [r3, #2]
 80084fc:	b2da      	uxtb	r2, r3
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	b2db      	uxtb	r3, r3
 8008502:	4413      	add	r3, r2
 8008504:	b2db      	uxtb	r3, r3
 8008506:	7bba      	ldrb	r2, [r7, #14]
 8008508:	4619      	mov	r1, r3
 800850a:	f7ff ff4f 	bl	80083ac <ssd1306_DrawPixel>
 800850e:	e016      	b.n	800853e <ssd1306_WriteChar+0xd2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8008510:	4b19      	ldr	r3, [pc, #100]	; (8008578 <ssd1306_WriteChar+0x10c>)
 8008512:	881b      	ldrh	r3, [r3, #0]
 8008514:	b2da      	uxtb	r2, r3
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	b2db      	uxtb	r3, r3
 800851a:	4413      	add	r3, r2
 800851c:	b2d8      	uxtb	r0, r3
 800851e:	4b16      	ldr	r3, [pc, #88]	; (8008578 <ssd1306_WriteChar+0x10c>)
 8008520:	885b      	ldrh	r3, [r3, #2]
 8008522:	b2da      	uxtb	r2, r3
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	b2db      	uxtb	r3, r3
 8008528:	4413      	add	r3, r2
 800852a:	b2d9      	uxtb	r1, r3
 800852c:	7bbb      	ldrb	r3, [r7, #14]
 800852e:	2b00      	cmp	r3, #0
 8008530:	bf0c      	ite	eq
 8008532:	2301      	moveq	r3, #1
 8008534:	2300      	movne	r3, #0
 8008536:	b2db      	uxtb	r3, r3
 8008538:	461a      	mov	r2, r3
 800853a:	f7ff ff37 	bl	80083ac <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++)
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	3301      	adds	r3, #1
 8008542:	61bb      	str	r3, [r7, #24]
 8008544:	793b      	ldrb	r3, [r7, #4]
 8008546:	461a      	mov	r2, r3
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	4293      	cmp	r3, r2
 800854c:	d3c5      	bcc.n	80084da <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++)
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	3301      	adds	r3, #1
 8008552:	61fb      	str	r3, [r7, #28]
 8008554:	797b      	ldrb	r3, [r7, #5]
 8008556:	461a      	mov	r2, r3
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	4293      	cmp	r3, r2
 800855c:	d3ad      	bcc.n	80084ba <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800855e:	4b06      	ldr	r3, [pc, #24]	; (8008578 <ssd1306_WriteChar+0x10c>)
 8008560:	881a      	ldrh	r2, [r3, #0]
 8008562:	793b      	ldrb	r3, [r7, #4]
 8008564:	b29b      	uxth	r3, r3
 8008566:	4413      	add	r3, r2
 8008568:	b29a      	uxth	r2, r3
 800856a:	4b03      	ldr	r3, [pc, #12]	; (8008578 <ssd1306_WriteChar+0x10c>)
 800856c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800856e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008570:	4618      	mov	r0, r3
 8008572:	3724      	adds	r7, #36	; 0x24
 8008574:	46bd      	mov	sp, r7
 8008576:	bd90      	pop	{r4, r7, pc}
 8008578:	2400057c 	.word	0x2400057c

0800857c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	1d38      	adds	r0, r7, #4
 8008586:	e880 0006 	stmia.w	r0, {r1, r2}
 800858a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 800858c:	e012      	b.n	80085b4 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	7818      	ldrb	r0, [r3, #0]
 8008592:	78fb      	ldrb	r3, [r7, #3]
 8008594:	1d3a      	adds	r2, r7, #4
 8008596:	ca06      	ldmia	r2, {r1, r2}
 8008598:	f7ff ff68 	bl	800846c <ssd1306_WriteChar>
 800859c:	4603      	mov	r3, r0
 800859e:	461a      	mov	r2, r3
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d002      	beq.n	80085ae <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	e008      	b.n	80085c0 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	3301      	adds	r3, #1
 80085b2:	60fb      	str	r3, [r7, #12]
    while (*str)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d1e8      	bne.n	800858e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	781b      	ldrb	r3, [r3, #0]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	4603      	mov	r3, r0
 80085d0:	460a      	mov	r2, r1
 80085d2:	71fb      	strb	r3, [r7, #7]
 80085d4:	4613      	mov	r3, r2
 80085d6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80085d8:	79fb      	ldrb	r3, [r7, #7]
 80085da:	b29a      	uxth	r2, r3
 80085dc:	4b05      	ldr	r3, [pc, #20]	; (80085f4 <ssd1306_SetCursor+0x2c>)
 80085de:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80085e0:	79bb      	ldrb	r3, [r7, #6]
 80085e2:	b29a      	uxth	r2, r3
 80085e4:	4b03      	ldr	r3, [pc, #12]	; (80085f4 <ssd1306_SetCursor+0x2c>)
 80085e6:	805a      	strh	r2, [r3, #2]
}
 80085e8:	bf00      	nop
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr
 80085f4:	2400057c 	.word	0x2400057c

080085f8 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	4603      	mov	r3, r0
 8008600:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8008602:	2381      	movs	r3, #129	; 0x81
 8008604:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8008606:	7bfb      	ldrb	r3, [r7, #15]
 8008608:	4618      	mov	r0, r3
 800860a:	f7ff fde7 	bl	80081dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800860e:	79fb      	ldrb	r3, [r7, #7]
 8008610:	4618      	mov	r0, r3
 8008612:	f7ff fde3 	bl	80081dc <ssd1306_WriteCommand>
}
 8008616:	bf00      	nop
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
	...

08008620 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	4603      	mov	r3, r0
 8008628:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800862a:	79fb      	ldrb	r3, [r7, #7]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d005      	beq.n	800863c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8008630:	23af      	movs	r3, #175	; 0xaf
 8008632:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8008634:	4b08      	ldr	r3, [pc, #32]	; (8008658 <ssd1306_SetDisplayOn+0x38>)
 8008636:	2201      	movs	r2, #1
 8008638:	719a      	strb	r2, [r3, #6]
 800863a:	e004      	b.n	8008646 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800863c:	23ae      	movs	r3, #174	; 0xae
 800863e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8008640:	4b05      	ldr	r3, [pc, #20]	; (8008658 <ssd1306_SetDisplayOn+0x38>)
 8008642:	2200      	movs	r2, #0
 8008644:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8008646:	7bfb      	ldrb	r3, [r7, #15]
 8008648:	4618      	mov	r0, r3
 800864a:	f7ff fdc7 	bl	80081dc <ssd1306_WriteCommand>
}
 800864e:	bf00      	nop
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	2400057c 	.word	0x2400057c

0800865c <ssd1306_TestBorder>:
#include <string.h>
#include <stdio.h>
#include "ssd1306.h"
#include "ssd1306_tests.h"

void ssd1306_TestBorder() {
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 8008662:	2000      	movs	r0, #0
 8008664:	f7ff fe56 	bl	8008314 <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 8008668:	f7f9 fbe4 	bl	8001e34 <HAL_GetTick>
 800866c:	60b8      	str	r0, [r7, #8]
    uint32_t end = start;
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	607b      	str	r3, [r7, #4]
    uint8_t x = 0;
 8008672:	2300      	movs	r3, #0
 8008674:	73fb      	strb	r3, [r7, #15]
    uint8_t y = 0;
 8008676:	2300      	movs	r3, #0
 8008678:	73bb      	strb	r3, [r7, #14]
    do {
        ssd1306_DrawPixel(x, y, Black);
 800867a:	7bb9      	ldrb	r1, [r7, #14]
 800867c:	7bfb      	ldrb	r3, [r7, #15]
 800867e:	2200      	movs	r2, #0
 8008680:	4618      	mov	r0, r3
 8008682:	f7ff fe93 	bl	80083ac <ssd1306_DrawPixel>

        if((y == 0) && (x < 127))
 8008686:	7bbb      	ldrb	r3, [r7, #14]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d106      	bne.n	800869a <ssd1306_TestBorder+0x3e>
 800868c:	7bfb      	ldrb	r3, [r7, #15]
 800868e:	2b7e      	cmp	r3, #126	; 0x7e
 8008690:	d803      	bhi.n	800869a <ssd1306_TestBorder+0x3e>
            x++;
 8008692:	7bfb      	ldrb	r3, [r7, #15]
 8008694:	3301      	adds	r3, #1
 8008696:	73fb      	strb	r3, [r7, #15]
 8008698:	e016      	b.n	80086c8 <ssd1306_TestBorder+0x6c>
        else if((x == 127) && (y < (SSD1306_HEIGHT-1)))
 800869a:	7bfb      	ldrb	r3, [r7, #15]
 800869c:	2b7f      	cmp	r3, #127	; 0x7f
 800869e:	d106      	bne.n	80086ae <ssd1306_TestBorder+0x52>
 80086a0:	7bbb      	ldrb	r3, [r7, #14]
 80086a2:	2b1e      	cmp	r3, #30
 80086a4:	d803      	bhi.n	80086ae <ssd1306_TestBorder+0x52>
            y++;
 80086a6:	7bbb      	ldrb	r3, [r7, #14]
 80086a8:	3301      	adds	r3, #1
 80086aa:	73bb      	strb	r3, [r7, #14]
 80086ac:	e00c      	b.n	80086c8 <ssd1306_TestBorder+0x6c>
        else if((y == (SSD1306_HEIGHT-1)) && (x > 0)) 
 80086ae:	7bbb      	ldrb	r3, [r7, #14]
 80086b0:	2b1f      	cmp	r3, #31
 80086b2:	d106      	bne.n	80086c2 <ssd1306_TestBorder+0x66>
 80086b4:	7bfb      	ldrb	r3, [r7, #15]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d003      	beq.n	80086c2 <ssd1306_TestBorder+0x66>
            x--;
 80086ba:	7bfb      	ldrb	r3, [r7, #15]
 80086bc:	3b01      	subs	r3, #1
 80086be:	73fb      	strb	r3, [r7, #15]
 80086c0:	e002      	b.n	80086c8 <ssd1306_TestBorder+0x6c>
        else
            y--;
 80086c2:	7bbb      	ldrb	r3, [r7, #14]
 80086c4:	3b01      	subs	r3, #1
 80086c6:	73bb      	strb	r3, [r7, #14]

        ssd1306_DrawPixel(x, y, White);
 80086c8:	7bb9      	ldrb	r1, [r7, #14]
 80086ca:	7bfb      	ldrb	r3, [r7, #15]
 80086cc:	2201      	movs	r2, #1
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7ff fe6c 	bl	80083ac <ssd1306_DrawPixel>
        ssd1306_UpdateScreen();
 80086d4:	f7ff fe42 	bl	800835c <ssd1306_UpdateScreen>
    
        HAL_Delay(5);
 80086d8:	2005      	movs	r0, #5
 80086da:	f7f9 fbb7 	bl	8001e4c <HAL_Delay>
        end = HAL_GetTick();
 80086de:	f7f9 fba9 	bl	8001e34 <HAL_GetTick>
 80086e2:	6078      	str	r0, [r7, #4]
    } while((end - start) < 8000);
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80086ee:	d3c4      	bcc.n	800867a <ssd1306_TestBorder+0x1e>
   
    HAL_Delay(1000);
 80086f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80086f4:	f7f9 fbaa 	bl	8001e4c <HAL_Delay>
}
 80086f8:	bf00      	nop
 80086fa:	3710      	adds	r7, #16
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	605a      	str	r2, [r3, #4]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	685a      	ldr	r2, [r3, #4]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	601a      	str	r2, [r3, #0]
}
 8008716:	bf00      	nop
 8008718:	370c      	adds	r7, #12
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr

08008722 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 8008722:	b480      	push	{r7}
 8008724:	b083      	sub	sp, #12
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
 800872a:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685a      	ldr	r2, [r3, #4]
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	683a      	ldr	r2, [r7, #0]
 8008740:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	601a      	str	r2, [r3, #0]
}
 800874a:	bf00      	nop
 800874c:	370c      	adds	r7, #12
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr

08008756 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b082      	sub	sp, #8
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
 800875e:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f7ff ffdd 	bl	8008722 <metal_list_add_before>
}
 8008768:	bf00      	nop
 800876a:	3708      	adds	r7, #8
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 800877a:	6839      	ldr	r1, [r7, #0]
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f001 ff89 	bl	800a694 <metal_machine_cache_flush>
}
 8008782:	bf00      	nop
 8008784:	3708      	adds	r7, #8
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b082      	sub	sp, #8
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
 8008792:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8008794:	6839      	ldr	r1, [r7, #0]
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f001 ff87 	bl	800a6aa <metal_machine_cache_invalidate>
}
 800879c:	bf00      	nop
 800879e:	3708      	adds	r7, #8
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 80087ae:	6839      	ldr	r1, [r7, #0]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f7ff ffdd 	bl	8008770 <__metal_cache_flush>
}
 80087b6:	bf00      	nop
 80087b8:	3708      	adds	r7, #8
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b082      	sub	sp, #8
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
 80087c6:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 80087c8:	6839      	ldr	r1, [r7, #0]
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f7ff ffdd 	bl	800878a <__metal_cache_invalidate>
}
 80087d0:	bf00      	nop
 80087d2:	3708      	adds	r7, #8
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d008      	beq.n	80087f8 <metal_bus_register+0x20>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d004      	beq.n	80087f8 <metal_bus_register+0x20>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d102      	bne.n	80087fe <metal_bus_register+0x26>
		return -EINVAL;
 80087f8:	f06f 0315 	mvn.w	r3, #21
 80087fc:	e026      	b.n	800884c <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2100      	movs	r1, #0
 8008804:	4618      	mov	r0, r3
 8008806:	f000 f82b 	bl	8008860 <metal_bus_find>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d102      	bne.n	8008816 <metal_bus_register+0x3e>
		return -EEXIST;
 8008810:	f06f 0310 	mvn.w	r3, #16
 8008814:	e01a      	b.n	800884c <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	331c      	adds	r3, #28
 800881a:	4618      	mov	r0, r3
 800881c:	f7ff ff70 	bl	8008700 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	3324      	adds	r3, #36	; 0x24
 8008824:	4619      	mov	r1, r3
 8008826:	480b      	ldr	r0, [pc, #44]	; (8008854 <metal_bus_register+0x7c>)
 8008828:	f7ff ff95 	bl	8008756 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 800882c:	4b0a      	ldr	r3, [pc, #40]	; (8008858 <metal_bus_register+0x80>)
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	2b06      	cmp	r3, #6
 8008832:	d90a      	bls.n	800884a <metal_bus_register+0x72>
 8008834:	4b08      	ldr	r3, [pc, #32]	; (8008858 <metal_bus_register+0x80>)
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d006      	beq.n	800884a <metal_bus_register+0x72>
 800883c:	4b06      	ldr	r3, [pc, #24]	; (8008858 <metal_bus_register+0x80>)
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	6812      	ldr	r2, [r2, #0]
 8008844:	4905      	ldr	r1, [pc, #20]	; (800885c <metal_bus_register+0x84>)
 8008846:	2007      	movs	r0, #7
 8008848:	4798      	blx	r3
	return 0;
 800884a:	2300      	movs	r3, #0
}
 800884c:	4618      	mov	r0, r3
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}
 8008854:	24000ca8 	.word	0x24000ca8
 8008858:	24000ca0 	.word	0x24000ca0
 800885c:	0800facc 	.word	0x0800facc

08008860 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 800886a:	4b13      	ldr	r3, [pc, #76]	; (80088b8 <metal_bus_find+0x58>)
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	60fb      	str	r3, [r7, #12]
 8008870:	e017      	b.n	80088a2 <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	3b24      	subs	r3, #36	; 0x24
 8008876:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	6879      	ldr	r1, [r7, #4]
 800887e:	4618      	mov	r0, r3
 8008880:	f7f7 fd2e 	bl	80002e0 <strcmp>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d003      	beq.n	8008892 <metal_bus_find+0x32>
	metal_list_for_each(&_metal.common.bus_list, node) {
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	60fb      	str	r3, [r7, #12]
 8008890:	e007      	b.n	80088a2 <metal_bus_find+0x42>
			continue;
		if (result)
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d002      	beq.n	800889e <metal_bus_find+0x3e>
			*result = bus;
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	68ba      	ldr	r2, [r7, #8]
 800889c:	601a      	str	r2, [r3, #0]
		return 0;
 800889e:	2300      	movs	r3, #0
 80088a0:	e005      	b.n	80088ae <metal_bus_find+0x4e>
	metal_list_for_each(&_metal.common.bus_list, node) {
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	4a05      	ldr	r2, [pc, #20]	; (80088bc <metal_bus_find+0x5c>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d1e3      	bne.n	8008872 <metal_bus_find+0x12>
	}
	return -ENOENT;
 80088aa:	f06f 0301 	mvn.w	r3, #1
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	24000ca0 	.word	0x24000ca0
 80088bc:	24000ca8 	.word	0x24000ca8

080088c0 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00d      	beq.n	80088ee <metal_device_open+0x2e>
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d009      	beq.n	80088ee <metal_device_open+0x2e>
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d006      	beq.n	80088ee <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d002      	beq.n	80088ee <metal_device_open+0x2e>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d102      	bne.n	80088f4 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 80088ee:	f06f 0315 	mvn.w	r3, #21
 80088f2:	e01f      	b.n	8008934 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 80088f4:	f107 0310 	add.w	r3, r7, #16
 80088f8:	4619      	mov	r1, r3
 80088fa:	68f8      	ldr	r0, [r7, #12]
 80088fc:	f7ff ffb0 	bl	8008860 <metal_bus_find>
 8008900:	6178      	str	r0, [r7, #20]
	if (error)
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d001      	beq.n	800890c <metal_device_open+0x4c>
		return error;
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	e013      	b.n	8008934 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d102      	bne.n	800891a <metal_device_open+0x5a>
		return -ENODEV;
 8008914:	f06f 0312 	mvn.w	r3, #18
 8008918:	e00c      	b.n	8008934 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	6938      	ldr	r0, [r7, #16]
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	68b9      	ldr	r1, [r7, #8]
 8008924:	4798      	blx	r3
 8008926:	6178      	str	r0, [r7, #20]
	if (error)
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d001      	beq.n	8008932 <metal_device_open+0x72>
		return error;
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	e000      	b.n	8008934 <metal_device_open+0x74>

	return 0;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3718      	adds	r7, #24
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d008      	beq.n	800895e <metal_register_generic_device+0x22>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d003      	beq.n	800895e <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 800895a:	2b02      	cmp	r3, #2
 800895c:	d902      	bls.n	8008964 <metal_register_generic_device+0x28>
		return -EINVAL;
 800895e:	f06f 0315 	mvn.w	r3, #21
 8008962:	e009      	b.n	8008978 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a06      	ldr	r2, [pc, #24]	; (8008980 <metal_register_generic_device+0x44>)
 8008968:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	336c      	adds	r3, #108	; 0x6c
 800896e:	4619      	mov	r1, r3
 8008970:	4804      	ldr	r0, [pc, #16]	; (8008984 <metal_register_generic_device+0x48>)
 8008972:	f7ff fef0 	bl	8008756 <metal_list_add_tail>
			    &device->node);
	return 0;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	24000018 	.word	0x24000018
 8008984:	24000cb8 	.word	0x24000cb8

08008988 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b086      	sub	sp, #24
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8008994:	4b12      	ldr	r3, [pc, #72]	; (80089e0 <metal_generic_dev_open+0x58>)
 8008996:	699b      	ldr	r3, [r3, #24]
 8008998:	617b      	str	r3, [r7, #20]
 800899a:	e017      	b.n	80089cc <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	3b6c      	subs	r3, #108	; 0x6c
 80089a0:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	68b9      	ldr	r1, [r7, #8]
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7f7 fc99 	bl	80002e0 <strcmp>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d003      	beq.n	80089bc <metal_generic_dev_open+0x34>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	617b      	str	r3, [r7, #20]
 80089ba:	e007      	b.n	80089cc <metal_generic_dev_open+0x44>
			continue;
		*device = dev;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	693a      	ldr	r2, [r7, #16]
 80089c0:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 80089c2:	6938      	ldr	r0, [r7, #16]
 80089c4:	f000 f88c 	bl	8008ae0 <metal_generic_dev_sys_open>
 80089c8:	4603      	mov	r3, r0
 80089ca:	e005      	b.n	80089d8 <metal_generic_dev_open+0x50>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	4a05      	ldr	r2, [pc, #20]	; (80089e4 <metal_generic_dev_open+0x5c>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d1e3      	bne.n	800899c <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 80089d4:	f06f 0312 	mvn.w	r3, #18
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3718      	adds	r7, #24
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	24000ca0 	.word	0x24000ca0
 80089e4:	24000cb8 	.word	0x24000cb8

080089e8 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	607a      	str	r2, [r7, #4]
 80089f4:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 80089f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d009      	beq.n	8008a12 <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 80089fe:	6a3a      	ldr	r2, [r7, #32]
 8008a00:	4613      	mov	r3, r2
 8008a02:	005b      	lsls	r3, r3, #1
 8008a04:	4413      	add	r3, r2
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	461a      	mov	r2, r3
 8008a0a:	6839      	ldr	r1, [r7, #0]
 8008a0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a0e:	f002 fcd9 	bl	800b3c4 <memcpy>
	for (i = 0; i < nents_in; i++) {
 8008a12:	2300      	movs	r3, #0
 8008a14:	617b      	str	r3, [r7, #20]
 8008a16:	e02f      	b.n	8008a78 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d114      	bne.n	8008a48 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 8008a1e:	697a      	ldr	r2, [r7, #20]
 8008a20:	4613      	mov	r3, r2
 8008a22:	005b      	lsls	r3, r3, #1
 8008a24:	4413      	add	r3, r2
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	461a      	mov	r2, r3
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2c:	4413      	add	r3, r2
 8008a2e:	6818      	ldr	r0, [r3, #0]
 8008a30:	697a      	ldr	r2, [r7, #20]
 8008a32:	4613      	mov	r3, r2
 8008a34:	005b      	lsls	r3, r3, #1
 8008a36:	4413      	add	r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3e:	4413      	add	r3, r2
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	4619      	mov	r1, r3
 8008a44:	f7ff feae 	bl	80087a4 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	005b      	lsls	r3, r3, #1
 8008a4e:	4413      	add	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	461a      	mov	r2, r3
 8008a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a56:	4413      	add	r3, r2
 8008a58:	6818      	ldr	r0, [r3, #0]
 8008a5a:	697a      	ldr	r2, [r7, #20]
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	005b      	lsls	r3, r3, #1
 8008a60:	4413      	add	r3, r2
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	461a      	mov	r2, r3
 8008a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a68:	4413      	add	r3, r2
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	f7ff fea6 	bl	80087be <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	3301      	adds	r3, #1
 8008a76:	617b      	str	r3, [r7, #20]
 8008a78:	697a      	ldr	r2, [r7, #20]
 8008a7a:	6a3b      	ldr	r3, [r7, #32]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	dbcb      	blt.n	8008a18 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 8008a80:	6a3b      	ldr	r3, [r7, #32]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3718      	adds	r7, #24
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b086      	sub	sp, #24
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	60f8      	str	r0, [r7, #12]
 8008a92:	60b9      	str	r1, [r7, #8]
 8008a94:	607a      	str	r2, [r7, #4]
 8008a96:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 8008a98:	2300      	movs	r3, #0
 8008a9a:	617b      	str	r3, [r7, #20]
 8008a9c:	e017      	b.n	8008ace <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 8008a9e:	697a      	ldr	r2, [r7, #20]
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	005b      	lsls	r3, r3, #1
 8008aa4:	4413      	add	r3, r2
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	4413      	add	r3, r2
 8008aae:	6818      	ldr	r0, [r3, #0]
 8008ab0:	697a      	ldr	r2, [r7, #20]
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	005b      	lsls	r3, r3, #1
 8008ab6:	4413      	add	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	461a      	mov	r2, r3
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	4413      	add	r3, r2
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	f7ff fe7b 	bl	80087be <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	3301      	adds	r3, #1
 8008acc:	617b      	str	r3, [r7, #20]
 8008ace:	697a      	ldr	r2, [r7, #20]
 8008ad0:	6a3b      	ldr	r3, [r7, #32]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	dbe3      	blt.n	8008a9e <metal_generic_dev_dma_unmap+0x14>
	}
}
 8008ad6:	bf00      	nop
 8008ad8:	bf00      	nop
 8008ada:	3718      	adds	r7, #24
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 8008ae8:	2300      	movs	r3, #0
 8008aea:	60fb      	str	r3, [r7, #12]
 8008aec:	e013      	b.n	8008b16 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	4613      	mov	r3, r2
 8008af2:	005b      	lsls	r3, r3, #1
 8008af4:	4413      	add	r3, r2
 8008af6:	011b      	lsls	r3, r3, #4
 8008af8:	3308      	adds	r3, #8
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	4413      	add	r3, r2
 8008afe:	3304      	adds	r3, #4
 8008b00:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00b      	beq.n	8008b22 <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 8008b0a:	68b8      	ldr	r0, [r7, #8]
 8008b0c:	f000 f81e 	bl	8008b4c <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	3301      	adds	r3, #1
 8008b14:	60fb      	str	r3, [r7, #12]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	68fa      	ldr	r2, [r7, #12]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d3e6      	bcc.n	8008aee <metal_generic_dev_sys_open+0xe>
 8008b20:	e000      	b.n	8008b24 <metal_generic_dev_sys_open+0x44>
			break;
 8008b22:	bf00      	nop
	}

	return 0;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
	...

08008b30 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 8008b38:	4803      	ldr	r0, [pc, #12]	; (8008b48 <metal_sys_init+0x18>)
 8008b3a:	f7ff fe4d 	bl	80087d8 <metal_bus_register>
	return 0;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	24000018 	.word	0x24000018

08008b4c <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b086      	sub	sp, #24
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	613b      	str	r3, [r7, #16]
	if (psize) {
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d02c      	beq.n	8008bc0 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	693a      	ldr	r2, [r7, #16]
 8008b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d005      	beq.n	8008b80 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b7e:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8008b80:	2300      	movs	r3, #0
 8008b82:	617b      	str	r3, [r7, #20]
 8008b84:	e013      	b.n	8008bae <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	685a      	ldr	r2, [r3, #4]
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	4413      	add	r3, r2
 8008b90:	6819      	ldr	r1, [r3, #0]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	695b      	ldr	r3, [r3, #20]
 8008b96:	693a      	ldr	r2, [r7, #16]
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f001 fd91 	bl	800a6c0 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	3301      	adds	r3, #1
 8008bac:	617b      	str	r3, [r7, #20]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	689a      	ldr	r2, [r3, #8]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8008bba:	697a      	ldr	r2, [r7, #20]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d9e2      	bls.n	8008b86 <metal_sys_io_mem_map+0x3a>
		}
	}
}
 8008bc0:	bf00      	nop
 8008bc2:	3718      	adds	r7, #24
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <metal_list_init>:
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	605a      	str	r2, [r3, #4]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	685a      	ldr	r2, [r3, #4]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	601a      	str	r2, [r3, #0]
}
 8008bde:	bf00      	nop
 8008be0:	370c      	adds	r7, #12
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
	...

08008bec <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
	int error = 0;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 8008bf8:	2220      	movs	r2, #32
 8008bfa:	2100      	movs	r1, #0
 8008bfc:	4810      	ldr	r0, [pc, #64]	; (8008c40 <metal_init+0x54>)
 8008bfe:	f002 fc09 	bl	800b414 <memset>

	_metal.common.log_handler   = params->log_handler;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a0e      	ldr	r2, [pc, #56]	; (8008c40 <metal_init+0x54>)
 8008c08:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	791a      	ldrb	r2, [r3, #4]
 8008c0e:	4b0c      	ldr	r3, [pc, #48]	; (8008c40 <metal_init+0x54>)
 8008c10:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 8008c12:	480c      	ldr	r0, [pc, #48]	; (8008c44 <metal_init+0x58>)
 8008c14:	f7ff ffd8 	bl	8008bc8 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 8008c18:	480b      	ldr	r0, [pc, #44]	; (8008c48 <metal_init+0x5c>)
 8008c1a:	f7ff ffd5 	bl	8008bc8 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 8008c1e:	480b      	ldr	r0, [pc, #44]	; (8008c4c <metal_init+0x60>)
 8008c20:	f7ff ffd2 	bl	8008bc8 <metal_list_init>

	error = metal_sys_init(params);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f7ff ff83 	bl	8008b30 <metal_sys_init>
 8008c2a:	60f8      	str	r0, [r7, #12]
	if (error)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d001      	beq.n	8008c36 <metal_init+0x4a>
		return error;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	e000      	b.n	8008c38 <metal_init+0x4c>

	return error;
 8008c36:	68fb      	ldr	r3, [r7, #12]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3710      	adds	r7, #16
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	24000ca0 	.word	0x24000ca0
 8008c44:	24000ca8 	.word	0x24000ca8
 8008c48:	24000cb0 	.word	0x24000cb0
 8008c4c:	24000cb8 	.word	0x24000cb8

08008c50 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 8008c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c62:	d009      	beq.n	8008c78 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	683a      	ldr	r2, [r7, #0]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d804      	bhi.n	8008c78 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	4413      	add	r3, r2
 8008c76:	e000      	b.n	8008c7a <metal_io_virt+0x2a>
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	370c      	adds	r7, #12
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr

08008c86 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 8008c86:	b5b0      	push	{r4, r5, r7, lr}
 8008c88:	b08a      	sub	sp, #40	; 0x28
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	60f8      	str	r0, [r7, #12]
 8008c8e:	60b9      	str	r1, [r7, #8]
 8008c90:	607a      	str	r2, [r7, #4]
 8008c92:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 8008c94:	f107 0310 	add.w	r3, r7, #16
 8008c98:	2200      	movs	r2, #0
 8008c9a:	601a      	str	r2, [r3, #0]
 8008c9c:	605a      	str	r2, [r3, #4]
 8008c9e:	609a      	str	r2, [r3, #8]
 8008ca0:	60da      	str	r2, [r3, #12]
 8008ca2:	611a      	str	r2, [r3, #16]
 8008ca4:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	68ba      	ldr	r2, [r7, #8]
 8008caa:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	605a      	str	r2, [r3, #4]
	io->size = size;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	683a      	ldr	r2, [r7, #0]
 8008cb6:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cbc:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 8008cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc0:	2b1f      	cmp	r3, #31
 8008cc2:	d904      	bls.n	8008cce <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8008cca:	611a      	str	r2, [r3, #16]
 8008ccc:	e006      	b.n	8008cdc <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 8008cce:	2201      	movs	r2, #1
 8008cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd6:	1e5a      	subs	r2, r3, #1
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ce0:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 8008ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d00b      	beq.n	8008d00 <metal_io_init+0x7a>
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008cec:	f103 0418 	add.w	r4, r3, #24
 8008cf0:	4615      	mov	r5, r2
 8008cf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008cf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008cf6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008cfa:	e884 0003 	stmia.w	r4, {r0, r1}
 8008cfe:	e00a      	b.n	8008d16 <metal_io_init+0x90>
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f103 0418 	add.w	r4, r3, #24
 8008d06:	f107 0510 	add.w	r5, r7, #16
 8008d0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d0e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008d12:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f7ff ff18 	bl	8008b4c <metal_sys_io_mem_map>
}
 8008d1c:	bf00      	nop
 8008d1e:	3728      	adds	r7, #40	; 0x28
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bdb0      	pop	{r4, r5, r7, pc}

08008d24 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 8008d24:	b590      	push	{r4, r7, lr}
 8008d26:	b08b      	sub	sp, #44	; 0x2c
 8008d28:	af02      	add	r7, sp, #8
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	607a      	str	r2, [r7, #4]
 8008d30:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8008d32:	68b9      	ldr	r1, [r7, #8]
 8008d34:	68f8      	ldr	r0, [r7, #12]
 8008d36:	f7ff ff8b 	bl	8008c50 <metal_io_virt>
 8008d3a:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	68ba      	ldr	r2, [r7, #8]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d902      	bls.n	8008d50 <metal_io_block_read+0x2c>
		return -ERANGE;
 8008d4a:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8008d4e:	e05c      	b.n	8008e0a <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 8008d50:	683a      	ldr	r2, [r7, #0]
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	441a      	add	r2, r3
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d904      	bls.n	8008d68 <metal_io_block_read+0x44>
		len = io->size - offset;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	689a      	ldr	r2, [r3, #8]
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	1ad3      	subs	r3, r2, r3
 8008d66:	603b      	str	r3, [r7, #0]
	retlen = len;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6a1b      	ldr	r3, [r3, #32]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00a      	beq.n	8008d8a <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6a1c      	ldr	r4, [r3, #32]
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	9300      	str	r3, [sp, #0]
 8008d7c:	2305      	movs	r3, #5
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	68b9      	ldr	r1, [r7, #8]
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	47a0      	blx	r4
 8008d86:	6178      	str	r0, [r7, #20]
 8008d88:	e03e      	b.n	8008e08 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 8008d8a:	f3bf 8f5b 	dmb	ish
		while ( len && (
 8008d8e:	e00c      	b.n	8008daa <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	701a      	strb	r2, [r3, #0]
			dest++;
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	61bb      	str	r3, [r7, #24]
			ptr++;
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	3301      	adds	r3, #1
 8008da2:	61fb      	str	r3, [r7, #28]
			len--;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	3b01      	subs	r3, #1
 8008da8:	603b      	str	r3, [r7, #0]
		while ( len && (
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d017      	beq.n	8008de0 <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1ea      	bne.n	8008d90 <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d1e5      	bne.n	8008d90 <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8008dc4:	e00c      	b.n	8008de0 <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	3304      	adds	r3, #4
 8008dd2:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	3304      	adds	r3, #4
 8008dd8:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	3b04      	subs	r3, #4
 8008dde:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	2b03      	cmp	r3, #3
 8008de4:	dcef      	bgt.n	8008dc6 <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 8008de6:	e00c      	b.n	8008e02 <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	3301      	adds	r3, #1
 8008df4:	61bb      	str	r3, [r7, #24]
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	61fb      	str	r3, [r7, #28]
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	603b      	str	r3, [r7, #0]
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d1ef      	bne.n	8008de8 <metal_io_block_read+0xc4>
	}
	return retlen;
 8008e08:	697b      	ldr	r3, [r7, #20]
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3724      	adds	r7, #36	; 0x24
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd90      	pop	{r4, r7, pc}

08008e12 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 8008e12:	b590      	push	{r4, r7, lr}
 8008e14:	b08b      	sub	sp, #44	; 0x2c
 8008e16:	af02      	add	r7, sp, #8
 8008e18:	60f8      	str	r0, [r7, #12]
 8008e1a:	60b9      	str	r1, [r7, #8]
 8008e1c:	607a      	str	r2, [r7, #4]
 8008e1e:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8008e20:	68b9      	ldr	r1, [r7, #8]
 8008e22:	68f8      	ldr	r0, [r7, #12]
 8008e24:	f7ff ff14 	bl	8008c50 <metal_io_virt>
 8008e28:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	68ba      	ldr	r2, [r7, #8]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d902      	bls.n	8008e3e <metal_io_block_write+0x2c>
		return -ERANGE;
 8008e38:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8008e3c:	e05b      	b.n	8008ef6 <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 8008e3e:	683a      	ldr	r2, [r7, #0]
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	441a      	add	r2, r3
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d904      	bls.n	8008e56 <metal_io_block_write+0x44>
		len = io->size - offset;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	689a      	ldr	r2, [r3, #8]
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	1ad3      	subs	r3, r2, r3
 8008e54:	603b      	str	r3, [r7, #0]
	retlen = len;
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d017      	beq.n	8008e92 <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	9300      	str	r3, [sp, #0]
 8008e6a:	2305      	movs	r3, #5
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	68b9      	ldr	r1, [r7, #8]
 8008e70:	68f8      	ldr	r0, [r7, #12]
 8008e72:	47a0      	blx	r4
 8008e74:	6178      	str	r0, [r7, #20]
 8008e76:	e03d      	b.n	8008ef4 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	701a      	strb	r2, [r3, #0]
			ptr++;
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	3301      	adds	r3, #1
 8008e84:	61fb      	str	r3, [r7, #28]
			source++;
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	61bb      	str	r3, [r7, #24]
			len--;
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	603b      	str	r3, [r7, #0]
		while ( len && (
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d017      	beq.n	8008ec8 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d1ea      	bne.n	8008e78 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1e5      	bne.n	8008e78 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8008eac:	e00c      	b.n	8008ec8 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	3304      	adds	r3, #4
 8008eba:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	3304      	adds	r3, #4
 8008ec0:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	3b04      	subs	r3, #4
 8008ec6:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	2b03      	cmp	r3, #3
 8008ecc:	dcef      	bgt.n	8008eae <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 8008ece:	e00c      	b.n	8008eea <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	3301      	adds	r3, #1
 8008edc:	61fb      	str	r3, [r7, #28]
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	61bb      	str	r3, [r7, #24]
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	603b      	str	r3, [r7, #0]
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d1ef      	bne.n	8008ed0 <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 8008ef0:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8008ef4:	697b      	ldr	r3, [r7, #20]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3724      	adds	r7, #36	; 0x24
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd90      	pop	{r4, r7, pc}

08008efe <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
 8008efe:	b590      	push	{r4, r7, lr}
 8008f00:	b08b      	sub	sp, #44	; 0x2c
 8008f02:	af02      	add	r7, sp, #8
 8008f04:	60f8      	str	r0, [r7, #12]
 8008f06:	60b9      	str	r1, [r7, #8]
 8008f08:	603b      	str	r3, [r7, #0]
 8008f0a:	4613      	mov	r3, r2
 8008f0c:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = metal_io_virt(io, offset);
 8008f0e:	68b9      	ldr	r1, [r7, #8]
 8008f10:	68f8      	ldr	r0, [r7, #12]
 8008f12:	f7ff fe9d 	bl	8008c50 <metal_io_virt>
 8008f16:	61f8      	str	r0, [r7, #28]
	int retlen = len;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	613b      	str	r3, [r7, #16]

	if (offset > io->size)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	68ba      	ldr	r2, [r7, #8]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d902      	bls.n	8008f2c <metal_io_block_set+0x2e>
		return -ERANGE;
 8008f26:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8008f2a:	e05d      	b.n	8008fe8 <metal_io_block_set+0xea>
	if ((offset + len) > io->size)
 8008f2c:	683a      	ldr	r2, [r7, #0]
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	441a      	add	r2, r3
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d904      	bls.n	8008f44 <metal_io_block_set+0x46>
		len = io->size - offset;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	689a      	ldr	r2, [r3, #8]
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	603b      	str	r3, [r7, #0]
	retlen = len;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	613b      	str	r3, [r7, #16]
	if (io->ops.block_set) {
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d009      	beq.n	8008f64 <metal_io_block_set+0x66>
		(*io->ops.block_set)(
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8008f54:	79fa      	ldrb	r2, [r7, #7]
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	9300      	str	r3, [sp, #0]
 8008f5a:	2305      	movs	r3, #5
 8008f5c:	68b9      	ldr	r1, [r7, #8]
 8008f5e:	68f8      	ldr	r0, [r7, #12]
 8008f60:	47a0      	blx	r4
 8008f62:	e040      	b.n	8008fe6 <metal_io_block_set+0xe8>
			io, offset, value, memory_order_seq_cst, len);
	} else {
		unsigned int cint = value;
 8008f64:	79fb      	ldrb	r3, [r7, #7]
 8008f66:	61bb      	str	r3, [r7, #24]
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
 8008f68:	2301      	movs	r3, #1
 8008f6a:	617b      	str	r3, [r7, #20]
 8008f6c:	e00a      	b.n	8008f84 <metal_io_block_set+0x86>
			cint |= ((unsigned int)value << (8 * i));
 8008f6e:	79fa      	ldrb	r2, [r7, #7]
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	00db      	lsls	r3, r3, #3
 8008f74:	fa02 f303 	lsl.w	r3, r2, r3
 8008f78:	69ba      	ldr	r2, [r7, #24]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	61bb      	str	r3, [r7, #24]
		for (i = 1; i < sizeof(int); i++)
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	3301      	adds	r3, #1
 8008f82:	617b      	str	r3, [r7, #20]
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	2b03      	cmp	r3, #3
 8008f88:	d9f1      	bls.n	8008f6e <metal_io_block_set+0x70>

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 8008f8a:	e008      	b.n	8008f9e <metal_io_block_set+0xa0>
			*(unsigned char *)ptr = (unsigned char) value;
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	79fa      	ldrb	r2, [r7, #7]
 8008f90:	701a      	strb	r2, [r3, #0]
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 8008f92:	69fb      	ldr	r3, [r7, #28]
 8008f94:	3301      	adds	r3, #1
 8008f96:	61fb      	str	r3, [r7, #28]
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	603b      	str	r3, [r7, #0]
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00e      	beq.n	8008fc2 <metal_io_block_set+0xc4>
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	f003 0303 	and.w	r3, r3, #3
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1ee      	bne.n	8008f8c <metal_io_block_set+0x8e>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8008fae:	e008      	b.n	8008fc2 <metal_io_block_set+0xc4>
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	69ba      	ldr	r2, [r7, #24]
 8008fb4:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	3304      	adds	r3, #4
 8008fba:	61fb      	str	r3, [r7, #28]
						len -= sizeof(int))
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	3b04      	subs	r3, #4
 8008fc0:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	2b03      	cmp	r3, #3
 8008fc6:	dcf3      	bgt.n	8008fb0 <metal_io_block_set+0xb2>
		for (; len != 0; ptr++, len--)
 8008fc8:	e008      	b.n	8008fdc <metal_io_block_set+0xde>
			*(unsigned char *)ptr = (unsigned char) value;
 8008fca:	69fb      	ldr	r3, [r7, #28]
 8008fcc:	79fa      	ldrb	r2, [r7, #7]
 8008fce:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, len--)
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	61fb      	str	r3, [r7, #28]
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	603b      	str	r3, [r7, #0]
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d1f3      	bne.n	8008fca <metal_io_block_set+0xcc>
		atomic_thread_fence(memory_order_seq_cst);
 8008fe2:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8008fe6:	693b      	ldr	r3, [r7, #16]
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3724      	adds	r7, #36	; 0x24
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd90      	pop	{r4, r7, pc}

08008ff0 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 8008ff0:	b40e      	push	{r1, r2, r3}
 8008ff2:	b480      	push	{r7}
 8008ff4:	b082      	sub	sp, #8
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 8008ffc:	bf00      	nop
 8008ffe:	3708      	adds	r7, #8
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	b003      	add	sp, #12
 8009008:	4770      	bx	lr

0800900a <metal_io_virt>:
{
 800900a:	b480      	push	{r7}
 800900c:	b083      	sub	sp, #12
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
 8009012:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8009018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800901c:	d009      	beq.n	8009032 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	683a      	ldr	r2, [r7, #0]
 8009024:	429a      	cmp	r2, r3
 8009026:	d804      	bhi.n	8009032 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681a      	ldr	r2, [r3, #0]
		: NULL);
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	4413      	add	r3, r2
 8009030:	e000      	b.n	8009034 <metal_io_virt+0x2a>
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	683a      	ldr	r2, [r7, #0]
 8009050:	1ad3      	subs	r3, r2, r3
 8009052:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	68fa      	ldr	r2, [r7, #12]
 800905a:	429a      	cmp	r2, r3
 800905c:	d201      	bcs.n	8009062 <metal_io_virt_to_offset+0x22>
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	e001      	b.n	8009066 <metal_io_virt_to_offset+0x26>
 8009062:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009066:	4618      	mov	r0, r3
 8009068:	3714      	adds	r7, #20
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
	...

08009074 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 8009074:	b590      	push	{r4, r7, lr}
 8009076:	b08d      	sub	sp, #52	; 0x34
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	603b      	str	r3, [r7, #0]
 8009080:	4613      	mov	r3, r2
 8009082:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 8009084:	68b9      	ldr	r1, [r7, #8]
 8009086:	68f8      	ldr	r0, [r7, #12]
 8009088:	f7ff ffbf 	bl	800900a <metal_io_virt>
 800908c:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	699b      	ldr	r3, [r3, #24]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d009      	beq.n	80090aa <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	699c      	ldr	r4, [r3, #24]
 800909a:	79fa      	ldrb	r2, [r7, #7]
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	68b9      	ldr	r1, [r7, #8]
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	47a0      	blx	r4
 80090a4:	4602      	mov	r2, r0
 80090a6:	460b      	mov	r3, r1
 80090a8:	e057      	b.n	800915a <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uchar) == width)
 80090aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d011      	beq.n	80090d4 <metal_io_read+0x60>
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d10e      	bne.n	80090d4 <metal_io_read+0x60>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 80090b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80090ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090bc:	f3bf 8f5b 	dmb	ish
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	f3bf 8f5b 	dmb	ish
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	76fb      	strb	r3, [r7, #27]
 80090ca:	7efb      	ldrb	r3, [r7, #27]
 80090cc:	b2da      	uxtb	r2, r3
 80090ce:	f04f 0300 	mov.w	r3, #0
 80090d2:	e042      	b.n	800915a <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ushort) == width)
 80090d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d011      	beq.n	80090fe <metal_io_read+0x8a>
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d10e      	bne.n	80090fe <metal_io_read+0x8a>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 80090e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e2:	627b      	str	r3, [r7, #36]	; 0x24
 80090e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e6:	f3bf 8f5b 	dmb	ish
 80090ea:	881b      	ldrh	r3, [r3, #0]
 80090ec:	f3bf 8f5b 	dmb	ish
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	833b      	strh	r3, [r7, #24]
 80090f4:	8b3b      	ldrh	r3, [r7, #24]
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	f04f 0300 	mov.w	r3, #0
 80090fc:	e02d      	b.n	800915a <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uint) == width)
 80090fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009100:	2b00      	cmp	r3, #0
 8009102:	d010      	beq.n	8009126 <metal_io_read+0xb2>
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	2b04      	cmp	r3, #4
 8009108:	d10d      	bne.n	8009126 <metal_io_read+0xb2>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 800910a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910c:	623b      	str	r3, [r7, #32]
 800910e:	6a3b      	ldr	r3, [r7, #32]
 8009110:	f3bf 8f5b 	dmb	ish
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f3bf 8f5b 	dmb	ish
 800911a:	617b      	str	r3, [r7, #20]
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	461a      	mov	r2, r3
 8009120:	f04f 0300 	mov.w	r3, #0
 8009124:	e019      	b.n	800915a <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ulong) == width)
 8009126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009128:	2b00      	cmp	r3, #0
 800912a:	d010      	beq.n	800914e <metal_io_read+0xda>
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	2b04      	cmp	r3, #4
 8009130:	d10d      	bne.n	800914e <metal_io_read+0xda>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 8009132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009134:	61fb      	str	r3, [r7, #28]
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	f3bf 8f5b 	dmb	ish
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f3bf 8f5b 	dmb	ish
 8009142:	613b      	str	r3, [r7, #16]
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	461a      	mov	r2, r3
 8009148:	f04f 0300 	mov.w	r3, #0
 800914c:	e005      	b.n	800915a <metal_io_read+0xe6>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 800914e:	4b05      	ldr	r3, [pc, #20]	; (8009164 <metal_io_read+0xf0>)
 8009150:	4a05      	ldr	r2, [pc, #20]	; (8009168 <metal_io_read+0xf4>)
 8009152:	21f0      	movs	r1, #240	; 0xf0
 8009154:	4805      	ldr	r0, [pc, #20]	; (800916c <metal_io_read+0xf8>)
 8009156:	f002 f8cb 	bl	800b2f0 <__assert_func>
	return 0; /* quiet compiler */
}
 800915a:	4610      	mov	r0, r2
 800915c:	4619      	mov	r1, r3
 800915e:	3734      	adds	r7, #52	; 0x34
 8009160:	46bd      	mov	sp, r7
 8009162:	bd90      	pop	{r4, r7, pc}
 8009164:	0800fb88 	.word	0x0800fb88
 8009168:	08010490 	.word	0x08010490
 800916c:	0800fb8c 	.word	0x0800fb8c

08009170 <metal_io_write>:
 *			to inline cleanly.
 */
static inline void
metal_io_write(struct metal_io_region *io, unsigned long offset,
	       uint64_t value, memory_order order, int width)
{
 8009170:	b590      	push	{r4, r7, lr}
 8009172:	b08f      	sub	sp, #60	; 0x3c
 8009174:	af02      	add	r7, sp, #8
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	e9c7 2300 	strd	r2, r3, [r7]
	void *ptr = metal_io_virt(io, offset);
 800917e:	68b9      	ldr	r1, [r7, #8]
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f7ff ff42 	bl	800900a <metal_io_virt>
 8009186:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (io->ops.write)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	69db      	ldr	r3, [r3, #28]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d00c      	beq.n	80091aa <metal_io_write+0x3a>
		(*io->ops.write)(io, offset, value, order, width);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	69dc      	ldr	r4, [r3, #28]
 8009194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009196:	9301      	str	r3, [sp, #4]
 8009198:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091a2:	68b9      	ldr	r1, [r7, #8]
 80091a4:	68f8      	ldr	r0, [r7, #12]
 80091a6:	47a0      	blx	r4
	else if (ptr && sizeof(atomic_ullong) == width)
		atomic_store_explicit((atomic_ullong *)ptr, value, order);
#endif
	else
		metal_assert (0);
}
 80091a8:	e04e      	b.n	8009248 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uchar) == width)
 80091aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00e      	beq.n	80091ce <metal_io_write+0x5e>
 80091b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d10b      	bne.n	80091ce <metal_io_write+0x5e>
		atomic_store_explicit((atomic_uchar *)ptr, value, order);
 80091b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80091ba:	783b      	ldrb	r3, [r7, #0]
 80091bc:	76fb      	strb	r3, [r7, #27]
 80091be:	7efa      	ldrb	r2, [r7, #27]
 80091c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c2:	f3bf 8f5b 	dmb	ish
 80091c6:	701a      	strb	r2, [r3, #0]
 80091c8:	f3bf 8f5b 	dmb	ish
 80091cc:	e03c      	b.n	8009248 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ushort) == width)
 80091ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00e      	beq.n	80091f2 <metal_io_write+0x82>
 80091d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	d10b      	bne.n	80091f2 <metal_io_write+0x82>
		atomic_store_explicit((atomic_ushort *)ptr, value, order);
 80091da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091dc:	627b      	str	r3, [r7, #36]	; 0x24
 80091de:	883b      	ldrh	r3, [r7, #0]
 80091e0:	833b      	strh	r3, [r7, #24]
 80091e2:	8b3a      	ldrh	r2, [r7, #24]
 80091e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e6:	f3bf 8f5b 	dmb	ish
 80091ea:	801a      	strh	r2, [r3, #0]
 80091ec:	f3bf 8f5b 	dmb	ish
 80091f0:	e02a      	b.n	8009248 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uint) == width)
 80091f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00e      	beq.n	8009216 <metal_io_write+0xa6>
 80091f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091fa:	2b04      	cmp	r3, #4
 80091fc:	d10b      	bne.n	8009216 <metal_io_write+0xa6>
		atomic_store_explicit((atomic_uint *)ptr, value, order);
 80091fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009200:	623b      	str	r3, [r7, #32]
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	617b      	str	r3, [r7, #20]
 8009206:	697a      	ldr	r2, [r7, #20]
 8009208:	6a3b      	ldr	r3, [r7, #32]
 800920a:	f3bf 8f5b 	dmb	ish
 800920e:	601a      	str	r2, [r3, #0]
 8009210:	f3bf 8f5b 	dmb	ish
 8009214:	e018      	b.n	8009248 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ulong) == width)
 8009216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00e      	beq.n	800923a <metal_io_write+0xca>
 800921c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800921e:	2b04      	cmp	r3, #4
 8009220:	d10b      	bne.n	800923a <metal_io_write+0xca>
		atomic_store_explicit((atomic_ulong *)ptr, value, order);
 8009222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009224:	61fb      	str	r3, [r7, #28]
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	613b      	str	r3, [r7, #16]
 800922a:	693a      	ldr	r2, [r7, #16]
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	f3bf 8f5b 	dmb	ish
 8009232:	601a      	str	r2, [r3, #0]
 8009234:	f3bf 8f5b 	dmb	ish
 8009238:	e006      	b.n	8009248 <metal_io_write+0xd8>
		metal_assert (0);
 800923a:	4b05      	ldr	r3, [pc, #20]	; (8009250 <metal_io_write+0xe0>)
 800923c:	4a05      	ldr	r2, [pc, #20]	; (8009254 <metal_io_write+0xe4>)
 800923e:	f44f 7189 	mov.w	r1, #274	; 0x112
 8009242:	4805      	ldr	r0, [pc, #20]	; (8009258 <metal_io_write+0xe8>)
 8009244:	f002 f854 	bl	800b2f0 <__assert_func>
}
 8009248:	bf00      	nop
 800924a:	3734      	adds	r7, #52	; 0x34
 800924c:	46bd      	mov	sp, r7
 800924e:	bd90      	pop	{r4, r7, pc}
 8009250:	0800fb88 	.word	0x0800fb88
 8009254:	080104a0 	.word	0x080104a0
 8009258:	0800fb8c 	.word	0x0800fb8c

0800925c <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f002 f89d 	bl	800b3a4 <malloc>
 800926a:	4603      	mov	r3, r0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
	free(ptr);
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f002 f899 	bl	800b3b4 <free>
}
 8009282:	bf00      	nop
 8009284:	3708      	adds	r7, #8
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b084      	sub	sp, #16
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	3307      	adds	r3, #7
 8009296:	00db      	lsls	r3, r3, #3
 8009298:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 800929a:	68f8      	ldr	r0, [r7, #12]
 800929c:	f7ff ffde 	bl	800925c <metal_allocate_memory>
 80092a0:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d004      	beq.n	80092b2 <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 80092a8:	68fa      	ldr	r2, [r7, #12]
 80092aa:	2100      	movs	r1, #0
 80092ac:	68b8      	ldr	r0, [r7, #8]
 80092ae:	f002 f8b1 	bl	800b414 <memset>
	}

	return vqs;
 80092b2:	68bb      	ldr	r3, [r7, #8]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b086      	sub	sp, #24
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	891b      	ldrh	r3, [r3, #8]
 80092c8:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	3b18      	subs	r3, #24
 80092d4:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092da:	697a      	ldr	r2, [r7, #20]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d905      	bls.n	80092ec <rproc_virtio_virtqueue_notify+0x30>
 80092e0:	4b0d      	ldr	r3, [pc, #52]	; (8009318 <rproc_virtio_virtqueue_notify+0x5c>)
 80092e2:	4a0e      	ldr	r2, [pc, #56]	; (800931c <rproc_virtio_virtqueue_notify+0x60>)
 80092e4:	2133      	movs	r1, #51	; 0x33
 80092e6:	480e      	ldr	r0, [pc, #56]	; (8009320 <rproc_virtio_virtqueue_notify+0x64>)
 80092e8:	f002 f802 	bl	800b2f0 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	4613      	mov	r3, r2
 80092f4:	005b      	lsls	r3, r3, #1
 80092f6:	4413      	add	r3, r2
 80092f8:	00db      	lsls	r3, r3, #3
 80092fa:	440b      	add	r3, r1
 80092fc:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	68fa      	ldr	r2, [r7, #12]
 8009304:	6810      	ldr	r0, [r2, #0]
 8009306:	68ba      	ldr	r2, [r7, #8]
 8009308:	6912      	ldr	r2, [r2, #16]
 800930a:	4611      	mov	r1, r2
 800930c:	4798      	blx	r3
}
 800930e:	bf00      	nop
 8009310:	3718      	adds	r7, #24
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	0800fbd4 	.word	0x0800fbd4
 800931c:	08010470 	.word	0x08010470
 8009320:	0800fbf0 	.word	0x0800fbf0

08009324 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b086      	sub	sp, #24
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	3b18      	subs	r3, #24
 8009330:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	3318      	adds	r3, #24
 8009342:	4619      	mov	r1, r3
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f7ff fe7b 	bl	8009040 <metal_io_virt_to_offset>
 800934a:	4601      	mov	r1, r0
 800934c:	2301      	movs	r3, #1
 800934e:	2205      	movs	r2, #5
 8009350:	68f8      	ldr	r0, [r7, #12]
 8009352:	f7ff fe8f 	bl	8009074 <metal_io_read>
 8009356:	4602      	mov	r2, r0
 8009358:	460b      	mov	r3, r1
 800935a:	4613      	mov	r3, r2
 800935c:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 800935e:	7afb      	ldrb	r3, [r7, #11]
}
 8009360:	4618      	mov	r0, r3
 8009362:	3718      	adds	r7, #24
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <rproc_virtio_set_status>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_status(struct virtio_device *vdev,
				    unsigned char status)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b088      	sub	sp, #32
 800936c:	af02      	add	r7, sp, #8
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	460b      	mov	r3, r1
 8009372:	70fb      	strb	r3, [r7, #3]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	3b18      	subs	r3, #24
 8009378:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	60fb      	str	r3, [r7, #12]
	metal_io_write8(io,
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	3318      	adds	r3, #24
 800938a:	4619      	mov	r1, r3
 800938c:	68f8      	ldr	r0, [r7, #12]
 800938e:	f7ff fe57 	bl	8009040 <metal_io_virt_to_offset>
 8009392:	4601      	mov	r1, r0
 8009394:	78fa      	ldrb	r2, [r7, #3]
 8009396:	f04f 0300 	mov.w	r3, #0
 800939a:	2001      	movs	r0, #1
 800939c:	9001      	str	r0, [sp, #4]
 800939e:	2005      	movs	r0, #5
 80093a0:	9000      	str	r0, [sp, #0]
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f7ff fee4 	bl	8009170 <metal_io_write>
			metal_io_virt_to_offset(io, &vdev_rsc->status),
			status);
	rpvdev->notify(rpvdev->priv, vdev->index);
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	691b      	ldr	r3, [r3, #16]
 80093ac:	697a      	ldr	r2, [r7, #20]
 80093ae:	6810      	ldr	r0, [r2, #0]
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	6812      	ldr	r2, [r2, #0]
 80093b4:	4611      	mov	r1, r2
 80093b6:	4798      	blx	r3
}
 80093b8:	bf00      	nop
 80093ba:	3718      	adds	r7, #24
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <rproc_virtio_get_features>:
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b086      	sub	sp, #24
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	3b18      	subs	r3, #24
 80093cc:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	330c      	adds	r3, #12
 80093de:	4619      	mov	r1, r3
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f7ff fe2d 	bl	8009040 <metal_io_virt_to_offset>
 80093e6:	4601      	mov	r1, r0
 80093e8:	2304      	movs	r3, #4
 80093ea:	2205      	movs	r2, #5
 80093ec:	68f8      	ldr	r0, [r7, #12]
 80093ee:	f7ff fe41 	bl	8009074 <metal_io_read>
 80093f2:	4602      	mov	r2, r0
 80093f4:	460b      	mov	r3, r1
 80093f6:	4613      	mov	r3, r2
 80093f8:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 80093fa:	68bb      	ldr	r3, [r7, #8]
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3718      	adds	r7, #24
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <rproc_virtio_set_features>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_features(struct virtio_device *vdev,
				      uint32_t features)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b088      	sub	sp, #32
 8009408:	af02      	add	r7, sp, #8
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	3b18      	subs	r3, #24
 8009412:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we set features based on the role ? */
	metal_io_write32(io,
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	330c      	adds	r3, #12
 8009424:	4619      	mov	r1, r3
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f7ff fe0a 	bl	8009040 <metal_io_virt_to_offset>
 800942c:	4601      	mov	r1, r0
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	461a      	mov	r2, r3
 8009432:	f04f 0300 	mov.w	r3, #0
 8009436:	2004      	movs	r0, #4
 8009438:	9001      	str	r0, [sp, #4]
 800943a:	2005      	movs	r0, #5
 800943c:	9000      	str	r0, [sp, #0]
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f7ff fe96 	bl	8009170 <metal_io_write>
			 metal_io_virt_to_offset(io, &vdev_rsc->dfeatures),
			 features);
	rpvdev->notify(rpvdev->priv, vdev->index);
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	691b      	ldr	r3, [r3, #16]
 8009448:	697a      	ldr	r2, [r7, #20]
 800944a:	6810      	ldr	r0, [r2, #0]
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	6812      	ldr	r2, [r2, #0]
 8009450:	4611      	mov	r1, r2
 8009452:	4798      	blx	r3
}
 8009454:	bf00      	nop
 8009456:	3718      	adds	r7, #24
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <rproc_virtio_negotiate_features>:
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 8009466:	2300      	movs	r3, #0
}
 8009468:	4618      	mov	r0, r3
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	607a      	str	r2, [r7, #4]
 8009480:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 8009482:	bf00      	nop
 8009484:	3714      	adds	r7, #20
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr

0800948e <rproc_virtio_write_config>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_write_config(struct virtio_device *vdev,
				      uint32_t offset, void *src, int length)
{
 800948e:	b480      	push	{r7}
 8009490:	b085      	sub	sp, #20
 8009492:	af00      	add	r7, sp, #0
 8009494:	60f8      	str	r0, [r7, #12]
 8009496:	60b9      	str	r1, [r7, #8]
 8009498:	607a      	str	r2, [r7, #4]
 800949a:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)src;
	(void)length;
}
 800949c:	bf00      	nop
 800949e:	3714      	adds	r7, #20
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <rproc_virtio_reset_device>:

static void rproc_virtio_reset_device(struct virtio_device *vdev)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
	if (vdev->role == VIRTIO_DEV_MASTER)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	699b      	ldr	r3, [r3, #24]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d103      	bne.n	80094c0 <rproc_virtio_reset_device+0x18>
		rproc_virtio_set_status(vdev,
 80094b8:	2140      	movs	r1, #64	; 0x40
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f7ff ff54 	bl	8009368 <rproc_virtio_set_status>
					VIRTIO_CONFIG_STATUS_NEEDS_RESET);
}
 80094c0:	bf00      	nop
 80094c2:	3708      	adds	r7, #8
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b08e      	sub	sp, #56	; 0x38
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
 80094d4:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 80094da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094dc:	7e5b      	ldrb	r3, [r3, #25]
 80094de:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 80094e0:	2050      	movs	r0, #80	; 0x50
 80094e2:	f7ff febb 	bl	800925c <metal_allocate_memory>
 80094e6:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
 80094e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d101      	bne.n	80094f2 <rproc_virtio_create_vdev+0x2a>
		return NULL;
 80094ee:	2300      	movs	r3, #0
 80094f0:	e092      	b.n	8009618 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 80094f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094f4:	4613      	mov	r3, r2
 80094f6:	005b      	lsls	r3, r3, #1
 80094f8:	4413      	add	r3, r2
 80094fa:	00db      	lsls	r3, r3, #3
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7ff fead 	bl	800925c <metal_allocate_memory>
 8009502:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 8009504:	6a3b      	ldr	r3, [r7, #32]
 8009506:	2b00      	cmp	r3, #0
 8009508:	f000 8081 	beq.w	800960e <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 800950c:	2250      	movs	r2, #80	; 0x50
 800950e:	2100      	movs	r1, #0
 8009510:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009512:	f001 ff7f 	bl	800b414 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 8009516:	2218      	movs	r2, #24
 8009518:	2100      	movs	r1, #0
 800951a:	6a38      	ldr	r0, [r7, #32]
 800951c:	f001 ff7a 	bl	800b414 <memset>
	vdev = &rpvdev->vdev;
 8009520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009522:	3318      	adds	r3, #24
 8009524:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 8009526:	2300      	movs	r3, #0
 8009528:	637b      	str	r3, [r7, #52]	; 0x34
 800952a:	e025      	b.n	8009578 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 800952c:	2300      	movs	r3, #0
 800952e:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
 8009530:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009532:	4613      	mov	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4413      	add	r3, r2
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	3318      	adds	r3, #24
 800953c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800953e:	4413      	add	r3, r2
 8009540:	3304      	adds	r3, #4
 8009542:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d102      	bne.n	8009550 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 8009550:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009552:	f7ff fe9a 	bl	800928a <virtqueue_allocate>
 8009556:	6178      	str	r0, [r7, #20]
		if (!vq)
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d031      	beq.n	80095c2 <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 800955e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009560:	4613      	mov	r3, r2
 8009562:	005b      	lsls	r3, r3, #1
 8009564:	4413      	add	r3, r2
 8009566:	00db      	lsls	r3, r3, #3
 8009568:	461a      	mov	r2, r3
 800956a:	6a3b      	ldr	r3, [r7, #32]
 800956c:	4413      	add	r3, r2
 800956e:	697a      	ldr	r2, [r7, #20]
 8009570:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 8009572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009574:	3301      	adds	r3, #1
 8009576:	637b      	str	r3, [r7, #52]	; 0x34
 8009578:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800957a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957c:	429a      	cmp	r2, r3
 800957e:	d3d5      	bcc.n	800952c <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 8009580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009582:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009584:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 8009586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009588:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800958a:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	6a3a      	ldr	r2, [r7, #32]
 8009590:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 8009592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009596:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 8009598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959a:	683a      	ldr	r2, [r7, #0]
 800959c:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	68ba      	ldr	r2, [r7, #8]
 80095a2:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095ae:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 80095b0:	69fb      	ldr	r3, [r7, #28]
 80095b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095b4:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	4a19      	ldr	r2, [pc, #100]	; (8009620 <rproc_virtio_create_vdev+0x158>)
 80095ba:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 80095bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095be:	3318      	adds	r3, #24
 80095c0:	e02a      	b.n	8009618 <rproc_virtio_create_vdev+0x150>
			goto err1;
 80095c2:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 80095c4:	2300      	movs	r3, #0
 80095c6:	637b      	str	r3, [r7, #52]	; 0x34
 80095c8:	e019      	b.n	80095fe <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 80095ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095cc:	4613      	mov	r3, r2
 80095ce:	005b      	lsls	r3, r3, #1
 80095d0:	4413      	add	r3, r2
 80095d2:	00db      	lsls	r3, r3, #3
 80095d4:	461a      	mov	r2, r3
 80095d6:	6a3b      	ldr	r3, [r7, #32]
 80095d8:	4413      	add	r3, r2
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d00b      	beq.n	80095f8 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 80095e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095e2:	4613      	mov	r3, r2
 80095e4:	005b      	lsls	r3, r3, #1
 80095e6:	4413      	add	r3, r2
 80095e8:	00db      	lsls	r3, r3, #3
 80095ea:	461a      	mov	r2, r3
 80095ec:	6a3b      	ldr	r3, [r7, #32]
 80095ee:	4413      	add	r3, r2
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7ff fe3e 	bl	8009274 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 80095f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095fa:	3301      	adds	r3, #1
 80095fc:	637b      	str	r3, [r7, #52]	; 0x34
 80095fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009602:	429a      	cmp	r2, r3
 8009604:	d3e1      	bcc.n	80095ca <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 8009606:	6a38      	ldr	r0, [r7, #32]
 8009608:	f7ff fe34 	bl	8009274 <metal_free_memory>
 800960c:	e000      	b.n	8009610 <rproc_virtio_create_vdev+0x148>
		goto err0;
 800960e:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 8009610:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009612:	f7ff fe2f 	bl	8009274 <metal_free_memory>
	return NULL;
 8009616:	2300      	movs	r3, #0
}
 8009618:	4618      	mov	r0, r3
 800961a:	3738      	adds	r7, #56	; 0x38
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	0801044c 	.word	0x0801044c

08009624 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 8009624:	b480      	push	{r7}
 8009626:	b087      	sub	sp, #28
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	607a      	str	r2, [r7, #4]
 8009630:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009636:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 8009638:	68ba      	ldr	r2, [r7, #8]
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	429a      	cmp	r2, r3
 800963e:	d302      	bcc.n	8009646 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 8009640:	f06f 0301 	mvn.w	r3, #1
 8009644:	e019      	b.n	800967a <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800964a:	68ba      	ldr	r2, [r7, #8]
 800964c:	4613      	mov	r3, r2
 800964e:	005b      	lsls	r3, r3, #1
 8009650:	4413      	add	r3, r2
 8009652:	00db      	lsls	r3, r3, #3
 8009654:	440b      	add	r3, r1
 8009656:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	6a3a      	ldr	r2, [r7, #32]
 800965c:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	683a      	ldr	r2, [r7, #0]
 8009668:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 800966a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966c:	b29a      	uxth	r2, r3
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009676:	609a      	str	r2, [r3, #8]

	return 0;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	371c      	adds	r7, #28
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr

08009686 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b086      	sub	sp, #24
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
 800968e:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d102      	bne.n	800969c <rproc_virtio_notified+0x16>
		return -EINVAL;
 8009696:	f06f 0315 	mvn.w	r3, #21
 800969a:	e02c      	b.n	80096f6 <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	683a      	ldr	r2, [r7, #0]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d101      	bne.n	80096aa <rproc_virtio_notified+0x24>
		return 0;
 80096a6:	2300      	movs	r3, #0
 80096a8:	e025      	b.n	80096f6 <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ae:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 80096b0:	2300      	movs	r3, #0
 80096b2:	617b      	str	r3, [r7, #20]
 80096b4:	e01a      	b.n	80096ec <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80096ba:	697a      	ldr	r2, [r7, #20]
 80096bc:	4613      	mov	r3, r2
 80096be:	005b      	lsls	r3, r3, #1
 80096c0:	4413      	add	r3, r2
 80096c2:	00db      	lsls	r3, r3, #3
 80096c4:	440b      	add	r3, r1
 80096c6:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	683a      	ldr	r2, [r7, #0]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d003      	beq.n	80096da <rproc_virtio_notified+0x54>
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d8:	d105      	bne.n	80096e6 <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 80096e0:	68b8      	ldr	r0, [r7, #8]
 80096e2:	f001 fb58 	bl	800ad96 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	3301      	adds	r3, #1
 80096ea:	617b      	str	r3, [r7, #20]
 80096ec:	697a      	ldr	r2, [r7, #20]
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d3e0      	bcc.n	80096b6 <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3718      	adds	r7, #24
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b084      	sub	sp, #16
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	699b      	ldr	r3, [r3, #24]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d00a      	beq.n	8009724 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f7ff fe08 	bl	8009324 <rproc_virtio_get_status>
 8009714:	4603      	mov	r3, r0
 8009716:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 8009718:	7bfb      	ldrb	r3, [r7, #15]
 800971a:	f003 0304 	and.w	r3, r3, #4
 800971e:	2b00      	cmp	r3, #0
 8009720:	d102      	bne.n	8009728 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 8009722:	e7f4      	b.n	800970e <rproc_virtio_wait_remote_ready+0x10>
		return;
 8009724:	bf00      	nop
 8009726:	e000      	b.n	800972a <rproc_virtio_wait_remote_ready+0x2c>
			return;
 8009728:	bf00      	nop
	}
}
 800972a:	3710      	adds	r7, #16
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8009738:	bf00      	nop
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2201      	movs	r2, #1
 800973e:	4611      	mov	r1, r2
 8009740:	f3bf 8f5b 	dmb	ish
 8009744:	e8d3 2f4f 	ldrexb	r2, [r3]
 8009748:	e8c3 1f40 	strexb	r0, r1, [r3]
 800974c:	2800      	cmp	r0, #0
 800974e:	d1f9      	bne.n	8009744 <__metal_mutex_acquire+0x14>
 8009750:	f3bf 8f5b 	dmb	ish
 8009754:	b2d3      	uxtb	r3, r2
 8009756:	2b00      	cmp	r3, #0
 8009758:	d1ef      	bne.n	800973a <__metal_mutex_acquire+0xa>
		;
	}
}
 800975a:	bf00      	nop
 800975c:	bf00      	nop
 800975e:	370c      	adds	r7, #12
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr

08009768 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f3bf 8f5b 	dmb	ish
 8009776:	2200      	movs	r2, #0
 8009778:	701a      	strb	r2, [r3, #0]
 800977a:	f3bf 8f5b 	dmb	ish
}
 800977e:	bf00      	nop
 8009780:	370c      	adds	r7, #12
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr

0800978a <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b082      	sub	sp, #8
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f7ff ffcc 	bl	8009730 <__metal_mutex_acquire>
}
 8009798:	bf00      	nop
 800979a:	3708      	adds	r7, #8
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f7ff ffdd 	bl	8009768 <__metal_mutex_release>
}
 80097ae:	bf00      	nop
 80097b0:	3708      	adds	r7, #8
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <metal_list_add_before>:
{
 80097b6:	b480      	push	{r7}
 80097b8:	b083      	sub	sp, #12
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
 80097be:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	685a      	ldr	r2, [r3, #4]
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	683a      	ldr	r2, [r7, #0]
 80097d4:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	683a      	ldr	r2, [r7, #0]
 80097dc:	601a      	str	r2, [r3, #0]
}
 80097de:	bf00      	nop
 80097e0:	370c      	adds	r7, #12
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr

080097ea <metal_list_add_tail>:
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b082      	sub	sp, #8
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
 80097f2:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 80097f4:	6839      	ldr	r1, [r7, #0]
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f7ff ffdd 	bl	80097b6 <metal_list_add_before>
}
 80097fc:	bf00      	nop
 80097fe:	3708      	adds	r7, #8
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	6852      	ldr	r2, [r2, #4]
 8009814:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	6812      	ldr	r2, [r2, #0]
 800981e:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	605a      	str	r2, [r3, #4]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	685a      	ldr	r2, [r3, #4]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	601a      	str	r2, [r3, #0]
}
 800982e:	bf00      	nop
 8009830:	370c      	adds	r7, #12
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr

0800983a <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 800983a:	b480      	push	{r7}
 800983c:	b083      	sub	sp, #12
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
 8009842:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	095b      	lsrs	r3, r3, #5
 8009848:	009a      	lsls	r2, r3, #2
 800984a:	6879      	ldr	r1, [r7, #4]
 800984c:	440a      	add	r2, r1
 800984e:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8009850:	683a      	ldr	r2, [r7, #0]
 8009852:	f002 021f 	and.w	r2, r2, #31
 8009856:	2001      	movs	r0, #1
 8009858:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	4403      	add	r3, r0
 8009862:	430a      	orrs	r2, r1
 8009864:	601a      	str	r2, [r3, #0]
}
 8009866:	bf00      	nop
 8009868:	370c      	adds	r7, #12
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr

08009872 <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 8009872:	b480      	push	{r7}
 8009874:	b083      	sub	sp, #12
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
 800987a:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	095b      	lsrs	r3, r3, #5
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	4413      	add	r3, r2
 8009886:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	f003 031f 	and.w	r3, r3, #31
 800988e:	2101      	movs	r1, #1
 8009890:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8009894:	4013      	ands	r3, r2
}
 8009896:	4618      	mov	r0, r3
 8009898:	370c      	adds	r7, #12
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr

080098a2 <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 80098a2:	b480      	push	{r7}
 80098a4:	b083      	sub	sp, #12
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
 80098aa:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	095b      	lsrs	r3, r3, #5
 80098b0:	009a      	lsls	r2, r3, #2
 80098b2:	6879      	ldr	r1, [r7, #4]
 80098b4:	440a      	add	r2, r1
 80098b6:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 80098b8:	683a      	ldr	r2, [r7, #0]
 80098ba:	f002 021f 	and.w	r2, r2, #31
 80098be:	2001      	movs	r0, #1
 80098c0:	fa00 f202 	lsl.w	r2, r0, r2
 80098c4:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	4403      	add	r3, r0
 80098cc:	400a      	ands	r2, r1
 80098ce:	601a      	str	r2, [r3, #0]
}
 80098d0:	bf00      	nop
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr

080098dc <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 80098e6:	6839      	ldr	r1, [r7, #0]
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f7ff ffc2 	bl	8009872 <metal_bitmap_is_bit_set>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	bf0c      	ite	eq
 80098f4:	2301      	moveq	r3, #1
 80098f6:	2300      	movne	r3, #0
 80098f8:	b2db      	uxtb	r3, r3
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3708      	adds	r7, #8
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b086      	sub	sp, #24
 8009906:	af00      	add	r7, sp, #0
 8009908:	60f8      	str	r0, [r7, #12]
 800990a:	60b9      	str	r1, [r7, #8]
 800990c:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	617b      	str	r3, [r7, #20]
 8009912:	e002      	b.n	800991a <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	3301      	adds	r3, #1
 8009918:	617b      	str	r3, [r7, #20]
	for (bit = start;
 800991a:	697a      	ldr	r2, [r7, #20]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	429a      	cmp	r2, r3
 8009920:	d207      	bcs.n	8009932 <metal_bitmap_next_clear_bit+0x30>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	4619      	mov	r1, r3
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	f7ff ffd8 	bl	80098dc <metal_bitmap_is_bit_clear>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d0f0      	beq.n	8009914 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 8009932:	697b      	ldr	r3, [r7, #20]
}
 8009934:	4618      	mov	r0, r3
 8009936:	3718      	adds	r7, #24
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <rpmsg_init_ept>:
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	607a      	str	r2, [r7, #4]
 8009948:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2220      	movs	r2, #32
 800994e:	68b9      	ldr	r1, [r7, #8]
 8009950:	4618      	mov	r0, r3
 8009952:	f002 fe2f 	bl	800c5b4 <strncpy>
	ept->addr = src;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	683a      	ldr	r2, [r7, #0]
 8009960:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	69ba      	ldr	r2, [r7, #24]
 8009966:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	69fa      	ldr	r2, [r7, #28]
 800996c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800996e:	bf00      	nop
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b084      	sub	sp, #16
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
 800997e:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 8009980:	f04f 33ff 	mov.w	r3, #4294967295
 8009984:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	461a      	mov	r2, r3
 800998a:	2100      	movs	r1, #0
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f7ff ffb8 	bl	8009902 <metal_bitmap_next_clear_bit>
 8009992:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	68ba      	ldr	r2, [r7, #8]
 8009998:	429a      	cmp	r2, r3
 800999a:	d206      	bcs.n	80099aa <rpmsg_get_address+0x34>
		addr = nextbit;
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	4619      	mov	r1, r3
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f7ff ff48 	bl	800983a <metal_bitmap_set_bit>
	}

	return addr;
 80099aa:	68fb      	ldr	r3, [r7, #12]
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3710      	adds	r7, #16
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	607a      	str	r2, [r7, #4]
	if (addr < size)
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	429a      	cmp	r2, r3
 80099c6:	da03      	bge.n	80099d0 <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 80099c8:	6879      	ldr	r1, [r7, #4]
 80099ca:	68f8      	ldr	r0, [r7, #12]
 80099cc:	f7ff ff69 	bl	80098a2 <metal_bitmap_clear_bit>
}
 80099d0:	bf00      	nop
 80099d2:	3710      	adds	r7, #16
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	607a      	str	r2, [r7, #4]
	if (addr < size)
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	da05      	bge.n	80099f8 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 80099ec:	6879      	ldr	r1, [r7, #4]
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	f7ff ff3f 	bl	8009872 <metal_bitmap_is_bit_set>
 80099f4:	4603      	mov	r3, r0
 80099f6:	e000      	b.n	80099fa <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 80099f8:	4b02      	ldr	r3, [pc, #8]	; (8009a04 <rpmsg_is_address_set+0x2c>)
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	fffff82d 	.word	0xfffff82d

08009a08 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	da05      	bge.n	8009a28 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 8009a1c:	6879      	ldr	r1, [r7, #4]
 8009a1e:	68f8      	ldr	r0, [r7, #12]
 8009a20:	f7ff ff0b 	bl	800983a <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 8009a24:	2300      	movs	r3, #0
 8009a26:	e000      	b.n	8009a2a <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 8009a28:	4b02      	ldr	r3, [pc, #8]	; (8009a34 <rpmsg_set_address+0x2c>)
	}
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	fffff82d 	.word	0xfffff82d

08009a38 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 8009a38:	b590      	push	{r4, r7, lr}
 8009a3a:	b089      	sub	sp, #36	; 0x24
 8009a3c:	af02      	add	r7, sp, #8
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	607a      	str	r2, [r7, #4]
 8009a44:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00a      	beq.n	8009a62 <rpmsg_send_offchannel_raw+0x2a>
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6a1b      	ldr	r3, [r3, #32]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d006      	beq.n	8009a62 <rpmsg_send_offchannel_raw+0x2a>
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d003      	beq.n	8009a62 <rpmsg_send_offchannel_raw+0x2a>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a60:	d101      	bne.n	8009a66 <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 8009a62:	4b0d      	ldr	r3, [pc, #52]	; (8009a98 <rpmsg_send_offchannel_raw+0x60>)
 8009a64:	e014      	b.n	8009a90 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6a1b      	ldr	r3, [r3, #32]
 8009a6a:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d00c      	beq.n	8009a8e <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8009a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a7a:	9301      	str	r3, [sp, #4]
 8009a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7e:	9300      	str	r3, [sp, #0]
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	68b9      	ldr	r1, [r7, #8]
 8009a86:	6978      	ldr	r0, [r7, #20]
 8009a88:	47a0      	blx	r4
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	e000      	b.n	8009a90 <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 8009a8e:	4b02      	ldr	r3, [pc, #8]	; (8009a98 <rpmsg_send_offchannel_raw+0x60>)
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	371c      	adds	r7, #28
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd90      	pop	{r4, r7, pc}
 8009a98:	fffff82d 	.word	0xfffff82d

08009a9c <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b090      	sub	sp, #64	; 0x40
 8009aa0:	af02      	add	r7, sp, #8
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	633b      	str	r3, [r7, #48]	; 0x30
	ns_msg.addr = ept->addr;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aae:	62fb      	str	r3, [r7, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 8009ab0:	6879      	ldr	r1, [r7, #4]
 8009ab2:	f107 030c 	add.w	r3, r7, #12
 8009ab6:	2220      	movs	r2, #32
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f002 fd7b 	bl	800c5b4 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009ac2:	f107 030c 	add.w	r3, r7, #12
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	9201      	str	r2, [sp, #4]
 8009aca:	2228      	movs	r2, #40	; 0x28
 8009acc:	9200      	str	r2, [sp, #0]
 8009ace:	2235      	movs	r2, #53	; 0x35
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f7ff ffb1 	bl	8009a38 <rpmsg_send_offchannel_raw>
 8009ad6:	6378      	str	r0, [r7, #52]	; 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 8009ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	da01      	bge.n	8009ae2 <rpmsg_send_ns_message+0x46>
		return ret;
 8009ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ae0:	e000      	b.n	8009ae4 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3738      	adds	r7, #56	; 0x38
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b088      	sub	sp, #32
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	607a      	str	r2, [r7, #4]
 8009af8:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	61fb      	str	r3, [r7, #28]
 8009b00:	e04b      	b.n	8009b9a <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 8009b02:	2300      	movs	r3, #0
 8009b04:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	3b34      	subs	r3, #52	; 0x34
 8009b0a:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b12:	d006      	beq.n	8009b22 <rpmsg_get_endpoint+0x36>
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d101      	bne.n	8009b22 <rpmsg_get_endpoint+0x36>
			return ept;
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	e040      	b.n	8009ba4 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d106      	bne.n	8009b3a <rpmsg_get_endpoint+0x4e>
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b30:	683a      	ldr	r2, [r7, #0]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d101      	bne.n	8009b3a <rpmsg_get_endpoint+0x4e>
			return ept;
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	e034      	b.n	8009ba4 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d00c      	beq.n	8009b5a <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	2220      	movs	r2, #32
 8009b44:	68b9      	ldr	r1, [r7, #8]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f002 fd22 	bl	800c590 <strncmp>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	bf0c      	ite	eq
 8009b52:	2301      	moveq	r3, #1
 8009b54:	2300      	movne	r3, #0
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d018      	beq.n	8009b92 <rpmsg_get_endpoint+0xa6>
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d015      	beq.n	8009b92 <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b6c:	d006      	beq.n	8009b7c <rpmsg_get_endpoint+0x90>
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b72:	683a      	ldr	r2, [r7, #0]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d101      	bne.n	8009b7c <rpmsg_get_endpoint+0x90>
			return ept;
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	e013      	b.n	8009ba4 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b82:	d107      	bne.n	8009b94 <rpmsg_get_endpoint+0xa8>
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b8c:	d102      	bne.n	8009b94 <rpmsg_get_endpoint+0xa8>
			return ept;
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	e008      	b.n	8009ba4 <rpmsg_get_endpoint+0xb8>
			continue;
 8009b92:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	61fb      	str	r3, [r7, #28]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	69fa      	ldr	r2, [r7, #28]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d1af      	bne.n	8009b02 <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3720      	adds	r7, #32
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d016      	beq.n	8009be8 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a1b      	ldr	r3, [r3, #32]
 8009bbe:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc8:	d008      	beq.n	8009bdc <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f103 0048 	add.w	r0, r3, #72	; 0x48
				      ept->addr);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	2180      	movs	r1, #128	; 0x80
 8009bd8:	f7ff feec 	bl	80099b4 <rpmsg_release_address>
	metal_list_del(&ept->node);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	3334      	adds	r3, #52	; 0x34
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7ff fe0f 	bl	8009804 <metal_list_del>
 8009be6:	e000      	b.n	8009bea <rpmsg_unregister_endpoint+0x3e>
		return;
 8009be8:	bf00      	nop
}
 8009bea:	3710      	adds	r7, #16
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	3334      	adds	r3, #52	; 0x34
 8009c06:	4619      	mov	r1, r3
 8009c08:	4610      	mov	r0, r2
 8009c0a:	f7ff fdee 	bl	80097ea <metal_list_add_tail>
	return RPMSG_SUCCESS;
 8009c0e:	2300      	movs	r3, #0
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3708      	adds	r7, #8
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b088      	sub	sp, #32
 8009c1c:	af02      	add	r7, sp, #8
 8009c1e:	60f8      	str	r0, [r7, #12]
 8009c20:	60b9      	str	r1, [r7, #8]
 8009c22:	607a      	str	r2, [r7, #4]
 8009c24:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	613b      	str	r3, [r7, #16]

	if (!ept)
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d101      	bne.n	8009c34 <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 8009c30:	4b37      	ldr	r3, [pc, #220]	; (8009d10 <rpmsg_create_ept+0xf8>)
 8009c32:	e068      	b.n	8009d06 <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	3358      	adds	r3, #88	; 0x58
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f7ff fda6 	bl	800978a <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c44:	d018      	beq.n	8009c78 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	3348      	adds	r3, #72	; 0x48
 8009c4a:	683a      	ldr	r2, [r7, #0]
 8009c4c:	2180      	movs	r1, #128	; 0x80
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7ff fec2 	bl	80099d8 <rpmsg_is_address_set>
 8009c54:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d107      	bne.n	8009c6c <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	3348      	adds	r3, #72	; 0x48
 8009c60:	683a      	ldr	r2, [r7, #0]
 8009c62:	2180      	movs	r1, #128	; 0x80
 8009c64:	4618      	mov	r0, r3
 8009c66:	f7ff fecf 	bl	8009a08 <rpmsg_set_address>
 8009c6a:	e00c      	b.n	8009c86 <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	dd40      	ble.n	8009cf4 <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 8009c72:	2300      	movs	r3, #0
 8009c74:	617b      	str	r3, [r7, #20]
			goto ret_status;
 8009c76:	e040      	b.n	8009cfa <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	3348      	adds	r3, #72	; 0x48
 8009c7c:	2180      	movs	r1, #128	; 0x80
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7ff fe79 	bl	8009976 <rpmsg_get_address>
 8009c84:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 8009c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c88:	9301      	str	r3, [sp, #4]
 8009c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8c:	9300      	str	r3, [sp, #0]
 8009c8e:	6a3b      	ldr	r3, [r7, #32]
 8009c90:	693a      	ldr	r2, [r7, #16]
 8009c92:	6879      	ldr	r1, [r7, #4]
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f7ff fe51 	bl	800993c <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 8009c9a:	68f9      	ldr	r1, [r7, #12]
 8009c9c:	68b8      	ldr	r0, [r7, #8]
 8009c9e:	f7ff ffa7 	bl	8009bf0 <rpmsg_register_endpoint>
 8009ca2:	6178      	str	r0, [r7, #20]
	if (status < 0)
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	da06      	bge.n	8009cb8 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	3348      	adds	r3, #72	; 0x48
 8009cae:	693a      	ldr	r2, [r7, #16]
 8009cb0:	2180      	movs	r1, #128	; 0x80
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7ff fe7e 	bl	80099b4 <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d11c      	bne.n	8009cf8 <rpmsg_create_ept+0xe0>
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cc6:	d117      	bne.n	8009cf8 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	3358      	adds	r3, #88	; 0x58
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7ff fd67 	bl	80097a0 <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 8009cd2:	2100      	movs	r1, #0
 8009cd4:	68f8      	ldr	r0, [r7, #12]
 8009cd6:	f7ff fee1 	bl	8009a9c <rpmsg_send_ns_message>
 8009cda:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	3358      	adds	r3, #88	; 0x58
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7ff fd52 	bl	800978a <metal_mutex_acquire>
		if (status)
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d005      	beq.n	8009cf8 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f7ff ff5d 	bl	8009bac <rpmsg_unregister_endpoint>
 8009cf2:	e002      	b.n	8009cfa <rpmsg_create_ept+0xe2>
			goto ret_status;
 8009cf4:	bf00      	nop
 8009cf6:	e000      	b.n	8009cfa <rpmsg_create_ept+0xe2>
	}

ret_status:
 8009cf8:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	3358      	adds	r3, #88	; 0x58
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7ff fd4e 	bl	80097a0 <metal_mutex_release>
	return status;
 8009d04:	697b      	ldr	r3, [r7, #20]
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3718      	adds	r7, #24
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	fffff82d 	.word	0xfffff82d

08009d14 <__metal_cache_invalidate>:
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8009d1e:	6839      	ldr	r1, [r7, #0]
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 fcc2 	bl	800a6aa <metal_machine_cache_invalidate>
}
 8009d26:	bf00      	nop
 8009d28:	3708      	adds	r7, #8
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <metal_cache_invalidate>:
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b082      	sub	sp, #8
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
 8009d36:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8009d38:	6839      	ldr	r1, [r7, #0]
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f7ff ffea 	bl	8009d14 <__metal_cache_invalidate>
}
 8009d40:	bf00      	nop
 8009d42:	3708      	adds	r7, #8
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	370c      	adds	r7, #12
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr

08009d5e <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b082      	sub	sp, #8
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f7ff ffee 	bl	8009d48 <__metal_sleep_usec>
 8009d6c:	4603      	mov	r3, r0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <metal_list_init>:
{
 8009d76:	b480      	push	{r7}
 8009d78:	b083      	sub	sp, #12
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	605a      	str	r2, [r3, #4]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685a      	ldr	r2, [r3, #4]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	601a      	str	r2, [r3, #0]
}
 8009d8c:	bf00      	nop
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <metal_io_virt_to_offset>:
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	683a      	ldr	r2, [r7, #0]
 8009da8:	1ad3      	subs	r3, r2, r3
 8009daa:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d201      	bcs.n	8009dba <metal_io_virt_to_offset+0x22>
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	e001      	b.n	8009dbe <metal_io_virt_to_offset+0x26>
 8009dba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3714      	adds	r7, #20
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr

08009dca <__metal_mutex_init>:
{
 8009dca:	b480      	push	{r7}
 8009dcc:	b085      	sub	sp, #20
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	60fb      	str	r3, [r7, #12]
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	60bb      	str	r3, [r7, #8]
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	461a      	mov	r2, r3
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f3bf 8f5b 	dmb	ish
 8009de4:	601a      	str	r2, [r3, #0]
 8009de6:	f3bf 8f5b 	dmb	ish
}
 8009dea:	bf00      	nop
 8009dec:	3714      	adds	r7, #20
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr

08009df6 <__metal_mutex_acquire>:
{
 8009df6:	b480      	push	{r7}
 8009df8:	b083      	sub	sp, #12
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8009dfe:	bf00      	nop
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2201      	movs	r2, #1
 8009e04:	4611      	mov	r1, r2
 8009e06:	f3bf 8f5b 	dmb	ish
 8009e0a:	e8d3 2f4f 	ldrexb	r2, [r3]
 8009e0e:	e8c3 1f40 	strexb	r0, r1, [r3]
 8009e12:	2800      	cmp	r0, #0
 8009e14:	d1f9      	bne.n	8009e0a <__metal_mutex_acquire+0x14>
 8009e16:	f3bf 8f5b 	dmb	ish
 8009e1a:	b2d3      	uxtb	r3, r2
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d1ef      	bne.n	8009e00 <__metal_mutex_acquire+0xa>
}
 8009e20:	bf00      	nop
 8009e22:	bf00      	nop
 8009e24:	370c      	adds	r7, #12
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr

08009e2e <__metal_mutex_release>:
{
 8009e2e:	b480      	push	{r7}
 8009e30:	b083      	sub	sp, #12
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f3bf 8f5b 	dmb	ish
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	701a      	strb	r2, [r3, #0]
 8009e40:	f3bf 8f5b 	dmb	ish
}
 8009e44:	bf00      	nop
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <metal_mutex_init>:
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f7ff ffb6 	bl	8009dca <__metal_mutex_init>
}
 8009e5e:	bf00      	nop
 8009e60:	3708      	adds	r7, #8
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}

08009e66 <metal_mutex_acquire>:
{
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b082      	sub	sp, #8
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f7ff ffc1 	bl	8009df6 <__metal_mutex_acquire>
}
 8009e74:	bf00      	nop
 8009e76:	3708      	adds	r7, #8
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <metal_mutex_release>:
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f7ff ffd2 	bl	8009e2e <__metal_mutex_release>
}
 8009e8a:	bf00      	nop
 8009e8c:	3708      	adds	r7, #8
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}

08009e92 <rpmsg_init_ept>:
{
 8009e92:	b580      	push	{r7, lr}
 8009e94:	b084      	sub	sp, #16
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	60f8      	str	r0, [r7, #12]
 8009e9a:	60b9      	str	r1, [r7, #8]
 8009e9c:	607a      	str	r2, [r7, #4]
 8009e9e:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2220      	movs	r2, #32
 8009ea4:	68b9      	ldr	r1, [r7, #8]
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f002 fb84 	bl	800c5b4 <strncpy>
	ept->addr = src;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	683a      	ldr	r2, [r7, #0]
 8009eb6:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	69ba      	ldr	r2, [r7, #24]
 8009ebc:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	69fa      	ldr	r2, [r7, #28]
 8009ec2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009ec4:	bf00      	nop
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ed8:	699b      	ldr	r3, [r3, #24]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	370c      	adds	r7, #12
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr

08009ee6 <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b082      	sub	sp, #8
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
 8009eee:	460b      	mov	r3, r1
 8009ef0:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ef6:	6a1b      	ldr	r3, [r3, #32]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8009efe:	78f9      	ldrb	r1, [r7, #3]
 8009f00:	4610      	mov	r0, r2
 8009f02:	4798      	blx	r3
}
 8009f04:	bf00      	nop
 8009f06:	3708      	adds	r7, #8
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f18:	6a1b      	ldr	r3, [r3, #32]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8009f20:	4610      	mov	r0, r2
 8009f22:	4798      	blx	r3
 8009f24:	4603      	mov	r3, r0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3708      	adds	r7, #8
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b082      	sub	sp, #8
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f3a:	6a1b      	ldr	r3, [r3, #32]
 8009f3c:	689b      	ldr	r3, [r3, #8]
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8009f42:	4610      	mov	r0, r2
 8009f44:	4798      	blx	r3
 8009f46:	4603      	mov	r3, r0
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3708      	adds	r7, #8
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b086      	sub	sp, #24
 8009f54:	af02      	add	r7, sp, #8
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	607a      	str	r2, [r7, #4]
 8009f5c:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8009f62:	68b9      	ldr	r1, [r7, #8]
 8009f64:	69bb      	ldr	r3, [r7, #24]
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	f000 fbf2 	bl	800a754 <virtio_create_virtqueues>
 8009f70:	4603      	mov	r3, r0
					callbacks);
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b082      	sub	sp, #8
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
 8009f82:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 8009f84:	f04f 33ff 	mov.w	r3, #4294967295
 8009f88:	683a      	ldr	r2, [r7, #0]
 8009f8a:	2100      	movs	r1, #0
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f7ff fdad 	bl	8009aec <rpmsg_get_endpoint>
 8009f92:	4603      	mov	r3, r0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3708      	adds	r7, #8
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <rpmsg_virtio_shm_pool_get_buffer>:

#ifndef VIRTIO_SLAVE_ONLY
metal_weak void *
rpmsg_virtio_shm_pool_get_buffer(struct rpmsg_virtio_shm_pool *shpool,
				 size_t size)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
	void *buffer;

	if (shpool->avail < size)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	683a      	ldr	r2, [r7, #0]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d901      	bls.n	8009fb4 <rpmsg_virtio_shm_pool_get_buffer+0x18>
		return NULL;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	e00f      	b.n	8009fd4 <rpmsg_virtio_shm_pool_get_buffer+0x38>
	buffer =  (void *)((char *)shpool->base + shpool->size - shpool->avail);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6899      	ldr	r1, [r3, #8]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	1acb      	subs	r3, r1, r3
 8009fc2:	4413      	add	r3, r2
 8009fc4:	60fb      	str	r3, [r7, #12]
	shpool->avail -= size;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	685a      	ldr	r2, [r3, #4]
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	1ad2      	subs	r2, r2, r3
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	605a      	str	r2, [r3, #4]

	return buffer;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3714      	adds	r7, #20
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <rpmsg_virtio_init_shm_pool>:
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b085      	sub	sp, #20
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	607a      	str	r2, [r7, #4]
	if (!shpool)
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d01d      	beq.n	800a02e <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	68ba      	ldr	r2, [r7, #8]
 8009ff6:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f003 0303 	and.w	r3, r3, #3
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d004      	beq.n	800a00c <rpmsg_virtio_init_shm_pool+0x2c>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f023 0303 	bic.w	r3, r3, #3
 800a008:	3304      	adds	r3, #4
 800a00a:	e000      	b.n	800a00e <rpmsg_virtio_init_shm_pool+0x2e>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	68fa      	ldr	r2, [r7, #12]
 800a010:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f003 0303 	and.w	r3, r3, #3
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d004      	beq.n	800a026 <rpmsg_virtio_init_shm_pool+0x46>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f023 0303 	bic.w	r3, r3, #3
 800a022:	3304      	adds	r3, #4
 800a024:	e000      	b.n	800a028 <rpmsg_virtio_init_shm_pool+0x48>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	68fa      	ldr	r2, [r7, #12]
 800a02a:	6053      	str	r3, [r2, #4]
 800a02c:	e000      	b.n	800a030 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 800a02e:	bf00      	nop
}
 800a030:	3714      	adds	r7, #20
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr

0800a03a <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b08a      	sub	sp, #40	; 0x28
 800a03e:	af02      	add	r7, sp, #8
 800a040:	60f8      	str	r0, [r7, #12]
 800a042:	60b9      	str	r1, [r7, #8]
 800a044:	607a      	str	r2, [r7, #4]
 800a046:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	f7ff ff3f 	bl	8009ecc <rpmsg_virtio_get_role>
 800a04e:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800a050:	69fb      	ldr	r3, [r7, #28]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d10d      	bne.n	800a072 <rpmsg_virtio_return_buffer+0x38>
		struct virtqueue_buf vqbuf;

		(void)idx;
		/* Initialize buffer node */
		vqbuf.buf = buffer;
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	61bb      	str	r3, [r7, #24]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800a062:	f107 0114 	add.w	r1, r7, #20
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	9300      	str	r3, [sp, #0]
 800a06a:	2301      	movs	r3, #1
 800a06c:	2200      	movs	r2, #0
 800a06e:	f000 fcc0 	bl	800a9f2 <virtqueue_add_buffer>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 800a072:	bf00      	nop
 800a074:	3720      	adds	r7, #32
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b08a      	sub	sp, #40	; 0x28
 800a07e:	af02      	add	r7, sp, #8
 800a080:	60f8      	str	r0, [r7, #12]
 800a082:	60b9      	str	r1, [r7, #8]
 800a084:	607a      	str	r2, [r7, #4]
 800a086:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f7ff ff1f 	bl	8009ecc <rpmsg_virtio_get_role>
 800a08e:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800a090:	69fb      	ldr	r3, [r7, #28]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d10f      	bne.n	800a0b6 <rpmsg_virtio_enqueue_buffer+0x3c>
		struct virtqueue_buf vqbuf;
		(void)idx;

		/* Initialize buffer node */
		vqbuf.buf = buffer;
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	61bb      	str	r3, [r7, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800a0a2:	f107 0114 	add.w	r1, r7, #20
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	9300      	str	r3, [sp, #0]
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f000 fca0 	bl	800a9f2 <virtqueue_add_buffer>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	e000      	b.n	800a0b8 <rpmsg_virtio_enqueue_buffer+0x3e>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3720      	adds	r7, #32
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b086      	sub	sp, #24
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	60b9      	str	r1, [r7, #8]
 800a0ca:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f7ff fefd 	bl	8009ecc <rpmsg_virtio_get_role>
 800a0d2:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d116      	bne.n	800a10c <rpmsg_virtio_get_tx_buffer+0x4c>
		data = virtqueue_get_buffer(rvdev->svq, (uint32_t *)len, idx);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	68b9      	ldr	r1, [r7, #8]
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f000 fcc7 	bl	800aa7a <virtqueue_get_buffer>
 800a0ec:	6178      	str	r0, [r7, #20]
		if (data == NULL) {
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d10b      	bne.n	800a10c <rpmsg_virtio_get_tx_buffer+0x4c>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7ff ff4d 	bl	8009f9c <rpmsg_virtio_shm_pool_get_buffer>
 800a102:	6178      	str	r0, [r7, #20]
							RPMSG_BUFFER_SIZE);
			*len = RPMSG_BUFFER_SIZE;
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a10a:	601a      	str	r2, [r3, #0]
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 800a10c:	697b      	ldr	r3, [r7, #20]
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3718      	adds	r7, #24
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b086      	sub	sp, #24
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	60f8      	str	r0, [r7, #12]
 800a11e:	60b9      	str	r1, [r7, #8]
 800a120:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f7ff fed2 	bl	8009ecc <rpmsg_virtio_get_role>
 800a128:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 800a12a:	2300      	movs	r3, #0
 800a12c:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d107      	bne.n	800a144 <rpmsg_virtio_get_rx_buffer+0x2e>
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	68b9      	ldr	r1, [r7, #8]
 800a13c:	4618      	mov	r0, r3
 800a13e:	f000 fc9c 	bl	800aa7a <virtqueue_get_buffer>
 800a142:	6178      	str	r0, [r7, #20]
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d005      	beq.n	800a156 <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4619      	mov	r1, r3
 800a150:	6978      	ldr	r0, [r7, #20]
 800a152:	f7ff fdec 	bl	8009d2e <metal_cache_invalidate>
	}

	return data;
 800a156:	697b      	ldr	r3, [r7, #20]
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3718      	adds	r7, #24
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f7ff feaf 	bl	8009ecc <rpmsg_virtio_get_role>
 800a16e:	60b8      	str	r0, [r7, #8]
	int length = 0;
 800a170:	2300      	movs	r3, #0
 800a172:	60fb      	str	r3, [r7, #12]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d102      	bne.n	800a180 <_rpmsg_virtio_get_buffer_size+0x20>
		/*
		 * If device role is Remote then buffers are provided by us
		 * (RPMSG Master), so just provide the macro.
		 */
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
 800a17a:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 800a17e:	60fb      	str	r3, [r7, #12]
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 800a180:	68fb      	ldr	r3, [r7, #12]
}
 800a182:	4618      	mov	r0, r3
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
	...

0800a18c <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b090      	sub	sp, #64	; 0x40
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	607a      	str	r2, [r7, #4]
 800a198:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 800a19a:	2300      	movs	r3, #0
 800a19c:	63fb      	str	r3, [r7, #60]	; 0x3c
	unsigned short idx;
	int tick_count = 0;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	637b      	str	r3, [r7, #52]	; 0x34

	status = rpmsg_virtio_get_status(rvdev);
 800a1a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a1a8:	f7ff feb0 	bl	8009f0c <rpmsg_virtio_get_status>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	633b      	str	r3, [r7, #48]	; 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 800a1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b2:	f003 0304 	and.w	r3, r3, #4
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d101      	bne.n	800a1be <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 800a1ba:	4b45      	ldr	r3, [pc, #276]	; (800a2d0 <rpmsg_virtio_send_offchannel_raw+0x144>)
 800a1bc:	e083      	b.n	800a2c6 <rpmsg_virtio_send_offchannel_raw+0x13a>
	}

	if (wait)
 800a1be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d003      	beq.n	800a1cc <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 800a1c4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800a1c8:	63bb      	str	r3, [r7, #56]	; 0x38
 800a1ca:	e001      	b.n	800a1d0 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	63bb      	str	r3, [r7, #56]	; 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	3358      	adds	r3, #88	; 0x58
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f7ff fe46 	bl	8009e66 <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 800a1da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a1dc:	f7ff ffc0 	bl	800a160 <_rpmsg_virtio_get_buffer_size>
 800a1e0:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (size <= avail_size)
 800a1e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	dc08      	bgt.n	800a1fc <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 800a1ea:	f107 0216 	add.w	r2, r7, #22
 800a1ee:	f107 0310 	add.w	r3, r7, #16
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a1f6:	f7ff ff63 	bl	800a0c0 <rpmsg_virtio_get_tx_buffer>
 800a1fa:	63f8      	str	r0, [r7, #60]	; 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	3358      	adds	r3, #88	; 0x58
 800a200:	4618      	mov	r0, r3
 800a202:	f7ff fe3b 	bl	8009e7c <metal_mutex_release>
		if (buffer || !tick_count)
 800a206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d10e      	bne.n	800a22a <rpmsg_virtio_send_offchannel_raw+0x9e>
 800a20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d00b      	beq.n	800a22a <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 800a212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a214:	2b00      	cmp	r3, #0
 800a216:	d001      	beq.n	800a21c <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 800a218:	4b2e      	ldr	r3, [pc, #184]	; (800a2d4 <rpmsg_virtio_send_offchannel_raw+0x148>)
 800a21a:	e054      	b.n	800a2c6 <rpmsg_virtio_send_offchannel_raw+0x13a>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 800a21c:	200a      	movs	r0, #10
 800a21e:	f7ff fd9e 	bl	8009d5e <metal_sleep_usec>
		tick_count--;
 800a222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a224:	3b01      	subs	r3, #1
 800a226:	63bb      	str	r3, [r7, #56]	; 0x38
	while (1) {
 800a228:	e7d2      	b.n	800a1d0 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 800a22a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d101      	bne.n	800a234 <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 800a230:	4b29      	ldr	r3, [pc, #164]	; (800a2d8 <rpmsg_virtio_send_offchannel_raw+0x14c>)
 800a232:	e048      	b.n	800a2c6 <rpmsg_virtio_send_offchannel_raw+0x13a>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 800a23c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a23e:	b29b      	uxth	r3, r3
 800a240:	84bb      	strh	r3, [r7, #36]	; 0x24
	rp_hdr.reserved = 0;
 800a242:	2300      	movs	r3, #0
 800a244:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 800a246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a24a:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 800a24c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a24e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a250:	f7ff fda2 	bl	8009d98 <metal_io_virt_to_offset>
 800a254:	4601      	mov	r1, r0
 800a256:	f107 0218 	add.w	r2, r7, #24
 800a25a:	2310      	movs	r3, #16
 800a25c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a25e:	f7fe fdd8 	bl	8008e12 <metal_io_block_write>
 800a262:	6338      	str	r0, [r7, #48]	; 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 800a264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a266:	2b10      	cmp	r3, #16
 800a268:	d000      	beq.n	800a26c <rpmsg_virtio_send_offchannel_raw+0xe0>
 800a26a:	e7fe      	b.n	800a26a <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 800a26c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a26e:	3310      	adds	r3, #16
 800a270:	4619      	mov	r1, r3
 800a272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a274:	f7ff fd90 	bl	8009d98 <metal_io_virt_to_offset>
 800a278:	4601      	mov	r1, r0
 800a27a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a27c:	683a      	ldr	r2, [r7, #0]
 800a27e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a280:	f7fe fdc7 	bl	8008e12 <metal_io_block_write>
 800a284:	6338      	str	r0, [r7, #48]	; 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 800a286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d000      	beq.n	800a290 <rpmsg_virtio_send_offchannel_raw+0x104>
 800a28e:	e7fe      	b.n	800a28e <rpmsg_virtio_send_offchannel_raw+0x102>
	metal_mutex_acquire(&rdev->lock);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	3358      	adds	r3, #88	; 0x58
 800a294:	4618      	mov	r0, r3
 800a296:	f7ff fde6 	bl	8009e66 <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 800a29a:	693a      	ldr	r2, [r7, #16]
 800a29c:	8afb      	ldrh	r3, [r7, #22]
 800a29e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a2a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a2a2:	f7ff feea 	bl	800a07a <rpmsg_virtio_enqueue_buffer>
 800a2a6:	6338      	str	r0, [r7, #48]	; 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 800a2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d000      	beq.n	800a2b0 <rpmsg_virtio_send_offchannel_raw+0x124>
 800a2ae:	e7fe      	b.n	800a2ae <rpmsg_virtio_send_offchannel_raw+0x122>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 800a2b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f000 fc5a 	bl	800ab6e <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	3358      	adds	r3, #88	; 0x58
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7ff fddc 	bl	8009e7c <metal_mutex_release>

	return size;
 800a2c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3740      	adds	r7, #64	; 0x40
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	fffff82c 	.word	0xfffff82c
 800a2d4:	fffff82b 	.word	0xfffff82b
 800a2d8:	fffff82e 	.word	0xfffff82e

0800a2dc <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 800a2e4:	bf00      	nop
 800a2e6:	370c      	adds	r7, #12
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 800a2f0:	b590      	push	{r4, r7, lr}
 800a2f2:	b08d      	sub	sp, #52	; 0x34
 800a2f4:	af02      	add	r7, sp, #8
 800a2f6:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 800a2fe:	6a3b      	ldr	r3, [r7, #32]
 800a300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a302:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 800a308:	69bb      	ldr	r3, [r7, #24]
 800a30a:	3358      	adds	r3, #88	; 0x58
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7ff fdaa 	bl	8009e66 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 800a312:	f107 020a 	add.w	r2, r7, #10
 800a316:	f107 030c 	add.w	r3, r7, #12
 800a31a:	4619      	mov	r1, r3
 800a31c:	69f8      	ldr	r0, [r7, #28]
 800a31e:	f7ff fefa 	bl	800a116 <rpmsg_virtio_get_rx_buffer>
 800a322:	6278      	str	r0, [r7, #36]	; 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 800a324:	69bb      	ldr	r3, [r7, #24]
 800a326:	3358      	adds	r3, #88	; 0x58
 800a328:	4618      	mov	r0, r3
 800a32a:	f7ff fda7 	bl	8009e7c <metal_mutex_release>

	while (rp_hdr) {
 800a32e:	e04c      	b.n	800a3ca <rpmsg_virtio_rx_callback+0xda>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	3358      	adds	r3, #88	; 0x58
 800a334:	4618      	mov	r0, r3
 800a336:	f7ff fd96 	bl	8009e66 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 800a33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	4619      	mov	r1, r3
 800a340:	69b8      	ldr	r0, [r7, #24]
 800a342:	f7ff fe1a 	bl	8009f7a <rpmsg_get_ept_from_addr>
 800a346:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 800a348:	69bb      	ldr	r3, [r7, #24]
 800a34a:	3358      	adds	r3, #88	; 0x58
 800a34c:	4618      	mov	r0, r3
 800a34e:	f7ff fd95 	bl	8009e7c <metal_mutex_release>

		if (!ept)
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d03c      	beq.n	800a3d2 <rpmsg_virtio_rx_callback+0xe2>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a35c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a360:	d103      	bne.n	800a36a <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 800a362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	629a      	str	r2, [r3, #40]	; 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800a36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a370:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 800a374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a376:	899b      	ldrh	r3, [r3, #12]
 800a378:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 800a37a:	4618      	mov	r0, r3
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a384:	9300      	str	r3, [sp, #0]
 800a386:	4613      	mov	r3, r2
 800a388:	4602      	mov	r2, r0
 800a38a:	6978      	ldr	r0, [r7, #20]
 800a38c:	47a0      	blx	r4
 800a38e:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d000      	beq.n	800a398 <rpmsg_virtio_rx_callback+0xa8>
 800a396:	e7fe      	b.n	800a396 <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 800a398:	69bb      	ldr	r3, [r7, #24]
 800a39a:	3358      	adds	r3, #88	; 0x58
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7ff fd62 	bl	8009e66 <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 800a3a2:	68fa      	ldr	r2, [r7, #12]
 800a3a4:	897b      	ldrh	r3, [r7, #10]
 800a3a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3a8:	69f8      	ldr	r0, [r7, #28]
 800a3aa:	f7ff fe46 	bl	800a03a <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 800a3ae:	f107 020a 	add.w	r2, r7, #10
 800a3b2:	f107 030c 	add.w	r3, r7, #12
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	69f8      	ldr	r0, [r7, #28]
 800a3ba:	f7ff feac 	bl	800a116 <rpmsg_virtio_get_rx_buffer>
 800a3be:	6278      	str	r0, [r7, #36]	; 0x24
		metal_mutex_release(&rdev->lock);
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	3358      	adds	r3, #88	; 0x58
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7ff fd59 	bl	8009e7c <metal_mutex_release>
	while (rp_hdr) {
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d1af      	bne.n	800a330 <rpmsg_virtio_rx_callback+0x40>
 800a3d0:	e000      	b.n	800a3d4 <rpmsg_virtio_rx_callback+0xe4>
			return;
 800a3d2:	bf00      	nop
	}
}
 800a3d4:	372c      	adds	r7, #44	; 0x2c
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd90      	pop	{r4, r7, pc}

0800a3da <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b092      	sub	sp, #72	; 0x48
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	60f8      	str	r0, [r7, #12]
 800a3e2:	60b9      	str	r1, [r7, #8]
 800a3e4:	607a      	str	r2, [r7, #4]
 800a3e6:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6a1b      	ldr	r3, [r3, #32]
 800a3ec:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 800a3ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3f0:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 800a3f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2b28      	cmp	r3, #40	; 0x28
 800a400:	d001      	beq.n	800a406 <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 800a402:	2300      	movs	r3, #0
 800a404:	e057      	b.n	800a4b6 <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 800a406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
 800a408:	4619      	mov	r1, r3
 800a40a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a40c:	f7ff fcc4 	bl	8009d98 <metal_io_virt_to_offset>
 800a410:	4601      	mov	r1, r0
 800a412:	f107 0210 	add.w	r2, r7, #16
 800a416:	2320      	movs	r3, #32
 800a418:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a41a:	f7fe fc83 	bl	8008d24 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 800a41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a420:	6a1b      	ldr	r3, [r3, #32]
 800a422:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 800a424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a426:	3358      	adds	r3, #88	; 0x58
 800a428:	4618      	mov	r0, r3
 800a42a:	f7ff fd1c 	bl	8009e66 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 800a42e:	f107 0110 	add.w	r1, r7, #16
 800a432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a434:	f04f 32ff 	mov.w	r2, #4294967295
 800a438:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a43a:	f7ff fb57 	bl	8009aec <rpmsg_get_endpoint>
 800a43e:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 800a440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a444:	f003 0301 	and.w	r3, r3, #1
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d017      	beq.n	800a47c <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 800a44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d003      	beq.n	800a45a <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 800a452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a454:	f04f 32ff 	mov.w	r2, #4294967295
 800a458:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
 800a45a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a45c:	3358      	adds	r3, #88	; 0x58
 800a45e:	4618      	mov	r0, r3
 800a460:	f7ff fd0c 	bl	8009e7c <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 800a464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a466:	2b00      	cmp	r3, #0
 800a468:	d024      	beq.n	800a4b4 <rpmsg_virtio_ns_callback+0xda>
 800a46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d020      	beq.n	800a4b4 <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 800a472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a476:	68f8      	ldr	r0, [r7, #12]
 800a478:	4798      	blx	r3
 800a47a:	e01b      	b.n	800a4b4 <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 800a47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d110      	bne.n	800a4a4 <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 800a482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a484:	3358      	adds	r3, #88	; 0x58
 800a486:	4618      	mov	r0, r3
 800a488:	f7ff fcf8 	bl	8009e7c <metal_mutex_release>
			if (rdev->ns_bind_cb)
 800a48c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a48e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a490:	2b00      	cmp	r3, #0
 800a492:	d00f      	beq.n	800a4b4 <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 800a494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a498:	f107 0110 	add.w	r1, r7, #16
 800a49c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a49e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a4a0:	4798      	blx	r3
 800a4a2:	e007      	b.n	800a4b4 <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 800a4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4a8:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
 800a4aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4ac:	3358      	adds	r3, #88	; 0x58
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7ff fce4 	bl	8009e7c <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3748      	adds	r7, #72	; 0x48
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
	...

0800a4c0 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b094      	sub	sp, #80	; 0x50
 800a4c4:	af02      	add	r7, sp, #8
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	607a      	str	r2, [r7, #4]
 800a4cc:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	63bb      	str	r3, [r7, #56]	; 0x38
	memset(rdev, 0, sizeof(*rdev));
 800a4d2:	2264      	movs	r2, #100	; 0x64
 800a4d4:	2100      	movs	r1, #0
 800a4d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a4d8:	f000 ff9c 	bl	800b414 <memset>
	metal_mutex_init(&rdev->lock);
 800a4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4de:	3358      	adds	r3, #88	; 0x58
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7ff fcb5 	bl	8009e50 <metal_mutex_init>
	rvdev->vdev = vdev;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	68ba      	ldr	r2, [r7, #8]
 800a4ea:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 800a4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	68fa      	ldr	r2, [r7, #12]
 800a4f6:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 800a4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fa:	4a5d      	ldr	r2, [pc, #372]	; (800a670 <rpmsg_init_vdev+0x1b0>)
 800a4fc:	661a      	str	r2, [r3, #96]	; 0x60
	role = rpmsg_virtio_get_role(rvdev);
 800a4fe:	68f8      	ldr	r0, [r7, #12]
 800a500:	f7ff fce4 	bl	8009ecc <rpmsg_virtio_get_role>
 800a504:	6378      	str	r0, [r7, #52]	; 0x34

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800a506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d120      	bne.n	800a54e <rpmsg_init_vdev+0x8e>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
 800a50c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d101      	bne.n	800a516 <rpmsg_init_vdev+0x56>
			return RPMSG_ERR_PARAM;
 800a512:	4b58      	ldr	r3, [pc, #352]	; (800a674 <rpmsg_init_vdev+0x1b4>)
 800a514:	e0a7      	b.n	800a666 <rpmsg_init_vdev+0x1a6>
		if (!shpool->size)
 800a516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d101      	bne.n	800a522 <rpmsg_init_vdev+0x62>
			return RPMSG_ERR_NO_BUFF;
 800a51e:	4b56      	ldr	r3, [pc, #344]	; (800a678 <rpmsg_init_vdev+0x1b8>)
 800a520:	e0a1      	b.n	800a666 <rpmsg_init_vdev+0x1a6>
		rvdev->shpool = shpool;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a526:	675a      	str	r2, [r3, #116]	; 0x74

		vq_names[0] = "rx_vq";
 800a528:	4b54      	ldr	r3, [pc, #336]	; (800a67c <rpmsg_init_vdev+0x1bc>)
 800a52a:	623b      	str	r3, [r7, #32]
		vq_names[1] = "tx_vq";
 800a52c:	4b54      	ldr	r3, [pc, #336]	; (800a680 <rpmsg_init_vdev+0x1c0>)
 800a52e:	627b      	str	r3, [r7, #36]	; 0x24
		callback[0] = rpmsg_virtio_rx_callback;
 800a530:	4b54      	ldr	r3, [pc, #336]	; (800a684 <rpmsg_init_vdev+0x1c4>)
 800a532:	61bb      	str	r3, [r7, #24]
		callback[1] = rpmsg_virtio_tx_callback;
 800a534:	4b54      	ldr	r3, [pc, #336]	; (800a688 <rpmsg_init_vdev+0x1c8>)
 800a536:	61fb      	str	r3, [r7, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	669a      	str	r2, [r3, #104]	; 0x68
		rvdev->svq  = vdev->vrings_info[1].vq;
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a546:	3318      	adds	r3, #24
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	66da      	str	r2, [r3, #108]	; 0x6c
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	683a      	ldr	r2, [r7, #0]
 800a552:	671a      	str	r2, [r3, #112]	; 0x70
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 800a554:	f107 0220 	add.w	r2, r7, #32
 800a558:	f107 0318 	add.w	r3, r7, #24
 800a55c:	9300      	str	r3, [sp, #0]
 800a55e:	4613      	mov	r3, r2
 800a560:	2202      	movs	r2, #2
 800a562:	2100      	movs	r1, #0
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	f7ff fcf3 	bl	8009f50 <rpmsg_virtio_create_virtqueues>
 800a56a:	6478      	str	r0, [r7, #68]	; 0x44
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 800a56c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d001      	beq.n	800a576 <rpmsg_init_vdev+0xb6>
		return status;
 800a572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a574:	e077      	b.n	800a666 <rpmsg_init_vdev+0x1a6>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 800a576:	2300      	movs	r3, #0
 800a578:	643b      	str	r3, [r7, #64]	; 0x40
 800a57a:	e00f      	b.n	800a59c <rpmsg_init_vdev+0xdc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a580:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a582:	4613      	mov	r3, r2
 800a584:	005b      	lsls	r3, r3, #1
 800a586:	4413      	add	r3, r2
 800a588:	00db      	lsls	r3, r3, #3
 800a58a:	440b      	add	r3, r1
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	62bb      	str	r3, [r7, #40]	; 0x28
		vq->shm_io = shm_io;
 800a590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a592:	683a      	ldr	r2, [r7, #0]
 800a594:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 800a596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a598:	3301      	adds	r3, #1
 800a59a:	643b      	str	r3, [r7, #64]	; 0x40
 800a59c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d9ec      	bls.n	800a57c <rpmsg_init_vdev+0xbc>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800a5a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d137      	bne.n	800a618 <rpmsg_init_vdev+0x158>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
 800a5a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5ac:	617b      	str	r3, [r7, #20]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5b2:	e02a      	b.n	800a60a <rpmsg_init_vdev+0x14a>
			/* Initialize TX virtqueue buffers for remote device */
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
 800a5b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a5b8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a5ba:	f7ff fcef 	bl	8009f9c <rpmsg_virtio_shm_pool_get_buffer>
 800a5be:	6338      	str	r0, [r7, #48]	; 0x30
							RPMSG_BUFFER_SIZE);

			if (!buffer) {
 800a5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d101      	bne.n	800a5ca <rpmsg_init_vdev+0x10a>
				return RPMSG_ERR_NO_BUFF;
 800a5c6:	4b2c      	ldr	r3, [pc, #176]	; (800a678 <rpmsg_init_vdev+0x1b8>)
 800a5c8:	e04d      	b.n	800a666 <rpmsg_init_vdev+0x1a6>
			}

			vqbuf.buf = buffer;
 800a5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5cc:	613b      	str	r3, [r7, #16]

			metal_io_block_set(shm_io,
 800a5ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a5d0:	6838      	ldr	r0, [r7, #0]
 800a5d2:	f7ff fbe1 	bl	8009d98 <metal_io_virt_to_offset>
 800a5d6:	4601      	mov	r1, r0
 800a5d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5dc:	2200      	movs	r2, #0
 800a5de:	6838      	ldr	r0, [r7, #0]
 800a5e0:	f7fe fc8d 	bl	8008efe <metal_io_block_set>
					   metal_io_virt_to_offset(shm_io,
								   buffer),
					   0x00, RPMSG_BUFFER_SIZE);
			status =
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800a5e8:	f107 0110 	add.w	r1, r7, #16
 800a5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ee:	9300      	str	r3, [sp, #0]
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f000 f9fd 	bl	800a9f2 <virtqueue_add_buffer>
 800a5f8:	6478      	str	r0, [r7, #68]	; 0x44
						     buffer);

			if (status != RPMSG_SUCCESS) {
 800a5fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d001      	beq.n	800a604 <rpmsg_init_vdev+0x144>
				return status;
 800a600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a602:	e030      	b.n	800a666 <rpmsg_init_vdev+0x1a6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 800a604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a606:	3301      	adds	r3, #1
 800a608:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a60e:	895b      	ldrh	r3, [r3, #10]
 800a610:	461a      	mov	r2, r3
 800a612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a614:	4293      	cmp	r3, r2
 800a616:	d3cd      	bcc.n	800a5b4 <rpmsg_init_vdev+0xf4>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 800a618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7ff fbab 	bl	8009d76 <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 800a620:	68f8      	ldr	r0, [r7, #12]
 800a622:	f7ff fc84 	bl	8009f2e <rpmsg_virtio_get_features>
 800a626:	62f8      	str	r0, [r7, #44]	; 0x2c

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 800a628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a62a:	f003 0301 	and.w	r3, r3, #1
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d011      	beq.n	800a656 <rpmsg_init_vdev+0x196>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 800a632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a634:	f103 0008 	add.w	r0, r3, #8
 800a638:	2300      	movs	r3, #0
 800a63a:	9301      	str	r3, [sp, #4]
 800a63c:	4b13      	ldr	r3, [pc, #76]	; (800a68c <rpmsg_init_vdev+0x1cc>)
 800a63e:	9300      	str	r3, [sp, #0]
 800a640:	2335      	movs	r3, #53	; 0x35
 800a642:	2235      	movs	r2, #53	; 0x35
 800a644:	4912      	ldr	r1, [pc, #72]	; (800a690 <rpmsg_init_vdev+0x1d0>)
 800a646:	f7ff fc24 	bl	8009e92 <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 800a64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a64c:	3308      	adds	r3, #8
 800a64e:	4619      	mov	r1, r3
 800a650:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a652:	f7ff facd 	bl	8009bf0 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
 800a656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d103      	bne.n	800a664 <rpmsg_init_vdev+0x1a4>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
 800a65c:	2104      	movs	r1, #4
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	f7ff fc41 	bl	8009ee6 <rpmsg_virtio_set_status>
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 800a664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800a666:	4618      	mov	r0, r3
 800a668:	3748      	adds	r7, #72	; 0x48
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
 800a66e:	bf00      	nop
 800a670:	0800a18d 	.word	0x0800a18d
 800a674:	fffff82d 	.word	0xfffff82d
 800a678:	fffff82e 	.word	0xfffff82e
 800a67c:	0800fc74 	.word	0x0800fc74
 800a680:	0800fc7c 	.word	0x0800fc7c
 800a684:	0800a2f1 	.word	0x0800a2f1
 800a688:	0800a2dd 	.word	0x0800a2dd
 800a68c:	0800a3db 	.word	0x0800a3db
 800a690:	0800fc84 	.word	0x0800fc84

0800a694 <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 800a69e:	bf00      	nop
 800a6a0:	370c      	adds	r7, #12
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr

0800a6aa <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 800a6aa:	b480      	push	{r7}
 800a6ac:	b083      	sub	sp, #12
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
 800a6b2:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 800a6b4:	bf00      	nop
 800a6b6:	370c      	adds	r7, #12
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b085      	sub	sp, #20
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	607a      	str	r2, [r7, #4]
 800a6cc:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3714      	adds	r7, #20
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <vring_size>:
 */
#define vring_used_event(vr)	((vr)->avail->ring[(vr)->num])
#define vring_avail_event(vr)	((vr)->used->ring[(vr)->num].id & 0xFFFF)

static inline int vring_size(unsigned int num, unsigned long align)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b085      	sub	sp, #20
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
	int size;

	size = num * sizeof(struct vring_desc);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	011b      	lsls	r3, r3, #4
 800a6ea:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	3303      	adds	r3, #3
 800a6f0:	005a      	lsls	r2, r3, #1
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	4413      	add	r3, r2
 800a6f6:	60fb      	str	r3, [r7, #12]
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
 800a6f8:	68fa      	ldr	r2, [r7, #12]
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	1e5a      	subs	r2, r3, #1
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	425b      	negs	r3, r3
 800a704:	4013      	ands	r3, r2
 800a706:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	00da      	lsls	r2, r3, #3
	size += sizeof(struct vring_used) +
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	4413      	add	r3, r2
 800a710:	3306      	adds	r3, #6
 800a712:	60fb      	str	r3, [r7, #12]

	return size;
 800a714:	68fb      	ldr	r3, [r7, #12]
}
 800a716:	4618      	mov	r0, r3
 800a718:	3714      	adds	r7, #20
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr

0800a722 <metal_io_virt_to_offset>:
{
 800a722:	b480      	push	{r7}
 800a724:	b085      	sub	sp, #20
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
 800a72a:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	683a      	ldr	r2, [r7, #0]
 800a732:	1ad3      	subs	r3, r2, r3
 800a734:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	68fa      	ldr	r2, [r7, #12]
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d201      	bcs.n	800a744 <metal_io_virt_to_offset+0x22>
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	e001      	b.n	800a748 <metal_io_virt_to_offset+0x26>
 800a744:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3714      	adds	r7, #20
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 800a754:	b590      	push	{r4, r7, lr}
 800a756:	b091      	sub	sp, #68	; 0x44
 800a758:	af04      	add	r7, sp, #16
 800a75a:	60f8      	str	r0, [r7, #12]
 800a75c:	60b9      	str	r1, [r7, #8]
 800a75e:	607a      	str	r2, [r7, #4]
 800a760:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a766:	62bb      	str	r3, [r7, #40]	; 0x28
	if (nvqs > num_vrings)
 800a768:	687a      	ldr	r2, [r7, #4]
 800a76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d902      	bls.n	800a776 <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 800a770:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 800a774:	e053      	b.n	800a81e <virtio_create_virtqueues+0xca>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 800a776:	2300      	movs	r3, #0
 800a778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a77a:	e04b      	b.n	800a814 <virtio_create_virtqueues+0xc0>
		vring_info = &vdev->vrings_info[i];
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a782:	4613      	mov	r3, r2
 800a784:	005b      	lsls	r3, r3, #1
 800a786:	4413      	add	r3, r2
 800a788:	00db      	lsls	r3, r3, #3
 800a78a:	440b      	add	r3, r1
 800a78c:	627b      	str	r3, [r7, #36]	; 0x24

		vring_alloc = &vring_info->info;
 800a78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a790:	3304      	adds	r3, #4
 800a792:	623b      	str	r3, [r7, #32]
#ifndef VIRTIO_SLAVE_ONLY
		if (vdev->role == VIRTIO_DEV_MASTER) {
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	699b      	ldr	r3, [r3, #24]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d118      	bne.n	800a7ce <virtio_create_virtqueues+0x7a>
			size_t offset;
			struct metal_io_region *io = vring_info->io;
 800a79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79e:	695b      	ldr	r3, [r3, #20]
 800a7a0:	61fb      	str	r3, [r7, #28]

			offset = metal_io_virt_to_offset(io,
 800a7a2:	6a3b      	ldr	r3, [r7, #32]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	69f8      	ldr	r0, [r7, #28]
 800a7aa:	f7ff ffba 	bl	800a722 <metal_io_virt_to_offset>
 800a7ae:	61b8      	str	r0, [r7, #24]
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
 800a7b0:	6a3b      	ldr	r3, [r7, #32]
 800a7b2:	891b      	ldrh	r3, [r3, #8]
			metal_io_block_set(io, offset, 0,
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	6a3b      	ldr	r3, [r7, #32]
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	4610      	mov	r0, r2
 800a7be:	f7ff ff8d 	bl	800a6dc <vring_size>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	69b9      	ldr	r1, [r7, #24]
 800a7c8:	69f8      	ldr	r0, [r7, #28]
 800a7ca:	f7fe fb98 	bl	8008efe <metal_io_block_set>
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 800a7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d0:	b298      	uxth	r0, r3
 800a7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d4:	009b      	lsls	r3, r3, #2
 800a7d6:	683a      	ldr	r2, [r7, #0]
 800a7d8:	4413      	add	r3, r2
 800a7da:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 800a7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7de:	009b      	lsls	r3, r3, #2
 800a7e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a7e2:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 800a7e4:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 800a7e6:	68fa      	ldr	r2, [r7, #12]
 800a7e8:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 800a7ea:	6a12      	ldr	r2, [r2, #32]
 800a7ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a7ee:	6809      	ldr	r1, [r1, #0]
 800a7f0:	9102      	str	r1, [sp, #8]
 800a7f2:	9201      	str	r2, [sp, #4]
 800a7f4:	9300      	str	r3, [sp, #0]
 800a7f6:	6a3b      	ldr	r3, [r7, #32]
 800a7f8:	4622      	mov	r2, r4
 800a7fa:	4601      	mov	r1, r0
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f000 f8c4 	bl	800a98a <virtqueue_create>
 800a802:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d001      	beq.n	800a80e <virtio_create_virtqueues+0xba>
			return ret;
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	e007      	b.n	800a81e <virtio_create_virtqueues+0xca>
	for (i = 0; i < nvqs; i++) {
 800a80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a810:	3301      	adds	r3, #1
 800a812:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d3af      	bcc.n	800a77c <virtio_create_virtqueues+0x28>
	}
	return 0;
 800a81c:	2300      	movs	r3, #0
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3734      	adds	r7, #52	; 0x34
 800a822:	46bd      	mov	sp, r7
 800a824:	bd90      	pop	{r4, r7, pc}

0800a826 <vring_init>:

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 800a826:	b480      	push	{r7}
 800a828:	b085      	sub	sp, #20
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	60f8      	str	r0, [r7, #12]
 800a82e:	60b9      	str	r1, [r7, #8]
 800a830:	607a      	str	r2, [r7, #4]
 800a832:	603b      	str	r3, [r7, #0]
	vr->num = num;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	68ba      	ldr	r2, [r7, #8]
 800a838:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	011b      	lsls	r3, r3, #4
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	441a      	add	r2, r3
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	689a      	ldr	r2, [r3, #8]
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	005b      	lsls	r3, r3, #1
 800a854:	4413      	add	r3, r2
 800a856:	3304      	adds	r3, #4
 800a858:	461a      	mov	r2, r3
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 800a85e:	1c5a      	adds	r2, r3, #1
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	425b      	negs	r3, r3
 800a864:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 800a866:	461a      	mov	r2, r3
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	60da      	str	r2, [r3, #12]
}
 800a86c:	bf00      	nop
 800a86e:	3714      	adds	r7, #20
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	4603      	mov	r3, r0
 800a880:	80fb      	strh	r3, [r7, #6]
 800a882:	460b      	mov	r3, r1
 800a884:	80bb      	strh	r3, [r7, #4]
 800a886:	4613      	mov	r3, r2
 800a888:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 800a88a:	88ba      	ldrh	r2, [r7, #4]
 800a88c:	88fb      	ldrh	r3, [r7, #6]
 800a88e:	1ad3      	subs	r3, r2, r3
 800a890:	b29b      	uxth	r3, r3
 800a892:	3b01      	subs	r3, #1
 800a894:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 800a896:	88b9      	ldrh	r1, [r7, #4]
 800a898:	887b      	ldrh	r3, [r7, #2]
 800a89a:	1acb      	subs	r3, r1, r3
 800a89c:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	bf34      	ite	cc
 800a8a2:	2301      	movcc	r3, #1
 800a8a4:	2300      	movcs	r3, #0
 800a8a6:	b2db      	uxtb	r3, r3
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	370c      	adds	r7, #12
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <metal_io_virt_to_offset>:
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b085      	sub	sp, #20
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	683a      	ldr	r2, [r7, #0]
 800a8c4:	1ad3      	subs	r3, r2, r3
 800a8c6:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	68fa      	ldr	r2, [r7, #12]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d201      	bcs.n	800a8d6 <metal_io_virt_to_offset+0x22>
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	e001      	b.n	800a8da <metal_io_virt_to_offset+0x26>
 800a8d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3714      	adds	r7, #20
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr

0800a8e6 <metal_io_phys>:
{
 800a8e6:	b480      	push	{r7}
 800a8e8:	b085      	sub	sp, #20
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
 800a8ee:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 800a8f4:	2b1f      	cmp	r3, #31
 800a8f6:	d805      	bhi.n	800a904 <metal_io_phys+0x1e>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	68db      	ldr	r3, [r3, #12]
 800a8fc:	683a      	ldr	r2, [r7, #0]
 800a8fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a902:	e000      	b.n	800a906 <metal_io_phys+0x20>
 800a904:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 800a906:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d010      	beq.n	800a932 <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	689b      	ldr	r3, [r3, #8]
 800a914:	683a      	ldr	r2, [r7, #0]
 800a916:	429a      	cmp	r2, r3
 800a918:	d80b      	bhi.n	800a932 <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	685a      	ldr	r2, [r3, #4]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	009b      	lsls	r3, r3, #2
 800a922:	4413      	add	r3, r2
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6919      	ldr	r1, [r3, #16]
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 800a92e:	4413      	add	r3, r2
 800a930:	e001      	b.n	800a936 <metal_io_phys+0x50>
 800a932:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a936:	4618      	mov	r0, r3
 800a938:	3714      	adds	r7, #20
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr

0800a942 <metal_io_virt_to_phys>:
{
 800a942:	b580      	push	{r7, lr}
 800a944:	b082      	sub	sp, #8
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
 800a94a:	6039      	str	r1, [r7, #0]
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
 800a94c:	6839      	ldr	r1, [r7, #0]
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f7ff ffb0 	bl	800a8b4 <metal_io_virt_to_offset>
 800a954:	4603      	mov	r3, r0
 800a956:	4619      	mov	r1, r3
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f7ff ffc4 	bl	800a8e6 <metal_io_phys>
 800a95e:	4603      	mov	r3, r0
}
 800a960:	4618      	mov	r0, r3
 800a962:	3708      	adds	r7, #8
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <virtqueue_virt_to_phys>:
}

/* Default implementation of V2P based on libmetal */
static inline metal_phys_addr_t virtqueue_virt_to_phys(struct virtqueue *vq,
						       void *buf)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a976:	60fb      	str	r3, [r7, #12]

	return metal_io_virt_to_phys(io, buf);
 800a978:	6839      	ldr	r1, [r7, #0]
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	f7ff ffe1 	bl	800a942 <metal_io_virt_to_phys>
 800a980:	4603      	mov	r3, r0
}
 800a982:	4618      	mov	r0, r3
 800a984:	3710      	adds	r7, #16
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 800a98a:	b580      	push	{r7, lr}
 800a98c:	b086      	sub	sp, #24
 800a98e:	af00      	add	r7, sp, #0
 800a990:	60f8      	str	r0, [r7, #12]
 800a992:	607a      	str	r2, [r7, #4]
 800a994:	603b      	str	r3, [r7, #0]
 800a996:	460b      	mov	r3, r1
 800a998:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 800a99a:	2300      	movs	r3, #0
 800a99c:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d121      	bne.n	800a9e8 <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 800a9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a6:	68fa      	ldr	r2, [r7, #12]
 800a9a8:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 800a9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 800a9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b2:	897a      	ldrh	r2, [r7, #10]
 800a9b4:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	891a      	ldrh	r2, [r3, #8]
 800a9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9bc:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 800a9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c0:	895a      	ldrh	r2, [r3, #10]
 800a9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c4:	851a      	strh	r2, [r3, #40]	; 0x28
		vq->callback = callback;
 800a9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c8:	6a3a      	ldr	r2, [r7, #32]
 800a9ca:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 800a9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9d0:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	6819      	ldr	r1, [r3, #0]
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	461a      	mov	r2, r3
 800a9dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9de:	f000 f97a 	bl	800acd6 <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 800a9e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9e4:	f000 f899 	bl	800ab1a <virtqueue_disable_cb>
	}

	return (status);
 800a9e8:	697b      	ldr	r3, [r7, #20]
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3718      	adds	r7, #24
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <virtqueue_add_buffer>:
 *
 * @return                  - Function status
 */
int virtqueue_add_buffer(struct virtqueue *vq, struct virtqueue_buf *buf_list,
			 int readable, int writable, void *cookie)
{
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b08a      	sub	sp, #40	; 0x28
 800a9f6:	af02      	add	r7, sp, #8
 800a9f8:	60f8      	str	r0, [r7, #12]
 800a9fa:	60b9      	str	r1, [r7, #8]
 800a9fc:	607a      	str	r2, [r7, #4]
 800a9fe:	603b      	str	r3, [r7, #0]
	struct vq_desc_extra *dxp = NULL;
 800aa00:	2300      	movs	r3, #0
 800aa02:	61fb      	str	r3, [r7, #28]
	int status = VQUEUE_SUCCESS;
 800aa04:	2300      	movs	r3, #0
 800aa06:	61bb      	str	r3, [r7, #24]
	uint16_t head_idx;
	uint16_t idx;
	int needed;

	needed = readable + writable;
 800aa08:	687a      	ldr	r2, [r7, #4]
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(needed < 1, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(vq->vq_free_cnt == 0, status, ERROR_VRING_FULL);

	VQUEUE_BUSY(vq);

	if (status == VQUEUE_SUCCESS) {
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d12c      	bne.n	800aa70 <virtqueue_add_buffer+0x7e>
		VQASSERT(vq, cookie != NULL, "enqueuing with no cookie");

		head_idx = vq->vq_desc_head_idx;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800aa1a:	827b      	strh	r3, [r7, #18]
		VQ_RING_ASSERT_VALID_IDX(vq, head_idx);
		dxp = &vq->vq_descx[head_idx];
 800aa1c:	8a7b      	ldrh	r3, [r7, #18]
 800aa1e:	3307      	adds	r3, #7
 800aa20:	00db      	lsls	r3, r3, #3
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	4413      	add	r3, r2
 800aa26:	61fb      	str	r3, [r7, #28]

		VQASSERT(vq, dxp->cookie == NULL,
			 "cookie already exists for index");

		dxp->cookie = cookie;
 800aa28:	69fb      	ldr	r3, [r7, #28]
 800aa2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa2c:	601a      	str	r2, [r3, #0]
		dxp->ndescs = needed;
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	b29a      	uxth	r2, r3
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	809a      	strh	r2, [r3, #4]

		/* Enqueue buffer onto the ring. */
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	69d9      	ldr	r1, [r3, #28]
 800aa3a:	8a7a      	ldrh	r2, [r7, #18]
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	9301      	str	r3, [sp, #4]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	9300      	str	r3, [sp, #0]
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	68f8      	ldr	r0, [r7, #12]
 800aa48:	f000 f8a7 	bl	800ab9a <vq_ring_add_buffer>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	823b      	strh	r3, [r7, #16]
					 buf_list, readable, writable);

		vq->vq_desc_head_idx = idx;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	8a3a      	ldrh	r2, [r7, #16]
 800aa54:	861a      	strh	r2, [r3, #48]	; 0x30
		vq->vq_free_cnt -= needed;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	1ad3      	subs	r3, r2, r3
 800aa60:	b29a      	uxth	r2, r3
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	851a      	strh	r2, [r3, #40]	; 0x28

		/*
		 * Update vring_avail control block fields so that other
		 * side can get buffer using it.
		 */
		vq_ring_update_avail(vq, head_idx);
 800aa66:	8a7b      	ldrh	r3, [r7, #18]
 800aa68:	4619      	mov	r1, r3
 800aa6a:	68f8      	ldr	r0, [r7, #12]
 800aa6c:	f000 f966 	bl	800ad3c <vq_ring_update_avail>
	}

	VQUEUE_IDLE(vq);

	return status;
 800aa70:	69bb      	ldr	r3, [r7, #24]
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3720      	adds	r7, #32
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}

0800aa7a <virtqueue_get_buffer>:
 * @param idx           - index of the buffer
 *
 * @return              - Pointer to used buffer
 */
void *virtqueue_get_buffer(struct virtqueue *vq, uint32_t *len, uint16_t *idx)
{
 800aa7a:	b580      	push	{r7, lr}
 800aa7c:	b088      	sub	sp, #32
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	60f8      	str	r0, [r7, #12]
 800aa82:	60b9      	str	r1, [r7, #8]
 800aa84:	607a      	str	r2, [r7, #4]
	struct vring_used_elem *uep;
	void *cookie;
	uint16_t used_idx, desc_idx;

	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d006      	beq.n	800aa9a <virtqueue_get_buffer+0x20>
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa94:	885b      	ldrh	r3, [r3, #2]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d101      	bne.n	800aa9e <virtqueue_get_buffer+0x24>
		return (NULL);
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	e039      	b.n	800ab12 <virtqueue_get_buffer+0x98>

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aaa2:	1c5a      	adds	r2, r3, #1
 800aaa4:	b291      	uxth	r1, r2
 800aaa6:	68fa      	ldr	r2, [r7, #12]
 800aaa8:	8651      	strh	r1, [r2, #50]	; 0x32
 800aaaa:	b21a      	sxth	r2, r3
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	895b      	ldrh	r3, [r3, #10]
 800aab0:	3b01      	subs	r3, #1
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	b21b      	sxth	r3, r3
 800aab6:	4013      	ands	r3, r2
 800aab8:	b21b      	sxth	r3, r3
 800aaba:	83fb      	strh	r3, [r7, #30]
	uep = &vq->vq_ring.used->ring[used_idx];
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aac0:	8bfb      	ldrh	r3, [r7, #30]
 800aac2:	00db      	lsls	r3, r3, #3
 800aac4:	4413      	add	r3, r2
 800aac6:	3304      	adds	r3, #4
 800aac8:	61bb      	str	r3, [r7, #24]

	atomic_thread_fence(memory_order_seq_cst);
 800aaca:	f3bf 8f5b 	dmb	ish

	desc_idx = (uint16_t)uep->id;
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	82fb      	strh	r3, [r7, #22]
	if (len)
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d003      	beq.n	800aae2 <virtqueue_get_buffer+0x68>
		*len = uep->len;
 800aada:	69bb      	ldr	r3, [r7, #24]
 800aadc:	685a      	ldr	r2, [r3, #4]
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	601a      	str	r2, [r3, #0]

	vq_ring_free_chain(vq, desc_idx);
 800aae2:	8afb      	ldrh	r3, [r7, #22]
 800aae4:	4619      	mov	r1, r3
 800aae6:	68f8      	ldr	r0, [r7, #12]
 800aae8:	f000 f8ae 	bl	800ac48 <vq_ring_free_chain>

	cookie = vq->vq_descx[desc_idx].cookie;
 800aaec:	8afa      	ldrh	r2, [r7, #22]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	3207      	adds	r2, #7
 800aaf2:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800aaf6:	613b      	str	r3, [r7, #16]
	vq->vq_descx[desc_idx].cookie = NULL;
 800aaf8:	8afa      	ldrh	r2, [r7, #22]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	3207      	adds	r2, #7
 800aafe:	2100      	movs	r1, #0
 800ab00:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

	if (idx)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d002      	beq.n	800ab10 <virtqueue_get_buffer+0x96>
		*idx = used_idx;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	8bfa      	ldrh	r2, [r7, #30]
 800ab0e:	801a      	strh	r2, [r3, #0]
	VQUEUE_IDLE(vq);

	return cookie;
 800ab10:	693b      	ldr	r3, [r7, #16]
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3720      	adds	r7, #32
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 800ab1a:	b480      	push	{r7}
 800ab1c:	b083      	sub	sp, #12
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	68db      	ldr	r3, [r3, #12]
 800ab26:	f003 0302 	and.w	r3, r3, #2
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d010      	beq.n	800ab50 <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	895b      	ldrh	r3, [r3, #10]
 800ab36:	1ad3      	subs	r3, r2, r3
 800ab38:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6a1a      	ldr	r2, [r3, #32]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 800ab42:	3901      	subs	r1, #1
 800ab44:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 800ab46:	005b      	lsls	r3, r3, #1
 800ab48:	4413      	add	r3, r2
 800ab4a:	460a      	mov	r2, r1
 800ab4c:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 800ab4e:	e008      	b.n	800ab62 <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6a1b      	ldr	r3, [r3, #32]
 800ab54:	881a      	ldrh	r2, [r3, #0]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6a1b      	ldr	r3, [r3, #32]
 800ab5a:	f042 0201 	orr.w	r2, r2, #1
 800ab5e:	b292      	uxth	r2, r2
 800ab60:	801a      	strh	r2, [r3, #0]
}
 800ab62:	bf00      	nop
 800ab64:	370c      	adds	r7, #12
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr

0800ab6e <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 800ab6e:	b580      	push	{r7, lr}
 800ab70:	b082      	sub	sp, #8
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 800ab76:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f000 f91d 	bl	800adba <vq_ring_must_notify_host>
 800ab80:	4603      	mov	r3, r0
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d002      	beq.n	800ab8c <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 f94d 	bl	800ae26 <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	855a      	strh	r2, [r3, #42]	; 0x2a

	VQUEUE_IDLE(vq);
}
 800ab92:	bf00      	nop
 800ab94:	3708      	adds	r7, #8
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}

0800ab9a <vq_ring_add_buffer>:
 */
static uint16_t vq_ring_add_buffer(struct virtqueue *vq,
				   struct vring_desc *desc, uint16_t head_idx,
				   struct virtqueue_buf *buf_list, int readable,
				   int writable)
{
 800ab9a:	b580      	push	{r7, lr}
 800ab9c:	b088      	sub	sp, #32
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	60f8      	str	r0, [r7, #12]
 800aba2:	60b9      	str	r1, [r7, #8]
 800aba4:	603b      	str	r3, [r7, #0]
 800aba6:	4613      	mov	r3, r2
 800aba8:	80fb      	strh	r3, [r7, #6]
	int i, needed;
	uint16_t idx;

	(void)vq;

	needed = readable + writable;
 800abaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abae:	4413      	add	r3, r2
 800abb0:	617b      	str	r3, [r7, #20]

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 800abb2:	2300      	movs	r3, #0
 800abb4:	61fb      	str	r3, [r7, #28]
 800abb6:	88fb      	ldrh	r3, [r7, #6]
 800abb8:	837b      	strh	r3, [r7, #26]
 800abba:	e03c      	b.n	800ac36 <vq_ring_add_buffer+0x9c>
		VQASSERT(vq, idx != VQ_RING_DESC_CHAIN_END,
			 "premature end of free desc chain");

		dp = &desc[idx];
 800abbc:	8b7b      	ldrh	r3, [r7, #26]
 800abbe:	011b      	lsls	r3, r3, #4
 800abc0:	68ba      	ldr	r2, [r7, #8]
 800abc2:	4413      	add	r3, r2
 800abc4:	613b      	str	r3, [r7, #16]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
 800abc6:	69fb      	ldr	r3, [r7, #28]
 800abc8:	00db      	lsls	r3, r3, #3
 800abca:	683a      	ldr	r2, [r7, #0]
 800abcc:	4413      	add	r3, r2
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4619      	mov	r1, r3
 800abd2:	68f8      	ldr	r0, [r7, #12]
 800abd4:	f7ff fec8 	bl	800a968 <virtqueue_virt_to_phys>
 800abd8:	4603      	mov	r3, r0
 800abda:	461a      	mov	r2, r3
 800abdc:	f04f 0300 	mov.w	r3, #0
 800abe0:	6939      	ldr	r1, [r7, #16]
 800abe2:	e9c1 2300 	strd	r2, r3, [r1]
		dp->len = buf_list[i].len;
 800abe6:	69fb      	ldr	r3, [r7, #28]
 800abe8:	00db      	lsls	r3, r3, #3
 800abea:	683a      	ldr	r2, [r7, #0]
 800abec:	4413      	add	r3, r2
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	461a      	mov	r2, r3
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	609a      	str	r2, [r3, #8]
		dp->flags = 0;
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	2200      	movs	r2, #0
 800abfa:	819a      	strh	r2, [r3, #12]

		if (i < needed - 1)
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	3b01      	subs	r3, #1
 800ac00:	69fa      	ldr	r2, [r7, #28]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	da06      	bge.n	800ac14 <vq_ring_add_buffer+0x7a>
			dp->flags |= VRING_DESC_F_NEXT;
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	899b      	ldrh	r3, [r3, #12]
 800ac0a:	f043 0301 	orr.w	r3, r3, #1
 800ac0e:	b29a      	uxth	r2, r3
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	819a      	strh	r2, [r3, #12]

		/*
		 * Readable buffers are inserted  into vring before the
		 * writable buffers.
		 */
		if (i >= readable)
 800ac14:	69fa      	ldr	r2, [r7, #28]
 800ac16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	db06      	blt.n	800ac2a <vq_ring_add_buffer+0x90>
			dp->flags |= VRING_DESC_F_WRITE;
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	899b      	ldrh	r3, [r3, #12]
 800ac20:	f043 0302 	orr.w	r3, r3, #2
 800ac24:	b29a      	uxth	r2, r3
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	819a      	strh	r2, [r3, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 800ac2a:	69fb      	ldr	r3, [r7, #28]
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	61fb      	str	r3, [r7, #28]
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	89db      	ldrh	r3, [r3, #14]
 800ac34:	837b      	strh	r3, [r7, #26]
 800ac36:	69fa      	ldr	r2, [r7, #28]
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	dbbe      	blt.n	800abbc <vq_ring_add_buffer+0x22>
	}

	return (idx);
 800ac3e:	8b7b      	ldrh	r3, [r7, #26]
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3720      	adds	r7, #32
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b085      	sub	sp, #20
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	460b      	mov	r3, r1
 800ac52:	807b      	strh	r3, [r7, #2]
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	69da      	ldr	r2, [r3, #28]
 800ac58:	887b      	ldrh	r3, [r7, #2]
 800ac5a:	011b      	lsls	r3, r3, #4
 800ac5c:	4413      	add	r3, r2
 800ac5e:	60fb      	str	r3, [r7, #12]
	dxp = &vq->vq_descx[desc_idx];
 800ac60:	887b      	ldrh	r3, [r7, #2]
 800ac62:	3307      	adds	r3, #7
 800ac64:	00db      	lsls	r3, r3, #3
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	4413      	add	r3, r2
 800ac6a:	60bb      	str	r3, [r7, #8]

	if (vq->vq_free_cnt == 0) {
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	889b      	ldrh	r3, [r3, #4]
 800ac74:	4413      	add	r3, r2
 800ac76:	b29a      	uxth	r2, r3
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	851a      	strh	r2, [r3, #40]	; 0x28
	dxp->ndescs--;
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	889b      	ldrh	r3, [r3, #4]
 800ac80:	3b01      	subs	r3, #1
 800ac82:	b29a      	uxth	r2, r3
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	809a      	strh	r2, [r3, #4]

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	899b      	ldrh	r3, [r3, #12]
 800ac8c:	f003 0304 	and.w	r3, r3, #4
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d113      	bne.n	800acbc <vq_ring_free_chain+0x74>
		while (dp->flags & VRING_DESC_F_NEXT) {
 800ac94:	e00c      	b.n	800acb0 <vq_ring_free_chain+0x68>
			VQ_RING_ASSERT_VALID_IDX(vq, dp->next);
			dp = &vq->vq_ring.desc[dp->next];
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	69da      	ldr	r2, [r3, #28]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	89db      	ldrh	r3, [r3, #14]
 800ac9e:	011b      	lsls	r3, r3, #4
 800aca0:	4413      	add	r3, r2
 800aca2:	60fb      	str	r3, [r7, #12]
			dxp->ndescs--;
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	889b      	ldrh	r3, [r3, #4]
 800aca8:	3b01      	subs	r3, #1
 800acaa:	b29a      	uxth	r2, r3
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	809a      	strh	r2, [r3, #4]
		while (dp->flags & VRING_DESC_F_NEXT) {
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	899b      	ldrh	r3, [r3, #12]
 800acb4:	f003 0301 	and.w	r3, r3, #1
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d1ec      	bne.n	800ac96 <vq_ring_free_chain+0x4e>
	/*
	 * We must append the existing free chain, if any, to the end of
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 */
	dp->next = vq->vq_desc_head_idx;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	81da      	strh	r2, [r3, #14]
	vq->vq_desc_head_idx = desc_idx;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	887a      	ldrh	r2, [r7, #2]
 800acc8:	861a      	strh	r2, [r3, #48]	; 0x30
}
 800acca:	bf00      	nop
 800accc:	3714      	adds	r7, #20
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr

0800acd6 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 800acd6:	b580      	push	{r7, lr}
 800acd8:	b088      	sub	sp, #32
 800acda:	af00      	add	r7, sp, #0
 800acdc:	60f8      	str	r0, [r7, #12]
 800acde:	60b9      	str	r1, [r7, #8]
 800ace0:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	895b      	ldrh	r3, [r3, #10]
 800ace6:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	3318      	adds	r3, #24
 800acec:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 800acee:	69b9      	ldr	r1, [r7, #24]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	68ba      	ldr	r2, [r7, #8]
 800acf4:	6978      	ldr	r0, [r7, #20]
 800acf6:	f7ff fd96 	bl	800a826 <vring_init>

	for (i = 0; i < size - 1; i++)
 800acfa:	2300      	movs	r3, #0
 800acfc:	61fb      	str	r3, [r7, #28]
 800acfe:	e00c      	b.n	800ad1a <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 800ad00:	69fb      	ldr	r3, [r7, #28]
 800ad02:	b29a      	uxth	r2, r3
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	6859      	ldr	r1, [r3, #4]
 800ad08:	69fb      	ldr	r3, [r7, #28]
 800ad0a:	011b      	lsls	r3, r3, #4
 800ad0c:	440b      	add	r3, r1
 800ad0e:	3201      	adds	r2, #1
 800ad10:	b292      	uxth	r2, r2
 800ad12:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	3301      	adds	r3, #1
 800ad18:	61fb      	str	r3, [r7, #28]
 800ad1a:	69bb      	ldr	r3, [r7, #24]
 800ad1c:	3b01      	subs	r3, #1
 800ad1e:	69fa      	ldr	r2, [r7, #28]
 800ad20:	429a      	cmp	r2, r3
 800ad22:	dbed      	blt.n	800ad00 <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	685a      	ldr	r2, [r3, #4]
 800ad28:	69fb      	ldr	r3, [r7, #28]
 800ad2a:	011b      	lsls	r3, r3, #4
 800ad2c:	4413      	add	r3, r2
 800ad2e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ad32:	81da      	strh	r2, [r3, #14]
}
 800ad34:	bf00      	nop
 800ad36:	3720      	adds	r7, #32
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <vq_ring_update_avail>:
 *
 * vq_ring_update_avail
 *
 */
static void vq_ring_update_avail(struct virtqueue *vq, uint16_t desc_idx)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	460b      	mov	r3, r1
 800ad46:	807b      	strh	r3, [r7, #2]
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6a1b      	ldr	r3, [r3, #32]
 800ad4c:	885b      	ldrh	r3, [r3, #2]
 800ad4e:	b21a      	sxth	r2, r3
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	895b      	ldrh	r3, [r3, #10]
 800ad54:	3b01      	subs	r3, #1
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	b21b      	sxth	r3, r3
 800ad5a:	4013      	ands	r3, r2
 800ad5c:	b21b      	sxth	r3, r3
 800ad5e:	81fb      	strh	r3, [r7, #14]
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6a1a      	ldr	r2, [r3, #32]
 800ad64:	89fb      	ldrh	r3, [r7, #14]
 800ad66:	005b      	lsls	r3, r3, #1
 800ad68:	4413      	add	r3, r2
 800ad6a:	887a      	ldrh	r2, [r7, #2]
 800ad6c:	809a      	strh	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 800ad6e:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a1b      	ldr	r3, [r3, #32]
 800ad76:	885a      	ldrh	r2, [r3, #2]
 800ad78:	3201      	adds	r2, #1
 800ad7a:	b292      	uxth	r2, r2
 800ad7c:	805a      	strh	r2, [r3, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad82:	3301      	adds	r3, #1
 800ad84:	b29a      	uxth	r2, r3
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800ad8a:	bf00      	nop
 800ad8c:	3714      	adds	r7, #20
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad94:	4770      	bx	lr

0800ad96 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 800ad96:	b580      	push	{r7, lr}
 800ad98:	b082      	sub	sp, #8
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 800ad9e:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	691b      	ldr	r3, [r3, #16]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d003      	beq.n	800adb2 <virtqueue_notification+0x1c>
		vq->callback(vq);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	691b      	ldr	r3, [r3, #16]
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	4798      	blx	r3
}
 800adb2:	bf00      	nop
 800adb4:	3708      	adds	r7, #8
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 800adba:	b580      	push	{r7, lr}
 800adbc:	b084      	sub	sp, #16
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	68db      	ldr	r3, [r3, #12]
 800adc6:	f003 0302 	and.w	r3, r3, #2
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d01d      	beq.n	800ae0a <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6a1b      	ldr	r3, [r3, #32]
 800add2:	885b      	ldrh	r3, [r3, #2]
 800add4:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adda:	89fa      	ldrh	r2, [r7, #14]
 800addc:	1ad3      	subs	r3, r2, r3
 800adde:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	699b      	ldr	r3, [r3, #24]
 800ade8:	00db      	lsls	r3, r3, #3
 800adea:	4413      	add	r3, r2
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 800adf0:	89ba      	ldrh	r2, [r7, #12]
 800adf2:	89f9      	ldrh	r1, [r7, #14]
 800adf4:	897b      	ldrh	r3, [r7, #10]
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7ff fd3e 	bl	800a878 <vring_need_event>
 800adfc:	4603      	mov	r3, r0
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	bf14      	ite	ne
 800ae02:	2301      	movne	r3, #1
 800ae04:	2300      	moveq	r3, #0
 800ae06:	b2db      	uxtb	r3, r3
 800ae08:	e009      	b.n	800ae1e <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae0e:	881b      	ldrh	r3, [r3, #0]
 800ae10:	f003 0301 	and.w	r3, r3, #1
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	bf0c      	ite	eq
 800ae18:	2301      	moveq	r3, #1
 800ae1a:	2300      	movne	r3, #0
 800ae1c:	b2db      	uxtb	r3, r3
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3710      	adds	r7, #16
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}

0800ae26 <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 800ae26:	b580      	push	{r7, lr}
 800ae28:	b082      	sub	sp, #8
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	695b      	ldr	r3, [r3, #20]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d003      	beq.n	800ae3e <vq_ring_notify_host+0x18>
		vq->notify(vq);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	695b      	ldr	r3, [r3, #20]
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	4798      	blx	r3
}
 800ae3e:	bf00      	nop
 800ae40:	3708      	adds	r7, #8
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
	...

0800ae48 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 800ae50:	4b04      	ldr	r3, [pc, #16]	; (800ae64 <HAL_HSEM_FreeCallback+0x1c>)
 800ae52:	2201      	movs	r2, #1
 800ae54:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM7 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 800ae56:	2002      	movs	r0, #2
 800ae58:	f7f8 fa00 	bl	800325c <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 800ae5c:	bf00      	nop
 800ae5e:	3708      	adds	r7, #8
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	24000584 	.word	0x24000584

0800ae68 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 800ae6e:	4b0f      	ldr	r3, [pc, #60]	; (800aeac <MAILBOX_Init+0x44>)
 800ae70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae74:	4a0d      	ldr	r2, [pc, #52]	; (800aeac <MAILBOX_Init+0x44>)
 800ae76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ae7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ae7e:	4b0b      	ldr	r3, [pc, #44]	; (800aeac <MAILBOX_Init+0x44>)
 800ae80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae88:	607b      	str	r3, [r7, #4]
 800ae8a:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN PRE_MAILBOX_INIT_CM7 */

  /* USER CODE END PRE_MAILBOX_INIT_CM7 */

  /* Enable CM7 receive irq */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 0, 1);
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	2100      	movs	r1, #0
 800ae90:	207d      	movs	r0, #125	; 0x7d
 800ae92:	f7f7 f8fa 	bl	800208a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 800ae96:	207d      	movs	r0, #125	; 0x7d
 800ae98:	f7f7 f911 	bl	80020be <HAL_NVIC_EnableIRQ>
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 800ae9c:	2002      	movs	r0, #2
 800ae9e:	f7f8 f9dd 	bl	800325c <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 800aea2:	2300      	movs	r3, #0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3708      	adds	r7, #8
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	58024400 	.word	0x58024400

0800aeb0 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 800aeb8:	4b09      	ldr	r3, [pc, #36]	; (800aee0 <MAILBOX_Poll+0x30>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d108      	bne.n	800aed2 <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM7 */

    /* USER CODE END PRE_NEW_MSG_CM7 */

    rproc_virtio_notified(vdev, VRING0_ID);
 800aec0:	2100      	movs	r1, #0
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f7fe fbdf 	bl	8009686 <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 800aec8:	4b05      	ldr	r3, [pc, #20]	; (800aee0 <MAILBOX_Poll+0x30>)
 800aeca:	2200      	movs	r2, #0
 800aecc:	601a      	str	r2, [r3, #0]
    return 0;
 800aece:	2300      	movs	r3, #0
 800aed0:	e001      	b.n	800aed6 <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 800aed2:	f06f 030a 	mvn.w	r3, #10
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3708      	adds	r7, #8
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	24000584 	.word	0x24000584

0800aee4 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
#ifdef CORE_CM7

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM7 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM7 */
  HAL_HSEM_FastTake(HSEM_ID_0);
 800aeee:	2000      	movs	r0, #0
 800aef0:	f7f8 f986 	bl	8003200 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_0,0);
 800aef4:	2100      	movs	r1, #0
 800aef6:	2000      	movs	r0, #0
 800aef8:	f7f8 f99c 	bl	8003234 <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3708      	adds	r7, #8
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <is_rpmsg_ept_ready>:
 *
 * Returns 1 if the rpmsg endpoint has both local addr and destination
 * addr set, 0 otherwise
 */
static inline unsigned int is_rpmsg_ept_ready(struct rpmsg_endpoint *ept)
{
 800af06:	b480      	push	{r7}
 800af08:	b083      	sub	sp, #12
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af16:	d006      	beq.n	800af26 <is_rpmsg_ept_ready+0x20>
		ept->addr != RPMSG_ADDR_ANY);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 800af1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af20:	d001      	beq.n	800af26 <is_rpmsg_ept_ready+0x20>
 800af22:	2301      	movs	r3, #1
 800af24:	e000      	b.n	800af28 <is_rpmsg_ept_ready+0x22>
 800af26:	2300      	movs	r3, #0
}
 800af28:	4618      	mov	r0, r3
 800af2a:	370c      	adds	r7, #12
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr

0800af34 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 800af42:	683a      	ldr	r2, [r7, #0]
 800af44:	429a      	cmp	r2, r3
 800af46:	d209      	bcs.n	800af5c <metal_device_io_region+0x28>
 800af48:	683a      	ldr	r2, [r7, #0]
 800af4a:	4613      	mov	r3, r2
 800af4c:	005b      	lsls	r3, r3, #1
 800af4e:	4413      	add	r3, r2
 800af50:	011b      	lsls	r3, r3, #4
 800af52:	3308      	adds	r3, #8
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	4413      	add	r3, r2
 800af58:	3304      	adds	r3, #4
 800af5a:	e000      	b.n	800af5e <metal_device_io_region+0x2a>
 800af5c:	2300      	movs	r3, #0
}
 800af5e:	4618      	mov	r0, r3
 800af60:	370c      	adds	r7, #12
 800af62:	46bd      	mov	sp, r7
 800af64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af68:	4770      	bx	lr
	...

0800af6c <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 800af6c:	b590      	push	{r4, r7, lr}
 800af6e:	b08d      	sub	sp, #52	; 0x34
 800af70:	af04      	add	r7, sp, #16
 800af72:	6078      	str	r0, [r7, #4]
  int status = 0;
 800af74:	2300      	movs	r3, #0
 800af76:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 800af78:	2300      	movs	r3, #0
 800af7a:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 800af7c:	4a41      	ldr	r2, [pc, #260]	; (800b084 <OPENAMP_shmem_init+0x118>)
 800af7e:	f107 0310 	add.w	r3, r7, #16
 800af82:	e892 0003 	ldmia.w	r2, {r0, r1}
 800af86:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 800af8a:	2300      	movs	r3, #0
 800af8c:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 800af8e:	2300      	movs	r3, #0
 800af90:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 800af92:	f107 0310 	add.w	r3, r7, #16
 800af96:	4618      	mov	r0, r3
 800af98:	f7fd fe28 	bl	8008bec <metal_init>

  status = metal_register_generic_device(&shm_device);
 800af9c:	483a      	ldr	r0, [pc, #232]	; (800b088 <OPENAMP_shmem_init+0x11c>)
 800af9e:	f7fd fccd 	bl	800893c <metal_register_generic_device>
 800afa2:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 800afa4:	69fb      	ldr	r3, [r7, #28]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d001      	beq.n	800afae <OPENAMP_shmem_init+0x42>
    return status;
 800afaa:	69fb      	ldr	r3, [r7, #28]
 800afac:	e066      	b.n	800b07c <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 800afae:	f107 0318 	add.w	r3, r7, #24
 800afb2:	461a      	mov	r2, r3
 800afb4:	4935      	ldr	r1, [pc, #212]	; (800b08c <OPENAMP_shmem_init+0x120>)
 800afb6:	4836      	ldr	r0, [pc, #216]	; (800b090 <OPENAMP_shmem_init+0x124>)
 800afb8:	f7fd fc82 	bl	80088c0 <metal_device_open>
 800afbc:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 800afbe:	69fb      	ldr	r3, [r7, #28]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d001      	beq.n	800afc8 <OPENAMP_shmem_init+0x5c>
    return status;
 800afc4:	69fb      	ldr	r3, [r7, #28]
 800afc6:	e059      	b.n	800b07c <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 800afc8:	4a32      	ldr	r2, [pc, #200]	; (800b094 <OPENAMP_shmem_init+0x128>)
 800afca:	4b33      	ldr	r3, [pc, #204]	; (800b098 <OPENAMP_shmem_init+0x12c>)
 800afcc:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 800afce:	69bb      	ldr	r3, [r7, #24]
 800afd0:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 800afd4:	4a31      	ldr	r2, [pc, #196]	; (800b09c <OPENAMP_shmem_init+0x130>)
 800afd6:	4b2f      	ldr	r3, [pc, #188]	; (800b094 <OPENAMP_shmem_init+0x128>)
 800afd8:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 800afda:	461a      	mov	r2, r3
 800afdc:	2300      	movs	r3, #0
 800afde:	9302      	str	r3, [sp, #8]
 800afe0:	2300      	movs	r3, #0
 800afe2:	9301      	str	r3, [sp, #4]
 800afe4:	f04f 33ff 	mov.w	r3, #4294967295
 800afe8:	9300      	str	r3, [sp, #0]
 800afea:	4613      	mov	r3, r2
 800afec:	4a2a      	ldr	r2, [pc, #168]	; (800b098 <OPENAMP_shmem_init+0x12c>)
 800afee:	4929      	ldr	r1, [pc, #164]	; (800b094 <OPENAMP_shmem_init+0x128>)
 800aff0:	f7fd fe49 	bl	8008c86 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 800aff4:	69bb      	ldr	r3, [r7, #24]
 800aff6:	2100      	movs	r1, #0
 800aff8:	4618      	mov	r0, r3
 800affa:	f7ff ff9b 	bl	800af34 <metal_device_io_region>
 800affe:	4603      	mov	r3, r0
 800b000:	4a27      	ldr	r2, [pc, #156]	; (800b0a0 <OPENAMP_shmem_init+0x134>)
 800b002:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 800b004:	4b26      	ldr	r3, [pc, #152]	; (800b0a0 <OPENAMP_shmem_init+0x134>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d102      	bne.n	800b012 <OPENAMP_shmem_init+0xa6>
    return -1;
 800b00c:	f04f 33ff 	mov.w	r3, #4294967295
 800b010:	e034      	b.n	800b07c <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 800b012:	f107 0208 	add.w	r2, r7, #8
 800b016:	f107 030c 	add.w	r3, r7, #12
 800b01a:	4619      	mov	r1, r3
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f000 f91d 	bl	800b25c <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	4a1f      	ldr	r2, [pc, #124]	; (800b0a4 <OPENAMP_shmem_init+0x138>)
 800b026:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 800b028:	4b1e      	ldr	r3, [pc, #120]	; (800b0a4 <OPENAMP_shmem_init+0x138>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d102      	bne.n	800b036 <OPENAMP_shmem_init+0xca>
  {
    return -1;
 800b030:	f04f 33ff 	mov.w	r3, #4294967295
 800b034:	e022      	b.n	800b07c <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 800b036:	69bb      	ldr	r3, [r7, #24]
 800b038:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800b03c:	4b19      	ldr	r3, [pc, #100]	; (800b0a4 <OPENAMP_shmem_init+0x138>)
 800b03e:	6819      	ldr	r1, [r3, #0]
 800b040:	4b18      	ldr	r3, [pc, #96]	; (800b0a4 <OPENAMP_shmem_init+0x138>)
 800b042:	681a      	ldr	r2, [r3, #0]
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	461c      	mov	r4, r3
 800b048:	2300      	movs	r3, #0
 800b04a:	9302      	str	r3, [sp, #8]
 800b04c:	2300      	movs	r3, #0
 800b04e:	9301      	str	r3, [sp, #4]
 800b050:	f04f 33ff 	mov.w	r3, #4294967295
 800b054:	9300      	str	r3, [sp, #0]
 800b056:	4623      	mov	r3, r4
 800b058:	f7fd fe15 	bl	8008c86 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 800b05c:	69bb      	ldr	r3, [r7, #24]
 800b05e:	2101      	movs	r1, #1
 800b060:	4618      	mov	r0, r3
 800b062:	f7ff ff67 	bl	800af34 <metal_device_io_region>
 800b066:	4603      	mov	r3, r0
 800b068:	4a0f      	ldr	r2, [pc, #60]	; (800b0a8 <OPENAMP_shmem_init+0x13c>)
 800b06a:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 800b06c:	4b0e      	ldr	r3, [pc, #56]	; (800b0a8 <OPENAMP_shmem_init+0x13c>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d102      	bne.n	800b07a <OPENAMP_shmem_init+0x10e>
    return -1;
 800b074:	f04f 33ff 	mov.w	r3, #4294967295
 800b078:	e000      	b.n	800b07c <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 800b07a:	2300      	movs	r3, #0
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3724      	adds	r7, #36	; 0x24
 800b080:	46bd      	mov	sp, r7
 800b082:	bd90      	pop	{r4, r7, pc}
 800b084:	0800fc9c 	.word	0x0800fc9c
 800b088:	24000044 	.word	0x24000044
 800b08c:	0800fc88 	.word	0x0800fc88
 800b090:	0800fc94 	.word	0x0800fc94
 800b094:	38000400 	.word	0x38000400
 800b098:	24000618 	.word	0x24000618
 800b09c:	38010000 	.word	0x38010000
 800b0a0:	24000588 	.word	0x24000588
 800b0a4:	24000590 	.word	0x24000590
 800b0a8:	2400058c 	.word	0x2400058c

0800b0ac <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 800b0ac:	b590      	push	{r4, r7, lr}
 800b0ae:	b08b      	sub	sp, #44	; 0x2c
 800b0b0:	af04      	add	r7, sp, #16
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	613b      	str	r3, [r7, #16]
  int status = 0;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 800b0c2:	f7ff fed1 	bl	800ae68 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f7ff ff50 	bl	800af6c <OPENAMP_shmem_init>
 800b0cc:	60f8      	str	r0, [r7, #12]
  if(status)
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d001      	beq.n	800b0d8 <MX_OPENAMP_Init+0x2c>
  {
    return status;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	e06a      	b.n	800b1ae <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	4b37      	ldr	r3, [pc, #220]	; (800b1b8 <MX_OPENAMP_Init+0x10c>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f103 0218 	add.w	r2, r3, #24
 800b0e2:	4b36      	ldr	r3, [pc, #216]	; (800b1bc <MX_OPENAMP_Init+0x110>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	2100      	movs	r1, #0
 800b0e8:	9102      	str	r1, [sp, #8]
 800b0ea:	4935      	ldr	r1, [pc, #212]	; (800b1c0 <MX_OPENAMP_Init+0x114>)
 800b0ec:	9101      	str	r1, [sp, #4]
 800b0ee:	2100      	movs	r1, #0
 800b0f0:	9100      	str	r1, [sp, #0]
 800b0f2:	21ff      	movs	r1, #255	; 0xff
 800b0f4:	f7fe f9e8 	bl	80094c8 <rproc_virtio_create_vdev>
 800b0f8:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d102      	bne.n	800b106 <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 800b100:	f04f 33ff 	mov.w	r3, #4294967295
 800b104:	e053      	b.n	800b1ae <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 800b106:	6938      	ldr	r0, [r7, #16]
 800b108:	f7fe faf9 	bl	80096fe <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 800b10c:	4b2a      	ldr	r3, [pc, #168]	; (800b1b8 <MX_OPENAMP_Init+0x10c>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	3334      	adds	r3, #52	; 0x34
 800b112:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800b11c:	461c      	mov	r4, r3
 800b11e:	4b29      	ldr	r3, [pc, #164]	; (800b1c4 <MX_OPENAMP_Init+0x118>)
 800b120:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 800b122:	697a      	ldr	r2, [r7, #20]
 800b124:	6892      	ldr	r2, [r2, #8]
 800b126:	6979      	ldr	r1, [r7, #20]
 800b128:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800b12a:	9102      	str	r1, [sp, #8]
 800b12c:	9201      	str	r2, [sp, #4]
 800b12e:	9300      	str	r3, [sp, #0]
 800b130:	4623      	mov	r3, r4
 800b132:	4602      	mov	r2, r0
 800b134:	2100      	movs	r1, #0
 800b136:	6938      	ldr	r0, [r7, #16]
 800b138:	f7fe fa74 	bl	8009624 <rproc_virtio_init_vring>
 800b13c:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d001      	beq.n	800b148 <MX_OPENAMP_Init+0x9c>
  {
    return status;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	e032      	b.n	800b1ae <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 800b148:	4b1b      	ldr	r3, [pc, #108]	; (800b1b8 <MX_OPENAMP_Init+0x10c>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	3348      	adds	r3, #72	; 0x48
 800b14e:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800b158:	461c      	mov	r4, r3
 800b15a:	4b1a      	ldr	r3, [pc, #104]	; (800b1c4 <MX_OPENAMP_Init+0x118>)
 800b15c:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 800b15e:	697a      	ldr	r2, [r7, #20]
 800b160:	6892      	ldr	r2, [r2, #8]
 800b162:	6979      	ldr	r1, [r7, #20]
 800b164:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800b166:	9102      	str	r1, [sp, #8]
 800b168:	9201      	str	r2, [sp, #4]
 800b16a:	9300      	str	r3, [sp, #0]
 800b16c:	4623      	mov	r3, r4
 800b16e:	4602      	mov	r2, r0
 800b170:	2101      	movs	r1, #1
 800b172:	6938      	ldr	r0, [r7, #16]
 800b174:	f7fe fa56 	bl	8009624 <rproc_virtio_init_vring>
 800b178:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d001      	beq.n	800b184 <MX_OPENAMP_Init+0xd8>
  {
    return status;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	e014      	b.n	800b1ae <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 800b184:	4b10      	ldr	r3, [pc, #64]	; (800b1c8 <MX_OPENAMP_Init+0x11c>)
 800b186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b18a:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 800b18c:	4a0f      	ldr	r2, [pc, #60]	; (800b1cc <MX_OPENAMP_Init+0x120>)
 800b18e:	4b0e      	ldr	r3, [pc, #56]	; (800b1c8 <MX_OPENAMP_Init+0x11c>)
 800b190:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 800b192:	461a      	mov	r2, r3
 800b194:	480e      	ldr	r0, [pc, #56]	; (800b1d0 <MX_OPENAMP_Init+0x124>)
 800b196:	f7fe ff23 	bl	8009fe0 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 800b19a:	4b0a      	ldr	r3, [pc, #40]	; (800b1c4 <MX_OPENAMP_Init+0x118>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4a0c      	ldr	r2, [pc, #48]	; (800b1d0 <MX_OPENAMP_Init+0x124>)
 800b1a0:	9200      	str	r2, [sp, #0]
 800b1a2:	683a      	ldr	r2, [r7, #0]
 800b1a4:	6939      	ldr	r1, [r7, #16]
 800b1a6:	480b      	ldr	r0, [pc, #44]	; (800b1d4 <MX_OPENAMP_Init+0x128>)
 800b1a8:	f7ff f98a 	bl	800a4c0 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 800b1ac:	2300      	movs	r3, #0
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	371c      	adds	r7, #28
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd90      	pop	{r4, r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	24000590 	.word	0x24000590
 800b1bc:	2400058c 	.word	0x2400058c
 800b1c0:	0800aee5 	.word	0x0800aee5
 800b1c4:	24000588 	.word	0x24000588
 800b1c8:	38000400 	.word	0x38000400
 800b1cc:	38010000 	.word	0x38010000
 800b1d0:	24000594 	.word	0x24000594
 800b1d4:	240005a0 	.word	0x240005a0

0800b1d8 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b08a      	sub	sp, #40	; 0x28
 800b1dc:	af04      	add	r7, sp, #16
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	60b9      	str	r1, [r7, #8]
 800b1e2:	607a      	str	r2, [r7, #4]
 800b1e4:	603b      	str	r3, [r7, #0]
  int ret = 0;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 800b1ea:	6a3b      	ldr	r3, [r7, #32]
 800b1ec:	9302      	str	r3, [sp, #8]
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	9301      	str	r3, [sp, #4]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	9300      	str	r3, [sp, #0]
 800b1f6:	f04f 33ff 	mov.w	r3, #4294967295
 800b1fa:	68ba      	ldr	r2, [r7, #8]
 800b1fc:	4904      	ldr	r1, [pc, #16]	; (800b210 <OPENAMP_create_endpoint+0x38>)
 800b1fe:	68f8      	ldr	r0, [r7, #12]
 800b200:	f7fe fd0a 	bl	8009c18 <rpmsg_create_ept>
 800b204:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 800b206:	697b      	ldr	r3, [r7, #20]
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3718      	adds	r7, #24
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	240005a0 	.word	0x240005a0

0800b214 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 800b218:	4b03      	ldr	r3, [pc, #12]	; (800b228 <OPENAMP_check_for_message+0x14>)
 800b21a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b21c:	4618      	mov	r0, r3
 800b21e:	f7ff fe47 	bl	800aeb0 <MAILBOX_Poll>
}
 800b222:	bf00      	nop
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop
 800b228:	240005a0 	.word	0x240005a0

0800b22c <OPENAMP_Wait_EndPointready>:

void OPENAMP_Wait_EndPointready(struct rpmsg_endpoint *rp_ept)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b082      	sub	sp, #8
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EP_READY */

  /* USER CODE END EP_READY */

  while(!is_rpmsg_ept_ready(rp_ept))
 800b234:	e004      	b.n	800b240 <OPENAMP_Wait_EndPointready+0x14>
  {
    /* USER CODE BEGIN 0 */

    /* USER CODE END 0 */
      MAILBOX_Poll(rvdev.vdev);
 800b236:	4b08      	ldr	r3, [pc, #32]	; (800b258 <OPENAMP_Wait_EndPointready+0x2c>)
 800b238:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b23a:	4618      	mov	r0, r3
 800b23c:	f7ff fe38 	bl	800aeb0 <MAILBOX_Poll>
  while(!is_rpmsg_ept_ready(rp_ept))
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f7ff fe60 	bl	800af06 <is_rpmsg_ept_ready>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d0f4      	beq.n	800b236 <OPENAMP_Wait_EndPointready+0xa>

    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */
  }
}
 800b24c:	bf00      	nop
 800b24e:	bf00      	nop
 800b250:	3708      	adds	r7, #8
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	240005a0 	.word	0x240005a0

0800b25c <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b084      	sub	sp, #16
 800b260:	af00      	add	r7, sp, #0
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	607a      	str	r2, [r7, #4]

    /*
     * Currently the GCC linker doesn't initialize the resource_table global variable at startup
     * it is done here by the master application.
     */
	memset(&resource_table, '\0', sizeof(struct shared_resource_table));
 800b268:	228c      	movs	r2, #140	; 0x8c
 800b26a:	2100      	movs	r1, #0
 800b26c:	481e      	ldr	r0, [pc, #120]	; (800b2e8 <resource_table_init+0x8c>)
 800b26e:	f000 f8d1 	bl	800b414 <memset>
	resource_table.num = 1;
 800b272:	4b1d      	ldr	r3, [pc, #116]	; (800b2e8 <resource_table_init+0x8c>)
 800b274:	2201      	movs	r2, #1
 800b276:	605a      	str	r2, [r3, #4]
	resource_table.version = 1;
 800b278:	4b1b      	ldr	r3, [pc, #108]	; (800b2e8 <resource_table_init+0x8c>)
 800b27a:	2201      	movs	r2, #1
 800b27c:	601a      	str	r2, [r3, #0]
	resource_table.offset[0] = offsetof(struct shared_resource_table, vdev);
 800b27e:	4b1a      	ldr	r3, [pc, #104]	; (800b2e8 <resource_table_init+0x8c>)
 800b280:	2218      	movs	r2, #24
 800b282:	611a      	str	r2, [r3, #16]

	resource_table.vring0.da = VRING_TX_ADDRESS;
 800b284:	4b19      	ldr	r3, [pc, #100]	; (800b2ec <resource_table_init+0x90>)
 800b286:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b28a:	4a17      	ldr	r2, [pc, #92]	; (800b2e8 <resource_table_init+0x8c>)
 800b28c:	6353      	str	r3, [r2, #52]	; 0x34
	resource_table.vring0.align = VRING_ALIGNMENT;
 800b28e:	4b16      	ldr	r3, [pc, #88]	; (800b2e8 <resource_table_init+0x8c>)
 800b290:	2204      	movs	r2, #4
 800b292:	639a      	str	r2, [r3, #56]	; 0x38
	resource_table.vring0.num = VRING_NUM_BUFFS;
 800b294:	4b14      	ldr	r3, [pc, #80]	; (800b2e8 <resource_table_init+0x8c>)
 800b296:	2204      	movs	r2, #4
 800b298:	63da      	str	r2, [r3, #60]	; 0x3c
	resource_table.vring0.notifyid = VRING0_ID;
 800b29a:	4b13      	ldr	r3, [pc, #76]	; (800b2e8 <resource_table_init+0x8c>)
 800b29c:	2200      	movs	r2, #0
 800b29e:	641a      	str	r2, [r3, #64]	; 0x40

	resource_table.vring1.da = VRING_RX_ADDRESS;
 800b2a0:	4a12      	ldr	r2, [pc, #72]	; (800b2ec <resource_table_init+0x90>)
 800b2a2:	4b11      	ldr	r3, [pc, #68]	; (800b2e8 <resource_table_init+0x8c>)
 800b2a4:	649a      	str	r2, [r3, #72]	; 0x48
	resource_table.vring1.align = VRING_ALIGNMENT;
 800b2a6:	4b10      	ldr	r3, [pc, #64]	; (800b2e8 <resource_table_init+0x8c>)
 800b2a8:	2204      	movs	r2, #4
 800b2aa:	64da      	str	r2, [r3, #76]	; 0x4c
	resource_table.vring1.num = VRING_NUM_BUFFS;
 800b2ac:	4b0e      	ldr	r3, [pc, #56]	; (800b2e8 <resource_table_init+0x8c>)
 800b2ae:	2204      	movs	r2, #4
 800b2b0:	651a      	str	r2, [r3, #80]	; 0x50
	resource_table.vring1.notifyid = VRING1_ID;
 800b2b2:	4b0d      	ldr	r3, [pc, #52]	; (800b2e8 <resource_table_init+0x8c>)
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	655a      	str	r2, [r3, #84]	; 0x54

	resource_table.vdev.type = RSC_VDEV;
 800b2b8:	4b0b      	ldr	r3, [pc, #44]	; (800b2e8 <resource_table_init+0x8c>)
 800b2ba:	2203      	movs	r2, #3
 800b2bc:	619a      	str	r2, [r3, #24]
	resource_table.vdev.id = VIRTIO_ID_RPMSG_;
 800b2be:	4b0a      	ldr	r3, [pc, #40]	; (800b2e8 <resource_table_init+0x8c>)
 800b2c0:	2207      	movs	r2, #7
 800b2c2:	61da      	str	r2, [r3, #28]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
 800b2c4:	4b08      	ldr	r3, [pc, #32]	; (800b2e8 <resource_table_init+0x8c>)
 800b2c6:	2202      	movs	r2, #2
 800b2c8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
 800b2cc:	4b06      	ldr	r3, [pc, #24]	; (800b2e8 <resource_table_init+0x8c>)
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	228c      	movs	r2, #140	; 0x8c
 800b2d6:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	4a03      	ldr	r2, [pc, #12]	; (800b2e8 <resource_table_init+0x8c>)
 800b2dc:	601a      	str	r2, [r3, #0]
}
 800b2de:	bf00      	nop
 800b2e0:	3710      	adds	r7, #16
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	38000000 	.word	0x38000000
 800b2ec:	38000400 	.word	0x38000400

0800b2f0 <__assert_func>:
 800b2f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2f2:	4614      	mov	r4, r2
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	4b09      	ldr	r3, [pc, #36]	; (800b31c <__assert_func+0x2c>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4605      	mov	r5, r0
 800b2fc:	68d8      	ldr	r0, [r3, #12]
 800b2fe:	b14c      	cbz	r4, 800b314 <__assert_func+0x24>
 800b300:	4b07      	ldr	r3, [pc, #28]	; (800b320 <__assert_func+0x30>)
 800b302:	9100      	str	r1, [sp, #0]
 800b304:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b308:	4906      	ldr	r1, [pc, #24]	; (800b324 <__assert_func+0x34>)
 800b30a:	462b      	mov	r3, r5
 800b30c:	f000 f814 	bl	800b338 <fiprintf>
 800b310:	f002 f8a0 	bl	800d454 <abort>
 800b314:	4b04      	ldr	r3, [pc, #16]	; (800b328 <__assert_func+0x38>)
 800b316:	461c      	mov	r4, r3
 800b318:	e7f3      	b.n	800b302 <__assert_func+0x12>
 800b31a:	bf00      	nop
 800b31c:	240000c0 	.word	0x240000c0
 800b320:	080104af 	.word	0x080104af
 800b324:	080104bc 	.word	0x080104bc
 800b328:	080104ea 	.word	0x080104ea

0800b32c <__errno>:
 800b32c:	4b01      	ldr	r3, [pc, #4]	; (800b334 <__errno+0x8>)
 800b32e:	6818      	ldr	r0, [r3, #0]
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop
 800b334:	240000c0 	.word	0x240000c0

0800b338 <fiprintf>:
 800b338:	b40e      	push	{r1, r2, r3}
 800b33a:	b503      	push	{r0, r1, lr}
 800b33c:	4601      	mov	r1, r0
 800b33e:	ab03      	add	r3, sp, #12
 800b340:	4805      	ldr	r0, [pc, #20]	; (800b358 <fiprintf+0x20>)
 800b342:	f853 2b04 	ldr.w	r2, [r3], #4
 800b346:	6800      	ldr	r0, [r0, #0]
 800b348:	9301      	str	r3, [sp, #4]
 800b34a:	f000 f93f 	bl	800b5cc <_vfiprintf_r>
 800b34e:	b002      	add	sp, #8
 800b350:	f85d eb04 	ldr.w	lr, [sp], #4
 800b354:	b003      	add	sp, #12
 800b356:	4770      	bx	lr
 800b358:	240000c0 	.word	0x240000c0

0800b35c <__libc_init_array>:
 800b35c:	b570      	push	{r4, r5, r6, lr}
 800b35e:	4d0d      	ldr	r5, [pc, #52]	; (800b394 <__libc_init_array+0x38>)
 800b360:	4c0d      	ldr	r4, [pc, #52]	; (800b398 <__libc_init_array+0x3c>)
 800b362:	1b64      	subs	r4, r4, r5
 800b364:	10a4      	asrs	r4, r4, #2
 800b366:	2600      	movs	r6, #0
 800b368:	42a6      	cmp	r6, r4
 800b36a:	d109      	bne.n	800b380 <__libc_init_array+0x24>
 800b36c:	4d0b      	ldr	r5, [pc, #44]	; (800b39c <__libc_init_array+0x40>)
 800b36e:	4c0c      	ldr	r4, [pc, #48]	; (800b3a0 <__libc_init_array+0x44>)
 800b370:	f004 fb8e 	bl	800fa90 <_init>
 800b374:	1b64      	subs	r4, r4, r5
 800b376:	10a4      	asrs	r4, r4, #2
 800b378:	2600      	movs	r6, #0
 800b37a:	42a6      	cmp	r6, r4
 800b37c:	d105      	bne.n	800b38a <__libc_init_array+0x2e>
 800b37e:	bd70      	pop	{r4, r5, r6, pc}
 800b380:	f855 3b04 	ldr.w	r3, [r5], #4
 800b384:	4798      	blx	r3
 800b386:	3601      	adds	r6, #1
 800b388:	e7ee      	b.n	800b368 <__libc_init_array+0xc>
 800b38a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b38e:	4798      	blx	r3
 800b390:	3601      	adds	r6, #1
 800b392:	e7f2      	b.n	800b37a <__libc_init_array+0x1e>
 800b394:	0801096c 	.word	0x0801096c
 800b398:	0801096c 	.word	0x0801096c
 800b39c:	0801096c 	.word	0x0801096c
 800b3a0:	08010970 	.word	0x08010970

0800b3a4 <malloc>:
 800b3a4:	4b02      	ldr	r3, [pc, #8]	; (800b3b0 <malloc+0xc>)
 800b3a6:	4601      	mov	r1, r0
 800b3a8:	6818      	ldr	r0, [r3, #0]
 800b3aa:	f000 b88b 	b.w	800b4c4 <_malloc_r>
 800b3ae:	bf00      	nop
 800b3b0:	240000c0 	.word	0x240000c0

0800b3b4 <free>:
 800b3b4:	4b02      	ldr	r3, [pc, #8]	; (800b3c0 <free+0xc>)
 800b3b6:	4601      	mov	r1, r0
 800b3b8:	6818      	ldr	r0, [r3, #0]
 800b3ba:	f000 b833 	b.w	800b424 <_free_r>
 800b3be:	bf00      	nop
 800b3c0:	240000c0 	.word	0x240000c0

0800b3c4 <memcpy>:
 800b3c4:	440a      	add	r2, r1
 800b3c6:	4291      	cmp	r1, r2
 800b3c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3cc:	d100      	bne.n	800b3d0 <memcpy+0xc>
 800b3ce:	4770      	bx	lr
 800b3d0:	b510      	push	{r4, lr}
 800b3d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3da:	4291      	cmp	r1, r2
 800b3dc:	d1f9      	bne.n	800b3d2 <memcpy+0xe>
 800b3de:	bd10      	pop	{r4, pc}

0800b3e0 <memmove>:
 800b3e0:	4288      	cmp	r0, r1
 800b3e2:	b510      	push	{r4, lr}
 800b3e4:	eb01 0402 	add.w	r4, r1, r2
 800b3e8:	d902      	bls.n	800b3f0 <memmove+0x10>
 800b3ea:	4284      	cmp	r4, r0
 800b3ec:	4623      	mov	r3, r4
 800b3ee:	d807      	bhi.n	800b400 <memmove+0x20>
 800b3f0:	1e43      	subs	r3, r0, #1
 800b3f2:	42a1      	cmp	r1, r4
 800b3f4:	d008      	beq.n	800b408 <memmove+0x28>
 800b3f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b3fe:	e7f8      	b.n	800b3f2 <memmove+0x12>
 800b400:	4402      	add	r2, r0
 800b402:	4601      	mov	r1, r0
 800b404:	428a      	cmp	r2, r1
 800b406:	d100      	bne.n	800b40a <memmove+0x2a>
 800b408:	bd10      	pop	{r4, pc}
 800b40a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b40e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b412:	e7f7      	b.n	800b404 <memmove+0x24>

0800b414 <memset>:
 800b414:	4402      	add	r2, r0
 800b416:	4603      	mov	r3, r0
 800b418:	4293      	cmp	r3, r2
 800b41a:	d100      	bne.n	800b41e <memset+0xa>
 800b41c:	4770      	bx	lr
 800b41e:	f803 1b01 	strb.w	r1, [r3], #1
 800b422:	e7f9      	b.n	800b418 <memset+0x4>

0800b424 <_free_r>:
 800b424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b426:	2900      	cmp	r1, #0
 800b428:	d048      	beq.n	800b4bc <_free_r+0x98>
 800b42a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b42e:	9001      	str	r0, [sp, #4]
 800b430:	2b00      	cmp	r3, #0
 800b432:	f1a1 0404 	sub.w	r4, r1, #4
 800b436:	bfb8      	it	lt
 800b438:	18e4      	addlt	r4, r4, r3
 800b43a:	f003 fbc3 	bl	800ebc4 <__malloc_lock>
 800b43e:	4a20      	ldr	r2, [pc, #128]	; (800b4c0 <_free_r+0x9c>)
 800b440:	9801      	ldr	r0, [sp, #4]
 800b442:	6813      	ldr	r3, [r2, #0]
 800b444:	4615      	mov	r5, r2
 800b446:	b933      	cbnz	r3, 800b456 <_free_r+0x32>
 800b448:	6063      	str	r3, [r4, #4]
 800b44a:	6014      	str	r4, [r2, #0]
 800b44c:	b003      	add	sp, #12
 800b44e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b452:	f003 bbbd 	b.w	800ebd0 <__malloc_unlock>
 800b456:	42a3      	cmp	r3, r4
 800b458:	d90b      	bls.n	800b472 <_free_r+0x4e>
 800b45a:	6821      	ldr	r1, [r4, #0]
 800b45c:	1862      	adds	r2, r4, r1
 800b45e:	4293      	cmp	r3, r2
 800b460:	bf04      	itt	eq
 800b462:	681a      	ldreq	r2, [r3, #0]
 800b464:	685b      	ldreq	r3, [r3, #4]
 800b466:	6063      	str	r3, [r4, #4]
 800b468:	bf04      	itt	eq
 800b46a:	1852      	addeq	r2, r2, r1
 800b46c:	6022      	streq	r2, [r4, #0]
 800b46e:	602c      	str	r4, [r5, #0]
 800b470:	e7ec      	b.n	800b44c <_free_r+0x28>
 800b472:	461a      	mov	r2, r3
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	b10b      	cbz	r3, 800b47c <_free_r+0x58>
 800b478:	42a3      	cmp	r3, r4
 800b47a:	d9fa      	bls.n	800b472 <_free_r+0x4e>
 800b47c:	6811      	ldr	r1, [r2, #0]
 800b47e:	1855      	adds	r5, r2, r1
 800b480:	42a5      	cmp	r5, r4
 800b482:	d10b      	bne.n	800b49c <_free_r+0x78>
 800b484:	6824      	ldr	r4, [r4, #0]
 800b486:	4421      	add	r1, r4
 800b488:	1854      	adds	r4, r2, r1
 800b48a:	42a3      	cmp	r3, r4
 800b48c:	6011      	str	r1, [r2, #0]
 800b48e:	d1dd      	bne.n	800b44c <_free_r+0x28>
 800b490:	681c      	ldr	r4, [r3, #0]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	6053      	str	r3, [r2, #4]
 800b496:	4421      	add	r1, r4
 800b498:	6011      	str	r1, [r2, #0]
 800b49a:	e7d7      	b.n	800b44c <_free_r+0x28>
 800b49c:	d902      	bls.n	800b4a4 <_free_r+0x80>
 800b49e:	230c      	movs	r3, #12
 800b4a0:	6003      	str	r3, [r0, #0]
 800b4a2:	e7d3      	b.n	800b44c <_free_r+0x28>
 800b4a4:	6825      	ldr	r5, [r4, #0]
 800b4a6:	1961      	adds	r1, r4, r5
 800b4a8:	428b      	cmp	r3, r1
 800b4aa:	bf04      	itt	eq
 800b4ac:	6819      	ldreq	r1, [r3, #0]
 800b4ae:	685b      	ldreq	r3, [r3, #4]
 800b4b0:	6063      	str	r3, [r4, #4]
 800b4b2:	bf04      	itt	eq
 800b4b4:	1949      	addeq	r1, r1, r5
 800b4b6:	6021      	streq	r1, [r4, #0]
 800b4b8:	6054      	str	r4, [r2, #4]
 800b4ba:	e7c7      	b.n	800b44c <_free_r+0x28>
 800b4bc:	b003      	add	sp, #12
 800b4be:	bd30      	pop	{r4, r5, pc}
 800b4c0:	2400061c 	.word	0x2400061c

0800b4c4 <_malloc_r>:
 800b4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4c6:	1ccd      	adds	r5, r1, #3
 800b4c8:	f025 0503 	bic.w	r5, r5, #3
 800b4cc:	3508      	adds	r5, #8
 800b4ce:	2d0c      	cmp	r5, #12
 800b4d0:	bf38      	it	cc
 800b4d2:	250c      	movcc	r5, #12
 800b4d4:	2d00      	cmp	r5, #0
 800b4d6:	4606      	mov	r6, r0
 800b4d8:	db01      	blt.n	800b4de <_malloc_r+0x1a>
 800b4da:	42a9      	cmp	r1, r5
 800b4dc:	d903      	bls.n	800b4e6 <_malloc_r+0x22>
 800b4de:	230c      	movs	r3, #12
 800b4e0:	6033      	str	r3, [r6, #0]
 800b4e2:	2000      	movs	r0, #0
 800b4e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4e6:	f003 fb6d 	bl	800ebc4 <__malloc_lock>
 800b4ea:	4921      	ldr	r1, [pc, #132]	; (800b570 <_malloc_r+0xac>)
 800b4ec:	680a      	ldr	r2, [r1, #0]
 800b4ee:	4614      	mov	r4, r2
 800b4f0:	b99c      	cbnz	r4, 800b51a <_malloc_r+0x56>
 800b4f2:	4f20      	ldr	r7, [pc, #128]	; (800b574 <_malloc_r+0xb0>)
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	b923      	cbnz	r3, 800b502 <_malloc_r+0x3e>
 800b4f8:	4621      	mov	r1, r4
 800b4fa:	4630      	mov	r0, r6
 800b4fc:	f000 ffde 	bl	800c4bc <_sbrk_r>
 800b500:	6038      	str	r0, [r7, #0]
 800b502:	4629      	mov	r1, r5
 800b504:	4630      	mov	r0, r6
 800b506:	f000 ffd9 	bl	800c4bc <_sbrk_r>
 800b50a:	1c43      	adds	r3, r0, #1
 800b50c:	d123      	bne.n	800b556 <_malloc_r+0x92>
 800b50e:	230c      	movs	r3, #12
 800b510:	6033      	str	r3, [r6, #0]
 800b512:	4630      	mov	r0, r6
 800b514:	f003 fb5c 	bl	800ebd0 <__malloc_unlock>
 800b518:	e7e3      	b.n	800b4e2 <_malloc_r+0x1e>
 800b51a:	6823      	ldr	r3, [r4, #0]
 800b51c:	1b5b      	subs	r3, r3, r5
 800b51e:	d417      	bmi.n	800b550 <_malloc_r+0x8c>
 800b520:	2b0b      	cmp	r3, #11
 800b522:	d903      	bls.n	800b52c <_malloc_r+0x68>
 800b524:	6023      	str	r3, [r4, #0]
 800b526:	441c      	add	r4, r3
 800b528:	6025      	str	r5, [r4, #0]
 800b52a:	e004      	b.n	800b536 <_malloc_r+0x72>
 800b52c:	6863      	ldr	r3, [r4, #4]
 800b52e:	42a2      	cmp	r2, r4
 800b530:	bf0c      	ite	eq
 800b532:	600b      	streq	r3, [r1, #0]
 800b534:	6053      	strne	r3, [r2, #4]
 800b536:	4630      	mov	r0, r6
 800b538:	f003 fb4a 	bl	800ebd0 <__malloc_unlock>
 800b53c:	f104 000b 	add.w	r0, r4, #11
 800b540:	1d23      	adds	r3, r4, #4
 800b542:	f020 0007 	bic.w	r0, r0, #7
 800b546:	1ac2      	subs	r2, r0, r3
 800b548:	d0cc      	beq.n	800b4e4 <_malloc_r+0x20>
 800b54a:	1a1b      	subs	r3, r3, r0
 800b54c:	50a3      	str	r3, [r4, r2]
 800b54e:	e7c9      	b.n	800b4e4 <_malloc_r+0x20>
 800b550:	4622      	mov	r2, r4
 800b552:	6864      	ldr	r4, [r4, #4]
 800b554:	e7cc      	b.n	800b4f0 <_malloc_r+0x2c>
 800b556:	1cc4      	adds	r4, r0, #3
 800b558:	f024 0403 	bic.w	r4, r4, #3
 800b55c:	42a0      	cmp	r0, r4
 800b55e:	d0e3      	beq.n	800b528 <_malloc_r+0x64>
 800b560:	1a21      	subs	r1, r4, r0
 800b562:	4630      	mov	r0, r6
 800b564:	f000 ffaa 	bl	800c4bc <_sbrk_r>
 800b568:	3001      	adds	r0, #1
 800b56a:	d1dd      	bne.n	800b528 <_malloc_r+0x64>
 800b56c:	e7cf      	b.n	800b50e <_malloc_r+0x4a>
 800b56e:	bf00      	nop
 800b570:	2400061c 	.word	0x2400061c
 800b574:	24000620 	.word	0x24000620

0800b578 <__sfputc_r>:
 800b578:	6893      	ldr	r3, [r2, #8]
 800b57a:	3b01      	subs	r3, #1
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	b410      	push	{r4}
 800b580:	6093      	str	r3, [r2, #8]
 800b582:	da08      	bge.n	800b596 <__sfputc_r+0x1e>
 800b584:	6994      	ldr	r4, [r2, #24]
 800b586:	42a3      	cmp	r3, r4
 800b588:	db01      	blt.n	800b58e <__sfputc_r+0x16>
 800b58a:	290a      	cmp	r1, #10
 800b58c:	d103      	bne.n	800b596 <__sfputc_r+0x1e>
 800b58e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b592:	f001 be9f 	b.w	800d2d4 <__swbuf_r>
 800b596:	6813      	ldr	r3, [r2, #0]
 800b598:	1c58      	adds	r0, r3, #1
 800b59a:	6010      	str	r0, [r2, #0]
 800b59c:	7019      	strb	r1, [r3, #0]
 800b59e:	4608      	mov	r0, r1
 800b5a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5a4:	4770      	bx	lr

0800b5a6 <__sfputs_r>:
 800b5a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5a8:	4606      	mov	r6, r0
 800b5aa:	460f      	mov	r7, r1
 800b5ac:	4614      	mov	r4, r2
 800b5ae:	18d5      	adds	r5, r2, r3
 800b5b0:	42ac      	cmp	r4, r5
 800b5b2:	d101      	bne.n	800b5b8 <__sfputs_r+0x12>
 800b5b4:	2000      	movs	r0, #0
 800b5b6:	e007      	b.n	800b5c8 <__sfputs_r+0x22>
 800b5b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5bc:	463a      	mov	r2, r7
 800b5be:	4630      	mov	r0, r6
 800b5c0:	f7ff ffda 	bl	800b578 <__sfputc_r>
 800b5c4:	1c43      	adds	r3, r0, #1
 800b5c6:	d1f3      	bne.n	800b5b0 <__sfputs_r+0xa>
 800b5c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b5cc <_vfiprintf_r>:
 800b5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d0:	460d      	mov	r5, r1
 800b5d2:	b09d      	sub	sp, #116	; 0x74
 800b5d4:	4614      	mov	r4, r2
 800b5d6:	4698      	mov	r8, r3
 800b5d8:	4606      	mov	r6, r0
 800b5da:	b118      	cbz	r0, 800b5e4 <_vfiprintf_r+0x18>
 800b5dc:	6983      	ldr	r3, [r0, #24]
 800b5de:	b90b      	cbnz	r3, 800b5e4 <_vfiprintf_r+0x18>
 800b5e0:	f002 fe66 	bl	800e2b0 <__sinit>
 800b5e4:	4b89      	ldr	r3, [pc, #548]	; (800b80c <_vfiprintf_r+0x240>)
 800b5e6:	429d      	cmp	r5, r3
 800b5e8:	d11b      	bne.n	800b622 <_vfiprintf_r+0x56>
 800b5ea:	6875      	ldr	r5, [r6, #4]
 800b5ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5ee:	07d9      	lsls	r1, r3, #31
 800b5f0:	d405      	bmi.n	800b5fe <_vfiprintf_r+0x32>
 800b5f2:	89ab      	ldrh	r3, [r5, #12]
 800b5f4:	059a      	lsls	r2, r3, #22
 800b5f6:	d402      	bmi.n	800b5fe <_vfiprintf_r+0x32>
 800b5f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5fa:	f003 fa6a 	bl	800ead2 <__retarget_lock_acquire_recursive>
 800b5fe:	89ab      	ldrh	r3, [r5, #12]
 800b600:	071b      	lsls	r3, r3, #28
 800b602:	d501      	bpl.n	800b608 <_vfiprintf_r+0x3c>
 800b604:	692b      	ldr	r3, [r5, #16]
 800b606:	b9eb      	cbnz	r3, 800b644 <_vfiprintf_r+0x78>
 800b608:	4629      	mov	r1, r5
 800b60a:	4630      	mov	r0, r6
 800b60c:	f001 feb4 	bl	800d378 <__swsetup_r>
 800b610:	b1c0      	cbz	r0, 800b644 <_vfiprintf_r+0x78>
 800b612:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b614:	07dc      	lsls	r4, r3, #31
 800b616:	d50e      	bpl.n	800b636 <_vfiprintf_r+0x6a>
 800b618:	f04f 30ff 	mov.w	r0, #4294967295
 800b61c:	b01d      	add	sp, #116	; 0x74
 800b61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b622:	4b7b      	ldr	r3, [pc, #492]	; (800b810 <_vfiprintf_r+0x244>)
 800b624:	429d      	cmp	r5, r3
 800b626:	d101      	bne.n	800b62c <_vfiprintf_r+0x60>
 800b628:	68b5      	ldr	r5, [r6, #8]
 800b62a:	e7df      	b.n	800b5ec <_vfiprintf_r+0x20>
 800b62c:	4b79      	ldr	r3, [pc, #484]	; (800b814 <_vfiprintf_r+0x248>)
 800b62e:	429d      	cmp	r5, r3
 800b630:	bf08      	it	eq
 800b632:	68f5      	ldreq	r5, [r6, #12]
 800b634:	e7da      	b.n	800b5ec <_vfiprintf_r+0x20>
 800b636:	89ab      	ldrh	r3, [r5, #12]
 800b638:	0598      	lsls	r0, r3, #22
 800b63a:	d4ed      	bmi.n	800b618 <_vfiprintf_r+0x4c>
 800b63c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b63e:	f003 fa49 	bl	800ead4 <__retarget_lock_release_recursive>
 800b642:	e7e9      	b.n	800b618 <_vfiprintf_r+0x4c>
 800b644:	2300      	movs	r3, #0
 800b646:	9309      	str	r3, [sp, #36]	; 0x24
 800b648:	2320      	movs	r3, #32
 800b64a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b64e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b652:	2330      	movs	r3, #48	; 0x30
 800b654:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b818 <_vfiprintf_r+0x24c>
 800b658:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b65c:	f04f 0901 	mov.w	r9, #1
 800b660:	4623      	mov	r3, r4
 800b662:	469a      	mov	sl, r3
 800b664:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b668:	b10a      	cbz	r2, 800b66e <_vfiprintf_r+0xa2>
 800b66a:	2a25      	cmp	r2, #37	; 0x25
 800b66c:	d1f9      	bne.n	800b662 <_vfiprintf_r+0x96>
 800b66e:	ebba 0b04 	subs.w	fp, sl, r4
 800b672:	d00b      	beq.n	800b68c <_vfiprintf_r+0xc0>
 800b674:	465b      	mov	r3, fp
 800b676:	4622      	mov	r2, r4
 800b678:	4629      	mov	r1, r5
 800b67a:	4630      	mov	r0, r6
 800b67c:	f7ff ff93 	bl	800b5a6 <__sfputs_r>
 800b680:	3001      	adds	r0, #1
 800b682:	f000 80aa 	beq.w	800b7da <_vfiprintf_r+0x20e>
 800b686:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b688:	445a      	add	r2, fp
 800b68a:	9209      	str	r2, [sp, #36]	; 0x24
 800b68c:	f89a 3000 	ldrb.w	r3, [sl]
 800b690:	2b00      	cmp	r3, #0
 800b692:	f000 80a2 	beq.w	800b7da <_vfiprintf_r+0x20e>
 800b696:	2300      	movs	r3, #0
 800b698:	f04f 32ff 	mov.w	r2, #4294967295
 800b69c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6a0:	f10a 0a01 	add.w	sl, sl, #1
 800b6a4:	9304      	str	r3, [sp, #16]
 800b6a6:	9307      	str	r3, [sp, #28]
 800b6a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6ac:	931a      	str	r3, [sp, #104]	; 0x68
 800b6ae:	4654      	mov	r4, sl
 800b6b0:	2205      	movs	r2, #5
 800b6b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6b6:	4858      	ldr	r0, [pc, #352]	; (800b818 <_vfiprintf_r+0x24c>)
 800b6b8:	f7f4 fe2a 	bl	8000310 <memchr>
 800b6bc:	9a04      	ldr	r2, [sp, #16]
 800b6be:	b9d8      	cbnz	r0, 800b6f8 <_vfiprintf_r+0x12c>
 800b6c0:	06d1      	lsls	r1, r2, #27
 800b6c2:	bf44      	itt	mi
 800b6c4:	2320      	movmi	r3, #32
 800b6c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6ca:	0713      	lsls	r3, r2, #28
 800b6cc:	bf44      	itt	mi
 800b6ce:	232b      	movmi	r3, #43	; 0x2b
 800b6d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b6d8:	2b2a      	cmp	r3, #42	; 0x2a
 800b6da:	d015      	beq.n	800b708 <_vfiprintf_r+0x13c>
 800b6dc:	9a07      	ldr	r2, [sp, #28]
 800b6de:	4654      	mov	r4, sl
 800b6e0:	2000      	movs	r0, #0
 800b6e2:	f04f 0c0a 	mov.w	ip, #10
 800b6e6:	4621      	mov	r1, r4
 800b6e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6ec:	3b30      	subs	r3, #48	; 0x30
 800b6ee:	2b09      	cmp	r3, #9
 800b6f0:	d94e      	bls.n	800b790 <_vfiprintf_r+0x1c4>
 800b6f2:	b1b0      	cbz	r0, 800b722 <_vfiprintf_r+0x156>
 800b6f4:	9207      	str	r2, [sp, #28]
 800b6f6:	e014      	b.n	800b722 <_vfiprintf_r+0x156>
 800b6f8:	eba0 0308 	sub.w	r3, r0, r8
 800b6fc:	fa09 f303 	lsl.w	r3, r9, r3
 800b700:	4313      	orrs	r3, r2
 800b702:	9304      	str	r3, [sp, #16]
 800b704:	46a2      	mov	sl, r4
 800b706:	e7d2      	b.n	800b6ae <_vfiprintf_r+0xe2>
 800b708:	9b03      	ldr	r3, [sp, #12]
 800b70a:	1d19      	adds	r1, r3, #4
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	9103      	str	r1, [sp, #12]
 800b710:	2b00      	cmp	r3, #0
 800b712:	bfbb      	ittet	lt
 800b714:	425b      	neglt	r3, r3
 800b716:	f042 0202 	orrlt.w	r2, r2, #2
 800b71a:	9307      	strge	r3, [sp, #28]
 800b71c:	9307      	strlt	r3, [sp, #28]
 800b71e:	bfb8      	it	lt
 800b720:	9204      	strlt	r2, [sp, #16]
 800b722:	7823      	ldrb	r3, [r4, #0]
 800b724:	2b2e      	cmp	r3, #46	; 0x2e
 800b726:	d10c      	bne.n	800b742 <_vfiprintf_r+0x176>
 800b728:	7863      	ldrb	r3, [r4, #1]
 800b72a:	2b2a      	cmp	r3, #42	; 0x2a
 800b72c:	d135      	bne.n	800b79a <_vfiprintf_r+0x1ce>
 800b72e:	9b03      	ldr	r3, [sp, #12]
 800b730:	1d1a      	adds	r2, r3, #4
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	9203      	str	r2, [sp, #12]
 800b736:	2b00      	cmp	r3, #0
 800b738:	bfb8      	it	lt
 800b73a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b73e:	3402      	adds	r4, #2
 800b740:	9305      	str	r3, [sp, #20]
 800b742:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b828 <_vfiprintf_r+0x25c>
 800b746:	7821      	ldrb	r1, [r4, #0]
 800b748:	2203      	movs	r2, #3
 800b74a:	4650      	mov	r0, sl
 800b74c:	f7f4 fde0 	bl	8000310 <memchr>
 800b750:	b140      	cbz	r0, 800b764 <_vfiprintf_r+0x198>
 800b752:	2340      	movs	r3, #64	; 0x40
 800b754:	eba0 000a 	sub.w	r0, r0, sl
 800b758:	fa03 f000 	lsl.w	r0, r3, r0
 800b75c:	9b04      	ldr	r3, [sp, #16]
 800b75e:	4303      	orrs	r3, r0
 800b760:	3401      	adds	r4, #1
 800b762:	9304      	str	r3, [sp, #16]
 800b764:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b768:	482c      	ldr	r0, [pc, #176]	; (800b81c <_vfiprintf_r+0x250>)
 800b76a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b76e:	2206      	movs	r2, #6
 800b770:	f7f4 fdce 	bl	8000310 <memchr>
 800b774:	2800      	cmp	r0, #0
 800b776:	d03f      	beq.n	800b7f8 <_vfiprintf_r+0x22c>
 800b778:	4b29      	ldr	r3, [pc, #164]	; (800b820 <_vfiprintf_r+0x254>)
 800b77a:	bb1b      	cbnz	r3, 800b7c4 <_vfiprintf_r+0x1f8>
 800b77c:	9b03      	ldr	r3, [sp, #12]
 800b77e:	3307      	adds	r3, #7
 800b780:	f023 0307 	bic.w	r3, r3, #7
 800b784:	3308      	adds	r3, #8
 800b786:	9303      	str	r3, [sp, #12]
 800b788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b78a:	443b      	add	r3, r7
 800b78c:	9309      	str	r3, [sp, #36]	; 0x24
 800b78e:	e767      	b.n	800b660 <_vfiprintf_r+0x94>
 800b790:	fb0c 3202 	mla	r2, ip, r2, r3
 800b794:	460c      	mov	r4, r1
 800b796:	2001      	movs	r0, #1
 800b798:	e7a5      	b.n	800b6e6 <_vfiprintf_r+0x11a>
 800b79a:	2300      	movs	r3, #0
 800b79c:	3401      	adds	r4, #1
 800b79e:	9305      	str	r3, [sp, #20]
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	f04f 0c0a 	mov.w	ip, #10
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7ac:	3a30      	subs	r2, #48	; 0x30
 800b7ae:	2a09      	cmp	r2, #9
 800b7b0:	d903      	bls.n	800b7ba <_vfiprintf_r+0x1ee>
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d0c5      	beq.n	800b742 <_vfiprintf_r+0x176>
 800b7b6:	9105      	str	r1, [sp, #20]
 800b7b8:	e7c3      	b.n	800b742 <_vfiprintf_r+0x176>
 800b7ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7be:	4604      	mov	r4, r0
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	e7f0      	b.n	800b7a6 <_vfiprintf_r+0x1da>
 800b7c4:	ab03      	add	r3, sp, #12
 800b7c6:	9300      	str	r3, [sp, #0]
 800b7c8:	462a      	mov	r2, r5
 800b7ca:	4b16      	ldr	r3, [pc, #88]	; (800b824 <_vfiprintf_r+0x258>)
 800b7cc:	a904      	add	r1, sp, #16
 800b7ce:	4630      	mov	r0, r6
 800b7d0:	f000 f8be 	bl	800b950 <_printf_float>
 800b7d4:	4607      	mov	r7, r0
 800b7d6:	1c78      	adds	r0, r7, #1
 800b7d8:	d1d6      	bne.n	800b788 <_vfiprintf_r+0x1bc>
 800b7da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7dc:	07d9      	lsls	r1, r3, #31
 800b7de:	d405      	bmi.n	800b7ec <_vfiprintf_r+0x220>
 800b7e0:	89ab      	ldrh	r3, [r5, #12]
 800b7e2:	059a      	lsls	r2, r3, #22
 800b7e4:	d402      	bmi.n	800b7ec <_vfiprintf_r+0x220>
 800b7e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7e8:	f003 f974 	bl	800ead4 <__retarget_lock_release_recursive>
 800b7ec:	89ab      	ldrh	r3, [r5, #12]
 800b7ee:	065b      	lsls	r3, r3, #25
 800b7f0:	f53f af12 	bmi.w	800b618 <_vfiprintf_r+0x4c>
 800b7f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7f6:	e711      	b.n	800b61c <_vfiprintf_r+0x50>
 800b7f8:	ab03      	add	r3, sp, #12
 800b7fa:	9300      	str	r3, [sp, #0]
 800b7fc:	462a      	mov	r2, r5
 800b7fe:	4b09      	ldr	r3, [pc, #36]	; (800b824 <_vfiprintf_r+0x258>)
 800b800:	a904      	add	r1, sp, #16
 800b802:	4630      	mov	r0, r6
 800b804:	f000 fb30 	bl	800be68 <_printf_i>
 800b808:	e7e4      	b.n	800b7d4 <_vfiprintf_r+0x208>
 800b80a:	bf00      	nop
 800b80c:	08010748 	.word	0x08010748
 800b810:	08010768 	.word	0x08010768
 800b814:	08010728 	.word	0x08010728
 800b818:	080104f0 	.word	0x080104f0
 800b81c:	080104fa 	.word	0x080104fa
 800b820:	0800b951 	.word	0x0800b951
 800b824:	0800b5a7 	.word	0x0800b5a7
 800b828:	080104f6 	.word	0x080104f6

0800b82c <__cvt>:
 800b82c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b82e:	ed2d 8b02 	vpush	{d8}
 800b832:	eeb0 8b40 	vmov.f64	d8, d0
 800b836:	b085      	sub	sp, #20
 800b838:	4617      	mov	r7, r2
 800b83a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b83c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b83e:	ee18 2a90 	vmov	r2, s17
 800b842:	f025 0520 	bic.w	r5, r5, #32
 800b846:	2a00      	cmp	r2, #0
 800b848:	bfb6      	itet	lt
 800b84a:	222d      	movlt	r2, #45	; 0x2d
 800b84c:	2200      	movge	r2, #0
 800b84e:	eeb1 8b40 	vneglt.f64	d8, d0
 800b852:	2d46      	cmp	r5, #70	; 0x46
 800b854:	460c      	mov	r4, r1
 800b856:	701a      	strb	r2, [r3, #0]
 800b858:	d004      	beq.n	800b864 <__cvt+0x38>
 800b85a:	2d45      	cmp	r5, #69	; 0x45
 800b85c:	d100      	bne.n	800b860 <__cvt+0x34>
 800b85e:	3401      	adds	r4, #1
 800b860:	2102      	movs	r1, #2
 800b862:	e000      	b.n	800b866 <__cvt+0x3a>
 800b864:	2103      	movs	r1, #3
 800b866:	ab03      	add	r3, sp, #12
 800b868:	9301      	str	r3, [sp, #4]
 800b86a:	ab02      	add	r3, sp, #8
 800b86c:	9300      	str	r3, [sp, #0]
 800b86e:	4622      	mov	r2, r4
 800b870:	4633      	mov	r3, r6
 800b872:	eeb0 0b48 	vmov.f64	d0, d8
 800b876:	f001 fe7f 	bl	800d578 <_dtoa_r>
 800b87a:	2d47      	cmp	r5, #71	; 0x47
 800b87c:	d109      	bne.n	800b892 <__cvt+0x66>
 800b87e:	07fb      	lsls	r3, r7, #31
 800b880:	d407      	bmi.n	800b892 <__cvt+0x66>
 800b882:	9b03      	ldr	r3, [sp, #12]
 800b884:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b886:	1a1b      	subs	r3, r3, r0
 800b888:	6013      	str	r3, [r2, #0]
 800b88a:	b005      	add	sp, #20
 800b88c:	ecbd 8b02 	vpop	{d8}
 800b890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b892:	2d46      	cmp	r5, #70	; 0x46
 800b894:	eb00 0204 	add.w	r2, r0, r4
 800b898:	d10c      	bne.n	800b8b4 <__cvt+0x88>
 800b89a:	7803      	ldrb	r3, [r0, #0]
 800b89c:	2b30      	cmp	r3, #48	; 0x30
 800b89e:	d107      	bne.n	800b8b0 <__cvt+0x84>
 800b8a0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b8a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8a8:	bf1c      	itt	ne
 800b8aa:	f1c4 0401 	rsbne	r4, r4, #1
 800b8ae:	6034      	strne	r4, [r6, #0]
 800b8b0:	6833      	ldr	r3, [r6, #0]
 800b8b2:	441a      	add	r2, r3
 800b8b4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8bc:	bf08      	it	eq
 800b8be:	9203      	streq	r2, [sp, #12]
 800b8c0:	2130      	movs	r1, #48	; 0x30
 800b8c2:	9b03      	ldr	r3, [sp, #12]
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d2dc      	bcs.n	800b882 <__cvt+0x56>
 800b8c8:	1c5c      	adds	r4, r3, #1
 800b8ca:	9403      	str	r4, [sp, #12]
 800b8cc:	7019      	strb	r1, [r3, #0]
 800b8ce:	e7f8      	b.n	800b8c2 <__cvt+0x96>

0800b8d0 <__exponent>:
 800b8d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	2900      	cmp	r1, #0
 800b8d6:	bfb8      	it	lt
 800b8d8:	4249      	neglt	r1, r1
 800b8da:	f803 2b02 	strb.w	r2, [r3], #2
 800b8de:	bfb4      	ite	lt
 800b8e0:	222d      	movlt	r2, #45	; 0x2d
 800b8e2:	222b      	movge	r2, #43	; 0x2b
 800b8e4:	2909      	cmp	r1, #9
 800b8e6:	7042      	strb	r2, [r0, #1]
 800b8e8:	dd2a      	ble.n	800b940 <__exponent+0x70>
 800b8ea:	f10d 0407 	add.w	r4, sp, #7
 800b8ee:	46a4      	mov	ip, r4
 800b8f0:	270a      	movs	r7, #10
 800b8f2:	46a6      	mov	lr, r4
 800b8f4:	460a      	mov	r2, r1
 800b8f6:	fb91 f6f7 	sdiv	r6, r1, r7
 800b8fa:	fb07 1516 	mls	r5, r7, r6, r1
 800b8fe:	3530      	adds	r5, #48	; 0x30
 800b900:	2a63      	cmp	r2, #99	; 0x63
 800b902:	f104 34ff 	add.w	r4, r4, #4294967295
 800b906:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b90a:	4631      	mov	r1, r6
 800b90c:	dcf1      	bgt.n	800b8f2 <__exponent+0x22>
 800b90e:	3130      	adds	r1, #48	; 0x30
 800b910:	f1ae 0502 	sub.w	r5, lr, #2
 800b914:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b918:	1c44      	adds	r4, r0, #1
 800b91a:	4629      	mov	r1, r5
 800b91c:	4561      	cmp	r1, ip
 800b91e:	d30a      	bcc.n	800b936 <__exponent+0x66>
 800b920:	f10d 0209 	add.w	r2, sp, #9
 800b924:	eba2 020e 	sub.w	r2, r2, lr
 800b928:	4565      	cmp	r5, ip
 800b92a:	bf88      	it	hi
 800b92c:	2200      	movhi	r2, #0
 800b92e:	4413      	add	r3, r2
 800b930:	1a18      	subs	r0, r3, r0
 800b932:	b003      	add	sp, #12
 800b934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b936:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b93a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b93e:	e7ed      	b.n	800b91c <__exponent+0x4c>
 800b940:	2330      	movs	r3, #48	; 0x30
 800b942:	3130      	adds	r1, #48	; 0x30
 800b944:	7083      	strb	r3, [r0, #2]
 800b946:	70c1      	strb	r1, [r0, #3]
 800b948:	1d03      	adds	r3, r0, #4
 800b94a:	e7f1      	b.n	800b930 <__exponent+0x60>
 800b94c:	0000      	movs	r0, r0
	...

0800b950 <_printf_float>:
 800b950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b954:	b08b      	sub	sp, #44	; 0x2c
 800b956:	460c      	mov	r4, r1
 800b958:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800b95c:	4616      	mov	r6, r2
 800b95e:	461f      	mov	r7, r3
 800b960:	4605      	mov	r5, r0
 800b962:	f003 f8b1 	bl	800eac8 <_localeconv_r>
 800b966:	f8d0 b000 	ldr.w	fp, [r0]
 800b96a:	4658      	mov	r0, fp
 800b96c:	f7f4 fcc2 	bl	80002f4 <strlen>
 800b970:	2300      	movs	r3, #0
 800b972:	9308      	str	r3, [sp, #32]
 800b974:	f8d8 3000 	ldr.w	r3, [r8]
 800b978:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b97c:	6822      	ldr	r2, [r4, #0]
 800b97e:	3307      	adds	r3, #7
 800b980:	f023 0307 	bic.w	r3, r3, #7
 800b984:	f103 0108 	add.w	r1, r3, #8
 800b988:	f8c8 1000 	str.w	r1, [r8]
 800b98c:	4682      	mov	sl, r0
 800b98e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b992:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800b996:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800bbf8 <_printf_float+0x2a8>
 800b99a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800b99e:	eeb0 6bc0 	vabs.f64	d6, d0
 800b9a2:	eeb4 6b47 	vcmp.f64	d6, d7
 800b9a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9aa:	dd24      	ble.n	800b9f6 <_printf_float+0xa6>
 800b9ac:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b9b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9b4:	d502      	bpl.n	800b9bc <_printf_float+0x6c>
 800b9b6:	232d      	movs	r3, #45	; 0x2d
 800b9b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9bc:	4b90      	ldr	r3, [pc, #576]	; (800bc00 <_printf_float+0x2b0>)
 800b9be:	4891      	ldr	r0, [pc, #580]	; (800bc04 <_printf_float+0x2b4>)
 800b9c0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b9c4:	bf94      	ite	ls
 800b9c6:	4698      	movls	r8, r3
 800b9c8:	4680      	movhi	r8, r0
 800b9ca:	2303      	movs	r3, #3
 800b9cc:	6123      	str	r3, [r4, #16]
 800b9ce:	f022 0204 	bic.w	r2, r2, #4
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	6022      	str	r2, [r4, #0]
 800b9d6:	9304      	str	r3, [sp, #16]
 800b9d8:	9700      	str	r7, [sp, #0]
 800b9da:	4633      	mov	r3, r6
 800b9dc:	aa09      	add	r2, sp, #36	; 0x24
 800b9de:	4621      	mov	r1, r4
 800b9e0:	4628      	mov	r0, r5
 800b9e2:	f000 f9d3 	bl	800bd8c <_printf_common>
 800b9e6:	3001      	adds	r0, #1
 800b9e8:	f040 808a 	bne.w	800bb00 <_printf_float+0x1b0>
 800b9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b9f0:	b00b      	add	sp, #44	; 0x2c
 800b9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9f6:	eeb4 0b40 	vcmp.f64	d0, d0
 800b9fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9fe:	d709      	bvc.n	800ba14 <_printf_float+0xc4>
 800ba00:	ee10 3a90 	vmov	r3, s1
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	bfbc      	itt	lt
 800ba08:	232d      	movlt	r3, #45	; 0x2d
 800ba0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ba0e:	487e      	ldr	r0, [pc, #504]	; (800bc08 <_printf_float+0x2b8>)
 800ba10:	4b7e      	ldr	r3, [pc, #504]	; (800bc0c <_printf_float+0x2bc>)
 800ba12:	e7d5      	b.n	800b9c0 <_printf_float+0x70>
 800ba14:	6863      	ldr	r3, [r4, #4]
 800ba16:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ba1a:	9104      	str	r1, [sp, #16]
 800ba1c:	1c59      	adds	r1, r3, #1
 800ba1e:	d13c      	bne.n	800ba9a <_printf_float+0x14a>
 800ba20:	2306      	movs	r3, #6
 800ba22:	6063      	str	r3, [r4, #4]
 800ba24:	2300      	movs	r3, #0
 800ba26:	9303      	str	r3, [sp, #12]
 800ba28:	ab08      	add	r3, sp, #32
 800ba2a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ba2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ba32:	ab07      	add	r3, sp, #28
 800ba34:	6861      	ldr	r1, [r4, #4]
 800ba36:	9300      	str	r3, [sp, #0]
 800ba38:	6022      	str	r2, [r4, #0]
 800ba3a:	f10d 031b 	add.w	r3, sp, #27
 800ba3e:	4628      	mov	r0, r5
 800ba40:	f7ff fef4 	bl	800b82c <__cvt>
 800ba44:	9b04      	ldr	r3, [sp, #16]
 800ba46:	9907      	ldr	r1, [sp, #28]
 800ba48:	2b47      	cmp	r3, #71	; 0x47
 800ba4a:	4680      	mov	r8, r0
 800ba4c:	d108      	bne.n	800ba60 <_printf_float+0x110>
 800ba4e:	1cc8      	adds	r0, r1, #3
 800ba50:	db02      	blt.n	800ba58 <_printf_float+0x108>
 800ba52:	6863      	ldr	r3, [r4, #4]
 800ba54:	4299      	cmp	r1, r3
 800ba56:	dd41      	ble.n	800badc <_printf_float+0x18c>
 800ba58:	f1a9 0902 	sub.w	r9, r9, #2
 800ba5c:	fa5f f989 	uxtb.w	r9, r9
 800ba60:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ba64:	d820      	bhi.n	800baa8 <_printf_float+0x158>
 800ba66:	3901      	subs	r1, #1
 800ba68:	464a      	mov	r2, r9
 800ba6a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ba6e:	9107      	str	r1, [sp, #28]
 800ba70:	f7ff ff2e 	bl	800b8d0 <__exponent>
 800ba74:	9a08      	ldr	r2, [sp, #32]
 800ba76:	9004      	str	r0, [sp, #16]
 800ba78:	1813      	adds	r3, r2, r0
 800ba7a:	2a01      	cmp	r2, #1
 800ba7c:	6123      	str	r3, [r4, #16]
 800ba7e:	dc02      	bgt.n	800ba86 <_printf_float+0x136>
 800ba80:	6822      	ldr	r2, [r4, #0]
 800ba82:	07d2      	lsls	r2, r2, #31
 800ba84:	d501      	bpl.n	800ba8a <_printf_float+0x13a>
 800ba86:	3301      	adds	r3, #1
 800ba88:	6123      	str	r3, [r4, #16]
 800ba8a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d0a2      	beq.n	800b9d8 <_printf_float+0x88>
 800ba92:	232d      	movs	r3, #45	; 0x2d
 800ba94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba98:	e79e      	b.n	800b9d8 <_printf_float+0x88>
 800ba9a:	9904      	ldr	r1, [sp, #16]
 800ba9c:	2947      	cmp	r1, #71	; 0x47
 800ba9e:	d1c1      	bne.n	800ba24 <_printf_float+0xd4>
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d1bf      	bne.n	800ba24 <_printf_float+0xd4>
 800baa4:	2301      	movs	r3, #1
 800baa6:	e7bc      	b.n	800ba22 <_printf_float+0xd2>
 800baa8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800baac:	d118      	bne.n	800bae0 <_printf_float+0x190>
 800baae:	2900      	cmp	r1, #0
 800bab0:	6863      	ldr	r3, [r4, #4]
 800bab2:	dd0b      	ble.n	800bacc <_printf_float+0x17c>
 800bab4:	6121      	str	r1, [r4, #16]
 800bab6:	b913      	cbnz	r3, 800babe <_printf_float+0x16e>
 800bab8:	6822      	ldr	r2, [r4, #0]
 800baba:	07d0      	lsls	r0, r2, #31
 800babc:	d502      	bpl.n	800bac4 <_printf_float+0x174>
 800babe:	3301      	adds	r3, #1
 800bac0:	440b      	add	r3, r1
 800bac2:	6123      	str	r3, [r4, #16]
 800bac4:	2300      	movs	r3, #0
 800bac6:	65a1      	str	r1, [r4, #88]	; 0x58
 800bac8:	9304      	str	r3, [sp, #16]
 800baca:	e7de      	b.n	800ba8a <_printf_float+0x13a>
 800bacc:	b913      	cbnz	r3, 800bad4 <_printf_float+0x184>
 800bace:	6822      	ldr	r2, [r4, #0]
 800bad0:	07d2      	lsls	r2, r2, #31
 800bad2:	d501      	bpl.n	800bad8 <_printf_float+0x188>
 800bad4:	3302      	adds	r3, #2
 800bad6:	e7f4      	b.n	800bac2 <_printf_float+0x172>
 800bad8:	2301      	movs	r3, #1
 800bada:	e7f2      	b.n	800bac2 <_printf_float+0x172>
 800badc:	f04f 0967 	mov.w	r9, #103	; 0x67
 800bae0:	9b08      	ldr	r3, [sp, #32]
 800bae2:	4299      	cmp	r1, r3
 800bae4:	db05      	blt.n	800baf2 <_printf_float+0x1a2>
 800bae6:	6823      	ldr	r3, [r4, #0]
 800bae8:	6121      	str	r1, [r4, #16]
 800baea:	07d8      	lsls	r0, r3, #31
 800baec:	d5ea      	bpl.n	800bac4 <_printf_float+0x174>
 800baee:	1c4b      	adds	r3, r1, #1
 800baf0:	e7e7      	b.n	800bac2 <_printf_float+0x172>
 800baf2:	2900      	cmp	r1, #0
 800baf4:	bfd4      	ite	le
 800baf6:	f1c1 0202 	rsble	r2, r1, #2
 800bafa:	2201      	movgt	r2, #1
 800bafc:	4413      	add	r3, r2
 800bafe:	e7e0      	b.n	800bac2 <_printf_float+0x172>
 800bb00:	6823      	ldr	r3, [r4, #0]
 800bb02:	055a      	lsls	r2, r3, #21
 800bb04:	d407      	bmi.n	800bb16 <_printf_float+0x1c6>
 800bb06:	6923      	ldr	r3, [r4, #16]
 800bb08:	4642      	mov	r2, r8
 800bb0a:	4631      	mov	r1, r6
 800bb0c:	4628      	mov	r0, r5
 800bb0e:	47b8      	blx	r7
 800bb10:	3001      	adds	r0, #1
 800bb12:	d12a      	bne.n	800bb6a <_printf_float+0x21a>
 800bb14:	e76a      	b.n	800b9ec <_printf_float+0x9c>
 800bb16:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bb1a:	f240 80e2 	bls.w	800bce2 <_printf_float+0x392>
 800bb1e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800bb22:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bb26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb2a:	d133      	bne.n	800bb94 <_printf_float+0x244>
 800bb2c:	4a38      	ldr	r2, [pc, #224]	; (800bc10 <_printf_float+0x2c0>)
 800bb2e:	2301      	movs	r3, #1
 800bb30:	4631      	mov	r1, r6
 800bb32:	4628      	mov	r0, r5
 800bb34:	47b8      	blx	r7
 800bb36:	3001      	adds	r0, #1
 800bb38:	f43f af58 	beq.w	800b9ec <_printf_float+0x9c>
 800bb3c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	db02      	blt.n	800bb4a <_printf_float+0x1fa>
 800bb44:	6823      	ldr	r3, [r4, #0]
 800bb46:	07d8      	lsls	r0, r3, #31
 800bb48:	d50f      	bpl.n	800bb6a <_printf_float+0x21a>
 800bb4a:	4653      	mov	r3, sl
 800bb4c:	465a      	mov	r2, fp
 800bb4e:	4631      	mov	r1, r6
 800bb50:	4628      	mov	r0, r5
 800bb52:	47b8      	blx	r7
 800bb54:	3001      	adds	r0, #1
 800bb56:	f43f af49 	beq.w	800b9ec <_printf_float+0x9c>
 800bb5a:	f04f 0800 	mov.w	r8, #0
 800bb5e:	f104 091a 	add.w	r9, r4, #26
 800bb62:	9b08      	ldr	r3, [sp, #32]
 800bb64:	3b01      	subs	r3, #1
 800bb66:	4543      	cmp	r3, r8
 800bb68:	dc09      	bgt.n	800bb7e <_printf_float+0x22e>
 800bb6a:	6823      	ldr	r3, [r4, #0]
 800bb6c:	079b      	lsls	r3, r3, #30
 800bb6e:	f100 8108 	bmi.w	800bd82 <_printf_float+0x432>
 800bb72:	68e0      	ldr	r0, [r4, #12]
 800bb74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb76:	4298      	cmp	r0, r3
 800bb78:	bfb8      	it	lt
 800bb7a:	4618      	movlt	r0, r3
 800bb7c:	e738      	b.n	800b9f0 <_printf_float+0xa0>
 800bb7e:	2301      	movs	r3, #1
 800bb80:	464a      	mov	r2, r9
 800bb82:	4631      	mov	r1, r6
 800bb84:	4628      	mov	r0, r5
 800bb86:	47b8      	blx	r7
 800bb88:	3001      	adds	r0, #1
 800bb8a:	f43f af2f 	beq.w	800b9ec <_printf_float+0x9c>
 800bb8e:	f108 0801 	add.w	r8, r8, #1
 800bb92:	e7e6      	b.n	800bb62 <_printf_float+0x212>
 800bb94:	9b07      	ldr	r3, [sp, #28]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	dc3c      	bgt.n	800bc14 <_printf_float+0x2c4>
 800bb9a:	4a1d      	ldr	r2, [pc, #116]	; (800bc10 <_printf_float+0x2c0>)
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	4631      	mov	r1, r6
 800bba0:	4628      	mov	r0, r5
 800bba2:	47b8      	blx	r7
 800bba4:	3001      	adds	r0, #1
 800bba6:	f43f af21 	beq.w	800b9ec <_printf_float+0x9c>
 800bbaa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	d102      	bne.n	800bbb8 <_printf_float+0x268>
 800bbb2:	6823      	ldr	r3, [r4, #0]
 800bbb4:	07d9      	lsls	r1, r3, #31
 800bbb6:	d5d8      	bpl.n	800bb6a <_printf_float+0x21a>
 800bbb8:	4653      	mov	r3, sl
 800bbba:	465a      	mov	r2, fp
 800bbbc:	4631      	mov	r1, r6
 800bbbe:	4628      	mov	r0, r5
 800bbc0:	47b8      	blx	r7
 800bbc2:	3001      	adds	r0, #1
 800bbc4:	f43f af12 	beq.w	800b9ec <_printf_float+0x9c>
 800bbc8:	f04f 0900 	mov.w	r9, #0
 800bbcc:	f104 0a1a 	add.w	sl, r4, #26
 800bbd0:	9b07      	ldr	r3, [sp, #28]
 800bbd2:	425b      	negs	r3, r3
 800bbd4:	454b      	cmp	r3, r9
 800bbd6:	dc01      	bgt.n	800bbdc <_printf_float+0x28c>
 800bbd8:	9b08      	ldr	r3, [sp, #32]
 800bbda:	e795      	b.n	800bb08 <_printf_float+0x1b8>
 800bbdc:	2301      	movs	r3, #1
 800bbde:	4652      	mov	r2, sl
 800bbe0:	4631      	mov	r1, r6
 800bbe2:	4628      	mov	r0, r5
 800bbe4:	47b8      	blx	r7
 800bbe6:	3001      	adds	r0, #1
 800bbe8:	f43f af00 	beq.w	800b9ec <_printf_float+0x9c>
 800bbec:	f109 0901 	add.w	r9, r9, #1
 800bbf0:	e7ee      	b.n	800bbd0 <_printf_float+0x280>
 800bbf2:	bf00      	nop
 800bbf4:	f3af 8000 	nop.w
 800bbf8:	ffffffff 	.word	0xffffffff
 800bbfc:	7fefffff 	.word	0x7fefffff
 800bc00:	08010501 	.word	0x08010501
 800bc04:	08010505 	.word	0x08010505
 800bc08:	0801050d 	.word	0x0801050d
 800bc0c:	08010509 	.word	0x08010509
 800bc10:	08010511 	.word	0x08010511
 800bc14:	9a08      	ldr	r2, [sp, #32]
 800bc16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	bfa8      	it	ge
 800bc1c:	461a      	movge	r2, r3
 800bc1e:	2a00      	cmp	r2, #0
 800bc20:	4691      	mov	r9, r2
 800bc22:	dc38      	bgt.n	800bc96 <_printf_float+0x346>
 800bc24:	2300      	movs	r3, #0
 800bc26:	9305      	str	r3, [sp, #20]
 800bc28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc2c:	f104 021a 	add.w	r2, r4, #26
 800bc30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bc32:	9905      	ldr	r1, [sp, #20]
 800bc34:	9304      	str	r3, [sp, #16]
 800bc36:	eba3 0309 	sub.w	r3, r3, r9
 800bc3a:	428b      	cmp	r3, r1
 800bc3c:	dc33      	bgt.n	800bca6 <_printf_float+0x356>
 800bc3e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800bc42:	429a      	cmp	r2, r3
 800bc44:	db3c      	blt.n	800bcc0 <_printf_float+0x370>
 800bc46:	6823      	ldr	r3, [r4, #0]
 800bc48:	07da      	lsls	r2, r3, #31
 800bc4a:	d439      	bmi.n	800bcc0 <_printf_float+0x370>
 800bc4c:	9a08      	ldr	r2, [sp, #32]
 800bc4e:	9b04      	ldr	r3, [sp, #16]
 800bc50:	9907      	ldr	r1, [sp, #28]
 800bc52:	1ad3      	subs	r3, r2, r3
 800bc54:	eba2 0901 	sub.w	r9, r2, r1
 800bc58:	4599      	cmp	r9, r3
 800bc5a:	bfa8      	it	ge
 800bc5c:	4699      	movge	r9, r3
 800bc5e:	f1b9 0f00 	cmp.w	r9, #0
 800bc62:	dc35      	bgt.n	800bcd0 <_printf_float+0x380>
 800bc64:	f04f 0800 	mov.w	r8, #0
 800bc68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc6c:	f104 0a1a 	add.w	sl, r4, #26
 800bc70:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800bc74:	1a9b      	subs	r3, r3, r2
 800bc76:	eba3 0309 	sub.w	r3, r3, r9
 800bc7a:	4543      	cmp	r3, r8
 800bc7c:	f77f af75 	ble.w	800bb6a <_printf_float+0x21a>
 800bc80:	2301      	movs	r3, #1
 800bc82:	4652      	mov	r2, sl
 800bc84:	4631      	mov	r1, r6
 800bc86:	4628      	mov	r0, r5
 800bc88:	47b8      	blx	r7
 800bc8a:	3001      	adds	r0, #1
 800bc8c:	f43f aeae 	beq.w	800b9ec <_printf_float+0x9c>
 800bc90:	f108 0801 	add.w	r8, r8, #1
 800bc94:	e7ec      	b.n	800bc70 <_printf_float+0x320>
 800bc96:	4613      	mov	r3, r2
 800bc98:	4631      	mov	r1, r6
 800bc9a:	4642      	mov	r2, r8
 800bc9c:	4628      	mov	r0, r5
 800bc9e:	47b8      	blx	r7
 800bca0:	3001      	adds	r0, #1
 800bca2:	d1bf      	bne.n	800bc24 <_printf_float+0x2d4>
 800bca4:	e6a2      	b.n	800b9ec <_printf_float+0x9c>
 800bca6:	2301      	movs	r3, #1
 800bca8:	4631      	mov	r1, r6
 800bcaa:	4628      	mov	r0, r5
 800bcac:	9204      	str	r2, [sp, #16]
 800bcae:	47b8      	blx	r7
 800bcb0:	3001      	adds	r0, #1
 800bcb2:	f43f ae9b 	beq.w	800b9ec <_printf_float+0x9c>
 800bcb6:	9b05      	ldr	r3, [sp, #20]
 800bcb8:	9a04      	ldr	r2, [sp, #16]
 800bcba:	3301      	adds	r3, #1
 800bcbc:	9305      	str	r3, [sp, #20]
 800bcbe:	e7b7      	b.n	800bc30 <_printf_float+0x2e0>
 800bcc0:	4653      	mov	r3, sl
 800bcc2:	465a      	mov	r2, fp
 800bcc4:	4631      	mov	r1, r6
 800bcc6:	4628      	mov	r0, r5
 800bcc8:	47b8      	blx	r7
 800bcca:	3001      	adds	r0, #1
 800bccc:	d1be      	bne.n	800bc4c <_printf_float+0x2fc>
 800bcce:	e68d      	b.n	800b9ec <_printf_float+0x9c>
 800bcd0:	9a04      	ldr	r2, [sp, #16]
 800bcd2:	464b      	mov	r3, r9
 800bcd4:	4442      	add	r2, r8
 800bcd6:	4631      	mov	r1, r6
 800bcd8:	4628      	mov	r0, r5
 800bcda:	47b8      	blx	r7
 800bcdc:	3001      	adds	r0, #1
 800bcde:	d1c1      	bne.n	800bc64 <_printf_float+0x314>
 800bce0:	e684      	b.n	800b9ec <_printf_float+0x9c>
 800bce2:	9a08      	ldr	r2, [sp, #32]
 800bce4:	2a01      	cmp	r2, #1
 800bce6:	dc01      	bgt.n	800bcec <_printf_float+0x39c>
 800bce8:	07db      	lsls	r3, r3, #31
 800bcea:	d537      	bpl.n	800bd5c <_printf_float+0x40c>
 800bcec:	2301      	movs	r3, #1
 800bcee:	4642      	mov	r2, r8
 800bcf0:	4631      	mov	r1, r6
 800bcf2:	4628      	mov	r0, r5
 800bcf4:	47b8      	blx	r7
 800bcf6:	3001      	adds	r0, #1
 800bcf8:	f43f ae78 	beq.w	800b9ec <_printf_float+0x9c>
 800bcfc:	4653      	mov	r3, sl
 800bcfe:	465a      	mov	r2, fp
 800bd00:	4631      	mov	r1, r6
 800bd02:	4628      	mov	r0, r5
 800bd04:	47b8      	blx	r7
 800bd06:	3001      	adds	r0, #1
 800bd08:	f43f ae70 	beq.w	800b9ec <_printf_float+0x9c>
 800bd0c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800bd10:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bd14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd18:	d01b      	beq.n	800bd52 <_printf_float+0x402>
 800bd1a:	9b08      	ldr	r3, [sp, #32]
 800bd1c:	f108 0201 	add.w	r2, r8, #1
 800bd20:	3b01      	subs	r3, #1
 800bd22:	4631      	mov	r1, r6
 800bd24:	4628      	mov	r0, r5
 800bd26:	47b8      	blx	r7
 800bd28:	3001      	adds	r0, #1
 800bd2a:	d10e      	bne.n	800bd4a <_printf_float+0x3fa>
 800bd2c:	e65e      	b.n	800b9ec <_printf_float+0x9c>
 800bd2e:	2301      	movs	r3, #1
 800bd30:	464a      	mov	r2, r9
 800bd32:	4631      	mov	r1, r6
 800bd34:	4628      	mov	r0, r5
 800bd36:	47b8      	blx	r7
 800bd38:	3001      	adds	r0, #1
 800bd3a:	f43f ae57 	beq.w	800b9ec <_printf_float+0x9c>
 800bd3e:	f108 0801 	add.w	r8, r8, #1
 800bd42:	9b08      	ldr	r3, [sp, #32]
 800bd44:	3b01      	subs	r3, #1
 800bd46:	4543      	cmp	r3, r8
 800bd48:	dcf1      	bgt.n	800bd2e <_printf_float+0x3de>
 800bd4a:	9b04      	ldr	r3, [sp, #16]
 800bd4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bd50:	e6db      	b.n	800bb0a <_printf_float+0x1ba>
 800bd52:	f04f 0800 	mov.w	r8, #0
 800bd56:	f104 091a 	add.w	r9, r4, #26
 800bd5a:	e7f2      	b.n	800bd42 <_printf_float+0x3f2>
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	4642      	mov	r2, r8
 800bd60:	e7df      	b.n	800bd22 <_printf_float+0x3d2>
 800bd62:	2301      	movs	r3, #1
 800bd64:	464a      	mov	r2, r9
 800bd66:	4631      	mov	r1, r6
 800bd68:	4628      	mov	r0, r5
 800bd6a:	47b8      	blx	r7
 800bd6c:	3001      	adds	r0, #1
 800bd6e:	f43f ae3d 	beq.w	800b9ec <_printf_float+0x9c>
 800bd72:	f108 0801 	add.w	r8, r8, #1
 800bd76:	68e3      	ldr	r3, [r4, #12]
 800bd78:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd7a:	1a5b      	subs	r3, r3, r1
 800bd7c:	4543      	cmp	r3, r8
 800bd7e:	dcf0      	bgt.n	800bd62 <_printf_float+0x412>
 800bd80:	e6f7      	b.n	800bb72 <_printf_float+0x222>
 800bd82:	f04f 0800 	mov.w	r8, #0
 800bd86:	f104 0919 	add.w	r9, r4, #25
 800bd8a:	e7f4      	b.n	800bd76 <_printf_float+0x426>

0800bd8c <_printf_common>:
 800bd8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd90:	4616      	mov	r6, r2
 800bd92:	4699      	mov	r9, r3
 800bd94:	688a      	ldr	r2, [r1, #8]
 800bd96:	690b      	ldr	r3, [r1, #16]
 800bd98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	bfb8      	it	lt
 800bda0:	4613      	movlt	r3, r2
 800bda2:	6033      	str	r3, [r6, #0]
 800bda4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bda8:	4607      	mov	r7, r0
 800bdaa:	460c      	mov	r4, r1
 800bdac:	b10a      	cbz	r2, 800bdb2 <_printf_common+0x26>
 800bdae:	3301      	adds	r3, #1
 800bdb0:	6033      	str	r3, [r6, #0]
 800bdb2:	6823      	ldr	r3, [r4, #0]
 800bdb4:	0699      	lsls	r1, r3, #26
 800bdb6:	bf42      	ittt	mi
 800bdb8:	6833      	ldrmi	r3, [r6, #0]
 800bdba:	3302      	addmi	r3, #2
 800bdbc:	6033      	strmi	r3, [r6, #0]
 800bdbe:	6825      	ldr	r5, [r4, #0]
 800bdc0:	f015 0506 	ands.w	r5, r5, #6
 800bdc4:	d106      	bne.n	800bdd4 <_printf_common+0x48>
 800bdc6:	f104 0a19 	add.w	sl, r4, #25
 800bdca:	68e3      	ldr	r3, [r4, #12]
 800bdcc:	6832      	ldr	r2, [r6, #0]
 800bdce:	1a9b      	subs	r3, r3, r2
 800bdd0:	42ab      	cmp	r3, r5
 800bdd2:	dc26      	bgt.n	800be22 <_printf_common+0x96>
 800bdd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bdd8:	1e13      	subs	r3, r2, #0
 800bdda:	6822      	ldr	r2, [r4, #0]
 800bddc:	bf18      	it	ne
 800bdde:	2301      	movne	r3, #1
 800bde0:	0692      	lsls	r2, r2, #26
 800bde2:	d42b      	bmi.n	800be3c <_printf_common+0xb0>
 800bde4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bde8:	4649      	mov	r1, r9
 800bdea:	4638      	mov	r0, r7
 800bdec:	47c0      	blx	r8
 800bdee:	3001      	adds	r0, #1
 800bdf0:	d01e      	beq.n	800be30 <_printf_common+0xa4>
 800bdf2:	6823      	ldr	r3, [r4, #0]
 800bdf4:	68e5      	ldr	r5, [r4, #12]
 800bdf6:	6832      	ldr	r2, [r6, #0]
 800bdf8:	f003 0306 	and.w	r3, r3, #6
 800bdfc:	2b04      	cmp	r3, #4
 800bdfe:	bf08      	it	eq
 800be00:	1aad      	subeq	r5, r5, r2
 800be02:	68a3      	ldr	r3, [r4, #8]
 800be04:	6922      	ldr	r2, [r4, #16]
 800be06:	bf0c      	ite	eq
 800be08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be0c:	2500      	movne	r5, #0
 800be0e:	4293      	cmp	r3, r2
 800be10:	bfc4      	itt	gt
 800be12:	1a9b      	subgt	r3, r3, r2
 800be14:	18ed      	addgt	r5, r5, r3
 800be16:	2600      	movs	r6, #0
 800be18:	341a      	adds	r4, #26
 800be1a:	42b5      	cmp	r5, r6
 800be1c:	d11a      	bne.n	800be54 <_printf_common+0xc8>
 800be1e:	2000      	movs	r0, #0
 800be20:	e008      	b.n	800be34 <_printf_common+0xa8>
 800be22:	2301      	movs	r3, #1
 800be24:	4652      	mov	r2, sl
 800be26:	4649      	mov	r1, r9
 800be28:	4638      	mov	r0, r7
 800be2a:	47c0      	blx	r8
 800be2c:	3001      	adds	r0, #1
 800be2e:	d103      	bne.n	800be38 <_printf_common+0xac>
 800be30:	f04f 30ff 	mov.w	r0, #4294967295
 800be34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be38:	3501      	adds	r5, #1
 800be3a:	e7c6      	b.n	800bdca <_printf_common+0x3e>
 800be3c:	18e1      	adds	r1, r4, r3
 800be3e:	1c5a      	adds	r2, r3, #1
 800be40:	2030      	movs	r0, #48	; 0x30
 800be42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be46:	4422      	add	r2, r4
 800be48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be50:	3302      	adds	r3, #2
 800be52:	e7c7      	b.n	800bde4 <_printf_common+0x58>
 800be54:	2301      	movs	r3, #1
 800be56:	4622      	mov	r2, r4
 800be58:	4649      	mov	r1, r9
 800be5a:	4638      	mov	r0, r7
 800be5c:	47c0      	blx	r8
 800be5e:	3001      	adds	r0, #1
 800be60:	d0e6      	beq.n	800be30 <_printf_common+0xa4>
 800be62:	3601      	adds	r6, #1
 800be64:	e7d9      	b.n	800be1a <_printf_common+0x8e>
	...

0800be68 <_printf_i>:
 800be68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be6c:	460c      	mov	r4, r1
 800be6e:	4691      	mov	r9, r2
 800be70:	7e27      	ldrb	r7, [r4, #24]
 800be72:	990c      	ldr	r1, [sp, #48]	; 0x30
 800be74:	2f78      	cmp	r7, #120	; 0x78
 800be76:	4680      	mov	r8, r0
 800be78:	469a      	mov	sl, r3
 800be7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be7e:	d807      	bhi.n	800be90 <_printf_i+0x28>
 800be80:	2f62      	cmp	r7, #98	; 0x62
 800be82:	d80a      	bhi.n	800be9a <_printf_i+0x32>
 800be84:	2f00      	cmp	r7, #0
 800be86:	f000 80d8 	beq.w	800c03a <_printf_i+0x1d2>
 800be8a:	2f58      	cmp	r7, #88	; 0x58
 800be8c:	f000 80a3 	beq.w	800bfd6 <_printf_i+0x16e>
 800be90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800be94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800be98:	e03a      	b.n	800bf10 <_printf_i+0xa8>
 800be9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800be9e:	2b15      	cmp	r3, #21
 800bea0:	d8f6      	bhi.n	800be90 <_printf_i+0x28>
 800bea2:	a001      	add	r0, pc, #4	; (adr r0, 800bea8 <_printf_i+0x40>)
 800bea4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bea8:	0800bf01 	.word	0x0800bf01
 800beac:	0800bf15 	.word	0x0800bf15
 800beb0:	0800be91 	.word	0x0800be91
 800beb4:	0800be91 	.word	0x0800be91
 800beb8:	0800be91 	.word	0x0800be91
 800bebc:	0800be91 	.word	0x0800be91
 800bec0:	0800bf15 	.word	0x0800bf15
 800bec4:	0800be91 	.word	0x0800be91
 800bec8:	0800be91 	.word	0x0800be91
 800becc:	0800be91 	.word	0x0800be91
 800bed0:	0800be91 	.word	0x0800be91
 800bed4:	0800c021 	.word	0x0800c021
 800bed8:	0800bf45 	.word	0x0800bf45
 800bedc:	0800c003 	.word	0x0800c003
 800bee0:	0800be91 	.word	0x0800be91
 800bee4:	0800be91 	.word	0x0800be91
 800bee8:	0800c043 	.word	0x0800c043
 800beec:	0800be91 	.word	0x0800be91
 800bef0:	0800bf45 	.word	0x0800bf45
 800bef4:	0800be91 	.word	0x0800be91
 800bef8:	0800be91 	.word	0x0800be91
 800befc:	0800c00b 	.word	0x0800c00b
 800bf00:	680b      	ldr	r3, [r1, #0]
 800bf02:	1d1a      	adds	r2, r3, #4
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	600a      	str	r2, [r1, #0]
 800bf08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bf0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf10:	2301      	movs	r3, #1
 800bf12:	e0a3      	b.n	800c05c <_printf_i+0x1f4>
 800bf14:	6825      	ldr	r5, [r4, #0]
 800bf16:	6808      	ldr	r0, [r1, #0]
 800bf18:	062e      	lsls	r6, r5, #24
 800bf1a:	f100 0304 	add.w	r3, r0, #4
 800bf1e:	d50a      	bpl.n	800bf36 <_printf_i+0xce>
 800bf20:	6805      	ldr	r5, [r0, #0]
 800bf22:	600b      	str	r3, [r1, #0]
 800bf24:	2d00      	cmp	r5, #0
 800bf26:	da03      	bge.n	800bf30 <_printf_i+0xc8>
 800bf28:	232d      	movs	r3, #45	; 0x2d
 800bf2a:	426d      	negs	r5, r5
 800bf2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf30:	485e      	ldr	r0, [pc, #376]	; (800c0ac <_printf_i+0x244>)
 800bf32:	230a      	movs	r3, #10
 800bf34:	e019      	b.n	800bf6a <_printf_i+0x102>
 800bf36:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bf3a:	6805      	ldr	r5, [r0, #0]
 800bf3c:	600b      	str	r3, [r1, #0]
 800bf3e:	bf18      	it	ne
 800bf40:	b22d      	sxthne	r5, r5
 800bf42:	e7ef      	b.n	800bf24 <_printf_i+0xbc>
 800bf44:	680b      	ldr	r3, [r1, #0]
 800bf46:	6825      	ldr	r5, [r4, #0]
 800bf48:	1d18      	adds	r0, r3, #4
 800bf4a:	6008      	str	r0, [r1, #0]
 800bf4c:	0628      	lsls	r0, r5, #24
 800bf4e:	d501      	bpl.n	800bf54 <_printf_i+0xec>
 800bf50:	681d      	ldr	r5, [r3, #0]
 800bf52:	e002      	b.n	800bf5a <_printf_i+0xf2>
 800bf54:	0669      	lsls	r1, r5, #25
 800bf56:	d5fb      	bpl.n	800bf50 <_printf_i+0xe8>
 800bf58:	881d      	ldrh	r5, [r3, #0]
 800bf5a:	4854      	ldr	r0, [pc, #336]	; (800c0ac <_printf_i+0x244>)
 800bf5c:	2f6f      	cmp	r7, #111	; 0x6f
 800bf5e:	bf0c      	ite	eq
 800bf60:	2308      	moveq	r3, #8
 800bf62:	230a      	movne	r3, #10
 800bf64:	2100      	movs	r1, #0
 800bf66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf6a:	6866      	ldr	r6, [r4, #4]
 800bf6c:	60a6      	str	r6, [r4, #8]
 800bf6e:	2e00      	cmp	r6, #0
 800bf70:	bfa2      	ittt	ge
 800bf72:	6821      	ldrge	r1, [r4, #0]
 800bf74:	f021 0104 	bicge.w	r1, r1, #4
 800bf78:	6021      	strge	r1, [r4, #0]
 800bf7a:	b90d      	cbnz	r5, 800bf80 <_printf_i+0x118>
 800bf7c:	2e00      	cmp	r6, #0
 800bf7e:	d04d      	beq.n	800c01c <_printf_i+0x1b4>
 800bf80:	4616      	mov	r6, r2
 800bf82:	fbb5 f1f3 	udiv	r1, r5, r3
 800bf86:	fb03 5711 	mls	r7, r3, r1, r5
 800bf8a:	5dc7      	ldrb	r7, [r0, r7]
 800bf8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bf90:	462f      	mov	r7, r5
 800bf92:	42bb      	cmp	r3, r7
 800bf94:	460d      	mov	r5, r1
 800bf96:	d9f4      	bls.n	800bf82 <_printf_i+0x11a>
 800bf98:	2b08      	cmp	r3, #8
 800bf9a:	d10b      	bne.n	800bfb4 <_printf_i+0x14c>
 800bf9c:	6823      	ldr	r3, [r4, #0]
 800bf9e:	07df      	lsls	r7, r3, #31
 800bfa0:	d508      	bpl.n	800bfb4 <_printf_i+0x14c>
 800bfa2:	6923      	ldr	r3, [r4, #16]
 800bfa4:	6861      	ldr	r1, [r4, #4]
 800bfa6:	4299      	cmp	r1, r3
 800bfa8:	bfde      	ittt	le
 800bfaa:	2330      	movle	r3, #48	; 0x30
 800bfac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bfb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bfb4:	1b92      	subs	r2, r2, r6
 800bfb6:	6122      	str	r2, [r4, #16]
 800bfb8:	f8cd a000 	str.w	sl, [sp]
 800bfbc:	464b      	mov	r3, r9
 800bfbe:	aa03      	add	r2, sp, #12
 800bfc0:	4621      	mov	r1, r4
 800bfc2:	4640      	mov	r0, r8
 800bfc4:	f7ff fee2 	bl	800bd8c <_printf_common>
 800bfc8:	3001      	adds	r0, #1
 800bfca:	d14c      	bne.n	800c066 <_printf_i+0x1fe>
 800bfcc:	f04f 30ff 	mov.w	r0, #4294967295
 800bfd0:	b004      	add	sp, #16
 800bfd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfd6:	4835      	ldr	r0, [pc, #212]	; (800c0ac <_printf_i+0x244>)
 800bfd8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bfdc:	6823      	ldr	r3, [r4, #0]
 800bfde:	680e      	ldr	r6, [r1, #0]
 800bfe0:	061f      	lsls	r7, r3, #24
 800bfe2:	f856 5b04 	ldr.w	r5, [r6], #4
 800bfe6:	600e      	str	r6, [r1, #0]
 800bfe8:	d514      	bpl.n	800c014 <_printf_i+0x1ac>
 800bfea:	07d9      	lsls	r1, r3, #31
 800bfec:	bf44      	itt	mi
 800bfee:	f043 0320 	orrmi.w	r3, r3, #32
 800bff2:	6023      	strmi	r3, [r4, #0]
 800bff4:	b91d      	cbnz	r5, 800bffe <_printf_i+0x196>
 800bff6:	6823      	ldr	r3, [r4, #0]
 800bff8:	f023 0320 	bic.w	r3, r3, #32
 800bffc:	6023      	str	r3, [r4, #0]
 800bffe:	2310      	movs	r3, #16
 800c000:	e7b0      	b.n	800bf64 <_printf_i+0xfc>
 800c002:	6823      	ldr	r3, [r4, #0]
 800c004:	f043 0320 	orr.w	r3, r3, #32
 800c008:	6023      	str	r3, [r4, #0]
 800c00a:	2378      	movs	r3, #120	; 0x78
 800c00c:	4828      	ldr	r0, [pc, #160]	; (800c0b0 <_printf_i+0x248>)
 800c00e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c012:	e7e3      	b.n	800bfdc <_printf_i+0x174>
 800c014:	065e      	lsls	r6, r3, #25
 800c016:	bf48      	it	mi
 800c018:	b2ad      	uxthmi	r5, r5
 800c01a:	e7e6      	b.n	800bfea <_printf_i+0x182>
 800c01c:	4616      	mov	r6, r2
 800c01e:	e7bb      	b.n	800bf98 <_printf_i+0x130>
 800c020:	680b      	ldr	r3, [r1, #0]
 800c022:	6826      	ldr	r6, [r4, #0]
 800c024:	6960      	ldr	r0, [r4, #20]
 800c026:	1d1d      	adds	r5, r3, #4
 800c028:	600d      	str	r5, [r1, #0]
 800c02a:	0635      	lsls	r5, r6, #24
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	d501      	bpl.n	800c034 <_printf_i+0x1cc>
 800c030:	6018      	str	r0, [r3, #0]
 800c032:	e002      	b.n	800c03a <_printf_i+0x1d2>
 800c034:	0671      	lsls	r1, r6, #25
 800c036:	d5fb      	bpl.n	800c030 <_printf_i+0x1c8>
 800c038:	8018      	strh	r0, [r3, #0]
 800c03a:	2300      	movs	r3, #0
 800c03c:	6123      	str	r3, [r4, #16]
 800c03e:	4616      	mov	r6, r2
 800c040:	e7ba      	b.n	800bfb8 <_printf_i+0x150>
 800c042:	680b      	ldr	r3, [r1, #0]
 800c044:	1d1a      	adds	r2, r3, #4
 800c046:	600a      	str	r2, [r1, #0]
 800c048:	681e      	ldr	r6, [r3, #0]
 800c04a:	6862      	ldr	r2, [r4, #4]
 800c04c:	2100      	movs	r1, #0
 800c04e:	4630      	mov	r0, r6
 800c050:	f7f4 f95e 	bl	8000310 <memchr>
 800c054:	b108      	cbz	r0, 800c05a <_printf_i+0x1f2>
 800c056:	1b80      	subs	r0, r0, r6
 800c058:	6060      	str	r0, [r4, #4]
 800c05a:	6863      	ldr	r3, [r4, #4]
 800c05c:	6123      	str	r3, [r4, #16]
 800c05e:	2300      	movs	r3, #0
 800c060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c064:	e7a8      	b.n	800bfb8 <_printf_i+0x150>
 800c066:	6923      	ldr	r3, [r4, #16]
 800c068:	4632      	mov	r2, r6
 800c06a:	4649      	mov	r1, r9
 800c06c:	4640      	mov	r0, r8
 800c06e:	47d0      	blx	sl
 800c070:	3001      	adds	r0, #1
 800c072:	d0ab      	beq.n	800bfcc <_printf_i+0x164>
 800c074:	6823      	ldr	r3, [r4, #0]
 800c076:	079b      	lsls	r3, r3, #30
 800c078:	d413      	bmi.n	800c0a2 <_printf_i+0x23a>
 800c07a:	68e0      	ldr	r0, [r4, #12]
 800c07c:	9b03      	ldr	r3, [sp, #12]
 800c07e:	4298      	cmp	r0, r3
 800c080:	bfb8      	it	lt
 800c082:	4618      	movlt	r0, r3
 800c084:	e7a4      	b.n	800bfd0 <_printf_i+0x168>
 800c086:	2301      	movs	r3, #1
 800c088:	4632      	mov	r2, r6
 800c08a:	4649      	mov	r1, r9
 800c08c:	4640      	mov	r0, r8
 800c08e:	47d0      	blx	sl
 800c090:	3001      	adds	r0, #1
 800c092:	d09b      	beq.n	800bfcc <_printf_i+0x164>
 800c094:	3501      	adds	r5, #1
 800c096:	68e3      	ldr	r3, [r4, #12]
 800c098:	9903      	ldr	r1, [sp, #12]
 800c09a:	1a5b      	subs	r3, r3, r1
 800c09c:	42ab      	cmp	r3, r5
 800c09e:	dcf2      	bgt.n	800c086 <_printf_i+0x21e>
 800c0a0:	e7eb      	b.n	800c07a <_printf_i+0x212>
 800c0a2:	2500      	movs	r5, #0
 800c0a4:	f104 0619 	add.w	r6, r4, #25
 800c0a8:	e7f5      	b.n	800c096 <_printf_i+0x22e>
 800c0aa:	bf00      	nop
 800c0ac:	08010513 	.word	0x08010513
 800c0b0:	08010524 	.word	0x08010524

0800c0b4 <_scanf_float>:
 800c0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0b8:	b087      	sub	sp, #28
 800c0ba:	4617      	mov	r7, r2
 800c0bc:	9303      	str	r3, [sp, #12]
 800c0be:	688b      	ldr	r3, [r1, #8]
 800c0c0:	1e5a      	subs	r2, r3, #1
 800c0c2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c0c6:	bf83      	ittte	hi
 800c0c8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c0cc:	195b      	addhi	r3, r3, r5
 800c0ce:	9302      	strhi	r3, [sp, #8]
 800c0d0:	2300      	movls	r3, #0
 800c0d2:	bf86      	itte	hi
 800c0d4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c0d8:	608b      	strhi	r3, [r1, #8]
 800c0da:	9302      	strls	r3, [sp, #8]
 800c0dc:	680b      	ldr	r3, [r1, #0]
 800c0de:	468b      	mov	fp, r1
 800c0e0:	2500      	movs	r5, #0
 800c0e2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c0e6:	f84b 3b1c 	str.w	r3, [fp], #28
 800c0ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c0ee:	4680      	mov	r8, r0
 800c0f0:	460c      	mov	r4, r1
 800c0f2:	465e      	mov	r6, fp
 800c0f4:	46aa      	mov	sl, r5
 800c0f6:	46a9      	mov	r9, r5
 800c0f8:	9501      	str	r5, [sp, #4]
 800c0fa:	68a2      	ldr	r2, [r4, #8]
 800c0fc:	b152      	cbz	r2, 800c114 <_scanf_float+0x60>
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	2b4e      	cmp	r3, #78	; 0x4e
 800c104:	d864      	bhi.n	800c1d0 <_scanf_float+0x11c>
 800c106:	2b40      	cmp	r3, #64	; 0x40
 800c108:	d83c      	bhi.n	800c184 <_scanf_float+0xd0>
 800c10a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c10e:	b2c8      	uxtb	r0, r1
 800c110:	280e      	cmp	r0, #14
 800c112:	d93a      	bls.n	800c18a <_scanf_float+0xd6>
 800c114:	f1b9 0f00 	cmp.w	r9, #0
 800c118:	d003      	beq.n	800c122 <_scanf_float+0x6e>
 800c11a:	6823      	ldr	r3, [r4, #0]
 800c11c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c120:	6023      	str	r3, [r4, #0]
 800c122:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c126:	f1ba 0f01 	cmp.w	sl, #1
 800c12a:	f200 8113 	bhi.w	800c354 <_scanf_float+0x2a0>
 800c12e:	455e      	cmp	r6, fp
 800c130:	f200 8105 	bhi.w	800c33e <_scanf_float+0x28a>
 800c134:	2501      	movs	r5, #1
 800c136:	4628      	mov	r0, r5
 800c138:	b007      	add	sp, #28
 800c13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c13e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c142:	2a0d      	cmp	r2, #13
 800c144:	d8e6      	bhi.n	800c114 <_scanf_float+0x60>
 800c146:	a101      	add	r1, pc, #4	; (adr r1, 800c14c <_scanf_float+0x98>)
 800c148:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c14c:	0800c28b 	.word	0x0800c28b
 800c150:	0800c115 	.word	0x0800c115
 800c154:	0800c115 	.word	0x0800c115
 800c158:	0800c115 	.word	0x0800c115
 800c15c:	0800c2eb 	.word	0x0800c2eb
 800c160:	0800c2c3 	.word	0x0800c2c3
 800c164:	0800c115 	.word	0x0800c115
 800c168:	0800c115 	.word	0x0800c115
 800c16c:	0800c299 	.word	0x0800c299
 800c170:	0800c115 	.word	0x0800c115
 800c174:	0800c115 	.word	0x0800c115
 800c178:	0800c115 	.word	0x0800c115
 800c17c:	0800c115 	.word	0x0800c115
 800c180:	0800c251 	.word	0x0800c251
 800c184:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c188:	e7db      	b.n	800c142 <_scanf_float+0x8e>
 800c18a:	290e      	cmp	r1, #14
 800c18c:	d8c2      	bhi.n	800c114 <_scanf_float+0x60>
 800c18e:	a001      	add	r0, pc, #4	; (adr r0, 800c194 <_scanf_float+0xe0>)
 800c190:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c194:	0800c243 	.word	0x0800c243
 800c198:	0800c115 	.word	0x0800c115
 800c19c:	0800c243 	.word	0x0800c243
 800c1a0:	0800c2d7 	.word	0x0800c2d7
 800c1a4:	0800c115 	.word	0x0800c115
 800c1a8:	0800c1f1 	.word	0x0800c1f1
 800c1ac:	0800c22d 	.word	0x0800c22d
 800c1b0:	0800c22d 	.word	0x0800c22d
 800c1b4:	0800c22d 	.word	0x0800c22d
 800c1b8:	0800c22d 	.word	0x0800c22d
 800c1bc:	0800c22d 	.word	0x0800c22d
 800c1c0:	0800c22d 	.word	0x0800c22d
 800c1c4:	0800c22d 	.word	0x0800c22d
 800c1c8:	0800c22d 	.word	0x0800c22d
 800c1cc:	0800c22d 	.word	0x0800c22d
 800c1d0:	2b6e      	cmp	r3, #110	; 0x6e
 800c1d2:	d809      	bhi.n	800c1e8 <_scanf_float+0x134>
 800c1d4:	2b60      	cmp	r3, #96	; 0x60
 800c1d6:	d8b2      	bhi.n	800c13e <_scanf_float+0x8a>
 800c1d8:	2b54      	cmp	r3, #84	; 0x54
 800c1da:	d077      	beq.n	800c2cc <_scanf_float+0x218>
 800c1dc:	2b59      	cmp	r3, #89	; 0x59
 800c1de:	d199      	bne.n	800c114 <_scanf_float+0x60>
 800c1e0:	2d07      	cmp	r5, #7
 800c1e2:	d197      	bne.n	800c114 <_scanf_float+0x60>
 800c1e4:	2508      	movs	r5, #8
 800c1e6:	e029      	b.n	800c23c <_scanf_float+0x188>
 800c1e8:	2b74      	cmp	r3, #116	; 0x74
 800c1ea:	d06f      	beq.n	800c2cc <_scanf_float+0x218>
 800c1ec:	2b79      	cmp	r3, #121	; 0x79
 800c1ee:	e7f6      	b.n	800c1de <_scanf_float+0x12a>
 800c1f0:	6821      	ldr	r1, [r4, #0]
 800c1f2:	05c8      	lsls	r0, r1, #23
 800c1f4:	d51a      	bpl.n	800c22c <_scanf_float+0x178>
 800c1f6:	9b02      	ldr	r3, [sp, #8]
 800c1f8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c1fc:	6021      	str	r1, [r4, #0]
 800c1fe:	f109 0901 	add.w	r9, r9, #1
 800c202:	b11b      	cbz	r3, 800c20c <_scanf_float+0x158>
 800c204:	3b01      	subs	r3, #1
 800c206:	3201      	adds	r2, #1
 800c208:	9302      	str	r3, [sp, #8]
 800c20a:	60a2      	str	r2, [r4, #8]
 800c20c:	68a3      	ldr	r3, [r4, #8]
 800c20e:	3b01      	subs	r3, #1
 800c210:	60a3      	str	r3, [r4, #8]
 800c212:	6923      	ldr	r3, [r4, #16]
 800c214:	3301      	adds	r3, #1
 800c216:	6123      	str	r3, [r4, #16]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	3b01      	subs	r3, #1
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	607b      	str	r3, [r7, #4]
 800c220:	f340 8084 	ble.w	800c32c <_scanf_float+0x278>
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	3301      	adds	r3, #1
 800c228:	603b      	str	r3, [r7, #0]
 800c22a:	e766      	b.n	800c0fa <_scanf_float+0x46>
 800c22c:	eb1a 0f05 	cmn.w	sl, r5
 800c230:	f47f af70 	bne.w	800c114 <_scanf_float+0x60>
 800c234:	6822      	ldr	r2, [r4, #0]
 800c236:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c23a:	6022      	str	r2, [r4, #0]
 800c23c:	f806 3b01 	strb.w	r3, [r6], #1
 800c240:	e7e4      	b.n	800c20c <_scanf_float+0x158>
 800c242:	6822      	ldr	r2, [r4, #0]
 800c244:	0610      	lsls	r0, r2, #24
 800c246:	f57f af65 	bpl.w	800c114 <_scanf_float+0x60>
 800c24a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c24e:	e7f4      	b.n	800c23a <_scanf_float+0x186>
 800c250:	f1ba 0f00 	cmp.w	sl, #0
 800c254:	d10e      	bne.n	800c274 <_scanf_float+0x1c0>
 800c256:	f1b9 0f00 	cmp.w	r9, #0
 800c25a:	d10e      	bne.n	800c27a <_scanf_float+0x1c6>
 800c25c:	6822      	ldr	r2, [r4, #0]
 800c25e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c262:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c266:	d108      	bne.n	800c27a <_scanf_float+0x1c6>
 800c268:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c26c:	6022      	str	r2, [r4, #0]
 800c26e:	f04f 0a01 	mov.w	sl, #1
 800c272:	e7e3      	b.n	800c23c <_scanf_float+0x188>
 800c274:	f1ba 0f02 	cmp.w	sl, #2
 800c278:	d055      	beq.n	800c326 <_scanf_float+0x272>
 800c27a:	2d01      	cmp	r5, #1
 800c27c:	d002      	beq.n	800c284 <_scanf_float+0x1d0>
 800c27e:	2d04      	cmp	r5, #4
 800c280:	f47f af48 	bne.w	800c114 <_scanf_float+0x60>
 800c284:	3501      	adds	r5, #1
 800c286:	b2ed      	uxtb	r5, r5
 800c288:	e7d8      	b.n	800c23c <_scanf_float+0x188>
 800c28a:	f1ba 0f01 	cmp.w	sl, #1
 800c28e:	f47f af41 	bne.w	800c114 <_scanf_float+0x60>
 800c292:	f04f 0a02 	mov.w	sl, #2
 800c296:	e7d1      	b.n	800c23c <_scanf_float+0x188>
 800c298:	b97d      	cbnz	r5, 800c2ba <_scanf_float+0x206>
 800c29a:	f1b9 0f00 	cmp.w	r9, #0
 800c29e:	f47f af3c 	bne.w	800c11a <_scanf_float+0x66>
 800c2a2:	6822      	ldr	r2, [r4, #0]
 800c2a4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c2a8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c2ac:	f47f af39 	bne.w	800c122 <_scanf_float+0x6e>
 800c2b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c2b4:	6022      	str	r2, [r4, #0]
 800c2b6:	2501      	movs	r5, #1
 800c2b8:	e7c0      	b.n	800c23c <_scanf_float+0x188>
 800c2ba:	2d03      	cmp	r5, #3
 800c2bc:	d0e2      	beq.n	800c284 <_scanf_float+0x1d0>
 800c2be:	2d05      	cmp	r5, #5
 800c2c0:	e7de      	b.n	800c280 <_scanf_float+0x1cc>
 800c2c2:	2d02      	cmp	r5, #2
 800c2c4:	f47f af26 	bne.w	800c114 <_scanf_float+0x60>
 800c2c8:	2503      	movs	r5, #3
 800c2ca:	e7b7      	b.n	800c23c <_scanf_float+0x188>
 800c2cc:	2d06      	cmp	r5, #6
 800c2ce:	f47f af21 	bne.w	800c114 <_scanf_float+0x60>
 800c2d2:	2507      	movs	r5, #7
 800c2d4:	e7b2      	b.n	800c23c <_scanf_float+0x188>
 800c2d6:	6822      	ldr	r2, [r4, #0]
 800c2d8:	0591      	lsls	r1, r2, #22
 800c2da:	f57f af1b 	bpl.w	800c114 <_scanf_float+0x60>
 800c2de:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c2e2:	6022      	str	r2, [r4, #0]
 800c2e4:	f8cd 9004 	str.w	r9, [sp, #4]
 800c2e8:	e7a8      	b.n	800c23c <_scanf_float+0x188>
 800c2ea:	6822      	ldr	r2, [r4, #0]
 800c2ec:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c2f0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c2f4:	d006      	beq.n	800c304 <_scanf_float+0x250>
 800c2f6:	0550      	lsls	r0, r2, #21
 800c2f8:	f57f af0c 	bpl.w	800c114 <_scanf_float+0x60>
 800c2fc:	f1b9 0f00 	cmp.w	r9, #0
 800c300:	f43f af0f 	beq.w	800c122 <_scanf_float+0x6e>
 800c304:	0591      	lsls	r1, r2, #22
 800c306:	bf58      	it	pl
 800c308:	9901      	ldrpl	r1, [sp, #4]
 800c30a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c30e:	bf58      	it	pl
 800c310:	eba9 0101 	subpl.w	r1, r9, r1
 800c314:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c318:	bf58      	it	pl
 800c31a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c31e:	6022      	str	r2, [r4, #0]
 800c320:	f04f 0900 	mov.w	r9, #0
 800c324:	e78a      	b.n	800c23c <_scanf_float+0x188>
 800c326:	f04f 0a03 	mov.w	sl, #3
 800c32a:	e787      	b.n	800c23c <_scanf_float+0x188>
 800c32c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c330:	4639      	mov	r1, r7
 800c332:	4640      	mov	r0, r8
 800c334:	4798      	blx	r3
 800c336:	2800      	cmp	r0, #0
 800c338:	f43f aedf 	beq.w	800c0fa <_scanf_float+0x46>
 800c33c:	e6ea      	b.n	800c114 <_scanf_float+0x60>
 800c33e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c342:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c346:	463a      	mov	r2, r7
 800c348:	4640      	mov	r0, r8
 800c34a:	4798      	blx	r3
 800c34c:	6923      	ldr	r3, [r4, #16]
 800c34e:	3b01      	subs	r3, #1
 800c350:	6123      	str	r3, [r4, #16]
 800c352:	e6ec      	b.n	800c12e <_scanf_float+0x7a>
 800c354:	1e6b      	subs	r3, r5, #1
 800c356:	2b06      	cmp	r3, #6
 800c358:	d825      	bhi.n	800c3a6 <_scanf_float+0x2f2>
 800c35a:	2d02      	cmp	r5, #2
 800c35c:	d836      	bhi.n	800c3cc <_scanf_float+0x318>
 800c35e:	455e      	cmp	r6, fp
 800c360:	f67f aee8 	bls.w	800c134 <_scanf_float+0x80>
 800c364:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c368:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c36c:	463a      	mov	r2, r7
 800c36e:	4640      	mov	r0, r8
 800c370:	4798      	blx	r3
 800c372:	6923      	ldr	r3, [r4, #16]
 800c374:	3b01      	subs	r3, #1
 800c376:	6123      	str	r3, [r4, #16]
 800c378:	e7f1      	b.n	800c35e <_scanf_float+0x2aa>
 800c37a:	9802      	ldr	r0, [sp, #8]
 800c37c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c380:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c384:	9002      	str	r0, [sp, #8]
 800c386:	463a      	mov	r2, r7
 800c388:	4640      	mov	r0, r8
 800c38a:	4798      	blx	r3
 800c38c:	6923      	ldr	r3, [r4, #16]
 800c38e:	3b01      	subs	r3, #1
 800c390:	6123      	str	r3, [r4, #16]
 800c392:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c396:	fa5f fa8a 	uxtb.w	sl, sl
 800c39a:	f1ba 0f02 	cmp.w	sl, #2
 800c39e:	d1ec      	bne.n	800c37a <_scanf_float+0x2c6>
 800c3a0:	3d03      	subs	r5, #3
 800c3a2:	b2ed      	uxtb	r5, r5
 800c3a4:	1b76      	subs	r6, r6, r5
 800c3a6:	6823      	ldr	r3, [r4, #0]
 800c3a8:	05da      	lsls	r2, r3, #23
 800c3aa:	d52f      	bpl.n	800c40c <_scanf_float+0x358>
 800c3ac:	055b      	lsls	r3, r3, #21
 800c3ae:	d510      	bpl.n	800c3d2 <_scanf_float+0x31e>
 800c3b0:	455e      	cmp	r6, fp
 800c3b2:	f67f aebf 	bls.w	800c134 <_scanf_float+0x80>
 800c3b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c3ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c3be:	463a      	mov	r2, r7
 800c3c0:	4640      	mov	r0, r8
 800c3c2:	4798      	blx	r3
 800c3c4:	6923      	ldr	r3, [r4, #16]
 800c3c6:	3b01      	subs	r3, #1
 800c3c8:	6123      	str	r3, [r4, #16]
 800c3ca:	e7f1      	b.n	800c3b0 <_scanf_float+0x2fc>
 800c3cc:	46aa      	mov	sl, r5
 800c3ce:	9602      	str	r6, [sp, #8]
 800c3d0:	e7df      	b.n	800c392 <_scanf_float+0x2de>
 800c3d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c3d6:	6923      	ldr	r3, [r4, #16]
 800c3d8:	2965      	cmp	r1, #101	; 0x65
 800c3da:	f103 33ff 	add.w	r3, r3, #4294967295
 800c3de:	f106 35ff 	add.w	r5, r6, #4294967295
 800c3e2:	6123      	str	r3, [r4, #16]
 800c3e4:	d00c      	beq.n	800c400 <_scanf_float+0x34c>
 800c3e6:	2945      	cmp	r1, #69	; 0x45
 800c3e8:	d00a      	beq.n	800c400 <_scanf_float+0x34c>
 800c3ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c3ee:	463a      	mov	r2, r7
 800c3f0:	4640      	mov	r0, r8
 800c3f2:	4798      	blx	r3
 800c3f4:	6923      	ldr	r3, [r4, #16]
 800c3f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c3fa:	3b01      	subs	r3, #1
 800c3fc:	1eb5      	subs	r5, r6, #2
 800c3fe:	6123      	str	r3, [r4, #16]
 800c400:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c404:	463a      	mov	r2, r7
 800c406:	4640      	mov	r0, r8
 800c408:	4798      	blx	r3
 800c40a:	462e      	mov	r6, r5
 800c40c:	6825      	ldr	r5, [r4, #0]
 800c40e:	f015 0510 	ands.w	r5, r5, #16
 800c412:	d14d      	bne.n	800c4b0 <_scanf_float+0x3fc>
 800c414:	7035      	strb	r5, [r6, #0]
 800c416:	6823      	ldr	r3, [r4, #0]
 800c418:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c41c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c420:	d11a      	bne.n	800c458 <_scanf_float+0x3a4>
 800c422:	9b01      	ldr	r3, [sp, #4]
 800c424:	454b      	cmp	r3, r9
 800c426:	eba3 0209 	sub.w	r2, r3, r9
 800c42a:	d122      	bne.n	800c472 <_scanf_float+0x3be>
 800c42c:	2200      	movs	r2, #0
 800c42e:	4659      	mov	r1, fp
 800c430:	4640      	mov	r0, r8
 800c432:	f000 fec3 	bl	800d1bc <_strtod_r>
 800c436:	9b03      	ldr	r3, [sp, #12]
 800c438:	6821      	ldr	r1, [r4, #0]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f011 0f02 	tst.w	r1, #2
 800c440:	f103 0204 	add.w	r2, r3, #4
 800c444:	d020      	beq.n	800c488 <_scanf_float+0x3d4>
 800c446:	9903      	ldr	r1, [sp, #12]
 800c448:	600a      	str	r2, [r1, #0]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	ed83 0b00 	vstr	d0, [r3]
 800c450:	68e3      	ldr	r3, [r4, #12]
 800c452:	3301      	adds	r3, #1
 800c454:	60e3      	str	r3, [r4, #12]
 800c456:	e66e      	b.n	800c136 <_scanf_float+0x82>
 800c458:	9b04      	ldr	r3, [sp, #16]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d0e6      	beq.n	800c42c <_scanf_float+0x378>
 800c45e:	9905      	ldr	r1, [sp, #20]
 800c460:	230a      	movs	r3, #10
 800c462:	462a      	mov	r2, r5
 800c464:	3101      	adds	r1, #1
 800c466:	4640      	mov	r0, r8
 800c468:	f000 ff32 	bl	800d2d0 <_strtol_r>
 800c46c:	9b04      	ldr	r3, [sp, #16]
 800c46e:	9e05      	ldr	r6, [sp, #20]
 800c470:	1ac2      	subs	r2, r0, r3
 800c472:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c476:	429e      	cmp	r6, r3
 800c478:	bf28      	it	cs
 800c47a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c47e:	490d      	ldr	r1, [pc, #52]	; (800c4b4 <_scanf_float+0x400>)
 800c480:	4630      	mov	r0, r6
 800c482:	f000 f865 	bl	800c550 <siprintf>
 800c486:	e7d1      	b.n	800c42c <_scanf_float+0x378>
 800c488:	f011 0f04 	tst.w	r1, #4
 800c48c:	9903      	ldr	r1, [sp, #12]
 800c48e:	600a      	str	r2, [r1, #0]
 800c490:	d1db      	bne.n	800c44a <_scanf_float+0x396>
 800c492:	eeb4 0b40 	vcmp.f64	d0, d0
 800c496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c49a:	681e      	ldr	r6, [r3, #0]
 800c49c:	d705      	bvc.n	800c4aa <_scanf_float+0x3f6>
 800c49e:	4806      	ldr	r0, [pc, #24]	; (800c4b8 <_scanf_float+0x404>)
 800c4a0:	f000 f81c 	bl	800c4dc <nanf>
 800c4a4:	ed86 0a00 	vstr	s0, [r6]
 800c4a8:	e7d2      	b.n	800c450 <_scanf_float+0x39c>
 800c4aa:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c4ae:	e7f9      	b.n	800c4a4 <_scanf_float+0x3f0>
 800c4b0:	2500      	movs	r5, #0
 800c4b2:	e640      	b.n	800c136 <_scanf_float+0x82>
 800c4b4:	08010535 	.word	0x08010535
 800c4b8:	080104ea 	.word	0x080104ea

0800c4bc <_sbrk_r>:
 800c4bc:	b538      	push	{r3, r4, r5, lr}
 800c4be:	4d06      	ldr	r5, [pc, #24]	; (800c4d8 <_sbrk_r+0x1c>)
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	4604      	mov	r4, r0
 800c4c4:	4608      	mov	r0, r1
 800c4c6:	602b      	str	r3, [r5, #0]
 800c4c8:	f7f5 fa60 	bl	800198c <_sbrk>
 800c4cc:	1c43      	adds	r3, r0, #1
 800c4ce:	d102      	bne.n	800c4d6 <_sbrk_r+0x1a>
 800c4d0:	682b      	ldr	r3, [r5, #0]
 800c4d2:	b103      	cbz	r3, 800c4d6 <_sbrk_r+0x1a>
 800c4d4:	6023      	str	r3, [r4, #0]
 800c4d6:	bd38      	pop	{r3, r4, r5, pc}
 800c4d8:	24000ccc 	.word	0x24000ccc

0800c4dc <nanf>:
 800c4dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c4e4 <nanf+0x8>
 800c4e0:	4770      	bx	lr
 800c4e2:	bf00      	nop
 800c4e4:	7fc00000 	.word	0x7fc00000

0800c4e8 <sniprintf>:
 800c4e8:	b40c      	push	{r2, r3}
 800c4ea:	b530      	push	{r4, r5, lr}
 800c4ec:	4b17      	ldr	r3, [pc, #92]	; (800c54c <sniprintf+0x64>)
 800c4ee:	1e0c      	subs	r4, r1, #0
 800c4f0:	681d      	ldr	r5, [r3, #0]
 800c4f2:	b09d      	sub	sp, #116	; 0x74
 800c4f4:	da08      	bge.n	800c508 <sniprintf+0x20>
 800c4f6:	238b      	movs	r3, #139	; 0x8b
 800c4f8:	602b      	str	r3, [r5, #0]
 800c4fa:	f04f 30ff 	mov.w	r0, #4294967295
 800c4fe:	b01d      	add	sp, #116	; 0x74
 800c500:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c504:	b002      	add	sp, #8
 800c506:	4770      	bx	lr
 800c508:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c50c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c510:	bf14      	ite	ne
 800c512:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c516:	4623      	moveq	r3, r4
 800c518:	9304      	str	r3, [sp, #16]
 800c51a:	9307      	str	r3, [sp, #28]
 800c51c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c520:	9002      	str	r0, [sp, #8]
 800c522:	9006      	str	r0, [sp, #24]
 800c524:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c528:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c52a:	ab21      	add	r3, sp, #132	; 0x84
 800c52c:	a902      	add	r1, sp, #8
 800c52e:	4628      	mov	r0, r5
 800c530:	9301      	str	r3, [sp, #4]
 800c532:	f003 f89f 	bl	800f674 <_svfiprintf_r>
 800c536:	1c43      	adds	r3, r0, #1
 800c538:	bfbc      	itt	lt
 800c53a:	238b      	movlt	r3, #139	; 0x8b
 800c53c:	602b      	strlt	r3, [r5, #0]
 800c53e:	2c00      	cmp	r4, #0
 800c540:	d0dd      	beq.n	800c4fe <sniprintf+0x16>
 800c542:	9b02      	ldr	r3, [sp, #8]
 800c544:	2200      	movs	r2, #0
 800c546:	701a      	strb	r2, [r3, #0]
 800c548:	e7d9      	b.n	800c4fe <sniprintf+0x16>
 800c54a:	bf00      	nop
 800c54c:	240000c0 	.word	0x240000c0

0800c550 <siprintf>:
 800c550:	b40e      	push	{r1, r2, r3}
 800c552:	b500      	push	{lr}
 800c554:	b09c      	sub	sp, #112	; 0x70
 800c556:	ab1d      	add	r3, sp, #116	; 0x74
 800c558:	9002      	str	r0, [sp, #8]
 800c55a:	9006      	str	r0, [sp, #24]
 800c55c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c560:	4809      	ldr	r0, [pc, #36]	; (800c588 <siprintf+0x38>)
 800c562:	9107      	str	r1, [sp, #28]
 800c564:	9104      	str	r1, [sp, #16]
 800c566:	4909      	ldr	r1, [pc, #36]	; (800c58c <siprintf+0x3c>)
 800c568:	f853 2b04 	ldr.w	r2, [r3], #4
 800c56c:	9105      	str	r1, [sp, #20]
 800c56e:	6800      	ldr	r0, [r0, #0]
 800c570:	9301      	str	r3, [sp, #4]
 800c572:	a902      	add	r1, sp, #8
 800c574:	f003 f87e 	bl	800f674 <_svfiprintf_r>
 800c578:	9b02      	ldr	r3, [sp, #8]
 800c57a:	2200      	movs	r2, #0
 800c57c:	701a      	strb	r2, [r3, #0]
 800c57e:	b01c      	add	sp, #112	; 0x70
 800c580:	f85d eb04 	ldr.w	lr, [sp], #4
 800c584:	b003      	add	sp, #12
 800c586:	4770      	bx	lr
 800c588:	240000c0 	.word	0x240000c0
 800c58c:	ffff0208 	.word	0xffff0208

0800c590 <strncmp>:
 800c590:	b510      	push	{r4, lr}
 800c592:	b16a      	cbz	r2, 800c5b0 <strncmp+0x20>
 800c594:	3901      	subs	r1, #1
 800c596:	1884      	adds	r4, r0, r2
 800c598:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c59c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d103      	bne.n	800c5ac <strncmp+0x1c>
 800c5a4:	42a0      	cmp	r0, r4
 800c5a6:	d001      	beq.n	800c5ac <strncmp+0x1c>
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d1f5      	bne.n	800c598 <strncmp+0x8>
 800c5ac:	1a98      	subs	r0, r3, r2
 800c5ae:	bd10      	pop	{r4, pc}
 800c5b0:	4610      	mov	r0, r2
 800c5b2:	e7fc      	b.n	800c5ae <strncmp+0x1e>

0800c5b4 <strncpy>:
 800c5b4:	b510      	push	{r4, lr}
 800c5b6:	3901      	subs	r1, #1
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	b132      	cbz	r2, 800c5ca <strncpy+0x16>
 800c5bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c5c0:	f803 4b01 	strb.w	r4, [r3], #1
 800c5c4:	3a01      	subs	r2, #1
 800c5c6:	2c00      	cmp	r4, #0
 800c5c8:	d1f7      	bne.n	800c5ba <strncpy+0x6>
 800c5ca:	441a      	add	r2, r3
 800c5cc:	2100      	movs	r1, #0
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d100      	bne.n	800c5d4 <strncpy+0x20>
 800c5d2:	bd10      	pop	{r4, pc}
 800c5d4:	f803 1b01 	strb.w	r1, [r3], #1
 800c5d8:	e7f9      	b.n	800c5ce <strncpy+0x1a>

0800c5da <sulp>:
 800c5da:	b570      	push	{r4, r5, r6, lr}
 800c5dc:	4604      	mov	r4, r0
 800c5de:	460d      	mov	r5, r1
 800c5e0:	4616      	mov	r6, r2
 800c5e2:	ec45 4b10 	vmov	d0, r4, r5
 800c5e6:	f002 fe65 	bl	800f2b4 <__ulp>
 800c5ea:	b17e      	cbz	r6, 800c60c <sulp+0x32>
 800c5ec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c5f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	dd09      	ble.n	800c60c <sulp+0x32>
 800c5f8:	051b      	lsls	r3, r3, #20
 800c5fa:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800c5fe:	2000      	movs	r0, #0
 800c600:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800c604:	ec41 0b17 	vmov	d7, r0, r1
 800c608:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c60c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c610 <_strtod_l>:
 800c610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c614:	ed2d 8b0c 	vpush	{d8-d13}
 800c618:	b09d      	sub	sp, #116	; 0x74
 800c61a:	461f      	mov	r7, r3
 800c61c:	2300      	movs	r3, #0
 800c61e:	9318      	str	r3, [sp, #96]	; 0x60
 800c620:	4ba6      	ldr	r3, [pc, #664]	; (800c8bc <_strtod_l+0x2ac>)
 800c622:	9213      	str	r2, [sp, #76]	; 0x4c
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	9308      	str	r3, [sp, #32]
 800c628:	4604      	mov	r4, r0
 800c62a:	4618      	mov	r0, r3
 800c62c:	468a      	mov	sl, r1
 800c62e:	f7f3 fe61 	bl	80002f4 <strlen>
 800c632:	f04f 0800 	mov.w	r8, #0
 800c636:	4605      	mov	r5, r0
 800c638:	f04f 0900 	mov.w	r9, #0
 800c63c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800c640:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c642:	781a      	ldrb	r2, [r3, #0]
 800c644:	2a2b      	cmp	r2, #43	; 0x2b
 800c646:	d04d      	beq.n	800c6e4 <_strtod_l+0xd4>
 800c648:	d83a      	bhi.n	800c6c0 <_strtod_l+0xb0>
 800c64a:	2a0d      	cmp	r2, #13
 800c64c:	d833      	bhi.n	800c6b6 <_strtod_l+0xa6>
 800c64e:	2a08      	cmp	r2, #8
 800c650:	d833      	bhi.n	800c6ba <_strtod_l+0xaa>
 800c652:	2a00      	cmp	r2, #0
 800c654:	d03d      	beq.n	800c6d2 <_strtod_l+0xc2>
 800c656:	2300      	movs	r3, #0
 800c658:	930b      	str	r3, [sp, #44]	; 0x2c
 800c65a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c65c:	7833      	ldrb	r3, [r6, #0]
 800c65e:	2b30      	cmp	r3, #48	; 0x30
 800c660:	f040 80b6 	bne.w	800c7d0 <_strtod_l+0x1c0>
 800c664:	7873      	ldrb	r3, [r6, #1]
 800c666:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c66a:	2b58      	cmp	r3, #88	; 0x58
 800c66c:	d16d      	bne.n	800c74a <_strtod_l+0x13a>
 800c66e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c670:	9301      	str	r3, [sp, #4]
 800c672:	ab18      	add	r3, sp, #96	; 0x60
 800c674:	9702      	str	r7, [sp, #8]
 800c676:	9300      	str	r3, [sp, #0]
 800c678:	4a91      	ldr	r2, [pc, #580]	; (800c8c0 <_strtod_l+0x2b0>)
 800c67a:	ab19      	add	r3, sp, #100	; 0x64
 800c67c:	a917      	add	r1, sp, #92	; 0x5c
 800c67e:	4620      	mov	r0, r4
 800c680:	f001 ff1a 	bl	800e4b8 <__gethex>
 800c684:	f010 0507 	ands.w	r5, r0, #7
 800c688:	4607      	mov	r7, r0
 800c68a:	d005      	beq.n	800c698 <_strtod_l+0x88>
 800c68c:	2d06      	cmp	r5, #6
 800c68e:	d12b      	bne.n	800c6e8 <_strtod_l+0xd8>
 800c690:	3601      	adds	r6, #1
 800c692:	2300      	movs	r3, #0
 800c694:	9617      	str	r6, [sp, #92]	; 0x5c
 800c696:	930b      	str	r3, [sp, #44]	; 0x2c
 800c698:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	f040 856e 	bne.w	800d17c <_strtod_l+0xb6c>
 800c6a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6a2:	b1e3      	cbz	r3, 800c6de <_strtod_l+0xce>
 800c6a4:	ec49 8b17 	vmov	d7, r8, r9
 800c6a8:	eeb1 0b47 	vneg.f64	d0, d7
 800c6ac:	b01d      	add	sp, #116	; 0x74
 800c6ae:	ecbd 8b0c 	vpop	{d8-d13}
 800c6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6b6:	2a20      	cmp	r2, #32
 800c6b8:	d1cd      	bne.n	800c656 <_strtod_l+0x46>
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	9317      	str	r3, [sp, #92]	; 0x5c
 800c6be:	e7bf      	b.n	800c640 <_strtod_l+0x30>
 800c6c0:	2a2d      	cmp	r2, #45	; 0x2d
 800c6c2:	d1c8      	bne.n	800c656 <_strtod_l+0x46>
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	920b      	str	r2, [sp, #44]	; 0x2c
 800c6c8:	1c5a      	adds	r2, r3, #1
 800c6ca:	9217      	str	r2, [sp, #92]	; 0x5c
 800c6cc:	785b      	ldrb	r3, [r3, #1]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d1c3      	bne.n	800c65a <_strtod_l+0x4a>
 800c6d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c6d4:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	f040 854d 	bne.w	800d178 <_strtod_l+0xb68>
 800c6de:	ec49 8b10 	vmov	d0, r8, r9
 800c6e2:	e7e3      	b.n	800c6ac <_strtod_l+0x9c>
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	e7ee      	b.n	800c6c6 <_strtod_l+0xb6>
 800c6e8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c6ea:	b13a      	cbz	r2, 800c6fc <_strtod_l+0xec>
 800c6ec:	2135      	movs	r1, #53	; 0x35
 800c6ee:	a81a      	add	r0, sp, #104	; 0x68
 800c6f0:	f002 feec 	bl	800f4cc <__copybits>
 800c6f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c6f6:	4620      	mov	r0, r4
 800c6f8:	f002 fab0 	bl	800ec5c <_Bfree>
 800c6fc:	3d01      	subs	r5, #1
 800c6fe:	2d05      	cmp	r5, #5
 800c700:	d807      	bhi.n	800c712 <_strtod_l+0x102>
 800c702:	e8df f005 	tbb	[pc, r5]
 800c706:	0b0e      	.short	0x0b0e
 800c708:	030e1d18 	.word	0x030e1d18
 800c70c:	f04f 0900 	mov.w	r9, #0
 800c710:	46c8      	mov	r8, r9
 800c712:	073b      	lsls	r3, r7, #28
 800c714:	d5c0      	bpl.n	800c698 <_strtod_l+0x88>
 800c716:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800c71a:	e7bd      	b.n	800c698 <_strtod_l+0x88>
 800c71c:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 800c720:	e7f7      	b.n	800c712 <_strtod_l+0x102>
 800c722:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 800c726:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c728:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c72c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c730:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c734:	e7ed      	b.n	800c712 <_strtod_l+0x102>
 800c736:	f8df 918c 	ldr.w	r9, [pc, #396]	; 800c8c4 <_strtod_l+0x2b4>
 800c73a:	f04f 0800 	mov.w	r8, #0
 800c73e:	e7e8      	b.n	800c712 <_strtod_l+0x102>
 800c740:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c744:	f04f 38ff 	mov.w	r8, #4294967295
 800c748:	e7e3      	b.n	800c712 <_strtod_l+0x102>
 800c74a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c74c:	1c5a      	adds	r2, r3, #1
 800c74e:	9217      	str	r2, [sp, #92]	; 0x5c
 800c750:	785b      	ldrb	r3, [r3, #1]
 800c752:	2b30      	cmp	r3, #48	; 0x30
 800c754:	d0f9      	beq.n	800c74a <_strtod_l+0x13a>
 800c756:	2b00      	cmp	r3, #0
 800c758:	d09e      	beq.n	800c698 <_strtod_l+0x88>
 800c75a:	2301      	movs	r3, #1
 800c75c:	9306      	str	r3, [sp, #24]
 800c75e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c760:	930c      	str	r3, [sp, #48]	; 0x30
 800c762:	2300      	movs	r3, #0
 800c764:	9304      	str	r3, [sp, #16]
 800c766:	930a      	str	r3, [sp, #40]	; 0x28
 800c768:	461e      	mov	r6, r3
 800c76a:	220a      	movs	r2, #10
 800c76c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c76e:	f890 b000 	ldrb.w	fp, [r0]
 800c772:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 800c776:	b2d9      	uxtb	r1, r3
 800c778:	2909      	cmp	r1, #9
 800c77a:	d92b      	bls.n	800c7d4 <_strtod_l+0x1c4>
 800c77c:	9908      	ldr	r1, [sp, #32]
 800c77e:	462a      	mov	r2, r5
 800c780:	f7ff ff06 	bl	800c590 <strncmp>
 800c784:	2800      	cmp	r0, #0
 800c786:	d035      	beq.n	800c7f4 <_strtod_l+0x1e4>
 800c788:	2000      	movs	r0, #0
 800c78a:	465a      	mov	r2, fp
 800c78c:	4633      	mov	r3, r6
 800c78e:	4683      	mov	fp, r0
 800c790:	4601      	mov	r1, r0
 800c792:	2a65      	cmp	r2, #101	; 0x65
 800c794:	d001      	beq.n	800c79a <_strtod_l+0x18a>
 800c796:	2a45      	cmp	r2, #69	; 0x45
 800c798:	d118      	bne.n	800c7cc <_strtod_l+0x1bc>
 800c79a:	b91b      	cbnz	r3, 800c7a4 <_strtod_l+0x194>
 800c79c:	9b06      	ldr	r3, [sp, #24]
 800c79e:	4303      	orrs	r3, r0
 800c7a0:	d097      	beq.n	800c6d2 <_strtod_l+0xc2>
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 800c7a8:	f10a 0201 	add.w	r2, sl, #1
 800c7ac:	9217      	str	r2, [sp, #92]	; 0x5c
 800c7ae:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800c7b2:	2a2b      	cmp	r2, #43	; 0x2b
 800c7b4:	d077      	beq.n	800c8a6 <_strtod_l+0x296>
 800c7b6:	2a2d      	cmp	r2, #45	; 0x2d
 800c7b8:	d07d      	beq.n	800c8b6 <_strtod_l+0x2a6>
 800c7ba:	f04f 0e00 	mov.w	lr, #0
 800c7be:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800c7c2:	2d09      	cmp	r5, #9
 800c7c4:	f240 8084 	bls.w	800c8d0 <_strtod_l+0x2c0>
 800c7c8:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800c7cc:	2500      	movs	r5, #0
 800c7ce:	e09f      	b.n	800c910 <_strtod_l+0x300>
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	e7c3      	b.n	800c75c <_strtod_l+0x14c>
 800c7d4:	2e08      	cmp	r6, #8
 800c7d6:	bfd5      	itete	le
 800c7d8:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800c7da:	9904      	ldrgt	r1, [sp, #16]
 800c7dc:	fb02 3301 	mlale	r3, r2, r1, r3
 800c7e0:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c7e4:	f100 0001 	add.w	r0, r0, #1
 800c7e8:	bfd4      	ite	le
 800c7ea:	930a      	strle	r3, [sp, #40]	; 0x28
 800c7ec:	9304      	strgt	r3, [sp, #16]
 800c7ee:	3601      	adds	r6, #1
 800c7f0:	9017      	str	r0, [sp, #92]	; 0x5c
 800c7f2:	e7bb      	b.n	800c76c <_strtod_l+0x15c>
 800c7f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c7f6:	195a      	adds	r2, r3, r5
 800c7f8:	9217      	str	r2, [sp, #92]	; 0x5c
 800c7fa:	5d5a      	ldrb	r2, [r3, r5]
 800c7fc:	b3ae      	cbz	r6, 800c86a <_strtod_l+0x25a>
 800c7fe:	4683      	mov	fp, r0
 800c800:	4633      	mov	r3, r6
 800c802:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c806:	2909      	cmp	r1, #9
 800c808:	d912      	bls.n	800c830 <_strtod_l+0x220>
 800c80a:	2101      	movs	r1, #1
 800c80c:	e7c1      	b.n	800c792 <_strtod_l+0x182>
 800c80e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c810:	1c5a      	adds	r2, r3, #1
 800c812:	9217      	str	r2, [sp, #92]	; 0x5c
 800c814:	785a      	ldrb	r2, [r3, #1]
 800c816:	3001      	adds	r0, #1
 800c818:	2a30      	cmp	r2, #48	; 0x30
 800c81a:	d0f8      	beq.n	800c80e <_strtod_l+0x1fe>
 800c81c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c820:	2b08      	cmp	r3, #8
 800c822:	f200 84b0 	bhi.w	800d186 <_strtod_l+0xb76>
 800c826:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c828:	930c      	str	r3, [sp, #48]	; 0x30
 800c82a:	4683      	mov	fp, r0
 800c82c:	2000      	movs	r0, #0
 800c82e:	4603      	mov	r3, r0
 800c830:	3a30      	subs	r2, #48	; 0x30
 800c832:	f100 0101 	add.w	r1, r0, #1
 800c836:	d012      	beq.n	800c85e <_strtod_l+0x24e>
 800c838:	448b      	add	fp, r1
 800c83a:	eb00 0c03 	add.w	ip, r0, r3
 800c83e:	4619      	mov	r1, r3
 800c840:	250a      	movs	r5, #10
 800c842:	4561      	cmp	r1, ip
 800c844:	d113      	bne.n	800c86e <_strtod_l+0x25e>
 800c846:	1819      	adds	r1, r3, r0
 800c848:	2908      	cmp	r1, #8
 800c84a:	f103 0301 	add.w	r3, r3, #1
 800c84e:	4403      	add	r3, r0
 800c850:	dc1d      	bgt.n	800c88e <_strtod_l+0x27e>
 800c852:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c854:	210a      	movs	r1, #10
 800c856:	fb01 2200 	mla	r2, r1, r0, r2
 800c85a:	920a      	str	r2, [sp, #40]	; 0x28
 800c85c:	2100      	movs	r1, #0
 800c85e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c860:	1c50      	adds	r0, r2, #1
 800c862:	9017      	str	r0, [sp, #92]	; 0x5c
 800c864:	7852      	ldrb	r2, [r2, #1]
 800c866:	4608      	mov	r0, r1
 800c868:	e7cb      	b.n	800c802 <_strtod_l+0x1f2>
 800c86a:	4630      	mov	r0, r6
 800c86c:	e7d4      	b.n	800c818 <_strtod_l+0x208>
 800c86e:	2908      	cmp	r1, #8
 800c870:	dc04      	bgt.n	800c87c <_strtod_l+0x26c>
 800c872:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c874:	436f      	muls	r7, r5
 800c876:	970a      	str	r7, [sp, #40]	; 0x28
 800c878:	3101      	adds	r1, #1
 800c87a:	e7e2      	b.n	800c842 <_strtod_l+0x232>
 800c87c:	f101 0e01 	add.w	lr, r1, #1
 800c880:	f1be 0f10 	cmp.w	lr, #16
 800c884:	bfde      	ittt	le
 800c886:	9f04      	ldrle	r7, [sp, #16]
 800c888:	436f      	mulle	r7, r5
 800c88a:	9704      	strle	r7, [sp, #16]
 800c88c:	e7f4      	b.n	800c878 <_strtod_l+0x268>
 800c88e:	2b10      	cmp	r3, #16
 800c890:	bfdf      	itttt	le
 800c892:	9804      	ldrle	r0, [sp, #16]
 800c894:	210a      	movle	r1, #10
 800c896:	fb01 2200 	mlale	r2, r1, r0, r2
 800c89a:	9204      	strle	r2, [sp, #16]
 800c89c:	e7de      	b.n	800c85c <_strtod_l+0x24c>
 800c89e:	f04f 0b00 	mov.w	fp, #0
 800c8a2:	2101      	movs	r1, #1
 800c8a4:	e77a      	b.n	800c79c <_strtod_l+0x18c>
 800c8a6:	f04f 0e00 	mov.w	lr, #0
 800c8aa:	f10a 0202 	add.w	r2, sl, #2
 800c8ae:	9217      	str	r2, [sp, #92]	; 0x5c
 800c8b0:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800c8b4:	e783      	b.n	800c7be <_strtod_l+0x1ae>
 800c8b6:	f04f 0e01 	mov.w	lr, #1
 800c8ba:	e7f6      	b.n	800c8aa <_strtod_l+0x29a>
 800c8bc:	080107f4 	.word	0x080107f4
 800c8c0:	0801053c 	.word	0x0801053c
 800c8c4:	7ff00000 	.word	0x7ff00000
 800c8c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c8ca:	1c55      	adds	r5, r2, #1
 800c8cc:	9517      	str	r5, [sp, #92]	; 0x5c
 800c8ce:	7852      	ldrb	r2, [r2, #1]
 800c8d0:	2a30      	cmp	r2, #48	; 0x30
 800c8d2:	d0f9      	beq.n	800c8c8 <_strtod_l+0x2b8>
 800c8d4:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800c8d8:	2d08      	cmp	r5, #8
 800c8da:	f63f af77 	bhi.w	800c7cc <_strtod_l+0x1bc>
 800c8de:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800c8e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c8e4:	9208      	str	r2, [sp, #32]
 800c8e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c8e8:	1c55      	adds	r5, r2, #1
 800c8ea:	9517      	str	r5, [sp, #92]	; 0x5c
 800c8ec:	7852      	ldrb	r2, [r2, #1]
 800c8ee:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800c8f2:	2f09      	cmp	r7, #9
 800c8f4:	d937      	bls.n	800c966 <_strtod_l+0x356>
 800c8f6:	9f08      	ldr	r7, [sp, #32]
 800c8f8:	1bed      	subs	r5, r5, r7
 800c8fa:	2d08      	cmp	r5, #8
 800c8fc:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800c900:	dc02      	bgt.n	800c908 <_strtod_l+0x2f8>
 800c902:	4565      	cmp	r5, ip
 800c904:	bfa8      	it	ge
 800c906:	4665      	movge	r5, ip
 800c908:	f1be 0f00 	cmp.w	lr, #0
 800c90c:	d000      	beq.n	800c910 <_strtod_l+0x300>
 800c90e:	426d      	negs	r5, r5
 800c910:	2b00      	cmp	r3, #0
 800c912:	d14f      	bne.n	800c9b4 <_strtod_l+0x3a4>
 800c914:	9b06      	ldr	r3, [sp, #24]
 800c916:	4303      	orrs	r3, r0
 800c918:	f47f aebe 	bne.w	800c698 <_strtod_l+0x88>
 800c91c:	2900      	cmp	r1, #0
 800c91e:	f47f aed8 	bne.w	800c6d2 <_strtod_l+0xc2>
 800c922:	2a69      	cmp	r2, #105	; 0x69
 800c924:	d027      	beq.n	800c976 <_strtod_l+0x366>
 800c926:	dc24      	bgt.n	800c972 <_strtod_l+0x362>
 800c928:	2a49      	cmp	r2, #73	; 0x49
 800c92a:	d024      	beq.n	800c976 <_strtod_l+0x366>
 800c92c:	2a4e      	cmp	r2, #78	; 0x4e
 800c92e:	f47f aed0 	bne.w	800c6d2 <_strtod_l+0xc2>
 800c932:	499b      	ldr	r1, [pc, #620]	; (800cba0 <_strtod_l+0x590>)
 800c934:	a817      	add	r0, sp, #92	; 0x5c
 800c936:	f002 f817 	bl	800e968 <__match>
 800c93a:	2800      	cmp	r0, #0
 800c93c:	f43f aec9 	beq.w	800c6d2 <_strtod_l+0xc2>
 800c940:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c942:	781b      	ldrb	r3, [r3, #0]
 800c944:	2b28      	cmp	r3, #40	; 0x28
 800c946:	d12d      	bne.n	800c9a4 <_strtod_l+0x394>
 800c948:	4996      	ldr	r1, [pc, #600]	; (800cba4 <_strtod_l+0x594>)
 800c94a:	aa1a      	add	r2, sp, #104	; 0x68
 800c94c:	a817      	add	r0, sp, #92	; 0x5c
 800c94e:	f002 f81f 	bl	800e990 <__hexnan>
 800c952:	2805      	cmp	r0, #5
 800c954:	d126      	bne.n	800c9a4 <_strtod_l+0x394>
 800c956:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c958:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800c95c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c960:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c964:	e698      	b.n	800c698 <_strtod_l+0x88>
 800c966:	250a      	movs	r5, #10
 800c968:	fb05 250c 	mla	r5, r5, ip, r2
 800c96c:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800c970:	e7b9      	b.n	800c8e6 <_strtod_l+0x2d6>
 800c972:	2a6e      	cmp	r2, #110	; 0x6e
 800c974:	e7db      	b.n	800c92e <_strtod_l+0x31e>
 800c976:	498c      	ldr	r1, [pc, #560]	; (800cba8 <_strtod_l+0x598>)
 800c978:	a817      	add	r0, sp, #92	; 0x5c
 800c97a:	f001 fff5 	bl	800e968 <__match>
 800c97e:	2800      	cmp	r0, #0
 800c980:	f43f aea7 	beq.w	800c6d2 <_strtod_l+0xc2>
 800c984:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c986:	4989      	ldr	r1, [pc, #548]	; (800cbac <_strtod_l+0x59c>)
 800c988:	3b01      	subs	r3, #1
 800c98a:	a817      	add	r0, sp, #92	; 0x5c
 800c98c:	9317      	str	r3, [sp, #92]	; 0x5c
 800c98e:	f001 ffeb 	bl	800e968 <__match>
 800c992:	b910      	cbnz	r0, 800c99a <_strtod_l+0x38a>
 800c994:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c996:	3301      	adds	r3, #1
 800c998:	9317      	str	r3, [sp, #92]	; 0x5c
 800c99a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 800cbc0 <_strtod_l+0x5b0>
 800c99e:	f04f 0800 	mov.w	r8, #0
 800c9a2:	e679      	b.n	800c698 <_strtod_l+0x88>
 800c9a4:	4882      	ldr	r0, [pc, #520]	; (800cbb0 <_strtod_l+0x5a0>)
 800c9a6:	f002 ff67 	bl	800f878 <nan>
 800c9aa:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c9ae:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c9b2:	e671      	b.n	800c698 <_strtod_l+0x88>
 800c9b4:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 800c9b8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c9bc:	eba5 020b 	sub.w	r2, r5, fp
 800c9c0:	2e00      	cmp	r6, #0
 800c9c2:	bf08      	it	eq
 800c9c4:	461e      	moveq	r6, r3
 800c9c6:	2b10      	cmp	r3, #16
 800c9c8:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c9cc:	9206      	str	r2, [sp, #24]
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	bfa8      	it	ge
 800c9d2:	2210      	movge	r2, #16
 800c9d4:	2b09      	cmp	r3, #9
 800c9d6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800c9da:	dd0e      	ble.n	800c9fa <_strtod_l+0x3ea>
 800c9dc:	4975      	ldr	r1, [pc, #468]	; (800cbb4 <_strtod_l+0x5a4>)
 800c9de:	eddd 7a04 	vldr	s15, [sp, #16]
 800c9e2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c9e6:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800c9ea:	ed9d 5b08 	vldr	d5, [sp, #32]
 800c9ee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c9f2:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c9f6:	ec59 8b17 	vmov	r8, r9, d7
 800c9fa:	2b0f      	cmp	r3, #15
 800c9fc:	dc37      	bgt.n	800ca6e <_strtod_l+0x45e>
 800c9fe:	9906      	ldr	r1, [sp, #24]
 800ca00:	2900      	cmp	r1, #0
 800ca02:	f43f ae49 	beq.w	800c698 <_strtod_l+0x88>
 800ca06:	dd23      	ble.n	800ca50 <_strtod_l+0x440>
 800ca08:	2916      	cmp	r1, #22
 800ca0a:	dc0b      	bgt.n	800ca24 <_strtod_l+0x414>
 800ca0c:	4b69      	ldr	r3, [pc, #420]	; (800cbb4 <_strtod_l+0x5a4>)
 800ca0e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800ca12:	ed93 7b00 	vldr	d7, [r3]
 800ca16:	ec49 8b16 	vmov	d6, r8, r9
 800ca1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ca1e:	ec59 8b17 	vmov	r8, r9, d7
 800ca22:	e639      	b.n	800c698 <_strtod_l+0x88>
 800ca24:	9806      	ldr	r0, [sp, #24]
 800ca26:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800ca2a:	4281      	cmp	r1, r0
 800ca2c:	db1f      	blt.n	800ca6e <_strtod_l+0x45e>
 800ca2e:	4a61      	ldr	r2, [pc, #388]	; (800cbb4 <_strtod_l+0x5a4>)
 800ca30:	f1c3 030f 	rsb	r3, r3, #15
 800ca34:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800ca38:	ed91 7b00 	vldr	d7, [r1]
 800ca3c:	ec49 8b16 	vmov	d6, r8, r9
 800ca40:	1ac3      	subs	r3, r0, r3
 800ca42:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ca46:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ca4a:	ed92 6b00 	vldr	d6, [r2]
 800ca4e:	e7e4      	b.n	800ca1a <_strtod_l+0x40a>
 800ca50:	9906      	ldr	r1, [sp, #24]
 800ca52:	3116      	adds	r1, #22
 800ca54:	db0b      	blt.n	800ca6e <_strtod_l+0x45e>
 800ca56:	4b57      	ldr	r3, [pc, #348]	; (800cbb4 <_strtod_l+0x5a4>)
 800ca58:	ebab 0505 	sub.w	r5, fp, r5
 800ca5c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ca60:	ed95 7b00 	vldr	d7, [r5]
 800ca64:	ec49 8b16 	vmov	d6, r8, r9
 800ca68:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ca6c:	e7d7      	b.n	800ca1e <_strtod_l+0x40e>
 800ca6e:	9906      	ldr	r1, [sp, #24]
 800ca70:	1a9a      	subs	r2, r3, r2
 800ca72:	440a      	add	r2, r1
 800ca74:	2a00      	cmp	r2, #0
 800ca76:	dd74      	ble.n	800cb62 <_strtod_l+0x552>
 800ca78:	f012 000f 	ands.w	r0, r2, #15
 800ca7c:	d00a      	beq.n	800ca94 <_strtod_l+0x484>
 800ca7e:	494d      	ldr	r1, [pc, #308]	; (800cbb4 <_strtod_l+0x5a4>)
 800ca80:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ca84:	ed91 7b00 	vldr	d7, [r1]
 800ca88:	ec49 8b16 	vmov	d6, r8, r9
 800ca8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ca90:	ec59 8b17 	vmov	r8, r9, d7
 800ca94:	f032 020f 	bics.w	r2, r2, #15
 800ca98:	d04f      	beq.n	800cb3a <_strtod_l+0x52a>
 800ca9a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800ca9e:	dd22      	ble.n	800cae6 <_strtod_l+0x4d6>
 800caa0:	2500      	movs	r5, #0
 800caa2:	462e      	mov	r6, r5
 800caa4:	950a      	str	r5, [sp, #40]	; 0x28
 800caa6:	462f      	mov	r7, r5
 800caa8:	2322      	movs	r3, #34	; 0x22
 800caaa:	f8df 9114 	ldr.w	r9, [pc, #276]	; 800cbc0 <_strtod_l+0x5b0>
 800caae:	6023      	str	r3, [r4, #0]
 800cab0:	f04f 0800 	mov.w	r8, #0
 800cab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	f43f adee 	beq.w	800c698 <_strtod_l+0x88>
 800cabc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cabe:	4620      	mov	r0, r4
 800cac0:	f002 f8cc 	bl	800ec5c <_Bfree>
 800cac4:	4639      	mov	r1, r7
 800cac6:	4620      	mov	r0, r4
 800cac8:	f002 f8c8 	bl	800ec5c <_Bfree>
 800cacc:	4631      	mov	r1, r6
 800cace:	4620      	mov	r0, r4
 800cad0:	f002 f8c4 	bl	800ec5c <_Bfree>
 800cad4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cad6:	4620      	mov	r0, r4
 800cad8:	f002 f8c0 	bl	800ec5c <_Bfree>
 800cadc:	4629      	mov	r1, r5
 800cade:	4620      	mov	r0, r4
 800cae0:	f002 f8bc 	bl	800ec5c <_Bfree>
 800cae4:	e5d8      	b.n	800c698 <_strtod_l+0x88>
 800cae6:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800caea:	2000      	movs	r0, #0
 800caec:	4f32      	ldr	r7, [pc, #200]	; (800cbb8 <_strtod_l+0x5a8>)
 800caee:	1112      	asrs	r2, r2, #4
 800caf0:	4601      	mov	r1, r0
 800caf2:	2a01      	cmp	r2, #1
 800caf4:	dc24      	bgt.n	800cb40 <_strtod_l+0x530>
 800caf6:	b108      	cbz	r0, 800cafc <_strtod_l+0x4ec>
 800caf8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800cafc:	4a2e      	ldr	r2, [pc, #184]	; (800cbb8 <_strtod_l+0x5a8>)
 800cafe:	482f      	ldr	r0, [pc, #188]	; (800cbbc <_strtod_l+0x5ac>)
 800cb00:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800cb04:	ed91 7b00 	vldr	d7, [r1]
 800cb08:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800cb0c:	ec49 8b16 	vmov	d6, r8, r9
 800cb10:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cb14:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cb18:	9905      	ldr	r1, [sp, #20]
 800cb1a:	4a29      	ldr	r2, [pc, #164]	; (800cbc0 <_strtod_l+0x5b0>)
 800cb1c:	400a      	ands	r2, r1
 800cb1e:	4282      	cmp	r2, r0
 800cb20:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800cb24:	d8bc      	bhi.n	800caa0 <_strtod_l+0x490>
 800cb26:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800cb2a:	4282      	cmp	r2, r0
 800cb2c:	bf86      	itte	hi
 800cb2e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800cbc4 <_strtod_l+0x5b4>
 800cb32:	f04f 38ff 	movhi.w	r8, #4294967295
 800cb36:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	9204      	str	r2, [sp, #16]
 800cb3e:	e07f      	b.n	800cc40 <_strtod_l+0x630>
 800cb40:	f012 0f01 	tst.w	r2, #1
 800cb44:	d00a      	beq.n	800cb5c <_strtod_l+0x54c>
 800cb46:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 800cb4a:	ed90 7b00 	vldr	d7, [r0]
 800cb4e:	ed9d 6b04 	vldr	d6, [sp, #16]
 800cb52:	ee26 7b07 	vmul.f64	d7, d6, d7
 800cb56:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cb5a:	2001      	movs	r0, #1
 800cb5c:	3101      	adds	r1, #1
 800cb5e:	1052      	asrs	r2, r2, #1
 800cb60:	e7c7      	b.n	800caf2 <_strtod_l+0x4e2>
 800cb62:	d0ea      	beq.n	800cb3a <_strtod_l+0x52a>
 800cb64:	4252      	negs	r2, r2
 800cb66:	f012 000f 	ands.w	r0, r2, #15
 800cb6a:	d00a      	beq.n	800cb82 <_strtod_l+0x572>
 800cb6c:	4911      	ldr	r1, [pc, #68]	; (800cbb4 <_strtod_l+0x5a4>)
 800cb6e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800cb72:	ed91 7b00 	vldr	d7, [r1]
 800cb76:	ec49 8b16 	vmov	d6, r8, r9
 800cb7a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800cb7e:	ec59 8b17 	vmov	r8, r9, d7
 800cb82:	1112      	asrs	r2, r2, #4
 800cb84:	d0d9      	beq.n	800cb3a <_strtod_l+0x52a>
 800cb86:	2a1f      	cmp	r2, #31
 800cb88:	dd1e      	ble.n	800cbc8 <_strtod_l+0x5b8>
 800cb8a:	2500      	movs	r5, #0
 800cb8c:	462e      	mov	r6, r5
 800cb8e:	950a      	str	r5, [sp, #40]	; 0x28
 800cb90:	462f      	mov	r7, r5
 800cb92:	2322      	movs	r3, #34	; 0x22
 800cb94:	f04f 0800 	mov.w	r8, #0
 800cb98:	f04f 0900 	mov.w	r9, #0
 800cb9c:	6023      	str	r3, [r4, #0]
 800cb9e:	e789      	b.n	800cab4 <_strtod_l+0x4a4>
 800cba0:	0801050e 	.word	0x0801050e
 800cba4:	08010550 	.word	0x08010550
 800cba8:	08010506 	.word	0x08010506
 800cbac:	08010694 	.word	0x08010694
 800cbb0:	080104ea 	.word	0x080104ea
 800cbb4:	08010890 	.word	0x08010890
 800cbb8:	08010868 	.word	0x08010868
 800cbbc:	7ca00000 	.word	0x7ca00000
 800cbc0:	7ff00000 	.word	0x7ff00000
 800cbc4:	7fefffff 	.word	0x7fefffff
 800cbc8:	f012 0110 	ands.w	r1, r2, #16
 800cbcc:	bf18      	it	ne
 800cbce:	216a      	movne	r1, #106	; 0x6a
 800cbd0:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800cbd4:	9104      	str	r1, [sp, #16]
 800cbd6:	49c0      	ldr	r1, [pc, #768]	; (800ced8 <_strtod_l+0x8c8>)
 800cbd8:	2000      	movs	r0, #0
 800cbda:	07d7      	lsls	r7, r2, #31
 800cbdc:	d508      	bpl.n	800cbf0 <_strtod_l+0x5e0>
 800cbde:	ed9d 6b08 	vldr	d6, [sp, #32]
 800cbe2:	ed91 7b00 	vldr	d7, [r1]
 800cbe6:	ee26 7b07 	vmul.f64	d7, d6, d7
 800cbea:	ed8d 7b08 	vstr	d7, [sp, #32]
 800cbee:	2001      	movs	r0, #1
 800cbf0:	1052      	asrs	r2, r2, #1
 800cbf2:	f101 0108 	add.w	r1, r1, #8
 800cbf6:	d1f0      	bne.n	800cbda <_strtod_l+0x5ca>
 800cbf8:	b108      	cbz	r0, 800cbfe <_strtod_l+0x5ee>
 800cbfa:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800cbfe:	9a04      	ldr	r2, [sp, #16]
 800cc00:	b1ba      	cbz	r2, 800cc32 <_strtod_l+0x622>
 800cc02:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800cc06:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800cc0a:	2a00      	cmp	r2, #0
 800cc0c:	4649      	mov	r1, r9
 800cc0e:	dd10      	ble.n	800cc32 <_strtod_l+0x622>
 800cc10:	2a1f      	cmp	r2, #31
 800cc12:	f340 8132 	ble.w	800ce7a <_strtod_l+0x86a>
 800cc16:	2a34      	cmp	r2, #52	; 0x34
 800cc18:	bfde      	ittt	le
 800cc1a:	3a20      	suble	r2, #32
 800cc1c:	f04f 30ff 	movle.w	r0, #4294967295
 800cc20:	fa00 f202 	lslle.w	r2, r0, r2
 800cc24:	f04f 0800 	mov.w	r8, #0
 800cc28:	bfcc      	ite	gt
 800cc2a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800cc2e:	ea02 0901 	andle.w	r9, r2, r1
 800cc32:	ec49 8b17 	vmov	d7, r8, r9
 800cc36:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cc3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc3e:	d0a4      	beq.n	800cb8a <_strtod_l+0x57a>
 800cc40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc42:	9200      	str	r2, [sp, #0]
 800cc44:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cc46:	4632      	mov	r2, r6
 800cc48:	4620      	mov	r0, r4
 800cc4a:	f002 f873 	bl	800ed34 <__s2b>
 800cc4e:	900a      	str	r0, [sp, #40]	; 0x28
 800cc50:	2800      	cmp	r0, #0
 800cc52:	f43f af25 	beq.w	800caa0 <_strtod_l+0x490>
 800cc56:	9b06      	ldr	r3, [sp, #24]
 800cc58:	ebab 0505 	sub.w	r5, fp, r5
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	bfb4      	ite	lt
 800cc60:	462b      	movlt	r3, r5
 800cc62:	2300      	movge	r3, #0
 800cc64:	930c      	str	r3, [sp, #48]	; 0x30
 800cc66:	9b06      	ldr	r3, [sp, #24]
 800cc68:	ed9f 9b95 	vldr	d9, [pc, #596]	; 800cec0 <_strtod_l+0x8b0>
 800cc6c:	ed9f ab96 	vldr	d10, [pc, #600]	; 800cec8 <_strtod_l+0x8b8>
 800cc70:	ed9f bb97 	vldr	d11, [pc, #604]	; 800ced0 <_strtod_l+0x8c0>
 800cc74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cc78:	2500      	movs	r5, #0
 800cc7a:	9312      	str	r3, [sp, #72]	; 0x48
 800cc7c:	462e      	mov	r6, r5
 800cc7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc80:	4620      	mov	r0, r4
 800cc82:	6859      	ldr	r1, [r3, #4]
 800cc84:	f001 ffaa 	bl	800ebdc <_Balloc>
 800cc88:	4607      	mov	r7, r0
 800cc8a:	2800      	cmp	r0, #0
 800cc8c:	f43f af0c 	beq.w	800caa8 <_strtod_l+0x498>
 800cc90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc92:	691a      	ldr	r2, [r3, #16]
 800cc94:	3202      	adds	r2, #2
 800cc96:	f103 010c 	add.w	r1, r3, #12
 800cc9a:	0092      	lsls	r2, r2, #2
 800cc9c:	300c      	adds	r0, #12
 800cc9e:	f7fe fb91 	bl	800b3c4 <memcpy>
 800cca2:	ec49 8b10 	vmov	d0, r8, r9
 800cca6:	aa1a      	add	r2, sp, #104	; 0x68
 800cca8:	a919      	add	r1, sp, #100	; 0x64
 800ccaa:	4620      	mov	r0, r4
 800ccac:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800ccb0:	f002 fb7c 	bl	800f3ac <__d2b>
 800ccb4:	9018      	str	r0, [sp, #96]	; 0x60
 800ccb6:	2800      	cmp	r0, #0
 800ccb8:	f43f aef6 	beq.w	800caa8 <_strtod_l+0x498>
 800ccbc:	2101      	movs	r1, #1
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	f002 f8d2 	bl	800ee68 <__i2b>
 800ccc4:	4606      	mov	r6, r0
 800ccc6:	2800      	cmp	r0, #0
 800ccc8:	f43f aeee 	beq.w	800caa8 <_strtod_l+0x498>
 800cccc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ccce:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	bfab      	itete	ge
 800ccd4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ccd6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800ccd8:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 800ccdc:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 800cce0:	bfac      	ite	ge
 800cce2:	eb03 0b02 	addge.w	fp, r3, r2
 800cce6:	eba2 0a03 	sublt.w	sl, r2, r3
 800ccea:	9a04      	ldr	r2, [sp, #16]
 800ccec:	1a9b      	subs	r3, r3, r2
 800ccee:	440b      	add	r3, r1
 800ccf0:	4a7a      	ldr	r2, [pc, #488]	; (800cedc <_strtod_l+0x8cc>)
 800ccf2:	3b01      	subs	r3, #1
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800ccfa:	f280 80d1 	bge.w	800cea0 <_strtod_l+0x890>
 800ccfe:	1ad2      	subs	r2, r2, r3
 800cd00:	2a1f      	cmp	r2, #31
 800cd02:	eba1 0102 	sub.w	r1, r1, r2
 800cd06:	f04f 0001 	mov.w	r0, #1
 800cd0a:	f300 80bd 	bgt.w	800ce88 <_strtod_l+0x878>
 800cd0e:	fa00 f302 	lsl.w	r3, r0, r2
 800cd12:	930e      	str	r3, [sp, #56]	; 0x38
 800cd14:	2300      	movs	r3, #0
 800cd16:	930d      	str	r3, [sp, #52]	; 0x34
 800cd18:	eb0b 0301 	add.w	r3, fp, r1
 800cd1c:	9a04      	ldr	r2, [sp, #16]
 800cd1e:	459b      	cmp	fp, r3
 800cd20:	448a      	add	sl, r1
 800cd22:	4492      	add	sl, r2
 800cd24:	465a      	mov	r2, fp
 800cd26:	bfa8      	it	ge
 800cd28:	461a      	movge	r2, r3
 800cd2a:	4552      	cmp	r2, sl
 800cd2c:	bfa8      	it	ge
 800cd2e:	4652      	movge	r2, sl
 800cd30:	2a00      	cmp	r2, #0
 800cd32:	bfc2      	ittt	gt
 800cd34:	1a9b      	subgt	r3, r3, r2
 800cd36:	ebaa 0a02 	subgt.w	sl, sl, r2
 800cd3a:	ebab 0b02 	subgt.w	fp, fp, r2
 800cd3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd40:	2a00      	cmp	r2, #0
 800cd42:	dd18      	ble.n	800cd76 <_strtod_l+0x766>
 800cd44:	4631      	mov	r1, r6
 800cd46:	4620      	mov	r0, r4
 800cd48:	9315      	str	r3, [sp, #84]	; 0x54
 800cd4a:	f002 f949 	bl	800efe0 <__pow5mult>
 800cd4e:	4606      	mov	r6, r0
 800cd50:	2800      	cmp	r0, #0
 800cd52:	f43f aea9 	beq.w	800caa8 <_strtod_l+0x498>
 800cd56:	4601      	mov	r1, r0
 800cd58:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	f002 f89a 	bl	800ee94 <__multiply>
 800cd60:	9014      	str	r0, [sp, #80]	; 0x50
 800cd62:	2800      	cmp	r0, #0
 800cd64:	f43f aea0 	beq.w	800caa8 <_strtod_l+0x498>
 800cd68:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cd6a:	4620      	mov	r0, r4
 800cd6c:	f001 ff76 	bl	800ec5c <_Bfree>
 800cd70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cd72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd74:	9218      	str	r2, [sp, #96]	; 0x60
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	f300 8097 	bgt.w	800ceaa <_strtod_l+0x89a>
 800cd7c:	9b06      	ldr	r3, [sp, #24]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	dd08      	ble.n	800cd94 <_strtod_l+0x784>
 800cd82:	4639      	mov	r1, r7
 800cd84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cd86:	4620      	mov	r0, r4
 800cd88:	f002 f92a 	bl	800efe0 <__pow5mult>
 800cd8c:	4607      	mov	r7, r0
 800cd8e:	2800      	cmp	r0, #0
 800cd90:	f43f ae8a 	beq.w	800caa8 <_strtod_l+0x498>
 800cd94:	f1ba 0f00 	cmp.w	sl, #0
 800cd98:	dd08      	ble.n	800cdac <_strtod_l+0x79c>
 800cd9a:	4639      	mov	r1, r7
 800cd9c:	4652      	mov	r2, sl
 800cd9e:	4620      	mov	r0, r4
 800cda0:	f002 f978 	bl	800f094 <__lshift>
 800cda4:	4607      	mov	r7, r0
 800cda6:	2800      	cmp	r0, #0
 800cda8:	f43f ae7e 	beq.w	800caa8 <_strtod_l+0x498>
 800cdac:	f1bb 0f00 	cmp.w	fp, #0
 800cdb0:	dd08      	ble.n	800cdc4 <_strtod_l+0x7b4>
 800cdb2:	4631      	mov	r1, r6
 800cdb4:	465a      	mov	r2, fp
 800cdb6:	4620      	mov	r0, r4
 800cdb8:	f002 f96c 	bl	800f094 <__lshift>
 800cdbc:	4606      	mov	r6, r0
 800cdbe:	2800      	cmp	r0, #0
 800cdc0:	f43f ae72 	beq.w	800caa8 <_strtod_l+0x498>
 800cdc4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cdc6:	463a      	mov	r2, r7
 800cdc8:	4620      	mov	r0, r4
 800cdca:	f002 f9eb 	bl	800f1a4 <__mdiff>
 800cdce:	4605      	mov	r5, r0
 800cdd0:	2800      	cmp	r0, #0
 800cdd2:	f43f ae69 	beq.w	800caa8 <_strtod_l+0x498>
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800cddc:	60c3      	str	r3, [r0, #12]
 800cdde:	4631      	mov	r1, r6
 800cde0:	f002 f9c4 	bl	800f16c <__mcmp>
 800cde4:	2800      	cmp	r0, #0
 800cde6:	da7f      	bge.n	800cee8 <_strtod_l+0x8d8>
 800cde8:	ea5a 0308 	orrs.w	r3, sl, r8
 800cdec:	f040 80a5 	bne.w	800cf3a <_strtod_l+0x92a>
 800cdf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	f040 80a0 	bne.w	800cf3a <_strtod_l+0x92a>
 800cdfa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cdfe:	0d1b      	lsrs	r3, r3, #20
 800ce00:	051b      	lsls	r3, r3, #20
 800ce02:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ce06:	f240 8098 	bls.w	800cf3a <_strtod_l+0x92a>
 800ce0a:	696b      	ldr	r3, [r5, #20]
 800ce0c:	b91b      	cbnz	r3, 800ce16 <_strtod_l+0x806>
 800ce0e:	692b      	ldr	r3, [r5, #16]
 800ce10:	2b01      	cmp	r3, #1
 800ce12:	f340 8092 	ble.w	800cf3a <_strtod_l+0x92a>
 800ce16:	4629      	mov	r1, r5
 800ce18:	2201      	movs	r2, #1
 800ce1a:	4620      	mov	r0, r4
 800ce1c:	f002 f93a 	bl	800f094 <__lshift>
 800ce20:	4631      	mov	r1, r6
 800ce22:	4605      	mov	r5, r0
 800ce24:	f002 f9a2 	bl	800f16c <__mcmp>
 800ce28:	2800      	cmp	r0, #0
 800ce2a:	f340 8086 	ble.w	800cf3a <_strtod_l+0x92a>
 800ce2e:	9904      	ldr	r1, [sp, #16]
 800ce30:	4a2b      	ldr	r2, [pc, #172]	; (800cee0 <_strtod_l+0x8d0>)
 800ce32:	464b      	mov	r3, r9
 800ce34:	2900      	cmp	r1, #0
 800ce36:	f000 80a1 	beq.w	800cf7c <_strtod_l+0x96c>
 800ce3a:	ea02 0109 	and.w	r1, r2, r9
 800ce3e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ce42:	f300 809b 	bgt.w	800cf7c <_strtod_l+0x96c>
 800ce46:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ce4a:	f77f aea2 	ble.w	800cb92 <_strtod_l+0x582>
 800ce4e:	4a25      	ldr	r2, [pc, #148]	; (800cee4 <_strtod_l+0x8d4>)
 800ce50:	2300      	movs	r3, #0
 800ce52:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800ce56:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 800ce5a:	ec49 8b17 	vmov	d7, r8, r9
 800ce5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ce62:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ce66:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800ce6a:	4313      	orrs	r3, r2
 800ce6c:	bf08      	it	eq
 800ce6e:	2322      	moveq	r3, #34	; 0x22
 800ce70:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ce74:	bf08      	it	eq
 800ce76:	6023      	streq	r3, [r4, #0]
 800ce78:	e620      	b.n	800cabc <_strtod_l+0x4ac>
 800ce7a:	f04f 31ff 	mov.w	r1, #4294967295
 800ce7e:	fa01 f202 	lsl.w	r2, r1, r2
 800ce82:	ea02 0808 	and.w	r8, r2, r8
 800ce86:	e6d4      	b.n	800cc32 <_strtod_l+0x622>
 800ce88:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800ce8c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800ce90:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800ce94:	33e2      	adds	r3, #226	; 0xe2
 800ce96:	fa00 f303 	lsl.w	r3, r0, r3
 800ce9a:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 800ce9e:	e73b      	b.n	800cd18 <_strtod_l+0x708>
 800cea0:	2000      	movs	r0, #0
 800cea2:	2301      	movs	r3, #1
 800cea4:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 800cea8:	e736      	b.n	800cd18 <_strtod_l+0x708>
 800ceaa:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ceac:	461a      	mov	r2, r3
 800ceae:	4620      	mov	r0, r4
 800ceb0:	f002 f8f0 	bl	800f094 <__lshift>
 800ceb4:	9018      	str	r0, [sp, #96]	; 0x60
 800ceb6:	2800      	cmp	r0, #0
 800ceb8:	f47f af60 	bne.w	800cd7c <_strtod_l+0x76c>
 800cebc:	e5f4      	b.n	800caa8 <_strtod_l+0x498>
 800cebe:	bf00      	nop
 800cec0:	94a03595 	.word	0x94a03595
 800cec4:	3fcfffff 	.word	0x3fcfffff
 800cec8:	94a03595 	.word	0x94a03595
 800cecc:	3fdfffff 	.word	0x3fdfffff
 800ced0:	35afe535 	.word	0x35afe535
 800ced4:	3fe00000 	.word	0x3fe00000
 800ced8:	08010568 	.word	0x08010568
 800cedc:	fffffc02 	.word	0xfffffc02
 800cee0:	7ff00000 	.word	0x7ff00000
 800cee4:	39500000 	.word	0x39500000
 800cee8:	46cb      	mov	fp, r9
 800ceea:	d165      	bne.n	800cfb8 <_strtod_l+0x9a8>
 800ceec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cef0:	f1ba 0f00 	cmp.w	sl, #0
 800cef4:	d02a      	beq.n	800cf4c <_strtod_l+0x93c>
 800cef6:	4aaa      	ldr	r2, [pc, #680]	; (800d1a0 <_strtod_l+0xb90>)
 800cef8:	4293      	cmp	r3, r2
 800cefa:	d12b      	bne.n	800cf54 <_strtod_l+0x944>
 800cefc:	9b04      	ldr	r3, [sp, #16]
 800cefe:	4641      	mov	r1, r8
 800cf00:	b1fb      	cbz	r3, 800cf42 <_strtod_l+0x932>
 800cf02:	4aa8      	ldr	r2, [pc, #672]	; (800d1a4 <_strtod_l+0xb94>)
 800cf04:	ea09 0202 	and.w	r2, r9, r2
 800cf08:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800cf0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf10:	d81a      	bhi.n	800cf48 <_strtod_l+0x938>
 800cf12:	0d12      	lsrs	r2, r2, #20
 800cf14:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cf18:	fa00 f303 	lsl.w	r3, r0, r3
 800cf1c:	4299      	cmp	r1, r3
 800cf1e:	d119      	bne.n	800cf54 <_strtod_l+0x944>
 800cf20:	4ba1      	ldr	r3, [pc, #644]	; (800d1a8 <_strtod_l+0xb98>)
 800cf22:	459b      	cmp	fp, r3
 800cf24:	d102      	bne.n	800cf2c <_strtod_l+0x91c>
 800cf26:	3101      	adds	r1, #1
 800cf28:	f43f adbe 	beq.w	800caa8 <_strtod_l+0x498>
 800cf2c:	4b9d      	ldr	r3, [pc, #628]	; (800d1a4 <_strtod_l+0xb94>)
 800cf2e:	ea0b 0303 	and.w	r3, fp, r3
 800cf32:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800cf36:	f04f 0800 	mov.w	r8, #0
 800cf3a:	9b04      	ldr	r3, [sp, #16]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d186      	bne.n	800ce4e <_strtod_l+0x83e>
 800cf40:	e5bc      	b.n	800cabc <_strtod_l+0x4ac>
 800cf42:	f04f 33ff 	mov.w	r3, #4294967295
 800cf46:	e7e9      	b.n	800cf1c <_strtod_l+0x90c>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	e7e7      	b.n	800cf1c <_strtod_l+0x90c>
 800cf4c:	ea53 0308 	orrs.w	r3, r3, r8
 800cf50:	f43f af6d 	beq.w	800ce2e <_strtod_l+0x81e>
 800cf54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf56:	b1db      	cbz	r3, 800cf90 <_strtod_l+0x980>
 800cf58:	ea13 0f0b 	tst.w	r3, fp
 800cf5c:	d0ed      	beq.n	800cf3a <_strtod_l+0x92a>
 800cf5e:	9a04      	ldr	r2, [sp, #16]
 800cf60:	4640      	mov	r0, r8
 800cf62:	4649      	mov	r1, r9
 800cf64:	f1ba 0f00 	cmp.w	sl, #0
 800cf68:	d016      	beq.n	800cf98 <_strtod_l+0x988>
 800cf6a:	f7ff fb36 	bl	800c5da <sulp>
 800cf6e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800cf72:	ee37 7b00 	vadd.f64	d7, d7, d0
 800cf76:	ec59 8b17 	vmov	r8, r9, d7
 800cf7a:	e7de      	b.n	800cf3a <_strtod_l+0x92a>
 800cf7c:	4013      	ands	r3, r2
 800cf7e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cf82:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800cf86:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800cf8a:	f04f 38ff 	mov.w	r8, #4294967295
 800cf8e:	e7d4      	b.n	800cf3a <_strtod_l+0x92a>
 800cf90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf92:	ea13 0f08 	tst.w	r3, r8
 800cf96:	e7e1      	b.n	800cf5c <_strtod_l+0x94c>
 800cf98:	f7ff fb1f 	bl	800c5da <sulp>
 800cf9c:	ed9d 7b08 	vldr	d7, [sp, #32]
 800cfa0:	ee37 7b40 	vsub.f64	d7, d7, d0
 800cfa4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cfa8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cfac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfb0:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800cfb4:	d1c1      	bne.n	800cf3a <_strtod_l+0x92a>
 800cfb6:	e5ec      	b.n	800cb92 <_strtod_l+0x582>
 800cfb8:	4631      	mov	r1, r6
 800cfba:	4628      	mov	r0, r5
 800cfbc:	f002 fa52 	bl	800f464 <__ratio>
 800cfc0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800cfc4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800cfc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfcc:	d867      	bhi.n	800d09e <_strtod_l+0xa8e>
 800cfce:	f1ba 0f00 	cmp.w	sl, #0
 800cfd2:	d044      	beq.n	800d05e <_strtod_l+0xa4e>
 800cfd4:	4b75      	ldr	r3, [pc, #468]	; (800d1ac <_strtod_l+0xb9c>)
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800cfdc:	4971      	ldr	r1, [pc, #452]	; (800d1a4 <_strtod_l+0xb94>)
 800cfde:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800d1b8 <_strtod_l+0xba8>
 800cfe2:	ea0b 0001 	and.w	r0, fp, r1
 800cfe6:	4560      	cmp	r0, ip
 800cfe8:	900d      	str	r0, [sp, #52]	; 0x34
 800cfea:	f040 808b 	bne.w	800d104 <_strtod_l+0xaf4>
 800cfee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cff2:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800cff6:	ec49 8b10 	vmov	d0, r8, r9
 800cffa:	ec43 2b1c 	vmov	d12, r2, r3
 800cffe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d002:	f002 f957 	bl	800f2b4 <__ulp>
 800d006:	ec49 8b1d 	vmov	d13, r8, r9
 800d00a:	eeac db00 	vfma.f64	d13, d12, d0
 800d00e:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 800d012:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d014:	4963      	ldr	r1, [pc, #396]	; (800d1a4 <_strtod_l+0xb94>)
 800d016:	4a66      	ldr	r2, [pc, #408]	; (800d1b0 <_strtod_l+0xba0>)
 800d018:	4019      	ands	r1, r3
 800d01a:	4291      	cmp	r1, r2
 800d01c:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 800d020:	d947      	bls.n	800d0b2 <_strtod_l+0xaa2>
 800d022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d024:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d028:	4293      	cmp	r3, r2
 800d02a:	d103      	bne.n	800d034 <_strtod_l+0xa24>
 800d02c:	9b08      	ldr	r3, [sp, #32]
 800d02e:	3301      	adds	r3, #1
 800d030:	f43f ad3a 	beq.w	800caa8 <_strtod_l+0x498>
 800d034:	f8df 9170 	ldr.w	r9, [pc, #368]	; 800d1a8 <_strtod_l+0xb98>
 800d038:	f04f 38ff 	mov.w	r8, #4294967295
 800d03c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d03e:	4620      	mov	r0, r4
 800d040:	f001 fe0c 	bl	800ec5c <_Bfree>
 800d044:	4639      	mov	r1, r7
 800d046:	4620      	mov	r0, r4
 800d048:	f001 fe08 	bl	800ec5c <_Bfree>
 800d04c:	4631      	mov	r1, r6
 800d04e:	4620      	mov	r0, r4
 800d050:	f001 fe04 	bl	800ec5c <_Bfree>
 800d054:	4629      	mov	r1, r5
 800d056:	4620      	mov	r0, r4
 800d058:	f001 fe00 	bl	800ec5c <_Bfree>
 800d05c:	e60f      	b.n	800cc7e <_strtod_l+0x66e>
 800d05e:	f1b8 0f00 	cmp.w	r8, #0
 800d062:	d112      	bne.n	800d08a <_strtod_l+0xa7a>
 800d064:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d068:	b9b3      	cbnz	r3, 800d098 <_strtod_l+0xa88>
 800d06a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800d06e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d076:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800d07a:	d401      	bmi.n	800d080 <_strtod_l+0xa70>
 800d07c:	ee20 8b08 	vmul.f64	d8, d0, d8
 800d080:	eeb1 7b48 	vneg.f64	d7, d8
 800d084:	ec53 2b17 	vmov	r2, r3, d7
 800d088:	e7a8      	b.n	800cfdc <_strtod_l+0x9cc>
 800d08a:	f1b8 0f01 	cmp.w	r8, #1
 800d08e:	d103      	bne.n	800d098 <_strtod_l+0xa88>
 800d090:	f1b9 0f00 	cmp.w	r9, #0
 800d094:	f43f ad7d 	beq.w	800cb92 <_strtod_l+0x582>
 800d098:	4b46      	ldr	r3, [pc, #280]	; (800d1b4 <_strtod_l+0xba4>)
 800d09a:	2200      	movs	r2, #0
 800d09c:	e79c      	b.n	800cfd8 <_strtod_l+0x9c8>
 800d09e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800d0a2:	ee20 8b08 	vmul.f64	d8, d0, d8
 800d0a6:	f1ba 0f00 	cmp.w	sl, #0
 800d0aa:	d0e9      	beq.n	800d080 <_strtod_l+0xa70>
 800d0ac:	ec53 2b18 	vmov	r2, r3, d8
 800d0b0:	e794      	b.n	800cfdc <_strtod_l+0x9cc>
 800d0b2:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800d0b6:	9b04      	ldr	r3, [sp, #16]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d1bf      	bne.n	800d03c <_strtod_l+0xa2c>
 800d0bc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d0c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d0c2:	0d1b      	lsrs	r3, r3, #20
 800d0c4:	051b      	lsls	r3, r3, #20
 800d0c6:	429a      	cmp	r2, r3
 800d0c8:	d1b8      	bne.n	800d03c <_strtod_l+0xa2c>
 800d0ca:	ec51 0b18 	vmov	r0, r1, d8
 800d0ce:	f7f3 fb43 	bl	8000758 <__aeabi_d2lz>
 800d0d2:	f7f3 fafb 	bl	80006cc <__aeabi_l2d>
 800d0d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d0da:	ec41 0b17 	vmov	d7, r0, r1
 800d0de:	ea43 0308 	orr.w	r3, r3, r8
 800d0e2:	ea53 030a 	orrs.w	r3, r3, sl
 800d0e6:	ee38 8b47 	vsub.f64	d8, d8, d7
 800d0ea:	d03e      	beq.n	800d16a <_strtod_l+0xb5a>
 800d0ec:	eeb4 8bca 	vcmpe.f64	d8, d10
 800d0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0f4:	f53f ace2 	bmi.w	800cabc <_strtod_l+0x4ac>
 800d0f8:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800d0fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d100:	dd9c      	ble.n	800d03c <_strtod_l+0xa2c>
 800d102:	e4db      	b.n	800cabc <_strtod_l+0x4ac>
 800d104:	9904      	ldr	r1, [sp, #16]
 800d106:	b301      	cbz	r1, 800d14a <_strtod_l+0xb3a>
 800d108:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d10a:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800d10e:	d81c      	bhi.n	800d14a <_strtod_l+0xb3a>
 800d110:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800d198 <_strtod_l+0xb88>
 800d114:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d11c:	d811      	bhi.n	800d142 <_strtod_l+0xb32>
 800d11e:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800d122:	ee18 3a10 	vmov	r3, s16
 800d126:	2b01      	cmp	r3, #1
 800d128:	bf38      	it	cc
 800d12a:	2301      	movcc	r3, #1
 800d12c:	ee08 3a10 	vmov	s16, r3
 800d130:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800d134:	f1ba 0f00 	cmp.w	sl, #0
 800d138:	d114      	bne.n	800d164 <_strtod_l+0xb54>
 800d13a:	eeb1 7b48 	vneg.f64	d7, d8
 800d13e:	ec53 2b17 	vmov	r2, r3, d7
 800d142:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d144:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 800d148:	1a0b      	subs	r3, r1, r0
 800d14a:	ed9d 0b08 	vldr	d0, [sp, #32]
 800d14e:	ec43 2b1c 	vmov	d12, r2, r3
 800d152:	f002 f8af 	bl	800f2b4 <__ulp>
 800d156:	ed9d 7b08 	vldr	d7, [sp, #32]
 800d15a:	eeac 7b00 	vfma.f64	d7, d12, d0
 800d15e:	ec59 8b17 	vmov	r8, r9, d7
 800d162:	e7a8      	b.n	800d0b6 <_strtod_l+0xaa6>
 800d164:	ec53 2b18 	vmov	r2, r3, d8
 800d168:	e7eb      	b.n	800d142 <_strtod_l+0xb32>
 800d16a:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800d16e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d172:	f57f af63 	bpl.w	800d03c <_strtod_l+0xa2c>
 800d176:	e4a1      	b.n	800cabc <_strtod_l+0x4ac>
 800d178:	2300      	movs	r3, #0
 800d17a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d17c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d17e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d180:	6013      	str	r3, [r2, #0]
 800d182:	f7ff ba8d 	b.w	800c6a0 <_strtod_l+0x90>
 800d186:	2a65      	cmp	r2, #101	; 0x65
 800d188:	f43f ab89 	beq.w	800c89e <_strtod_l+0x28e>
 800d18c:	2a45      	cmp	r2, #69	; 0x45
 800d18e:	f43f ab86 	beq.w	800c89e <_strtod_l+0x28e>
 800d192:	2101      	movs	r1, #1
 800d194:	f7ff bbbe 	b.w	800c914 <_strtod_l+0x304>
 800d198:	ffc00000 	.word	0xffc00000
 800d19c:	41dfffff 	.word	0x41dfffff
 800d1a0:	000fffff 	.word	0x000fffff
 800d1a4:	7ff00000 	.word	0x7ff00000
 800d1a8:	7fefffff 	.word	0x7fefffff
 800d1ac:	3ff00000 	.word	0x3ff00000
 800d1b0:	7c9fffff 	.word	0x7c9fffff
 800d1b4:	bff00000 	.word	0xbff00000
 800d1b8:	7fe00000 	.word	0x7fe00000

0800d1bc <_strtod_r>:
 800d1bc:	4b01      	ldr	r3, [pc, #4]	; (800d1c4 <_strtod_r+0x8>)
 800d1be:	f7ff ba27 	b.w	800c610 <_strtod_l>
 800d1c2:	bf00      	nop
 800d1c4:	24000128 	.word	0x24000128

0800d1c8 <_strtol_l.isra.0>:
 800d1c8:	2b01      	cmp	r3, #1
 800d1ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1ce:	d001      	beq.n	800d1d4 <_strtol_l.isra.0+0xc>
 800d1d0:	2b24      	cmp	r3, #36	; 0x24
 800d1d2:	d906      	bls.n	800d1e2 <_strtol_l.isra.0+0x1a>
 800d1d4:	f7fe f8aa 	bl	800b32c <__errno>
 800d1d8:	2316      	movs	r3, #22
 800d1da:	6003      	str	r3, [r0, #0]
 800d1dc:	2000      	movs	r0, #0
 800d1de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1e2:	4f3a      	ldr	r7, [pc, #232]	; (800d2cc <_strtol_l.isra.0+0x104>)
 800d1e4:	468e      	mov	lr, r1
 800d1e6:	4676      	mov	r6, lr
 800d1e8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d1ec:	5de5      	ldrb	r5, [r4, r7]
 800d1ee:	f015 0508 	ands.w	r5, r5, #8
 800d1f2:	d1f8      	bne.n	800d1e6 <_strtol_l.isra.0+0x1e>
 800d1f4:	2c2d      	cmp	r4, #45	; 0x2d
 800d1f6:	d134      	bne.n	800d262 <_strtol_l.isra.0+0x9a>
 800d1f8:	f89e 4000 	ldrb.w	r4, [lr]
 800d1fc:	f04f 0801 	mov.w	r8, #1
 800d200:	f106 0e02 	add.w	lr, r6, #2
 800d204:	2b00      	cmp	r3, #0
 800d206:	d05c      	beq.n	800d2c2 <_strtol_l.isra.0+0xfa>
 800d208:	2b10      	cmp	r3, #16
 800d20a:	d10c      	bne.n	800d226 <_strtol_l.isra.0+0x5e>
 800d20c:	2c30      	cmp	r4, #48	; 0x30
 800d20e:	d10a      	bne.n	800d226 <_strtol_l.isra.0+0x5e>
 800d210:	f89e 4000 	ldrb.w	r4, [lr]
 800d214:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d218:	2c58      	cmp	r4, #88	; 0x58
 800d21a:	d14d      	bne.n	800d2b8 <_strtol_l.isra.0+0xf0>
 800d21c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800d220:	2310      	movs	r3, #16
 800d222:	f10e 0e02 	add.w	lr, lr, #2
 800d226:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800d22a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d22e:	2600      	movs	r6, #0
 800d230:	fbbc f9f3 	udiv	r9, ip, r3
 800d234:	4635      	mov	r5, r6
 800d236:	fb03 ca19 	mls	sl, r3, r9, ip
 800d23a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800d23e:	2f09      	cmp	r7, #9
 800d240:	d818      	bhi.n	800d274 <_strtol_l.isra.0+0xac>
 800d242:	463c      	mov	r4, r7
 800d244:	42a3      	cmp	r3, r4
 800d246:	dd24      	ble.n	800d292 <_strtol_l.isra.0+0xca>
 800d248:	2e00      	cmp	r6, #0
 800d24a:	db1f      	blt.n	800d28c <_strtol_l.isra.0+0xc4>
 800d24c:	45a9      	cmp	r9, r5
 800d24e:	d31d      	bcc.n	800d28c <_strtol_l.isra.0+0xc4>
 800d250:	d101      	bne.n	800d256 <_strtol_l.isra.0+0x8e>
 800d252:	45a2      	cmp	sl, r4
 800d254:	db1a      	blt.n	800d28c <_strtol_l.isra.0+0xc4>
 800d256:	fb05 4503 	mla	r5, r5, r3, r4
 800d25a:	2601      	movs	r6, #1
 800d25c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d260:	e7eb      	b.n	800d23a <_strtol_l.isra.0+0x72>
 800d262:	2c2b      	cmp	r4, #43	; 0x2b
 800d264:	bf08      	it	eq
 800d266:	f89e 4000 	ldrbeq.w	r4, [lr]
 800d26a:	46a8      	mov	r8, r5
 800d26c:	bf08      	it	eq
 800d26e:	f106 0e02 	addeq.w	lr, r6, #2
 800d272:	e7c7      	b.n	800d204 <_strtol_l.isra.0+0x3c>
 800d274:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800d278:	2f19      	cmp	r7, #25
 800d27a:	d801      	bhi.n	800d280 <_strtol_l.isra.0+0xb8>
 800d27c:	3c37      	subs	r4, #55	; 0x37
 800d27e:	e7e1      	b.n	800d244 <_strtol_l.isra.0+0x7c>
 800d280:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800d284:	2f19      	cmp	r7, #25
 800d286:	d804      	bhi.n	800d292 <_strtol_l.isra.0+0xca>
 800d288:	3c57      	subs	r4, #87	; 0x57
 800d28a:	e7db      	b.n	800d244 <_strtol_l.isra.0+0x7c>
 800d28c:	f04f 36ff 	mov.w	r6, #4294967295
 800d290:	e7e4      	b.n	800d25c <_strtol_l.isra.0+0x94>
 800d292:	2e00      	cmp	r6, #0
 800d294:	da05      	bge.n	800d2a2 <_strtol_l.isra.0+0xda>
 800d296:	2322      	movs	r3, #34	; 0x22
 800d298:	6003      	str	r3, [r0, #0]
 800d29a:	4665      	mov	r5, ip
 800d29c:	b942      	cbnz	r2, 800d2b0 <_strtol_l.isra.0+0xe8>
 800d29e:	4628      	mov	r0, r5
 800d2a0:	e79d      	b.n	800d1de <_strtol_l.isra.0+0x16>
 800d2a2:	f1b8 0f00 	cmp.w	r8, #0
 800d2a6:	d000      	beq.n	800d2aa <_strtol_l.isra.0+0xe2>
 800d2a8:	426d      	negs	r5, r5
 800d2aa:	2a00      	cmp	r2, #0
 800d2ac:	d0f7      	beq.n	800d29e <_strtol_l.isra.0+0xd6>
 800d2ae:	b10e      	cbz	r6, 800d2b4 <_strtol_l.isra.0+0xec>
 800d2b0:	f10e 31ff 	add.w	r1, lr, #4294967295
 800d2b4:	6011      	str	r1, [r2, #0]
 800d2b6:	e7f2      	b.n	800d29e <_strtol_l.isra.0+0xd6>
 800d2b8:	2430      	movs	r4, #48	; 0x30
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d1b3      	bne.n	800d226 <_strtol_l.isra.0+0x5e>
 800d2be:	2308      	movs	r3, #8
 800d2c0:	e7b1      	b.n	800d226 <_strtol_l.isra.0+0x5e>
 800d2c2:	2c30      	cmp	r4, #48	; 0x30
 800d2c4:	d0a4      	beq.n	800d210 <_strtol_l.isra.0+0x48>
 800d2c6:	230a      	movs	r3, #10
 800d2c8:	e7ad      	b.n	800d226 <_strtol_l.isra.0+0x5e>
 800d2ca:	bf00      	nop
 800d2cc:	08010591 	.word	0x08010591

0800d2d0 <_strtol_r>:
 800d2d0:	f7ff bf7a 	b.w	800d1c8 <_strtol_l.isra.0>

0800d2d4 <__swbuf_r>:
 800d2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2d6:	460e      	mov	r6, r1
 800d2d8:	4614      	mov	r4, r2
 800d2da:	4605      	mov	r5, r0
 800d2dc:	b118      	cbz	r0, 800d2e6 <__swbuf_r+0x12>
 800d2de:	6983      	ldr	r3, [r0, #24]
 800d2e0:	b90b      	cbnz	r3, 800d2e6 <__swbuf_r+0x12>
 800d2e2:	f000 ffe5 	bl	800e2b0 <__sinit>
 800d2e6:	4b21      	ldr	r3, [pc, #132]	; (800d36c <__swbuf_r+0x98>)
 800d2e8:	429c      	cmp	r4, r3
 800d2ea:	d12b      	bne.n	800d344 <__swbuf_r+0x70>
 800d2ec:	686c      	ldr	r4, [r5, #4]
 800d2ee:	69a3      	ldr	r3, [r4, #24]
 800d2f0:	60a3      	str	r3, [r4, #8]
 800d2f2:	89a3      	ldrh	r3, [r4, #12]
 800d2f4:	071a      	lsls	r2, r3, #28
 800d2f6:	d52f      	bpl.n	800d358 <__swbuf_r+0x84>
 800d2f8:	6923      	ldr	r3, [r4, #16]
 800d2fa:	b36b      	cbz	r3, 800d358 <__swbuf_r+0x84>
 800d2fc:	6923      	ldr	r3, [r4, #16]
 800d2fe:	6820      	ldr	r0, [r4, #0]
 800d300:	1ac0      	subs	r0, r0, r3
 800d302:	6963      	ldr	r3, [r4, #20]
 800d304:	b2f6      	uxtb	r6, r6
 800d306:	4283      	cmp	r3, r0
 800d308:	4637      	mov	r7, r6
 800d30a:	dc04      	bgt.n	800d316 <__swbuf_r+0x42>
 800d30c:	4621      	mov	r1, r4
 800d30e:	4628      	mov	r0, r5
 800d310:	f000 ff3a 	bl	800e188 <_fflush_r>
 800d314:	bb30      	cbnz	r0, 800d364 <__swbuf_r+0x90>
 800d316:	68a3      	ldr	r3, [r4, #8]
 800d318:	3b01      	subs	r3, #1
 800d31a:	60a3      	str	r3, [r4, #8]
 800d31c:	6823      	ldr	r3, [r4, #0]
 800d31e:	1c5a      	adds	r2, r3, #1
 800d320:	6022      	str	r2, [r4, #0]
 800d322:	701e      	strb	r6, [r3, #0]
 800d324:	6963      	ldr	r3, [r4, #20]
 800d326:	3001      	adds	r0, #1
 800d328:	4283      	cmp	r3, r0
 800d32a:	d004      	beq.n	800d336 <__swbuf_r+0x62>
 800d32c:	89a3      	ldrh	r3, [r4, #12]
 800d32e:	07db      	lsls	r3, r3, #31
 800d330:	d506      	bpl.n	800d340 <__swbuf_r+0x6c>
 800d332:	2e0a      	cmp	r6, #10
 800d334:	d104      	bne.n	800d340 <__swbuf_r+0x6c>
 800d336:	4621      	mov	r1, r4
 800d338:	4628      	mov	r0, r5
 800d33a:	f000 ff25 	bl	800e188 <_fflush_r>
 800d33e:	b988      	cbnz	r0, 800d364 <__swbuf_r+0x90>
 800d340:	4638      	mov	r0, r7
 800d342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d344:	4b0a      	ldr	r3, [pc, #40]	; (800d370 <__swbuf_r+0x9c>)
 800d346:	429c      	cmp	r4, r3
 800d348:	d101      	bne.n	800d34e <__swbuf_r+0x7a>
 800d34a:	68ac      	ldr	r4, [r5, #8]
 800d34c:	e7cf      	b.n	800d2ee <__swbuf_r+0x1a>
 800d34e:	4b09      	ldr	r3, [pc, #36]	; (800d374 <__swbuf_r+0xa0>)
 800d350:	429c      	cmp	r4, r3
 800d352:	bf08      	it	eq
 800d354:	68ec      	ldreq	r4, [r5, #12]
 800d356:	e7ca      	b.n	800d2ee <__swbuf_r+0x1a>
 800d358:	4621      	mov	r1, r4
 800d35a:	4628      	mov	r0, r5
 800d35c:	f000 f80c 	bl	800d378 <__swsetup_r>
 800d360:	2800      	cmp	r0, #0
 800d362:	d0cb      	beq.n	800d2fc <__swbuf_r+0x28>
 800d364:	f04f 37ff 	mov.w	r7, #4294967295
 800d368:	e7ea      	b.n	800d340 <__swbuf_r+0x6c>
 800d36a:	bf00      	nop
 800d36c:	08010748 	.word	0x08010748
 800d370:	08010768 	.word	0x08010768
 800d374:	08010728 	.word	0x08010728

0800d378 <__swsetup_r>:
 800d378:	4b32      	ldr	r3, [pc, #200]	; (800d444 <__swsetup_r+0xcc>)
 800d37a:	b570      	push	{r4, r5, r6, lr}
 800d37c:	681d      	ldr	r5, [r3, #0]
 800d37e:	4606      	mov	r6, r0
 800d380:	460c      	mov	r4, r1
 800d382:	b125      	cbz	r5, 800d38e <__swsetup_r+0x16>
 800d384:	69ab      	ldr	r3, [r5, #24]
 800d386:	b913      	cbnz	r3, 800d38e <__swsetup_r+0x16>
 800d388:	4628      	mov	r0, r5
 800d38a:	f000 ff91 	bl	800e2b0 <__sinit>
 800d38e:	4b2e      	ldr	r3, [pc, #184]	; (800d448 <__swsetup_r+0xd0>)
 800d390:	429c      	cmp	r4, r3
 800d392:	d10f      	bne.n	800d3b4 <__swsetup_r+0x3c>
 800d394:	686c      	ldr	r4, [r5, #4]
 800d396:	89a3      	ldrh	r3, [r4, #12]
 800d398:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d39c:	0719      	lsls	r1, r3, #28
 800d39e:	d42c      	bmi.n	800d3fa <__swsetup_r+0x82>
 800d3a0:	06dd      	lsls	r5, r3, #27
 800d3a2:	d411      	bmi.n	800d3c8 <__swsetup_r+0x50>
 800d3a4:	2309      	movs	r3, #9
 800d3a6:	6033      	str	r3, [r6, #0]
 800d3a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d3ac:	81a3      	strh	r3, [r4, #12]
 800d3ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d3b2:	e03e      	b.n	800d432 <__swsetup_r+0xba>
 800d3b4:	4b25      	ldr	r3, [pc, #148]	; (800d44c <__swsetup_r+0xd4>)
 800d3b6:	429c      	cmp	r4, r3
 800d3b8:	d101      	bne.n	800d3be <__swsetup_r+0x46>
 800d3ba:	68ac      	ldr	r4, [r5, #8]
 800d3bc:	e7eb      	b.n	800d396 <__swsetup_r+0x1e>
 800d3be:	4b24      	ldr	r3, [pc, #144]	; (800d450 <__swsetup_r+0xd8>)
 800d3c0:	429c      	cmp	r4, r3
 800d3c2:	bf08      	it	eq
 800d3c4:	68ec      	ldreq	r4, [r5, #12]
 800d3c6:	e7e6      	b.n	800d396 <__swsetup_r+0x1e>
 800d3c8:	0758      	lsls	r0, r3, #29
 800d3ca:	d512      	bpl.n	800d3f2 <__swsetup_r+0x7a>
 800d3cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d3ce:	b141      	cbz	r1, 800d3e2 <__swsetup_r+0x6a>
 800d3d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d3d4:	4299      	cmp	r1, r3
 800d3d6:	d002      	beq.n	800d3de <__swsetup_r+0x66>
 800d3d8:	4630      	mov	r0, r6
 800d3da:	f7fe f823 	bl	800b424 <_free_r>
 800d3de:	2300      	movs	r3, #0
 800d3e0:	6363      	str	r3, [r4, #52]	; 0x34
 800d3e2:	89a3      	ldrh	r3, [r4, #12]
 800d3e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d3e8:	81a3      	strh	r3, [r4, #12]
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	6063      	str	r3, [r4, #4]
 800d3ee:	6923      	ldr	r3, [r4, #16]
 800d3f0:	6023      	str	r3, [r4, #0]
 800d3f2:	89a3      	ldrh	r3, [r4, #12]
 800d3f4:	f043 0308 	orr.w	r3, r3, #8
 800d3f8:	81a3      	strh	r3, [r4, #12]
 800d3fa:	6923      	ldr	r3, [r4, #16]
 800d3fc:	b94b      	cbnz	r3, 800d412 <__swsetup_r+0x9a>
 800d3fe:	89a3      	ldrh	r3, [r4, #12]
 800d400:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d408:	d003      	beq.n	800d412 <__swsetup_r+0x9a>
 800d40a:	4621      	mov	r1, r4
 800d40c:	4630      	mov	r0, r6
 800d40e:	f001 fb87 	bl	800eb20 <__smakebuf_r>
 800d412:	89a0      	ldrh	r0, [r4, #12]
 800d414:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d418:	f010 0301 	ands.w	r3, r0, #1
 800d41c:	d00a      	beq.n	800d434 <__swsetup_r+0xbc>
 800d41e:	2300      	movs	r3, #0
 800d420:	60a3      	str	r3, [r4, #8]
 800d422:	6963      	ldr	r3, [r4, #20]
 800d424:	425b      	negs	r3, r3
 800d426:	61a3      	str	r3, [r4, #24]
 800d428:	6923      	ldr	r3, [r4, #16]
 800d42a:	b943      	cbnz	r3, 800d43e <__swsetup_r+0xc6>
 800d42c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d430:	d1ba      	bne.n	800d3a8 <__swsetup_r+0x30>
 800d432:	bd70      	pop	{r4, r5, r6, pc}
 800d434:	0781      	lsls	r1, r0, #30
 800d436:	bf58      	it	pl
 800d438:	6963      	ldrpl	r3, [r4, #20]
 800d43a:	60a3      	str	r3, [r4, #8]
 800d43c:	e7f4      	b.n	800d428 <__swsetup_r+0xb0>
 800d43e:	2000      	movs	r0, #0
 800d440:	e7f7      	b.n	800d432 <__swsetup_r+0xba>
 800d442:	bf00      	nop
 800d444:	240000c0 	.word	0x240000c0
 800d448:	08010748 	.word	0x08010748
 800d44c:	08010768 	.word	0x08010768
 800d450:	08010728 	.word	0x08010728

0800d454 <abort>:
 800d454:	b508      	push	{r3, lr}
 800d456:	2006      	movs	r0, #6
 800d458:	f002 fa3e 	bl	800f8d8 <raise>
 800d45c:	2001      	movs	r0, #1
 800d45e:	f7f4 fa1d 	bl	800189c <_exit>

0800d462 <quorem>:
 800d462:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d466:	6903      	ldr	r3, [r0, #16]
 800d468:	690c      	ldr	r4, [r1, #16]
 800d46a:	42a3      	cmp	r3, r4
 800d46c:	4607      	mov	r7, r0
 800d46e:	f2c0 8081 	blt.w	800d574 <quorem+0x112>
 800d472:	3c01      	subs	r4, #1
 800d474:	f101 0814 	add.w	r8, r1, #20
 800d478:	f100 0514 	add.w	r5, r0, #20
 800d47c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d480:	9301      	str	r3, [sp, #4]
 800d482:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d486:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d48a:	3301      	adds	r3, #1
 800d48c:	429a      	cmp	r2, r3
 800d48e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d492:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d496:	fbb2 f6f3 	udiv	r6, r2, r3
 800d49a:	d331      	bcc.n	800d500 <quorem+0x9e>
 800d49c:	f04f 0e00 	mov.w	lr, #0
 800d4a0:	4640      	mov	r0, r8
 800d4a2:	46ac      	mov	ip, r5
 800d4a4:	46f2      	mov	sl, lr
 800d4a6:	f850 2b04 	ldr.w	r2, [r0], #4
 800d4aa:	b293      	uxth	r3, r2
 800d4ac:	fb06 e303 	mla	r3, r6, r3, lr
 800d4b0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d4b4:	b29b      	uxth	r3, r3
 800d4b6:	ebaa 0303 	sub.w	r3, sl, r3
 800d4ba:	0c12      	lsrs	r2, r2, #16
 800d4bc:	f8dc a000 	ldr.w	sl, [ip]
 800d4c0:	fb06 e202 	mla	r2, r6, r2, lr
 800d4c4:	fa13 f38a 	uxtah	r3, r3, sl
 800d4c8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d4cc:	fa1f fa82 	uxth.w	sl, r2
 800d4d0:	f8dc 2000 	ldr.w	r2, [ip]
 800d4d4:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d4d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d4dc:	b29b      	uxth	r3, r3
 800d4de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d4e2:	4581      	cmp	r9, r0
 800d4e4:	f84c 3b04 	str.w	r3, [ip], #4
 800d4e8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d4ec:	d2db      	bcs.n	800d4a6 <quorem+0x44>
 800d4ee:	f855 300b 	ldr.w	r3, [r5, fp]
 800d4f2:	b92b      	cbnz	r3, 800d500 <quorem+0x9e>
 800d4f4:	9b01      	ldr	r3, [sp, #4]
 800d4f6:	3b04      	subs	r3, #4
 800d4f8:	429d      	cmp	r5, r3
 800d4fa:	461a      	mov	r2, r3
 800d4fc:	d32e      	bcc.n	800d55c <quorem+0xfa>
 800d4fe:	613c      	str	r4, [r7, #16]
 800d500:	4638      	mov	r0, r7
 800d502:	f001 fe33 	bl	800f16c <__mcmp>
 800d506:	2800      	cmp	r0, #0
 800d508:	db24      	blt.n	800d554 <quorem+0xf2>
 800d50a:	3601      	adds	r6, #1
 800d50c:	4628      	mov	r0, r5
 800d50e:	f04f 0c00 	mov.w	ip, #0
 800d512:	f858 2b04 	ldr.w	r2, [r8], #4
 800d516:	f8d0 e000 	ldr.w	lr, [r0]
 800d51a:	b293      	uxth	r3, r2
 800d51c:	ebac 0303 	sub.w	r3, ip, r3
 800d520:	0c12      	lsrs	r2, r2, #16
 800d522:	fa13 f38e 	uxtah	r3, r3, lr
 800d526:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d52a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d52e:	b29b      	uxth	r3, r3
 800d530:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d534:	45c1      	cmp	r9, r8
 800d536:	f840 3b04 	str.w	r3, [r0], #4
 800d53a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d53e:	d2e8      	bcs.n	800d512 <quorem+0xb0>
 800d540:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d544:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d548:	b922      	cbnz	r2, 800d554 <quorem+0xf2>
 800d54a:	3b04      	subs	r3, #4
 800d54c:	429d      	cmp	r5, r3
 800d54e:	461a      	mov	r2, r3
 800d550:	d30a      	bcc.n	800d568 <quorem+0x106>
 800d552:	613c      	str	r4, [r7, #16]
 800d554:	4630      	mov	r0, r6
 800d556:	b003      	add	sp, #12
 800d558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d55c:	6812      	ldr	r2, [r2, #0]
 800d55e:	3b04      	subs	r3, #4
 800d560:	2a00      	cmp	r2, #0
 800d562:	d1cc      	bne.n	800d4fe <quorem+0x9c>
 800d564:	3c01      	subs	r4, #1
 800d566:	e7c7      	b.n	800d4f8 <quorem+0x96>
 800d568:	6812      	ldr	r2, [r2, #0]
 800d56a:	3b04      	subs	r3, #4
 800d56c:	2a00      	cmp	r2, #0
 800d56e:	d1f0      	bne.n	800d552 <quorem+0xf0>
 800d570:	3c01      	subs	r4, #1
 800d572:	e7eb      	b.n	800d54c <quorem+0xea>
 800d574:	2000      	movs	r0, #0
 800d576:	e7ee      	b.n	800d556 <quorem+0xf4>

0800d578 <_dtoa_r>:
 800d578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d57c:	ec59 8b10 	vmov	r8, r9, d0
 800d580:	b095      	sub	sp, #84	; 0x54
 800d582:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d584:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800d586:	9107      	str	r1, [sp, #28]
 800d588:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d58c:	4606      	mov	r6, r0
 800d58e:	9209      	str	r2, [sp, #36]	; 0x24
 800d590:	9310      	str	r3, [sp, #64]	; 0x40
 800d592:	b975      	cbnz	r5, 800d5b2 <_dtoa_r+0x3a>
 800d594:	2010      	movs	r0, #16
 800d596:	f7fd ff05 	bl	800b3a4 <malloc>
 800d59a:	4602      	mov	r2, r0
 800d59c:	6270      	str	r0, [r6, #36]	; 0x24
 800d59e:	b920      	cbnz	r0, 800d5aa <_dtoa_r+0x32>
 800d5a0:	4bab      	ldr	r3, [pc, #684]	; (800d850 <_dtoa_r+0x2d8>)
 800d5a2:	21ea      	movs	r1, #234	; 0xea
 800d5a4:	48ab      	ldr	r0, [pc, #684]	; (800d854 <_dtoa_r+0x2dc>)
 800d5a6:	f7fd fea3 	bl	800b2f0 <__assert_func>
 800d5aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d5ae:	6005      	str	r5, [r0, #0]
 800d5b0:	60c5      	str	r5, [r0, #12]
 800d5b2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d5b4:	6819      	ldr	r1, [r3, #0]
 800d5b6:	b151      	cbz	r1, 800d5ce <_dtoa_r+0x56>
 800d5b8:	685a      	ldr	r2, [r3, #4]
 800d5ba:	604a      	str	r2, [r1, #4]
 800d5bc:	2301      	movs	r3, #1
 800d5be:	4093      	lsls	r3, r2
 800d5c0:	608b      	str	r3, [r1, #8]
 800d5c2:	4630      	mov	r0, r6
 800d5c4:	f001 fb4a 	bl	800ec5c <_Bfree>
 800d5c8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	601a      	str	r2, [r3, #0]
 800d5ce:	f1b9 0300 	subs.w	r3, r9, #0
 800d5d2:	bfbb      	ittet	lt
 800d5d4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d5d8:	9303      	strlt	r3, [sp, #12]
 800d5da:	2300      	movge	r3, #0
 800d5dc:	2201      	movlt	r2, #1
 800d5de:	bfac      	ite	ge
 800d5e0:	6023      	strge	r3, [r4, #0]
 800d5e2:	6022      	strlt	r2, [r4, #0]
 800d5e4:	4b9c      	ldr	r3, [pc, #624]	; (800d858 <_dtoa_r+0x2e0>)
 800d5e6:	9c03      	ldr	r4, [sp, #12]
 800d5e8:	43a3      	bics	r3, r4
 800d5ea:	d11a      	bne.n	800d622 <_dtoa_r+0xaa>
 800d5ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d5ee:	f242 730f 	movw	r3, #9999	; 0x270f
 800d5f2:	6013      	str	r3, [r2, #0]
 800d5f4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d5f8:	ea53 0308 	orrs.w	r3, r3, r8
 800d5fc:	f000 8512 	beq.w	800e024 <_dtoa_r+0xaac>
 800d600:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d602:	b953      	cbnz	r3, 800d61a <_dtoa_r+0xa2>
 800d604:	4b95      	ldr	r3, [pc, #596]	; (800d85c <_dtoa_r+0x2e4>)
 800d606:	e01f      	b.n	800d648 <_dtoa_r+0xd0>
 800d608:	4b95      	ldr	r3, [pc, #596]	; (800d860 <_dtoa_r+0x2e8>)
 800d60a:	9300      	str	r3, [sp, #0]
 800d60c:	3308      	adds	r3, #8
 800d60e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d610:	6013      	str	r3, [r2, #0]
 800d612:	9800      	ldr	r0, [sp, #0]
 800d614:	b015      	add	sp, #84	; 0x54
 800d616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d61a:	4b90      	ldr	r3, [pc, #576]	; (800d85c <_dtoa_r+0x2e4>)
 800d61c:	9300      	str	r3, [sp, #0]
 800d61e:	3303      	adds	r3, #3
 800d620:	e7f5      	b.n	800d60e <_dtoa_r+0x96>
 800d622:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d626:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d62a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d62e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d632:	d10b      	bne.n	800d64c <_dtoa_r+0xd4>
 800d634:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d636:	2301      	movs	r3, #1
 800d638:	6013      	str	r3, [r2, #0]
 800d63a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	f000 84ee 	beq.w	800e01e <_dtoa_r+0xaa6>
 800d642:	4888      	ldr	r0, [pc, #544]	; (800d864 <_dtoa_r+0x2ec>)
 800d644:	6018      	str	r0, [r3, #0]
 800d646:	1e43      	subs	r3, r0, #1
 800d648:	9300      	str	r3, [sp, #0]
 800d64a:	e7e2      	b.n	800d612 <_dtoa_r+0x9a>
 800d64c:	a913      	add	r1, sp, #76	; 0x4c
 800d64e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d652:	aa12      	add	r2, sp, #72	; 0x48
 800d654:	4630      	mov	r0, r6
 800d656:	f001 fea9 	bl	800f3ac <__d2b>
 800d65a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800d65e:	4605      	mov	r5, r0
 800d660:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d662:	2900      	cmp	r1, #0
 800d664:	d047      	beq.n	800d6f6 <_dtoa_r+0x17e>
 800d666:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d668:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d66c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d670:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800d674:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d678:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d67c:	2400      	movs	r4, #0
 800d67e:	ec43 2b16 	vmov	d6, r2, r3
 800d682:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d686:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800d838 <_dtoa_r+0x2c0>
 800d68a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d68e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800d840 <_dtoa_r+0x2c8>
 800d692:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d696:	eeb0 7b46 	vmov.f64	d7, d6
 800d69a:	ee06 1a90 	vmov	s13, r1
 800d69e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800d6a2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800d848 <_dtoa_r+0x2d0>
 800d6a6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d6aa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d6ae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d6b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6b6:	ee16 ba90 	vmov	fp, s13
 800d6ba:	9411      	str	r4, [sp, #68]	; 0x44
 800d6bc:	d508      	bpl.n	800d6d0 <_dtoa_r+0x158>
 800d6be:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d6c2:	eeb4 6b47 	vcmp.f64	d6, d7
 800d6c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6ca:	bf18      	it	ne
 800d6cc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d6d0:	f1bb 0f16 	cmp.w	fp, #22
 800d6d4:	d832      	bhi.n	800d73c <_dtoa_r+0x1c4>
 800d6d6:	4b64      	ldr	r3, [pc, #400]	; (800d868 <_dtoa_r+0x2f0>)
 800d6d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d6dc:	ed93 7b00 	vldr	d7, [r3]
 800d6e0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d6e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d6e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6ec:	d501      	bpl.n	800d6f2 <_dtoa_r+0x17a>
 800d6ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	e023      	b.n	800d73e <_dtoa_r+0x1c6>
 800d6f6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d6f8:	4401      	add	r1, r0
 800d6fa:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800d6fe:	2b20      	cmp	r3, #32
 800d700:	bfc3      	ittte	gt
 800d702:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d706:	fa04 f303 	lslgt.w	r3, r4, r3
 800d70a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800d70e:	f1c3 0320 	rsble	r3, r3, #32
 800d712:	bfc6      	itte	gt
 800d714:	fa28 f804 	lsrgt.w	r8, r8, r4
 800d718:	ea43 0308 	orrgt.w	r3, r3, r8
 800d71c:	fa08 f303 	lslle.w	r3, r8, r3
 800d720:	ee07 3a90 	vmov	s15, r3
 800d724:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d728:	3901      	subs	r1, #1
 800d72a:	ed8d 7b00 	vstr	d7, [sp]
 800d72e:	9c01      	ldr	r4, [sp, #4]
 800d730:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d734:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800d738:	2401      	movs	r4, #1
 800d73a:	e7a0      	b.n	800d67e <_dtoa_r+0x106>
 800d73c:	2301      	movs	r3, #1
 800d73e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d740:	1a43      	subs	r3, r0, r1
 800d742:	1e5a      	subs	r2, r3, #1
 800d744:	bf45      	ittet	mi
 800d746:	f1c3 0301 	rsbmi	r3, r3, #1
 800d74a:	9305      	strmi	r3, [sp, #20]
 800d74c:	2300      	movpl	r3, #0
 800d74e:	2300      	movmi	r3, #0
 800d750:	9206      	str	r2, [sp, #24]
 800d752:	bf54      	ite	pl
 800d754:	9305      	strpl	r3, [sp, #20]
 800d756:	9306      	strmi	r3, [sp, #24]
 800d758:	f1bb 0f00 	cmp.w	fp, #0
 800d75c:	db18      	blt.n	800d790 <_dtoa_r+0x218>
 800d75e:	9b06      	ldr	r3, [sp, #24]
 800d760:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800d764:	445b      	add	r3, fp
 800d766:	9306      	str	r3, [sp, #24]
 800d768:	2300      	movs	r3, #0
 800d76a:	9a07      	ldr	r2, [sp, #28]
 800d76c:	2a09      	cmp	r2, #9
 800d76e:	d849      	bhi.n	800d804 <_dtoa_r+0x28c>
 800d770:	2a05      	cmp	r2, #5
 800d772:	bfc4      	itt	gt
 800d774:	3a04      	subgt	r2, #4
 800d776:	9207      	strgt	r2, [sp, #28]
 800d778:	9a07      	ldr	r2, [sp, #28]
 800d77a:	f1a2 0202 	sub.w	r2, r2, #2
 800d77e:	bfcc      	ite	gt
 800d780:	2400      	movgt	r4, #0
 800d782:	2401      	movle	r4, #1
 800d784:	2a03      	cmp	r2, #3
 800d786:	d848      	bhi.n	800d81a <_dtoa_r+0x2a2>
 800d788:	e8df f002 	tbb	[pc, r2]
 800d78c:	3a2c2e0b 	.word	0x3a2c2e0b
 800d790:	9b05      	ldr	r3, [sp, #20]
 800d792:	2200      	movs	r2, #0
 800d794:	eba3 030b 	sub.w	r3, r3, fp
 800d798:	9305      	str	r3, [sp, #20]
 800d79a:	920e      	str	r2, [sp, #56]	; 0x38
 800d79c:	f1cb 0300 	rsb	r3, fp, #0
 800d7a0:	e7e3      	b.n	800d76a <_dtoa_r+0x1f2>
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	9208      	str	r2, [sp, #32]
 800d7a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7a8:	2a00      	cmp	r2, #0
 800d7aa:	dc39      	bgt.n	800d820 <_dtoa_r+0x2a8>
 800d7ac:	f04f 0a01 	mov.w	sl, #1
 800d7b0:	46d1      	mov	r9, sl
 800d7b2:	4652      	mov	r2, sl
 800d7b4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d7b8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800d7ba:	2100      	movs	r1, #0
 800d7bc:	6079      	str	r1, [r7, #4]
 800d7be:	2004      	movs	r0, #4
 800d7c0:	f100 0c14 	add.w	ip, r0, #20
 800d7c4:	4594      	cmp	ip, r2
 800d7c6:	6879      	ldr	r1, [r7, #4]
 800d7c8:	d92f      	bls.n	800d82a <_dtoa_r+0x2b2>
 800d7ca:	4630      	mov	r0, r6
 800d7cc:	930c      	str	r3, [sp, #48]	; 0x30
 800d7ce:	f001 fa05 	bl	800ebdc <_Balloc>
 800d7d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d7d4:	9000      	str	r0, [sp, #0]
 800d7d6:	4602      	mov	r2, r0
 800d7d8:	2800      	cmp	r0, #0
 800d7da:	d149      	bne.n	800d870 <_dtoa_r+0x2f8>
 800d7dc:	4b23      	ldr	r3, [pc, #140]	; (800d86c <_dtoa_r+0x2f4>)
 800d7de:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d7e2:	e6df      	b.n	800d5a4 <_dtoa_r+0x2c>
 800d7e4:	2201      	movs	r2, #1
 800d7e6:	e7dd      	b.n	800d7a4 <_dtoa_r+0x22c>
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	9208      	str	r2, [sp, #32]
 800d7ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7ee:	eb0b 0a02 	add.w	sl, fp, r2
 800d7f2:	f10a 0901 	add.w	r9, sl, #1
 800d7f6:	464a      	mov	r2, r9
 800d7f8:	2a01      	cmp	r2, #1
 800d7fa:	bfb8      	it	lt
 800d7fc:	2201      	movlt	r2, #1
 800d7fe:	e7db      	b.n	800d7b8 <_dtoa_r+0x240>
 800d800:	2201      	movs	r2, #1
 800d802:	e7f2      	b.n	800d7ea <_dtoa_r+0x272>
 800d804:	2401      	movs	r4, #1
 800d806:	2200      	movs	r2, #0
 800d808:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d80c:	f04f 3aff 	mov.w	sl, #4294967295
 800d810:	2100      	movs	r1, #0
 800d812:	46d1      	mov	r9, sl
 800d814:	2212      	movs	r2, #18
 800d816:	9109      	str	r1, [sp, #36]	; 0x24
 800d818:	e7ce      	b.n	800d7b8 <_dtoa_r+0x240>
 800d81a:	2201      	movs	r2, #1
 800d81c:	9208      	str	r2, [sp, #32]
 800d81e:	e7f5      	b.n	800d80c <_dtoa_r+0x294>
 800d820:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800d824:	46d1      	mov	r9, sl
 800d826:	4652      	mov	r2, sl
 800d828:	e7c6      	b.n	800d7b8 <_dtoa_r+0x240>
 800d82a:	3101      	adds	r1, #1
 800d82c:	6079      	str	r1, [r7, #4]
 800d82e:	0040      	lsls	r0, r0, #1
 800d830:	e7c6      	b.n	800d7c0 <_dtoa_r+0x248>
 800d832:	bf00      	nop
 800d834:	f3af 8000 	nop.w
 800d838:	636f4361 	.word	0x636f4361
 800d83c:	3fd287a7 	.word	0x3fd287a7
 800d840:	8b60c8b3 	.word	0x8b60c8b3
 800d844:	3fc68a28 	.word	0x3fc68a28
 800d848:	509f79fb 	.word	0x509f79fb
 800d84c:	3fd34413 	.word	0x3fd34413
 800d850:	0801069e 	.word	0x0801069e
 800d854:	080106b5 	.word	0x080106b5
 800d858:	7ff00000 	.word	0x7ff00000
 800d85c:	0801069a 	.word	0x0801069a
 800d860:	08010691 	.word	0x08010691
 800d864:	08010512 	.word	0x08010512
 800d868:	08010890 	.word	0x08010890
 800d86c:	08010714 	.word	0x08010714
 800d870:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800d872:	9900      	ldr	r1, [sp, #0]
 800d874:	6011      	str	r1, [r2, #0]
 800d876:	f1b9 0f0e 	cmp.w	r9, #14
 800d87a:	d872      	bhi.n	800d962 <_dtoa_r+0x3ea>
 800d87c:	2c00      	cmp	r4, #0
 800d87e:	d070      	beq.n	800d962 <_dtoa_r+0x3ea>
 800d880:	f1bb 0f00 	cmp.w	fp, #0
 800d884:	f340 80a6 	ble.w	800d9d4 <_dtoa_r+0x45c>
 800d888:	49ca      	ldr	r1, [pc, #808]	; (800dbb4 <_dtoa_r+0x63c>)
 800d88a:	f00b 020f 	and.w	r2, fp, #15
 800d88e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800d892:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d896:	ed92 7b00 	vldr	d7, [r2]
 800d89a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800d89e:	f000 808d 	beq.w	800d9bc <_dtoa_r+0x444>
 800d8a2:	4ac5      	ldr	r2, [pc, #788]	; (800dbb8 <_dtoa_r+0x640>)
 800d8a4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800d8a8:	ed92 6b08 	vldr	d6, [r2, #32]
 800d8ac:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800d8b0:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d8b4:	f001 010f 	and.w	r1, r1, #15
 800d8b8:	2203      	movs	r2, #3
 800d8ba:	48bf      	ldr	r0, [pc, #764]	; (800dbb8 <_dtoa_r+0x640>)
 800d8bc:	2900      	cmp	r1, #0
 800d8be:	d17f      	bne.n	800d9c0 <_dtoa_r+0x448>
 800d8c0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d8c4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d8c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d8cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d8ce:	2900      	cmp	r1, #0
 800d8d0:	f000 80b2 	beq.w	800da38 <_dtoa_r+0x4c0>
 800d8d4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d8d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d8dc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d8e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8e4:	f140 80a8 	bpl.w	800da38 <_dtoa_r+0x4c0>
 800d8e8:	f1b9 0f00 	cmp.w	r9, #0
 800d8ec:	f000 80a4 	beq.w	800da38 <_dtoa_r+0x4c0>
 800d8f0:	f1ba 0f00 	cmp.w	sl, #0
 800d8f4:	dd31      	ble.n	800d95a <_dtoa_r+0x3e2>
 800d8f6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d8fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d8fe:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d902:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d906:	3201      	adds	r2, #1
 800d908:	4650      	mov	r0, sl
 800d90a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d90e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d912:	ee07 2a90 	vmov	s15, r2
 800d916:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d91a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d91e:	ed8d 5b02 	vstr	d5, [sp, #8]
 800d922:	9c03      	ldr	r4, [sp, #12]
 800d924:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800d928:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800d92c:	2800      	cmp	r0, #0
 800d92e:	f040 8086 	bne.w	800da3e <_dtoa_r+0x4c6>
 800d932:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d936:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d93a:	ec42 1b17 	vmov	d7, r1, r2
 800d93e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d946:	f300 8272 	bgt.w	800de2e <_dtoa_r+0x8b6>
 800d94a:	eeb1 7b47 	vneg.f64	d7, d7
 800d94e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d956:	f100 8267 	bmi.w	800de28 <_dtoa_r+0x8b0>
 800d95a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800d95e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d962:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d964:	2a00      	cmp	r2, #0
 800d966:	f2c0 8129 	blt.w	800dbbc <_dtoa_r+0x644>
 800d96a:	f1bb 0f0e 	cmp.w	fp, #14
 800d96e:	f300 8125 	bgt.w	800dbbc <_dtoa_r+0x644>
 800d972:	4b90      	ldr	r3, [pc, #576]	; (800dbb4 <_dtoa_r+0x63c>)
 800d974:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d978:	ed93 6b00 	vldr	d6, [r3]
 800d97c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d97e:	2b00      	cmp	r3, #0
 800d980:	f280 80c3 	bge.w	800db0a <_dtoa_r+0x592>
 800d984:	f1b9 0f00 	cmp.w	r9, #0
 800d988:	f300 80bf 	bgt.w	800db0a <_dtoa_r+0x592>
 800d98c:	f040 824c 	bne.w	800de28 <_dtoa_r+0x8b0>
 800d990:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d994:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d998:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d99c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d9a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9a4:	464c      	mov	r4, r9
 800d9a6:	464f      	mov	r7, r9
 800d9a8:	f280 8222 	bge.w	800ddf0 <_dtoa_r+0x878>
 800d9ac:	f8dd 8000 	ldr.w	r8, [sp]
 800d9b0:	2331      	movs	r3, #49	; 0x31
 800d9b2:	f808 3b01 	strb.w	r3, [r8], #1
 800d9b6:	f10b 0b01 	add.w	fp, fp, #1
 800d9ba:	e21e      	b.n	800ddfa <_dtoa_r+0x882>
 800d9bc:	2202      	movs	r2, #2
 800d9be:	e77c      	b.n	800d8ba <_dtoa_r+0x342>
 800d9c0:	07cc      	lsls	r4, r1, #31
 800d9c2:	d504      	bpl.n	800d9ce <_dtoa_r+0x456>
 800d9c4:	ed90 6b00 	vldr	d6, [r0]
 800d9c8:	3201      	adds	r2, #1
 800d9ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d9ce:	1049      	asrs	r1, r1, #1
 800d9d0:	3008      	adds	r0, #8
 800d9d2:	e773      	b.n	800d8bc <_dtoa_r+0x344>
 800d9d4:	d02e      	beq.n	800da34 <_dtoa_r+0x4bc>
 800d9d6:	f1cb 0100 	rsb	r1, fp, #0
 800d9da:	4a76      	ldr	r2, [pc, #472]	; (800dbb4 <_dtoa_r+0x63c>)
 800d9dc:	f001 000f 	and.w	r0, r1, #15
 800d9e0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d9e4:	ed92 7b00 	vldr	d7, [r2]
 800d9e8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d9ec:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d9f0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d9f4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800d9f8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800d9fc:	486e      	ldr	r0, [pc, #440]	; (800dbb8 <_dtoa_r+0x640>)
 800d9fe:	1109      	asrs	r1, r1, #4
 800da00:	2400      	movs	r4, #0
 800da02:	2202      	movs	r2, #2
 800da04:	b939      	cbnz	r1, 800da16 <_dtoa_r+0x49e>
 800da06:	2c00      	cmp	r4, #0
 800da08:	f43f af60 	beq.w	800d8cc <_dtoa_r+0x354>
 800da0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800da10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da14:	e75a      	b.n	800d8cc <_dtoa_r+0x354>
 800da16:	07cf      	lsls	r7, r1, #31
 800da18:	d509      	bpl.n	800da2e <_dtoa_r+0x4b6>
 800da1a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800da1e:	ed90 7b00 	vldr	d7, [r0]
 800da22:	ee26 7b07 	vmul.f64	d7, d6, d7
 800da26:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800da2a:	3201      	adds	r2, #1
 800da2c:	2401      	movs	r4, #1
 800da2e:	1049      	asrs	r1, r1, #1
 800da30:	3008      	adds	r0, #8
 800da32:	e7e7      	b.n	800da04 <_dtoa_r+0x48c>
 800da34:	2202      	movs	r2, #2
 800da36:	e749      	b.n	800d8cc <_dtoa_r+0x354>
 800da38:	465f      	mov	r7, fp
 800da3a:	4648      	mov	r0, r9
 800da3c:	e765      	b.n	800d90a <_dtoa_r+0x392>
 800da3e:	ec42 1b17 	vmov	d7, r1, r2
 800da42:	4a5c      	ldr	r2, [pc, #368]	; (800dbb4 <_dtoa_r+0x63c>)
 800da44:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800da48:	ed12 4b02 	vldr	d4, [r2, #-8]
 800da4c:	9a00      	ldr	r2, [sp, #0]
 800da4e:	1814      	adds	r4, r2, r0
 800da50:	9a08      	ldr	r2, [sp, #32]
 800da52:	b352      	cbz	r2, 800daaa <_dtoa_r+0x532>
 800da54:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800da58:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800da5c:	f8dd 8000 	ldr.w	r8, [sp]
 800da60:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800da64:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800da68:	ee35 7b47 	vsub.f64	d7, d5, d7
 800da6c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800da70:	ee14 2a90 	vmov	r2, s9
 800da74:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800da78:	3230      	adds	r2, #48	; 0x30
 800da7a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800da7e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800da82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da86:	f808 2b01 	strb.w	r2, [r8], #1
 800da8a:	d439      	bmi.n	800db00 <_dtoa_r+0x588>
 800da8c:	ee32 5b46 	vsub.f64	d5, d2, d6
 800da90:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800da94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da98:	d472      	bmi.n	800db80 <_dtoa_r+0x608>
 800da9a:	45a0      	cmp	r8, r4
 800da9c:	f43f af5d 	beq.w	800d95a <_dtoa_r+0x3e2>
 800daa0:	ee27 7b03 	vmul.f64	d7, d7, d3
 800daa4:	ee26 6b03 	vmul.f64	d6, d6, d3
 800daa8:	e7e0      	b.n	800da6c <_dtoa_r+0x4f4>
 800daaa:	f8dd 8000 	ldr.w	r8, [sp]
 800daae:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dab2:	4621      	mov	r1, r4
 800dab4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800dab8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800dabc:	ee14 2a90 	vmov	r2, s9
 800dac0:	3230      	adds	r2, #48	; 0x30
 800dac2:	f808 2b01 	strb.w	r2, [r8], #1
 800dac6:	45a0      	cmp	r8, r4
 800dac8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800dacc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800dad0:	d118      	bne.n	800db04 <_dtoa_r+0x58c>
 800dad2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800dad6:	ee37 4b05 	vadd.f64	d4, d7, d5
 800dada:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800dade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dae2:	dc4d      	bgt.n	800db80 <_dtoa_r+0x608>
 800dae4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800dae8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800daec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daf0:	f57f af33 	bpl.w	800d95a <_dtoa_r+0x3e2>
 800daf4:	4688      	mov	r8, r1
 800daf6:	3901      	subs	r1, #1
 800daf8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800dafc:	2b30      	cmp	r3, #48	; 0x30
 800dafe:	d0f9      	beq.n	800daf4 <_dtoa_r+0x57c>
 800db00:	46bb      	mov	fp, r7
 800db02:	e02a      	b.n	800db5a <_dtoa_r+0x5e2>
 800db04:	ee26 6b03 	vmul.f64	d6, d6, d3
 800db08:	e7d6      	b.n	800dab8 <_dtoa_r+0x540>
 800db0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800db0e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800db12:	f8dd 8000 	ldr.w	r8, [sp]
 800db16:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800db1a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800db1e:	ee15 3a10 	vmov	r3, s10
 800db22:	3330      	adds	r3, #48	; 0x30
 800db24:	f808 3b01 	strb.w	r3, [r8], #1
 800db28:	9b00      	ldr	r3, [sp, #0]
 800db2a:	eba8 0303 	sub.w	r3, r8, r3
 800db2e:	4599      	cmp	r9, r3
 800db30:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800db34:	eea3 7b46 	vfms.f64	d7, d3, d6
 800db38:	d133      	bne.n	800dba2 <_dtoa_r+0x62a>
 800db3a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800db3e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800db42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db46:	dc1a      	bgt.n	800db7e <_dtoa_r+0x606>
 800db48:	eeb4 7b46 	vcmp.f64	d7, d6
 800db4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db50:	d103      	bne.n	800db5a <_dtoa_r+0x5e2>
 800db52:	ee15 3a10 	vmov	r3, s10
 800db56:	07d9      	lsls	r1, r3, #31
 800db58:	d411      	bmi.n	800db7e <_dtoa_r+0x606>
 800db5a:	4629      	mov	r1, r5
 800db5c:	4630      	mov	r0, r6
 800db5e:	f001 f87d 	bl	800ec5c <_Bfree>
 800db62:	2300      	movs	r3, #0
 800db64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800db66:	f888 3000 	strb.w	r3, [r8]
 800db6a:	f10b 0301 	add.w	r3, fp, #1
 800db6e:	6013      	str	r3, [r2, #0]
 800db70:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800db72:	2b00      	cmp	r3, #0
 800db74:	f43f ad4d 	beq.w	800d612 <_dtoa_r+0x9a>
 800db78:	f8c3 8000 	str.w	r8, [r3]
 800db7c:	e549      	b.n	800d612 <_dtoa_r+0x9a>
 800db7e:	465f      	mov	r7, fp
 800db80:	4643      	mov	r3, r8
 800db82:	4698      	mov	r8, r3
 800db84:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db88:	2a39      	cmp	r2, #57	; 0x39
 800db8a:	d106      	bne.n	800db9a <_dtoa_r+0x622>
 800db8c:	9a00      	ldr	r2, [sp, #0]
 800db8e:	429a      	cmp	r2, r3
 800db90:	d1f7      	bne.n	800db82 <_dtoa_r+0x60a>
 800db92:	9900      	ldr	r1, [sp, #0]
 800db94:	2230      	movs	r2, #48	; 0x30
 800db96:	3701      	adds	r7, #1
 800db98:	700a      	strb	r2, [r1, #0]
 800db9a:	781a      	ldrb	r2, [r3, #0]
 800db9c:	3201      	adds	r2, #1
 800db9e:	701a      	strb	r2, [r3, #0]
 800dba0:	e7ae      	b.n	800db00 <_dtoa_r+0x588>
 800dba2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dba6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dbaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbae:	d1b2      	bne.n	800db16 <_dtoa_r+0x59e>
 800dbb0:	e7d3      	b.n	800db5a <_dtoa_r+0x5e2>
 800dbb2:	bf00      	nop
 800dbb4:	08010890 	.word	0x08010890
 800dbb8:	08010868 	.word	0x08010868
 800dbbc:	9908      	ldr	r1, [sp, #32]
 800dbbe:	2900      	cmp	r1, #0
 800dbc0:	f000 80d1 	beq.w	800dd66 <_dtoa_r+0x7ee>
 800dbc4:	9907      	ldr	r1, [sp, #28]
 800dbc6:	2901      	cmp	r1, #1
 800dbc8:	f300 80b4 	bgt.w	800dd34 <_dtoa_r+0x7bc>
 800dbcc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800dbce:	2900      	cmp	r1, #0
 800dbd0:	f000 80ac 	beq.w	800dd2c <_dtoa_r+0x7b4>
 800dbd4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800dbd8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800dbdc:	461c      	mov	r4, r3
 800dbde:	930a      	str	r3, [sp, #40]	; 0x28
 800dbe0:	9b05      	ldr	r3, [sp, #20]
 800dbe2:	4413      	add	r3, r2
 800dbe4:	9305      	str	r3, [sp, #20]
 800dbe6:	9b06      	ldr	r3, [sp, #24]
 800dbe8:	2101      	movs	r1, #1
 800dbea:	4413      	add	r3, r2
 800dbec:	4630      	mov	r0, r6
 800dbee:	9306      	str	r3, [sp, #24]
 800dbf0:	f001 f93a 	bl	800ee68 <__i2b>
 800dbf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbf6:	4607      	mov	r7, r0
 800dbf8:	f1b8 0f00 	cmp.w	r8, #0
 800dbfc:	dd0d      	ble.n	800dc1a <_dtoa_r+0x6a2>
 800dbfe:	9a06      	ldr	r2, [sp, #24]
 800dc00:	2a00      	cmp	r2, #0
 800dc02:	dd0a      	ble.n	800dc1a <_dtoa_r+0x6a2>
 800dc04:	4542      	cmp	r2, r8
 800dc06:	9905      	ldr	r1, [sp, #20]
 800dc08:	bfa8      	it	ge
 800dc0a:	4642      	movge	r2, r8
 800dc0c:	1a89      	subs	r1, r1, r2
 800dc0e:	9105      	str	r1, [sp, #20]
 800dc10:	9906      	ldr	r1, [sp, #24]
 800dc12:	eba8 0802 	sub.w	r8, r8, r2
 800dc16:	1a8a      	subs	r2, r1, r2
 800dc18:	9206      	str	r2, [sp, #24]
 800dc1a:	b303      	cbz	r3, 800dc5e <_dtoa_r+0x6e6>
 800dc1c:	9a08      	ldr	r2, [sp, #32]
 800dc1e:	2a00      	cmp	r2, #0
 800dc20:	f000 80a6 	beq.w	800dd70 <_dtoa_r+0x7f8>
 800dc24:	2c00      	cmp	r4, #0
 800dc26:	dd13      	ble.n	800dc50 <_dtoa_r+0x6d8>
 800dc28:	4639      	mov	r1, r7
 800dc2a:	4622      	mov	r2, r4
 800dc2c:	4630      	mov	r0, r6
 800dc2e:	930c      	str	r3, [sp, #48]	; 0x30
 800dc30:	f001 f9d6 	bl	800efe0 <__pow5mult>
 800dc34:	462a      	mov	r2, r5
 800dc36:	4601      	mov	r1, r0
 800dc38:	4607      	mov	r7, r0
 800dc3a:	4630      	mov	r0, r6
 800dc3c:	f001 f92a 	bl	800ee94 <__multiply>
 800dc40:	4629      	mov	r1, r5
 800dc42:	900a      	str	r0, [sp, #40]	; 0x28
 800dc44:	4630      	mov	r0, r6
 800dc46:	f001 f809 	bl	800ec5c <_Bfree>
 800dc4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc4e:	4615      	mov	r5, r2
 800dc50:	1b1a      	subs	r2, r3, r4
 800dc52:	d004      	beq.n	800dc5e <_dtoa_r+0x6e6>
 800dc54:	4629      	mov	r1, r5
 800dc56:	4630      	mov	r0, r6
 800dc58:	f001 f9c2 	bl	800efe0 <__pow5mult>
 800dc5c:	4605      	mov	r5, r0
 800dc5e:	2101      	movs	r1, #1
 800dc60:	4630      	mov	r0, r6
 800dc62:	f001 f901 	bl	800ee68 <__i2b>
 800dc66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	4604      	mov	r4, r0
 800dc6c:	f340 8082 	ble.w	800dd74 <_dtoa_r+0x7fc>
 800dc70:	461a      	mov	r2, r3
 800dc72:	4601      	mov	r1, r0
 800dc74:	4630      	mov	r0, r6
 800dc76:	f001 f9b3 	bl	800efe0 <__pow5mult>
 800dc7a:	9b07      	ldr	r3, [sp, #28]
 800dc7c:	2b01      	cmp	r3, #1
 800dc7e:	4604      	mov	r4, r0
 800dc80:	dd7b      	ble.n	800dd7a <_dtoa_r+0x802>
 800dc82:	2300      	movs	r3, #0
 800dc84:	930a      	str	r3, [sp, #40]	; 0x28
 800dc86:	6922      	ldr	r2, [r4, #16]
 800dc88:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800dc8c:	6910      	ldr	r0, [r2, #16]
 800dc8e:	f001 f89b 	bl	800edc8 <__hi0bits>
 800dc92:	f1c0 0020 	rsb	r0, r0, #32
 800dc96:	9b06      	ldr	r3, [sp, #24]
 800dc98:	4418      	add	r0, r3
 800dc9a:	f010 001f 	ands.w	r0, r0, #31
 800dc9e:	f000 808d 	beq.w	800ddbc <_dtoa_r+0x844>
 800dca2:	f1c0 0220 	rsb	r2, r0, #32
 800dca6:	2a04      	cmp	r2, #4
 800dca8:	f340 8086 	ble.w	800ddb8 <_dtoa_r+0x840>
 800dcac:	f1c0 001c 	rsb	r0, r0, #28
 800dcb0:	9b05      	ldr	r3, [sp, #20]
 800dcb2:	4403      	add	r3, r0
 800dcb4:	9305      	str	r3, [sp, #20]
 800dcb6:	9b06      	ldr	r3, [sp, #24]
 800dcb8:	4403      	add	r3, r0
 800dcba:	4480      	add	r8, r0
 800dcbc:	9306      	str	r3, [sp, #24]
 800dcbe:	9b05      	ldr	r3, [sp, #20]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	dd05      	ble.n	800dcd0 <_dtoa_r+0x758>
 800dcc4:	4629      	mov	r1, r5
 800dcc6:	461a      	mov	r2, r3
 800dcc8:	4630      	mov	r0, r6
 800dcca:	f001 f9e3 	bl	800f094 <__lshift>
 800dcce:	4605      	mov	r5, r0
 800dcd0:	9b06      	ldr	r3, [sp, #24]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	dd05      	ble.n	800dce2 <_dtoa_r+0x76a>
 800dcd6:	4621      	mov	r1, r4
 800dcd8:	461a      	mov	r2, r3
 800dcda:	4630      	mov	r0, r6
 800dcdc:	f001 f9da 	bl	800f094 <__lshift>
 800dce0:	4604      	mov	r4, r0
 800dce2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d06b      	beq.n	800ddc0 <_dtoa_r+0x848>
 800dce8:	4621      	mov	r1, r4
 800dcea:	4628      	mov	r0, r5
 800dcec:	f001 fa3e 	bl	800f16c <__mcmp>
 800dcf0:	2800      	cmp	r0, #0
 800dcf2:	da65      	bge.n	800ddc0 <_dtoa_r+0x848>
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	4629      	mov	r1, r5
 800dcf8:	220a      	movs	r2, #10
 800dcfa:	4630      	mov	r0, r6
 800dcfc:	f000 ffd0 	bl	800eca0 <__multadd>
 800dd00:	9b08      	ldr	r3, [sp, #32]
 800dd02:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dd06:	4605      	mov	r5, r0
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	f000 8192 	beq.w	800e032 <_dtoa_r+0xaba>
 800dd0e:	4639      	mov	r1, r7
 800dd10:	2300      	movs	r3, #0
 800dd12:	220a      	movs	r2, #10
 800dd14:	4630      	mov	r0, r6
 800dd16:	f000 ffc3 	bl	800eca0 <__multadd>
 800dd1a:	f1ba 0f00 	cmp.w	sl, #0
 800dd1e:	4607      	mov	r7, r0
 800dd20:	f300 808e 	bgt.w	800de40 <_dtoa_r+0x8c8>
 800dd24:	9b07      	ldr	r3, [sp, #28]
 800dd26:	2b02      	cmp	r3, #2
 800dd28:	dc51      	bgt.n	800ddce <_dtoa_r+0x856>
 800dd2a:	e089      	b.n	800de40 <_dtoa_r+0x8c8>
 800dd2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dd2e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800dd32:	e751      	b.n	800dbd8 <_dtoa_r+0x660>
 800dd34:	f109 34ff 	add.w	r4, r9, #4294967295
 800dd38:	42a3      	cmp	r3, r4
 800dd3a:	bfbf      	itttt	lt
 800dd3c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800dd3e:	1ae3      	sublt	r3, r4, r3
 800dd40:	18d2      	addlt	r2, r2, r3
 800dd42:	4613      	movlt	r3, r2
 800dd44:	bfb7      	itett	lt
 800dd46:	930e      	strlt	r3, [sp, #56]	; 0x38
 800dd48:	1b1c      	subge	r4, r3, r4
 800dd4a:	4623      	movlt	r3, r4
 800dd4c:	2400      	movlt	r4, #0
 800dd4e:	f1b9 0f00 	cmp.w	r9, #0
 800dd52:	bfb5      	itete	lt
 800dd54:	9a05      	ldrlt	r2, [sp, #20]
 800dd56:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800dd5a:	eba2 0809 	sublt.w	r8, r2, r9
 800dd5e:	464a      	movge	r2, r9
 800dd60:	bfb8      	it	lt
 800dd62:	2200      	movlt	r2, #0
 800dd64:	e73b      	b.n	800dbde <_dtoa_r+0x666>
 800dd66:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800dd6a:	9f08      	ldr	r7, [sp, #32]
 800dd6c:	461c      	mov	r4, r3
 800dd6e:	e743      	b.n	800dbf8 <_dtoa_r+0x680>
 800dd70:	461a      	mov	r2, r3
 800dd72:	e76f      	b.n	800dc54 <_dtoa_r+0x6dc>
 800dd74:	9b07      	ldr	r3, [sp, #28]
 800dd76:	2b01      	cmp	r3, #1
 800dd78:	dc18      	bgt.n	800ddac <_dtoa_r+0x834>
 800dd7a:	9b02      	ldr	r3, [sp, #8]
 800dd7c:	b9b3      	cbnz	r3, 800ddac <_dtoa_r+0x834>
 800dd7e:	9b03      	ldr	r3, [sp, #12]
 800dd80:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800dd84:	b9a2      	cbnz	r2, 800ddb0 <_dtoa_r+0x838>
 800dd86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800dd8a:	0d12      	lsrs	r2, r2, #20
 800dd8c:	0512      	lsls	r2, r2, #20
 800dd8e:	b18a      	cbz	r2, 800ddb4 <_dtoa_r+0x83c>
 800dd90:	9b05      	ldr	r3, [sp, #20]
 800dd92:	3301      	adds	r3, #1
 800dd94:	9305      	str	r3, [sp, #20]
 800dd96:	9b06      	ldr	r3, [sp, #24]
 800dd98:	3301      	adds	r3, #1
 800dd9a:	9306      	str	r3, [sp, #24]
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	930a      	str	r3, [sp, #40]	; 0x28
 800dda0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	f47f af6f 	bne.w	800dc86 <_dtoa_r+0x70e>
 800dda8:	2001      	movs	r0, #1
 800ddaa:	e774      	b.n	800dc96 <_dtoa_r+0x71e>
 800ddac:	2300      	movs	r3, #0
 800ddae:	e7f6      	b.n	800dd9e <_dtoa_r+0x826>
 800ddb0:	9b02      	ldr	r3, [sp, #8]
 800ddb2:	e7f4      	b.n	800dd9e <_dtoa_r+0x826>
 800ddb4:	920a      	str	r2, [sp, #40]	; 0x28
 800ddb6:	e7f3      	b.n	800dda0 <_dtoa_r+0x828>
 800ddb8:	d081      	beq.n	800dcbe <_dtoa_r+0x746>
 800ddba:	4610      	mov	r0, r2
 800ddbc:	301c      	adds	r0, #28
 800ddbe:	e777      	b.n	800dcb0 <_dtoa_r+0x738>
 800ddc0:	f1b9 0f00 	cmp.w	r9, #0
 800ddc4:	dc37      	bgt.n	800de36 <_dtoa_r+0x8be>
 800ddc6:	9b07      	ldr	r3, [sp, #28]
 800ddc8:	2b02      	cmp	r3, #2
 800ddca:	dd34      	ble.n	800de36 <_dtoa_r+0x8be>
 800ddcc:	46ca      	mov	sl, r9
 800ddce:	f1ba 0f00 	cmp.w	sl, #0
 800ddd2:	d10d      	bne.n	800ddf0 <_dtoa_r+0x878>
 800ddd4:	4621      	mov	r1, r4
 800ddd6:	4653      	mov	r3, sl
 800ddd8:	2205      	movs	r2, #5
 800ddda:	4630      	mov	r0, r6
 800dddc:	f000 ff60 	bl	800eca0 <__multadd>
 800dde0:	4601      	mov	r1, r0
 800dde2:	4604      	mov	r4, r0
 800dde4:	4628      	mov	r0, r5
 800dde6:	f001 f9c1 	bl	800f16c <__mcmp>
 800ddea:	2800      	cmp	r0, #0
 800ddec:	f73f adde 	bgt.w	800d9ac <_dtoa_r+0x434>
 800ddf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddf2:	f8dd 8000 	ldr.w	r8, [sp]
 800ddf6:	ea6f 0b03 	mvn.w	fp, r3
 800ddfa:	f04f 0900 	mov.w	r9, #0
 800ddfe:	4621      	mov	r1, r4
 800de00:	4630      	mov	r0, r6
 800de02:	f000 ff2b 	bl	800ec5c <_Bfree>
 800de06:	2f00      	cmp	r7, #0
 800de08:	f43f aea7 	beq.w	800db5a <_dtoa_r+0x5e2>
 800de0c:	f1b9 0f00 	cmp.w	r9, #0
 800de10:	d005      	beq.n	800de1e <_dtoa_r+0x8a6>
 800de12:	45b9      	cmp	r9, r7
 800de14:	d003      	beq.n	800de1e <_dtoa_r+0x8a6>
 800de16:	4649      	mov	r1, r9
 800de18:	4630      	mov	r0, r6
 800de1a:	f000 ff1f 	bl	800ec5c <_Bfree>
 800de1e:	4639      	mov	r1, r7
 800de20:	4630      	mov	r0, r6
 800de22:	f000 ff1b 	bl	800ec5c <_Bfree>
 800de26:	e698      	b.n	800db5a <_dtoa_r+0x5e2>
 800de28:	2400      	movs	r4, #0
 800de2a:	4627      	mov	r7, r4
 800de2c:	e7e0      	b.n	800ddf0 <_dtoa_r+0x878>
 800de2e:	46bb      	mov	fp, r7
 800de30:	4604      	mov	r4, r0
 800de32:	4607      	mov	r7, r0
 800de34:	e5ba      	b.n	800d9ac <_dtoa_r+0x434>
 800de36:	9b08      	ldr	r3, [sp, #32]
 800de38:	46ca      	mov	sl, r9
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	f000 8100 	beq.w	800e040 <_dtoa_r+0xac8>
 800de40:	f1b8 0f00 	cmp.w	r8, #0
 800de44:	dd05      	ble.n	800de52 <_dtoa_r+0x8da>
 800de46:	4639      	mov	r1, r7
 800de48:	4642      	mov	r2, r8
 800de4a:	4630      	mov	r0, r6
 800de4c:	f001 f922 	bl	800f094 <__lshift>
 800de50:	4607      	mov	r7, r0
 800de52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de54:	2b00      	cmp	r3, #0
 800de56:	d05d      	beq.n	800df14 <_dtoa_r+0x99c>
 800de58:	6879      	ldr	r1, [r7, #4]
 800de5a:	4630      	mov	r0, r6
 800de5c:	f000 febe 	bl	800ebdc <_Balloc>
 800de60:	4680      	mov	r8, r0
 800de62:	b928      	cbnz	r0, 800de70 <_dtoa_r+0x8f8>
 800de64:	4b82      	ldr	r3, [pc, #520]	; (800e070 <_dtoa_r+0xaf8>)
 800de66:	4602      	mov	r2, r0
 800de68:	f240 21ea 	movw	r1, #746	; 0x2ea
 800de6c:	f7ff bb9a 	b.w	800d5a4 <_dtoa_r+0x2c>
 800de70:	693a      	ldr	r2, [r7, #16]
 800de72:	3202      	adds	r2, #2
 800de74:	0092      	lsls	r2, r2, #2
 800de76:	f107 010c 	add.w	r1, r7, #12
 800de7a:	300c      	adds	r0, #12
 800de7c:	f7fd faa2 	bl	800b3c4 <memcpy>
 800de80:	2201      	movs	r2, #1
 800de82:	4641      	mov	r1, r8
 800de84:	4630      	mov	r0, r6
 800de86:	f001 f905 	bl	800f094 <__lshift>
 800de8a:	9b00      	ldr	r3, [sp, #0]
 800de8c:	3301      	adds	r3, #1
 800de8e:	9305      	str	r3, [sp, #20]
 800de90:	9b00      	ldr	r3, [sp, #0]
 800de92:	4453      	add	r3, sl
 800de94:	9309      	str	r3, [sp, #36]	; 0x24
 800de96:	9b02      	ldr	r3, [sp, #8]
 800de98:	f003 0301 	and.w	r3, r3, #1
 800de9c:	46b9      	mov	r9, r7
 800de9e:	9308      	str	r3, [sp, #32]
 800dea0:	4607      	mov	r7, r0
 800dea2:	9b05      	ldr	r3, [sp, #20]
 800dea4:	4621      	mov	r1, r4
 800dea6:	3b01      	subs	r3, #1
 800dea8:	4628      	mov	r0, r5
 800deaa:	9302      	str	r3, [sp, #8]
 800deac:	f7ff fad9 	bl	800d462 <quorem>
 800deb0:	4603      	mov	r3, r0
 800deb2:	3330      	adds	r3, #48	; 0x30
 800deb4:	9006      	str	r0, [sp, #24]
 800deb6:	4649      	mov	r1, r9
 800deb8:	4628      	mov	r0, r5
 800deba:	930a      	str	r3, [sp, #40]	; 0x28
 800debc:	f001 f956 	bl	800f16c <__mcmp>
 800dec0:	463a      	mov	r2, r7
 800dec2:	4682      	mov	sl, r0
 800dec4:	4621      	mov	r1, r4
 800dec6:	4630      	mov	r0, r6
 800dec8:	f001 f96c 	bl	800f1a4 <__mdiff>
 800decc:	68c2      	ldr	r2, [r0, #12]
 800dece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ded0:	4680      	mov	r8, r0
 800ded2:	bb0a      	cbnz	r2, 800df18 <_dtoa_r+0x9a0>
 800ded4:	4601      	mov	r1, r0
 800ded6:	4628      	mov	r0, r5
 800ded8:	f001 f948 	bl	800f16c <__mcmp>
 800dedc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dede:	4602      	mov	r2, r0
 800dee0:	4641      	mov	r1, r8
 800dee2:	4630      	mov	r0, r6
 800dee4:	920e      	str	r2, [sp, #56]	; 0x38
 800dee6:	930a      	str	r3, [sp, #40]	; 0x28
 800dee8:	f000 feb8 	bl	800ec5c <_Bfree>
 800deec:	9b07      	ldr	r3, [sp, #28]
 800deee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800def0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800def4:	ea43 0102 	orr.w	r1, r3, r2
 800def8:	9b08      	ldr	r3, [sp, #32]
 800defa:	430b      	orrs	r3, r1
 800defc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800defe:	d10d      	bne.n	800df1c <_dtoa_r+0x9a4>
 800df00:	2b39      	cmp	r3, #57	; 0x39
 800df02:	d029      	beq.n	800df58 <_dtoa_r+0x9e0>
 800df04:	f1ba 0f00 	cmp.w	sl, #0
 800df08:	dd01      	ble.n	800df0e <_dtoa_r+0x996>
 800df0a:	9b06      	ldr	r3, [sp, #24]
 800df0c:	3331      	adds	r3, #49	; 0x31
 800df0e:	9a02      	ldr	r2, [sp, #8]
 800df10:	7013      	strb	r3, [r2, #0]
 800df12:	e774      	b.n	800ddfe <_dtoa_r+0x886>
 800df14:	4638      	mov	r0, r7
 800df16:	e7b8      	b.n	800de8a <_dtoa_r+0x912>
 800df18:	2201      	movs	r2, #1
 800df1a:	e7e1      	b.n	800dee0 <_dtoa_r+0x968>
 800df1c:	f1ba 0f00 	cmp.w	sl, #0
 800df20:	db06      	blt.n	800df30 <_dtoa_r+0x9b8>
 800df22:	9907      	ldr	r1, [sp, #28]
 800df24:	ea41 0a0a 	orr.w	sl, r1, sl
 800df28:	9908      	ldr	r1, [sp, #32]
 800df2a:	ea5a 0101 	orrs.w	r1, sl, r1
 800df2e:	d120      	bne.n	800df72 <_dtoa_r+0x9fa>
 800df30:	2a00      	cmp	r2, #0
 800df32:	ddec      	ble.n	800df0e <_dtoa_r+0x996>
 800df34:	4629      	mov	r1, r5
 800df36:	2201      	movs	r2, #1
 800df38:	4630      	mov	r0, r6
 800df3a:	9305      	str	r3, [sp, #20]
 800df3c:	f001 f8aa 	bl	800f094 <__lshift>
 800df40:	4621      	mov	r1, r4
 800df42:	4605      	mov	r5, r0
 800df44:	f001 f912 	bl	800f16c <__mcmp>
 800df48:	2800      	cmp	r0, #0
 800df4a:	9b05      	ldr	r3, [sp, #20]
 800df4c:	dc02      	bgt.n	800df54 <_dtoa_r+0x9dc>
 800df4e:	d1de      	bne.n	800df0e <_dtoa_r+0x996>
 800df50:	07da      	lsls	r2, r3, #31
 800df52:	d5dc      	bpl.n	800df0e <_dtoa_r+0x996>
 800df54:	2b39      	cmp	r3, #57	; 0x39
 800df56:	d1d8      	bne.n	800df0a <_dtoa_r+0x992>
 800df58:	9a02      	ldr	r2, [sp, #8]
 800df5a:	2339      	movs	r3, #57	; 0x39
 800df5c:	7013      	strb	r3, [r2, #0]
 800df5e:	4643      	mov	r3, r8
 800df60:	4698      	mov	r8, r3
 800df62:	3b01      	subs	r3, #1
 800df64:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800df68:	2a39      	cmp	r2, #57	; 0x39
 800df6a:	d051      	beq.n	800e010 <_dtoa_r+0xa98>
 800df6c:	3201      	adds	r2, #1
 800df6e:	701a      	strb	r2, [r3, #0]
 800df70:	e745      	b.n	800ddfe <_dtoa_r+0x886>
 800df72:	2a00      	cmp	r2, #0
 800df74:	dd03      	ble.n	800df7e <_dtoa_r+0xa06>
 800df76:	2b39      	cmp	r3, #57	; 0x39
 800df78:	d0ee      	beq.n	800df58 <_dtoa_r+0x9e0>
 800df7a:	3301      	adds	r3, #1
 800df7c:	e7c7      	b.n	800df0e <_dtoa_r+0x996>
 800df7e:	9a05      	ldr	r2, [sp, #20]
 800df80:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df82:	f802 3c01 	strb.w	r3, [r2, #-1]
 800df86:	428a      	cmp	r2, r1
 800df88:	d02b      	beq.n	800dfe2 <_dtoa_r+0xa6a>
 800df8a:	4629      	mov	r1, r5
 800df8c:	2300      	movs	r3, #0
 800df8e:	220a      	movs	r2, #10
 800df90:	4630      	mov	r0, r6
 800df92:	f000 fe85 	bl	800eca0 <__multadd>
 800df96:	45b9      	cmp	r9, r7
 800df98:	4605      	mov	r5, r0
 800df9a:	f04f 0300 	mov.w	r3, #0
 800df9e:	f04f 020a 	mov.w	r2, #10
 800dfa2:	4649      	mov	r1, r9
 800dfa4:	4630      	mov	r0, r6
 800dfa6:	d107      	bne.n	800dfb8 <_dtoa_r+0xa40>
 800dfa8:	f000 fe7a 	bl	800eca0 <__multadd>
 800dfac:	4681      	mov	r9, r0
 800dfae:	4607      	mov	r7, r0
 800dfb0:	9b05      	ldr	r3, [sp, #20]
 800dfb2:	3301      	adds	r3, #1
 800dfb4:	9305      	str	r3, [sp, #20]
 800dfb6:	e774      	b.n	800dea2 <_dtoa_r+0x92a>
 800dfb8:	f000 fe72 	bl	800eca0 <__multadd>
 800dfbc:	4639      	mov	r1, r7
 800dfbe:	4681      	mov	r9, r0
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	220a      	movs	r2, #10
 800dfc4:	4630      	mov	r0, r6
 800dfc6:	f000 fe6b 	bl	800eca0 <__multadd>
 800dfca:	4607      	mov	r7, r0
 800dfcc:	e7f0      	b.n	800dfb0 <_dtoa_r+0xa38>
 800dfce:	f1ba 0f00 	cmp.w	sl, #0
 800dfd2:	9a00      	ldr	r2, [sp, #0]
 800dfd4:	bfcc      	ite	gt
 800dfd6:	46d0      	movgt	r8, sl
 800dfd8:	f04f 0801 	movle.w	r8, #1
 800dfdc:	4490      	add	r8, r2
 800dfde:	f04f 0900 	mov.w	r9, #0
 800dfe2:	4629      	mov	r1, r5
 800dfe4:	2201      	movs	r2, #1
 800dfe6:	4630      	mov	r0, r6
 800dfe8:	9302      	str	r3, [sp, #8]
 800dfea:	f001 f853 	bl	800f094 <__lshift>
 800dfee:	4621      	mov	r1, r4
 800dff0:	4605      	mov	r5, r0
 800dff2:	f001 f8bb 	bl	800f16c <__mcmp>
 800dff6:	2800      	cmp	r0, #0
 800dff8:	dcb1      	bgt.n	800df5e <_dtoa_r+0x9e6>
 800dffa:	d102      	bne.n	800e002 <_dtoa_r+0xa8a>
 800dffc:	9b02      	ldr	r3, [sp, #8]
 800dffe:	07db      	lsls	r3, r3, #31
 800e000:	d4ad      	bmi.n	800df5e <_dtoa_r+0x9e6>
 800e002:	4643      	mov	r3, r8
 800e004:	4698      	mov	r8, r3
 800e006:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e00a:	2a30      	cmp	r2, #48	; 0x30
 800e00c:	d0fa      	beq.n	800e004 <_dtoa_r+0xa8c>
 800e00e:	e6f6      	b.n	800ddfe <_dtoa_r+0x886>
 800e010:	9a00      	ldr	r2, [sp, #0]
 800e012:	429a      	cmp	r2, r3
 800e014:	d1a4      	bne.n	800df60 <_dtoa_r+0x9e8>
 800e016:	f10b 0b01 	add.w	fp, fp, #1
 800e01a:	2331      	movs	r3, #49	; 0x31
 800e01c:	e778      	b.n	800df10 <_dtoa_r+0x998>
 800e01e:	4b15      	ldr	r3, [pc, #84]	; (800e074 <_dtoa_r+0xafc>)
 800e020:	f7ff bb12 	b.w	800d648 <_dtoa_r+0xd0>
 800e024:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e026:	2b00      	cmp	r3, #0
 800e028:	f47f aaee 	bne.w	800d608 <_dtoa_r+0x90>
 800e02c:	4b12      	ldr	r3, [pc, #72]	; (800e078 <_dtoa_r+0xb00>)
 800e02e:	f7ff bb0b 	b.w	800d648 <_dtoa_r+0xd0>
 800e032:	f1ba 0f00 	cmp.w	sl, #0
 800e036:	dc03      	bgt.n	800e040 <_dtoa_r+0xac8>
 800e038:	9b07      	ldr	r3, [sp, #28]
 800e03a:	2b02      	cmp	r3, #2
 800e03c:	f73f aec7 	bgt.w	800ddce <_dtoa_r+0x856>
 800e040:	f8dd 8000 	ldr.w	r8, [sp]
 800e044:	4621      	mov	r1, r4
 800e046:	4628      	mov	r0, r5
 800e048:	f7ff fa0b 	bl	800d462 <quorem>
 800e04c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e050:	f808 3b01 	strb.w	r3, [r8], #1
 800e054:	9a00      	ldr	r2, [sp, #0]
 800e056:	eba8 0202 	sub.w	r2, r8, r2
 800e05a:	4592      	cmp	sl, r2
 800e05c:	ddb7      	ble.n	800dfce <_dtoa_r+0xa56>
 800e05e:	4629      	mov	r1, r5
 800e060:	2300      	movs	r3, #0
 800e062:	220a      	movs	r2, #10
 800e064:	4630      	mov	r0, r6
 800e066:	f000 fe1b 	bl	800eca0 <__multadd>
 800e06a:	4605      	mov	r5, r0
 800e06c:	e7ea      	b.n	800e044 <_dtoa_r+0xacc>
 800e06e:	bf00      	nop
 800e070:	08010714 	.word	0x08010714
 800e074:	08010511 	.word	0x08010511
 800e078:	08010691 	.word	0x08010691

0800e07c <__sflush_r>:
 800e07c:	898a      	ldrh	r2, [r1, #12]
 800e07e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e082:	4605      	mov	r5, r0
 800e084:	0710      	lsls	r0, r2, #28
 800e086:	460c      	mov	r4, r1
 800e088:	d458      	bmi.n	800e13c <__sflush_r+0xc0>
 800e08a:	684b      	ldr	r3, [r1, #4]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	dc05      	bgt.n	800e09c <__sflush_r+0x20>
 800e090:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e092:	2b00      	cmp	r3, #0
 800e094:	dc02      	bgt.n	800e09c <__sflush_r+0x20>
 800e096:	2000      	movs	r0, #0
 800e098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e09c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e09e:	2e00      	cmp	r6, #0
 800e0a0:	d0f9      	beq.n	800e096 <__sflush_r+0x1a>
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e0a8:	682f      	ldr	r7, [r5, #0]
 800e0aa:	602b      	str	r3, [r5, #0]
 800e0ac:	d032      	beq.n	800e114 <__sflush_r+0x98>
 800e0ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e0b0:	89a3      	ldrh	r3, [r4, #12]
 800e0b2:	075a      	lsls	r2, r3, #29
 800e0b4:	d505      	bpl.n	800e0c2 <__sflush_r+0x46>
 800e0b6:	6863      	ldr	r3, [r4, #4]
 800e0b8:	1ac0      	subs	r0, r0, r3
 800e0ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e0bc:	b10b      	cbz	r3, 800e0c2 <__sflush_r+0x46>
 800e0be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e0c0:	1ac0      	subs	r0, r0, r3
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e0c8:	6a21      	ldr	r1, [r4, #32]
 800e0ca:	4628      	mov	r0, r5
 800e0cc:	47b0      	blx	r6
 800e0ce:	1c43      	adds	r3, r0, #1
 800e0d0:	89a3      	ldrh	r3, [r4, #12]
 800e0d2:	d106      	bne.n	800e0e2 <__sflush_r+0x66>
 800e0d4:	6829      	ldr	r1, [r5, #0]
 800e0d6:	291d      	cmp	r1, #29
 800e0d8:	d82c      	bhi.n	800e134 <__sflush_r+0xb8>
 800e0da:	4a2a      	ldr	r2, [pc, #168]	; (800e184 <__sflush_r+0x108>)
 800e0dc:	40ca      	lsrs	r2, r1
 800e0de:	07d6      	lsls	r6, r2, #31
 800e0e0:	d528      	bpl.n	800e134 <__sflush_r+0xb8>
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	6062      	str	r2, [r4, #4]
 800e0e6:	04d9      	lsls	r1, r3, #19
 800e0e8:	6922      	ldr	r2, [r4, #16]
 800e0ea:	6022      	str	r2, [r4, #0]
 800e0ec:	d504      	bpl.n	800e0f8 <__sflush_r+0x7c>
 800e0ee:	1c42      	adds	r2, r0, #1
 800e0f0:	d101      	bne.n	800e0f6 <__sflush_r+0x7a>
 800e0f2:	682b      	ldr	r3, [r5, #0]
 800e0f4:	b903      	cbnz	r3, 800e0f8 <__sflush_r+0x7c>
 800e0f6:	6560      	str	r0, [r4, #84]	; 0x54
 800e0f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e0fa:	602f      	str	r7, [r5, #0]
 800e0fc:	2900      	cmp	r1, #0
 800e0fe:	d0ca      	beq.n	800e096 <__sflush_r+0x1a>
 800e100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e104:	4299      	cmp	r1, r3
 800e106:	d002      	beq.n	800e10e <__sflush_r+0x92>
 800e108:	4628      	mov	r0, r5
 800e10a:	f7fd f98b 	bl	800b424 <_free_r>
 800e10e:	2000      	movs	r0, #0
 800e110:	6360      	str	r0, [r4, #52]	; 0x34
 800e112:	e7c1      	b.n	800e098 <__sflush_r+0x1c>
 800e114:	6a21      	ldr	r1, [r4, #32]
 800e116:	2301      	movs	r3, #1
 800e118:	4628      	mov	r0, r5
 800e11a:	47b0      	blx	r6
 800e11c:	1c41      	adds	r1, r0, #1
 800e11e:	d1c7      	bne.n	800e0b0 <__sflush_r+0x34>
 800e120:	682b      	ldr	r3, [r5, #0]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d0c4      	beq.n	800e0b0 <__sflush_r+0x34>
 800e126:	2b1d      	cmp	r3, #29
 800e128:	d001      	beq.n	800e12e <__sflush_r+0xb2>
 800e12a:	2b16      	cmp	r3, #22
 800e12c:	d101      	bne.n	800e132 <__sflush_r+0xb6>
 800e12e:	602f      	str	r7, [r5, #0]
 800e130:	e7b1      	b.n	800e096 <__sflush_r+0x1a>
 800e132:	89a3      	ldrh	r3, [r4, #12]
 800e134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e138:	81a3      	strh	r3, [r4, #12]
 800e13a:	e7ad      	b.n	800e098 <__sflush_r+0x1c>
 800e13c:	690f      	ldr	r7, [r1, #16]
 800e13e:	2f00      	cmp	r7, #0
 800e140:	d0a9      	beq.n	800e096 <__sflush_r+0x1a>
 800e142:	0793      	lsls	r3, r2, #30
 800e144:	680e      	ldr	r6, [r1, #0]
 800e146:	bf08      	it	eq
 800e148:	694b      	ldreq	r3, [r1, #20]
 800e14a:	600f      	str	r7, [r1, #0]
 800e14c:	bf18      	it	ne
 800e14e:	2300      	movne	r3, #0
 800e150:	eba6 0807 	sub.w	r8, r6, r7
 800e154:	608b      	str	r3, [r1, #8]
 800e156:	f1b8 0f00 	cmp.w	r8, #0
 800e15a:	dd9c      	ble.n	800e096 <__sflush_r+0x1a>
 800e15c:	6a21      	ldr	r1, [r4, #32]
 800e15e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e160:	4643      	mov	r3, r8
 800e162:	463a      	mov	r2, r7
 800e164:	4628      	mov	r0, r5
 800e166:	47b0      	blx	r6
 800e168:	2800      	cmp	r0, #0
 800e16a:	dc06      	bgt.n	800e17a <__sflush_r+0xfe>
 800e16c:	89a3      	ldrh	r3, [r4, #12]
 800e16e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e172:	81a3      	strh	r3, [r4, #12]
 800e174:	f04f 30ff 	mov.w	r0, #4294967295
 800e178:	e78e      	b.n	800e098 <__sflush_r+0x1c>
 800e17a:	4407      	add	r7, r0
 800e17c:	eba8 0800 	sub.w	r8, r8, r0
 800e180:	e7e9      	b.n	800e156 <__sflush_r+0xda>
 800e182:	bf00      	nop
 800e184:	20400001 	.word	0x20400001

0800e188 <_fflush_r>:
 800e188:	b538      	push	{r3, r4, r5, lr}
 800e18a:	690b      	ldr	r3, [r1, #16]
 800e18c:	4605      	mov	r5, r0
 800e18e:	460c      	mov	r4, r1
 800e190:	b913      	cbnz	r3, 800e198 <_fflush_r+0x10>
 800e192:	2500      	movs	r5, #0
 800e194:	4628      	mov	r0, r5
 800e196:	bd38      	pop	{r3, r4, r5, pc}
 800e198:	b118      	cbz	r0, 800e1a2 <_fflush_r+0x1a>
 800e19a:	6983      	ldr	r3, [r0, #24]
 800e19c:	b90b      	cbnz	r3, 800e1a2 <_fflush_r+0x1a>
 800e19e:	f000 f887 	bl	800e2b0 <__sinit>
 800e1a2:	4b14      	ldr	r3, [pc, #80]	; (800e1f4 <_fflush_r+0x6c>)
 800e1a4:	429c      	cmp	r4, r3
 800e1a6:	d11b      	bne.n	800e1e0 <_fflush_r+0x58>
 800e1a8:	686c      	ldr	r4, [r5, #4]
 800e1aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d0ef      	beq.n	800e192 <_fflush_r+0xa>
 800e1b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e1b4:	07d0      	lsls	r0, r2, #31
 800e1b6:	d404      	bmi.n	800e1c2 <_fflush_r+0x3a>
 800e1b8:	0599      	lsls	r1, r3, #22
 800e1ba:	d402      	bmi.n	800e1c2 <_fflush_r+0x3a>
 800e1bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1be:	f000 fc88 	bl	800ead2 <__retarget_lock_acquire_recursive>
 800e1c2:	4628      	mov	r0, r5
 800e1c4:	4621      	mov	r1, r4
 800e1c6:	f7ff ff59 	bl	800e07c <__sflush_r>
 800e1ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e1cc:	07da      	lsls	r2, r3, #31
 800e1ce:	4605      	mov	r5, r0
 800e1d0:	d4e0      	bmi.n	800e194 <_fflush_r+0xc>
 800e1d2:	89a3      	ldrh	r3, [r4, #12]
 800e1d4:	059b      	lsls	r3, r3, #22
 800e1d6:	d4dd      	bmi.n	800e194 <_fflush_r+0xc>
 800e1d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1da:	f000 fc7b 	bl	800ead4 <__retarget_lock_release_recursive>
 800e1de:	e7d9      	b.n	800e194 <_fflush_r+0xc>
 800e1e0:	4b05      	ldr	r3, [pc, #20]	; (800e1f8 <_fflush_r+0x70>)
 800e1e2:	429c      	cmp	r4, r3
 800e1e4:	d101      	bne.n	800e1ea <_fflush_r+0x62>
 800e1e6:	68ac      	ldr	r4, [r5, #8]
 800e1e8:	e7df      	b.n	800e1aa <_fflush_r+0x22>
 800e1ea:	4b04      	ldr	r3, [pc, #16]	; (800e1fc <_fflush_r+0x74>)
 800e1ec:	429c      	cmp	r4, r3
 800e1ee:	bf08      	it	eq
 800e1f0:	68ec      	ldreq	r4, [r5, #12]
 800e1f2:	e7da      	b.n	800e1aa <_fflush_r+0x22>
 800e1f4:	08010748 	.word	0x08010748
 800e1f8:	08010768 	.word	0x08010768
 800e1fc:	08010728 	.word	0x08010728

0800e200 <std>:
 800e200:	2300      	movs	r3, #0
 800e202:	b510      	push	{r4, lr}
 800e204:	4604      	mov	r4, r0
 800e206:	e9c0 3300 	strd	r3, r3, [r0]
 800e20a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e20e:	6083      	str	r3, [r0, #8]
 800e210:	8181      	strh	r1, [r0, #12]
 800e212:	6643      	str	r3, [r0, #100]	; 0x64
 800e214:	81c2      	strh	r2, [r0, #14]
 800e216:	6183      	str	r3, [r0, #24]
 800e218:	4619      	mov	r1, r3
 800e21a:	2208      	movs	r2, #8
 800e21c:	305c      	adds	r0, #92	; 0x5c
 800e21e:	f7fd f8f9 	bl	800b414 <memset>
 800e222:	4b05      	ldr	r3, [pc, #20]	; (800e238 <std+0x38>)
 800e224:	6263      	str	r3, [r4, #36]	; 0x24
 800e226:	4b05      	ldr	r3, [pc, #20]	; (800e23c <std+0x3c>)
 800e228:	62a3      	str	r3, [r4, #40]	; 0x28
 800e22a:	4b05      	ldr	r3, [pc, #20]	; (800e240 <std+0x40>)
 800e22c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e22e:	4b05      	ldr	r3, [pc, #20]	; (800e244 <std+0x44>)
 800e230:	6224      	str	r4, [r4, #32]
 800e232:	6323      	str	r3, [r4, #48]	; 0x30
 800e234:	bd10      	pop	{r4, pc}
 800e236:	bf00      	nop
 800e238:	0800f911 	.word	0x0800f911
 800e23c:	0800f933 	.word	0x0800f933
 800e240:	0800f96b 	.word	0x0800f96b
 800e244:	0800f98f 	.word	0x0800f98f

0800e248 <_cleanup_r>:
 800e248:	4901      	ldr	r1, [pc, #4]	; (800e250 <_cleanup_r+0x8>)
 800e24a:	f000 b8af 	b.w	800e3ac <_fwalk_reent>
 800e24e:	bf00      	nop
 800e250:	0800e189 	.word	0x0800e189

0800e254 <__sfmoreglue>:
 800e254:	b570      	push	{r4, r5, r6, lr}
 800e256:	1e4a      	subs	r2, r1, #1
 800e258:	2568      	movs	r5, #104	; 0x68
 800e25a:	4355      	muls	r5, r2
 800e25c:	460e      	mov	r6, r1
 800e25e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e262:	f7fd f92f 	bl	800b4c4 <_malloc_r>
 800e266:	4604      	mov	r4, r0
 800e268:	b140      	cbz	r0, 800e27c <__sfmoreglue+0x28>
 800e26a:	2100      	movs	r1, #0
 800e26c:	e9c0 1600 	strd	r1, r6, [r0]
 800e270:	300c      	adds	r0, #12
 800e272:	60a0      	str	r0, [r4, #8]
 800e274:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e278:	f7fd f8cc 	bl	800b414 <memset>
 800e27c:	4620      	mov	r0, r4
 800e27e:	bd70      	pop	{r4, r5, r6, pc}

0800e280 <__sfp_lock_acquire>:
 800e280:	4801      	ldr	r0, [pc, #4]	; (800e288 <__sfp_lock_acquire+0x8>)
 800e282:	f000 bc26 	b.w	800ead2 <__retarget_lock_acquire_recursive>
 800e286:	bf00      	nop
 800e288:	24000cc8 	.word	0x24000cc8

0800e28c <__sfp_lock_release>:
 800e28c:	4801      	ldr	r0, [pc, #4]	; (800e294 <__sfp_lock_release+0x8>)
 800e28e:	f000 bc21 	b.w	800ead4 <__retarget_lock_release_recursive>
 800e292:	bf00      	nop
 800e294:	24000cc8 	.word	0x24000cc8

0800e298 <__sinit_lock_acquire>:
 800e298:	4801      	ldr	r0, [pc, #4]	; (800e2a0 <__sinit_lock_acquire+0x8>)
 800e29a:	f000 bc1a 	b.w	800ead2 <__retarget_lock_acquire_recursive>
 800e29e:	bf00      	nop
 800e2a0:	24000cc3 	.word	0x24000cc3

0800e2a4 <__sinit_lock_release>:
 800e2a4:	4801      	ldr	r0, [pc, #4]	; (800e2ac <__sinit_lock_release+0x8>)
 800e2a6:	f000 bc15 	b.w	800ead4 <__retarget_lock_release_recursive>
 800e2aa:	bf00      	nop
 800e2ac:	24000cc3 	.word	0x24000cc3

0800e2b0 <__sinit>:
 800e2b0:	b510      	push	{r4, lr}
 800e2b2:	4604      	mov	r4, r0
 800e2b4:	f7ff fff0 	bl	800e298 <__sinit_lock_acquire>
 800e2b8:	69a3      	ldr	r3, [r4, #24]
 800e2ba:	b11b      	cbz	r3, 800e2c4 <__sinit+0x14>
 800e2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2c0:	f7ff bff0 	b.w	800e2a4 <__sinit_lock_release>
 800e2c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e2c8:	6523      	str	r3, [r4, #80]	; 0x50
 800e2ca:	4b13      	ldr	r3, [pc, #76]	; (800e318 <__sinit+0x68>)
 800e2cc:	4a13      	ldr	r2, [pc, #76]	; (800e31c <__sinit+0x6c>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	62a2      	str	r2, [r4, #40]	; 0x28
 800e2d2:	42a3      	cmp	r3, r4
 800e2d4:	bf04      	itt	eq
 800e2d6:	2301      	moveq	r3, #1
 800e2d8:	61a3      	streq	r3, [r4, #24]
 800e2da:	4620      	mov	r0, r4
 800e2dc:	f000 f820 	bl	800e320 <__sfp>
 800e2e0:	6060      	str	r0, [r4, #4]
 800e2e2:	4620      	mov	r0, r4
 800e2e4:	f000 f81c 	bl	800e320 <__sfp>
 800e2e8:	60a0      	str	r0, [r4, #8]
 800e2ea:	4620      	mov	r0, r4
 800e2ec:	f000 f818 	bl	800e320 <__sfp>
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	60e0      	str	r0, [r4, #12]
 800e2f4:	2104      	movs	r1, #4
 800e2f6:	6860      	ldr	r0, [r4, #4]
 800e2f8:	f7ff ff82 	bl	800e200 <std>
 800e2fc:	68a0      	ldr	r0, [r4, #8]
 800e2fe:	2201      	movs	r2, #1
 800e300:	2109      	movs	r1, #9
 800e302:	f7ff ff7d 	bl	800e200 <std>
 800e306:	68e0      	ldr	r0, [r4, #12]
 800e308:	2202      	movs	r2, #2
 800e30a:	2112      	movs	r1, #18
 800e30c:	f7ff ff78 	bl	800e200 <std>
 800e310:	2301      	movs	r3, #1
 800e312:	61a3      	str	r3, [r4, #24]
 800e314:	e7d2      	b.n	800e2bc <__sinit+0xc>
 800e316:	bf00      	nop
 800e318:	080104ec 	.word	0x080104ec
 800e31c:	0800e249 	.word	0x0800e249

0800e320 <__sfp>:
 800e320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e322:	4607      	mov	r7, r0
 800e324:	f7ff ffac 	bl	800e280 <__sfp_lock_acquire>
 800e328:	4b1e      	ldr	r3, [pc, #120]	; (800e3a4 <__sfp+0x84>)
 800e32a:	681e      	ldr	r6, [r3, #0]
 800e32c:	69b3      	ldr	r3, [r6, #24]
 800e32e:	b913      	cbnz	r3, 800e336 <__sfp+0x16>
 800e330:	4630      	mov	r0, r6
 800e332:	f7ff ffbd 	bl	800e2b0 <__sinit>
 800e336:	3648      	adds	r6, #72	; 0x48
 800e338:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e33c:	3b01      	subs	r3, #1
 800e33e:	d503      	bpl.n	800e348 <__sfp+0x28>
 800e340:	6833      	ldr	r3, [r6, #0]
 800e342:	b30b      	cbz	r3, 800e388 <__sfp+0x68>
 800e344:	6836      	ldr	r6, [r6, #0]
 800e346:	e7f7      	b.n	800e338 <__sfp+0x18>
 800e348:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e34c:	b9d5      	cbnz	r5, 800e384 <__sfp+0x64>
 800e34e:	4b16      	ldr	r3, [pc, #88]	; (800e3a8 <__sfp+0x88>)
 800e350:	60e3      	str	r3, [r4, #12]
 800e352:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e356:	6665      	str	r5, [r4, #100]	; 0x64
 800e358:	f000 fbba 	bl	800ead0 <__retarget_lock_init_recursive>
 800e35c:	f7ff ff96 	bl	800e28c <__sfp_lock_release>
 800e360:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e364:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e368:	6025      	str	r5, [r4, #0]
 800e36a:	61a5      	str	r5, [r4, #24]
 800e36c:	2208      	movs	r2, #8
 800e36e:	4629      	mov	r1, r5
 800e370:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e374:	f7fd f84e 	bl	800b414 <memset>
 800e378:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e37c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e380:	4620      	mov	r0, r4
 800e382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e384:	3468      	adds	r4, #104	; 0x68
 800e386:	e7d9      	b.n	800e33c <__sfp+0x1c>
 800e388:	2104      	movs	r1, #4
 800e38a:	4638      	mov	r0, r7
 800e38c:	f7ff ff62 	bl	800e254 <__sfmoreglue>
 800e390:	4604      	mov	r4, r0
 800e392:	6030      	str	r0, [r6, #0]
 800e394:	2800      	cmp	r0, #0
 800e396:	d1d5      	bne.n	800e344 <__sfp+0x24>
 800e398:	f7ff ff78 	bl	800e28c <__sfp_lock_release>
 800e39c:	230c      	movs	r3, #12
 800e39e:	603b      	str	r3, [r7, #0]
 800e3a0:	e7ee      	b.n	800e380 <__sfp+0x60>
 800e3a2:	bf00      	nop
 800e3a4:	080104ec 	.word	0x080104ec
 800e3a8:	ffff0001 	.word	0xffff0001

0800e3ac <_fwalk_reent>:
 800e3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3b0:	4606      	mov	r6, r0
 800e3b2:	4688      	mov	r8, r1
 800e3b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e3b8:	2700      	movs	r7, #0
 800e3ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e3be:	f1b9 0901 	subs.w	r9, r9, #1
 800e3c2:	d505      	bpl.n	800e3d0 <_fwalk_reent+0x24>
 800e3c4:	6824      	ldr	r4, [r4, #0]
 800e3c6:	2c00      	cmp	r4, #0
 800e3c8:	d1f7      	bne.n	800e3ba <_fwalk_reent+0xe>
 800e3ca:	4638      	mov	r0, r7
 800e3cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3d0:	89ab      	ldrh	r3, [r5, #12]
 800e3d2:	2b01      	cmp	r3, #1
 800e3d4:	d907      	bls.n	800e3e6 <_fwalk_reent+0x3a>
 800e3d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e3da:	3301      	adds	r3, #1
 800e3dc:	d003      	beq.n	800e3e6 <_fwalk_reent+0x3a>
 800e3de:	4629      	mov	r1, r5
 800e3e0:	4630      	mov	r0, r6
 800e3e2:	47c0      	blx	r8
 800e3e4:	4307      	orrs	r7, r0
 800e3e6:	3568      	adds	r5, #104	; 0x68
 800e3e8:	e7e9      	b.n	800e3be <_fwalk_reent+0x12>

0800e3ea <rshift>:
 800e3ea:	6903      	ldr	r3, [r0, #16]
 800e3ec:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e3f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e3f4:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e3f8:	f100 0414 	add.w	r4, r0, #20
 800e3fc:	dd45      	ble.n	800e48a <rshift+0xa0>
 800e3fe:	f011 011f 	ands.w	r1, r1, #31
 800e402:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e406:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e40a:	d10c      	bne.n	800e426 <rshift+0x3c>
 800e40c:	f100 0710 	add.w	r7, r0, #16
 800e410:	4629      	mov	r1, r5
 800e412:	42b1      	cmp	r1, r6
 800e414:	d334      	bcc.n	800e480 <rshift+0x96>
 800e416:	1a9b      	subs	r3, r3, r2
 800e418:	009b      	lsls	r3, r3, #2
 800e41a:	1eea      	subs	r2, r5, #3
 800e41c:	4296      	cmp	r6, r2
 800e41e:	bf38      	it	cc
 800e420:	2300      	movcc	r3, #0
 800e422:	4423      	add	r3, r4
 800e424:	e015      	b.n	800e452 <rshift+0x68>
 800e426:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e42a:	f1c1 0820 	rsb	r8, r1, #32
 800e42e:	40cf      	lsrs	r7, r1
 800e430:	f105 0e04 	add.w	lr, r5, #4
 800e434:	46a1      	mov	r9, r4
 800e436:	4576      	cmp	r6, lr
 800e438:	46f4      	mov	ip, lr
 800e43a:	d815      	bhi.n	800e468 <rshift+0x7e>
 800e43c:	1a9b      	subs	r3, r3, r2
 800e43e:	009a      	lsls	r2, r3, #2
 800e440:	3a04      	subs	r2, #4
 800e442:	3501      	adds	r5, #1
 800e444:	42ae      	cmp	r6, r5
 800e446:	bf38      	it	cc
 800e448:	2200      	movcc	r2, #0
 800e44a:	18a3      	adds	r3, r4, r2
 800e44c:	50a7      	str	r7, [r4, r2]
 800e44e:	b107      	cbz	r7, 800e452 <rshift+0x68>
 800e450:	3304      	adds	r3, #4
 800e452:	1b1a      	subs	r2, r3, r4
 800e454:	42a3      	cmp	r3, r4
 800e456:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e45a:	bf08      	it	eq
 800e45c:	2300      	moveq	r3, #0
 800e45e:	6102      	str	r2, [r0, #16]
 800e460:	bf08      	it	eq
 800e462:	6143      	streq	r3, [r0, #20]
 800e464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e468:	f8dc c000 	ldr.w	ip, [ip]
 800e46c:	fa0c fc08 	lsl.w	ip, ip, r8
 800e470:	ea4c 0707 	orr.w	r7, ip, r7
 800e474:	f849 7b04 	str.w	r7, [r9], #4
 800e478:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e47c:	40cf      	lsrs	r7, r1
 800e47e:	e7da      	b.n	800e436 <rshift+0x4c>
 800e480:	f851 cb04 	ldr.w	ip, [r1], #4
 800e484:	f847 cf04 	str.w	ip, [r7, #4]!
 800e488:	e7c3      	b.n	800e412 <rshift+0x28>
 800e48a:	4623      	mov	r3, r4
 800e48c:	e7e1      	b.n	800e452 <rshift+0x68>

0800e48e <__hexdig_fun>:
 800e48e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e492:	2b09      	cmp	r3, #9
 800e494:	d802      	bhi.n	800e49c <__hexdig_fun+0xe>
 800e496:	3820      	subs	r0, #32
 800e498:	b2c0      	uxtb	r0, r0
 800e49a:	4770      	bx	lr
 800e49c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e4a0:	2b05      	cmp	r3, #5
 800e4a2:	d801      	bhi.n	800e4a8 <__hexdig_fun+0x1a>
 800e4a4:	3847      	subs	r0, #71	; 0x47
 800e4a6:	e7f7      	b.n	800e498 <__hexdig_fun+0xa>
 800e4a8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e4ac:	2b05      	cmp	r3, #5
 800e4ae:	d801      	bhi.n	800e4b4 <__hexdig_fun+0x26>
 800e4b0:	3827      	subs	r0, #39	; 0x27
 800e4b2:	e7f1      	b.n	800e498 <__hexdig_fun+0xa>
 800e4b4:	2000      	movs	r0, #0
 800e4b6:	4770      	bx	lr

0800e4b8 <__gethex>:
 800e4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4bc:	ed2d 8b02 	vpush	{d8}
 800e4c0:	b089      	sub	sp, #36	; 0x24
 800e4c2:	ee08 0a10 	vmov	s16, r0
 800e4c6:	9304      	str	r3, [sp, #16]
 800e4c8:	4bbc      	ldr	r3, [pc, #752]	; (800e7bc <__gethex+0x304>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	9301      	str	r3, [sp, #4]
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	468b      	mov	fp, r1
 800e4d2:	4690      	mov	r8, r2
 800e4d4:	f7f1 ff0e 	bl	80002f4 <strlen>
 800e4d8:	9b01      	ldr	r3, [sp, #4]
 800e4da:	f8db 2000 	ldr.w	r2, [fp]
 800e4de:	4403      	add	r3, r0
 800e4e0:	4682      	mov	sl, r0
 800e4e2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e4e6:	9305      	str	r3, [sp, #20]
 800e4e8:	1c93      	adds	r3, r2, #2
 800e4ea:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e4ee:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e4f2:	32fe      	adds	r2, #254	; 0xfe
 800e4f4:	18d1      	adds	r1, r2, r3
 800e4f6:	461f      	mov	r7, r3
 800e4f8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e4fc:	9100      	str	r1, [sp, #0]
 800e4fe:	2830      	cmp	r0, #48	; 0x30
 800e500:	d0f8      	beq.n	800e4f4 <__gethex+0x3c>
 800e502:	f7ff ffc4 	bl	800e48e <__hexdig_fun>
 800e506:	4604      	mov	r4, r0
 800e508:	2800      	cmp	r0, #0
 800e50a:	d13a      	bne.n	800e582 <__gethex+0xca>
 800e50c:	9901      	ldr	r1, [sp, #4]
 800e50e:	4652      	mov	r2, sl
 800e510:	4638      	mov	r0, r7
 800e512:	f7fe f83d 	bl	800c590 <strncmp>
 800e516:	4605      	mov	r5, r0
 800e518:	2800      	cmp	r0, #0
 800e51a:	d168      	bne.n	800e5ee <__gethex+0x136>
 800e51c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e520:	eb07 060a 	add.w	r6, r7, sl
 800e524:	f7ff ffb3 	bl	800e48e <__hexdig_fun>
 800e528:	2800      	cmp	r0, #0
 800e52a:	d062      	beq.n	800e5f2 <__gethex+0x13a>
 800e52c:	4633      	mov	r3, r6
 800e52e:	7818      	ldrb	r0, [r3, #0]
 800e530:	2830      	cmp	r0, #48	; 0x30
 800e532:	461f      	mov	r7, r3
 800e534:	f103 0301 	add.w	r3, r3, #1
 800e538:	d0f9      	beq.n	800e52e <__gethex+0x76>
 800e53a:	f7ff ffa8 	bl	800e48e <__hexdig_fun>
 800e53e:	2301      	movs	r3, #1
 800e540:	fab0 f480 	clz	r4, r0
 800e544:	0964      	lsrs	r4, r4, #5
 800e546:	4635      	mov	r5, r6
 800e548:	9300      	str	r3, [sp, #0]
 800e54a:	463a      	mov	r2, r7
 800e54c:	4616      	mov	r6, r2
 800e54e:	3201      	adds	r2, #1
 800e550:	7830      	ldrb	r0, [r6, #0]
 800e552:	f7ff ff9c 	bl	800e48e <__hexdig_fun>
 800e556:	2800      	cmp	r0, #0
 800e558:	d1f8      	bne.n	800e54c <__gethex+0x94>
 800e55a:	9901      	ldr	r1, [sp, #4]
 800e55c:	4652      	mov	r2, sl
 800e55e:	4630      	mov	r0, r6
 800e560:	f7fe f816 	bl	800c590 <strncmp>
 800e564:	b980      	cbnz	r0, 800e588 <__gethex+0xd0>
 800e566:	b94d      	cbnz	r5, 800e57c <__gethex+0xc4>
 800e568:	eb06 050a 	add.w	r5, r6, sl
 800e56c:	462a      	mov	r2, r5
 800e56e:	4616      	mov	r6, r2
 800e570:	3201      	adds	r2, #1
 800e572:	7830      	ldrb	r0, [r6, #0]
 800e574:	f7ff ff8b 	bl	800e48e <__hexdig_fun>
 800e578:	2800      	cmp	r0, #0
 800e57a:	d1f8      	bne.n	800e56e <__gethex+0xb6>
 800e57c:	1bad      	subs	r5, r5, r6
 800e57e:	00ad      	lsls	r5, r5, #2
 800e580:	e004      	b.n	800e58c <__gethex+0xd4>
 800e582:	2400      	movs	r4, #0
 800e584:	4625      	mov	r5, r4
 800e586:	e7e0      	b.n	800e54a <__gethex+0x92>
 800e588:	2d00      	cmp	r5, #0
 800e58a:	d1f7      	bne.n	800e57c <__gethex+0xc4>
 800e58c:	7833      	ldrb	r3, [r6, #0]
 800e58e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e592:	2b50      	cmp	r3, #80	; 0x50
 800e594:	d13b      	bne.n	800e60e <__gethex+0x156>
 800e596:	7873      	ldrb	r3, [r6, #1]
 800e598:	2b2b      	cmp	r3, #43	; 0x2b
 800e59a:	d02c      	beq.n	800e5f6 <__gethex+0x13e>
 800e59c:	2b2d      	cmp	r3, #45	; 0x2d
 800e59e:	d02e      	beq.n	800e5fe <__gethex+0x146>
 800e5a0:	1c71      	adds	r1, r6, #1
 800e5a2:	f04f 0900 	mov.w	r9, #0
 800e5a6:	7808      	ldrb	r0, [r1, #0]
 800e5a8:	f7ff ff71 	bl	800e48e <__hexdig_fun>
 800e5ac:	1e43      	subs	r3, r0, #1
 800e5ae:	b2db      	uxtb	r3, r3
 800e5b0:	2b18      	cmp	r3, #24
 800e5b2:	d82c      	bhi.n	800e60e <__gethex+0x156>
 800e5b4:	f1a0 0210 	sub.w	r2, r0, #16
 800e5b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e5bc:	f7ff ff67 	bl	800e48e <__hexdig_fun>
 800e5c0:	1e43      	subs	r3, r0, #1
 800e5c2:	b2db      	uxtb	r3, r3
 800e5c4:	2b18      	cmp	r3, #24
 800e5c6:	d91d      	bls.n	800e604 <__gethex+0x14c>
 800e5c8:	f1b9 0f00 	cmp.w	r9, #0
 800e5cc:	d000      	beq.n	800e5d0 <__gethex+0x118>
 800e5ce:	4252      	negs	r2, r2
 800e5d0:	4415      	add	r5, r2
 800e5d2:	f8cb 1000 	str.w	r1, [fp]
 800e5d6:	b1e4      	cbz	r4, 800e612 <__gethex+0x15a>
 800e5d8:	9b00      	ldr	r3, [sp, #0]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	bf14      	ite	ne
 800e5de:	2700      	movne	r7, #0
 800e5e0:	2706      	moveq	r7, #6
 800e5e2:	4638      	mov	r0, r7
 800e5e4:	b009      	add	sp, #36	; 0x24
 800e5e6:	ecbd 8b02 	vpop	{d8}
 800e5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5ee:	463e      	mov	r6, r7
 800e5f0:	4625      	mov	r5, r4
 800e5f2:	2401      	movs	r4, #1
 800e5f4:	e7ca      	b.n	800e58c <__gethex+0xd4>
 800e5f6:	f04f 0900 	mov.w	r9, #0
 800e5fa:	1cb1      	adds	r1, r6, #2
 800e5fc:	e7d3      	b.n	800e5a6 <__gethex+0xee>
 800e5fe:	f04f 0901 	mov.w	r9, #1
 800e602:	e7fa      	b.n	800e5fa <__gethex+0x142>
 800e604:	230a      	movs	r3, #10
 800e606:	fb03 0202 	mla	r2, r3, r2, r0
 800e60a:	3a10      	subs	r2, #16
 800e60c:	e7d4      	b.n	800e5b8 <__gethex+0x100>
 800e60e:	4631      	mov	r1, r6
 800e610:	e7df      	b.n	800e5d2 <__gethex+0x11a>
 800e612:	1bf3      	subs	r3, r6, r7
 800e614:	3b01      	subs	r3, #1
 800e616:	4621      	mov	r1, r4
 800e618:	2b07      	cmp	r3, #7
 800e61a:	dc0b      	bgt.n	800e634 <__gethex+0x17c>
 800e61c:	ee18 0a10 	vmov	r0, s16
 800e620:	f000 fadc 	bl	800ebdc <_Balloc>
 800e624:	4604      	mov	r4, r0
 800e626:	b940      	cbnz	r0, 800e63a <__gethex+0x182>
 800e628:	4b65      	ldr	r3, [pc, #404]	; (800e7c0 <__gethex+0x308>)
 800e62a:	4602      	mov	r2, r0
 800e62c:	21de      	movs	r1, #222	; 0xde
 800e62e:	4865      	ldr	r0, [pc, #404]	; (800e7c4 <__gethex+0x30c>)
 800e630:	f7fc fe5e 	bl	800b2f0 <__assert_func>
 800e634:	3101      	adds	r1, #1
 800e636:	105b      	asrs	r3, r3, #1
 800e638:	e7ee      	b.n	800e618 <__gethex+0x160>
 800e63a:	f100 0914 	add.w	r9, r0, #20
 800e63e:	f04f 0b00 	mov.w	fp, #0
 800e642:	f1ca 0301 	rsb	r3, sl, #1
 800e646:	f8cd 9008 	str.w	r9, [sp, #8]
 800e64a:	f8cd b000 	str.w	fp, [sp]
 800e64e:	9306      	str	r3, [sp, #24]
 800e650:	42b7      	cmp	r7, r6
 800e652:	d340      	bcc.n	800e6d6 <__gethex+0x21e>
 800e654:	9802      	ldr	r0, [sp, #8]
 800e656:	9b00      	ldr	r3, [sp, #0]
 800e658:	f840 3b04 	str.w	r3, [r0], #4
 800e65c:	eba0 0009 	sub.w	r0, r0, r9
 800e660:	1080      	asrs	r0, r0, #2
 800e662:	0146      	lsls	r6, r0, #5
 800e664:	6120      	str	r0, [r4, #16]
 800e666:	4618      	mov	r0, r3
 800e668:	f000 fbae 	bl	800edc8 <__hi0bits>
 800e66c:	1a30      	subs	r0, r6, r0
 800e66e:	f8d8 6000 	ldr.w	r6, [r8]
 800e672:	42b0      	cmp	r0, r6
 800e674:	dd63      	ble.n	800e73e <__gethex+0x286>
 800e676:	1b87      	subs	r7, r0, r6
 800e678:	4639      	mov	r1, r7
 800e67a:	4620      	mov	r0, r4
 800e67c:	f000 ff49 	bl	800f512 <__any_on>
 800e680:	4682      	mov	sl, r0
 800e682:	b1a8      	cbz	r0, 800e6b0 <__gethex+0x1f8>
 800e684:	1e7b      	subs	r3, r7, #1
 800e686:	1159      	asrs	r1, r3, #5
 800e688:	f003 021f 	and.w	r2, r3, #31
 800e68c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e690:	f04f 0a01 	mov.w	sl, #1
 800e694:	fa0a f202 	lsl.w	r2, sl, r2
 800e698:	420a      	tst	r2, r1
 800e69a:	d009      	beq.n	800e6b0 <__gethex+0x1f8>
 800e69c:	4553      	cmp	r3, sl
 800e69e:	dd05      	ble.n	800e6ac <__gethex+0x1f4>
 800e6a0:	1eb9      	subs	r1, r7, #2
 800e6a2:	4620      	mov	r0, r4
 800e6a4:	f000 ff35 	bl	800f512 <__any_on>
 800e6a8:	2800      	cmp	r0, #0
 800e6aa:	d145      	bne.n	800e738 <__gethex+0x280>
 800e6ac:	f04f 0a02 	mov.w	sl, #2
 800e6b0:	4639      	mov	r1, r7
 800e6b2:	4620      	mov	r0, r4
 800e6b4:	f7ff fe99 	bl	800e3ea <rshift>
 800e6b8:	443d      	add	r5, r7
 800e6ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e6be:	42ab      	cmp	r3, r5
 800e6c0:	da4c      	bge.n	800e75c <__gethex+0x2a4>
 800e6c2:	ee18 0a10 	vmov	r0, s16
 800e6c6:	4621      	mov	r1, r4
 800e6c8:	f000 fac8 	bl	800ec5c <_Bfree>
 800e6cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	6013      	str	r3, [r2, #0]
 800e6d2:	27a3      	movs	r7, #163	; 0xa3
 800e6d4:	e785      	b.n	800e5e2 <__gethex+0x12a>
 800e6d6:	1e73      	subs	r3, r6, #1
 800e6d8:	9a05      	ldr	r2, [sp, #20]
 800e6da:	9303      	str	r3, [sp, #12]
 800e6dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e6e0:	4293      	cmp	r3, r2
 800e6e2:	d019      	beq.n	800e718 <__gethex+0x260>
 800e6e4:	f1bb 0f20 	cmp.w	fp, #32
 800e6e8:	d107      	bne.n	800e6fa <__gethex+0x242>
 800e6ea:	9b02      	ldr	r3, [sp, #8]
 800e6ec:	9a00      	ldr	r2, [sp, #0]
 800e6ee:	f843 2b04 	str.w	r2, [r3], #4
 800e6f2:	9302      	str	r3, [sp, #8]
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	9300      	str	r3, [sp, #0]
 800e6f8:	469b      	mov	fp, r3
 800e6fa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e6fe:	f7ff fec6 	bl	800e48e <__hexdig_fun>
 800e702:	9b00      	ldr	r3, [sp, #0]
 800e704:	f000 000f 	and.w	r0, r0, #15
 800e708:	fa00 f00b 	lsl.w	r0, r0, fp
 800e70c:	4303      	orrs	r3, r0
 800e70e:	9300      	str	r3, [sp, #0]
 800e710:	f10b 0b04 	add.w	fp, fp, #4
 800e714:	9b03      	ldr	r3, [sp, #12]
 800e716:	e00d      	b.n	800e734 <__gethex+0x27c>
 800e718:	9b03      	ldr	r3, [sp, #12]
 800e71a:	9a06      	ldr	r2, [sp, #24]
 800e71c:	4413      	add	r3, r2
 800e71e:	42bb      	cmp	r3, r7
 800e720:	d3e0      	bcc.n	800e6e4 <__gethex+0x22c>
 800e722:	4618      	mov	r0, r3
 800e724:	9901      	ldr	r1, [sp, #4]
 800e726:	9307      	str	r3, [sp, #28]
 800e728:	4652      	mov	r2, sl
 800e72a:	f7fd ff31 	bl	800c590 <strncmp>
 800e72e:	9b07      	ldr	r3, [sp, #28]
 800e730:	2800      	cmp	r0, #0
 800e732:	d1d7      	bne.n	800e6e4 <__gethex+0x22c>
 800e734:	461e      	mov	r6, r3
 800e736:	e78b      	b.n	800e650 <__gethex+0x198>
 800e738:	f04f 0a03 	mov.w	sl, #3
 800e73c:	e7b8      	b.n	800e6b0 <__gethex+0x1f8>
 800e73e:	da0a      	bge.n	800e756 <__gethex+0x29e>
 800e740:	1a37      	subs	r7, r6, r0
 800e742:	4621      	mov	r1, r4
 800e744:	ee18 0a10 	vmov	r0, s16
 800e748:	463a      	mov	r2, r7
 800e74a:	f000 fca3 	bl	800f094 <__lshift>
 800e74e:	1bed      	subs	r5, r5, r7
 800e750:	4604      	mov	r4, r0
 800e752:	f100 0914 	add.w	r9, r0, #20
 800e756:	f04f 0a00 	mov.w	sl, #0
 800e75a:	e7ae      	b.n	800e6ba <__gethex+0x202>
 800e75c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e760:	42a8      	cmp	r0, r5
 800e762:	dd72      	ble.n	800e84a <__gethex+0x392>
 800e764:	1b45      	subs	r5, r0, r5
 800e766:	42ae      	cmp	r6, r5
 800e768:	dc36      	bgt.n	800e7d8 <__gethex+0x320>
 800e76a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e76e:	2b02      	cmp	r3, #2
 800e770:	d02a      	beq.n	800e7c8 <__gethex+0x310>
 800e772:	2b03      	cmp	r3, #3
 800e774:	d02c      	beq.n	800e7d0 <__gethex+0x318>
 800e776:	2b01      	cmp	r3, #1
 800e778:	d115      	bne.n	800e7a6 <__gethex+0x2ee>
 800e77a:	42ae      	cmp	r6, r5
 800e77c:	d113      	bne.n	800e7a6 <__gethex+0x2ee>
 800e77e:	2e01      	cmp	r6, #1
 800e780:	d10b      	bne.n	800e79a <__gethex+0x2e2>
 800e782:	9a04      	ldr	r2, [sp, #16]
 800e784:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e788:	6013      	str	r3, [r2, #0]
 800e78a:	2301      	movs	r3, #1
 800e78c:	6123      	str	r3, [r4, #16]
 800e78e:	f8c9 3000 	str.w	r3, [r9]
 800e792:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e794:	2762      	movs	r7, #98	; 0x62
 800e796:	601c      	str	r4, [r3, #0]
 800e798:	e723      	b.n	800e5e2 <__gethex+0x12a>
 800e79a:	1e71      	subs	r1, r6, #1
 800e79c:	4620      	mov	r0, r4
 800e79e:	f000 feb8 	bl	800f512 <__any_on>
 800e7a2:	2800      	cmp	r0, #0
 800e7a4:	d1ed      	bne.n	800e782 <__gethex+0x2ca>
 800e7a6:	ee18 0a10 	vmov	r0, s16
 800e7aa:	4621      	mov	r1, r4
 800e7ac:	f000 fa56 	bl	800ec5c <_Bfree>
 800e7b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	6013      	str	r3, [r2, #0]
 800e7b6:	2750      	movs	r7, #80	; 0x50
 800e7b8:	e713      	b.n	800e5e2 <__gethex+0x12a>
 800e7ba:	bf00      	nop
 800e7bc:	080107f4 	.word	0x080107f4
 800e7c0:	08010714 	.word	0x08010714
 800e7c4:	08010788 	.word	0x08010788
 800e7c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d1eb      	bne.n	800e7a6 <__gethex+0x2ee>
 800e7ce:	e7d8      	b.n	800e782 <__gethex+0x2ca>
 800e7d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d1d5      	bne.n	800e782 <__gethex+0x2ca>
 800e7d6:	e7e6      	b.n	800e7a6 <__gethex+0x2ee>
 800e7d8:	1e6f      	subs	r7, r5, #1
 800e7da:	f1ba 0f00 	cmp.w	sl, #0
 800e7de:	d131      	bne.n	800e844 <__gethex+0x38c>
 800e7e0:	b127      	cbz	r7, 800e7ec <__gethex+0x334>
 800e7e2:	4639      	mov	r1, r7
 800e7e4:	4620      	mov	r0, r4
 800e7e6:	f000 fe94 	bl	800f512 <__any_on>
 800e7ea:	4682      	mov	sl, r0
 800e7ec:	117b      	asrs	r3, r7, #5
 800e7ee:	2101      	movs	r1, #1
 800e7f0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e7f4:	f007 071f 	and.w	r7, r7, #31
 800e7f8:	fa01 f707 	lsl.w	r7, r1, r7
 800e7fc:	421f      	tst	r7, r3
 800e7fe:	4629      	mov	r1, r5
 800e800:	4620      	mov	r0, r4
 800e802:	bf18      	it	ne
 800e804:	f04a 0a02 	orrne.w	sl, sl, #2
 800e808:	1b76      	subs	r6, r6, r5
 800e80a:	f7ff fdee 	bl	800e3ea <rshift>
 800e80e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e812:	2702      	movs	r7, #2
 800e814:	f1ba 0f00 	cmp.w	sl, #0
 800e818:	d048      	beq.n	800e8ac <__gethex+0x3f4>
 800e81a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e81e:	2b02      	cmp	r3, #2
 800e820:	d015      	beq.n	800e84e <__gethex+0x396>
 800e822:	2b03      	cmp	r3, #3
 800e824:	d017      	beq.n	800e856 <__gethex+0x39e>
 800e826:	2b01      	cmp	r3, #1
 800e828:	d109      	bne.n	800e83e <__gethex+0x386>
 800e82a:	f01a 0f02 	tst.w	sl, #2
 800e82e:	d006      	beq.n	800e83e <__gethex+0x386>
 800e830:	f8d9 0000 	ldr.w	r0, [r9]
 800e834:	ea4a 0a00 	orr.w	sl, sl, r0
 800e838:	f01a 0f01 	tst.w	sl, #1
 800e83c:	d10e      	bne.n	800e85c <__gethex+0x3a4>
 800e83e:	f047 0710 	orr.w	r7, r7, #16
 800e842:	e033      	b.n	800e8ac <__gethex+0x3f4>
 800e844:	f04f 0a01 	mov.w	sl, #1
 800e848:	e7d0      	b.n	800e7ec <__gethex+0x334>
 800e84a:	2701      	movs	r7, #1
 800e84c:	e7e2      	b.n	800e814 <__gethex+0x35c>
 800e84e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e850:	f1c3 0301 	rsb	r3, r3, #1
 800e854:	9315      	str	r3, [sp, #84]	; 0x54
 800e856:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d0f0      	beq.n	800e83e <__gethex+0x386>
 800e85c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e860:	f104 0314 	add.w	r3, r4, #20
 800e864:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e868:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e86c:	f04f 0c00 	mov.w	ip, #0
 800e870:	4618      	mov	r0, r3
 800e872:	f853 2b04 	ldr.w	r2, [r3], #4
 800e876:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e87a:	d01c      	beq.n	800e8b6 <__gethex+0x3fe>
 800e87c:	3201      	adds	r2, #1
 800e87e:	6002      	str	r2, [r0, #0]
 800e880:	2f02      	cmp	r7, #2
 800e882:	f104 0314 	add.w	r3, r4, #20
 800e886:	d13f      	bne.n	800e908 <__gethex+0x450>
 800e888:	f8d8 2000 	ldr.w	r2, [r8]
 800e88c:	3a01      	subs	r2, #1
 800e88e:	42b2      	cmp	r2, r6
 800e890:	d10a      	bne.n	800e8a8 <__gethex+0x3f0>
 800e892:	1171      	asrs	r1, r6, #5
 800e894:	2201      	movs	r2, #1
 800e896:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e89a:	f006 061f 	and.w	r6, r6, #31
 800e89e:	fa02 f606 	lsl.w	r6, r2, r6
 800e8a2:	421e      	tst	r6, r3
 800e8a4:	bf18      	it	ne
 800e8a6:	4617      	movne	r7, r2
 800e8a8:	f047 0720 	orr.w	r7, r7, #32
 800e8ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e8ae:	601c      	str	r4, [r3, #0]
 800e8b0:	9b04      	ldr	r3, [sp, #16]
 800e8b2:	601d      	str	r5, [r3, #0]
 800e8b4:	e695      	b.n	800e5e2 <__gethex+0x12a>
 800e8b6:	4299      	cmp	r1, r3
 800e8b8:	f843 cc04 	str.w	ip, [r3, #-4]
 800e8bc:	d8d8      	bhi.n	800e870 <__gethex+0x3b8>
 800e8be:	68a3      	ldr	r3, [r4, #8]
 800e8c0:	459b      	cmp	fp, r3
 800e8c2:	db19      	blt.n	800e8f8 <__gethex+0x440>
 800e8c4:	6861      	ldr	r1, [r4, #4]
 800e8c6:	ee18 0a10 	vmov	r0, s16
 800e8ca:	3101      	adds	r1, #1
 800e8cc:	f000 f986 	bl	800ebdc <_Balloc>
 800e8d0:	4681      	mov	r9, r0
 800e8d2:	b918      	cbnz	r0, 800e8dc <__gethex+0x424>
 800e8d4:	4b1a      	ldr	r3, [pc, #104]	; (800e940 <__gethex+0x488>)
 800e8d6:	4602      	mov	r2, r0
 800e8d8:	2184      	movs	r1, #132	; 0x84
 800e8da:	e6a8      	b.n	800e62e <__gethex+0x176>
 800e8dc:	6922      	ldr	r2, [r4, #16]
 800e8de:	3202      	adds	r2, #2
 800e8e0:	f104 010c 	add.w	r1, r4, #12
 800e8e4:	0092      	lsls	r2, r2, #2
 800e8e6:	300c      	adds	r0, #12
 800e8e8:	f7fc fd6c 	bl	800b3c4 <memcpy>
 800e8ec:	4621      	mov	r1, r4
 800e8ee:	ee18 0a10 	vmov	r0, s16
 800e8f2:	f000 f9b3 	bl	800ec5c <_Bfree>
 800e8f6:	464c      	mov	r4, r9
 800e8f8:	6923      	ldr	r3, [r4, #16]
 800e8fa:	1c5a      	adds	r2, r3, #1
 800e8fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e900:	6122      	str	r2, [r4, #16]
 800e902:	2201      	movs	r2, #1
 800e904:	615a      	str	r2, [r3, #20]
 800e906:	e7bb      	b.n	800e880 <__gethex+0x3c8>
 800e908:	6922      	ldr	r2, [r4, #16]
 800e90a:	455a      	cmp	r2, fp
 800e90c:	dd0b      	ble.n	800e926 <__gethex+0x46e>
 800e90e:	2101      	movs	r1, #1
 800e910:	4620      	mov	r0, r4
 800e912:	f7ff fd6a 	bl	800e3ea <rshift>
 800e916:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e91a:	3501      	adds	r5, #1
 800e91c:	42ab      	cmp	r3, r5
 800e91e:	f6ff aed0 	blt.w	800e6c2 <__gethex+0x20a>
 800e922:	2701      	movs	r7, #1
 800e924:	e7c0      	b.n	800e8a8 <__gethex+0x3f0>
 800e926:	f016 061f 	ands.w	r6, r6, #31
 800e92a:	d0fa      	beq.n	800e922 <__gethex+0x46a>
 800e92c:	449a      	add	sl, r3
 800e92e:	f1c6 0620 	rsb	r6, r6, #32
 800e932:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e936:	f000 fa47 	bl	800edc8 <__hi0bits>
 800e93a:	42b0      	cmp	r0, r6
 800e93c:	dbe7      	blt.n	800e90e <__gethex+0x456>
 800e93e:	e7f0      	b.n	800e922 <__gethex+0x46a>
 800e940:	08010714 	.word	0x08010714

0800e944 <L_shift>:
 800e944:	f1c2 0208 	rsb	r2, r2, #8
 800e948:	0092      	lsls	r2, r2, #2
 800e94a:	b570      	push	{r4, r5, r6, lr}
 800e94c:	f1c2 0620 	rsb	r6, r2, #32
 800e950:	6843      	ldr	r3, [r0, #4]
 800e952:	6804      	ldr	r4, [r0, #0]
 800e954:	fa03 f506 	lsl.w	r5, r3, r6
 800e958:	432c      	orrs	r4, r5
 800e95a:	40d3      	lsrs	r3, r2
 800e95c:	6004      	str	r4, [r0, #0]
 800e95e:	f840 3f04 	str.w	r3, [r0, #4]!
 800e962:	4288      	cmp	r0, r1
 800e964:	d3f4      	bcc.n	800e950 <L_shift+0xc>
 800e966:	bd70      	pop	{r4, r5, r6, pc}

0800e968 <__match>:
 800e968:	b530      	push	{r4, r5, lr}
 800e96a:	6803      	ldr	r3, [r0, #0]
 800e96c:	3301      	adds	r3, #1
 800e96e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e972:	b914      	cbnz	r4, 800e97a <__match+0x12>
 800e974:	6003      	str	r3, [r0, #0]
 800e976:	2001      	movs	r0, #1
 800e978:	bd30      	pop	{r4, r5, pc}
 800e97a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e97e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e982:	2d19      	cmp	r5, #25
 800e984:	bf98      	it	ls
 800e986:	3220      	addls	r2, #32
 800e988:	42a2      	cmp	r2, r4
 800e98a:	d0f0      	beq.n	800e96e <__match+0x6>
 800e98c:	2000      	movs	r0, #0
 800e98e:	e7f3      	b.n	800e978 <__match+0x10>

0800e990 <__hexnan>:
 800e990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e994:	680b      	ldr	r3, [r1, #0]
 800e996:	6801      	ldr	r1, [r0, #0]
 800e998:	115e      	asrs	r6, r3, #5
 800e99a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e99e:	f013 031f 	ands.w	r3, r3, #31
 800e9a2:	b087      	sub	sp, #28
 800e9a4:	bf18      	it	ne
 800e9a6:	3604      	addne	r6, #4
 800e9a8:	2500      	movs	r5, #0
 800e9aa:	1f37      	subs	r7, r6, #4
 800e9ac:	4682      	mov	sl, r0
 800e9ae:	4690      	mov	r8, r2
 800e9b0:	9301      	str	r3, [sp, #4]
 800e9b2:	f846 5c04 	str.w	r5, [r6, #-4]
 800e9b6:	46b9      	mov	r9, r7
 800e9b8:	463c      	mov	r4, r7
 800e9ba:	9502      	str	r5, [sp, #8]
 800e9bc:	46ab      	mov	fp, r5
 800e9be:	784a      	ldrb	r2, [r1, #1]
 800e9c0:	1c4b      	adds	r3, r1, #1
 800e9c2:	9303      	str	r3, [sp, #12]
 800e9c4:	b342      	cbz	r2, 800ea18 <__hexnan+0x88>
 800e9c6:	4610      	mov	r0, r2
 800e9c8:	9105      	str	r1, [sp, #20]
 800e9ca:	9204      	str	r2, [sp, #16]
 800e9cc:	f7ff fd5f 	bl	800e48e <__hexdig_fun>
 800e9d0:	2800      	cmp	r0, #0
 800e9d2:	d14f      	bne.n	800ea74 <__hexnan+0xe4>
 800e9d4:	9a04      	ldr	r2, [sp, #16]
 800e9d6:	9905      	ldr	r1, [sp, #20]
 800e9d8:	2a20      	cmp	r2, #32
 800e9da:	d818      	bhi.n	800ea0e <__hexnan+0x7e>
 800e9dc:	9b02      	ldr	r3, [sp, #8]
 800e9de:	459b      	cmp	fp, r3
 800e9e0:	dd13      	ble.n	800ea0a <__hexnan+0x7a>
 800e9e2:	454c      	cmp	r4, r9
 800e9e4:	d206      	bcs.n	800e9f4 <__hexnan+0x64>
 800e9e6:	2d07      	cmp	r5, #7
 800e9e8:	dc04      	bgt.n	800e9f4 <__hexnan+0x64>
 800e9ea:	462a      	mov	r2, r5
 800e9ec:	4649      	mov	r1, r9
 800e9ee:	4620      	mov	r0, r4
 800e9f0:	f7ff ffa8 	bl	800e944 <L_shift>
 800e9f4:	4544      	cmp	r4, r8
 800e9f6:	d950      	bls.n	800ea9a <__hexnan+0x10a>
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	f1a4 0904 	sub.w	r9, r4, #4
 800e9fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800ea02:	f8cd b008 	str.w	fp, [sp, #8]
 800ea06:	464c      	mov	r4, r9
 800ea08:	461d      	mov	r5, r3
 800ea0a:	9903      	ldr	r1, [sp, #12]
 800ea0c:	e7d7      	b.n	800e9be <__hexnan+0x2e>
 800ea0e:	2a29      	cmp	r2, #41	; 0x29
 800ea10:	d156      	bne.n	800eac0 <__hexnan+0x130>
 800ea12:	3102      	adds	r1, #2
 800ea14:	f8ca 1000 	str.w	r1, [sl]
 800ea18:	f1bb 0f00 	cmp.w	fp, #0
 800ea1c:	d050      	beq.n	800eac0 <__hexnan+0x130>
 800ea1e:	454c      	cmp	r4, r9
 800ea20:	d206      	bcs.n	800ea30 <__hexnan+0xa0>
 800ea22:	2d07      	cmp	r5, #7
 800ea24:	dc04      	bgt.n	800ea30 <__hexnan+0xa0>
 800ea26:	462a      	mov	r2, r5
 800ea28:	4649      	mov	r1, r9
 800ea2a:	4620      	mov	r0, r4
 800ea2c:	f7ff ff8a 	bl	800e944 <L_shift>
 800ea30:	4544      	cmp	r4, r8
 800ea32:	d934      	bls.n	800ea9e <__hexnan+0x10e>
 800ea34:	f1a8 0204 	sub.w	r2, r8, #4
 800ea38:	4623      	mov	r3, r4
 800ea3a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ea3e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ea42:	429f      	cmp	r7, r3
 800ea44:	d2f9      	bcs.n	800ea3a <__hexnan+0xaa>
 800ea46:	1b3b      	subs	r3, r7, r4
 800ea48:	f023 0303 	bic.w	r3, r3, #3
 800ea4c:	3304      	adds	r3, #4
 800ea4e:	3401      	adds	r4, #1
 800ea50:	3e03      	subs	r6, #3
 800ea52:	42b4      	cmp	r4, r6
 800ea54:	bf88      	it	hi
 800ea56:	2304      	movhi	r3, #4
 800ea58:	4443      	add	r3, r8
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	f843 2b04 	str.w	r2, [r3], #4
 800ea60:	429f      	cmp	r7, r3
 800ea62:	d2fb      	bcs.n	800ea5c <__hexnan+0xcc>
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	b91b      	cbnz	r3, 800ea70 <__hexnan+0xe0>
 800ea68:	4547      	cmp	r7, r8
 800ea6a:	d127      	bne.n	800eabc <__hexnan+0x12c>
 800ea6c:	2301      	movs	r3, #1
 800ea6e:	603b      	str	r3, [r7, #0]
 800ea70:	2005      	movs	r0, #5
 800ea72:	e026      	b.n	800eac2 <__hexnan+0x132>
 800ea74:	3501      	adds	r5, #1
 800ea76:	2d08      	cmp	r5, #8
 800ea78:	f10b 0b01 	add.w	fp, fp, #1
 800ea7c:	dd06      	ble.n	800ea8c <__hexnan+0xfc>
 800ea7e:	4544      	cmp	r4, r8
 800ea80:	d9c3      	bls.n	800ea0a <__hexnan+0x7a>
 800ea82:	2300      	movs	r3, #0
 800ea84:	f844 3c04 	str.w	r3, [r4, #-4]
 800ea88:	2501      	movs	r5, #1
 800ea8a:	3c04      	subs	r4, #4
 800ea8c:	6822      	ldr	r2, [r4, #0]
 800ea8e:	f000 000f 	and.w	r0, r0, #15
 800ea92:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ea96:	6022      	str	r2, [r4, #0]
 800ea98:	e7b7      	b.n	800ea0a <__hexnan+0x7a>
 800ea9a:	2508      	movs	r5, #8
 800ea9c:	e7b5      	b.n	800ea0a <__hexnan+0x7a>
 800ea9e:	9b01      	ldr	r3, [sp, #4]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d0df      	beq.n	800ea64 <__hexnan+0xd4>
 800eaa4:	f04f 32ff 	mov.w	r2, #4294967295
 800eaa8:	f1c3 0320 	rsb	r3, r3, #32
 800eaac:	fa22 f303 	lsr.w	r3, r2, r3
 800eab0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800eab4:	401a      	ands	r2, r3
 800eab6:	f846 2c04 	str.w	r2, [r6, #-4]
 800eaba:	e7d3      	b.n	800ea64 <__hexnan+0xd4>
 800eabc:	3f04      	subs	r7, #4
 800eabe:	e7d1      	b.n	800ea64 <__hexnan+0xd4>
 800eac0:	2004      	movs	r0, #4
 800eac2:	b007      	add	sp, #28
 800eac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eac8 <_localeconv_r>:
 800eac8:	4800      	ldr	r0, [pc, #0]	; (800eacc <_localeconv_r+0x4>)
 800eaca:	4770      	bx	lr
 800eacc:	24000218 	.word	0x24000218

0800ead0 <__retarget_lock_init_recursive>:
 800ead0:	4770      	bx	lr

0800ead2 <__retarget_lock_acquire_recursive>:
 800ead2:	4770      	bx	lr

0800ead4 <__retarget_lock_release_recursive>:
 800ead4:	4770      	bx	lr

0800ead6 <__swhatbuf_r>:
 800ead6:	b570      	push	{r4, r5, r6, lr}
 800ead8:	460e      	mov	r6, r1
 800eada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eade:	2900      	cmp	r1, #0
 800eae0:	b096      	sub	sp, #88	; 0x58
 800eae2:	4614      	mov	r4, r2
 800eae4:	461d      	mov	r5, r3
 800eae6:	da07      	bge.n	800eaf8 <__swhatbuf_r+0x22>
 800eae8:	2300      	movs	r3, #0
 800eaea:	602b      	str	r3, [r5, #0]
 800eaec:	89b3      	ldrh	r3, [r6, #12]
 800eaee:	061a      	lsls	r2, r3, #24
 800eaf0:	d410      	bmi.n	800eb14 <__swhatbuf_r+0x3e>
 800eaf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eaf6:	e00e      	b.n	800eb16 <__swhatbuf_r+0x40>
 800eaf8:	466a      	mov	r2, sp
 800eafa:	f000 ff7b 	bl	800f9f4 <_fstat_r>
 800eafe:	2800      	cmp	r0, #0
 800eb00:	dbf2      	blt.n	800eae8 <__swhatbuf_r+0x12>
 800eb02:	9a01      	ldr	r2, [sp, #4]
 800eb04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eb08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eb0c:	425a      	negs	r2, r3
 800eb0e:	415a      	adcs	r2, r3
 800eb10:	602a      	str	r2, [r5, #0]
 800eb12:	e7ee      	b.n	800eaf2 <__swhatbuf_r+0x1c>
 800eb14:	2340      	movs	r3, #64	; 0x40
 800eb16:	2000      	movs	r0, #0
 800eb18:	6023      	str	r3, [r4, #0]
 800eb1a:	b016      	add	sp, #88	; 0x58
 800eb1c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800eb20 <__smakebuf_r>:
 800eb20:	898b      	ldrh	r3, [r1, #12]
 800eb22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eb24:	079d      	lsls	r5, r3, #30
 800eb26:	4606      	mov	r6, r0
 800eb28:	460c      	mov	r4, r1
 800eb2a:	d507      	bpl.n	800eb3c <__smakebuf_r+0x1c>
 800eb2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eb30:	6023      	str	r3, [r4, #0]
 800eb32:	6123      	str	r3, [r4, #16]
 800eb34:	2301      	movs	r3, #1
 800eb36:	6163      	str	r3, [r4, #20]
 800eb38:	b002      	add	sp, #8
 800eb3a:	bd70      	pop	{r4, r5, r6, pc}
 800eb3c:	ab01      	add	r3, sp, #4
 800eb3e:	466a      	mov	r2, sp
 800eb40:	f7ff ffc9 	bl	800ead6 <__swhatbuf_r>
 800eb44:	9900      	ldr	r1, [sp, #0]
 800eb46:	4605      	mov	r5, r0
 800eb48:	4630      	mov	r0, r6
 800eb4a:	f7fc fcbb 	bl	800b4c4 <_malloc_r>
 800eb4e:	b948      	cbnz	r0, 800eb64 <__smakebuf_r+0x44>
 800eb50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb54:	059a      	lsls	r2, r3, #22
 800eb56:	d4ef      	bmi.n	800eb38 <__smakebuf_r+0x18>
 800eb58:	f023 0303 	bic.w	r3, r3, #3
 800eb5c:	f043 0302 	orr.w	r3, r3, #2
 800eb60:	81a3      	strh	r3, [r4, #12]
 800eb62:	e7e3      	b.n	800eb2c <__smakebuf_r+0xc>
 800eb64:	4b0d      	ldr	r3, [pc, #52]	; (800eb9c <__smakebuf_r+0x7c>)
 800eb66:	62b3      	str	r3, [r6, #40]	; 0x28
 800eb68:	89a3      	ldrh	r3, [r4, #12]
 800eb6a:	6020      	str	r0, [r4, #0]
 800eb6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb70:	81a3      	strh	r3, [r4, #12]
 800eb72:	9b00      	ldr	r3, [sp, #0]
 800eb74:	6163      	str	r3, [r4, #20]
 800eb76:	9b01      	ldr	r3, [sp, #4]
 800eb78:	6120      	str	r0, [r4, #16]
 800eb7a:	b15b      	cbz	r3, 800eb94 <__smakebuf_r+0x74>
 800eb7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb80:	4630      	mov	r0, r6
 800eb82:	f000 ff49 	bl	800fa18 <_isatty_r>
 800eb86:	b128      	cbz	r0, 800eb94 <__smakebuf_r+0x74>
 800eb88:	89a3      	ldrh	r3, [r4, #12]
 800eb8a:	f023 0303 	bic.w	r3, r3, #3
 800eb8e:	f043 0301 	orr.w	r3, r3, #1
 800eb92:	81a3      	strh	r3, [r4, #12]
 800eb94:	89a0      	ldrh	r0, [r4, #12]
 800eb96:	4305      	orrs	r5, r0
 800eb98:	81a5      	strh	r5, [r4, #12]
 800eb9a:	e7cd      	b.n	800eb38 <__smakebuf_r+0x18>
 800eb9c:	0800e249 	.word	0x0800e249

0800eba0 <__ascii_mbtowc>:
 800eba0:	b082      	sub	sp, #8
 800eba2:	b901      	cbnz	r1, 800eba6 <__ascii_mbtowc+0x6>
 800eba4:	a901      	add	r1, sp, #4
 800eba6:	b142      	cbz	r2, 800ebba <__ascii_mbtowc+0x1a>
 800eba8:	b14b      	cbz	r3, 800ebbe <__ascii_mbtowc+0x1e>
 800ebaa:	7813      	ldrb	r3, [r2, #0]
 800ebac:	600b      	str	r3, [r1, #0]
 800ebae:	7812      	ldrb	r2, [r2, #0]
 800ebb0:	1e10      	subs	r0, r2, #0
 800ebb2:	bf18      	it	ne
 800ebb4:	2001      	movne	r0, #1
 800ebb6:	b002      	add	sp, #8
 800ebb8:	4770      	bx	lr
 800ebba:	4610      	mov	r0, r2
 800ebbc:	e7fb      	b.n	800ebb6 <__ascii_mbtowc+0x16>
 800ebbe:	f06f 0001 	mvn.w	r0, #1
 800ebc2:	e7f8      	b.n	800ebb6 <__ascii_mbtowc+0x16>

0800ebc4 <__malloc_lock>:
 800ebc4:	4801      	ldr	r0, [pc, #4]	; (800ebcc <__malloc_lock+0x8>)
 800ebc6:	f7ff bf84 	b.w	800ead2 <__retarget_lock_acquire_recursive>
 800ebca:	bf00      	nop
 800ebcc:	24000cc4 	.word	0x24000cc4

0800ebd0 <__malloc_unlock>:
 800ebd0:	4801      	ldr	r0, [pc, #4]	; (800ebd8 <__malloc_unlock+0x8>)
 800ebd2:	f7ff bf7f 	b.w	800ead4 <__retarget_lock_release_recursive>
 800ebd6:	bf00      	nop
 800ebd8:	24000cc4 	.word	0x24000cc4

0800ebdc <_Balloc>:
 800ebdc:	b570      	push	{r4, r5, r6, lr}
 800ebde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ebe0:	4604      	mov	r4, r0
 800ebe2:	460d      	mov	r5, r1
 800ebe4:	b976      	cbnz	r6, 800ec04 <_Balloc+0x28>
 800ebe6:	2010      	movs	r0, #16
 800ebe8:	f7fc fbdc 	bl	800b3a4 <malloc>
 800ebec:	4602      	mov	r2, r0
 800ebee:	6260      	str	r0, [r4, #36]	; 0x24
 800ebf0:	b920      	cbnz	r0, 800ebfc <_Balloc+0x20>
 800ebf2:	4b18      	ldr	r3, [pc, #96]	; (800ec54 <_Balloc+0x78>)
 800ebf4:	4818      	ldr	r0, [pc, #96]	; (800ec58 <_Balloc+0x7c>)
 800ebf6:	2166      	movs	r1, #102	; 0x66
 800ebf8:	f7fc fb7a 	bl	800b2f0 <__assert_func>
 800ebfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec00:	6006      	str	r6, [r0, #0]
 800ec02:	60c6      	str	r6, [r0, #12]
 800ec04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ec06:	68f3      	ldr	r3, [r6, #12]
 800ec08:	b183      	cbz	r3, 800ec2c <_Balloc+0x50>
 800ec0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec0c:	68db      	ldr	r3, [r3, #12]
 800ec0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ec12:	b9b8      	cbnz	r0, 800ec44 <_Balloc+0x68>
 800ec14:	2101      	movs	r1, #1
 800ec16:	fa01 f605 	lsl.w	r6, r1, r5
 800ec1a:	1d72      	adds	r2, r6, #5
 800ec1c:	0092      	lsls	r2, r2, #2
 800ec1e:	4620      	mov	r0, r4
 800ec20:	f000 fc98 	bl	800f554 <_calloc_r>
 800ec24:	b160      	cbz	r0, 800ec40 <_Balloc+0x64>
 800ec26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ec2a:	e00e      	b.n	800ec4a <_Balloc+0x6e>
 800ec2c:	2221      	movs	r2, #33	; 0x21
 800ec2e:	2104      	movs	r1, #4
 800ec30:	4620      	mov	r0, r4
 800ec32:	f000 fc8f 	bl	800f554 <_calloc_r>
 800ec36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec38:	60f0      	str	r0, [r6, #12]
 800ec3a:	68db      	ldr	r3, [r3, #12]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d1e4      	bne.n	800ec0a <_Balloc+0x2e>
 800ec40:	2000      	movs	r0, #0
 800ec42:	bd70      	pop	{r4, r5, r6, pc}
 800ec44:	6802      	ldr	r2, [r0, #0]
 800ec46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ec50:	e7f7      	b.n	800ec42 <_Balloc+0x66>
 800ec52:	bf00      	nop
 800ec54:	0801069e 	.word	0x0801069e
 800ec58:	08010808 	.word	0x08010808

0800ec5c <_Bfree>:
 800ec5c:	b570      	push	{r4, r5, r6, lr}
 800ec5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ec60:	4605      	mov	r5, r0
 800ec62:	460c      	mov	r4, r1
 800ec64:	b976      	cbnz	r6, 800ec84 <_Bfree+0x28>
 800ec66:	2010      	movs	r0, #16
 800ec68:	f7fc fb9c 	bl	800b3a4 <malloc>
 800ec6c:	4602      	mov	r2, r0
 800ec6e:	6268      	str	r0, [r5, #36]	; 0x24
 800ec70:	b920      	cbnz	r0, 800ec7c <_Bfree+0x20>
 800ec72:	4b09      	ldr	r3, [pc, #36]	; (800ec98 <_Bfree+0x3c>)
 800ec74:	4809      	ldr	r0, [pc, #36]	; (800ec9c <_Bfree+0x40>)
 800ec76:	218a      	movs	r1, #138	; 0x8a
 800ec78:	f7fc fb3a 	bl	800b2f0 <__assert_func>
 800ec7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec80:	6006      	str	r6, [r0, #0]
 800ec82:	60c6      	str	r6, [r0, #12]
 800ec84:	b13c      	cbz	r4, 800ec96 <_Bfree+0x3a>
 800ec86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ec88:	6862      	ldr	r2, [r4, #4]
 800ec8a:	68db      	ldr	r3, [r3, #12]
 800ec8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ec90:	6021      	str	r1, [r4, #0]
 800ec92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ec96:	bd70      	pop	{r4, r5, r6, pc}
 800ec98:	0801069e 	.word	0x0801069e
 800ec9c:	08010808 	.word	0x08010808

0800eca0 <__multadd>:
 800eca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eca4:	690e      	ldr	r6, [r1, #16]
 800eca6:	4607      	mov	r7, r0
 800eca8:	4698      	mov	r8, r3
 800ecaa:	460c      	mov	r4, r1
 800ecac:	f101 0014 	add.w	r0, r1, #20
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	6805      	ldr	r5, [r0, #0]
 800ecb4:	b2a9      	uxth	r1, r5
 800ecb6:	fb02 8101 	mla	r1, r2, r1, r8
 800ecba:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ecbe:	0c2d      	lsrs	r5, r5, #16
 800ecc0:	fb02 c505 	mla	r5, r2, r5, ip
 800ecc4:	b289      	uxth	r1, r1
 800ecc6:	3301      	adds	r3, #1
 800ecc8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800eccc:	429e      	cmp	r6, r3
 800ecce:	f840 1b04 	str.w	r1, [r0], #4
 800ecd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ecd6:	dcec      	bgt.n	800ecb2 <__multadd+0x12>
 800ecd8:	f1b8 0f00 	cmp.w	r8, #0
 800ecdc:	d022      	beq.n	800ed24 <__multadd+0x84>
 800ecde:	68a3      	ldr	r3, [r4, #8]
 800ece0:	42b3      	cmp	r3, r6
 800ece2:	dc19      	bgt.n	800ed18 <__multadd+0x78>
 800ece4:	6861      	ldr	r1, [r4, #4]
 800ece6:	4638      	mov	r0, r7
 800ece8:	3101      	adds	r1, #1
 800ecea:	f7ff ff77 	bl	800ebdc <_Balloc>
 800ecee:	4605      	mov	r5, r0
 800ecf0:	b928      	cbnz	r0, 800ecfe <__multadd+0x5e>
 800ecf2:	4602      	mov	r2, r0
 800ecf4:	4b0d      	ldr	r3, [pc, #52]	; (800ed2c <__multadd+0x8c>)
 800ecf6:	480e      	ldr	r0, [pc, #56]	; (800ed30 <__multadd+0x90>)
 800ecf8:	21b5      	movs	r1, #181	; 0xb5
 800ecfa:	f7fc faf9 	bl	800b2f0 <__assert_func>
 800ecfe:	6922      	ldr	r2, [r4, #16]
 800ed00:	3202      	adds	r2, #2
 800ed02:	f104 010c 	add.w	r1, r4, #12
 800ed06:	0092      	lsls	r2, r2, #2
 800ed08:	300c      	adds	r0, #12
 800ed0a:	f7fc fb5b 	bl	800b3c4 <memcpy>
 800ed0e:	4621      	mov	r1, r4
 800ed10:	4638      	mov	r0, r7
 800ed12:	f7ff ffa3 	bl	800ec5c <_Bfree>
 800ed16:	462c      	mov	r4, r5
 800ed18:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ed1c:	3601      	adds	r6, #1
 800ed1e:	f8c3 8014 	str.w	r8, [r3, #20]
 800ed22:	6126      	str	r6, [r4, #16]
 800ed24:	4620      	mov	r0, r4
 800ed26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed2a:	bf00      	nop
 800ed2c:	08010714 	.word	0x08010714
 800ed30:	08010808 	.word	0x08010808

0800ed34 <__s2b>:
 800ed34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed38:	460c      	mov	r4, r1
 800ed3a:	4615      	mov	r5, r2
 800ed3c:	461f      	mov	r7, r3
 800ed3e:	2209      	movs	r2, #9
 800ed40:	3308      	adds	r3, #8
 800ed42:	4606      	mov	r6, r0
 800ed44:	fb93 f3f2 	sdiv	r3, r3, r2
 800ed48:	2100      	movs	r1, #0
 800ed4a:	2201      	movs	r2, #1
 800ed4c:	429a      	cmp	r2, r3
 800ed4e:	db09      	blt.n	800ed64 <__s2b+0x30>
 800ed50:	4630      	mov	r0, r6
 800ed52:	f7ff ff43 	bl	800ebdc <_Balloc>
 800ed56:	b940      	cbnz	r0, 800ed6a <__s2b+0x36>
 800ed58:	4602      	mov	r2, r0
 800ed5a:	4b19      	ldr	r3, [pc, #100]	; (800edc0 <__s2b+0x8c>)
 800ed5c:	4819      	ldr	r0, [pc, #100]	; (800edc4 <__s2b+0x90>)
 800ed5e:	21ce      	movs	r1, #206	; 0xce
 800ed60:	f7fc fac6 	bl	800b2f0 <__assert_func>
 800ed64:	0052      	lsls	r2, r2, #1
 800ed66:	3101      	adds	r1, #1
 800ed68:	e7f0      	b.n	800ed4c <__s2b+0x18>
 800ed6a:	9b08      	ldr	r3, [sp, #32]
 800ed6c:	6143      	str	r3, [r0, #20]
 800ed6e:	2d09      	cmp	r5, #9
 800ed70:	f04f 0301 	mov.w	r3, #1
 800ed74:	6103      	str	r3, [r0, #16]
 800ed76:	dd16      	ble.n	800eda6 <__s2b+0x72>
 800ed78:	f104 0909 	add.w	r9, r4, #9
 800ed7c:	46c8      	mov	r8, r9
 800ed7e:	442c      	add	r4, r5
 800ed80:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ed84:	4601      	mov	r1, r0
 800ed86:	3b30      	subs	r3, #48	; 0x30
 800ed88:	220a      	movs	r2, #10
 800ed8a:	4630      	mov	r0, r6
 800ed8c:	f7ff ff88 	bl	800eca0 <__multadd>
 800ed90:	45a0      	cmp	r8, r4
 800ed92:	d1f5      	bne.n	800ed80 <__s2b+0x4c>
 800ed94:	f1a5 0408 	sub.w	r4, r5, #8
 800ed98:	444c      	add	r4, r9
 800ed9a:	1b2d      	subs	r5, r5, r4
 800ed9c:	1963      	adds	r3, r4, r5
 800ed9e:	42bb      	cmp	r3, r7
 800eda0:	db04      	blt.n	800edac <__s2b+0x78>
 800eda2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eda6:	340a      	adds	r4, #10
 800eda8:	2509      	movs	r5, #9
 800edaa:	e7f6      	b.n	800ed9a <__s2b+0x66>
 800edac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800edb0:	4601      	mov	r1, r0
 800edb2:	3b30      	subs	r3, #48	; 0x30
 800edb4:	220a      	movs	r2, #10
 800edb6:	4630      	mov	r0, r6
 800edb8:	f7ff ff72 	bl	800eca0 <__multadd>
 800edbc:	e7ee      	b.n	800ed9c <__s2b+0x68>
 800edbe:	bf00      	nop
 800edc0:	08010714 	.word	0x08010714
 800edc4:	08010808 	.word	0x08010808

0800edc8 <__hi0bits>:
 800edc8:	0c03      	lsrs	r3, r0, #16
 800edca:	041b      	lsls	r3, r3, #16
 800edcc:	b9d3      	cbnz	r3, 800ee04 <__hi0bits+0x3c>
 800edce:	0400      	lsls	r0, r0, #16
 800edd0:	2310      	movs	r3, #16
 800edd2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800edd6:	bf04      	itt	eq
 800edd8:	0200      	lsleq	r0, r0, #8
 800edda:	3308      	addeq	r3, #8
 800eddc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ede0:	bf04      	itt	eq
 800ede2:	0100      	lsleq	r0, r0, #4
 800ede4:	3304      	addeq	r3, #4
 800ede6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800edea:	bf04      	itt	eq
 800edec:	0080      	lsleq	r0, r0, #2
 800edee:	3302      	addeq	r3, #2
 800edf0:	2800      	cmp	r0, #0
 800edf2:	db05      	blt.n	800ee00 <__hi0bits+0x38>
 800edf4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800edf8:	f103 0301 	add.w	r3, r3, #1
 800edfc:	bf08      	it	eq
 800edfe:	2320      	moveq	r3, #32
 800ee00:	4618      	mov	r0, r3
 800ee02:	4770      	bx	lr
 800ee04:	2300      	movs	r3, #0
 800ee06:	e7e4      	b.n	800edd2 <__hi0bits+0xa>

0800ee08 <__lo0bits>:
 800ee08:	6803      	ldr	r3, [r0, #0]
 800ee0a:	f013 0207 	ands.w	r2, r3, #7
 800ee0e:	4601      	mov	r1, r0
 800ee10:	d00b      	beq.n	800ee2a <__lo0bits+0x22>
 800ee12:	07da      	lsls	r2, r3, #31
 800ee14:	d424      	bmi.n	800ee60 <__lo0bits+0x58>
 800ee16:	0798      	lsls	r0, r3, #30
 800ee18:	bf49      	itett	mi
 800ee1a:	085b      	lsrmi	r3, r3, #1
 800ee1c:	089b      	lsrpl	r3, r3, #2
 800ee1e:	2001      	movmi	r0, #1
 800ee20:	600b      	strmi	r3, [r1, #0]
 800ee22:	bf5c      	itt	pl
 800ee24:	600b      	strpl	r3, [r1, #0]
 800ee26:	2002      	movpl	r0, #2
 800ee28:	4770      	bx	lr
 800ee2a:	b298      	uxth	r0, r3
 800ee2c:	b9b0      	cbnz	r0, 800ee5c <__lo0bits+0x54>
 800ee2e:	0c1b      	lsrs	r3, r3, #16
 800ee30:	2010      	movs	r0, #16
 800ee32:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ee36:	bf04      	itt	eq
 800ee38:	0a1b      	lsreq	r3, r3, #8
 800ee3a:	3008      	addeq	r0, #8
 800ee3c:	071a      	lsls	r2, r3, #28
 800ee3e:	bf04      	itt	eq
 800ee40:	091b      	lsreq	r3, r3, #4
 800ee42:	3004      	addeq	r0, #4
 800ee44:	079a      	lsls	r2, r3, #30
 800ee46:	bf04      	itt	eq
 800ee48:	089b      	lsreq	r3, r3, #2
 800ee4a:	3002      	addeq	r0, #2
 800ee4c:	07da      	lsls	r2, r3, #31
 800ee4e:	d403      	bmi.n	800ee58 <__lo0bits+0x50>
 800ee50:	085b      	lsrs	r3, r3, #1
 800ee52:	f100 0001 	add.w	r0, r0, #1
 800ee56:	d005      	beq.n	800ee64 <__lo0bits+0x5c>
 800ee58:	600b      	str	r3, [r1, #0]
 800ee5a:	4770      	bx	lr
 800ee5c:	4610      	mov	r0, r2
 800ee5e:	e7e8      	b.n	800ee32 <__lo0bits+0x2a>
 800ee60:	2000      	movs	r0, #0
 800ee62:	4770      	bx	lr
 800ee64:	2020      	movs	r0, #32
 800ee66:	4770      	bx	lr

0800ee68 <__i2b>:
 800ee68:	b510      	push	{r4, lr}
 800ee6a:	460c      	mov	r4, r1
 800ee6c:	2101      	movs	r1, #1
 800ee6e:	f7ff feb5 	bl	800ebdc <_Balloc>
 800ee72:	4602      	mov	r2, r0
 800ee74:	b928      	cbnz	r0, 800ee82 <__i2b+0x1a>
 800ee76:	4b05      	ldr	r3, [pc, #20]	; (800ee8c <__i2b+0x24>)
 800ee78:	4805      	ldr	r0, [pc, #20]	; (800ee90 <__i2b+0x28>)
 800ee7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ee7e:	f7fc fa37 	bl	800b2f0 <__assert_func>
 800ee82:	2301      	movs	r3, #1
 800ee84:	6144      	str	r4, [r0, #20]
 800ee86:	6103      	str	r3, [r0, #16]
 800ee88:	bd10      	pop	{r4, pc}
 800ee8a:	bf00      	nop
 800ee8c:	08010714 	.word	0x08010714
 800ee90:	08010808 	.word	0x08010808

0800ee94 <__multiply>:
 800ee94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee98:	4614      	mov	r4, r2
 800ee9a:	690a      	ldr	r2, [r1, #16]
 800ee9c:	6923      	ldr	r3, [r4, #16]
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	bfb8      	it	lt
 800eea2:	460b      	movlt	r3, r1
 800eea4:	460d      	mov	r5, r1
 800eea6:	bfbc      	itt	lt
 800eea8:	4625      	movlt	r5, r4
 800eeaa:	461c      	movlt	r4, r3
 800eeac:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800eeb0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800eeb4:	68ab      	ldr	r3, [r5, #8]
 800eeb6:	6869      	ldr	r1, [r5, #4]
 800eeb8:	eb0a 0709 	add.w	r7, sl, r9
 800eebc:	42bb      	cmp	r3, r7
 800eebe:	b085      	sub	sp, #20
 800eec0:	bfb8      	it	lt
 800eec2:	3101      	addlt	r1, #1
 800eec4:	f7ff fe8a 	bl	800ebdc <_Balloc>
 800eec8:	b930      	cbnz	r0, 800eed8 <__multiply+0x44>
 800eeca:	4602      	mov	r2, r0
 800eecc:	4b42      	ldr	r3, [pc, #264]	; (800efd8 <__multiply+0x144>)
 800eece:	4843      	ldr	r0, [pc, #268]	; (800efdc <__multiply+0x148>)
 800eed0:	f240 115d 	movw	r1, #349	; 0x15d
 800eed4:	f7fc fa0c 	bl	800b2f0 <__assert_func>
 800eed8:	f100 0614 	add.w	r6, r0, #20
 800eedc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800eee0:	4633      	mov	r3, r6
 800eee2:	2200      	movs	r2, #0
 800eee4:	4543      	cmp	r3, r8
 800eee6:	d31e      	bcc.n	800ef26 <__multiply+0x92>
 800eee8:	f105 0c14 	add.w	ip, r5, #20
 800eeec:	f104 0314 	add.w	r3, r4, #20
 800eef0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800eef4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800eef8:	9202      	str	r2, [sp, #8]
 800eefa:	ebac 0205 	sub.w	r2, ip, r5
 800eefe:	3a15      	subs	r2, #21
 800ef00:	f022 0203 	bic.w	r2, r2, #3
 800ef04:	3204      	adds	r2, #4
 800ef06:	f105 0115 	add.w	r1, r5, #21
 800ef0a:	458c      	cmp	ip, r1
 800ef0c:	bf38      	it	cc
 800ef0e:	2204      	movcc	r2, #4
 800ef10:	9201      	str	r2, [sp, #4]
 800ef12:	9a02      	ldr	r2, [sp, #8]
 800ef14:	9303      	str	r3, [sp, #12]
 800ef16:	429a      	cmp	r2, r3
 800ef18:	d808      	bhi.n	800ef2c <__multiply+0x98>
 800ef1a:	2f00      	cmp	r7, #0
 800ef1c:	dc55      	bgt.n	800efca <__multiply+0x136>
 800ef1e:	6107      	str	r7, [r0, #16]
 800ef20:	b005      	add	sp, #20
 800ef22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef26:	f843 2b04 	str.w	r2, [r3], #4
 800ef2a:	e7db      	b.n	800eee4 <__multiply+0x50>
 800ef2c:	f8b3 a000 	ldrh.w	sl, [r3]
 800ef30:	f1ba 0f00 	cmp.w	sl, #0
 800ef34:	d020      	beq.n	800ef78 <__multiply+0xe4>
 800ef36:	f105 0e14 	add.w	lr, r5, #20
 800ef3a:	46b1      	mov	r9, r6
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ef42:	f8d9 b000 	ldr.w	fp, [r9]
 800ef46:	b2a1      	uxth	r1, r4
 800ef48:	fa1f fb8b 	uxth.w	fp, fp
 800ef4c:	fb0a b101 	mla	r1, sl, r1, fp
 800ef50:	4411      	add	r1, r2
 800ef52:	f8d9 2000 	ldr.w	r2, [r9]
 800ef56:	0c24      	lsrs	r4, r4, #16
 800ef58:	0c12      	lsrs	r2, r2, #16
 800ef5a:	fb0a 2404 	mla	r4, sl, r4, r2
 800ef5e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ef62:	b289      	uxth	r1, r1
 800ef64:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ef68:	45f4      	cmp	ip, lr
 800ef6a:	f849 1b04 	str.w	r1, [r9], #4
 800ef6e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ef72:	d8e4      	bhi.n	800ef3e <__multiply+0xaa>
 800ef74:	9901      	ldr	r1, [sp, #4]
 800ef76:	5072      	str	r2, [r6, r1]
 800ef78:	9a03      	ldr	r2, [sp, #12]
 800ef7a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ef7e:	3304      	adds	r3, #4
 800ef80:	f1b9 0f00 	cmp.w	r9, #0
 800ef84:	d01f      	beq.n	800efc6 <__multiply+0x132>
 800ef86:	6834      	ldr	r4, [r6, #0]
 800ef88:	f105 0114 	add.w	r1, r5, #20
 800ef8c:	46b6      	mov	lr, r6
 800ef8e:	f04f 0a00 	mov.w	sl, #0
 800ef92:	880a      	ldrh	r2, [r1, #0]
 800ef94:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ef98:	fb09 b202 	mla	r2, r9, r2, fp
 800ef9c:	4492      	add	sl, r2
 800ef9e:	b2a4      	uxth	r4, r4
 800efa0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800efa4:	f84e 4b04 	str.w	r4, [lr], #4
 800efa8:	f851 4b04 	ldr.w	r4, [r1], #4
 800efac:	f8be 2000 	ldrh.w	r2, [lr]
 800efb0:	0c24      	lsrs	r4, r4, #16
 800efb2:	fb09 2404 	mla	r4, r9, r4, r2
 800efb6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800efba:	458c      	cmp	ip, r1
 800efbc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800efc0:	d8e7      	bhi.n	800ef92 <__multiply+0xfe>
 800efc2:	9a01      	ldr	r2, [sp, #4]
 800efc4:	50b4      	str	r4, [r6, r2]
 800efc6:	3604      	adds	r6, #4
 800efc8:	e7a3      	b.n	800ef12 <__multiply+0x7e>
 800efca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d1a5      	bne.n	800ef1e <__multiply+0x8a>
 800efd2:	3f01      	subs	r7, #1
 800efd4:	e7a1      	b.n	800ef1a <__multiply+0x86>
 800efd6:	bf00      	nop
 800efd8:	08010714 	.word	0x08010714
 800efdc:	08010808 	.word	0x08010808

0800efe0 <__pow5mult>:
 800efe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efe4:	4615      	mov	r5, r2
 800efe6:	f012 0203 	ands.w	r2, r2, #3
 800efea:	4606      	mov	r6, r0
 800efec:	460f      	mov	r7, r1
 800efee:	d007      	beq.n	800f000 <__pow5mult+0x20>
 800eff0:	4c25      	ldr	r4, [pc, #148]	; (800f088 <__pow5mult+0xa8>)
 800eff2:	3a01      	subs	r2, #1
 800eff4:	2300      	movs	r3, #0
 800eff6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800effa:	f7ff fe51 	bl	800eca0 <__multadd>
 800effe:	4607      	mov	r7, r0
 800f000:	10ad      	asrs	r5, r5, #2
 800f002:	d03d      	beq.n	800f080 <__pow5mult+0xa0>
 800f004:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f006:	b97c      	cbnz	r4, 800f028 <__pow5mult+0x48>
 800f008:	2010      	movs	r0, #16
 800f00a:	f7fc f9cb 	bl	800b3a4 <malloc>
 800f00e:	4602      	mov	r2, r0
 800f010:	6270      	str	r0, [r6, #36]	; 0x24
 800f012:	b928      	cbnz	r0, 800f020 <__pow5mult+0x40>
 800f014:	4b1d      	ldr	r3, [pc, #116]	; (800f08c <__pow5mult+0xac>)
 800f016:	481e      	ldr	r0, [pc, #120]	; (800f090 <__pow5mult+0xb0>)
 800f018:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f01c:	f7fc f968 	bl	800b2f0 <__assert_func>
 800f020:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f024:	6004      	str	r4, [r0, #0]
 800f026:	60c4      	str	r4, [r0, #12]
 800f028:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f02c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f030:	b94c      	cbnz	r4, 800f046 <__pow5mult+0x66>
 800f032:	f240 2171 	movw	r1, #625	; 0x271
 800f036:	4630      	mov	r0, r6
 800f038:	f7ff ff16 	bl	800ee68 <__i2b>
 800f03c:	2300      	movs	r3, #0
 800f03e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f042:	4604      	mov	r4, r0
 800f044:	6003      	str	r3, [r0, #0]
 800f046:	f04f 0900 	mov.w	r9, #0
 800f04a:	07eb      	lsls	r3, r5, #31
 800f04c:	d50a      	bpl.n	800f064 <__pow5mult+0x84>
 800f04e:	4639      	mov	r1, r7
 800f050:	4622      	mov	r2, r4
 800f052:	4630      	mov	r0, r6
 800f054:	f7ff ff1e 	bl	800ee94 <__multiply>
 800f058:	4639      	mov	r1, r7
 800f05a:	4680      	mov	r8, r0
 800f05c:	4630      	mov	r0, r6
 800f05e:	f7ff fdfd 	bl	800ec5c <_Bfree>
 800f062:	4647      	mov	r7, r8
 800f064:	106d      	asrs	r5, r5, #1
 800f066:	d00b      	beq.n	800f080 <__pow5mult+0xa0>
 800f068:	6820      	ldr	r0, [r4, #0]
 800f06a:	b938      	cbnz	r0, 800f07c <__pow5mult+0x9c>
 800f06c:	4622      	mov	r2, r4
 800f06e:	4621      	mov	r1, r4
 800f070:	4630      	mov	r0, r6
 800f072:	f7ff ff0f 	bl	800ee94 <__multiply>
 800f076:	6020      	str	r0, [r4, #0]
 800f078:	f8c0 9000 	str.w	r9, [r0]
 800f07c:	4604      	mov	r4, r0
 800f07e:	e7e4      	b.n	800f04a <__pow5mult+0x6a>
 800f080:	4638      	mov	r0, r7
 800f082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f086:	bf00      	nop
 800f088:	08010958 	.word	0x08010958
 800f08c:	0801069e 	.word	0x0801069e
 800f090:	08010808 	.word	0x08010808

0800f094 <__lshift>:
 800f094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f098:	460c      	mov	r4, r1
 800f09a:	6849      	ldr	r1, [r1, #4]
 800f09c:	6923      	ldr	r3, [r4, #16]
 800f09e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f0a2:	68a3      	ldr	r3, [r4, #8]
 800f0a4:	4607      	mov	r7, r0
 800f0a6:	4691      	mov	r9, r2
 800f0a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f0ac:	f108 0601 	add.w	r6, r8, #1
 800f0b0:	42b3      	cmp	r3, r6
 800f0b2:	db0b      	blt.n	800f0cc <__lshift+0x38>
 800f0b4:	4638      	mov	r0, r7
 800f0b6:	f7ff fd91 	bl	800ebdc <_Balloc>
 800f0ba:	4605      	mov	r5, r0
 800f0bc:	b948      	cbnz	r0, 800f0d2 <__lshift+0x3e>
 800f0be:	4602      	mov	r2, r0
 800f0c0:	4b28      	ldr	r3, [pc, #160]	; (800f164 <__lshift+0xd0>)
 800f0c2:	4829      	ldr	r0, [pc, #164]	; (800f168 <__lshift+0xd4>)
 800f0c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f0c8:	f7fc f912 	bl	800b2f0 <__assert_func>
 800f0cc:	3101      	adds	r1, #1
 800f0ce:	005b      	lsls	r3, r3, #1
 800f0d0:	e7ee      	b.n	800f0b0 <__lshift+0x1c>
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	f100 0114 	add.w	r1, r0, #20
 800f0d8:	f100 0210 	add.w	r2, r0, #16
 800f0dc:	4618      	mov	r0, r3
 800f0de:	4553      	cmp	r3, sl
 800f0e0:	db33      	blt.n	800f14a <__lshift+0xb6>
 800f0e2:	6920      	ldr	r0, [r4, #16]
 800f0e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f0e8:	f104 0314 	add.w	r3, r4, #20
 800f0ec:	f019 091f 	ands.w	r9, r9, #31
 800f0f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f0f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f0f8:	d02b      	beq.n	800f152 <__lshift+0xbe>
 800f0fa:	f1c9 0e20 	rsb	lr, r9, #32
 800f0fe:	468a      	mov	sl, r1
 800f100:	2200      	movs	r2, #0
 800f102:	6818      	ldr	r0, [r3, #0]
 800f104:	fa00 f009 	lsl.w	r0, r0, r9
 800f108:	4302      	orrs	r2, r0
 800f10a:	f84a 2b04 	str.w	r2, [sl], #4
 800f10e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f112:	459c      	cmp	ip, r3
 800f114:	fa22 f20e 	lsr.w	r2, r2, lr
 800f118:	d8f3      	bhi.n	800f102 <__lshift+0x6e>
 800f11a:	ebac 0304 	sub.w	r3, ip, r4
 800f11e:	3b15      	subs	r3, #21
 800f120:	f023 0303 	bic.w	r3, r3, #3
 800f124:	3304      	adds	r3, #4
 800f126:	f104 0015 	add.w	r0, r4, #21
 800f12a:	4584      	cmp	ip, r0
 800f12c:	bf38      	it	cc
 800f12e:	2304      	movcc	r3, #4
 800f130:	50ca      	str	r2, [r1, r3]
 800f132:	b10a      	cbz	r2, 800f138 <__lshift+0xa4>
 800f134:	f108 0602 	add.w	r6, r8, #2
 800f138:	3e01      	subs	r6, #1
 800f13a:	4638      	mov	r0, r7
 800f13c:	612e      	str	r6, [r5, #16]
 800f13e:	4621      	mov	r1, r4
 800f140:	f7ff fd8c 	bl	800ec5c <_Bfree>
 800f144:	4628      	mov	r0, r5
 800f146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f14a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f14e:	3301      	adds	r3, #1
 800f150:	e7c5      	b.n	800f0de <__lshift+0x4a>
 800f152:	3904      	subs	r1, #4
 800f154:	f853 2b04 	ldr.w	r2, [r3], #4
 800f158:	f841 2f04 	str.w	r2, [r1, #4]!
 800f15c:	459c      	cmp	ip, r3
 800f15e:	d8f9      	bhi.n	800f154 <__lshift+0xc0>
 800f160:	e7ea      	b.n	800f138 <__lshift+0xa4>
 800f162:	bf00      	nop
 800f164:	08010714 	.word	0x08010714
 800f168:	08010808 	.word	0x08010808

0800f16c <__mcmp>:
 800f16c:	b530      	push	{r4, r5, lr}
 800f16e:	6902      	ldr	r2, [r0, #16]
 800f170:	690c      	ldr	r4, [r1, #16]
 800f172:	1b12      	subs	r2, r2, r4
 800f174:	d10e      	bne.n	800f194 <__mcmp+0x28>
 800f176:	f100 0314 	add.w	r3, r0, #20
 800f17a:	3114      	adds	r1, #20
 800f17c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f180:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f184:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f188:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f18c:	42a5      	cmp	r5, r4
 800f18e:	d003      	beq.n	800f198 <__mcmp+0x2c>
 800f190:	d305      	bcc.n	800f19e <__mcmp+0x32>
 800f192:	2201      	movs	r2, #1
 800f194:	4610      	mov	r0, r2
 800f196:	bd30      	pop	{r4, r5, pc}
 800f198:	4283      	cmp	r3, r0
 800f19a:	d3f3      	bcc.n	800f184 <__mcmp+0x18>
 800f19c:	e7fa      	b.n	800f194 <__mcmp+0x28>
 800f19e:	f04f 32ff 	mov.w	r2, #4294967295
 800f1a2:	e7f7      	b.n	800f194 <__mcmp+0x28>

0800f1a4 <__mdiff>:
 800f1a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1a8:	460c      	mov	r4, r1
 800f1aa:	4606      	mov	r6, r0
 800f1ac:	4611      	mov	r1, r2
 800f1ae:	4620      	mov	r0, r4
 800f1b0:	4617      	mov	r7, r2
 800f1b2:	f7ff ffdb 	bl	800f16c <__mcmp>
 800f1b6:	1e05      	subs	r5, r0, #0
 800f1b8:	d110      	bne.n	800f1dc <__mdiff+0x38>
 800f1ba:	4629      	mov	r1, r5
 800f1bc:	4630      	mov	r0, r6
 800f1be:	f7ff fd0d 	bl	800ebdc <_Balloc>
 800f1c2:	b930      	cbnz	r0, 800f1d2 <__mdiff+0x2e>
 800f1c4:	4b39      	ldr	r3, [pc, #228]	; (800f2ac <__mdiff+0x108>)
 800f1c6:	4602      	mov	r2, r0
 800f1c8:	f240 2132 	movw	r1, #562	; 0x232
 800f1cc:	4838      	ldr	r0, [pc, #224]	; (800f2b0 <__mdiff+0x10c>)
 800f1ce:	f7fc f88f 	bl	800b2f0 <__assert_func>
 800f1d2:	2301      	movs	r3, #1
 800f1d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f1d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1dc:	bfa4      	itt	ge
 800f1de:	463b      	movge	r3, r7
 800f1e0:	4627      	movge	r7, r4
 800f1e2:	4630      	mov	r0, r6
 800f1e4:	6879      	ldr	r1, [r7, #4]
 800f1e6:	bfa6      	itte	ge
 800f1e8:	461c      	movge	r4, r3
 800f1ea:	2500      	movge	r5, #0
 800f1ec:	2501      	movlt	r5, #1
 800f1ee:	f7ff fcf5 	bl	800ebdc <_Balloc>
 800f1f2:	b920      	cbnz	r0, 800f1fe <__mdiff+0x5a>
 800f1f4:	4b2d      	ldr	r3, [pc, #180]	; (800f2ac <__mdiff+0x108>)
 800f1f6:	4602      	mov	r2, r0
 800f1f8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f1fc:	e7e6      	b.n	800f1cc <__mdiff+0x28>
 800f1fe:	693e      	ldr	r6, [r7, #16]
 800f200:	60c5      	str	r5, [r0, #12]
 800f202:	6925      	ldr	r5, [r4, #16]
 800f204:	f107 0114 	add.w	r1, r7, #20
 800f208:	f104 0914 	add.w	r9, r4, #20
 800f20c:	f100 0e14 	add.w	lr, r0, #20
 800f210:	f107 0210 	add.w	r2, r7, #16
 800f214:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800f218:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800f21c:	46f2      	mov	sl, lr
 800f21e:	2700      	movs	r7, #0
 800f220:	f859 3b04 	ldr.w	r3, [r9], #4
 800f224:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f228:	fa1f f883 	uxth.w	r8, r3
 800f22c:	fa17 f78b 	uxtah	r7, r7, fp
 800f230:	0c1b      	lsrs	r3, r3, #16
 800f232:	eba7 0808 	sub.w	r8, r7, r8
 800f236:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f23a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f23e:	fa1f f888 	uxth.w	r8, r8
 800f242:	141f      	asrs	r7, r3, #16
 800f244:	454d      	cmp	r5, r9
 800f246:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f24a:	f84a 3b04 	str.w	r3, [sl], #4
 800f24e:	d8e7      	bhi.n	800f220 <__mdiff+0x7c>
 800f250:	1b2b      	subs	r3, r5, r4
 800f252:	3b15      	subs	r3, #21
 800f254:	f023 0303 	bic.w	r3, r3, #3
 800f258:	3304      	adds	r3, #4
 800f25a:	3415      	adds	r4, #21
 800f25c:	42a5      	cmp	r5, r4
 800f25e:	bf38      	it	cc
 800f260:	2304      	movcc	r3, #4
 800f262:	4419      	add	r1, r3
 800f264:	4473      	add	r3, lr
 800f266:	469e      	mov	lr, r3
 800f268:	460d      	mov	r5, r1
 800f26a:	4565      	cmp	r5, ip
 800f26c:	d30e      	bcc.n	800f28c <__mdiff+0xe8>
 800f26e:	f10c 0203 	add.w	r2, ip, #3
 800f272:	1a52      	subs	r2, r2, r1
 800f274:	f022 0203 	bic.w	r2, r2, #3
 800f278:	3903      	subs	r1, #3
 800f27a:	458c      	cmp	ip, r1
 800f27c:	bf38      	it	cc
 800f27e:	2200      	movcc	r2, #0
 800f280:	441a      	add	r2, r3
 800f282:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f286:	b17b      	cbz	r3, 800f2a8 <__mdiff+0x104>
 800f288:	6106      	str	r6, [r0, #16]
 800f28a:	e7a5      	b.n	800f1d8 <__mdiff+0x34>
 800f28c:	f855 8b04 	ldr.w	r8, [r5], #4
 800f290:	fa17 f488 	uxtah	r4, r7, r8
 800f294:	1422      	asrs	r2, r4, #16
 800f296:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f29a:	b2a4      	uxth	r4, r4
 800f29c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f2a0:	f84e 4b04 	str.w	r4, [lr], #4
 800f2a4:	1417      	asrs	r7, r2, #16
 800f2a6:	e7e0      	b.n	800f26a <__mdiff+0xc6>
 800f2a8:	3e01      	subs	r6, #1
 800f2aa:	e7ea      	b.n	800f282 <__mdiff+0xde>
 800f2ac:	08010714 	.word	0x08010714
 800f2b0:	08010808 	.word	0x08010808

0800f2b4 <__ulp>:
 800f2b4:	b082      	sub	sp, #8
 800f2b6:	ed8d 0b00 	vstr	d0, [sp]
 800f2ba:	9b01      	ldr	r3, [sp, #4]
 800f2bc:	4912      	ldr	r1, [pc, #72]	; (800f308 <__ulp+0x54>)
 800f2be:	4019      	ands	r1, r3
 800f2c0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f2c4:	2900      	cmp	r1, #0
 800f2c6:	dd05      	ble.n	800f2d4 <__ulp+0x20>
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	460b      	mov	r3, r1
 800f2cc:	ec43 2b10 	vmov	d0, r2, r3
 800f2d0:	b002      	add	sp, #8
 800f2d2:	4770      	bx	lr
 800f2d4:	4249      	negs	r1, r1
 800f2d6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f2da:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f2de:	f04f 0200 	mov.w	r2, #0
 800f2e2:	f04f 0300 	mov.w	r3, #0
 800f2e6:	da04      	bge.n	800f2f2 <__ulp+0x3e>
 800f2e8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f2ec:	fa41 f300 	asr.w	r3, r1, r0
 800f2f0:	e7ec      	b.n	800f2cc <__ulp+0x18>
 800f2f2:	f1a0 0114 	sub.w	r1, r0, #20
 800f2f6:	291e      	cmp	r1, #30
 800f2f8:	bfda      	itte	le
 800f2fa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f2fe:	fa20 f101 	lsrle.w	r1, r0, r1
 800f302:	2101      	movgt	r1, #1
 800f304:	460a      	mov	r2, r1
 800f306:	e7e1      	b.n	800f2cc <__ulp+0x18>
 800f308:	7ff00000 	.word	0x7ff00000

0800f30c <__b2d>:
 800f30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f30e:	6905      	ldr	r5, [r0, #16]
 800f310:	f100 0714 	add.w	r7, r0, #20
 800f314:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f318:	1f2e      	subs	r6, r5, #4
 800f31a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f31e:	4620      	mov	r0, r4
 800f320:	f7ff fd52 	bl	800edc8 <__hi0bits>
 800f324:	f1c0 0320 	rsb	r3, r0, #32
 800f328:	280a      	cmp	r0, #10
 800f32a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f3a8 <__b2d+0x9c>
 800f32e:	600b      	str	r3, [r1, #0]
 800f330:	dc14      	bgt.n	800f35c <__b2d+0x50>
 800f332:	f1c0 0e0b 	rsb	lr, r0, #11
 800f336:	fa24 f10e 	lsr.w	r1, r4, lr
 800f33a:	42b7      	cmp	r7, r6
 800f33c:	ea41 030c 	orr.w	r3, r1, ip
 800f340:	bf34      	ite	cc
 800f342:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f346:	2100      	movcs	r1, #0
 800f348:	3015      	adds	r0, #21
 800f34a:	fa04 f000 	lsl.w	r0, r4, r0
 800f34e:	fa21 f10e 	lsr.w	r1, r1, lr
 800f352:	ea40 0201 	orr.w	r2, r0, r1
 800f356:	ec43 2b10 	vmov	d0, r2, r3
 800f35a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f35c:	42b7      	cmp	r7, r6
 800f35e:	bf3a      	itte	cc
 800f360:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f364:	f1a5 0608 	subcc.w	r6, r5, #8
 800f368:	2100      	movcs	r1, #0
 800f36a:	380b      	subs	r0, #11
 800f36c:	d017      	beq.n	800f39e <__b2d+0x92>
 800f36e:	f1c0 0c20 	rsb	ip, r0, #32
 800f372:	fa04 f500 	lsl.w	r5, r4, r0
 800f376:	42be      	cmp	r6, r7
 800f378:	fa21 f40c 	lsr.w	r4, r1, ip
 800f37c:	ea45 0504 	orr.w	r5, r5, r4
 800f380:	bf8c      	ite	hi
 800f382:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f386:	2400      	movls	r4, #0
 800f388:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f38c:	fa01 f000 	lsl.w	r0, r1, r0
 800f390:	fa24 f40c 	lsr.w	r4, r4, ip
 800f394:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f398:	ea40 0204 	orr.w	r2, r0, r4
 800f39c:	e7db      	b.n	800f356 <__b2d+0x4a>
 800f39e:	ea44 030c 	orr.w	r3, r4, ip
 800f3a2:	460a      	mov	r2, r1
 800f3a4:	e7d7      	b.n	800f356 <__b2d+0x4a>
 800f3a6:	bf00      	nop
 800f3a8:	3ff00000 	.word	0x3ff00000

0800f3ac <__d2b>:
 800f3ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f3b0:	4689      	mov	r9, r1
 800f3b2:	2101      	movs	r1, #1
 800f3b4:	ec57 6b10 	vmov	r6, r7, d0
 800f3b8:	4690      	mov	r8, r2
 800f3ba:	f7ff fc0f 	bl	800ebdc <_Balloc>
 800f3be:	4604      	mov	r4, r0
 800f3c0:	b930      	cbnz	r0, 800f3d0 <__d2b+0x24>
 800f3c2:	4602      	mov	r2, r0
 800f3c4:	4b25      	ldr	r3, [pc, #148]	; (800f45c <__d2b+0xb0>)
 800f3c6:	4826      	ldr	r0, [pc, #152]	; (800f460 <__d2b+0xb4>)
 800f3c8:	f240 310a 	movw	r1, #778	; 0x30a
 800f3cc:	f7fb ff90 	bl	800b2f0 <__assert_func>
 800f3d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f3d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f3d8:	bb35      	cbnz	r5, 800f428 <__d2b+0x7c>
 800f3da:	2e00      	cmp	r6, #0
 800f3dc:	9301      	str	r3, [sp, #4]
 800f3de:	d028      	beq.n	800f432 <__d2b+0x86>
 800f3e0:	4668      	mov	r0, sp
 800f3e2:	9600      	str	r6, [sp, #0]
 800f3e4:	f7ff fd10 	bl	800ee08 <__lo0bits>
 800f3e8:	9900      	ldr	r1, [sp, #0]
 800f3ea:	b300      	cbz	r0, 800f42e <__d2b+0x82>
 800f3ec:	9a01      	ldr	r2, [sp, #4]
 800f3ee:	f1c0 0320 	rsb	r3, r0, #32
 800f3f2:	fa02 f303 	lsl.w	r3, r2, r3
 800f3f6:	430b      	orrs	r3, r1
 800f3f8:	40c2      	lsrs	r2, r0
 800f3fa:	6163      	str	r3, [r4, #20]
 800f3fc:	9201      	str	r2, [sp, #4]
 800f3fe:	9b01      	ldr	r3, [sp, #4]
 800f400:	61a3      	str	r3, [r4, #24]
 800f402:	2b00      	cmp	r3, #0
 800f404:	bf14      	ite	ne
 800f406:	2202      	movne	r2, #2
 800f408:	2201      	moveq	r2, #1
 800f40a:	6122      	str	r2, [r4, #16]
 800f40c:	b1d5      	cbz	r5, 800f444 <__d2b+0x98>
 800f40e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f412:	4405      	add	r5, r0
 800f414:	f8c9 5000 	str.w	r5, [r9]
 800f418:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f41c:	f8c8 0000 	str.w	r0, [r8]
 800f420:	4620      	mov	r0, r4
 800f422:	b003      	add	sp, #12
 800f424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f428:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f42c:	e7d5      	b.n	800f3da <__d2b+0x2e>
 800f42e:	6161      	str	r1, [r4, #20]
 800f430:	e7e5      	b.n	800f3fe <__d2b+0x52>
 800f432:	a801      	add	r0, sp, #4
 800f434:	f7ff fce8 	bl	800ee08 <__lo0bits>
 800f438:	9b01      	ldr	r3, [sp, #4]
 800f43a:	6163      	str	r3, [r4, #20]
 800f43c:	2201      	movs	r2, #1
 800f43e:	6122      	str	r2, [r4, #16]
 800f440:	3020      	adds	r0, #32
 800f442:	e7e3      	b.n	800f40c <__d2b+0x60>
 800f444:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f448:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f44c:	f8c9 0000 	str.w	r0, [r9]
 800f450:	6918      	ldr	r0, [r3, #16]
 800f452:	f7ff fcb9 	bl	800edc8 <__hi0bits>
 800f456:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f45a:	e7df      	b.n	800f41c <__d2b+0x70>
 800f45c:	08010714 	.word	0x08010714
 800f460:	08010808 	.word	0x08010808

0800f464 <__ratio>:
 800f464:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f468:	468a      	mov	sl, r1
 800f46a:	4669      	mov	r1, sp
 800f46c:	4683      	mov	fp, r0
 800f46e:	f7ff ff4d 	bl	800f30c <__b2d>
 800f472:	a901      	add	r1, sp, #4
 800f474:	4650      	mov	r0, sl
 800f476:	ec59 8b10 	vmov	r8, r9, d0
 800f47a:	ee10 6a10 	vmov	r6, s0
 800f47e:	f7ff ff45 	bl	800f30c <__b2d>
 800f482:	f8db 3010 	ldr.w	r3, [fp, #16]
 800f486:	f8da 2010 	ldr.w	r2, [sl, #16]
 800f48a:	eba3 0c02 	sub.w	ip, r3, r2
 800f48e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f492:	1a9b      	subs	r3, r3, r2
 800f494:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f498:	ec55 4b10 	vmov	r4, r5, d0
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	ee10 0a10 	vmov	r0, s0
 800f4a2:	bfce      	itee	gt
 800f4a4:	464a      	movgt	r2, r9
 800f4a6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f4aa:	462a      	movle	r2, r5
 800f4ac:	464f      	mov	r7, r9
 800f4ae:	4629      	mov	r1, r5
 800f4b0:	bfcc      	ite	gt
 800f4b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f4b6:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800f4ba:	ec47 6b17 	vmov	d7, r6, r7
 800f4be:	ec41 0b16 	vmov	d6, r0, r1
 800f4c2:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800f4c6:	b003      	add	sp, #12
 800f4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f4cc <__copybits>:
 800f4cc:	3901      	subs	r1, #1
 800f4ce:	b570      	push	{r4, r5, r6, lr}
 800f4d0:	1149      	asrs	r1, r1, #5
 800f4d2:	6914      	ldr	r4, [r2, #16]
 800f4d4:	3101      	adds	r1, #1
 800f4d6:	f102 0314 	add.w	r3, r2, #20
 800f4da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f4de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f4e2:	1f05      	subs	r5, r0, #4
 800f4e4:	42a3      	cmp	r3, r4
 800f4e6:	d30c      	bcc.n	800f502 <__copybits+0x36>
 800f4e8:	1aa3      	subs	r3, r4, r2
 800f4ea:	3b11      	subs	r3, #17
 800f4ec:	f023 0303 	bic.w	r3, r3, #3
 800f4f0:	3211      	adds	r2, #17
 800f4f2:	42a2      	cmp	r2, r4
 800f4f4:	bf88      	it	hi
 800f4f6:	2300      	movhi	r3, #0
 800f4f8:	4418      	add	r0, r3
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	4288      	cmp	r0, r1
 800f4fe:	d305      	bcc.n	800f50c <__copybits+0x40>
 800f500:	bd70      	pop	{r4, r5, r6, pc}
 800f502:	f853 6b04 	ldr.w	r6, [r3], #4
 800f506:	f845 6f04 	str.w	r6, [r5, #4]!
 800f50a:	e7eb      	b.n	800f4e4 <__copybits+0x18>
 800f50c:	f840 3b04 	str.w	r3, [r0], #4
 800f510:	e7f4      	b.n	800f4fc <__copybits+0x30>

0800f512 <__any_on>:
 800f512:	f100 0214 	add.w	r2, r0, #20
 800f516:	6900      	ldr	r0, [r0, #16]
 800f518:	114b      	asrs	r3, r1, #5
 800f51a:	4298      	cmp	r0, r3
 800f51c:	b510      	push	{r4, lr}
 800f51e:	db11      	blt.n	800f544 <__any_on+0x32>
 800f520:	dd0a      	ble.n	800f538 <__any_on+0x26>
 800f522:	f011 011f 	ands.w	r1, r1, #31
 800f526:	d007      	beq.n	800f538 <__any_on+0x26>
 800f528:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f52c:	fa24 f001 	lsr.w	r0, r4, r1
 800f530:	fa00 f101 	lsl.w	r1, r0, r1
 800f534:	428c      	cmp	r4, r1
 800f536:	d10b      	bne.n	800f550 <__any_on+0x3e>
 800f538:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f53c:	4293      	cmp	r3, r2
 800f53e:	d803      	bhi.n	800f548 <__any_on+0x36>
 800f540:	2000      	movs	r0, #0
 800f542:	bd10      	pop	{r4, pc}
 800f544:	4603      	mov	r3, r0
 800f546:	e7f7      	b.n	800f538 <__any_on+0x26>
 800f548:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f54c:	2900      	cmp	r1, #0
 800f54e:	d0f5      	beq.n	800f53c <__any_on+0x2a>
 800f550:	2001      	movs	r0, #1
 800f552:	e7f6      	b.n	800f542 <__any_on+0x30>

0800f554 <_calloc_r>:
 800f554:	b513      	push	{r0, r1, r4, lr}
 800f556:	434a      	muls	r2, r1
 800f558:	4611      	mov	r1, r2
 800f55a:	9201      	str	r2, [sp, #4]
 800f55c:	f7fb ffb2 	bl	800b4c4 <_malloc_r>
 800f560:	4604      	mov	r4, r0
 800f562:	b118      	cbz	r0, 800f56c <_calloc_r+0x18>
 800f564:	9a01      	ldr	r2, [sp, #4]
 800f566:	2100      	movs	r1, #0
 800f568:	f7fb ff54 	bl	800b414 <memset>
 800f56c:	4620      	mov	r0, r4
 800f56e:	b002      	add	sp, #8
 800f570:	bd10      	pop	{r4, pc}

0800f572 <_realloc_r>:
 800f572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f574:	4607      	mov	r7, r0
 800f576:	4614      	mov	r4, r2
 800f578:	460e      	mov	r6, r1
 800f57a:	b921      	cbnz	r1, 800f586 <_realloc_r+0x14>
 800f57c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f580:	4611      	mov	r1, r2
 800f582:	f7fb bf9f 	b.w	800b4c4 <_malloc_r>
 800f586:	b922      	cbnz	r2, 800f592 <_realloc_r+0x20>
 800f588:	f7fb ff4c 	bl	800b424 <_free_r>
 800f58c:	4625      	mov	r5, r4
 800f58e:	4628      	mov	r0, r5
 800f590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f592:	f000 fa63 	bl	800fa5c <_malloc_usable_size_r>
 800f596:	42a0      	cmp	r0, r4
 800f598:	d20f      	bcs.n	800f5ba <_realloc_r+0x48>
 800f59a:	4621      	mov	r1, r4
 800f59c:	4638      	mov	r0, r7
 800f59e:	f7fb ff91 	bl	800b4c4 <_malloc_r>
 800f5a2:	4605      	mov	r5, r0
 800f5a4:	2800      	cmp	r0, #0
 800f5a6:	d0f2      	beq.n	800f58e <_realloc_r+0x1c>
 800f5a8:	4631      	mov	r1, r6
 800f5aa:	4622      	mov	r2, r4
 800f5ac:	f7fb ff0a 	bl	800b3c4 <memcpy>
 800f5b0:	4631      	mov	r1, r6
 800f5b2:	4638      	mov	r0, r7
 800f5b4:	f7fb ff36 	bl	800b424 <_free_r>
 800f5b8:	e7e9      	b.n	800f58e <_realloc_r+0x1c>
 800f5ba:	4635      	mov	r5, r6
 800f5bc:	e7e7      	b.n	800f58e <_realloc_r+0x1c>

0800f5be <__ssputs_r>:
 800f5be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5c2:	688e      	ldr	r6, [r1, #8]
 800f5c4:	429e      	cmp	r6, r3
 800f5c6:	4682      	mov	sl, r0
 800f5c8:	460c      	mov	r4, r1
 800f5ca:	4690      	mov	r8, r2
 800f5cc:	461f      	mov	r7, r3
 800f5ce:	d838      	bhi.n	800f642 <__ssputs_r+0x84>
 800f5d0:	898a      	ldrh	r2, [r1, #12]
 800f5d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f5d6:	d032      	beq.n	800f63e <__ssputs_r+0x80>
 800f5d8:	6825      	ldr	r5, [r4, #0]
 800f5da:	6909      	ldr	r1, [r1, #16]
 800f5dc:	eba5 0901 	sub.w	r9, r5, r1
 800f5e0:	6965      	ldr	r5, [r4, #20]
 800f5e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f5e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f5ea:	3301      	adds	r3, #1
 800f5ec:	444b      	add	r3, r9
 800f5ee:	106d      	asrs	r5, r5, #1
 800f5f0:	429d      	cmp	r5, r3
 800f5f2:	bf38      	it	cc
 800f5f4:	461d      	movcc	r5, r3
 800f5f6:	0553      	lsls	r3, r2, #21
 800f5f8:	d531      	bpl.n	800f65e <__ssputs_r+0xa0>
 800f5fa:	4629      	mov	r1, r5
 800f5fc:	f7fb ff62 	bl	800b4c4 <_malloc_r>
 800f600:	4606      	mov	r6, r0
 800f602:	b950      	cbnz	r0, 800f61a <__ssputs_r+0x5c>
 800f604:	230c      	movs	r3, #12
 800f606:	f8ca 3000 	str.w	r3, [sl]
 800f60a:	89a3      	ldrh	r3, [r4, #12]
 800f60c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f610:	81a3      	strh	r3, [r4, #12]
 800f612:	f04f 30ff 	mov.w	r0, #4294967295
 800f616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f61a:	6921      	ldr	r1, [r4, #16]
 800f61c:	464a      	mov	r2, r9
 800f61e:	f7fb fed1 	bl	800b3c4 <memcpy>
 800f622:	89a3      	ldrh	r3, [r4, #12]
 800f624:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f62c:	81a3      	strh	r3, [r4, #12]
 800f62e:	6126      	str	r6, [r4, #16]
 800f630:	6165      	str	r5, [r4, #20]
 800f632:	444e      	add	r6, r9
 800f634:	eba5 0509 	sub.w	r5, r5, r9
 800f638:	6026      	str	r6, [r4, #0]
 800f63a:	60a5      	str	r5, [r4, #8]
 800f63c:	463e      	mov	r6, r7
 800f63e:	42be      	cmp	r6, r7
 800f640:	d900      	bls.n	800f644 <__ssputs_r+0x86>
 800f642:	463e      	mov	r6, r7
 800f644:	4632      	mov	r2, r6
 800f646:	6820      	ldr	r0, [r4, #0]
 800f648:	4641      	mov	r1, r8
 800f64a:	f7fb fec9 	bl	800b3e0 <memmove>
 800f64e:	68a3      	ldr	r3, [r4, #8]
 800f650:	6822      	ldr	r2, [r4, #0]
 800f652:	1b9b      	subs	r3, r3, r6
 800f654:	4432      	add	r2, r6
 800f656:	60a3      	str	r3, [r4, #8]
 800f658:	6022      	str	r2, [r4, #0]
 800f65a:	2000      	movs	r0, #0
 800f65c:	e7db      	b.n	800f616 <__ssputs_r+0x58>
 800f65e:	462a      	mov	r2, r5
 800f660:	f7ff ff87 	bl	800f572 <_realloc_r>
 800f664:	4606      	mov	r6, r0
 800f666:	2800      	cmp	r0, #0
 800f668:	d1e1      	bne.n	800f62e <__ssputs_r+0x70>
 800f66a:	6921      	ldr	r1, [r4, #16]
 800f66c:	4650      	mov	r0, sl
 800f66e:	f7fb fed9 	bl	800b424 <_free_r>
 800f672:	e7c7      	b.n	800f604 <__ssputs_r+0x46>

0800f674 <_svfiprintf_r>:
 800f674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f678:	4698      	mov	r8, r3
 800f67a:	898b      	ldrh	r3, [r1, #12]
 800f67c:	061b      	lsls	r3, r3, #24
 800f67e:	b09d      	sub	sp, #116	; 0x74
 800f680:	4607      	mov	r7, r0
 800f682:	460d      	mov	r5, r1
 800f684:	4614      	mov	r4, r2
 800f686:	d50e      	bpl.n	800f6a6 <_svfiprintf_r+0x32>
 800f688:	690b      	ldr	r3, [r1, #16]
 800f68a:	b963      	cbnz	r3, 800f6a6 <_svfiprintf_r+0x32>
 800f68c:	2140      	movs	r1, #64	; 0x40
 800f68e:	f7fb ff19 	bl	800b4c4 <_malloc_r>
 800f692:	6028      	str	r0, [r5, #0]
 800f694:	6128      	str	r0, [r5, #16]
 800f696:	b920      	cbnz	r0, 800f6a2 <_svfiprintf_r+0x2e>
 800f698:	230c      	movs	r3, #12
 800f69a:	603b      	str	r3, [r7, #0]
 800f69c:	f04f 30ff 	mov.w	r0, #4294967295
 800f6a0:	e0d1      	b.n	800f846 <_svfiprintf_r+0x1d2>
 800f6a2:	2340      	movs	r3, #64	; 0x40
 800f6a4:	616b      	str	r3, [r5, #20]
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	9309      	str	r3, [sp, #36]	; 0x24
 800f6aa:	2320      	movs	r3, #32
 800f6ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f6b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800f6b4:	2330      	movs	r3, #48	; 0x30
 800f6b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f860 <_svfiprintf_r+0x1ec>
 800f6ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f6be:	f04f 0901 	mov.w	r9, #1
 800f6c2:	4623      	mov	r3, r4
 800f6c4:	469a      	mov	sl, r3
 800f6c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6ca:	b10a      	cbz	r2, 800f6d0 <_svfiprintf_r+0x5c>
 800f6cc:	2a25      	cmp	r2, #37	; 0x25
 800f6ce:	d1f9      	bne.n	800f6c4 <_svfiprintf_r+0x50>
 800f6d0:	ebba 0b04 	subs.w	fp, sl, r4
 800f6d4:	d00b      	beq.n	800f6ee <_svfiprintf_r+0x7a>
 800f6d6:	465b      	mov	r3, fp
 800f6d8:	4622      	mov	r2, r4
 800f6da:	4629      	mov	r1, r5
 800f6dc:	4638      	mov	r0, r7
 800f6de:	f7ff ff6e 	bl	800f5be <__ssputs_r>
 800f6e2:	3001      	adds	r0, #1
 800f6e4:	f000 80aa 	beq.w	800f83c <_svfiprintf_r+0x1c8>
 800f6e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6ea:	445a      	add	r2, fp
 800f6ec:	9209      	str	r2, [sp, #36]	; 0x24
 800f6ee:	f89a 3000 	ldrb.w	r3, [sl]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	f000 80a2 	beq.w	800f83c <_svfiprintf_r+0x1c8>
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	f04f 32ff 	mov.w	r2, #4294967295
 800f6fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f702:	f10a 0a01 	add.w	sl, sl, #1
 800f706:	9304      	str	r3, [sp, #16]
 800f708:	9307      	str	r3, [sp, #28]
 800f70a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f70e:	931a      	str	r3, [sp, #104]	; 0x68
 800f710:	4654      	mov	r4, sl
 800f712:	2205      	movs	r2, #5
 800f714:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f718:	4851      	ldr	r0, [pc, #324]	; (800f860 <_svfiprintf_r+0x1ec>)
 800f71a:	f7f0 fdf9 	bl	8000310 <memchr>
 800f71e:	9a04      	ldr	r2, [sp, #16]
 800f720:	b9d8      	cbnz	r0, 800f75a <_svfiprintf_r+0xe6>
 800f722:	06d0      	lsls	r0, r2, #27
 800f724:	bf44      	itt	mi
 800f726:	2320      	movmi	r3, #32
 800f728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f72c:	0711      	lsls	r1, r2, #28
 800f72e:	bf44      	itt	mi
 800f730:	232b      	movmi	r3, #43	; 0x2b
 800f732:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f736:	f89a 3000 	ldrb.w	r3, [sl]
 800f73a:	2b2a      	cmp	r3, #42	; 0x2a
 800f73c:	d015      	beq.n	800f76a <_svfiprintf_r+0xf6>
 800f73e:	9a07      	ldr	r2, [sp, #28]
 800f740:	4654      	mov	r4, sl
 800f742:	2000      	movs	r0, #0
 800f744:	f04f 0c0a 	mov.w	ip, #10
 800f748:	4621      	mov	r1, r4
 800f74a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f74e:	3b30      	subs	r3, #48	; 0x30
 800f750:	2b09      	cmp	r3, #9
 800f752:	d94e      	bls.n	800f7f2 <_svfiprintf_r+0x17e>
 800f754:	b1b0      	cbz	r0, 800f784 <_svfiprintf_r+0x110>
 800f756:	9207      	str	r2, [sp, #28]
 800f758:	e014      	b.n	800f784 <_svfiprintf_r+0x110>
 800f75a:	eba0 0308 	sub.w	r3, r0, r8
 800f75e:	fa09 f303 	lsl.w	r3, r9, r3
 800f762:	4313      	orrs	r3, r2
 800f764:	9304      	str	r3, [sp, #16]
 800f766:	46a2      	mov	sl, r4
 800f768:	e7d2      	b.n	800f710 <_svfiprintf_r+0x9c>
 800f76a:	9b03      	ldr	r3, [sp, #12]
 800f76c:	1d19      	adds	r1, r3, #4
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	9103      	str	r1, [sp, #12]
 800f772:	2b00      	cmp	r3, #0
 800f774:	bfbb      	ittet	lt
 800f776:	425b      	neglt	r3, r3
 800f778:	f042 0202 	orrlt.w	r2, r2, #2
 800f77c:	9307      	strge	r3, [sp, #28]
 800f77e:	9307      	strlt	r3, [sp, #28]
 800f780:	bfb8      	it	lt
 800f782:	9204      	strlt	r2, [sp, #16]
 800f784:	7823      	ldrb	r3, [r4, #0]
 800f786:	2b2e      	cmp	r3, #46	; 0x2e
 800f788:	d10c      	bne.n	800f7a4 <_svfiprintf_r+0x130>
 800f78a:	7863      	ldrb	r3, [r4, #1]
 800f78c:	2b2a      	cmp	r3, #42	; 0x2a
 800f78e:	d135      	bne.n	800f7fc <_svfiprintf_r+0x188>
 800f790:	9b03      	ldr	r3, [sp, #12]
 800f792:	1d1a      	adds	r2, r3, #4
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	9203      	str	r2, [sp, #12]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	bfb8      	it	lt
 800f79c:	f04f 33ff 	movlt.w	r3, #4294967295
 800f7a0:	3402      	adds	r4, #2
 800f7a2:	9305      	str	r3, [sp, #20]
 800f7a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f870 <_svfiprintf_r+0x1fc>
 800f7a8:	7821      	ldrb	r1, [r4, #0]
 800f7aa:	2203      	movs	r2, #3
 800f7ac:	4650      	mov	r0, sl
 800f7ae:	f7f0 fdaf 	bl	8000310 <memchr>
 800f7b2:	b140      	cbz	r0, 800f7c6 <_svfiprintf_r+0x152>
 800f7b4:	2340      	movs	r3, #64	; 0x40
 800f7b6:	eba0 000a 	sub.w	r0, r0, sl
 800f7ba:	fa03 f000 	lsl.w	r0, r3, r0
 800f7be:	9b04      	ldr	r3, [sp, #16]
 800f7c0:	4303      	orrs	r3, r0
 800f7c2:	3401      	adds	r4, #1
 800f7c4:	9304      	str	r3, [sp, #16]
 800f7c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7ca:	4826      	ldr	r0, [pc, #152]	; (800f864 <_svfiprintf_r+0x1f0>)
 800f7cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f7d0:	2206      	movs	r2, #6
 800f7d2:	f7f0 fd9d 	bl	8000310 <memchr>
 800f7d6:	2800      	cmp	r0, #0
 800f7d8:	d038      	beq.n	800f84c <_svfiprintf_r+0x1d8>
 800f7da:	4b23      	ldr	r3, [pc, #140]	; (800f868 <_svfiprintf_r+0x1f4>)
 800f7dc:	bb1b      	cbnz	r3, 800f826 <_svfiprintf_r+0x1b2>
 800f7de:	9b03      	ldr	r3, [sp, #12]
 800f7e0:	3307      	adds	r3, #7
 800f7e2:	f023 0307 	bic.w	r3, r3, #7
 800f7e6:	3308      	adds	r3, #8
 800f7e8:	9303      	str	r3, [sp, #12]
 800f7ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7ec:	4433      	add	r3, r6
 800f7ee:	9309      	str	r3, [sp, #36]	; 0x24
 800f7f0:	e767      	b.n	800f6c2 <_svfiprintf_r+0x4e>
 800f7f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f7f6:	460c      	mov	r4, r1
 800f7f8:	2001      	movs	r0, #1
 800f7fa:	e7a5      	b.n	800f748 <_svfiprintf_r+0xd4>
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	3401      	adds	r4, #1
 800f800:	9305      	str	r3, [sp, #20]
 800f802:	4619      	mov	r1, r3
 800f804:	f04f 0c0a 	mov.w	ip, #10
 800f808:	4620      	mov	r0, r4
 800f80a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f80e:	3a30      	subs	r2, #48	; 0x30
 800f810:	2a09      	cmp	r2, #9
 800f812:	d903      	bls.n	800f81c <_svfiprintf_r+0x1a8>
 800f814:	2b00      	cmp	r3, #0
 800f816:	d0c5      	beq.n	800f7a4 <_svfiprintf_r+0x130>
 800f818:	9105      	str	r1, [sp, #20]
 800f81a:	e7c3      	b.n	800f7a4 <_svfiprintf_r+0x130>
 800f81c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f820:	4604      	mov	r4, r0
 800f822:	2301      	movs	r3, #1
 800f824:	e7f0      	b.n	800f808 <_svfiprintf_r+0x194>
 800f826:	ab03      	add	r3, sp, #12
 800f828:	9300      	str	r3, [sp, #0]
 800f82a:	462a      	mov	r2, r5
 800f82c:	4b0f      	ldr	r3, [pc, #60]	; (800f86c <_svfiprintf_r+0x1f8>)
 800f82e:	a904      	add	r1, sp, #16
 800f830:	4638      	mov	r0, r7
 800f832:	f7fc f88d 	bl	800b950 <_printf_float>
 800f836:	1c42      	adds	r2, r0, #1
 800f838:	4606      	mov	r6, r0
 800f83a:	d1d6      	bne.n	800f7ea <_svfiprintf_r+0x176>
 800f83c:	89ab      	ldrh	r3, [r5, #12]
 800f83e:	065b      	lsls	r3, r3, #25
 800f840:	f53f af2c 	bmi.w	800f69c <_svfiprintf_r+0x28>
 800f844:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f846:	b01d      	add	sp, #116	; 0x74
 800f848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f84c:	ab03      	add	r3, sp, #12
 800f84e:	9300      	str	r3, [sp, #0]
 800f850:	462a      	mov	r2, r5
 800f852:	4b06      	ldr	r3, [pc, #24]	; (800f86c <_svfiprintf_r+0x1f8>)
 800f854:	a904      	add	r1, sp, #16
 800f856:	4638      	mov	r0, r7
 800f858:	f7fc fb06 	bl	800be68 <_printf_i>
 800f85c:	e7eb      	b.n	800f836 <_svfiprintf_r+0x1c2>
 800f85e:	bf00      	nop
 800f860:	080104f0 	.word	0x080104f0
 800f864:	080104fa 	.word	0x080104fa
 800f868:	0800b951 	.word	0x0800b951
 800f86c:	0800f5bf 	.word	0x0800f5bf
 800f870:	080104f6 	.word	0x080104f6
 800f874:	00000000 	.word	0x00000000

0800f878 <nan>:
 800f878:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f880 <nan+0x8>
 800f87c:	4770      	bx	lr
 800f87e:	bf00      	nop
 800f880:	00000000 	.word	0x00000000
 800f884:	7ff80000 	.word	0x7ff80000

0800f888 <_raise_r>:
 800f888:	291f      	cmp	r1, #31
 800f88a:	b538      	push	{r3, r4, r5, lr}
 800f88c:	4604      	mov	r4, r0
 800f88e:	460d      	mov	r5, r1
 800f890:	d904      	bls.n	800f89c <_raise_r+0x14>
 800f892:	2316      	movs	r3, #22
 800f894:	6003      	str	r3, [r0, #0]
 800f896:	f04f 30ff 	mov.w	r0, #4294967295
 800f89a:	bd38      	pop	{r3, r4, r5, pc}
 800f89c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f89e:	b112      	cbz	r2, 800f8a6 <_raise_r+0x1e>
 800f8a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f8a4:	b94b      	cbnz	r3, 800f8ba <_raise_r+0x32>
 800f8a6:	4620      	mov	r0, r4
 800f8a8:	f000 f830 	bl	800f90c <_getpid_r>
 800f8ac:	462a      	mov	r2, r5
 800f8ae:	4601      	mov	r1, r0
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8b6:	f000 b817 	b.w	800f8e8 <_kill_r>
 800f8ba:	2b01      	cmp	r3, #1
 800f8bc:	d00a      	beq.n	800f8d4 <_raise_r+0x4c>
 800f8be:	1c59      	adds	r1, r3, #1
 800f8c0:	d103      	bne.n	800f8ca <_raise_r+0x42>
 800f8c2:	2316      	movs	r3, #22
 800f8c4:	6003      	str	r3, [r0, #0]
 800f8c6:	2001      	movs	r0, #1
 800f8c8:	e7e7      	b.n	800f89a <_raise_r+0x12>
 800f8ca:	2400      	movs	r4, #0
 800f8cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f8d0:	4628      	mov	r0, r5
 800f8d2:	4798      	blx	r3
 800f8d4:	2000      	movs	r0, #0
 800f8d6:	e7e0      	b.n	800f89a <_raise_r+0x12>

0800f8d8 <raise>:
 800f8d8:	4b02      	ldr	r3, [pc, #8]	; (800f8e4 <raise+0xc>)
 800f8da:	4601      	mov	r1, r0
 800f8dc:	6818      	ldr	r0, [r3, #0]
 800f8de:	f7ff bfd3 	b.w	800f888 <_raise_r>
 800f8e2:	bf00      	nop
 800f8e4:	240000c0 	.word	0x240000c0

0800f8e8 <_kill_r>:
 800f8e8:	b538      	push	{r3, r4, r5, lr}
 800f8ea:	4d07      	ldr	r5, [pc, #28]	; (800f908 <_kill_r+0x20>)
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	4604      	mov	r4, r0
 800f8f0:	4608      	mov	r0, r1
 800f8f2:	4611      	mov	r1, r2
 800f8f4:	602b      	str	r3, [r5, #0]
 800f8f6:	f7f1 ffc1 	bl	800187c <_kill>
 800f8fa:	1c43      	adds	r3, r0, #1
 800f8fc:	d102      	bne.n	800f904 <_kill_r+0x1c>
 800f8fe:	682b      	ldr	r3, [r5, #0]
 800f900:	b103      	cbz	r3, 800f904 <_kill_r+0x1c>
 800f902:	6023      	str	r3, [r4, #0]
 800f904:	bd38      	pop	{r3, r4, r5, pc}
 800f906:	bf00      	nop
 800f908:	24000ccc 	.word	0x24000ccc

0800f90c <_getpid_r>:
 800f90c:	f7f1 bfae 	b.w	800186c <_getpid>

0800f910 <__sread>:
 800f910:	b510      	push	{r4, lr}
 800f912:	460c      	mov	r4, r1
 800f914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f918:	f000 f8a8 	bl	800fa6c <_read_r>
 800f91c:	2800      	cmp	r0, #0
 800f91e:	bfab      	itete	ge
 800f920:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f922:	89a3      	ldrhlt	r3, [r4, #12]
 800f924:	181b      	addge	r3, r3, r0
 800f926:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f92a:	bfac      	ite	ge
 800f92c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f92e:	81a3      	strhlt	r3, [r4, #12]
 800f930:	bd10      	pop	{r4, pc}

0800f932 <__swrite>:
 800f932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f936:	461f      	mov	r7, r3
 800f938:	898b      	ldrh	r3, [r1, #12]
 800f93a:	05db      	lsls	r3, r3, #23
 800f93c:	4605      	mov	r5, r0
 800f93e:	460c      	mov	r4, r1
 800f940:	4616      	mov	r6, r2
 800f942:	d505      	bpl.n	800f950 <__swrite+0x1e>
 800f944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f948:	2302      	movs	r3, #2
 800f94a:	2200      	movs	r2, #0
 800f94c:	f000 f874 	bl	800fa38 <_lseek_r>
 800f950:	89a3      	ldrh	r3, [r4, #12]
 800f952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f956:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f95a:	81a3      	strh	r3, [r4, #12]
 800f95c:	4632      	mov	r2, r6
 800f95e:	463b      	mov	r3, r7
 800f960:	4628      	mov	r0, r5
 800f962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f966:	f000 b823 	b.w	800f9b0 <_write_r>

0800f96a <__sseek>:
 800f96a:	b510      	push	{r4, lr}
 800f96c:	460c      	mov	r4, r1
 800f96e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f972:	f000 f861 	bl	800fa38 <_lseek_r>
 800f976:	1c43      	adds	r3, r0, #1
 800f978:	89a3      	ldrh	r3, [r4, #12]
 800f97a:	bf15      	itete	ne
 800f97c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f97e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f982:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f986:	81a3      	strheq	r3, [r4, #12]
 800f988:	bf18      	it	ne
 800f98a:	81a3      	strhne	r3, [r4, #12]
 800f98c:	bd10      	pop	{r4, pc}

0800f98e <__sclose>:
 800f98e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f992:	f000 b81f 	b.w	800f9d4 <_close_r>

0800f996 <__ascii_wctomb>:
 800f996:	b149      	cbz	r1, 800f9ac <__ascii_wctomb+0x16>
 800f998:	2aff      	cmp	r2, #255	; 0xff
 800f99a:	bf85      	ittet	hi
 800f99c:	238a      	movhi	r3, #138	; 0x8a
 800f99e:	6003      	strhi	r3, [r0, #0]
 800f9a0:	700a      	strbls	r2, [r1, #0]
 800f9a2:	f04f 30ff 	movhi.w	r0, #4294967295
 800f9a6:	bf98      	it	ls
 800f9a8:	2001      	movls	r0, #1
 800f9aa:	4770      	bx	lr
 800f9ac:	4608      	mov	r0, r1
 800f9ae:	4770      	bx	lr

0800f9b0 <_write_r>:
 800f9b0:	b538      	push	{r3, r4, r5, lr}
 800f9b2:	4d07      	ldr	r5, [pc, #28]	; (800f9d0 <_write_r+0x20>)
 800f9b4:	4604      	mov	r4, r0
 800f9b6:	4608      	mov	r0, r1
 800f9b8:	4611      	mov	r1, r2
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	602a      	str	r2, [r5, #0]
 800f9be:	461a      	mov	r2, r3
 800f9c0:	f7f1 ff93 	bl	80018ea <_write>
 800f9c4:	1c43      	adds	r3, r0, #1
 800f9c6:	d102      	bne.n	800f9ce <_write_r+0x1e>
 800f9c8:	682b      	ldr	r3, [r5, #0]
 800f9ca:	b103      	cbz	r3, 800f9ce <_write_r+0x1e>
 800f9cc:	6023      	str	r3, [r4, #0]
 800f9ce:	bd38      	pop	{r3, r4, r5, pc}
 800f9d0:	24000ccc 	.word	0x24000ccc

0800f9d4 <_close_r>:
 800f9d4:	b538      	push	{r3, r4, r5, lr}
 800f9d6:	4d06      	ldr	r5, [pc, #24]	; (800f9f0 <_close_r+0x1c>)
 800f9d8:	2300      	movs	r3, #0
 800f9da:	4604      	mov	r4, r0
 800f9dc:	4608      	mov	r0, r1
 800f9de:	602b      	str	r3, [r5, #0]
 800f9e0:	f7f1 ff9f 	bl	8001922 <_close>
 800f9e4:	1c43      	adds	r3, r0, #1
 800f9e6:	d102      	bne.n	800f9ee <_close_r+0x1a>
 800f9e8:	682b      	ldr	r3, [r5, #0]
 800f9ea:	b103      	cbz	r3, 800f9ee <_close_r+0x1a>
 800f9ec:	6023      	str	r3, [r4, #0]
 800f9ee:	bd38      	pop	{r3, r4, r5, pc}
 800f9f0:	24000ccc 	.word	0x24000ccc

0800f9f4 <_fstat_r>:
 800f9f4:	b538      	push	{r3, r4, r5, lr}
 800f9f6:	4d07      	ldr	r5, [pc, #28]	; (800fa14 <_fstat_r+0x20>)
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	4604      	mov	r4, r0
 800f9fc:	4608      	mov	r0, r1
 800f9fe:	4611      	mov	r1, r2
 800fa00:	602b      	str	r3, [r5, #0]
 800fa02:	f7f1 ff9a 	bl	800193a <_fstat>
 800fa06:	1c43      	adds	r3, r0, #1
 800fa08:	d102      	bne.n	800fa10 <_fstat_r+0x1c>
 800fa0a:	682b      	ldr	r3, [r5, #0]
 800fa0c:	b103      	cbz	r3, 800fa10 <_fstat_r+0x1c>
 800fa0e:	6023      	str	r3, [r4, #0]
 800fa10:	bd38      	pop	{r3, r4, r5, pc}
 800fa12:	bf00      	nop
 800fa14:	24000ccc 	.word	0x24000ccc

0800fa18 <_isatty_r>:
 800fa18:	b538      	push	{r3, r4, r5, lr}
 800fa1a:	4d06      	ldr	r5, [pc, #24]	; (800fa34 <_isatty_r+0x1c>)
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	4604      	mov	r4, r0
 800fa20:	4608      	mov	r0, r1
 800fa22:	602b      	str	r3, [r5, #0]
 800fa24:	f7f1 ff99 	bl	800195a <_isatty>
 800fa28:	1c43      	adds	r3, r0, #1
 800fa2a:	d102      	bne.n	800fa32 <_isatty_r+0x1a>
 800fa2c:	682b      	ldr	r3, [r5, #0]
 800fa2e:	b103      	cbz	r3, 800fa32 <_isatty_r+0x1a>
 800fa30:	6023      	str	r3, [r4, #0]
 800fa32:	bd38      	pop	{r3, r4, r5, pc}
 800fa34:	24000ccc 	.word	0x24000ccc

0800fa38 <_lseek_r>:
 800fa38:	b538      	push	{r3, r4, r5, lr}
 800fa3a:	4d07      	ldr	r5, [pc, #28]	; (800fa58 <_lseek_r+0x20>)
 800fa3c:	4604      	mov	r4, r0
 800fa3e:	4608      	mov	r0, r1
 800fa40:	4611      	mov	r1, r2
 800fa42:	2200      	movs	r2, #0
 800fa44:	602a      	str	r2, [r5, #0]
 800fa46:	461a      	mov	r2, r3
 800fa48:	f7f1 ff92 	bl	8001970 <_lseek>
 800fa4c:	1c43      	adds	r3, r0, #1
 800fa4e:	d102      	bne.n	800fa56 <_lseek_r+0x1e>
 800fa50:	682b      	ldr	r3, [r5, #0]
 800fa52:	b103      	cbz	r3, 800fa56 <_lseek_r+0x1e>
 800fa54:	6023      	str	r3, [r4, #0]
 800fa56:	bd38      	pop	{r3, r4, r5, pc}
 800fa58:	24000ccc 	.word	0x24000ccc

0800fa5c <_malloc_usable_size_r>:
 800fa5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa60:	1f18      	subs	r0, r3, #4
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	bfbc      	itt	lt
 800fa66:	580b      	ldrlt	r3, [r1, r0]
 800fa68:	18c0      	addlt	r0, r0, r3
 800fa6a:	4770      	bx	lr

0800fa6c <_read_r>:
 800fa6c:	b538      	push	{r3, r4, r5, lr}
 800fa6e:	4d07      	ldr	r5, [pc, #28]	; (800fa8c <_read_r+0x20>)
 800fa70:	4604      	mov	r4, r0
 800fa72:	4608      	mov	r0, r1
 800fa74:	4611      	mov	r1, r2
 800fa76:	2200      	movs	r2, #0
 800fa78:	602a      	str	r2, [r5, #0]
 800fa7a:	461a      	mov	r2, r3
 800fa7c:	f7f1 ff18 	bl	80018b0 <_read>
 800fa80:	1c43      	adds	r3, r0, #1
 800fa82:	d102      	bne.n	800fa8a <_read_r+0x1e>
 800fa84:	682b      	ldr	r3, [r5, #0]
 800fa86:	b103      	cbz	r3, 800fa8a <_read_r+0x1e>
 800fa88:	6023      	str	r3, [r4, #0]
 800fa8a:	bd38      	pop	{r3, r4, r5, pc}
 800fa8c:	24000ccc 	.word	0x24000ccc

0800fa90 <_init>:
 800fa90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa92:	bf00      	nop
 800fa94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa96:	bc08      	pop	{r3}
 800fa98:	469e      	mov	lr, r3
 800fa9a:	4770      	bx	lr

0800fa9c <_fini>:
 800fa9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa9e:	bf00      	nop
 800faa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800faa2:	bc08      	pop	{r3}
 800faa4:	469e      	mov	lr, r3
 800faa6:	4770      	bx	lr
